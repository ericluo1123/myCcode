

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Jan 16 08:12:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002D                     _RA5	set	45
  1335  002E                     _RA6	set	46
  1336  002F                     _RA7	set	47
  1337  0032                     _RB2	set	50
  1338  0033                     _RB3	set	51
  1339  0060                     _TMR1IF	set	96
  1340  009F                     _ADCON1	set	159
  1341  009D                     _FVRCON	set	157
  1342  0090                     _OSCCON	set	144
  1343  0085                     _TRISA	set	133
  1344  0086                     _TRISB	set	134
  1345  0087                     _TRISC	set	135
  1346  0095                     _WPUB	set	149
  1347  0408                     _PS0	set	1032
  1348  0409                     _PS1	set	1033
  1349  040A                     _PS2	set	1034
  1350  040B                     _PSA	set	1035
  1351  0460                     _TMR1IE	set	1120
  1352  0185                     _ANSELA	set	389
  1353  0186                     _ANSELB	set	390
  1354                           
  1355                           	psect	text0
  1356  0000                     __ptext0:	
  1357                           ; #config settings
  1358                           
  1359                           
  1360                           ;psect for function _TMR1_ISR
  1361  0000                     
  1362                           	psect	cinit
  1363  0013                     start_initialization:	
  1364  0013                     __initialization:	
  1365                           
  1366                           ; Clear objects allocated to COMMON
  1367  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1368  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1369  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1370  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1371                           
  1372                           ; Clear objects allocated to BANK0
  1373  0017  1383               	bcf	3,7	;select IRP bank0
  1374  0018  3020               	movlw	low __pbssBANK0
  1375  0019  0084               	movwf	4
  1376  001A  304C               	movlw	low (__pbssBANK0+44)
  1377  001B  158A  22EA  118A   	fcall	clear_ram0
  1378                           
  1379                           ; Clear objects allocated to BANK1
  1380  001E  30A0               	movlw	low __pbssBANK1
  1381  001F  0084               	movwf	4
  1382  0020  30E6               	movlw	low (__pbssBANK1+70)
  1383  0021  158A  22EA         	fcall	clear_ram0
  1384  0023                     end_of_initialization:	
  1385                           ;End of C runtime variable initialization code
  1386                           
  1387  0023                     __end_of__initialization:	
  1388  0023  0183               	clrf	3
  1389  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1390                           
  1391                           	psect	bssCOMMON
  1392  0076                     __pbssCOMMON:	
  1393  0076                     _LED:	
  1394  0076                     	ds	1
  1395  0077                     _Light:	
  1396  0077                     	ds	1
  1397  0078                     _Lights:	
  1398  0078                     	ds	1
  1399  0079                     _LightsControl:	
  1400  0079                     	ds	1
  1401                           
  1402                           	psect	bssBANK0
  1403  0020                     __pbssBANK0:	
  1404  0020                     _SYSC:	
  1405  0020                     	ds	5
  1406  0025                     _myMain:	
  1407  0025                     	ds	5
  1408  002A                     _PIRLED:	
  1409  002A                     	ds	4
  1410  002E                     __CDS:	
  1411  002E                     	ds	4
  1412  0032                     _Timer1:	
  1413  0032                     	ds	3
  1414  0035                     _WDT:	
  1415  0035                     	ds	2
  1416  0037                     _Cmd:	
  1417  0037                     	ds	1
  1418  0038                     _SwDetect:	
  1419  0038                     	ds	1
  1420  0039                     _Temp:	
  1421  0039                     	ds	6
  1422  003F                     _Lights1:	
  1423  003F                     	ds	5
  1424  0044                     _VarLED1:	
  1425  0044                     	ds	4
  1426  0048                     _VarLED2:	
  1427  0048                     	ds	4
  1428                           
  1429                           	psect	bssBANK1
  1430  00A0                     __pbssBANK1:	
  1431  00A0                     __PIR:	
  1432  00A0                     	ds	42
  1433  00CA                     _Load:	
  1434  00CA                     	ds	28
  1435                           
  1436                           	psect	clrtext
  1437  0AEA                     clear_ram0:	
  1438                           ;	Called with FSR containing the base address, and
  1439                           ;	W with the last address+1
  1440                           
  1441  0AEA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1442  0AEB                     clrloop0:	
  1443  0AEB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1444  0AEC  0A84               	incf	4,f	;increment pointer
  1445  0AED  0604               	xorwf	4,w	;XOR with final address
  1446  0AEE  1903               	btfsc	3,2	;have we reached the end yet?
  1447  0AEF  3400               	retlw	0	;all done for this memory range, return
  1448  0AF0  0604               	xorwf	4,w	;XOR again to restore value
  1449  0AF1  2AEB               	goto	clrloop0	;do the next byte
  1450                           
  1451                           	psect	cstackCOMMON
  1452  0070                     __pcstackCOMMON:	
  1453  0070                     ?_setLED_Initialization:	
  1454  0070                     ?_setPIRLED_Main:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_Fosc_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_IO_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_TMR1_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_ADC_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_WDT_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_TMR1_ISR:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ??_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_Timeout_Counter:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_set_TimeoutCleared:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_WDT_Clearing:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_myMain_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_SYSC_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Temp_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Load_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Lights_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_PIR_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_DetectSYSC_Signal:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_getLoad_AD:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getTemp_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_my_MainTimer:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_SYSC_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Temp_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Load_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Lights_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_PIR_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_Exception_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setLights_SwOn:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOff:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLoad_AH_AL_Restore:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setTemp_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setSYSC_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Main:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setLights_Initialization:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Main:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_Lights_Control:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_setLights_Line:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_CDS_Initialization:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Main:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_LedPointSelect:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LED_Initialization:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Main:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_Mcu_Initialization:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_ISR:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ??_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_WDT_Main:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_LightsPointSelect:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_getAll_Lights_Line:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getLights_Status:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getLight_LoadGO:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_Load_Status:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLights_Allow_Condition:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getCDS_Status:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getMain_All_LightsStatus:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_Error_Status:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_Lights_Count:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getLoad_OK:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     getLights_Allow_Condition@lights:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631                           
  1632                           ; 1 bytes @ 0x0
  1633  0070                     	ds	4
  1634  0074                     ??_Fosc_Set:	
  1635  0074                     ??_IO_Set:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_TMR1_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_ADC_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_WDT_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_Timeout_Counter:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_set_TimeoutCleared:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_WDT_Clearing:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_myMain_Initialization:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_SYSC_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_Temp_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_PIR_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_DetectSYSC_Signal:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_my_MainTimer:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_setLoad_AH_AL_Restore:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getLight_LoadGO:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_getLight_Load_Status:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_setTemp_Initialization:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_setSYSC_Initialization:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setLights_Line:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_CDS_Initialization:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_getCDS_Status:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_LedPointSelect:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_WDT_Main:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_getMain_All_LightsStatus:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_getMain_All_Error_Status:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_Lights_Count:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getLoad_OK:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_LightsPointSelect:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??___wmul:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??___awdiv:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___lwdiv:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ?_getAD:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     getCDS_Status@status:	
  1732                           ; 1 bytes @ 0x4
  1733                           
  1734  0074                     getAD@adcon1:	
  1735                           ; 1 bytes @ 0x4
  1736                           
  1737  0074                     getMain_All_LightsStatus@status:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getMain_Lights_Count@count:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getLoad_OK@ok:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     setLights_Line@lights:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     getLight_LoadGO@loadgo:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     getLight_Load_Status@loadstatus:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     ___wmul@product:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758                           
  1759                           ; 2 bytes @ 0x4
  1760  0074                     	ds	1
  1761  0075                     ??_getAD:	
  1762  0075                     ??_SYSC_Main:	
  1763                           ; 0 bytes @ 0x5
  1764                           
  1765  0075                     ??_setTemp_Main:	
  1766                           ; 0 bytes @ 0x5
  1767                           
  1768  0075                     ??_setSYSC_Main:	
  1769                           ; 0 bytes @ 0x5
  1770                           
  1771  0075                     ??_getLights_Allow_Condition:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_Mcu_Initialization:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     LedPointSelect@led:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     getAD@adcon0:	
  1781                           ; 1 bytes @ 0x5
  1782                           
  1783  0075                     getMain_Lights_Count@status1:	
  1784                           ; 1 bytes @ 0x5
  1785                           
  1786  0075                     setLoad_AH_AL_Restore@i:	
  1787                           ; 1 bytes @ 0x5
  1788                           
  1789  0075                     LightsPointSelect@lights:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792                           
  1793                           ; 1 bytes @ 0x5
  1794  0075                     	ds	1
  1795  0076                     ??_setLED_Initialization:	
  1796  0076                     ??_setLED:	
  1797                           ; 0 bytes @ 0x6
  1798                           
  1799  0076                     ??_Load_Initialization:	
  1800                           ; 0 bytes @ 0x6
  1801                           
  1802  0076                     ??_Lights_Initialization:	
  1803                           ; 0 bytes @ 0x6
  1804                           
  1805  0076                     ??_Temp_Main:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Lights_Main:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_getAll_Lights_Line:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_getLights_Status:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_setLights_SwOn:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_setLights_SwOff:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_Initialization:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_Main:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_LED_Initialization:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_LED_Main:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835                           
  1836                           	psect	cstackBANK0
  1837  004C                     __pcstackBANK0:	
  1838                           ; 0 bytes @ 0x6
  1839                           
  1840  004C                     ?_setLED:	
  1841  004C                     ??_getLoad_AD:	
  1842                           ; 0 bytes @ 0x0
  1843                           
  1844  004C                     ??_getTemp_AD:	
  1845                           ; 0 bytes @ 0x0
  1846                           
  1847  004C                     ?_setLights_Trigger:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  004C                     ??_CDS_Main:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  004C                     ?_getCDS_AD:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  004C                     ?___wmul:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  004C                     ?___awdiv:	
  1860                           ; 2 bytes @ 0x0
  1861                           
  1862  004C                     ?___lwdiv:	
  1863                           ; 2 bytes @ 0x0
  1864                           
  1865  004C                     getCDS_AD@channel2:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  004C                     setLED@command:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  004C                     setLights_Initialization@lights:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  004C                     getLights_Status@lights:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  004C                     setLights_Trigger@command:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  004C                     getAll_Lights_Line@line:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  004C                     getLights_Allow_Condition@allow:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  004C                     _getMain_All_Error_Status$2113:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  004C                     ___wmul@multiplier:	
  1890                           ; 2 bytes @ 0x0
  1891                           
  1892  004C                     ___awdiv@divisor:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  004C                     ___lwdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x0
  1900  004C                     	ds	1
  1901  004D                     ??_setLights_Trigger:	
  1902  004D                     ??_getCDS_AD:	
  1903                           ; 0 bytes @ 0x1
  1904                           
  1905  004D                     setLED@led:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  004D                     getLights_Status@status:	
  1909                           ; 1 bytes @ 0x1
  1910                           
  1911  004D                     _getLights_Allow_Condition$4181:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x1
  1916  004D                     	ds	1
  1917  004E                     ??_setPIRLED_Main:	
  1918  004E                     ?_setLights:	
  1919                           ; 0 bytes @ 0x2
  1920                           
  1921  004E                     setLED_Initialization@led:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  004E                     getLoad_AD@channel:	
  1925                           ; 1 bytes @ 0x2
  1926                           
  1927  004E                     getTemp_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  004E                     setLights@status:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  004E                     setLights_Trigger@lights:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  004E                     _getMain_All_Error_Status$2114:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  004E                     ___wmul@multiplicand:	
  1940                           ; 2 bytes @ 0x2
  1941                           
  1942  004E                     ___awdiv@dividend:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  004E                     ___lwdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948                           
  1949                           ; 2 bytes @ 0x2
  1950  004E                     	ds	1
  1951  004F                     ??_setLights:	
  1952  004F                     getCDS_AD@i:	
  1953                           ; 0 bytes @ 0x3
  1954                           
  1955  004F                     setPIRLED_Main@count:	
  1956                           ; 1 bytes @ 0x3
  1957                           
  1958  004F                     getLoad_AD@k:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  004F                     getTemp_AD@ADRES:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  004F                     setLights_SwOn@sw:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  004F                     setLights_SwOff@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x3
  1972  004F                     	ds	1
  1973  0050                     getCDS_AD@j:	
  1974  0050                     getMain_All_Error_Status@command:	
  1975                           ; 1 bytes @ 0x4
  1976                           
  1977  0050                     getLoad_AD@j:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0050                     setLights@lights:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0050                     ___awdiv@counter:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0050                     ___lwdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989                           
  1990                           ; 1 bytes @ 0x4
  1991  0050                     	ds	1
  1992  0051                     getCDS_AD@channel1:	
  1993  0051                     getMain_All_Error_Status@status:	
  1994                           ; 1 bytes @ 0x5
  1995                           
  1996  0051                     getLoad_AD@ADRES:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0051                     setLights_Main@lights:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0051                     ___awdiv@sign:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0051                     ___lwdiv@quotient:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008                           
  2009                           ; 2 bytes @ 0x5
  2010  0051                     	ds	1
  2011  0052                     ??_PIR_Main:	
  2012  0052                     ??_Exception_Main:	
  2013                           ; 0 bytes @ 0x6
  2014                           
  2015  0052                     getLoad_AD@i:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0052                     ___awdiv@quotient:	
  2019                           ; 1 bytes @ 0x6
  2020                           
  2021                           
  2022                           ; 2 bytes @ 0x6
  2023  0052                     	ds	1
  2024  0053                     ??_Load_Main:	
  2025  0053                     Exception_Main@lights:	
  2026                           ; 0 bytes @ 0x7
  2027                           
  2028                           
  2029                           ; 1 bytes @ 0x7
  2030  0053                     	ds	1
  2031  0054                     ?_getPIR_AD:	
  2032  0054                     ??_Lights_Control:	
  2033                           ; 0 bytes @ 0x8
  2034                           
  2035  0054                     Exception_Main@count:	
  2036                           ; 0 bytes @ 0x8
  2037                           
  2038  0054                     setTemp_Main@error:	
  2039                           ; 1 bytes @ 0x8
  2040                           
  2041  0054                     getPIR_AD@channel2:	
  2042                           ; 1 bytes @ 0x8
  2043                           
  2044                           
  2045                           ; 1 bytes @ 0x8
  2046  0054                     	ds	1
  2047  0055                     ??_getPIR_AD:	
  2048  0055                     Exception_Main@status:	
  2049                           ; 0 bytes @ 0x9
  2050                           
  2051  0055                     Load_Main@error:	
  2052                           ; 1 bytes @ 0x9
  2053                           
  2054  0055                     setTemp_Main@SafeValue:	
  2055                           ; 1 bytes @ 0x9
  2056                           
  2057                           
  2058                           ; 1 bytes @ 0x9
  2059  0055                     	ds	1
  2060  0056                     setTemp_Main@DangerValue:	
  2061  0056                     Lights_Control@lights:	
  2062                           ; 1 bytes @ 0xA
  2063                           
  2064  0056                     Exception_Main@i:	
  2065                           ; 1 bytes @ 0xA
  2066                           
  2067  0056                     _Load_Main$2372:	
  2068                           ; 2 bytes @ 0xA
  2069                           
  2070                           
  2071                           ; 2 bytes @ 0xA
  2072  0056                     	ds	1
  2073  0057                     setTemp_Main@AD:	
  2074  0057                     PIR_Main@error:	
  2075                           ; 1 bytes @ 0xB
  2076                           
  2077                           
  2078                           ; 1 bytes @ 0xB
  2079  0057                     	ds	1
  2080  0058                     Load_Main@ErrorCountValue:	
  2081  0058                     PIR_Main@Enable_Switch:	
  2082                           ; 1 bytes @ 0xC
  2083                           
  2084  0058                     getPIR_AD@j:	
  2085                           ; 1 bytes @ 0xC
  2086                           
  2087  0058                     Exception_Main@i_2126:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090                           
  2091                           ; 2 bytes @ 0xC
  2092  0058                     	ds	1
  2093  0059                     Load_Main@Load_RunStatus:	
  2094  0059                     getPIR_AD@channel1:	
  2095                           ; 1 bytes @ 0xD
  2096                           
  2097  0059                     _PIR_Main$2832:	
  2098                           ; 1 bytes @ 0xD
  2099                           
  2100                           
  2101                           ; 2 bytes @ 0xD
  2102  0059                     	ds	1
  2103  005A                     Exception_Main@error:	
  2104  005A                     Load_Main@LightsCount:	
  2105                           ; 1 bytes @ 0xE
  2106                           
  2107  005A                     getPIR_AD@VRAD1:	
  2108                           ; 1 bytes @ 0xE
  2109                           
  2110                           
  2111                           ; 1 bytes @ 0xE
  2112  005A                     	ds	1
  2113  005B                     PIR_Main@TriggerValue:	
  2114  005B                     getPIR_AD@VRAD:	
  2115                           ; 1 bytes @ 0xF
  2116                           
  2117  005B                     Load_Main@i:	
  2118                           ; 1 bytes @ 0xF
  2119                           
  2120                           
  2121                           ; 2 bytes @ 0xF
  2122  005B                     	ds	1
  2123  005C                     PIR_Main@cds:	
  2124  005C                     getPIR_AD@i:	
  2125                           ; 1 bytes @ 0x10
  2126                           
  2127                           
  2128                           ; 1 bytes @ 0x10
  2129  005C                     	ds	1
  2130  005D                     PIR_Main@LightsStatus:	
  2131                           
  2132                           ; 1 bytes @ 0x11
  2133  005D                     	ds	1
  2134  005E                     ?_main:	
  2135  005E                     main@argc:	
  2136                           ; 2 bytes @ 0x12
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x12
  2140  005E                     	ds	2
  2141  0060                     main@argv:	
  2142                           
  2143                           ; 2 bytes @ 0x14
  2144  0060                     	ds	2
  2145  0062                     ??_main:	
  2146                           
  2147                           ; 0 bytes @ 0x16
  2148  0062                     	ds	1
  2149                           
  2150                           	psect	maintext
  2151  0F9A                     __pmaintext:	
  2152 ;;
  2153 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2154 ;;
  2155 ;; *************** function _main *****************
  2156 ;; Defined at:
  2157 ;;		line 7 in file "../src/Main_B1.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  argc            2   18[BANK0 ] int 
  2160 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  2   18[BANK0 ] int 
  2165 ;; Registers used:
  2166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 17F/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2172 ;;      Params:         0       4       0       0
  2173 ;;      Locals:         0       0       0       0
  2174 ;;      Temps:          0       1       0       0
  2175 ;;      Totals:         0       5       0       0
  2176 ;;Total ram usage:        5 bytes
  2177 ;; Hardware stack levels required when called:    7
  2178 ;; This function calls:
  2179 ;;		_CDS_Initialization
  2180 ;;		_CDS_Main
  2181 ;;		_DetectSYSC_Signal
  2182 ;;		_Exception_Main
  2183 ;;		_LED_Initialization
  2184 ;;		_LED_Main
  2185 ;;		_Lights_Initialization
  2186 ;;		_Lights_Main
  2187 ;;		_Load_Initialization
  2188 ;;		_Load_Main
  2189 ;;		_Mcu_Initialization
  2190 ;;		_PIR_Initialization
  2191 ;;		_PIR_Main
  2192 ;;		_SYSC_Initialization
  2193 ;;		_SYSC_Main
  2194 ;;		_Temp_Initialization
  2195 ;;		_Temp_Main
  2196 ;;		_WDT_Main
  2197 ;;		_getCDS_AD
  2198 ;;		_getLoad_AD
  2199 ;;		_getPIR_AD
  2200 ;;		_getTemp_AD
  2201 ;;		_myMain_Initialization
  2202 ;;		_my_MainTimer
  2203 ;; This function is called by:
  2204 ;;		Startup code after reset
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           
  2209                           ;psect for function _main
  2210  0F9A                     _main:	
  2211                           
  2212                           ;Main_B1.c: 8: myMain_Initialization();
  2213                           
  2214                           ;incstack = 0
  2215                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2216  0F9A  158A  228E  158A   	fcall	_myMain_Initialization
  2217                           
  2218                           ;Main_B1.c: 9: Mcu_Initialization();
  2219  0F9D  158A  2352  158A   	fcall	_Mcu_Initialization
  2220                           
  2221                           ;Main_B1.c: 10: ;;
  2222                           ;Main_B1.c: 11: LED_Initialization();
  2223  0FA0  158A  22D2  158A   	fcall	_LED_Initialization
  2224                           
  2225                           ;Main_B1.c: 12: ;;
  2226                           ;Main_B1.c: 14: SYSC_Initialization();
  2227  0FA3  158A  2295  158A   	fcall	_SYSC_Initialization
  2228                           
  2229                           ;Main_B1.c: 15: Temp_Initialization();
  2230  0FA6  158A  229B  158A   	fcall	_Temp_Initialization
  2231                           
  2232                           ;Main_B1.c: 16: Load_Initialization();
  2233  0FA9  158A  2292  158A   	fcall	_Load_Initialization
  2234                           
  2235                           ;Main_B1.c: 17: ;;
  2236                           ;Main_B1.c: 18: ;;
  2237                           ;Main_B1.c: 20: ;;
  2238                           ;Main_B1.c: 21: Lights_Initialization();
  2239  0FAC  158A  22A5  158A   	fcall	_Lights_Initialization
  2240                           
  2241                           ;Main_B1.c: 22: CDS_Initialization();
  2242  0FAF  158A  22A1  158A   	fcall	_CDS_Initialization
  2243                           
  2244                           ;Main_B1.c: 23: PIR_Initialization();
  2245  0FB2  158A  230F  158A   	fcall	_PIR_Initialization
  2246  0FB5                     l5469:	
  2247                           ;Main_B1.c: 24: ;;
  2248                           ;Main_B1.c: 25: ;;
  2249                           ;Main_B1.c: 26: ;;
  2250                           ;Main_B1.c: 27: ;;
  2251                           ;Main_B1.c: 28: ;;
  2252                           ;Main_B1.c: 30: while (1) {
  2253                           
  2254                           
  2255                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2256  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2258  0FB7  1C25               	btfss	_myMain,0
  2259  0FB8  2FD8               	goto	l5481
  2260                           
  2261                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2262  0FB9  158A  231A  158A   	fcall	_DetectSYSC_Signal
  2263                           
  2264                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2265  0FBC  3001               	movlw	1
  2266  0FBD  158A  267C  158A   	fcall	_getLoad_AD
  2267                           
  2268                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2269  0FC0  3011               	movlw	17
  2270  0FC1  158A  2588  158A   	fcall	_getTemp_AD
  2271                           
  2272                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2273  0FC4  3005               	movlw	5
  2274  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0FC7  00E2               	movwf	??_main
  2277  0FC8  0862               	movf	??_main,w
  2278  0FC9  00CC               	movwf	getCDS_AD@channel2
  2279  0FCA  3029               	movlw	41
  2280  0FCB  158A  24B8  158A   	fcall	_getCDS_AD
  2281                           
  2282                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2283  0FCE  3009               	movlw	9
  2284  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0FD1  00E2               	movwf	??_main
  2287  0FD2  0862               	movf	??_main,w
  2288  0FD3  00D4               	movwf	getPIR_AD@channel2
  2289  0FD4  302D               	movlw	45
  2290  0FD5  118A  240B  158A   	fcall	_getPIR_AD
  2291  0FD8                     l5481:	
  2292                           
  2293                           ;Main_B1.c: 57: }
  2294                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2295  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2297  0FDA  1C32               	btfss	_Timer1,0
  2298  0FDB  2FB5               	goto	l5469
  2299                           
  2300                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2301  0FDC  1032               	bcf	_Timer1,0
  2302                           
  2303                           ;Main_B1.c: 96: my_MainTimer();
  2304  0FDD  158A  2449  158A   	fcall	_my_MainTimer
  2305                           
  2306                           ;Main_B1.c: 97: WDT_Main();
  2307  0FE0  158A  2383  158A   	fcall	_WDT_Main
  2308                           
  2309                           ;Main_B1.c: 98: ;;
  2310                           ;Main_B1.c: 99: ;;
  2311                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2312  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0FE5  1C25               	btfss	_myMain,0
  2315  0FE6  2FB5               	goto	l5469
  2316                           
  2317                           ;Main_B1.c: 101: ;;
  2318                           ;Main_B1.c: 103: LED_Main();
  2319  0FE7  158A  228F  158A   	fcall	_LED_Main
  2320                           
  2321                           ;Main_B1.c: 104: ;;
  2322                           ;Main_B1.c: 106: SYSC_Main();
  2323  0FEA  158A  2298  158A   	fcall	_SYSC_Main
  2324                           
  2325                           ;Main_B1.c: 107: Temp_Main();
  2326  0FED  158A  229E  158A   	fcall	_Temp_Main
  2327                           
  2328                           ;Main_B1.c: 108: Load_Main();
  2329  0FF0  118A  2221  158A   	fcall	_Load_Main
  2330                           
  2331                           ;Main_B1.c: 109: ;;
  2332                           ;Main_B1.c: 111: Lights_Main();
  2333  0FF3  158A  249A  158A   	fcall	_Lights_Main
  2334                           
  2335                           ;Main_B1.c: 112: ;;
  2336                           ;Main_B1.c: 113: ;;
  2337                           ;Main_B1.c: 114: CDS_Main();
  2338  0FF6  158A  2554  158A   	fcall	_CDS_Main
  2339                           
  2340                           ;Main_B1.c: 115: PIR_Main();
  2341  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2342                           
  2343                           ;Main_B1.c: 117: ;;
  2344                           ;Main_B1.c: 118: ;;
  2345                           ;Main_B1.c: 119: ;;
  2346                           ;Main_B1.c: 120: ;;
  2347                           ;Main_B1.c: 121: Exception_Main();
  2348  0FFC  118A  2539  158A   	fcall	_Exception_Main
  2349  0FFF  2FB5               	goto	l5469
  2350  1000                     __end_of_main:	
  2351                           ;Main_B1.c: 128: }
  2352                           ;Main_B1.c: 129: }
  2353                           ;Main_B1.c: 163: }
  2354                           ;Main_B1.c: 164: return (0);
  2355                           ;	Return value of _main is never used
  2356                           
  2357                           
  2358                           	psect	text1
  2359  0C49                     __ptext1:	
  2360 ;; *************** function _my_MainTimer *****************
  2361 ;; Defined at:
  2362 ;;		line 185 in file "../src/Main_B1.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;		None               void
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2376 ;;      Params:         0       0       0       0
  2377 ;;      Locals:         0       0       0       0
  2378 ;;      Temps:          1       0       0       0
  2379 ;;      Totals:         1       0       0       0
  2380 ;;Total ram usage:        1 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    2
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function _my_MainTimer
  2392  0C49                     _my_MainTimer:	
  2393                           
  2394                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2398  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  2399  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  2400  0C4B  1825               	btfsc	_myMain,0
  2401  0C4C  2C59               	goto	l3913
  2402                           
  2403                           ;Main_B1.c: 188: myMain.PowerCount++;
  2404  0C4D  3001               	movlw	1
  2405  0C4E  00F4               	movwf	??_my_MainTimer
  2406  0C4F  0874               	movf	??_my_MainTimer,w
  2407  0C50  07A6               	addwf	_myMain+1,f
  2408                           
  2409                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2410  0C51  0826               	movf	_myMain+1,w
  2411  0C52  3A4B               	xorlw	75
  2412  0C53  1D03               	skipz
  2413  0C54  0008               	return
  2414                           
  2415                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2416  0C55  01A6               	clrf	_myMain+1
  2417                           
  2418                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2419  0C56  1425               	bsf	_myMain,0
  2420                           
  2421                           ;Main_B1.c: 196: ;;
  2422                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2423  0C57  1625               	bsf	_myMain,4
  2424                           
  2425                           ;Main_B1.c: 206: }
  2426                           ;Main_B1.c: 207: } else {
  2427  0C58  0008               	return
  2428  0C59                     l3913:	
  2429                           
  2430                           ;Main_B1.c: 208: myMain.PowerCount++;
  2431  0C59  3001               	movlw	1
  2432  0C5A  00F4               	movwf	??_my_MainTimer
  2433  0C5B  0874               	movf	??_my_MainTimer,w
  2434  0C5C  07A6               	addwf	_myMain+1,f
  2435                           
  2436                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2437  0C5D  0826               	movf	_myMain+1,w
  2438  0C5E  3A32               	xorlw	50
  2439  0C5F  1D03               	skipz
  2440  0C60  0008               	return
  2441                           
  2442                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2443  0C61  01A6               	clrf	_myMain+1
  2444  0C62  0008               	return
  2445  0C63                     __end_of_my_MainTimer:	
  2446                           
  2447                           	psect	text2
  2448  0A8E                     __ptext2:	
  2449 ;; *************** function _myMain_Initialization *****************
  2450 ;; Defined at:
  2451 ;;		line 170 in file "../src/Main_B1.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		None
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2465 ;;      Params:         0       0       0       0
  2466 ;;      Locals:         0       0       0       0
  2467 ;;      Temps:          0       0       0       0
  2468 ;;      Totals:         0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    2
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           
  2480                           ;psect for function _myMain_Initialization
  2481  0A8E                     _myMain_Initialization:	
  2482                           
  2483                           ;incstack = 0
  2484                           ; Regs used in _myMain_Initialization: []
  2485  0A8E  0008               	return
  2486  0A8F                     __end_of_myMain_Initialization:	
  2487                           
  2488                           	psect	text3
  2489  0D88                     __ptext3:	
  2490 ;; *************** function _getTemp_AD *****************
  2491 ;; Defined at:
  2492 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  channel         1    wreg     unsigned char 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  channel         1    2[BANK0 ] unsigned char 
  2497 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;		None               void
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0, pclath, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2507 ;;      Params:         0       0       0       0
  2508 ;;      Locals:         0       2       0       0
  2509 ;;      Temps:          0       2       0       0
  2510 ;;      Totals:         0       4       0       0
  2511 ;;Total ram usage:        4 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    4
  2514 ;; This function calls:
  2515 ;;		_getAD
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _getTemp_AD
  2523  0D88                     _getTemp_AD:	
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2527                           ;getTemp_AD@channel stored from wreg
  2528  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0D8A  00CE               	movwf	getTemp_AD@channel
  2531                           
  2532                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2533  0D8B  01CF               	clrf	getTemp_AD@ADRES
  2534                           
  2535                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2536  0D8C  1D39               	btfss	_Temp,2
  2537  0D8D  2DAF               	goto	l4987
  2538                           
  2539                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2540  0D8E  3070               	movlw	112
  2541  0D8F  00CC               	movwf	??_getTemp_AD
  2542  0D90  084C               	movf	??_getTemp_AD,w
  2543  0D91  00F4               	movwf	getAD@adcon1
  2544  0D92  084E               	movf	getTemp_AD@channel,w
  2545  0D93  158A  247E  158A   	fcall	_getAD
  2546  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0D98  00CD               	movwf	??_getTemp_AD+1
  2549  0D99  084D               	movf	??_getTemp_AD+1,w
  2550  0D9A  00CF               	movwf	getTemp_AD@ADRES
  2551                           
  2552                           ;OverTemperature_B1.c: 22: if (ADRES > 0) {
  2553  0D9B  084F               	movf	getTemp_AD@ADRES,w
  2554  0D9C  1903               	btfsc	3,2
  2555  0D9D  2DAF               	goto	l4987
  2556                           
  2557                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < ADRES) {
  2558  0D9E  084F               	movf	getTemp_AD@ADRES,w
  2559  0D9F  023D               	subwf	_Temp+4,w
  2560  0DA0  1803               	skipnc
  2561  0DA1  2DA7               	goto	l4983
  2562                           
  2563                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = ADRES;
  2564  0DA2  084F               	movf	getTemp_AD@ADRES,w
  2565  0DA3  00CC               	movwf	??_getTemp_AD
  2566  0DA4  084C               	movf	??_getTemp_AD,w
  2567  0DA5  00BD               	movwf	_Temp+4
  2568                           
  2569                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < ADRES) {
  2570  0DA6  2DAF               	goto	l4987
  2571  0DA7                     l4983:	
  2572  0DA7  084F               	movf	getTemp_AD@ADRES,w
  2573  0DA8  023E               	subwf	_Temp+5,w
  2574  0DA9  1803               	skipnc
  2575  0DAA  2DAF               	goto	l4987
  2576                           
  2577                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = ADRES;
  2578  0DAB  084F               	movf	getTemp_AD@ADRES,w
  2579  0DAC  00CC               	movwf	??_getTemp_AD
  2580  0DAD  084C               	movf	??_getTemp_AD,w
  2581  0DAE  00BE               	movwf	_Temp+5
  2582  0DAF                     l4987:	
  2583                           
  2584                           ;OverTemperature_B1.c: 27: }
  2585                           ;OverTemperature_B1.c: 28: }
  2586                           ;OverTemperature_B1.c: 29: }
  2587                           ;OverTemperature_B1.c: 36: ADRES = getAD(channel, 0x70);
  2588  0DAF  3070               	movlw	112
  2589  0DB0  00CC               	movwf	??_getTemp_AD
  2590  0DB1  084C               	movf	??_getTemp_AD,w
  2591  0DB2  00F4               	movwf	getAD@adcon1
  2592  0DB3  084E               	movf	getTemp_AD@channel,w
  2593  0DB4  158A  247E         	fcall	_getAD
  2594  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0DB8  00CD               	movwf	??_getTemp_AD+1
  2597  0DB9  084D               	movf	??_getTemp_AD+1,w
  2598  0DBA  00CF               	movwf	getTemp_AD@ADRES
  2599  0DBB  0008               	return
  2600  0DBC                     __end_of_getTemp_AD:	
  2601                           
  2602                           	psect	text4
  2603  040B                     __ptext4:	
  2604 ;; *************** function _getPIR_AD *****************
  2605 ;; Defined at:
  2606 ;;		line 327 in file "../src/PIR_B1.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  channel1        1    wreg     unsigned char 
  2609 ;;  channel2        1    8[BANK0 ] unsigned char 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  channel1        1   13[BANK0 ] unsigned char 
  2612 ;;  i               1   16[BANK0 ] unsigned char 
  2613 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2614 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2615 ;;  j               1   12[BANK0 ] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;		None               void
  2618 ;; Registers used:
  2619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2625 ;;      Params:         0       1       0       0
  2626 ;;      Locals:         0       5       0       0
  2627 ;;      Temps:          0       3       0       0
  2628 ;;      Totals:         0       9       0       0
  2629 ;;Total ram usage:        9 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    4
  2632 ;; This function calls:
  2633 ;;		___awdiv
  2634 ;;		___lwdiv
  2635 ;;		_getAD
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _getPIR_AD
  2643  040B                     _getPIR_AD:	
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2647                           ;getPIR_AD@channel1 stored from wreg
  2648  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2649  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2650  040D  00D9               	movwf	getPIR_AD@channel1
  2651                           
  2652                           ;PIR_B1.c: 328: char i = 0, j = 0;
  2653  040E  01DC               	clrf	getPIR_AD@i
  2654  040F  01D8               	clrf	getPIR_AD@j
  2655                           
  2656                           ;PIR_B1.c: 329: char VRAD = 0, VRAD1 = 0;
  2657  0410  01DB               	clrf	getPIR_AD@VRAD
  2658  0411  01DA               	clrf	getPIR_AD@VRAD1
  2659                           
  2660                           ;PIR_B1.c: 330: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2661  0412  1683               	bsf	3,5	;RP0=1, select bank1
  2662  0413  1303               	bcf	3,6	;RP1=0, select bank1
  2663  0414  1CA0               	btfss	__PIR^(0+128),1
  2664  0415  0008               	return
  2665  0416  1920               	btfsc	__PIR^(0+128),2
  2666  0417  0008               	return
  2667                           
  2668                           ;PIR_B1.c: 331: _PIR.GO = 1;
  2669  0418  1520               	bsf	__PIR^(0+128),2
  2670                           
  2671                           ;PIR_B1.c: 338: VRAD1 = getAD(channel1, 0x70);
  2672  0419  3070               	movlw	112
  2673  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2674  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2675  041C  00D5               	movwf	??_getPIR_AD
  2676  041D  0855               	movf	??_getPIR_AD,w
  2677  041E  00F4               	movwf	getAD@adcon1
  2678  041F  0859               	movf	getPIR_AD@channel1,w
  2679  0420  158A  247E  118A   	fcall	_getAD
  2680  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0425  00D6               	movwf	??_getPIR_AD+1
  2683  0426  0856               	movf	??_getPIR_AD+1,w
  2684  0427  00DA               	movwf	getPIR_AD@VRAD1
  2685                           
  2686                           ;PIR_B1.c: 339: VRAD = VRAD1 / 25;
  2687  0428  3019               	movlw	25
  2688  0429  00CC               	movwf	___awdiv@divisor
  2689  042A  3000               	movlw	0
  2690  042B  00CD               	movwf	___awdiv@divisor+1
  2691  042C  085A               	movf	getPIR_AD@VRAD1,w
  2692  042D  00D5               	movwf	??_getPIR_AD
  2693  042E  01D6               	clrf	??_getPIR_AD+1
  2694  042F  0855               	movf	??_getPIR_AD,w
  2695  0430  00CE               	movwf	___awdiv@dividend
  2696  0431  0856               	movf	??_getPIR_AD+1,w
  2697  0432  00CF               	movwf	___awdiv@dividend+1
  2698  0433  158A  26D8  118A   	fcall	___awdiv
  2699  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2700  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2701  0438  084C               	movf	?___awdiv,w
  2702  0439  00D7               	movwf	??_getPIR_AD+2
  2703  043A  0857               	movf	??_getPIR_AD+2,w
  2704  043B  00DB               	movwf	getPIR_AD@VRAD
  2705                           
  2706                           ;PIR_B1.c: 340: _PIR.SignalAD = getAD(channel2, 0x70);
  2707  043C  3070               	movlw	112
  2708  043D  00D5               	movwf	??_getPIR_AD
  2709  043E  0855               	movf	??_getPIR_AD,w
  2710  043F  00F4               	movwf	getAD@adcon1
  2711  0440  0854               	movf	getPIR_AD@channel2,w
  2712  0441  158A  247E  118A   	fcall	_getAD
  2713  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0446  00D6               	movwf	??_getPIR_AD+1
  2716  0447  0856               	movf	??_getPIR_AD+1,w
  2717  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2718  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2719  044A  00A1               	movwf	(__PIR^(0+128)+1)
  2720                           
  2721                           ;PIR_B1.c: 354: if (VRAD < 1) {
  2722  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2723  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2724  044D  08DB               	movf	getPIR_AD@VRAD,f
  2725  044E  1D03               	skipz
  2726  044F  2C52               	goto	l5003
  2727                           
  2728                           ;PIR_B1.c: 355: _PIR.CloseTimeValue = 5;
  2729  0450  3005               	movlw	5
  2730  0451  2C58               	goto	L1
  2731  0452                     l5003:	
  2732                           ;PIR_B1.c: 356: } else if (VRAD < 3) {
  2733                           
  2734  0452  3003               	movlw	3
  2735  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0454  025B               	subwf	getPIR_AD@VRAD,w
  2737  0455  1803               	skipnc
  2738  0456  2C5D               	goto	l5007
  2739                           
  2740                           ;PIR_B1.c: 357: _PIR.CloseTimeValue = 60;
  2741  0457  303C               	movlw	60
  2742  0458                     L1:	
  2743  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2744  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2745  045A  00C3               	movwf	(__PIR^(0+128)+35)
  2746  045B  3000               	movlw	0
  2747  045C  2C83               	goto	L5
  2748  045D                     l5007:	
  2749                           ;PIR_B1.c: 358: } else if (VRAD < 5) {
  2750                           
  2751  045D  3005               	movlw	5
  2752  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2753  045F  025B               	subwf	getPIR_AD@VRAD,w
  2754  0460  1803               	skipnc
  2755  0461  2C68               	goto	l5011
  2756                           
  2757                           ;PIR_B1.c: 359: _PIR.CloseTimeValue = 300;
  2758  0462  302C               	movlw	44
  2759  0463  1683               	bsf	3,5	;RP0=1, select bank1
  2760  0464  1303               	bcf	3,6	;RP1=0, select bank1
  2761  0465  00C3               	movwf	(__PIR^(0+128)+35)
  2762  0466  3001               	movlw	1
  2763  0467  2C83               	goto	L5
  2764  0468                     l5011:	
  2765                           ;PIR_B1.c: 360: } else if (VRAD < 7) {
  2766                           
  2767  0468  3007               	movlw	7
  2768  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2769  046A  025B               	subwf	getPIR_AD@VRAD,w
  2770  046B  1803               	skipnc
  2771  046C  2C73               	goto	l5015
  2772                           
  2773                           ;PIR_B1.c: 361: _PIR.CloseTimeValue = 600;
  2774  046D  3058               	movlw	88
  2775  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2776  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2777  0470  00C3               	movwf	(__PIR^(0+128)+35)
  2778  0471  3002               	movlw	2
  2779  0472  2C83               	goto	L5
  2780  0473                     l5015:	
  2781                           ;PIR_B1.c: 362: } else if (VRAD < 9) {
  2782                           
  2783  0473  3009               	movlw	9
  2784  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0475  025B               	subwf	getPIR_AD@VRAD,w
  2786  0476  1803               	skipnc
  2787  0477  2C7E               	goto	l5019
  2788                           
  2789                           ;PIR_B1.c: 363: _PIR.CloseTimeValue = 900;
  2790  0478  3084               	movlw	132
  2791  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2792  047A  1303               	bcf	3,6	;RP1=0, select bank1
  2793  047B  00C3               	movwf	(__PIR^(0+128)+35)
  2794  047C  3003               	movlw	3
  2795  047D  2C83               	goto	L5
  2796  047E                     l5019:	
  2797                           ;PIR_B1.c: 364: } else {
  2798                           
  2799                           
  2800                           ;PIR_B1.c: 365: _PIR.CloseTimeValue = 1200;
  2801  047E  30B0               	movlw	176
  2802  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0480  1303               	bcf	3,6	;RP1=0, select bank1
  2804  0481  00C3               	movwf	(__PIR^(0+128)+35)
  2805  0482  3004               	movlw	4
  2806  0483                     L5:	
  2807  0483  00C4               	movwf	(__PIR^(0+128)+36)
  2808                           
  2809                           ;PIR_B1.c: 366: }
  2810                           ;PIR_B1.c: 375: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2811  0484  0821               	movf	(__PIR^(0+128)+1),w
  2812  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2813  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2814  0487  00D5               	movwf	??_getPIR_AD
  2815  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2816  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2817  048A  0824               	movf	(__PIR^(0+128)+4),w
  2818  048B  3EA5               	addlw	(__PIR+5)& (0+255)
  2819  048C  0084               	movwf	4
  2820  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2821  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2822  048F  0855               	movf	??_getPIR_AD,w
  2823  0490  1383               	bcf	3,7	;select IRP bank1
  2824  0491  0080               	movwf	0
  2825                           
  2826                           ;PIR_B1.c: 376: for (i = 0; i < 10; i++) {
  2827  0492  01DC               	clrf	getPIR_AD@i
  2828  0493  300A               	movlw	10
  2829  0494  025C               	subwf	getPIR_AD@i,w
  2830  0495  1803               	btfsc	3,0
  2831  0496  2CB3               	goto	l5035
  2832  0497                     l5029:	
  2833                           
  2834                           ;PIR_B1.c: 377: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2835  0497  085C               	movf	getPIR_AD@i,w
  2836  0498  3EA5               	addlw	(__PIR+5)& (0+255)
  2837  0499  0084               	movwf	4
  2838  049A  0800               	movf	0,w
  2839  049B  00D5               	movwf	??_getPIR_AD
  2840  049C  01D6               	clrf	??_getPIR_AD+1
  2841  049D  0855               	movf	??_getPIR_AD,w
  2842  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2843  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2844  04A0  07AF               	addwf	(__PIR^(0+128)+15),f
  2845  04A1  1803               	skipnc
  2846  04A2  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2847  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2848  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2849  04A5  0856               	movf	??_getPIR_AD+1,w
  2850  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2851  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2852  04A8  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2853  04A9  3001               	movlw	1
  2854  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2855  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  2856  04AC  00D5               	movwf	??_getPIR_AD
  2857  04AD  0855               	movf	??_getPIR_AD,w
  2858  04AE  07DC               	addwf	getPIR_AD@i,f
  2859  04AF  300A               	movlw	10
  2860  04B0  025C               	subwf	getPIR_AD@i,w
  2861  04B1  1C03               	skipc
  2862  04B2  2C97               	goto	l5029
  2863  04B3                     l5035:	
  2864                           
  2865                           ;PIR_B1.c: 378: }
  2866                           ;PIR_B1.c: 379: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2867  04B3  300A               	movlw	10
  2868  04B4  00CC               	movwf	___lwdiv@divisor
  2869  04B5  3000               	movlw	0
  2870  04B6  00CD               	movwf	___lwdiv@divisor+1
  2871  04B7  1683               	bsf	3,5	;RP0=1, select bank1
  2872  04B8  1303               	bcf	3,6	;RP1=0, select bank1
  2873  04B9  0830               	movf	((__PIR+1)^(0+128)+15),w
  2874  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2875  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  2876  04BC  01CF               	clrf	___lwdiv@dividend+1
  2877  04BD  07CF               	addwf	___lwdiv@dividend+1,f
  2878  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  2879  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  2880  04C0  082F               	movf	(__PIR^(0+128)+15),w
  2881  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2882  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2883  04C3  01CE               	clrf	___lwdiv@dividend
  2884  04C4  07CE               	addwf	___lwdiv@dividend,f
  2885  04C5  158A  25FA  118A   	fcall	___lwdiv
  2886  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2887  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2888  04CA  084C               	movf	?___lwdiv,w
  2889  04CB  00D5               	movwf	??_getPIR_AD
  2890  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2891  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2892  04CE  0831               	movf	(__PIR^(0+128)+17),w
  2893  04CF  3EB2               	addlw	(__PIR+18)& (0+255)
  2894  04D0  0084               	movwf	4
  2895  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2896  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2897  04D3  0855               	movf	??_getPIR_AD,w
  2898  04D4  1383               	bcf	3,7	;select IRP bank1
  2899  04D5  0080               	movwf	0
  2900                           
  2901                           ;PIR_B1.c: 380: _PIR.TenAverageValue = 0;
  2902  04D6  1683               	bsf	3,5	;RP0=1, select bank1
  2903  04D7  1303               	bcf	3,6	;RP1=0, select bank1
  2904  04D8  01AF               	clrf	(__PIR^(0+128)+15)
  2905  04D9  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2906                           
  2907                           ;PIR_B1.c: 382: for (i = 0; i <= 9; i++) {
  2908  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2909  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2910  04DC  01DC               	clrf	getPIR_AD@i
  2911  04DD  300A               	movlw	10
  2912  04DE  025C               	subwf	getPIR_AD@i,w
  2913  04DF  1803               	btfsc	3,0
  2914  04E0  2CFD               	goto	l5051
  2915  04E1                     l5045:	
  2916                           
  2917                           ;PIR_B1.c: 383: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2918  04E1  085C               	movf	getPIR_AD@i,w
  2919  04E2  3EB2               	addlw	(__PIR+18)& (0+255)
  2920  04E3  0084               	movwf	4
  2921  04E4  0800               	movf	0,w
  2922  04E5  00D5               	movwf	??_getPIR_AD
  2923  04E6  01D6               	clrf	??_getPIR_AD+1
  2924  04E7  0855               	movf	??_getPIR_AD,w
  2925  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  2926  04E9  1303               	bcf	3,6	;RP1=0, select bank1
  2927  04EA  07BC               	addwf	(__PIR^(0+128)+28),f
  2928  04EB  1803               	skipnc
  2929  04EC  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2930  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2931  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2932  04EF  0856               	movf	??_getPIR_AD+1,w
  2933  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2934  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2935  04F2  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2936  04F3  3001               	movlw	1
  2937  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  2938  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  2939  04F6  00D5               	movwf	??_getPIR_AD
  2940  04F7  0855               	movf	??_getPIR_AD,w
  2941  04F8  07DC               	addwf	getPIR_AD@i,f
  2942  04F9  300A               	movlw	10
  2943  04FA  025C               	subwf	getPIR_AD@i,w
  2944  04FB  1C03               	skipc
  2945  04FC  2CE1               	goto	l5045
  2946  04FD                     l5051:	
  2947                           
  2948                           ;PIR_B1.c: 384: }
  2949                           ;PIR_B1.c: 385: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2950  04FD  300A               	movlw	10
  2951  04FE  00CC               	movwf	___lwdiv@divisor
  2952  04FF  3000               	movlw	0
  2953  0500  00CD               	movwf	___lwdiv@divisor+1
  2954  0501  1683               	bsf	3,5	;RP0=1, select bank1
  2955  0502  1303               	bcf	3,6	;RP1=0, select bank1
  2956  0503  083D               	movf	((__PIR+1)^(0+128)+28),w
  2957  0504  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0505  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0506  01CF               	clrf	___lwdiv@dividend+1
  2960  0507  07CF               	addwf	___lwdiv@dividend+1,f
  2961  0508  1683               	bsf	3,5	;RP0=1, select bank1
  2962  0509  1303               	bcf	3,6	;RP1=0, select bank1
  2963  050A  083C               	movf	(__PIR^(0+128)+28),w
  2964  050B  1283               	bcf	3,5	;RP0=0, select bank0
  2965  050C  1303               	bcf	3,6	;RP1=0, select bank0
  2966  050D  01CE               	clrf	___lwdiv@dividend
  2967  050E  07CE               	addwf	___lwdiv@dividend,f
  2968  050F  158A  25FA  118A   	fcall	___lwdiv
  2969  0512  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0513  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0514  084C               	movf	?___lwdiv,w
  2972  0515  00D5               	movwf	??_getPIR_AD
  2973  0516  0855               	movf	??_getPIR_AD,w
  2974  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2975  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2976  0519  00A3               	movwf	(__PIR^(0+128)+3)
  2977                           
  2978                           ;PIR_B1.c: 386: _PIR.HundredAverageValue = 0;
  2979  051A  01BC               	clrf	(__PIR^(0+128)+28)
  2980  051B  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2981                           
  2982                           ;PIR_B1.c: 388: if (_PIR.TenCount < 10) {
  2983  051C  300A               	movlw	10
  2984  051D  0224               	subwf	(__PIR^(0+128)+4),w
  2985  051E  1803               	skipnc
  2986  051F  2D29               	goto	l5059
  2987                           
  2988                           ;PIR_B1.c: 389: _PIR.TenCount++;
  2989  0520  3001               	movlw	1
  2990  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0523  00D5               	movwf	??_getPIR_AD
  2993  0524  0855               	movf	??_getPIR_AD,w
  2994  0525  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0526  1303               	bcf	3,6	;RP1=0, select bank1
  2996  0527  07A4               	addwf	(__PIR^(0+128)+4),f
  2997                           
  2998                           ;PIR_B1.c: 390: } else {
  2999  0528  0008               	return
  3000  0529                     l5059:	
  3001                           
  3002                           ;PIR_B1.c: 391: _PIR.TenCount = 0;
  3003  0529  01A4               	clrf	(__PIR^(0+128)+4)
  3004                           
  3005                           ;PIR_B1.c: 392: if (_PIR.HundreCount < 10)
  3006  052A  300A               	movlw	10
  3007  052B  0231               	subwf	(__PIR^(0+128)+17),w
  3008  052C  1803               	skipnc
  3009  052D  2D37               	goto	l5065
  3010                           
  3011                           ;PIR_B1.c: 393: _PIR.HundreCount++;
  3012  052E  3001               	movlw	1
  3013  052F  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0530  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0531  00D5               	movwf	??_getPIR_AD
  3016  0532  0855               	movf	??_getPIR_AD,w
  3017  0533  1683               	bsf	3,5	;RP0=1, select bank1
  3018  0534  1303               	bcf	3,6	;RP1=0, select bank1
  3019  0535  07B1               	addwf	(__PIR^(0+128)+17),f
  3020  0536  0008               	return
  3021  0537                     l5065:	
  3022                           
  3023                           ;PIR_B1.c: 394: else
  3024                           ;PIR_B1.c: 395: _PIR.HundreCount = 0;
  3025  0537  01B1               	clrf	(__PIR^(0+128)+17)
  3026  0538  0008               	return
  3027  0539                     __end_of_getPIR_AD:	
  3028                           
  3029                           	psect	text5
  3030  0E7C                     __ptext5:	
  3031 ;; *************** function _getLoad_AD *****************
  3032 ;; Defined at:
  3033 ;;		line 15 in file "../src/OverLoad_B1.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;  channel         1    wreg     unsigned char 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  channel         1    2[BANK0 ] unsigned char 
  3038 ;;  i               1    6[BANK0 ] unsigned char 
  3039 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3040 ;;  j               1    4[BANK0 ] unsigned char 
  3041 ;;  k               1    3[BANK0 ] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;		None               void
  3044 ;; Registers used:
  3045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3051 ;;      Params:         0       0       0       0
  3052 ;;      Locals:         0       5       0       0
  3053 ;;      Temps:          0       2       0       0
  3054 ;;      Totals:         0       7       0       0
  3055 ;;Total ram usage:        7 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    4
  3058 ;; This function calls:
  3059 ;;		_getAD
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _getLoad_AD
  3067  0E7C                     _getLoad_AD:	
  3068                           
  3069                           ;incstack = 0
  3070                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3071                           ;getLoad_AD@channel stored from wreg
  3072  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0E7E  00CE               	movwf	getLoad_AD@channel
  3075                           
  3076                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3077  0E7F  01D2               	clrf	getLoad_AD@i
  3078  0E80  01D0               	clrf	getLoad_AD@j
  3079  0E81  01CF               	clrf	getLoad_AD@k
  3080                           
  3081                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3082  0E82  01D1               	clrf	getLoad_AD@ADRES
  3083                           
  3084                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3085  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0E84  1303               	bcf	3,6	;RP1=0, select bank1
  3087  0E85  1E4A               	btfss	_Load^(0+128),4
  3088  0E86  0008               	return
  3089                           
  3090                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3091  0E87  3073               	movlw	115
  3092  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0E8A  00CC               	movwf	??_getLoad_AD
  3095  0E8B  084C               	movf	??_getLoad_AD,w
  3096  0E8C  00F4               	movwf	getAD@adcon1
  3097  0E8D  084E               	movf	getLoad_AD@channel,w
  3098  0E8E  158A  247E  158A   	fcall	_getAD
  3099  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3100  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3101  0E93  00CD               	movwf	??_getLoad_AD+1
  3102  0E94  084D               	movf	??_getLoad_AD+1,w
  3103  0E95  00D1               	movwf	getLoad_AD@ADRES
  3104                           
  3105                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3106  0E96  01D2               	clrf	getLoad_AD@i
  3107  0E97  3004               	movlw	4
  3108  0E98  0252               	subwf	getLoad_AD@i,w
  3109  0E99  1803               	btfsc	3,0
  3110  0E9A  2EB7               	goto	l4951
  3111  0E9B                     l4939:	
  3112                           
  3113                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3114  0E9B  0852               	movf	getLoad_AD@i,w
  3115  0E9C  3ED4               	addlw	(_Load+10)& (0+255)
  3116  0E9D  0084               	movwf	4
  3117  0E9E  0851               	movf	getLoad_AD@ADRES,w
  3118  0E9F  1383               	bcf	3,7	;select IRP bank1
  3119  0EA0  0200               	subwf	0,w
  3120  0EA1  1803               	skipnc
  3121  0EA2  2EAF               	goto	l4947
  3122  0EA3  08D0               	movf	getLoad_AD@j,f
  3123  0EA4  1D03               	skipz
  3124  0EA5  2EAF               	goto	l4947
  3125                           
  3126                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3127  0EA6  0851               	movf	getLoad_AD@ADRES,w
  3128  0EA7  00CC               	movwf	??_getLoad_AD
  3129  0EA8  0852               	movf	getLoad_AD@i,w
  3130  0EA9  3ED4               	addlw	(_Load+10)& (0+255)
  3131  0EAA  0084               	movwf	4
  3132  0EAB  084C               	movf	??_getLoad_AD,w
  3133  0EAC  0080               	movwf	0
  3134                           
  3135                           ;OverLoad_B1.c: 24: j = 1;
  3136  0EAD  01D0               	clrf	getLoad_AD@j
  3137  0EAE  0AD0               	incf	getLoad_AD@j,f
  3138  0EAF                     l4947:	
  3139  0EAF  3001               	movlw	1
  3140  0EB0  00CC               	movwf	??_getLoad_AD
  3141  0EB1  084C               	movf	??_getLoad_AD,w
  3142  0EB2  07D2               	addwf	getLoad_AD@i,f
  3143  0EB3  3004               	movlw	4
  3144  0EB4  0252               	subwf	getLoad_AD@i,w
  3145  0EB5  1C03               	skipc
  3146  0EB6  2E9B               	goto	l4939
  3147  0EB7                     l4951:	
  3148                           
  3149                           ;OverLoad_B1.c: 25: }
  3150                           ;OverLoad_B1.c: 26: }
  3151                           ;OverLoad_B1.c: 27: if (j == 0) {
  3152  0EB7  08D0               	movf	getLoad_AD@j,f
  3153  0EB8  1D03               	skipz
  3154  0EB9  0008               	return
  3155                           
  3156                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3157  0EBA  01D2               	clrf	getLoad_AD@i
  3158  0EBB                     L6:	
  3159  0EBB  3004               	movlw	4
  3160  0EBC  0252               	subwf	getLoad_AD@i,w
  3161  0EBD  1803               	btfsc	3,0
  3162  0EBE  0008               	return
  3163                           
  3164                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3165  0EBF  0852               	movf	getLoad_AD@i,w
  3166  0EC0  3ED9               	addlw	(_Load+15)& (0+255)
  3167  0EC1  0084               	movwf	4
  3168  0EC2  1383               	bcf	3,7	;select IRP bank1
  3169  0EC3  0800               	movf	0,w
  3170  0EC4  0251               	subwf	getLoad_AD@ADRES,w
  3171  0EC5  1803               	skipnc
  3172  0EC6  2ED3               	goto	l4967
  3173  0EC7  08CF               	movf	getLoad_AD@k,f
  3174  0EC8  1D03               	skipz
  3175  0EC9  2ED3               	goto	l4967
  3176                           
  3177                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3178  0ECA  0851               	movf	getLoad_AD@ADRES,w
  3179  0ECB  00CC               	movwf	??_getLoad_AD
  3180  0ECC  0852               	movf	getLoad_AD@i,w
  3181  0ECD  3ED9               	addlw	(_Load+15)& (0+255)
  3182  0ECE  0084               	movwf	4
  3183  0ECF  084C               	movf	??_getLoad_AD,w
  3184  0ED0  0080               	movwf	0
  3185                           
  3186                           ;OverLoad_B1.c: 31: k = 1;
  3187  0ED1  01CF               	clrf	getLoad_AD@k
  3188  0ED2  0ACF               	incf	getLoad_AD@k,f
  3189  0ED3                     l4967:	
  3190  0ED3  3001               	movlw	1
  3191  0ED4  00CC               	movwf	??_getLoad_AD
  3192  0ED5  084C               	movf	??_getLoad_AD,w
  3193  0ED6  07D2               	addwf	getLoad_AD@i,f
  3194  0ED7  2EBB               	goto	L6
  3195  0ED8                     __end_of_getLoad_AD:	
  3196                           
  3197                           	psect	text6
  3198  0CB8                     __ptext6:	
  3199 ;; *************** function _getCDS_AD *****************
  3200 ;; Defined at:
  3201 ;;		line 48 in file "../src/CDS_B1.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  channel1        1    wreg     unsigned char 
  3204 ;;  channel2        1    0[BANK0 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  channel1        1    5[BANK0 ] unsigned char 
  3207 ;;  j               1    4[BANK0 ] unsigned char 
  3208 ;;  i               1    3[BANK0 ] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;		None               void
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0, pclath, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3218 ;;      Params:         0       1       0       0
  3219 ;;      Locals:         0       3       0       0
  3220 ;;      Temps:          0       2       0       0
  3221 ;;      Totals:         0       6       0       0
  3222 ;;Total ram usage:        6 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    4
  3225 ;; This function calls:
  3226 ;;		_getAD
  3227 ;; This function is called by:
  3228 ;;		_main
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _getCDS_AD
  3234  0CB8                     _getCDS_AD:	
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3238                           ;getCDS_AD@channel1 stored from wreg
  3239  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  3240  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  3241  0CBA  00D1               	movwf	getCDS_AD@channel1
  3242                           
  3243                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3244  0CBB  01CF               	clrf	getCDS_AD@i
  3245  0CBC  01D0               	clrf	getCDS_AD@j
  3246                           
  3247                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3248  0CBD  1DAE               	btfss	__CDS,3
  3249  0CBE  0008               	return
  3250                           
  3251                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3252  0CBF  14AE               	bsf	__CDS,1
  3253                           
  3254                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3255  0CC0  3070               	movlw	112
  3256  0CC1  00CD               	movwf	??_getCDS_AD
  3257  0CC2  084D               	movf	??_getCDS_AD,w
  3258  0CC3  00F4               	movwf	getAD@adcon1
  3259  0CC4  0851               	movf	getCDS_AD@channel1,w
  3260  0CC5  158A  247E  158A   	fcall	_getAD
  3261  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0CCA  00CE               	movwf	??_getCDS_AD+1
  3264  0CCB  084E               	movf	??_getCDS_AD+1,w
  3265  0CCC  00B0               	movwf	__CDS+2
  3266                           
  3267                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3268  0CCD  3070               	movlw	112
  3269  0CCE  00CD               	movwf	??_getCDS_AD
  3270  0CCF  084D               	movf	??_getCDS_AD,w
  3271  0CD0  00F4               	movwf	getAD@adcon1
  3272  0CD1  084C               	movf	getCDS_AD@channel2,w
  3273  0CD2  158A  247E         	fcall	_getAD
  3274  0CD4  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0CD5  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0CD6  00CE               	movwf	??_getCDS_AD+1
  3277  0CD7  084E               	movf	??_getCDS_AD+1,w
  3278  0CD8  00B1               	movwf	__CDS+3
  3279  0CD9  0008               	return
  3280  0CDA                     __end_of_getCDS_AD:	
  3281                           
  3282                           	psect	text7
  3283  0C7E                     __ptext7:	
  3284 ;; *************** function _getAD *****************
  3285 ;; Defined at:
  3286 ;;		line 432 in file "../src/MCU_B1.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  adcon0          1    wreg     unsigned char 
  3289 ;;  adcon1          1    4[COMMON] unsigned char 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  adcon0          1    5[COMMON] unsigned char 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      unsigned char 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3301 ;;      Params:         1       0       0       0
  3302 ;;      Locals:         1       0       0       0
  3303 ;;      Temps:          0       0       0       0
  3304 ;;      Totals:         2       0       0       0
  3305 ;;Total ram usage:        2 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    3
  3308 ;; This function calls:
  3309 ;;		_Timeout_Counter
  3310 ;;		_set_TimeoutCleared
  3311 ;; This function is called by:
  3312 ;;		_getCDS_AD
  3313 ;;		_getLoad_AD
  3314 ;;		_getTemp_AD
  3315 ;;		_getPIR_AD
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _getAD
  3321  0C7E                     _getAD:	
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3325                           ;getAD@adcon0 stored from wreg
  3326  0C7E  00F5               	movwf	getAD@adcon0
  3327                           
  3328                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3329  0C7F  0875               	movf	getAD@adcon0,w
  3330  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0C82  009F               	movwf	31	;volatile
  3333                           
  3334                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3335  0C83  0874               	movf	getAD@adcon1,w
  3336  0C84  1683               	bsf	3,5	;RP0=1, select bank1
  3337  0C85  1303               	bcf	3,6	;RP1=0, select bank1
  3338  0C86  009F               	movwf	31	;volatile
  3339                           
  3340                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3341  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  3342  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  3343  0C89  149F               	bsf	31,1	;volatile
  3344                           
  3345                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3346  0C8A  2C8E               	goto	l4659
  3347  0C8B                     l4657:	
  3348                           
  3349                           ;MCU_B1.c: 437: Timeout_Counter();
  3350  0C8B  158A  23A6  158A   	fcall	_Timeout_Counter
  3351  0C8E                     l4659:	
  3352  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  3353  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  3354  0C90  1C9F               	btfss	31,1	;volatile
  3355  0C91  2C94               	goto	l4663
  3356  0C92  1D27               	btfss	_myMain+2,2
  3357  0C93  2C8B               	goto	l4657
  3358  0C94                     l4663:	
  3359                           
  3360                           ;MCU_B1.c: 438: };
  3361                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3362  0C94  158A  22BE         	fcall	_set_TimeoutCleared
  3363                           
  3364                           ;MCU_B1.c: 440: return ADRES;
  3365  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0C98  081E               	movf	30,w	;volatile
  3368  0C99  0008               	return
  3369  0C9A                     __end_of_getAD:	
  3370                           
  3371                           	psect	text8
  3372  0ABE                     __ptext8:	
  3373 ;; *************** function _set_TimeoutCleared *****************
  3374 ;; Defined at:
  3375 ;;		line 281 in file "../src/Main_B1.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;		None               void
  3382 ;; Registers used:
  3383 ;;		status,2
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3389 ;;      Params:         0       0       0       0
  3390 ;;      Locals:         0       0       0       0
  3391 ;;      Temps:          0       0       0       0
  3392 ;;      Totals:         0       0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    2
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_getAD
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _set_TimeoutCleared
  3405  0ABE                     _set_TimeoutCleared:	
  3406                           
  3407                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _set_TimeoutCleared: [status,2]
  3411  0ABE  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0ABF  1303               	bcf	3,6	;RP1=0, select bank0
  3413  0AC0  1127               	bcf	_myMain+2,2
  3414                           
  3415                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3416  0AC1  01A8               	clrf	_myMain+3
  3417  0AC2  01A9               	clrf	_myMain+4
  3418  0AC3  0008               	return
  3419  0AC4                     __end_of_set_TimeoutCleared:	
  3420                           
  3421                           	psect	text9
  3422  0BA6                     __ptext9:	
  3423 ;; *************** function _Timeout_Counter *****************
  3424 ;; Defined at:
  3425 ;;		line 272 in file "../src/Main_B1.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;		None               void
  3432 ;; Registers used:
  3433 ;;		wreg, status,2
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3439 ;;      Params:         0       0       0       0
  3440 ;;      Locals:         0       0       0       0
  3441 ;;      Temps:          0       0       0       0
  3442 ;;      Totals:         0       0       0       0
  3443 ;;Total ram usage:        0 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    2
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_getAD
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _Timeout_Counter
  3455  0BA6                     _Timeout_Counter:	
  3456                           
  3457                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3458                           
  3459                           ;incstack = 0
  3460                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3461  0BA6  3001               	movlw	1
  3462  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0BA9  07A8               	addwf	_myMain+3,f
  3465  0BAA  1803               	skipnc
  3466  0BAB  0AA9               	incf	_myMain+4,f
  3467  0BAC  3000               	movlw	0
  3468  0BAD  07A9               	addwf	_myMain+4,f
  3469                           
  3470                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3471  0BAE  3061               	movlw	97
  3472  0BAF  0629               	xorwf	_myMain+4,w
  3473  0BB0  1D03               	skipz
  3474  0BB1  2BB4               	goto	u5235
  3475  0BB2  30A8               	movlw	168
  3476  0BB3  0628               	xorwf	_myMain+3,w
  3477  0BB4                     u5235:	
  3478  0BB4  1D03               	skipz
  3479  0BB5  0008               	return
  3480                           
  3481                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3482  0BB6  01A8               	clrf	_myMain+3
  3483  0BB7  01A9               	clrf	_myMain+4
  3484                           
  3485                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3486  0BB8  1527               	bsf	_myMain+2,2
  3487  0BB9  0008               	return
  3488  0BBA                     __end_of_Timeout_Counter:	
  3489                           
  3490                           	psect	text10
  3491  0B83                     __ptext10:	
  3492 ;; *************** function _WDT_Main *****************
  3493 ;; Defined at:
  3494 ;;		line 1103 in file "../src/MCU_B1.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;		None               void
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, pclath, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3508 ;;      Params:         0       0       0       0
  3509 ;;      Locals:         0       0       0       0
  3510 ;;      Temps:          1       0       0       0
  3511 ;;      Totals:         1       0       0       0
  3512 ;;Total ram usage:        1 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    3
  3515 ;; This function calls:
  3516 ;;		_WDT_Clearing
  3517 ;; This function is called by:
  3518 ;;		_main
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           
  3523                           ;psect for function _WDT_Main
  3524  0B83                     _WDT_Main:	
  3525                           
  3526                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3527                           
  3528                           ;incstack = 0
  3529                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3530  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0B85  1C35               	btfss	_WDT,0
  3533  0B86  0008               	return
  3534                           
  3535                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3536  0B87  3001               	movlw	1
  3537  0B88  02B6               	subwf	_WDT+1,f
  3538  0B89  0836               	movf	_WDT+1,w
  3539  0B8A  3AFF               	xorlw	255
  3540  0B8B  1903               	skipnz
  3541  0B8C  0008               	return
  3542                           
  3543                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3544  0B8D  3064               	movlw	100
  3545  0B8E  00F4               	movwf	??_WDT_Main
  3546  0B8F  0874               	movf	??_WDT_Main,w
  3547  0B90  00B6               	movwf	_WDT+1
  3548                           
  3549                           ;MCU_B1.c: 1107: WDT_Clearing();
  3550  0B91  118A  2002         	fcall	_WDT_Clearing
  3551  0B93  0008               	return
  3552  0B94                     __end_of_WDT_Main:	
  3553                           
  3554                           	psect	text11
  3555  0002                     __ptext11:	
  3556 ;; *************** function _WDT_Clearing *****************
  3557 ;; Defined at:
  3558 ;;		line 1113 in file "../src/MCU_B1.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		None
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3572 ;;      Params:         0       0       0       0
  3573 ;;      Locals:         0       0       0       0
  3574 ;;      Temps:          0       0       0       0
  3575 ;;      Totals:         0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_WDT_Main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _WDT_Clearing
  3588  0002                     _WDT_Clearing:	
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in _WDT_Clearing: []
  3592  0002  0064               	clrwdt	;# 
  3593  0003  0008               	return
  3594  0004                     __end_of_WDT_Clearing:	
  3595                           
  3596                           	psect	text12
  3597  0A9E                     __ptext12:	
  3598 ;; *************** function _Temp_Main *****************
  3599 ;; Defined at:
  3600 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3614 ;;      Params:         0       0       0       0
  3615 ;;      Locals:         0       0       0       0
  3616 ;;      Temps:          0       0       0       0
  3617 ;;      Totals:         0       0       0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    4
  3621 ;; This function calls:
  3622 ;;		_setTemp_Main
  3623 ;; This function is called by:
  3624 ;;		_main
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _Temp_Main
  3630  0A9E                     _Temp_Main:	
  3631                           
  3632                           ;OverTemperature_B1.c: 54: setTemp_Main();
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3636  0A9E  118A  25FB         	fcall	_setTemp_Main
  3637  0AA0  0008               	return
  3638  0AA1                     __end_of_Temp_Main:	
  3639                           
  3640                           	psect	text13
  3641  05FB                     __ptext13:	
  3642 ;; *************** function _setTemp_Main *****************
  3643 ;; Defined at:
  3644 ;;		line 59 in file "../src/OverTemperature_B1.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  AD              1   11[BANK0 ] unsigned char 
  3649 ;;  DangerValue     1   10[BANK0 ] unsigned char 
  3650 ;;  SafeValue       1    9[BANK0 ] unsigned char 
  3651 ;;  error           1    8[BANK0 ] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;		None               void
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0, pclath, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3661 ;;      Params:         0       0       0       0
  3662 ;;      Locals:         0       4       0       0
  3663 ;;      Temps:          1       0       0       0
  3664 ;;      Totals:         1       4       0       0
  3665 ;;Total ram usage:        5 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    3
  3668 ;; This function calls:
  3669 ;;		___awdiv
  3670 ;;		_getMain_All_Error_Status
  3671 ;;		_getMain_All_LightsStatus
  3672 ;; This function is called by:
  3673 ;;		_Temp_Main
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _setTemp_Main
  3679  05FB                     _setTemp_Main:	
  3680                           
  3681                           ;OverTemperature_B1.c: 60: char error = getMain_All_Error_Status(0);
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3685  05FB  3000               	movlw	0
  3686  05FC  158A  25BC  118A   	fcall	_getMain_All_Error_Status
  3687  05FF  00F5               	movwf	??_setTemp_Main
  3688  0600  0875               	movf	??_setTemp_Main,w
  3689  0601  1283               	bcf	3,5	;RP0=0, select bank0
  3690  0602  1303               	bcf	3,6	;RP1=0, select bank0
  3691  0603  00D4               	movwf	setTemp_Main@error
  3692                           
  3693                           ;OverTemperature_B1.c: 61: ADtype SafeValue = 0, DangerValue = 0, AD;
  3694  0604  01D5               	clrf	setTemp_Main@SafeValue
  3695  0605  01D6               	clrf	setTemp_Main@DangerValue
  3696                           
  3697                           ;OverTemperature_B1.c: 62: if (Temp.Enable == 1) {
  3698  0606  1C39               	btfss	_Temp,0
  3699  0607  2E7F               	goto	l840
  3700                           
  3701                           ;OverTemperature_B1.c: 69: if (Temp.ADtoGO == 0) {
  3702  0608  1939               	btfsc	_Temp,2
  3703  0609  2E1B               	goto	l4761
  3704                           
  3705                           ;OverTemperature_B1.c: 70: Temp.Time++;
  3706  060A  3001               	movlw	1
  3707  060B  07BA               	addwf	_Temp+1,f
  3708  060C  1803               	skipnc
  3709  060D  0ABB               	incf	_Temp+2,f
  3710  060E  3000               	movlw	0
  3711  060F  07BB               	addwf	_Temp+2,f
  3712                           
  3713                           ;OverTemperature_B1.c: 71: if (Temp.Time >= (5000 / 20)) {
  3714  0610  3000               	movlw	0
  3715  0611  023B               	subwf	_Temp+2,w
  3716  0612  30FA               	movlw	250
  3717  0613  1903               	skipnz
  3718  0614  023A               	subwf	_Temp+1,w
  3719  0615  1C03               	skipc
  3720  0616  0008               	return
  3721                           
  3722                           ;OverTemperature_B1.c: 72: Temp.Time = 0;
  3723  0617  01BA               	clrf	_Temp+1
  3724  0618  01BB               	clrf	_Temp+2
  3725                           
  3726                           ;OverTemperature_B1.c: 73: Temp.ADtoGO = 1;
  3727  0619  1539               	bsf	_Temp,2
  3728                           
  3729                           ;OverTemperature_B1.c: 74: }
  3730                           ;OverTemperature_B1.c: 75: } else {
  3731  061A  0008               	return
  3732  061B                     l4761:	
  3733                           
  3734                           ;OverTemperature_B1.c: 76: Temp.Time++;
  3735  061B  3001               	movlw	1
  3736  061C  07BA               	addwf	_Temp+1,f
  3737  061D  1803               	skipnc
  3738  061E  0ABB               	incf	_Temp+2,f
  3739  061F  3000               	movlw	0
  3740  0620  07BB               	addwf	_Temp+2,f
  3741                           
  3742                           ;OverTemperature_B1.c: 77: if (Temp.Time >= (40 / 20)) {
  3743  0621  3000               	movlw	0
  3744  0622  023B               	subwf	_Temp+2,w
  3745  0623  3002               	movlw	2
  3746  0624  1903               	skipnz
  3747  0625  023A               	subwf	_Temp+1,w
  3748  0626  1C03               	skipc
  3749  0627  0008               	return
  3750                           
  3751                           ;OverTemperature_B1.c: 78: Temp.Time = 0;
  3752  0628  01BA               	clrf	_Temp+1
  3753  0629  01BB               	clrf	_Temp+2
  3754                           
  3755                           ;OverTemperature_B1.c: 80: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3756  062A  083D               	movf	_Temp+4,w
  3757  062B  1903               	btfsc	3,2
  3758  062C  2E7C               	goto	l845
  3759  062D  083E               	movf	_Temp+5,w
  3760  062E  1903               	btfsc	3,2
  3761  062F  2E7C               	goto	l845
  3762                           
  3763                           ;OverTemperature_B1.c: 81: Temp.ADtoGO = 0;
  3764  0630  1139               	bcf	_Temp,2
  3765                           
  3766                           ;OverTemperature_B1.c: 82: AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3767  0631  3002               	movlw	2
  3768  0632  00CC               	movwf	___awdiv@divisor
  3769  0633  3000               	movlw	0
  3770  0634  00CD               	movwf	___awdiv@divisor+1
  3771  0635  083D               	movf	_Temp+4,w
  3772  0636  073E               	addwf	_Temp+5,w
  3773  0637  00CE               	movwf	___awdiv@dividend
  3774  0638  01CF               	clrf	___awdiv@dividend+1
  3775  0639  0DCF               	rlf	___awdiv@dividend+1,f
  3776  063A  158A  26D8  118A   	fcall	___awdiv
  3777  063D  1283               	bcf	3,5	;RP0=0, select bank0
  3778  063E  1303               	bcf	3,6	;RP1=0, select bank0
  3779  063F  084C               	movf	?___awdiv,w
  3780  0640  00F5               	movwf	??_setTemp_Main
  3781  0641  0875               	movf	??_setTemp_Main,w
  3782  0642  00D7               	movwf	setTemp_Main@AD
  3783                           
  3784                           ;OverTemperature_B1.c: 85: if (getMain_All_LightsStatus() == 1) {
  3785  0643  158A  22F2  118A   	fcall	_getMain_All_LightsStatus
  3786  0646  3A01               	xorlw	1
  3787  0647  1D03               	skipz
  3788  0648  2E51               	goto	l4777
  3789                           
  3790                           ;OverTemperature_B1.c: 86: SafeValue = 0x85;
  3791  0649  3085               	movlw	133
  3792  064A  00F5               	movwf	??_setTemp_Main
  3793  064B  0875               	movf	??_setTemp_Main,w
  3794  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3795  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3796  064E  00D5               	movwf	setTemp_Main@SafeValue
  3797                           
  3798                           ;OverTemperature_B1.c: 87: DangerValue = 0x70;
  3799  064F  3070               	movlw	112
  3800  0650  2E58               	goto	L7
  3801  0651                     l4777:	
  3802                           ;OverTemperature_B1.c: 88: } else {
  3803                           
  3804                           
  3805                           ;OverTemperature_B1.c: 89: SafeValue = 0x4f;
  3806  0651  304F               	movlw	79
  3807  0652  00F5               	movwf	??_setTemp_Main
  3808  0653  0875               	movf	??_setTemp_Main,w
  3809  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3810  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3811  0656  00D5               	movwf	setTemp_Main@SafeValue
  3812                           
  3813                           ;OverTemperature_B1.c: 90: DangerValue = 0x40;
  3814  0657  3040               	movlw	64
  3815  0658                     L7:	
  3816  0658  00F5               	movwf	??_setTemp_Main
  3817  0659  0875               	movf	??_setTemp_Main,w
  3818  065A  00D6               	movwf	setTemp_Main@DangerValue
  3819                           
  3820                           ;OverTemperature_B1.c: 91: }
  3821                           ;OverTemperature_B1.c: 103: if (Temp.ERROR == 1) {
  3822  065B  1CB9               	btfss	_Temp,1
  3823  065C  2E6C               	goto	l4793
  3824                           
  3825                           ;OverTemperature_B1.c: 104: if (AD >= SafeValue) {
  3826  065D  0855               	movf	setTemp_Main@SafeValue,w
  3827  065E  0257               	subwf	setTemp_Main@AD,w
  3828  065F  1C03               	skipc
  3829  0660  2E7B               	goto	l4803
  3830                           
  3831                           ;OverTemperature_B1.c: 105: Temp.Count++;
  3832  0661  3001               	movlw	1
  3833  0662  00F5               	movwf	??_setTemp_Main
  3834  0663  0875               	movf	??_setTemp_Main,w
  3835  0664  07BC               	addwf	_Temp+3,f
  3836                           
  3837                           ;OverTemperature_B1.c: 106: if (Temp.Count >= 3) {
  3838  0665  3003               	movlw	3
  3839  0666  023C               	subwf	_Temp+3,w
  3840  0667  1C03               	skipc
  3841  0668  2E7C               	goto	l845
  3842                           
  3843                           ;OverTemperature_B1.c: 107: Temp.Count = 0;
  3844  0669  01BC               	clrf	_Temp+3
  3845                           
  3846                           ;OverTemperature_B1.c: 108: Temp.ERROR = 0;
  3847  066A  10B9               	bcf	_Temp,1
  3848                           
  3849                           ;OverTemperature_B1.c: 110: }
  3850                           ;OverTemperature_B1.c: 111: } else {
  3851                           
  3852                           ;OverTemperature_B1.c: 109: ;;
  3853  066B  2E7C               	goto	l845
  3854  066C                     l4793:	
  3855                           ;OverTemperature_B1.c: 113: }
  3856                           ;OverTemperature_B1.c: 114: } else {
  3857                           
  3858                           ;OverTemperature_B1.c: 112: Temp.Count = 0;
  3859                           
  3860                           
  3861                           ;OverTemperature_B1.c: 115: if (AD <= DangerValue) {
  3862  066C  0857               	movf	setTemp_Main@AD,w
  3863  066D  0256               	subwf	setTemp_Main@DangerValue,w
  3864  066E  1C03               	skipc
  3865  066F  2E7B               	goto	l4803
  3866                           
  3867                           ;OverTemperature_B1.c: 116: Temp.Count++;
  3868  0670  3001               	movlw	1
  3869  0671  00F5               	movwf	??_setTemp_Main
  3870  0672  0875               	movf	??_setTemp_Main,w
  3871  0673  07BC               	addwf	_Temp+3,f
  3872                           
  3873                           ;OverTemperature_B1.c: 117: if (Temp.Count >= 3) {
  3874  0674  3003               	movlw	3
  3875  0675  023C               	subwf	_Temp+3,w
  3876  0676  1C03               	skipc
  3877  0677  2E7C               	goto	l845
  3878                           
  3879                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3880  0678  01BC               	clrf	_Temp+3
  3881                           
  3882                           ;OverTemperature_B1.c: 119: Temp.ERROR = 1;
  3883  0679  14B9               	bsf	_Temp,1
  3884                           
  3885                           ;OverTemperature_B1.c: 120: }
  3886                           ;OverTemperature_B1.c: 121: } else {
  3887  067A  2E7C               	goto	l845
  3888  067B                     l4803:	
  3889                           
  3890                           ;OverTemperature_B1.c: 122: Temp.Count = 0;
  3891  067B  01BC               	clrf	_Temp+3
  3892  067C                     l845:	
  3893                           ;OverTemperature_B1.c: 123: }
  3894                           ;OverTemperature_B1.c: 124: }
  3895                           ;OverTemperature_B1.c: 125: ;;
  3896                           ;OverTemperature_B1.c: 126: ;;
  3897                           
  3898                           
  3899                           ;OverTemperature_B1.c: 142: }
  3900                           ;OverTemperature_B1.c: 143: Temp.ADH[0] = 0;
  3901  067C  01BD               	clrf	_Temp+4
  3902                           
  3903                           ;OverTemperature_B1.c: 144: Temp.ADH[1] = 0;
  3904  067D  01BE               	clrf	_Temp+5
  3905                           
  3906                           ;OverTemperature_B1.c: 145: }
  3907                           ;OverTemperature_B1.c: 146: }
  3908                           ;OverTemperature_B1.c: 148: } else {
  3909  067E  0008               	return
  3910  067F                     l840:	
  3911                           
  3912                           ;OverTemperature_B1.c: 149: if (myMain.PowerON == 1) {
  3913  067F  1C25               	btfss	_myMain,0
  3914  0680  0008               	return
  3915                           
  3916                           ;OverTemperature_B1.c: 150: Temp.Enable = 1;
  3917  0681  1439               	bsf	_Temp,0
  3918  0682  0008               	return
  3919  0683                     __end_of_setTemp_Main:	
  3920                           
  3921                           	psect	text14
  3922  0A9B                     __ptext14:	
  3923 ;; *************** function _Temp_Initialization *****************
  3924 ;; Defined at:
  3925 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;		None               void
  3932 ;; Registers used:
  3933 ;;		status,2, status,0, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3939 ;;      Params:         0       0       0       0
  3940 ;;      Locals:         0       0       0       0
  3941 ;;      Temps:          0       0       0       0
  3942 ;;      Totals:         0       0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    3
  3946 ;; This function calls:
  3947 ;;		_setTemp_Initialization
  3948 ;; This function is called by:
  3949 ;;		_main
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _Temp_Initialization
  3955  0A9B                     _Temp_Initialization:	
  3956                           
  3957                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3958                           
  3959                           ;incstack = 0
  3960                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3961  0A9B  158A  228D         	fcall	_setTemp_Initialization
  3962  0A9D  0008               	return
  3963  0A9E                     __end_of_Temp_Initialization:	
  3964                           
  3965                           	psect	text15
  3966  0A8D                     __ptext15:	
  3967 ;; *************** function _setTemp_Initialization *****************
  3968 ;; Defined at:
  3969 ;;		line 47 in file "../src/OverTemperature_B1.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		None
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3983 ;;      Params:         0       0       0       0
  3984 ;;      Locals:         0       0       0       0
  3985 ;;      Temps:          0       0       0       0
  3986 ;;      Totals:         0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    2
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_Temp_Initialization
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _setTemp_Initialization
  3999  0A8D                     _setTemp_Initialization:	
  4000                           
  4001                           ;incstack = 0
  4002                           ; Regs used in _setTemp_Initialization: []
  4003  0A8D  0008               	return
  4004  0A8E                     __end_of_setTemp_Initialization:	
  4005                           
  4006                           	psect	text16
  4007  0A98                     __ptext16:	
  4008 ;; *************** function _SYSC_Main *****************
  4009 ;; Defined at:
  4010 ;;		line 17 in file "../src/SYSC_B1.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;		None               void
  4017 ;; Registers used:
  4018 ;;		wreg, status,2, status,0, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4024 ;;      Params:         0       0       0       0
  4025 ;;      Locals:         0       0       0       0
  4026 ;;      Temps:          0       0       0       0
  4027 ;;      Totals:         0       0       0       0
  4028 ;;Total ram usage:        0 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    4
  4031 ;; This function calls:
  4032 ;;		_setSYSC_Main
  4033 ;; This function is called by:
  4034 ;;		_main
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _SYSC_Main
  4040  0A98                     _SYSC_Main:	
  4041                           
  4042                           ;SYSC_B1.c: 19: setSYSC_Main();
  4043                           
  4044                           ;incstack = 0
  4045                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4046  0A98  158A  263A         	fcall	_setSYSC_Main
  4047  0A9A  0008               	return
  4048  0A9B                     __end_of_SYSC_Main:	
  4049                           
  4050                           	psect	text17
  4051  0E3A                     __ptext17:	
  4052 ;; *************** function _setSYSC_Main *****************
  4053 ;; Defined at:
  4054 ;;		line 23 in file "../src/SYSC_B1.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4068 ;;      Params:         0       0       0       0
  4069 ;;      Locals:         0       0       0       0
  4070 ;;      Temps:          0       0       0       0
  4071 ;;      Totals:         0       0       0       0
  4072 ;;Total ram usage:        0 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    3
  4075 ;; This function calls:
  4076 ;;		_getMain_All_Error_Status
  4077 ;; This function is called by:
  4078 ;;		_SYSC_Main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           
  4083                           ;psect for function _setSYSC_Main
  4084  0E3A                     _setSYSC_Main:	
  4085                           
  4086                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4087                           
  4088                           ;incstack = 0
  4089                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4090  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  4092  0E3C  1C20               	btfss	_SYSC,0
  4093  0E3D  0008               	return
  4094                           
  4095                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4096  0E3E  18A0               	btfsc	_SYSC,1
  4097  0E3F  2E51               	goto	l3591
  4098                           
  4099                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4100  0E40  3001               	movlw	1
  4101  0E41  07A1               	addwf	_SYSC+1,f
  4102  0E42  1803               	skipnc
  4103  0E43  0AA2               	incf	_SYSC+2,f
  4104  0E44  3000               	movlw	0
  4105  0E45  07A2               	addwf	_SYSC+2,f
  4106                           
  4107                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4108  0E46  3000               	movlw	0
  4109  0E47  0222               	subwf	_SYSC+2,w
  4110  0E48  3008               	movlw	8
  4111  0E49  1903               	skipnz
  4112  0E4A  0221               	subwf	_SYSC+1,w
  4113  0E4B  1C03               	skipc
  4114  0E4C  0008               	return
  4115                           
  4116                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4117  0E4D  01A1               	clrf	_SYSC+1
  4118  0E4E  01A2               	clrf	_SYSC+2
  4119                           
  4120                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4121  0E4F  14A0               	bsf	_SYSC,1
  4122                           
  4123                           ;SYSC_B1.c: 31: }
  4124                           ;SYSC_B1.c: 32: } else {
  4125  0E50  0008               	return
  4126  0E51                     l3591:	
  4127                           
  4128                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4129  0E51  3001               	movlw	1
  4130  0E52  158A  25BC  158A   	fcall	_getMain_All_Error_Status
  4131  0E55  3800               	iorlw	0
  4132  0E56  1D03               	skipz
  4133  0E57  0008               	return
  4134                           
  4135                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4136  0E58  3001               	movlw	1
  4137  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4138  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4139  0E5B  07A1               	addwf	_SYSC+1,f
  4140  0E5C  1803               	skipnc
  4141  0E5D  0AA2               	incf	_SYSC+2,f
  4142  0E5E  3000               	movlw	0
  4143  0E5F  07A2               	addwf	_SYSC+2,f
  4144                           
  4145                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4146  0E60  3019               	movlw	25
  4147  0E61  0621               	xorwf	_SYSC+1,w
  4148  0E62  0422               	iorwf	_SYSC+2,w
  4149  0E63  1D03               	skipz
  4150  0E64  2E6A               	goto	l3597
  4151                           
  4152                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4153  0E65  01A1               	clrf	_SYSC+1
  4154  0E66  01A2               	clrf	_SYSC+2
  4155                           
  4156                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4157  0E67  01A3               	clrf	_SYSC+3
  4158  0E68  01A4               	clrf	_SYSC+4
  4159                           
  4160                           ;SYSC_B1.c: 38: } else {
  4161  0E69  0008               	return
  4162  0E6A                     l3597:	
  4163                           
  4164                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4165  0E6A  3001               	movlw	1
  4166  0E6B  07A3               	addwf	_SYSC+3,f
  4167  0E6C  1803               	skipnc
  4168  0E6D  0AA4               	incf	_SYSC+4,f
  4169  0E6E  3000               	movlw	0
  4170  0E6F  07A4               	addwf	_SYSC+4,f
  4171                           
  4172                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4173  0E70  3001               	movlw	1
  4174  0E71  0624               	xorwf	_SYSC+4,w
  4175  0E72  1D03               	skipz
  4176  0E73  2E76               	goto	u3375
  4177  0E74  30F4               	movlw	244
  4178  0E75  0623               	xorwf	_SYSC+3,w
  4179  0E76                     u3375:	
  4180  0E76  1D03               	skipz
  4181  0E77  0008               	return
  4182                           
  4183                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4184  0E78  01A3               	clrf	_SYSC+3
  4185  0E79  01A4               	clrf	_SYSC+4
  4186                           
  4187                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4188  0E7A  10A0               	bcf	_SYSC,1
  4189  0E7B  0008               	return
  4190  0E7C                     __end_of_setSYSC_Main:	
  4191                           
  4192                           	psect	text18
  4193  0A95                     __ptext18:	
  4194 ;; *************** function _SYSC_Initialization *****************
  4195 ;; Defined at:
  4196 ;;		line 7 in file "../src/SYSC_B1.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;		None               void
  4203 ;; Registers used:
  4204 ;;		status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4210 ;;      Params:         0       0       0       0
  4211 ;;      Locals:         0       0       0       0
  4212 ;;      Temps:          0       0       0       0
  4213 ;;      Totals:         0       0       0       0
  4214 ;;Total ram usage:        0 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    3
  4217 ;; This function calls:
  4218 ;;		_setSYSC_Initialization
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _SYSC_Initialization
  4226  0A95                     _SYSC_Initialization:	
  4227                           
  4228                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4232  0A95  158A  22A9         	fcall	_setSYSC_Initialization
  4233  0A97  0008               	return
  4234  0A98                     __end_of_SYSC_Initialization:	
  4235                           
  4236                           	psect	text19
  4237  0AA9                     __ptext19:	
  4238 ;; *************** function _setSYSC_Initialization *****************
  4239 ;; Defined at:
  4240 ;;		line 13 in file "../src/SYSC_B1.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;		None               void
  4247 ;; Registers used:
  4248 ;;		None
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4254 ;;      Params:         0       0       0       0
  4255 ;;      Locals:         0       0       0       0
  4256 ;;      Temps:          0       0       0       0
  4257 ;;      Totals:         0       0       0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    2
  4261 ;; This function calls:
  4262 ;;		Nothing
  4263 ;; This function is called by:
  4264 ;;		_SYSC_Initialization
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _setSYSC_Initialization
  4270  0AA9                     _setSYSC_Initialization:	
  4271                           
  4272                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _setSYSC_Initialization: []
  4276  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0AAB  1420               	bsf	_SYSC,0
  4279  0AAC  0008               	return
  4280  0AAD                     __end_of_setSYSC_Initialization:	
  4281                           
  4282                           	psect	text20
  4283  0026                     __ptext20:	
  4284 ;; *************** function _PIR_Main *****************
  4285 ;; Defined at:
  4286 ;;		line 13 in file "../src/PIR_B1.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4291 ;;  cds             1   16[BANK0 ] unsigned char 
  4292 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  4293 ;;  Enable_Switc    1   12[BANK0 ] unsigned char 
  4294 ;;  error           1   11[BANK0 ] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;		None               void
  4297 ;; Registers used:
  4298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4304 ;;      Params:         0       0       0       0
  4305 ;;      Locals:         0       7       0       0
  4306 ;;      Temps:          0       5       0       0
  4307 ;;      Totals:         0      12       0       0
  4308 ;;Total ram usage:       12 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    5
  4311 ;; This function calls:
  4312 ;;		_getCDS_Status
  4313 ;;		_getLights_Status
  4314 ;;		_getMain_All_Error_Status
  4315 ;;		_setLED
  4316 ;;		_setLights_SwOff
  4317 ;;		_setLights_SwOn
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _PIR_Main
  4325  0026                     _PIR_Main:	
  4326                           
  4327                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4331  0026  3000               	movlw	0
  4332  0027  158A  25BC  118A   	fcall	_getMain_All_Error_Status
  4333  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4334  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4335  002C  00D2               	movwf	??_PIR_Main
  4336  002D  0852               	movf	??_PIR_Main,w
  4337  002E  00D7               	movwf	PIR_Main@error
  4338                           
  4339                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4340  002F  158A  22E2  118A   	fcall	_getCDS_Status
  4341  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4342  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4343  0034  00D2               	movwf	??_PIR_Main
  4344  0035  0852               	movf	??_PIR_Main,w
  4345  0036  00DC               	movwf	PIR_Main@cds
  4346                           
  4347                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4348  0037  01DD               	clrf	PIR_Main@LightsStatus
  4349                           
  4350                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4351  0038  01D8               	clrf	PIR_Main@Enable_Switch
  4352  0039  0AD8               	incf	PIR_Main@Enable_Switch,f
  4353                           
  4354                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4355  003A  01DB               	clrf	PIR_Main@TriggerValue
  4356                           
  4357                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4358  003B  3001               	movlw	1
  4359  003C  158A  2372  118A   	fcall	_getLights_Status
  4360  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0041  00D2               	movwf	??_PIR_Main
  4363  0042  0852               	movf	??_PIR_Main,w
  4364  0043  00DD               	movwf	PIR_Main@LightsStatus
  4365                           
  4366                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4367  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4368  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4369  0046  1C20               	btfss	__PIR^(0+128),0
  4370  0047  2A03               	goto	l914
  4371                           
  4372                           ;PIR_B1.c: 36: if (error == 0) {
  4373  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4374  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4375  004A  08D7               	movf	PIR_Main@error,f
  4376  004B  1D03               	skipz
  4377  004C  287D               	goto	l915
  4378                           
  4379                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4380  004D  085C               	movf	PIR_Main@cds,w
  4381  004E  3A01               	xorlw	1
  4382  004F  1D03               	skipz
  4383  0050  2859               	goto	l916
  4384  0051  0858               	movf	PIR_Main@Enable_Switch,w
  4385  0052  3A01               	xorlw	1
  4386  0053  1D03               	skipz
  4387  0054  2859               	goto	l916
  4388                           
  4389                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4390  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4391  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4392  0057  17A0               	bsf	__PIR^(0+128),7
  4393                           
  4394                           ;PIR_B1.c: 40: } else {
  4395  0058  286D               	goto	l5257
  4396  0059                     l916:	
  4397                           
  4398                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4399  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4400  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4401  005B  13A0               	bcf	__PIR^(0+128),7
  4402                           
  4403                           ;PIR_B1.c: 42: if (_PIR.OK == 1) {
  4404  005C  1DA0               	btfss	__PIR^(0+128),3
  4405  005D  286D               	goto	l5257
  4406                           
  4407                           ;PIR_B1.c: 44: if (getLights_Status(1) == 1) {
  4408  005E  3001               	movlw	1
  4409  005F  158A  2372  118A   	fcall	_getLights_Status
  4410  0062  3A01               	xorlw	1
  4411  0063  1D03               	skipz
  4412  0064  286D               	goto	l5257
  4413                           
  4414                           ;PIR_B1.c: 45: setLights_SwOn(1);
  4415  0065  3001               	movlw	1
  4416  0066  158A  24DA  118A   	fcall	_setLights_SwOn
  4417                           
  4418                           ;PIR_B1.c: 46: setLights_SwOff(1);
  4419  0069  3001               	movlw	1
  4420  006A  158A  2415  118A   	fcall	_setLights_SwOff
  4421  006D                     l5257:	
  4422                           
  4423                           ;PIR_B1.c: 48: }
  4424                           ;PIR_B1.c: 59: }
  4425                           ;PIR_B1.c: 60: }
  4426                           ;PIR_B1.c: 64: if (_PIR.Detect == 0) {
  4427  006D  1683               	bsf	3,5	;RP0=1, select bank1
  4428  006E  1303               	bcf	3,6	;RP1=0, select bank1
  4429  006F  1A20               	btfsc	__PIR^(0+128),4
  4430  0070  2883               	goto	l922
  4431                           
  4432                           ;PIR_B1.c: 65: _PIR.Detect = 1;
  4433  0071  1620               	bsf	__PIR^(0+128),4
  4434                           
  4435                           ;PIR_B1.c: 67: if (_PIR.OK == 0) {
  4436  0072  19A0               	btfsc	__PIR^(0+128),3
  4437  0073  2883               	goto	l922
  4438                           
  4439                           ;PIR_B1.c: 68: setLED(1, 1);
  4440  0074  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0075  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0076  01CC               	clrf	setLED@command
  4443  0077  0ACC               	incf	setLED@command,f
  4444  0078  3001               	movlw	1
  4445  0079  158A  2735  118A   	fcall	_setLED
  4446                           
  4447                           ;PIR_B1.c: 69: }
  4448                           ;PIR_B1.c: 71: }
  4449                           ;PIR_B1.c: 72: } else {
  4450  007C  2883               	goto	l922
  4451  007D                     l915:	
  4452                           
  4453                           ;PIR_B1.c: 73: if (_PIR.Detect == 1) {
  4454  007D  1683               	bsf	3,5	;RP0=1, select bank1
  4455  007E  1303               	bcf	3,6	;RP1=0, select bank1
  4456  007F  1E20               	btfss	__PIR^(0+128),4
  4457  0080  2883               	goto	l922
  4458                           
  4459                           ;PIR_B1.c: 74: _PIR.Detect = 0;
  4460  0081  1220               	bcf	__PIR^(0+128),4
  4461                           
  4462                           ;PIR_B1.c: 75: _PIR.Available = 0;
  4463  0082  13A0               	bcf	__PIR^(0+128),7
  4464  0083                     l922:	
  4465                           
  4466                           ;PIR_B1.c: 93: }
  4467                           ;PIR_B1.c: 94: }
  4468                           ;PIR_B1.c: 96: if (_PIR.ADtoGO == 0) {
  4469  0083  1683               	bsf	3,5	;RP0=1, select bank1
  4470  0084  1303               	bcf	3,6	;RP1=0, select bank1
  4471  0085  18A0               	btfsc	__PIR^(0+128),1
  4472  0086  2896               	goto	l924
  4473                           
  4474                           ;PIR_B1.c: 97: _PIR.Time++;
  4475  0087  3001               	movlw	1
  4476  0088  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0089  1303               	bcf	3,6	;RP1=0, select bank0
  4478  008A  00D2               	movwf	??_PIR_Main
  4479  008B  0852               	movf	??_PIR_Main,w
  4480  008C  1683               	bsf	3,5	;RP0=1, select bank1
  4481  008D  1303               	bcf	3,6	;RP1=0, select bank1
  4482  008E  07A2               	addwf	(__PIR^(0+128)+2),f
  4483                           
  4484                           ;PIR_B1.c: 98: if (_PIR.Time == (100 / 20)) {
  4485  008F  0822               	movf	(__PIR^(0+128)+2),w
  4486  0090  3A05               	xorlw	5
  4487  0091  1D03               	skipz
  4488  0092  29A3               	goto	l5345
  4489                           
  4490                           ;PIR_B1.c: 99: _PIR.Time = 0;
  4491  0093  01A2               	clrf	(__PIR^(0+128)+2)
  4492                           
  4493                           ;PIR_B1.c: 100: _PIR.ADtoGO = 1;
  4494  0094  14A0               	bsf	__PIR^(0+128),1
  4495                           
  4496                           ;PIR_B1.c: 101: }
  4497                           ;PIR_B1.c: 102: } else {
  4498  0095  29A3               	goto	l5345
  4499  0096                     l924:	
  4500                           
  4501                           ;PIR_B1.c: 103: if (_PIR.GO == 1) {
  4502  0096  1D20               	btfss	__PIR^(0+128),2
  4503  0097  29A3               	goto	l5345
  4504                           
  4505                           ;PIR_B1.c: 104: _PIR.GO = 0;
  4506  0098  1120               	bcf	__PIR^(0+128),2
  4507                           
  4508                           ;PIR_B1.c: 105: _PIR.ADtoGO = 0;
  4509  0099  10A0               	bcf	__PIR^(0+128),1
  4510                           
  4511                           ;PIR_B1.c: 106: if (_PIR.Available == 1) {
  4512  009A  1BA0               	btfsc	__PIR^(0+128),7
  4513                           
  4514                           ;PIR_B1.c: 107: if (_PIR.OK == 1) {
  4515  009B  1DA0               	btfss	__PIR^(0+128),3
  4516  009C  29A3               	goto	l5345
  4517                           
  4518                           ;PIR_B1.c: 109: _PIR.Time++;
  4519  009D  3001               	movlw	1
  4520  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4521  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4522  00A0  00D2               	movwf	??_PIR_Main
  4523  00A1  0852               	movf	??_PIR_Main,w
  4524  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  4525  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  4526  00A4  07A2               	addwf	(__PIR^(0+128)+2),f
  4527                           
  4528                           ;PIR_B1.c: 110: if (_PIR.Time == 60) {
  4529  00A5  0822               	movf	(__PIR^(0+128)+2),w
  4530  00A6  3A3C               	xorlw	60
  4531  00A7  1D03               	skipz
  4532  00A8  28DD               	goto	l5313
  4533                           
  4534                           ;PIR_B1.c: 111: _PIR.Time = 0;
  4535  00A9  01A2               	clrf	(__PIR^(0+128)+2)
  4536                           
  4537                           ;PIR_B1.c: 112: if (_PIR.RangeCount >= 90) {
  4538  00AA  305A               	movlw	90
  4539  00AB  0247               	subwf	(__PIR^(0+128)+39),w
  4540  00AC  1C03               	skipc
  4541  00AD  28B9               	goto	l5295
  4542                           
  4543                           ;PIR_B1.c: 113: _PIR.RangeTime1 = 0;
  4544  00AE  01C6               	clrf	(__PIR^(0+128)+38)
  4545                           
  4546                           ;PIR_B1.c: 115: if (_PIR.RangeValue == 25) {
  4547  00AF  0848               	movf	(__PIR^(0+128)+40),w
  4548  00B0  3A19               	xorlw	25
  4549  00B1  1903               	btfsc	3,2
  4550  00B2  28CE               	goto	L13
  4551                           
  4552                           ;PIR_B1.c: 117: } else if (_PIR.RangeValue == (25+10)) {
  4553                           
  4554                           ;PIR_B1.c: 116: _PIR.RangeValue = (25+10);
  4555  00B3  0848               	movf	(__PIR^(0+128)+40),w
  4556  00B4  3A23               	xorlw	35
  4557  00B5  1D03               	skipz
  4558  00B6  28DC               	goto	l5311
  4559                           
  4560                           ;PIR_B1.c: 118: _PIR.RangeValue = (25+20);
  4561  00B7  302D               	movlw	45
  4562  00B8  28D5               	goto	L10
  4563  00B9                     l5295:	
  4564                           ;PIR_B1.c: 119: }
  4565                           ;PIR_B1.c: 120: } else if (_PIR.RangeCount <= 10) {
  4566                           
  4567  00B9  300B               	movlw	11
  4568  00BA  0247               	subwf	(__PIR^(0+128)+39),w
  4569  00BB  1803               	skipnc
  4570  00BC  28DC               	goto	l5311
  4571                           
  4572                           ;PIR_B1.c: 121: _PIR.RangeTime1++;
  4573  00BD  3001               	movlw	1
  4574  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  4575  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  4576  00C0  00D2               	movwf	??_PIR_Main
  4577  00C1  0852               	movf	??_PIR_Main,w
  4578  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  4579  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  4580  00C4  07C6               	addwf	(__PIR^(0+128)+38),f
  4581                           
  4582                           ;PIR_B1.c: 122: if (_PIR.RangeTime1 == 2) {
  4583  00C5  0846               	movf	(__PIR^(0+128)+38),w
  4584  00C6  3A02               	xorlw	2
  4585  00C7  1D03               	skipz
  4586  00C8  28DC               	goto	l5311
  4587                           
  4588                           ;PIR_B1.c: 123: _PIR.RangeTime1 = 0;
  4589  00C9  01C6               	clrf	(__PIR^(0+128)+38)
  4590                           
  4591                           ;PIR_B1.c: 125: if (_PIR.RangeValue == (25+20)) {
  4592  00CA  0848               	movf	(__PIR^(0+128)+40),w
  4593  00CB  3A2D               	xorlw	45
  4594  00CC  1D03               	skipz
  4595  00CD  28D0               	goto	l5307
  4596  00CE                     L13:	
  4597                           
  4598                           ;PIR_B1.c: 126: _PIR.RangeValue = (25+10);
  4599  00CE  3023               	movlw	35
  4600  00CF  28D5               	goto	L10
  4601  00D0                     l5307:	
  4602                           ;PIR_B1.c: 127: } else if (_PIR.RangeValue == (25+10)) {
  4603                           
  4604  00D0  0848               	movf	(__PIR^(0+128)+40),w
  4605  00D1  3A23               	xorlw	35
  4606  00D2  1D03               	skipz
  4607  00D3  28DC               	goto	l5311
  4608                           
  4609                           ;PIR_B1.c: 128: _PIR.RangeValue = 25;
  4610  00D4  3019               	movlw	25
  4611  00D5                     L10:	
  4612  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  4613  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  4614  00D7  00D2               	movwf	??_PIR_Main
  4615  00D8  0852               	movf	??_PIR_Main,w
  4616  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4617  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4618  00DB  00C8               	movwf	(__PIR^(0+128)+40)
  4619  00DC                     l5311:	
  4620                           
  4621                           ;PIR_B1.c: 129: }
  4622                           ;PIR_B1.c: 130: }
  4623                           ;PIR_B1.c: 131: }
  4624                           ;PIR_B1.c: 132: _PIR.RangeCount = 0;
  4625  00DC  01C7               	clrf	(__PIR^(0+128)+39)
  4626  00DD                     l5313:	
  4627                           
  4628                           ;PIR_B1.c: 133: }
  4629                           ;PIR_B1.c: 136: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4630                           ;PIR_B1.c: 137: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4631  00DD  0848               	movf	(__PIR^(0+128)+40),w
  4632  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  4633  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  4634  00E0  00D2               	movwf	??_PIR_Main
  4635  00E1  01D3               	clrf	??_PIR_Main+1
  4636  00E2  09D2               	comf	??_PIR_Main,f
  4637  00E3  09D3               	comf	??_PIR_Main+1,f
  4638  00E4  0AD2               	incf	??_PIR_Main,f
  4639  00E5  1903               	skipnz
  4640  00E6  0AD3               	incf	??_PIR_Main+1,f
  4641  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4642  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4643  00E9  0823               	movf	(__PIR^(0+128)+3),w
  4644  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  4645  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  4646  00EC  0752               	addwf	??_PIR_Main,w
  4647  00ED  00D4               	movwf	??_PIR_Main+2
  4648  00EE  0853               	movf	??_PIR_Main+1,w
  4649  00EF  1803               	skipnc
  4650  00F0  0A53               	incf	??_PIR_Main+1,w
  4651  00F1  00D5               	movwf	??_PIR_Main+3
  4652  00F2  0855               	movf	??_PIR_Main+3,w
  4653  00F3  3A80               	xorlw	128
  4654  00F4  3C80               	sublw	128
  4655  00F5  1D03               	skipz
  4656  00F6  28FB               	goto	u6875
  4657  00F7  0854               	movf	??_PIR_Main+2,w
  4658  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  4659  00F9  1303               	bcf	3,6	;RP1=0, select bank1
  4660  00FA  0221               	subwf	(__PIR^(0+128)+1),w
  4661  00FB                     u6875:	
  4662  00FB  1C03               	skipc
  4663  00FC  291D               	goto	l5323
  4664  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  4665  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  4666  00FF  0823               	movf	(__PIR^(0+128)+3),w
  4667  0100  0748               	addwf	(__PIR^(0+128)+40),w
  4668  0101  1283               	bcf	3,5	;RP0=0, select bank0
  4669  0102  1303               	bcf	3,6	;RP1=0, select bank0
  4670  0103  00D2               	movwf	??_PIR_Main
  4671  0104  01D3               	clrf	??_PIR_Main+1
  4672  0105  0DD3               	rlf	??_PIR_Main+1,f
  4673  0106  0853               	movf	??_PIR_Main+1,w
  4674  0107  3A80               	xorlw	128
  4675  0108  00D4               	movwf	??_PIR_Main+2
  4676  0109  3080               	movlw	128
  4677  010A  0254               	subwf	??_PIR_Main+2,w
  4678  010B  1D03               	skipz
  4679  010C  2913               	goto	u6885
  4680  010D  1683               	bsf	3,5	;RP0=1, select bank1
  4681  010E  1303               	bcf	3,6	;RP1=0, select bank1
  4682  010F  0821               	movf	(__PIR^(0+128)+1),w
  4683  0110  1283               	bcf	3,5	;RP0=0, select bank0
  4684  0111  1303               	bcf	3,6	;RP1=0, select bank0
  4685  0112  0252               	subwf	??_PIR_Main,w
  4686  0113                     u6885:	
  4687  0113  1C03               	skipc
  4688  0114  291D               	goto	l5323
  4689                           
  4690                           ;PIR_B1.c: 139: _PIR.Count = 0;
  4691  0115  1683               	bsf	3,5	;RP0=1, select bank1
  4692  0116  1303               	bcf	3,6	;RP1=0, select bank1
  4693  0117  01BE               	clrf	(__PIR^(0+128)+30)
  4694  0118  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4695                           
  4696                           ;PIR_B1.c: 146: setLED(1, 0);
  4697  0119  1283               	bcf	3,5	;RP0=0, select bank0
  4698  011A  1303               	bcf	3,6	;RP1=0, select bank0
  4699  011B  01CC               	clrf	setLED@command
  4700  011C  298C               	goto	L14
  4701  011D                     l5323:	
  4702                           ;PIR_B1.c: 149: } else {
  4703                           
  4704                           ;PIR_B1.c: 147: setLED(2, 0);
  4705                           
  4706                           
  4707                           ;PIR_B1.c: 152: _PIR.RangeCount++;
  4708  011D  3001               	movlw	1
  4709  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4710  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0120  00D2               	movwf	??_PIR_Main
  4712  0121  0852               	movf	??_PIR_Main,w
  4713  0122  1683               	bsf	3,5	;RP0=1, select bank1
  4714  0123  1303               	bcf	3,6	;RP1=0, select bank1
  4715  0124  07C7               	addwf	(__PIR^(0+128)+39),f
  4716                           
  4717                           ;PIR_B1.c: 153: _PIR.Count++;
  4718  0125  3001               	movlw	1
  4719  0126  07BE               	addwf	(__PIR^(0+128)+30),f
  4720  0127  1803               	skipnc
  4721  0128  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4722  0129  3000               	movlw	0
  4723  012A  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4724                           
  4725                           ;PIR_B1.c: 155: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4726  012B  1283               	bcf	3,5	;RP0=0, select bank0
  4727  012C  1303               	bcf	3,6	;RP1=0, select bank0
  4728  012D  085D               	movf	PIR_Main@LightsStatus,w
  4729  012E  3A01               	xorlw	1
  4730  012F  1903               	skipnz
  4731  0130  2931               	goto	l5331
  4732  0131                     l5331:	
  4733  0131  3003               	movlw	3
  4734  0132  00D9               	movwf	_PIR_Main$2832
  4735  0133  3000               	movlw	0
  4736  0134  00DA               	movwf	_PIR_Main$2832+1
  4737  0135  0859               	movf	_PIR_Main$2832,w
  4738  0136  00D2               	movwf	??_PIR_Main
  4739  0137  0852               	movf	??_PIR_Main,w
  4740  0138  00DB               	movwf	PIR_Main@TriggerValue
  4741                           
  4742                           ;PIR_B1.c: 157: if (_PIR.Count == TriggerValue) {
  4743  0139  085B               	movf	PIR_Main@TriggerValue,w
  4744  013A  00D2               	movwf	??_PIR_Main
  4745  013B  01D3               	clrf	??_PIR_Main+1
  4746  013C  1683               	bsf	3,5	;RP0=1, select bank1
  4747  013D  1303               	bcf	3,6	;RP1=0, select bank1
  4748  013E  083F               	movf	((__PIR+1)^(0+128)+30),w
  4749  013F  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0140  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0141  0653               	xorwf	??_PIR_Main+1,w
  4752  0142  1D03               	skipz
  4753  0143  294A               	goto	u6905
  4754  0144  1683               	bsf	3,5	;RP0=1, select bank1
  4755  0145  1303               	bcf	3,6	;RP1=0, select bank1
  4756  0146  083E               	movf	(__PIR^(0+128)+30),w
  4757  0147  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0148  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0149  0652               	xorwf	??_PIR_Main,w
  4760  014A                     u6905:	
  4761  014A  1D03               	skipz
  4762  014B  29A3               	goto	l5345
  4763                           
  4764                           ;PIR_B1.c: 158: _PIR.Count = 0;
  4765  014C  1683               	bsf	3,5	;RP0=1, select bank1
  4766  014D  1303               	bcf	3,6	;RP1=0, select bank1
  4767  014E  01BE               	clrf	(__PIR^(0+128)+30)
  4768  014F  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4769                           
  4770                           ;PIR_B1.c: 160: _PIR.CloseTimeSeconds = 0;
  4771  0150  01C2               	clrf	(__PIR^(0+128)+34)
  4772                           
  4773                           ;PIR_B1.c: 161: _PIR.CloseTimeMinutes = 0;
  4774  0151  01C0               	clrf	(__PIR^(0+128)+32)
  4775  0152  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4776                           
  4777                           ;PIR_B1.c: 167: if (getLights_Status(1) == 0) {
  4778  0153  3001               	movlw	1
  4779  0154  158A  2372  118A   	fcall	_getLights_Status
  4780  0157  3800               	iorlw	0
  4781  0158  1D03               	skipz
  4782  0159  2962               	goto	l5339
  4783                           
  4784                           ;PIR_B1.c: 168: setLights_SwOn(1);
  4785  015A  3001               	movlw	1
  4786  015B  158A  24DA  118A   	fcall	_setLights_SwOn
  4787                           
  4788                           ;PIR_B1.c: 169: setLights_SwOff(1);
  4789  015E  3001               	movlw	1
  4790  015F  158A  2415  118A   	fcall	_setLights_SwOff
  4791  0162                     l5339:	
  4792                           
  4793                           ;PIR_B1.c: 171: }
  4794                           ;PIR_B1.c: 185: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4795  0162  1683               	bsf	3,5	;RP0=1, select bank1
  4796  0163  1303               	bcf	3,6	;RP1=0, select bank1
  4797  0164  0848               	movf	(__PIR^(0+128)+40),w
  4798  0165  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0166  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0167  00D2               	movwf	??_PIR_Main
  4801  0168  01D3               	clrf	??_PIR_Main+1
  4802  0169  09D2               	comf	??_PIR_Main,f
  4803  016A  09D3               	comf	??_PIR_Main+1,f
  4804  016B  0AD2               	incf	??_PIR_Main,f
  4805  016C  1903               	skipnz
  4806  016D  0AD3               	incf	??_PIR_Main+1,f
  4807  016E  1683               	bsf	3,5	;RP0=1, select bank1
  4808  016F  1303               	bcf	3,6	;RP1=0, select bank1
  4809  0170  0823               	movf	(__PIR^(0+128)+3),w
  4810  0171  1283               	bcf	3,5	;RP0=0, select bank0
  4811  0172  1303               	bcf	3,6	;RP1=0, select bank0
  4812  0173  0752               	addwf	??_PIR_Main,w
  4813  0174  00D4               	movwf	??_PIR_Main+2
  4814  0175  0853               	movf	??_PIR_Main+1,w
  4815  0176  1803               	skipnc
  4816  0177  0A53               	incf	??_PIR_Main+1,w
  4817  0178  00D5               	movwf	??_PIR_Main+3
  4818  0179  0855               	movf	??_PIR_Main+3,w
  4819  017A  3A80               	xorlw	128
  4820  017B  00D6               	movwf	??_PIR_Main+4
  4821  017C  3080               	movlw	128
  4822  017D  0256               	subwf	??_PIR_Main+4,w
  4823  017E  1D03               	skipz
  4824  017F  2986               	goto	u6925
  4825  0180  1683               	bsf	3,5	;RP0=1, select bank1
  4826  0181  1303               	bcf	3,6	;RP1=0, select bank1
  4827  0182  0821               	movf	(__PIR^(0+128)+1),w
  4828  0183  1283               	bcf	3,5	;RP0=0, select bank0
  4829  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4830  0185  0254               	subwf	??_PIR_Main+2,w
  4831  0186                     u6925:	
  4832  0186  1C03               	skipc
  4833  0187  2994               	goto	l5343
  4834                           
  4835                           ;PIR_B1.c: 186: setLED(1, 1);
  4836  0188  1283               	bcf	3,5	;RP0=0, select bank0
  4837  0189  1303               	bcf	3,6	;RP1=0, select bank0
  4838  018A  01CC               	clrf	setLED@command
  4839  018B  0ACC               	incf	setLED@command,f
  4840  018C                     L14:	
  4841  018C  3001               	movlw	1
  4842  018D  158A  2735  118A   	fcall	_setLED
  4843                           
  4844                           ;PIR_B1.c: 187: setLED(2, 0);
  4845  0190  1283               	bcf	3,5	;RP0=0, select bank0
  4846  0191  1303               	bcf	3,6	;RP1=0, select bank0
  4847  0192  01CC               	clrf	setLED@command
  4848  0193  299F               	goto	L11
  4849  0194                     l5343:	
  4850                           ;PIR_B1.c: 188: } else {
  4851                           
  4852                           
  4853                           ;PIR_B1.c: 189: setLED(1, 0);
  4854  0194  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0195  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0196  01CC               	clrf	setLED@command
  4857  0197  3001               	movlw	1
  4858  0198  158A  2735  118A   	fcall	_setLED
  4859                           
  4860                           ;PIR_B1.c: 190: setLED(2, 1);
  4861  019B  1283               	bcf	3,5	;RP0=0, select bank0
  4862  019C  1303               	bcf	3,6	;RP1=0, select bank0
  4863  019D  01CC               	clrf	setLED@command
  4864  019E  0ACC               	incf	setLED@command,f
  4865  019F                     L11:	
  4866  019F  3002               	movlw	2
  4867  01A0  158A  2735  118A   	fcall	_setLED
  4868  01A3                     l5345:	
  4869                           
  4870                           ;PIR_B1.c: 191: }
  4871                           ;PIR_B1.c: 231: }
  4872                           ;PIR_B1.c: 232: }
  4873                           ;PIR_B1.c: 233: }
  4874                           ;PIR_B1.c: 234: }
  4875                           ;PIR_B1.c: 235: }
  4876                           ;PIR_B1.c: 236: }
  4877                           ;PIR_B1.c: 237: if (_PIR.OK == 0) {
  4878  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  4879  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  4880  01A5  19A0               	btfsc	__PIR^(0+128),3
  4881  01A6  29D3               	goto	l5361
  4882                           
  4883                           ;PIR_B1.c: 238: _PIR.Count++;
  4884  01A7  3001               	movlw	1
  4885  01A8  07BE               	addwf	(__PIR^(0+128)+30),f
  4886  01A9  1803               	skipnc
  4887  01AA  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4888  01AB  3000               	movlw	0
  4889  01AC  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4890                           
  4891                           ;PIR_B1.c: 239: if (_PIR.Count == (30000 / 20)) {
  4892  01AD  3005               	movlw	5
  4893  01AE  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4894  01AF  1D03               	skipz
  4895  01B0  29B3               	goto	u6945
  4896  01B1  30DC               	movlw	220
  4897  01B2  063E               	xorwf	(__PIR^(0+128)+30),w
  4898  01B3                     u6945:	
  4899  01B3  1D03               	skipz
  4900  01B4  0008               	return
  4901                           
  4902                           ;PIR_B1.c: 240: _PIR.Count = 0;
  4903  01B5  01BE               	clrf	(__PIR^(0+128)+30)
  4904  01B6  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4905                           
  4906                           ;PIR_B1.c: 241: _PIR.OK = 1;
  4907  01B7  15A0               	bsf	__PIR^(0+128),3
  4908                           
  4909                           ;PIR_B1.c: 243: setLED(1, 0);
  4910  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  4911  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  4912  01BA  01CC               	clrf	setLED@command
  4913  01BB  3001               	movlw	1
  4914  01BC  158A  2735  118A   	fcall	_setLED
  4915                           
  4916                           ;PIR_B1.c: 245: if (cds == 0) {
  4917  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  4918  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  4919  01C1  08DC               	movf	PIR_Main@cds,f
  4920  01C2  1D03               	skipz
  4921  01C3  0008               	return
  4922                           
  4923                           ;PIR_B1.c: 248: if (getLights_Status(1) == 1) {
  4924  01C4  3001               	movlw	1
  4925  01C5  158A  2372  118A   	fcall	_getLights_Status
  4926  01C8  3A01               	xorlw	1
  4927  01C9  1D03               	skipz
  4928  01CA  0008               	return
  4929                           
  4930                           ;PIR_B1.c: 249: setLights_SwOn(1);
  4931  01CB  3001               	movlw	1
  4932  01CC  158A  24DA  118A   	fcall	_setLights_SwOn
  4933                           
  4934                           ;PIR_B1.c: 250: setLights_SwOff(1);
  4935  01CF  3001               	movlw	1
  4936  01D0  158A  2415         	fcall	_setLights_SwOff
  4937                           
  4938                           ;PIR_B1.c: 252: }
  4939                           ;PIR_B1.c: 264: }
  4940                           ;PIR_B1.c: 265: }
  4941                           ;PIR_B1.c: 266: } else {
  4942  01D2  0008               	return
  4943  01D3                     l5361:	
  4944                           
  4945                           ;PIR_B1.c: 267: if (LightsStatus == 1) {
  4946  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  4947  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  4948  01D5  085D               	movf	PIR_Main@LightsStatus,w
  4949  01D6  3A01               	xorlw	1
  4950  01D7  1D03               	skipz
  4951  01D8  0008               	return
  4952                           
  4953                           ;PIR_B1.c: 268: _PIR.CloseTimeSeconds++;
  4954  01D9  3001               	movlw	1
  4955  01DA  00D2               	movwf	??_PIR_Main
  4956  01DB  0852               	movf	??_PIR_Main,w
  4957  01DC  1683               	bsf	3,5	;RP0=1, select bank1
  4958  01DD  1303               	bcf	3,6	;RP1=0, select bank1
  4959  01DE  07C2               	addwf	(__PIR^(0+128)+34),f
  4960                           
  4961                           ;PIR_B1.c: 269: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4962  01DF  0842               	movf	(__PIR^(0+128)+34),w
  4963  01E0  3A32               	xorlw	50
  4964  01E1  1D03               	skipz
  4965  01E2  0008               	return
  4966                           
  4967                           ;PIR_B1.c: 270: _PIR.CloseTimeSeconds = 0;
  4968  01E3  01C2               	clrf	(__PIR^(0+128)+34)
  4969                           
  4970                           ;PIR_B1.c: 271: _PIR.CloseTimeMinutes++;
  4971  01E4  3001               	movlw	1
  4972  01E5  07C0               	addwf	(__PIR^(0+128)+32),f
  4973  01E6  1803               	skipnc
  4974  01E7  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4975  01E8  3000               	movlw	0
  4976  01E9  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4977                           
  4978                           ;PIR_B1.c: 272: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4979  01EA  0844               	movf	((__PIR+1)^(0+128)+35),w
  4980  01EB  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4981  01EC  1D03               	skipz
  4982  01ED  29F0               	goto	u6995
  4983  01EE  0843               	movf	(__PIR^(0+128)+35),w
  4984  01EF  0640               	xorwf	(__PIR^(0+128)+32),w
  4985  01F0                     u6995:	
  4986  01F0  1D03               	skipz
  4987  01F1  0008               	return
  4988                           
  4989                           ;PIR_B1.c: 273: _PIR.CloseTimeMinutes = 0;
  4990  01F2  01C0               	clrf	(__PIR^(0+128)+32)
  4991  01F3  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4992                           
  4993                           ;PIR_B1.c: 279: if (getLights_Status(1) == 1) {
  4994  01F4  3001               	movlw	1
  4995  01F5  158A  2372  118A   	fcall	_getLights_Status
  4996  01F8  3A01               	xorlw	1
  4997  01F9  1D03               	skipz
  4998  01FA  0008               	return
  4999                           
  5000                           ;PIR_B1.c: 280: setLights_SwOn(1);
  5001  01FB  3001               	movlw	1
  5002  01FC  158A  24DA  118A   	fcall	_setLights_SwOn
  5003                           
  5004                           ;PIR_B1.c: 281: setLights_SwOff(1);
  5005  01FF  3001               	movlw	1
  5006  0200  158A  2415         	fcall	_setLights_SwOff
  5007                           
  5008                           ;PIR_B1.c: 283: }
  5009                           ;PIR_B1.c: 295: }
  5010                           ;PIR_B1.c: 296: }
  5011                           ;PIR_B1.c: 297: }
  5012                           ;PIR_B1.c: 298: }
  5013                           ;PIR_B1.c: 299: } else {
  5014  0202  0008               	return
  5015  0203                     l914:	
  5016                           
  5017                           ;PIR_B1.c: 300: if (myMain.PowerON == 1) {
  5018  0203  1283               	bcf	3,5	;RP0=0, select bank0
  5019  0204  1303               	bcf	3,6	;RP1=0, select bank0
  5020  0205  1C25               	btfss	_myMain,0
  5021  0206  0008               	return
  5022                           
  5023                           ;PIR_B1.c: 301: _PIR.Enable = 1;
  5024  0207  1683               	bsf	3,5	;RP0=1, select bank1
  5025  0208  1303               	bcf	3,6	;RP1=0, select bank1
  5026  0209  1420               	bsf	__PIR^(0+128),0
  5027                           
  5028                           ;PIR_B1.c: 303: setLED(1, 1);
  5029  020A  1283               	bcf	3,5	;RP0=0, select bank0
  5030  020B  1303               	bcf	3,6	;RP1=0, select bank0
  5031  020C  01CC               	clrf	setLED@command
  5032  020D  0ACC               	incf	setLED@command,f
  5033  020E  3001               	movlw	1
  5034  020F  158A  2735  118A   	fcall	_setLED
  5035                           
  5036                           ;PIR_B1.c: 307: if (getLights_Status(1) == 0) {
  5037  0212  3001               	movlw	1
  5038  0213  158A  2372  118A   	fcall	_getLights_Status
  5039  0216  3800               	iorlw	0
  5040  0217  1D03               	skipz
  5041  0218  0008               	return
  5042                           
  5043                           ;PIR_B1.c: 308: setLights_SwOn(1);
  5044  0219  3001               	movlw	1
  5045  021A  158A  24DA  118A   	fcall	_setLights_SwOn
  5046                           
  5047                           ;PIR_B1.c: 309: setLights_SwOff(1);
  5048  021D  3001               	movlw	1
  5049  021E  158A  2415         	fcall	_setLights_SwOff
  5050  0220  0008               	return
  5051  0221                     __end_of_PIR_Main:	
  5052                           
  5053                           	psect	text21
  5054  0AE2                     __ptext21:	
  5055 ;; *************** function _getCDS_Status *****************
  5056 ;; Defined at:
  5057 ;;		line 42 in file "../src/CDS_B1.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  status          1    4[COMMON] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      unsigned char 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5071 ;;      Params:         0       0       0       0
  5072 ;;      Locals:         1       0       0       0
  5073 ;;      Temps:          0       0       0       0
  5074 ;;      Totals:         1       0       0       0
  5075 ;;Total ram usage:        1 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    2
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_PIR_Main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _getCDS_Status
  5087  0AE2                     _getCDS_Status:	
  5088                           
  5089                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5093  0AE2  3000               	movlw	0
  5094  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  5095  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  5096  0AE5  1A2E               	btfsc	__CDS,4
  5097  0AE6  3001               	movlw	1
  5098  0AE7  00F4               	movwf	getCDS_Status@status
  5099                           
  5100                           ;CDS_B1.c: 44: return status;
  5101  0AE8  0874               	movf	getCDS_Status@status,w
  5102  0AE9  0008               	return
  5103  0AEA                     __end_of_getCDS_Status:	
  5104                           
  5105                           	psect	text22
  5106  0B0F                     __ptext22:	
  5107 ;; *************** function _PIR_Initialization *****************
  5108 ;; Defined at:
  5109 ;;		line 7 in file "../src/PIR_B1.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;		None               void
  5116 ;; Registers used:
  5117 ;;		wreg
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5123 ;;      Params:         0       0       0       0
  5124 ;;      Locals:         0       0       0       0
  5125 ;;      Temps:          1       0       0       0
  5126 ;;      Totals:         1       0       0       0
  5127 ;;Total ram usage:        1 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    2
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_main
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function _PIR_Initialization
  5139  0B0F                     _PIR_Initialization:	
  5140                           
  5141                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _PIR_Initialization: [wreg]
  5145  0B0F  3019               	movlw	25
  5146  0B10  00F4               	movwf	??_PIR_Initialization
  5147  0B11  0874               	movf	??_PIR_Initialization,w
  5148  0B12  1683               	bsf	3,5	;RP0=1, select bank1
  5149  0B13  1303               	bcf	3,6	;RP1=0, select bank1
  5150  0B14  00C8               	movwf	(__PIR^(0+128)+40)
  5151                           
  5152                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5153  0B15  3005               	movlw	5
  5154  0B16  00C3               	movwf	(__PIR^(0+128)+35)
  5155  0B17  3000               	movlw	0
  5156  0B18  00C4               	movwf	(__PIR^(0+128)+36)
  5157  0B19  0008               	return
  5158  0B1A                     __end_of_PIR_Initialization:	
  5159                           
  5160                           	psect	text23
  5161  0B52                     __ptext23:	
  5162 ;; *************** function _Mcu_Initialization *****************
  5163 ;; Defined at:
  5164 ;;		line 30 in file "../src/MCU_B1.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0, pclath, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5178 ;;      Params:         0       0       0       0
  5179 ;;      Locals:         0       0       0       0
  5180 ;;      Temps:          0       0       0       0
  5181 ;;      Totals:         0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    3
  5185 ;; This function calls:
  5186 ;;		_ADC_Set
  5187 ;;		_Fosc_Set
  5188 ;;		_IO_Set
  5189 ;;		_TMR1_Set
  5190 ;;		_WDT_Set
  5191 ;; This function is called by:
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _Mcu_Initialization
  5198  0B52                     _Mcu_Initialization:	
  5199                           
  5200                           ;MCU_B1.c: 32: Fosc_Set();
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5204  0B52  158A  22AD  158A   	fcall	_Fosc_Set
  5205                           
  5206                           ;MCU_B1.c: 34: IO_Set();
  5207  0B55  158A  242F  158A   	fcall	_IO_Set
  5208                           
  5209                           ;MCU_B1.c: 36: ;;
  5210                           ;MCU_B1.c: 38: TMR1_Set();
  5211  0B58  158A  2336  158A   	fcall	_TMR1_Set
  5212                           
  5213                           ;MCU_B1.c: 40: ADC_Set();
  5214  0B5B  158A  22CB  158A   	fcall	_ADC_Set
  5215                           
  5216                           ;MCU_B1.c: 42: ;;
  5217                           ;MCU_B1.c: 44: ;;
  5218                           ;MCU_B1.c: 46: ;;
  5219                           ;MCU_B1.c: 48: ;;
  5220                           ;MCU_B1.c: 50: ;;
  5221                           ;MCU_B1.c: 52: WDT_Set();
  5222  0B5E  158A  2344         	fcall	_WDT_Set
  5223  0B60  0008               	return
  5224  0B61                     __end_of_Mcu_Initialization:	
  5225                           
  5226                           	psect	text24
  5227  0B44                     __ptext24:	
  5228 ;; *************** function _WDT_Set *****************
  5229 ;; Defined at:
  5230 ;;		line 1089 in file "../src/MCU_B1.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5244 ;;      Params:         0       0       0       0
  5245 ;;      Locals:         0       0       0       0
  5246 ;;      Temps:          1       0       0       0
  5247 ;;      Totals:         1       0       0       0
  5248 ;;Total ram usage:        1 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    2
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_Mcu_Initialization
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _WDT_Set
  5260  0B44                     _WDT_Set:	
  5261                           
  5262                           ;MCU_B1.c: 1091: PSA = 1;
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _WDT_Set: [wreg]
  5266  0B44  1683               	bsf	3,5	;RP0=1, select bank1
  5267  0B45  1303               	bcf	3,6	;RP1=0, select bank1
  5268  0B46  1581               	bsf	1,3	;volatile
  5269                           
  5270                           ;MCU_B1.c: 1092: PS0 = 1;
  5271  0B47  1401               	bsf	1,0	;volatile
  5272                           
  5273                           ;MCU_B1.c: 1093: PS1 = 1;
  5274  0B48  1481               	bsf	1,1	;volatile
  5275                           
  5276                           ;MCU_B1.c: 1094: PS2 = 1;
  5277  0B49  1501               	bsf	1,2	;volatile
  5278                           
  5279                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  5280  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  5281  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  5282  0B4C  1435               	bsf	_WDT,0
  5283                           
  5284                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  5285  0B4D  300A               	movlw	10
  5286  0B4E  00F4               	movwf	??_WDT_Set
  5287  0B4F  0874               	movf	??_WDT_Set,w
  5288  0B50  00B6               	movwf	_WDT+1
  5289  0B51  0008               	return
  5290  0B52                     __end_of_WDT_Set:	
  5291                           
  5292                           	psect	text25
  5293  0B36                     __ptext25:	
  5294 ;; *************** function _TMR1_Set *****************
  5295 ;; Defined at:
  5296 ;;		line 226 in file "../src/MCU_B1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5310 ;;      Params:         0       0       0       0
  5311 ;;      Locals:         0       0       0       0
  5312 ;;      Temps:          0       0       0       0
  5313 ;;      Totals:         0       0       0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    2
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_Mcu_Initialization
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _TMR1_Set
  5326  0B36                     _TMR1_Set:	
  5327                           
  5328                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _TMR1_Set: [wreg]
  5332  0B36  3041               	movlw	65
  5333  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  5334  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  5335  0B39  0090               	movwf	16	;volatile
  5336                           
  5337                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5338  0B3A  30FA               	movlw	250
  5339  0B3B  008F               	movwf	15	;volatile
  5340                           
  5341                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5342  0B3C  3038               	movlw	56
  5343  0B3D  008E               	movwf	14	;volatile
  5344                           
  5345                           ;MCU_B1.c: 230: TMR1IE = 1;
  5346  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  5347  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  5348  0B40  140C               	bsf	12,0	;volatile
  5349                           
  5350                           ;MCU_B1.c: 231: PEIE = 1;
  5351  0B41  170B               	bsf	11,6	;volatile
  5352                           
  5353                           ;MCU_B1.c: 232: GIE = 1;
  5354  0B42  178B               	bsf	11,7	;volatile
  5355  0B43  0008               	return
  5356  0B44                     __end_of_TMR1_Set:	
  5357                           
  5358                           	psect	text26
  5359  0C2F                     __ptext26:	
  5360 ;; *************** function _IO_Set *****************
  5361 ;; Defined at:
  5362 ;;		line 60 in file "../src/MCU_B1.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;		None
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;		None
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, status,2
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5376 ;;      Params:         0       0       0       0
  5377 ;;      Locals:         0       0       0       0
  5378 ;;      Temps:          0       0       0       0
  5379 ;;      Totals:         0       0       0       0
  5380 ;;Total ram usage:        0 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    2
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_Mcu_Initialization
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _IO_Set
  5392  0C2F                     _IO_Set:	
  5393                           
  5394                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _IO_Set: [wreg+status,2]
  5398  0C2F  302F               	movlw	47
  5399  0C30  1683               	bsf	3,5	;RP0=1, select bank1
  5400  0C31  1303               	bcf	3,6	;RP1=0, select bank1
  5401  0C32  0085               	movwf	5	;volatile
  5402                           
  5403                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5404  0C33  3013               	movlw	19
  5405  0C34  0086               	movwf	6	;volatile
  5406                           
  5407                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5408  0C35  300C               	movlw	12
  5409  0C36  0087               	movwf	7	;volatile
  5410                           
  5411                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5412  0C37  300F               	movlw	15
  5413  0C38  1683               	bsf	3,5	;RP0=1, select bank3
  5414  0C39  1703               	bsf	3,6	;RP1=1, select bank3
  5415  0C3A  0085               	movwf	5	;volatile
  5416                           
  5417                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5418  0C3B  3012               	movlw	18
  5419  0C3C  0086               	movwf	6	;volatile
  5420                           
  5421                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5422  0C3D  30AF               	movlw	175
  5423  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  5424  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  5425  0C40  0085               	movwf	5	;volatile
  5426                           
  5427                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5428  0C41  3013               	movlw	19
  5429  0C42  0086               	movwf	6	;volatile
  5430                           
  5431                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5432  0C43  300C               	movlw	12
  5433  0C44  0087               	movwf	7	;volatile
  5434                           
  5435                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5436  0C45  1683               	bsf	3,5	;RP0=1, select bank1
  5437  0C46  1303               	bcf	3,6	;RP1=0, select bank1
  5438  0C47  0195               	clrf	21	;volatile
  5439  0C48  0008               	return
  5440  0C49                     __end_of_IO_Set:	
  5441                           
  5442                           	psect	text27
  5443  0AAD                     __ptext27:	
  5444 ;; *************** function _Fosc_Set *****************
  5445 ;; Defined at:
  5446 ;;		line 56 in file "../src/MCU_B1.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;		None               void
  5453 ;; Registers used:
  5454 ;;		wreg
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5460 ;;      Params:         0       0       0       0
  5461 ;;      Locals:         0       0       0       0
  5462 ;;      Temps:          0       0       0       0
  5463 ;;      Totals:         0       0       0       0
  5464 ;;Total ram usage:        0 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:    2
  5467 ;; This function calls:
  5468 ;;		Nothing
  5469 ;; This function is called by:
  5470 ;;		_Mcu_Initialization
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _Fosc_Set
  5476  0AAD                     _Fosc_Set:	
  5477                           
  5478                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5479                           
  5480                           ;incstack = 0
  5481                           ; Regs used in _Fosc_Set: [wreg]
  5482  0AAD  303C               	movlw	60
  5483  0AAE  1683               	bsf	3,5	;RP0=1, select bank1
  5484  0AAF  1303               	bcf	3,6	;RP1=0, select bank1
  5485  0AB0  0090               	movwf	16	;volatile
  5486  0AB1  0008               	return
  5487  0AB2                     __end_of_Fosc_Set:	
  5488                           
  5489                           	psect	text28
  5490  0ACB                     __ptext28:	
  5491 ;; *************** function _ADC_Set *****************
  5492 ;; Defined at:
  5493 ;;		line 425 in file "../src/MCU_B1.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;		None               void
  5500 ;; Registers used:
  5501 ;;		wreg
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5507 ;;      Params:         0       0       0       0
  5508 ;;      Locals:         0       0       0       0
  5509 ;;      Temps:          0       0       0       0
  5510 ;;      Totals:         0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    2
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_Mcu_Initialization
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           
  5522                           ;psect for function _ADC_Set
  5523  0ACB                     _ADC_Set:	
  5524                           
  5525                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _ADC_Set: [wreg]
  5529  0ACB  3073               	movlw	115
  5530  0ACC  1683               	bsf	3,5	;RP0=1, select bank1
  5531  0ACD  1303               	bcf	3,6	;RP1=0, select bank1
  5532  0ACE  009F               	movwf	31	;volatile
  5533                           
  5534                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  5535  0ACF  30C1               	movlw	193
  5536  0AD0  009D               	movwf	29	;volatile
  5537  0AD1  0008               	return
  5538  0AD2                     __end_of_ADC_Set:	
  5539                           
  5540                           	psect	text29
  5541  0221                     __ptext29:	
  5542 ;; *************** function _Load_Main *****************
  5543 ;; Defined at:
  5544 ;;		line 39 in file "../src/OverLoad_B1.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  i               2   15[BANK0 ] int 
  5549 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5550 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5551 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5552 ;;  error           1    9[BANK0 ] unsigned char 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;		None               void
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5562 ;;      Params:         0       0       0       0
  5563 ;;      Locals:         0       8       0       0
  5564 ;;      Temps:          0       2       0       0
  5565 ;;      Totals:         0      10       0       0
  5566 ;;Total ram usage:       10 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    3
  5569 ;; This function calls:
  5570 ;;		___lwdiv
  5571 ;;		___wmul
  5572 ;;		_getLight_LoadGO
  5573 ;;		_getLight_Load_Status
  5574 ;;		_getMain_All_Error_Status
  5575 ;;		_getMain_All_LightsStatus
  5576 ;;		_getMain_Lights_Count
  5577 ;;		_setLoad_AH_AL_Restore
  5578 ;; This function is called by:
  5579 ;;		_main
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function _Load_Main
  5585  0221                     _Load_Main:	
  5586                           
  5587                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5588                           
  5589                           ;incstack = 0
  5590                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5591  0221  3000               	movlw	0
  5592  0222  158A  25BC  118A   	fcall	_getMain_All_Error_Status
  5593  0225  1283               	bcf	3,5	;RP0=0, select bank0
  5594  0226  1303               	bcf	3,6	;RP1=0, select bank0
  5595  0227  00D3               	movwf	??_Load_Main
  5596  0228  0853               	movf	??_Load_Main,w
  5597  0229  00D5               	movwf	Load_Main@error
  5598                           
  5599                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  5600  022A  01D9               	clrf	Load_Main@Load_RunStatus
  5601  022B  01D8               	clrf	Load_Main@ErrorCountValue
  5602  022C  01DA               	clrf	Load_Main@LightsCount
  5603                           
  5604                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5605  022D  1683               	bsf	3,5	;RP0=1, select bank1
  5606  022E  1303               	bcf	3,6	;RP1=0, select bank1
  5607  022F  1C4A               	btfss	_Load^(0+128),0
  5608  0230  2C03               	goto	l718
  5609                           
  5610                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  5611  0231  158A  22F2  118A   	fcall	_getMain_All_LightsStatus
  5612  0234  3800               	iorlw	0
  5613  0235  1D03               	skipz
  5614  0236  2A3A               	goto	l5083
  5615                           
  5616                           ;OverLoad_B1.c: 45: Load.GO = 0;
  5617  0237  1683               	bsf	3,5	;RP0=1, select bank1
  5618  0238  1303               	bcf	3,6	;RP1=0, select bank1
  5619  0239  2A59               	goto	l5099
  5620  023A                     l5083:	
  5621                           ;OverLoad_B1.c: 46: } else {
  5622                           
  5623                           
  5624                           ;OverLoad_B1.c: 69: if (error == 0) {
  5625  023A  1283               	bcf	3,5	;RP0=0, select bank0
  5626  023B  1303               	bcf	3,6	;RP1=0, select bank0
  5627  023C  08D5               	movf	Load_Main@error,f
  5628  023D  1D03               	skipz
  5629  023E  2A56               	goto	l721
  5630                           
  5631                           ;OverLoad_B1.c: 70: Load.GO = 1;
  5632  023F  1683               	bsf	3,5	;RP0=1, select bank1
  5633  0240  1303               	bcf	3,6	;RP1=0, select bank1
  5634  0241  14CA               	bsf	_Load^(0+128),1
  5635                           
  5636                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  5637  0242  158A  22B2  118A   	fcall	_getLight_LoadGO
  5638  0245  3A01               	xorlw	1
  5639  0246  1D03               	skipz
  5640  0247  2A50               	goto	l722
  5641                           
  5642                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  5643  0248  1683               	bsf	3,5	;RP0=1, select bank1
  5644  0249  1303               	bcf	3,6	;RP1=0, select bank1
  5645  024A  1DCA               	btfss	_Load^(0+128),3
  5646  024B  1BCA               	btfsc	_Load^(0+128),7
  5647  024C  2A5A               	goto	l720
  5648                           
  5649                           ;OverLoad_B1.c: 74: Load.Run = 1;
  5650  024D  15CA               	bsf	_Load^(0+128),3
  5651                           
  5652                           ;OverLoad_B1.c: 75: Load.Count = 0;
  5653  024E  01E3               	clrf	(_Load^(0+128)+25)
  5654                           
  5655                           ;OverLoad_B1.c: 76: }
  5656                           ;OverLoad_B1.c: 77: } else {
  5657  024F  2A5A               	goto	l720
  5658  0250                     l722:	
  5659                           
  5660                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  5661  0250  1683               	bsf	3,5	;RP0=1, select bank1
  5662  0251  1303               	bcf	3,6	;RP1=0, select bank1
  5663  0252  1FCA               	btfss	_Load^(0+128),7
  5664  0253  2A5A               	goto	l720
  5665                           
  5666                           ;OverLoad_B1.c: 79: Load.OK = 0;
  5667  0254  13CA               	bcf	_Load^(0+128),7
  5668                           
  5669                           ;OverLoad_B1.c: 80: }
  5670                           ;OverLoad_B1.c: 81: }
  5671                           ;OverLoad_B1.c: 82: } else {
  5672  0255  2A5A               	goto	l720
  5673  0256                     l721:	
  5674                           
  5675                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  5676  0256  1683               	bsf	3,5	;RP0=1, select bank1
  5677  0257  1303               	bcf	3,6	;RP1=0, select bank1
  5678  0258  18CA               	btfsc	_Load^(0+128),1
  5679  0259                     l5099:	
  5680                           
  5681                           ;OverLoad_B1.c: 84: Load.GO = 0;
  5682  0259  10CA               	bcf	_Load^(0+128),1
  5683  025A                     l720:	
  5684                           
  5685                           ;OverLoad_B1.c: 85: }
  5686                           ;OverLoad_B1.c: 86: }
  5687                           ;OverLoad_B1.c: 88: }
  5688                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  5689  025A  1CCA               	btfss	_Load^(0+128),1
  5690  025B  2BDC               	goto	l728
  5691                           
  5692                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  5693  025C  154A               	bsf	_Load^(0+128),2
  5694                           
  5695                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  5696  025D  1E4A               	btfss	_Load^(0+128),4
  5697  025E  2BDA               	goto	l729
  5698                           
  5699                           ;OverLoad_B1.c: 95: Load.Time++;
  5700  025F  3001               	movlw	1
  5701  0260  07CB               	addwf	(_Load^(0+128)+1),f
  5702  0261  1803               	skipnc
  5703  0262  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5704  0263  3000               	movlw	0
  5705  0264  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5706                           
  5707                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  5708  0265  3000               	movlw	0
  5709  0266  024C               	subwf	((_Load+1)^(0+128)+1),w
  5710  0267  3002               	movlw	2
  5711  0268  1903               	skipnz
  5712  0269  024B               	subwf	(_Load^(0+128)+1),w
  5713  026A  1C03               	skipc
  5714  026B  0008               	return
  5715                           
  5716                           ;OverLoad_B1.c: 97: Load.Time = 0;
  5717  026C  01CB               	clrf	(_Load^(0+128)+1)
  5718  026D  01CC               	clrf	((_Load+1)^(0+128)+1)
  5719                           
  5720                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  5721  026E  124A               	bcf	_Load^(0+128),4
  5722                           
  5723                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  5724  026F  3001               	movlw	1
  5725  0270  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0271  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0272  00DB               	movwf	Load_Main@i
  5728  0273  3000               	movlw	0
  5729  0274  00DC               	movwf	Load_Main@i+1
  5730  0275  085C               	movf	Load_Main@i+1,w
  5731  0276  3A80               	xorlw	128
  5732  0277  00FF               	movwf	127
  5733  0278  3080               	movlw	128
  5734  0279  027F               	subwf	127,w
  5735  027A  1D03               	skipz
  5736  027B  2A7E               	goto	u6425
  5737  027C  3004               	movlw	4
  5738  027D  025B               	subwf	Load_Main@i,w
  5739  027E                     u6425:	
  5740  027E  1803               	btfsc	3,0
  5741  027F  2ABC               	goto	l5121
  5742  0280                     l5115:	
  5743                           
  5744                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  5745  0280  1283               	bcf	3,5	;RP0=0, select bank0
  5746  0281  1303               	bcf	3,6	;RP1=0, select bank0
  5747  0282  085B               	movf	Load_Main@i,w
  5748  0283  3ED4               	addlw	(_Load+10)& (0+255)
  5749  0284  0084               	movwf	4
  5750  0285  1383               	bcf	3,7	;select IRP bank1
  5751  0286  0800               	movf	0,w
  5752  0287  00D3               	movwf	??_Load_Main
  5753  0288  01D4               	clrf	??_Load_Main+1
  5754  0289  0853               	movf	??_Load_Main,w
  5755  028A  1683               	bsf	3,5	;RP0=1, select bank1
  5756  028B  1303               	bcf	3,6	;RP1=0, select bank1
  5757  028C  07CF               	addwf	(_Load^(0+128)+5),f
  5758  028D  1803               	skipnc
  5759  028E  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5760  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5761  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5762  0291  0854               	movf	??_Load_Main+1,w
  5763  0292  1683               	bsf	3,5	;RP0=1, select bank1
  5764  0293  1303               	bcf	3,6	;RP1=0, select bank1
  5765  0294  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5766                           
  5767                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  5768  0295  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0296  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0297  085B               	movf	Load_Main@i,w
  5771  0298  3ED9               	addlw	(_Load+15)& (0+255)
  5772  0299  0084               	movwf	4
  5773  029A  0800               	movf	0,w
  5774  029B  00D3               	movwf	??_Load_Main
  5775  029C  01D4               	clrf	??_Load_Main+1
  5776  029D  0853               	movf	??_Load_Main,w
  5777  029E  1683               	bsf	3,5	;RP0=1, select bank1
  5778  029F  1303               	bcf	3,6	;RP1=0, select bank1
  5779  02A0  07D1               	addwf	(_Load^(0+128)+7),f
  5780  02A1  1803               	skipnc
  5781  02A2  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5782  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  5783  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  5784  02A5  0854               	movf	??_Load_Main+1,w
  5785  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  5786  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  5787  02A8  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5788  02A9  3001               	movlw	1
  5789  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  5790  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  5791  02AC  07DB               	addwf	Load_Main@i,f
  5792  02AD  1803               	skipnc
  5793  02AE  0ADC               	incf	Load_Main@i+1,f
  5794  02AF  3000               	movlw	0
  5795  02B0  07DC               	addwf	Load_Main@i+1,f
  5796  02B1  085C               	movf	Load_Main@i+1,w
  5797  02B2  3A80               	xorlw	128
  5798  02B3  00FF               	movwf	127
  5799  02B4  3080               	movlw	128
  5800  02B5  027F               	subwf	127,w
  5801  02B6  1D03               	skipz
  5802  02B7  2ABA               	goto	u6435
  5803  02B8  3004               	movlw	4
  5804  02B9  025B               	subwf	Load_Main@i,w
  5805  02BA                     u6435:	
  5806  02BA  1C03               	skipc
  5807  02BB  2A80               	goto	l5115
  5808  02BC                     l5121:	
  5809                           
  5810                           ;OverLoad_B1.c: 103: }
  5811                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  5812  02BC  3003               	movlw	3
  5813  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  5814  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  5815  02BF  00CC               	movwf	___lwdiv@divisor
  5816  02C0  3000               	movlw	0
  5817  02C1  00CD               	movwf	___lwdiv@divisor+1
  5818  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5819  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5820  02C4  0850               	movf	((_Load+1)^(0+128)+5),w
  5821  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  5822  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  5823  02C7  01CF               	clrf	___lwdiv@dividend+1
  5824  02C8  07CF               	addwf	___lwdiv@dividend+1,f
  5825  02C9  1683               	bsf	3,5	;RP0=1, select bank1
  5826  02CA  1303               	bcf	3,6	;RP1=0, select bank1
  5827  02CB  084F               	movf	(_Load^(0+128)+5),w
  5828  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  5829  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  5830  02CE  01CE               	clrf	___lwdiv@dividend
  5831  02CF  07CE               	addwf	___lwdiv@dividend,f
  5832  02D0  158A  25FA  118A   	fcall	___lwdiv
  5833  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5834  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5835  02D5  084D               	movf	?___lwdiv+1,w
  5836  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  5837  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  5838  02D8  01D0               	clrf	((_Load+1)^(0+128)+5)
  5839  02D9  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5840  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  5841  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  5842  02DC  084C               	movf	?___lwdiv,w
  5843  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  5844  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  5845  02DF  01CF               	clrf	(_Load^(0+128)+5)
  5846  02E0  07CF               	addwf	(_Load^(0+128)+5),f
  5847                           
  5848                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  5849  02E1  3003               	movlw	3
  5850  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5851  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5852  02E4  00CC               	movwf	___lwdiv@divisor
  5853  02E5  3000               	movlw	0
  5854  02E6  00CD               	movwf	___lwdiv@divisor+1
  5855  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  5856  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  5857  02E9  0852               	movf	((_Load+1)^(0+128)+7),w
  5858  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5859  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5860  02EC  01CF               	clrf	___lwdiv@dividend+1
  5861  02ED  07CF               	addwf	___lwdiv@dividend+1,f
  5862  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  5863  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  5864  02F0  0851               	movf	(_Load^(0+128)+7),w
  5865  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  5866  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  5867  02F3  01CE               	clrf	___lwdiv@dividend
  5868  02F4  07CE               	addwf	___lwdiv@dividend,f
  5869  02F5  158A  25FA  118A   	fcall	___lwdiv
  5870  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  5871  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  5872  02FA  084D               	movf	?___lwdiv+1,w
  5873  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  5874  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  5875  02FD  01D2               	clrf	((_Load+1)^(0+128)+7)
  5876  02FE  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5877  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5878  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5879  0301  084C               	movf	?___lwdiv,w
  5880  0302  1683               	bsf	3,5	;RP0=1, select bank1
  5881  0303  1303               	bcf	3,6	;RP1=0, select bank1
  5882  0304  01D1               	clrf	(_Load^(0+128)+7)
  5883  0305  07D1               	addwf	(_Load^(0+128)+7),f
  5884                           
  5885                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  5886  0306  158A  23D0  118A   	fcall	_setLoad_AH_AL_Restore
  5887                           
  5888                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  5889  0309  1683               	bsf	3,5	;RP0=1, select bank1
  5890  030A  1303               	bcf	3,6	;RP1=0, select bank1
  5891  030B  0852               	movf	((_Load+1)^(0+128)+7),w
  5892  030C  0250               	subwf	((_Load+1)^(0+128)+5),w
  5893  030D  1D03               	skipz
  5894  030E  2B11               	goto	u6445
  5895  030F  0851               	movf	(_Load^(0+128)+7),w
  5896  0310  024F               	subwf	(_Load^(0+128)+5),w
  5897  0311                     u6445:	
  5898  0311  1C03               	skipc
  5899  0312  0008               	return
  5900                           
  5901                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  5902  0313  0351               	decf	(_Load^(0+128)+7),w
  5903  0314  3AFF               	xorlw	255
  5904  0315  074F               	addwf	(_Load^(0+128)+5),w
  5905  0316  1283               	bcf	3,5	;RP0=0, select bank0
  5906  0317  1303               	bcf	3,6	;RP1=0, select bank0
  5907  0318  00D3               	movwf	??_Load_Main
  5908  0319  0853               	movf	??_Load_Main,w
  5909  031A  1683               	bsf	3,5	;RP0=1, select bank1
  5910  031B  1303               	bcf	3,6	;RP1=0, select bank1
  5911  031C  00DE               	movwf	(_Load^(0+128)+20)
  5912                           
  5913                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  5914  031D  01CF               	clrf	(_Load^(0+128)+5)
  5915  031E  01D0               	clrf	((_Load+1)^(0+128)+5)
  5916                           
  5917                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  5918  031F  01D1               	clrf	(_Load^(0+128)+7)
  5919  0320  01D2               	clrf	((_Load+1)^(0+128)+7)
  5920                           
  5921                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  5922  0321  1DCA               	btfss	_Load^(0+128),3
  5923  0322  2B86               	goto	l734
  5924                           
  5925                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  5926  0323  3002               	movlw	2
  5927  0324  0263               	subwf	(_Load^(0+128)+25),w
  5928  0325  1803               	skipnc
  5929  0326  2B86               	goto	l734
  5930                           
  5931                           ;OverLoad_B1.c: 115: Load.Count++;
  5932  0327  3001               	movlw	1
  5933  0328  1283               	bcf	3,5	;RP0=0, select bank0
  5934  0329  1303               	bcf	3,6	;RP1=0, select bank0
  5935  032A  00D3               	movwf	??_Load_Main
  5936  032B  0853               	movf	??_Load_Main,w
  5937  032C  1683               	bsf	3,5	;RP0=1, select bank1
  5938  032D  1303               	bcf	3,6	;RP1=0, select bank1
  5939  032E  07E3               	addwf	(_Load^(0+128)+25),f
  5940                           
  5941                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  5942  032F  158A  22B8  118A   	fcall	_getLight_Load_Status
  5943  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5944  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5945  0334  00D3               	movwf	??_Load_Main
  5946  0335  0853               	movf	??_Load_Main,w
  5947  0336  00D9               	movwf	Load_Main@Load_RunStatus
  5948                           
  5949                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  5950  0337  158A  2305  118A   	fcall	_getMain_Lights_Count
  5951  033A  1283               	bcf	3,5	;RP0=0, select bank0
  5952  033B  1303               	bcf	3,6	;RP1=0, select bank0
  5953  033C  00D3               	movwf	??_Load_Main
  5954  033D  0853               	movf	??_Load_Main,w
  5955  033E  00DA               	movwf	Load_Main@LightsCount
  5956                           
  5957                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5958  033F  1683               	bsf	3,5	;RP0=1, select bank1
  5959  0340  1303               	bcf	3,6	;RP1=0, select bank1
  5960  0341  0863               	movf	(_Load^(0+128)+25),w
  5961  0342  3A01               	xorlw	1
  5962  0343  1D03               	skipz
  5963  0344  2B47               	goto	l5147
  5964                           
  5965                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5966  0345  3022               	movlw	34
  5967  0346  2B54               	goto	L15
  5968  0347                     l5147:	
  5969                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5970                           
  5971  0347  0863               	movf	(_Load^(0+128)+25),w
  5972  0348  3A02               	xorlw	2
  5973  0349  1D03               	skipz
  5974  034A  2B86               	goto	l734
  5975                           
  5976                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  5977  034B  1283               	bcf	3,5	;RP0=0, select bank0
  5978  034C  1303               	bcf	3,6	;RP1=0, select bank0
  5979  034D  085A               	movf	Load_Main@LightsCount,w
  5980  034E  3A01               	xorlw	1
  5981  034F  1D03               	skipz
  5982  0350  2B57               	goto	l5153
  5983                           
  5984                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(7*1.7);
  5985  0351  300B               	movlw	11
  5986  0352  1683               	bsf	3,5	;RP0=1, select bank1
  5987  0353  1303               	bcf	3,6	;RP1=0, select bank1
  5988  0354                     L15:	
  5989  0354  00E1               	movwf	(_Load^(0+128)+23)
  5990  0355  3000               	movlw	0
  5991  0356  2B85               	goto	L16
  5992  0357                     l5153:	
  5993                           ;OverLoad_B1.c: 130: } else {
  5994                           
  5995                           
  5996                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  5997  0357  1283               	bcf	3,5	;RP0=0, select bank0
  5998  0358  08D9               	movf	Load_Main@Load_RunStatus,f
  5999  0359  1D03               	skipz
  6000  035A  2B78               	goto	l5157
  6001                           
  6002                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(7*1.7) * LightsCount;
  6003  035B  085A               	movf	Load_Main@LightsCount,w
  6004  035C  00D3               	movwf	??_Load_Main
  6005  035D  01D4               	clrf	??_Load_Main+1
  6006  035E  0853               	movf	??_Load_Main,w
  6007  035F  00CC               	movwf	___wmul@multiplier
  6008  0360  0854               	movf	??_Load_Main+1,w
  6009  0361  00CD               	movwf	___wmul@multiplier+1
  6010  0362  300B               	movlw	11
  6011  0363  00CE               	movwf	___wmul@multiplicand
  6012  0364  3000               	movlw	0
  6013  0365  00CF               	movwf	___wmul@multiplicand+1
  6014  0366  158A  24FF  118A   	fcall	___wmul
  6015  0369  1283               	bcf	3,5	;RP0=0, select bank0
  6016  036A  1303               	bcf	3,6	;RP1=0, select bank0
  6017  036B  084D               	movf	?___wmul+1,w
  6018  036C  1683               	bsf	3,5	;RP0=1, select bank1
  6019  036D  1303               	bcf	3,6	;RP1=0, select bank1
  6020  036E  01E2               	clrf	((_Load+1)^(0+128)+23)
  6021  036F  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6022  0370  1283               	bcf	3,5	;RP0=0, select bank0
  6023  0371  1303               	bcf	3,6	;RP1=0, select bank0
  6024  0372  084C               	movf	?___wmul,w
  6025  0373  1683               	bsf	3,5	;RP0=1, select bank1
  6026  0374  1303               	bcf	3,6	;RP1=0, select bank1
  6027  0375  01E1               	clrf	(_Load^(0+128)+23)
  6028  0376  07E1               	addwf	(_Load^(0+128)+23),f
  6029                           
  6030                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6031  0377  2B86               	goto	l734
  6032  0378                     l5157:	
  6033  0378  1283               	bcf	3,5	;RP0=0, select bank0
  6034  0379  0859               	movf	Load_Main@Load_RunStatus,w
  6035  037A  3A01               	xorlw	1
  6036  037B  1D03               	skipz
  6037  037C  2B86               	goto	l734
  6038                           
  6039                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(7*1.7) + Load.TotalLoad;
  6040  037D  1683               	bsf	3,5	;RP0=1, select bank1
  6041  037E  1303               	bcf	3,6	;RP1=0, select bank1
  6042  037F  0853               	movf	(_Load^(0+128)+9),w
  6043  0380  3E0B               	addlw	11
  6044  0381  00E1               	movwf	(_Load^(0+128)+23)
  6045  0382  3000               	movlw	0
  6046  0383  1803               	skipnc
  6047  0384  3001               	movlw	1
  6048  0385                     L16:	
  6049  0385  00E2               	movwf	(_Load^(0+128)+24)
  6050  0386                     l734:	
  6051                           
  6052                           ;OverLoad_B1.c: 135: }
  6053                           ;OverLoad_B1.c: 136: }
  6054                           ;OverLoad_B1.c: 137: }
  6055                           ;OverLoad_B1.c: 138: }
  6056                           ;OverLoad_B1.c: 139: }
  6057                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6058  0386  1683               	bsf	3,5	;RP0=1, select bank1
  6059  0387  1303               	bcf	3,6	;RP1=0, select bank1
  6060  0388  085E               	movf	(_Load^(0+128)+20),w
  6061  0389  1283               	bcf	3,5	;RP0=0, select bank0
  6062  038A  1303               	bcf	3,6	;RP1=0, select bank0
  6063  038B  00D3               	movwf	??_Load_Main
  6064  038C  01D4               	clrf	??_Load_Main+1
  6065  038D  1683               	bsf	3,5	;RP0=1, select bank1
  6066  038E  1303               	bcf	3,6	;RP1=0, select bank1
  6067  038F  0862               	movf	((_Load+1)^(0+128)+23),w
  6068  0390  1283               	bcf	3,5	;RP0=0, select bank0
  6069  0391  1303               	bcf	3,6	;RP1=0, select bank0
  6070  0392  0254               	subwf	??_Load_Main+1,w
  6071  0393  1D03               	skipz
  6072  0394  2B9B               	goto	u6525
  6073  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6074  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6075  0397  0861               	movf	(_Load^(0+128)+23),w
  6076  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6077  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6078  039A  0253               	subwf	??_Load_Main,w
  6079  039B                     u6525:	
  6080  039B  1C03               	skipc
  6081  039C  2BBC               	goto	l5175
  6082                           
  6083                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6084  039D  085A               	movf	Load_Main@LightsCount,w
  6085  039E  3A01               	xorlw	1
  6086  039F  1903               	skipnz
  6087  03A0  2BA3               	goto	l5165
  6088  03A1  3003               	movlw	3
  6089  03A2  2BA4               	goto	L17
  6090  03A3                     l5165:	
  6091  03A3  3002               	movlw	2
  6092  03A4                     L17:	
  6093  03A4  00D6               	movwf	_Load_Main$2372
  6094  03A5  3000               	movlw	0
  6095  03A6  00D7               	movwf	_Load_Main$2372+1
  6096  03A7  0856               	movf	_Load_Main$2372,w
  6097  03A8  00D3               	movwf	??_Load_Main
  6098  03A9  0853               	movf	??_Load_Main,w
  6099  03AA  00D8               	movwf	Load_Main@ErrorCountValue
  6100                           
  6101                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6102  03AB  3001               	movlw	1
  6103  03AC  00D3               	movwf	??_Load_Main
  6104  03AD  0853               	movf	??_Load_Main,w
  6105  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  6106  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  6107  03B0  07E4               	addwf	(_Load^(0+128)+26),f
  6108                           
  6109                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6110  03B1  0864               	movf	(_Load^(0+128)+26),w
  6111  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  6112  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  6113  03B4  0258               	subwf	Load_Main@ErrorCountValue,w
  6114  03B5  1803               	skipnc
  6115  03B6  0008               	return
  6116                           
  6117                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6118  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  6119  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  6120  03B9  01E4               	clrf	(_Load^(0+128)+26)
  6121                           
  6122                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6123  03BA  16CA               	bsf	_Load^(0+128),5
  6124                           
  6125                           ;OverLoad_B1.c: 168: }
  6126                           ;OverLoad_B1.c: 169: } else {
  6127  03BB  0008               	return
  6128  03BC                     l5175:	
  6129                           
  6130                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6131  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6132  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6133  03BE  01E4               	clrf	(_Load^(0+128)+26)
  6134                           
  6135                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6136  03BF  1DCA               	btfss	_Load^(0+128),3
  6137  03C0  0008               	return
  6138                           
  6139                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6140  03C1  3001               	movlw	1
  6141  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  6142  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  6143  03C4  00D3               	movwf	??_Load_Main
  6144  03C5  0853               	movf	??_Load_Main,w
  6145  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6146  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6147  03C8  07E5               	addwf	(_Load^(0+128)+27),f
  6148                           
  6149                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6150  03C9  3003               	movlw	3
  6151  03CA  0265               	subwf	(_Load^(0+128)+27),w
  6152  03CB  1C03               	skipc
  6153  03CC  0008               	return
  6154                           
  6155                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6156  03CD  01E5               	clrf	(_Load^(0+128)+27)
  6157                           
  6158                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6159  03CE  17CA               	bsf	_Load^(0+128),7
  6160                           
  6161                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6162  03CF  11CA               	bcf	_Load^(0+128),3
  6163                           
  6164                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6165  03D0  01E3               	clrf	(_Load^(0+128)+25)
  6166                           
  6167                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6168  03D1  085E               	movf	(_Load^(0+128)+20),w
  6169  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  6170  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  6171  03D4  00D3               	movwf	??_Load_Main
  6172  03D5  0853               	movf	??_Load_Main,w
  6173  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  6174  03D7  1303               	bcf	3,6	;RP1=0, select bank1
  6175  03D8  00D3               	movwf	(_Load^(0+128)+9)
  6176                           
  6177                           ;OverLoad_B1.c: 182: }
  6178                           ;OverLoad_B1.c: 183: }
  6179                           ;OverLoad_B1.c: 206: }
  6180                           ;OverLoad_B1.c: 207: }
  6181                           ;OverLoad_B1.c: 208: }
  6182                           ;OverLoad_B1.c: 209: } else {
  6183  03D9  0008               	return
  6184  03DA                     l729:	
  6185                           
  6186                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6187  03DA  164A               	bsf	_Load^(0+128),4
  6188                           
  6189                           ;OverLoad_B1.c: 211: }
  6190                           ;OverLoad_B1.c: 212: } else {
  6191  03DB  0008               	return
  6192  03DC                     l728:	
  6193                           
  6194                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6195  03DC  1D4A               	btfss	_Load^(0+128),2
  6196  03DD  2BF0               	goto	l5211
  6197                           
  6198                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6199  03DE  114A               	bcf	_Load^(0+128),2
  6200                           
  6201                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6202  03DF  124A               	bcf	_Load^(0+128),4
  6203                           
  6204                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6205  03E0  01CB               	clrf	(_Load^(0+128)+1)
  6206  03E1  01CC               	clrf	((_Load+1)^(0+128)+1)
  6207                           
  6208                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6209  03E2  158A  23D0  118A   	fcall	_setLoad_AH_AL_Restore
  6210                           
  6211                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6212  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  6213  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  6214  03E7  01E4               	clrf	(_Load^(0+128)+26)
  6215                           
  6216                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6217  03E8  01E5               	clrf	(_Load^(0+128)+27)
  6218                           
  6219                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6220  03E9  01CF               	clrf	(_Load^(0+128)+5)
  6221  03EA  01D0               	clrf	((_Load+1)^(0+128)+5)
  6222                           
  6223                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6224  03EB  01D1               	clrf	(_Load^(0+128)+7)
  6225  03EC  01D2               	clrf	((_Load+1)^(0+128)+7)
  6226                           
  6227                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6228  03ED  11CA               	bcf	_Load^(0+128),3
  6229                           
  6230                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6231  03EE  01E3               	clrf	(_Load^(0+128)+25)
  6232                           
  6233                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6234  03EF  13CA               	bcf	_Load^(0+128),7
  6235  03F0                     l5211:	
  6236                           
  6237                           ;OverLoad_B1.c: 255: }
  6238                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6239  03F0  1ECA               	btfss	_Load^(0+128),5
  6240  03F1  0008               	return
  6241                           
  6242                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6243  03F2  3001               	movlw	1
  6244  03F3  07CD               	addwf	(_Load^(0+128)+3),f
  6245  03F4  1803               	skipnc
  6246  03F5  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6247  03F6  3000               	movlw	0
  6248  03F7  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6249                           
  6250                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6251  03F8  3001               	movlw	1
  6252  03F9  024E               	subwf	((_Load+1)^(0+128)+3),w
  6253  03FA  30F4               	movlw	244
  6254  03FB  1903               	skipnz
  6255  03FC  024D               	subwf	(_Load^(0+128)+3),w
  6256  03FD  1C03               	skipc
  6257  03FE  0008               	return
  6258                           
  6259                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6260  03FF  01CD               	clrf	(_Load^(0+128)+3)
  6261  0400  01CE               	clrf	((_Load+1)^(0+128)+3)
  6262                           
  6263                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6264  0401  12CA               	bcf	_Load^(0+128),5
  6265                           
  6266                           ;OverLoad_B1.c: 261: }
  6267                           ;OverLoad_B1.c: 262: }
  6268                           ;OverLoad_B1.c: 263: }
  6269                           ;OverLoad_B1.c: 264: } else {
  6270  0402  0008               	return
  6271  0403                     l718:	
  6272                           
  6273                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6274  0403  1283               	bcf	3,5	;RP0=0, select bank0
  6275  0404  1303               	bcf	3,6	;RP1=0, select bank0
  6276  0405  1C25               	btfss	_myMain,0
  6277  0406  0008               	return
  6278                           
  6279                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6280  0407  1683               	bsf	3,5	;RP0=1, select bank1
  6281  0408  1303               	bcf	3,6	;RP1=0, select bank1
  6282  0409  144A               	bsf	_Load^(0+128),0
  6283  040A  0008               	return
  6284  040B                     __end_of_Load_Main:	
  6285                           
  6286                           	psect	text30
  6287  0B05                     __ptext30:	
  6288 ;; *************** function _getMain_Lights_Count *****************
  6289 ;; Defined at:
  6290 ;;		line 459 in file "../src/Main_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  status1         1    5[COMMON] unsigned char 
  6295 ;;  count           1    4[COMMON] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      unsigned char 
  6298 ;; Registers used:
  6299 ;;		wreg, status,2
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6305 ;;      Params:         0       0       0       0
  6306 ;;      Locals:         2       0       0       0
  6307 ;;      Temps:          0       0       0       0
  6308 ;;      Totals:         2       0       0       0
  6309 ;;Total ram usage:        2 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    2
  6312 ;; This function calls:
  6313 ;;		Nothing
  6314 ;; This function is called by:
  6315 ;;		_Load_Main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _getMain_Lights_Count
  6321  0B05                     _getMain_Lights_Count:	
  6322                           
  6323                           ;Main_B1.c: 460: char count = 0;
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6327  0B05  01F4               	clrf	getMain_Lights_Count@count
  6328                           
  6329                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6330  0B06  3000               	movlw	0
  6331  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  6332  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  6333  0B09  193F               	btfsc	_Lights1,2
  6334  0B0A  3001               	movlw	1
  6335  0B0B  00F5               	movwf	getMain_Lights_Count@status1
  6336                           
  6337                           ;Main_B1.c: 487: return count = status1;
  6338  0B0C  0875               	movf	getMain_Lights_Count@status1,w
  6339  0B0D  00F4               	movwf	getMain_Lights_Count@count
  6340  0B0E  0008               	return
  6341  0B0F                     __end_of_getMain_Lights_Count:	
  6342                           
  6343                           	psect	text31
  6344  0AB8                     __ptext31:	
  6345 ;; *************** function _getLight_Load_Status *****************
  6346 ;; Defined at:
  6347 ;;		line 356 in file "../src/TriacRelay_B1.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  loadstatus      1    4[COMMON] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      unsigned char 
  6354 ;; Registers used:
  6355 ;;		wreg, status,2
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6361 ;;      Params:         0       0       0       0
  6362 ;;      Locals:         1       0       0       0
  6363 ;;      Temps:          0       0       0       0
  6364 ;;      Totals:         1       0       0       0
  6365 ;;Total ram usage:        1 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    2
  6368 ;; This function calls:
  6369 ;;		Nothing
  6370 ;; This function is called by:
  6371 ;;		_Load_Main
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function _getLight_Load_Status
  6377  0AB8                     _getLight_Load_Status:	
  6378                           
  6379                           ;TriacRelay_B1.c: 357: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6380                           
  6381                           ;incstack = 0
  6382                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6383  0AB8  3000               	movlw	0
  6384  0AB9  18F7               	btfsc	_Light,1
  6385  0ABA  3001               	movlw	1
  6386  0ABB  00F4               	movwf	getLight_Load_Status@loadstatus
  6387                           
  6388                           ;TriacRelay_B1.c: 358: return loadstatus;
  6389  0ABC  0874               	movf	getLight_Load_Status@loadstatus,w
  6390  0ABD  0008               	return
  6391  0ABE                     __end_of_getLight_Load_Status:	
  6392                           
  6393                           	psect	text32
  6394  0AB2                     __ptext32:	
  6395 ;; *************** function _getLight_LoadGO *****************
  6396 ;; Defined at:
  6397 ;;		line 351 in file "../src/TriacRelay_B1.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  loadgo          1    4[COMMON] unsigned char 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      unsigned char 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6411 ;;      Params:         0       0       0       0
  6412 ;;      Locals:         1       0       0       0
  6413 ;;      Temps:          0       0       0       0
  6414 ;;      Totals:         1       0       0       0
  6415 ;;Total ram usage:        1 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    2
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_Load_Main
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function _getLight_LoadGO
  6427  0AB2                     _getLight_LoadGO:	
  6428                           
  6429                           ;TriacRelay_B1.c: 352: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6433  0AB2  3000               	movlw	0
  6434  0AB3  1877               	btfsc	_Light,0
  6435  0AB4  3001               	movlw	1
  6436  0AB5  00F4               	movwf	getLight_LoadGO@loadgo
  6437                           
  6438                           ;TriacRelay_B1.c: 353: return loadgo;
  6439  0AB6  0874               	movf	getLight_LoadGO@loadgo,w
  6440  0AB7  0008               	return
  6441  0AB8                     __end_of_getLight_LoadGO:	
  6442                           
  6443                           	psect	text33
  6444  0CFF                     __ptext33:	
  6445 ;; *************** function ___wmul *****************
  6446 ;; Defined at:
  6447 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6450 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  product         2    4[COMMON] unsigned int 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2    0[BANK0 ] unsigned int 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6462 ;;      Params:         0       4       0       0
  6463 ;;      Locals:         2       0       0       0
  6464 ;;      Temps:          0       0       0       0
  6465 ;;      Totals:         2       4       0       0
  6466 ;;Total ram usage:        6 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    2
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_Load_Main
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           
  6477                           ;psect for function ___wmul
  6478  0CFF                     ___wmul:	
  6479                           
  6480                           ;incstack = 0
  6481                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6482  0CFF  01F4               	clrf	___wmul@product
  6483  0D00  01F5               	clrf	___wmul@product+1
  6484  0D01                     l4853:	
  6485  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  6486  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  6487  0D03  1C4C               	btfss	___wmul@multiplier,0
  6488  0D04  2D0B               	goto	l1398
  6489  0D05  084E               	movf	___wmul@multiplicand,w
  6490  0D06  07F4               	addwf	___wmul@product,f
  6491  0D07  1803               	skipnc
  6492  0D08  0AF5               	incf	___wmul@product+1,f
  6493  0D09  084F               	movf	___wmul@multiplicand+1,w
  6494  0D0A  07F5               	addwf	___wmul@product+1,f
  6495  0D0B                     l1398:	
  6496  0D0B  3001               	movlw	1
  6497  0D0C                     u5855:	
  6498  0D0C  1003               	clrc
  6499  0D0D  0DCE               	rlf	___wmul@multiplicand,f
  6500  0D0E  0DCF               	rlf	___wmul@multiplicand+1,f
  6501  0D0F  3EFF               	addlw	-1
  6502  0D10  1D03               	skipz
  6503  0D11  2D0C               	goto	u5855
  6504  0D12  3001               	movlw	1
  6505  0D13                     u5865:	
  6506  0D13  1003               	clrc
  6507  0D14  0CCD               	rrf	___wmul@multiplier+1,f
  6508  0D15  0CCC               	rrf	___wmul@multiplier,f
  6509  0D16  3EFF               	addlw	-1
  6510  0D17  1D03               	skipz
  6511  0D18  2D13               	goto	u5865
  6512  0D19  084D               	movf	___wmul@multiplier+1,w
  6513  0D1A  044C               	iorwf	___wmul@multiplier,w
  6514  0D1B  1D03               	skipz
  6515  0D1C  2D01               	goto	l4853
  6516  0D1D  0875               	movf	___wmul@product+1,w
  6517  0D1E  01CD               	clrf	?___wmul+1
  6518  0D1F  07CD               	addwf	?___wmul+1,f
  6519  0D20  0874               	movf	___wmul@product,w
  6520  0D21  01CC               	clrf	?___wmul
  6521  0D22  07CC               	addwf	?___wmul,f
  6522  0D23  0008               	return
  6523  0D24                     __end_of___wmul:	
  6524                           
  6525                           	psect	text34
  6526  0DFA                     __ptext34:	
  6527 ;; *************** function ___lwdiv *****************
  6528 ;; Defined at:
  6529 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  divisor         2    0[BANK0 ] unsigned int 
  6532 ;;  dividend        2    2[BANK0 ] unsigned int 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  quotient        2    5[BANK0 ] unsigned int 
  6535 ;;  counter         1    4[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  2    0[BANK0 ] unsigned int 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6545 ;;      Params:         0       4       0       0
  6546 ;;      Locals:         0       3       0       0
  6547 ;;      Temps:          1       0       0       0
  6548 ;;      Totals:         1       7       0       0
  6549 ;;Total ram usage:        8 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    2
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_Load_Main
  6556 ;;		_getPIR_AD
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function ___lwdiv
  6562  0DFA                     ___lwdiv:	
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6566  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  6567  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  6568  0DFC  01D1               	clrf	___lwdiv@quotient
  6569  0DFD  01D2               	clrf	___lwdiv@quotient+1
  6570  0DFE  084D               	movf	___lwdiv@divisor+1,w
  6571  0DFF  044C               	iorwf	___lwdiv@divisor,w
  6572  0E00  1903               	skipnz
  6573  0E01  2E33               	goto	l4885
  6574  0E02  01D0               	clrf	___lwdiv@counter
  6575  0E03  0AD0               	incf	___lwdiv@counter,f
  6576  0E04                     l4873:	
  6577  0E04  1BCD               	btfsc	___lwdiv@divisor+1,7
  6578  0E05  2E12               	goto	l4875
  6579  0E06  3001               	movlw	1
  6580  0E07                     u5895:	
  6581  0E07  1003               	clrc
  6582  0E08  0DCC               	rlf	___lwdiv@divisor,f
  6583  0E09  0DCD               	rlf	___lwdiv@divisor+1,f
  6584  0E0A  3EFF               	addlw	-1
  6585  0E0B  1D03               	skipz
  6586  0E0C  2E07               	goto	u5895
  6587  0E0D  3001               	movlw	1
  6588  0E0E  00F4               	movwf	??___lwdiv
  6589  0E0F  0874               	movf	??___lwdiv,w
  6590  0E10  07D0               	addwf	___lwdiv@counter,f
  6591  0E11  2E04               	goto	l4873
  6592  0E12                     l4875:	
  6593  0E12  3001               	movlw	1
  6594  0E13                     u5915:	
  6595  0E13  1003               	clrc
  6596  0E14  0DD1               	rlf	___lwdiv@quotient,f
  6597  0E15  0DD2               	rlf	___lwdiv@quotient+1,f
  6598  0E16  3EFF               	addlw	-1
  6599  0E17  1D03               	skipz
  6600  0E18  2E13               	goto	u5915
  6601  0E19  084D               	movf	___lwdiv@divisor+1,w
  6602  0E1A  024F               	subwf	___lwdiv@dividend+1,w
  6603  0E1B  1D03               	skipz
  6604  0E1C  2E1F               	goto	u5925
  6605  0E1D  084C               	movf	___lwdiv@divisor,w
  6606  0E1E  024E               	subwf	___lwdiv@dividend,w
  6607  0E1F                     u5925:	
  6608  0E1F  1C03               	skipc
  6609  0E20  2E28               	goto	l4881
  6610  0E21  084C               	movf	___lwdiv@divisor,w
  6611  0E22  02CE               	subwf	___lwdiv@dividend,f
  6612  0E23  084D               	movf	___lwdiv@divisor+1,w
  6613  0E24  1C03               	skipc
  6614  0E25  03CF               	decf	___lwdiv@dividend+1,f
  6615  0E26  02CF               	subwf	___lwdiv@dividend+1,f
  6616  0E27  1451               	bsf	___lwdiv@quotient,0
  6617  0E28                     l4881:	
  6618  0E28  3001               	movlw	1
  6619  0E29                     u5935:	
  6620  0E29  1003               	clrc
  6621  0E2A  0CCD               	rrf	___lwdiv@divisor+1,f
  6622  0E2B  0CCC               	rrf	___lwdiv@divisor,f
  6623  0E2C  3EFF               	addlw	-1
  6624  0E2D  1D03               	skipz
  6625  0E2E  2E29               	goto	u5935
  6626  0E2F  3001               	movlw	1
  6627  0E30  02D0               	subwf	___lwdiv@counter,f
  6628  0E31  1D03               	btfss	3,2
  6629  0E32  2E12               	goto	l4875
  6630  0E33                     l4885:	
  6631  0E33  0852               	movf	___lwdiv@quotient+1,w
  6632  0E34  01CD               	clrf	?___lwdiv+1
  6633  0E35  07CD               	addwf	?___lwdiv+1,f
  6634  0E36  0851               	movf	___lwdiv@quotient,w
  6635  0E37  01CC               	clrf	?___lwdiv
  6636  0E38  07CC               	addwf	?___lwdiv,f
  6637  0E39  0008               	return
  6638  0E3A                     __end_of___lwdiv:	
  6639                           
  6640                           	psect	text35
  6641  0A92                     __ptext35:	
  6642 ;; *************** function _Load_Initialization *****************
  6643 ;; Defined at:
  6644 ;;		line 9 in file "../src/OverLoad_B1.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6658 ;;      Params:         0       0       0       0
  6659 ;;      Locals:         0       0       0       0
  6660 ;;      Temps:          0       0       0       0
  6661 ;;      Totals:         0       0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    3
  6665 ;; This function calls:
  6666 ;;		_setLoad_AH_AL_Restore
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _Load_Initialization
  6674  0A92                     _Load_Initialization:	
  6675                           
  6676                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6680  0A92  158A  23D0         	fcall	_setLoad_AH_AL_Restore
  6681  0A94  0008               	return
  6682  0A95                     __end_of_Load_Initialization:	
  6683                           
  6684                           	psect	text36
  6685  0BD0                     __ptext36:	
  6686 ;; *************** function _setLoad_AH_AL_Restore *****************
  6687 ;; Defined at:
  6688 ;;		line 292 in file "../src/OverLoad_B1.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  i               1    5[COMMON] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6702 ;;      Params:         0       0       0       0
  6703 ;;      Locals:         1       0       0       0
  6704 ;;      Temps:          1       0       0       0
  6705 ;;      Totals:         2       0       0       0
  6706 ;;Total ram usage:        2 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    2
  6709 ;; This function calls:
  6710 ;;		Nothing
  6711 ;; This function is called by:
  6712 ;;		_Load_Initialization
  6713 ;;		_Load_Main
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function _setLoad_AH_AL_Restore
  6719  0BD0                     _setLoad_AH_AL_Restore:	
  6720                           
  6721                           ;OverLoad_B1.c: 293: char i;
  6722                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6726  0BD0  01F5               	clrf	setLoad_AH_AL_Restore@i
  6727  0BD1                     L18:	
  6728  0BD1  3005               	movlw	5
  6729  0BD2  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6730  0BD3  1803               	btfsc	3,0
  6731  0BD4  0008               	return
  6732                           
  6733                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  6734  0BD5  0875               	movf	setLoad_AH_AL_Restore@i,w
  6735  0BD6  3ED4               	addlw	(_Load+10)& (0+255)
  6736  0BD7  0084               	movwf	4
  6737  0BD8  1383               	bcf	3,7	;select IRP bank1
  6738  0BD9  0180               	clrf	0
  6739                           
  6740                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  6741  0BDA  30FF               	movlw	255
  6742  0BDB  00F4               	movwf	??_setLoad_AH_AL_Restore
  6743  0BDC  0875               	movf	setLoad_AH_AL_Restore@i,w
  6744  0BDD  3ED9               	addlw	(_Load+15)& (0+255)
  6745  0BDE  0084               	movwf	4
  6746  0BDF  0874               	movf	??_setLoad_AH_AL_Restore,w
  6747  0BE0  0080               	movwf	0
  6748  0BE1  3001               	movlw	1
  6749  0BE2  00F4               	movwf	??_setLoad_AH_AL_Restore
  6750  0BE3  0874               	movf	??_setLoad_AH_AL_Restore,w
  6751  0BE4  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6752  0BE5  2BD1               	goto	L18
  6753  0BE6                     __end_of_setLoad_AH_AL_Restore:	
  6754                           
  6755                           	psect	text37
  6756  0C9A                     __ptext37:	
  6757 ;; *************** function _Lights_Main *****************
  6758 ;; Defined at:
  6759 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;		None               void
  6766 ;; Registers used:
  6767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6773 ;;      Params:         0       0       0       0
  6774 ;;      Locals:         0       0       0       0
  6775 ;;      Temps:          0       0       0       0
  6776 ;;      Totals:         0       0       0       0
  6777 ;;Total ram usage:        0 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    6
  6780 ;; This function calls:
  6781 ;;		_Lights_Control
  6782 ;;		_getLoad_OK
  6783 ;;		_getMain_All_Error_Status
  6784 ;;		_getMain_All_LightsStatus
  6785 ;;		_setLights_Main
  6786 ;; This function is called by:
  6787 ;;		_main
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           
  6792                           ;psect for function _Lights_Main
  6793  0C9A                     _Lights_Main:	
  6794                           
  6795                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6796                           
  6797                           ;incstack = 0
  6798                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6799  0C9A  1C77               	btfss	_Light,0
  6800  0C9B  2CB0               	goto	l5229
  6801                           
  6802                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6803  0C9C  158A  22DA  158A   	fcall	_getLoad_OK
  6804  0C9F  3A01               	xorlw	1
  6805  0CA0  1903               	skipnz
  6806  0CA1  2CAF               	goto	l1279
  6807  0CA2  3000               	movlw	0
  6808  0CA3  158A  25BC  158A   	fcall	_getMain_All_Error_Status
  6809  0CA6  3800               	iorlw	0
  6810  0CA7  1D03               	skipz
  6811  0CA8  2CAF               	goto	l1279
  6812  0CA9  158A  22F2  158A   	fcall	_getMain_All_LightsStatus
  6813  0CAC  3800               	iorlw	0
  6814  0CAD  1D03               	skipz
  6815  0CAE  2CB0               	goto	l5229
  6816  0CAF                     l1279:	
  6817                           
  6818                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6819  0CAF  1077               	bcf	_Light,0
  6820  0CB0                     l5229:	
  6821                           
  6822                           ;TriacRelay_B1.c: 68: }
  6823                           ;TriacRelay_B1.c: 69: }
  6824                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6825  0CB0  3001               	movlw	1
  6826  0CB1  158A  2524  158A   	fcall	_setLights_Main
  6827                           
  6828                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6829  0CB4  3001               	movlw	1
  6830  0CB5  118A  2683         	fcall	_Lights_Control
  6831  0CB7  0008               	return
  6832  0CB8                     __end_of_Lights_Main:	
  6833                           
  6834                           	psect	text38
  6835  0D24                     __ptext38:	
  6836 ;; *************** function _setLights_Main *****************
  6837 ;; Defined at:
  6838 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  lights          1    wreg     unsigned char 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  lights          1    5[BANK0 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6852 ;;      Params:         0       0       0       0
  6853 ;;      Locals:         0       1       0       0
  6854 ;;      Temps:          0       0       0       0
  6855 ;;      Totals:         0       1       0       0
  6856 ;;Total ram usage:        1 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    5
  6859 ;; This function calls:
  6860 ;;		_LightsPointSelect
  6861 ;;		_getLights_Allow_Condition
  6862 ;;		_setLights
  6863 ;; This function is called by:
  6864 ;;		_Lights_Main
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           
  6869                           ;psect for function _setLights_Main
  6870  0D24                     _setLights_Main:	
  6871                           
  6872                           ;incstack = 0
  6873                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6874                           ;setLights_Main@lights stored from wreg
  6875  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  6876  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  6877  0D26  00D1               	movwf	setLights_Main@lights
  6878                           
  6879                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6880  0D27  0851               	movf	setLights_Main@lights,w
  6881  0D28  158A  22FB  158A   	fcall	_LightsPointSelect
  6882                           
  6883                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6884  0D2B  0878               	movf	_Lights,w
  6885  0D2C  0084               	movwf	4
  6886  0D2D  1383               	bcf	3,7	;select IRP bank0
  6887  0D2E  1880               	btfsc	0,1
  6888  0D2F  0008               	return
  6889                           
  6890                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6891  0D30  0878               	movf	_Lights,w
  6892  0D31  0084               	movwf	4
  6893  0D32  1D80               	btfss	0,3
  6894  0D33  0008               	return
  6895                           
  6896                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6897  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  6898  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  6899  0D36  0851               	movf	setLights_Main@lights,w
  6900  0D37  158A  23E6  158A   	fcall	_getLights_Allow_Condition
  6901  0D3A  3800               	iorlw	0
  6902  0D3B  1D03               	skipz
  6903  0D3C  0008               	return
  6904                           
  6905                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6906  0D3D  0878               	movf	_Lights,w
  6907  0D3E  0084               	movwf	4
  6908  0D3F  1383               	bcf	3,7	;select IRP bank0
  6909  0D40  1180               	bcf	0,3
  6910                           
  6911                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6912  0D41  0878               	movf	_Lights,w
  6913  0D42  0084               	movwf	4
  6914  0D43  1E00               	btfss	0,4
  6915  0D44  2D4D               	goto	l4821
  6916                           
  6917                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6918  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  6919  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  6920  0D47  01CE               	clrf	setLights@status
  6921  0D48  0ACE               	incf	setLights@status,f
  6922  0D49  0851               	movf	setLights_Main@lights,w
  6923  0D4A  118A  2706         	fcall	_setLights
  6924                           
  6925                           ;TriacRelay_B1.c: 99: } else {
  6926  0D4C  0008               	return
  6927  0D4D                     l4821:	
  6928                           
  6929                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6930  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  6931  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  6932  0D4F  01CE               	clrf	setLights@status
  6933  0D50  0851               	movf	setLights_Main@lights,w
  6934  0D51  118A  2706         	fcall	_setLights
  6935  0D53  0008               	return
  6936  0D54                     __end_of_setLights_Main:	
  6937                           
  6938                           	psect	text39
  6939  0706                     __ptext39:	
  6940 ;; *************** function _setLights *****************
  6941 ;; Defined at:
  6942 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  lights          1    wreg     unsigned char 
  6945 ;;  status          1    2[BANK0 ] unsigned char 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  lights          1    4[BANK0 ] unsigned char 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6957 ;;      Params:         0       1       0       0
  6958 ;;      Locals:         0       1       0       0
  6959 ;;      Temps:          0       1       0       0
  6960 ;;      Totals:         0       3       0       0
  6961 ;;Total ram usage:        3 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    4
  6964 ;; This function calls:
  6965 ;;		_setLED
  6966 ;;		_setLights_Line
  6967 ;; This function is called by:
  6968 ;;		_setLights_Main
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _setLights
  6974  0706                     _setLights:	
  6975                           
  6976                           ;incstack = 0
  6977                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6978                           ;setLights@lights stored from wreg
  6979  0706  1283               	bcf	3,5	;RP0=0, select bank0
  6980  0707  1303               	bcf	3,6	;RP1=0, select bank0
  6981  0708  00D0               	movwf	setLights@lights
  6982                           
  6983                           ;TriacRelay_B1.c: 114: Lights->GO = 1;
  6984  0709  0878               	movf	_Lights,w
  6985  070A  0084               	movwf	4
  6986  070B  1383               	bcf	3,7	;select IRP bank0
  6987  070C  1480               	bsf	0,1
  6988                           
  6989                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6990  070D  084E               	movf	setLights@status,w
  6991  070E  3A01               	xorlw	1
  6992  070F  1D03               	skipz
  6993  0710  2F41               	goto	l4591
  6994                           
  6995                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6996  0711  0850               	movf	setLights@lights,w
  6997  0712  3A02               	xorlw	2
  6998  0713  1D03               	skipz
  6999  0714  2F22               	goto	l4581
  7000                           
  7001                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7002  0715  01CC               	clrf	setLED@command
  7003  0716  3001               	movlw	1
  7004  0717  158A  2735  118A   	fcall	_setLED
  7005                           
  7006                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7007  071A  1283               	bcf	3,5	;RP0=0, select bank0
  7008  071B  1303               	bcf	3,6	;RP1=0, select bank0
  7009  071C  01CC               	clrf	setLED@command
  7010  071D  0ACC               	incf	setLED@command,f
  7011  071E  3002               	movlw	2
  7012  071F  158A  2735  118A   	fcall	_setLED
  7013  0722                     l4581:	
  7014                           
  7015                           ;TriacRelay_B1.c: 121: }
  7016                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7017  0722  0878               	movf	_Lights,w
  7018  0723  0084               	movwf	4
  7019  0724  1383               	bcf	3,7	;select IRP bank0
  7020  0725  1900               	btfsc	0,2
  7021  0726  2F75               	goto	l4605
  7022                           
  7023                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7024  0727  0878               	movf	_Lights,w
  7025  0728  0084               	movwf	4
  7026  0729  1500               	bsf	0,2
  7027                           
  7028                           ;TriacRelay_B1.c: 129: Lights->RelayValue = 100;
  7029  072A  3064               	movlw	100
  7030  072B  1283               	bcf	3,5	;RP0=0, select bank0
  7031  072C  1303               	bcf	3,6	;RP1=0, select bank0
  7032  072D  00CF               	movwf	??_setLights
  7033  072E  0878               	movf	_Lights,w
  7034  072F  3E04               	addlw	4
  7035  0730  0084               	movwf	4
  7036  0731  084F               	movf	??_setLights,w
  7037  0732  0080               	movwf	0
  7038                           
  7039                           ;TriacRelay_B1.c: 130: Lights->TriacValue = 140;
  7040  0733  308C               	movlw	140
  7041  0734  00CF               	movwf	??_setLights
  7042  0735  0878               	movf	_Lights,w
  7043  0736  3E03               	addlw	3
  7044  0737  0084               	movwf	4
  7045  0738  084F               	movf	??_setLights,w
  7046  0739  0080               	movwf	0
  7047                           
  7048                           ;TriacRelay_B1.c: 131: Lights->Time = 0;
  7049  073A  0878               	movf	_Lights,w
  7050  073B  3E02               	addlw	2
  7051  073C  0084               	movwf	4
  7052  073D  0180               	clrf	0
  7053                           
  7054                           ;TriacRelay_B1.c: 133: Light.Load_Status = 1;
  7055  073E  14F7               	bsf	_Light,1
  7056                           
  7057                           ;TriacRelay_B1.c: 134: setLights_Line(lights);
  7058  073F  0850               	movf	setLights@lights,w
  7059  0740  2F72               	goto	L19
  7060  0741                     l4591:	
  7061                           ;TriacRelay_B1.c: 136: }
  7062                           ;TriacRelay_B1.c: 137: } else {
  7063                           
  7064                           
  7065                           ;TriacRelay_B1.c: 140: if (lights == 2) {
  7066  0741  1283               	bcf	3,5	;RP0=0, select bank0
  7067  0742  1303               	bcf	3,6	;RP1=0, select bank0
  7068  0743  0850               	movf	setLights@lights,w
  7069  0744  3A02               	xorlw	2
  7070  0745  1D03               	skipz
  7071  0746  2F54               	goto	l4595
  7072                           
  7073                           ;TriacRelay_B1.c: 141: setLED(1, 1);
  7074  0747  01CC               	clrf	setLED@command
  7075  0748  0ACC               	incf	setLED@command,f
  7076  0749  3001               	movlw	1
  7077  074A  158A  2735  118A   	fcall	_setLED
  7078                           
  7079                           ;TriacRelay_B1.c: 142: setLED(2, 0);
  7080  074D  1283               	bcf	3,5	;RP0=0, select bank0
  7081  074E  1303               	bcf	3,6	;RP1=0, select bank0
  7082  074F  01CC               	clrf	setLED@command
  7083  0750  3002               	movlw	2
  7084  0751  158A  2735  118A   	fcall	_setLED
  7085  0754                     l4595:	
  7086                           
  7087                           ;TriacRelay_B1.c: 143: }
  7088                           ;TriacRelay_B1.c: 145: if (Lights->Status == 1) {
  7089  0754  0878               	movf	_Lights,w
  7090  0755  0084               	movwf	4
  7091  0756  1383               	bcf	3,7	;select IRP bank0
  7092  0757  1D00               	btfss	0,2
  7093  0758  2F75               	goto	l4605
  7094                           
  7095                           ;TriacRelay_B1.c: 146: Lights->Status = 0;
  7096  0759  0878               	movf	_Lights,w
  7097  075A  0084               	movwf	4
  7098  075B  1100               	bcf	0,2
  7099                           
  7100                           ;TriacRelay_B1.c: 147: Lights->RelayValue = 40;
  7101  075C  3028               	movlw	40
  7102  075D  1283               	bcf	3,5	;RP0=0, select bank0
  7103  075E  1303               	bcf	3,6	;RP1=0, select bank0
  7104  075F  00CF               	movwf	??_setLights
  7105  0760  0878               	movf	_Lights,w
  7106  0761  3E04               	addlw	4
  7107  0762  0084               	movwf	4
  7108  0763  084F               	movf	??_setLights,w
  7109  0764  0080               	movwf	0
  7110                           
  7111                           ;TriacRelay_B1.c: 148: Lights->TriacValue = 80;
  7112  0765  3050               	movlw	80
  7113  0766  00CF               	movwf	??_setLights
  7114  0767  0878               	movf	_Lights,w
  7115  0768  3E03               	addlw	3
  7116  0769  0084               	movwf	4
  7117  076A  084F               	movf	??_setLights,w
  7118  076B  0080               	movwf	0
  7119                           
  7120                           ;TriacRelay_B1.c: 149: Lights->Time = 0;
  7121  076C  0878               	movf	_Lights,w
  7122  076D  3E02               	addlw	2
  7123  076E  0084               	movwf	4
  7124  076F  0180               	clrf	0
  7125                           
  7126                           ;TriacRelay_B1.c: 151: Light.Load_Status = 0;
  7127  0770  10F7               	bcf	_Light,1
  7128                           
  7129                           ;TriacRelay_B1.c: 152: setLights_Line(0);
  7130  0771  3000               	movlw	0
  7131  0772                     L19:	
  7132  0772  158A  2328  118A   	fcall	_setLights_Line
  7133  0775                     l4605:	
  7134                           
  7135                           ;TriacRelay_B1.c: 154: }
  7136                           ;TriacRelay_B1.c: 155: }
  7137                           ;TriacRelay_B1.c: 157: if (lights == 1) {
  7138  0775  1283               	bcf	3,5	;RP0=0, select bank0
  7139  0776  1303               	bcf	3,6	;RP1=0, select bank0
  7140  0777  0850               	movf	setLights@lights,w
  7141  0778  3A01               	xorlw	1
  7142  0779  1D03               	skipz
  7143  077A  0008               	return
  7144                           
  7145                           ;TriacRelay_B1.c: 158: RB2 = 1;
  7146  077B  1506               	bsf	6,2	;volatile
  7147  077C  0008               	return
  7148  077D                     __end_of_setLights:	
  7149                           
  7150                           	psect	text40
  7151  0B28                     __ptext40:	
  7152 ;; *************** function _setLights_Line *****************
  7153 ;; Defined at:
  7154 ;;		line 239 in file "../src/TriacRelay_B1.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  lights          1    wreg     unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  lights          1    4[COMMON] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;		None               void
  7161 ;; Registers used:
  7162 ;;		wreg
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7168 ;;      Params:         0       0       0       0
  7169 ;;      Locals:         1       0       0       0
  7170 ;;      Temps:          0       0       0       0
  7171 ;;      Totals:         1       0       0       0
  7172 ;;Total ram usage:        1 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    2
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_setLights
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _setLights_Line
  7184  0B28                     _setLights_Line:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _setLights_Line: [wreg]
  7188                           ;setLights_Line@lights stored from wreg
  7189  0B28  00F4               	movwf	setLights_Line@lights
  7190                           
  7191                           ;TriacRelay_B1.c: 240: Light.LoadGO = 1;
  7192  0B29  1477               	bsf	_Light,0
  7193                           
  7194                           ;TriacRelay_B1.c: 242: Lights1.Line = 0;
  7195  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  7196  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  7197  0B2C  1040               	bcf	_Lights1+1,0
  7198                           
  7199                           ;TriacRelay_B1.c: 243: if (lights == 1 && lights != 0) {
  7200  0B2D  0874               	movf	setLights_Line@lights,w
  7201  0B2E  3A01               	xorlw	1
  7202  0B2F  1D03               	skipz
  7203  0B30  0008               	return
  7204  0B31  0874               	movf	setLights_Line@lights,w
  7205  0B32  1903               	btfsc	3,2
  7206  0B33  0008               	return
  7207                           
  7208                           ;TriacRelay_B1.c: 244: Lights1.Line = 1;
  7209  0B34  1440               	bsf	_Lights1+1,0
  7210  0B35  0008               	return
  7211  0B36                     __end_of_setLights_Line:	
  7212                           
  7213                           	psect	text41
  7214  0BE6                     __ptext41:	
  7215 ;; *************** function _getLights_Allow_Condition *****************
  7216 ;; Defined at:
  7217 ;;		line 318 in file "../src/TriacRelay_B1.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  lights          1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  lights          1    0[COMMON] unsigned char 
  7222 ;;  allow           1    0[BANK0 ] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      unsigned char 
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, pclath, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7232 ;;      Params:         0       0       0       0
  7233 ;;      Locals:         0       2       0       0
  7234 ;;      Temps:          1       0       0       0
  7235 ;;      Totals:         1       2       0       0
  7236 ;;Total ram usage:        3 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    3
  7239 ;; This function calls:
  7240 ;;		_getLoad_OK
  7241 ;; This function is called by:
  7242 ;;		_setLights_Main
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _getLights_Allow_Condition
  7248  0BE6                     _getLights_Allow_Condition:	
  7249                           
  7250                           ;TriacRelay_B1.c: 319: char allow = 0;
  7251                           
  7252                           ;incstack = 0
  7253                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7254  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  7255  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  7256  0BE8  01CC               	clrf	getLights_Allow_Condition@allow
  7257                           
  7258                           ;TriacRelay_B1.c: 322: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7259  0BE9  01CD               	clrf	_getLights_Allow_Condition$4181
  7260  0BEA  0ACD               	incf	_getLights_Allow_Condition$4181,f
  7261  0BEB  158A  22DA  158A   	fcall	_getLoad_OK
  7262  0BEE  3800               	iorlw	0
  7263  0BEF  1903               	btfsc	3,2
  7264  0BF0  1877               	btfsc	_Light,0
  7265  0BF1  2BF5               	goto	l4567
  7266  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  7267  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  7268  0BF4  01CD               	clrf	_getLights_Allow_Condition$4181
  7269  0BF5                     l4567:	
  7270  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  7271  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  7272  0BF7  084D               	movf	_getLights_Allow_Condition$4181,w
  7273  0BF8  00F5               	movwf	??_getLights_Allow_Condition
  7274  0BF9  0875               	movf	??_getLights_Allow_Condition,w
  7275  0BFA  00CC               	movwf	getLights_Allow_Condition@allow
  7276                           
  7277                           ;TriacRelay_B1.c: 347: return allow;
  7278  0BFB  084C               	movf	getLights_Allow_Condition@allow,w
  7279  0BFC  0008               	return
  7280  0BFD                     __end_of_getLights_Allow_Condition:	
  7281                           
  7282                           	psect	text42
  7283  0ADA                     __ptext42:	
  7284 ;; *************** function _getLoad_OK *****************
  7285 ;; Defined at:
  7286 ;;		line 272 in file "../src/OverLoad_B1.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  ok              1    4[COMMON] unsigned char 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      unsigned char 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7300 ;;      Params:         0       0       0       0
  7301 ;;      Locals:         1       0       0       0
  7302 ;;      Temps:          0       0       0       0
  7303 ;;      Totals:         1       0       0       0
  7304 ;;Total ram usage:        1 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    2
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		_Lights_Main
  7311 ;;		_getLights_Allow_Condition
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _getLoad_OK
  7317  0ADA                     _getLoad_OK:	
  7318                           
  7319                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7323  0ADA  3000               	movlw	0
  7324  0ADB  1683               	bsf	3,5	;RP0=1, select bank1
  7325  0ADC  1303               	bcf	3,6	;RP1=0, select bank1
  7326  0ADD  1BCA               	btfsc	_Load^(0+128),7
  7327  0ADE  3001               	movlw	1
  7328  0ADF  00F4               	movwf	getLoad_OK@ok
  7329                           
  7330                           ;OverLoad_B1.c: 274: return ok;
  7331  0AE0  0874               	movf	getLoad_OK@ok,w
  7332  0AE1  0008               	return
  7333  0AE2                     __end_of_getLoad_OK:	
  7334                           
  7335                           	psect	text43
  7336  0683                     __ptext43:	
  7337 ;; *************** function _Lights_Control *****************
  7338 ;; Defined at:
  7339 ;;		line 174 in file "../src/TriacRelay_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  lights          1    wreg     unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  lights          1   10[BANK0 ] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7353 ;;      Params:         0       0       0       0
  7354 ;;      Locals:         0       1       0       0
  7355 ;;      Temps:          0       2       0       0
  7356 ;;      Totals:         0       3       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    3
  7360 ;; This function calls:
  7361 ;;		_LightsPointSelect
  7362 ;;		___awdiv
  7363 ;; This function is called by:
  7364 ;;		_Lights_Main
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _Lights_Control
  7370  0683                     _Lights_Control:	
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7374                           ;Lights_Control@lights stored from wreg
  7375  0683  1283               	bcf	3,5	;RP0=0, select bank0
  7376  0684  1303               	bcf	3,6	;RP1=0, select bank0
  7377  0685  00D6               	movwf	Lights_Control@lights
  7378                           
  7379                           ;TriacRelay_B1.c: 175: LightsPointSelect(lights);
  7380  0686  0856               	movf	Lights_Control@lights,w
  7381  0687  158A  22FB  118A   	fcall	_LightsPointSelect
  7382                           
  7383                           ;TriacRelay_B1.c: 176: if (Lights->GO == 1) {
  7384  068A  0878               	movf	_Lights,w
  7385  068B  0084               	movwf	4
  7386  068C  1383               	bcf	3,7	;select IRP bank0
  7387  068D  1C80               	btfss	0,1
  7388  068E  0008               	return
  7389                           
  7390                           ;TriacRelay_B1.c: 177: Lights->Time++;
  7391  068F  3001               	movlw	1
  7392  0690  1283               	bcf	3,5	;RP0=0, select bank0
  7393  0691  1303               	bcf	3,6	;RP1=0, select bank0
  7394  0692  00D4               	movwf	??_Lights_Control
  7395  0693  0878               	movf	_Lights,w
  7396  0694  3E02               	addlw	2
  7397  0695  0084               	movwf	4
  7398  0696  0854               	movf	??_Lights_Control,w
  7399  0697  0780               	addwf	0,f
  7400                           
  7401                           ;TriacRelay_B1.c: 178: if (Lights->RelaySet == 0) {
  7402  0698  0878               	movf	_Lights,w
  7403  0699  0084               	movwf	4
  7404  069A  1B80               	btfsc	0,7
  7405  069B  2ED2               	goto	l4839
  7406                           
  7407                           ;TriacRelay_B1.c: 179: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7408  069C  3014               	movlw	20
  7409  069D  00CC               	movwf	___awdiv@divisor
  7410  069E  3000               	movlw	0
  7411  069F  00CD               	movwf	___awdiv@divisor+1
  7412  06A0  0878               	movf	_Lights,w
  7413  06A1  3E04               	addlw	4
  7414  06A2  0084               	movwf	4
  7415  06A3  0800               	movf	0,w
  7416  06A4  00D4               	movwf	??_Lights_Control
  7417  06A5  01D5               	clrf	??_Lights_Control+1
  7418  06A6  0854               	movf	??_Lights_Control,w
  7419  06A7  00CE               	movwf	___awdiv@dividend
  7420  06A8  0855               	movf	??_Lights_Control+1,w
  7421  06A9  00CF               	movwf	___awdiv@dividend+1
  7422  06AA  158A  26D8  118A   	fcall	___awdiv
  7423  06AD  0878               	movf	_Lights,w
  7424  06AE  3E02               	addlw	2
  7425  06AF  0084               	movwf	4
  7426  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  7427  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  7428  06B2  084D               	movf	?___awdiv+1,w
  7429  06B3  3A80               	xorlw	128
  7430  06B4  3C80               	sublw	128
  7431  06B5  1D03               	skipz
  7432  06B6  2EBA               	goto	u5785
  7433  06B7  084C               	movf	?___awdiv,w
  7434  06B8  1383               	bcf	3,7	;select IRP bank0
  7435  06B9  0200               	subwf	0,w
  7436  06BA                     u5785:	
  7437  06BA  1C03               	skipc
  7438  06BB  0008               	return
  7439                           
  7440                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 1;
  7441  06BC  0878               	movf	_Lights,w
  7442  06BD  0084               	movwf	4
  7443  06BE  1383               	bcf	3,7	;select IRP bank0
  7444  06BF  1780               	bsf	0,7
  7445                           
  7446                           ;TriacRelay_B1.c: 182: if (lights == 1) {
  7447  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  7448  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  7449  06C2  0856               	movf	Lights_Control@lights,w
  7450  06C3  3A01               	xorlw	1
  7451  06C4  1D03               	skipz
  7452  06C5  0008               	return
  7453                           
  7454                           ;TriacRelay_B1.c: 183: RB3 = Lights->Status == 1 ? 1 : 0;
  7455  06C6  0878               	movf	_Lights,w
  7456  06C7  0084               	movwf	4
  7457  06C8  1D00               	btfss	0,2
  7458  06C9  2ECE               	goto	u5800
  7459  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  7460  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  7461  06CC  1586               	bsf	6,3	;volatile
  7462  06CD  0008               	return
  7463  06CE                     u5800:	
  7464  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  7465  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  7466  06D0  1186               	bcf	6,3	;volatile
  7467                           
  7468                           ;TriacRelay_B1.c: 184: }
  7469                           ;TriacRelay_B1.c: 196: }
  7470                           ;TriacRelay_B1.c: 197: } else {
  7471  06D1  0008               	return
  7472  06D2                     l4839:	
  7473                           
  7474                           ;TriacRelay_B1.c: 198: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7475  06D2  3014               	movlw	20
  7476  06D3  00CC               	movwf	___awdiv@divisor
  7477  06D4  3000               	movlw	0
  7478  06D5  00CD               	movwf	___awdiv@divisor+1
  7479  06D6  0878               	movf	_Lights,w
  7480  06D7  3E03               	addlw	3
  7481  06D8  0084               	movwf	4
  7482  06D9  1383               	bcf	3,7	;select IRP bank0
  7483  06DA  0800               	movf	0,w
  7484  06DB  00D4               	movwf	??_Lights_Control
  7485  06DC  01D5               	clrf	??_Lights_Control+1
  7486  06DD  0854               	movf	??_Lights_Control,w
  7487  06DE  00CE               	movwf	___awdiv@dividend
  7488  06DF  0855               	movf	??_Lights_Control+1,w
  7489  06E0  00CF               	movwf	___awdiv@dividend+1
  7490  06E1  158A  26D8  118A   	fcall	___awdiv
  7491  06E4  0878               	movf	_Lights,w
  7492  06E5  3E02               	addlw	2
  7493  06E6  0084               	movwf	4
  7494  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  7495  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  7496  06E9  084D               	movf	?___awdiv+1,w
  7497  06EA  3A80               	xorlw	128
  7498  06EB  3C80               	sublw	128
  7499  06EC  1D03               	skipz
  7500  06ED  2EF1               	goto	u5825
  7501  06EE  084C               	movf	?___awdiv,w
  7502  06EF  1383               	bcf	3,7	;select IRP bank0
  7503  06F0  0200               	subwf	0,w
  7504  06F1                     u5825:	
  7505  06F1  1C03               	skipc
  7506  06F2  0008               	return
  7507                           
  7508                           ;TriacRelay_B1.c: 199: Lights->Time = 0;
  7509  06F3  0878               	movf	_Lights,w
  7510  06F4  3E02               	addlw	2
  7511  06F5  0084               	movwf	4
  7512  06F6  1383               	bcf	3,7	;select IRP bank0
  7513  06F7  0180               	clrf	0
  7514                           
  7515                           ;TriacRelay_B1.c: 200: Lights->GO = 0;
  7516  06F8  0878               	movf	_Lights,w
  7517  06F9  0084               	movwf	4
  7518  06FA  1080               	bcf	0,1
  7519                           
  7520                           ;TriacRelay_B1.c: 201: Lights->RelaySet = 0;
  7521  06FB  0878               	movf	_Lights,w
  7522  06FC  0084               	movwf	4
  7523  06FD  1380               	bcf	0,7
  7524                           
  7525                           ;TriacRelay_B1.c: 204: if (lights == 1) {
  7526  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  7527  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  7528  0700  0856               	movf	Lights_Control@lights,w
  7529  0701  3A01               	xorlw	1
  7530  0702  1D03               	skipz
  7531  0703  0008               	return
  7532                           
  7533                           ;TriacRelay_B1.c: 205: RB2 = 0;
  7534  0704  1106               	bcf	6,2	;volatile
  7535  0705  0008               	return
  7536  0706                     __end_of_Lights_Control:	
  7537                           
  7538                           	psect	text44
  7539  0ED8                     __ptext44:	
  7540 ;; *************** function ___awdiv *****************
  7541 ;; Defined at:
  7542 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  divisor         2    0[BANK0 ] int 
  7545 ;;  dividend        2    2[BANK0 ] int 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;  quotient        2    6[BANK0 ] int 
  7548 ;;  sign            1    5[BANK0 ] unsigned char 
  7549 ;;  counter         1    4[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  2    0[BANK0 ] int 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7559 ;;      Params:         0       4       0       0
  7560 ;;      Locals:         0       4       0       0
  7561 ;;      Temps:          1       0       0       0
  7562 ;;      Totals:         1       8       0       0
  7563 ;;Total ram usage:        9 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    2
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_setTemp_Main
  7570 ;;		_getPIR_AD
  7571 ;;		_Lights_Control
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function ___awdiv
  7577  0ED8                     ___awdiv:	
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7581  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  7582  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  7583  0EDA  01D1               	clrf	___awdiv@sign
  7584  0EDB  1FCD               	btfss	___awdiv@divisor+1,7
  7585  0EDC  2EE4               	goto	l4617
  7586  0EDD  09CC               	comf	___awdiv@divisor,f
  7587  0EDE  09CD               	comf	___awdiv@divisor+1,f
  7588  0EDF  0ACC               	incf	___awdiv@divisor,f
  7589  0EE0  1903               	skipnz
  7590  0EE1  0ACD               	incf	___awdiv@divisor+1,f
  7591  0EE2  01D1               	clrf	___awdiv@sign
  7592  0EE3  0AD1               	incf	___awdiv@sign,f
  7593  0EE4                     l4617:	
  7594  0EE4  1FCF               	btfss	___awdiv@dividend+1,7
  7595  0EE5  2EEF               	goto	l4623
  7596  0EE6  09CE               	comf	___awdiv@dividend,f
  7597  0EE7  09CF               	comf	___awdiv@dividend+1,f
  7598  0EE8  0ACE               	incf	___awdiv@dividend,f
  7599  0EE9  1903               	skipnz
  7600  0EEA  0ACF               	incf	___awdiv@dividend+1,f
  7601  0EEB  3001               	movlw	1
  7602  0EEC  00F4               	movwf	??___awdiv
  7603  0EED  0874               	movf	??___awdiv,w
  7604  0EEE  06D1               	xorwf	___awdiv@sign,f
  7605  0EEF                     l4623:	
  7606  0EEF  01D2               	clrf	___awdiv@quotient
  7607  0EF0  01D3               	clrf	___awdiv@quotient+1
  7608  0EF1  084D               	movf	___awdiv@divisor+1,w
  7609  0EF2  044C               	iorwf	___awdiv@divisor,w
  7610  0EF3  1903               	skipnz
  7611  0EF4  2F26               	goto	l4645
  7612  0EF5  01D0               	clrf	___awdiv@counter
  7613  0EF6  0AD0               	incf	___awdiv@counter,f
  7614  0EF7                     l4633:	
  7615  0EF7  1BCD               	btfsc	___awdiv@divisor+1,7
  7616  0EF8  2F05               	goto	l4635
  7617  0EF9  3001               	movlw	1
  7618  0EFA                     u5355:	
  7619  0EFA  1003               	clrc
  7620  0EFB  0DCC               	rlf	___awdiv@divisor,f
  7621  0EFC  0DCD               	rlf	___awdiv@divisor+1,f
  7622  0EFD  3EFF               	addlw	-1
  7623  0EFE  1D03               	skipz
  7624  0EFF  2EFA               	goto	u5355
  7625  0F00  3001               	movlw	1
  7626  0F01  00F4               	movwf	??___awdiv
  7627  0F02  0874               	movf	??___awdiv,w
  7628  0F03  07D0               	addwf	___awdiv@counter,f
  7629  0F04  2EF7               	goto	l4633
  7630  0F05                     l4635:	
  7631  0F05  3001               	movlw	1
  7632  0F06                     u5375:	
  7633  0F06  1003               	clrc
  7634  0F07  0DD2               	rlf	___awdiv@quotient,f
  7635  0F08  0DD3               	rlf	___awdiv@quotient+1,f
  7636  0F09  3EFF               	addlw	-1
  7637  0F0A  1D03               	skipz
  7638  0F0B  2F06               	goto	u5375
  7639  0F0C  084D               	movf	___awdiv@divisor+1,w
  7640  0F0D  024F               	subwf	___awdiv@dividend+1,w
  7641  0F0E  1D03               	skipz
  7642  0F0F  2F12               	goto	u5385
  7643  0F10  084C               	movf	___awdiv@divisor,w
  7644  0F11  024E               	subwf	___awdiv@dividend,w
  7645  0F12                     u5385:	
  7646  0F12  1C03               	skipc
  7647  0F13  2F1B               	goto	l4641
  7648  0F14  084C               	movf	___awdiv@divisor,w
  7649  0F15  02CE               	subwf	___awdiv@dividend,f
  7650  0F16  084D               	movf	___awdiv@divisor+1,w
  7651  0F17  1C03               	skipc
  7652  0F18  03CF               	decf	___awdiv@dividend+1,f
  7653  0F19  02CF               	subwf	___awdiv@dividend+1,f
  7654  0F1A  1452               	bsf	___awdiv@quotient,0
  7655  0F1B                     l4641:	
  7656  0F1B  3001               	movlw	1
  7657  0F1C                     u5395:	
  7658  0F1C  1003               	clrc
  7659  0F1D  0CCD               	rrf	___awdiv@divisor+1,f
  7660  0F1E  0CCC               	rrf	___awdiv@divisor,f
  7661  0F1F  3EFF               	addlw	-1
  7662  0F20  1D03               	skipz
  7663  0F21  2F1C               	goto	u5395
  7664  0F22  3001               	movlw	1
  7665  0F23  02D0               	subwf	___awdiv@counter,f
  7666  0F24  1D03               	btfss	3,2
  7667  0F25  2F05               	goto	l4635
  7668  0F26                     l4645:	
  7669  0F26  0851               	movf	___awdiv@sign,w
  7670  0F27  1903               	btfsc	3,2
  7671  0F28  2F2E               	goto	l4649
  7672  0F29  09D2               	comf	___awdiv@quotient,f
  7673  0F2A  09D3               	comf	___awdiv@quotient+1,f
  7674  0F2B  0AD2               	incf	___awdiv@quotient,f
  7675  0F2C  1903               	skipnz
  7676  0F2D  0AD3               	incf	___awdiv@quotient+1,f
  7677  0F2E                     l4649:	
  7678  0F2E  0853               	movf	___awdiv@quotient+1,w
  7679  0F2F  01CD               	clrf	?___awdiv+1
  7680  0F30  07CD               	addwf	?___awdiv+1,f
  7681  0F31  0852               	movf	___awdiv@quotient,w
  7682  0F32  01CC               	clrf	?___awdiv
  7683  0F33  07CC               	addwf	?___awdiv,f
  7684  0F34  0008               	return
  7685  0F35                     __end_of___awdiv:	
  7686                           
  7687                           	psect	text45
  7688  0AA5                     __ptext45:	
  7689 ;; *************** function _Lights_Initialization *****************
  7690 ;; Defined at:
  7691 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;		None
  7696 ;; Return value:  Size  Location     Type
  7697 ;;		None               void
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0, pclath, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7705 ;;      Params:         0       0       0       0
  7706 ;;      Locals:         0       0       0       0
  7707 ;;      Temps:          0       0       0       0
  7708 ;;      Totals:         0       0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    4
  7712 ;; This function calls:
  7713 ;;		_setLights_Initialization
  7714 ;; This function is called by:
  7715 ;;		_main
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _Lights_Initialization
  7721  0AA5                     _Lights_Initialization:	
  7722                           
  7723                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7724                           
  7725                           ;incstack = 0
  7726                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7727  0AA5  3001               	movlw	1
  7728  0AA6  158A  22C4         	fcall	_setLights_Initialization
  7729  0AA8  0008               	return
  7730  0AA9                     __end_of_Lights_Initialization:	
  7731                           
  7732                           	psect	text46
  7733  0AC4                     __ptext46:	
  7734 ;; *************** function _setLights_Initialization *****************
  7735 ;; Defined at:
  7736 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  lights          1    wreg     unsigned char 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  lights          1    0[BANK0 ] unsigned char 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7750 ;;      Params:         0       0       0       0
  7751 ;;      Locals:         0       1       0       0
  7752 ;;      Temps:          0       0       0       0
  7753 ;;      Totals:         0       1       0       0
  7754 ;;Total ram usage:        1 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    3
  7757 ;; This function calls:
  7758 ;;		_LightsPointSelect
  7759 ;; This function is called by:
  7760 ;;		_Lights_Initialization
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _setLights_Initialization
  7766  0AC4                     _setLights_Initialization:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7770                           ;setLights_Initialization@lights stored from wreg
  7771  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  7772  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  7773  0AC6  00CC               	movwf	setLights_Initialization@lights
  7774                           
  7775                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7776  0AC7  084C               	movf	setLights_Initialization@lights,w
  7777  0AC8  158A  22FB         	fcall	_LightsPointSelect
  7778  0ACA  0008               	return
  7779  0ACB                     __end_of_setLights_Initialization:	
  7780                           
  7781                           	psect	text47
  7782  0A8F                     __ptext47:	
  7783 ;; *************** function _LED_Main *****************
  7784 ;; Defined at:
  7785 ;;		line 47 in file "../src/LED_B1.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;		None               void
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7799 ;;      Params:         0       0       0       0
  7800 ;;      Locals:         0       0       0       0
  7801 ;;      Temps:          0       0       0       0
  7802 ;;      Totals:         0       0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    5
  7806 ;; This function calls:
  7807 ;;		_setPIRLED_Main
  7808 ;; This function is called by:
  7809 ;;		_main
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function _LED_Main
  7815  0A8F                     _LED_Main:	
  7816                           
  7817                           ;LED_B1.c: 55: setPIRLED_Main();
  7818                           
  7819                           ;incstack = 0
  7820                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7821  0A8F  118A  277D         	fcall	_setPIRLED_Main
  7822  0A91  0008               	return
  7823  0A92                     __end_of_LED_Main:	
  7824                           
  7825                           	psect	text48
  7826  077D                     __ptext48:	
  7827 ;; *************** function _setPIRLED_Main *****************
  7828 ;; Defined at:
  7829 ;;		line 263 in file "../src/LED_B1.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  count           1    3[BANK0 ] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;		None               void
  7836 ;; Registers used:
  7837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7843 ;;      Params:         0       0       0       0
  7844 ;;      Locals:         0       1       0       0
  7845 ;;      Temps:          0       1       0       0
  7846 ;;      Totals:         0       2       0       0
  7847 ;;Total ram usage:        2 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		_setLED
  7852 ;; This function is called by:
  7853 ;;		_LED_Main
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _setPIRLED_Main
  7859  077D                     _setPIRLED_Main:	
  7860                           
  7861                           ;LED_B1.c: 266: char count;
  7862                           ;LED_B1.c: 267: if (PIRLED.GO == 1) {
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7866  077D  1283               	bcf	3,5	;RP0=0, select bank0
  7867  077E  1303               	bcf	3,6	;RP1=0, select bank0
  7868  077F  1C2A               	btfss	_PIRLED,0
  7869  0780  0008               	return
  7870                           
  7871                           ;LED_B1.c: 268: PIRLED.Time++;
  7872  0781  3001               	movlw	1
  7873  0782  07AC               	addwf	_PIRLED+2,f
  7874  0783  1803               	skipnc
  7875  0784  0AAD               	incf	_PIRLED+3,f
  7876  0785  3000               	movlw	0
  7877  0786  07AD               	addwf	_PIRLED+3,f
  7878                           
  7879                           ;LED_B1.c: 269: if (PIRLED.Time >= 500 / 20) {
  7880  0787  3000               	movlw	0
  7881  0788  022D               	subwf	_PIRLED+3,w
  7882  0789  3019               	movlw	25
  7883  078A  1903               	skipnz
  7884  078B  022C               	subwf	_PIRLED+2,w
  7885  078C  1C03               	skipc
  7886  078D  0008               	return
  7887                           
  7888                           ;LED_B1.c: 270: PIRLED.Time = 0;
  7889  078E  01AC               	clrf	_PIRLED+2
  7890  078F  01AD               	clrf	_PIRLED+3
  7891                           
  7892                           ;LED_B1.c: 271: setLED(1, 0);
  7893  0790  01CC               	clrf	setLED@command
  7894  0791  3001               	movlw	1
  7895  0792  158A  2735  118A   	fcall	_setLED
  7896                           
  7897                           ;LED_B1.c: 272: setLED(2, 0);
  7898  0795  1283               	bcf	3,5	;RP0=0, select bank0
  7899  0796  1303               	bcf	3,6	;RP1=0, select bank0
  7900  0797  01CC               	clrf	setLED@command
  7901  0798  3002               	movlw	2
  7902  0799  158A  2735  118A   	fcall	_setLED
  7903                           
  7904                           ;LED_B1.c: 273: if (PIRLED.GO1 == 1) {
  7905  079C  1283               	bcf	3,5	;RP0=0, select bank0
  7906  079D  1303               	bcf	3,6	;RP1=0, select bank0
  7907  079E  1CAA               	btfss	_PIRLED,1
  7908  079F  2FA4               	goto	l4689
  7909                           
  7910                           ;LED_B1.c: 274: count = 4;
  7911  07A0  3004               	movlw	4
  7912  07A1  00CE               	movwf	??_setPIRLED_Main
  7913  07A2  084E               	movf	??_setPIRLED_Main,w
  7914  07A3  00CF               	movwf	setPIRLED_Main@count
  7915  07A4                     l4689:	
  7916                           
  7917                           ;LED_B1.c: 275: }
  7918                           ;LED_B1.c: 276: if (PIRLED.GO2 == 1) {
  7919  07A4  1D2A               	btfss	_PIRLED,2
  7920  07A5  2FAA               	goto	l4693
  7921                           
  7922                           ;LED_B1.c: 277: count = 6;
  7923  07A6  3006               	movlw	6
  7924  07A7  00CE               	movwf	??_setPIRLED_Main
  7925  07A8  084E               	movf	??_setPIRLED_Main,w
  7926  07A9  00CF               	movwf	setPIRLED_Main@count
  7927  07AA                     l4693:	
  7928                           
  7929                           ;LED_B1.c: 278: }
  7930                           ;LED_B1.c: 279: if (PIRLED.GO3 == 1) {
  7931  07AA  1DAA               	btfss	_PIRLED,3
  7932  07AB  2FB0               	goto	l4697
  7933                           
  7934                           ;LED_B1.c: 280: count = 8;
  7935  07AC  3008               	movlw	8
  7936  07AD  00CE               	movwf	??_setPIRLED_Main
  7937  07AE  084E               	movf	??_setPIRLED_Main,w
  7938  07AF  00CF               	movwf	setPIRLED_Main@count
  7939  07B0                     l4697:	
  7940                           
  7941                           ;LED_B1.c: 281: }
  7942                           ;LED_B1.c: 282: PIRLED.Count++;
  7943  07B0  3001               	movlw	1
  7944  07B1  00CE               	movwf	??_setPIRLED_Main
  7945  07B2  084E               	movf	??_setPIRLED_Main,w
  7946  07B3  07AB               	addwf	_PIRLED+1,f
  7947                           
  7948                           ;LED_B1.c: 283: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7949  07B4  082B               	movf	_PIRLED+1,w
  7950  07B5  3A01               	xorlw	1
  7951  07B6  1903               	skipnz
  7952  07B7  2FBC               	goto	l4703
  7953  07B8  082B               	movf	_PIRLED+1,w
  7954  07B9  3A02               	xorlw	2
  7955  07BA  1D03               	skipz
  7956  07BB  2FD0               	goto	l4707
  7957  07BC                     l4703:	
  7958                           
  7959                           ;LED_B1.c: 284: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7960  07BC  1003               	clrc
  7961  07BD  1E2A               	btfss	_PIRLED,4
  7962  07BE  1403               	setc
  7963  07BF  1C03               	btfss	3,0
  7964  07C0  2FC5               	goto	u5510
  7965  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  7966  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  7967  07C3  162A               	bsf	_PIRLED,4
  7968  07C4  2FC8               	goto	l4705
  7969  07C5                     u5510:	
  7970  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  7971  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  7972  07C7  122A               	bcf	_PIRLED,4
  7973  07C8                     l4705:	
  7974                           
  7975                           ;LED_B1.c: 285: setLED(2, PIRLED.status);
  7976  07C8  3000               	movlw	0
  7977  07C9  1A2A               	btfsc	_PIRLED,4
  7978  07CA  3001               	movlw	1
  7979  07CB  00CC               	movwf	setLED@command
  7980  07CC  3002               	movlw	2
  7981  07CD  158A  2735         	fcall	_setLED
  7982                           
  7983                           ;LED_B1.c: 286: } else {
  7984  07CF  0008               	return
  7985  07D0                     l4707:	
  7986                           
  7987                           ;LED_B1.c: 287: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7988  07D0  1003               	clrc
  7989  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  7990  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  7991  07D3  1E2A               	btfss	_PIRLED,4
  7992  07D4  1403               	setc
  7993  07D5  1C03               	btfss	3,0
  7994  07D6  2FDB               	goto	u5530
  7995  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  7996  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  7997  07D9  162A               	bsf	_PIRLED,4
  7998  07DA  2FDE               	goto	l4709
  7999  07DB                     u5530:	
  8000  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  8001  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  8002  07DD  122A               	bcf	_PIRLED,4
  8003  07DE                     l4709:	
  8004                           
  8005                           ;LED_B1.c: 288: setLED(1, PIRLED.status);
  8006  07DE  3000               	movlw	0
  8007  07DF  1A2A               	btfsc	_PIRLED,4
  8008  07E0  3001               	movlw	1
  8009  07E1  00CC               	movwf	setLED@command
  8010  07E2  3001               	movlw	1
  8011  07E3  158A  2735  118A   	fcall	_setLED
  8012                           
  8013                           ;LED_B1.c: 289: if (PIRLED.Count == count) {
  8014  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  8015  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  8016  07E8  082B               	movf	_PIRLED+1,w
  8017  07E9  064F               	xorwf	setPIRLED_Main@count,w
  8018  07EA  1D03               	skipz
  8019  07EB  0008               	return
  8020                           
  8021                           ;LED_B1.c: 290: PIRLED.Count = 0;
  8022  07EC  01AB               	clrf	_PIRLED+1
  8023  07ED  0008               	return
  8024  07EE                     __end_of_setPIRLED_Main:	
  8025                           
  8026                           	psect	text49
  8027  0AD2                     __ptext49:	
  8028 ;; *************** function _LED_Initialization *****************
  8029 ;; Defined at:
  8030 ;;		line 31 in file "../src/LED_B1.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;		None               void
  8037 ;; Registers used:
  8038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8044 ;;      Params:         0       0       0       0
  8045 ;;      Locals:         0       0       0       0
  8046 ;;      Temps:          0       0       0       0
  8047 ;;      Totals:         0       0       0       0
  8048 ;;Total ram usage:        0 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    5
  8051 ;; This function calls:
  8052 ;;		_setLED_Initialization
  8053 ;; This function is called by:
  8054 ;;		_main
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _LED_Initialization
  8060  0AD2                     _LED_Initialization:	
  8061                           
  8062                           ;LED_B1.c: 33: setLED_Initialization(1);
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8066  0AD2  3001               	movlw	1
  8067  0AD3  118A  27EE  158A   	fcall	_setLED_Initialization
  8068                           
  8069                           ;LED_B1.c: 36: setLED_Initialization(2);
  8070  0AD6  3002               	movlw	2
  8071  0AD7  118A  27EE         	fcall	_setLED_Initialization
  8072  0AD9  0008               	return
  8073  0ADA                     __end_of_LED_Initialization:	
  8074                           
  8075                           	psect	text50
  8076  07EE                     __ptext50:	
  8077 ;; *************** function _setLED_Initialization *****************
  8078 ;; Defined at:
  8079 ;;		line 74 in file "../src/LED_B1.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;  led             1    wreg     unsigned char 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  led             1    2[BANK0 ] unsigned char 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;		None               void
  8086 ;; Registers used:
  8087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8093 ;;      Params:         0       0       0       0
  8094 ;;      Locals:         0       1       0       0
  8095 ;;      Temps:          0       0       0       0
  8096 ;;      Totals:         0       1       0       0
  8097 ;;Total ram usage:        1 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    4
  8100 ;; This function calls:
  8101 ;;		_LedPointSelect
  8102 ;;		_setLED
  8103 ;; This function is called by:
  8104 ;;		_LED_Initialization
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           
  8109                           ;psect for function _setLED_Initialization
  8110  07EE                     _setLED_Initialization:	
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8114                           ;setLED_Initialization@led stored from wreg
  8115  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  8116  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  8117  07F0  00CE               	movwf	setLED_Initialization@led
  8118                           
  8119                           ;LED_B1.c: 75: LedPointSelect(led);
  8120  07F1  084E               	movf	setLED_Initialization@led,w
  8121  07F2  158A  2394  118A   	fcall	_LedPointSelect
  8122                           
  8123                           ;LED_B1.c: 76: LED->Enable = 1;
  8124  07F5  0876               	movf	_LED,w
  8125  07F6  0084               	movwf	4
  8126  07F7  1383               	bcf	3,7	;select IRP bank0
  8127  07F8  1400               	bsf	0,0
  8128                           
  8129                           ;LED_B1.c: 77: setLED(led, 0);
  8130  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  8131  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  8132  07FB  01CC               	clrf	setLED@command
  8133  07FC  084E               	movf	setLED_Initialization@led,w
  8134  07FD  158A  2735         	fcall	_setLED
  8135  07FF  0008               	return
  8136  0800                     __end_of_setLED_Initialization:	
  8137                           
  8138                           	psect	text51
  8139  0539                     __ptext51:	
  8140 ;; *************** function _Exception_Main *****************
  8141 ;; Defined at:
  8142 ;;		line 499 in file "../src/Main_B1.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  i               2   12[BANK0 ] int 
  8147 ;;  i               2   10[BANK0 ] int 
  8148 ;;  error           1   14[BANK0 ] unsigned char 
  8149 ;;  status          1    9[BANK0 ] unsigned char 
  8150 ;;  count           1    8[BANK0 ] unsigned char 
  8151 ;;  lights          1    7[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;		None               void
  8154 ;; Registers used:
  8155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8161 ;;      Params:         0       0       0       0
  8162 ;;      Locals:         0       8       0       0
  8163 ;;      Temps:          0       1       0       0
  8164 ;;      Totals:         0       9       0       0
  8165 ;;Total ram usage:        9 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    5
  8168 ;; This function calls:
  8169 ;;		_getAll_Lights_Line
  8170 ;;		_getLights_Status
  8171 ;;		_getMain_All_Error_Status
  8172 ;;		_getMain_All_LightsStatus
  8173 ;;		_setLED
  8174 ;;		_setLights_SwOff
  8175 ;;		_setLights_SwOn
  8176 ;; This function is called by:
  8177 ;;		_main
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _Exception_Main
  8183  0539                     _Exception_Main:	
  8184                           
  8185                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8189  0539  3000               	movlw	0
  8190  053A  158A  25BC  118A   	fcall	_getMain_All_Error_Status
  8191  053D  1283               	bcf	3,5	;RP0=0, select bank0
  8192  053E  1303               	bcf	3,6	;RP1=0, select bank0
  8193  053F  00D2               	movwf	??_Exception_Main
  8194  0540  0852               	movf	??_Exception_Main,w
  8195  0541  00DA               	movwf	Exception_Main@error
  8196                           
  8197                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8198  0542  01D3               	clrf	Exception_Main@lights
  8199  0543  01D4               	clrf	Exception_Main@count
  8200  0544  0AD4               	incf	Exception_Main@count,f
  8201                           
  8202                           ;Main_B1.c: 502: char status = 0;
  8203  0545  01D5               	clrf	Exception_Main@status
  8204                           
  8205                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8206  0546  1DA7               	btfss	_myMain+2,3
  8207  0547  2D54               	goto	l5401
  8208                           
  8209                           ;Main_B1.c: 505: if (error == 0) {
  8210  0548  08DA               	movf	Exception_Main@error,f
  8211  0549  1D03               	skipz
  8212  054A  0008               	return
  8213                           
  8214                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8215  054B  11A7               	bcf	_myMain+2,3
  8216                           
  8217                           ;Main_B1.c: 512: setLED(error, 110);
  8218  054C  306E               	movlw	110
  8219  054D  00D2               	movwf	??_Exception_Main
  8220  054E  0852               	movf	??_Exception_Main,w
  8221  054F  00CC               	movwf	setLED@command
  8222  0550  085A               	movf	Exception_Main@error,w
  8223  0551  158A  2735         	fcall	_setLED
  8224                           
  8225                           ;Main_B1.c: 523: }
  8226                           ;Main_B1.c: 524: } else {
  8227  0553  0008               	return
  8228  0554                     l5401:	
  8229                           
  8230                           ;Main_B1.c: 525: if (error != 0) {
  8231  0554  1283               	bcf	3,5	;RP0=0, select bank0
  8232  0555  1303               	bcf	3,6	;RP1=0, select bank0
  8233  0556  085A               	movf	Exception_Main@error,w
  8234  0557  1903               	btfsc	3,2
  8235  0558  0008               	return
  8236                           
  8237                           ;Main_B1.c: 526: myMain.Error_Run = 1;
  8238  0559  15A7               	bsf	_myMain+2,3
  8239                           
  8240                           ;Main_B1.c: 590: setLED(error, 111);
  8241  055A  306F               	movlw	111
  8242  055B  00D2               	movwf	??_Exception_Main
  8243  055C  0852               	movf	??_Exception_Main,w
  8244  055D  00CC               	movwf	setLED@command
  8245  055E  085A               	movf	Exception_Main@error,w
  8246  055F  158A  2735  118A   	fcall	_setLED
  8247                           
  8248                           ;Main_B1.c: 592: switch (error) {
  8249  0562  2DEC               	goto	l5435
  8250  0563                     l5407:	
  8251                           ;Main_B1.c: 593: case 1:
  8252                           
  8253                           
  8254                           ;Main_B1.c: 594: for (int i = 0; i < count; i++) {
  8255  0563  1283               	bcf	3,5	;RP0=0, select bank0
  8256  0564  1303               	bcf	3,6	;RP1=0, select bank0
  8257  0565  01D6               	clrf	Exception_Main@i
  8258  0566  01D7               	clrf	Exception_Main@i+1
  8259  0567                     l5415:	
  8260  0567  0857               	movf	Exception_Main@i+1,w
  8261  0568  3A80               	xorlw	128
  8262  0569  00D2               	movwf	??_Exception_Main
  8263  056A  3080               	movlw	128
  8264  056B  0252               	subwf	??_Exception_Main,w
  8265  056C  1D03               	skipz
  8266  056D  2D70               	goto	u7075
  8267  056E  0854               	movf	Exception_Main@count,w
  8268  056F  0256               	subwf	Exception_Main@i,w
  8269  0570                     u7075:	
  8270  0570  1803               	btfsc	3,0
  8271  0571  2D93               	goto	u7070
  8272                           
  8273                           ;Main_B1.c: 595: if (getLights_Status(i + 1) == 1) {
  8274  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8275  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8276  0574  0856               	movf	Exception_Main@i,w
  8277  0575  3E01               	addlw	1
  8278  0576  158A  2372  118A   	fcall	_getLights_Status
  8279  0579  3A01               	xorlw	1
  8280  057A  1D03               	skipz
  8281  057B  2D8A               	goto	l5413
  8282                           
  8283                           ;Main_B1.c: 597: setLights_SwOn(i + 1);
  8284  057C  1283               	bcf	3,5	;RP0=0, select bank0
  8285  057D  1303               	bcf	3,6	;RP1=0, select bank0
  8286  057E  0856               	movf	Exception_Main@i,w
  8287  057F  3E01               	addlw	1
  8288  0580  158A  24DA  118A   	fcall	_setLights_SwOn
  8289                           
  8290                           ;Main_B1.c: 598: setLights_SwOff(i + 1);
  8291  0583  1283               	bcf	3,5	;RP0=0, select bank0
  8292  0584  1303               	bcf	3,6	;RP1=0, select bank0
  8293  0585  0856               	movf	Exception_Main@i,w
  8294  0586  3E01               	addlw	1
  8295  0587  158A  2415  118A   	fcall	_setLights_SwOff
  8296  058A                     l5413:	
  8297  058A  3001               	movlw	1
  8298  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8299  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8300  058D  07D6               	addwf	Exception_Main@i,f
  8301  058E  1803               	skipnc
  8302  058F  0AD7               	incf	Exception_Main@i+1,f
  8303  0590  3000               	movlw	0
  8304  0591  07D7               	addwf	Exception_Main@i+1,f
  8305  0592  2D67               	goto	l5415
  8306  0593                     u7070:	
  8307  0593  1283               	bcf	3,5	;RP0=0, select bank0
  8308  0594  1303               	bcf	3,6	;RP1=0, select bank0
  8309  0595  0008               	return
  8310  0596                     l5417:	
  8311                           ;Main_B1.c: 602: case 2:
  8312                           
  8313                           ;Main_B1.c: 599: }
  8314                           ;Main_B1.c: 600: }
  8315                           ;Main_B1.c: 601: break;
  8316                           
  8317                           
  8318                           ;Main_B1.c: 603: if (getMain_All_LightsStatus() == 1) {
  8319  0596  158A  22F2  118A   	fcall	_getMain_All_LightsStatus
  8320                           
  8321                           ;Main_B1.c: 605: }
  8322                           ;Main_B1.c: 607: for (int i = 0; i < count; i++) {
  8323                           
  8324                           ;Main_B1.c: 604: ;;
  8325  0599  1283               	bcf	3,5	;RP0=0, select bank0
  8326  059A  1303               	bcf	3,6	;RP1=0, select bank0
  8327  059B  01D8               	clrf	Exception_Main@i_2126
  8328  059C  01D9               	clrf	Exception_Main@i_2126+1
  8329  059D                     l5427:	
  8330  059D  0859               	movf	Exception_Main@i_2126+1,w
  8331  059E  3A80               	xorlw	128
  8332  059F  00D2               	movwf	??_Exception_Main
  8333  05A0  3080               	movlw	128
  8334  05A1  0252               	subwf	??_Exception_Main,w
  8335  05A2  1D03               	skipz
  8336  05A3  2DA6               	goto	u7095
  8337  05A4  0854               	movf	Exception_Main@count,w
  8338  05A5  0258               	subwf	Exception_Main@i_2126,w
  8339  05A6                     u7095:	
  8340  05A6  1803               	btfsc	3,0
  8341  05A7  2DC9               	goto	u7090
  8342                           
  8343                           ;Main_B1.c: 608: if (getLights_Status(i + 1) == 1) {
  8344  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  8345  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  8346  05AA  0858               	movf	Exception_Main@i_2126,w
  8347  05AB  3E01               	addlw	1
  8348  05AC  158A  2372  118A   	fcall	_getLights_Status
  8349  05AF  3A01               	xorlw	1
  8350  05B0  1D03               	skipz
  8351  05B1  2DC0               	goto	l5425
  8352                           
  8353                           ;Main_B1.c: 609: setLights_SwOn(i + 1);
  8354  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  8355  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  8356  05B4  0858               	movf	Exception_Main@i_2126,w
  8357  05B5  3E01               	addlw	1
  8358  05B6  158A  24DA  118A   	fcall	_setLights_SwOn
  8359                           
  8360                           ;Main_B1.c: 610: setLights_SwOff(i + 1);
  8361  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  8362  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  8363  05BB  0858               	movf	Exception_Main@i_2126,w
  8364  05BC  3E01               	addlw	1
  8365  05BD  158A  2415  118A   	fcall	_setLights_SwOff
  8366  05C0                     l5425:	
  8367  05C0  3001               	movlw	1
  8368  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  8369  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  8370  05C3  07D8               	addwf	Exception_Main@i_2126,f
  8371  05C4  1803               	skipnc
  8372  05C5  0AD9               	incf	Exception_Main@i_2126+1,f
  8373  05C6  3000               	movlw	0
  8374  05C7  07D9               	addwf	Exception_Main@i_2126+1,f
  8375  05C8  2D9D               	goto	l5427
  8376  05C9                     u7090:	
  8377  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  8378  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  8379  05CB  0008               	return
  8380  05CC                     l5429:	
  8381                           ;Main_B1.c: 614: case 3:
  8382                           
  8383                           ;Main_B1.c: 611: }
  8384                           ;Main_B1.c: 612: }
  8385                           ;Main_B1.c: 613: break;
  8386                           
  8387                           
  8388                           ;Main_B1.c: 615: status = getAll_Lights_Line();
  8389  05CC  158A  2361  118A   	fcall	_getAll_Lights_Line
  8390  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  8391  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  8392  05D1  00D2               	movwf	??_Exception_Main
  8393  05D2  0852               	movf	??_Exception_Main,w
  8394  05D3  00D5               	movwf	Exception_Main@status
  8395                           
  8396                           ;Main_B1.c: 617: if (getLights_Status(status) == 1) {
  8397  05D4  0855               	movf	Exception_Main@status,w
  8398  05D5  158A  2372  118A   	fcall	_getLights_Status
  8399  05D8  3A01               	xorlw	1
  8400  05D9  1903               	btfsc	3,2
  8401  05DA  2DDE               	goto	l5431
  8402  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  8403  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  8404  05DD  0008               	return
  8405  05DE                     l5431:	
  8406                           
  8407                           ;Main_B1.c: 618: setLights_SwOn(status);
  8408  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  8409  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  8410  05E0  0855               	movf	Exception_Main@status,w
  8411  05E1  158A  24DA  118A   	fcall	_setLights_SwOn
  8412                           
  8413                           ;Main_B1.c: 619: setLights_SwOff(status);
  8414  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  8415  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  8416  05E6  0855               	movf	Exception_Main@status,w
  8417  05E7  158A  2415         	fcall	_setLights_SwOff
  8418  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  8419  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  8420  05EB  0008               	return
  8421  05EC                     l5435:	
  8422                           ;Main_B1.c: 625: }
  8423                           
  8424                           ;Main_B1.c: 621: }
  8425                           ;Main_B1.c: 623: ;;
  8426                           ;Main_B1.c: 624: break;
  8427                           
  8428  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  8429  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  8430  05EE  085A               	movf	Exception_Main@error,w
  8431                           
  8432                           ; Switch size 1, requested type "space"
  8433                           ; Number of cases is 3, Range of values is 1 to 3
  8434                           ; switch strategies available:
  8435                           ; Name         Instructions Cycles
  8436                           ; simple_byte           10     6 (average)
  8437                           ; direct_byte           16    10 (fixed)
  8438                           ; jumptable            263     9 (fixed)
  8439                           ;	Chosen strategy is simple_byte
  8440  05EF  3A01               	xorlw	1	; case 1
  8441  05F0  1903               	skipnz
  8442  05F1  2D63               	goto	l5407
  8443  05F2  3A03               	xorlw	3	; case 2
  8444  05F3  1903               	skipnz
  8445  05F4  2D96               	goto	l5417
  8446  05F5  3A01               	xorlw	1	; case 3
  8447  05F6  1903               	skipnz
  8448  05F7  2DCC               	goto	l5429
  8449  05F8  2DFA               	goto	l639
  8450  05F9  0008               	return
  8451  05FA                     l639:	
  8452  05FA  0008               	return
  8453  05FB                     __end_of_Exception_Main:	
  8454                           
  8455                           	psect	text52
  8456  0CDA                     __ptext52:	
  8457 ;; *************** function _setLights_SwOn *****************
  8458 ;; Defined at:
  8459 ;;		line 361 in file "../src/TriacRelay_B1.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  sw              1    wreg     unsigned char 
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;  sw              1    3[BANK0 ] unsigned char 
  8464 ;; Return value:  Size  Location     Type
  8465 ;;		None               void
  8466 ;; Registers used:
  8467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8473 ;;      Params:         0       0       0       0
  8474 ;;      Locals:         0       1       0       0
  8475 ;;      Temps:          0       0       0       0
  8476 ;;      Totals:         0       1       0       0
  8477 ;;Total ram usage:        1 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    4
  8480 ;; This function calls:
  8481 ;;		_LightsPointSelect
  8482 ;;		_getLights_Status
  8483 ;;		_setLights_Trigger
  8484 ;; This function is called by:
  8485 ;;		_Exception_Main
  8486 ;;		_PIR_Main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _setLights_SwOn
  8492  0CDA                     _setLights_SwOn:	
  8493                           
  8494                           ;incstack = 0
  8495                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8496                           ;setLights_SwOn@sw stored from wreg
  8497  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  8498  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  8499  0CDC  00CF               	movwf	setLights_SwOn@sw
  8500                           
  8501                           ;TriacRelay_B1.c: 363: LightsPointSelect(sw);
  8502  0CDD  084F               	movf	setLights_SwOn@sw,w
  8503  0CDE  158A  22FB  158A   	fcall	_LightsPointSelect
  8504                           
  8505                           ;TriacRelay_B1.c: 365: Lights->SwFlag = 1;
  8506  0CE1  0A78               	incf	_Lights,w
  8507  0CE2  0084               	movwf	4
  8508  0CE3  1383               	bcf	3,7	;select IRP bank0
  8509  0CE4  1500               	bsf	0,2
  8510                           
  8511                           ;TriacRelay_B1.c: 366: if (getLights_Status(sw) == 0) {
  8512  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  8513  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  8514  0CE7  084F               	movf	setLights_SwOn@sw,w
  8515  0CE8  158A  2372  158A   	fcall	_getLights_Status
  8516  0CEB  3800               	iorlw	0
  8517  0CEC  1D03               	skipz
  8518  0CED  2CFA               	goto	l4735
  8519                           
  8520                           ;TriacRelay_B1.c: 367: Lights->SwStatus = 1;
  8521  0CEE  0A78               	incf	_Lights,w
  8522  0CEF  0084               	movwf	4
  8523  0CF0  1383               	bcf	3,7	;select IRP bank0
  8524  0CF1  1580               	bsf	0,3
  8525                           
  8526                           ;TriacRelay_B1.c: 368: setLights_Trigger(sw, 1);
  8527  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  8528  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  8529  0CF4  01CC               	clrf	setLights_Trigger@command
  8530  0CF5  0ACC               	incf	setLights_Trigger@command,f
  8531  0CF6  084F               	movf	setLights_SwOn@sw,w
  8532  0CF7  158A  2463         	fcall	_setLights_Trigger
  8533                           
  8534                           ;TriacRelay_B1.c: 369: } else {
  8535  0CF9  0008               	return
  8536  0CFA                     l4735:	
  8537                           
  8538                           ;TriacRelay_B1.c: 370: Lights->SwStatus = 0;
  8539  0CFA  0A78               	incf	_Lights,w
  8540  0CFB  0084               	movwf	4
  8541  0CFC  1383               	bcf	3,7	;select IRP bank0
  8542  0CFD  1180               	bcf	0,3
  8543  0CFE  0008               	return
  8544  0CFF                     __end_of_setLights_SwOn:	
  8545                           
  8546                           	psect	text53
  8547  0B72                     __ptext53:	
  8548 ;; *************** function _getLights_Status *****************
  8549 ;; Defined at:
  8550 ;;		line 225 in file "../src/TriacRelay_B1.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  lights          1    wreg     unsigned char 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  lights          1    0[BANK0 ] unsigned char 
  8555 ;;  status          1    1[BANK0 ] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      unsigned char 
  8558 ;; Registers used:
  8559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8565 ;;      Params:         0       0       0       0
  8566 ;;      Locals:         0       2       0       0
  8567 ;;      Temps:          0       0       0       0
  8568 ;;      Totals:         0       2       0       0
  8569 ;;Total ram usage:        2 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    3
  8572 ;; This function calls:
  8573 ;;		_LightsPointSelect
  8574 ;; This function is called by:
  8575 ;;		_Exception_Main
  8576 ;;		_PIR_Main
  8577 ;;		_setLights_SwOn
  8578 ;;		_setMain_Exception
  8579 ;;		_setLights_ErrorClose
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _getLights_Status
  8585  0B72                     _getLights_Status:	
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8589                           ;getLights_Status@lights stored from wreg
  8590  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  8591  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  8592  0B74  00CC               	movwf	getLights_Status@lights
  8593                           
  8594                           ;TriacRelay_B1.c: 226: LightsPointSelect(lights);
  8595  0B75  084C               	movf	getLights_Status@lights,w
  8596  0B76  158A  22FB         	fcall	_LightsPointSelect
  8597                           
  8598                           ;TriacRelay_B1.c: 227: char status = Lights->Status == 1 ? 1 : 0;
  8599  0B78  0878               	movf	_Lights,w
  8600  0B79  0084               	movwf	4
  8601  0B7A  3000               	movlw	0
  8602  0B7B  1383               	bcf	3,7	;select IRP bank0
  8603  0B7C  1900               	btfsc	0,2
  8604  0B7D  3001               	movlw	1
  8605  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  8606  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  8607  0B80  00CD               	movwf	getLights_Status@status
  8608                           
  8609                           ;TriacRelay_B1.c: 228: return status;
  8610  0B81  084D               	movf	getLights_Status@status,w
  8611  0B82  0008               	return
  8612  0B83                     __end_of_getLights_Status:	
  8613                           
  8614                           	psect	text54
  8615  0C15                     __ptext54:	
  8616 ;; *************** function _setLights_SwOff *****************
  8617 ;; Defined at:
  8618 ;;		line 374 in file "../src/TriacRelay_B1.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;  sw              1    wreg     unsigned char 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  sw              1    3[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;		None               void
  8625 ;; Registers used:
  8626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8632 ;;      Params:         0       0       0       0
  8633 ;;      Locals:         0       1       0       0
  8634 ;;      Temps:          0       0       0       0
  8635 ;;      Totals:         0       1       0       0
  8636 ;;Total ram usage:        1 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		_LightsPointSelect
  8641 ;;		_setLights_Trigger
  8642 ;; This function is called by:
  8643 ;;		_Exception_Main
  8644 ;;		_PIR_Main
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function _setLights_SwOff
  8650  0C15                     _setLights_SwOff:	
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8654                           ;setLights_SwOff@sw stored from wreg
  8655  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  8656  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  8657  0C17  00CF               	movwf	setLights_SwOff@sw
  8658                           
  8659                           ;TriacRelay_B1.c: 375: LightsPointSelect(sw);
  8660  0C18  084F               	movf	setLights_SwOff@sw,w
  8661  0C19  158A  22FB  158A   	fcall	_LightsPointSelect
  8662                           
  8663                           ;TriacRelay_B1.c: 377: if (Lights->SwFlag == 1) {
  8664  0C1C  0A78               	incf	_Lights,w
  8665  0C1D  0084               	movwf	4
  8666  0C1E  1383               	bcf	3,7	;select IRP bank0
  8667  0C1F  1D00               	btfss	0,2
  8668  0C20  0008               	return
  8669                           
  8670                           ;TriacRelay_B1.c: 378: Lights->SwFlag = 0;
  8671  0C21  0A78               	incf	_Lights,w
  8672  0C22  0084               	movwf	4
  8673  0C23  1100               	bcf	0,2
  8674                           
  8675                           ;TriacRelay_B1.c: 379: if (Lights->SwStatus == 0) {
  8676  0C24  0A78               	incf	_Lights,w
  8677  0C25  0084               	movwf	4
  8678  0C26  1980               	btfsc	0,3
  8679  0C27  0008               	return
  8680                           
  8681                           ;TriacRelay_B1.c: 380: setLights_Trigger(sw, 0);
  8682  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  8683  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  8684  0C2A  01CC               	clrf	setLights_Trigger@command
  8685  0C2B  084F               	movf	setLights_SwOff@sw,w
  8686  0C2C  158A  2463         	fcall	_setLights_Trigger
  8687  0C2E  0008               	return
  8688  0C2F                     __end_of_setLights_SwOff:	
  8689                           
  8690                           	psect	text55
  8691  0C63                     __ptext55:	
  8692 ;; *************** function _setLights_Trigger *****************
  8693 ;; Defined at:
  8694 ;;		line 232 in file "../src/TriacRelay_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  lights          1    wreg     unsigned char 
  8697 ;;  command         1    0[BANK0 ] unsigned char 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  lights          1    2[BANK0 ] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8709 ;;      Params:         0       1       0       0
  8710 ;;      Locals:         0       1       0       0
  8711 ;;      Temps:          0       1       0       0
  8712 ;;      Totals:         0       3       0       0
  8713 ;;Total ram usage:        3 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    3
  8716 ;; This function calls:
  8717 ;;		_LightsPointSelect
  8718 ;; This function is called by:
  8719 ;;		_setLights_SwOn
  8720 ;;		_setLights_SwOff
  8721 ;;		_setMain_Exception
  8722 ;;		_setLights_ErrorClose
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _setLights_Trigger
  8728  0C63                     _setLights_Trigger:	
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8732                           ;setLights_Trigger@lights stored from wreg
  8733  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  8734  0C64  1303               	bcf	3,6	;RP1=0, select bank0
  8735  0C65  00CE               	movwf	setLights_Trigger@lights
  8736                           
  8737                           ;TriacRelay_B1.c: 233: LightsPointSelect(lights);
  8738  0C66  084E               	movf	setLights_Trigger@lights,w
  8739  0C67  158A  22FB         	fcall	_LightsPointSelect
  8740                           
  8741                           ;TriacRelay_B1.c: 234: Lights->Trigger = 1;
  8742  0C69  0878               	movf	_Lights,w
  8743  0C6A  0084               	movwf	4
  8744  0C6B  1383               	bcf	3,7	;select IRP bank0
  8745  0C6C  1580               	bsf	0,3
  8746                           
  8747                           ;TriacRelay_B1.c: 235: Lights->Switch = command == 1 ? 1 : 0;
  8748  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  8749  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  8750  0C6F  084C               	movf	setLights_Trigger@command,w
  8751  0C70  3A01               	xorlw	1
  8752  0C71  3000               	movlw	0
  8753  0C72  1903               	skipnz
  8754  0C73  3001               	movlw	1
  8755  0C74  00CD               	movwf	??_setLights_Trigger
  8756  0C75  0878               	movf	_Lights,w
  8757  0C76  0084               	movwf	4
  8758  0C77  0ECD               	swapf	??_setLights_Trigger,f
  8759  0C78  0800               	movf	0,w
  8760  0C79  064D               	xorwf	??_setLights_Trigger,w
  8761  0C7A  39EF               	andlw	-17
  8762  0C7B  064D               	xorwf	??_setLights_Trigger,w
  8763  0C7C  0080               	movwf	0
  8764  0C7D  0008               	return
  8765  0C7E                     __end_of_setLights_Trigger:	
  8766                           
  8767                           	psect	text56
  8768  0F35                     __ptext56:	
  8769 ;; *************** function _setLED *****************
  8770 ;; Defined at:
  8771 ;;		line 81 in file "../src/LED_B1.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;  led             1    wreg     unsigned char 
  8774 ;;  command         1    0[BANK0 ] unsigned char 
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  led             1    1[BANK0 ] unsigned char 
  8777 ;; Return value:  Size  Location     Type
  8778 ;;		None               void
  8779 ;; Registers used:
  8780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8786 ;;      Params:         0       1       0       0
  8787 ;;      Locals:         0       1       0       0
  8788 ;;      Temps:          0       0       0       0
  8789 ;;      Totals:         0       2       0       0
  8790 ;;Total ram usage:        2 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:    3
  8793 ;; This function calls:
  8794 ;;		_LedPointSelect
  8795 ;; This function is called by:
  8796 ;;		_setLED_Initialization
  8797 ;;		_setPIRLED_Main
  8798 ;;		_Exception_Main
  8799 ;;		_PIR_Main
  8800 ;;		_setLights
  8801 ;;		_setMain_Exception
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           
  8806                           ;psect for function _setLED
  8807  0F35                     _setLED:	
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8811                           ;setLED@led stored from wreg
  8812  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8813  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8814  0F37  00CD               	movwf	setLED@led
  8815                           
  8816                           ;LED_B1.c: 82: LedPointSelect(led);
  8817  0F38  084D               	movf	setLED@led,w
  8818  0F39  158A  2394  158A   	fcall	_LedPointSelect
  8819                           
  8820                           ;LED_B1.c: 83: if (command == 0) {
  8821  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  8822  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  8823  0F3E  08CC               	movf	setLED@command,f
  8824  0F3F  1D03               	skipz
  8825  0F40  2F4A               	goto	l4465
  8826                           
  8827                           ;LED_B1.c: 85: if (led == 1) {
  8828  0F41  084D               	movf	setLED@led,w
  8829  0F42  3A01               	xorlw	1
  8830  0F43  1D03               	skipz
  8831  0F44  2F46               	goto	l4461
  8832                           
  8833                           ;LED_B1.c: 89: RA6 = 1;
  8834  0F45  1705               	bsf	5,6	;volatile
  8835  0F46                     l4461:	
  8836                           
  8837                           ;LED_B1.c: 91: }
  8838                           ;LED_B1.c: 94: if (led == 2) {
  8839  0F46  084D               	movf	setLED@led,w
  8840  0F47  3A02               	xorlw	2
  8841  0F48  1903               	btfsc	3,2
  8842                           
  8843                           ;LED_B1.c: 98: RA7 = 1;
  8844  0F49  1785               	bsf	5,7	;volatile
  8845  0F4A                     l4465:	
  8846                           
  8847                           ;LED_B1.c: 100: }
  8848                           ;LED_B1.c: 120: }
  8849                           ;LED_B1.c: 121: if (command == 1) {
  8850  0F4A  084C               	movf	setLED@command,w
  8851  0F4B  3A01               	xorlw	1
  8852  0F4C  1D03               	skipz
  8853  0F4D  2F57               	goto	l4475
  8854                           
  8855                           ;LED_B1.c: 123: if (led == 1) {
  8856  0F4E  084D               	movf	setLED@led,w
  8857  0F4F  3A01               	xorlw	1
  8858  0F50  1D03               	skipz
  8859  0F51  2F53               	goto	l4471
  8860                           
  8861                           ;LED_B1.c: 127: RA6 = 0;
  8862  0F52  1305               	bcf	5,6	;volatile
  8863  0F53                     l4471:	
  8864                           
  8865                           ;LED_B1.c: 129: }
  8866                           ;LED_B1.c: 132: if (led == 2) {
  8867  0F53  084D               	movf	setLED@led,w
  8868  0F54  3A02               	xorlw	2
  8869  0F55  1903               	btfsc	3,2
  8870                           
  8871                           ;LED_B1.c: 136: RA7 = 0;
  8872  0F56  1385               	bcf	5,7	;volatile
  8873  0F57                     l4475:	
  8874                           
  8875                           ;LED_B1.c: 138: }
  8876                           ;LED_B1.c: 158: }
  8877                           ;LED_B1.c: 159: if (command == 10) {
  8878  0F57  084C               	movf	setLED@command,w
  8879  0F58  3A0A               	xorlw	10
  8880  0F59  1D03               	skipz
  8881  0F5A  2F6E               	goto	l4489
  8882                           
  8883                           ;LED_B1.c: 160: LED->GO = 0;
  8884  0F5B  0876               	movf	_LED,w
  8885  0F5C  0084               	movwf	4
  8886  0F5D  1383               	bcf	3,7	;select IRP bank0
  8887  0F5E  1080               	bcf	0,1
  8888                           
  8889                           ;LED_B1.c: 161: LED->Time = 0;
  8890  0F5F  0A76               	incf	_LED,w
  8891  0F60  0084               	movwf	4
  8892  0F61  0180               	clrf	0
  8893  0F62  0A84               	incf	4,f
  8894  0F63  0180               	clrf	0
  8895                           
  8896                           ;LED_B1.c: 163: if (led == 1) {
  8897  0F64  084D               	movf	setLED@led,w
  8898  0F65  3A01               	xorlw	1
  8899  0F66  1D03               	skipz
  8900  0F67  2F6A               	goto	l4485
  8901                           
  8902                           ;LED_B1.c: 167: RA6 = 1;
  8903  0F68  1705               	bsf	5,6	;volatile
  8904                           
  8905                           ;LED_B1.c: 169: }
  8906  0F69  2F6E               	goto	l4489
  8907  0F6A                     l4485:	
  8908                           
  8909                           ;LED_B1.c: 172: else if (led == 2) {
  8910  0F6A  084D               	movf	setLED@led,w
  8911  0F6B  3A02               	xorlw	2
  8912  0F6C  1903               	btfsc	3,2
  8913                           
  8914                           ;LED_B1.c: 176: RA7 = 1;
  8915  0F6D  1785               	bsf	5,7	;volatile
  8916  0F6E                     l4489:	
  8917                           
  8918                           ;LED_B1.c: 178: }
  8919                           ;LED_B1.c: 198: }
  8920                           ;LED_B1.c: 199: if (command == 11) {
  8921  0F6E  084C               	movf	setLED@command,w
  8922  0F6F  3A0B               	xorlw	11
  8923  0F70  1D03               	skipz
  8924  0F71  2F76               	goto	l4493
  8925                           
  8926                           ;LED_B1.c: 200: LED->GO = 1;
  8927  0F72  0876               	movf	_LED,w
  8928  0F73  0084               	movwf	4
  8929  0F74  1383               	bcf	3,7	;select IRP bank0
  8930  0F75  1480               	bsf	0,1
  8931  0F76                     l4493:	
  8932                           
  8933                           ;LED_B1.c: 201: }
  8934                           ;LED_B1.c: 205: if (command == 111) {
  8935  0F76  084C               	movf	setLED@command,w
  8936  0F77  3A6F               	xorlw	111
  8937  0F78  1D03               	skipz
  8938  0F79  2F94               	goto	l4519
  8939                           
  8940                           ;LED_B1.c: 206: PIRLED.Count = 0;
  8941  0F7A  01AB               	clrf	_PIRLED+1
  8942                           
  8943                           ;LED_B1.c: 207: PIRLED.Time = 0;
  8944  0F7B  01AC               	clrf	_PIRLED+2
  8945  0F7C  01AD               	clrf	_PIRLED+3
  8946                           
  8947                           ;LED_B1.c: 208: PIRLED.status = 0;
  8948  0F7D  122A               	bcf	_PIRLED,4
  8949                           
  8950                           ;LED_B1.c: 209: PIRLED.GO = 1;
  8951  0F7E  142A               	bsf	_PIRLED,0
  8952                           
  8953                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  8954  0F7F  10AA               	bcf	_PIRLED,1
  8955                           
  8956                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  8957  0F80  112A               	bcf	_PIRLED,2
  8958                           
  8959                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  8960  0F81  11AA               	bcf	_PIRLED,3
  8961                           
  8962                           ;LED_B1.c: 213: if (led == 1) {
  8963  0F82  084D               	movf	setLED@led,w
  8964  0F83  3A01               	xorlw	1
  8965  0F84  1D03               	skipz
  8966  0F85  2F88               	goto	l4511
  8967                           
  8968                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  8969  0F86  14AA               	bsf	_PIRLED,1
  8970                           
  8971                           ;LED_B1.c: 215: } else if (led == 2) {
  8972  0F87  0008               	return
  8973  0F88                     l4511:	
  8974  0F88  084D               	movf	setLED@led,w
  8975  0F89  3A02               	xorlw	2
  8976  0F8A  1D03               	skipz
  8977  0F8B  2F8E               	goto	l4515
  8978                           
  8979                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  8980  0F8C  152A               	bsf	_PIRLED,2
  8981                           
  8982                           ;LED_B1.c: 217: } else if (led == 3) {
  8983  0F8D  0008               	return
  8984  0F8E                     l4515:	
  8985  0F8E  084D               	movf	setLED@led,w
  8986  0F8F  3A03               	xorlw	3
  8987  0F90  1D03               	skipz
  8988  0F91  0008               	return
  8989                           
  8990                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  8991  0F92  15AA               	bsf	_PIRLED,3
  8992                           
  8993                           ;LED_B1.c: 219: }
  8994                           ;LED_B1.c: 220: } else if (command == 110) {
  8995  0F93  0008               	return
  8996  0F94                     l4519:	
  8997  0F94  084C               	movf	setLED@command,w
  8998  0F95  3A6E               	xorlw	110
  8999  0F96  1D03               	skipz
  9000  0F97  0008               	return
  9001                           
  9002                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9003  0F98  102A               	bcf	_PIRLED,0
  9004  0F99  0008               	return
  9005  0F9A                     __end_of_setLED:	
  9006                           
  9007                           	psect	text57
  9008  0B94                     __ptext57:	
  9009 ;; *************** function _LedPointSelect *****************
  9010 ;; Defined at:
  9011 ;;		line 7 in file "../src/LED_B1.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  led             1    wreg     unsigned char 
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;  led             1    5[COMMON] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;		None               void
  9018 ;; Registers used:
  9019 ;;		wreg
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9025 ;;      Params:         0       0       0       0
  9026 ;;      Locals:         1       0       0       0
  9027 ;;      Temps:          1       0       0       0
  9028 ;;      Totals:         2       0       0       0
  9029 ;;Total ram usage:        2 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    2
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_setLED_Initialization
  9036 ;;		_setLED
  9037 ;;		_setLED_Main
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           
  9042                           ;psect for function _LedPointSelect
  9043  0B94                     _LedPointSelect:	
  9044                           
  9045                           ;incstack = 0
  9046                           ; Regs used in _LedPointSelect: [wreg]
  9047                           ;LedPointSelect@led stored from wreg
  9048  0B94  00F5               	movwf	LedPointSelect@led
  9049                           
  9050                           ;LED_B1.c: 9: if (led == 1) {
  9051  0B95  0875               	movf	LedPointSelect@led,w
  9052  0B96  3A01               	xorlw	1
  9053  0B97  1D03               	skipz
  9054  0B98  2B9D               	goto	l254
  9055                           
  9056                           ;LED_B1.c: 10: LED = &VarLED1;
  9057  0B99  3044               	movlw	_VarLED1& (0+255)
  9058  0B9A  00F4               	movwf	??_LedPointSelect
  9059  0B9B  0874               	movf	??_LedPointSelect,w
  9060  0B9C  00F6               	movwf	_LED
  9061  0B9D                     l254:	
  9062                           
  9063                           ;LED_B1.c: 11: }
  9064                           ;LED_B1.c: 14: if (led == 2) {
  9065  0B9D  0875               	movf	LedPointSelect@led,w
  9066  0B9E  3A02               	xorlw	2
  9067  0B9F  1D03               	skipz
  9068  0BA0  0008               	return
  9069                           
  9070                           ;LED_B1.c: 15: LED = &VarLED2;
  9071  0BA1  3048               	movlw	_VarLED2& (0+255)
  9072  0BA2  00F4               	movwf	??_LedPointSelect
  9073  0BA3  0874               	movf	??_LedPointSelect,w
  9074  0BA4  00F6               	movwf	_LED
  9075  0BA5  0008               	return
  9076  0BA6                     __end_of_LedPointSelect:	
  9077                           
  9078                           	psect	text58
  9079  0AF2                     __ptext58:	
  9080 ;; *************** function _getMain_All_LightsStatus *****************
  9081 ;; Defined at:
  9082 ;;		line 373 in file "../src/Main_B1.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;  status          1    4[COMMON] unsigned char 
  9087 ;; Return value:  Size  Location     Type
  9088 ;;                  1    wreg      unsigned char 
  9089 ;; Registers used:
  9090 ;;		wreg, status,2
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9096 ;;      Params:         0       0       0       0
  9097 ;;      Locals:         1       0       0       0
  9098 ;;      Temps:          0       0       0       0
  9099 ;;      Totals:         1       0       0       0
  9100 ;;Total ram usage:        1 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    2
  9103 ;; This function calls:
  9104 ;;		Nothing
  9105 ;; This function is called by:
  9106 ;;		_Exception_Main
  9107 ;;		_Load_Main
  9108 ;;		_setTemp_Main
  9109 ;;		_Lights_Main
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           
  9114                           ;psect for function _getMain_All_LightsStatus
  9115  0AF2                     _getMain_All_LightsStatus:	
  9116                           
  9117                           ;Main_B1.c: 374: char status = 0;
  9118                           
  9119                           ;incstack = 0
  9120                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9121  0AF2  01F4               	clrf	getMain_All_LightsStatus@status
  9122                           
  9123                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9124  0AF3  3000               	movlw	0
  9125  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  9126  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  9127  0AF6  193F               	btfsc	_Lights1,2
  9128  0AF7  3001               	movlw	1
  9129  0AF8  00F4               	movwf	getMain_All_LightsStatus@status
  9130                           
  9131                           ;Main_B1.c: 420: return status;
  9132  0AF9  0874               	movf	getMain_All_LightsStatus@status,w
  9133  0AFA  0008               	return
  9134  0AFB                     __end_of_getMain_All_LightsStatus:	
  9135                           
  9136                           	psect	text59
  9137  0DBC                     __ptext59:	
  9138 ;; *************** function _getMain_All_Error_Status *****************
  9139 ;; Defined at:
  9140 ;;		line 424 in file "../src/Main_B1.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  command         1    wreg     unsigned char 
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;  command         1    4[BANK0 ] unsigned char 
  9145 ;;  status          1    5[BANK0 ] unsigned char 
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  1    wreg      unsigned char 
  9148 ;; Registers used:
  9149 ;;		wreg, status,2, status,0
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9155 ;;      Params:         0       0       0       0
  9156 ;;      Locals:         0       6       0       0
  9157 ;;      Temps:          1       0       0       0
  9158 ;;      Totals:         1       6       0       0
  9159 ;;Total ram usage:        7 bytes
  9160 ;; Hardware stack levels used:    1
  9161 ;; Hardware stack levels required when called:    2
  9162 ;; This function calls:
  9163 ;;		Nothing
  9164 ;; This function is called by:
  9165 ;;		_Exception_Main
  9166 ;;		_Load_Main
  9167 ;;		_setTemp_Main
  9168 ;;		_PIR_Main
  9169 ;;		_setSYSC_Main
  9170 ;;		_Lights_Main
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _getMain_All_Error_Status
  9176  0DBC                     _getMain_All_Error_Status:	
  9177                           
  9178                           ;incstack = 0
  9179                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9180                           ;getMain_All_Error_Status@command stored from wreg
  9181  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  9182  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  9183  0DBE  00D0               	movwf	getMain_All_Error_Status@command
  9184                           
  9185                           ;Main_B1.c: 425: char status = 0;
  9186  0DBF  01D1               	clrf	getMain_All_Error_Status@status
  9187                           
  9188                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9189  0DC0  08D1               	movf	getMain_All_Error_Status@status,f
  9190  0DC1  1D03               	skipz
  9191  0DC2  2DCB               	goto	l3249
  9192  0DC3  0850               	movf	getMain_All_Error_Status@command,w
  9193  0DC4  3A01               	xorlw	1
  9194  0DC5  1903               	skipnz
  9195  0DC6  2DCB               	goto	l3249
  9196                           
  9197                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9198  0DC7  3000               	movlw	0
  9199  0DC8  18A0               	btfsc	_SYSC,1
  9200  0DC9  3001               	movlw	1
  9201  0DCA  00D1               	movwf	getMain_All_Error_Status@status
  9202  0DCB                     l3249:	
  9203                           
  9204                           ;Main_B1.c: 430: }
  9205                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9206  0DCB  08D1               	movf	getMain_All_Error_Status@status,f
  9207  0DCC  1D03               	skipz
  9208  0DCD  2DDF               	goto	l3259
  9209  0DCE  0850               	movf	getMain_All_Error_Status@command,w
  9210  0DCF  3A02               	xorlw	2
  9211  0DD0  1903               	skipnz
  9212  0DD1  2DDF               	goto	l3259
  9213                           
  9214                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9215  0DD2  18B9               	btfsc	_Temp,1
  9216  0DD3  2DD7               	goto	l3257
  9217  0DD4  01CC               	clrf	_getMain_All_Error_Status$2113
  9218  0DD5  01CD               	clrf	_getMain_All_Error_Status$2113+1
  9219  0DD6  2DDB               	goto	l608
  9220  0DD7                     l3257:	
  9221  0DD7  3002               	movlw	2
  9222  0DD8  00CC               	movwf	_getMain_All_Error_Status$2113
  9223  0DD9  3000               	movlw	0
  9224  0DDA  00CD               	movwf	_getMain_All_Error_Status$2113+1
  9225  0DDB                     l608:	
  9226  0DDB  084C               	movf	_getMain_All_Error_Status$2113,w
  9227  0DDC  00F4               	movwf	??_getMain_All_Error_Status
  9228  0DDD  0874               	movf	??_getMain_All_Error_Status,w
  9229  0DDE  00D1               	movwf	getMain_All_Error_Status@status
  9230  0DDF                     l3259:	
  9231                           
  9232                           ;Main_B1.c: 438: }
  9233                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9234  0DDF  08D1               	movf	getMain_All_Error_Status@status,f
  9235  0DE0  1D03               	skipz
  9236  0DE1  2DF8               	goto	l609
  9237  0DE2  0850               	movf	getMain_All_Error_Status@command,w
  9238  0DE3  3A03               	xorlw	3
  9239  0DE4  1903               	skipnz
  9240  0DE5  2DF8               	goto	l609
  9241                           
  9242                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9243  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  9244  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  9245  0DE8  1ACA               	btfsc	_Load^(0+128),5
  9246  0DE9  2DEF               	goto	l3267
  9247  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  9248  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  9249  0DEC  01CE               	clrf	_getMain_All_Error_Status$2114
  9250  0DED  01CF               	clrf	_getMain_All_Error_Status$2114+1
  9251  0DEE  2DF4               	goto	l613
  9252  0DEF                     l3267:	
  9253  0DEF  3003               	movlw	3
  9254  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  9255  0DF1  00CE               	movwf	_getMain_All_Error_Status$2114
  9256  0DF2  3000               	movlw	0
  9257  0DF3  00CF               	movwf	_getMain_All_Error_Status$2114+1
  9258  0DF4                     l613:	
  9259  0DF4  084E               	movf	_getMain_All_Error_Status$2114,w
  9260  0DF5  00F4               	movwf	??_getMain_All_Error_Status
  9261  0DF6  0874               	movf	??_getMain_All_Error_Status,w
  9262  0DF7  00D1               	movwf	getMain_All_Error_Status@status
  9263  0DF8                     l609:	
  9264                           
  9265                           ;Main_B1.c: 445: }
  9266                           ;Main_B1.c: 455: return status;
  9267  0DF8  0851               	movf	getMain_All_Error_Status@status,w
  9268  0DF9  0008               	return
  9269  0DFA                     __end_of_getMain_All_Error_Status:	
  9270                           
  9271                           	psect	text60
  9272  0B61                     __ptext60:	
  9273 ;; *************** function _getAll_Lights_Line *****************
  9274 ;; Defined at:
  9275 ;;		line 264 in file "../src/TriacRelay_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;  line            1    0[BANK0 ] unsigned char 
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      unsigned char 
  9282 ;; Registers used:
  9283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9289 ;;      Params:         0       0       0       0
  9290 ;;      Locals:         0       1       0       0
  9291 ;;      Temps:          0       0       0       0
  9292 ;;      Totals:         0       1       0       0
  9293 ;;Total ram usage:        1 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    3
  9296 ;; This function calls:
  9297 ;;		_LightsPointSelect
  9298 ;; This function is called by:
  9299 ;;		_Exception_Main
  9300 ;;		_setMain_Exception
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           
  9305                           ;psect for function _getAll_Lights_Line
  9306  0B61                     _getAll_Lights_Line:	
  9307                           
  9308                           ;TriacRelay_B1.c: 265: char line = 0;
  9309                           
  9310                           ;incstack = 0
  9311                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9312  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  9313  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  9314  0B63  01CC               	clrf	getAll_Lights_Line@line
  9315                           
  9316                           ;TriacRelay_B1.c: 267: LightsPointSelect(1);
  9317  0B64  3001               	movlw	1
  9318  0B65  158A  22FB         	fcall	_LightsPointSelect
  9319                           
  9320                           ;TriacRelay_B1.c: 268: line = Lights->Line == 1 ? 1 : 0;
  9321  0B67  0A78               	incf	_Lights,w
  9322  0B68  0084               	movwf	4
  9323  0B69  3000               	movlw	0
  9324  0B6A  1383               	bcf	3,7	;select IRP bank0
  9325  0B6B  1800               	btfsc	0,0
  9326  0B6C  3001               	movlw	1
  9327  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  9328  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  9329  0B6F  00CC               	movwf	getAll_Lights_Line@line
  9330                           
  9331                           ;TriacRelay_B1.c: 278: return line;
  9332  0B70  084C               	movf	getAll_Lights_Line@line,w
  9333  0B71  0008               	return
  9334  0B72                     __end_of_getAll_Lights_Line:	
  9335                           
  9336                           	psect	text61
  9337  0AFB                     __ptext61:	
  9338 ;; *************** function _LightsPointSelect *****************
  9339 ;; Defined at:
  9340 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  lights          1    wreg     unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  lights          1    5[COMMON] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;		None               void
  9347 ;; Registers used:
  9348 ;;		wreg
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9354 ;;      Params:         0       0       0       0
  9355 ;;      Locals:         1       0       0       0
  9356 ;;      Temps:          1       0       0       0
  9357 ;;      Totals:         2       0       0       0
  9358 ;;Total ram usage:        2 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    2
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_setLights_Initialization
  9365 ;;		_setLights_Main
  9366 ;;		_Lights_Control
  9367 ;;		_getLights_Status
  9368 ;;		_setLights_Trigger
  9369 ;;		_getAll_Lights_Line
  9370 ;;		_setLights_SwOn
  9371 ;;		_setLights_SwOff
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           
  9376                           ;psect for function _LightsPointSelect
  9377  0AFB                     _LightsPointSelect:	
  9378                           
  9379                           ;incstack = 0
  9380                           ; Regs used in _LightsPointSelect: [wreg]
  9381                           ;LightsPointSelect@lights stored from wreg
  9382  0AFB  00F5               	movwf	LightsPointSelect@lights
  9383                           
  9384                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9385  0AFC  0875               	movf	LightsPointSelect@lights,w
  9386  0AFD  3A01               	xorlw	1
  9387  0AFE  1D03               	skipz
  9388  0AFF  0008               	return
  9389                           
  9390                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9391  0B00  303F               	movlw	_Lights1& (0+255)
  9392  0B01  00F4               	movwf	??_LightsPointSelect
  9393  0B02  0874               	movf	??_LightsPointSelect,w
  9394  0B03  00F8               	movwf	_Lights
  9395  0B04  0008               	return
  9396  0B05                     __end_of_LightsPointSelect:	
  9397                           
  9398                           	psect	text62
  9399  0B1A                     __ptext62:	
  9400 ;; *************** function _DetectSYSC_Signal *****************
  9401 ;; Defined at:
  9402 ;;		line 50 in file "../src/SYSC_B1.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;		None
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		status,2
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9416 ;;      Params:         0       0       0       0
  9417 ;;      Locals:         0       0       0       0
  9418 ;;      Temps:          0       0       0       0
  9419 ;;      Totals:         0       0       0       0
  9420 ;;Total ram usage:        0 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    2
  9423 ;; This function calls:
  9424 ;;		Nothing
  9425 ;; This function is called by:
  9426 ;;		_main
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _DetectSYSC_Signal
  9432  0B1A                     _DetectSYSC_Signal:	
  9433                           
  9434                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9438  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  9439  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  9440  0B1C  19A0               	btfsc	_SYSC,3
  9441  0B1D  2B24               	goto	l1127
  9442                           
  9443                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9444  0B1E  1E85               	btfss	5,5	;volatile
  9445  0B1F  0008               	return
  9446                           
  9447                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9448  0B20  15A0               	bsf	_SYSC,3
  9449                           
  9450                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9451  0B21  01A1               	clrf	_SYSC+1
  9452  0B22  01A2               	clrf	_SYSC+2
  9453                           
  9454                           ;SYSC_B1.c: 55: }
  9455                           ;SYSC_B1.c: 56: } else {
  9456  0B23  0008               	return
  9457  0B24                     l1127:	
  9458                           
  9459                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9460  0B24  1A85               	btfsc	5,5	;volatile
  9461  0B25  0008               	return
  9462                           
  9463                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9464  0B26  11A0               	bcf	_SYSC,3
  9465  0B27  0008               	return
  9466  0B28                     __end_of_DetectSYSC_Signal:	
  9467                           
  9468                           	psect	text63
  9469  0D54                     __ptext63:	
  9470 ;; *************** function _CDS_Main *****************
  9471 ;; Defined at:
  9472 ;;		line 11 in file "../src/CDS_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, status,2, status,0
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9486 ;;      Params:         0       0       0       0
  9487 ;;      Locals:         0       0       0       0
  9488 ;;      Temps:          0       3       0       0
  9489 ;;      Totals:         0       3       0       0
  9490 ;;Total ram usage:        3 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    2
  9493 ;; This function calls:
  9494 ;;		Nothing
  9495 ;; This function is called by:
  9496 ;;		_main
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _CDS_Main
  9502  0D54                     _CDS_Main:	
  9503                           
  9504                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9508  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  9509  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  9510  0D56  1C2E               	btfss	__CDS,0
  9511  0D57  0008               	return
  9512                           
  9513                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9514  0D58  18AE               	btfsc	__CDS,1
  9515  0D59  2D67               	goto	l117
  9516                           
  9517                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9518  0D5A  19AE               	btfsc	__CDS,3
  9519  0D5B  0008               	return
  9520                           
  9521                           ;CDS_B1.c: 16: _CDS.Time++;
  9522  0D5C  3001               	movlw	1
  9523  0D5D  00CC               	movwf	??_CDS_Main
  9524  0D5E  084C               	movf	??_CDS_Main,w
  9525  0D5F  07AF               	addwf	__CDS+1,f
  9526                           
  9527                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9528  0D60  3005               	movlw	5
  9529  0D61  022F               	subwf	__CDS+1,w
  9530  0D62  1C03               	skipc
  9531  0D63  0008               	return
  9532                           
  9533                           ;CDS_B1.c: 18: {
  9534                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9535  0D64  01AF               	clrf	__CDS+1
  9536                           
  9537                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9538  0D65  15AE               	bsf	__CDS,3
  9539                           
  9540                           ;CDS_B1.c: 21: }
  9541                           ;CDS_B1.c: 22: }
  9542                           ;CDS_B1.c: 23: } else {
  9543  0D66  0008               	return
  9544  0D67                     l117:	
  9545                           
  9546                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9547  0D67  1CAE               	btfss	__CDS,1
  9548  0D68  0008               	return
  9549                           
  9550                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9551  0D69  10AE               	bcf	__CDS,1
  9552                           
  9553                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9554  0D6A  1A2E               	btfsc	__CDS,4
  9555  0D6B  2D72               	goto	l4909
  9556                           
  9557                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9558  0D6C  0830               	movf	__CDS+2,w
  9559  0D6D  0231               	subwf	__CDS+3,w
  9560  0D6E  1C03               	skipc
  9561  0D6F  0008               	return
  9562                           
  9563                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9564  0D70  162E               	bsf	__CDS,4
  9565                           
  9566                           ;CDS_B1.c: 29: }
  9567                           ;CDS_B1.c: 30: } else {
  9568  0D71  0008               	return
  9569  0D72                     l4909:	
  9570                           
  9571                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9572  0D72  0830               	movf	__CDS+2,w
  9573  0D73  3E9C               	addlw	156
  9574  0D74  00CC               	movwf	??_CDS_Main
  9575  0D75  30FF               	movlw	255
  9576  0D76  1803               	skipnc
  9577  0D77  3000               	movlw	0
  9578  0D78  00CD               	movwf	??_CDS_Main+1
  9579  0D79  084D               	movf	??_CDS_Main+1,w
  9580  0D7A  3A80               	xorlw	128
  9581  0D7B  00CE               	movwf	??_CDS_Main+2
  9582  0D7C  3080               	movlw	128
  9583  0D7D  024E               	subwf	??_CDS_Main+2,w
  9584  0D7E  1D03               	skipz
  9585  0D7F  2D82               	goto	u6025
  9586  0D80  0831               	movf	__CDS+3,w
  9587  0D81  024C               	subwf	??_CDS_Main,w
  9588  0D82                     u6025:	
  9589  0D82  1C03               	skipc
  9590  0D83  0008               	return
  9591                           
  9592                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9593  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  9594  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  9595  0D86  122E               	bcf	__CDS,4
  9596  0D87  0008               	return
  9597  0D88                     __end_of_CDS_Main:	
  9598                           
  9599                           	psect	text64
  9600  0AA1                     __ptext64:	
  9601 ;; *************** function _CDS_Initialization *****************
  9602 ;; Defined at:
  9603 ;;		line 7 in file "../src/CDS_B1.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;		None
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;		None
  9608 ;; Return value:  Size  Location     Type
  9609 ;;		None               void
  9610 ;; Registers used:
  9611 ;;		None
  9612 ;; Tracked objects:
  9613 ;;		On entry : 0/0
  9614 ;;		On exit  : 0/0
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9617 ;;      Params:         0       0       0       0
  9618 ;;      Locals:         0       0       0       0
  9619 ;;      Temps:          0       0       0       0
  9620 ;;      Totals:         0       0       0       0
  9621 ;;Total ram usage:        0 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; Hardware stack levels required when called:    2
  9624 ;; This function calls:
  9625 ;;		Nothing
  9626 ;; This function is called by:
  9627 ;;		_main
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           
  9632                           ;psect for function _CDS_Initialization
  9633  0AA1                     _CDS_Initialization:	
  9634                           
  9635                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9636                           
  9637                           ;incstack = 0
  9638                           ; Regs used in _CDS_Initialization: []
  9639  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  9640  0AA2  1303               	bcf	3,6	;RP1=0, select bank0
  9641  0AA3  142E               	bsf	__CDS,0
  9642  0AA4  0008               	return
  9643  0AA5                     __end_of_CDS_Initialization:	
  9644                           
  9645                           	psect	text65
  9646  0BFD                     __ptext65:	
  9647 ;; *************** function _ISR *****************
  9648 ;; Defined at:
  9649 ;;		line 116 in file "../src/MCU_B1.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;		None
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;		None               void
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, pclath, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9663 ;;      Params:         0       0       0       0
  9664 ;;      Locals:         0       0       0       0
  9665 ;;      Temps:          4       0       0       0
  9666 ;;      Totals:         4       0       0       0
  9667 ;;Total ram usage:        4 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    1
  9670 ;; This function calls:
  9671 ;;		_TMR1_ISR
  9672 ;; This function is called by:
  9673 ;;		Interrupt level 1
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _ISR
  9679  0BFD                     _ISR:	
  9680                           
  9681                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9682  0BFD  1683               	bsf	3,5	;RP0=1, select bank1
  9683  0BFE  1303               	bcf	3,6	;RP1=0, select bank1
  9684  0BFF  1C0C               	btfss	12,0	;volatile
  9685  0C00  2C08               	goto	i1l426
  9686  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  9687  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  9688  0C03  1C0C               	btfss	12,0	;volatile
  9689  0C04  2C08               	goto	i1l426
  9690                           
  9691                           ;MCU_B1.c: 126: TMR1_ISR();
  9692  0C05  158A  23BA  158A   	fcall	_TMR1_ISR
  9693  0C08                     i1l426:	
  9694                           ;MCU_B1.c: 127: }
  9695                           ;MCU_B1.c: 148: return;
  9696                           
  9697  0C08  0873               	movf	??_ISR+3,w
  9698  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  9699  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
  9700  0C0B  00FF               	movwf	127
  9701  0C0C  0872               	movf	??_ISR+2,w
  9702  0C0D  008A               	movwf	10
  9703  0C0E  0871               	movf	??_ISR+1,w
  9704  0C0F  0084               	movwf	4
  9705  0C10  0E70               	swapf	??_ISR^(0+-128),w
  9706  0C11  0083               	movwf	3
  9707  0C12  0EFE               	swapf	126,f
  9708  0C13  0E7E               	swapf	126,w
  9709  0C14  0009               	retfie
  9710  0C15                     __end_of_ISR:	
  9711                           
  9712                           	psect	intentry
  9713  0004                     __pintentry:	
  9714                           ;incstack = 0
  9715                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9716                           
  9717  0004                     interrupt_function:	
  9718  007E                     saved_w	set	btemp
  9719  0004  00FE               	movwf	btemp
  9720  0005  0E03               	swapf	3,w
  9721  0006  00F0               	movwf	??_ISR
  9722  0007  0804               	movf	4,w
  9723  0008  00F1               	movwf	??_ISR+1
  9724  0009  080A               	movf	10,w
  9725  000A  00F2               	movwf	??_ISR+2
  9726  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9727  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9728  000D  087F               	movf	btemp+1,w
  9729  000E  00F3               	movwf	??_ISR+3
  9730  000F  158A  2BFD         	ljmp	_ISR
  9731                           
  9732                           	psect	text66
  9733  0BBA                     __ptext66:	
  9734 ;; *************** function _TMR1_ISR *****************
  9735 ;; Defined at:
  9736 ;;		line 236 in file "../src/MCU_B1.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg, status,2
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9750 ;;      Params:         0       0       0       0
  9751 ;;      Locals:         0       0       0       0
  9752 ;;      Temps:          0       0       0       0
  9753 ;;      Totals:         0       0       0       0
  9754 ;;Total ram usage:        0 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; This function calls:
  9757 ;;		Nothing
  9758 ;; This function is called by:
  9759 ;;		_ISR
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _TMR1_ISR
  9765  0BBA                     _TMR1_ISR:	
  9766                           
  9767                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  9768                           
  9769                           ;incstack = 0
  9770                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9771  0BBA  30FA               	movlw	250
  9772  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  9773  0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  9774  0BBD  008F               	movwf	15	;volatile
  9775                           
  9776                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  9777  0BBE  3038               	movlw	56
  9778  0BBF  008E               	movwf	14	;volatile
  9779                           
  9780                           ;MCU_B1.c: 240: TMR1IF = 0;
  9781  0BC0  100C               	bcf	12,0	;volatile
  9782                           
  9783                           ;MCU_B1.c: 271: Timer1.Count++;
  9784  0BC1  3001               	movlw	1
  9785  0BC2  07B3               	addwf	_Timer1+1,f
  9786  0BC3  1803               	skipnc
  9787  0BC4  0AB4               	incf	_Timer1+2,f
  9788  0BC5  3000               	movlw	0
  9789  0BC6  07B4               	addwf	_Timer1+2,f
  9790                           
  9791                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
  9792  0BC7  30C8               	movlw	200
  9793  0BC8  0633               	xorwf	_Timer1+1,w
  9794  0BC9  0434               	iorwf	_Timer1+2,w
  9795  0BCA  1D03               	skipz
  9796  0BCB  0008               	return
  9797                           
  9798                           ;MCU_B1.c: 273: Timer1.Count = 0;
  9799  0BCC  01B3               	clrf	_Timer1+1
  9800  0BCD  01B4               	clrf	_Timer1+2
  9801                           
  9802                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
  9803  0BCE  1432               	bsf	_Timer1,0
  9804  0BCF  0008               	return
  9805  0BD0                     __end_of_TMR1_ISR:	
  9806  007E                     btemp	set	126	;btemp
  9807  007E                     wtemp	set	126
  9808  007E                     wtemp0	set	126
  9809  0080                     wtemp1	set	128
  9810  0082                     wtemp2	set	130
  9811  0084                     wtemp3	set	132
  9812  0086                     wtemp4	set	134
  9813  0088                     wtemp5	set	136
  9814  007F                     wtemp6	set	127
  9815  007E                     ttemp	set	126
  9816  007E                     ttemp0	set	126
  9817  0081                     ttemp1	set	129
  9818  0084                     ttemp2	set	132
  9819  0087                     ttemp3	set	135
  9820  007F                     ttemp4	set	127
  9821  007E                     ltemp	set	126
  9822  007E                     ltemp0	set	126
  9823  0082                     ltemp1	set	130
  9824  0086                     ltemp2	set	134
  9825  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      67
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   27417
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     827
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3060
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1439
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         5     5      0    1439
                                              5 COMMON     1     1      0
                                              8 BANK0      4     4      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    4275
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4317
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2868
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2605
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1185
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2292
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2292
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2376
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2376
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4654
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     775
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     648
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     555
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2252
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      93       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      43       5       83.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      93      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Jan 16 08:12:24 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 0051                      setTemp_Main@AD 0057  
                                fsr 0004                 ___wmul@multiplicand 004E  
                               l117 0D67                                 l254 0B9D  
                               l613 0DF4                                 l608 0DDB  
                               l720 025A                                 l609 0DF8  
                               l721 0256                                 l722 0250  
                               l734 0386                                 l718 0403  
                               l639 05FA                                 l728 03DC  
                               l840 067F                                 l729 03DA  
                               l922 0083                                 l914 0203  
                               l915 007D                                 l924 0096  
                               l916 0059                                 l845 067C  
                               _GIE 005F                                 _RB2 0032  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RA6 002E  
                               _RA7 002F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0BFD                                 _PSA 040B  
                               _WDT 0035                   ??_setLights_SwOff 0076  
                               _Cmd 0037              getAll_Lights_Line@line 004C  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0AD2           __end_of_LightsPointSelect 0B05  
                  _getLights_Status 0B72             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 005B  
                              l1127 0B24                      _Load_Main$2372 0056  
                              l1279 0CAF                                l5011 0468  
                              l5003 0452                                l1398 0D0B  
                              l5015 0473                                l5007 045D  
                              l3257 0DD7                                l3249 0DCB  
                              l5121 02BC                                l3267 0DEF  
                              l3259 0DDF                                l5211 03F0  
                              l5115 0280                                l5051 04FD  
                              l5035 04B3                                l5019 047E  
                              l5045 04E1                                l5029 0497  
                              l4511 0F88                                l5311 00DC  
                              l5401 0554                                l5153 0357  
                              l5313 00DD                                l5065 0537  
                              l4515 0F8E                                l5147 0347  
                              l5083 023A                                l5331 0131  
                              l5323 011D                                l5307 00D0  
                              l5059 0529                                l4461 0F46  
                              l5413 058A                                l4605 0775  
                              l5229 0CB0                                l5165 03A3  
                              l5157 0378                                l4519 0F94  
                              l4471 0F53                                l5431 05DE  
                              l5415 0567                                l5407 0563  
                              l4703 07BC                                l4623 0EEF  
                              l5175 03BC                                l5343 0194  
                              l3591 0E51                                l4465 0F4A  
                              l5425 05C0                                l5417 0596  
                              l4705 07C8                                l4641 0F1B  
                              l4633 0EF7                                l4617 0EE4  
                              l5361 01D3                                l5345 01A3  
                              l5257 006D                                l3913 0C59  
                              l4475 0F57                                l5427 059D  
                              l5435 05EC                                l4707 07D0  
                              l4635 0F05                                l5099 0259  
                              l5339 0162                                l4803 067B  
                              l4493 0F76                                l4485 0F6A  
                              l5429 05CC                                l4709 07DE  
                              l4645 0F26                                l4581 0722  
                              l4821 0D4D                                l3597 0E6A  
                              l4735 0CFA                                l4567 0BF5  
                              l4591 0741                                l5295 00B9  
                              l4663 0C94                                l4489 0F6E  
                              l4649 0F2E                                l4761 061B  
                              l4657 0C8B                                l5481 0FD8  
                              l4595 0754                                l4659 0C8E  
                              l4909 0D72                                l4693 07AA  
                              l4853 0D01                                l5469 0FB5  
                              l4839 06D2                                l4951 0EB7  
                              l4697 07B0                                l4689 07A4  
                              l4881 0E28                                l4873 0E04  
                              l4793 066C                                l4777 0651  
                              l4875 0E12                                l4947 0EAF  
                              l4939 0E9B                                l4885 0E33  
                              l4967 0ED3                                l4983 0DA7  
                              l4987 0DAF               _myMain_Initialization 0A8E  
                      __CFG_WDTE$ON 0000                                u3375 0E76  
                              u6025 0D82                                u5235 0BB4  
                              _PEIE 005E                                u5510 07C5  
                              u5530 07DB                                u5355 0EFA  
                              u7070 0593                                u5375 0F06  
                              u5800 06CE                                u5385 0F12  
                              u6425 027E                                u7090 05C9  
                              u7075 0570                                u5395 0F1C  
                              u6435 02BA                                u6525 039B  
                              u6445 0311                                u7095 05A6  
                              u5825 06F1                                u5915 0E13  
                              u5925 0E1F                                u5935 0E29  
                              u5855 0D0C                                u5785 06BA  
                              u5865 0D13                                u6905 014A  
                              u6925 0186                                u5895 0E07  
                              u6945 01B3                                u6875 00FB  
                              u6885 0113                                u6995 01F0  
                              __CDS 002E             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0039                                _main 0F9A  
                              btemp 007E                     __end_of_WDT_Set 0B52  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0D88        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0C63  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0A92                  ?_setLights_Trigger 004C  
                  ??_setPIRLED_Main 004E                               ?_main 005E  
                   __end_of___awdiv 0F35                               _ADRES 001E  
                   ___awdiv@divisor 004C                               _T1CON 0010  
                   __end_of___lwdiv 0E3A                               i1l426 0C08  
                   ___awdiv@counter 0050                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0BBA  
                             _Light 0077                 ??_setLights_Trigger 004D  
                  __end_of_PIR_Main 0221                    __end_of_TMR1_ISR 0BD0  
                  __end_of_TMR1_Set 0B44                               _getAD 0C7E  
    __end_of_setSYSC_Initialization 0AAD      getLights_Allow_Condition@allow 004C  
           __end_of_getLight_LoadGO 0AB8                    __end_of_WDT_Main 0B94  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0B0F                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0800  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0059  
                 getPIR_AD@channel2 0054              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0054                      _setLights_Main 0D24  
                    _setLights_Line 0B28                     __initialization 0013  
                    _setLights_SwOn 0CDA                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0C7E                        __end_of_main 1000  
                  __end_of_Fosc_Set 0AB2      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0539                           ??_ADC_Set 0074  
                            ??_main 0062               PIR_Main@Enable_Switch 0058  
               __end_of_Lights_Main 0CB8          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0AF2                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 004E  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0DBC  
                            _FVRCON 009D              getLights_Status@lights 004C  
                            _PIRLED 002A                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0C2F  
              Exception_Main@i_2126 0058              getLights_Status@status 004D  
            __end_of_setLights_Main 0D54              __end_of_setLights_Line 0B36  
            __end_of_setLights_SwOn 0CFF        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0B61                              _Lights 0078  
                            _Timer1 0032         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 05FB  
              Exception_Main@lights 0053                              ___wmul 0CFF  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 0055                              _setLED 0F35  
                            _myMain 0025                    ___awdiv@quotient 0052  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 005A  
       __end_of_Load_Initialization 0A95     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 004F  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0A9B                      _Lights_Control 0683  
           __size_of_LedPointSelect 0012                           ?_CDS_Main 0070  
                  ?_getLight_LoadGO 0070         __size_of_PIR_Initialization 000B  
           __end_of__initialization 0023                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0C15  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0B83                       __end_of_getAD 0C9A  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0AD2  
                __size_of_getPIR_AD 012E                         _Lights_Main 0C9A  
          _setLights_Initialization 0AC4                _getMain_Lights_Count 0B05  
                         ?_WDT_Main 0070                   __end_of_Load_Main 040B  
        __end_of_set_TimeoutCleared 0AC4                 ?_LED_Initialization 0070  
            __end_of_Lights_Control 0706                             ??_getAD 0075  
               _Temp_Initialization 0A9B                          ??_CDS_Main 004C  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Fosc_Set 0070         __size_of_getAll_Lights_Line 0011  
                 __end_of_Temp_Main 0AA1                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0074  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F9A          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 005D  
                           ?___wmul 004C                          ??_PIR_Main 0052  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 0077                          _getLoad_AD 0E7C  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 0ADA                             ?_setLED 004C  
           setLights_Trigger@lights 004E               ?_getMain_Lights_Count 0070  
                           _ADC_Set 0ACB                          _getTemp_AD 0D88  
                        ??_WDT_Main 0074              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0070                   __end_of_getCDS_AD 0CDA  
                           _WDT_Set 0B44                       getPIR_AD@VRAD 005B  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0539  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0C2F  
    _getLights_Allow_Condition$4181 004D                     __size_of_IO_Set 001A  
                        getCDS_AD@i 004F                          getCDS_AD@j 0050  
                           _Lights1 003F                             _VarLED1 0044  
                           _VarLED2 0048               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0075                             ___awdiv 0ED8  
                   __size_of___wmul 0025                             ___lwdiv 0DFA  
        ??_getMain_All_LightsStatus 0074                         PIR_Main@cds 005C  
                   __size_of_setLED 0065                             __ptext0 0000  
                           __ptext1 0C49                             __ptext2 0A8E  
                           __ptext3 0D88                             __ptext4 040B  
                           __ptext5 0E7C                             __ptext6 0CB8  
                           __ptext7 0C7E                             __ptext8 0ABE  
                           __ptext9 0BA6                          getPIR_AD@i 005C  
                        getPIR_AD@j 0058                        __size_of_ISR 0018  
        ??_getMain_All_Error_Status 0074                 _SYSC_Initialization 0A95  
           ??_myMain_Initialization 0074            ??_setTemp_Initialization 0074  
                    _LedPointSelect 0B94                     getTemp_AD@ADRES 004F  
                           clrloop0 0AEB                   __end_of_setLights 077D  
              end_of_initialization 0023                       _getCDS_Status 0AE2  
              ?_SYSC_Initialization 0070               _setLED_Initialization 07EE  
                 setLights_SwOff@sw 004F                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0004                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 0AA9  
                       ?_getTemp_AD 0070            setLED_Initialization@led 004E  
           setTemp_Main@DangerValue 0056                  _Mcu_Initialization 0B52  
              __end_of_my_MainTimer 0C63                __end_of_setSYSC_Main 0E7C  
            __end_of_LedPointSelect 0BA6            Load_Main@ErrorCountValue 0058  
               setPIRLED_Main@count 004F                 ?_Mcu_Initialization 0070  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0051  
                  ??_setLights_SwOn 0076                           _SYSC_Main 0A98  
   getMain_All_Error_Status@command 0050                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070                    ?_setLights_SwOff 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0052  
                    __end_of_IO_Set 0C49          __end_of_CDS_Initialization 0AA5  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D24                   __size_of_PIR_Main 01FB  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0F9A  
          ??_setSYSC_Initialization 0074                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0221  
                       __end_of_ISR 0C15          __end_of_PIR_Initialization 0B1A  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0ABE  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 0683                 __size_of_getLoad_AD 005C  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0ABE                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                 __size_of_getTemp_AD 0034  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0A9E  
                   setLights@lights 0050                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0054                     setLights@status 004E  
               Exception_Main@error 005A                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0AFB                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0054  
  __end_of_getMain_All_Error_Status 0DFA                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 0059                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 004C  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0B72  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0057                           _getCDS_AD 0CB8  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0BE6  
                         _getPIR_AD 040B         __size_of_LED_Initialization 0008  
                   Exception_Main@i 0056                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 004E                      Load_Main@error 0055  
            _setTemp_Initialization 0A8D                       _PIR_Main$2832 0059  
                          ?___awdiv 004C               __size_of_my_MainTimer 001A  
                          ?___lwdiv 004C               __size_of_setSYSC_Main 0042  
          setLights_Trigger@command 004C     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0BE6      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0A8F                      __size_of_getAD 001C  
                  ___lwdiv@quotient 0051                      _setPIRLED_Main 077D  
                          _CDS_Main 0D54                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0A9E                   interrupt_function 0004  
                        ?_getCDS_AD 004C                      ___wmul@product 0074  
                          _LED_Main 0A8F                           _setLights 0706  
                         clear_ram0 0AEA    __end_of_setLights_Initialization 0ACB  
                      _my_MainTimer 0C49                          ?_getPIR_AD 0054  
                      _setSYSC_Main 0E3A                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                PIR_Main@TriggerValue 005B  
                          _PIR_Main 0026                        ??_getLoad_AD 004C  
                          _TMR1_ISR 0BBA                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0AB8                            _TMR1_Set 0B36  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 004C  
                          _WDT_Main 0B83                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 004C                      getPIR_AD@VRAD1 005A  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 0088  
                       ??_Load_Main 0053              __end_of_setPIRLED_Main 07EE  
    getMain_All_Error_Status@status 0051                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0AAD                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0ED8                  __end_of_getLoad_OK 0AE2  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 004E                  __end_of_getTemp_AD 0DBC  
            _setSYSC_Initialization 0AA9                   getLoad_AD@channel 004E  
                 _DetectSYSC_Signal 0B1A                            _SwDetect 0038  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2113 004C  
     _getMain_All_Error_Status$2114 004E                 _Load_Initialization 0A92  
                ?_DetectSYSC_Signal 0070                           setLED@led 004D  
             ?_getLight_Load_Status 0070                        _setTemp_Main 05FB  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0AA1               _Lights_Initialization 0AA5  
                 getTemp_AD@channel 004E                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 004C                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0050  
                          __ptext10 0B83                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0A9E  
                          __ptext21 0AE2                            __ptext13 05FB  
                          __ptext30 0B05                            __ptext22 0B0F  
                          __ptext14 0A9B                            __ptext31 0AB8  
                          __ptext23 0B52                            __ptext15 0A8D  
                          __ptext40 0B28                            __ptext32 0AB2  
                          __ptext24 0B44                            __ptext16 0A98  
                          __ptext41 0BE6                            __ptext33 0CFF  
                          __ptext25 0B36                            __ptext17 0E3A  
                          __ptext50 07EE                            __ptext42 0ADA  
                          __ptext34 0DFA                            __ptext26 0C2F  
                          __ptext18 0A95                            __ptext51 0539  
                          __ptext43 0683                            __ptext35 0A92  
                          __ptext27 0AAD                            __ptext19 0AA9  
                          __ptext60 0B61                            __ptext52 0CDA  
                          __ptext44 0ED8                            __ptext36 0BD0  
                          __ptext28 0ACB                            __ptext61 0AFB  
                          __ptext53 0B72                            __ptext45 0AA5  
                          __ptext37 0C9A                            __ptext29 0221  
                          __ptext62 0B1A                            __ptext54 0C15  
                          __ptext46 0AC4                            __ptext38 0D24  
                          __ptext63 0D54                            __ptext55 0C63  
                          __ptext47 0A8F                            __ptext39 0706  
                          __ptext64 0AA1                            __ptext56 0F35  
                          __ptext48 077D                            __ptext65 0BFD  
                          __ptext57 0B94                            __ptext49 0AD2  
                          __ptext66 0BBA                            __ptext58 0AF2  
                          __ptext59 0DBC           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0A98             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 004D                       setLED@command 004C  
         __end_of_DetectSYSC_Signal 0B28                       __size_of_main 0066  
                       ??_getPIR_AD 0055                  _PIR_Initialization 0B0F  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 005E  
                          main@argv 0060   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 0056                ??_PIR_Initialization 0074  
                          intlevel1 0000  __size_of_getLights_Allow_Condition 0017  
             setTemp_Main@SafeValue 0055                         ??_setLights 004F  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0B61                     getLoad_AD@ADRES 0051  
            ??_getLight_Load_Status 0074                         getLoad_AD@i 0052  
                       getLoad_AD@j 0050                         getLoad_AD@k 004F  
           __size_of_setLights_Main 0030             __size_of_setLights_Line 000E  
           __size_of_setLights_SwOn 0025                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 00C2               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 004C         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0AFB                ??_getAll_Lights_Line 0076  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0BA6          __end_of_LED_Initialization 0ADA  
             __end_of_getCDS_Status 0AEA      __end_of_setTemp_Initialization 0A8E  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0AB2  
                 getCDS_AD@channel1 0051                   getCDS_AD@channel2 004C  
 __end_of_getLights_Allow_Condition 0BFD                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0BD0  
