

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Jan 13 12:59:37 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    78                           	dabs	1,0x7E,2
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0096                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009F                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0186                     	;# 
   147  018C                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0096                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009F                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0186                     	;# 
   216  018C                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0096                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009F                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0186                     	;# 
   285  018C                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0093                     	;# 
   334  0094                     	;# 
   335  0095                     	;# 
   336  0095                     	;# 
   337  0096                     	;# 
   338  0096                     	;# 
   339  0098                     	;# 
   340  0099                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009F                     	;# 
   344  0108                     	;# 
   345  0109                     	;# 
   346  010C                     	;# 
   347  010C                     	;# 
   348  010D                     	;# 
   349  010D                     	;# 
   350  010E                     	;# 
   351  010F                     	;# 
   352  0185                     	;# 
   353  0186                     	;# 
   354  018C                     	;# 
   355  0000                     	;# 
   356  0001                     	;# 
   357  0002                     	;# 
   358  0003                     	;# 
   359  0004                     	;# 
   360  0005                     	;# 
   361  0006                     	;# 
   362  0007                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  000E                     	;# 
   370  000F                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001D                     	;# 
   387  001E                     	;# 
   388  001F                     	;# 
   389  0081                     	;# 
   390  0085                     	;# 
   391  0086                     	;# 
   392  0087                     	;# 
   393  0089                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  008F                     	;# 
   398  0090                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0096                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009F                     	;# 
   413  0108                     	;# 
   414  0109                     	;# 
   415  010C                     	;# 
   416  010C                     	;# 
   417  010D                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  010F                     	;# 
   421  0185                     	;# 
   422  0186                     	;# 
   423  018C                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  000D                     	;# 
   437  000E                     	;# 
   438  000E                     	;# 
   439  000F                     	;# 
   440  0010                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0013                     	;# 
   444  0014                     	;# 
   445  0015                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001D                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  0081                     	;# 
   459  0085                     	;# 
   460  0086                     	;# 
   461  0087                     	;# 
   462  0089                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  008F                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0093                     	;# 
   472  0094                     	;# 
   473  0095                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0096                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009F                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010D                     	;# 
   488  010E                     	;# 
   489  010F                     	;# 
   490  0185                     	;# 
   491  0186                     	;# 
   492  018C                     	;# 
   493  0000                     	;# 
   494  0001                     	;# 
   495  0002                     	;# 
   496  0003                     	;# 
   497  0004                     	;# 
   498  0005                     	;# 
   499  0006                     	;# 
   500  0007                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  000E                     	;# 
   508  000F                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0013                     	;# 
   513  0014                     	;# 
   514  0015                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001D                     	;# 
   525  001E                     	;# 
   526  001F                     	;# 
   527  0081                     	;# 
   528  0085                     	;# 
   529  0086                     	;# 
   530  0087                     	;# 
   531  0089                     	;# 
   532  008C                     	;# 
   533  008D                     	;# 
   534  008E                     	;# 
   535  008F                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0093                     	;# 
   540  0093                     	;# 
   541  0094                     	;# 
   542  0095                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0096                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009F                     	;# 
   551  0108                     	;# 
   552  0109                     	;# 
   553  010C                     	;# 
   554  010C                     	;# 
   555  010D                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  010F                     	;# 
   559  0185                     	;# 
   560  0186                     	;# 
   561  018C                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0009                     	;# 
   571  000A                     	;# 
   572  000B                     	;# 
   573  000C                     	;# 
   574  000D                     	;# 
   575  000E                     	;# 
   576  000E                     	;# 
   577  000F                     	;# 
   578  0010                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0014                     	;# 
   583  0015                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  001D                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  0081                     	;# 
   597  0085                     	;# 
   598  0086                     	;# 
   599  0087                     	;# 
   600  0089                     	;# 
   601  008C                     	;# 
   602  008D                     	;# 
   603  008E                     	;# 
   604  008F                     	;# 
   605  0090                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0096                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009F                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  0185                     	;# 
   629  0186                     	;# 
   630  018C                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  008F                     	;# 
   674  0090                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0093                     	;# 
   678  0093                     	;# 
   679  0094                     	;# 
   680  0095                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0096                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009F                     	;# 
   689  0108                     	;# 
   690  0109                     	;# 
   691  010C                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010D                     	;# 
   695  010E                     	;# 
   696  010F                     	;# 
   697  0185                     	;# 
   698  0186                     	;# 
   699  018C                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0009                     	;# 
   709  000A                     	;# 
   710  000B                     	;# 
   711  000C                     	;# 
   712  000D                     	;# 
   713  000E                     	;# 
   714  000E                     	;# 
   715  000F                     	;# 
   716  0010                     	;# 
   717  0011                     	;# 
   718  0012                     	;# 
   719  0013                     	;# 
   720  0014                     	;# 
   721  0015                     	;# 
   722  0015                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001B                     	;# 
   730  001C                     	;# 
   731  001D                     	;# 
   732  001E                     	;# 
   733  001F                     	;# 
   734  0081                     	;# 
   735  0085                     	;# 
   736  0086                     	;# 
   737  0087                     	;# 
   738  0089                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  008F                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0093                     	;# 
   747  0093                     	;# 
   748  0094                     	;# 
   749  0095                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0096                     	;# 
   753  0098                     	;# 
   754  0099                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009F                     	;# 
   758  0108                     	;# 
   759  0109                     	;# 
   760  010C                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  010F                     	;# 
   766  0185                     	;# 
   767  0186                     	;# 
   768  018C                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0009                     	;# 
   778  000A                     	;# 
   779  000B                     	;# 
   780  000C                     	;# 
   781  000D                     	;# 
   782  000E                     	;# 
   783  000E                     	;# 
   784  000F                     	;# 
   785  0010                     	;# 
   786  0011                     	;# 
   787  0012                     	;# 
   788  0013                     	;# 
   789  0014                     	;# 
   790  0015                     	;# 
   791  0015                     	;# 
   792  0016                     	;# 
   793  0017                     	;# 
   794  0018                     	;# 
   795  0019                     	;# 
   796  001A                     	;# 
   797  001B                     	;# 
   798  001B                     	;# 
   799  001C                     	;# 
   800  001D                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  0081                     	;# 
   804  0085                     	;# 
   805  0086                     	;# 
   806  0087                     	;# 
   807  0089                     	;# 
   808  008C                     	;# 
   809  008D                     	;# 
   810  008E                     	;# 
   811  008F                     	;# 
   812  0090                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0096                     	;# 
   822  0098                     	;# 
   823  0099                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009F                     	;# 
   827  0108                     	;# 
   828  0109                     	;# 
   829  010C                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010D                     	;# 
   833  010E                     	;# 
   834  010F                     	;# 
   835  0185                     	;# 
   836  0186                     	;# 
   837  018C                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0009                     	;# 
   847  000A                     	;# 
   848  000B                     	;# 
   849  000C                     	;# 
   850  000D                     	;# 
   851  000E                     	;# 
   852  000E                     	;# 
   853  000F                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0013                     	;# 
   858  0014                     	;# 
   859  0015                     	;# 
   860  0015                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001B                     	;# 
   868  001C                     	;# 
   869  001D                     	;# 
   870  001E                     	;# 
   871  001F                     	;# 
   872  0081                     	;# 
   873  0085                     	;# 
   874  0086                     	;# 
   875  0087                     	;# 
   876  0089                     	;# 
   877  008C                     	;# 
   878  008D                     	;# 
   879  008E                     	;# 
   880  008F                     	;# 
   881  0090                     	;# 
   882  0091                     	;# 
   883  0092                     	;# 
   884  0093                     	;# 
   885  0093                     	;# 
   886  0094                     	;# 
   887  0095                     	;# 
   888  0095                     	;# 
   889  0096                     	;# 
   890  0096                     	;# 
   891  0098                     	;# 
   892  0099                     	;# 
   893  009C                     	;# 
   894  009D                     	;# 
   895  009F                     	;# 
   896  0108                     	;# 
   897  0109                     	;# 
   898  010C                     	;# 
   899  010C                     	;# 
   900  010D                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  010F                     	;# 
   904  0185                     	;# 
   905  0186                     	;# 
   906  018C                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000D                     	;# 
   920  000E                     	;# 
   921  000E                     	;# 
   922  000F                     	;# 
   923  0010                     	;# 
   924  0011                     	;# 
   925  0012                     	;# 
   926  0013                     	;# 
   927  0014                     	;# 
   928  0015                     	;# 
   929  0015                     	;# 
   930  0016                     	;# 
   931  0017                     	;# 
   932  0018                     	;# 
   933  0019                     	;# 
   934  001A                     	;# 
   935  001B                     	;# 
   936  001B                     	;# 
   937  001C                     	;# 
   938  001D                     	;# 
   939  001E                     	;# 
   940  001F                     	;# 
   941  0081                     	;# 
   942  0085                     	;# 
   943  0086                     	;# 
   944  0087                     	;# 
   945  0089                     	;# 
   946  008C                     	;# 
   947  008D                     	;# 
   948  008E                     	;# 
   949  008F                     	;# 
   950  0090                     	;# 
   951  0091                     	;# 
   952  0092                     	;# 
   953  0093                     	;# 
   954  0093                     	;# 
   955  0094                     	;# 
   956  0095                     	;# 
   957  0095                     	;# 
   958  0096                     	;# 
   959  0096                     	;# 
   960  0098                     	;# 
   961  0099                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009F                     	;# 
   965  0108                     	;# 
   966  0109                     	;# 
   967  010C                     	;# 
   968  010C                     	;# 
   969  010D                     	;# 
   970  010D                     	;# 
   971  010E                     	;# 
   972  010F                     	;# 
   973  0185                     	;# 
   974  0186                     	;# 
   975  018C                     	;# 
   976  0000                     	;# 
   977  0001                     	;# 
   978  0002                     	;# 
   979  0003                     	;# 
   980  0004                     	;# 
   981  0005                     	;# 
   982  0006                     	;# 
   983  0007                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  000E                     	;# 
   991  000F                     	;# 
   992  0010                     	;# 
   993  0011                     	;# 
   994  0012                     	;# 
   995  0013                     	;# 
   996  0014                     	;# 
   997  0015                     	;# 
   998  0015                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001B                     	;# 
  1006  001C                     	;# 
  1007  001D                     	;# 
  1008  001E                     	;# 
  1009  001F                     	;# 
  1010  0081                     	;# 
  1011  0085                     	;# 
  1012  0086                     	;# 
  1013  0087                     	;# 
  1014  0089                     	;# 
  1015  008C                     	;# 
  1016  008D                     	;# 
  1017  008E                     	;# 
  1018  008F                     	;# 
  1019  0090                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0093                     	;# 
  1024  0094                     	;# 
  1025  0095                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0096                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009C                     	;# 
  1032  009D                     	;# 
  1033  009F                     	;# 
  1034  0108                     	;# 
  1035  0109                     	;# 
  1036  010C                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010D                     	;# 
  1040  010E                     	;# 
  1041  010F                     	;# 
  1042  0185                     	;# 
  1043  0186                     	;# 
  1044  018C                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  000E                     	;# 
  1060  000F                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0013                     	;# 
  1065  0014                     	;# 
  1066  0015                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001D                     	;# 
  1077  001E                     	;# 
  1078  001F                     	;# 
  1079  0081                     	;# 
  1080  0085                     	;# 
  1081  0086                     	;# 
  1082  0087                     	;# 
  1083  0089                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  008F                     	;# 
  1088  0090                     	;# 
  1089  0091                     	;# 
  1090  0092                     	;# 
  1091  0093                     	;# 
  1092  0093                     	;# 
  1093  0094                     	;# 
  1094  0095                     	;# 
  1095  0095                     	;# 
  1096  0096                     	;# 
  1097  0096                     	;# 
  1098  0098                     	;# 
  1099  0099                     	;# 
  1100  009C                     	;# 
  1101  009D                     	;# 
  1102  009F                     	;# 
  1103  0108                     	;# 
  1104  0109                     	;# 
  1105  010C                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010D                     	;# 
  1109  010E                     	;# 
  1110  010F                     	;# 
  1111  0185                     	;# 
  1112  0186                     	;# 
  1113  018C                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0009                     	;# 
  1123  000A                     	;# 
  1124  000B                     	;# 
  1125  000C                     	;# 
  1126  000D                     	;# 
  1127  000E                     	;# 
  1128  000E                     	;# 
  1129  000F                     	;# 
  1130  0010                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  0081                     	;# 
  1149  0085                     	;# 
  1150  0086                     	;# 
  1151  0087                     	;# 
  1152  0089                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  008F                     	;# 
  1157  0090                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0093                     	;# 
  1162  0094                     	;# 
  1163  0095                     	;# 
  1164  0095                     	;# 
  1165  0096                     	;# 
  1166  0096                     	;# 
  1167  0098                     	;# 
  1168  0099                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009F                     	;# 
  1172  0108                     	;# 
  1173  0109                     	;# 
  1174  010C                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010D                     	;# 
  1178  010E                     	;# 
  1179  010F                     	;# 
  1180  0185                     	;# 
  1181  0186                     	;# 
  1182  018C                     	;# 
  1183  0000                     	;# 
  1184  0001                     	;# 
  1185  0002                     	;# 
  1186  0003                     	;# 
  1187  0004                     	;# 
  1188  0005                     	;# 
  1189  0006                     	;# 
  1190  0007                     	;# 
  1191  0009                     	;# 
  1192  000A                     	;# 
  1193  000B                     	;# 
  1194  000C                     	;# 
  1195  000D                     	;# 
  1196  000E                     	;# 
  1197  000E                     	;# 
  1198  000F                     	;# 
  1199  0010                     	;# 
  1200  0011                     	;# 
  1201  0012                     	;# 
  1202  0013                     	;# 
  1203  0014                     	;# 
  1204  0015                     	;# 
  1205  0015                     	;# 
  1206  0016                     	;# 
  1207  0017                     	;# 
  1208  0018                     	;# 
  1209  0019                     	;# 
  1210  001A                     	;# 
  1211  001B                     	;# 
  1212  001B                     	;# 
  1213  001C                     	;# 
  1214  001D                     	;# 
  1215  001E                     	;# 
  1216  001F                     	;# 
  1217  0081                     	;# 
  1218  0085                     	;# 
  1219  0086                     	;# 
  1220  0087                     	;# 
  1221  0089                     	;# 
  1222  008C                     	;# 
  1223  008D                     	;# 
  1224  008E                     	;# 
  1225  008F                     	;# 
  1226  0090                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0093                     	;# 
  1230  0093                     	;# 
  1231  0094                     	;# 
  1232  0095                     	;# 
  1233  0095                     	;# 
  1234  0096                     	;# 
  1235  0096                     	;# 
  1236  0098                     	;# 
  1237  0099                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009F                     	;# 
  1241  0108                     	;# 
  1242  0109                     	;# 
  1243  010C                     	;# 
  1244  010C                     	;# 
  1245  010D                     	;# 
  1246  010D                     	;# 
  1247  010E                     	;# 
  1248  010F                     	;# 
  1249  0185                     	;# 
  1250  0186                     	;# 
  1251  018C                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  000E                     	;# 
  1267  000F                     	;# 
  1268  0010                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0014                     	;# 
  1273  0015                     	;# 
  1274  0015                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001B                     	;# 
  1282  001C                     	;# 
  1283  001D                     	;# 
  1284  001E                     	;# 
  1285  001F                     	;# 
  1286  0081                     	;# 
  1287  0085                     	;# 
  1288  0086                     	;# 
  1289  0087                     	;# 
  1290  0089                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  008F                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0093                     	;# 
  1299  0093                     	;# 
  1300  0094                     	;# 
  1301  0095                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0096                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009F                     	;# 
  1310  0108                     	;# 
  1311  0109                     	;# 
  1312  010C                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  010F                     	;# 
  1318  0185                     	;# 
  1319  0186                     	;# 
  1320  018C                     	;# 
  1321  001F                     _ADCON0	set	31
  1322  001E                     _ADRES	set	30
  1323  0005                     _PORTA	set	5
  1324  0006                     _PORTB	set	6
  1325  0007                     _PORTC	set	7
  1326  0010                     _T1CON	set	16
  1327  000F                     _TMR1H	set	15
  1328  000E                     _TMR1L	set	14
  1329  005F                     _GIE	set	95
  1330  00F9                     _GO_nDONE	set	249
  1331  005E                     _PEIE	set	94
  1332  002D                     _RA5	set	45
  1333  002E                     _RA6	set	46
  1334  002F                     _RA7	set	47
  1335  0032                     _RB2	set	50
  1336  0033                     _RB3	set	51
  1337  0060                     _TMR1IF	set	96
  1338  009F                     _ADCON1	set	159
  1339  009D                     _FVRCON	set	157
  1340  0090                     _OSCCON	set	144
  1341  0085                     _TRISA	set	133
  1342  0086                     _TRISB	set	134
  1343  0087                     _TRISC	set	135
  1344  0095                     _WPUB	set	149
  1345  0408                     _PS0	set	1032
  1346  0409                     _PS1	set	1033
  1347  040A                     _PS2	set	1034
  1348  040B                     _PSA	set	1035
  1349  0460                     _TMR1IE	set	1120
  1350  0185                     _ANSELA	set	389
  1351  0186                     _ANSELB	set	390
  1352                           
  1353                           	psect	text0
  1354  0000                     __ptext0:	
  1355                           ; #config settings
  1356                           
  1357                           
  1358                           ;psect for function _TMR1_ISR
  1359  0000                     
  1360                           	psect	cinit
  1361  0013                     start_initialization:	
  1362  0013                     __initialization:	
  1363                           
  1364                           ; Clear objects allocated to COMMON
  1365  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1366  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1367  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1368  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1369                           
  1370                           ; Clear objects allocated to BANK0
  1371  0017  1383               	bcf	3,7	;select IRP bank0
  1372  0018  3020               	movlw	low __pbssBANK0
  1373  0019  0084               	movwf	4
  1374  001A  3056               	movlw	low (__pbssBANK0+54)
  1375  001B  158A  238D  118A   	fcall	clear_ram0
  1376                           
  1377                           ; Clear objects allocated to BANK1
  1378  001E  30A0               	movlw	low __pbssBANK1
  1379  001F  0084               	movwf	4
  1380  0020  30EF               	movlw	low (__pbssBANK1+79)
  1381  0021  158A  238D         	fcall	clear_ram0
  1382  0023                     end_of_initialization:	
  1383                           ;End of C runtime variable initialization code
  1384                           
  1385  0023                     __end_of__initialization:	
  1386  0023  0183               	clrf	3
  1387  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1388                           
  1389                           	psect	bssCOMMON
  1390  0076                     __pbssCOMMON:	
  1391  0076                     _LED:	
  1392  0076                     	ds	1
  1393  0077                     _Light:	
  1394  0077                     	ds	1
  1395  0078                     _Lights:	
  1396  0078                     	ds	1
  1397  0079                     _LightsControl:	
  1398  0079                     	ds	1
  1399                           
  1400                           	psect	bssBANK0
  1401  0020                     __pbssBANK0:	
  1402  0020                     _myMain:	
  1403  0020                     	ds	6
  1404  0026                     _SYSC:	
  1405  0026                     	ds	5
  1406  002B                     __CDS:	
  1407  002B                     	ds	5
  1408  0030                     _PIRLED:	
  1409  0030                     	ds	4
  1410  0034                     _Timer1:	
  1411  0034                     	ds	3
  1412  0037                     _WDT:	
  1413  0037                     	ds	2
  1414  0039                     _Cmd:	
  1415  0039                     	ds	1
  1416  003A                     _SwDetect:	
  1417  003A                     	ds	1
  1418  003B                     _Temp:	
  1419  003B                     	ds	12
  1420  0047                     _Lights1:	
  1421  0047                     	ds	7
  1422  004E                     _VarLED1:	
  1423  004E                     	ds	4
  1424  0052                     _VarLED2:	
  1425  0052                     	ds	4
  1426                           
  1427                           	psect	bssBANK1
  1428  00A0                     __pbssBANK1:	
  1429  00A0                     __PIR:	
  1430  00A0                     	ds	46
  1431  00CE                     _Load:	
  1432  00CE                     	ds	33
  1433                           
  1434                           	psect	clrtext
  1435  0B8D                     clear_ram0:	
  1436                           ;	Called with FSR containing the base address, and
  1437                           ;	W with the last address+1
  1438                           
  1439  0B8D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1440  0B8E                     clrloop0:	
  1441  0B8E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1442  0B8F  0A84               	incf	4,f	;increment pointer
  1443  0B90  0604               	xorwf	4,w	;XOR with final address
  1444  0B91  1903               	btfsc	3,2	;have we reached the end yet?
  1445  0B92  3400               	retlw	0	;all done for this memory range, return
  1446  0B93  0604               	xorwf	4,w	;XOR again to restore value
  1447  0B94  2B8E               	goto	clrloop0	;do the next byte
  1448                           
  1449                           	psect	cstackCOMMON
  1450  0070                     __pcstackCOMMON:	
  1451  0070                     ?_setLED_Initialization:	
  1452  0070                     ?_setPIRLED_Main:	
  1453                           ; 0 bytes @ 0x0
  1454                           
  1455  0070                     ?_Fosc_Set:	
  1456                           ; 0 bytes @ 0x0
  1457                           
  1458  0070                     ?_IO_Set:	
  1459                           ; 0 bytes @ 0x0
  1460                           
  1461  0070                     ?_TMR1_Set:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_ADC_Set:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_WDT_Set:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_TMR1_ISR:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ??_TMR1_ISR:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ?_Timeout_Counter:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ?_set_TimeoutCleared:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ?_WDT_Clearing:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_myMain_Initialization:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ?_SYSC_Initialization:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_Temp_Initialization:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Load_Initialization:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_Lights_Initialization:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_PIR_Initialization:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_DetectSYSC_Signal:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_getLoad_AD:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_getTemp_AD:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ?_my_MainTimer:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_SYSC_Main:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_Temp_Main:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_Load_Main:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_Lights_Main:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_PIR_Main:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Exception_Main:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_setLoad_AH_AL_Restore:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_setTemp_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_setTemp_Main:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_setSYSC_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_setSYSC_Main:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_setLights_Initialization:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_setLights_Main:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_Lights_Control:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_setLights_Line:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_CDS_Initialization:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_CDS_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_LedPointSelect:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_LED_Initialization:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_LED_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Mcu_Initialization:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_ISR:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ??_ISR:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_WDT_Main:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_LightsPointSelect:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_getAll_Lights_Line:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_getLights_Status:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_getLight_LoadGO:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_getLight_Load_Status:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_getLights_Allow_Condition:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_getCDS_Status:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_getMain_All_LightsStatus:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_getMain_All_Error_Status:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_getMain_Lights_Count:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_getLoad_OK:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     getLights_Allow_Condition@lights:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623                           
  1624                           ; 1 bytes @ 0x0
  1625  0070                     	ds	4
  1626  0074                     ??_Fosc_Set:	
  1627  0074                     ??_IO_Set:	
  1628                           ; 0 bytes @ 0x4
  1629                           
  1630  0074                     ??_TMR1_Set:	
  1631                           ; 0 bytes @ 0x4
  1632                           
  1633  0074                     ??_ADC_Set:	
  1634                           ; 0 bytes @ 0x4
  1635                           
  1636  0074                     ??_WDT_Set:	
  1637                           ; 0 bytes @ 0x4
  1638                           
  1639  0074                     ??_Timeout_Counter:	
  1640                           ; 0 bytes @ 0x4
  1641                           
  1642  0074                     ??_set_TimeoutCleared:	
  1643                           ; 0 bytes @ 0x4
  1644                           
  1645  0074                     ??_WDT_Clearing:	
  1646                           ; 0 bytes @ 0x4
  1647                           
  1648  0074                     ??_myMain_Initialization:	
  1649                           ; 0 bytes @ 0x4
  1650                           
  1651  0074                     ??_SYSC_Initialization:	
  1652                           ; 0 bytes @ 0x4
  1653                           
  1654  0074                     ??_Temp_Initialization:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0074                     ??_PIR_Initialization:	
  1658                           ; 0 bytes @ 0x4
  1659                           
  1660  0074                     ??_DetectSYSC_Signal:	
  1661                           ; 0 bytes @ 0x4
  1662                           
  1663  0074                     ??_my_MainTimer:	
  1664                           ; 0 bytes @ 0x4
  1665                           
  1666  0074                     ??_setLoad_AH_AL_Restore:	
  1667                           ; 0 bytes @ 0x4
  1668                           
  1669  0074                     ??_getLight_LoadGO:	
  1670                           ; 0 bytes @ 0x4
  1671                           
  1672  0074                     ??_getLight_Load_Status:	
  1673                           ; 0 bytes @ 0x4
  1674                           
  1675  0074                     ??_setTemp_Initialization:	
  1676                           ; 0 bytes @ 0x4
  1677                           
  1678  0074                     ??_setSYSC_Initialization:	
  1679                           ; 0 bytes @ 0x4
  1680                           
  1681  0074                     ??_setLights_Line:	
  1682                           ; 0 bytes @ 0x4
  1683                           
  1684  0074                     ??_CDS_Initialization:	
  1685                           ; 0 bytes @ 0x4
  1686                           
  1687  0074                     ??_getCDS_Status:	
  1688                           ; 0 bytes @ 0x4
  1689                           
  1690  0074                     ??_LedPointSelect:	
  1691                           ; 0 bytes @ 0x4
  1692                           
  1693  0074                     ??_WDT_Main:	
  1694                           ; 0 bytes @ 0x4
  1695                           
  1696  0074                     ??_getMain_All_LightsStatus:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_getMain_All_Error_Status:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_getMain_Lights_Count:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_getLoad_OK:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_LightsPointSelect:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??___wmul:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??___awdiv:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??___lwdiv:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ?_getAD:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     getCDS_Status@status:	
  1724                           ; 1 bytes @ 0x4
  1725                           
  1726  0074                     getAD@adcon1:	
  1727                           ; 1 bytes @ 0x4
  1728                           
  1729  0074                     getMain_All_LightsStatus@status:	
  1730                           ; 1 bytes @ 0x4
  1731                           
  1732  0074                     getMain_Lights_Count@count:	
  1733                           ; 1 bytes @ 0x4
  1734                           
  1735  0074                     getLoad_OK@ok:	
  1736                           ; 1 bytes @ 0x4
  1737                           
  1738  0074                     setLights_Line@lights:	
  1739                           ; 1 bytes @ 0x4
  1740                           
  1741  0074                     getLight_LoadGO@loadgo:	
  1742                           ; 1 bytes @ 0x4
  1743                           
  1744  0074                     getLight_Load_Status@loadstatus:	
  1745                           ; 1 bytes @ 0x4
  1746                           
  1747  0074                     ___wmul@product:	
  1748                           ; 1 bytes @ 0x4
  1749                           
  1750                           
  1751                           ; 2 bytes @ 0x4
  1752  0074                     	ds	1
  1753  0075                     ??_getAD:	
  1754  0075                     ??_SYSC_Main:	
  1755                           ; 0 bytes @ 0x5
  1756                           
  1757  0075                     ??_setTemp_Main:	
  1758                           ; 0 bytes @ 0x5
  1759                           
  1760  0075                     ??_setSYSC_Main:	
  1761                           ; 0 bytes @ 0x5
  1762                           
  1763  0075                     ??_getLights_Allow_Condition:	
  1764                           ; 0 bytes @ 0x5
  1765                           
  1766  0075                     ?_setLights:	
  1767                           ; 0 bytes @ 0x5
  1768                           
  1769  0075                     ??_Mcu_Initialization:	
  1770                           ; 0 bytes @ 0x5
  1771                           
  1772  0075                     LedPointSelect@led:	
  1773                           ; 0 bytes @ 0x5
  1774                           
  1775  0075                     getAD@adcon0:	
  1776                           ; 1 bytes @ 0x5
  1777                           
  1778  0075                     getMain_Lights_Count@status1:	
  1779                           ; 1 bytes @ 0x5
  1780                           
  1781  0075                     setLoad_AH_AL_Restore@i:	
  1782                           ; 1 bytes @ 0x5
  1783                           
  1784  0075                     LightsPointSelect@lights:	
  1785                           ; 1 bytes @ 0x5
  1786                           
  1787  0075                     setLights@status:	
  1788                           ; 1 bytes @ 0x5
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0x5
  1792  0075                     	ds	1
  1793  0076                     ??_setLED_Initialization:	
  1794  0076                     ??_setLED:	
  1795                           ; 0 bytes @ 0x6
  1796                           
  1797  0076                     ??_Load_Initialization:	
  1798                           ; 0 bytes @ 0x6
  1799                           
  1800  0076                     ??_Lights_Initialization:	
  1801                           ; 0 bytes @ 0x6
  1802                           
  1803  0076                     ??_Temp_Main:	
  1804                           ; 0 bytes @ 0x6
  1805                           
  1806  0076                     ??_Lights_Main:	
  1807                           ; 0 bytes @ 0x6
  1808                           
  1809  0076                     ??_getAll_Lights_Line:	
  1810                           ; 0 bytes @ 0x6
  1811                           
  1812  0076                     ??_getLights_Status:	
  1813                           ; 0 bytes @ 0x6
  1814                           
  1815  0076                     ??_setLights_Initialization:	
  1816                           ; 0 bytes @ 0x6
  1817                           
  1818  0076                     ??_setLights_Main:	
  1819                           ; 0 bytes @ 0x6
  1820                           
  1821  0076                     ??_LED_Initialization:	
  1822                           ; 0 bytes @ 0x6
  1823                           
  1824  0076                     ??_LED_Main:	
  1825                           ; 0 bytes @ 0x6
  1826                           
  1827                           
  1828                           	psect	cstackBANK0
  1829  0056                     __pcstackBANK0:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0056                     ?_setLED:	
  1833  0056                     ??_getLoad_AD:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0056                     ??_getTemp_AD:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0056                     ?_setLights_Trigger:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0056                     ??_setLights:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0056                     ??_CDS_Main:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0056                     ?_getCDS_AD:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0056                     ?___wmul:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0056                     ?___awdiv:	
  1855                           ; 2 bytes @ 0x0
  1856                           
  1857  0056                     ?___lwdiv:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  0056                     getCDS_AD@channel2:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863  0056                     setLED@command:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0056                     setLights_Initialization@lights:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0056                     getLights_Status@lights:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0056                     setLights_Trigger@command:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0056                     getAll_Lights_Line@line:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0056                     getLights_Allow_Condition@allow:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0056                     _getMain_All_Error_Status$2327:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0056                     ___wmul@multiplier:	
  1885                           ; 2 bytes @ 0x0
  1886                           
  1887  0056                     ___awdiv@divisor:	
  1888                           ; 2 bytes @ 0x0
  1889                           
  1890  0056                     ___lwdiv@divisor:	
  1891                           ; 2 bytes @ 0x0
  1892                           
  1893                           
  1894                           ; 2 bytes @ 0x0
  1895  0056                     	ds	1
  1896  0057                     ??_setLights_Trigger:	
  1897  0057                     ??_getCDS_AD:	
  1898                           ; 0 bytes @ 0x1
  1899                           
  1900  0057                     setLED@led:	
  1901                           ; 0 bytes @ 0x1
  1902                           
  1903  0057                     setLights@lights:	
  1904                           ; 1 bytes @ 0x1
  1905                           
  1906  0057                     getLights_Status@status:	
  1907                           ; 1 bytes @ 0x1
  1908                           
  1909  0057                     _getLights_Allow_Condition$4605:	
  1910                           ; 1 bytes @ 0x1
  1911                           
  1912                           
  1913                           ; 1 bytes @ 0x1
  1914  0057                     	ds	1
  1915  0058                     ??_setPIRLED_Main:	
  1916  0058                     setLED_Initialization@led:	
  1917                           ; 0 bytes @ 0x2
  1918                           
  1919  0058                     getLoad_AD@channel:	
  1920                           ; 1 bytes @ 0x2
  1921                           
  1922  0058                     getTemp_AD@channel:	
  1923                           ; 1 bytes @ 0x2
  1924                           
  1925  0058                     setLights_Main@lights:	
  1926                           ; 1 bytes @ 0x2
  1927                           
  1928  0058                     setLights_Trigger@lights:	
  1929                           ; 1 bytes @ 0x2
  1930                           
  1931  0058                     _getMain_All_Error_Status$2328:	
  1932                           ; 1 bytes @ 0x2
  1933                           
  1934  0058                     ___wmul@multiplicand:	
  1935                           ; 2 bytes @ 0x2
  1936                           
  1937  0058                     ___awdiv@dividend:	
  1938                           ; 2 bytes @ 0x2
  1939                           
  1940  0058                     ___lwdiv@dividend:	
  1941                           ; 2 bytes @ 0x2
  1942                           
  1943                           
  1944                           ; 2 bytes @ 0x2
  1945  0058                     	ds	1
  1946  0059                     getCDS_AD@i:	
  1947  0059                     setPIRLED_Main@count:	
  1948                           ; 1 bytes @ 0x3
  1949                           
  1950  0059                     getLoad_AD@k:	
  1951                           ; 1 bytes @ 0x3
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x3
  1955  0059                     	ds	1
  1956  005A                     getCDS_AD@j:	
  1957  005A                     getMain_All_Error_Status@command:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960  005A                     getLoad_AD@j:	
  1961                           ; 1 bytes @ 0x4
  1962                           
  1963  005A                     ___awdiv@counter:	
  1964                           ; 1 bytes @ 0x4
  1965                           
  1966  005A                     ___lwdiv@counter:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969                           
  1970                           ; 1 bytes @ 0x4
  1971  005A                     	ds	1
  1972  005B                     getCDS_AD@channel1:	
  1973  005B                     getMain_All_Error_Status@status:	
  1974                           ; 1 bytes @ 0x5
  1975                           
  1976  005B                     getLoad_AD@i:	
  1977                           ; 1 bytes @ 0x5
  1978                           
  1979  005B                     ___awdiv@sign:	
  1980                           ; 1 bytes @ 0x5
  1981                           
  1982  005B                     ___lwdiv@quotient:	
  1983                           ; 1 bytes @ 0x5
  1984                           
  1985                           
  1986                           ; 2 bytes @ 0x5
  1987  005B                     	ds	1
  1988  005C                     ??_PIR_Main:	
  1989  005C                     ??_Exception_Main:	
  1990                           ; 0 bytes @ 0x6
  1991                           
  1992  005C                     ___awdiv@quotient:	
  1993                           ; 0 bytes @ 0x6
  1994                           
  1995                           
  1996                           ; 2 bytes @ 0x6
  1997  005C                     	ds	1
  1998  005D                     ??_Load_Main:	
  1999  005D                     Exception_Main@lights:	
  2000                           ; 0 bytes @ 0x7
  2001                           
  2002                           
  2003                           ; 1 bytes @ 0x7
  2004  005D                     	ds	1
  2005  005E                     ?_getPIR_AD:	
  2006  005E                     ??_Lights_Control:	
  2007                           ; 0 bytes @ 0x8
  2008                           
  2009  005E                     Exception_Main@count:	
  2010                           ; 0 bytes @ 0x8
  2011                           
  2012  005E                     setTemp_Main@error:	
  2013                           ; 1 bytes @ 0x8
  2014                           
  2015  005E                     getPIR_AD@channel2:	
  2016                           ; 1 bytes @ 0x8
  2017                           
  2018                           
  2019                           ; 1 bytes @ 0x8
  2020  005E                     	ds	1
  2021  005F                     ??_getPIR_AD:	
  2022  005F                     Exception_Main@status:	
  2023                           ; 0 bytes @ 0x9
  2024                           
  2025  005F                     Load_Main@error:	
  2026                           ; 1 bytes @ 0x9
  2027                           
  2028                           
  2029                           ; 1 bytes @ 0x9
  2030  005F                     	ds	1
  2031  0060                     Load_Main@Load_Status:	
  2032  0060                     Lights_Control@lights:	
  2033                           ; 1 bytes @ 0xA
  2034                           
  2035  0060                     Exception_Main@i:	
  2036                           ; 1 bytes @ 0xA
  2037                           
  2038                           
  2039                           ; 2 bytes @ 0xA
  2040  0060                     	ds	1
  2041  0061                     PIR_Main@error:	
  2042  0061                     Load_Main@i:	
  2043                           ; 1 bytes @ 0xB
  2044                           
  2045                           
  2046                           ; 2 bytes @ 0xB
  2047  0061                     	ds	1
  2048  0062                     Exception_Main@error:	
  2049  0062                     getPIR_AD@j:	
  2050                           ; 1 bytes @ 0xC
  2051                           
  2052  0062                     _PIR_Main$3109:	
  2053                           ; 1 bytes @ 0xC
  2054                           
  2055                           
  2056                           ; 2 bytes @ 0xC
  2057  0062                     	ds	1
  2058  0063                     getPIR_AD@channel1:	
  2059                           
  2060                           ; 1 bytes @ 0xD
  2061  0063                     	ds	1
  2062  0064                     PIR_Main@cds:	
  2063  0064                     getPIR_AD@i:	
  2064                           ; 1 bytes @ 0xE
  2065                           
  2066                           
  2067                           ; 1 bytes @ 0xE
  2068  0064                     	ds	1
  2069  0065                     PIR_Main@LightsStatus:	
  2070                           
  2071                           ; 1 bytes @ 0xF
  2072  0065                     	ds	1
  2073  0066                     ?_main:	
  2074  0066                     main@argc:	
  2075                           ; 2 bytes @ 0x10
  2076                           
  2077                           
  2078                           ; 2 bytes @ 0x10
  2079  0066                     	ds	2
  2080  0068                     main@argv:	
  2081                           
  2082                           ; 2 bytes @ 0x12
  2083  0068                     	ds	2
  2084  006A                     ??_main:	
  2085                           
  2086                           ; 0 bytes @ 0x14
  2087  006A                     	ds	1
  2088                           
  2089                           	psect	maintext
  2090  0F9A                     __pmaintext:	
  2091 ;;
  2092 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2093 ;;
  2094 ;; *************** function _main *****************
  2095 ;; Defined at:
  2096 ;;		line 7 in file "../src/Main_B1.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  argc            2   16[BANK0 ] int 
  2099 ;;  argv            2   18[BANK0 ] PTR PTR unsigned char 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  2   16[BANK0 ] int 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 17F/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2111 ;;      Params:         0       4       0       0
  2112 ;;      Locals:         0       0       0       0
  2113 ;;      Temps:          0       1       0       0
  2114 ;;      Totals:         0       5       0       0
  2115 ;;Total ram usage:        5 bytes
  2116 ;; Hardware stack levels required when called:    6
  2117 ;; This function calls:
  2118 ;;		_CDS_Initialization
  2119 ;;		_CDS_Main
  2120 ;;		_DetectSYSC_Signal
  2121 ;;		_Exception_Main
  2122 ;;		_LED_Initialization
  2123 ;;		_LED_Main
  2124 ;;		_Lights_Initialization
  2125 ;;		_Lights_Main
  2126 ;;		_Load_Initialization
  2127 ;;		_Load_Main
  2128 ;;		_Mcu_Initialization
  2129 ;;		_PIR_Initialization
  2130 ;;		_PIR_Main
  2131 ;;		_SYSC_Initialization
  2132 ;;		_SYSC_Main
  2133 ;;		_Temp_Initialization
  2134 ;;		_Temp_Main
  2135 ;;		_WDT_Main
  2136 ;;		_getCDS_AD
  2137 ;;		_getLoad_AD
  2138 ;;		_getPIR_AD
  2139 ;;		_getTemp_AD
  2140 ;;		_myMain_Initialization
  2141 ;;		_my_MainTimer
  2142 ;; This function is called by:
  2143 ;;		Startup code after reset
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           
  2148                           ;psect for function _main
  2149  0F9A                     _main:	
  2150                           
  2151                           ;Main_B1.c: 8: myMain_Initialization();
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2155  0F9A  158A  2331  158A   	fcall	_myMain_Initialization
  2156                           
  2157                           ;Main_B1.c: 9: Mcu_Initialization();
  2158  0F9D  158A  23F5  158A   	fcall	_Mcu_Initialization
  2159                           
  2160                           ;Main_B1.c: 10: ;;
  2161                           ;Main_B1.c: 11: LED_Initialization();
  2162  0FA0  158A  2375  158A   	fcall	_LED_Initialization
  2163                           
  2164                           ;Main_B1.c: 12: ;;
  2165                           ;Main_B1.c: 14: SYSC_Initialization();
  2166  0FA3  158A  2338  158A   	fcall	_SYSC_Initialization
  2167                           
  2168                           ;Main_B1.c: 15: Temp_Initialization();
  2169  0FA6  158A  233E  158A   	fcall	_Temp_Initialization
  2170                           
  2171                           ;Main_B1.c: 16: Load_Initialization();
  2172  0FA9  158A  2335  158A   	fcall	_Load_Initialization
  2173                           
  2174                           ;Main_B1.c: 17: ;;
  2175                           ;Main_B1.c: 18: ;;
  2176                           ;Main_B1.c: 20: ;;
  2177                           ;Main_B1.c: 21: Lights_Initialization();
  2178  0FAC  158A  2348  158A   	fcall	_Lights_Initialization
  2179                           
  2180                           ;Main_B1.c: 22: CDS_Initialization();
  2181  0FAF  158A  2344  158A   	fcall	_CDS_Initialization
  2182                           
  2183                           ;Main_B1.c: 23: PIR_Initialization();
  2184  0FB2  158A  23B2  158A   	fcall	_PIR_Initialization
  2185  0FB5                     l5271:	
  2186                           ;Main_B1.c: 24: ;;
  2187                           ;Main_B1.c: 25: ;;
  2188                           ;Main_B1.c: 26: ;;
  2189                           ;Main_B1.c: 27: ;;
  2190                           ;Main_B1.c: 28: ;;
  2191                           ;Main_B1.c: 30: while (1) {
  2192                           
  2193                           
  2194                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2195  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0FB7  1C20               	btfss	_myMain,0
  2198  0FB8  2FD8               	goto	l5283
  2199                           
  2200                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2201  0FB9  158A  23BD  158A   	fcall	_DetectSYSC_Signal
  2202                           
  2203                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2204  0FBC  3001               	movlw	1
  2205  0FBD  118A  26B9  158A   	fcall	_getLoad_AD
  2206                           
  2207                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2208  0FC0  3011               	movlw	17
  2209  0FC1  158A  2578  158A   	fcall	_getTemp_AD
  2210                           
  2211                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2212  0FC4  3005               	movlw	5
  2213  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0FC7  00EA               	movwf	??_main
  2216  0FC8  086A               	movf	??_main,w
  2217  0FC9  00D6               	movwf	getCDS_AD@channel2
  2218  0FCA  3029               	movlw	41
  2219  0FCB  158A  259F  158A   	fcall	_getCDS_AD
  2220                           
  2221                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2222  0FCE  3009               	movlw	9
  2223  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0FD1  00EA               	movwf	??_main
  2226  0FD2  086A               	movf	??_main,w
  2227  0FD3  00DE               	movwf	getPIR_AD@channel2
  2228  0FD4  302D               	movlw	45
  2229  0FD5  118A  2402  158A   	fcall	_getPIR_AD
  2230  0FD8                     l5283:	
  2231                           
  2232                           ;Main_B1.c: 57: }
  2233                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2234  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2235  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2236  0FDA  1C34               	btfss	_Timer1,0
  2237  0FDB  2FB5               	goto	l5271
  2238                           
  2239                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2240  0FDC  1034               	bcf	_Timer1,0
  2241                           
  2242                           ;Main_B1.c: 96: my_MainTimer();
  2243  0FDD  158A  24E4  158A   	fcall	_my_MainTimer
  2244                           
  2245                           ;Main_B1.c: 97: WDT_Main();
  2246  0FE0  158A  2426  158A   	fcall	_WDT_Main
  2247                           
  2248                           ;Main_B1.c: 98: ;;
  2249                           ;Main_B1.c: 99: ;;
  2250                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2251  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0FE5  1C20               	btfss	_myMain,0
  2254  0FE6  2FB5               	goto	l5271
  2255                           
  2256                           ;Main_B1.c: 101: ;;
  2257                           ;Main_B1.c: 103: LED_Main();
  2258  0FE7  158A  2332  158A   	fcall	_LED_Main
  2259                           
  2260                           ;Main_B1.c: 104: ;;
  2261                           ;Main_B1.c: 106: SYSC_Main();
  2262  0FEA  158A  233B  158A   	fcall	_SYSC_Main
  2263                           
  2264                           ;Main_B1.c: 107: Temp_Main();
  2265  0FED  158A  2341  158A   	fcall	_Temp_Main
  2266                           
  2267                           ;Main_B1.c: 108: Load_Main();
  2268  0FF0  118A  221B  158A   	fcall	_Load_Main
  2269                           
  2270                           ;Main_B1.c: 109: ;;
  2271                           ;Main_B1.c: 111: Lights_Main();
  2272  0FF3  158A  2535  158A   	fcall	_Lights_Main
  2273                           
  2274                           ;Main_B1.c: 112: ;;
  2275                           ;Main_B1.c: 113: ;;
  2276                           ;Main_B1.c: 114: CDS_Main();
  2277  0FF6  158A  25F9  158A   	fcall	_CDS_Main
  2278                           
  2279                           ;Main_B1.c: 115: PIR_Main();
  2280  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2281                           
  2282                           ;Main_B1.c: 117: ;;
  2283                           ;Main_B1.c: 118: ;;
  2284                           ;Main_B1.c: 119: ;;
  2285                           ;Main_B1.c: 120: ;;
  2286                           ;Main_B1.c: 121: Exception_Main();
  2287  0FFC  118A  2643  158A   	fcall	_Exception_Main
  2288  0FFF  2FB5               	goto	l5271
  2289  1000                     __end_of_main:	
  2290                           ;Main_B1.c: 128: }
  2291                           ;Main_B1.c: 129: }
  2292                           ;Main_B1.c: 163: }
  2293                           ;Main_B1.c: 164: return (0);
  2294                           ;	Return value of _main is never used
  2295                           
  2296                           
  2297                           	psect	text1
  2298  0CE4                     __ptext1:	
  2299 ;; *************** function _my_MainTimer *****************
  2300 ;; Defined at:
  2301 ;;		line 185 in file "../src/Main_B1.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;		None               void
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2315 ;;      Params:         0       0       0       0
  2316 ;;      Locals:         0       0       0       0
  2317 ;;      Temps:          1       0       0       0
  2318 ;;      Totals:         1       0       0       0
  2319 ;;Total ram usage:        1 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    2
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _my_MainTimer
  2331  0CE4                     _my_MainTimer:	
  2332                           
  2333                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2337  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  2338  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  2339  0CE6  1820               	btfsc	_myMain,0
  2340  0CE7  2CF4               	goto	l3795
  2341                           
  2342                           ;Main_B1.c: 188: myMain.PowerCount++;
  2343  0CE8  3001               	movlw	1
  2344  0CE9  00F4               	movwf	??_my_MainTimer
  2345  0CEA  0874               	movf	??_my_MainTimer,w
  2346  0CEB  07A1               	addwf	_myMain+1,f
  2347                           
  2348                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2349  0CEC  0821               	movf	_myMain+1,w
  2350  0CED  3A4B               	xorlw	75
  2351  0CEE  1D03               	skipz
  2352  0CEF  0008               	return
  2353                           
  2354                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2355  0CF0  01A1               	clrf	_myMain+1
  2356                           
  2357                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2358  0CF1  1420               	bsf	_myMain,0
  2359                           
  2360                           ;Main_B1.c: 196: ;;
  2361                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2362  0CF2  1620               	bsf	_myMain,4
  2363                           
  2364                           ;Main_B1.c: 206: }
  2365                           ;Main_B1.c: 207: } else {
  2366  0CF3  0008               	return
  2367  0CF4                     l3795:	
  2368                           
  2369                           ;Main_B1.c: 208: myMain.PowerCount++;
  2370  0CF4  3001               	movlw	1
  2371  0CF5  00F4               	movwf	??_my_MainTimer
  2372  0CF6  0874               	movf	??_my_MainTimer,w
  2373  0CF7  07A1               	addwf	_myMain+1,f
  2374                           
  2375                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2376  0CF8  0821               	movf	_myMain+1,w
  2377  0CF9  3A32               	xorlw	50
  2378  0CFA  1D03               	skipz
  2379  0CFB  0008               	return
  2380                           
  2381                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2382  0CFC  01A1               	clrf	_myMain+1
  2383  0CFD  0008               	return
  2384  0CFE                     __end_of_my_MainTimer:	
  2385                           
  2386                           	psect	text2
  2387  0B31                     __ptext2:	
  2388 ;; *************** function _myMain_Initialization *****************
  2389 ;; Defined at:
  2390 ;;		line 170 in file "../src/Main_B1.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;		None               void
  2397 ;; Registers used:
  2398 ;;		None
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2404 ;;      Params:         0       0       0       0
  2405 ;;      Locals:         0       0       0       0
  2406 ;;      Temps:          0       0       0       0
  2407 ;;      Totals:         0       0       0       0
  2408 ;;Total ram usage:        0 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    2
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_main
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           
  2419                           ;psect for function _myMain_Initialization
  2420  0B31                     _myMain_Initialization:	
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in _myMain_Initialization: []
  2424  0B31  0008               	return
  2425  0B32                     __end_of_myMain_Initialization:	
  2426                           
  2427                           	psect	text3
  2428  0D78                     __ptext3:	
  2429 ;; *************** function _getTemp_AD *****************
  2430 ;; Defined at:
  2431 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  channel         1    wreg     unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  channel         1    2[BANK0 ] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;		None               void
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0, pclath, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2445 ;;      Params:         0       0       0       0
  2446 ;;      Locals:         0       1       0       0
  2447 ;;      Temps:          0       2       0       0
  2448 ;;      Totals:         0       3       0       0
  2449 ;;Total ram usage:        3 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    4
  2452 ;; This function calls:
  2453 ;;		_getAD
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           
  2460                           ;psect for function _getTemp_AD
  2461  0D78                     _getTemp_AD:	
  2462                           
  2463                           ;incstack = 0
  2464                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2465                           ;getTemp_AD@channel stored from wreg
  2466  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0D7A  00D8               	movwf	getTemp_AD@channel
  2469                           
  2470                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2471  0D7B  1D3B               	btfss	_Temp,2
  2472  0D7C  0008               	return
  2473                           
  2474                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2475  0D7D  3070               	movlw	112
  2476  0D7E  00D6               	movwf	??_getTemp_AD
  2477  0D7F  0856               	movf	??_getTemp_AD,w
  2478  0D80  00F4               	movwf	getAD@adcon1
  2479  0D81  0858               	movf	getTemp_AD@channel,w
  2480  0D82  158A  2519  158A   	fcall	_getAD
  2481  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0D87  00D7               	movwf	??_getTemp_AD+1
  2484  0D88  0857               	movf	??_getTemp_AD+1,w
  2485  0D89  00C4               	movwf	_Temp+9
  2486                           
  2487                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2488  0D8A  0844               	movf	_Temp+9,w
  2489  0D8B  1903               	btfsc	3,2
  2490  0D8C  0008               	return
  2491                           
  2492                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2493  0D8D  0844               	movf	_Temp+9,w
  2494  0D8E  0242               	subwf	_Temp+7,w
  2495  0D8F  1803               	skipnc
  2496  0D90  2D96               	goto	l4813
  2497                           
  2498                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2499  0D91  0844               	movf	_Temp+9,w
  2500  0D92  00D6               	movwf	??_getTemp_AD
  2501  0D93  0856               	movf	??_getTemp_AD,w
  2502  0D94  00C2               	movwf	_Temp+7
  2503                           
  2504                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2505  0D95  0008               	return
  2506  0D96                     l4813:	
  2507  0D96  0844               	movf	_Temp+9,w
  2508  0D97  0243               	subwf	_Temp+8,w
  2509  0D98  1803               	skipnc
  2510  0D99  0008               	return
  2511                           
  2512                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2513  0D9A  0844               	movf	_Temp+9,w
  2514  0D9B  00D6               	movwf	??_getTemp_AD
  2515  0D9C  0856               	movf	??_getTemp_AD,w
  2516  0D9D  00C3               	movwf	_Temp+8
  2517  0D9E  0008               	return
  2518  0D9F                     __end_of_getTemp_AD:	
  2519                           
  2520                           	psect	text4
  2521  0402                     __ptext4:	
  2522 ;; *************** function _getPIR_AD *****************
  2523 ;; Defined at:
  2524 ;;		line 299 in file "../src/PIR_B1.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  channel1        1    wreg     unsigned char 
  2527 ;;  channel2        1    8[BANK0 ] unsigned char 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  channel1        1   13[BANK0 ] unsigned char 
  2530 ;;  i               1   14[BANK0 ] unsigned char 
  2531 ;;  j               1   12[BANK0 ] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;		None               void
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2541 ;;      Params:         0       1       0       0
  2542 ;;      Locals:         0       3       0       0
  2543 ;;      Temps:          0       3       0       0
  2544 ;;      Totals:         0       7       0       0
  2545 ;;Total ram usage:        7 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    4
  2548 ;; This function calls:
  2549 ;;		___awdiv
  2550 ;;		___lwdiv
  2551 ;;		_getAD
  2552 ;; This function is called by:
  2553 ;;		_main
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _getPIR_AD
  2559  0402                     _getPIR_AD:	
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2563                           ;getPIR_AD@channel1 stored from wreg
  2564  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2566  0404  00E3               	movwf	getPIR_AD@channel1
  2567                           
  2568                           ;PIR_B1.c: 300: char i = 0, j = 0;
  2569  0405  01E4               	clrf	getPIR_AD@i
  2570  0406  01E2               	clrf	getPIR_AD@j
  2571                           
  2572                           ;PIR_B1.c: 302: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2573  0407  1683               	bsf	3,5	;RP0=1, select bank1
  2574  0408  1303               	bcf	3,6	;RP1=0, select bank1
  2575  0409  1CA0               	btfss	__PIR^(0+128),1
  2576  040A  0008               	return
  2577  040B  1920               	btfsc	__PIR^(0+128),2
  2578  040C  0008               	return
  2579                           
  2580                           ;PIR_B1.c: 303: _PIR.GO = 1;
  2581  040D  1520               	bsf	__PIR^(0+128),2
  2582                           
  2583                           ;PIR_B1.c: 304: _PIR.ADRES = getAD(channel1, 0x70);
  2584  040E  3070               	movlw	112
  2585  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0411  00DF               	movwf	??_getPIR_AD
  2588  0412  085F               	movf	??_getPIR_AD,w
  2589  0413  00F4               	movwf	getAD@adcon1
  2590  0414  0863               	movf	getPIR_AD@channel1,w
  2591  0415  158A  2519  118A   	fcall	_getAD
  2592  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2594  041A  00E0               	movwf	??_getPIR_AD+1
  2595  041B  0860               	movf	??_getPIR_AD+1,w
  2596  041C  1683               	bsf	3,5	;RP0=1, select bank1
  2597  041D  1303               	bcf	3,6	;RP1=0, select bank1
  2598  041E  00A2               	movwf	(__PIR^(0+128)+2)
  2599                           
  2600                           ;PIR_B1.c: 305: _PIR.VRAD = _PIR.ADRES / 25;
  2601  041F  3019               	movlw	25
  2602  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0422  00D6               	movwf	___awdiv@divisor
  2605  0423  3000               	movlw	0
  2606  0424  00D7               	movwf	___awdiv@divisor+1
  2607  0425  1683               	bsf	3,5	;RP0=1, select bank1
  2608  0426  1303               	bcf	3,6	;RP1=0, select bank1
  2609  0427  0822               	movf	(__PIR^(0+128)+2),w
  2610  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2612  042A  00DF               	movwf	??_getPIR_AD
  2613  042B  01E0               	clrf	??_getPIR_AD+1
  2614  042C  085F               	movf	??_getPIR_AD,w
  2615  042D  00D8               	movwf	___awdiv@dividend
  2616  042E  0860               	movf	??_getPIR_AD+1,w
  2617  042F  00D9               	movwf	___awdiv@dividend+1
  2618  0430  158A  273D  118A   	fcall	___awdiv
  2619  0433  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0434  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0435  0856               	movf	?___awdiv,w
  2622  0436  00E1               	movwf	??_getPIR_AD+2
  2623  0437  0861               	movf	??_getPIR_AD+2,w
  2624  0438  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0439  1303               	bcf	3,6	;RP1=0, select bank1
  2626  043A  00A3               	movwf	(__PIR^(0+128)+3)
  2627                           
  2628                           ;PIR_B1.c: 306: _PIR.VRAD1 = _PIR.ADRES;
  2629  043B  0822               	movf	(__PIR^(0+128)+2),w
  2630  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2631  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2632  043E  00DF               	movwf	??_getPIR_AD
  2633  043F  085F               	movf	??_getPIR_AD,w
  2634  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2635  0441  1303               	bcf	3,6	;RP1=0, select bank1
  2636  0442  00A4               	movwf	(__PIR^(0+128)+4)
  2637                           
  2638                           ;PIR_B1.c: 307: _PIR.ADRES = getAD(channel2, 0x70);
  2639  0443  3070               	movlw	112
  2640  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0446  00DF               	movwf	??_getPIR_AD
  2643  0447  085F               	movf	??_getPIR_AD,w
  2644  0448  00F4               	movwf	getAD@adcon1
  2645  0449  085E               	movf	getPIR_AD@channel2,w
  2646  044A  158A  2519  118A   	fcall	_getAD
  2647  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2648  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2649  044F  00E0               	movwf	??_getPIR_AD+1
  2650  0450  0860               	movf	??_getPIR_AD+1,w
  2651  0451  1683               	bsf	3,5	;RP0=1, select bank1
  2652  0452  1303               	bcf	3,6	;RP1=0, select bank1
  2653  0453  00A2               	movwf	(__PIR^(0+128)+2)
  2654                           
  2655                           ;PIR_B1.c: 308: _PIR.SignalAD = _PIR.ADRES;
  2656  0454  0822               	movf	(__PIR^(0+128)+2),w
  2657  0455  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0456  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0457  00DF               	movwf	??_getPIR_AD
  2660  0458  085F               	movf	??_getPIR_AD,w
  2661  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2662  045A  1303               	bcf	3,6	;RP1=0, select bank1
  2663  045B  00A1               	movwf	(__PIR^(0+128)+1)
  2664                           
  2665                           ;PIR_B1.c: 310: if (_PIR.VRAD < 1) {
  2666  045C  08A3               	movf	(__PIR^(0+128)+3),f
  2667  045D  1D03               	skipz
  2668  045E  2C61               	goto	l4835
  2669                           
  2670                           ;PIR_B1.c: 311: _PIR.CloseTimeValue = 5;
  2671  045F  3005               	movlw	5
  2672  0460  2C66               	goto	L1
  2673  0461                     l4835:	
  2674                           ;PIR_B1.c: 312: } else if (_PIR.VRAD < 3) {
  2675                           
  2676  0461  3003               	movlw	3
  2677  0462  0223               	subwf	(__PIR^(0+128)+3),w
  2678  0463  1803               	skipnc
  2679  0464  2C69               	goto	l4839
  2680                           
  2681                           ;PIR_B1.c: 313: _PIR.CloseTimeValue = 60;
  2682  0465  303C               	movlw	60
  2683  0466                     L1:	
  2684  0466  00C7               	movwf	(__PIR^(0+128)+39)
  2685  0467  3000               	movlw	0
  2686  0468  2C84               	goto	L5
  2687  0469                     l4839:	
  2688                           ;PIR_B1.c: 314: } else if (_PIR.VRAD < 5) {
  2689                           
  2690  0469  3005               	movlw	5
  2691  046A  0223               	subwf	(__PIR^(0+128)+3),w
  2692  046B  1803               	skipnc
  2693  046C  2C71               	goto	l4843
  2694                           
  2695                           ;PIR_B1.c: 315: _PIR.CloseTimeValue = 300;
  2696  046D  302C               	movlw	44
  2697  046E  00C7               	movwf	(__PIR^(0+128)+39)
  2698  046F  3001               	movlw	1
  2699  0470  2C84               	goto	L5
  2700  0471                     l4843:	
  2701                           ;PIR_B1.c: 316: } else if (_PIR.VRAD < 7) {
  2702                           
  2703  0471  3007               	movlw	7
  2704  0472  0223               	subwf	(__PIR^(0+128)+3),w
  2705  0473  1803               	skipnc
  2706  0474  2C79               	goto	l4847
  2707                           
  2708                           ;PIR_B1.c: 317: _PIR.CloseTimeValue = 600;
  2709  0475  3058               	movlw	88
  2710  0476  00C7               	movwf	(__PIR^(0+128)+39)
  2711  0477  3002               	movlw	2
  2712  0478  2C84               	goto	L5
  2713  0479                     l4847:	
  2714                           ;PIR_B1.c: 318: } else if (_PIR.VRAD < 9) {
  2715                           
  2716  0479  3009               	movlw	9
  2717  047A  0223               	subwf	(__PIR^(0+128)+3),w
  2718  047B  1803               	skipnc
  2719  047C  2C81               	goto	l4851
  2720                           
  2721                           ;PIR_B1.c: 319: _PIR.CloseTimeValue = 900;
  2722  047D  3084               	movlw	132
  2723  047E  00C7               	movwf	(__PIR^(0+128)+39)
  2724  047F  3003               	movlw	3
  2725  0480  2C84               	goto	L5
  2726  0481                     l4851:	
  2727                           ;PIR_B1.c: 320: } else {
  2728                           
  2729                           
  2730                           ;PIR_B1.c: 321: _PIR.CloseTimeValue = 1200;
  2731  0481  30B0               	movlw	176
  2732  0482  00C7               	movwf	(__PIR^(0+128)+39)
  2733  0483  3004               	movlw	4
  2734  0484                     L5:	
  2735  0484  00C8               	movwf	(__PIR^(0+128)+40)
  2736                           
  2737                           ;PIR_B1.c: 322: }
  2738                           ;PIR_B1.c: 331: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2739  0485  0821               	movf	(__PIR^(0+128)+1),w
  2740  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0488  00DF               	movwf	??_getPIR_AD
  2743  0489  1683               	bsf	3,5	;RP0=1, select bank1
  2744  048A  1303               	bcf	3,6	;RP1=0, select bank1
  2745  048B  0827               	movf	(__PIR^(0+128)+7),w
  2746  048C  3EA8               	addlw	(__PIR+8)& (0+255)
  2747  048D  0084               	movwf	4
  2748  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2749  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0490  085F               	movf	??_getPIR_AD,w
  2751  0491  1383               	bcf	3,7	;select IRP bank1
  2752  0492  0080               	movwf	0
  2753                           
  2754                           ;PIR_B1.c: 332: for (i = 0; i < 10; i++) {
  2755  0493  01E4               	clrf	getPIR_AD@i
  2756  0494  300A               	movlw	10
  2757  0495  0264               	subwf	getPIR_AD@i,w
  2758  0496  1803               	btfsc	3,0
  2759  0497  2CB4               	goto	l4867
  2760  0498                     l4861:	
  2761                           
  2762                           ;PIR_B1.c: 333: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2763  0498  0864               	movf	getPIR_AD@i,w
  2764  0499  3EA8               	addlw	(__PIR+8)& (0+255)
  2765  049A  0084               	movwf	4
  2766  049B  0800               	movf	0,w
  2767  049C  00DF               	movwf	??_getPIR_AD
  2768  049D  01E0               	clrf	??_getPIR_AD+1
  2769  049E  085F               	movf	??_getPIR_AD,w
  2770  049F  1683               	bsf	3,5	;RP0=1, select bank1
  2771  04A0  1303               	bcf	3,6	;RP1=0, select bank1
  2772  04A1  07B2               	addwf	(__PIR^(0+128)+18),f
  2773  04A2  1803               	skipnc
  2774  04A3  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2775  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2776  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2777  04A6  0860               	movf	??_getPIR_AD+1,w
  2778  04A7  1683               	bsf	3,5	;RP0=1, select bank1
  2779  04A8  1303               	bcf	3,6	;RP1=0, select bank1
  2780  04A9  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2781  04AA  3001               	movlw	1
  2782  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2783  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2784  04AD  00DF               	movwf	??_getPIR_AD
  2785  04AE  085F               	movf	??_getPIR_AD,w
  2786  04AF  07E4               	addwf	getPIR_AD@i,f
  2787  04B0  300A               	movlw	10
  2788  04B1  0264               	subwf	getPIR_AD@i,w
  2789  04B2  1C03               	skipc
  2790  04B3  2C98               	goto	l4861
  2791  04B4                     l4867:	
  2792                           
  2793                           ;PIR_B1.c: 334: }
  2794                           ;PIR_B1.c: 335: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2795  04B4  300A               	movlw	10
  2796  04B5  00D6               	movwf	___lwdiv@divisor
  2797  04B6  3000               	movlw	0
  2798  04B7  00D7               	movwf	___lwdiv@divisor+1
  2799  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  2800  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  2801  04BA  0833               	movf	((__PIR+1)^(0+128)+18),w
  2802  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2803  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2804  04BD  01D9               	clrf	___lwdiv@dividend+1
  2805  04BE  07D9               	addwf	___lwdiv@dividend+1,f
  2806  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2807  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2808  04C1  0832               	movf	(__PIR^(0+128)+18),w
  2809  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2810  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2811  04C4  01D8               	clrf	___lwdiv@dividend
  2812  04C5  07D8               	addwf	___lwdiv@dividend,f
  2813  04C6  158A  266B  118A   	fcall	___lwdiv
  2814  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2815  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2816  04CB  0856               	movf	?___lwdiv,w
  2817  04CC  00DF               	movwf	??_getPIR_AD
  2818  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2819  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2820  04CF  0834               	movf	(__PIR^(0+128)+20),w
  2821  04D0  3EB5               	addlw	(__PIR+21)& (0+255)
  2822  04D1  0084               	movwf	4
  2823  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  2824  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  2825  04D4  085F               	movf	??_getPIR_AD,w
  2826  04D5  1383               	bcf	3,7	;select IRP bank1
  2827  04D6  0080               	movwf	0
  2828                           
  2829                           ;PIR_B1.c: 336: _PIR.TenAverageValue = 0;
  2830  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  2831  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  2832  04D9  01B2               	clrf	(__PIR^(0+128)+18)
  2833  04DA  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2834                           
  2835                           ;PIR_B1.c: 338: for (i = 0; i <= 9; i++) {
  2836  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  2837  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  2838  04DD  01E4               	clrf	getPIR_AD@i
  2839  04DE  300A               	movlw	10
  2840  04DF  0264               	subwf	getPIR_AD@i,w
  2841  04E0  1803               	btfsc	3,0
  2842  04E1  2CFE               	goto	l4883
  2843  04E2                     l4877:	
  2844                           
  2845                           ;PIR_B1.c: 339: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2846  04E2  0864               	movf	getPIR_AD@i,w
  2847  04E3  3EB5               	addlw	(__PIR+21)& (0+255)
  2848  04E4  0084               	movwf	4
  2849  04E5  0800               	movf	0,w
  2850  04E6  00DF               	movwf	??_getPIR_AD
  2851  04E7  01E0               	clrf	??_getPIR_AD+1
  2852  04E8  085F               	movf	??_getPIR_AD,w
  2853  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  2854  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  2855  04EB  07BF               	addwf	(__PIR^(0+128)+31),f
  2856  04EC  1803               	skipnc
  2857  04ED  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2858  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2859  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  2860  04F0  0860               	movf	??_getPIR_AD+1,w
  2861  04F1  1683               	bsf	3,5	;RP0=1, select bank1
  2862  04F2  1303               	bcf	3,6	;RP1=0, select bank1
  2863  04F3  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2864  04F4  3001               	movlw	1
  2865  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2866  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2867  04F7  00DF               	movwf	??_getPIR_AD
  2868  04F8  085F               	movf	??_getPIR_AD,w
  2869  04F9  07E4               	addwf	getPIR_AD@i,f
  2870  04FA  300A               	movlw	10
  2871  04FB  0264               	subwf	getPIR_AD@i,w
  2872  04FC  1C03               	skipc
  2873  04FD  2CE2               	goto	l4877
  2874  04FE                     l4883:	
  2875                           
  2876                           ;PIR_B1.c: 340: }
  2877                           ;PIR_B1.c: 341: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2878  04FE  300A               	movlw	10
  2879  04FF  00D6               	movwf	___lwdiv@divisor
  2880  0500  3000               	movlw	0
  2881  0501  00D7               	movwf	___lwdiv@divisor+1
  2882  0502  1683               	bsf	3,5	;RP0=1, select bank1
  2883  0503  1303               	bcf	3,6	;RP1=0, select bank1
  2884  0504  0840               	movf	((__PIR+1)^(0+128)+31),w
  2885  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0507  01D9               	clrf	___lwdiv@dividend+1
  2888  0508  07D9               	addwf	___lwdiv@dividend+1,f
  2889  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2890  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2891  050B  083F               	movf	(__PIR^(0+128)+31),w
  2892  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2893  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2894  050E  01D8               	clrf	___lwdiv@dividend
  2895  050F  07D8               	addwf	___lwdiv@dividend,f
  2896  0510  158A  266B  118A   	fcall	___lwdiv
  2897  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2899  0515  0856               	movf	?___lwdiv,w
  2900  0516  00DF               	movwf	??_getPIR_AD
  2901  0517  085F               	movf	??_getPIR_AD,w
  2902  0518  1683               	bsf	3,5	;RP0=1, select bank1
  2903  0519  1303               	bcf	3,6	;RP1=0, select bank1
  2904  051A  00A6               	movwf	(__PIR^(0+128)+6)
  2905                           
  2906                           ;PIR_B1.c: 342: _PIR.HundredAverageValue = 0;
  2907  051B  01BF               	clrf	(__PIR^(0+128)+31)
  2908  051C  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2909                           
  2910                           ;PIR_B1.c: 344: if (_PIR.TenCount < 10) {
  2911  051D  300A               	movlw	10
  2912  051E  0227               	subwf	(__PIR^(0+128)+7),w
  2913  051F  1803               	skipnc
  2914  0520  2D2A               	goto	l4891
  2915                           
  2916                           ;PIR_B1.c: 345: _PIR.TenCount++;
  2917  0521  3001               	movlw	1
  2918  0522  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0523  1303               	bcf	3,6	;RP1=0, select bank0
  2920  0524  00DF               	movwf	??_getPIR_AD
  2921  0525  085F               	movf	??_getPIR_AD,w
  2922  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2923  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2924  0528  07A7               	addwf	(__PIR^(0+128)+7),f
  2925                           
  2926                           ;PIR_B1.c: 346: } else {
  2927  0529  0008               	return
  2928  052A                     l4891:	
  2929                           
  2930                           ;PIR_B1.c: 347: _PIR.TenCount = 0;
  2931  052A  01A7               	clrf	(__PIR^(0+128)+7)
  2932                           
  2933                           ;PIR_B1.c: 348: if (_PIR.HundreCount < 10)
  2934  052B  300A               	movlw	10
  2935  052C  0234               	subwf	(__PIR^(0+128)+20),w
  2936  052D  1803               	skipnc
  2937  052E  2D38               	goto	l4897
  2938                           
  2939                           ;PIR_B1.c: 349: _PIR.HundreCount++;
  2940  052F  3001               	movlw	1
  2941  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0532  00DF               	movwf	??_getPIR_AD
  2944  0533  085F               	movf	??_getPIR_AD,w
  2945  0534  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0535  1303               	bcf	3,6	;RP1=0, select bank1
  2947  0536  07B4               	addwf	(__PIR^(0+128)+20),f
  2948  0537  0008               	return
  2949  0538                     l4897:	
  2950                           
  2951                           ;PIR_B1.c: 350: else
  2952                           ;PIR_B1.c: 351: _PIR.HundreCount = 0;
  2953  0538  01B4               	clrf	(__PIR^(0+128)+20)
  2954  0539  0008               	return
  2955  053A                     __end_of_getPIR_AD:	
  2956                           
  2957                           	psect	text5
  2958  06B9                     __ptext5:	
  2959 ;; *************** function _getLoad_AD *****************
  2960 ;; Defined at:
  2961 ;;		line 15 in file "../src/OverLoad_B1.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  channel         1    wreg     unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  channel         1    2[BANK0 ] unsigned char 
  2966 ;;  i               1    5[BANK0 ] unsigned char 
  2967 ;;  j               1    4[BANK0 ] unsigned char 
  2968 ;;  k               1    3[BANK0 ] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;		None               void
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2978 ;;      Params:         0       0       0       0
  2979 ;;      Locals:         0       4       0       0
  2980 ;;      Temps:          0       2       0       0
  2981 ;;      Totals:         0       6       0       0
  2982 ;;Total ram usage:        6 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    4
  2985 ;; This function calls:
  2986 ;;		_getAD
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _getLoad_AD
  2994  06B9                     _getLoad_AD:	
  2995                           
  2996                           ;incstack = 0
  2997                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2998                           ;getLoad_AD@channel stored from wreg
  2999  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3000  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3001  06BB  00D8               	movwf	getLoad_AD@channel
  3002                           
  3003                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3004  06BC  01DB               	clrf	getLoad_AD@i
  3005  06BD  01DA               	clrf	getLoad_AD@j
  3006  06BE  01D9               	clrf	getLoad_AD@k
  3007                           
  3008                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3009  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  3010  06C0  1303               	bcf	3,6	;RP1=0, select bank1
  3011  06C1  1E4E               	btfss	_Load^(0+128),4
  3012  06C2  0008               	return
  3013                           
  3014                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3015  06C3  3073               	movlw	115
  3016  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  3017  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  3018  06C6  00D6               	movwf	??_getLoad_AD
  3019  06C7  0856               	movf	??_getLoad_AD,w
  3020  06C8  00F4               	movwf	getAD@adcon1
  3021  06C9  0858               	movf	getLoad_AD@channel,w
  3022  06CA  158A  2519  118A   	fcall	_getAD
  3023  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3024  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3025  06CF  00D7               	movwf	??_getLoad_AD+1
  3026  06D0  0857               	movf	??_getLoad_AD+1,w
  3027  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  3028  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  3029  06D3  00E3               	movwf	(_Load^(0+128)+21)
  3030                           
  3031                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3032  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3033  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  3034  06D6  01DB               	clrf	getLoad_AD@i
  3035  06D7  3004               	movlw	4
  3036  06D8  025B               	subwf	getLoad_AD@i,w
  3037  06D9  1803               	btfsc	3,0
  3038  06DA  2F00               	goto	l4783
  3039  06DB                     l4771:	
  3040                           
  3041                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3042  06DB  085B               	movf	getLoad_AD@i,w
  3043  06DC  3ED8               	addlw	(_Load+10)& (0+255)
  3044  06DD  0084               	movwf	4
  3045  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  3046  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  3047  06E0  0863               	movf	(_Load^(0+128)+21),w
  3048  06E1  1383               	bcf	3,7	;select IRP bank1
  3049  06E2  0200               	subwf	0,w
  3050  06E3  1803               	skipnc
  3051  06E4  2EF7               	goto	l4779
  3052  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3053  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3054  06E7  08DA               	movf	getLoad_AD@j,f
  3055  06E8  1D03               	skipz
  3056  06E9  2EF7               	goto	l4779
  3057                           
  3058                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3059  06EA  1683               	bsf	3,5	;RP0=1, select bank1
  3060  06EB  1303               	bcf	3,6	;RP1=0, select bank1
  3061  06EC  0863               	movf	(_Load^(0+128)+21),w
  3062  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  3063  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  3064  06EF  00D6               	movwf	??_getLoad_AD
  3065  06F0  085B               	movf	getLoad_AD@i,w
  3066  06F1  3ED8               	addlw	(_Load+10)& (0+255)
  3067  06F2  0084               	movwf	4
  3068  06F3  0856               	movf	??_getLoad_AD,w
  3069  06F4  0080               	movwf	0
  3070                           
  3071                           ;OverLoad_B1.c: 24: j = 1;
  3072  06F5  01DA               	clrf	getLoad_AD@j
  3073  06F6  0ADA               	incf	getLoad_AD@j,f
  3074  06F7                     l4779:	
  3075  06F7  3001               	movlw	1
  3076  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3077  06F9  00D6               	movwf	??_getLoad_AD
  3078  06FA  0856               	movf	??_getLoad_AD,w
  3079  06FB  07DB               	addwf	getLoad_AD@i,f
  3080  06FC  3004               	movlw	4
  3081  06FD  025B               	subwf	getLoad_AD@i,w
  3082  06FE  1C03               	skipc
  3083  06FF  2EDB               	goto	l4771
  3084  0700                     l4783:	
  3085                           
  3086                           ;OverLoad_B1.c: 25: }
  3087                           ;OverLoad_B1.c: 26: }
  3088                           ;OverLoad_B1.c: 27: if (j == 0) {
  3089  0700  08DA               	movf	getLoad_AD@j,f
  3090  0701  1D03               	skipz
  3091  0702  0008               	return
  3092                           
  3093                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3094  0703  01DB               	clrf	getLoad_AD@i
  3095  0704                     L6:	
  3096  0704  3004               	movlw	4
  3097  0705  025B               	subwf	getLoad_AD@i,w
  3098  0706  1803               	btfsc	3,0
  3099  0707  0008               	return
  3100                           
  3101                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3102  0708  085B               	movf	getLoad_AD@i,w
  3103  0709  3EDD               	addlw	(_Load+15)& (0+255)
  3104  070A  0084               	movwf	4
  3105  070B  1383               	bcf	3,7	;select IRP bank1
  3106  070C  0800               	movf	0,w
  3107  070D  1683               	bsf	3,5	;RP0=1, select bank1
  3108  070E  1303               	bcf	3,6	;RP1=0, select bank1
  3109  070F  0263               	subwf	(_Load^(0+128)+21),w
  3110  0710  1803               	skipnc
  3111  0711  2F24               	goto	l4799
  3112  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3114  0714  08D9               	movf	getLoad_AD@k,f
  3115  0715  1D03               	skipz
  3116  0716  2F24               	goto	l4799
  3117                           
  3118                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3119  0717  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0718  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0719  0863               	movf	(_Load^(0+128)+21),w
  3122  071A  1283               	bcf	3,5	;RP0=0, select bank0
  3123  071B  1303               	bcf	3,6	;RP1=0, select bank0
  3124  071C  00D6               	movwf	??_getLoad_AD
  3125  071D  085B               	movf	getLoad_AD@i,w
  3126  071E  3EDD               	addlw	(_Load+15)& (0+255)
  3127  071F  0084               	movwf	4
  3128  0720  0856               	movf	??_getLoad_AD,w
  3129  0721  0080               	movwf	0
  3130                           
  3131                           ;OverLoad_B1.c: 31: k = 1;
  3132  0722  01D9               	clrf	getLoad_AD@k
  3133  0723  0AD9               	incf	getLoad_AD@k,f
  3134  0724                     l4799:	
  3135  0724  3001               	movlw	1
  3136  0725  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0726  00D6               	movwf	??_getLoad_AD
  3138  0727  0856               	movf	??_getLoad_AD,w
  3139  0728  07DB               	addwf	getLoad_AD@i,f
  3140  0729  2F04               	goto	L6
  3141  072A                     __end_of_getLoad_AD:	
  3142                           
  3143                           	psect	text6
  3144  0D9F                     __ptext6:	
  3145 ;; *************** function _getCDS_AD *****************
  3146 ;; Defined at:
  3147 ;;		line 48 in file "../src/CDS_B1.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  channel1        1    wreg     unsigned char 
  3150 ;;  channel2        1    0[BANK0 ] unsigned char 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  channel1        1    5[BANK0 ] unsigned char 
  3153 ;;  j               1    4[BANK0 ] unsigned char 
  3154 ;;  i               1    3[BANK0 ] unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		wreg, status,2, status,0, pclath, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3164 ;;      Params:         0       1       0       0
  3165 ;;      Locals:         0       3       0       0
  3166 ;;      Temps:          0       2       0       0
  3167 ;;      Totals:         0       6       0       0
  3168 ;;Total ram usage:        6 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    4
  3171 ;; This function calls:
  3172 ;;		_getAD
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           
  3179                           ;psect for function _getCDS_AD
  3180  0D9F                     _getCDS_AD:	
  3181                           
  3182                           ;incstack = 0
  3183                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3184                           ;getCDS_AD@channel1 stored from wreg
  3185  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0DA1  00DB               	movwf	getCDS_AD@channel1
  3188                           
  3189                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3190  0DA2  01D9               	clrf	getCDS_AD@i
  3191  0DA3  01DA               	clrf	getCDS_AD@j
  3192                           
  3193                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3194  0DA4  1DAB               	btfss	__CDS,3
  3195  0DA5  0008               	return
  3196                           
  3197                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3198  0DA6  14AB               	bsf	__CDS,1
  3199                           
  3200                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3201  0DA7  3070               	movlw	112
  3202  0DA8  00D7               	movwf	??_getCDS_AD
  3203  0DA9  0857               	movf	??_getCDS_AD,w
  3204  0DAA  00F4               	movwf	getAD@adcon1
  3205  0DAB  085B               	movf	getCDS_AD@channel1,w
  3206  0DAC  158A  2519  158A   	fcall	_getAD
  3207  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  3209  0DB1  00D8               	movwf	??_getCDS_AD+1
  3210  0DB2  0858               	movf	??_getCDS_AD+1,w
  3211  0DB3  00AF               	movwf	__CDS+4
  3212                           
  3213                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3214  0DB4  082F               	movf	__CDS+4,w
  3215  0DB5  00D7               	movwf	??_getCDS_AD
  3216  0DB6  0857               	movf	??_getCDS_AD,w
  3217  0DB7  00AD               	movwf	__CDS+2
  3218                           
  3219                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3220  0DB8  3070               	movlw	112
  3221  0DB9  00D7               	movwf	??_getCDS_AD
  3222  0DBA  0857               	movf	??_getCDS_AD,w
  3223  0DBB  00F4               	movwf	getAD@adcon1
  3224  0DBC  0856               	movf	getCDS_AD@channel2,w
  3225  0DBD  158A  2519         	fcall	_getAD
  3226  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  3227  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  3228  0DC1  00D8               	movwf	??_getCDS_AD+1
  3229  0DC2  0858               	movf	??_getCDS_AD+1,w
  3230  0DC3  00AF               	movwf	__CDS+4
  3231                           
  3232                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3233  0DC4  082F               	movf	__CDS+4,w
  3234  0DC5  00D7               	movwf	??_getCDS_AD
  3235  0DC6  0857               	movf	??_getCDS_AD,w
  3236  0DC7  00AE               	movwf	__CDS+3
  3237  0DC8  0008               	return
  3238  0DC9                     __end_of_getCDS_AD:	
  3239                           
  3240                           	psect	text7
  3241  0D19                     __ptext7:	
  3242 ;; *************** function _getAD *****************
  3243 ;; Defined at:
  3244 ;;		line 432 in file "../src/MCU_B1.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  adcon0          1    wreg     unsigned char 
  3247 ;;  adcon1          1    4[COMMON] unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  adcon0          1    5[COMMON] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      unsigned char 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, pclath, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3259 ;;      Params:         1       0       0       0
  3260 ;;      Locals:         1       0       0       0
  3261 ;;      Temps:          0       0       0       0
  3262 ;;      Totals:         2       0       0       0
  3263 ;;Total ram usage:        2 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    3
  3266 ;; This function calls:
  3267 ;;		_Timeout_Counter
  3268 ;;		_set_TimeoutCleared
  3269 ;; This function is called by:
  3270 ;;		_getCDS_AD
  3271 ;;		_getLoad_AD
  3272 ;;		_getTemp_AD
  3273 ;;		_getPIR_AD
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function _getAD
  3279  0D19                     _getAD:	
  3280                           
  3281                           ;incstack = 0
  3282                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3283                           ;getAD@adcon0 stored from wreg
  3284  0D19  00F5               	movwf	getAD@adcon0
  3285                           
  3286                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3287  0D1A  0875               	movf	getAD@adcon0,w
  3288  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  3289  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  3290  0D1D  009F               	movwf	31	;volatile
  3291                           
  3292                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3293  0D1E  0874               	movf	getAD@adcon1,w
  3294  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
  3295  0D20  1303               	bcf	3,6	;RP1=0, select bank1
  3296  0D21  009F               	movwf	31	;volatile
  3297                           
  3298                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3299  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  3300  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  3301  0D24  149F               	bsf	31,1	;volatile
  3302                           
  3303                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3304  0D25  2D29               	goto	l4497
  3305  0D26                     l4495:	
  3306                           
  3307                           ;MCU_B1.c: 437: Timeout_Counter();
  3308  0D26  158A  245B  158A   	fcall	_Timeout_Counter
  3309  0D29                     l4497:	
  3310  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  3312  0D2B  1C9F               	btfss	31,1	;volatile
  3313  0D2C  2D2F               	goto	l4501
  3314  0D2D  1D23               	btfss	_myMain+3,2
  3315  0D2E  2D26               	goto	l4495
  3316  0D2F                     l4501:	
  3317                           
  3318                           ;MCU_B1.c: 438: };
  3319                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3320  0D2F  158A  2361         	fcall	_set_TimeoutCleared
  3321                           
  3322                           ;MCU_B1.c: 440: return ADRES;
  3323  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0D33  081E               	movf	30,w	;volatile
  3326  0D34  0008               	return
  3327  0D35                     __end_of_getAD:	
  3328                           
  3329                           	psect	text8
  3330  0B61                     __ptext8:	
  3331 ;; *************** function _set_TimeoutCleared *****************
  3332 ;; Defined at:
  3333 ;;		line 281 in file "../src/Main_B1.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;		None               void
  3340 ;; Registers used:
  3341 ;;		status,2
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3347 ;;      Params:         0       0       0       0
  3348 ;;      Locals:         0       0       0       0
  3349 ;;      Temps:          0       0       0       0
  3350 ;;      Totals:         0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    2
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_getAD
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _set_TimeoutCleared
  3363  0B61                     _set_TimeoutCleared:	
  3364                           
  3365                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3366                           
  3367                           ;incstack = 0
  3368                           ; Regs used in _set_TimeoutCleared: [status,2]
  3369  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  3370  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  3371  0B63  1123               	bcf	_myMain+3,2
  3372                           
  3373                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3374  0B64  01A4               	clrf	_myMain+4
  3375  0B65  01A5               	clrf	_myMain+5
  3376  0B66  0008               	return
  3377  0B67                     __end_of_set_TimeoutCleared:	
  3378                           
  3379                           	psect	text9
  3380  0C5B                     __ptext9:	
  3381 ;; *************** function _Timeout_Counter *****************
  3382 ;; Defined at:
  3383 ;;		line 272 in file "../src/Main_B1.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;		None
  3388 ;; Return value:  Size  Location     Type
  3389 ;;		None               void
  3390 ;; Registers used:
  3391 ;;		wreg, status,2
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3397 ;;      Params:         0       0       0       0
  3398 ;;      Locals:         0       0       0       0
  3399 ;;      Temps:          0       0       0       0
  3400 ;;      Totals:         0       0       0       0
  3401 ;;Total ram usage:        0 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    2
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_getAD
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _Timeout_Counter
  3413  0C5B                     _Timeout_Counter:	
  3414                           
  3415                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3416                           
  3417                           ;incstack = 0
  3418                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3419  0C5B  3001               	movlw	1
  3420  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0C5E  07A4               	addwf	_myMain+4,f
  3423  0C5F  1803               	skipnc
  3424  0C60  0AA5               	incf	_myMain+5,f
  3425  0C61  3000               	movlw	0
  3426  0C62  07A5               	addwf	_myMain+5,f
  3427                           
  3428                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3429  0C63  3061               	movlw	97
  3430  0C64  0625               	xorwf	_myMain+5,w
  3431  0C65  1D03               	skipz
  3432  0C66  2C69               	goto	u5085
  3433  0C67  30A8               	movlw	168
  3434  0C68  0624               	xorwf	_myMain+4,w
  3435  0C69                     u5085:	
  3436  0C69  1D03               	skipz
  3437  0C6A  0008               	return
  3438                           
  3439                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3440  0C6B  01A4               	clrf	_myMain+4
  3441  0C6C  01A5               	clrf	_myMain+5
  3442                           
  3443                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3444  0C6D  1523               	bsf	_myMain+3,2
  3445  0C6E  0008               	return
  3446  0C6F                     __end_of_Timeout_Counter:	
  3447                           
  3448                           	psect	text10
  3449  0C26                     __ptext10:	
  3450 ;; *************** function _WDT_Main *****************
  3451 ;; Defined at:
  3452 ;;		line 1103 in file "../src/MCU_B1.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;		None               void
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0, pclath, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3466 ;;      Params:         0       0       0       0
  3467 ;;      Locals:         0       0       0       0
  3468 ;;      Temps:          1       0       0       0
  3469 ;;      Totals:         1       0       0       0
  3470 ;;Total ram usage:        1 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    3
  3473 ;; This function calls:
  3474 ;;		_WDT_Clearing
  3475 ;; This function is called by:
  3476 ;;		_main
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _WDT_Main
  3482  0C26                     _WDT_Main:	
  3483                           
  3484                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3488  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  3489  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  3490  0C28  1C37               	btfss	_WDT,0
  3491  0C29  0008               	return
  3492                           
  3493                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3494  0C2A  3001               	movlw	1
  3495  0C2B  02B8               	subwf	_WDT+1,f
  3496  0C2C  0838               	movf	_WDT+1,w
  3497  0C2D  3AFF               	xorlw	255
  3498  0C2E  1903               	skipnz
  3499  0C2F  0008               	return
  3500                           
  3501                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3502  0C30  3064               	movlw	100
  3503  0C31  00F4               	movwf	??_WDT_Main
  3504  0C32  0874               	movf	??_WDT_Main,w
  3505  0C33  00B8               	movwf	_WDT+1
  3506                           
  3507                           ;MCU_B1.c: 1107: WDT_Clearing();
  3508  0C34  118A  2002         	fcall	_WDT_Clearing
  3509  0C36  0008               	return
  3510  0C37                     __end_of_WDT_Main:	
  3511                           
  3512                           	psect	text11
  3513  0002                     __ptext11:	
  3514 ;; *************** function _WDT_Clearing *****************
  3515 ;; Defined at:
  3516 ;;		line 1113 in file "../src/MCU_B1.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;		None
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;		None
  3521 ;; Return value:  Size  Location     Type
  3522 ;;		None               void
  3523 ;; Registers used:
  3524 ;;		None
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3530 ;;      Params:         0       0       0       0
  3531 ;;      Locals:         0       0       0       0
  3532 ;;      Temps:          0       0       0       0
  3533 ;;      Totals:         0       0       0       0
  3534 ;;Total ram usage:        0 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    2
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		_WDT_Main
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _WDT_Clearing
  3546  0002                     _WDT_Clearing:	
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _WDT_Clearing: []
  3550  0002  0064               	clrwdt	;# 
  3551  0003  0008               	return
  3552  0004                     __end_of_WDT_Clearing:	
  3553                           
  3554                           	psect	text12
  3555  0B41                     __ptext12:	
  3556 ;; *************** function _Temp_Main *****************
  3557 ;; Defined at:
  3558 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, pclath, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3572 ;;      Params:         0       0       0       0
  3573 ;;      Locals:         0       0       0       0
  3574 ;;      Temps:          0       0       0       0
  3575 ;;      Totals:         0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    4
  3579 ;; This function calls:
  3580 ;;		_setTemp_Main
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _Temp_Main
  3588  0B41                     _Temp_Main:	
  3589                           
  3590                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3594  0B41  118A  253A         	fcall	_setTemp_Main
  3595  0B43  0008               	return
  3596  0B44                     __end_of_Temp_Main:	
  3597                           
  3598                           	psect	text13
  3599  053A                     __ptext13:	
  3600 ;; *************** function _setTemp_Main *****************
  3601 ;; Defined at:
  3602 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  error           1    8[BANK0 ] unsigned char 
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3616 ;;      Params:         0       0       0       0
  3617 ;;      Locals:         0       1       0       0
  3618 ;;      Temps:          1       0       0       0
  3619 ;;      Totals:         1       1       0       0
  3620 ;;Total ram usage:        2 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    3
  3623 ;; This function calls:
  3624 ;;		___awdiv
  3625 ;;		_getMain_All_Error_Status
  3626 ;;		_getMain_All_LightsStatus
  3627 ;; This function is called by:
  3628 ;;		_Temp_Main
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           
  3633                           ;psect for function _setTemp_Main
  3634  053A                     _setTemp_Main:	
  3635                           
  3636                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3640  053A  3000               	movlw	0
  3641  053B  158A  262D  118A   	fcall	_getMain_All_Error_Status
  3642  053E  00F5               	movwf	??_setTemp_Main
  3643  053F  0875               	movf	??_setTemp_Main,w
  3644  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0541  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0542  00DE               	movwf	setTemp_Main@error
  3647                           
  3648                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3649  0543  1C3B               	btfss	_Temp,0
  3650  0544  2DBC               	goto	l824
  3651                           
  3652                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3653  0545  193B               	btfsc	_Temp,2
  3654  0546  2D58               	goto	l4589
  3655                           
  3656                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3657  0547  3001               	movlw	1
  3658  0548  07BC               	addwf	_Temp+1,f
  3659  0549  1803               	skipnc
  3660  054A  0ABD               	incf	_Temp+2,f
  3661  054B  3000               	movlw	0
  3662  054C  07BD               	addwf	_Temp+2,f
  3663                           
  3664                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  3665  054D  3000               	movlw	0
  3666  054E  023D               	subwf	_Temp+2,w
  3667  054F  30FA               	movlw	250
  3668  0550  1903               	skipnz
  3669  0551  023C               	subwf	_Temp+1,w
  3670  0552  1C03               	skipc
  3671  0553  0008               	return
  3672                           
  3673                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3674  0554  01BC               	clrf	_Temp+1
  3675  0555  01BD               	clrf	_Temp+2
  3676                           
  3677                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3678  0556  153B               	bsf	_Temp,2
  3679                           
  3680                           ;OverTemperature_B1.c: 70: }
  3681                           ;OverTemperature_B1.c: 71: } else {
  3682  0557  0008               	return
  3683  0558                     l4589:	
  3684                           
  3685                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3686  0558  3001               	movlw	1
  3687  0559  07BC               	addwf	_Temp+1,f
  3688  055A  1803               	skipnc
  3689  055B  0ABD               	incf	_Temp+2,f
  3690  055C  3000               	movlw	0
  3691  055D  07BD               	addwf	_Temp+2,f
  3692                           
  3693                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  3694  055E  3000               	movlw	0
  3695  055F  023D               	subwf	_Temp+2,w
  3696  0560  3002               	movlw	2
  3697  0561  1903               	skipnz
  3698  0562  023C               	subwf	_Temp+1,w
  3699  0563  1C03               	skipc
  3700  0564  0008               	return
  3701                           
  3702                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3703  0565  01BC               	clrf	_Temp+1
  3704  0566  01BD               	clrf	_Temp+2
  3705                           
  3706                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3707  0567  0842               	movf	_Temp+7,w
  3708  0568  1903               	btfsc	3,2
  3709  0569  2DB9               	goto	l829
  3710  056A  0843               	movf	_Temp+8,w
  3711  056B  1903               	btfsc	3,2
  3712  056C  2DB9               	goto	l829
  3713                           
  3714                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3715  056D  113B               	bcf	_Temp,2
  3716                           
  3717                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3718  056E  3002               	movlw	2
  3719  056F  00D6               	movwf	___awdiv@divisor
  3720  0570  3000               	movlw	0
  3721  0571  00D7               	movwf	___awdiv@divisor+1
  3722  0572  0842               	movf	_Temp+7,w
  3723  0573  0743               	addwf	_Temp+8,w
  3724  0574  00D8               	movwf	___awdiv@dividend
  3725  0575  01D9               	clrf	___awdiv@dividend+1
  3726  0576  0DD9               	rlf	___awdiv@dividend+1,f
  3727  0577  158A  273D  118A   	fcall	___awdiv
  3728  057A  1283               	bcf	3,5	;RP0=0, select bank0
  3729  057B  1303               	bcf	3,6	;RP1=0, select bank0
  3730  057C  0856               	movf	?___awdiv,w
  3731  057D  00F5               	movwf	??_setTemp_Main
  3732  057E  0875               	movf	??_setTemp_Main,w
  3733  057F  00C1               	movwf	_Temp+6
  3734                           
  3735                           ;OverTemperature_B1.c: 81: if (getMain_All_LightsStatus() == 1) {
  3736  0580  158A  2395  118A   	fcall	_getMain_All_LightsStatus
  3737  0583  3A01               	xorlw	1
  3738  0584  1D03               	skipz
  3739  0585  2D8E               	goto	l4605
  3740                           
  3741                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3742  0586  3085               	movlw	133
  3743  0587  00F5               	movwf	??_setTemp_Main
  3744  0588  0875               	movf	??_setTemp_Main,w
  3745  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3746  058A  1303               	bcf	3,6	;RP1=0, select bank0
  3747  058B  00C5               	movwf	_Temp+10
  3748                           
  3749                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3750  058C  3070               	movlw	112
  3751  058D  2D95               	goto	L7
  3752  058E                     l4605:	
  3753                           ;OverTemperature_B1.c: 84: } else {
  3754                           
  3755                           
  3756                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3757  058E  304F               	movlw	79
  3758  058F  00F5               	movwf	??_setTemp_Main
  3759  0590  0875               	movf	??_setTemp_Main,w
  3760  0591  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0592  1303               	bcf	3,6	;RP1=0, select bank0
  3762  0593  00C5               	movwf	_Temp+10
  3763                           
  3764                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3765  0594  3040               	movlw	64
  3766  0595                     L7:	
  3767  0595  00F5               	movwf	??_setTemp_Main
  3768  0596  0875               	movf	??_setTemp_Main,w
  3769  0597  00C6               	movwf	_Temp+11
  3770                           
  3771                           ;OverTemperature_B1.c: 87: }
  3772                           ;OverTemperature_B1.c: 99: if (Temp.ERROR == 1) {
  3773  0598  1CBB               	btfss	_Temp,1
  3774  0599  2DA9               	goto	l4621
  3775                           
  3776                           ;OverTemperature_B1.c: 100: if (Temp.AD >= Temp.SafeValue) {
  3777  059A  0845               	movf	_Temp+10,w
  3778  059B  0241               	subwf	_Temp+6,w
  3779  059C  1C03               	skipc
  3780  059D  2DB8               	goto	l4631
  3781                           
  3782                           ;OverTemperature_B1.c: 101: Temp.Count++;
  3783  059E  3001               	movlw	1
  3784  059F  00F5               	movwf	??_setTemp_Main
  3785  05A0  0875               	movf	??_setTemp_Main,w
  3786  05A1  07BE               	addwf	_Temp+3,f
  3787                           
  3788                           ;OverTemperature_B1.c: 102: if (Temp.Count >= 3) {
  3789  05A2  3003               	movlw	3
  3790  05A3  023E               	subwf	_Temp+3,w
  3791  05A4  1C03               	skipc
  3792  05A5  2DB9               	goto	l829
  3793                           
  3794                           ;OverTemperature_B1.c: 103: Temp.Count = 0;
  3795  05A6  01BE               	clrf	_Temp+3
  3796                           
  3797                           ;OverTemperature_B1.c: 104: Temp.ERROR = 0;
  3798  05A7  10BB               	bcf	_Temp,1
  3799                           
  3800                           ;OverTemperature_B1.c: 106: }
  3801                           ;OverTemperature_B1.c: 107: } else {
  3802                           
  3803                           ;OverTemperature_B1.c: 105: ;;
  3804  05A8  2DB9               	goto	l829
  3805  05A9                     l4621:	
  3806                           ;OverTemperature_B1.c: 109: }
  3807                           ;OverTemperature_B1.c: 110: } else {
  3808                           
  3809                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  3810                           
  3811                           
  3812                           ;OverTemperature_B1.c: 111: if (Temp.AD <= Temp.DangerValue) {
  3813  05A9  0841               	movf	_Temp+6,w
  3814  05AA  0246               	subwf	_Temp+11,w
  3815  05AB  1C03               	skipc
  3816  05AC  2DB8               	goto	l4631
  3817                           
  3818                           ;OverTemperature_B1.c: 112: Temp.Count++;
  3819  05AD  3001               	movlw	1
  3820  05AE  00F5               	movwf	??_setTemp_Main
  3821  05AF  0875               	movf	??_setTemp_Main,w
  3822  05B0  07BE               	addwf	_Temp+3,f
  3823                           
  3824                           ;OverTemperature_B1.c: 113: if (Temp.Count >= 3) {
  3825  05B1  3003               	movlw	3
  3826  05B2  023E               	subwf	_Temp+3,w
  3827  05B3  1C03               	skipc
  3828  05B4  2DB9               	goto	l829
  3829                           
  3830                           ;OverTemperature_B1.c: 114: Temp.Count = 0;
  3831  05B5  01BE               	clrf	_Temp+3
  3832                           
  3833                           ;OverTemperature_B1.c: 115: Temp.ERROR = 1;
  3834  05B6  14BB               	bsf	_Temp,1
  3835                           
  3836                           ;OverTemperature_B1.c: 116: }
  3837                           ;OverTemperature_B1.c: 117: } else {
  3838  05B7  2DB9               	goto	l829
  3839  05B8                     l4631:	
  3840                           
  3841                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3842  05B8  01BE               	clrf	_Temp+3
  3843  05B9                     l829:	
  3844                           ;OverTemperature_B1.c: 119: }
  3845                           ;OverTemperature_B1.c: 120: }
  3846                           ;OverTemperature_B1.c: 121: ;;
  3847                           ;OverTemperature_B1.c: 122: ;;
  3848                           
  3849                           
  3850                           ;OverTemperature_B1.c: 138: }
  3851                           ;OverTemperature_B1.c: 139: Temp.ADH[0] = 0;
  3852  05B9  01C2               	clrf	_Temp+7
  3853                           
  3854                           ;OverTemperature_B1.c: 140: Temp.ADH[1] = 0;
  3855  05BA  01C3               	clrf	_Temp+8
  3856                           
  3857                           ;OverTemperature_B1.c: 141: }
  3858                           ;OverTemperature_B1.c: 142: }
  3859                           ;OverTemperature_B1.c: 144: } else {
  3860  05BB  0008               	return
  3861  05BC                     l824:	
  3862                           
  3863                           ;OverTemperature_B1.c: 145: if (myMain.PowerON == 1) {
  3864  05BC  1C20               	btfss	_myMain,0
  3865  05BD  0008               	return
  3866                           
  3867                           ;OverTemperature_B1.c: 146: Temp.Enable = 1;
  3868  05BE  143B               	bsf	_Temp,0
  3869  05BF  0008               	return
  3870  05C0                     __end_of_setTemp_Main:	
  3871                           
  3872                           	psect	text14
  3873  0B3E                     __ptext14:	
  3874 ;; *************** function _Temp_Initialization *****************
  3875 ;; Defined at:
  3876 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;		None               void
  3883 ;; Registers used:
  3884 ;;		status,2, status,0, pclath, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       0       0       0
  3891 ;;      Locals:         0       0       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         0       0       0       0
  3894 ;;Total ram usage:        0 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    3
  3897 ;; This function calls:
  3898 ;;		_setTemp_Initialization
  3899 ;; This function is called by:
  3900 ;;		_main
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _Temp_Initialization
  3906  0B3E                     _Temp_Initialization:	
  3907                           
  3908                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3912  0B3E  158A  2330         	fcall	_setTemp_Initialization
  3913  0B40  0008               	return
  3914  0B41                     __end_of_Temp_Initialization:	
  3915                           
  3916                           	psect	text15
  3917  0B30                     __ptext15:	
  3918 ;; *************** function _setTemp_Initialization *****************
  3919 ;; Defined at:
  3920 ;;		line 44 in file "../src/OverTemperature_B1.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		None
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3934 ;;      Params:         0       0       0       0
  3935 ;;      Locals:         0       0       0       0
  3936 ;;      Temps:          0       0       0       0
  3937 ;;      Totals:         0       0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    2
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_Temp_Initialization
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _setTemp_Initialization
  3950  0B30                     _setTemp_Initialization:	
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _setTemp_Initialization: []
  3954  0B30  0008               	return
  3955  0B31                     __end_of_setTemp_Initialization:	
  3956                           
  3957                           	psect	text16
  3958  0B3B                     __ptext16:	
  3959 ;; *************** function _SYSC_Main *****************
  3960 ;; Defined at:
  3961 ;;		line 17 in file "../src/SYSC_B1.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0, pclath, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3975 ;;      Params:         0       0       0       0
  3976 ;;      Locals:         0       0       0       0
  3977 ;;      Temps:          0       0       0       0
  3978 ;;      Totals:         0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    4
  3982 ;; This function calls:
  3983 ;;		_setSYSC_Main
  3984 ;; This function is called by:
  3985 ;;		_main
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           
  3990                           ;psect for function _SYSC_Main
  3991  0B3B                     _SYSC_Main:	
  3992                           
  3993                           ;SYSC_B1.c: 19: setSYSC_Main();
  3994                           
  3995                           ;incstack = 0
  3996                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  3997  0B3B  158A  26AB         	fcall	_setSYSC_Main
  3998  0B3D  0008               	return
  3999  0B3E                     __end_of_SYSC_Main:	
  4000                           
  4001                           	psect	text17
  4002  0EAB                     __ptext17:	
  4003 ;; *************** function _setSYSC_Main *****************
  4004 ;; Defined at:
  4005 ;;		line 23 in file "../src/SYSC_B1.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;		None               void
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4019 ;;      Params:         0       0       0       0
  4020 ;;      Locals:         0       0       0       0
  4021 ;;      Temps:          0       0       0       0
  4022 ;;      Totals:         0       0       0       0
  4023 ;;Total ram usage:        0 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    3
  4026 ;; This function calls:
  4027 ;;		_getMain_All_Error_Status
  4028 ;; This function is called by:
  4029 ;;		_SYSC_Main
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           
  4034                           ;psect for function _setSYSC_Main
  4035  0EAB                     _setSYSC_Main:	
  4036                           
  4037                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4041  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  4042  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  4043  0EAD  1C26               	btfss	_SYSC,0
  4044  0EAE  0008               	return
  4045                           
  4046                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4047  0EAF  18A6               	btfsc	_SYSC,1
  4048  0EB0  2EC2               	goto	l3469
  4049                           
  4050                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4051  0EB1  3001               	movlw	1
  4052  0EB2  07A7               	addwf	_SYSC+1,f
  4053  0EB3  1803               	skipnc
  4054  0EB4  0AA8               	incf	_SYSC+2,f
  4055  0EB5  3000               	movlw	0
  4056  0EB6  07A8               	addwf	_SYSC+2,f
  4057                           
  4058                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4059  0EB7  3000               	movlw	0
  4060  0EB8  0228               	subwf	_SYSC+2,w
  4061  0EB9  3008               	movlw	8
  4062  0EBA  1903               	skipnz
  4063  0EBB  0227               	subwf	_SYSC+1,w
  4064  0EBC  1C03               	skipc
  4065  0EBD  0008               	return
  4066                           
  4067                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4068  0EBE  01A7               	clrf	_SYSC+1
  4069  0EBF  01A8               	clrf	_SYSC+2
  4070                           
  4071                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4072  0EC0  14A6               	bsf	_SYSC,1
  4073                           
  4074                           ;SYSC_B1.c: 31: }
  4075                           ;SYSC_B1.c: 32: } else {
  4076  0EC1  0008               	return
  4077  0EC2                     l3469:	
  4078                           
  4079                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4080  0EC2  3001               	movlw	1
  4081  0EC3  158A  262D  158A   	fcall	_getMain_All_Error_Status
  4082  0EC6  3800               	iorlw	0
  4083  0EC7  1D03               	skipz
  4084  0EC8  0008               	return
  4085                           
  4086                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4087  0EC9  3001               	movlw	1
  4088  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  4089  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  4090  0ECC  07A7               	addwf	_SYSC+1,f
  4091  0ECD  1803               	skipnc
  4092  0ECE  0AA8               	incf	_SYSC+2,f
  4093  0ECF  3000               	movlw	0
  4094  0ED0  07A8               	addwf	_SYSC+2,f
  4095                           
  4096                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4097  0ED1  3019               	movlw	25
  4098  0ED2  0627               	xorwf	_SYSC+1,w
  4099  0ED3  0428               	iorwf	_SYSC+2,w
  4100  0ED4  1D03               	skipz
  4101  0ED5  2EDB               	goto	l3475
  4102                           
  4103                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4104  0ED6  01A7               	clrf	_SYSC+1
  4105  0ED7  01A8               	clrf	_SYSC+2
  4106                           
  4107                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4108  0ED8  01A9               	clrf	_SYSC+3
  4109  0ED9  01AA               	clrf	_SYSC+4
  4110                           
  4111                           ;SYSC_B1.c: 38: } else {
  4112  0EDA  0008               	return
  4113  0EDB                     l3475:	
  4114                           
  4115                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4116  0EDB  3001               	movlw	1
  4117  0EDC  07A9               	addwf	_SYSC+3,f
  4118  0EDD  1803               	skipnc
  4119  0EDE  0AAA               	incf	_SYSC+4,f
  4120  0EDF  3000               	movlw	0
  4121  0EE0  07AA               	addwf	_SYSC+4,f
  4122                           
  4123                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4124  0EE1  3001               	movlw	1
  4125  0EE2  062A               	xorwf	_SYSC+4,w
  4126  0EE3  1D03               	skipz
  4127  0EE4  2EE7               	goto	u3245
  4128  0EE5  30F4               	movlw	244
  4129  0EE6  0629               	xorwf	_SYSC+3,w
  4130  0EE7                     u3245:	
  4131  0EE7  1D03               	skipz
  4132  0EE8  0008               	return
  4133                           
  4134                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4135  0EE9  01A9               	clrf	_SYSC+3
  4136  0EEA  01AA               	clrf	_SYSC+4
  4137                           
  4138                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4139  0EEB  10A6               	bcf	_SYSC,1
  4140  0EEC  0008               	return
  4141  0EED                     __end_of_setSYSC_Main:	
  4142                           
  4143                           	psect	text18
  4144  0B38                     __ptext18:	
  4145 ;; *************** function _SYSC_Initialization *****************
  4146 ;; Defined at:
  4147 ;;		line 7 in file "../src/SYSC_B1.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;		None               void
  4154 ;; Registers used:
  4155 ;;		status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4161 ;;      Params:         0       0       0       0
  4162 ;;      Locals:         0       0       0       0
  4163 ;;      Temps:          0       0       0       0
  4164 ;;      Totals:         0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    3
  4168 ;; This function calls:
  4169 ;;		_setSYSC_Initialization
  4170 ;; This function is called by:
  4171 ;;		_main
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           
  4176                           ;psect for function _SYSC_Initialization
  4177  0B38                     _SYSC_Initialization:	
  4178                           
  4179                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4180                           
  4181                           ;incstack = 0
  4182                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4183  0B38  158A  234C         	fcall	_setSYSC_Initialization
  4184  0B3A  0008               	return
  4185  0B3B                     __end_of_SYSC_Initialization:	
  4186                           
  4187                           	psect	text19
  4188  0B4C                     __ptext19:	
  4189 ;; *************** function _setSYSC_Initialization *****************
  4190 ;; Defined at:
  4191 ;;		line 13 in file "../src/SYSC_B1.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;		None               void
  4198 ;; Registers used:
  4199 ;;		None
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4205 ;;      Params:         0       0       0       0
  4206 ;;      Locals:         0       0       0       0
  4207 ;;      Temps:          0       0       0       0
  4208 ;;      Totals:         0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    2
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_SYSC_Initialization
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _setSYSC_Initialization
  4221  0B4C                     _setSYSC_Initialization:	
  4222                           
  4223                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _setSYSC_Initialization: []
  4227  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  4228  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  4229  0B4E  1426               	bsf	_SYSC,0
  4230  0B4F  0008               	return
  4231  0B50                     __end_of_setSYSC_Initialization:	
  4232                           
  4233                           	psect	text20
  4234  0026                     __ptext20:	
  4235 ;; *************** function _PIR_Main *****************
  4236 ;; Defined at:
  4237 ;;		line 13 in file "../src/PIR_B1.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  LightsStatus    1   15[BANK0 ] unsigned char 
  4242 ;;  cds             1   14[BANK0 ] unsigned char 
  4243 ;;  error           1   11[BANK0 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;		None               void
  4246 ;; Registers used:
  4247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4253 ;;      Params:         0       0       0       0
  4254 ;;      Locals:         0       5       0       0
  4255 ;;      Temps:          0       5       0       0
  4256 ;;      Totals:         0      10       0       0
  4257 ;;Total ram usage:       10 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    4
  4260 ;; This function calls:
  4261 ;;		_getCDS_Status
  4262 ;;		_getLights_Status
  4263 ;;		_getMain_All_Error_Status
  4264 ;;		_setLED
  4265 ;;		_setLights_Trigger
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _PIR_Main
  4273  0026                     _PIR_Main:	
  4274                           
  4275                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4279  0026  3000               	movlw	0
  4280  0027  158A  262D  118A   	fcall	_getMain_All_Error_Status
  4281  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4282  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4283  002C  00DC               	movwf	??_PIR_Main
  4284  002D  085C               	movf	??_PIR_Main,w
  4285  002E  00E1               	movwf	PIR_Main@error
  4286                           
  4287                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4288  002F  158A  2385  118A   	fcall	_getCDS_Status
  4289  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4290  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4291  0034  00DC               	movwf	??_PIR_Main
  4292  0035  085C               	movf	??_PIR_Main,w
  4293  0036  00E4               	movwf	PIR_Main@cds
  4294                           
  4295                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4296  0037  01E5               	clrf	PIR_Main@LightsStatus
  4297                           
  4298                           ;PIR_B1.c: 20: LightsStatus = getLights_Status(1);
  4299  0038  3001               	movlw	1
  4300  0039  158A  2415  118A   	fcall	_getLights_Status
  4301  003C  1283               	bcf	3,5	;RP0=0, select bank0
  4302  003D  1303               	bcf	3,6	;RP1=0, select bank0
  4303  003E  00DC               	movwf	??_PIR_Main
  4304  003F  085C               	movf	??_PIR_Main,w
  4305  0040  00E5               	movwf	PIR_Main@LightsStatus
  4306                           
  4307                           ;PIR_B1.c: 30: if (_PIR.Enable == 1) {
  4308  0041  1683               	bsf	3,5	;RP0=1, select bank1
  4309  0042  1303               	bcf	3,6	;RP1=0, select bank1
  4310  0043  1C20               	btfss	__PIR^(0+128),0
  4311  0044  29FD               	goto	l896
  4312                           
  4313                           ;PIR_B1.c: 31: if (error == 0) {
  4314  0045  1283               	bcf	3,5	;RP0=0, select bank0
  4315  0046  1303               	bcf	3,6	;RP1=0, select bank0
  4316  0047  08E1               	movf	PIR_Main@error,f
  4317  0048  1D03               	skipz
  4318  0049  2875               	goto	l897
  4319                           
  4320                           ;PIR_B1.c: 33: if (cds == 1) {
  4321  004A  0864               	movf	PIR_Main@cds,w
  4322  004B  3A01               	xorlw	1
  4323  004C  1D03               	skipz
  4324  004D  2852               	goto	l898
  4325                           
  4326                           ;PIR_B1.c: 34: _PIR.Available = 1;
  4327  004E  1683               	bsf	3,5	;RP0=1, select bank1
  4328  004F  1303               	bcf	3,6	;RP1=0, select bank1
  4329  0050  17A0               	bsf	__PIR^(0+128),7
  4330                           
  4331                           ;PIR_B1.c: 35: } else {
  4332  0051  2865               	goto	l5075
  4333  0052                     l898:	
  4334                           
  4335                           ;PIR_B1.c: 36: _PIR.Available = 0;
  4336  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4337  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4338  0054  13A0               	bcf	__PIR^(0+128),7
  4339                           
  4340                           ;PIR_B1.c: 37: if (_PIR.OK == 1) {
  4341  0055  1DA0               	btfss	__PIR^(0+128),3
  4342  0056  2865               	goto	l5075
  4343                           
  4344                           ;PIR_B1.c: 39: if (getLights_Status(1) == 1) {
  4345  0057  3001               	movlw	1
  4346  0058  158A  2415  118A   	fcall	_getLights_Status
  4347  005B  3A01               	xorlw	1
  4348  005C  1D03               	skipz
  4349  005D  2865               	goto	l5075
  4350                           
  4351                           ;PIR_B1.c: 40: setLights_Trigger(1, 0);
  4352  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4353  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4354  0060  01D6               	clrf	setLights_Trigger@command
  4355  0061  3001               	movlw	1
  4356  0062  158A  24FE  118A   	fcall	_setLights_Trigger
  4357  0065                     l5075:	
  4358                           
  4359                           ;PIR_B1.c: 41: }
  4360                           ;PIR_B1.c: 52: }
  4361                           ;PIR_B1.c: 53: }
  4362                           ;PIR_B1.c: 57: if (_PIR.Detect == 0) {
  4363  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4364  0066  1303               	bcf	3,6	;RP1=0, select bank1
  4365  0067  1A20               	btfsc	__PIR^(0+128),4
  4366  0068  287B               	goto	l904
  4367                           
  4368                           ;PIR_B1.c: 58: _PIR.Detect = 1;
  4369  0069  1620               	bsf	__PIR^(0+128),4
  4370                           
  4371                           ;PIR_B1.c: 59: if (_PIR.OK == 0) {
  4372  006A  19A0               	btfsc	__PIR^(0+128),3
  4373  006B  287B               	goto	l904
  4374                           
  4375                           ;PIR_B1.c: 60: setLED(1, 1);
  4376  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4377  006D  1303               	bcf	3,6	;RP1=0, select bank0
  4378  006E  01D6               	clrf	setLED@command
  4379  006F  0AD6               	incf	setLED@command,f
  4380  0070  3001               	movlw	1
  4381  0071  118A  279B  118A   	fcall	_setLED
  4382                           
  4383                           ;PIR_B1.c: 61: }
  4384                           ;PIR_B1.c: 62: }
  4385                           ;PIR_B1.c: 63: } else {
  4386  0074  287B               	goto	l904
  4387  0075                     l897:	
  4388                           
  4389                           ;PIR_B1.c: 64: if (_PIR.Detect == 1) {
  4390  0075  1683               	bsf	3,5	;RP0=1, select bank1
  4391  0076  1303               	bcf	3,6	;RP1=0, select bank1
  4392  0077  1E20               	btfss	__PIR^(0+128),4
  4393  0078  287B               	goto	l904
  4394                           
  4395                           ;PIR_B1.c: 65: _PIR.Detect = 0;
  4396  0079  1220               	bcf	__PIR^(0+128),4
  4397                           
  4398                           ;PIR_B1.c: 66: _PIR.Available = 0;
  4399  007A  13A0               	bcf	__PIR^(0+128),7
  4400  007B                     l904:	
  4401                           
  4402                           ;PIR_B1.c: 84: }
  4403                           ;PIR_B1.c: 85: }
  4404                           ;PIR_B1.c: 87: if (_PIR.ADtoGO == 0) {
  4405  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4406  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4407  007D  18A0               	btfsc	__PIR^(0+128),1
  4408  007E  288E               	goto	l906
  4409                           
  4410                           ;PIR_B1.c: 88: _PIR.Time++;
  4411  007F  3001               	movlw	1
  4412  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4413  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4414  0082  00DC               	movwf	??_PIR_Main
  4415  0083  085C               	movf	??_PIR_Main,w
  4416  0084  1683               	bsf	3,5	;RP0=1, select bank1
  4417  0085  1303               	bcf	3,6	;RP1=0, select bank1
  4418  0086  07A5               	addwf	(__PIR^(0+128)+5),f
  4419                           
  4420                           ;PIR_B1.c: 89: if (_PIR.Time == (100 / 20)) {
  4421  0087  0825               	movf	(__PIR^(0+128)+5),w
  4422  0088  3A05               	xorlw	5
  4423  0089  1D03               	skipz
  4424  008A  299F               	goto	l5163
  4425                           
  4426                           ;PIR_B1.c: 90: _PIR.Time = 0;
  4427  008B  01A5               	clrf	(__PIR^(0+128)+5)
  4428                           
  4429                           ;PIR_B1.c: 91: _PIR.ADtoGO = 1;
  4430  008C  14A0               	bsf	__PIR^(0+128),1
  4431                           
  4432                           ;PIR_B1.c: 92: }
  4433                           ;PIR_B1.c: 93: } else {
  4434  008D  299F               	goto	l5163
  4435  008E                     l906:	
  4436                           
  4437                           ;PIR_B1.c: 94: if (_PIR.GO == 1) {
  4438  008E  1D20               	btfss	__PIR^(0+128),2
  4439  008F  299F               	goto	l5163
  4440                           
  4441                           ;PIR_B1.c: 95: _PIR.GO = 0;
  4442  0090  1120               	bcf	__PIR^(0+128),2
  4443                           
  4444                           ;PIR_B1.c: 96: _PIR.ADtoGO = 0;
  4445  0091  10A0               	bcf	__PIR^(0+128),1
  4446                           
  4447                           ;PIR_B1.c: 97: if (_PIR.Available == 1) {
  4448  0092  1BA0               	btfsc	__PIR^(0+128),7
  4449                           
  4450                           ;PIR_B1.c: 98: if (_PIR.OK == 1) {
  4451  0093  1DA0               	btfss	__PIR^(0+128),3
  4452  0094  299F               	goto	l5163
  4453                           
  4454                           ;PIR_B1.c: 100: _PIR.Time++;
  4455  0095  3001               	movlw	1
  4456  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0098  00DC               	movwf	??_PIR_Main
  4459  0099  085C               	movf	??_PIR_Main,w
  4460  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4461  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4462  009C  07A5               	addwf	(__PIR^(0+128)+5),f
  4463                           
  4464                           ;PIR_B1.c: 101: if (_PIR.Time == 60) {
  4465  009D  0825               	movf	(__PIR^(0+128)+5),w
  4466  009E  3A3C               	xorlw	60
  4467  009F  1D03               	skipz
  4468  00A0  28D5               	goto	l5131
  4469                           
  4470                           ;PIR_B1.c: 102: _PIR.Time = 0;
  4471  00A1  01A5               	clrf	(__PIR^(0+128)+5)
  4472                           
  4473                           ;PIR_B1.c: 103: if (_PIR.RangeCount >= 90) {
  4474  00A2  305A               	movlw	90
  4475  00A3  024B               	subwf	(__PIR^(0+128)+43),w
  4476  00A4  1C03               	skipc
  4477  00A5  28B1               	goto	l5113
  4478                           
  4479                           ;PIR_B1.c: 104: _PIR.RangeTime1 = 0;
  4480  00A6  01CA               	clrf	(__PIR^(0+128)+42)
  4481                           
  4482                           ;PIR_B1.c: 106: if (_PIR.RangeValue == 25) {
  4483  00A7  084C               	movf	(__PIR^(0+128)+44),w
  4484  00A8  3A19               	xorlw	25
  4485  00A9  1903               	btfsc	3,2
  4486  00AA  28C6               	goto	L13
  4487                           
  4488                           ;PIR_B1.c: 108: } else if (_PIR.RangeValue == (25+10)) {
  4489                           
  4490                           ;PIR_B1.c: 107: _PIR.RangeValue = (25+10);
  4491  00AB  084C               	movf	(__PIR^(0+128)+44),w
  4492  00AC  3A23               	xorlw	35
  4493  00AD  1D03               	skipz
  4494  00AE  28D4               	goto	l5129
  4495                           
  4496                           ;PIR_B1.c: 109: _PIR.RangeValue = (25+20);
  4497  00AF  302D               	movlw	45
  4498  00B0  28CD               	goto	L10
  4499  00B1                     l5113:	
  4500                           ;PIR_B1.c: 110: }
  4501                           ;PIR_B1.c: 111: } else if (_PIR.RangeCount <= 10) {
  4502                           
  4503  00B1  300B               	movlw	11
  4504  00B2  024B               	subwf	(__PIR^(0+128)+43),w
  4505  00B3  1803               	skipnc
  4506  00B4  28D4               	goto	l5129
  4507                           
  4508                           ;PIR_B1.c: 112: _PIR.RangeTime1++;
  4509  00B5  3001               	movlw	1
  4510  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  4511  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  4512  00B8  00DC               	movwf	??_PIR_Main
  4513  00B9  085C               	movf	??_PIR_Main,w
  4514  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  4515  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  4516  00BC  07CA               	addwf	(__PIR^(0+128)+42),f
  4517                           
  4518                           ;PIR_B1.c: 113: if (_PIR.RangeTime1 == 2) {
  4519  00BD  084A               	movf	(__PIR^(0+128)+42),w
  4520  00BE  3A02               	xorlw	2
  4521  00BF  1D03               	skipz
  4522  00C0  28D4               	goto	l5129
  4523                           
  4524                           ;PIR_B1.c: 114: _PIR.RangeTime1 = 0;
  4525  00C1  01CA               	clrf	(__PIR^(0+128)+42)
  4526                           
  4527                           ;PIR_B1.c: 116: if (_PIR.RangeValue == (25+20)) {
  4528  00C2  084C               	movf	(__PIR^(0+128)+44),w
  4529  00C3  3A2D               	xorlw	45
  4530  00C4  1D03               	skipz
  4531  00C5  28C8               	goto	l5125
  4532  00C6                     L13:	
  4533                           
  4534                           ;PIR_B1.c: 117: _PIR.RangeValue = (25+10);
  4535  00C6  3023               	movlw	35
  4536  00C7  28CD               	goto	L10
  4537  00C8                     l5125:	
  4538                           ;PIR_B1.c: 118: } else if (_PIR.RangeValue == (25+10)) {
  4539                           
  4540  00C8  084C               	movf	(__PIR^(0+128)+44),w
  4541  00C9  3A23               	xorlw	35
  4542  00CA  1D03               	skipz
  4543  00CB  28D4               	goto	l5129
  4544                           
  4545                           ;PIR_B1.c: 119: _PIR.RangeValue = 25;
  4546  00CC  3019               	movlw	25
  4547  00CD                     L10:	
  4548  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4549  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  4550  00CF  00DC               	movwf	??_PIR_Main
  4551  00D0  085C               	movf	??_PIR_Main,w
  4552  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  4553  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  4554  00D3  00CC               	movwf	(__PIR^(0+128)+44)
  4555  00D4                     l5129:	
  4556                           
  4557                           ;PIR_B1.c: 120: }
  4558                           ;PIR_B1.c: 121: }
  4559                           ;PIR_B1.c: 122: }
  4560                           ;PIR_B1.c: 123: _PIR.RangeCount = 0;
  4561  00D4  01CB               	clrf	(__PIR^(0+128)+43)
  4562  00D5                     l5131:	
  4563                           
  4564                           ;PIR_B1.c: 124: }
  4565                           ;PIR_B1.c: 127: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4566                           ;PIR_B1.c: 128: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4567  00D5  084C               	movf	(__PIR^(0+128)+44),w
  4568  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4569  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  4570  00D8  00DC               	movwf	??_PIR_Main
  4571  00D9  01DD               	clrf	??_PIR_Main+1
  4572  00DA  09DC               	comf	??_PIR_Main,f
  4573  00DB  09DD               	comf	??_PIR_Main+1,f
  4574  00DC  0ADC               	incf	??_PIR_Main,f
  4575  00DD  1903               	skipnz
  4576  00DE  0ADD               	incf	??_PIR_Main+1,f
  4577  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  4578  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  4579  00E1  0826               	movf	(__PIR^(0+128)+6),w
  4580  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  4581  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  4582  00E4  075C               	addwf	??_PIR_Main,w
  4583  00E5  00DE               	movwf	??_PIR_Main+2
  4584  00E6  085D               	movf	??_PIR_Main+1,w
  4585  00E7  1803               	skipnc
  4586  00E8  0A5D               	incf	??_PIR_Main+1,w
  4587  00E9  00DF               	movwf	??_PIR_Main+3
  4588  00EA  085F               	movf	??_PIR_Main+3,w
  4589  00EB  3A80               	xorlw	128
  4590  00EC  3C80               	sublw	128
  4591  00ED  1D03               	skipz
  4592  00EE  28F3               	goto	u6665
  4593  00EF  085E               	movf	??_PIR_Main+2,w
  4594  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  4595  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  4596  00F2  0221               	subwf	(__PIR^(0+128)+1),w
  4597  00F3                     u6665:	
  4598  00F3  1C03               	skipc
  4599  00F4  2915               	goto	l5141
  4600  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4601  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4602  00F7  0826               	movf	(__PIR^(0+128)+6),w
  4603  00F8  074C               	addwf	(__PIR^(0+128)+44),w
  4604  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  4605  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  4606  00FB  00DC               	movwf	??_PIR_Main
  4607  00FC  01DD               	clrf	??_PIR_Main+1
  4608  00FD  0DDD               	rlf	??_PIR_Main+1,f
  4609  00FE  085D               	movf	??_PIR_Main+1,w
  4610  00FF  3A80               	xorlw	128
  4611  0100  00DE               	movwf	??_PIR_Main+2
  4612  0101  3080               	movlw	128
  4613  0102  025E               	subwf	??_PIR_Main+2,w
  4614  0103  1D03               	skipz
  4615  0104  290B               	goto	u6675
  4616  0105  1683               	bsf	3,5	;RP0=1, select bank1
  4617  0106  1303               	bcf	3,6	;RP1=0, select bank1
  4618  0107  0821               	movf	(__PIR^(0+128)+1),w
  4619  0108  1283               	bcf	3,5	;RP0=0, select bank0
  4620  0109  1303               	bcf	3,6	;RP1=0, select bank0
  4621  010A  025C               	subwf	??_PIR_Main,w
  4622  010B                     u6675:	
  4623  010B  1C03               	skipc
  4624  010C  2915               	goto	l5141
  4625                           
  4626                           ;PIR_B1.c: 130: _PIR.Count = 0;
  4627  010D  1683               	bsf	3,5	;RP0=1, select bank1
  4628  010E  1303               	bcf	3,6	;RP1=0, select bank1
  4629  010F  01C1               	clrf	(__PIR^(0+128)+33)
  4630  0110  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4631                           
  4632                           ;PIR_B1.c: 136: setLED(1, 0);
  4633  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4634  0112  1303               	bcf	3,6	;RP1=0, select bank0
  4635  0113  01D6               	clrf	setLED@command
  4636  0114  2988               	goto	L14
  4637  0115                     l5141:	
  4638                           ;PIR_B1.c: 138: } else {
  4639                           
  4640                           ;PIR_B1.c: 137: setLED(2, 0);
  4641                           
  4642                           
  4643                           ;PIR_B1.c: 141: _PIR.RangeCount++;
  4644  0115  3001               	movlw	1
  4645  0116  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0117  1303               	bcf	3,6	;RP1=0, select bank0
  4647  0118  00DC               	movwf	??_PIR_Main
  4648  0119  085C               	movf	??_PIR_Main,w
  4649  011A  1683               	bsf	3,5	;RP0=1, select bank1
  4650  011B  1303               	bcf	3,6	;RP1=0, select bank1
  4651  011C  07CB               	addwf	(__PIR^(0+128)+43),f
  4652                           
  4653                           ;PIR_B1.c: 142: _PIR.Count++;
  4654  011D  3001               	movlw	1
  4655  011E  07C1               	addwf	(__PIR^(0+128)+33),f
  4656  011F  1803               	skipnc
  4657  0120  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4658  0121  3000               	movlw	0
  4659  0122  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4660                           
  4661                           ;PIR_B1.c: 144: _PIR.TriggerValue = LightsStatus == 1 ? 3 : 3;
  4662  0123  1283               	bcf	3,5	;RP0=0, select bank0
  4663  0124  1303               	bcf	3,6	;RP1=0, select bank0
  4664  0125  0865               	movf	PIR_Main@LightsStatus,w
  4665  0126  3A01               	xorlw	1
  4666  0127  1903               	skipnz
  4667  0128  2929               	goto	l5149
  4668  0129                     l5149:	
  4669  0129  3003               	movlw	3
  4670  012A  00E2               	movwf	_PIR_Main$3109
  4671  012B  3000               	movlw	0
  4672  012C  00E3               	movwf	_PIR_Main$3109+1
  4673  012D  0862               	movf	_PIR_Main$3109,w
  4674  012E  00DC               	movwf	??_PIR_Main
  4675  012F  085C               	movf	??_PIR_Main,w
  4676  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4677  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4678  0132  00C3               	movwf	(__PIR^(0+128)+35)
  4679                           
  4680                           ;PIR_B1.c: 146: if (_PIR.Count == _PIR.TriggerValue) {
  4681  0133  0843               	movf	(__PIR^(0+128)+35),w
  4682  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4683  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4684  0136  00DC               	movwf	??_PIR_Main
  4685  0137  01DD               	clrf	??_PIR_Main+1
  4686  0138  1683               	bsf	3,5	;RP0=1, select bank1
  4687  0139  1303               	bcf	3,6	;RP1=0, select bank1
  4688  013A  0842               	movf	((__PIR+1)^(0+128)+33),w
  4689  013B  1283               	bcf	3,5	;RP0=0, select bank0
  4690  013C  1303               	bcf	3,6	;RP1=0, select bank0
  4691  013D  065D               	xorwf	??_PIR_Main+1,w
  4692  013E  1D03               	skipz
  4693  013F  2946               	goto	u6695
  4694  0140  1683               	bsf	3,5	;RP0=1, select bank1
  4695  0141  1303               	bcf	3,6	;RP1=0, select bank1
  4696  0142  0841               	movf	(__PIR^(0+128)+33),w
  4697  0143  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0144  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0145  065C               	xorwf	??_PIR_Main,w
  4700  0146                     u6695:	
  4701  0146  1D03               	skipz
  4702  0147  299F               	goto	l5163
  4703                           
  4704                           ;PIR_B1.c: 147: _PIR.Count = 0;
  4705  0148  1683               	bsf	3,5	;RP0=1, select bank1
  4706  0149  1303               	bcf	3,6	;RP1=0, select bank1
  4707  014A  01C1               	clrf	(__PIR^(0+128)+33)
  4708  014B  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4709                           
  4710                           ;PIR_B1.c: 149: _PIR.CloseTimeSeconds = 0;
  4711  014C  01C6               	clrf	(__PIR^(0+128)+38)
  4712                           
  4713                           ;PIR_B1.c: 150: _PIR.CloseTimeMinutes = 0;
  4714  014D  01C4               	clrf	(__PIR^(0+128)+36)
  4715  014E  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4716                           
  4717                           ;PIR_B1.c: 156: if (getLights_Status(1) == 0) {
  4718  014F  3001               	movlw	1
  4719  0150  158A  2415  118A   	fcall	_getLights_Status
  4720  0153  3800               	iorlw	0
  4721  0154  1D03               	skipz
  4722  0155  295E               	goto	l5157
  4723                           
  4724                           ;PIR_B1.c: 157: setLights_Trigger(1, 1);
  4725  0156  1283               	bcf	3,5	;RP0=0, select bank0
  4726  0157  1303               	bcf	3,6	;RP1=0, select bank0
  4727  0158  01D6               	clrf	setLights_Trigger@command
  4728  0159  0AD6               	incf	setLights_Trigger@command,f
  4729  015A  3001               	movlw	1
  4730  015B  158A  24FE  118A   	fcall	_setLights_Trigger
  4731  015E                     l5157:	
  4732                           
  4733                           ;PIR_B1.c: 158: }
  4734                           ;PIR_B1.c: 172: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4735  015E  1683               	bsf	3,5	;RP0=1, select bank1
  4736  015F  1303               	bcf	3,6	;RP1=0, select bank1
  4737  0160  084C               	movf	(__PIR^(0+128)+44),w
  4738  0161  1283               	bcf	3,5	;RP0=0, select bank0
  4739  0162  1303               	bcf	3,6	;RP1=0, select bank0
  4740  0163  00DC               	movwf	??_PIR_Main
  4741  0164  01DD               	clrf	??_PIR_Main+1
  4742  0165  09DC               	comf	??_PIR_Main,f
  4743  0166  09DD               	comf	??_PIR_Main+1,f
  4744  0167  0ADC               	incf	??_PIR_Main,f
  4745  0168  1903               	skipnz
  4746  0169  0ADD               	incf	??_PIR_Main+1,f
  4747  016A  1683               	bsf	3,5	;RP0=1, select bank1
  4748  016B  1303               	bcf	3,6	;RP1=0, select bank1
  4749  016C  0826               	movf	(__PIR^(0+128)+6),w
  4750  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4751  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4752  016F  075C               	addwf	??_PIR_Main,w
  4753  0170  00DE               	movwf	??_PIR_Main+2
  4754  0171  085D               	movf	??_PIR_Main+1,w
  4755  0172  1803               	skipnc
  4756  0173  0A5D               	incf	??_PIR_Main+1,w
  4757  0174  00DF               	movwf	??_PIR_Main+3
  4758  0175  085F               	movf	??_PIR_Main+3,w
  4759  0176  3A80               	xorlw	128
  4760  0177  00E0               	movwf	??_PIR_Main+4
  4761  0178  3080               	movlw	128
  4762  0179  0260               	subwf	??_PIR_Main+4,w
  4763  017A  1D03               	skipz
  4764  017B  2982               	goto	u6715
  4765  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4766  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4767  017E  0821               	movf	(__PIR^(0+128)+1),w
  4768  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4769  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4770  0181  025E               	subwf	??_PIR_Main+2,w
  4771  0182                     u6715:	
  4772  0182  1C03               	skipc
  4773  0183  2990               	goto	l5161
  4774                           
  4775                           ;PIR_B1.c: 173: setLED(1, 1);
  4776  0184  1283               	bcf	3,5	;RP0=0, select bank0
  4777  0185  1303               	bcf	3,6	;RP1=0, select bank0
  4778  0186  01D6               	clrf	setLED@command
  4779  0187  0AD6               	incf	setLED@command,f
  4780  0188                     L14:	
  4781  0188  3001               	movlw	1
  4782  0189  118A  279B  118A   	fcall	_setLED
  4783                           
  4784                           ;PIR_B1.c: 174: setLED(2, 0);
  4785  018C  1283               	bcf	3,5	;RP0=0, select bank0
  4786  018D  1303               	bcf	3,6	;RP1=0, select bank0
  4787  018E  01D6               	clrf	setLED@command
  4788  018F  299B               	goto	L11
  4789  0190                     l5161:	
  4790                           ;PIR_B1.c: 175: } else {
  4791                           
  4792                           
  4793                           ;PIR_B1.c: 176: setLED(1, 0);
  4794  0190  1283               	bcf	3,5	;RP0=0, select bank0
  4795  0191  1303               	bcf	3,6	;RP1=0, select bank0
  4796  0192  01D6               	clrf	setLED@command
  4797  0193  3001               	movlw	1
  4798  0194  118A  279B  118A   	fcall	_setLED
  4799                           
  4800                           ;PIR_B1.c: 177: setLED(2, 1);
  4801  0197  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0198  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0199  01D6               	clrf	setLED@command
  4804  019A  0AD6               	incf	setLED@command,f
  4805  019B                     L11:	
  4806  019B  3002               	movlw	2
  4807  019C  118A  279B  118A   	fcall	_setLED
  4808  019F                     l5163:	
  4809                           
  4810                           ;PIR_B1.c: 178: }
  4811                           ;PIR_B1.c: 212: }
  4812                           ;PIR_B1.c: 213: }
  4813                           ;PIR_B1.c: 214: }
  4814                           ;PIR_B1.c: 215: }
  4815                           ;PIR_B1.c: 216: }
  4816                           ;PIR_B1.c: 217: }
  4817                           ;PIR_B1.c: 218: if (_PIR.OK == 0) {
  4818  019F  1683               	bsf	3,5	;RP0=1, select bank1
  4819  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  4820  01A1  19A0               	btfsc	__PIR^(0+128),3
  4821  01A2  29CE               	goto	l5179
  4822                           
  4823                           ;PIR_B1.c: 219: _PIR.Count++;
  4824  01A3  3001               	movlw	1
  4825  01A4  07C1               	addwf	(__PIR^(0+128)+33),f
  4826  01A5  1803               	skipnc
  4827  01A6  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4828  01A7  3000               	movlw	0
  4829  01A8  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4830                           
  4831                           ;PIR_B1.c: 220: if (_PIR.Count == (30000 / 20)) {
  4832  01A9  3005               	movlw	5
  4833  01AA  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4834  01AB  1D03               	skipz
  4835  01AC  29AF               	goto	u6735
  4836  01AD  30DC               	movlw	220
  4837  01AE  0641               	xorwf	(__PIR^(0+128)+33),w
  4838  01AF                     u6735:	
  4839  01AF  1D03               	skipz
  4840  01B0  0008               	return
  4841                           
  4842                           ;PIR_B1.c: 221: _PIR.Count = 0;
  4843  01B1  01C1               	clrf	(__PIR^(0+128)+33)
  4844  01B2  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4845                           
  4846                           ;PIR_B1.c: 222: _PIR.OK = 1;
  4847  01B3  15A0               	bsf	__PIR^(0+128),3
  4848                           
  4849                           ;PIR_B1.c: 223: setLED(1, 0);
  4850  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4851  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4852  01B6  01D6               	clrf	setLED@command
  4853  01B7  3001               	movlw	1
  4854  01B8  118A  279B  118A   	fcall	_setLED
  4855                           
  4856                           ;PIR_B1.c: 224: if (cds == 0) {
  4857  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  4858  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  4859  01BD  08E4               	movf	PIR_Main@cds,f
  4860  01BE  1D03               	skipz
  4861  01BF  0008               	return
  4862                           
  4863                           ;PIR_B1.c: 227: if (getLights_Status(1) == 1) {
  4864  01C0  3001               	movlw	1
  4865  01C1  158A  2415  118A   	fcall	_getLights_Status
  4866  01C4  3A01               	xorlw	1
  4867  01C5  1D03               	skipz
  4868  01C6  0008               	return
  4869                           
  4870                           ;PIR_B1.c: 228: setLights_Trigger(1, 0);
  4871  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  4872  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  4873  01C9  01D6               	clrf	setLights_Trigger@command
  4874  01CA  3001               	movlw	1
  4875  01CB  158A  24FE         	fcall	_setLights_Trigger
  4876                           
  4877                           ;PIR_B1.c: 229: }
  4878                           ;PIR_B1.c: 241: }
  4879                           ;PIR_B1.c: 242: }
  4880                           ;PIR_B1.c: 243: } else {
  4881  01CD  0008               	return
  4882  01CE                     l5179:	
  4883                           
  4884                           ;PIR_B1.c: 244: if (LightsStatus == 1) {
  4885  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  4886  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  4887  01D0  0865               	movf	PIR_Main@LightsStatus,w
  4888  01D1  3A01               	xorlw	1
  4889  01D2  1D03               	skipz
  4890  01D3  0008               	return
  4891                           
  4892                           ;PIR_B1.c: 245: _PIR.CloseTimeSeconds++;
  4893  01D4  3001               	movlw	1
  4894  01D5  00DC               	movwf	??_PIR_Main
  4895  01D6  085C               	movf	??_PIR_Main,w
  4896  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  4897  01D8  1303               	bcf	3,6	;RP1=0, select bank1
  4898  01D9  07C6               	addwf	(__PIR^(0+128)+38),f
  4899                           
  4900                           ;PIR_B1.c: 246: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4901  01DA  0846               	movf	(__PIR^(0+128)+38),w
  4902  01DB  3A32               	xorlw	50
  4903  01DC  1D03               	skipz
  4904  01DD  0008               	return
  4905                           
  4906                           ;PIR_B1.c: 247: _PIR.CloseTimeSeconds = 0;
  4907  01DE  01C6               	clrf	(__PIR^(0+128)+38)
  4908                           
  4909                           ;PIR_B1.c: 248: _PIR.CloseTimeMinutes++;
  4910  01DF  3001               	movlw	1
  4911  01E0  07C4               	addwf	(__PIR^(0+128)+36),f
  4912  01E1  1803               	skipnc
  4913  01E2  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4914  01E3  3000               	movlw	0
  4915  01E4  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4916                           
  4917                           ;PIR_B1.c: 249: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4918  01E5  0848               	movf	((__PIR+1)^(0+128)+39),w
  4919  01E6  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4920  01E7  1D03               	skipz
  4921  01E8  29EB               	goto	u6785
  4922  01E9  0847               	movf	(__PIR^(0+128)+39),w
  4923  01EA  0644               	xorwf	(__PIR^(0+128)+36),w
  4924  01EB                     u6785:	
  4925  01EB  1D03               	skipz
  4926  01EC  0008               	return
  4927                           
  4928                           ;PIR_B1.c: 250: _PIR.CloseTimeMinutes = 0;
  4929  01ED  01C4               	clrf	(__PIR^(0+128)+36)
  4930  01EE  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4931                           
  4932                           ;PIR_B1.c: 256: if (getLights_Status(1) == 1) {
  4933  01EF  3001               	movlw	1
  4934  01F0  158A  2415  118A   	fcall	_getLights_Status
  4935  01F3  3A01               	xorlw	1
  4936  01F4  1D03               	skipz
  4937  01F5  0008               	return
  4938                           
  4939                           ;PIR_B1.c: 257: setLights_Trigger(1, 0);
  4940  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  4941  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  4942  01F8  01D6               	clrf	setLights_Trigger@command
  4943  01F9  3001               	movlw	1
  4944  01FA  158A  24FE         	fcall	_setLights_Trigger
  4945                           
  4946                           ;PIR_B1.c: 258: }
  4947                           ;PIR_B1.c: 270: }
  4948                           ;PIR_B1.c: 271: }
  4949                           ;PIR_B1.c: 272: }
  4950                           ;PIR_B1.c: 273: }
  4951                           ;PIR_B1.c: 274: } else {
  4952  01FC  0008               	return
  4953  01FD                     l896:	
  4954                           
  4955                           ;PIR_B1.c: 275: if (myMain.PowerON == 1) {
  4956  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4957  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4958  01FF  1C20               	btfss	_myMain,0
  4959  0200  0008               	return
  4960                           
  4961                           ;PIR_B1.c: 276: _PIR.Enable = 1;
  4962  0201  1683               	bsf	3,5	;RP0=1, select bank1
  4963  0202  1303               	bcf	3,6	;RP1=0, select bank1
  4964  0203  1420               	bsf	__PIR^(0+128),0
  4965                           
  4966                           ;PIR_B1.c: 277: setLED(1, 1);
  4967  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4968  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4969  0206  01D6               	clrf	setLED@command
  4970  0207  0AD6               	incf	setLED@command,f
  4971  0208  3001               	movlw	1
  4972  0209  118A  279B  118A   	fcall	_setLED
  4973                           
  4974                           ;PIR_B1.c: 281: if (getLights_Status(1) == 0) {
  4975  020C  3001               	movlw	1
  4976  020D  158A  2415  118A   	fcall	_getLights_Status
  4977  0210  3800               	iorlw	0
  4978  0211  1D03               	skipz
  4979  0212  0008               	return
  4980                           
  4981                           ;PIR_B1.c: 282: setLights_Trigger(1, 1);
  4982  0213  1283               	bcf	3,5	;RP0=0, select bank0
  4983  0214  1303               	bcf	3,6	;RP1=0, select bank0
  4984  0215  01D6               	clrf	setLights_Trigger@command
  4985  0216  0AD6               	incf	setLights_Trigger@command,f
  4986  0217  3001               	movlw	1
  4987  0218  158A  24FE         	fcall	_setLights_Trigger
  4988  021A  0008               	return
  4989  021B                     __end_of_PIR_Main:	
  4990                           
  4991                           	psect	text21
  4992  0B85                     __ptext21:	
  4993 ;; *************** function _getCDS_Status *****************
  4994 ;; Defined at:
  4995 ;;		line 42 in file "../src/CDS_B1.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  status          1    4[COMMON] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      unsigned char 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5009 ;;      Params:         0       0       0       0
  5010 ;;      Locals:         1       0       0       0
  5011 ;;      Temps:          0       0       0       0
  5012 ;;      Totals:         1       0       0       0
  5013 ;;Total ram usage:        1 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    2
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_PIR_Main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _getCDS_Status
  5025  0B85                     _getCDS_Status:	
  5026                           
  5027                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5031  0B85  3000               	movlw	0
  5032  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  5033  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  5034  0B88  1A2B               	btfsc	__CDS,4
  5035  0B89  3001               	movlw	1
  5036  0B8A  00F4               	movwf	getCDS_Status@status
  5037                           
  5038                           ;CDS_B1.c: 44: return status;
  5039  0B8B  0874               	movf	getCDS_Status@status,w
  5040  0B8C  0008               	return
  5041  0B8D                     __end_of_getCDS_Status:	
  5042                           
  5043                           	psect	text22
  5044  0BB2                     __ptext22:	
  5045 ;; *************** function _PIR_Initialization *****************
  5046 ;; Defined at:
  5047 ;;		line 7 in file "../src/PIR_B1.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;		None               void
  5054 ;; Registers used:
  5055 ;;		wreg
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5061 ;;      Params:         0       0       0       0
  5062 ;;      Locals:         0       0       0       0
  5063 ;;      Temps:          1       0       0       0
  5064 ;;      Totals:         1       0       0       0
  5065 ;;Total ram usage:        1 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    2
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_main
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           
  5076                           ;psect for function _PIR_Initialization
  5077  0BB2                     _PIR_Initialization:	
  5078                           
  5079                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _PIR_Initialization: [wreg]
  5083  0BB2  3019               	movlw	25
  5084  0BB3  00F4               	movwf	??_PIR_Initialization
  5085  0BB4  0874               	movf	??_PIR_Initialization,w
  5086  0BB5  1683               	bsf	3,5	;RP0=1, select bank1
  5087  0BB6  1303               	bcf	3,6	;RP1=0, select bank1
  5088  0BB7  00CC               	movwf	(__PIR^(0+128)+44)
  5089                           
  5090                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5091  0BB8  3005               	movlw	5
  5092  0BB9  00C7               	movwf	(__PIR^(0+128)+39)
  5093  0BBA  3000               	movlw	0
  5094  0BBB  00C8               	movwf	(__PIR^(0+128)+40)
  5095  0BBC  0008               	return
  5096  0BBD                     __end_of_PIR_Initialization:	
  5097                           
  5098                           	psect	text23
  5099  0BF5                     __ptext23:	
  5100 ;; *************** function _Mcu_Initialization *****************
  5101 ;; Defined at:
  5102 ;;		line 30 in file "../src/MCU_B1.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;		None               void
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, pclath, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5116 ;;      Params:         0       0       0       0
  5117 ;;      Locals:         0       0       0       0
  5118 ;;      Temps:          0       0       0       0
  5119 ;;      Totals:         0       0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    3
  5123 ;; This function calls:
  5124 ;;		_ADC_Set
  5125 ;;		_Fosc_Set
  5126 ;;		_IO_Set
  5127 ;;		_TMR1_Set
  5128 ;;		_WDT_Set
  5129 ;; This function is called by:
  5130 ;;		_main
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function _Mcu_Initialization
  5136  0BF5                     _Mcu_Initialization:	
  5137                           
  5138                           ;MCU_B1.c: 32: Fosc_Set();
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5142  0BF5  158A  2350  158A   	fcall	_Fosc_Set
  5143                           
  5144                           ;MCU_B1.c: 34: IO_Set();
  5145  0BF8  158A  24CA  158A   	fcall	_IO_Set
  5146                           
  5147                           ;MCU_B1.c: 36: ;;
  5148                           ;MCU_B1.c: 38: TMR1_Set();
  5149  0BFB  158A  23D9  158A   	fcall	_TMR1_Set
  5150                           
  5151                           ;MCU_B1.c: 40: ADC_Set();
  5152  0BFE  158A  236E  158A   	fcall	_ADC_Set
  5153                           
  5154                           ;MCU_B1.c: 42: ;;
  5155                           ;MCU_B1.c: 44: ;;
  5156                           ;MCU_B1.c: 46: ;;
  5157                           ;MCU_B1.c: 48: ;;
  5158                           ;MCU_B1.c: 50: ;;
  5159                           ;MCU_B1.c: 52: WDT_Set();
  5160  0C01  158A  23E7         	fcall	_WDT_Set
  5161  0C03  0008               	return
  5162  0C04                     __end_of_Mcu_Initialization:	
  5163                           
  5164                           	psect	text24
  5165  0BE7                     __ptext24:	
  5166 ;; *************** function _WDT_Set *****************
  5167 ;; Defined at:
  5168 ;;		line 1089 in file "../src/MCU_B1.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;		None
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5182 ;;      Params:         0       0       0       0
  5183 ;;      Locals:         0       0       0       0
  5184 ;;      Temps:          1       0       0       0
  5185 ;;      Totals:         1       0       0       0
  5186 ;;Total ram usage:        1 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    2
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_Mcu_Initialization
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _WDT_Set
  5198  0BE7                     _WDT_Set:	
  5199                           
  5200                           ;MCU_B1.c: 1091: PSA = 1;
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _WDT_Set: [wreg]
  5204  0BE7  1683               	bsf	3,5	;RP0=1, select bank1
  5205  0BE8  1303               	bcf	3,6	;RP1=0, select bank1
  5206  0BE9  1581               	bsf	1,3	;volatile
  5207                           
  5208                           ;MCU_B1.c: 1092: PS0 = 1;
  5209  0BEA  1401               	bsf	1,0	;volatile
  5210                           
  5211                           ;MCU_B1.c: 1093: PS1 = 1;
  5212  0BEB  1481               	bsf	1,1	;volatile
  5213                           
  5214                           ;MCU_B1.c: 1094: PS2 = 1;
  5215  0BEC  1501               	bsf	1,2	;volatile
  5216                           
  5217                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  5218  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  5219  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  5220  0BEF  1437               	bsf	_WDT,0
  5221                           
  5222                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  5223  0BF0  300A               	movlw	10
  5224  0BF1  00F4               	movwf	??_WDT_Set
  5225  0BF2  0874               	movf	??_WDT_Set,w
  5226  0BF3  00B8               	movwf	_WDT+1
  5227  0BF4  0008               	return
  5228  0BF5                     __end_of_WDT_Set:	
  5229                           
  5230                           	psect	text25
  5231  0BD9                     __ptext25:	
  5232 ;; *************** function _TMR1_Set *****************
  5233 ;; Defined at:
  5234 ;;		line 226 in file "../src/MCU_B1.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;		None               void
  5241 ;; Registers used:
  5242 ;;		wreg
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5248 ;;      Params:         0       0       0       0
  5249 ;;      Locals:         0       0       0       0
  5250 ;;      Temps:          0       0       0       0
  5251 ;;      Totals:         0       0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    2
  5255 ;; This function calls:
  5256 ;;		Nothing
  5257 ;; This function is called by:
  5258 ;;		_Mcu_Initialization
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _TMR1_Set
  5264  0BD9                     _TMR1_Set:	
  5265                           
  5266                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in _TMR1_Set: [wreg]
  5270  0BD9  3041               	movlw	65
  5271  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0BDC  0090               	movwf	16	;volatile
  5274                           
  5275                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5276  0BDD  30FA               	movlw	250
  5277  0BDE  008F               	movwf	15	;volatile
  5278                           
  5279                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5280  0BDF  3038               	movlw	56
  5281  0BE0  008E               	movwf	14	;volatile
  5282                           
  5283                           ;MCU_B1.c: 230: TMR1IE = 1;
  5284  0BE1  1683               	bsf	3,5	;RP0=1, select bank1
  5285  0BE2  1303               	bcf	3,6	;RP1=0, select bank1
  5286  0BE3  140C               	bsf	12,0	;volatile
  5287                           
  5288                           ;MCU_B1.c: 231: PEIE = 1;
  5289  0BE4  170B               	bsf	11,6	;volatile
  5290                           
  5291                           ;MCU_B1.c: 232: GIE = 1;
  5292  0BE5  178B               	bsf	11,7	;volatile
  5293  0BE6  0008               	return
  5294  0BE7                     __end_of_TMR1_Set:	
  5295                           
  5296                           	psect	text26
  5297  0CCA                     __ptext26:	
  5298 ;; *************** function _IO_Set *****************
  5299 ;; Defined at:
  5300 ;;		line 60 in file "../src/MCU_B1.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;		None               void
  5307 ;; Registers used:
  5308 ;;		wreg, status,2
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5314 ;;      Params:         0       0       0       0
  5315 ;;      Locals:         0       0       0       0
  5316 ;;      Temps:          0       0       0       0
  5317 ;;      Totals:         0       0       0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    2
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_Mcu_Initialization
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _IO_Set
  5330  0CCA                     _IO_Set:	
  5331                           
  5332                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5333                           
  5334                           ;incstack = 0
  5335                           ; Regs used in _IO_Set: [wreg+status,2]
  5336  0CCA  302F               	movlw	47
  5337  0CCB  1683               	bsf	3,5	;RP0=1, select bank1
  5338  0CCC  1303               	bcf	3,6	;RP1=0, select bank1
  5339  0CCD  0085               	movwf	5	;volatile
  5340                           
  5341                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5342  0CCE  3013               	movlw	19
  5343  0CCF  0086               	movwf	6	;volatile
  5344                           
  5345                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5346  0CD0  300C               	movlw	12
  5347  0CD1  0087               	movwf	7	;volatile
  5348                           
  5349                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5350  0CD2  300F               	movlw	15
  5351  0CD3  1683               	bsf	3,5	;RP0=1, select bank3
  5352  0CD4  1703               	bsf	3,6	;RP1=1, select bank3
  5353  0CD5  0085               	movwf	5	;volatile
  5354                           
  5355                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5356  0CD6  3012               	movlw	18
  5357  0CD7  0086               	movwf	6	;volatile
  5358                           
  5359                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5360  0CD8  30AF               	movlw	175
  5361  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  5362  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  5363  0CDB  0085               	movwf	5	;volatile
  5364                           
  5365                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5366  0CDC  3013               	movlw	19
  5367  0CDD  0086               	movwf	6	;volatile
  5368                           
  5369                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5370  0CDE  300C               	movlw	12
  5371  0CDF  0087               	movwf	7	;volatile
  5372                           
  5373                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5374  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  5375  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  5376  0CE2  0195               	clrf	21	;volatile
  5377  0CE3  0008               	return
  5378  0CE4                     __end_of_IO_Set:	
  5379                           
  5380                           	psect	text27
  5381  0B50                     __ptext27:	
  5382 ;; *************** function _Fosc_Set *****************
  5383 ;; Defined at:
  5384 ;;		line 56 in file "../src/MCU_B1.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;		None               void
  5391 ;; Registers used:
  5392 ;;		wreg
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5398 ;;      Params:         0       0       0       0
  5399 ;;      Locals:         0       0       0       0
  5400 ;;      Temps:          0       0       0       0
  5401 ;;      Totals:         0       0       0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    2
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_Mcu_Initialization
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           
  5413                           ;psect for function _Fosc_Set
  5414  0B50                     _Fosc_Set:	
  5415                           
  5416                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in _Fosc_Set: [wreg]
  5420  0B50  303C               	movlw	60
  5421  0B51  1683               	bsf	3,5	;RP0=1, select bank1
  5422  0B52  1303               	bcf	3,6	;RP1=0, select bank1
  5423  0B53  0090               	movwf	16	;volatile
  5424  0B54  0008               	return
  5425  0B55                     __end_of_Fosc_Set:	
  5426                           
  5427                           	psect	text28
  5428  0B6E                     __ptext28:	
  5429 ;; *************** function _ADC_Set *****************
  5430 ;; Defined at:
  5431 ;;		line 425 in file "../src/MCU_B1.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;		None               void
  5438 ;; Registers used:
  5439 ;;		wreg
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5445 ;;      Params:         0       0       0       0
  5446 ;;      Locals:         0       0       0       0
  5447 ;;      Temps:          0       0       0       0
  5448 ;;      Totals:         0       0       0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    2
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_Mcu_Initialization
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _ADC_Set
  5461  0B6E                     _ADC_Set:	
  5462                           
  5463                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _ADC_Set: [wreg]
  5467  0B6E  3073               	movlw	115
  5468  0B6F  1683               	bsf	3,5	;RP0=1, select bank1
  5469  0B70  1303               	bcf	3,6	;RP1=0, select bank1
  5470  0B71  009F               	movwf	31	;volatile
  5471                           
  5472                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  5473  0B72  30C1               	movlw	193
  5474  0B73  009D               	movwf	29	;volatile
  5475  0B74  0008               	return
  5476  0B75                     __end_of_ADC_Set:	
  5477                           
  5478                           	psect	text29
  5479  021B                     __ptext29:	
  5480 ;; *************** function _Load_Main *****************
  5481 ;; Defined at:
  5482 ;;		line 39 in file "../src/OverLoad_B1.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  i               2   11[BANK0 ] int 
  5487 ;;  Load_Status     1   10[BANK0 ] unsigned char 
  5488 ;;  error           1    9[BANK0 ] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;		None               void
  5491 ;; Registers used:
  5492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5498 ;;      Params:         0       0       0       0
  5499 ;;      Locals:         0       4       0       0
  5500 ;;      Temps:          0       2       0       0
  5501 ;;      Totals:         0       6       0       0
  5502 ;;Total ram usage:        6 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    3
  5505 ;; This function calls:
  5506 ;;		___lwdiv
  5507 ;;		___wmul
  5508 ;;		_getLight_LoadGO
  5509 ;;		_getLight_Load_Status
  5510 ;;		_getMain_All_Error_Status
  5511 ;;		_getMain_All_LightsStatus
  5512 ;;		_getMain_Lights_Count
  5513 ;;		_setLoad_AH_AL_Restore
  5514 ;; This function is called by:
  5515 ;;		_main
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _Load_Main
  5521  021B                     _Load_Main:	
  5522                           
  5523                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5527  021B  3000               	movlw	0
  5528  021C  158A  262D  118A   	fcall	_getMain_All_Error_Status
  5529  021F  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0220  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0221  00DD               	movwf	??_Load_Main
  5532  0222  085D               	movf	??_Load_Main,w
  5533  0223  00DF               	movwf	Load_Main@error
  5534                           
  5535                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  5536  0224  01E0               	clrf	Load_Main@Load_Status
  5537                           
  5538                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5539  0225  1683               	bsf	3,5	;RP0=1, select bank1
  5540  0226  1303               	bcf	3,6	;RP1=0, select bank1
  5541  0227  1C4E               	btfss	_Load^(0+128),0
  5542  0228  2BFA               	goto	l706
  5543                           
  5544                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5545  0229  158A  2395  118A   	fcall	_getMain_All_LightsStatus
  5546  022C  3800               	iorlw	0
  5547  022D  1D03               	skipz
  5548  022E  2A32               	goto	l4911
  5549                           
  5550                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5551  022F  1683               	bsf	3,5	;RP0=1, select bank1
  5552  0230  1303               	bcf	3,6	;RP1=0, select bank1
  5553  0231  2A51               	goto	l4927
  5554  0232                     l4911:	
  5555                           ;OverLoad_B1.c: 47: } else {
  5556                           
  5557                           
  5558                           ;OverLoad_B1.c: 70: if (error == 0) {
  5559  0232  1283               	bcf	3,5	;RP0=0, select bank0
  5560  0233  1303               	bcf	3,6	;RP1=0, select bank0
  5561  0234  08DF               	movf	Load_Main@error,f
  5562  0235  1D03               	skipz
  5563  0236  2A4E               	goto	l709
  5564                           
  5565                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5566  0237  1683               	bsf	3,5	;RP0=1, select bank1
  5567  0238  1303               	bcf	3,6	;RP1=0, select bank1
  5568  0239  14CE               	bsf	_Load^(0+128),1
  5569                           
  5570                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5571  023A  158A  2355  118A   	fcall	_getLight_LoadGO
  5572  023D  3A01               	xorlw	1
  5573  023E  1D03               	skipz
  5574  023F  2A48               	goto	l710
  5575                           
  5576                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5577  0240  1683               	bsf	3,5	;RP0=1, select bank1
  5578  0241  1303               	bcf	3,6	;RP1=0, select bank1
  5579  0242  1DCE               	btfss	_Load^(0+128),3
  5580  0243  1BCE               	btfsc	_Load^(0+128),7
  5581  0244  2A52               	goto	l708
  5582                           
  5583                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5584  0245  15CE               	bsf	_Load^(0+128),3
  5585                           
  5586                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5587  0246  01EA               	clrf	(_Load^(0+128)+28)
  5588                           
  5589                           ;OverLoad_B1.c: 77: }
  5590                           ;OverLoad_B1.c: 78: } else {
  5591  0247  2A52               	goto	l708
  5592  0248                     l710:	
  5593                           
  5594                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5595  0248  1683               	bsf	3,5	;RP0=1, select bank1
  5596  0249  1303               	bcf	3,6	;RP1=0, select bank1
  5597  024A  1FCE               	btfss	_Load^(0+128),7
  5598  024B  2A52               	goto	l708
  5599                           
  5600                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5601  024C  13CE               	bcf	_Load^(0+128),7
  5602                           
  5603                           ;OverLoad_B1.c: 81: }
  5604                           ;OverLoad_B1.c: 82: }
  5605                           ;OverLoad_B1.c: 83: } else {
  5606  024D  2A52               	goto	l708
  5607  024E                     l709:	
  5608                           
  5609                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5610  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5611  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5612  0250  18CE               	btfsc	_Load^(0+128),1
  5613  0251                     l4927:	
  5614                           
  5615                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5616  0251  10CE               	bcf	_Load^(0+128),1
  5617  0252                     l708:	
  5618                           
  5619                           ;OverLoad_B1.c: 86: }
  5620                           ;OverLoad_B1.c: 87: }
  5621                           ;OverLoad_B1.c: 89: }
  5622                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5623  0252  1CCE               	btfss	_Load^(0+128),1
  5624  0253  2BD3               	goto	l716
  5625                           
  5626                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5627  0254  154E               	bsf	_Load^(0+128),2
  5628                           
  5629                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5630  0255  1E4E               	btfss	_Load^(0+128),4
  5631  0256  2BD1               	goto	l717
  5632                           
  5633                           ;OverLoad_B1.c: 96: Load.Time++;
  5634  0257  3001               	movlw	1
  5635  0258  07CF               	addwf	(_Load^(0+128)+1),f
  5636  0259  1803               	skipnc
  5637  025A  0AD0               	incf	((_Load+1)^(0+128)+1),f
  5638  025B  3000               	movlw	0
  5639  025C  07D0               	addwf	((_Load+1)^(0+128)+1),f
  5640                           
  5641                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5642  025D  3000               	movlw	0
  5643  025E  0250               	subwf	((_Load+1)^(0+128)+1),w
  5644  025F  3002               	movlw	2
  5645  0260  1903               	skipnz
  5646  0261  024F               	subwf	(_Load^(0+128)+1),w
  5647  0262  1C03               	skipc
  5648  0263  0008               	return
  5649                           
  5650                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5651  0264  01CF               	clrf	(_Load^(0+128)+1)
  5652  0265  01D0               	clrf	((_Load+1)^(0+128)+1)
  5653                           
  5654                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5655  0266  124E               	bcf	_Load^(0+128),4
  5656                           
  5657                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5658  0267  3001               	movlw	1
  5659  0268  1283               	bcf	3,5	;RP0=0, select bank0
  5660  0269  1303               	bcf	3,6	;RP1=0, select bank0
  5661  026A  00E1               	movwf	Load_Main@i
  5662  026B  3000               	movlw	0
  5663  026C  00E2               	movwf	Load_Main@i+1
  5664  026D  0862               	movf	Load_Main@i+1,w
  5665  026E  3A80               	xorlw	128
  5666  026F  00FF               	movwf	127
  5667  0270  3080               	movlw	128
  5668  0271  027F               	subwf	127,w
  5669  0272  1D03               	skipz
  5670  0273  2A76               	goto	u6235
  5671  0274  3004               	movlw	4
  5672  0275  0261               	subwf	Load_Main@i,w
  5673  0276                     u6235:	
  5674  0276  1803               	btfsc	3,0
  5675  0277  2AB4               	goto	l4949
  5676  0278                     l4943:	
  5677                           
  5678                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5679  0278  1283               	bcf	3,5	;RP0=0, select bank0
  5680  0279  1303               	bcf	3,6	;RP1=0, select bank0
  5681  027A  0861               	movf	Load_Main@i,w
  5682  027B  3ED8               	addlw	(_Load+10)& (0+255)
  5683  027C  0084               	movwf	4
  5684  027D  1383               	bcf	3,7	;select IRP bank1
  5685  027E  0800               	movf	0,w
  5686  027F  00DD               	movwf	??_Load_Main
  5687  0280  01DE               	clrf	??_Load_Main+1
  5688  0281  085D               	movf	??_Load_Main,w
  5689  0282  1683               	bsf	3,5	;RP0=1, select bank1
  5690  0283  1303               	bcf	3,6	;RP1=0, select bank1
  5691  0284  07D3               	addwf	(_Load^(0+128)+5),f
  5692  0285  1803               	skipnc
  5693  0286  0AD4               	incf	((_Load+1)^(0+128)+5),f
  5694  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5695  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5696  0289  085E               	movf	??_Load_Main+1,w
  5697  028A  1683               	bsf	3,5	;RP0=1, select bank1
  5698  028B  1303               	bcf	3,6	;RP1=0, select bank1
  5699  028C  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5700                           
  5701                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5702  028D  1283               	bcf	3,5	;RP0=0, select bank0
  5703  028E  1303               	bcf	3,6	;RP1=0, select bank0
  5704  028F  0861               	movf	Load_Main@i,w
  5705  0290  3EDD               	addlw	(_Load+15)& (0+255)
  5706  0291  0084               	movwf	4
  5707  0292  0800               	movf	0,w
  5708  0293  00DD               	movwf	??_Load_Main
  5709  0294  01DE               	clrf	??_Load_Main+1
  5710  0295  085D               	movf	??_Load_Main,w
  5711  0296  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0297  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0298  07D5               	addwf	(_Load^(0+128)+7),f
  5714  0299  1803               	skipnc
  5715  029A  0AD6               	incf	((_Load+1)^(0+128)+7),f
  5716  029B  1283               	bcf	3,5	;RP0=0, select bank0
  5717  029C  1303               	bcf	3,6	;RP1=0, select bank0
  5718  029D  085E               	movf	??_Load_Main+1,w
  5719  029E  1683               	bsf	3,5	;RP0=1, select bank1
  5720  029F  1303               	bcf	3,6	;RP1=0, select bank1
  5721  02A0  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5722  02A1  3001               	movlw	1
  5723  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5724  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5725  02A4  07E1               	addwf	Load_Main@i,f
  5726  02A5  1803               	skipnc
  5727  02A6  0AE2               	incf	Load_Main@i+1,f
  5728  02A7  3000               	movlw	0
  5729  02A8  07E2               	addwf	Load_Main@i+1,f
  5730  02A9  0862               	movf	Load_Main@i+1,w
  5731  02AA  3A80               	xorlw	128
  5732  02AB  00FF               	movwf	127
  5733  02AC  3080               	movlw	128
  5734  02AD  027F               	subwf	127,w
  5735  02AE  1D03               	skipz
  5736  02AF  2AB2               	goto	u6245
  5737  02B0  3004               	movlw	4
  5738  02B1  0261               	subwf	Load_Main@i,w
  5739  02B2                     u6245:	
  5740  02B2  1C03               	skipc
  5741  02B3  2A78               	goto	l4943
  5742  02B4                     l4949:	
  5743                           
  5744                           ;OverLoad_B1.c: 104: }
  5745                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5746  02B4  3003               	movlw	3
  5747  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  5748  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  5749  02B7  00D6               	movwf	___lwdiv@divisor
  5750  02B8  3000               	movlw	0
  5751  02B9  00D7               	movwf	___lwdiv@divisor+1
  5752  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  5753  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  5754  02BC  0854               	movf	((_Load+1)^(0+128)+5),w
  5755  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  5756  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  5757  02BF  01D9               	clrf	___lwdiv@dividend+1
  5758  02C0  07D9               	addwf	___lwdiv@dividend+1,f
  5759  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  5760  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  5761  02C3  0853               	movf	(_Load^(0+128)+5),w
  5762  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5763  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5764  02C6  01D8               	clrf	___lwdiv@dividend
  5765  02C7  07D8               	addwf	___lwdiv@dividend,f
  5766  02C8  158A  266B  118A   	fcall	___lwdiv
  5767  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5768  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5769  02CD  0857               	movf	?___lwdiv+1,w
  5770  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  5771  02CF  1303               	bcf	3,6	;RP1=0, select bank1
  5772  02D0  01D4               	clrf	((_Load+1)^(0+128)+5)
  5773  02D1  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5774  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  5775  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  5776  02D4  0856               	movf	?___lwdiv,w
  5777  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5778  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5779  02D7  01D3               	clrf	(_Load^(0+128)+5)
  5780  02D8  07D3               	addwf	(_Load^(0+128)+5),f
  5781                           
  5782                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5783  02D9  3003               	movlw	3
  5784  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  5785  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  5786  02DC  00D6               	movwf	___lwdiv@divisor
  5787  02DD  3000               	movlw	0
  5788  02DE  00D7               	movwf	___lwdiv@divisor+1
  5789  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  5790  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  5791  02E1  0856               	movf	((_Load+1)^(0+128)+7),w
  5792  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5793  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5794  02E4  01D9               	clrf	___lwdiv@dividend+1
  5795  02E5  07D9               	addwf	___lwdiv@dividend+1,f
  5796  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5797  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5798  02E8  0855               	movf	(_Load^(0+128)+7),w
  5799  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5800  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5801  02EB  01D8               	clrf	___lwdiv@dividend
  5802  02EC  07D8               	addwf	___lwdiv@dividend,f
  5803  02ED  158A  266B  118A   	fcall	___lwdiv
  5804  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5805  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5806  02F2  0857               	movf	?___lwdiv+1,w
  5807  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  5808  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  5809  02F5  01D6               	clrf	((_Load+1)^(0+128)+7)
  5810  02F6  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5811  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  5812  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  5813  02F9  0856               	movf	?___lwdiv,w
  5814  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5815  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5816  02FC  01D5               	clrf	(_Load^(0+128)+7)
  5817  02FD  07D5               	addwf	(_Load^(0+128)+7),f
  5818                           
  5819                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  5820  02FE  158A  2485  118A   	fcall	_setLoad_AH_AL_Restore
  5821                           
  5822                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  5823  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5824  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5825  0303  0856               	movf	((_Load+1)^(0+128)+7),w
  5826  0304  0254               	subwf	((_Load+1)^(0+128)+5),w
  5827  0305  1D03               	skipz
  5828  0306  2B09               	goto	u6255
  5829  0307  0855               	movf	(_Load^(0+128)+7),w
  5830  0308  0253               	subwf	(_Load^(0+128)+5),w
  5831  0309                     u6255:	
  5832  0309  1C03               	skipc
  5833  030A  0008               	return
  5834                           
  5835                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  5836  030B  0355               	decf	(_Load^(0+128)+7),w
  5837  030C  3AFF               	xorlw	255
  5838  030D  0753               	addwf	(_Load^(0+128)+5),w
  5839  030E  1283               	bcf	3,5	;RP0=0, select bank0
  5840  030F  1303               	bcf	3,6	;RP1=0, select bank0
  5841  0310  00DD               	movwf	??_Load_Main
  5842  0311  085D               	movf	??_Load_Main,w
  5843  0312  1683               	bsf	3,5	;RP0=1, select bank1
  5844  0313  1303               	bcf	3,6	;RP1=0, select bank1
  5845  0314  00E2               	movwf	(_Load^(0+128)+20)
  5846                           
  5847                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  5848  0315  01D3               	clrf	(_Load^(0+128)+5)
  5849  0316  01D4               	clrf	((_Load+1)^(0+128)+5)
  5850                           
  5851                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  5852  0317  01D5               	clrf	(_Load^(0+128)+7)
  5853  0318  01D6               	clrf	((_Load+1)^(0+128)+7)
  5854                           
  5855                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  5856  0319  1DCE               	btfss	_Load^(0+128),3
  5857  031A  2B87               	goto	l722
  5858                           
  5859                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  5860  031B  3002               	movlw	2
  5861  031C  026A               	subwf	(_Load^(0+128)+28),w
  5862  031D  1803               	skipnc
  5863  031E  2B87               	goto	l722
  5864                           
  5865                           ;OverLoad_B1.c: 116: Load.Count++;
  5866  031F  3001               	movlw	1
  5867  0320  1283               	bcf	3,5	;RP0=0, select bank0
  5868  0321  1303               	bcf	3,6	;RP1=0, select bank0
  5869  0322  00DD               	movwf	??_Load_Main
  5870  0323  085D               	movf	??_Load_Main,w
  5871  0324  1683               	bsf	3,5	;RP0=1, select bank1
  5872  0325  1303               	bcf	3,6	;RP1=0, select bank1
  5873  0326  07EA               	addwf	(_Load^(0+128)+28),f
  5874                           
  5875                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  5876  0327  158A  235B  118A   	fcall	_getLight_Load_Status
  5877  032A  1283               	bcf	3,5	;RP0=0, select bank0
  5878  032B  1303               	bcf	3,6	;RP1=0, select bank0
  5879  032C  00DD               	movwf	??_Load_Main
  5880  032D  085D               	movf	??_Load_Main,w
  5881  032E  00E0               	movwf	Load_Main@Load_Status
  5882                           
  5883                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
  5884  032F  158A  23A8  118A   	fcall	_getMain_Lights_Count
  5885  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0334  00DD               	movwf	??_Load_Main
  5888  0335  085D               	movf	??_Load_Main,w
  5889  0336  1683               	bsf	3,5	;RP0=1, select bank1
  5890  0337  1303               	bcf	3,6	;RP1=0, select bank1
  5891  0338  00ED               	movwf	(_Load^(0+128)+31)
  5892                           
  5893                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5894  0339  086A               	movf	(_Load^(0+128)+28),w
  5895  033A  3A01               	xorlw	1
  5896  033B  1D03               	skipz
  5897  033C  2B47               	goto	l4975
  5898                           
  5899                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
  5900  033D  3002               	movlw	2
  5901  033E  1283               	bcf	3,5	;RP0=0, select bank0
  5902  033F  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0340  00DD               	movwf	??_Load_Main
  5904  0341  085D               	movf	??_Load_Main,w
  5905  0342  1683               	bsf	3,5	;RP0=1, select bank1
  5906  0343  1303               	bcf	3,6	;RP1=0, select bank1
  5907  0344  00EC               	movwf	(_Load^(0+128)+30)
  5908                           
  5909                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5910  0345  3022               	movlw	34
  5911  0346  2B50               	goto	L15
  5912  0347                     l4975:	
  5913                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5914                           
  5915  0347  086A               	movf	(_Load^(0+128)+28),w
  5916  0348  3A02               	xorlw	2
  5917  0349  1D03               	skipz
  5918  034A  2B87               	goto	l722
  5919                           
  5920                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
  5921  034B  086D               	movf	(_Load^(0+128)+31),w
  5922  034C  3A01               	xorlw	1
  5923  034D  1D03               	skipz
  5924  034E  2B53               	goto	l4981
  5925                           
  5926                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(7*1.7);
  5927  034F  300B               	movlw	11
  5928  0350                     L15:	
  5929  0350  00E6               	movwf	(_Load^(0+128)+24)
  5930  0351  3000               	movlw	0
  5931  0352  2B86               	goto	L16
  5932  0353                     l4981:	
  5933                           ;OverLoad_B1.c: 130: } else {
  5934                           
  5935                           
  5936                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
  5937  0353  1283               	bcf	3,5	;RP0=0, select bank0
  5938  0354  1303               	bcf	3,6	;RP1=0, select bank0
  5939  0355  08E0               	movf	Load_Main@Load_Status,f
  5940  0356  1D03               	skipz
  5941  0357  2B79               	goto	l4985
  5942                           
  5943                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(7*1.7) * Load.LightsCount;
  5944  0358  1683               	bsf	3,5	;RP0=1, select bank1
  5945  0359  1303               	bcf	3,6	;RP1=0, select bank1
  5946  035A  086D               	movf	(_Load^(0+128)+31),w
  5947  035B  1283               	bcf	3,5	;RP0=0, select bank0
  5948  035C  1303               	bcf	3,6	;RP1=0, select bank0
  5949  035D  00DD               	movwf	??_Load_Main
  5950  035E  01DE               	clrf	??_Load_Main+1
  5951  035F  085D               	movf	??_Load_Main,w
  5952  0360  00D6               	movwf	___wmul@multiplier
  5953  0361  085E               	movf	??_Load_Main+1,w
  5954  0362  00D7               	movwf	___wmul@multiplier+1
  5955  0363  300B               	movlw	11
  5956  0364  00D8               	movwf	___wmul@multiplicand
  5957  0365  3000               	movlw	0
  5958  0366  00D9               	movwf	___wmul@multiplicand+1
  5959  0367  158A  2553  118A   	fcall	___wmul
  5960  036A  1283               	bcf	3,5	;RP0=0, select bank0
  5961  036B  1303               	bcf	3,6	;RP1=0, select bank0
  5962  036C  0857               	movf	?___wmul+1,w
  5963  036D  1683               	bsf	3,5	;RP0=1, select bank1
  5964  036E  1303               	bcf	3,6	;RP1=0, select bank1
  5965  036F  01E7               	clrf	((_Load+1)^(0+128)+24)
  5966  0370  07E7               	addwf	((_Load+1)^(0+128)+24),f
  5967  0371  1283               	bcf	3,5	;RP0=0, select bank0
  5968  0372  1303               	bcf	3,6	;RP1=0, select bank0
  5969  0373  0856               	movf	?___wmul,w
  5970  0374  1683               	bsf	3,5	;RP0=1, select bank1
  5971  0375  1303               	bcf	3,6	;RP1=0, select bank1
  5972  0376  01E6               	clrf	(_Load^(0+128)+24)
  5973  0377  07E6               	addwf	(_Load^(0+128)+24),f
  5974                           
  5975                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
  5976  0378  2B87               	goto	l722
  5977  0379                     l4985:	
  5978  0379  1283               	bcf	3,5	;RP0=0, select bank0
  5979  037A  0860               	movf	Load_Main@Load_Status,w
  5980  037B  3A01               	xorlw	1
  5981  037C  1D03               	skipz
  5982  037D  2B87               	goto	l722
  5983                           
  5984                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(7*1.7) + Load.TotalLoad;
  5985  037E  1683               	bsf	3,5	;RP0=1, select bank1
  5986  037F  1303               	bcf	3,6	;RP1=0, select bank1
  5987  0380  0857               	movf	(_Load^(0+128)+9),w
  5988  0381  3E0B               	addlw	11
  5989  0382  00E6               	movwf	(_Load^(0+128)+24)
  5990  0383  3000               	movlw	0
  5991  0384  1803               	skipnc
  5992  0385  3001               	movlw	1
  5993  0386                     L16:	
  5994  0386  00E7               	movwf	(_Load^(0+128)+25)
  5995  0387                     l722:	
  5996                           
  5997                           ;OverLoad_B1.c: 135: }
  5998                           ;OverLoad_B1.c: 136: }
  5999                           ;OverLoad_B1.c: 137: }
  6000                           ;OverLoad_B1.c: 138: }
  6001                           ;OverLoad_B1.c: 139: }
  6002                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6003  0387  1683               	bsf	3,5	;RP0=1, select bank1
  6004  0388  1303               	bcf	3,6	;RP1=0, select bank1
  6005  0389  0862               	movf	(_Load^(0+128)+20),w
  6006  038A  1283               	bcf	3,5	;RP0=0, select bank0
  6007  038B  1303               	bcf	3,6	;RP1=0, select bank0
  6008  038C  00DD               	movwf	??_Load_Main
  6009  038D  01DE               	clrf	??_Load_Main+1
  6010  038E  1683               	bsf	3,5	;RP0=1, select bank1
  6011  038F  1303               	bcf	3,6	;RP1=0, select bank1
  6012  0390  0867               	movf	((_Load+1)^(0+128)+24),w
  6013  0391  1283               	bcf	3,5	;RP0=0, select bank0
  6014  0392  1303               	bcf	3,6	;RP1=0, select bank0
  6015  0393  025E               	subwf	??_Load_Main+1,w
  6016  0394  1D03               	skipz
  6017  0395  2B9C               	goto	u6335
  6018  0396  1683               	bsf	3,5	;RP0=1, select bank1
  6019  0397  1303               	bcf	3,6	;RP1=0, select bank1
  6020  0398  0866               	movf	(_Load^(0+128)+24),w
  6021  0399  1283               	bcf	3,5	;RP0=0, select bank0
  6022  039A  1303               	bcf	3,6	;RP1=0, select bank0
  6023  039B  025D               	subwf	??_Load_Main,w
  6024  039C                     u6335:	
  6025  039C  1C03               	skipc
  6026  039D  2BAB               	goto	l4997
  6027                           
  6028                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
  6029  039E  3001               	movlw	1
  6030  039F  00DD               	movwf	??_Load_Main
  6031  03A0  085D               	movf	??_Load_Main,w
  6032  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  6033  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  6034  03A3  07EB               	addwf	(_Load^(0+128)+29),f
  6035                           
  6036                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
  6037  03A4  086B               	movf	(_Load^(0+128)+29),w
  6038  03A5  026C               	subwf	(_Load^(0+128)+30),w
  6039  03A6  1803               	skipnc
  6040  03A7  0008               	return
  6041                           
  6042                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6043  03A8  01EB               	clrf	(_Load^(0+128)+29)
  6044                           
  6045                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
  6046  03A9  16CE               	bsf	_Load^(0+128),5
  6047                           
  6048                           ;OverLoad_B1.c: 167: }
  6049                           ;OverLoad_B1.c: 168: } else {
  6050  03AA  0008               	return
  6051  03AB                     l4997:	
  6052                           
  6053                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
  6054  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  6055  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  6056  03AD  01EB               	clrf	(_Load^(0+128)+29)
  6057                           
  6058                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
  6059  03AE  1DCE               	btfss	_Load^(0+128),3
  6060  03AF  0008               	return
  6061                           
  6062                           ;OverLoad_B1.c: 171: Load.SafeCount++;
  6063  03B0  3001               	movlw	1
  6064  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  6065  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  6066  03B3  00DD               	movwf	??_Load_Main
  6067  03B4  085D               	movf	??_Load_Main,w
  6068  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  6069  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  6070  03B7  07EE               	addwf	(_Load^(0+128)+32),f
  6071                           
  6072                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
  6073  03B8  3003               	movlw	3
  6074  03B9  026E               	subwf	(_Load^(0+128)+32),w
  6075  03BA  1C03               	skipc
  6076  03BB  0008               	return
  6077                           
  6078                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
  6079  03BC  01EE               	clrf	(_Load^(0+128)+32)
  6080                           
  6081                           ;OverLoad_B1.c: 174: Load.OK = 1;
  6082  03BD  17CE               	bsf	_Load^(0+128),7
  6083                           
  6084                           ;OverLoad_B1.c: 175: Load.Run = 0;
  6085  03BE  11CE               	bcf	_Load^(0+128),3
  6086                           
  6087                           ;OverLoad_B1.c: 176: Load.Count = 0;
  6088  03BF  01EA               	clrf	(_Load^(0+128)+28)
  6089                           
  6090                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
  6091  03C0  0862               	movf	(_Load^(0+128)+20),w
  6092  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6093  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6094  03C3  00DD               	movwf	??_Load_Main
  6095  03C4  085D               	movf	??_Load_Main,w
  6096  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  6097  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  6098  03C7  00D7               	movwf	(_Load^(0+128)+9)
  6099                           
  6100                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
  6101  03C8  3003               	movlw	3
  6102  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  6103  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  6104  03CB  00DD               	movwf	??_Load_Main
  6105  03CC  085D               	movf	??_Load_Main,w
  6106  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  6107  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  6108  03CF  00EC               	movwf	(_Load^(0+128)+30)
  6109                           
  6110                           ;OverLoad_B1.c: 181: }
  6111                           ;OverLoad_B1.c: 182: }
  6112                           ;OverLoad_B1.c: 205: }
  6113                           ;OverLoad_B1.c: 206: }
  6114                           ;OverLoad_B1.c: 207: }
  6115                           ;OverLoad_B1.c: 208: } else {
  6116  03D0  0008               	return
  6117  03D1                     l717:	
  6118                           
  6119                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
  6120  03D1  164E               	bsf	_Load^(0+128),4
  6121                           
  6122                           ;OverLoad_B1.c: 210: }
  6123                           ;OverLoad_B1.c: 211: } else {
  6124  03D2  0008               	return
  6125  03D3                     l716:	
  6126                           
  6127                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
  6128  03D3  1D4E               	btfss	_Load^(0+128),2
  6129  03D4  2BE7               	goto	l5035
  6130                           
  6131                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
  6132  03D5  114E               	bcf	_Load^(0+128),2
  6133                           
  6134                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
  6135  03D6  124E               	bcf	_Load^(0+128),4
  6136                           
  6137                           ;OverLoad_B1.c: 217: Load.Time = 0;
  6138  03D7  01CF               	clrf	(_Load^(0+128)+1)
  6139  03D8  01D0               	clrf	((_Load+1)^(0+128)+1)
  6140                           
  6141                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
  6142  03D9  158A  2485  118A   	fcall	_setLoad_AH_AL_Restore
  6143                           
  6144                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
  6145  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  6146  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  6147  03DE  01EB               	clrf	(_Load^(0+128)+29)
  6148                           
  6149                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
  6150  03DF  01EE               	clrf	(_Load^(0+128)+32)
  6151                           
  6152                           ;OverLoad_B1.c: 223: Load.ADH = 0;
  6153  03E0  01D3               	clrf	(_Load^(0+128)+5)
  6154  03E1  01D4               	clrf	((_Load+1)^(0+128)+5)
  6155                           
  6156                           ;OverLoad_B1.c: 224: Load.ADL = 0;
  6157  03E2  01D5               	clrf	(_Load^(0+128)+7)
  6158  03E3  01D6               	clrf	((_Load+1)^(0+128)+7)
  6159                           
  6160                           ;OverLoad_B1.c: 230: Load.Run = 0;
  6161  03E4  11CE               	bcf	_Load^(0+128),3
  6162                           
  6163                           ;OverLoad_B1.c: 231: Load.Count = 0;
  6164  03E5  01EA               	clrf	(_Load^(0+128)+28)
  6165                           
  6166                           ;OverLoad_B1.c: 232: Load.OK = 0;
  6167  03E6  13CE               	bcf	_Load^(0+128),7
  6168  03E7                     l5035:	
  6169                           
  6170                           ;OverLoad_B1.c: 254: }
  6171                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
  6172  03E7  1ECE               	btfss	_Load^(0+128),5
  6173  03E8  0008               	return
  6174                           
  6175                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
  6176  03E9  3001               	movlw	1
  6177  03EA  07D1               	addwf	(_Load^(0+128)+3),f
  6178  03EB  1803               	skipnc
  6179  03EC  0AD2               	incf	((_Load+1)^(0+128)+3),f
  6180  03ED  3000               	movlw	0
  6181  03EE  07D2               	addwf	((_Load+1)^(0+128)+3),f
  6182                           
  6183                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
  6184  03EF  3001               	movlw	1
  6185  03F0  0252               	subwf	((_Load+1)^(0+128)+3),w
  6186  03F1  30F4               	movlw	244
  6187  03F2  1903               	skipnz
  6188  03F3  0251               	subwf	(_Load^(0+128)+3),w
  6189  03F4  1C03               	skipc
  6190  03F5  0008               	return
  6191                           
  6192                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
  6193  03F6  01D1               	clrf	(_Load^(0+128)+3)
  6194  03F7  01D2               	clrf	((_Load+1)^(0+128)+3)
  6195                           
  6196                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
  6197  03F8  12CE               	bcf	_Load^(0+128),5
  6198                           
  6199                           ;OverLoad_B1.c: 260: }
  6200                           ;OverLoad_B1.c: 261: }
  6201                           ;OverLoad_B1.c: 262: }
  6202                           ;OverLoad_B1.c: 263: } else {
  6203  03F9  0008               	return
  6204  03FA                     l706:	
  6205                           
  6206                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
  6207  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  6208  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  6209  03FC  1C20               	btfss	_myMain,0
  6210  03FD  0008               	return
  6211                           
  6212                           ;OverLoad_B1.c: 265: Load.Enable = 1;
  6213  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  6214  03FF  1303               	bcf	3,6	;RP1=0, select bank1
  6215  0400  144E               	bsf	_Load^(0+128),0
  6216  0401  0008               	return
  6217  0402                     __end_of_Load_Main:	
  6218                           
  6219                           	psect	text30
  6220  0BA8                     __ptext30:	
  6221 ;; *************** function _getMain_Lights_Count *****************
  6222 ;; Defined at:
  6223 ;;		line 465 in file "../src/Main_B1.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  status1         1    5[COMMON] unsigned char 
  6228 ;;  count           1    4[COMMON] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      unsigned char 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6238 ;;      Params:         0       0       0       0
  6239 ;;      Locals:         2       0       0       0
  6240 ;;      Temps:          0       0       0       0
  6241 ;;      Totals:         2       0       0       0
  6242 ;;Total ram usage:        2 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    2
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_Load_Main
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _getMain_Lights_Count
  6254  0BA8                     _getMain_Lights_Count:	
  6255                           
  6256                           ;Main_B1.c: 466: char count = 0;
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6260  0BA8  01F4               	clrf	getMain_Lights_Count@count
  6261                           
  6262                           ;Main_B1.c: 482: char status1 = Lights1.Loop == 1 ? 1 : 0;
  6263  0BA9  3000               	movlw	0
  6264  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  6265  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  6266  0BAC  18C8               	btfsc	_Lights1+1,1
  6267  0BAD  3001               	movlw	1
  6268  0BAE  00F5               	movwf	getMain_Lights_Count@status1
  6269                           
  6270                           ;Main_B1.c: 493: return count = status1;
  6271  0BAF  0875               	movf	getMain_Lights_Count@status1,w
  6272  0BB0  00F4               	movwf	getMain_Lights_Count@count
  6273  0BB1  0008               	return
  6274  0BB2                     __end_of_getMain_Lights_Count:	
  6275                           
  6276                           	psect	text31
  6277  0B5B                     __ptext31:	
  6278 ;; *************** function _getLight_Load_Status *****************
  6279 ;; Defined at:
  6280 ;;		line 343 in file "../src/TriacRelay_B1.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;		None
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  loadstatus      1    4[COMMON] unsigned char 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      unsigned char 
  6287 ;; Registers used:
  6288 ;;		wreg, status,2
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6294 ;;      Params:         0       0       0       0
  6295 ;;      Locals:         1       0       0       0
  6296 ;;      Temps:          0       0       0       0
  6297 ;;      Totals:         1       0       0       0
  6298 ;;Total ram usage:        1 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    2
  6301 ;; This function calls:
  6302 ;;		Nothing
  6303 ;; This function is called by:
  6304 ;;		_Load_Main
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           
  6309                           ;psect for function _getLight_Load_Status
  6310  0B5B                     _getLight_Load_Status:	
  6311                           
  6312                           ;TriacRelay_B1.c: 344: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6313                           
  6314                           ;incstack = 0
  6315                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6316  0B5B  3000               	movlw	0
  6317  0B5C  18F7               	btfsc	_Light,1
  6318  0B5D  3001               	movlw	1
  6319  0B5E  00F4               	movwf	getLight_Load_Status@loadstatus
  6320                           
  6321                           ;TriacRelay_B1.c: 345: return loadstatus;
  6322  0B5F  0874               	movf	getLight_Load_Status@loadstatus,w
  6323  0B60  0008               	return
  6324  0B61                     __end_of_getLight_Load_Status:	
  6325                           
  6326                           	psect	text32
  6327  0B55                     __ptext32:	
  6328 ;; *************** function _getLight_LoadGO *****************
  6329 ;; Defined at:
  6330 ;;		line 338 in file "../src/TriacRelay_B1.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  loadgo          1    4[COMMON] unsigned char 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      unsigned char 
  6337 ;; Registers used:
  6338 ;;		wreg, status,2
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6344 ;;      Params:         0       0       0       0
  6345 ;;      Locals:         1       0       0       0
  6346 ;;      Temps:          0       0       0       0
  6347 ;;      Totals:         1       0       0       0
  6348 ;;Total ram usage:        1 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    2
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_Load_Main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           
  6359                           ;psect for function _getLight_LoadGO
  6360  0B55                     _getLight_LoadGO:	
  6361                           
  6362                           ;TriacRelay_B1.c: 339: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6363                           
  6364                           ;incstack = 0
  6365                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6366  0B55  3000               	movlw	0
  6367  0B56  1877               	btfsc	_Light,0
  6368  0B57  3001               	movlw	1
  6369  0B58  00F4               	movwf	getLight_LoadGO@loadgo
  6370                           
  6371                           ;TriacRelay_B1.c: 340: return loadgo;
  6372  0B59  0874               	movf	getLight_LoadGO@loadgo,w
  6373  0B5A  0008               	return
  6374  0B5B                     __end_of_getLight_LoadGO:	
  6375                           
  6376                           	psect	text33
  6377  0D53                     __ptext33:	
  6378 ;; *************** function ___wmul *****************
  6379 ;; Defined at:
  6380 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6383 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  product         2    4[COMMON] unsigned int 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  2    0[BANK0 ] unsigned int 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6395 ;;      Params:         0       4       0       0
  6396 ;;      Locals:         2       0       0       0
  6397 ;;      Temps:          0       0       0       0
  6398 ;;      Totals:         2       4       0       0
  6399 ;;Total ram usage:        6 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    2
  6402 ;; This function calls:
  6403 ;;		Nothing
  6404 ;; This function is called by:
  6405 ;;		_Load_Main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function ___wmul
  6411  0D53                     ___wmul:	
  6412                           
  6413                           ;incstack = 0
  6414                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6415  0D53  01F4               	clrf	___wmul@product
  6416  0D54  01F5               	clrf	___wmul@product+1
  6417  0D55                     l4681:	
  6418  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  6419  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  6420  0D57  1C56               	btfss	___wmul@multiplier,0
  6421  0D58  2D5F               	goto	l1366
  6422  0D59  0858               	movf	___wmul@multiplicand,w
  6423  0D5A  07F4               	addwf	___wmul@product,f
  6424  0D5B  1803               	skipnc
  6425  0D5C  0AF5               	incf	___wmul@product+1,f
  6426  0D5D  0859               	movf	___wmul@multiplicand+1,w
  6427  0D5E  07F5               	addwf	___wmul@product+1,f
  6428  0D5F                     l1366:	
  6429  0D5F  3001               	movlw	1
  6430  0D60                     u5665:	
  6431  0D60  1003               	clrc
  6432  0D61  0DD8               	rlf	___wmul@multiplicand,f
  6433  0D62  0DD9               	rlf	___wmul@multiplicand+1,f
  6434  0D63  3EFF               	addlw	-1
  6435  0D64  1D03               	skipz
  6436  0D65  2D60               	goto	u5665
  6437  0D66  3001               	movlw	1
  6438  0D67                     u5675:	
  6439  0D67  1003               	clrc
  6440  0D68  0CD7               	rrf	___wmul@multiplier+1,f
  6441  0D69  0CD6               	rrf	___wmul@multiplier,f
  6442  0D6A  3EFF               	addlw	-1
  6443  0D6B  1D03               	skipz
  6444  0D6C  2D67               	goto	u5675
  6445  0D6D  0857               	movf	___wmul@multiplier+1,w
  6446  0D6E  0456               	iorwf	___wmul@multiplier,w
  6447  0D6F  1D03               	skipz
  6448  0D70  2D55               	goto	l4681
  6449  0D71  0875               	movf	___wmul@product+1,w
  6450  0D72  01D7               	clrf	?___wmul+1
  6451  0D73  07D7               	addwf	?___wmul+1,f
  6452  0D74  0874               	movf	___wmul@product,w
  6453  0D75  01D6               	clrf	?___wmul
  6454  0D76  07D6               	addwf	?___wmul,f
  6455  0D77  0008               	return
  6456  0D78                     __end_of___wmul:	
  6457                           
  6458                           	psect	text34
  6459  0E6B                     __ptext34:	
  6460 ;; *************** function ___lwdiv *****************
  6461 ;; Defined at:
  6462 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;  divisor         2    0[BANK0 ] unsigned int 
  6465 ;;  dividend        2    2[BANK0 ] unsigned int 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  quotient        2    5[BANK0 ] unsigned int 
  6468 ;;  counter         1    4[BANK0 ] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  2    0[BANK0 ] unsigned int 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6478 ;;      Params:         0       4       0       0
  6479 ;;      Locals:         0       3       0       0
  6480 ;;      Temps:          1       0       0       0
  6481 ;;      Totals:         1       7       0       0
  6482 ;;Total ram usage:        8 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    2
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_Load_Main
  6489 ;;		_getPIR_AD
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function ___lwdiv
  6495  0E6B                     ___lwdiv:	
  6496                           
  6497                           ;incstack = 0
  6498                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6499  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  6500  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  6501  0E6D  01DB               	clrf	___lwdiv@quotient
  6502  0E6E  01DC               	clrf	___lwdiv@quotient+1
  6503  0E6F  0857               	movf	___lwdiv@divisor+1,w
  6504  0E70  0456               	iorwf	___lwdiv@divisor,w
  6505  0E71  1903               	skipnz
  6506  0E72  2EA4               	goto	l4713
  6507  0E73  01DA               	clrf	___lwdiv@counter
  6508  0E74  0ADA               	incf	___lwdiv@counter,f
  6509  0E75                     l4701:	
  6510  0E75  1BD7               	btfsc	___lwdiv@divisor+1,7
  6511  0E76  2E83               	goto	l4703
  6512  0E77  3001               	movlw	1
  6513  0E78                     u5705:	
  6514  0E78  1003               	clrc
  6515  0E79  0DD6               	rlf	___lwdiv@divisor,f
  6516  0E7A  0DD7               	rlf	___lwdiv@divisor+1,f
  6517  0E7B  3EFF               	addlw	-1
  6518  0E7C  1D03               	skipz
  6519  0E7D  2E78               	goto	u5705
  6520  0E7E  3001               	movlw	1
  6521  0E7F  00F4               	movwf	??___lwdiv
  6522  0E80  0874               	movf	??___lwdiv,w
  6523  0E81  07DA               	addwf	___lwdiv@counter,f
  6524  0E82  2E75               	goto	l4701
  6525  0E83                     l4703:	
  6526  0E83  3001               	movlw	1
  6527  0E84                     u5725:	
  6528  0E84  1003               	clrc
  6529  0E85  0DDB               	rlf	___lwdiv@quotient,f
  6530  0E86  0DDC               	rlf	___lwdiv@quotient+1,f
  6531  0E87  3EFF               	addlw	-1
  6532  0E88  1D03               	skipz
  6533  0E89  2E84               	goto	u5725
  6534  0E8A  0857               	movf	___lwdiv@divisor+1,w
  6535  0E8B  0259               	subwf	___lwdiv@dividend+1,w
  6536  0E8C  1D03               	skipz
  6537  0E8D  2E90               	goto	u5735
  6538  0E8E  0856               	movf	___lwdiv@divisor,w
  6539  0E8F  0258               	subwf	___lwdiv@dividend,w
  6540  0E90                     u5735:	
  6541  0E90  1C03               	skipc
  6542  0E91  2E99               	goto	l4709
  6543  0E92  0856               	movf	___lwdiv@divisor,w
  6544  0E93  02D8               	subwf	___lwdiv@dividend,f
  6545  0E94  0857               	movf	___lwdiv@divisor+1,w
  6546  0E95  1C03               	skipc
  6547  0E96  03D9               	decf	___lwdiv@dividend+1,f
  6548  0E97  02D9               	subwf	___lwdiv@dividend+1,f
  6549  0E98  145B               	bsf	___lwdiv@quotient,0
  6550  0E99                     l4709:	
  6551  0E99  3001               	movlw	1
  6552  0E9A                     u5745:	
  6553  0E9A  1003               	clrc
  6554  0E9B  0CD7               	rrf	___lwdiv@divisor+1,f
  6555  0E9C  0CD6               	rrf	___lwdiv@divisor,f
  6556  0E9D  3EFF               	addlw	-1
  6557  0E9E  1D03               	skipz
  6558  0E9F  2E9A               	goto	u5745
  6559  0EA0  3001               	movlw	1
  6560  0EA1  02DA               	subwf	___lwdiv@counter,f
  6561  0EA2  1D03               	btfss	3,2
  6562  0EA3  2E83               	goto	l4703
  6563  0EA4                     l4713:	
  6564  0EA4  085C               	movf	___lwdiv@quotient+1,w
  6565  0EA5  01D7               	clrf	?___lwdiv+1
  6566  0EA6  07D7               	addwf	?___lwdiv+1,f
  6567  0EA7  085B               	movf	___lwdiv@quotient,w
  6568  0EA8  01D6               	clrf	?___lwdiv
  6569  0EA9  07D6               	addwf	?___lwdiv,f
  6570  0EAA  0008               	return
  6571  0EAB                     __end_of___lwdiv:	
  6572                           
  6573                           	psect	text35
  6574  0B35                     __ptext35:	
  6575 ;; *************** function _Load_Initialization *****************
  6576 ;; Defined at:
  6577 ;;		line 9 in file "../src/OverLoad_B1.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6591 ;;      Params:         0       0       0       0
  6592 ;;      Locals:         0       0       0       0
  6593 ;;      Temps:          0       0       0       0
  6594 ;;      Totals:         0       0       0       0
  6595 ;;Total ram usage:        0 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    3
  6598 ;; This function calls:
  6599 ;;		_setLoad_AH_AL_Restore
  6600 ;; This function is called by:
  6601 ;;		_main
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _Load_Initialization
  6607  0B35                     _Load_Initialization:	
  6608                           
  6609                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6613  0B35  158A  2485         	fcall	_setLoad_AH_AL_Restore
  6614  0B37  0008               	return
  6615  0B38                     __end_of_Load_Initialization:	
  6616                           
  6617                           	psect	text36
  6618  0C85                     __ptext36:	
  6619 ;; *************** function _setLoad_AH_AL_Restore *****************
  6620 ;; Defined at:
  6621 ;;		line 291 in file "../src/OverLoad_B1.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;  i               1    5[COMMON] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;		None               void
  6628 ;; Registers used:
  6629 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6635 ;;      Params:         0       0       0       0
  6636 ;;      Locals:         1       0       0       0
  6637 ;;      Temps:          1       0       0       0
  6638 ;;      Totals:         2       0       0       0
  6639 ;;Total ram usage:        2 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    2
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_Load_Initialization
  6646 ;;		_Load_Main
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _setLoad_AH_AL_Restore
  6652  0C85                     _setLoad_AH_AL_Restore:	
  6653                           
  6654                           ;OverLoad_B1.c: 292: char i;
  6655                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6659  0C85  01F5               	clrf	setLoad_AH_AL_Restore@i
  6660  0C86                     L17:	
  6661  0C86  3005               	movlw	5
  6662  0C87  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6663  0C88  1803               	btfsc	3,0
  6664  0C89  0008               	return
  6665                           
  6666                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
  6667  0C8A  0875               	movf	setLoad_AH_AL_Restore@i,w
  6668  0C8B  3ED8               	addlw	(_Load+10)& (0+255)
  6669  0C8C  0084               	movwf	4
  6670  0C8D  1383               	bcf	3,7	;select IRP bank1
  6671  0C8E  0180               	clrf	0
  6672                           
  6673                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xff;
  6674  0C8F  30FF               	movlw	255
  6675  0C90  00F4               	movwf	??_setLoad_AH_AL_Restore
  6676  0C91  0875               	movf	setLoad_AH_AL_Restore@i,w
  6677  0C92  3EDD               	addlw	(_Load+15)& (0+255)
  6678  0C93  0084               	movwf	4
  6679  0C94  0874               	movf	??_setLoad_AH_AL_Restore,w
  6680  0C95  0080               	movwf	0
  6681  0C96  3001               	movlw	1
  6682  0C97  00F4               	movwf	??_setLoad_AH_AL_Restore
  6683  0C98  0874               	movf	??_setLoad_AH_AL_Restore,w
  6684  0C99  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6685  0C9A  2C86               	goto	L17
  6686  0C9B                     __end_of_setLoad_AH_AL_Restore:	
  6687                           
  6688                           	psect	text37
  6689  0D35                     __ptext37:	
  6690 ;; *************** function _Lights_Main *****************
  6691 ;; Defined at:
  6692 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6706 ;;      Params:         0       0       0       0
  6707 ;;      Locals:         0       0       0       0
  6708 ;;      Temps:          0       0       0       0
  6709 ;;      Totals:         0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    5
  6713 ;; This function calls:
  6714 ;;		_Lights_Control
  6715 ;;		_getLoad_OK
  6716 ;;		_getMain_All_Error_Status
  6717 ;;		_getMain_All_LightsStatus
  6718 ;;		_setLights_Main
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _Lights_Main
  6726  0D35                     _Lights_Main:	
  6727                           
  6728                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6732  0D35  1C77               	btfss	_Light,0
  6733  0D36  2D4B               	goto	l5053
  6734                           
  6735                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6736  0D37  158A  237D  158A   	fcall	_getLoad_OK
  6737  0D3A  3A01               	xorlw	1
  6738  0D3B  1903               	skipnz
  6739  0D3C  2D4A               	goto	l1259
  6740  0D3D  3000               	movlw	0
  6741  0D3E  158A  262D  158A   	fcall	_getMain_All_Error_Status
  6742  0D41  3800               	iorlw	0
  6743  0D42  1D03               	skipz
  6744  0D43  2D4A               	goto	l1259
  6745  0D44  158A  2395  158A   	fcall	_getMain_All_LightsStatus
  6746  0D47  3800               	iorlw	0
  6747  0D48  1D03               	skipz
  6748  0D49  2D4B               	goto	l5053
  6749  0D4A                     l1259:	
  6750                           
  6751                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6752  0D4A  1077               	bcf	_Light,0
  6753  0D4B                     l5053:	
  6754                           
  6755                           ;TriacRelay_B1.c: 68: }
  6756                           ;TriacRelay_B1.c: 69: }
  6757                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6758  0D4B  3001               	movlw	1
  6759  0D4C  158A  25C9  158A   	fcall	_setLights_Main
  6760                           
  6761                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6762  0D4F  3001               	movlw	1
  6763  0D50  118A  25C0         	fcall	_Lights_Control
  6764  0D52  0008               	return
  6765  0D53                     __end_of_Lights_Main:	
  6766                           
  6767                           	psect	text38
  6768  0DC9                     __ptext38:	
  6769 ;; *************** function _setLights_Main *****************
  6770 ;; Defined at:
  6771 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  lights          1    wreg     unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  lights          1    2[BANK0 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;		None               void
  6778 ;; Registers used:
  6779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6785 ;;      Params:         0       0       0       0
  6786 ;;      Locals:         0       1       0       0
  6787 ;;      Temps:          0       0       0       0
  6788 ;;      Totals:         0       1       0       0
  6789 ;;Total ram usage:        1 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    4
  6792 ;; This function calls:
  6793 ;;		_LightsPointSelect
  6794 ;;		_getLights_Allow_Condition
  6795 ;;		_setLights
  6796 ;; This function is called by:
  6797 ;;		_Lights_Main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _setLights_Main
  6803  0DC9                     _setLights_Main:	
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6807                           ;setLights_Main@lights stored from wreg
  6808  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  6809  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  6810  0DCB  00D8               	movwf	setLights_Main@lights
  6811                           
  6812                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6813  0DCC  0858               	movf	setLights_Main@lights,w
  6814  0DCD  158A  239E  158A   	fcall	_LightsPointSelect
  6815                           
  6816                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6817  0DD0  0878               	movf	_Lights,w
  6818  0DD1  0084               	movwf	4
  6819  0DD2  1383               	bcf	3,7	;select IRP bank0
  6820  0DD3  1880               	btfsc	0,1
  6821  0DD4  0008               	return
  6822                           
  6823                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6824  0DD5  0878               	movf	_Lights,w
  6825  0DD6  0084               	movwf	4
  6826  0DD7  1D80               	btfss	0,3
  6827  0DD8  0008               	return
  6828                           
  6829                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6830  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  6831  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  6832  0DDB  0858               	movf	setLights_Main@lights,w
  6833  0DDC  158A  249B  158A   	fcall	_getLights_Allow_Condition
  6834  0DDF  3800               	iorlw	0
  6835  0DE0  1D03               	skipz
  6836  0DE1  0008               	return
  6837                           
  6838                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6839  0DE2  0878               	movf	_Lights,w
  6840  0DE3  0084               	movwf	4
  6841  0DE4  1383               	bcf	3,7	;select IRP bank0
  6842  0DE5  1180               	bcf	0,3
  6843                           
  6844                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6845  0DE6  0878               	movf	_Lights,w
  6846  0DE7  0084               	movwf	4
  6847  0DE8  1E00               	btfss	0,4
  6848  0DE9  2DF2               	goto	l4649
  6849                           
  6850                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6851  0DEA  01F5               	clrf	setLights@status
  6852  0DEB  0AF5               	incf	setLights@status,f
  6853  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  6854  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  6855  0DEE  0858               	movf	setLights_Main@lights,w
  6856  0DEF  158A  26ED         	fcall	_setLights
  6857                           
  6858                           ;TriacRelay_B1.c: 99: } else {
  6859  0DF1  0008               	return
  6860  0DF2                     l4649:	
  6861                           
  6862                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6863  0DF2  01F5               	clrf	setLights@status
  6864  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  6865  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  6866  0DF5  0858               	movf	setLights_Main@lights,w
  6867  0DF6  158A  26ED         	fcall	_setLights
  6868  0DF8  0008               	return
  6869  0DF9                     __end_of_setLights_Main:	
  6870                           
  6871                           	psect	text39
  6872  0EED                     __ptext39:	
  6873 ;; *************** function _setLights *****************
  6874 ;; Defined at:
  6875 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  lights          1    wreg     unsigned char 
  6878 ;;  status          1    5[COMMON] unsigned char 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  lights          1    1[BANK0 ] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;		None               void
  6883 ;; Registers used:
  6884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6890 ;;      Params:         1       0       0       0
  6891 ;;      Locals:         0       1       0       0
  6892 ;;      Temps:          0       1       0       0
  6893 ;;      Totals:         1       2       0       0
  6894 ;;Total ram usage:        3 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    3
  6897 ;; This function calls:
  6898 ;;		_setLights_Line
  6899 ;; This function is called by:
  6900 ;;		_setLights_Main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _setLights
  6906  0EED                     _setLights:	
  6907                           
  6908                           ;incstack = 0
  6909                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6910                           ;setLights@lights stored from wreg
  6911  0EED  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0EEE  1303               	bcf	3,6	;RP1=0, select bank0
  6913  0EEF  00D7               	movwf	setLights@lights
  6914                           
  6915                           ;TriacRelay_B1.c: 114: Lights->GO = 1;
  6916  0EF0  0878               	movf	_Lights,w
  6917  0EF1  0084               	movwf	4
  6918  0EF2  1383               	bcf	3,7	;select IRP bank0
  6919  0EF3  1480               	bsf	0,1
  6920                           
  6921                           ;TriacRelay_B1.c: 115: if (status == 1) {
  6922  0EF4  0875               	movf	setLights@status,w
  6923  0EF5  3A01               	xorlw	1
  6924  0EF6  1D03               	skipz
  6925  0EF7  2F14               	goto	l4433
  6926                           
  6927                           ;TriacRelay_B1.c: 121: if (Lights->Status == 0) {
  6928  0EF8  0878               	movf	_Lights,w
  6929  0EF9  0084               	movwf	4
  6930  0EFA  1900               	btfsc	0,2
  6931  0EFB  2F35               	goto	l4443
  6932                           
  6933                           ;TriacRelay_B1.c: 122: Lights->Status = 1;
  6934  0EFC  0878               	movf	_Lights,w
  6935  0EFD  0084               	movwf	4
  6936  0EFE  1500               	bsf	0,2
  6937                           
  6938                           ;TriacRelay_B1.c: 123: Lights->RelayValue = 100;
  6939  0EFF  3064               	movlw	100
  6940  0F00  00D6               	movwf	??_setLights
  6941  0F01  0878               	movf	_Lights,w
  6942  0F02  3E06               	addlw	6
  6943  0F03  0084               	movwf	4
  6944  0F04  0856               	movf	??_setLights,w
  6945  0F05  0080               	movwf	0
  6946                           
  6947                           ;TriacRelay_B1.c: 124: Lights->TriacValue = 140;
  6948  0F06  308C               	movlw	140
  6949  0F07  00D6               	movwf	??_setLights
  6950  0F08  0878               	movf	_Lights,w
  6951  0F09  3E04               	addlw	4
  6952  0F0A  0084               	movwf	4
  6953  0F0B  0856               	movf	??_setLights,w
  6954  0F0C  0080               	movwf	0
  6955                           
  6956                           ;TriacRelay_B1.c: 125: Lights->Time = 0;
  6957  0F0D  0878               	movf	_Lights,w
  6958  0F0E  3E02               	addlw	2
  6959  0F0F  0084               	movwf	4
  6960  0F10  0180               	clrf	0
  6961                           
  6962                           ;TriacRelay_B1.c: 127: Light.Load_Status = 1;
  6963  0F11  14F7               	bsf	_Light,1
  6964                           
  6965                           ;TriacRelay_B1.c: 128: setLights_Line(lights);
  6966  0F12  0857               	movf	setLights@lights,w
  6967  0F13  2F32               	goto	L18
  6968  0F14                     l4433:	
  6969                           ;TriacRelay_B1.c: 130: }
  6970                           ;TriacRelay_B1.c: 131: } else {
  6971                           
  6972                           
  6973                           ;TriacRelay_B1.c: 132: if (Lights->Status == 1) {
  6974  0F14  0878               	movf	_Lights,w
  6975  0F15  0084               	movwf	4
  6976  0F16  1383               	bcf	3,7	;select IRP bank0
  6977  0F17  1D00               	btfss	0,2
  6978  0F18  2F35               	goto	l4443
  6979                           
  6980                           ;TriacRelay_B1.c: 133: Lights->Status = 0;
  6981  0F19  0878               	movf	_Lights,w
  6982  0F1A  0084               	movwf	4
  6983  0F1B  1100               	bcf	0,2
  6984                           
  6985                           ;TriacRelay_B1.c: 134: Lights->RelayValue = 40;
  6986  0F1C  3028               	movlw	40
  6987  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  6988  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  6989  0F1F  00D6               	movwf	??_setLights
  6990  0F20  0878               	movf	_Lights,w
  6991  0F21  3E06               	addlw	6
  6992  0F22  0084               	movwf	4
  6993  0F23  0856               	movf	??_setLights,w
  6994  0F24  0080               	movwf	0
  6995                           
  6996                           ;TriacRelay_B1.c: 135: Lights->TriacValue = 80;
  6997  0F25  3050               	movlw	80
  6998  0F26  00D6               	movwf	??_setLights
  6999  0F27  0878               	movf	_Lights,w
  7000  0F28  3E04               	addlw	4
  7001  0F29  0084               	movwf	4
  7002  0F2A  0856               	movf	??_setLights,w
  7003  0F2B  0080               	movwf	0
  7004                           
  7005                           ;TriacRelay_B1.c: 136: Lights->Time = 0;
  7006  0F2C  0878               	movf	_Lights,w
  7007  0F2D  3E02               	addlw	2
  7008  0F2E  0084               	movwf	4
  7009  0F2F  0180               	clrf	0
  7010                           
  7011                           ;TriacRelay_B1.c: 138: Light.Load_Status = 0;
  7012  0F30  10F7               	bcf	_Light,1
  7013                           
  7014                           ;TriacRelay_B1.c: 139: setLights_Line(0);
  7015  0F31  3000               	movlw	0
  7016  0F32                     L18:	
  7017  0F32  158A  23CB  158A   	fcall	_setLights_Line
  7018  0F35                     l4443:	
  7019                           
  7020                           ;TriacRelay_B1.c: 141: }
  7021                           ;TriacRelay_B1.c: 142: }
  7022                           ;TriacRelay_B1.c: 144: if (lights == 1) {
  7023  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  7024  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  7025  0F37  0857               	movf	setLights@lights,w
  7026  0F38  3A01               	xorlw	1
  7027  0F39  1D03               	skipz
  7028  0F3A  0008               	return
  7029                           
  7030                           ;TriacRelay_B1.c: 145: RB2 = 1;
  7031  0F3B  1506               	bsf	6,2	;volatile
  7032  0F3C  0008               	return
  7033  0F3D                     __end_of_setLights:	
  7034                           
  7035                           	psect	text40
  7036  0BCB                     __ptext40:	
  7037 ;; *************** function _setLights_Line *****************
  7038 ;; Defined at:
  7039 ;;		line 226 in file "../src/TriacRelay_B1.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  lights          1    wreg     unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  lights          1    4[COMMON] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;		None               void
  7046 ;; Registers used:
  7047 ;;		wreg
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7053 ;;      Params:         0       0       0       0
  7054 ;;      Locals:         1       0       0       0
  7055 ;;      Temps:          0       0       0       0
  7056 ;;      Totals:         1       0       0       0
  7057 ;;Total ram usage:        1 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    2
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_setLights
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _setLights_Line
  7069  0BCB                     _setLights_Line:	
  7070                           
  7071                           ;incstack = 0
  7072                           ; Regs used in _setLights_Line: [wreg]
  7073                           ;setLights_Line@lights stored from wreg
  7074  0BCB  00F4               	movwf	setLights_Line@lights
  7075                           
  7076                           ;TriacRelay_B1.c: 227: Light.LoadGO = 1;
  7077  0BCC  1477               	bsf	_Light,0
  7078                           
  7079                           ;TriacRelay_B1.c: 229: Lights1.Line = 0;
  7080  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
  7081  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
  7082  0BCF  1048               	bcf	_Lights1+1,0
  7083                           
  7084                           ;TriacRelay_B1.c: 230: if (lights == 1 && lights != 0) {
  7085  0BD0  0874               	movf	setLights_Line@lights,w
  7086  0BD1  3A01               	xorlw	1
  7087  0BD2  1D03               	skipz
  7088  0BD3  0008               	return
  7089  0BD4  0874               	movf	setLights_Line@lights,w
  7090  0BD5  1903               	btfsc	3,2
  7091  0BD6  0008               	return
  7092                           
  7093                           ;TriacRelay_B1.c: 231: Lights1.Line = 1;
  7094  0BD7  1448               	bsf	_Lights1+1,0
  7095  0BD8  0008               	return
  7096  0BD9                     __end_of_setLights_Line:	
  7097                           
  7098                           	psect	text41
  7099  0C9B                     __ptext41:	
  7100 ;; *************** function _getLights_Allow_Condition *****************
  7101 ;; Defined at:
  7102 ;;		line 305 in file "../src/TriacRelay_B1.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  lights          1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  lights          1    0[COMMON] unsigned char 
  7107 ;;  allow           1    0[BANK0 ] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      unsigned char 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, pclath, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7117 ;;      Params:         0       0       0       0
  7118 ;;      Locals:         0       2       0       0
  7119 ;;      Temps:          1       0       0       0
  7120 ;;      Totals:         1       2       0       0
  7121 ;;Total ram usage:        3 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    3
  7124 ;; This function calls:
  7125 ;;		_getLoad_OK
  7126 ;; This function is called by:
  7127 ;;		_setLights_Main
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function _getLights_Allow_Condition
  7133  0C9B                     _getLights_Allow_Condition:	
  7134                           
  7135                           ;TriacRelay_B1.c: 306: char allow = 0;
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7139  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  7140  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  7141  0C9D  01D6               	clrf	getLights_Allow_Condition@allow
  7142                           
  7143                           ;TriacRelay_B1.c: 309: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7144  0C9E  01D7               	clrf	_getLights_Allow_Condition$4605
  7145  0C9F  0AD7               	incf	_getLights_Allow_Condition$4605,f
  7146  0CA0  158A  237D  158A   	fcall	_getLoad_OK
  7147  0CA3  3800               	iorlw	0
  7148  0CA4  1903               	btfsc	3,2
  7149  0CA5  1877               	btfsc	_Light,0
  7150  0CA6  2CAA               	goto	l4413
  7151  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  7152  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  7153  0CA9  01D7               	clrf	_getLights_Allow_Condition$4605
  7154  0CAA                     l4413:	
  7155  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  7156  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  7157  0CAC  0857               	movf	_getLights_Allow_Condition$4605,w
  7158  0CAD  00F5               	movwf	??_getLights_Allow_Condition
  7159  0CAE  0875               	movf	??_getLights_Allow_Condition,w
  7160  0CAF  00D6               	movwf	getLights_Allow_Condition@allow
  7161                           
  7162                           ;TriacRelay_B1.c: 334: return allow;
  7163  0CB0  0856               	movf	getLights_Allow_Condition@allow,w
  7164  0CB1  0008               	return
  7165  0CB2                     __end_of_getLights_Allow_Condition:	
  7166                           
  7167                           	psect	text42
  7168  0B7D                     __ptext42:	
  7169 ;; *************** function _getLoad_OK *****************
  7170 ;; Defined at:
  7171 ;;		line 271 in file "../src/OverLoad_B1.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;  ok              1    4[COMMON] unsigned char 
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      unsigned char 
  7178 ;; Registers used:
  7179 ;;		wreg, status,2
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7185 ;;      Params:         0       0       0       0
  7186 ;;      Locals:         1       0       0       0
  7187 ;;      Temps:          0       0       0       0
  7188 ;;      Totals:         1       0       0       0
  7189 ;;Total ram usage:        1 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    2
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		_Lights_Main
  7196 ;;		_getLights_Allow_Condition
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function _getLoad_OK
  7202  0B7D                     _getLoad_OK:	
  7203                           
  7204                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7208  0B7D  3000               	movlw	0
  7209  0B7E  1683               	bsf	3,5	;RP0=1, select bank1
  7210  0B7F  1303               	bcf	3,6	;RP1=0, select bank1
  7211  0B80  1BCE               	btfsc	_Load^(0+128),7
  7212  0B81  3001               	movlw	1
  7213  0B82  00F4               	movwf	getLoad_OK@ok
  7214                           
  7215                           ;OverLoad_B1.c: 273: return ok;
  7216  0B83  0874               	movf	getLoad_OK@ok,w
  7217  0B84  0008               	return
  7218  0B85                     __end_of_getLoad_OK:	
  7219                           
  7220                           	psect	text43
  7221  0B95                     __ptext43:	
  7222 ;; *************** function _getMain_All_LightsStatus *****************
  7223 ;; Defined at:
  7224 ;;		line 373 in file "../src/Main_B1.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;		None
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  status          1    4[COMMON] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      unsigned char 
  7231 ;; Registers used:
  7232 ;;		wreg, status,2
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7238 ;;      Params:         0       0       0       0
  7239 ;;      Locals:         1       0       0       0
  7240 ;;      Temps:          0       0       0       0
  7241 ;;      Totals:         1       0       0       0
  7242 ;;Total ram usage:        1 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    2
  7245 ;; This function calls:
  7246 ;;		Nothing
  7247 ;; This function is called by:
  7248 ;;		_Load_Main
  7249 ;;		_setTemp_Main
  7250 ;;		_Lights_Main
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _getMain_All_LightsStatus
  7256  0B95                     _getMain_All_LightsStatus:	
  7257                           
  7258                           ;Main_B1.c: 374: char status = 0;
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7262  0B95  01F4               	clrf	getMain_All_LightsStatus@status
  7263                           
  7264                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  7265  0B96  3000               	movlw	0
  7266  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  7267  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  7268  0B99  1947               	btfsc	_Lights1,2
  7269  0B9A  3001               	movlw	1
  7270  0B9B  00F4               	movwf	getMain_All_LightsStatus@status
  7271                           
  7272                           ;Main_B1.c: 420: return status;
  7273  0B9C  0874               	movf	getMain_All_LightsStatus@status,w
  7274  0B9D  0008               	return
  7275  0B9E                     __end_of_getMain_All_LightsStatus:	
  7276                           
  7277                           	psect	text44
  7278  05C0                     __ptext44:	
  7279 ;; *************** function _Lights_Control *****************
  7280 ;; Defined at:
  7281 ;;		line 161 in file "../src/TriacRelay_B1.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  lights          1    wreg     unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  lights          1   10[BANK0 ] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;		None               void
  7288 ;; Registers used:
  7289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7295 ;;      Params:         0       0       0       0
  7296 ;;      Locals:         0       1       0       0
  7297 ;;      Temps:          0       2       0       0
  7298 ;;      Totals:         0       3       0       0
  7299 ;;Total ram usage:        3 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    3
  7302 ;; This function calls:
  7303 ;;		_LightsPointSelect
  7304 ;;		___awdiv
  7305 ;; This function is called by:
  7306 ;;		_Lights_Main
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           
  7311                           ;psect for function _Lights_Control
  7312  05C0                     _Lights_Control:	
  7313                           
  7314                           ;incstack = 0
  7315                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7316                           ;Lights_Control@lights stored from wreg
  7317  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  7318  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  7319  05C2  00E0               	movwf	Lights_Control@lights
  7320                           
  7321                           ;TriacRelay_B1.c: 162: LightsPointSelect(lights);
  7322  05C3  0860               	movf	Lights_Control@lights,w
  7323  05C4  158A  239E  118A   	fcall	_LightsPointSelect
  7324                           
  7325                           ;TriacRelay_B1.c: 163: if (Lights->GO == 1) {
  7326  05C7  0878               	movf	_Lights,w
  7327  05C8  0084               	movwf	4
  7328  05C9  1383               	bcf	3,7	;select IRP bank0
  7329  05CA  1C80               	btfss	0,1
  7330  05CB  0008               	return
  7331                           
  7332                           ;TriacRelay_B1.c: 164: Lights->Time++;
  7333  05CC  3001               	movlw	1
  7334  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  7335  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  7336  05CF  00DE               	movwf	??_Lights_Control
  7337  05D0  0878               	movf	_Lights,w
  7338  05D1  3E02               	addlw	2
  7339  05D2  0084               	movwf	4
  7340  05D3  085E               	movf	??_Lights_Control,w
  7341  05D4  0780               	addwf	0,f
  7342                           
  7343                           ;TriacRelay_B1.c: 165: if (Lights->RelaySet == 0) {
  7344  05D5  0878               	movf	_Lights,w
  7345  05D6  0084               	movwf	4
  7346  05D7  1B80               	btfsc	0,7
  7347  05D8  2E0F               	goto	l4667
  7348                           
  7349                           ;TriacRelay_B1.c: 166: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7350  05D9  3014               	movlw	20
  7351  05DA  00D6               	movwf	___awdiv@divisor
  7352  05DB  3000               	movlw	0
  7353  05DC  00D7               	movwf	___awdiv@divisor+1
  7354  05DD  0878               	movf	_Lights,w
  7355  05DE  3E06               	addlw	6
  7356  05DF  0084               	movwf	4
  7357  05E0  0800               	movf	0,w
  7358  05E1  00DE               	movwf	??_Lights_Control
  7359  05E2  01DF               	clrf	??_Lights_Control+1
  7360  05E3  085E               	movf	??_Lights_Control,w
  7361  05E4  00D8               	movwf	___awdiv@dividend
  7362  05E5  085F               	movf	??_Lights_Control+1,w
  7363  05E6  00D9               	movwf	___awdiv@dividend+1
  7364  05E7  158A  273D  118A   	fcall	___awdiv
  7365  05EA  0878               	movf	_Lights,w
  7366  05EB  3E02               	addlw	2
  7367  05EC  0084               	movwf	4
  7368  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  7369  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  7370  05EF  0857               	movf	?___awdiv+1,w
  7371  05F0  3A80               	xorlw	128
  7372  05F1  3C80               	sublw	128
  7373  05F2  1D03               	skipz
  7374  05F3  2DF7               	goto	u5595
  7375  05F4  0856               	movf	?___awdiv,w
  7376  05F5  1383               	bcf	3,7	;select IRP bank0
  7377  05F6  0200               	subwf	0,w
  7378  05F7                     u5595:	
  7379  05F7  1C03               	skipc
  7380  05F8  0008               	return
  7381                           
  7382                           ;TriacRelay_B1.c: 167: Lights->RelaySet = 1;
  7383  05F9  0878               	movf	_Lights,w
  7384  05FA  0084               	movwf	4
  7385  05FB  1383               	bcf	3,7	;select IRP bank0
  7386  05FC  1780               	bsf	0,7
  7387                           
  7388                           ;TriacRelay_B1.c: 169: if (lights == 1) {
  7389  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  7390  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  7391  05FF  0860               	movf	Lights_Control@lights,w
  7392  0600  3A01               	xorlw	1
  7393  0601  1D03               	skipz
  7394  0602  0008               	return
  7395                           
  7396                           ;TriacRelay_B1.c: 170: RB3 = Lights->Status == 1 ? 1 : 0;
  7397  0603  0878               	movf	_Lights,w
  7398  0604  0084               	movwf	4
  7399  0605  1D00               	btfss	0,2
  7400  0606  2E0B               	goto	u5610
  7401  0607  1283               	bcf	3,5	;RP0=0, select bank0
  7402  0608  1303               	bcf	3,6	;RP1=0, select bank0
  7403  0609  1586               	bsf	6,3	;volatile
  7404  060A  0008               	return
  7405  060B                     u5610:	
  7406  060B  1283               	bcf	3,5	;RP0=0, select bank0
  7407  060C  1303               	bcf	3,6	;RP1=0, select bank0
  7408  060D  1186               	bcf	6,3	;volatile
  7409                           
  7410                           ;TriacRelay_B1.c: 171: }
  7411                           ;TriacRelay_B1.c: 183: }
  7412                           ;TriacRelay_B1.c: 184: } else {
  7413  060E  0008               	return
  7414  060F                     l4667:	
  7415                           
  7416                           ;TriacRelay_B1.c: 185: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7417  060F  3014               	movlw	20
  7418  0610  00D6               	movwf	___awdiv@divisor
  7419  0611  3000               	movlw	0
  7420  0612  00D7               	movwf	___awdiv@divisor+1
  7421  0613  0878               	movf	_Lights,w
  7422  0614  3E04               	addlw	4
  7423  0615  0084               	movwf	4
  7424  0616  1383               	bcf	3,7	;select IRP bank0
  7425  0617  0800               	movf	0,w
  7426  0618  00DE               	movwf	??_Lights_Control
  7427  0619  01DF               	clrf	??_Lights_Control+1
  7428  061A  085E               	movf	??_Lights_Control,w
  7429  061B  00D8               	movwf	___awdiv@dividend
  7430  061C  085F               	movf	??_Lights_Control+1,w
  7431  061D  00D9               	movwf	___awdiv@dividend+1
  7432  061E  158A  273D  118A   	fcall	___awdiv
  7433  0621  0878               	movf	_Lights,w
  7434  0622  3E02               	addlw	2
  7435  0623  0084               	movwf	4
  7436  0624  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0625  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0626  0857               	movf	?___awdiv+1,w
  7439  0627  3A80               	xorlw	128
  7440  0628  3C80               	sublw	128
  7441  0629  1D03               	skipz
  7442  062A  2E2E               	goto	u5635
  7443  062B  0856               	movf	?___awdiv,w
  7444  062C  1383               	bcf	3,7	;select IRP bank0
  7445  062D  0200               	subwf	0,w
  7446  062E                     u5635:	
  7447  062E  1C03               	skipc
  7448  062F  0008               	return
  7449                           
  7450                           ;TriacRelay_B1.c: 186: Lights->Time = 0;
  7451  0630  0878               	movf	_Lights,w
  7452  0631  3E02               	addlw	2
  7453  0632  0084               	movwf	4
  7454  0633  1383               	bcf	3,7	;select IRP bank0
  7455  0634  0180               	clrf	0
  7456                           
  7457                           ;TriacRelay_B1.c: 187: Lights->GO = 0;
  7458  0635  0878               	movf	_Lights,w
  7459  0636  0084               	movwf	4
  7460  0637  1080               	bcf	0,1
  7461                           
  7462                           ;TriacRelay_B1.c: 188: Lights->RelaySet = 0;
  7463  0638  0878               	movf	_Lights,w
  7464  0639  0084               	movwf	4
  7465  063A  1380               	bcf	0,7
  7466                           
  7467                           ;TriacRelay_B1.c: 191: if (lights == 1) {
  7468  063B  1283               	bcf	3,5	;RP0=0, select bank0
  7469  063C  1303               	bcf	3,6	;RP1=0, select bank0
  7470  063D  0860               	movf	Lights_Control@lights,w
  7471  063E  3A01               	xorlw	1
  7472  063F  1D03               	skipz
  7473  0640  0008               	return
  7474                           
  7475                           ;TriacRelay_B1.c: 192: RB2 = 0;
  7476  0641  1106               	bcf	6,2	;volatile
  7477  0642  0008               	return
  7478  0643                     __end_of_Lights_Control:	
  7479                           
  7480                           	psect	text45
  7481  0F3D                     __ptext45:	
  7482 ;; *************** function ___awdiv *****************
  7483 ;; Defined at:
  7484 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  divisor         2    0[BANK0 ] int 
  7487 ;;  dividend        2    2[BANK0 ] int 
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  quotient        2    6[BANK0 ] int 
  7490 ;;  sign            1    5[BANK0 ] unsigned char 
  7491 ;;  counter         1    4[BANK0 ] unsigned char 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  2    0[BANK0 ] int 
  7494 ;; Registers used:
  7495 ;;		wreg, status,2, status,0
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7501 ;;      Params:         0       4       0       0
  7502 ;;      Locals:         0       4       0       0
  7503 ;;      Temps:          1       0       0       0
  7504 ;;      Totals:         1       8       0       0
  7505 ;;Total ram usage:        9 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    2
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_setTemp_Main
  7512 ;;		_getPIR_AD
  7513 ;;		_Lights_Control
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function ___awdiv
  7519  0F3D                     ___awdiv:	
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7523  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  7524  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  7525  0F3F  01DB               	clrf	___awdiv@sign
  7526  0F40  1FD7               	btfss	___awdiv@divisor+1,7
  7527  0F41  2F49               	goto	l4455
  7528  0F42  09D6               	comf	___awdiv@divisor,f
  7529  0F43  09D7               	comf	___awdiv@divisor+1,f
  7530  0F44  0AD6               	incf	___awdiv@divisor,f
  7531  0F45  1903               	skipnz
  7532  0F46  0AD7               	incf	___awdiv@divisor+1,f
  7533  0F47  01DB               	clrf	___awdiv@sign
  7534  0F48  0ADB               	incf	___awdiv@sign,f
  7535  0F49                     l4455:	
  7536  0F49  1FD9               	btfss	___awdiv@dividend+1,7
  7537  0F4A  2F54               	goto	l4461
  7538  0F4B  09D8               	comf	___awdiv@dividend,f
  7539  0F4C  09D9               	comf	___awdiv@dividend+1,f
  7540  0F4D  0AD8               	incf	___awdiv@dividend,f
  7541  0F4E  1903               	skipnz
  7542  0F4F  0AD9               	incf	___awdiv@dividend+1,f
  7543  0F50  3001               	movlw	1
  7544  0F51  00F4               	movwf	??___awdiv
  7545  0F52  0874               	movf	??___awdiv,w
  7546  0F53  06DB               	xorwf	___awdiv@sign,f
  7547  0F54                     l4461:	
  7548  0F54  01DC               	clrf	___awdiv@quotient
  7549  0F55  01DD               	clrf	___awdiv@quotient+1
  7550  0F56  0857               	movf	___awdiv@divisor+1,w
  7551  0F57  0456               	iorwf	___awdiv@divisor,w
  7552  0F58  1903               	skipnz
  7553  0F59  2F8B               	goto	l4483
  7554  0F5A  01DA               	clrf	___awdiv@counter
  7555  0F5B  0ADA               	incf	___awdiv@counter,f
  7556  0F5C                     l4471:	
  7557  0F5C  1BD7               	btfsc	___awdiv@divisor+1,7
  7558  0F5D  2F6A               	goto	l4473
  7559  0F5E  3001               	movlw	1
  7560  0F5F                     u5195:	
  7561  0F5F  1003               	clrc
  7562  0F60  0DD6               	rlf	___awdiv@divisor,f
  7563  0F61  0DD7               	rlf	___awdiv@divisor+1,f
  7564  0F62  3EFF               	addlw	-1
  7565  0F63  1D03               	skipz
  7566  0F64  2F5F               	goto	u5195
  7567  0F65  3001               	movlw	1
  7568  0F66  00F4               	movwf	??___awdiv
  7569  0F67  0874               	movf	??___awdiv,w
  7570  0F68  07DA               	addwf	___awdiv@counter,f
  7571  0F69  2F5C               	goto	l4471
  7572  0F6A                     l4473:	
  7573  0F6A  3001               	movlw	1
  7574  0F6B                     u5215:	
  7575  0F6B  1003               	clrc
  7576  0F6C  0DDC               	rlf	___awdiv@quotient,f
  7577  0F6D  0DDD               	rlf	___awdiv@quotient+1,f
  7578  0F6E  3EFF               	addlw	-1
  7579  0F6F  1D03               	skipz
  7580  0F70  2F6B               	goto	u5215
  7581  0F71  0857               	movf	___awdiv@divisor+1,w
  7582  0F72  0259               	subwf	___awdiv@dividend+1,w
  7583  0F73  1D03               	skipz
  7584  0F74  2F77               	goto	u5225
  7585  0F75  0856               	movf	___awdiv@divisor,w
  7586  0F76  0258               	subwf	___awdiv@dividend,w
  7587  0F77                     u5225:	
  7588  0F77  1C03               	skipc
  7589  0F78  2F80               	goto	l4479
  7590  0F79  0856               	movf	___awdiv@divisor,w
  7591  0F7A  02D8               	subwf	___awdiv@dividend,f
  7592  0F7B  0857               	movf	___awdiv@divisor+1,w
  7593  0F7C  1C03               	skipc
  7594  0F7D  03D9               	decf	___awdiv@dividend+1,f
  7595  0F7E  02D9               	subwf	___awdiv@dividend+1,f
  7596  0F7F  145C               	bsf	___awdiv@quotient,0
  7597  0F80                     l4479:	
  7598  0F80  3001               	movlw	1
  7599  0F81                     u5235:	
  7600  0F81  1003               	clrc
  7601  0F82  0CD7               	rrf	___awdiv@divisor+1,f
  7602  0F83  0CD6               	rrf	___awdiv@divisor,f
  7603  0F84  3EFF               	addlw	-1
  7604  0F85  1D03               	skipz
  7605  0F86  2F81               	goto	u5235
  7606  0F87  3001               	movlw	1
  7607  0F88  02DA               	subwf	___awdiv@counter,f
  7608  0F89  1D03               	btfss	3,2
  7609  0F8A  2F6A               	goto	l4473
  7610  0F8B                     l4483:	
  7611  0F8B  085B               	movf	___awdiv@sign,w
  7612  0F8C  1903               	btfsc	3,2
  7613  0F8D  2F93               	goto	l4487
  7614  0F8E  09DC               	comf	___awdiv@quotient,f
  7615  0F8F  09DD               	comf	___awdiv@quotient+1,f
  7616  0F90  0ADC               	incf	___awdiv@quotient,f
  7617  0F91  1903               	skipnz
  7618  0F92  0ADD               	incf	___awdiv@quotient+1,f
  7619  0F93                     l4487:	
  7620  0F93  085D               	movf	___awdiv@quotient+1,w
  7621  0F94  01D7               	clrf	?___awdiv+1
  7622  0F95  07D7               	addwf	?___awdiv+1,f
  7623  0F96  085C               	movf	___awdiv@quotient,w
  7624  0F97  01D6               	clrf	?___awdiv
  7625  0F98  07D6               	addwf	?___awdiv,f
  7626  0F99  0008               	return
  7627  0F9A                     __end_of___awdiv:	
  7628                           
  7629                           	psect	text46
  7630  0B48                     __ptext46:	
  7631 ;; *************** function _Lights_Initialization *****************
  7632 ;; Defined at:
  7633 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7647 ;;      Params:         0       0       0       0
  7648 ;;      Locals:         0       0       0       0
  7649 ;;      Temps:          0       0       0       0
  7650 ;;      Totals:         0       0       0       0
  7651 ;;Total ram usage:        0 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    4
  7654 ;; This function calls:
  7655 ;;		_setLights_Initialization
  7656 ;; This function is called by:
  7657 ;;		_main
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           
  7662                           ;psect for function _Lights_Initialization
  7663  0B48                     _Lights_Initialization:	
  7664                           
  7665                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7669  0B48  3001               	movlw	1
  7670  0B49  158A  2367         	fcall	_setLights_Initialization
  7671  0B4B  0008               	return
  7672  0B4C                     __end_of_Lights_Initialization:	
  7673                           
  7674                           	psect	text47
  7675  0B67                     __ptext47:	
  7676 ;; *************** function _setLights_Initialization *****************
  7677 ;; Defined at:
  7678 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  lights          1    wreg     unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  lights          1    0[BANK0 ] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;		None               void
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0, pclath, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7692 ;;      Params:         0       0       0       0
  7693 ;;      Locals:         0       1       0       0
  7694 ;;      Temps:          0       0       0       0
  7695 ;;      Totals:         0       1       0       0
  7696 ;;Total ram usage:        1 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    3
  7699 ;; This function calls:
  7700 ;;		_LightsPointSelect
  7701 ;; This function is called by:
  7702 ;;		_Lights_Initialization
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _setLights_Initialization
  7708  0B67                     _setLights_Initialization:	
  7709                           
  7710                           ;incstack = 0
  7711                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7712                           ;setLights_Initialization@lights stored from wreg
  7713  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  7714  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  7715  0B69  00D6               	movwf	setLights_Initialization@lights
  7716                           
  7717                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7718  0B6A  0856               	movf	setLights_Initialization@lights,w
  7719  0B6B  158A  239E         	fcall	_LightsPointSelect
  7720  0B6D  0008               	return
  7721  0B6E                     __end_of_setLights_Initialization:	
  7722                           
  7723                           	psect	text48
  7724  0B32                     __ptext48:	
  7725 ;; *************** function _LED_Main *****************
  7726 ;; Defined at:
  7727 ;;		line 47 in file "../src/LED_B1.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;		None               void
  7734 ;; Registers used:
  7735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7741 ;;      Params:         0       0       0       0
  7742 ;;      Locals:         0       0       0       0
  7743 ;;      Temps:          0       0       0       0
  7744 ;;      Totals:         0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    5
  7748 ;; This function calls:
  7749 ;;		_setPIRLED_Main
  7750 ;; This function is called by:
  7751 ;;		_main
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _LED_Main
  7757  0B32                     _LED_Main:	
  7758                           
  7759                           ;LED_B1.c: 50: setPIRLED_Main();
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7763  0B32  118A  272A         	fcall	_setPIRLED_Main
  7764  0B34  0008               	return
  7765  0B35                     __end_of_LED_Main:	
  7766                           
  7767                           	psect	text49
  7768  072A                     __ptext49:	
  7769 ;; *************** function _setPIRLED_Main *****************
  7770 ;; Defined at:
  7771 ;;		line 253 in file "../src/LED_B1.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;		None
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  count           1    3[BANK0 ] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;		None               void
  7778 ;; Registers used:
  7779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7785 ;;      Params:         0       0       0       0
  7786 ;;      Locals:         0       1       0       0
  7787 ;;      Temps:          0       1       0       0
  7788 ;;      Totals:         0       2       0       0
  7789 ;;Total ram usage:        2 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    4
  7792 ;; This function calls:
  7793 ;;		_setLED
  7794 ;; This function is called by:
  7795 ;;		_LED_Main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           
  7800                           ;psect for function _setPIRLED_Main
  7801  072A                     _setPIRLED_Main:	
  7802                           
  7803                           ;LED_B1.c: 254: char count;
  7804                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7805                           
  7806                           ;incstack = 0
  7807                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7808  072A  1283               	bcf	3,5	;RP0=0, select bank0
  7809  072B  1303               	bcf	3,6	;RP1=0, select bank0
  7810  072C  1C30               	btfss	_PIRLED,0
  7811  072D  0008               	return
  7812                           
  7813                           ;LED_B1.c: 256: PIRLED.Time++;
  7814  072E  3001               	movlw	1
  7815  072F  07B2               	addwf	_PIRLED+2,f
  7816  0730  1803               	skipnc
  7817  0731  0AB3               	incf	_PIRLED+3,f
  7818  0732  3000               	movlw	0
  7819  0733  07B3               	addwf	_PIRLED+3,f
  7820                           
  7821                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  7822  0734  3000               	movlw	0
  7823  0735  0233               	subwf	_PIRLED+3,w
  7824  0736  3019               	movlw	25
  7825  0737  1903               	skipnz
  7826  0738  0232               	subwf	_PIRLED+2,w
  7827  0739  1C03               	skipc
  7828  073A  0008               	return
  7829                           
  7830                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7831  073B  01B2               	clrf	_PIRLED+2
  7832  073C  01B3               	clrf	_PIRLED+3
  7833                           
  7834                           ;LED_B1.c: 259: setLED(1, 0);
  7835  073D  01D6               	clrf	setLED@command
  7836  073E  3001               	movlw	1
  7837  073F  118A  279B  118A   	fcall	_setLED
  7838                           
  7839                           ;LED_B1.c: 260: setLED(2, 0);
  7840  0742  1283               	bcf	3,5	;RP0=0, select bank0
  7841  0743  1303               	bcf	3,6	;RP1=0, select bank0
  7842  0744  01D6               	clrf	setLED@command
  7843  0745  3002               	movlw	2
  7844  0746  118A  279B  118A   	fcall	_setLED
  7845                           
  7846                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7847  0749  1283               	bcf	3,5	;RP0=0, select bank0
  7848  074A  1303               	bcf	3,6	;RP1=0, select bank0
  7849  074B  1CB0               	btfss	_PIRLED,1
  7850  074C  2F51               	goto	l4527
  7851                           
  7852                           ;LED_B1.c: 262: count = 4;
  7853  074D  3004               	movlw	4
  7854  074E  00D8               	movwf	??_setPIRLED_Main
  7855  074F  0858               	movf	??_setPIRLED_Main,w
  7856  0750  00D9               	movwf	setPIRLED_Main@count
  7857  0751                     l4527:	
  7858                           
  7859                           ;LED_B1.c: 263: }
  7860                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7861  0751  1D30               	btfss	_PIRLED,2
  7862  0752  2F57               	goto	l4531
  7863                           
  7864                           ;LED_B1.c: 265: count = 6;
  7865  0753  3006               	movlw	6
  7866  0754  00D8               	movwf	??_setPIRLED_Main
  7867  0755  0858               	movf	??_setPIRLED_Main,w
  7868  0756  00D9               	movwf	setPIRLED_Main@count
  7869  0757                     l4531:	
  7870                           
  7871                           ;LED_B1.c: 266: }
  7872                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7873  0757  1DB0               	btfss	_PIRLED,3
  7874  0758  2F5D               	goto	l4535
  7875                           
  7876                           ;LED_B1.c: 268: count = 8;
  7877  0759  3008               	movlw	8
  7878  075A  00D8               	movwf	??_setPIRLED_Main
  7879  075B  0858               	movf	??_setPIRLED_Main,w
  7880  075C  00D9               	movwf	setPIRLED_Main@count
  7881  075D                     l4535:	
  7882                           
  7883                           ;LED_B1.c: 269: }
  7884                           ;LED_B1.c: 270: PIRLED.Count++;
  7885  075D  3001               	movlw	1
  7886  075E  00D8               	movwf	??_setPIRLED_Main
  7887  075F  0858               	movf	??_setPIRLED_Main,w
  7888  0760  07B1               	addwf	_PIRLED+1,f
  7889                           
  7890                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7891  0761  0831               	movf	_PIRLED+1,w
  7892  0762  3A01               	xorlw	1
  7893  0763  1903               	skipnz
  7894  0764  2F69               	goto	l4541
  7895  0765  0831               	movf	_PIRLED+1,w
  7896  0766  3A02               	xorlw	2
  7897  0767  1D03               	skipz
  7898  0768  2F7D               	goto	l4545
  7899  0769                     l4541:	
  7900                           
  7901                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7902  0769  1003               	clrc
  7903  076A  1E30               	btfss	_PIRLED,4
  7904  076B  1403               	setc
  7905  076C  1C03               	btfss	3,0
  7906  076D  2F72               	goto	u5350
  7907  076E  1283               	bcf	3,5	;RP0=0, select bank0
  7908  076F  1303               	bcf	3,6	;RP1=0, select bank0
  7909  0770  1630               	bsf	_PIRLED,4
  7910  0771  2F75               	goto	l4543
  7911  0772                     u5350:	
  7912  0772  1283               	bcf	3,5	;RP0=0, select bank0
  7913  0773  1303               	bcf	3,6	;RP1=0, select bank0
  7914  0774  1230               	bcf	_PIRLED,4
  7915  0775                     l4543:	
  7916                           
  7917                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  7918  0775  3000               	movlw	0
  7919  0776  1A30               	btfsc	_PIRLED,4
  7920  0777  3001               	movlw	1
  7921  0778  00D6               	movwf	setLED@command
  7922  0779  3002               	movlw	2
  7923  077A  118A  279B         	fcall	_setLED
  7924                           
  7925                           ;LED_B1.c: 274: } else {
  7926  077C  0008               	return
  7927  077D                     l4545:	
  7928                           
  7929                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7930  077D  1003               	clrc
  7931  077E  1283               	bcf	3,5	;RP0=0, select bank0
  7932  077F  1303               	bcf	3,6	;RP1=0, select bank0
  7933  0780  1E30               	btfss	_PIRLED,4
  7934  0781  1403               	setc
  7935  0782  1C03               	btfss	3,0
  7936  0783  2F88               	goto	u5370
  7937  0784  1283               	bcf	3,5	;RP0=0, select bank0
  7938  0785  1303               	bcf	3,6	;RP1=0, select bank0
  7939  0786  1630               	bsf	_PIRLED,4
  7940  0787  2F8B               	goto	l4547
  7941  0788                     u5370:	
  7942  0788  1283               	bcf	3,5	;RP0=0, select bank0
  7943  0789  1303               	bcf	3,6	;RP1=0, select bank0
  7944  078A  1230               	bcf	_PIRLED,4
  7945  078B                     l4547:	
  7946                           
  7947                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  7948  078B  3000               	movlw	0
  7949  078C  1A30               	btfsc	_PIRLED,4
  7950  078D  3001               	movlw	1
  7951  078E  00D6               	movwf	setLED@command
  7952  078F  3001               	movlw	1
  7953  0790  118A  279B  118A   	fcall	_setLED
  7954                           
  7955                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  7956  0793  1283               	bcf	3,5	;RP0=0, select bank0
  7957  0794  1303               	bcf	3,6	;RP1=0, select bank0
  7958  0795  0831               	movf	_PIRLED+1,w
  7959  0796  0659               	xorwf	setPIRLED_Main@count,w
  7960  0797  1D03               	skipz
  7961  0798  0008               	return
  7962                           
  7963                           ;LED_B1.c: 278: PIRLED.Count = 0;
  7964  0799  01B1               	clrf	_PIRLED+1
  7965  079A  0008               	return
  7966  079B                     __end_of_setPIRLED_Main:	
  7967                           
  7968                           	psect	text50
  7969  0B75                     __ptext50:	
  7970 ;; *************** function _LED_Initialization *****************
  7971 ;; Defined at:
  7972 ;;		line 31 in file "../src/LED_B1.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;		None               void
  7979 ;; Registers used:
  7980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7986 ;;      Params:         0       0       0       0
  7987 ;;      Locals:         0       0       0       0
  7988 ;;      Temps:          0       0       0       0
  7989 ;;      Totals:         0       0       0       0
  7990 ;;Total ram usage:        0 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    5
  7993 ;; This function calls:
  7994 ;;		_setLED_Initialization
  7995 ;; This function is called by:
  7996 ;;		_main
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function _LED_Initialization
  8002  0B75                     _LED_Initialization:	
  8003                           
  8004                           ;LED_B1.c: 33: setLED_Initialization(1);
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8008  0B75  3001               	movlw	1
  8009  0B76  158A  2449  158A   	fcall	_setLED_Initialization
  8010                           
  8011                           ;LED_B1.c: 36: setLED_Initialization(2);
  8012  0B79  3002               	movlw	2
  8013  0B7A  158A  2449         	fcall	_setLED_Initialization
  8014  0B7C  0008               	return
  8015  0B7D                     __end_of_LED_Initialization:	
  8016                           
  8017                           	psect	text51
  8018  0C49                     __ptext51:	
  8019 ;; *************** function _setLED_Initialization *****************
  8020 ;; Defined at:
  8021 ;;		line 69 in file "../src/LED_B1.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  led             1    wreg     unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  led             1    2[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;		None               void
  8028 ;; Registers used:
  8029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8035 ;;      Params:         0       0       0       0
  8036 ;;      Locals:         0       1       0       0
  8037 ;;      Temps:          0       0       0       0
  8038 ;;      Totals:         0       1       0       0
  8039 ;;Total ram usage:        1 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    4
  8042 ;; This function calls:
  8043 ;;		_LedPointSelect
  8044 ;;		_setLED
  8045 ;; This function is called by:
  8046 ;;		_LED_Initialization
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _setLED_Initialization
  8052  0C49                     _setLED_Initialization:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8056                           ;setLED_Initialization@led stored from wreg
  8057  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  8058  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  8059  0C4B  00D8               	movwf	setLED_Initialization@led
  8060                           
  8061                           ;LED_B1.c: 70: LedPointSelect(led);
  8062  0C4C  0858               	movf	setLED_Initialization@led,w
  8063  0C4D  158A  2437  158A   	fcall	_LedPointSelect
  8064                           
  8065                           ;LED_B1.c: 71: LED->Enable = 1;
  8066  0C50  0876               	movf	_LED,w
  8067  0C51  0084               	movwf	4
  8068  0C52  1383               	bcf	3,7	;select IRP bank0
  8069  0C53  1400               	bsf	0,0
  8070                           
  8071                           ;LED_B1.c: 72: setLED(led, 0);
  8072  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  8073  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  8074  0C56  01D6               	clrf	setLED@command
  8075  0C57  0858               	movf	setLED_Initialization@led,w
  8076  0C58  118A  279B         	fcall	_setLED
  8077  0C5A  0008               	return
  8078  0C5B                     __end_of_setLED_Initialization:	
  8079                           
  8080                           	psect	text52
  8081  0643                     __ptext52:	
  8082 ;; *************** function _Exception_Main *****************
  8083 ;; Defined at:
  8084 ;;		line 505 in file "../src/Main_B1.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  i               2   10[BANK0 ] int 
  8089 ;;  status          1    9[BANK0 ] unsigned char 
  8090 ;;  error           1   12[BANK0 ] unsigned char 
  8091 ;;  count           1    8[BANK0 ] unsigned char 
  8092 ;;  lights          1    7[BANK0 ] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8102 ;;      Params:         0       0       0       0
  8103 ;;      Locals:         0       6       0       0
  8104 ;;      Temps:          0       1       0       0
  8105 ;;      Totals:         0       7       0       0
  8106 ;;Total ram usage:        7 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    4
  8109 ;; This function calls:
  8110 ;;		_getAll_Lights_Line
  8111 ;;		_getLights_Status
  8112 ;;		_getMain_All_Error_Status
  8113 ;;		_setLED
  8114 ;;		_setLights_Trigger
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _Exception_Main
  8122  0643                     _Exception_Main:	
  8123                           
  8124                           ;Main_B1.c: 506: char error = getMain_All_Error_Status(0);
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8128  0643  3000               	movlw	0
  8129  0644  158A  262D  118A   	fcall	_getMain_All_Error_Status
  8130  0647  1283               	bcf	3,5	;RP0=0, select bank0
  8131  0648  1303               	bcf	3,6	;RP1=0, select bank0
  8132  0649  00DC               	movwf	??_Exception_Main
  8133  064A  085C               	movf	??_Exception_Main,w
  8134  064B  00E2               	movwf	Exception_Main@error
  8135                           
  8136                           ;Main_B1.c: 507: char lights = 0, count = 1;
  8137  064C  01DD               	clrf	Exception_Main@lights
  8138  064D  01DE               	clrf	Exception_Main@count
  8139  064E  0ADE               	incf	Exception_Main@count,f
  8140                           
  8141                           ;Main_B1.c: 508: if (myMain.Error_Run == 1) {
  8142  064F  1DA3               	btfss	_myMain+3,3
  8143  0650  2E5D               	goto	l5217
  8144                           
  8145                           ;Main_B1.c: 509: if (error == 0) {
  8146  0651  08E2               	movf	Exception_Main@error,f
  8147  0652  1D03               	skipz
  8148  0653  0008               	return
  8149                           
  8150                           ;Main_B1.c: 510: myMain.Error_Run = 0;
  8151  0654  11A3               	bcf	_myMain+3,3
  8152                           
  8153                           ;Main_B1.c: 512: setLED(error, 110);
  8154  0655  306E               	movlw	110
  8155  0656  00DC               	movwf	??_Exception_Main
  8156  0657  085C               	movf	??_Exception_Main,w
  8157  0658  00D6               	movwf	setLED@command
  8158  0659  0862               	movf	Exception_Main@error,w
  8159  065A  118A  279B         	fcall	_setLED
  8160                           
  8161                           ;Main_B1.c: 521: }
  8162                           ;Main_B1.c: 522: } else {
  8163  065C  0008               	return
  8164  065D                     l5217:	
  8165                           
  8166                           ;Main_B1.c: 523: if (error != 0) {
  8167  065D  1283               	bcf	3,5	;RP0=0, select bank0
  8168  065E  1303               	bcf	3,6	;RP1=0, select bank0
  8169  065F  0862               	movf	Exception_Main@error,w
  8170  0660  1903               	btfsc	3,2
  8171  0661  0008               	return
  8172                           
  8173                           ;Main_B1.c: 524: myMain.Error_Run = 1;
  8174  0662  15A3               	bsf	_myMain+3,3
  8175                           
  8176                           ;Main_B1.c: 585: setLED(error, 111);
  8177  0663  306F               	movlw	111
  8178  0664  00DC               	movwf	??_Exception_Main
  8179  0665  085C               	movf	??_Exception_Main,w
  8180  0666  00D6               	movwf	setLED@command
  8181  0667  0862               	movf	Exception_Main@error,w
  8182  0668  118A  279B  118A   	fcall	_setLED
  8183                           
  8184                           ;Main_B1.c: 586: if (error == 3) {
  8185  066B  1283               	bcf	3,5	;RP0=0, select bank0
  8186  066C  1303               	bcf	3,6	;RP1=0, select bank0
  8187  066D  0862               	movf	Exception_Main@error,w
  8188  066E  3A03               	xorlw	3
  8189  066F  1D03               	skipz
  8190  0670  2E8C               	goto	l5229
  8191                           
  8192                           ;Main_B1.c: 587: char status = getAll_Lights_Line();
  8193  0671  158A  2404  118A   	fcall	_getAll_Lights_Line
  8194  0674  1283               	bcf	3,5	;RP0=0, select bank0
  8195  0675  1303               	bcf	3,6	;RP1=0, select bank0
  8196  0676  00DC               	movwf	??_Exception_Main
  8197  0677  085C               	movf	??_Exception_Main,w
  8198  0678  00DF               	movwf	Exception_Main@status
  8199                           
  8200                           ;Main_B1.c: 588: if (getLights_Status(status) == 1) {
  8201  0679  085F               	movf	Exception_Main@status,w
  8202  067A  158A  2415  118A   	fcall	_getLights_Status
  8203  067D  3A01               	xorlw	1
  8204  067E  1903               	btfsc	3,2
  8205  067F  2E83               	goto	l5227
  8206  0680  1283               	bcf	3,5	;RP0=0, select bank0
  8207  0681  1303               	bcf	3,6	;RP1=0, select bank0
  8208  0682  0008               	return
  8209  0683                     l5227:	
  8210                           
  8211                           ;Main_B1.c: 589: setLights_Trigger(status, 0);
  8212  0683  1283               	bcf	3,5	;RP0=0, select bank0
  8213  0684  1303               	bcf	3,6	;RP1=0, select bank0
  8214  0685  01D6               	clrf	setLights_Trigger@command
  8215  0686  085F               	movf	Exception_Main@status,w
  8216  0687  158A  24FE         	fcall	_setLights_Trigger
  8217  0689  1283               	bcf	3,5	;RP0=0, select bank0
  8218  068A  1303               	bcf	3,6	;RP1=0, select bank0
  8219  068B  0008               	return
  8220  068C                     l5229:	
  8221                           ;Main_B1.c: 590: }
  8222                           ;Main_B1.c: 591: } else {
  8223                           
  8224                           
  8225                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8226  068C  1283               	bcf	3,5	;RP0=0, select bank0
  8227  068D  1303               	bcf	3,6	;RP1=0, select bank0
  8228  068E  01E0               	clrf	Exception_Main@i
  8229  068F  01E1               	clrf	Exception_Main@i+1
  8230  0690                     l5237:	
  8231  0690  0861               	movf	Exception_Main@i+1,w
  8232  0691  3A80               	xorlw	128
  8233  0692  00DC               	movwf	??_Exception_Main
  8234  0693  3080               	movlw	128
  8235  0694  025C               	subwf	??_Exception_Main,w
  8236  0695  1D03               	skipz
  8237  0696  2E99               	goto	u6885
  8238  0697  085E               	movf	Exception_Main@count,w
  8239  0698  0260               	subwf	Exception_Main@i,w
  8240  0699                     u6885:	
  8241  0699  1803               	btfsc	3,0
  8242  069A  2EB6               	goto	u6880
  8243                           
  8244                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8245  069B  1283               	bcf	3,5	;RP0=0, select bank0
  8246  069C  1303               	bcf	3,6	;RP1=0, select bank0
  8247  069D  0860               	movf	Exception_Main@i,w
  8248  069E  3E01               	addlw	1
  8249  069F  158A  2415  118A   	fcall	_getLights_Status
  8250  06A2  3A01               	xorlw	1
  8251  06A3  1D03               	skipz
  8252  06A4  2EAD               	goto	l5235
  8253                           
  8254                           ;Main_B1.c: 595: setLights_Trigger(i + 1, 0);
  8255  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  8256  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  8257  06A7  01D6               	clrf	setLights_Trigger@command
  8258  06A8  0860               	movf	Exception_Main@i,w
  8259  06A9  3E01               	addlw	1
  8260  06AA  158A  24FE  118A   	fcall	_setLights_Trigger
  8261  06AD                     l5235:	
  8262  06AD  3001               	movlw	1
  8263  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  8264  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  8265  06B0  07E0               	addwf	Exception_Main@i,f
  8266  06B1  1803               	skipnc
  8267  06B2  0AE1               	incf	Exception_Main@i+1,f
  8268  06B3  3000               	movlw	0
  8269  06B4  07E1               	addwf	Exception_Main@i+1,f
  8270  06B5  2E90               	goto	l5237
  8271  06B6                     u6880:	
  8272  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  8273  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  8274  06B8  0008               	return
  8275  06B9                     __end_of_Exception_Main:	
  8276                           
  8277                           	psect	text53
  8278  0CFE                     __ptext53:	
  8279 ;; *************** function _setLights_Trigger *****************
  8280 ;; Defined at:
  8281 ;;		line 219 in file "../src/TriacRelay_B1.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  lights          1    wreg     unsigned char 
  8284 ;;  command         1    0[BANK0 ] unsigned char 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  lights          1    2[BANK0 ] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;		None               void
  8289 ;; Registers used:
  8290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8296 ;;      Params:         0       1       0       0
  8297 ;;      Locals:         0       1       0       0
  8298 ;;      Temps:          0       1       0       0
  8299 ;;      Totals:         0       3       0       0
  8300 ;;Total ram usage:        3 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    3
  8303 ;; This function calls:
  8304 ;;		_LightsPointSelect
  8305 ;; This function is called by:
  8306 ;;		_Exception_Main
  8307 ;;		_PIR_Main
  8308 ;;		_setMain_Exception
  8309 ;;		_setLights_ErrorClose
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _setLights_Trigger
  8315  0CFE                     _setLights_Trigger:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8319                           ;setLights_Trigger@lights stored from wreg
  8320  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
  8321  0CFF  1303               	bcf	3,6	;RP1=0, select bank0
  8322  0D00  00D8               	movwf	setLights_Trigger@lights
  8323                           
  8324                           ;TriacRelay_B1.c: 220: LightsPointSelect(lights);
  8325  0D01  0858               	movf	setLights_Trigger@lights,w
  8326  0D02  158A  239E         	fcall	_LightsPointSelect
  8327                           
  8328                           ;TriacRelay_B1.c: 221: Lights->Trigger = 1;
  8329  0D04  0878               	movf	_Lights,w
  8330  0D05  0084               	movwf	4
  8331  0D06  1383               	bcf	3,7	;select IRP bank0
  8332  0D07  1580               	bsf	0,3
  8333                           
  8334                           ;TriacRelay_B1.c: 222: Lights->Switch = command == 1 ? 1 : 0;
  8335  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  8336  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  8337  0D0A  0856               	movf	setLights_Trigger@command,w
  8338  0D0B  3A01               	xorlw	1
  8339  0D0C  3000               	movlw	0
  8340  0D0D  1903               	skipnz
  8341  0D0E  3001               	movlw	1
  8342  0D0F  00D7               	movwf	??_setLights_Trigger
  8343  0D10  0878               	movf	_Lights,w
  8344  0D11  0084               	movwf	4
  8345  0D12  0ED7               	swapf	??_setLights_Trigger,f
  8346  0D13  0800               	movf	0,w
  8347  0D14  0657               	xorwf	??_setLights_Trigger,w
  8348  0D15  39EF               	andlw	-17
  8349  0D16  0657               	xorwf	??_setLights_Trigger,w
  8350  0D17  0080               	movwf	0
  8351  0D18  0008               	return
  8352  0D19                     __end_of_setLights_Trigger:	
  8353                           
  8354                           	psect	text54
  8355  079B                     __ptext54:	
  8356 ;; *************** function _setLED *****************
  8357 ;; Defined at:
  8358 ;;		line 76 in file "../src/LED_B1.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  led             1    wreg     unsigned char 
  8361 ;;  command         1    0[BANK0 ] unsigned char 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  led             1    1[BANK0 ] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;		None               void
  8366 ;; Registers used:
  8367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8373 ;;      Params:         0       1       0       0
  8374 ;;      Locals:         0       1       0       0
  8375 ;;      Temps:          0       0       0       0
  8376 ;;      Totals:         0       2       0       0
  8377 ;;Total ram usage:        2 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    3
  8380 ;; This function calls:
  8381 ;;		_LedPointSelect
  8382 ;; This function is called by:
  8383 ;;		_setLED_Initialization
  8384 ;;		_setPIRLED_Main
  8385 ;;		_Exception_Main
  8386 ;;		_PIR_Main
  8387 ;;		_setMain_Exception
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           
  8392                           ;psect for function _setLED
  8393  079B                     _setLED:	
  8394                           
  8395                           ;incstack = 0
  8396                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8397                           ;setLED@led stored from wreg
  8398  079B  1283               	bcf	3,5	;RP0=0, select bank0
  8399  079C  1303               	bcf	3,6	;RP1=0, select bank0
  8400  079D  00D7               	movwf	setLED@led
  8401                           
  8402                           ;LED_B1.c: 77: LedPointSelect(led);
  8403  079E  0857               	movf	setLED@led,w
  8404  079F  158A  2437  118A   	fcall	_LedPointSelect
  8405                           
  8406                           ;LED_B1.c: 78: if (command == 0) {
  8407  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  8408  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  8409  07A4  08D6               	movf	setLED@command,f
  8410  07A5  1D03               	skipz
  8411  07A6  2FB0               	goto	l4331
  8412                           
  8413                           ;LED_B1.c: 80: if (led == 1) {
  8414  07A7  0857               	movf	setLED@led,w
  8415  07A8  3A01               	xorlw	1
  8416  07A9  1D03               	skipz
  8417  07AA  2FAC               	goto	l4327
  8418                           
  8419                           ;LED_B1.c: 84: RA6 = 1;
  8420  07AB  1705               	bsf	5,6	;volatile
  8421  07AC                     l4327:	
  8422                           
  8423                           ;LED_B1.c: 86: }
  8424                           ;LED_B1.c: 89: if (led == 2) {
  8425  07AC  0857               	movf	setLED@led,w
  8426  07AD  3A02               	xorlw	2
  8427  07AE  1903               	btfsc	3,2
  8428                           
  8429                           ;LED_B1.c: 93: RA7 = 1;
  8430  07AF  1785               	bsf	5,7	;volatile
  8431  07B0                     l4331:	
  8432                           
  8433                           ;LED_B1.c: 95: }
  8434                           ;LED_B1.c: 115: }
  8435                           ;LED_B1.c: 116: if (command == 1) {
  8436  07B0  0856               	movf	setLED@command,w
  8437  07B1  3A01               	xorlw	1
  8438  07B2  1D03               	skipz
  8439  07B3  2FBD               	goto	l4341
  8440                           
  8441                           ;LED_B1.c: 118: if (led == 1) {
  8442  07B4  0857               	movf	setLED@led,w
  8443  07B5  3A01               	xorlw	1
  8444  07B6  1D03               	skipz
  8445  07B7  2FB9               	goto	l4337
  8446                           
  8447                           ;LED_B1.c: 122: RA6 = 0;
  8448  07B8  1305               	bcf	5,6	;volatile
  8449  07B9                     l4337:	
  8450                           
  8451                           ;LED_B1.c: 124: }
  8452                           ;LED_B1.c: 127: if (led == 2) {
  8453  07B9  0857               	movf	setLED@led,w
  8454  07BA  3A02               	xorlw	2
  8455  07BB  1903               	btfsc	3,2
  8456                           
  8457                           ;LED_B1.c: 131: RA7 = 0;
  8458  07BC  1385               	bcf	5,7	;volatile
  8459  07BD                     l4341:	
  8460                           
  8461                           ;LED_B1.c: 133: }
  8462                           ;LED_B1.c: 153: }
  8463                           ;LED_B1.c: 154: if (command == 10) {
  8464  07BD  0856               	movf	setLED@command,w
  8465  07BE  3A0A               	xorlw	10
  8466  07BF  1D03               	skipz
  8467  07C0  2FD4               	goto	l4355
  8468                           
  8469                           ;LED_B1.c: 155: LED->GO = 0;
  8470  07C1  0876               	movf	_LED,w
  8471  07C2  0084               	movwf	4
  8472  07C3  1383               	bcf	3,7	;select IRP bank0
  8473  07C4  1080               	bcf	0,1
  8474                           
  8475                           ;LED_B1.c: 156: LED->Time = 0;
  8476  07C5  0A76               	incf	_LED,w
  8477  07C6  0084               	movwf	4
  8478  07C7  0180               	clrf	0
  8479  07C8  0A84               	incf	4,f
  8480  07C9  0180               	clrf	0
  8481                           
  8482                           ;LED_B1.c: 158: if (led == 1) {
  8483  07CA  0857               	movf	setLED@led,w
  8484  07CB  3A01               	xorlw	1
  8485  07CC  1D03               	skipz
  8486  07CD  2FD0               	goto	l4351
  8487                           
  8488                           ;LED_B1.c: 162: RA6 = 1;
  8489  07CE  1705               	bsf	5,6	;volatile
  8490                           
  8491                           ;LED_B1.c: 164: }
  8492  07CF  2FD4               	goto	l4355
  8493  07D0                     l4351:	
  8494                           
  8495                           ;LED_B1.c: 167: else if (led == 2) {
  8496  07D0  0857               	movf	setLED@led,w
  8497  07D1  3A02               	xorlw	2
  8498  07D2  1903               	btfsc	3,2
  8499                           
  8500                           ;LED_B1.c: 171: RA7 = 1;
  8501  07D3  1785               	bsf	5,7	;volatile
  8502  07D4                     l4355:	
  8503                           
  8504                           ;LED_B1.c: 173: }
  8505                           ;LED_B1.c: 193: }
  8506                           ;LED_B1.c: 194: if (command == 11) {
  8507  07D4  0856               	movf	setLED@command,w
  8508  07D5  3A0B               	xorlw	11
  8509  07D6  1D03               	skipz
  8510  07D7  2FDC               	goto	l4359
  8511                           
  8512                           ;LED_B1.c: 195: LED->GO = 1;
  8513  07D8  0876               	movf	_LED,w
  8514  07D9  0084               	movwf	4
  8515  07DA  1383               	bcf	3,7	;select IRP bank0
  8516  07DB  1480               	bsf	0,1
  8517  07DC                     l4359:	
  8518                           
  8519                           ;LED_B1.c: 196: }
  8520                           ;LED_B1.c: 198: if (command == 111) {
  8521  07DC  0856               	movf	setLED@command,w
  8522  07DD  3A6F               	xorlw	111
  8523  07DE  1D03               	skipz
  8524  07DF  2FFA               	goto	l4385
  8525                           
  8526                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8527  07E0  01B1               	clrf	_PIRLED+1
  8528                           
  8529                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8530  07E1  01B2               	clrf	_PIRLED+2
  8531  07E2  01B3               	clrf	_PIRLED+3
  8532                           
  8533                           ;LED_B1.c: 201: PIRLED.status = 0;
  8534  07E3  1230               	bcf	_PIRLED,4
  8535                           
  8536                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8537  07E4  1430               	bsf	_PIRLED,0
  8538                           
  8539                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8540  07E5  10B0               	bcf	_PIRLED,1
  8541                           
  8542                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8543  07E6  1130               	bcf	_PIRLED,2
  8544                           
  8545                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8546  07E7  11B0               	bcf	_PIRLED,3
  8547                           
  8548                           ;LED_B1.c: 206: if (led == 1) {
  8549  07E8  0857               	movf	setLED@led,w
  8550  07E9  3A01               	xorlw	1
  8551  07EA  1D03               	skipz
  8552  07EB  2FEE               	goto	l4377
  8553                           
  8554                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8555  07EC  14B0               	bsf	_PIRLED,1
  8556                           
  8557                           ;LED_B1.c: 208: } else if (led == 2) {
  8558  07ED  0008               	return
  8559  07EE                     l4377:	
  8560  07EE  0857               	movf	setLED@led,w
  8561  07EF  3A02               	xorlw	2
  8562  07F0  1D03               	skipz
  8563  07F1  2FF4               	goto	l4381
  8564                           
  8565                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8566  07F2  1530               	bsf	_PIRLED,2
  8567                           
  8568                           ;LED_B1.c: 210: } else if (led == 3) {
  8569  07F3  0008               	return
  8570  07F4                     l4381:	
  8571  07F4  0857               	movf	setLED@led,w
  8572  07F5  3A03               	xorlw	3
  8573  07F6  1D03               	skipz
  8574  07F7  0008               	return
  8575                           
  8576                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8577  07F8  15B0               	bsf	_PIRLED,3
  8578                           
  8579                           ;LED_B1.c: 212: }
  8580                           ;LED_B1.c: 213: } else if (command == 110) {
  8581  07F9  0008               	return
  8582  07FA                     l4385:	
  8583  07FA  0856               	movf	setLED@command,w
  8584  07FB  3A6E               	xorlw	110
  8585  07FC  1D03               	skipz
  8586  07FD  0008               	return
  8587                           
  8588                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8589  07FE  1030               	bcf	_PIRLED,0
  8590  07FF  0008               	return
  8591  0800                     __end_of_setLED:	
  8592                           
  8593                           	psect	text55
  8594  0C37                     __ptext55:	
  8595 ;; *************** function _LedPointSelect *****************
  8596 ;; Defined at:
  8597 ;;		line 7 in file "../src/LED_B1.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  led             1    wreg     unsigned char 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  led             1    5[COMMON] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;		None               void
  8604 ;; Registers used:
  8605 ;;		wreg
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8611 ;;      Params:         0       0       0       0
  8612 ;;      Locals:         1       0       0       0
  8613 ;;      Temps:          1       0       0       0
  8614 ;;      Totals:         2       0       0       0
  8615 ;;Total ram usage:        2 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    2
  8618 ;; This function calls:
  8619 ;;		Nothing
  8620 ;; This function is called by:
  8621 ;;		_setLED_Initialization
  8622 ;;		_setLED
  8623 ;;		_setLED_Main
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _LedPointSelect
  8629  0C37                     _LedPointSelect:	
  8630                           
  8631                           ;incstack = 0
  8632                           ; Regs used in _LedPointSelect: [wreg]
  8633                           ;LedPointSelect@led stored from wreg
  8634  0C37  00F5               	movwf	LedPointSelect@led
  8635                           
  8636                           ;LED_B1.c: 9: if (led == 1) {
  8637  0C38  0875               	movf	LedPointSelect@led,w
  8638  0C39  3A01               	xorlw	1
  8639  0C3A  1D03               	skipz
  8640  0C3B  2C40               	goto	l254
  8641                           
  8642                           ;LED_B1.c: 10: LED = &VarLED1;
  8643  0C3C  304E               	movlw	_VarLED1& (0+255)
  8644  0C3D  00F4               	movwf	??_LedPointSelect
  8645  0C3E  0874               	movf	??_LedPointSelect,w
  8646  0C3F  00F6               	movwf	_LED
  8647  0C40                     l254:	
  8648                           
  8649                           ;LED_B1.c: 11: }
  8650                           ;LED_B1.c: 14: if (led == 2) {
  8651  0C40  0875               	movf	LedPointSelect@led,w
  8652  0C41  3A02               	xorlw	2
  8653  0C42  1D03               	skipz
  8654  0C43  0008               	return
  8655                           
  8656                           ;LED_B1.c: 15: LED = &VarLED2;
  8657  0C44  3052               	movlw	_VarLED2& (0+255)
  8658  0C45  00F4               	movwf	??_LedPointSelect
  8659  0C46  0874               	movf	??_LedPointSelect,w
  8660  0C47  00F6               	movwf	_LED
  8661  0C48  0008               	return
  8662  0C49                     __end_of_LedPointSelect:	
  8663                           
  8664                           	psect	text56
  8665  0E2D                     __ptext56:	
  8666 ;; *************** function _getMain_All_Error_Status *****************
  8667 ;; Defined at:
  8668 ;;		line 424 in file "../src/Main_B1.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  command         1    wreg     unsigned char 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  command         1    4[BANK0 ] unsigned char 
  8673 ;;  status          1    5[BANK0 ] unsigned char 
  8674 ;; Return value:  Size  Location     Type
  8675 ;;                  1    wreg      unsigned char 
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, status,0
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8683 ;;      Params:         0       0       0       0
  8684 ;;      Locals:         0       6       0       0
  8685 ;;      Temps:          1       0       0       0
  8686 ;;      Totals:         1       6       0       0
  8687 ;;Total ram usage:        7 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    2
  8690 ;; This function calls:
  8691 ;;		Nothing
  8692 ;; This function is called by:
  8693 ;;		_Exception_Main
  8694 ;;		_Load_Main
  8695 ;;		_setTemp_Main
  8696 ;;		_PIR_Main
  8697 ;;		_setSYSC_Main
  8698 ;;		_Lights_Main
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           
  8703                           ;psect for function _getMain_All_Error_Status
  8704  0E2D                     _getMain_All_Error_Status:	
  8705                           
  8706                           ;incstack = 0
  8707                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8708                           ;getMain_All_Error_Status@command stored from wreg
  8709  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  8710  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  8711  0E2F  00DA               	movwf	getMain_All_Error_Status@command
  8712                           
  8713                           ;Main_B1.c: 425: char status = 0;
  8714  0E30  01DB               	clrf	getMain_All_Error_Status@status
  8715                           
  8716                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  8717  0E31  08DB               	movf	getMain_All_Error_Status@status,f
  8718  0E32  1D03               	skipz
  8719  0E33  2E3C               	goto	l3141
  8720  0E34  085A               	movf	getMain_All_Error_Status@command,w
  8721  0E35  3A01               	xorlw	1
  8722  0E36  1903               	skipnz
  8723  0E37  2E3C               	goto	l3141
  8724                           
  8725                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  8726  0E38  3000               	movlw	0
  8727  0E39  18A6               	btfsc	_SYSC,1
  8728  0E3A  3001               	movlw	1
  8729  0E3B  00DB               	movwf	getMain_All_Error_Status@status
  8730  0E3C                     l3141:	
  8731                           
  8732                           ;Main_B1.c: 430: }
  8733                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  8734  0E3C  08DB               	movf	getMain_All_Error_Status@status,f
  8735  0E3D  1D03               	skipz
  8736  0E3E  2E50               	goto	l3151
  8737  0E3F  085A               	movf	getMain_All_Error_Status@command,w
  8738  0E40  3A02               	xorlw	2
  8739  0E41  1903               	skipnz
  8740  0E42  2E50               	goto	l3151
  8741                           
  8742                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  8743  0E43  18BB               	btfsc	_Temp,1
  8744  0E44  2E48               	goto	l3149
  8745  0E45  01D6               	clrf	_getMain_All_Error_Status$2327
  8746  0E46  01D7               	clrf	_getMain_All_Error_Status$2327+1
  8747  0E47  2E4C               	goto	l604
  8748  0E48                     l3149:	
  8749  0E48  3002               	movlw	2
  8750  0E49  00D6               	movwf	_getMain_All_Error_Status$2327
  8751  0E4A  3000               	movlw	0
  8752  0E4B  00D7               	movwf	_getMain_All_Error_Status$2327+1
  8753  0E4C                     l604:	
  8754  0E4C  0856               	movf	_getMain_All_Error_Status$2327,w
  8755  0E4D  00F4               	movwf	??_getMain_All_Error_Status
  8756  0E4E  0874               	movf	??_getMain_All_Error_Status,w
  8757  0E4F  00DB               	movwf	getMain_All_Error_Status@status
  8758  0E50                     l3151:	
  8759                           
  8760                           ;Main_B1.c: 438: }
  8761                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  8762  0E50  08DB               	movf	getMain_All_Error_Status@status,f
  8763  0E51  1D03               	skipz
  8764  0E52  2E69               	goto	l605
  8765  0E53  085A               	movf	getMain_All_Error_Status@command,w
  8766  0E54  3A03               	xorlw	3
  8767  0E55  1903               	skipnz
  8768  0E56  2E69               	goto	l605
  8769                           
  8770                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  8771  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  8772  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  8773  0E59  1ACE               	btfsc	_Load^(0+128),5
  8774  0E5A  2E60               	goto	l3159
  8775  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  8776  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  8777  0E5D  01D8               	clrf	_getMain_All_Error_Status$2328
  8778  0E5E  01D9               	clrf	_getMain_All_Error_Status$2328+1
  8779  0E5F  2E65               	goto	l609
  8780  0E60                     l3159:	
  8781  0E60  3003               	movlw	3
  8782  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  8783  0E62  00D8               	movwf	_getMain_All_Error_Status$2328
  8784  0E63  3000               	movlw	0
  8785  0E64  00D9               	movwf	_getMain_All_Error_Status$2328+1
  8786  0E65                     l609:	
  8787  0E65  0858               	movf	_getMain_All_Error_Status$2328,w
  8788  0E66  00F4               	movwf	??_getMain_All_Error_Status
  8789  0E67  0874               	movf	??_getMain_All_Error_Status,w
  8790  0E68  00DB               	movwf	getMain_All_Error_Status@status
  8791  0E69                     l605:	
  8792                           
  8793                           ;Main_B1.c: 445: }
  8794                           ;Main_B1.c: 461: return status;
  8795  0E69  085B               	movf	getMain_All_Error_Status@status,w
  8796  0E6A  0008               	return
  8797  0E6B                     __end_of_getMain_All_Error_Status:	
  8798                           
  8799                           	psect	text57
  8800  0C15                     __ptext57:	
  8801 ;; *************** function _getLights_Status *****************
  8802 ;; Defined at:
  8803 ;;		line 212 in file "../src/TriacRelay_B1.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  lights          1    wreg     unsigned char 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  lights          1    0[BANK0 ] unsigned char 
  8808 ;;  status          1    1[BANK0 ] unsigned char 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;                  1    wreg      unsigned char 
  8811 ;; Registers used:
  8812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8818 ;;      Params:         0       0       0       0
  8819 ;;      Locals:         0       2       0       0
  8820 ;;      Temps:          0       0       0       0
  8821 ;;      Totals:         0       2       0       0
  8822 ;;Total ram usage:        2 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    3
  8825 ;; This function calls:
  8826 ;;		_LightsPointSelect
  8827 ;; This function is called by:
  8828 ;;		_Exception_Main
  8829 ;;		_PIR_Main
  8830 ;;		_setMain_Exception
  8831 ;;		_setLights_ErrorClose
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _getLights_Status
  8837  0C15                     _getLights_Status:	
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8841                           ;getLights_Status@lights stored from wreg
  8842  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  8843  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  8844  0C17  00D6               	movwf	getLights_Status@lights
  8845                           
  8846                           ;TriacRelay_B1.c: 213: LightsPointSelect(lights);
  8847  0C18  0856               	movf	getLights_Status@lights,w
  8848  0C19  158A  239E         	fcall	_LightsPointSelect
  8849                           
  8850                           ;TriacRelay_B1.c: 214: char status = Lights->Status == 1 ? 1 : 0;
  8851  0C1B  0878               	movf	_Lights,w
  8852  0C1C  0084               	movwf	4
  8853  0C1D  3000               	movlw	0
  8854  0C1E  1383               	bcf	3,7	;select IRP bank0
  8855  0C1F  1900               	btfsc	0,2
  8856  0C20  3001               	movlw	1
  8857  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  8858  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  8859  0C23  00D7               	movwf	getLights_Status@status
  8860                           
  8861                           ;TriacRelay_B1.c: 215: return status;
  8862  0C24  0857               	movf	getLights_Status@status,w
  8863  0C25  0008               	return
  8864  0C26                     __end_of_getLights_Status:	
  8865                           
  8866                           	psect	text58
  8867  0C04                     __ptext58:	
  8868 ;; *************** function _getAll_Lights_Line *****************
  8869 ;; Defined at:
  8870 ;;		line 251 in file "../src/TriacRelay_B1.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  line            1    0[BANK0 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      unsigned char 
  8877 ;; Registers used:
  8878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8884 ;;      Params:         0       0       0       0
  8885 ;;      Locals:         0       1       0       0
  8886 ;;      Temps:          0       0       0       0
  8887 ;;      Totals:         0       1       0       0
  8888 ;;Total ram usage:        1 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    3
  8891 ;; This function calls:
  8892 ;;		_LightsPointSelect
  8893 ;; This function is called by:
  8894 ;;		_Exception_Main
  8895 ;;		_setMain_Exception
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           
  8900                           ;psect for function _getAll_Lights_Line
  8901  0C04                     _getAll_Lights_Line:	
  8902                           
  8903                           ;TriacRelay_B1.c: 252: char line = 0;
  8904                           
  8905                           ;incstack = 0
  8906                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8907  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  8908  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  8909  0C06  01D6               	clrf	getAll_Lights_Line@line
  8910                           
  8911                           ;TriacRelay_B1.c: 254: LightsPointSelect(1);
  8912  0C07  3001               	movlw	1
  8913  0C08  158A  239E         	fcall	_LightsPointSelect
  8914                           
  8915                           ;TriacRelay_B1.c: 255: line = Lights->Line == 1 ? 1 : 0;
  8916  0C0A  0A78               	incf	_Lights,w
  8917  0C0B  0084               	movwf	4
  8918  0C0C  3000               	movlw	0
  8919  0C0D  1383               	bcf	3,7	;select IRP bank0
  8920  0C0E  1800               	btfsc	0,0
  8921  0C0F  3001               	movlw	1
  8922  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  8923  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  8924  0C12  00D6               	movwf	getAll_Lights_Line@line
  8925                           
  8926                           ;TriacRelay_B1.c: 265: return line;
  8927  0C13  0856               	movf	getAll_Lights_Line@line,w
  8928  0C14  0008               	return
  8929  0C15                     __end_of_getAll_Lights_Line:	
  8930                           
  8931                           	psect	text59
  8932  0B9E                     __ptext59:	
  8933 ;; *************** function _LightsPointSelect *****************
  8934 ;; Defined at:
  8935 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  lights          1    wreg     unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  lights          1    5[COMMON] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		wreg
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8949 ;;      Params:         0       0       0       0
  8950 ;;      Locals:         1       0       0       0
  8951 ;;      Temps:          1       0       0       0
  8952 ;;      Totals:         2       0       0       0
  8953 ;;Total ram usage:        2 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    2
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		_setLights_Initialization
  8960 ;;		_setLights_Main
  8961 ;;		_Lights_Control
  8962 ;;		_getLights_Status
  8963 ;;		_setLights_Trigger
  8964 ;;		_getAll_Lights_Line
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _LightsPointSelect
  8970  0B9E                     _LightsPointSelect:	
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _LightsPointSelect: [wreg]
  8974                           ;LightsPointSelect@lights stored from wreg
  8975  0B9E  00F5               	movwf	LightsPointSelect@lights
  8976                           
  8977                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8978  0B9F  0875               	movf	LightsPointSelect@lights,w
  8979  0BA0  3A01               	xorlw	1
  8980  0BA1  1D03               	skipz
  8981  0BA2  0008               	return
  8982                           
  8983                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8984  0BA3  3047               	movlw	_Lights1& (0+255)
  8985  0BA4  00F4               	movwf	??_LightsPointSelect
  8986  0BA5  0874               	movf	??_LightsPointSelect,w
  8987  0BA6  00F8               	movwf	_Lights
  8988  0BA7  0008               	return
  8989  0BA8                     __end_of_LightsPointSelect:	
  8990                           
  8991                           	psect	text60
  8992  0BBD                     __ptext60:	
  8993 ;; *************** function _DetectSYSC_Signal *****************
  8994 ;; Defined at:
  8995 ;;		line 50 in file "../src/SYSC_B1.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;		None
  9000 ;; Return value:  Size  Location     Type
  9001 ;;		None               void
  9002 ;; Registers used:
  9003 ;;		status,2
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9009 ;;      Params:         0       0       0       0
  9010 ;;      Locals:         0       0       0       0
  9011 ;;      Temps:          0       0       0       0
  9012 ;;      Totals:         0       0       0       0
  9013 ;;Total ram usage:        0 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    2
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_main
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function _DetectSYSC_Signal
  9025  0BBD                     _DetectSYSC_Signal:	
  9026                           
  9027                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9028                           
  9029                           ;incstack = 0
  9030                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9031  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  9032  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  9033  0BBF  19A6               	btfsc	_SYSC,3
  9034  0BC0  2BC7               	goto	l1109
  9035                           
  9036                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9037  0BC1  1E85               	btfss	5,5	;volatile
  9038  0BC2  0008               	return
  9039                           
  9040                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9041  0BC3  15A6               	bsf	_SYSC,3
  9042                           
  9043                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9044  0BC4  01A7               	clrf	_SYSC+1
  9045  0BC5  01A8               	clrf	_SYSC+2
  9046                           
  9047                           ;SYSC_B1.c: 55: }
  9048                           ;SYSC_B1.c: 56: } else {
  9049  0BC6  0008               	return
  9050  0BC7                     l1109:	
  9051                           
  9052                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9053  0BC7  1A85               	btfsc	5,5	;volatile
  9054  0BC8  0008               	return
  9055                           
  9056                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9057  0BC9  11A6               	bcf	_SYSC,3
  9058  0BCA  0008               	return
  9059  0BCB                     __end_of_DetectSYSC_Signal:	
  9060                           
  9061                           	psect	text61
  9062  0DF9                     __ptext61:	
  9063 ;; *************** function _CDS_Main *****************
  9064 ;; Defined at:
  9065 ;;		line 11 in file "../src/CDS_B1.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;		None
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;		None
  9070 ;; Return value:  Size  Location     Type
  9071 ;;		None               void
  9072 ;; Registers used:
  9073 ;;		wreg, status,2, status,0
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9079 ;;      Params:         0       0       0       0
  9080 ;;      Locals:         0       0       0       0
  9081 ;;      Temps:          0       3       0       0
  9082 ;;      Totals:         0       3       0       0
  9083 ;;Total ram usage:        3 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    2
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_main
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _CDS_Main
  9095  0DF9                     _CDS_Main:	
  9096                           
  9097                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9098                           
  9099                           ;incstack = 0
  9100                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9101  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  9102  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  9103  0DFB  1C2B               	btfss	__CDS,0
  9104  0DFC  0008               	return
  9105                           
  9106                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9107  0DFD  18AB               	btfsc	__CDS,1
  9108  0DFE  2E0C               	goto	l117
  9109                           
  9110                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9111  0DFF  19AB               	btfsc	__CDS,3
  9112  0E00  0008               	return
  9113                           
  9114                           ;CDS_B1.c: 16: _CDS.Time++;
  9115  0E01  3001               	movlw	1
  9116  0E02  00D6               	movwf	??_CDS_Main
  9117  0E03  0856               	movf	??_CDS_Main,w
  9118  0E04  07AC               	addwf	__CDS+1,f
  9119                           
  9120                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9121  0E05  3005               	movlw	5
  9122  0E06  022C               	subwf	__CDS+1,w
  9123  0E07  1C03               	skipc
  9124  0E08  0008               	return
  9125                           
  9126                           ;CDS_B1.c: 18: {
  9127                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9128  0E09  01AC               	clrf	__CDS+1
  9129                           
  9130                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9131  0E0A  15AB               	bsf	__CDS,3
  9132                           
  9133                           ;CDS_B1.c: 21: }
  9134                           ;CDS_B1.c: 22: }
  9135                           ;CDS_B1.c: 23: } else {
  9136  0E0B  0008               	return
  9137  0E0C                     l117:	
  9138                           
  9139                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9140  0E0C  1CAB               	btfss	__CDS,1
  9141  0E0D  0008               	return
  9142                           
  9143                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9144  0E0E  10AB               	bcf	__CDS,1
  9145                           
  9146                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9147  0E0F  1A2B               	btfsc	__CDS,4
  9148  0E10  2E17               	goto	l4737
  9149                           
  9150                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9151  0E11  082D               	movf	__CDS+2,w
  9152  0E12  022E               	subwf	__CDS+3,w
  9153  0E13  1C03               	skipc
  9154  0E14  0008               	return
  9155                           
  9156                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9157  0E15  162B               	bsf	__CDS,4
  9158                           
  9159                           ;CDS_B1.c: 29: }
  9160                           ;CDS_B1.c: 30: } else {
  9161  0E16  0008               	return
  9162  0E17                     l4737:	
  9163                           
  9164                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9165  0E17  082D               	movf	__CDS+2,w
  9166  0E18  3E9C               	addlw	156
  9167  0E19  00D6               	movwf	??_CDS_Main
  9168  0E1A  30FF               	movlw	255
  9169  0E1B  1803               	skipnc
  9170  0E1C  3000               	movlw	0
  9171  0E1D  00D7               	movwf	??_CDS_Main+1
  9172  0E1E  0857               	movf	??_CDS_Main+1,w
  9173  0E1F  3A80               	xorlw	128
  9174  0E20  00D8               	movwf	??_CDS_Main+2
  9175  0E21  3080               	movlw	128
  9176  0E22  0258               	subwf	??_CDS_Main+2,w
  9177  0E23  1D03               	skipz
  9178  0E24  2E27               	goto	u5835
  9179  0E25  082E               	movf	__CDS+3,w
  9180  0E26  0256               	subwf	??_CDS_Main,w
  9181  0E27                     u5835:	
  9182  0E27  1C03               	skipc
  9183  0E28  0008               	return
  9184                           
  9185                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9186  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  9187  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  9188  0E2B  122B               	bcf	__CDS,4
  9189  0E2C  0008               	return
  9190  0E2D                     __end_of_CDS_Main:	
  9191                           
  9192                           	psect	text62
  9193  0B44                     __ptext62:	
  9194 ;; *************** function _CDS_Initialization *****************
  9195 ;; Defined at:
  9196 ;;		line 7 in file "../src/CDS_B1.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;		None
  9201 ;; Return value:  Size  Location     Type
  9202 ;;		None               void
  9203 ;; Registers used:
  9204 ;;		None
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9210 ;;      Params:         0       0       0       0
  9211 ;;      Locals:         0       0       0       0
  9212 ;;      Temps:          0       0       0       0
  9213 ;;      Totals:         0       0       0       0
  9214 ;;Total ram usage:        0 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    2
  9217 ;; This function calls:
  9218 ;;		Nothing
  9219 ;; This function is called by:
  9220 ;;		_main
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _CDS_Initialization
  9226  0B44                     _CDS_Initialization:	
  9227                           
  9228                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _CDS_Initialization: []
  9232  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  9233  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  9234  0B46  142B               	bsf	__CDS,0
  9235  0B47  0008               	return
  9236  0B48                     __end_of_CDS_Initialization:	
  9237                           
  9238                           	psect	text63
  9239  0CB2                     __ptext63:	
  9240 ;; *************** function _ISR *****************
  9241 ;; Defined at:
  9242 ;;		line 116 in file "../src/MCU_B1.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;		None               void
  9249 ;; Registers used:
  9250 ;;		wreg, status,2, status,0, pclath, cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9256 ;;      Params:         0       0       0       0
  9257 ;;      Locals:         0       0       0       0
  9258 ;;      Temps:          4       0       0       0
  9259 ;;      Totals:         4       0       0       0
  9260 ;;Total ram usage:        4 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    1
  9263 ;; This function calls:
  9264 ;;		_TMR1_ISR
  9265 ;; This function is called by:
  9266 ;;		Interrupt level 1
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _ISR
  9272  0CB2                     _ISR:	
  9273                           
  9274                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9275  0CB2  1683               	bsf	3,5	;RP0=1, select bank1
  9276  0CB3  1303               	bcf	3,6	;RP1=0, select bank1
  9277  0CB4  1C0C               	btfss	12,0	;volatile
  9278  0CB5  2CBD               	goto	i1l426
  9279  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  9280  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  9281  0CB8  1C0C               	btfss	12,0	;volatile
  9282  0CB9  2CBD               	goto	i1l426
  9283                           
  9284                           ;MCU_B1.c: 126: TMR1_ISR();
  9285  0CBA  158A  246F  158A   	fcall	_TMR1_ISR
  9286  0CBD                     i1l426:	
  9287                           ;MCU_B1.c: 127: }
  9288                           ;MCU_B1.c: 148: return;
  9289                           
  9290  0CBD  0873               	movf	??_ISR+3,w
  9291  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  9292  0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  9293  0CC0  00FF               	movwf	127
  9294  0CC1  0872               	movf	??_ISR+2,w
  9295  0CC2  008A               	movwf	10
  9296  0CC3  0871               	movf	??_ISR+1,w
  9297  0CC4  0084               	movwf	4
  9298  0CC5  0E70               	swapf	??_ISR^(0+-128),w
  9299  0CC6  0083               	movwf	3
  9300  0CC7  0EFE               	swapf	126,f
  9301  0CC8  0E7E               	swapf	126,w
  9302  0CC9  0009               	retfie
  9303  0CCA                     __end_of_ISR:	
  9304                           
  9305                           	psect	intentry
  9306  0004                     __pintentry:	
  9307                           ;incstack = 0
  9308                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9309                           
  9310  0004                     interrupt_function:	
  9311  007E                     saved_w	set	btemp
  9312  0004  00FE               	movwf	btemp
  9313  0005  0E03               	swapf	3,w
  9314  0006  00F0               	movwf	??_ISR
  9315  0007  0804               	movf	4,w
  9316  0008  00F1               	movwf	??_ISR+1
  9317  0009  080A               	movf	10,w
  9318  000A  00F2               	movwf	??_ISR+2
  9319  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9320  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9321  000D  087F               	movf	btemp+1,w
  9322  000E  00F3               	movwf	??_ISR+3
  9323  000F  158A  2CB2         	ljmp	_ISR
  9324                           
  9325                           	psect	text64
  9326  0C6F                     __ptext64:	
  9327 ;; *************** function _TMR1_ISR *****************
  9328 ;; Defined at:
  9329 ;;		line 236 in file "../src/MCU_B1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, status,2
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9343 ;;      Params:         0       0       0       0
  9344 ;;      Locals:         0       0       0       0
  9345 ;;      Temps:          0       0       0       0
  9346 ;;      Totals:         0       0       0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_ISR
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _TMR1_ISR
  9358  0C6F                     _TMR1_ISR:	
  9359                           
  9360                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  9361                           
  9362                           ;incstack = 0
  9363                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9364  0C6F  30FA               	movlw	250
  9365  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  9366  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  9367  0C72  008F               	movwf	15	;volatile
  9368                           
  9369                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  9370  0C73  3038               	movlw	56
  9371  0C74  008E               	movwf	14	;volatile
  9372                           
  9373                           ;MCU_B1.c: 240: TMR1IF = 0;
  9374  0C75  100C               	bcf	12,0	;volatile
  9375                           
  9376                           ;MCU_B1.c: 271: Timer1.Count++;
  9377  0C76  3001               	movlw	1
  9378  0C77  07B5               	addwf	_Timer1+1,f
  9379  0C78  1803               	skipnc
  9380  0C79  0AB6               	incf	_Timer1+2,f
  9381  0C7A  3000               	movlw	0
  9382  0C7B  07B6               	addwf	_Timer1+2,f
  9383                           
  9384                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
  9385  0C7C  30C8               	movlw	200
  9386  0C7D  0635               	xorwf	_Timer1+1,w
  9387  0C7E  0436               	iorwf	_Timer1+2,w
  9388  0C7F  1D03               	skipz
  9389  0C80  0008               	return
  9390                           
  9391                           ;MCU_B1.c: 273: Timer1.Count = 0;
  9392  0C81  01B5               	clrf	_Timer1+1
  9393  0C82  01B6               	clrf	_Timer1+2
  9394                           
  9395                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
  9396  0C83  1434               	bsf	_Timer1,0
  9397  0C84  0008               	return
  9398  0C85                     __end_of_TMR1_ISR:	
  9399  007E                     btemp	set	126	;btemp
  9400  007E                     wtemp	set	126
  9401  007E                     wtemp0	set	126
  9402  0080                     wtemp1	set	128
  9403  0082                     wtemp2	set	130
  9404  0084                     wtemp3	set	132
  9405  0086                     wtemp4	set	134
  9406  0088                     wtemp5	set	136
  9407  007F                     wtemp6	set	127
  9408  007E                     ttemp	set	126
  9409  007E                     ttemp0	set	126
  9410  0081                     ttemp1	set	129
  9411  0084                     ttemp2	set	132
  9412  0087                     ttemp3	set	135
  9413  007F                     ttemp4	set	127
  9414  007E                     ltemp	set	126
  9415  007E                     ltemp0	set	126
  9416  0082                     ltemp1	set	130
  9417  0086                     ltemp2	set	134
  9418  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      75
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   21453
                                             16 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     555
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2785
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     923
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1294
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1294
                                              5 COMMON     1     1      0
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            10    10      0    3413
                                              6 BANK0     10    10      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1770
                                              7 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    2021
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     572
                                              2 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     309
                                              5 COMMON     1     0      1
                                              0 BANK0      2     2      0
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1185
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    1984
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    1984
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2068
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2068
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3613
                                              6 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    1944
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      4B       5       93.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A4      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Jan 13 12:59:37 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 005B                                  fsr 0004  
               ___wmul@multiplicand 0058                                 l117 0E0C  
                               l254 0C40                                 l604 0E4C  
                               l605 0E69                                 l710 0248  
                               l609 0E65                                 l722 0387  
                               l706 03FA                                 l716 03D3  
                               l708 0252                                 l717 03D1  
                               l709 024E                                 l904 007B  
                               l824 05BC                                 l906 008E  
                               l829 05B9                                 l896 01FD  
                               l897 0075                                 l898 0052  
                               _GIE 005F                                 _RB2 0032  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RA6 002E  
                               _RA7 002F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0CB2                                 _PSA 040B  
                               _WDT 0037                                 _Cmd 0039  
            getAll_Lights_Line@line 0056                                 fsr0 0004  
                               indf 0000                     __end_of_ADC_Set 0B75  
         __end_of_LightsPointSelect 0BA8                    _getLights_Status 0C15  
           __size_of_Lights_Control 0083                                ?_ISR 0070  
                        Load_Main@i 0061                                l1109 0BC7  
                              l1259 0D4A                                l3141 0E3C  
                              l1366 0D5F                                l3151 0E50  
                              l3149 0E48                                l3159 0E60  
                              l5113 00B1                                l4331 07B0  
                              l5035 03E7                                l5131 00D5  
                              l4341 07BD                                l4413 0CAA  
                              l5053 0D4B                                l5141 0115  
                              l5125 00C8                                l4501 0D2F  
                              l4351 07D0                                l4327 07AC  
                              l4337 07B9                                l5217 065D  
                              l4433 0F14                                l5161 0190  
                              l5129 00D4                                l4355 07D4  
                              l5235 06AD                                l5227 0683  
                              l4531 0757                                l4443 0F35  
                              l5163 019F                                l5075 0065  
                              l3475 0EDB                                l4381 07F4  
                              l5237 0690                                l5229 068C  
                              l4541 0769                                l4461 0F54  
                              l4701 0E75                                l5157 015E  
                              l5149 0129                                l3469 0EC2  
                              l4621 05A9                                l4605 058E  
                              l4359 07DC                                l4543 0775  
                              l4535 075D                                l4527 0751  
                              l4471 0F5C                                l4455 0F49  
                              l4703 0E83                                l4631 05B8  
                              l5271 0FB5                                l4377 07EE  
                              l4385 07FA                                l4545 077D  
                              l4473 0F6A                                l4713 0EA4  
                              l4547 078B                                l4483 0F8B  
                              l5179 01CE                                l5283 0FD8  
                              l4709 0E99                                l4813 0D96  
                              l4487 0F93                                l4479 0F80  
                              l4911 0232                                l4495 0D26  
                              l4737 0E17                                l4649 0DF2  
                              l4681 0D55                                l4497 0D29  
                              l4667 060F                                l4771 06DB  
                              l4851 0481                                l4843 0471  
                              l4835 0461                                l3795 0CF4  
                              l4589 0558                                l4861 0498  
                              l4943 0278                                l4927 0251  
                              l4783 0700                                l4847 0479  
                              l4839 0469                                l4779 06F7  
                              l4891 052A                                l4883 04FE  
                              l4867 04B4                                l4981 0353  
                              l4949 02B4                                l4877 04E2  
                              l4975 0347                                l4799 0724  
                              l4985 0379                                l4897 0538  
                              l4997 03AB               _myMain_Initialization 0B31  
                      __CFG_WDTE$ON 0000                                u3245 0EE7  
                              u5215 0F6B                                u5225 0F77  
                              u5235 0F81                                _PEIE 005E  
                              u5085 0C69                                u5350 0772  
                              u5370 0788                                u5610 060B  
                              u5195 0F5F                                u6235 0276  
                              u6245 02B2                                u6335 039C  
                              u6255 0309                                u5705 0E78  
                              u5635 062E                                u5725 0E84  
                              u5735 0E90                                u5745 0E9A  
                              u5665 0D60                                u5835 0E27  
                              u5595 05F7                                u5675 0D67  
                              u6715 0182                                u6735 01AF  
                              u6665 00F3                                u6675 010B  
                              u6695 0146                                u6880 06B6  
                              u6785 01EB                                u6885 0699  
                              __CDS 002B             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0026  
                              __PIR 00A0                                _Load 00CE  
                              _Temp 003B                                _main 0F9A  
                              btemp 007E                     __end_of_WDT_Set 0BF5  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0E2D        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0CFE  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0B35                  ?_setLights_Trigger 0056  
                  ??_setPIRLED_Main 0058                               ?_main 0066  
                   __end_of___awdiv 0F9A                               _ADRES 001E  
                   ___awdiv@divisor 0056                               _T1CON 0010  
                   __end_of___lwdiv 0EAB                               i1l426 0CBD  
                   ___awdiv@counter 005A                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0C6F  
                             _Light 0077                 ??_setLights_Trigger 0057  
                  __end_of_PIR_Main 021B                    __end_of_TMR1_ISR 0C85  
                  __end_of_TMR1_Set 0BE7                               _getAD 0D19  
    __end_of_setSYSC_Initialization 0B50      getLights_Allow_Condition@allow 0056  
           __end_of_getLight_LoadGO 0B5B                    __end_of_WDT_Main 0C37  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0BB2                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0C5B  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0063  
                 getPIR_AD@channel2 005E              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 005E                      _setLights_Main 0DC9  
                    _setLights_Line 0BCB                     __initialization 0013  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0D19  
                      __end_of_main 1000                    __end_of_Fosc_Set 0B55  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 0643  
                         ??_ADC_Set 0074                              ??_main 006A  
               __end_of_Lights_Main 0D53          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0B95                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0058  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0E2D  
                            _FVRCON 009D              getLights_Status@lights 0056  
                            _PIRLED 0030                              _OSCCON 0090  
                __size_of_Load_Main 01E7                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0CCA  
            getLights_Status@status 0057              __end_of_setLights_Main 0DF9  
            __end_of_setLights_Line 0BD9        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0C04                              _Lights 0078  
                            _Timer1 0034         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 06B9  
              Load_Main@Load_Status 0060                Exception_Main@lights 005D  
                            ___wmul 0D53                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 005F  
                            _setLED 079B                              _myMain 0020  
                  ___awdiv@quotient 005C                  __size_of_Temp_Main 0003  
       __end_of_Load_Initialization 0B38     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0B3E  
                    _Lights_Control 05C0             __size_of_LedPointSelect 0012  
                         ?_CDS_Main 0070                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                     ?_setSYSC_Main 0070          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 002A  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0C26  
                     __end_of_getAD 0D35                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B75                  __size_of_getPIR_AD 0138  
                       _Lights_Main 0D35            _setLights_Initialization 0B67  
              _getMain_Lights_Count 0BA8                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0402          __end_of_set_TimeoutCleared 0B67  
               ?_LED_Initialization 0070              __end_of_Lights_Control 0643  
                           ??_getAD 0075                 _Temp_Initialization 0B3E  
                        ??_CDS_Main 0056                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0011                   __end_of_Temp_Main 0B44  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F9A  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 0065                             ?___wmul 0056  
                        ??_PIR_Main 005C                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 0050  
                        _getLoad_AD 06B9                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0B7D  
                           ?_setLED 0056             setLights_Trigger@lights 0058  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0B6E  
                        _getTemp_AD 0D78                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0DC9                             _WDT_Set 0BE7  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 053A  
           ??_setLoad_AH_AL_Restore 0074      _getLights_Allow_Condition$4605 0057  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0059  
                        getCDS_AD@j 005A                             _Lights1 0047  
                           _VarLED1 004E                             _VarLED2 0052  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0F3D                     __size_of___wmul 0025  
                           ___lwdiv 0E6B          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 0064                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0CE4  
                           __ptext2 0B31                             __ptext3 0D78  
                           __ptext4 0402                             __ptext5 06B9  
                           __ptext6 0D9F                             __ptext7 0D19  
                           __ptext8 0B61                             __ptext9 0C5B  
                        getPIR_AD@i 0064                          getPIR_AD@j 0062  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0B38             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C37  
                           clrloop0 0B8E                   __end_of_setLights 0F3D  
              end_of_initialization 0023                       _getCDS_Status 0B85  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0C49  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0B4C                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0058                  _Mcu_Initialization 0BF5  
              __end_of_my_MainTimer 0CFE                __end_of_setSYSC_Main 0EED  
            __end_of_LedPointSelect 0C49                 setPIRLED_Main@count 0059  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 0058                           _SYSC_Main 0B3B  
   getMain_All_Error_Status@command 005A                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 005C                      __end_of_IO_Set 0CE4  
        __end_of_CDS_Initialization 0B48          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0D78  
                 __size_of_PIR_Main 01F5                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 0800            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 021B                         __end_of_ISR 0CCA  
        __end_of_PIR_Initialization 0BBD        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0B61     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 05C0  
               __size_of_getLoad_AD 0071                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0B61  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
               __size_of_getTemp_AD 0027              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0B41                     setLights@lights 0057  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0075                 Exception_Main@count 005E  
                   setLights@status 0075                 Exception_Main@error 0062  
                          ??___wmul 0074    __end_of_getMain_All_LightsStatus 0B9E  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005E    __end_of_getMain_All_Error_Status 0E6B  
                       __pbssCOMMON 0076                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 0056  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0C15  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0D9F  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0C9B  
                         _getPIR_AD 0402         __size_of_LED_Initialization 0008  
                   Exception_Main@i 0060                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0058                      Load_Main@error 005F  
            _setTemp_Initialization 0B30                       _PIR_Main$3109 0062  
                          ?___awdiv 0056               __size_of_my_MainTimer 001A  
                          ?___lwdiv 0056               __size_of_setSYSC_Main 0042  
          setLights_Trigger@command 0056     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0C9B      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0B32                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005B                      _setPIRLED_Main 072A  
                          _CDS_Main 0DF9                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0B41                   interrupt_function 0004  
                        ?_getCDS_AD 0056                      ___wmul@product 0074  
                          _LED_Main 0B32                           _setLights 0EED  
                         clear_ram0 0B8D    __end_of_setLights_Initialization 0B6E  
                      _my_MainTimer 0CE4                          ?_getPIR_AD 005E  
                      _setSYSC_Main 0EAB                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                            _PIR_Main 0026  
                      ??_getLoad_AD 0056                            _TMR1_ISR 0C6F  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0B5B  
                          _TMR1_Set 0BD9                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0056                            _WDT_Main 0C26  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 0056  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 0086  
                       ??_Load_Main 005D              __end_of_setPIRLED_Main 079B  
    getMain_All_Error_Status@status 005B                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0B50                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 072A                  __end_of_getLoad_OK 0B85  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 0075                  __end_of_getTemp_AD 0D9F  
            _setSYSC_Initialization 0B4C                   getLoad_AD@channel 0058  
                 _DetectSYSC_Signal 0BBD                            _SwDetect 003A  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2327 0056  
     _getMain_All_Error_Status$2328 0058                 _Load_Initialization 0B35  
                ?_DetectSYSC_Signal 0070                           setLED@led 0057  
             ?_getLight_Load_Status 0070                        _setTemp_Main 053A  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0B44               _Lights_Initialization 0B48  
                 getTemp_AD@channel 0058                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 0056                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 005A  
                          __ptext10 0C26                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0B41  
                          __ptext21 0B85                            __ptext13 053A  
                          __ptext30 0BA8                            __ptext22 0BB2  
                          __ptext14 0B3E                            __ptext31 0B5B  
                          __ptext23 0BF5                            __ptext15 0B30  
                          __ptext40 0BCB                            __ptext32 0B55  
                          __ptext24 0BE7                            __ptext16 0B3B  
                          __ptext41 0C9B                            __ptext33 0D53  
                          __ptext25 0BD9                            __ptext17 0EAB  
                          __ptext50 0B75                            __ptext42 0B7D  
                          __ptext34 0E6B                            __ptext26 0CCA  
                          __ptext18 0B38                            __ptext51 0C49  
                          __ptext43 0B95                            __ptext35 0B35  
                          __ptext27 0B50                            __ptext19 0B4C  
                          __ptext60 0BBD                            __ptext52 0643  
                          __ptext44 05C0                            __ptext36 0C85  
                          __ptext28 0B6E                            __ptext61 0DF9  
                          __ptext53 0CFE                            __ptext45 0F3D  
                          __ptext37 0D35                            __ptext29 021B  
                          __ptext62 0B44                            __ptext54 079B  
                          __ptext46 0B48                            __ptext38 0DC9  
                          __ptext63 0CB2                            __ptext55 0C37  
                          __ptext47 0B67                            __ptext39 0EED  
                          __ptext64 0C6F                            __ptext56 0E2D  
                          __ptext48 0B32                            __ptext57 0C15  
                          __ptext49 072A                            __ptext58 0C04  
                          __ptext59 0B9E           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0B3B             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0057                       setLED@command 0056  
         __end_of_DetectSYSC_Signal 0BCB                       __size_of_main 0066  
                       ??_getPIR_AD 005F                  _PIR_Initialization 0BB2  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 0066                            main@argv 0068  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 0060  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017                         ??_setLights 0056  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0C04              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005B                         getLoad_AD@j 005A  
                       getLoad_AD@k 0059             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 0076               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 0056         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0B9E                ??_getAll_Lights_Line 0076  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0C5B          __end_of_LED_Initialization 0B7D  
             __end_of_getCDS_Status 0B8D      __end_of_setTemp_Initialization 0B31  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0B55  
                 getCDS_AD@channel1 005B                   getCDS_AD@channel2 0056  
 __end_of_getLights_Allow_Condition 0CB2                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0C85  
