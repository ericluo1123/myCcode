

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Jan 17 11:39:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002D                     _RA5	set	45
  1335  002E                     _RA6	set	46
  1336  002F                     _RA7	set	47
  1337  0032                     _RB2	set	50
  1338  0033                     _RB3	set	51
  1339  0060                     _TMR1IF	set	96
  1340  009F                     _ADCON1	set	159
  1341  009D                     _FVRCON	set	157
  1342  0090                     _OSCCON	set	144
  1343  0085                     _TRISA	set	133
  1344  0086                     _TRISB	set	134
  1345  0087                     _TRISC	set	135
  1346  0095                     _WPUB	set	149
  1347  0408                     _PS0	set	1032
  1348  0409                     _PS1	set	1033
  1349  040A                     _PS2	set	1034
  1350  040B                     _PSA	set	1035
  1351  0460                     _TMR1IE	set	1120
  1352  0185                     _ANSELA	set	389
  1353  0186                     _ANSELB	set	390
  1354                           
  1355                           	psect	text0
  1356  0000                     __ptext0:	
  1357                           ; #config settings
  1358                           
  1359                           
  1360                           ;psect for function _TMR1_ISR
  1361  0000                     
  1362                           	psect	cinit
  1363  0013                     start_initialization:	
  1364  0013                     __initialization:	
  1365                           
  1366                           ; Clear objects allocated to COMMON
  1367  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1368  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1369  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1370  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1371                           
  1372                           ; Clear objects allocated to BANK0
  1373  0017  1383               	bcf	3,7	;select IRP bank0
  1374  0018  3020               	movlw	low __pbssBANK0
  1375  0019  0084               	movwf	4
  1376  001A  304D               	movlw	low (__pbssBANK0+45)
  1377  001B  158A  22F6  118A   	fcall	clear_ram0
  1378                           
  1379                           ; Clear objects allocated to BANK1
  1380  001E  30A0               	movlw	low __pbssBANK1
  1381  001F  0084               	movwf	4
  1382  0020  30E6               	movlw	low (__pbssBANK1+70)
  1383  0021  158A  22F6         	fcall	clear_ram0
  1384  0023                     end_of_initialization:	
  1385                           ;End of C runtime variable initialization code
  1386                           
  1387  0023                     __end_of__initialization:	
  1388  0023  0183               	clrf	3
  1389  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1390                           
  1391                           	psect	bssCOMMON
  1392  0076                     __pbssCOMMON:	
  1393  0076                     _LED:	
  1394  0076                     	ds	1
  1395  0077                     _Light:	
  1396  0077                     	ds	1
  1397  0078                     _Lights:	
  1398  0078                     	ds	1
  1399  0079                     _LightsControl:	
  1400  0079                     	ds	1
  1401                           
  1402                           	psect	bssBANK0
  1403  0020                     __pbssBANK0:	
  1404  0020                     _SYSC:	
  1405  0020                     	ds	5
  1406  0025                     _myMain:	
  1407  0025                     	ds	5
  1408  002A                     _PIRLED:	
  1409  002A                     	ds	4
  1410  002E                     __CDS:	
  1411  002E                     	ds	4
  1412  0032                     _Timer1:	
  1413  0032                     	ds	3
  1414  0035                     _WDT:	
  1415  0035                     	ds	2
  1416  0037                     _Cmd:	
  1417  0037                     	ds	1
  1418  0038                     _SwDetect:	
  1419  0038                     	ds	1
  1420  0039                     _Temp:	
  1421  0039                     	ds	7
  1422  0040                     _Lights1:	
  1423  0040                     	ds	5
  1424  0045                     _VarLED1:	
  1425  0045                     	ds	4
  1426  0049                     _VarLED2:	
  1427  0049                     	ds	4
  1428                           
  1429                           	psect	bssBANK1
  1430  00A0                     __pbssBANK1:	
  1431  00A0                     __PIR:	
  1432  00A0                     	ds	42
  1433  00CA                     _Load:	
  1434  00CA                     	ds	28
  1435                           
  1436                           	psect	clrtext
  1437  0AF6                     clear_ram0:	
  1438                           ;	Called with FSR containing the base address, and
  1439                           ;	W with the last address+1
  1440                           
  1441  0AF6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1442  0AF7                     clrloop0:	
  1443  0AF7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1444  0AF8  0A84               	incf	4,f	;increment pointer
  1445  0AF9  0604               	xorwf	4,w	;XOR with final address
  1446  0AFA  1903               	btfsc	3,2	;have we reached the end yet?
  1447  0AFB  3400               	retlw	0	;all done for this memory range, return
  1448  0AFC  0604               	xorwf	4,w	;XOR again to restore value
  1449  0AFD  2AF7               	goto	clrloop0	;do the next byte
  1450                           
  1451                           	psect	cstackCOMMON
  1452  0070                     __pcstackCOMMON:	
  1453  0070                     ?_setLED_Initialization:	
  1454  0070                     ?_setPIRLED_Main:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_Fosc_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_IO_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_TMR1_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_ADC_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_WDT_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_TMR1_ISR:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ??_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_Timeout_Counter:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_set_TimeoutCleared:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_WDT_Clearing:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_myMain_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_SYSC_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Temp_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Load_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Lights_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_PIR_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_DetectSYSC_Signal:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_getLoad_AD:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getTemp_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_my_MainTimer:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_SYSC_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Temp_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Load_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Lights_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_PIR_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_Exception_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setLights_SwOn:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOff:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLoad_AH_AL_Restore:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setTemp_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setSYSC_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Main:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setLights_Initialization:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Main:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_Lights_Control:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_setLights_Line:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_CDS_Initialization:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Main:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_LedPointSelect:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LED_Initialization:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Main:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_Mcu_Initialization:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_ISR:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ??_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_WDT_Main:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_LightsPointSelect:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_getLights_Status:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getAll_Lights_Line:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getLight_LoadGO:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_Load_Status:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLights_Allow_Condition:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getCDS_Status:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getMain_All_LightsStatus:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_Error_Status:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_Lights_Count:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getLoad_OK:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     getLights_Allow_Condition@lights:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631                           
  1632                           ; 1 bytes @ 0x0
  1633  0070                     	ds	4
  1634  0074                     ??_Fosc_Set:	
  1635  0074                     ??_IO_Set:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_TMR1_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_ADC_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_WDT_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_Timeout_Counter:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_set_TimeoutCleared:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_WDT_Clearing:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_myMain_Initialization:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_SYSC_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_Temp_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_PIR_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_DetectSYSC_Signal:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_my_MainTimer:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_getAll_Lights_Line:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_setLoad_AH_AL_Restore:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_getLight_LoadGO:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_getLight_Load_Status:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_setTemp_Initialization:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setSYSC_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_setLights_Line:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_CDS_Initialization:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_getCDS_Status:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_LedPointSelect:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_WDT_Main:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_getMain_All_LightsStatus:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_All_Error_Status:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getMain_Lights_Count:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_getLoad_OK:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??_LightsPointSelect:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??___wmul:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___awdiv:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ??___lwdiv:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     ?_getAD:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0074                     getCDS_Status@status:	
  1735                           ; 1 bytes @ 0x4
  1736                           
  1737  0074                     getAD@adcon1:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getMain_All_LightsStatus@status:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getMain_Lights_Count@count:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getLoad_OK@ok:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     setLights_Line@lights:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     getAll_Lights_Line@line:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     getLight_LoadGO@loadgo:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758  0074                     getLight_Load_Status@loadstatus:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761  0074                     ___wmul@product:	
  1762                           ; 1 bytes @ 0x4
  1763                           
  1764                           
  1765                           ; 2 bytes @ 0x4
  1766  0074                     	ds	1
  1767  0075                     ??_getAD:	
  1768  0075                     ??_SYSC_Main:	
  1769                           ; 0 bytes @ 0x5
  1770                           
  1771  0075                     ??_setTemp_Main:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_setSYSC_Main:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     ??_getLights_Allow_Condition:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     ??_Mcu_Initialization:	
  1781                           ; 0 bytes @ 0x5
  1782                           
  1783  0075                     LedPointSelect@led:	
  1784                           ; 0 bytes @ 0x5
  1785                           
  1786  0075                     getAD@adcon0:	
  1787                           ; 1 bytes @ 0x5
  1788                           
  1789  0075                     getMain_Lights_Count@status1:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792  0075                     setLoad_AH_AL_Restore@i:	
  1793                           ; 1 bytes @ 0x5
  1794                           
  1795  0075                     LightsPointSelect@lights:	
  1796                           ; 1 bytes @ 0x5
  1797                           
  1798                           
  1799                           ; 1 bytes @ 0x5
  1800  0075                     	ds	1
  1801  0076                     ??_setLED_Initialization:	
  1802  0076                     ??_setLED:	
  1803                           ; 0 bytes @ 0x6
  1804                           
  1805  0076                     ??_Load_Initialization:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Lights_Initialization:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_Temp_Main:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_Lights_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_getLights_Status:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_setLights_SwOn:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_SwOff:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_Initialization:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_setLights_Main:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_LED_Initialization:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  0076                     ??_LED_Main:	
  1836                           ; 0 bytes @ 0x6
  1837                           
  1838                           
  1839                           	psect	cstackBANK0
  1840  004D                     __pcstackBANK0:	
  1841                           ; 0 bytes @ 0x6
  1842                           
  1843  004D                     ?_setLED:	
  1844  004D                     ??_getLoad_AD:	
  1845                           ; 0 bytes @ 0x0
  1846                           
  1847  004D                     ??_getTemp_AD:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  004D                     ??_CDS_Main:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  004D                     ?_getCDS_AD:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  004D                     ?_setLights_Trigger:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  004D                     ?___wmul:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  004D                     ?___awdiv:	
  1863                           ; 2 bytes @ 0x0
  1864                           
  1865  004D                     ?___lwdiv:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  004D                     getCDS_AD@channel2:	
  1869                           ; 2 bytes @ 0x0
  1870                           
  1871  004D                     setLED@command:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  004D                     setLights_Initialization@lights:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  004D                     getLights_Status@lights:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  004D                     setLights_Trigger@command:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  004D                     getLights_Allow_Condition@allow:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  004D                     _getMain_All_Error_Status$2109:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  004D                     ___wmul@multiplier:	
  1890                           ; 2 bytes @ 0x0
  1891                           
  1892  004D                     ___awdiv@divisor:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  004D                     ___lwdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x0
  1900  004D                     	ds	1
  1901  004E                     ??_getCDS_AD:	
  1902  004E                     ??_setLights_Trigger:	
  1903                           ; 0 bytes @ 0x1
  1904                           
  1905  004E                     setLED@led:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  004E                     getLights_Status@status:	
  1909                           ; 1 bytes @ 0x1
  1910                           
  1911  004E                     _getLights_Allow_Condition$4188:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x1
  1916  004E                     	ds	1
  1917  004F                     ??_setPIRLED_Main:	
  1918  004F                     ?_setLights:	
  1919                           ; 0 bytes @ 0x2
  1920                           
  1921  004F                     setLED_Initialization@led:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  004F                     getLoad_AD@channel:	
  1925                           ; 1 bytes @ 0x2
  1926                           
  1927  004F                     getTemp_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  004F                     setLights@status:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  004F                     setLights_Trigger@lights:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  004F                     _getMain_All_Error_Status$2110:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  004F                     ___wmul@multiplicand:	
  1940                           ; 2 bytes @ 0x2
  1941                           
  1942  004F                     ___awdiv@dividend:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  004F                     ___lwdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948                           
  1949                           ; 2 bytes @ 0x2
  1950  004F                     	ds	1
  1951  0050                     ??_setLights:	
  1952  0050                     getCDS_AD@i:	
  1953                           ; 0 bytes @ 0x3
  1954                           
  1955  0050                     setPIRLED_Main@count:	
  1956                           ; 1 bytes @ 0x3
  1957                           
  1958  0050                     getLoad_AD@k:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  0050                     getTemp_AD@ADRES:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  0050                     setLights_SwOn@sw:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  0050                     setLights_SwOff@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x3
  1972  0050                     	ds	1
  1973  0051                     getCDS_AD@j:	
  1974  0051                     getMain_All_Error_Status@command:	
  1975                           ; 1 bytes @ 0x4
  1976                           
  1977  0051                     getLoad_AD@j:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0051                     setLights@lights:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0051                     ___awdiv@counter:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0051                     ___lwdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989                           
  1990                           ; 1 bytes @ 0x4
  1991  0051                     	ds	1
  1992  0052                     getCDS_AD@channel1:	
  1993  0052                     getMain_All_Error_Status@status:	
  1994                           ; 1 bytes @ 0x5
  1995                           
  1996  0052                     getLoad_AD@ADRES:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0052                     setLights_Main@lights:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0052                     ___awdiv@sign:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0052                     ___lwdiv@quotient:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008                           
  2009                           ; 2 bytes @ 0x5
  2010  0052                     	ds	1
  2011  0053                     ??_PIR_Main:	
  2012  0053                     ??_Exception_Main:	
  2013                           ; 0 bytes @ 0x6
  2014                           
  2015  0053                     getLoad_AD@i:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0053                     setTemp_Main@error:	
  2019                           ; 1 bytes @ 0x6
  2020                           
  2021  0053                     ___awdiv@quotient:	
  2022                           ; 1 bytes @ 0x6
  2023                           
  2024                           
  2025                           ; 2 bytes @ 0x6
  2026  0053                     	ds	1
  2027  0054                     ??_Load_Main:	
  2028  0054                     Exception_Main@lights:	
  2029                           ; 0 bytes @ 0x7
  2030                           
  2031  0054                     setTemp_Main@TempGO:	
  2032                           ; 1 bytes @ 0x7
  2033                           
  2034                           
  2035                           ; 1 bytes @ 0x7
  2036  0054                     	ds	1
  2037  0055                     ?_getPIR_AD:	
  2038  0055                     ??_Lights_Control:	
  2039                           ; 0 bytes @ 0x8
  2040                           
  2041  0055                     Exception_Main@count:	
  2042                           ; 0 bytes @ 0x8
  2043                           
  2044  0055                     setTemp_Main@SafeValue:	
  2045                           ; 1 bytes @ 0x8
  2046                           
  2047  0055                     getPIR_AD@channel2:	
  2048                           ; 1 bytes @ 0x8
  2049                           
  2050                           
  2051                           ; 1 bytes @ 0x8
  2052  0055                     	ds	1
  2053  0056                     ??_getPIR_AD:	
  2054  0056                     Exception_Main@status:	
  2055                           ; 0 bytes @ 0x9
  2056                           
  2057  0056                     Load_Main@error:	
  2058                           ; 1 bytes @ 0x9
  2059                           
  2060  0056                     setTemp_Main@DangerValue:	
  2061                           ; 1 bytes @ 0x9
  2062                           
  2063                           
  2064                           ; 1 bytes @ 0x9
  2065  0056                     	ds	1
  2066  0057                     setTemp_Main@AD:	
  2067  0057                     Lights_Control@lights:	
  2068                           ; 1 bytes @ 0xA
  2069                           
  2070  0057                     Exception_Main@i:	
  2071                           ; 1 bytes @ 0xA
  2072                           
  2073  0057                     _Load_Main$2369:	
  2074                           ; 2 bytes @ 0xA
  2075                           
  2076                           
  2077                           ; 2 bytes @ 0xA
  2078  0057                     	ds	1
  2079  0058                     PIR_Main@error:	
  2080                           
  2081                           ; 1 bytes @ 0xB
  2082  0058                     	ds	1
  2083  0059                     Load_Main@ErrorCountValue:	
  2084  0059                     PIR_Main@Enable_Switch:	
  2085                           ; 1 bytes @ 0xC
  2086                           
  2087  0059                     getPIR_AD@j:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090  0059                     Exception_Main@i_2122:	
  2091                           ; 1 bytes @ 0xC
  2092                           
  2093                           
  2094                           ; 2 bytes @ 0xC
  2095  0059                     	ds	1
  2096  005A                     Load_Main@Load_RunStatus:	
  2097  005A                     getPIR_AD@channel1:	
  2098                           ; 1 bytes @ 0xD
  2099                           
  2100  005A                     _PIR_Main$2832:	
  2101                           ; 1 bytes @ 0xD
  2102                           
  2103                           
  2104                           ; 2 bytes @ 0xD
  2105  005A                     	ds	1
  2106  005B                     Exception_Main@error:	
  2107  005B                     Load_Main@LightsCount:	
  2108                           ; 1 bytes @ 0xE
  2109                           
  2110  005B                     getPIR_AD@VRAD1:	
  2111                           ; 1 bytes @ 0xE
  2112                           
  2113                           
  2114                           ; 1 bytes @ 0xE
  2115  005B                     	ds	1
  2116  005C                     PIR_Main@TriggerValue:	
  2117  005C                     getPIR_AD@VRAD:	
  2118                           ; 1 bytes @ 0xF
  2119                           
  2120  005C                     Load_Main@i:	
  2121                           ; 1 bytes @ 0xF
  2122                           
  2123                           
  2124                           ; 2 bytes @ 0xF
  2125  005C                     	ds	1
  2126  005D                     PIR_Main@cds:	
  2127  005D                     getPIR_AD@i:	
  2128                           ; 1 bytes @ 0x10
  2129                           
  2130                           
  2131                           ; 1 bytes @ 0x10
  2132  005D                     	ds	1
  2133  005E                     PIR_Main@LightsStatus:	
  2134                           
  2135                           ; 1 bytes @ 0x11
  2136  005E                     	ds	1
  2137  005F                     ?_main:	
  2138  005F                     main@argc:	
  2139                           ; 2 bytes @ 0x12
  2140                           
  2141                           
  2142                           ; 2 bytes @ 0x12
  2143  005F                     	ds	2
  2144  0061                     main@argv:	
  2145                           
  2146                           ; 2 bytes @ 0x14
  2147  0061                     	ds	2
  2148  0063                     ??_main:	
  2149                           
  2150                           ; 0 bytes @ 0x16
  2151  0063                     	ds	1
  2152                           
  2153                           	psect	maintext
  2154  0F9A                     __pmaintext:	
  2155 ;;
  2156 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2157 ;;
  2158 ;; *************** function _main *****************
  2159 ;; Defined at:
  2160 ;;		line 7 in file "../src/Main_B1.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  argc            2   18[BANK0 ] int 
  2163 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  2   18[BANK0 ] int 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 17F/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2175 ;;      Params:         0       4       0       0
  2176 ;;      Locals:         0       0       0       0
  2177 ;;      Temps:          0       1       0       0
  2178 ;;      Totals:         0       5       0       0
  2179 ;;Total ram usage:        5 bytes
  2180 ;; Hardware stack levels required when called:    7
  2181 ;; This function calls:
  2182 ;;		_CDS_Initialization
  2183 ;;		_CDS_Main
  2184 ;;		_DetectSYSC_Signal
  2185 ;;		_Exception_Main
  2186 ;;		_LED_Initialization
  2187 ;;		_LED_Main
  2188 ;;		_Lights_Initialization
  2189 ;;		_Lights_Main
  2190 ;;		_Load_Initialization
  2191 ;;		_Load_Main
  2192 ;;		_Mcu_Initialization
  2193 ;;		_PIR_Initialization
  2194 ;;		_PIR_Main
  2195 ;;		_SYSC_Initialization
  2196 ;;		_SYSC_Main
  2197 ;;		_Temp_Initialization
  2198 ;;		_Temp_Main
  2199 ;;		_WDT_Main
  2200 ;;		_getCDS_AD
  2201 ;;		_getLoad_AD
  2202 ;;		_getPIR_AD
  2203 ;;		_getTemp_AD
  2204 ;;		_myMain_Initialization
  2205 ;;		_my_MainTimer
  2206 ;; This function is called by:
  2207 ;;		Startup code after reset
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _main
  2213  0F9A                     _main:	
  2214                           
  2215                           ;Main_B1.c: 8: myMain_Initialization();
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2219  0F9A  118A  27FF  158A   	fcall	_myMain_Initialization
  2220                           
  2221                           ;Main_B1.c: 9: Mcu_Initialization();
  2222  0F9D  118A  27F0  158A   	fcall	_Mcu_Initialization
  2223                           
  2224                           ;Main_B1.c: 10: ;;
  2225                           ;Main_B1.c: 11: LED_Initialization();
  2226  0FA0  158A  22DE  158A   	fcall	_LED_Initialization
  2227                           
  2228                           ;Main_B1.c: 12: ;;
  2229                           ;Main_B1.c: 14: SYSC_Initialization();
  2230  0FA3  158A  22A1  158A   	fcall	_SYSC_Initialization
  2231                           
  2232                           ;Main_B1.c: 15: Temp_Initialization();
  2233  0FA6  158A  22A7  158A   	fcall	_Temp_Initialization
  2234                           
  2235                           ;Main_B1.c: 16: Load_Initialization();
  2236  0FA9  158A  229E  158A   	fcall	_Load_Initialization
  2237                           
  2238                           ;Main_B1.c: 17: ;;
  2239                           ;Main_B1.c: 18: ;;
  2240                           ;Main_B1.c: 20: ;;
  2241                           ;Main_B1.c: 21: Lights_Initialization();
  2242  0FAC  158A  22B1  158A   	fcall	_Lights_Initialization
  2243                           
  2244                           ;Main_B1.c: 22: CDS_Initialization();
  2245  0FAF  158A  22AD  158A   	fcall	_CDS_Initialization
  2246                           
  2247                           ;Main_B1.c: 23: PIR_Initialization();
  2248  0FB2  158A  2324  158A   	fcall	_PIR_Initialization
  2249  0FB5                     l5324:	
  2250                           ;Main_B1.c: 24: ;;
  2251                           ;Main_B1.c: 25: ;;
  2252                           ;Main_B1.c: 26: ;;
  2253                           ;Main_B1.c: 27: ;;
  2254                           ;Main_B1.c: 28: ;;
  2255                           ;Main_B1.c: 30: while (1) {
  2256                           
  2257                           
  2258                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2259  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2260  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2261  0FB7  1C25               	btfss	_myMain,0
  2262  0FB8  2FD8               	goto	l5336
  2263                           
  2264                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2265  0FB9  158A  232F  158A   	fcall	_DetectSYSC_Signal
  2266                           
  2267                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2268  0FBC  3001               	movlw	1
  2269  0FBD  158A  267C  158A   	fcall	_getLoad_AD
  2270                           
  2271                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2272  0FC0  3011               	movlw	17
  2273  0FC1  158A  252B  158A   	fcall	_getTemp_AD
  2274                           
  2275                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2276  0FC4  3005               	movlw	5
  2277  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2279  0FC7  00E3               	movwf	??_main
  2280  0FC8  0863               	movf	??_main,w
  2281  0FC9  00CD               	movwf	getCDS_AD@channel2
  2282  0FCA  3029               	movlw	41
  2283  0FCB  158A  24BF  158A   	fcall	_getCDS_AD
  2284                           
  2285                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2286  0FCE  3009               	movlw	9
  2287  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0FD1  00E3               	movwf	??_main
  2290  0FD2  0863               	movf	??_main,w
  2291  0FD3  00D5               	movwf	getPIR_AD@channel2
  2292  0FD4  302D               	movlw	45
  2293  0FD5  118A  2419  158A   	fcall	_getPIR_AD
  2294  0FD8                     l5336:	
  2295                           
  2296                           ;Main_B1.c: 57: }
  2297                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2298  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0FDA  1C32               	btfss	_Timer1,0
  2301  0FDB  2FB5               	goto	l5324
  2302                           
  2303                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2304  0FDC  1032               	bcf	_Timer1,0
  2305                           
  2306                           ;Main_B1.c: 96: my_MainTimer();
  2307  0FDD  158A  2450  158A   	fcall	_my_MainTimer
  2308                           
  2309                           ;Main_B1.c: 97: WDT_Main();
  2310  0FE0  158A  2378  158A   	fcall	_WDT_Main
  2311                           
  2312                           ;Main_B1.c: 98: ;;
  2313                           ;Main_B1.c: 99: ;;
  2314                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2315  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0FE5  1C25               	btfss	_myMain,0
  2318  0FE6  2FB5               	goto	l5324
  2319                           
  2320                           ;Main_B1.c: 101: ;;
  2321                           ;Main_B1.c: 103: LED_Main();
  2322  0FE7  158A  229B  158A   	fcall	_LED_Main
  2323                           
  2324                           ;Main_B1.c: 104: ;;
  2325                           ;Main_B1.c: 106: SYSC_Main();
  2326  0FEA  158A  22A4  158A   	fcall	_SYSC_Main
  2327                           
  2328                           ;Main_B1.c: 107: Temp_Main();
  2329  0FED  158A  22AA  158A   	fcall	_Temp_Main
  2330                           
  2331                           ;Main_B1.c: 108: Load_Main();
  2332  0FF0  118A  222F  158A   	fcall	_Load_Main
  2333                           
  2334                           ;Main_B1.c: 109: ;;
  2335                           ;Main_B1.c: 111: Lights_Main();
  2336  0FF3  158A  24A1  158A   	fcall	_Lights_Main
  2337                           
  2338                           ;Main_B1.c: 112: ;;
  2339                           ;Main_B1.c: 113: ;;
  2340                           ;Main_B1.c: 114: CDS_Main();
  2341  0FF6  158A  2586  158A   	fcall	_CDS_Main
  2342                           
  2343                           ;Main_B1.c: 115: PIR_Main();
  2344  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2345                           
  2346                           ;Main_B1.c: 117: ;;
  2347                           ;Main_B1.c: 118: ;;
  2348                           ;Main_B1.c: 119: ;;
  2349                           ;Main_B1.c: 120: ;;
  2350                           ;Main_B1.c: 121: Exception_Main();
  2351  0FFC  118A  2547  158A   	fcall	_Exception_Main
  2352  0FFF  2FB5               	goto	l5324
  2353  1000                     __end_of_main:	
  2354                           ;Main_B1.c: 128: }
  2355                           ;Main_B1.c: 129: }
  2356                           ;Main_B1.c: 163: }
  2357                           ;Main_B1.c: 164: return (0);
  2358                           ;	Return value of _main is never used
  2359                           
  2360                           
  2361                           	psect	text1
  2362  0C50                     __ptext1:	
  2363 ;; *************** function _my_MainTimer *****************
  2364 ;; Defined at:
  2365 ;;		line 185 in file "../src/Main_B1.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;		None               void
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2379 ;;      Params:         0       0       0       0
  2380 ;;      Locals:         0       0       0       0
  2381 ;;      Temps:          1       0       0       0
  2382 ;;      Totals:         1       0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    2
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _my_MainTimer
  2395  0C50                     _my_MainTimer:	
  2396                           
  2397                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2401  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0C52  1825               	btfsc	_myMain,0
  2404  0C53  2C60               	goto	l3866
  2405                           
  2406                           ;Main_B1.c: 188: myMain.PowerCount++;
  2407  0C54  3001               	movlw	1
  2408  0C55  00F4               	movwf	??_my_MainTimer
  2409  0C56  0874               	movf	??_my_MainTimer,w
  2410  0C57  07A6               	addwf	_myMain+1,f
  2411                           
  2412                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2413  0C58  0826               	movf	_myMain+1,w
  2414  0C59  3A4B               	xorlw	75
  2415  0C5A  1D03               	skipz
  2416  0C5B  0008               	return
  2417                           
  2418                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2419  0C5C  01A6               	clrf	_myMain+1
  2420                           
  2421                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2422  0C5D  1425               	bsf	_myMain,0
  2423                           
  2424                           ;Main_B1.c: 196: ;;
  2425                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2426  0C5E  1625               	bsf	_myMain,4
  2427                           
  2428                           ;Main_B1.c: 206: }
  2429                           ;Main_B1.c: 207: } else {
  2430  0C5F  0008               	return
  2431  0C60                     l3866:	
  2432                           
  2433                           ;Main_B1.c: 208: myMain.PowerCount++;
  2434  0C60  3001               	movlw	1
  2435  0C61  00F4               	movwf	??_my_MainTimer
  2436  0C62  0874               	movf	??_my_MainTimer,w
  2437  0C63  07A6               	addwf	_myMain+1,f
  2438                           
  2439                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2440  0C64  0826               	movf	_myMain+1,w
  2441  0C65  3A32               	xorlw	50
  2442  0C66  1D03               	skipz
  2443  0C67  0008               	return
  2444                           
  2445                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2446  0C68  01A6               	clrf	_myMain+1
  2447  0C69  0008               	return
  2448  0C6A                     __end_of_my_MainTimer:	
  2449                           
  2450                           	psect	text2
  2451  07FF                     __ptext2:	
  2452 ;; *************** function _myMain_Initialization *****************
  2453 ;; Defined at:
  2454 ;;		line 170 in file "../src/Main_B1.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;		None               void
  2461 ;; Registers used:
  2462 ;;		None
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2468 ;;      Params:         0       0       0       0
  2469 ;;      Locals:         0       0       0       0
  2470 ;;      Temps:          0       0       0       0
  2471 ;;      Totals:         0       0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    2
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           
  2483                           ;psect for function _myMain_Initialization
  2484  07FF                     _myMain_Initialization:	
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _myMain_Initialization: []
  2488  07FF  0008               	return
  2489  0800                     __end_of_myMain_Initialization:	
  2490                           
  2491                           	psect	text3
  2492  0D2B                     __ptext3:	
  2493 ;; *************** function _getTemp_AD *****************
  2494 ;; Defined at:
  2495 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  channel         1    wreg     unsigned char 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  channel         1    2[BANK0 ] unsigned char 
  2500 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2510 ;;      Params:         0       0       0       0
  2511 ;;      Locals:         0       2       0       0
  2512 ;;      Temps:          0       2       0       0
  2513 ;;      Totals:         0       4       0       0
  2514 ;;Total ram usage:        4 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    4
  2517 ;; This function calls:
  2518 ;;		_getAD
  2519 ;; This function is called by:
  2520 ;;		_main
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _getTemp_AD
  2526  0D2B                     _getTemp_AD:	
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2530                           ;getTemp_AD@channel stored from wreg
  2531  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0D2D  00CF               	movwf	getTemp_AD@channel
  2534                           
  2535                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2536  0D2E  01D0               	clrf	getTemp_AD@ADRES
  2537                           
  2538                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2539  0D2F  1D39               	btfss	_Temp,2
  2540  0D30  2D49               	goto	l4842
  2541                           
  2542                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2543  0D31  3070               	movlw	112
  2544  0D32  00CD               	movwf	??_getTemp_AD
  2545  0D33  084D               	movf	??_getTemp_AD,w
  2546  0D34  00F4               	movwf	getAD@adcon1
  2547  0D35  084F               	movf	getTemp_AD@channel,w
  2548  0D36  158A  2485  158A   	fcall	_getAD
  2549  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0D3B  00CE               	movwf	??_getTemp_AD+1
  2552  0D3C  084E               	movf	??_getTemp_AD+1,w
  2553  0D3D  00D0               	movwf	getTemp_AD@ADRES
  2554                           
  2555                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2556  0D3E  0850               	movf	getTemp_AD@ADRES,w
  2557  0D3F  1903               	btfsc	3,2
  2558  0D40  2D49               	goto	l4842
  2559                           
  2560                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2561  0D41  0850               	movf	getTemp_AD@ADRES,w
  2562  0D42  023F               	subwf	_Temp+6,w
  2563  0D43  1803               	skipnc
  2564  0D44  2D49               	goto	l4842
  2565                           
  2566                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2567  0D45  0850               	movf	getTemp_AD@ADRES,w
  2568  0D46  00CD               	movwf	??_getTemp_AD
  2569  0D47  084D               	movf	??_getTemp_AD,w
  2570  0D48  00BF               	movwf	_Temp+6
  2571  0D49                     l4842:	
  2572                           
  2573                           ;OverTemperature_B1.c: 32: }
  2574                           ;OverTemperature_B1.c: 33: }
  2575                           ;OverTemperature_B1.c: 34: }
  2576                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0x70);
  2577  0D49  3070               	movlw	112
  2578  0D4A  00CD               	movwf	??_getTemp_AD
  2579  0D4B  084D               	movf	??_getTemp_AD,w
  2580  0D4C  00F4               	movwf	getAD@adcon1
  2581  0D4D  084F               	movf	getTemp_AD@channel,w
  2582  0D4E  158A  2485         	fcall	_getAD
  2583  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0D52  00CE               	movwf	??_getTemp_AD+1
  2586  0D53  084E               	movf	??_getTemp_AD+1,w
  2587  0D54  00D0               	movwf	getTemp_AD@ADRES
  2588  0D55  0008               	return
  2589  0D56                     __end_of_getTemp_AD:	
  2590                           
  2591                           	psect	text4
  2592  0419                     __ptext4:	
  2593 ;; *************** function _getPIR_AD *****************
  2594 ;; Defined at:
  2595 ;;		line 330 in file "../src/PIR_B1.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  channel1        1    wreg     unsigned char 
  2598 ;;  channel2        1    8[BANK0 ] unsigned char 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  channel1        1   13[BANK0 ] unsigned char 
  2601 ;;  i               1   16[BANK0 ] unsigned char 
  2602 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2603 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2604 ;;  j               1   12[BANK0 ] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;		None               void
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2614 ;;      Params:         0       1       0       0
  2615 ;;      Locals:         0       5       0       0
  2616 ;;      Temps:          0       3       0       0
  2617 ;;      Totals:         0       9       0       0
  2618 ;;Total ram usage:        9 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    4
  2621 ;; This function calls:
  2622 ;;		___awdiv
  2623 ;;		___lwdiv
  2624 ;;		_getAD
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _getPIR_AD
  2632  0419                     _getPIR_AD:	
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2636                           ;getPIR_AD@channel1 stored from wreg
  2637  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2638  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2639  041B  00DA               	movwf	getPIR_AD@channel1
  2640                           
  2641                           ;PIR_B1.c: 331: char i = 0, j = 0;
  2642  041C  01DD               	clrf	getPIR_AD@i
  2643  041D  01D9               	clrf	getPIR_AD@j
  2644                           
  2645                           ;PIR_B1.c: 332: char VRAD = 0, VRAD1 = 0;
  2646  041E  01DC               	clrf	getPIR_AD@VRAD
  2647  041F  01DB               	clrf	getPIR_AD@VRAD1
  2648                           
  2649                           ;PIR_B1.c: 333: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2650  0420  1683               	bsf	3,5	;RP0=1, select bank1
  2651  0421  1303               	bcf	3,6	;RP1=0, select bank1
  2652  0422  1CA0               	btfss	__PIR^(0+128),1
  2653  0423  0008               	return
  2654  0424  1920               	btfsc	__PIR^(0+128),2
  2655  0425  0008               	return
  2656                           
  2657                           ;PIR_B1.c: 334: _PIR.GO = 1;
  2658  0426  1520               	bsf	__PIR^(0+128),2
  2659                           
  2660                           ;PIR_B1.c: 341: VRAD1 = getAD(channel1, 0x70);
  2661  0427  3070               	movlw	112
  2662  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2664  042A  00D6               	movwf	??_getPIR_AD
  2665  042B  0856               	movf	??_getPIR_AD,w
  2666  042C  00F4               	movwf	getAD@adcon1
  2667  042D  085A               	movf	getPIR_AD@channel1,w
  2668  042E  158A  2485  118A   	fcall	_getAD
  2669  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2670  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2671  0433  00D7               	movwf	??_getPIR_AD+1
  2672  0434  0857               	movf	??_getPIR_AD+1,w
  2673  0435  00DB               	movwf	getPIR_AD@VRAD1
  2674                           
  2675                           ;PIR_B1.c: 342: VRAD = VRAD1 / 25;
  2676  0436  3019               	movlw	25
  2677  0437  00CD               	movwf	___awdiv@divisor
  2678  0438  3000               	movlw	0
  2679  0439  00CE               	movwf	___awdiv@divisor+1
  2680  043A  085B               	movf	getPIR_AD@VRAD1,w
  2681  043B  00D6               	movwf	??_getPIR_AD
  2682  043C  01D7               	clrf	??_getPIR_AD+1
  2683  043D  0856               	movf	??_getPIR_AD,w
  2684  043E  00CF               	movwf	___awdiv@dividend
  2685  043F  0857               	movf	??_getPIR_AD+1,w
  2686  0440  00D0               	movwf	___awdiv@dividend+1
  2687  0441  158A  26D8  118A   	fcall	___awdiv
  2688  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0446  084D               	movf	?___awdiv,w
  2691  0447  00D8               	movwf	??_getPIR_AD+2
  2692  0448  0858               	movf	??_getPIR_AD+2,w
  2693  0449  00DC               	movwf	getPIR_AD@VRAD
  2694                           
  2695                           ;PIR_B1.c: 343: _PIR.SignalAD = getAD(channel2, 0x70);
  2696  044A  3070               	movlw	112
  2697  044B  00D6               	movwf	??_getPIR_AD
  2698  044C  0856               	movf	??_getPIR_AD,w
  2699  044D  00F4               	movwf	getAD@adcon1
  2700  044E  0855               	movf	getPIR_AD@channel2,w
  2701  044F  158A  2485  118A   	fcall	_getAD
  2702  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0454  00D7               	movwf	??_getPIR_AD+1
  2705  0455  0857               	movf	??_getPIR_AD+1,w
  2706  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2707  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2708  0458  00A1               	movwf	(__PIR^(0+128)+1)
  2709                           
  2710                           ;PIR_B1.c: 357: if (VRAD < 1) {
  2711  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2712  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2713  045B  08DC               	movf	getPIR_AD@VRAD,f
  2714  045C  1D03               	skipz
  2715  045D  2C60               	goto	l4858
  2716                           
  2717                           ;PIR_B1.c: 358: _PIR.CloseTimeValue = 5;
  2718  045E  3005               	movlw	5
  2719  045F  2C66               	goto	L1
  2720  0460                     l4858:	
  2721                           ;PIR_B1.c: 359: } else if (VRAD < 3) {
  2722                           
  2723  0460  3003               	movlw	3
  2724  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0462  025C               	subwf	getPIR_AD@VRAD,w
  2726  0463  1803               	skipnc
  2727  0464  2C6B               	goto	l4862
  2728                           
  2729                           ;PIR_B1.c: 360: _PIR.CloseTimeValue = 60;
  2730  0465  303C               	movlw	60
  2731  0466                     L1:	
  2732  0466  1683               	bsf	3,5	;RP0=1, select bank1
  2733  0467  1303               	bcf	3,6	;RP1=0, select bank1
  2734  0468  00C3               	movwf	(__PIR^(0+128)+35)
  2735  0469  3000               	movlw	0
  2736  046A  2C91               	goto	L5
  2737  046B                     l4862:	
  2738                           ;PIR_B1.c: 361: } else if (VRAD < 5) {
  2739                           
  2740  046B  3005               	movlw	5
  2741  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2742  046D  025C               	subwf	getPIR_AD@VRAD,w
  2743  046E  1803               	skipnc
  2744  046F  2C76               	goto	l4866
  2745                           
  2746                           ;PIR_B1.c: 362: _PIR.CloseTimeValue = 300;
  2747  0470  302C               	movlw	44
  2748  0471  1683               	bsf	3,5	;RP0=1, select bank1
  2749  0472  1303               	bcf	3,6	;RP1=0, select bank1
  2750  0473  00C3               	movwf	(__PIR^(0+128)+35)
  2751  0474  3001               	movlw	1
  2752  0475  2C91               	goto	L5
  2753  0476                     l4866:	
  2754                           ;PIR_B1.c: 363: } else if (VRAD < 7) {
  2755                           
  2756  0476  3007               	movlw	7
  2757  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2758  0478  025C               	subwf	getPIR_AD@VRAD,w
  2759  0479  1803               	skipnc
  2760  047A  2C81               	goto	l4870
  2761                           
  2762                           ;PIR_B1.c: 364: _PIR.CloseTimeValue = 600;
  2763  047B  3058               	movlw	88
  2764  047C  1683               	bsf	3,5	;RP0=1, select bank1
  2765  047D  1303               	bcf	3,6	;RP1=0, select bank1
  2766  047E  00C3               	movwf	(__PIR^(0+128)+35)
  2767  047F  3002               	movlw	2
  2768  0480  2C91               	goto	L5
  2769  0481                     l4870:	
  2770                           ;PIR_B1.c: 365: } else if (VRAD < 9) {
  2771                           
  2772  0481  3009               	movlw	9
  2773  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0483  025C               	subwf	getPIR_AD@VRAD,w
  2775  0484  1803               	skipnc
  2776  0485  2C8C               	goto	l4874
  2777                           
  2778                           ;PIR_B1.c: 366: _PIR.CloseTimeValue = 900;
  2779  0486  3084               	movlw	132
  2780  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2781  0488  1303               	bcf	3,6	;RP1=0, select bank1
  2782  0489  00C3               	movwf	(__PIR^(0+128)+35)
  2783  048A  3003               	movlw	3
  2784  048B  2C91               	goto	L5
  2785  048C                     l4874:	
  2786                           ;PIR_B1.c: 367: } else {
  2787                           
  2788                           
  2789                           ;PIR_B1.c: 368: _PIR.CloseTimeValue = 1200;
  2790  048C  30B0               	movlw	176
  2791  048D  1683               	bsf	3,5	;RP0=1, select bank1
  2792  048E  1303               	bcf	3,6	;RP1=0, select bank1
  2793  048F  00C3               	movwf	(__PIR^(0+128)+35)
  2794  0490  3004               	movlw	4
  2795  0491                     L5:	
  2796  0491  00C4               	movwf	(__PIR^(0+128)+36)
  2797                           
  2798                           ;PIR_B1.c: 369: }
  2799                           ;PIR_B1.c: 378: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2800  0492  0821               	movf	(__PIR^(0+128)+1),w
  2801  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2802  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2803  0495  00D6               	movwf	??_getPIR_AD
  2804  0496  1683               	bsf	3,5	;RP0=1, select bank1
  2805  0497  1303               	bcf	3,6	;RP1=0, select bank1
  2806  0498  0824               	movf	(__PIR^(0+128)+4),w
  2807  0499  3EA5               	addlw	(__PIR+5)& (0+255)
  2808  049A  0084               	movwf	4
  2809  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2810  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2811  049D  0856               	movf	??_getPIR_AD,w
  2812  049E  1383               	bcf	3,7	;select IRP bank1
  2813  049F  0080               	movwf	0
  2814                           
  2815                           ;PIR_B1.c: 379: for (i = 0; i < 10; i++) {
  2816  04A0  01DD               	clrf	getPIR_AD@i
  2817  04A1  300A               	movlw	10
  2818  04A2  025D               	subwf	getPIR_AD@i,w
  2819  04A3  1803               	btfsc	3,0
  2820  04A4  2CC1               	goto	l4890
  2821  04A5                     l4884:	
  2822                           
  2823                           ;PIR_B1.c: 380: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2824  04A5  085D               	movf	getPIR_AD@i,w
  2825  04A6  3EA5               	addlw	(__PIR+5)& (0+255)
  2826  04A7  0084               	movwf	4
  2827  04A8  0800               	movf	0,w
  2828  04A9  00D6               	movwf	??_getPIR_AD
  2829  04AA  01D7               	clrf	??_getPIR_AD+1
  2830  04AB  0856               	movf	??_getPIR_AD,w
  2831  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2832  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2833  04AE  07AF               	addwf	(__PIR^(0+128)+15),f
  2834  04AF  1803               	skipnc
  2835  04B0  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2836  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2837  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2838  04B3  0857               	movf	??_getPIR_AD+1,w
  2839  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  2840  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  2841  04B6  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2842  04B7  3001               	movlw	1
  2843  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2844  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2845  04BA  00D6               	movwf	??_getPIR_AD
  2846  04BB  0856               	movf	??_getPIR_AD,w
  2847  04BC  07DD               	addwf	getPIR_AD@i,f
  2848  04BD  300A               	movlw	10
  2849  04BE  025D               	subwf	getPIR_AD@i,w
  2850  04BF  1C03               	skipc
  2851  04C0  2CA5               	goto	l4884
  2852  04C1                     l4890:	
  2853                           
  2854                           ;PIR_B1.c: 381: }
  2855                           ;PIR_B1.c: 382: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2856  04C1  300A               	movlw	10
  2857  04C2  00CD               	movwf	___lwdiv@divisor
  2858  04C3  3000               	movlw	0
  2859  04C4  00CE               	movwf	___lwdiv@divisor+1
  2860  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2861  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  2862  04C7  0830               	movf	((__PIR+1)^(0+128)+15),w
  2863  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2864  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2865  04CA  01D0               	clrf	___lwdiv@dividend+1
  2866  04CB  07D0               	addwf	___lwdiv@dividend+1,f
  2867  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2868  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2869  04CE  082F               	movf	(__PIR^(0+128)+15),w
  2870  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2871  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2872  04D1  01CF               	clrf	___lwdiv@dividend
  2873  04D2  07CF               	addwf	___lwdiv@dividend,f
  2874  04D3  158A  25F8  118A   	fcall	___lwdiv
  2875  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2876  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2877  04D8  084D               	movf	?___lwdiv,w
  2878  04D9  00D6               	movwf	??_getPIR_AD
  2879  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2880  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2881  04DC  0831               	movf	(__PIR^(0+128)+17),w
  2882  04DD  3EB2               	addlw	(__PIR+18)& (0+255)
  2883  04DE  0084               	movwf	4
  2884  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2885  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2886  04E1  0856               	movf	??_getPIR_AD,w
  2887  04E2  1383               	bcf	3,7	;select IRP bank1
  2888  04E3  0080               	movwf	0
  2889                           
  2890                           ;PIR_B1.c: 383: _PIR.TenAverageValue = 0;
  2891  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2892  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2893  04E6  01AF               	clrf	(__PIR^(0+128)+15)
  2894  04E7  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2895                           
  2896                           ;PIR_B1.c: 385: for (i = 0; i <= 9; i++) {
  2897  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2898  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2899  04EA  01DD               	clrf	getPIR_AD@i
  2900  04EB  300A               	movlw	10
  2901  04EC  025D               	subwf	getPIR_AD@i,w
  2902  04ED  1803               	btfsc	3,0
  2903  04EE  2D0B               	goto	l4906
  2904  04EF                     l4900:	
  2905                           
  2906                           ;PIR_B1.c: 386: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2907  04EF  085D               	movf	getPIR_AD@i,w
  2908  04F0  3EB2               	addlw	(__PIR+18)& (0+255)
  2909  04F1  0084               	movwf	4
  2910  04F2  0800               	movf	0,w
  2911  04F3  00D6               	movwf	??_getPIR_AD
  2912  04F4  01D7               	clrf	??_getPIR_AD+1
  2913  04F5  0856               	movf	??_getPIR_AD,w
  2914  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  2915  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  2916  04F8  07BC               	addwf	(__PIR^(0+128)+28),f
  2917  04F9  1803               	skipnc
  2918  04FA  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2919  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2920  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2921  04FD  0857               	movf	??_getPIR_AD+1,w
  2922  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  2923  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  2924  0500  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2925  0501  3001               	movlw	1
  2926  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2928  0504  00D6               	movwf	??_getPIR_AD
  2929  0505  0856               	movf	??_getPIR_AD,w
  2930  0506  07DD               	addwf	getPIR_AD@i,f
  2931  0507  300A               	movlw	10
  2932  0508  025D               	subwf	getPIR_AD@i,w
  2933  0509  1C03               	skipc
  2934  050A  2CEF               	goto	l4900
  2935  050B                     l4906:	
  2936                           
  2937                           ;PIR_B1.c: 387: }
  2938                           ;PIR_B1.c: 388: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2939  050B  300A               	movlw	10
  2940  050C  00CD               	movwf	___lwdiv@divisor
  2941  050D  3000               	movlw	0
  2942  050E  00CE               	movwf	___lwdiv@divisor+1
  2943  050F  1683               	bsf	3,5	;RP0=1, select bank1
  2944  0510  1303               	bcf	3,6	;RP1=0, select bank1
  2945  0511  083D               	movf	((__PIR+1)^(0+128)+28),w
  2946  0512  1283               	bcf	3,5	;RP0=0, select bank0
  2947  0513  1303               	bcf	3,6	;RP1=0, select bank0
  2948  0514  01D0               	clrf	___lwdiv@dividend+1
  2949  0515  07D0               	addwf	___lwdiv@dividend+1,f
  2950  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2951  0517  1303               	bcf	3,6	;RP1=0, select bank1
  2952  0518  083C               	movf	(__PIR^(0+128)+28),w
  2953  0519  1283               	bcf	3,5	;RP0=0, select bank0
  2954  051A  1303               	bcf	3,6	;RP1=0, select bank0
  2955  051B  01CF               	clrf	___lwdiv@dividend
  2956  051C  07CF               	addwf	___lwdiv@dividend,f
  2957  051D  158A  25F8  118A   	fcall	___lwdiv
  2958  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2960  0522  084D               	movf	?___lwdiv,w
  2961  0523  00D6               	movwf	??_getPIR_AD
  2962  0524  0856               	movf	??_getPIR_AD,w
  2963  0525  1683               	bsf	3,5	;RP0=1, select bank1
  2964  0526  1303               	bcf	3,6	;RP1=0, select bank1
  2965  0527  00A3               	movwf	(__PIR^(0+128)+3)
  2966                           
  2967                           ;PIR_B1.c: 389: _PIR.HundredAverageValue = 0;
  2968  0528  01BC               	clrf	(__PIR^(0+128)+28)
  2969  0529  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2970                           
  2971                           ;PIR_B1.c: 391: if (_PIR.TenCount < 10) {
  2972  052A  300A               	movlw	10
  2973  052B  0224               	subwf	(__PIR^(0+128)+4),w
  2974  052C  1803               	skipnc
  2975  052D  2D37               	goto	l4914
  2976                           
  2977                           ;PIR_B1.c: 392: _PIR.TenCount++;
  2978  052E  3001               	movlw	1
  2979  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0531  00D6               	movwf	??_getPIR_AD
  2982  0532  0856               	movf	??_getPIR_AD,w
  2983  0533  1683               	bsf	3,5	;RP0=1, select bank1
  2984  0534  1303               	bcf	3,6	;RP1=0, select bank1
  2985  0535  07A4               	addwf	(__PIR^(0+128)+4),f
  2986                           
  2987                           ;PIR_B1.c: 393: } else {
  2988  0536  0008               	return
  2989  0537                     l4914:	
  2990                           
  2991                           ;PIR_B1.c: 394: _PIR.TenCount = 0;
  2992  0537  01A4               	clrf	(__PIR^(0+128)+4)
  2993                           
  2994                           ;PIR_B1.c: 395: if (_PIR.HundreCount < 10)
  2995  0538  300A               	movlw	10
  2996  0539  0231               	subwf	(__PIR^(0+128)+17),w
  2997  053A  1803               	skipnc
  2998  053B  2D45               	goto	l4920
  2999                           
  3000                           ;PIR_B1.c: 396: _PIR.HundreCount++;
  3001  053C  3001               	movlw	1
  3002  053D  1283               	bcf	3,5	;RP0=0, select bank0
  3003  053E  1303               	bcf	3,6	;RP1=0, select bank0
  3004  053F  00D6               	movwf	??_getPIR_AD
  3005  0540  0856               	movf	??_getPIR_AD,w
  3006  0541  1683               	bsf	3,5	;RP0=1, select bank1
  3007  0542  1303               	bcf	3,6	;RP1=0, select bank1
  3008  0543  07B1               	addwf	(__PIR^(0+128)+17),f
  3009  0544  0008               	return
  3010  0545                     l4920:	
  3011                           
  3012                           ;PIR_B1.c: 397: else
  3013                           ;PIR_B1.c: 398: _PIR.HundreCount = 0;
  3014  0545  01B1               	clrf	(__PIR^(0+128)+17)
  3015  0546  0008               	return
  3016  0547                     __end_of_getPIR_AD:	
  3017                           
  3018                           	psect	text5
  3019  0E7C                     __ptext5:	
  3020 ;; *************** function _getLoad_AD *****************
  3021 ;; Defined at:
  3022 ;;		line 15 in file "../src/OverLoad_B1.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  channel         1    wreg     unsigned char 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  channel         1    2[BANK0 ] unsigned char 
  3027 ;;  i               1    6[BANK0 ] unsigned char 
  3028 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3029 ;;  j               1    4[BANK0 ] unsigned char 
  3030 ;;  k               1    3[BANK0 ] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;		None               void
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3040 ;;      Params:         0       0       0       0
  3041 ;;      Locals:         0       5       0       0
  3042 ;;      Temps:          0       2       0       0
  3043 ;;      Totals:         0       7       0       0
  3044 ;;Total ram usage:        7 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    4
  3047 ;; This function calls:
  3048 ;;		_getAD
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _getLoad_AD
  3056  0E7C                     _getLoad_AD:	
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3060                           ;getLoad_AD@channel stored from wreg
  3061  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0E7E  00CF               	movwf	getLoad_AD@channel
  3064                           
  3065                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3066  0E7F  01D3               	clrf	getLoad_AD@i
  3067  0E80  01D1               	clrf	getLoad_AD@j
  3068  0E81  01D0               	clrf	getLoad_AD@k
  3069                           
  3070                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3071  0E82  01D2               	clrf	getLoad_AD@ADRES
  3072                           
  3073                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3074  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  3075  0E84  1303               	bcf	3,6	;RP1=0, select bank1
  3076  0E85  1E4A               	btfss	_Load^(0+128),4
  3077  0E86  0008               	return
  3078                           
  3079                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3080  0E87  3073               	movlw	115
  3081  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0E8A  00CD               	movwf	??_getLoad_AD
  3084  0E8B  084D               	movf	??_getLoad_AD,w
  3085  0E8C  00F4               	movwf	getAD@adcon1
  3086  0E8D  084F               	movf	getLoad_AD@channel,w
  3087  0E8E  158A  2485  158A   	fcall	_getAD
  3088  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0E93  00CE               	movwf	??_getLoad_AD+1
  3091  0E94  084E               	movf	??_getLoad_AD+1,w
  3092  0E95  00D2               	movwf	getLoad_AD@ADRES
  3093                           
  3094                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3095  0E96  01D3               	clrf	getLoad_AD@i
  3096  0E97  3004               	movlw	4
  3097  0E98  0253               	subwf	getLoad_AD@i,w
  3098  0E99  1803               	btfsc	3,0
  3099  0E9A  2EB7               	goto	l4810
  3100  0E9B                     l4798:	
  3101                           
  3102                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3103  0E9B  0853               	movf	getLoad_AD@i,w
  3104  0E9C  3ED4               	addlw	(_Load+10)& (0+255)
  3105  0E9D  0084               	movwf	4
  3106  0E9E  0852               	movf	getLoad_AD@ADRES,w
  3107  0E9F  1383               	bcf	3,7	;select IRP bank1
  3108  0EA0  0200               	subwf	0,w
  3109  0EA1  1803               	skipnc
  3110  0EA2  2EAF               	goto	l4806
  3111  0EA3  08D1               	movf	getLoad_AD@j,f
  3112  0EA4  1D03               	skipz
  3113  0EA5  2EAF               	goto	l4806
  3114                           
  3115                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3116  0EA6  0852               	movf	getLoad_AD@ADRES,w
  3117  0EA7  00CD               	movwf	??_getLoad_AD
  3118  0EA8  0853               	movf	getLoad_AD@i,w
  3119  0EA9  3ED4               	addlw	(_Load+10)& (0+255)
  3120  0EAA  0084               	movwf	4
  3121  0EAB  084D               	movf	??_getLoad_AD,w
  3122  0EAC  0080               	movwf	0
  3123                           
  3124                           ;OverLoad_B1.c: 24: j = 1;
  3125  0EAD  01D1               	clrf	getLoad_AD@j
  3126  0EAE  0AD1               	incf	getLoad_AD@j,f
  3127  0EAF                     l4806:	
  3128  0EAF  3001               	movlw	1
  3129  0EB0  00CD               	movwf	??_getLoad_AD
  3130  0EB1  084D               	movf	??_getLoad_AD,w
  3131  0EB2  07D3               	addwf	getLoad_AD@i,f
  3132  0EB3  3004               	movlw	4
  3133  0EB4  0253               	subwf	getLoad_AD@i,w
  3134  0EB5  1C03               	skipc
  3135  0EB6  2E9B               	goto	l4798
  3136  0EB7                     l4810:	
  3137                           
  3138                           ;OverLoad_B1.c: 25: }
  3139                           ;OverLoad_B1.c: 26: }
  3140                           ;OverLoad_B1.c: 27: if (j == 0) {
  3141  0EB7  08D1               	movf	getLoad_AD@j,f
  3142  0EB8  1D03               	skipz
  3143  0EB9  0008               	return
  3144                           
  3145                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3146  0EBA  01D3               	clrf	getLoad_AD@i
  3147  0EBB                     L6:	
  3148  0EBB  3004               	movlw	4
  3149  0EBC  0253               	subwf	getLoad_AD@i,w
  3150  0EBD  1803               	btfsc	3,0
  3151  0EBE  0008               	return
  3152                           
  3153                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3154  0EBF  0853               	movf	getLoad_AD@i,w
  3155  0EC0  3ED9               	addlw	(_Load+15)& (0+255)
  3156  0EC1  0084               	movwf	4
  3157  0EC2  1383               	bcf	3,7	;select IRP bank1
  3158  0EC3  0800               	movf	0,w
  3159  0EC4  0252               	subwf	getLoad_AD@ADRES,w
  3160  0EC5  1803               	skipnc
  3161  0EC6  2ED3               	goto	l4826
  3162  0EC7  08D0               	movf	getLoad_AD@k,f
  3163  0EC8  1D03               	skipz
  3164  0EC9  2ED3               	goto	l4826
  3165                           
  3166                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3167  0ECA  0852               	movf	getLoad_AD@ADRES,w
  3168  0ECB  00CD               	movwf	??_getLoad_AD
  3169  0ECC  0853               	movf	getLoad_AD@i,w
  3170  0ECD  3ED9               	addlw	(_Load+15)& (0+255)
  3171  0ECE  0084               	movwf	4
  3172  0ECF  084D               	movf	??_getLoad_AD,w
  3173  0ED0  0080               	movwf	0
  3174                           
  3175                           ;OverLoad_B1.c: 31: k = 1;
  3176  0ED1  01D0               	clrf	getLoad_AD@k
  3177  0ED2  0AD0               	incf	getLoad_AD@k,f
  3178  0ED3                     l4826:	
  3179  0ED3  3001               	movlw	1
  3180  0ED4  00CD               	movwf	??_getLoad_AD
  3181  0ED5  084D               	movf	??_getLoad_AD,w
  3182  0ED6  07D3               	addwf	getLoad_AD@i,f
  3183  0ED7  2EBB               	goto	L6
  3184  0ED8                     __end_of_getLoad_AD:	
  3185                           
  3186                           	psect	text6
  3187  0CBF                     __ptext6:	
  3188 ;; *************** function _getCDS_AD *****************
  3189 ;; Defined at:
  3190 ;;		line 48 in file "../src/CDS_B1.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  channel1        1    wreg     unsigned char 
  3193 ;;  channel2        1    0[BANK0 ] unsigned char 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  channel1        1    5[BANK0 ] unsigned char 
  3196 ;;  j               1    4[BANK0 ] unsigned char 
  3197 ;;  i               1    3[BANK0 ] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3207 ;;      Params:         0       1       0       0
  3208 ;;      Locals:         0       3       0       0
  3209 ;;      Temps:          0       2       0       0
  3210 ;;      Totals:         0       6       0       0
  3211 ;;Total ram usage:        6 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    4
  3214 ;; This function calls:
  3215 ;;		_getAD
  3216 ;; This function is called by:
  3217 ;;		_main
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _getCDS_AD
  3223  0CBF                     _getCDS_AD:	
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3227                           ;getCDS_AD@channel1 stored from wreg
  3228  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0CC1  00D2               	movwf	getCDS_AD@channel1
  3231                           
  3232                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3233  0CC2  01D0               	clrf	getCDS_AD@i
  3234  0CC3  01D1               	clrf	getCDS_AD@j
  3235                           
  3236                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3237  0CC4  1DAE               	btfss	__CDS,3
  3238  0CC5  0008               	return
  3239                           
  3240                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3241  0CC6  14AE               	bsf	__CDS,1
  3242                           
  3243                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3244  0CC7  3070               	movlw	112
  3245  0CC8  00CE               	movwf	??_getCDS_AD
  3246  0CC9  084E               	movf	??_getCDS_AD,w
  3247  0CCA  00F4               	movwf	getAD@adcon1
  3248  0CCB  0852               	movf	getCDS_AD@channel1,w
  3249  0CCC  158A  2485  158A   	fcall	_getAD
  3250  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0CD1  00CF               	movwf	??_getCDS_AD+1
  3253  0CD2  084F               	movf	??_getCDS_AD+1,w
  3254  0CD3  00B0               	movwf	__CDS+2
  3255                           
  3256                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3257  0CD4  3070               	movlw	112
  3258  0CD5  00CE               	movwf	??_getCDS_AD
  3259  0CD6  084E               	movf	??_getCDS_AD,w
  3260  0CD7  00F4               	movwf	getAD@adcon1
  3261  0CD8  084D               	movf	getCDS_AD@channel2,w
  3262  0CD9  158A  2485         	fcall	_getAD
  3263  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  3265  0CDD  00CF               	movwf	??_getCDS_AD+1
  3266  0CDE  084F               	movf	??_getCDS_AD+1,w
  3267  0CDF  00B1               	movwf	__CDS+3
  3268  0CE0  0008               	return
  3269  0CE1                     __end_of_getCDS_AD:	
  3270                           
  3271                           	psect	text7
  3272  0C85                     __ptext7:	
  3273 ;; *************** function _getAD *****************
  3274 ;; Defined at:
  3275 ;;		line 432 in file "../src/MCU_B1.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  adcon0          1    wreg     unsigned char 
  3278 ;;  adcon1          1    4[COMMON] unsigned char 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  adcon0          1    5[COMMON] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      unsigned char 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0, pclath, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3290 ;;      Params:         1       0       0       0
  3291 ;;      Locals:         1       0       0       0
  3292 ;;      Temps:          0       0       0       0
  3293 ;;      Totals:         2       0       0       0
  3294 ;;Total ram usage:        2 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    3
  3297 ;; This function calls:
  3298 ;;		_Timeout_Counter
  3299 ;;		_set_TimeoutCleared
  3300 ;; This function is called by:
  3301 ;;		_getCDS_AD
  3302 ;;		_getLoad_AD
  3303 ;;		_getTemp_AD
  3304 ;;		_getPIR_AD
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function _getAD
  3310  0C85                     _getAD:	
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3314                           ;getAD@adcon0 stored from wreg
  3315  0C85  00F5               	movwf	getAD@adcon0
  3316                           
  3317                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3318  0C86  0875               	movf	getAD@adcon0,w
  3319  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0C89  009F               	movwf	31	;volatile
  3322                           
  3323                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3324  0C8A  0874               	movf	getAD@adcon1,w
  3325  0C8B  1683               	bsf	3,5	;RP0=1, select bank1
  3326  0C8C  1303               	bcf	3,6	;RP1=0, select bank1
  3327  0C8D  009F               	movwf	31	;volatile
  3328                           
  3329                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3330  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0C90  149F               	bsf	31,1	;volatile
  3333                           
  3334                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3335  0C91  2C95               	goto	l4590
  3336  0C92                     l4588:	
  3337                           
  3338                           ;MCU_B1.c: 437: Timeout_Counter();
  3339  0C92  158A  23AD  158A   	fcall	_Timeout_Counter
  3340  0C95                     l4590:	
  3341  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  3342  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  3343  0C97  1C9F               	btfss	31,1	;volatile
  3344  0C98  2C9B               	goto	l4594
  3345  0C99  1D27               	btfss	_myMain+2,2
  3346  0C9A  2C92               	goto	l4588
  3347  0C9B                     l4594:	
  3348                           
  3349                           ;MCU_B1.c: 438: };
  3350                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3351  0C9B  158A  22CA         	fcall	_set_TimeoutCleared
  3352                           
  3353                           ;MCU_B1.c: 440: return ADRES;
  3354  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  3355  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  3356  0C9F  081E               	movf	30,w	;volatile
  3357  0CA0  0008               	return
  3358  0CA1                     __end_of_getAD:	
  3359                           
  3360                           	psect	text8
  3361  0ACA                     __ptext8:	
  3362 ;; *************** function _set_TimeoutCleared *****************
  3363 ;; Defined at:
  3364 ;;		line 281 in file "../src/Main_B1.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		status,2
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3378 ;;      Params:         0       0       0       0
  3379 ;;      Locals:         0       0       0       0
  3380 ;;      Temps:          0       0       0       0
  3381 ;;      Totals:         0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    2
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_getAD
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _set_TimeoutCleared
  3394  0ACA                     _set_TimeoutCleared:	
  3395                           
  3396                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _set_TimeoutCleared: [status,2]
  3400  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  3401  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  3402  0ACC  1127               	bcf	_myMain+2,2
  3403                           
  3404                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3405  0ACD  01A8               	clrf	_myMain+3
  3406  0ACE  01A9               	clrf	_myMain+4
  3407  0ACF  0008               	return
  3408  0AD0                     __end_of_set_TimeoutCleared:	
  3409                           
  3410                           	psect	text9
  3411  0BAD                     __ptext9:	
  3412 ;; *************** function _Timeout_Counter *****************
  3413 ;; Defined at:
  3414 ;;		line 272 in file "../src/Main_B1.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;		None               void
  3421 ;; Registers used:
  3422 ;;		wreg, status,2
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3428 ;;      Params:         0       0       0       0
  3429 ;;      Locals:         0       0       0       0
  3430 ;;      Temps:          0       0       0       0
  3431 ;;      Totals:         0       0       0       0
  3432 ;;Total ram usage:        0 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    2
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_getAD
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           
  3443                           ;psect for function _Timeout_Counter
  3444  0BAD                     _Timeout_Counter:	
  3445                           
  3446                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3450  0BAD  3001               	movlw	1
  3451  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0BB0  07A8               	addwf	_myMain+3,f
  3454  0BB1  1803               	skipnc
  3455  0BB2  0AA9               	incf	_myMain+4,f
  3456  0BB3  3000               	movlw	0
  3457  0BB4  07A9               	addwf	_myMain+4,f
  3458                           
  3459                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3460  0BB5  3061               	movlw	97
  3461  0BB6  0629               	xorwf	_myMain+4,w
  3462  0BB7  1D03               	skipz
  3463  0BB8  2BBB               	goto	u5115
  3464  0BB9  30A8               	movlw	168
  3465  0BBA  0628               	xorwf	_myMain+3,w
  3466  0BBB                     u5115:	
  3467  0BBB  1D03               	skipz
  3468  0BBC  0008               	return
  3469                           
  3470                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3471  0BBD  01A8               	clrf	_myMain+3
  3472  0BBE  01A9               	clrf	_myMain+4
  3473                           
  3474                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3475  0BBF  1527               	bsf	_myMain+2,2
  3476  0BC0  0008               	return
  3477  0BC1                     __end_of_Timeout_Counter:	
  3478                           
  3479                           	psect	text10
  3480  0B78                     __ptext10:	
  3481 ;; *************** function _WDT_Main *****************
  3482 ;; Defined at:
  3483 ;;		line 1103 in file "../src/MCU_B1.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;		None               void
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0, pclath, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3497 ;;      Params:         0       0       0       0
  3498 ;;      Locals:         0       0       0       0
  3499 ;;      Temps:          1       0       0       0
  3500 ;;      Totals:         1       0       0       0
  3501 ;;Total ram usage:        1 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    3
  3504 ;; This function calls:
  3505 ;;		_WDT_Clearing
  3506 ;; This function is called by:
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function _WDT_Main
  3513  0B78                     _WDT_Main:	
  3514                           
  3515                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3519  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0B7A  1C35               	btfss	_WDT,0
  3522  0B7B  0008               	return
  3523                           
  3524                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3525  0B7C  3001               	movlw	1
  3526  0B7D  02B6               	subwf	_WDT+1,f
  3527  0B7E  0836               	movf	_WDT+1,w
  3528  0B7F  3AFF               	xorlw	255
  3529  0B80  1903               	skipnz
  3530  0B81  0008               	return
  3531                           
  3532                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3533  0B82  3064               	movlw	100
  3534  0B83  00F4               	movwf	??_WDT_Main
  3535  0B84  0874               	movf	??_WDT_Main,w
  3536  0B85  00B6               	movwf	_WDT+1
  3537                           
  3538                           ;MCU_B1.c: 1107: WDT_Clearing();
  3539  0B86  118A  2002         	fcall	_WDT_Clearing
  3540  0B88  0008               	return
  3541  0B89                     __end_of_WDT_Main:	
  3542                           
  3543                           	psect	text11
  3544  0002                     __ptext11:	
  3545 ;; *************** function _WDT_Clearing *****************
  3546 ;; Defined at:
  3547 ;;		line 1113 in file "../src/MCU_B1.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;		None               void
  3554 ;; Registers used:
  3555 ;;		None
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3561 ;;      Params:         0       0       0       0
  3562 ;;      Locals:         0       0       0       0
  3563 ;;      Temps:          0       0       0       0
  3564 ;;      Totals:         0       0       0       0
  3565 ;;Total ram usage:        0 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_WDT_Main
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function _WDT_Clearing
  3577  0002                     _WDT_Clearing:	
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _WDT_Clearing: []
  3581  0002  0064               	clrwdt	;# 
  3582  0003  0008               	return
  3583  0004                     __end_of_WDT_Clearing:	
  3584                           
  3585                           	psect	text12
  3586  0AAA                     __ptext12:	
  3587 ;; *************** function _Temp_Main *****************
  3588 ;; Defined at:
  3589 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, status,2, status,0, pclath, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3603 ;;      Params:         0       0       0       0
  3604 ;;      Locals:         0       0       0       0
  3605 ;;      Temps:          0       0       0       0
  3606 ;;      Totals:         0       0       0       0
  3607 ;;Total ram usage:        0 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		_setTemp_Main
  3612 ;; This function is called by:
  3613 ;;		_main
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           
  3618                           ;psect for function _Temp_Main
  3619  0AAA                     _Temp_Main:	
  3620                           
  3621                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3622                           
  3623                           ;incstack = 0
  3624                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3625  0AAA  118A  270B         	fcall	_setTemp_Main
  3626  0AAC  0008               	return
  3627  0AAD                     __end_of_Temp_Main:	
  3628                           
  3629                           	psect	text13
  3630  070B                     __ptext13:	
  3631 ;; *************** function _setTemp_Main *****************
  3632 ;; Defined at:
  3633 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  AD              1   10[BANK0 ] unsigned char 
  3638 ;;  DangerValue     1    9[BANK0 ] unsigned char 
  3639 ;;  SafeValue       1    8[BANK0 ] unsigned char 
  3640 ;;  TempGO          1    7[BANK0 ] unsigned char 
  3641 ;;  error           1    6[BANK0 ] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;		None               void
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3651 ;;      Params:         0       0       0       0
  3652 ;;      Locals:         0       5       0       0
  3653 ;;      Temps:          1       0       0       0
  3654 ;;      Totals:         1       5       0       0
  3655 ;;Total ram usage:        6 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    3
  3658 ;; This function calls:
  3659 ;;		_getMain_All_Error_Status
  3660 ;;		_getMain_All_LightsStatus
  3661 ;; This function is called by:
  3662 ;;		_Temp_Main
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _setTemp_Main
  3668  070B                     _setTemp_Main:	
  3669                           
  3670                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3674  070B  3000               	movlw	0
  3675  070C  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  3676  070F  00F5               	movwf	??_setTemp_Main
  3677  0710  0875               	movf	??_setTemp_Main,w
  3678  0711  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0712  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0713  00D3               	movwf	setTemp_Main@error
  3681                           
  3682                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3683  0714  01D5               	clrf	setTemp_Main@SafeValue
  3684  0715  01D6               	clrf	setTemp_Main@DangerValue
  3685                           
  3686                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3687  0716  158A  2307  118A   	fcall	_getMain_All_LightsStatus
  3688  0719  00F5               	movwf	??_setTemp_Main
  3689  071A  0875               	movf	??_setTemp_Main,w
  3690  071B  1283               	bcf	3,5	;RP0=0, select bank0
  3691  071C  1303               	bcf	3,6	;RP1=0, select bank0
  3692  071D  00D4               	movwf	setTemp_Main@TempGO
  3693                           
  3694                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3695  071E  1C39               	btfss	_Temp,0
  3696  071F  2F7B               	goto	l820
  3697                           
  3698                           ;OverTemperature_B1.c: 70: if (TempGO == 1) {
  3699  0720  0854               	movf	setTemp_Main@TempGO,w
  3700  0721  3A01               	xorlw	1
  3701  0722  1D03               	skipz
  3702  0723  0008               	return
  3703                           
  3704                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3705  0724  1939               	btfsc	_Temp,2
  3706  0725  2F37               	goto	l3498
  3707                           
  3708                           ;OverTemperature_B1.c: 78: Temp.Time++;
  3709  0726  3001               	movlw	1
  3710  0727  07BA               	addwf	_Temp+1,f
  3711  0728  1803               	skipnc
  3712  0729  0ABB               	incf	_Temp+2,f
  3713  072A  3000               	movlw	0
  3714  072B  07BB               	addwf	_Temp+2,f
  3715                           
  3716                           ;OverTemperature_B1.c: 79: if (Temp.Time >= (5000 / 20)) {
  3717  072C  3000               	movlw	0
  3718  072D  023B               	subwf	_Temp+2,w
  3719  072E  30FA               	movlw	250
  3720  072F  1903               	skipnz
  3721  0730  023A               	subwf	_Temp+1,w
  3722  0731  1C03               	skipc
  3723  0732  0008               	return
  3724                           
  3725                           ;OverTemperature_B1.c: 80: Temp.Time = 0;
  3726  0733  01BA               	clrf	_Temp+1
  3727  0734  01BB               	clrf	_Temp+2
  3728                           
  3729                           ;OverTemperature_B1.c: 81: Temp.ADtoGO = 1;
  3730  0735  1539               	bsf	_Temp,2
  3731                           
  3732                           ;OverTemperature_B1.c: 82: }
  3733                           ;OverTemperature_B1.c: 83: } else {
  3734  0736  0008               	return
  3735  0737                     l3498:	
  3736                           
  3737                           ;OverTemperature_B1.c: 84: Temp.Time++;
  3738  0737  3001               	movlw	1
  3739  0738  07BA               	addwf	_Temp+1,f
  3740  0739  1803               	skipnc
  3741  073A  0ABB               	incf	_Temp+2,f
  3742  073B  3000               	movlw	0
  3743  073C  07BB               	addwf	_Temp+2,f
  3744                           
  3745                           ;OverTemperature_B1.c: 85: if (Temp.Time >= (100 / 20)) {
  3746  073D  3000               	movlw	0
  3747  073E  023B               	subwf	_Temp+2,w
  3748  073F  3005               	movlw	5
  3749  0740  1903               	skipnz
  3750  0741  023A               	subwf	_Temp+1,w
  3751  0742  1C03               	skipc
  3752  0743  0008               	return
  3753                           
  3754                           ;OverTemperature_B1.c: 86: Temp.Time = 0;
  3755  0744  01BA               	clrf	_Temp+1
  3756  0745  01BB               	clrf	_Temp+2
  3757                           
  3758                           ;OverTemperature_B1.c: 91: if (Temp.ADV > 0) {
  3759  0746  083F               	movf	_Temp+6,w
  3760  0747  1903               	btfsc	3,2
  3761  0748  2F77               	goto	l826
  3762                           
  3763                           ;OverTemperature_B1.c: 92: Temp.ADtoGO = 0;
  3764  0749  1139               	bcf	_Temp,2
  3765                           
  3766                           ;OverTemperature_B1.c: 93: AD = Temp.ADV;
  3767  074A  083F               	movf	_Temp+6,w
  3768  074B  00F5               	movwf	??_setTemp_Main
  3769  074C  0875               	movf	??_setTemp_Main,w
  3770  074D  00D7               	movwf	setTemp_Main@AD
  3771                           
  3772                           ;OverTemperature_B1.c: 102: SafeValue = 0x85;
  3773  074E  3085               	movlw	133
  3774  074F  00F5               	movwf	??_setTemp_Main
  3775  0750  0875               	movf	??_setTemp_Main,w
  3776  0751  00D5               	movwf	setTemp_Main@SafeValue
  3777                           
  3778                           ;OverTemperature_B1.c: 103: DangerValue = 0x75;
  3779  0752  3075               	movlw	117
  3780  0753  00F5               	movwf	??_setTemp_Main
  3781  0754  0875               	movf	??_setTemp_Main,w
  3782  0755  00D6               	movwf	setTemp_Main@DangerValue
  3783                           
  3784                           ;OverTemperature_B1.c: 115: if (Temp.ERROR == 1) {
  3785  0756  1CB9               	btfss	_Temp,1
  3786  0757  2F67               	goto	l3522
  3787                           
  3788                           ;OverTemperature_B1.c: 116: if (AD >= SafeValue) {
  3789  0758  0855               	movf	setTemp_Main@SafeValue,w
  3790  0759  0257               	subwf	setTemp_Main@AD,w
  3791  075A  1C03               	skipc
  3792  075B  2F76               	goto	l3532
  3793                           
  3794                           ;OverTemperature_B1.c: 117: Temp.Count++;
  3795  075C  3001               	movlw	1
  3796  075D  00F5               	movwf	??_setTemp_Main
  3797  075E  0875               	movf	??_setTemp_Main,w
  3798  075F  07BC               	addwf	_Temp+3,f
  3799                           
  3800                           ;OverTemperature_B1.c: 118: if (Temp.Count >= 3) {
  3801  0760  3003               	movlw	3
  3802  0761  023C               	subwf	_Temp+3,w
  3803  0762  1C03               	skipc
  3804  0763  2F77               	goto	l826
  3805                           
  3806                           ;OverTemperature_B1.c: 119: Temp.Count = 0;
  3807  0764  01BC               	clrf	_Temp+3
  3808                           
  3809                           ;OverTemperature_B1.c: 120: Temp.ERROR = 0;
  3810  0765  10B9               	bcf	_Temp,1
  3811                           
  3812                           ;OverTemperature_B1.c: 122: }
  3813                           ;OverTemperature_B1.c: 123: } else {
  3814                           
  3815                           ;OverTemperature_B1.c: 121: ;;
  3816  0766  2F77               	goto	l826
  3817  0767                     l3522:	
  3818                           ;OverTemperature_B1.c: 125: }
  3819                           ;OverTemperature_B1.c: 126: } else {
  3820                           
  3821                           ;OverTemperature_B1.c: 124: Temp.Count = 0;
  3822                           
  3823                           
  3824                           ;OverTemperature_B1.c: 127: if (AD <= DangerValue) {
  3825  0767  0857               	movf	setTemp_Main@AD,w
  3826  0768  0256               	subwf	setTemp_Main@DangerValue,w
  3827  0769  1C03               	skipc
  3828  076A  2F76               	goto	l3532
  3829                           
  3830                           ;OverTemperature_B1.c: 128: Temp.Count++;
  3831  076B  3001               	movlw	1
  3832  076C  00F5               	movwf	??_setTemp_Main
  3833  076D  0875               	movf	??_setTemp_Main,w
  3834  076E  07BC               	addwf	_Temp+3,f
  3835                           
  3836                           ;OverTemperature_B1.c: 129: if (Temp.Count >= 3) {
  3837  076F  3003               	movlw	3
  3838  0770  023C               	subwf	_Temp+3,w
  3839  0771  1C03               	skipc
  3840  0772  2F77               	goto	l826
  3841                           
  3842                           ;OverTemperature_B1.c: 130: Temp.Count = 0;
  3843  0773  01BC               	clrf	_Temp+3
  3844                           
  3845                           ;OverTemperature_B1.c: 131: Temp.ERROR = 1;
  3846  0774  14B9               	bsf	_Temp,1
  3847                           
  3848                           ;OverTemperature_B1.c: 132: }
  3849                           ;OverTemperature_B1.c: 133: } else {
  3850  0775  2F77               	goto	l826
  3851  0776                     l3532:	
  3852                           
  3853                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3854  0776  01BC               	clrf	_Temp+3
  3855  0777                     l826:	
  3856                           ;OverTemperature_B1.c: 135: }
  3857                           ;OverTemperature_B1.c: 136: }
  3858                           ;OverTemperature_B1.c: 137: ;;
  3859                           ;OverTemperature_B1.c: 138: ;;
  3860                           
  3861                           
  3862                           ;OverTemperature_B1.c: 154: }
  3863                           ;OverTemperature_B1.c: 155: Temp.ADH[0] = 0;
  3864  0777  01BD               	clrf	_Temp+4
  3865                           
  3866                           ;OverTemperature_B1.c: 156: Temp.ADH[1] = 0;
  3867  0778  01BE               	clrf	_Temp+5
  3868                           
  3869                           ;OverTemperature_B1.c: 157: Temp.ADV = 0;
  3870  0779  01BF               	clrf	_Temp+6
  3871                           
  3872                           ;OverTemperature_B1.c: 158: }
  3873                           ;OverTemperature_B1.c: 159: }
  3874                           ;OverTemperature_B1.c: 161: }
  3875                           ;OverTemperature_B1.c: 162: } else {
  3876  077A  0008               	return
  3877  077B                     l820:	
  3878                           
  3879                           ;OverTemperature_B1.c: 163: if (myMain.PowerON == 1) {
  3880  077B  1C25               	btfss	_myMain,0
  3881  077C  0008               	return
  3882                           
  3883                           ;OverTemperature_B1.c: 164: Temp.Enable = 1;
  3884  077D  1439               	bsf	_Temp,0
  3885  077E  0008               	return
  3886  077F                     __end_of_setTemp_Main:	
  3887                           
  3888                           	psect	text14
  3889  0AA7                     __ptext14:	
  3890 ;; *************** function _Temp_Initialization *****************
  3891 ;; Defined at:
  3892 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;		None               void
  3899 ;; Registers used:
  3900 ;;		status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3906 ;;      Params:         0       0       0       0
  3907 ;;      Locals:         0       0       0       0
  3908 ;;      Temps:          0       0       0       0
  3909 ;;      Totals:         0       0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    3
  3913 ;; This function calls:
  3914 ;;		_setTemp_Initialization
  3915 ;; This function is called by:
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _Temp_Initialization
  3922  0AA7                     _Temp_Initialization:	
  3923                           
  3924                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3928  0AA7  158A  229A         	fcall	_setTemp_Initialization
  3929  0AA9  0008               	return
  3930  0AAA                     __end_of_Temp_Initialization:	
  3931                           
  3932                           	psect	text15
  3933  0A9A                     __ptext15:	
  3934 ;; *************** function _setTemp_Initialization *****************
  3935 ;; Defined at:
  3936 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		None
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3950 ;;      Params:         0       0       0       0
  3951 ;;      Locals:         0       0       0       0
  3952 ;;      Temps:          0       0       0       0
  3953 ;;      Totals:         0       0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_Temp_Initialization
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _setTemp_Initialization
  3966  0A9A                     _setTemp_Initialization:	
  3967                           
  3968                           ;incstack = 0
  3969                           ; Regs used in _setTemp_Initialization: []
  3970  0A9A  0008               	return
  3971  0A9B                     __end_of_setTemp_Initialization:	
  3972                           
  3973                           	psect	text16
  3974  0AA4                     __ptext16:	
  3975 ;; *************** function _SYSC_Main *****************
  3976 ;; Defined at:
  3977 ;;		line 17 in file "../src/SYSC_B1.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, pclath, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3991 ;;      Params:         0       0       0       0
  3992 ;;      Locals:         0       0       0       0
  3993 ;;      Temps:          0       0       0       0
  3994 ;;      Totals:         0       0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    4
  3998 ;; This function calls:
  3999 ;;		_setSYSC_Main
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _SYSC_Main
  4007  0AA4                     _SYSC_Main:	
  4008                           
  4009                           ;SYSC_B1.c: 19: setSYSC_Main();
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4013  0AA4  158A  2638         	fcall	_setSYSC_Main
  4014  0AA6  0008               	return
  4015  0AA7                     __end_of_SYSC_Main:	
  4016                           
  4017                           	psect	text17
  4018  0E38                     __ptext17:	
  4019 ;; *************** function _setSYSC_Main *****************
  4020 ;; Defined at:
  4021 ;;		line 23 in file "../src/SYSC_B1.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;		None               void
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4035 ;;      Params:         0       0       0       0
  4036 ;;      Locals:         0       0       0       0
  4037 ;;      Temps:          0       0       0       0
  4038 ;;      Totals:         0       0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    3
  4042 ;; This function calls:
  4043 ;;		_getMain_All_Error_Status
  4044 ;; This function is called by:
  4045 ;;		_SYSC_Main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _setSYSC_Main
  4051  0E38                     _setSYSC_Main:	
  4052                           
  4053                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4057  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4059  0E3A  1C20               	btfss	_SYSC,0
  4060  0E3B  0008               	return
  4061                           
  4062                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4063  0E3C  18A0               	btfsc	_SYSC,1
  4064  0E3D  2E4F               	goto	l3548
  4065                           
  4066                           ;SYSC_B1.c: 27: SYSC.Time++;
  4067  0E3E  3001               	movlw	1
  4068  0E3F  07A1               	addwf	_SYSC+1,f
  4069  0E40  1803               	skipnc
  4070  0E41  0AA2               	incf	_SYSC+2,f
  4071  0E42  3000               	movlw	0
  4072  0E43  07A2               	addwf	_SYSC+2,f
  4073                           
  4074                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4075  0E44  3000               	movlw	0
  4076  0E45  0222               	subwf	_SYSC+2,w
  4077  0E46  3019               	movlw	25
  4078  0E47  1903               	skipnz
  4079  0E48  0221               	subwf	_SYSC+1,w
  4080  0E49  1C03               	skipc
  4081  0E4A  0008               	return
  4082                           
  4083                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4084  0E4B  01A1               	clrf	_SYSC+1
  4085  0E4C  01A2               	clrf	_SYSC+2
  4086                           
  4087                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4088  0E4D  14A0               	bsf	_SYSC,1
  4089                           
  4090                           ;SYSC_B1.c: 31: }
  4091                           ;SYSC_B1.c: 32: } else {
  4092  0E4E  0008               	return
  4093  0E4F                     l3548:	
  4094                           
  4095                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4096  0E4F  3001               	movlw	1
  4097  0E50  158A  25BA  158A   	fcall	_getMain_All_Error_Status
  4098  0E53  3800               	iorlw	0
  4099  0E54  1D03               	skipz
  4100  0E55  0008               	return
  4101                           
  4102                           ;SYSC_B1.c: 34: SYSC.Time++;
  4103  0E56  3001               	movlw	1
  4104  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  4105  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  4106  0E59  07A1               	addwf	_SYSC+1,f
  4107  0E5A  1803               	skipnc
  4108  0E5B  0AA2               	incf	_SYSC+2,f
  4109  0E5C  3000               	movlw	0
  4110  0E5D  07A2               	addwf	_SYSC+2,f
  4111                           
  4112                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4113  0E5E  3000               	movlw	0
  4114  0E5F  0222               	subwf	_SYSC+2,w
  4115  0E60  3019               	movlw	25
  4116  0E61  1903               	skipnz
  4117  0E62  0221               	subwf	_SYSC+1,w
  4118  0E63  1C03               	skipc
  4119  0E64  2E6A               	goto	l3554
  4120                           
  4121                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4122  0E65  01A1               	clrf	_SYSC+1
  4123  0E66  01A2               	clrf	_SYSC+2
  4124                           
  4125                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4126  0E67  01A3               	clrf	_SYSC+3
  4127  0E68  01A4               	clrf	_SYSC+4
  4128                           
  4129                           ;SYSC_B1.c: 38: } else {
  4130  0E69  0008               	return
  4131  0E6A                     l3554:	
  4132                           
  4133                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4134  0E6A  3001               	movlw	1
  4135  0E6B  07A3               	addwf	_SYSC+3,f
  4136  0E6C  1803               	skipnc
  4137  0E6D  0AA4               	incf	_SYSC+4,f
  4138  0E6E  3000               	movlw	0
  4139  0E6F  07A4               	addwf	_SYSC+4,f
  4140                           
  4141                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4142  0E70  3001               	movlw	1
  4143  0E71  0624               	xorwf	_SYSC+4,w
  4144  0E72  1D03               	skipz
  4145  0E73  2E76               	goto	u3325
  4146  0E74  30F4               	movlw	244
  4147  0E75  0623               	xorwf	_SYSC+3,w
  4148  0E76                     u3325:	
  4149  0E76  1D03               	skipz
  4150  0E77  0008               	return
  4151                           
  4152                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4153  0E78  01A3               	clrf	_SYSC+3
  4154  0E79  01A4               	clrf	_SYSC+4
  4155                           
  4156                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4157  0E7A  10A0               	bcf	_SYSC,1
  4158  0E7B  0008               	return
  4159  0E7C                     __end_of_setSYSC_Main:	
  4160                           
  4161                           	psect	text18
  4162  0AA1                     __ptext18:	
  4163 ;; *************** function _SYSC_Initialization *****************
  4164 ;; Defined at:
  4165 ;;		line 7 in file "../src/SYSC_B1.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4179 ;;      Params:         0       0       0       0
  4180 ;;      Locals:         0       0       0       0
  4181 ;;      Temps:          0       0       0       0
  4182 ;;      Totals:         0       0       0       0
  4183 ;;Total ram usage:        0 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    3
  4186 ;; This function calls:
  4187 ;;		_setSYSC_Initialization
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _SYSC_Initialization
  4195  0AA1                     _SYSC_Initialization:	
  4196                           
  4197                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4201  0AA1  158A  22B5         	fcall	_setSYSC_Initialization
  4202  0AA3  0008               	return
  4203  0AA4                     __end_of_SYSC_Initialization:	
  4204                           
  4205                           	psect	text19
  4206  0AB5                     __ptext19:	
  4207 ;; *************** function _setSYSC_Initialization *****************
  4208 ;; Defined at:
  4209 ;;		line 13 in file "../src/SYSC_B1.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		None
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4223 ;;      Params:         0       0       0       0
  4224 ;;      Locals:         0       0       0       0
  4225 ;;      Temps:          0       0       0       0
  4226 ;;      Totals:         0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    2
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_SYSC_Initialization
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _setSYSC_Initialization
  4239  0AB5                     _setSYSC_Initialization:	
  4240                           
  4241                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _setSYSC_Initialization: []
  4245  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  4246  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  4247  0AB7  1420               	bsf	_SYSC,0
  4248  0AB8  0008               	return
  4249  0AB9                     __end_of_setSYSC_Initialization:	
  4250                           
  4251                           	psect	text20
  4252  0026                     __ptext20:	
  4253 ;; *************** function _PIR_Main *****************
  4254 ;; Defined at:
  4255 ;;		line 13 in file "../src/PIR_B1.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4260 ;;  cds             1   16[BANK0 ] unsigned char 
  4261 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  4262 ;;  Enable_Switc    1   12[BANK0 ] unsigned char 
  4263 ;;  error           1   11[BANK0 ] unsigned char 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;		None               void
  4266 ;; Registers used:
  4267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4273 ;;      Params:         0       0       0       0
  4274 ;;      Locals:         0       7       0       0
  4275 ;;      Temps:          0       5       0       0
  4276 ;;      Totals:         0      12       0       0
  4277 ;;Total ram usage:       12 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    5
  4280 ;; This function calls:
  4281 ;;		_getCDS_Status
  4282 ;;		_getLights_Status
  4283 ;;		_getMain_All_Error_Status
  4284 ;;		_setLED
  4285 ;;		_setLights_SwOff
  4286 ;;		_setLights_SwOn
  4287 ;; This function is called by:
  4288 ;;		_main
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function _PIR_Main
  4294  0026                     _PIR_Main:	
  4295                           
  4296                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4300  0026  3000               	movlw	0
  4301  0027  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  4302  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4303  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4304  002C  00D3               	movwf	??_PIR_Main
  4305  002D  0853               	movf	??_PIR_Main,w
  4306  002E  00D8               	movwf	PIR_Main@error
  4307                           
  4308                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4309  002F  158A  22EE  118A   	fcall	_getCDS_Status
  4310  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0034  00D3               	movwf	??_PIR_Main
  4313  0035  0853               	movf	??_PIR_Main,w
  4314  0036  00DD               	movwf	PIR_Main@cds
  4315                           
  4316                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4317  0037  01DE               	clrf	PIR_Main@LightsStatus
  4318                           
  4319                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4320  0038  01D9               	clrf	PIR_Main@Enable_Switch
  4321  0039  0AD9               	incf	PIR_Main@Enable_Switch,f
  4322                           
  4323                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4324  003A  01DC               	clrf	PIR_Main@TriggerValue
  4325                           
  4326                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4327  003B  3001               	movlw	1
  4328  003C  158A  2367  118A   	fcall	_getLights_Status
  4329  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4331  0041  00D3               	movwf	??_PIR_Main
  4332  0042  0853               	movf	??_PIR_Main,w
  4333  0043  00DE               	movwf	PIR_Main@LightsStatus
  4334                           
  4335                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4336  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4337  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4338  0046  1C20               	btfss	__PIR^(0+128),0
  4339  0047  2A11               	goto	l893
  4340                           
  4341                           ;PIR_B1.c: 36: if (error == 0) {
  4342  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4343  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4344  004A  08D8               	movf	PIR_Main@error,f
  4345  004B  1D03               	skipz
  4346  004C  288B               	goto	l894
  4347                           
  4348                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4349  004D  085D               	movf	PIR_Main@cds,w
  4350  004E  3A01               	xorlw	1
  4351  004F  1D03               	skipz
  4352  0050  2859               	goto	l895
  4353  0051  0859               	movf	PIR_Main@Enable_Switch,w
  4354  0052  3A01               	xorlw	1
  4355  0053  1D03               	skipz
  4356  0054  2859               	goto	l895
  4357                           
  4358                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4359  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4360  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4361  0057  17A0               	bsf	__PIR^(0+128),7
  4362                           
  4363                           ;PIR_B1.c: 40: } else {
  4364  0058  287B               	goto	l5110
  4365  0059                     l895:	
  4366                           
  4367                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4368  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4369  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4370  005B  13A0               	bcf	__PIR^(0+128),7
  4371                           
  4372                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4373  005C  1DA0               	btfss	__PIR^(0+128),3
  4374  005D  287B               	goto	l5110
  4375                           
  4376                           ;PIR_B1.c: 44: setLED(1, 0);
  4377  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4378  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4379  0060  01CD               	clrf	setLED@command
  4380  0061  3001               	movlw	1
  4381  0062  158A  2735  118A   	fcall	_setLED
  4382                           
  4383                           ;PIR_B1.c: 45: setLED(2, 0);
  4384  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4386  0067  01CD               	clrf	setLED@command
  4387  0068  3002               	movlw	2
  4388  0069  158A  2735  118A   	fcall	_setLED
  4389                           
  4390                           ;PIR_B1.c: 47: if (getLights_Status(1) == 1) {
  4391  006C  3001               	movlw	1
  4392  006D  158A  2367  118A   	fcall	_getLights_Status
  4393  0070  3A01               	xorlw	1
  4394  0071  1D03               	skipz
  4395  0072  287B               	goto	l5110
  4396                           
  4397                           ;PIR_B1.c: 48: setLights_SwOn(1);
  4398  0073  3001               	movlw	1
  4399  0074  158A  24E1  118A   	fcall	_setLights_SwOn
  4400                           
  4401                           ;PIR_B1.c: 49: setLights_SwOff(1);
  4402  0077  3001               	movlw	1
  4403  0078  158A  241C  118A   	fcall	_setLights_SwOff
  4404  007B                     l5110:	
  4405                           
  4406                           ;PIR_B1.c: 51: }
  4407                           ;PIR_B1.c: 62: }
  4408                           ;PIR_B1.c: 63: }
  4409                           ;PIR_B1.c: 67: if (_PIR.Detect == 0) {
  4410  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4411  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4412  007D  1A20               	btfsc	__PIR^(0+128),4
  4413  007E  2891               	goto	l901
  4414                           
  4415                           ;PIR_B1.c: 68: _PIR.Detect = 1;
  4416  007F  1620               	bsf	__PIR^(0+128),4
  4417                           
  4418                           ;PIR_B1.c: 70: if (_PIR.OK == 0) {
  4419  0080  19A0               	btfsc	__PIR^(0+128),3
  4420  0081  2891               	goto	l901
  4421                           
  4422                           ;PIR_B1.c: 71: setLED(1, 1);
  4423  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0084  01CD               	clrf	setLED@command
  4426  0085  0ACD               	incf	setLED@command,f
  4427  0086  3001               	movlw	1
  4428  0087  158A  2735  118A   	fcall	_setLED
  4429                           
  4430                           ;PIR_B1.c: 72: }
  4431                           ;PIR_B1.c: 74: }
  4432                           ;PIR_B1.c: 75: } else {
  4433  008A  2891               	goto	l901
  4434  008B                     l894:	
  4435                           
  4436                           ;PIR_B1.c: 76: if (_PIR.Detect == 1) {
  4437  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4438  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4439  008D  1E20               	btfss	__PIR^(0+128),4
  4440  008E  2891               	goto	l901
  4441                           
  4442                           ;PIR_B1.c: 77: _PIR.Detect = 0;
  4443  008F  1220               	bcf	__PIR^(0+128),4
  4444                           
  4445                           ;PIR_B1.c: 78: _PIR.Available = 0;
  4446  0090  13A0               	bcf	__PIR^(0+128),7
  4447  0091                     l901:	
  4448                           
  4449                           ;PIR_B1.c: 96: }
  4450                           ;PIR_B1.c: 97: }
  4451                           ;PIR_B1.c: 99: if (_PIR.ADtoGO == 0) {
  4452  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4453  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4454  0093  18A0               	btfsc	__PIR^(0+128),1
  4455  0094  28A4               	goto	l903
  4456                           
  4457                           ;PIR_B1.c: 100: _PIR.Time++;
  4458  0095  3001               	movlw	1
  4459  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4460  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4461  0098  00D3               	movwf	??_PIR_Main
  4462  0099  0853               	movf	??_PIR_Main,w
  4463  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4464  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4465  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4466                           
  4467                           ;PIR_B1.c: 101: if (_PIR.Time == (100 / 20)) {
  4468  009D  0822               	movf	(__PIR^(0+128)+2),w
  4469  009E  3A05               	xorlw	5
  4470  009F  1D03               	skipz
  4471  00A0  29B1               	goto	l5198
  4472                           
  4473                           ;PIR_B1.c: 102: _PIR.Time = 0;
  4474  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4475                           
  4476                           ;PIR_B1.c: 103: _PIR.ADtoGO = 1;
  4477  00A2  14A0               	bsf	__PIR^(0+128),1
  4478                           
  4479                           ;PIR_B1.c: 104: }
  4480                           ;PIR_B1.c: 105: } else {
  4481  00A3  29B1               	goto	l5198
  4482  00A4                     l903:	
  4483                           
  4484                           ;PIR_B1.c: 106: if (_PIR.GO == 1) {
  4485  00A4  1D20               	btfss	__PIR^(0+128),2
  4486  00A5  29B1               	goto	l5198
  4487                           
  4488                           ;PIR_B1.c: 107: _PIR.GO = 0;
  4489  00A6  1120               	bcf	__PIR^(0+128),2
  4490                           
  4491                           ;PIR_B1.c: 108: _PIR.ADtoGO = 0;
  4492  00A7  10A0               	bcf	__PIR^(0+128),1
  4493                           
  4494                           ;PIR_B1.c: 109: if (_PIR.Available == 1) {
  4495  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4496                           
  4497                           ;PIR_B1.c: 110: if (_PIR.OK == 1) {
  4498  00A9  1DA0               	btfss	__PIR^(0+128),3
  4499  00AA  29B1               	goto	l5198
  4500                           
  4501                           ;PIR_B1.c: 112: _PIR.Time++;
  4502  00AB  3001               	movlw	1
  4503  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4504  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4505  00AE  00D3               	movwf	??_PIR_Main
  4506  00AF  0853               	movf	??_PIR_Main,w
  4507  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4508  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4509  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4510                           
  4511                           ;PIR_B1.c: 113: if (_PIR.Time == 60) {
  4512  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4513  00B4  3A3C               	xorlw	60
  4514  00B5  1D03               	skipz
  4515  00B6  28EB               	goto	l5166
  4516                           
  4517                           ;PIR_B1.c: 114: _PIR.Time = 0;
  4518  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4519                           
  4520                           ;PIR_B1.c: 115: if (_PIR.RangeCount >= 90) {
  4521  00B8  305A               	movlw	90
  4522  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4523  00BA  1C03               	skipc
  4524  00BB  28C7               	goto	l5148
  4525                           
  4526                           ;PIR_B1.c: 116: _PIR.RangeTime1 = 0;
  4527  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4528                           
  4529                           ;PIR_B1.c: 118: if (_PIR.RangeValue == 25) {
  4530  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4531  00BE  3A19               	xorlw	25
  4532  00BF  1903               	btfsc	3,2
  4533  00C0  28DC               	goto	L12
  4534                           
  4535                           ;PIR_B1.c: 120: } else if (_PIR.RangeValue == (25+10)) {
  4536                           
  4537                           ;PIR_B1.c: 119: _PIR.RangeValue = (25+10);
  4538  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4539  00C2  3A23               	xorlw	35
  4540  00C3  1D03               	skipz
  4541  00C4  28EA               	goto	l5164
  4542                           
  4543                           ;PIR_B1.c: 121: _PIR.RangeValue = (25+20);
  4544  00C5  302D               	movlw	45
  4545  00C6  28E3               	goto	L9
  4546  00C7                     l5148:	
  4547                           ;PIR_B1.c: 122: }
  4548                           ;PIR_B1.c: 123: } else if (_PIR.RangeCount <= 10) {
  4549                           
  4550  00C7  300B               	movlw	11
  4551  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4552  00C9  1803               	skipnc
  4553  00CA  28EA               	goto	l5164
  4554                           
  4555                           ;PIR_B1.c: 124: _PIR.RangeTime1++;
  4556  00CB  3001               	movlw	1
  4557  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4558  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4559  00CE  00D3               	movwf	??_PIR_Main
  4560  00CF  0853               	movf	??_PIR_Main,w
  4561  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4562  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4563  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4564                           
  4565                           ;PIR_B1.c: 125: if (_PIR.RangeTime1 == 2) {
  4566  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4567  00D4  3A02               	xorlw	2
  4568  00D5  1D03               	skipz
  4569  00D6  28EA               	goto	l5164
  4570                           
  4571                           ;PIR_B1.c: 126: _PIR.RangeTime1 = 0;
  4572  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4573                           
  4574                           ;PIR_B1.c: 128: if (_PIR.RangeValue == (25+20)) {
  4575  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4576  00D9  3A2D               	xorlw	45
  4577  00DA  1D03               	skipz
  4578  00DB  28DE               	goto	l5160
  4579  00DC                     L12:	
  4580                           
  4581                           ;PIR_B1.c: 129: _PIR.RangeValue = (25+10);
  4582  00DC  3023               	movlw	35
  4583  00DD  28E3               	goto	L9
  4584  00DE                     l5160:	
  4585                           ;PIR_B1.c: 130: } else if (_PIR.RangeValue == (25+10)) {
  4586                           
  4587  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4588  00DF  3A23               	xorlw	35
  4589  00E0  1D03               	skipz
  4590  00E1  28EA               	goto	l5164
  4591                           
  4592                           ;PIR_B1.c: 131: _PIR.RangeValue = 25;
  4593  00E2  3019               	movlw	25
  4594  00E3                     L9:	
  4595  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4596  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4597  00E5  00D3               	movwf	??_PIR_Main
  4598  00E6  0853               	movf	??_PIR_Main,w
  4599  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4600  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4601  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4602  00EA                     l5164:	
  4603                           
  4604                           ;PIR_B1.c: 132: }
  4605                           ;PIR_B1.c: 133: }
  4606                           ;PIR_B1.c: 134: }
  4607                           ;PIR_B1.c: 135: _PIR.RangeCount = 0;
  4608  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4609  00EB                     l5166:	
  4610                           
  4611                           ;PIR_B1.c: 136: }
  4612                           ;PIR_B1.c: 139: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4613                           ;PIR_B1.c: 140: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4614  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4615  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4616  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4617  00EE  00D3               	movwf	??_PIR_Main
  4618  00EF  01D4               	clrf	??_PIR_Main+1
  4619  00F0  09D3               	comf	??_PIR_Main,f
  4620  00F1  09D4               	comf	??_PIR_Main+1,f
  4621  00F2  0AD3               	incf	??_PIR_Main,f
  4622  00F3  1903               	skipnz
  4623  00F4  0AD4               	incf	??_PIR_Main+1,f
  4624  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4625  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4626  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4627  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4628  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4629  00FA  0753               	addwf	??_PIR_Main,w
  4630  00FB  00D5               	movwf	??_PIR_Main+2
  4631  00FC  0854               	movf	??_PIR_Main+1,w
  4632  00FD  1803               	skipnc
  4633  00FE  0A54               	incf	??_PIR_Main+1,w
  4634  00FF  00D6               	movwf	??_PIR_Main+3
  4635  0100  0856               	movf	??_PIR_Main+3,w
  4636  0101  3A80               	xorlw	128
  4637  0102  3C80               	sublw	128
  4638  0103  1D03               	skipz
  4639  0104  2909               	goto	u6625
  4640  0105  0855               	movf	??_PIR_Main+2,w
  4641  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4642  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4643  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4644  0109                     u6625:	
  4645  0109  1C03               	skipc
  4646  010A  292B               	goto	l5176
  4647  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4648  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4649  010D  0823               	movf	(__PIR^(0+128)+3),w
  4650  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4651  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4653  0111  00D3               	movwf	??_PIR_Main
  4654  0112  01D4               	clrf	??_PIR_Main+1
  4655  0113  0DD4               	rlf	??_PIR_Main+1,f
  4656  0114  0854               	movf	??_PIR_Main+1,w
  4657  0115  3A80               	xorlw	128
  4658  0116  00D5               	movwf	??_PIR_Main+2
  4659  0117  3080               	movlw	128
  4660  0118  0255               	subwf	??_PIR_Main+2,w
  4661  0119  1D03               	skipz
  4662  011A  2921               	goto	u6635
  4663  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4664  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4665  011D  0821               	movf	(__PIR^(0+128)+1),w
  4666  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4667  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4668  0120  0253               	subwf	??_PIR_Main,w
  4669  0121                     u6635:	
  4670  0121  1C03               	skipc
  4671  0122  292B               	goto	l5176
  4672                           
  4673                           ;PIR_B1.c: 142: _PIR.Count = 0;
  4674  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4675  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4676  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4677  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4678                           
  4679                           ;PIR_B1.c: 149: setLED(1, 0);
  4680  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0129  01CD               	clrf	setLED@command
  4683  012A  299A               	goto	L13
  4684  012B                     l5176:	
  4685                           ;PIR_B1.c: 152: } else {
  4686                           
  4687                           ;PIR_B1.c: 150: setLED(2, 0);
  4688                           
  4689                           
  4690                           ;PIR_B1.c: 155: _PIR.RangeCount++;
  4691  012B  3001               	movlw	1
  4692  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4693  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4694  012E  00D3               	movwf	??_PIR_Main
  4695  012F  0853               	movf	??_PIR_Main,w
  4696  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4697  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4698  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4699                           
  4700                           ;PIR_B1.c: 156: _PIR.Count++;
  4701  0133  3001               	movlw	1
  4702  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4703  0135  1803               	skipnc
  4704  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4705  0137  3000               	movlw	0
  4706  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4707                           
  4708                           ;PIR_B1.c: 158: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4709  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4710  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4711  013B  085E               	movf	PIR_Main@LightsStatus,w
  4712  013C  3A01               	xorlw	1
  4713  013D  1903               	skipnz
  4714  013E  293F               	goto	l5184
  4715  013F                     l5184:	
  4716  013F  3003               	movlw	3
  4717  0140  00DA               	movwf	_PIR_Main$2832
  4718  0141  3000               	movlw	0
  4719  0142  00DB               	movwf	_PIR_Main$2832+1
  4720  0143  085A               	movf	_PIR_Main$2832,w
  4721  0144  00D3               	movwf	??_PIR_Main
  4722  0145  0853               	movf	??_PIR_Main,w
  4723  0146  00DC               	movwf	PIR_Main@TriggerValue
  4724                           
  4725                           ;PIR_B1.c: 160: if (_PIR.Count == TriggerValue) {
  4726  0147  085C               	movf	PIR_Main@TriggerValue,w
  4727  0148  00D3               	movwf	??_PIR_Main
  4728  0149  01D4               	clrf	??_PIR_Main+1
  4729  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4730  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4731  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4732  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4733  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4734  014F  0654               	xorwf	??_PIR_Main+1,w
  4735  0150  1D03               	skipz
  4736  0151  2958               	goto	u6655
  4737  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4738  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4739  0154  083E               	movf	(__PIR^(0+128)+30),w
  4740  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4741  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4742  0157  0653               	xorwf	??_PIR_Main,w
  4743  0158                     u6655:	
  4744  0158  1D03               	skipz
  4745  0159  29B1               	goto	l5198
  4746                           
  4747                           ;PIR_B1.c: 161: _PIR.Count = 0;
  4748  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4749  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4750  015C  01BE               	clrf	(__PIR^(0+128)+30)
  4751  015D  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4752                           
  4753                           ;PIR_B1.c: 163: _PIR.CloseTimeSeconds = 0;
  4754  015E  01C2               	clrf	(__PIR^(0+128)+34)
  4755                           
  4756                           ;PIR_B1.c: 164: _PIR.CloseTimeMinutes = 0;
  4757  015F  01C0               	clrf	(__PIR^(0+128)+32)
  4758  0160  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4759                           
  4760                           ;PIR_B1.c: 170: if (getLights_Status(1) == 0) {
  4761  0161  3001               	movlw	1
  4762  0162  158A  2367  118A   	fcall	_getLights_Status
  4763  0165  3800               	iorlw	0
  4764  0166  1D03               	skipz
  4765  0167  2970               	goto	l5192
  4766                           
  4767                           ;PIR_B1.c: 171: setLights_SwOn(1);
  4768  0168  3001               	movlw	1
  4769  0169  158A  24E1  118A   	fcall	_setLights_SwOn
  4770                           
  4771                           ;PIR_B1.c: 172: setLights_SwOff(1);
  4772  016C  3001               	movlw	1
  4773  016D  158A  241C  118A   	fcall	_setLights_SwOff
  4774  0170                     l5192:	
  4775                           
  4776                           ;PIR_B1.c: 174: }
  4777                           ;PIR_B1.c: 188: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4778  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0172  0848               	movf	(__PIR^(0+128)+40),w
  4781  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4782  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4783  0175  00D3               	movwf	??_PIR_Main
  4784  0176  01D4               	clrf	??_PIR_Main+1
  4785  0177  09D3               	comf	??_PIR_Main,f
  4786  0178  09D4               	comf	??_PIR_Main+1,f
  4787  0179  0AD3               	incf	??_PIR_Main,f
  4788  017A  1903               	skipnz
  4789  017B  0AD4               	incf	??_PIR_Main+1,f
  4790  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4791  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4792  017E  0823               	movf	(__PIR^(0+128)+3),w
  4793  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4794  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4795  0181  0753               	addwf	??_PIR_Main,w
  4796  0182  00D5               	movwf	??_PIR_Main+2
  4797  0183  0854               	movf	??_PIR_Main+1,w
  4798  0184  1803               	skipnc
  4799  0185  0A54               	incf	??_PIR_Main+1,w
  4800  0186  00D6               	movwf	??_PIR_Main+3
  4801  0187  0856               	movf	??_PIR_Main+3,w
  4802  0188  3A80               	xorlw	128
  4803  0189  00D7               	movwf	??_PIR_Main+4
  4804  018A  3080               	movlw	128
  4805  018B  0257               	subwf	??_PIR_Main+4,w
  4806  018C  1D03               	skipz
  4807  018D  2994               	goto	u6675
  4808  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4809  018F  1303               	bcf	3,6	;RP1=0, select bank1
  4810  0190  0821               	movf	(__PIR^(0+128)+1),w
  4811  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4812  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4813  0193  0255               	subwf	??_PIR_Main+2,w
  4814  0194                     u6675:	
  4815  0194  1C03               	skipc
  4816  0195  29A2               	goto	l5196
  4817                           
  4818                           ;PIR_B1.c: 189: setLED(1, 1);
  4819  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4820  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4821  0198  01CD               	clrf	setLED@command
  4822  0199  0ACD               	incf	setLED@command,f
  4823  019A                     L13:	
  4824  019A  3001               	movlw	1
  4825  019B  158A  2735  118A   	fcall	_setLED
  4826                           
  4827                           ;PIR_B1.c: 190: setLED(2, 0);
  4828  019E  1283               	bcf	3,5	;RP0=0, select bank0
  4829  019F  1303               	bcf	3,6	;RP1=0, select bank0
  4830  01A0  01CD               	clrf	setLED@command
  4831  01A1  29AD               	goto	L10
  4832  01A2                     l5196:	
  4833                           ;PIR_B1.c: 191: } else {
  4834                           
  4835                           
  4836                           ;PIR_B1.c: 192: setLED(1, 0);
  4837  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4838  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4839  01A4  01CD               	clrf	setLED@command
  4840  01A5  3001               	movlw	1
  4841  01A6  158A  2735  118A   	fcall	_setLED
  4842                           
  4843                           ;PIR_B1.c: 193: setLED(2, 1);
  4844  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4845  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4846  01AB  01CD               	clrf	setLED@command
  4847  01AC  0ACD               	incf	setLED@command,f
  4848  01AD                     L10:	
  4849  01AD  3002               	movlw	2
  4850  01AE  158A  2735  118A   	fcall	_setLED
  4851  01B1                     l5198:	
  4852                           
  4853                           ;PIR_B1.c: 194: }
  4854                           ;PIR_B1.c: 234: }
  4855                           ;PIR_B1.c: 235: }
  4856                           ;PIR_B1.c: 236: }
  4857                           ;PIR_B1.c: 237: }
  4858                           ;PIR_B1.c: 238: }
  4859                           ;PIR_B1.c: 239: }
  4860                           ;PIR_B1.c: 240: if (_PIR.OK == 0) {
  4861  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4862  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4863  01B3  19A0               	btfsc	__PIR^(0+128),3
  4864  01B4  29E1               	goto	l5214
  4865                           
  4866                           ;PIR_B1.c: 241: _PIR.Count++;
  4867  01B5  3001               	movlw	1
  4868  01B6  07BE               	addwf	(__PIR^(0+128)+30),f
  4869  01B7  1803               	skipnc
  4870  01B8  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4871  01B9  3000               	movlw	0
  4872  01BA  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4873                           
  4874                           ;PIR_B1.c: 242: if (_PIR.Count == (30000 / 20)) {
  4875  01BB  3005               	movlw	5
  4876  01BC  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4877  01BD  1D03               	skipz
  4878  01BE  29C1               	goto	u6695
  4879  01BF  30DC               	movlw	220
  4880  01C0  063E               	xorwf	(__PIR^(0+128)+30),w
  4881  01C1                     u6695:	
  4882  01C1  1D03               	skipz
  4883  01C2  0008               	return
  4884                           
  4885                           ;PIR_B1.c: 243: _PIR.Count = 0;
  4886  01C3  01BE               	clrf	(__PIR^(0+128)+30)
  4887  01C4  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4888                           
  4889                           ;PIR_B1.c: 244: _PIR.OK = 1;
  4890  01C5  15A0               	bsf	__PIR^(0+128),3
  4891                           
  4892                           ;PIR_B1.c: 246: setLED(1, 0);
  4893  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  4894  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  4895  01C8  01CD               	clrf	setLED@command
  4896  01C9  3001               	movlw	1
  4897  01CA  158A  2735  118A   	fcall	_setLED
  4898                           
  4899                           ;PIR_B1.c: 248: if (cds == 0) {
  4900  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4901  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4902  01CF  08DD               	movf	PIR_Main@cds,f
  4903  01D0  1D03               	skipz
  4904  01D1  0008               	return
  4905                           
  4906                           ;PIR_B1.c: 251: if (getLights_Status(1) == 1) {
  4907  01D2  3001               	movlw	1
  4908  01D3  158A  2367  118A   	fcall	_getLights_Status
  4909  01D6  3A01               	xorlw	1
  4910  01D7  1D03               	skipz
  4911  01D8  0008               	return
  4912                           
  4913                           ;PIR_B1.c: 252: setLights_SwOn(1);
  4914  01D9  3001               	movlw	1
  4915  01DA  158A  24E1  118A   	fcall	_setLights_SwOn
  4916                           
  4917                           ;PIR_B1.c: 253: setLights_SwOff(1);
  4918  01DD  3001               	movlw	1
  4919  01DE  158A  241C         	fcall	_setLights_SwOff
  4920                           
  4921                           ;PIR_B1.c: 255: }
  4922                           ;PIR_B1.c: 267: }
  4923                           ;PIR_B1.c: 268: }
  4924                           ;PIR_B1.c: 269: } else {
  4925  01E0  0008               	return
  4926  01E1                     l5214:	
  4927                           
  4928                           ;PIR_B1.c: 270: if (LightsStatus == 1) {
  4929  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  4930  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  4931  01E3  085E               	movf	PIR_Main@LightsStatus,w
  4932  01E4  3A01               	xorlw	1
  4933  01E5  1D03               	skipz
  4934  01E6  0008               	return
  4935                           
  4936                           ;PIR_B1.c: 271: _PIR.CloseTimeSeconds++;
  4937  01E7  3001               	movlw	1
  4938  01E8  00D3               	movwf	??_PIR_Main
  4939  01E9  0853               	movf	??_PIR_Main,w
  4940  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  4941  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  4942  01EC  07C2               	addwf	(__PIR^(0+128)+34),f
  4943                           
  4944                           ;PIR_B1.c: 272: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4945  01ED  0842               	movf	(__PIR^(0+128)+34),w
  4946  01EE  3A32               	xorlw	50
  4947  01EF  1D03               	skipz
  4948  01F0  0008               	return
  4949                           
  4950                           ;PIR_B1.c: 273: _PIR.CloseTimeSeconds = 0;
  4951  01F1  01C2               	clrf	(__PIR^(0+128)+34)
  4952                           
  4953                           ;PIR_B1.c: 274: _PIR.CloseTimeMinutes++;
  4954  01F2  3001               	movlw	1
  4955  01F3  07C0               	addwf	(__PIR^(0+128)+32),f
  4956  01F4  1803               	skipnc
  4957  01F5  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4958  01F6  3000               	movlw	0
  4959  01F7  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4960                           
  4961                           ;PIR_B1.c: 275: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4962  01F8  0844               	movf	((__PIR+1)^(0+128)+35),w
  4963  01F9  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4964  01FA  1D03               	skipz
  4965  01FB  29FE               	goto	u6745
  4966  01FC  0843               	movf	(__PIR^(0+128)+35),w
  4967  01FD  0640               	xorwf	(__PIR^(0+128)+32),w
  4968  01FE                     u6745:	
  4969  01FE  1D03               	skipz
  4970  01FF  0008               	return
  4971                           
  4972                           ;PIR_B1.c: 276: _PIR.CloseTimeMinutes = 0;
  4973  0200  01C0               	clrf	(__PIR^(0+128)+32)
  4974  0201  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4975                           
  4976                           ;PIR_B1.c: 282: if (getLights_Status(1) == 1) {
  4977  0202  3001               	movlw	1
  4978  0203  158A  2367  118A   	fcall	_getLights_Status
  4979  0206  3A01               	xorlw	1
  4980  0207  1D03               	skipz
  4981  0208  0008               	return
  4982                           
  4983                           ;PIR_B1.c: 283: setLights_SwOn(1);
  4984  0209  3001               	movlw	1
  4985  020A  158A  24E1  118A   	fcall	_setLights_SwOn
  4986                           
  4987                           ;PIR_B1.c: 284: setLights_SwOff(1);
  4988  020D  3001               	movlw	1
  4989  020E  158A  241C         	fcall	_setLights_SwOff
  4990                           
  4991                           ;PIR_B1.c: 286: }
  4992                           ;PIR_B1.c: 298: }
  4993                           ;PIR_B1.c: 299: }
  4994                           ;PIR_B1.c: 300: }
  4995                           ;PIR_B1.c: 301: }
  4996                           ;PIR_B1.c: 302: } else {
  4997  0210  0008               	return
  4998  0211                     l893:	
  4999                           
  5000                           ;PIR_B1.c: 303: if (myMain.PowerON == 1) {
  5001  0211  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0212  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0213  1C25               	btfss	_myMain,0
  5004  0214  0008               	return
  5005                           
  5006                           ;PIR_B1.c: 304: _PIR.Enable = 1;
  5007  0215  1683               	bsf	3,5	;RP0=1, select bank1
  5008  0216  1303               	bcf	3,6	;RP1=0, select bank1
  5009  0217  1420               	bsf	__PIR^(0+128),0
  5010                           
  5011                           ;PIR_B1.c: 306: setLED(1, 1);
  5012  0218  1283               	bcf	3,5	;RP0=0, select bank0
  5013  0219  1303               	bcf	3,6	;RP1=0, select bank0
  5014  021A  01CD               	clrf	setLED@command
  5015  021B  0ACD               	incf	setLED@command,f
  5016  021C  3001               	movlw	1
  5017  021D  158A  2735  118A   	fcall	_setLED
  5018                           
  5019                           ;PIR_B1.c: 310: if (getLights_Status(1) == 0) {
  5020  0220  3001               	movlw	1
  5021  0221  158A  2367  118A   	fcall	_getLights_Status
  5022  0224  3800               	iorlw	0
  5023  0225  1D03               	skipz
  5024  0226  0008               	return
  5025                           
  5026                           ;PIR_B1.c: 311: setLights_SwOn(1);
  5027  0227  3001               	movlw	1
  5028  0228  158A  24E1  118A   	fcall	_setLights_SwOn
  5029                           
  5030                           ;PIR_B1.c: 312: setLights_SwOff(1);
  5031  022B  3001               	movlw	1
  5032  022C  158A  241C         	fcall	_setLights_SwOff
  5033  022E  0008               	return
  5034  022F                     __end_of_PIR_Main:	
  5035                           
  5036                           	psect	text21
  5037  0AEE                     __ptext21:	
  5038 ;; *************** function _getCDS_Status *****************
  5039 ;; Defined at:
  5040 ;;		line 42 in file "../src/CDS_B1.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;		None
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  status          1    4[COMMON] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      unsigned char 
  5047 ;; Registers used:
  5048 ;;		wreg, status,2
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5054 ;;      Params:         0       0       0       0
  5055 ;;      Locals:         1       0       0       0
  5056 ;;      Temps:          0       0       0       0
  5057 ;;      Totals:         1       0       0       0
  5058 ;;Total ram usage:        1 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    2
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		_PIR_Main
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           
  5069                           ;psect for function _getCDS_Status
  5070  0AEE                     _getCDS_Status:	
  5071                           
  5072                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5076  0AEE  3000               	movlw	0
  5077  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  5078  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  5079  0AF1  1A2E               	btfsc	__CDS,4
  5080  0AF2  3001               	movlw	1
  5081  0AF3  00F4               	movwf	getCDS_Status@status
  5082                           
  5083                           ;CDS_B1.c: 44: return status;
  5084  0AF4  0874               	movf	getCDS_Status@status,w
  5085  0AF5  0008               	return
  5086  0AF6                     __end_of_getCDS_Status:	
  5087                           
  5088                           	psect	text22
  5089  0B24                     __ptext22:	
  5090 ;; *************** function _PIR_Initialization *****************
  5091 ;; Defined at:
  5092 ;;		line 7 in file "../src/PIR_B1.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;		None               void
  5099 ;; Registers used:
  5100 ;;		wreg
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5106 ;;      Params:         0       0       0       0
  5107 ;;      Locals:         0       0       0       0
  5108 ;;      Temps:          1       0       0       0
  5109 ;;      Totals:         1       0       0       0
  5110 ;;Total ram usage:        1 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    2
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _PIR_Initialization
  5122  0B24                     _PIR_Initialization:	
  5123                           
  5124                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5125                           
  5126                           ;incstack = 0
  5127                           ; Regs used in _PIR_Initialization: [wreg]
  5128  0B24  3019               	movlw	25
  5129  0B25  00F4               	movwf	??_PIR_Initialization
  5130  0B26  0874               	movf	??_PIR_Initialization,w
  5131  0B27  1683               	bsf	3,5	;RP0=1, select bank1
  5132  0B28  1303               	bcf	3,6	;RP1=0, select bank1
  5133  0B29  00C8               	movwf	(__PIR^(0+128)+40)
  5134                           
  5135                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5136  0B2A  3005               	movlw	5
  5137  0B2B  00C3               	movwf	(__PIR^(0+128)+35)
  5138  0B2C  3000               	movlw	0
  5139  0B2D  00C4               	movwf	(__PIR^(0+128)+36)
  5140  0B2E  0008               	return
  5141  0B2F                     __end_of_PIR_Initialization:	
  5142                           
  5143                           	psect	text23
  5144  07F0                     __ptext23:	
  5145 ;; *************** function _Mcu_Initialization *****************
  5146 ;; Defined at:
  5147 ;;		line 30 in file "../src/MCU_B1.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0, pclath, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5161 ;;      Params:         0       0       0       0
  5162 ;;      Locals:         0       0       0       0
  5163 ;;      Temps:          0       0       0       0
  5164 ;;      Totals:         0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    3
  5168 ;; This function calls:
  5169 ;;		_ADC_Set
  5170 ;;		_Fosc_Set
  5171 ;;		_IO_Set
  5172 ;;		_TMR1_Set
  5173 ;;		_WDT_Set
  5174 ;; This function is called by:
  5175 ;;		_main
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           
  5180                           ;psect for function _Mcu_Initialization
  5181  07F0                     _Mcu_Initialization:	
  5182                           
  5183                           ;MCU_B1.c: 32: Fosc_Set();
  5184                           
  5185                           ;incstack = 0
  5186                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5187  07F0  158A  22B9  118A   	fcall	_Fosc_Set
  5188                           
  5189                           ;MCU_B1.c: 34: IO_Set();
  5190  07F3  158A  2436  118A   	fcall	_IO_Set
  5191                           
  5192                           ;MCU_B1.c: 36: ;;
  5193                           ;MCU_B1.c: 38: TMR1_Set();
  5194  07F6  158A  234B  118A   	fcall	_TMR1_Set
  5195                           
  5196                           ;MCU_B1.c: 40: ADC_Set();
  5197  07F9  158A  22D7  118A   	fcall	_ADC_Set
  5198                           
  5199                           ;MCU_B1.c: 42: ;;
  5200                           ;MCU_B1.c: 44: ;;
  5201                           ;MCU_B1.c: 46: ;;
  5202                           ;MCU_B1.c: 48: ;;
  5203                           ;MCU_B1.c: 50: ;;
  5204                           ;MCU_B1.c: 52: WDT_Set();
  5205  07FC  158A  2359         	fcall	_WDT_Set
  5206  07FE  0008               	return
  5207  07FF                     __end_of_Mcu_Initialization:	
  5208                           
  5209                           	psect	text24
  5210  0B59                     __ptext24:	
  5211 ;; *************** function _WDT_Set *****************
  5212 ;; Defined at:
  5213 ;;		line 1089 in file "../src/MCU_B1.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;		None               void
  5220 ;; Registers used:
  5221 ;;		wreg
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5227 ;;      Params:         0       0       0       0
  5228 ;;      Locals:         0       0       0       0
  5229 ;;      Temps:          1       0       0       0
  5230 ;;      Totals:         1       0       0       0
  5231 ;;Total ram usage:        1 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    2
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_Mcu_Initialization
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _WDT_Set
  5243  0B59                     _WDT_Set:	
  5244                           
  5245                           ;MCU_B1.c: 1091: PSA = 1;
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _WDT_Set: [wreg]
  5249  0B59  1683               	bsf	3,5	;RP0=1, select bank1
  5250  0B5A  1303               	bcf	3,6	;RP1=0, select bank1
  5251  0B5B  1581               	bsf	1,3	;volatile
  5252                           
  5253                           ;MCU_B1.c: 1092: PS0 = 1;
  5254  0B5C  1401               	bsf	1,0	;volatile
  5255                           
  5256                           ;MCU_B1.c: 1093: PS1 = 1;
  5257  0B5D  1481               	bsf	1,1	;volatile
  5258                           
  5259                           ;MCU_B1.c: 1094: PS2 = 1;
  5260  0B5E  1501               	bsf	1,2	;volatile
  5261                           
  5262                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  5263  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0B61  1435               	bsf	_WDT,0
  5266                           
  5267                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  5268  0B62  300A               	movlw	10
  5269  0B63  00F4               	movwf	??_WDT_Set
  5270  0B64  0874               	movf	??_WDT_Set,w
  5271  0B65  00B6               	movwf	_WDT+1
  5272  0B66  0008               	return
  5273  0B67                     __end_of_WDT_Set:	
  5274                           
  5275                           	psect	text25
  5276  0B4B                     __ptext25:	
  5277 ;; *************** function _TMR1_Set *****************
  5278 ;; Defined at:
  5279 ;;		line 226 in file "../src/MCU_B1.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;		None               void
  5286 ;; Registers used:
  5287 ;;		wreg
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5293 ;;      Params:         0       0       0       0
  5294 ;;      Locals:         0       0       0       0
  5295 ;;      Temps:          0       0       0       0
  5296 ;;      Totals:         0       0       0       0
  5297 ;;Total ram usage:        0 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    2
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_Mcu_Initialization
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _TMR1_Set
  5309  0B4B                     _TMR1_Set:	
  5310                           
  5311                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _TMR1_Set: [wreg]
  5315  0B4B  3041               	movlw	65
  5316  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  5318  0B4E  0090               	movwf	16	;volatile
  5319                           
  5320                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5321  0B4F  30FA               	movlw	250
  5322  0B50  008F               	movwf	15	;volatile
  5323                           
  5324                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5325  0B51  3038               	movlw	56
  5326  0B52  008E               	movwf	14	;volatile
  5327                           
  5328                           ;MCU_B1.c: 230: TMR1IE = 1;
  5329  0B53  1683               	bsf	3,5	;RP0=1, select bank1
  5330  0B54  1303               	bcf	3,6	;RP1=0, select bank1
  5331  0B55  140C               	bsf	12,0	;volatile
  5332                           
  5333                           ;MCU_B1.c: 231: PEIE = 1;
  5334  0B56  170B               	bsf	11,6	;volatile
  5335                           
  5336                           ;MCU_B1.c: 232: GIE = 1;
  5337  0B57  178B               	bsf	11,7	;volatile
  5338  0B58  0008               	return
  5339  0B59                     __end_of_TMR1_Set:	
  5340                           
  5341                           	psect	text26
  5342  0C36                     __ptext26:	
  5343 ;; *************** function _IO_Set *****************
  5344 ;; Defined at:
  5345 ;;		line 60 in file "../src/MCU_B1.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, status,2
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5359 ;;      Params:         0       0       0       0
  5360 ;;      Locals:         0       0       0       0
  5361 ;;      Temps:          0       0       0       0
  5362 ;;      Totals:         0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    2
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		_Mcu_Initialization
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _IO_Set
  5375  0C36                     _IO_Set:	
  5376                           
  5377                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in _IO_Set: [wreg+status,2]
  5381  0C36  302F               	movlw	47
  5382  0C37  1683               	bsf	3,5	;RP0=1, select bank1
  5383  0C38  1303               	bcf	3,6	;RP1=0, select bank1
  5384  0C39  0085               	movwf	5	;volatile
  5385                           
  5386                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5387  0C3A  3013               	movlw	19
  5388  0C3B  0086               	movwf	6	;volatile
  5389                           
  5390                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5391  0C3C  300C               	movlw	12
  5392  0C3D  0087               	movwf	7	;volatile
  5393                           
  5394                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5395  0C3E  300F               	movlw	15
  5396  0C3F  1683               	bsf	3,5	;RP0=1, select bank3
  5397  0C40  1703               	bsf	3,6	;RP1=1, select bank3
  5398  0C41  0085               	movwf	5	;volatile
  5399                           
  5400                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5401  0C42  3012               	movlw	18
  5402  0C43  0086               	movwf	6	;volatile
  5403                           
  5404                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5405  0C44  30AF               	movlw	175
  5406  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  5407  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  5408  0C47  0085               	movwf	5	;volatile
  5409                           
  5410                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5411  0C48  3013               	movlw	19
  5412  0C49  0086               	movwf	6	;volatile
  5413                           
  5414                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5415  0C4A  300C               	movlw	12
  5416  0C4B  0087               	movwf	7	;volatile
  5417                           
  5418                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5419  0C4C  1683               	bsf	3,5	;RP0=1, select bank1
  5420  0C4D  1303               	bcf	3,6	;RP1=0, select bank1
  5421  0C4E  0195               	clrf	21	;volatile
  5422  0C4F  0008               	return
  5423  0C50                     __end_of_IO_Set:	
  5424                           
  5425                           	psect	text27
  5426  0AB9                     __ptext27:	
  5427 ;; *************** function _Fosc_Set *****************
  5428 ;; Defined at:
  5429 ;;		line 56 in file "../src/MCU_B1.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;		None               void
  5436 ;; Registers used:
  5437 ;;		wreg
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5443 ;;      Params:         0       0       0       0
  5444 ;;      Locals:         0       0       0       0
  5445 ;;      Temps:          0       0       0       0
  5446 ;;      Totals:         0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    2
  5450 ;; This function calls:
  5451 ;;		Nothing
  5452 ;; This function is called by:
  5453 ;;		_Mcu_Initialization
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           
  5458                           ;psect for function _Fosc_Set
  5459  0AB9                     _Fosc_Set:	
  5460                           
  5461                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _Fosc_Set: [wreg]
  5465  0AB9  303C               	movlw	60
  5466  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  5467  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  5468  0ABC  0090               	movwf	16	;volatile
  5469  0ABD  0008               	return
  5470  0ABE                     __end_of_Fosc_Set:	
  5471                           
  5472                           	psect	text28
  5473  0AD7                     __ptext28:	
  5474 ;; *************** function _ADC_Set *****************
  5475 ;; Defined at:
  5476 ;;		line 425 in file "../src/MCU_B1.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;		None               void
  5483 ;; Registers used:
  5484 ;;		wreg
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5490 ;;      Params:         0       0       0       0
  5491 ;;      Locals:         0       0       0       0
  5492 ;;      Temps:          0       0       0       0
  5493 ;;      Totals:         0       0       0       0
  5494 ;;Total ram usage:        0 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    2
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_Mcu_Initialization
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function _ADC_Set
  5506  0AD7                     _ADC_Set:	
  5507                           
  5508                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in _ADC_Set: [wreg]
  5512  0AD7  3073               	movlw	115
  5513  0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  5514  0AD9  1303               	bcf	3,6	;RP1=0, select bank1
  5515  0ADA  009F               	movwf	31	;volatile
  5516                           
  5517                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  5518  0ADB  30C1               	movlw	193
  5519  0ADC  009D               	movwf	29	;volatile
  5520  0ADD  0008               	return
  5521  0ADE                     __end_of_ADC_Set:	
  5522                           
  5523                           	psect	text29
  5524  022F                     __ptext29:	
  5525 ;; *************** function _Load_Main *****************
  5526 ;; Defined at:
  5527 ;;		line 39 in file "../src/OverLoad_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;  i               2   15[BANK0 ] int 
  5532 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5533 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5534 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5535 ;;  error           1    9[BANK0 ] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5545 ;;      Params:         0       0       0       0
  5546 ;;      Locals:         0       8       0       0
  5547 ;;      Temps:          0       2       0       0
  5548 ;;      Totals:         0      10       0       0
  5549 ;;Total ram usage:       10 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    3
  5552 ;; This function calls:
  5553 ;;		___lwdiv
  5554 ;;		___wmul
  5555 ;;		_getLight_LoadGO
  5556 ;;		_getLight_Load_Status
  5557 ;;		_getMain_All_Error_Status
  5558 ;;		_getMain_All_LightsStatus
  5559 ;;		_getMain_Lights_Count
  5560 ;;		_setLoad_AH_AL_Restore
  5561 ;; This function is called by:
  5562 ;;		_main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _Load_Main
  5568  022F                     _Load_Main:	
  5569                           
  5570                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5571                           
  5572                           ;incstack = 0
  5573                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5574  022F  3000               	movlw	0
  5575  0230  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  5576  0233  1283               	bcf	3,5	;RP0=0, select bank0
  5577  0234  1303               	bcf	3,6	;RP1=0, select bank0
  5578  0235  00D4               	movwf	??_Load_Main
  5579  0236  0854               	movf	??_Load_Main,w
  5580  0237  00D6               	movwf	Load_Main@error
  5581                           
  5582                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  5583  0238  01DA               	clrf	Load_Main@Load_RunStatus
  5584  0239  01D9               	clrf	Load_Main@ErrorCountValue
  5585  023A  01DB               	clrf	Load_Main@LightsCount
  5586                           
  5587                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5588  023B  1683               	bsf	3,5	;RP0=1, select bank1
  5589  023C  1303               	bcf	3,6	;RP1=0, select bank1
  5590  023D  1C4A               	btfss	_Load^(0+128),0
  5591  023E  2C11               	goto	l700
  5592                           
  5593                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  5594  023F  158A  2307  118A   	fcall	_getMain_All_LightsStatus
  5595  0242  3800               	iorlw	0
  5596  0243  1D03               	skipz
  5597  0244  2A48               	goto	l4936
  5598                           
  5599                           ;OverLoad_B1.c: 45: Load.GO = 0;
  5600  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5601  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5602  0247  2A67               	goto	l4952
  5603  0248                     l4936:	
  5604                           ;OverLoad_B1.c: 46: } else {
  5605                           
  5606                           
  5607                           ;OverLoad_B1.c: 69: if (error == 0) {
  5608  0248  1283               	bcf	3,5	;RP0=0, select bank0
  5609  0249  1303               	bcf	3,6	;RP1=0, select bank0
  5610  024A  08D6               	movf	Load_Main@error,f
  5611  024B  1D03               	skipz
  5612  024C  2A64               	goto	l703
  5613                           
  5614                           ;OverLoad_B1.c: 70: Load.GO = 1;
  5615  024D  1683               	bsf	3,5	;RP0=1, select bank1
  5616  024E  1303               	bcf	3,6	;RP1=0, select bank1
  5617  024F  14CA               	bsf	_Load^(0+128),1
  5618                           
  5619                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  5620  0250  158A  22BE  118A   	fcall	_getLight_LoadGO
  5621  0253  3A01               	xorlw	1
  5622  0254  1D03               	skipz
  5623  0255  2A5E               	goto	l704
  5624                           
  5625                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  5626  0256  1683               	bsf	3,5	;RP0=1, select bank1
  5627  0257  1303               	bcf	3,6	;RP1=0, select bank1
  5628  0258  1DCA               	btfss	_Load^(0+128),3
  5629  0259  1BCA               	btfsc	_Load^(0+128),7
  5630  025A  2A68               	goto	l702
  5631                           
  5632                           ;OverLoad_B1.c: 74: Load.Run = 1;
  5633  025B  15CA               	bsf	_Load^(0+128),3
  5634                           
  5635                           ;OverLoad_B1.c: 75: Load.Count = 0;
  5636  025C  01E3               	clrf	(_Load^(0+128)+25)
  5637                           
  5638                           ;OverLoad_B1.c: 76: }
  5639                           ;OverLoad_B1.c: 77: } else {
  5640  025D  2A68               	goto	l702
  5641  025E                     l704:	
  5642                           
  5643                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  5644  025E  1683               	bsf	3,5	;RP0=1, select bank1
  5645  025F  1303               	bcf	3,6	;RP1=0, select bank1
  5646  0260  1FCA               	btfss	_Load^(0+128),7
  5647  0261  2A68               	goto	l702
  5648                           
  5649                           ;OverLoad_B1.c: 79: Load.OK = 0;
  5650  0262  13CA               	bcf	_Load^(0+128),7
  5651                           
  5652                           ;OverLoad_B1.c: 80: }
  5653                           ;OverLoad_B1.c: 81: }
  5654                           ;OverLoad_B1.c: 82: } else {
  5655  0263  2A68               	goto	l702
  5656  0264                     l703:	
  5657                           
  5658                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  5659  0264  1683               	bsf	3,5	;RP0=1, select bank1
  5660  0265  1303               	bcf	3,6	;RP1=0, select bank1
  5661  0266  18CA               	btfsc	_Load^(0+128),1
  5662  0267                     l4952:	
  5663                           
  5664                           ;OverLoad_B1.c: 84: Load.GO = 0;
  5665  0267  10CA               	bcf	_Load^(0+128),1
  5666  0268                     l702:	
  5667                           
  5668                           ;OverLoad_B1.c: 85: }
  5669                           ;OverLoad_B1.c: 86: }
  5670                           ;OverLoad_B1.c: 88: }
  5671                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  5672  0268  1CCA               	btfss	_Load^(0+128),1
  5673  0269  2BEA               	goto	l710
  5674                           
  5675                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  5676  026A  154A               	bsf	_Load^(0+128),2
  5677                           
  5678                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  5679  026B  1E4A               	btfss	_Load^(0+128),4
  5680  026C  2BE8               	goto	l711
  5681                           
  5682                           ;OverLoad_B1.c: 95: Load.Time++;
  5683  026D  3001               	movlw	1
  5684  026E  07CB               	addwf	(_Load^(0+128)+1),f
  5685  026F  1803               	skipnc
  5686  0270  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5687  0271  3000               	movlw	0
  5688  0272  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5689                           
  5690                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  5691  0273  3000               	movlw	0
  5692  0274  024C               	subwf	((_Load+1)^(0+128)+1),w
  5693  0275  3002               	movlw	2
  5694  0276  1903               	skipnz
  5695  0277  024B               	subwf	(_Load^(0+128)+1),w
  5696  0278  1C03               	skipc
  5697  0279  0008               	return
  5698                           
  5699                           ;OverLoad_B1.c: 97: Load.Time = 0;
  5700  027A  01CB               	clrf	(_Load^(0+128)+1)
  5701  027B  01CC               	clrf	((_Load+1)^(0+128)+1)
  5702                           
  5703                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  5704  027C  124A               	bcf	_Load^(0+128),4
  5705                           
  5706                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  5707  027D  3001               	movlw	1
  5708  027E  1283               	bcf	3,5	;RP0=0, select bank0
  5709  027F  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0280  00DC               	movwf	Load_Main@i
  5711  0281  3000               	movlw	0
  5712  0282  00DD               	movwf	Load_Main@i+1
  5713  0283  085D               	movf	Load_Main@i+1,w
  5714  0284  3A80               	xorlw	128
  5715  0285  00FF               	movwf	127
  5716  0286  3080               	movlw	128
  5717  0287  027F               	subwf	127,w
  5718  0288  1D03               	skipz
  5719  0289  2A8C               	goto	u6175
  5720  028A  3004               	movlw	4
  5721  028B  025C               	subwf	Load_Main@i,w
  5722  028C                     u6175:	
  5723  028C  1803               	btfsc	3,0
  5724  028D  2ACA               	goto	l4974
  5725  028E                     l4968:	
  5726                           
  5727                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  5728  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5729  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5730  0290  085C               	movf	Load_Main@i,w
  5731  0291  3ED4               	addlw	(_Load+10)& (0+255)
  5732  0292  0084               	movwf	4
  5733  0293  1383               	bcf	3,7	;select IRP bank1
  5734  0294  0800               	movf	0,w
  5735  0295  00D4               	movwf	??_Load_Main
  5736  0296  01D5               	clrf	??_Load_Main+1
  5737  0297  0854               	movf	??_Load_Main,w
  5738  0298  1683               	bsf	3,5	;RP0=1, select bank1
  5739  0299  1303               	bcf	3,6	;RP1=0, select bank1
  5740  029A  07CF               	addwf	(_Load^(0+128)+5),f
  5741  029B  1803               	skipnc
  5742  029C  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5743  029D  1283               	bcf	3,5	;RP0=0, select bank0
  5744  029E  1303               	bcf	3,6	;RP1=0, select bank0
  5745  029F  0855               	movf	??_Load_Main+1,w
  5746  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5747  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5748  02A2  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5749                           
  5750                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  5751  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  5752  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  5753  02A5  085C               	movf	Load_Main@i,w
  5754  02A6  3ED9               	addlw	(_Load+15)& (0+255)
  5755  02A7  0084               	movwf	4
  5756  02A8  0800               	movf	0,w
  5757  02A9  00D4               	movwf	??_Load_Main
  5758  02AA  01D5               	clrf	??_Load_Main+1
  5759  02AB  0854               	movf	??_Load_Main,w
  5760  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  5761  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  5762  02AE  07D1               	addwf	(_Load^(0+128)+7),f
  5763  02AF  1803               	skipnc
  5764  02B0  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5765  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  5766  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  5767  02B3  0855               	movf	??_Load_Main+1,w
  5768  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  5769  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  5770  02B6  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5771  02B7  3001               	movlw	1
  5772  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  5773  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  5774  02BA  07DC               	addwf	Load_Main@i,f
  5775  02BB  1803               	skipnc
  5776  02BC  0ADD               	incf	Load_Main@i+1,f
  5777  02BD  3000               	movlw	0
  5778  02BE  07DD               	addwf	Load_Main@i+1,f
  5779  02BF  085D               	movf	Load_Main@i+1,w
  5780  02C0  3A80               	xorlw	128
  5781  02C1  00FF               	movwf	127
  5782  02C2  3080               	movlw	128
  5783  02C3  027F               	subwf	127,w
  5784  02C4  1D03               	skipz
  5785  02C5  2AC8               	goto	u6185
  5786  02C6  3004               	movlw	4
  5787  02C7  025C               	subwf	Load_Main@i,w
  5788  02C8                     u6185:	
  5789  02C8  1C03               	skipc
  5790  02C9  2A8E               	goto	l4968
  5791  02CA                     l4974:	
  5792                           
  5793                           ;OverLoad_B1.c: 103: }
  5794                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  5795  02CA  3003               	movlw	3
  5796  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5797  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5798  02CD  00CD               	movwf	___lwdiv@divisor
  5799  02CE  3000               	movlw	0
  5800  02CF  00CE               	movwf	___lwdiv@divisor+1
  5801  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5802  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5803  02D2  0850               	movf	((_Load+1)^(0+128)+5),w
  5804  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5805  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5806  02D5  01D0               	clrf	___lwdiv@dividend+1
  5807  02D6  07D0               	addwf	___lwdiv@dividend+1,f
  5808  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  5809  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  5810  02D9  084F               	movf	(_Load^(0+128)+5),w
  5811  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  5812  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  5813  02DC  01CF               	clrf	___lwdiv@dividend
  5814  02DD  07CF               	addwf	___lwdiv@dividend,f
  5815  02DE  158A  25F8  118A   	fcall	___lwdiv
  5816  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5817  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5818  02E3  084E               	movf	?___lwdiv+1,w
  5819  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  5820  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  5821  02E6  01D0               	clrf	((_Load+1)^(0+128)+5)
  5822  02E7  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5823  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  5824  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  5825  02EA  084D               	movf	?___lwdiv,w
  5826  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  5827  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  5828  02ED  01CF               	clrf	(_Load^(0+128)+5)
  5829  02EE  07CF               	addwf	(_Load^(0+128)+5),f
  5830                           
  5831                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  5832  02EF  3003               	movlw	3
  5833  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5834  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5835  02F2  00CD               	movwf	___lwdiv@divisor
  5836  02F3  3000               	movlw	0
  5837  02F4  00CE               	movwf	___lwdiv@divisor+1
  5838  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  5839  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  5840  02F7  0852               	movf	((_Load+1)^(0+128)+7),w
  5841  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  5842  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  5843  02FA  01D0               	clrf	___lwdiv@dividend+1
  5844  02FB  07D0               	addwf	___lwdiv@dividend+1,f
  5845  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  5846  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  5847  02FE  0851               	movf	(_Load^(0+128)+7),w
  5848  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5850  0301  01CF               	clrf	___lwdiv@dividend
  5851  0302  07CF               	addwf	___lwdiv@dividend,f
  5852  0303  158A  25F8  118A   	fcall	___lwdiv
  5853  0306  1283               	bcf	3,5	;RP0=0, select bank0
  5854  0307  1303               	bcf	3,6	;RP1=0, select bank0
  5855  0308  084E               	movf	?___lwdiv+1,w
  5856  0309  1683               	bsf	3,5	;RP0=1, select bank1
  5857  030A  1303               	bcf	3,6	;RP1=0, select bank1
  5858  030B  01D2               	clrf	((_Load+1)^(0+128)+7)
  5859  030C  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5860  030D  1283               	bcf	3,5	;RP0=0, select bank0
  5861  030E  1303               	bcf	3,6	;RP1=0, select bank0
  5862  030F  084D               	movf	?___lwdiv,w
  5863  0310  1683               	bsf	3,5	;RP0=1, select bank1
  5864  0311  1303               	bcf	3,6	;RP1=0, select bank1
  5865  0312  01D1               	clrf	(_Load^(0+128)+7)
  5866  0313  07D1               	addwf	(_Load^(0+128)+7),f
  5867                           
  5868                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  5869  0314  158A  23D7  118A   	fcall	_setLoad_AH_AL_Restore
  5870                           
  5871                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  5872  0317  1683               	bsf	3,5	;RP0=1, select bank1
  5873  0318  1303               	bcf	3,6	;RP1=0, select bank1
  5874  0319  0852               	movf	((_Load+1)^(0+128)+7),w
  5875  031A  0250               	subwf	((_Load+1)^(0+128)+5),w
  5876  031B  1D03               	skipz
  5877  031C  2B1F               	goto	u6195
  5878  031D  0851               	movf	(_Load^(0+128)+7),w
  5879  031E  024F               	subwf	(_Load^(0+128)+5),w
  5880  031F                     u6195:	
  5881  031F  1C03               	skipc
  5882  0320  0008               	return
  5883                           
  5884                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  5885  0321  0351               	decf	(_Load^(0+128)+7),w
  5886  0322  3AFF               	xorlw	255
  5887  0323  074F               	addwf	(_Load^(0+128)+5),w
  5888  0324  1283               	bcf	3,5	;RP0=0, select bank0
  5889  0325  1303               	bcf	3,6	;RP1=0, select bank0
  5890  0326  00D4               	movwf	??_Load_Main
  5891  0327  0854               	movf	??_Load_Main,w
  5892  0328  1683               	bsf	3,5	;RP0=1, select bank1
  5893  0329  1303               	bcf	3,6	;RP1=0, select bank1
  5894  032A  00DE               	movwf	(_Load^(0+128)+20)
  5895                           
  5896                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  5897  032B  01CF               	clrf	(_Load^(0+128)+5)
  5898  032C  01D0               	clrf	((_Load+1)^(0+128)+5)
  5899                           
  5900                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  5901  032D  01D1               	clrf	(_Load^(0+128)+7)
  5902  032E  01D2               	clrf	((_Load+1)^(0+128)+7)
  5903                           
  5904                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  5905  032F  1DCA               	btfss	_Load^(0+128),3
  5906  0330  2B94               	goto	l716
  5907                           
  5908                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  5909  0331  3002               	movlw	2
  5910  0332  0263               	subwf	(_Load^(0+128)+25),w
  5911  0333  1803               	skipnc
  5912  0334  2B94               	goto	l716
  5913                           
  5914                           ;OverLoad_B1.c: 115: Load.Count++;
  5915  0335  3001               	movlw	1
  5916  0336  1283               	bcf	3,5	;RP0=0, select bank0
  5917  0337  1303               	bcf	3,6	;RP1=0, select bank0
  5918  0338  00D4               	movwf	??_Load_Main
  5919  0339  0854               	movf	??_Load_Main,w
  5920  033A  1683               	bsf	3,5	;RP0=1, select bank1
  5921  033B  1303               	bcf	3,6	;RP1=0, select bank1
  5922  033C  07E3               	addwf	(_Load^(0+128)+25),f
  5923                           
  5924                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  5925  033D  158A  22C4  118A   	fcall	_getLight_Load_Status
  5926  0340  1283               	bcf	3,5	;RP0=0, select bank0
  5927  0341  1303               	bcf	3,6	;RP1=0, select bank0
  5928  0342  00D4               	movwf	??_Load_Main
  5929  0343  0854               	movf	??_Load_Main,w
  5930  0344  00DA               	movwf	Load_Main@Load_RunStatus
  5931                           
  5932                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  5933  0345  158A  231A  118A   	fcall	_getMain_Lights_Count
  5934  0348  1283               	bcf	3,5	;RP0=0, select bank0
  5935  0349  1303               	bcf	3,6	;RP1=0, select bank0
  5936  034A  00D4               	movwf	??_Load_Main
  5937  034B  0854               	movf	??_Load_Main,w
  5938  034C  00DB               	movwf	Load_Main@LightsCount
  5939                           
  5940                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5941  034D  1683               	bsf	3,5	;RP0=1, select bank1
  5942  034E  1303               	bcf	3,6	;RP1=0, select bank1
  5943  034F  0863               	movf	(_Load^(0+128)+25),w
  5944  0350  3A01               	xorlw	1
  5945  0351  1D03               	skipz
  5946  0352  2B55               	goto	l5000
  5947                           
  5948                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5949  0353  3022               	movlw	34
  5950  0354  2B62               	goto	L14
  5951  0355                     l5000:	
  5952                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5953                           
  5954  0355  0863               	movf	(_Load^(0+128)+25),w
  5955  0356  3A02               	xorlw	2
  5956  0357  1D03               	skipz
  5957  0358  2B94               	goto	l716
  5958                           
  5959                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  5960  0359  1283               	bcf	3,5	;RP0=0, select bank0
  5961  035A  1303               	bcf	3,6	;RP1=0, select bank0
  5962  035B  085B               	movf	Load_Main@LightsCount,w
  5963  035C  3A01               	xorlw	1
  5964  035D  1D03               	skipz
  5965  035E  2B65               	goto	l5006
  5966                           
  5967                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(8*1.7);
  5968  035F  300D               	movlw	13
  5969  0360  1683               	bsf	3,5	;RP0=1, select bank1
  5970  0361  1303               	bcf	3,6	;RP1=0, select bank1
  5971  0362                     L14:	
  5972  0362  00E1               	movwf	(_Load^(0+128)+23)
  5973  0363  3000               	movlw	0
  5974  0364  2B93               	goto	L15
  5975  0365                     l5006:	
  5976                           ;OverLoad_B1.c: 130: } else {
  5977                           
  5978                           
  5979                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  5980  0365  1283               	bcf	3,5	;RP0=0, select bank0
  5981  0366  08DA               	movf	Load_Main@Load_RunStatus,f
  5982  0367  1D03               	skipz
  5983  0368  2B86               	goto	l5010
  5984                           
  5985                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  5986  0369  085B               	movf	Load_Main@LightsCount,w
  5987  036A  00D4               	movwf	??_Load_Main
  5988  036B  01D5               	clrf	??_Load_Main+1
  5989  036C  0854               	movf	??_Load_Main,w
  5990  036D  00CD               	movwf	___wmul@multiplier
  5991  036E  0855               	movf	??_Load_Main+1,w
  5992  036F  00CE               	movwf	___wmul@multiplier+1
  5993  0370  300D               	movlw	13
  5994  0371  00CF               	movwf	___wmul@multiplicand
  5995  0372  3000               	movlw	0
  5996  0373  00D0               	movwf	___wmul@multiplicand+1
  5997  0374  158A  2506  118A   	fcall	___wmul
  5998  0377  1283               	bcf	3,5	;RP0=0, select bank0
  5999  0378  1303               	bcf	3,6	;RP1=0, select bank0
  6000  0379  084E               	movf	?___wmul+1,w
  6001  037A  1683               	bsf	3,5	;RP0=1, select bank1
  6002  037B  1303               	bcf	3,6	;RP1=0, select bank1
  6003  037C  01E2               	clrf	((_Load+1)^(0+128)+23)
  6004  037D  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6005  037E  1283               	bcf	3,5	;RP0=0, select bank0
  6006  037F  1303               	bcf	3,6	;RP1=0, select bank0
  6007  0380  084D               	movf	?___wmul,w
  6008  0381  1683               	bsf	3,5	;RP0=1, select bank1
  6009  0382  1303               	bcf	3,6	;RP1=0, select bank1
  6010  0383  01E1               	clrf	(_Load^(0+128)+23)
  6011  0384  07E1               	addwf	(_Load^(0+128)+23),f
  6012                           
  6013                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6014  0385  2B94               	goto	l716
  6015  0386                     l5010:	
  6016  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6017  0387  085A               	movf	Load_Main@Load_RunStatus,w
  6018  0388  3A01               	xorlw	1
  6019  0389  1D03               	skipz
  6020  038A  2B94               	goto	l716
  6021                           
  6022                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6023  038B  1683               	bsf	3,5	;RP0=1, select bank1
  6024  038C  1303               	bcf	3,6	;RP1=0, select bank1
  6025  038D  0853               	movf	(_Load^(0+128)+9),w
  6026  038E  3E0D               	addlw	13
  6027  038F  00E1               	movwf	(_Load^(0+128)+23)
  6028  0390  3000               	movlw	0
  6029  0391  1803               	skipnc
  6030  0392  3001               	movlw	1
  6031  0393                     L15:	
  6032  0393  00E2               	movwf	(_Load^(0+128)+24)
  6033  0394                     l716:	
  6034                           
  6035                           ;OverLoad_B1.c: 135: }
  6036                           ;OverLoad_B1.c: 136: }
  6037                           ;OverLoad_B1.c: 137: }
  6038                           ;OverLoad_B1.c: 138: }
  6039                           ;OverLoad_B1.c: 139: }
  6040                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6041  0394  1683               	bsf	3,5	;RP0=1, select bank1
  6042  0395  1303               	bcf	3,6	;RP1=0, select bank1
  6043  0396  085E               	movf	(_Load^(0+128)+20),w
  6044  0397  1283               	bcf	3,5	;RP0=0, select bank0
  6045  0398  1303               	bcf	3,6	;RP1=0, select bank0
  6046  0399  00D4               	movwf	??_Load_Main
  6047  039A  01D5               	clrf	??_Load_Main+1
  6048  039B  1683               	bsf	3,5	;RP0=1, select bank1
  6049  039C  1303               	bcf	3,6	;RP1=0, select bank1
  6050  039D  0862               	movf	((_Load+1)^(0+128)+23),w
  6051  039E  1283               	bcf	3,5	;RP0=0, select bank0
  6052  039F  1303               	bcf	3,6	;RP1=0, select bank0
  6053  03A0  0255               	subwf	??_Load_Main+1,w
  6054  03A1  1D03               	skipz
  6055  03A2  2BA9               	goto	u6275
  6056  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  6057  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  6058  03A5  0861               	movf	(_Load^(0+128)+23),w
  6059  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6060  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6061  03A8  0254               	subwf	??_Load_Main,w
  6062  03A9                     u6275:	
  6063  03A9  1C03               	skipc
  6064  03AA  2BCA               	goto	l5028
  6065                           
  6066                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6067  03AB  085B               	movf	Load_Main@LightsCount,w
  6068  03AC  3A01               	xorlw	1
  6069  03AD  1903               	skipnz
  6070  03AE  2BB1               	goto	l5018
  6071  03AF  3003               	movlw	3
  6072  03B0  2BB2               	goto	L16
  6073  03B1                     l5018:	
  6074  03B1  3002               	movlw	2
  6075  03B2                     L16:	
  6076  03B2  00D7               	movwf	_Load_Main$2369
  6077  03B3  3000               	movlw	0
  6078  03B4  00D8               	movwf	_Load_Main$2369+1
  6079  03B5  0857               	movf	_Load_Main$2369,w
  6080  03B6  00D4               	movwf	??_Load_Main
  6081  03B7  0854               	movf	??_Load_Main,w
  6082  03B8  00D9               	movwf	Load_Main@ErrorCountValue
  6083                           
  6084                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6085  03B9  3001               	movlw	1
  6086  03BA  00D4               	movwf	??_Load_Main
  6087  03BB  0854               	movf	??_Load_Main,w
  6088  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6089  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6090  03BE  07E4               	addwf	(_Load^(0+128)+26),f
  6091                           
  6092                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6093  03BF  0864               	movf	(_Load^(0+128)+26),w
  6094  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  6095  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  6096  03C2  0259               	subwf	Load_Main@ErrorCountValue,w
  6097  03C3  1803               	skipnc
  6098  03C4  0008               	return
  6099                           
  6100                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6101  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  6102  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  6103  03C7  01E4               	clrf	(_Load^(0+128)+26)
  6104                           
  6105                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6106  03C8  16CA               	bsf	_Load^(0+128),5
  6107                           
  6108                           ;OverLoad_B1.c: 168: }
  6109                           ;OverLoad_B1.c: 169: } else {
  6110  03C9  0008               	return
  6111  03CA                     l5028:	
  6112                           
  6113                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6114  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  6115  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  6116  03CC  01E4               	clrf	(_Load^(0+128)+26)
  6117                           
  6118                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6119  03CD  1DCA               	btfss	_Load^(0+128),3
  6120  03CE  0008               	return
  6121                           
  6122                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6123  03CF  3001               	movlw	1
  6124  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6125  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6126  03D2  00D4               	movwf	??_Load_Main
  6127  03D3  0854               	movf	??_Load_Main,w
  6128  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6129  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6130  03D6  07E5               	addwf	(_Load^(0+128)+27),f
  6131                           
  6132                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6133  03D7  3003               	movlw	3
  6134  03D8  0265               	subwf	(_Load^(0+128)+27),w
  6135  03D9  1C03               	skipc
  6136  03DA  0008               	return
  6137                           
  6138                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6139  03DB  01E5               	clrf	(_Load^(0+128)+27)
  6140                           
  6141                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6142  03DC  17CA               	bsf	_Load^(0+128),7
  6143                           
  6144                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6145  03DD  11CA               	bcf	_Load^(0+128),3
  6146                           
  6147                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6148  03DE  01E3               	clrf	(_Load^(0+128)+25)
  6149                           
  6150                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6151  03DF  085E               	movf	(_Load^(0+128)+20),w
  6152  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  6153  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  6154  03E2  00D4               	movwf	??_Load_Main
  6155  03E3  0854               	movf	??_Load_Main,w
  6156  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  6157  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  6158  03E6  00D3               	movwf	(_Load^(0+128)+9)
  6159                           
  6160                           ;OverLoad_B1.c: 182: }
  6161                           ;OverLoad_B1.c: 183: }
  6162                           ;OverLoad_B1.c: 206: }
  6163                           ;OverLoad_B1.c: 207: }
  6164                           ;OverLoad_B1.c: 208: }
  6165                           ;OverLoad_B1.c: 209: } else {
  6166  03E7  0008               	return
  6167  03E8                     l711:	
  6168                           
  6169                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6170  03E8  164A               	bsf	_Load^(0+128),4
  6171                           
  6172                           ;OverLoad_B1.c: 211: }
  6173                           ;OverLoad_B1.c: 212: } else {
  6174  03E9  0008               	return
  6175  03EA                     l710:	
  6176                           
  6177                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6178  03EA  1D4A               	btfss	_Load^(0+128),2
  6179  03EB  2BFE               	goto	l5064
  6180                           
  6181                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6182  03EC  114A               	bcf	_Load^(0+128),2
  6183                           
  6184                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6185  03ED  124A               	bcf	_Load^(0+128),4
  6186                           
  6187                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6188  03EE  01CB               	clrf	(_Load^(0+128)+1)
  6189  03EF  01CC               	clrf	((_Load+1)^(0+128)+1)
  6190                           
  6191                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6192  03F0  158A  23D7  118A   	fcall	_setLoad_AH_AL_Restore
  6193                           
  6194                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6195  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  6196  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  6197  03F5  01E4               	clrf	(_Load^(0+128)+26)
  6198                           
  6199                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6200  03F6  01E5               	clrf	(_Load^(0+128)+27)
  6201                           
  6202                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6203  03F7  01CF               	clrf	(_Load^(0+128)+5)
  6204  03F8  01D0               	clrf	((_Load+1)^(0+128)+5)
  6205                           
  6206                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6207  03F9  01D1               	clrf	(_Load^(0+128)+7)
  6208  03FA  01D2               	clrf	((_Load+1)^(0+128)+7)
  6209                           
  6210                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6211  03FB  11CA               	bcf	_Load^(0+128),3
  6212                           
  6213                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6214  03FC  01E3               	clrf	(_Load^(0+128)+25)
  6215                           
  6216                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6217  03FD  13CA               	bcf	_Load^(0+128),7
  6218  03FE                     l5064:	
  6219                           
  6220                           ;OverLoad_B1.c: 255: }
  6221                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6222  03FE  1ECA               	btfss	_Load^(0+128),5
  6223  03FF  0008               	return
  6224                           
  6225                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6226  0400  3001               	movlw	1
  6227  0401  07CD               	addwf	(_Load^(0+128)+3),f
  6228  0402  1803               	skipnc
  6229  0403  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6230  0404  3000               	movlw	0
  6231  0405  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6232                           
  6233                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6234  0406  3001               	movlw	1
  6235  0407  024E               	subwf	((_Load+1)^(0+128)+3),w
  6236  0408  30F4               	movlw	244
  6237  0409  1903               	skipnz
  6238  040A  024D               	subwf	(_Load^(0+128)+3),w
  6239  040B  1C03               	skipc
  6240  040C  0008               	return
  6241                           
  6242                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6243  040D  01CD               	clrf	(_Load^(0+128)+3)
  6244  040E  01CE               	clrf	((_Load+1)^(0+128)+3)
  6245                           
  6246                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6247  040F  12CA               	bcf	_Load^(0+128),5
  6248                           
  6249                           ;OverLoad_B1.c: 261: }
  6250                           ;OverLoad_B1.c: 262: }
  6251                           ;OverLoad_B1.c: 263: }
  6252                           ;OverLoad_B1.c: 264: } else {
  6253  0410  0008               	return
  6254  0411                     l700:	
  6255                           
  6256                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6257  0411  1283               	bcf	3,5	;RP0=0, select bank0
  6258  0412  1303               	bcf	3,6	;RP1=0, select bank0
  6259  0413  1C25               	btfss	_myMain,0
  6260  0414  0008               	return
  6261                           
  6262                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6263  0415  1683               	bsf	3,5	;RP0=1, select bank1
  6264  0416  1303               	bcf	3,6	;RP1=0, select bank1
  6265  0417  144A               	bsf	_Load^(0+128),0
  6266  0418  0008               	return
  6267  0419                     __end_of_Load_Main:	
  6268                           
  6269                           	psect	text30
  6270  0B1A                     __ptext30:	
  6271 ;; *************** function _getMain_Lights_Count *****************
  6272 ;; Defined at:
  6273 ;;		line 459 in file "../src/Main_B1.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  status1         1    5[COMMON] unsigned char 
  6278 ;;  count           1    4[COMMON] unsigned char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  1    wreg      unsigned char 
  6281 ;; Registers used:
  6282 ;;		wreg, status,2
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6288 ;;      Params:         0       0       0       0
  6289 ;;      Locals:         2       0       0       0
  6290 ;;      Temps:          0       0       0       0
  6291 ;;      Totals:         2       0       0       0
  6292 ;;Total ram usage:        2 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    2
  6295 ;; This function calls:
  6296 ;;		Nothing
  6297 ;; This function is called by:
  6298 ;;		_Load_Main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function _getMain_Lights_Count
  6304  0B1A                     _getMain_Lights_Count:	
  6305                           
  6306                           ;Main_B1.c: 460: char count = 0;
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6310  0B1A  01F4               	clrf	getMain_Lights_Count@count
  6311                           
  6312                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6313  0B1B  3000               	movlw	0
  6314  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  6315  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  6316  0B1E  1940               	btfsc	_Lights1,2
  6317  0B1F  3001               	movlw	1
  6318  0B20  00F5               	movwf	getMain_Lights_Count@status1
  6319                           
  6320                           ;Main_B1.c: 487: return count = status1;
  6321  0B21  0875               	movf	getMain_Lights_Count@status1,w
  6322  0B22  00F4               	movwf	getMain_Lights_Count@count
  6323  0B23  0008               	return
  6324  0B24                     __end_of_getMain_Lights_Count:	
  6325                           
  6326                           	psect	text31
  6327  0AC4                     __ptext31:	
  6328 ;; *************** function _getLight_Load_Status *****************
  6329 ;; Defined at:
  6330 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  loadstatus      1    4[COMMON] unsigned char 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      unsigned char 
  6337 ;; Registers used:
  6338 ;;		wreg, status,2
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6344 ;;      Params:         0       0       0       0
  6345 ;;      Locals:         1       0       0       0
  6346 ;;      Temps:          0       0       0       0
  6347 ;;      Totals:         1       0       0       0
  6348 ;;Total ram usage:        1 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    2
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_Load_Main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           
  6359                           ;psect for function _getLight_Load_Status
  6360  0AC4                     _getLight_Load_Status:	
  6361                           
  6362                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6363                           
  6364                           ;incstack = 0
  6365                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6366  0AC4  3000               	movlw	0
  6367  0AC5  18F7               	btfsc	_Light,1
  6368  0AC6  3001               	movlw	1
  6369  0AC7  00F4               	movwf	getLight_Load_Status@loadstatus
  6370                           
  6371                           ;TriacRelay_B1.c: 407: return loadstatus;
  6372  0AC8  0874               	movf	getLight_Load_Status@loadstatus,w
  6373  0AC9  0008               	return
  6374  0ACA                     __end_of_getLight_Load_Status:	
  6375                           
  6376                           	psect	text32
  6377  0ABE                     __ptext32:	
  6378 ;; *************** function _getLight_LoadGO *****************
  6379 ;; Defined at:
  6380 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  loadgo          1    4[COMMON] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      unsigned char 
  6387 ;; Registers used:
  6388 ;;		wreg, status,2
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6394 ;;      Params:         0       0       0       0
  6395 ;;      Locals:         1       0       0       0
  6396 ;;      Temps:          0       0       0       0
  6397 ;;      Totals:         1       0       0       0
  6398 ;;Total ram usage:        1 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    2
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_Load_Main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _getLight_LoadGO
  6410  0ABE                     _getLight_LoadGO:	
  6411                           
  6412                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6416  0ABE  3000               	movlw	0
  6417  0ABF  1877               	btfsc	_Light,0
  6418  0AC0  3001               	movlw	1
  6419  0AC1  00F4               	movwf	getLight_LoadGO@loadgo
  6420                           
  6421                           ;TriacRelay_B1.c: 402: return loadgo;
  6422  0AC2  0874               	movf	getLight_LoadGO@loadgo,w
  6423  0AC3  0008               	return
  6424  0AC4                     __end_of_getLight_LoadGO:	
  6425                           
  6426                           	psect	text33
  6427  0D06                     __ptext33:	
  6428 ;; *************** function ___wmul *****************
  6429 ;; Defined at:
  6430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6433 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  product         2    4[COMMON] unsigned int 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  2    0[BANK0 ] unsigned int 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6445 ;;      Params:         0       4       0       0
  6446 ;;      Locals:         2       0       0       0
  6447 ;;      Temps:          0       0       0       0
  6448 ;;      Totals:         2       4       0       0
  6449 ;;Total ram usage:        6 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    2
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_Load_Main
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function ___wmul
  6461  0D06                     ___wmul:	
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6465  0D06  01F4               	clrf	___wmul@product
  6466  0D07  01F5               	clrf	___wmul@product+1
  6467  0D08                     l4712:	
  6468  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  6469  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  6470  0D0A  1C4D               	btfss	___wmul@multiplier,0
  6471  0D0B  2D12               	goto	l1379
  6472  0D0C  084F               	movf	___wmul@multiplicand,w
  6473  0D0D  07F4               	addwf	___wmul@product,f
  6474  0D0E  1803               	skipnc
  6475  0D0F  0AF5               	incf	___wmul@product+1,f
  6476  0D10  0850               	movf	___wmul@multiplicand+1,w
  6477  0D11  07F5               	addwf	___wmul@product+1,f
  6478  0D12                     l1379:	
  6479  0D12  3001               	movlw	1
  6480  0D13                     u5615:	
  6481  0D13  1003               	clrc
  6482  0D14  0DCF               	rlf	___wmul@multiplicand,f
  6483  0D15  0DD0               	rlf	___wmul@multiplicand+1,f
  6484  0D16  3EFF               	addlw	-1
  6485  0D17  1D03               	skipz
  6486  0D18  2D13               	goto	u5615
  6487  0D19  3001               	movlw	1
  6488  0D1A                     u5625:	
  6489  0D1A  1003               	clrc
  6490  0D1B  0CCE               	rrf	___wmul@multiplier+1,f
  6491  0D1C  0CCD               	rrf	___wmul@multiplier,f
  6492  0D1D  3EFF               	addlw	-1
  6493  0D1E  1D03               	skipz
  6494  0D1F  2D1A               	goto	u5625
  6495  0D20  084E               	movf	___wmul@multiplier+1,w
  6496  0D21  044D               	iorwf	___wmul@multiplier,w
  6497  0D22  1D03               	skipz
  6498  0D23  2D08               	goto	l4712
  6499  0D24  0875               	movf	___wmul@product+1,w
  6500  0D25  01CE               	clrf	?___wmul+1
  6501  0D26  07CE               	addwf	?___wmul+1,f
  6502  0D27  0874               	movf	___wmul@product,w
  6503  0D28  01CD               	clrf	?___wmul
  6504  0D29  07CD               	addwf	?___wmul,f
  6505  0D2A  0008               	return
  6506  0D2B                     __end_of___wmul:	
  6507                           
  6508                           	psect	text34
  6509  0DF8                     __ptext34:	
  6510 ;; *************** function ___lwdiv *****************
  6511 ;; Defined at:
  6512 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  divisor         2    0[BANK0 ] unsigned int 
  6515 ;;  dividend        2    2[BANK0 ] unsigned int 
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;  quotient        2    5[BANK0 ] unsigned int 
  6518 ;;  counter         1    4[BANK0 ] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  2    0[BANK0 ] unsigned int 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6528 ;;      Params:         0       4       0       0
  6529 ;;      Locals:         0       3       0       0
  6530 ;;      Temps:          1       0       0       0
  6531 ;;      Totals:         1       7       0       0
  6532 ;;Total ram usage:        8 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    2
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_Load_Main
  6539 ;;		_getPIR_AD
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           
  6544                           ;psect for function ___lwdiv
  6545  0DF8                     ___lwdiv:	
  6546                           
  6547                           ;incstack = 0
  6548                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6549  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  6550  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  6551  0DFA  01D2               	clrf	___lwdiv@quotient
  6552  0DFB  01D3               	clrf	___lwdiv@quotient+1
  6553  0DFC  084E               	movf	___lwdiv@divisor+1,w
  6554  0DFD  044D               	iorwf	___lwdiv@divisor,w
  6555  0DFE  1903               	skipnz
  6556  0DFF  2E31               	goto	l4744
  6557  0E00  01D1               	clrf	___lwdiv@counter
  6558  0E01  0AD1               	incf	___lwdiv@counter,f
  6559  0E02                     l4732:	
  6560  0E02  1BCE               	btfsc	___lwdiv@divisor+1,7
  6561  0E03  2E10               	goto	l4734
  6562  0E04  3001               	movlw	1
  6563  0E05                     u5655:	
  6564  0E05  1003               	clrc
  6565  0E06  0DCD               	rlf	___lwdiv@divisor,f
  6566  0E07  0DCE               	rlf	___lwdiv@divisor+1,f
  6567  0E08  3EFF               	addlw	-1
  6568  0E09  1D03               	skipz
  6569  0E0A  2E05               	goto	u5655
  6570  0E0B  3001               	movlw	1
  6571  0E0C  00F4               	movwf	??___lwdiv
  6572  0E0D  0874               	movf	??___lwdiv,w
  6573  0E0E  07D1               	addwf	___lwdiv@counter,f
  6574  0E0F  2E02               	goto	l4732
  6575  0E10                     l4734:	
  6576  0E10  3001               	movlw	1
  6577  0E11                     u5675:	
  6578  0E11  1003               	clrc
  6579  0E12  0DD2               	rlf	___lwdiv@quotient,f
  6580  0E13  0DD3               	rlf	___lwdiv@quotient+1,f
  6581  0E14  3EFF               	addlw	-1
  6582  0E15  1D03               	skipz
  6583  0E16  2E11               	goto	u5675
  6584  0E17  084E               	movf	___lwdiv@divisor+1,w
  6585  0E18  0250               	subwf	___lwdiv@dividend+1,w
  6586  0E19  1D03               	skipz
  6587  0E1A  2E1D               	goto	u5685
  6588  0E1B  084D               	movf	___lwdiv@divisor,w
  6589  0E1C  024F               	subwf	___lwdiv@dividend,w
  6590  0E1D                     u5685:	
  6591  0E1D  1C03               	skipc
  6592  0E1E  2E26               	goto	l4740
  6593  0E1F  084D               	movf	___lwdiv@divisor,w
  6594  0E20  02CF               	subwf	___lwdiv@dividend,f
  6595  0E21  084E               	movf	___lwdiv@divisor+1,w
  6596  0E22  1C03               	skipc
  6597  0E23  03D0               	decf	___lwdiv@dividend+1,f
  6598  0E24  02D0               	subwf	___lwdiv@dividend+1,f
  6599  0E25  1452               	bsf	___lwdiv@quotient,0
  6600  0E26                     l4740:	
  6601  0E26  3001               	movlw	1
  6602  0E27                     u5695:	
  6603  0E27  1003               	clrc
  6604  0E28  0CCE               	rrf	___lwdiv@divisor+1,f
  6605  0E29  0CCD               	rrf	___lwdiv@divisor,f
  6606  0E2A  3EFF               	addlw	-1
  6607  0E2B  1D03               	skipz
  6608  0E2C  2E27               	goto	u5695
  6609  0E2D  3001               	movlw	1
  6610  0E2E  02D1               	subwf	___lwdiv@counter,f
  6611  0E2F  1D03               	btfss	3,2
  6612  0E30  2E10               	goto	l4734
  6613  0E31                     l4744:	
  6614  0E31  0853               	movf	___lwdiv@quotient+1,w
  6615  0E32  01CE               	clrf	?___lwdiv+1
  6616  0E33  07CE               	addwf	?___lwdiv+1,f
  6617  0E34  0852               	movf	___lwdiv@quotient,w
  6618  0E35  01CD               	clrf	?___lwdiv
  6619  0E36  07CD               	addwf	?___lwdiv,f
  6620  0E37  0008               	return
  6621  0E38                     __end_of___lwdiv:	
  6622                           
  6623                           	psect	text35
  6624  0A9E                     __ptext35:	
  6625 ;; *************** function _Load_Initialization *****************
  6626 ;; Defined at:
  6627 ;;		line 9 in file "../src/OverLoad_B1.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;		None               void
  6634 ;; Registers used:
  6635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6641 ;;      Params:         0       0       0       0
  6642 ;;      Locals:         0       0       0       0
  6643 ;;      Temps:          0       0       0       0
  6644 ;;      Totals:         0       0       0       0
  6645 ;;Total ram usage:        0 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    3
  6648 ;; This function calls:
  6649 ;;		_setLoad_AH_AL_Restore
  6650 ;; This function is called by:
  6651 ;;		_main
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _Load_Initialization
  6657  0A9E                     _Load_Initialization:	
  6658                           
  6659                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6663  0A9E  158A  23D7         	fcall	_setLoad_AH_AL_Restore
  6664  0AA0  0008               	return
  6665  0AA1                     __end_of_Load_Initialization:	
  6666                           
  6667                           	psect	text36
  6668  0BD7                     __ptext36:	
  6669 ;; *************** function _setLoad_AH_AL_Restore *****************
  6670 ;; Defined at:
  6671 ;;		line 292 in file "../src/OverLoad_B1.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  i               1    5[COMMON] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;		None               void
  6678 ;; Registers used:
  6679 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6685 ;;      Params:         0       0       0       0
  6686 ;;      Locals:         1       0       0       0
  6687 ;;      Temps:          1       0       0       0
  6688 ;;      Totals:         2       0       0       0
  6689 ;;Total ram usage:        2 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    2
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_Load_Initialization
  6696 ;;		_Load_Main
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _setLoad_AH_AL_Restore
  6702  0BD7                     _setLoad_AH_AL_Restore:	
  6703                           
  6704                           ;OverLoad_B1.c: 293: char i;
  6705                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  6706                           
  6707                           ;incstack = 0
  6708                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6709  0BD7  01F5               	clrf	setLoad_AH_AL_Restore@i
  6710  0BD8                     L17:	
  6711  0BD8  3005               	movlw	5
  6712  0BD9  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6713  0BDA  1803               	btfsc	3,0
  6714  0BDB  0008               	return
  6715                           
  6716                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  6717  0BDC  0875               	movf	setLoad_AH_AL_Restore@i,w
  6718  0BDD  3ED4               	addlw	(_Load+10)& (0+255)
  6719  0BDE  0084               	movwf	4
  6720  0BDF  1383               	bcf	3,7	;select IRP bank1
  6721  0BE0  0180               	clrf	0
  6722                           
  6723                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  6724  0BE1  30FF               	movlw	255
  6725  0BE2  00F4               	movwf	??_setLoad_AH_AL_Restore
  6726  0BE3  0875               	movf	setLoad_AH_AL_Restore@i,w
  6727  0BE4  3ED9               	addlw	(_Load+15)& (0+255)
  6728  0BE5  0084               	movwf	4
  6729  0BE6  0874               	movf	??_setLoad_AH_AL_Restore,w
  6730  0BE7  0080               	movwf	0
  6731  0BE8  3001               	movlw	1
  6732  0BE9  00F4               	movwf	??_setLoad_AH_AL_Restore
  6733  0BEA  0874               	movf	??_setLoad_AH_AL_Restore,w
  6734  0BEB  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6735  0BEC  2BD8               	goto	L17
  6736  0BED                     __end_of_setLoad_AH_AL_Restore:	
  6737                           
  6738                           	psect	text37
  6739  0CA1                     __ptext37:	
  6740 ;; *************** function _Lights_Main *****************
  6741 ;; Defined at:
  6742 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;		None               void
  6749 ;; Registers used:
  6750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6756 ;;      Params:         0       0       0       0
  6757 ;;      Locals:         0       0       0       0
  6758 ;;      Temps:          0       0       0       0
  6759 ;;      Totals:         0       0       0       0
  6760 ;;Total ram usage:        0 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:    6
  6763 ;; This function calls:
  6764 ;;		_Lights_Control
  6765 ;;		_getLoad_OK
  6766 ;;		_getMain_All_Error_Status
  6767 ;;		_getMain_All_LightsStatus
  6768 ;;		_setLights_Main
  6769 ;; This function is called by:
  6770 ;;		_main
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _Lights_Main
  6776  0CA1                     _Lights_Main:	
  6777                           
  6778                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6782  0CA1  1C77               	btfss	_Light,0
  6783  0CA2  2CB7               	goto	l5082
  6784                           
  6785                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6786  0CA3  158A  22E6  158A   	fcall	_getLoad_OK
  6787  0CA6  3A01               	xorlw	1
  6788  0CA7  1903               	skipnz
  6789  0CA8  2CB6               	goto	l1258
  6790  0CA9  3000               	movlw	0
  6791  0CAA  158A  25BA  158A   	fcall	_getMain_All_Error_Status
  6792  0CAD  3800               	iorlw	0
  6793  0CAE  1D03               	skipz
  6794  0CAF  2CB6               	goto	l1258
  6795  0CB0  158A  2307  158A   	fcall	_getMain_All_LightsStatus
  6796  0CB3  3800               	iorlw	0
  6797  0CB4  1D03               	skipz
  6798  0CB5  2CB7               	goto	l5082
  6799  0CB6                     l1258:	
  6800                           
  6801                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6802  0CB6  1077               	bcf	_Light,0
  6803  0CB7                     l5082:	
  6804                           
  6805                           ;TriacRelay_B1.c: 68: }
  6806                           ;TriacRelay_B1.c: 69: }
  6807                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6808  0CB7  3001               	movlw	1
  6809  0CB8  158A  2556  158A   	fcall	_setLights_Main
  6810                           
  6811                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6812  0CBB  3001               	movlw	1
  6813  0CBC  118A  2609         	fcall	_Lights_Control
  6814  0CBE  0008               	return
  6815  0CBF                     __end_of_Lights_Main:	
  6816                           
  6817                           	psect	text38
  6818  0D56                     __ptext38:	
  6819 ;; *************** function _setLights_Main *****************
  6820 ;; Defined at:
  6821 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  lights          1    wreg     unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  lights          1    5[BANK0 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;		None               void
  6828 ;; Registers used:
  6829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6835 ;;      Params:         0       0       0       0
  6836 ;;      Locals:         0       1       0       0
  6837 ;;      Temps:          0       0       0       0
  6838 ;;      Totals:         0       1       0       0
  6839 ;;Total ram usage:        1 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    5
  6842 ;; This function calls:
  6843 ;;		_LightsPointSelect
  6844 ;;		_getLights_Allow_Condition
  6845 ;;		_setLights
  6846 ;; This function is called by:
  6847 ;;		_Lights_Main
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           
  6852                           ;psect for function _setLights_Main
  6853  0D56                     _setLights_Main:	
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6857                           ;setLights_Main@lights stored from wreg
  6858  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  6859  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  6860  0D58  00D2               	movwf	setLights_Main@lights
  6861                           
  6862                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6863  0D59  0852               	movf	setLights_Main@lights,w
  6864  0D5A  158A  2310  158A   	fcall	_LightsPointSelect
  6865                           
  6866                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6867  0D5D  0878               	movf	_Lights,w
  6868  0D5E  0084               	movwf	4
  6869  0D5F  1383               	bcf	3,7	;select IRP bank0
  6870  0D60  1880               	btfsc	0,1
  6871  0D61  0008               	return
  6872                           
  6873                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6874  0D62  0878               	movf	_Lights,w
  6875  0D63  0084               	movwf	4
  6876  0D64  1D80               	btfss	0,3
  6877  0D65  0008               	return
  6878                           
  6879                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6880  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6881  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6882  0D68  0852               	movf	setLights_Main@lights,w
  6883  0D69  158A  23ED  158A   	fcall	_getLights_Allow_Condition
  6884  0D6C  3800               	iorlw	0
  6885  0D6D  1D03               	skipz
  6886  0D6E  0008               	return
  6887                           
  6888                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6889  0D6F  0878               	movf	_Lights,w
  6890  0D70  0084               	movwf	4
  6891  0D71  1383               	bcf	3,7	;select IRP bank0
  6892  0D72  1180               	bcf	0,3
  6893                           
  6894                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6895  0D73  0878               	movf	_Lights,w
  6896  0D74  0084               	movwf	4
  6897  0D75  1E00               	btfss	0,4
  6898  0D76  2D7F               	goto	l4680
  6899                           
  6900                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6901  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  6902  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  6903  0D79  01CF               	clrf	setLights@status
  6904  0D7A  0ACF               	incf	setLights@status,f
  6905  0D7B  0852               	movf	setLights_Main@lights,w
  6906  0D7C  118A  268C         	fcall	_setLights
  6907                           
  6908                           ;TriacRelay_B1.c: 99: } else {
  6909  0D7E  0008               	return
  6910  0D7F                     l4680:	
  6911                           
  6912                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6913  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  6914  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  6915  0D81  01CF               	clrf	setLights@status
  6916  0D82  0852               	movf	setLights_Main@lights,w
  6917  0D83  118A  268C         	fcall	_setLights
  6918  0D85  0008               	return
  6919  0D86                     __end_of_setLights_Main:	
  6920                           
  6921                           	psect	text39
  6922  068C                     __ptext39:	
  6923 ;; *************** function _setLights *****************
  6924 ;; Defined at:
  6925 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  lights          1    wreg     unsigned char 
  6928 ;;  status          1    2[BANK0 ] unsigned char 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  lights          1    4[BANK0 ] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6940 ;;      Params:         0       1       0       0
  6941 ;;      Locals:         0       1       0       0
  6942 ;;      Temps:          0       1       0       0
  6943 ;;      Totals:         0       3       0       0
  6944 ;;Total ram usage:        3 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    4
  6947 ;; This function calls:
  6948 ;;		_setLED
  6949 ;;		_setLights_Line
  6950 ;; This function is called by:
  6951 ;;		_setLights_Main
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _setLights
  6957  068C                     _setLights:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6961                           ;setLights@lights stored from wreg
  6962  068C  1283               	bcf	3,5	;RP0=0, select bank0
  6963  068D  1303               	bcf	3,6	;RP1=0, select bank0
  6964  068E  00D1               	movwf	setLights@lights
  6965                           
  6966                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6967  068F  084F               	movf	setLights@status,w
  6968  0690  3A01               	xorlw	1
  6969  0691  1D03               	skipz
  6970  0692  2ECF               	goto	l4512
  6971                           
  6972                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6973  0693  0851               	movf	setLights@lights,w
  6974  0694  3A02               	xorlw	2
  6975  0695  1D03               	skipz
  6976  0696  2EA4               	goto	l4494
  6977                           
  6978                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  6979  0697  01CD               	clrf	setLED@command
  6980  0698  3001               	movlw	1
  6981  0699  158A  2735  118A   	fcall	_setLED
  6982                           
  6983                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  6984  069C  1283               	bcf	3,5	;RP0=0, select bank0
  6985  069D  1303               	bcf	3,6	;RP1=0, select bank0
  6986  069E  01CD               	clrf	setLED@command
  6987  069F  0ACD               	incf	setLED@command,f
  6988  06A0  3002               	movlw	2
  6989  06A1  158A  2735  118A   	fcall	_setLED
  6990  06A4                     l4494:	
  6991                           
  6992                           ;TriacRelay_B1.c: 121: }
  6993                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  6994  06A4  0878               	movf	_Lights,w
  6995  06A5  0084               	movwf	4
  6996  06A6  1383               	bcf	3,7	;select IRP bank0
  6997  06A7  1900               	btfsc	0,2
  6998  06A8  2EC8               	goto	l4508
  6999                           
  7000                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7001  06A9  0878               	movf	_Lights,w
  7002  06AA  0084               	movwf	4
  7003  06AB  1500               	bsf	0,2
  7004                           
  7005                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7006  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  7007  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  7008  06AE  0851               	movf	setLights@lights,w
  7009  06AF  3A01               	xorlw	1
  7010  06B0  1D03               	skipz
  7011  06B1  2EC8               	goto	l4508
  7012                           
  7013                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7014  06B2  1506               	bsf	6,2	;volatile
  7015                           
  7016                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7017  06B3  3064               	movlw	100
  7018  06B4  00D0               	movwf	??_setLights
  7019  06B5  0878               	movf	_Lights,w
  7020  06B6  3E04               	addlw	4
  7021  06B7  0084               	movwf	4
  7022  06B8  0850               	movf	??_setLights,w
  7023  06B9  0080               	movwf	0
  7024                           
  7025                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7026  06BA  308C               	movlw	140
  7027  06BB  00D0               	movwf	??_setLights
  7028  06BC  0878               	movf	_Lights,w
  7029  06BD  3E03               	addlw	3
  7030  06BE  0084               	movwf	4
  7031  06BF  0850               	movf	??_setLights,w
  7032  06C0  0080               	movwf	0
  7033                           
  7034                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7035  06C1  0878               	movf	_Lights,w
  7036  06C2  3E02               	addlw	2
  7037  06C3  0084               	movwf	4
  7038  06C4  0180               	clrf	0
  7039                           
  7040                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7041  06C5  0878               	movf	_Lights,w
  7042  06C6  0084               	movwf	4
  7043  06C7  1480               	bsf	0,1
  7044  06C8                     l4508:	
  7045                           
  7046                           ;TriacRelay_B1.c: 136: }
  7047                           ;TriacRelay_B1.c: 162: }
  7048                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7049  06C8  14F7               	bsf	_Light,1
  7050                           
  7051                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7052  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  7053  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  7054  06CB  0851               	movf	setLights@lights,w
  7055  06CC  158A  233D         	fcall	_setLights_Line
  7056                           
  7057                           ;TriacRelay_B1.c: 167: } else {
  7058  06CE  0008               	return
  7059  06CF                     l4512:	
  7060                           
  7061                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7062  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  7063  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  7064  06D1  0851               	movf	setLights@lights,w
  7065  06D2  3A02               	xorlw	2
  7066  06D3  1D03               	skipz
  7067  06D4  2EE2               	goto	l4516
  7068                           
  7069                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7070  06D5  01CD               	clrf	setLED@command
  7071  06D6  0ACD               	incf	setLED@command,f
  7072  06D7  3001               	movlw	1
  7073  06D8  158A  2735  118A   	fcall	_setLED
  7074                           
  7075                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7076  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  7077  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  7078  06DD  01CD               	clrf	setLED@command
  7079  06DE  3002               	movlw	2
  7080  06DF  158A  2735  118A   	fcall	_setLED
  7081  06E2                     l4516:	
  7082                           
  7083                           ;TriacRelay_B1.c: 173: }
  7084                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7085  06E2  0878               	movf	_Lights,w
  7086  06E3  0084               	movwf	4
  7087  06E4  1383               	bcf	3,7	;select IRP bank0
  7088  06E5  1D00               	btfss	0,2
  7089  06E6  2F06               	goto	l4530
  7090                           
  7091                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7092  06E7  0878               	movf	_Lights,w
  7093  06E8  0084               	movwf	4
  7094  06E9  1100               	bcf	0,2
  7095                           
  7096                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7097  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  7098  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  7099  06EC  0851               	movf	setLights@lights,w
  7100  06ED  3A01               	xorlw	1
  7101  06EE  1D03               	skipz
  7102  06EF  2F06               	goto	l4530
  7103                           
  7104                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7105  06F0  1506               	bsf	6,2	;volatile
  7106                           
  7107                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7108  06F1  3028               	movlw	40
  7109  06F2  00D0               	movwf	??_setLights
  7110  06F3  0878               	movf	_Lights,w
  7111  06F4  3E04               	addlw	4
  7112  06F5  0084               	movwf	4
  7113  06F6  0850               	movf	??_setLights,w
  7114  06F7  0080               	movwf	0
  7115                           
  7116                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7117  06F8  3050               	movlw	80
  7118  06F9  00D0               	movwf	??_setLights
  7119  06FA  0878               	movf	_Lights,w
  7120  06FB  3E03               	addlw	3
  7121  06FC  0084               	movwf	4
  7122  06FD  0850               	movf	??_setLights,w
  7123  06FE  0080               	movwf	0
  7124                           
  7125                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7126  06FF  0878               	movf	_Lights,w
  7127  0700  3E02               	addlw	2
  7128  0701  0084               	movwf	4
  7129  0702  0180               	clrf	0
  7130                           
  7131                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7132  0703  0878               	movf	_Lights,w
  7133  0704  0084               	movwf	4
  7134  0705  1480               	bsf	0,1
  7135  0706                     l4530:	
  7136                           
  7137                           ;TriacRelay_B1.c: 184: }
  7138                           ;TriacRelay_B1.c: 211: }
  7139                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7140  0706  10F7               	bcf	_Light,1
  7141                           
  7142                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7143  0707  3000               	movlw	0
  7144  0708  158A  233D         	fcall	_setLights_Line
  7145  070A  0008               	return
  7146  070B                     __end_of_setLights:	
  7147                           
  7148                           	psect	text40
  7149  0B3D                     __ptext40:	
  7150 ;; *************** function _setLights_Line *****************
  7151 ;; Defined at:
  7152 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  lights          1    wreg     unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  lights          1    4[COMMON] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;		None               void
  7159 ;; Registers used:
  7160 ;;		wreg
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7166 ;;      Params:         0       0       0       0
  7167 ;;      Locals:         1       0       0       0
  7168 ;;      Temps:          0       0       0       0
  7169 ;;      Totals:         1       0       0       0
  7170 ;;Total ram usage:        1 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    2
  7173 ;; This function calls:
  7174 ;;		Nothing
  7175 ;; This function is called by:
  7176 ;;		_setLights
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function _setLights_Line
  7182  0B3D                     _setLights_Line:	
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in _setLights_Line: [wreg]
  7186                           ;setLights_Line@lights stored from wreg
  7187  0B3D  00F4               	movwf	setLights_Line@lights
  7188                           
  7189                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7190  0B3E  1477               	bsf	_Light,0
  7191                           
  7192                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7193  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  7194  0B40  1303               	bcf	3,6	;RP1=0, select bank0
  7195  0B41  1041               	bcf	_Lights1+1,0
  7196                           
  7197                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7198  0B42  0874               	movf	setLights_Line@lights,w
  7199  0B43  3A01               	xorlw	1
  7200  0B44  1D03               	skipz
  7201  0B45  0008               	return
  7202  0B46  0874               	movf	setLights_Line@lights,w
  7203  0B47  1903               	btfsc	3,2
  7204  0B48  0008               	return
  7205                           
  7206                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7207  0B49  1441               	bsf	_Lights1+1,0
  7208  0B4A  0008               	return
  7209  0B4B                     __end_of_setLights_Line:	
  7210                           
  7211                           	psect	text41
  7212  0BED                     __ptext41:	
  7213 ;; *************** function _getLights_Allow_Condition *****************
  7214 ;; Defined at:
  7215 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  lights          1    wreg     unsigned char 
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;  lights          1    0[COMMON] unsigned char 
  7220 ;;  allow           1    0[BANK0 ] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      unsigned char 
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7230 ;;      Params:         0       0       0       0
  7231 ;;      Locals:         0       2       0       0
  7232 ;;      Temps:          1       0       0       0
  7233 ;;      Totals:         1       2       0       0
  7234 ;;Total ram usage:        3 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    3
  7237 ;; This function calls:
  7238 ;;		_getLoad_OK
  7239 ;; This function is called by:
  7240 ;;		_setLights_Main
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _getLights_Allow_Condition
  7246  0BED                     _getLights_Allow_Condition:	
  7247                           
  7248                           ;TriacRelay_B1.c: 368: char allow = 0;
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7252  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  7253  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  7254  0BEF  01CD               	clrf	getLights_Allow_Condition@allow
  7255                           
  7256                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7257  0BF0  01CE               	clrf	_getLights_Allow_Condition$4188
  7258  0BF1  0ACE               	incf	_getLights_Allow_Condition$4188,f
  7259  0BF2  158A  22E6  158A   	fcall	_getLoad_OK
  7260  0BF5  3800               	iorlw	0
  7261  0BF6  1903               	btfsc	3,2
  7262  0BF7  1877               	btfsc	_Light,0
  7263  0BF8  2BFC               	goto	l4482
  7264  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  7265  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  7266  0BFB  01CE               	clrf	_getLights_Allow_Condition$4188
  7267  0BFC                     l4482:	
  7268  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  7269  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  7270  0BFE  084E               	movf	_getLights_Allow_Condition$4188,w
  7271  0BFF  00F5               	movwf	??_getLights_Allow_Condition
  7272  0C00  0875               	movf	??_getLights_Allow_Condition,w
  7273  0C01  00CD               	movwf	getLights_Allow_Condition@allow
  7274                           
  7275                           ;TriacRelay_B1.c: 396: return allow;
  7276  0C02  084D               	movf	getLights_Allow_Condition@allow,w
  7277  0C03  0008               	return
  7278  0C04                     __end_of_getLights_Allow_Condition:	
  7279                           
  7280                           	psect	text42
  7281  0AE6                     __ptext42:	
  7282 ;; *************** function _getLoad_OK *****************
  7283 ;; Defined at:
  7284 ;;		line 272 in file "../src/OverLoad_B1.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  ok              1    4[COMMON] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      unsigned char 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7298 ;;      Params:         0       0       0       0
  7299 ;;      Locals:         1       0       0       0
  7300 ;;      Temps:          0       0       0       0
  7301 ;;      Totals:         1       0       0       0
  7302 ;;Total ram usage:        1 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    2
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_Lights_Main
  7309 ;;		_getLights_Allow_Condition
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           
  7314                           ;psect for function _getLoad_OK
  7315  0AE6                     _getLoad_OK:	
  7316                           
  7317                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  7318                           
  7319                           ;incstack = 0
  7320                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7321  0AE6  3000               	movlw	0
  7322  0AE7  1683               	bsf	3,5	;RP0=1, select bank1
  7323  0AE8  1303               	bcf	3,6	;RP1=0, select bank1
  7324  0AE9  1BCA               	btfsc	_Load^(0+128),7
  7325  0AEA  3001               	movlw	1
  7326  0AEB  00F4               	movwf	getLoad_OK@ok
  7327                           
  7328                           ;OverLoad_B1.c: 274: return ok;
  7329  0AEC  0874               	movf	getLoad_OK@ok,w
  7330  0AED  0008               	return
  7331  0AEE                     __end_of_getLoad_OK:	
  7332                           
  7333                           	psect	text43
  7334  0609                     __ptext43:	
  7335 ;; *************** function _Lights_Control *****************
  7336 ;; Defined at:
  7337 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  lights          1    wreg     unsigned char 
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;  lights          1   10[BANK0 ] unsigned char 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;		None               void
  7344 ;; Registers used:
  7345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7351 ;;      Params:         0       0       0       0
  7352 ;;      Locals:         0       1       0       0
  7353 ;;      Temps:          0       2       0       0
  7354 ;;      Totals:         0       3       0       0
  7355 ;;Total ram usage:        3 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    3
  7358 ;; This function calls:
  7359 ;;		_LightsPointSelect
  7360 ;;		___awdiv
  7361 ;; This function is called by:
  7362 ;;		_Lights_Main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function _Lights_Control
  7368  0609                     _Lights_Control:	
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7372                           ;Lights_Control@lights stored from wreg
  7373  0609  1283               	bcf	3,5	;RP0=0, select bank0
  7374  060A  1303               	bcf	3,6	;RP1=0, select bank0
  7375  060B  00D7               	movwf	Lights_Control@lights
  7376                           
  7377                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7378  060C  0857               	movf	Lights_Control@lights,w
  7379  060D  158A  2310  118A   	fcall	_LightsPointSelect
  7380                           
  7381                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7382  0610  0878               	movf	_Lights,w
  7383  0611  0084               	movwf	4
  7384  0612  1383               	bcf	3,7	;select IRP bank0
  7385  0613  1C80               	btfss	0,1
  7386  0614  0008               	return
  7387                           
  7388                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7389  0615  3001               	movlw	1
  7390  0616  1283               	bcf	3,5	;RP0=0, select bank0
  7391  0617  1303               	bcf	3,6	;RP1=0, select bank0
  7392  0618  00D5               	movwf	??_Lights_Control
  7393  0619  0878               	movf	_Lights,w
  7394  061A  3E02               	addlw	2
  7395  061B  0084               	movwf	4
  7396  061C  0855               	movf	??_Lights_Control,w
  7397  061D  0780               	addwf	0,f
  7398                           
  7399                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7400  061E  0878               	movf	_Lights,w
  7401  061F  0084               	movwf	4
  7402  0620  1B80               	btfsc	0,7
  7403  0621  2E58               	goto	l4698
  7404                           
  7405                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7406  0622  3014               	movlw	20
  7407  0623  00CD               	movwf	___awdiv@divisor
  7408  0624  3000               	movlw	0
  7409  0625  00CE               	movwf	___awdiv@divisor+1
  7410  0626  0878               	movf	_Lights,w
  7411  0627  3E04               	addlw	4
  7412  0628  0084               	movwf	4
  7413  0629  0800               	movf	0,w
  7414  062A  00D5               	movwf	??_Lights_Control
  7415  062B  01D6               	clrf	??_Lights_Control+1
  7416  062C  0855               	movf	??_Lights_Control,w
  7417  062D  00CF               	movwf	___awdiv@dividend
  7418  062E  0856               	movf	??_Lights_Control+1,w
  7419  062F  00D0               	movwf	___awdiv@dividend+1
  7420  0630  158A  26D8  118A   	fcall	___awdiv
  7421  0633  0878               	movf	_Lights,w
  7422  0634  3E02               	addlw	2
  7423  0635  0084               	movwf	4
  7424  0636  1283               	bcf	3,5	;RP0=0, select bank0
  7425  0637  1303               	bcf	3,6	;RP1=0, select bank0
  7426  0638  084E               	movf	?___awdiv+1,w
  7427  0639  3A80               	xorlw	128
  7428  063A  3C80               	sublw	128
  7429  063B  1D03               	skipz
  7430  063C  2E40               	goto	u5545
  7431  063D  084D               	movf	?___awdiv,w
  7432  063E  1383               	bcf	3,7	;select IRP bank0
  7433  063F  0200               	subwf	0,w
  7434  0640                     u5545:	
  7435  0640  1C03               	skipc
  7436  0641  0008               	return
  7437                           
  7438                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7439  0642  0878               	movf	_Lights,w
  7440  0643  0084               	movwf	4
  7441  0644  1383               	bcf	3,7	;select IRP bank0
  7442  0645  1780               	bsf	0,7
  7443                           
  7444                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7445  0646  1283               	bcf	3,5	;RP0=0, select bank0
  7446  0647  1303               	bcf	3,6	;RP1=0, select bank0
  7447  0648  0857               	movf	Lights_Control@lights,w
  7448  0649  3A01               	xorlw	1
  7449  064A  1D03               	skipz
  7450  064B  0008               	return
  7451                           
  7452                           ;TriacRelay_B1.c: 229: RB3 = Lights->Status == 1 ? 1 : 0;
  7453  064C  0878               	movf	_Lights,w
  7454  064D  0084               	movwf	4
  7455  064E  1D00               	btfss	0,2
  7456  064F  2E54               	goto	u5560
  7457  0650  1283               	bcf	3,5	;RP0=0, select bank0
  7458  0651  1303               	bcf	3,6	;RP1=0, select bank0
  7459  0652  1586               	bsf	6,3	;volatile
  7460  0653  0008               	return
  7461  0654                     u5560:	
  7462  0654  1283               	bcf	3,5	;RP0=0, select bank0
  7463  0655  1303               	bcf	3,6	;RP1=0, select bank0
  7464  0656  1186               	bcf	6,3	;volatile
  7465                           
  7466                           ;TriacRelay_B1.c: 230: }
  7467                           ;TriacRelay_B1.c: 242: }
  7468                           ;TriacRelay_B1.c: 243: } else {
  7469  0657  0008               	return
  7470  0658                     l4698:	
  7471                           
  7472                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7473  0658  3014               	movlw	20
  7474  0659  00CD               	movwf	___awdiv@divisor
  7475  065A  3000               	movlw	0
  7476  065B  00CE               	movwf	___awdiv@divisor+1
  7477  065C  0878               	movf	_Lights,w
  7478  065D  3E03               	addlw	3
  7479  065E  0084               	movwf	4
  7480  065F  1383               	bcf	3,7	;select IRP bank0
  7481  0660  0800               	movf	0,w
  7482  0661  00D5               	movwf	??_Lights_Control
  7483  0662  01D6               	clrf	??_Lights_Control+1
  7484  0663  0855               	movf	??_Lights_Control,w
  7485  0664  00CF               	movwf	___awdiv@dividend
  7486  0665  0856               	movf	??_Lights_Control+1,w
  7487  0666  00D0               	movwf	___awdiv@dividend+1
  7488  0667  158A  26D8  118A   	fcall	___awdiv
  7489  066A  0878               	movf	_Lights,w
  7490  066B  3E02               	addlw	2
  7491  066C  0084               	movwf	4
  7492  066D  1283               	bcf	3,5	;RP0=0, select bank0
  7493  066E  1303               	bcf	3,6	;RP1=0, select bank0
  7494  066F  084E               	movf	?___awdiv+1,w
  7495  0670  3A80               	xorlw	128
  7496  0671  3C80               	sublw	128
  7497  0672  1D03               	skipz
  7498  0673  2E77               	goto	u5585
  7499  0674  084D               	movf	?___awdiv,w
  7500  0675  1383               	bcf	3,7	;select IRP bank0
  7501  0676  0200               	subwf	0,w
  7502  0677                     u5585:	
  7503  0677  1C03               	skipc
  7504  0678  0008               	return
  7505                           
  7506                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7507  0679  0878               	movf	_Lights,w
  7508  067A  3E02               	addlw	2
  7509  067B  0084               	movwf	4
  7510  067C  1383               	bcf	3,7	;select IRP bank0
  7511  067D  0180               	clrf	0
  7512                           
  7513                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7514  067E  0878               	movf	_Lights,w
  7515  067F  0084               	movwf	4
  7516  0680  1080               	bcf	0,1
  7517                           
  7518                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7519  0681  0878               	movf	_Lights,w
  7520  0682  0084               	movwf	4
  7521  0683  1380               	bcf	0,7
  7522                           
  7523                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7524  0684  1283               	bcf	3,5	;RP0=0, select bank0
  7525  0685  1303               	bcf	3,6	;RP1=0, select bank0
  7526  0686  0857               	movf	Lights_Control@lights,w
  7527  0687  3A01               	xorlw	1
  7528  0688  1D03               	skipz
  7529  0689  0008               	return
  7530                           
  7531                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7532  068A  1106               	bcf	6,2	;volatile
  7533  068B  0008               	return
  7534  068C                     __end_of_Lights_Control:	
  7535                           
  7536                           	psect	text44
  7537  0ED8                     __ptext44:	
  7538 ;; *************** function ___awdiv *****************
  7539 ;; Defined at:
  7540 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  divisor         2    0[BANK0 ] int 
  7543 ;;  dividend        2    2[BANK0 ] int 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  quotient        2    6[BANK0 ] int 
  7546 ;;  sign            1    5[BANK0 ] unsigned char 
  7547 ;;  counter         1    4[BANK0 ] unsigned char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  2    0[BANK0 ] int 
  7550 ;; Registers used:
  7551 ;;		wreg, status,2, status,0
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7557 ;;      Params:         0       4       0       0
  7558 ;;      Locals:         0       4       0       0
  7559 ;;      Temps:          1       0       0       0
  7560 ;;      Totals:         1       8       0       0
  7561 ;;Total ram usage:        9 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    2
  7564 ;; This function calls:
  7565 ;;		Nothing
  7566 ;; This function is called by:
  7567 ;;		_getPIR_AD
  7568 ;;		_Lights_Control
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           
  7573                           ;psect for function ___awdiv
  7574  0ED8                     ___awdiv:	
  7575                           
  7576                           ;incstack = 0
  7577                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7578  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  7579  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  7580  0EDA  01D2               	clrf	___awdiv@sign
  7581  0EDB  1FCE               	btfss	___awdiv@divisor+1,7
  7582  0EDC  2EE4               	goto	l4548
  7583  0EDD  09CD               	comf	___awdiv@divisor,f
  7584  0EDE  09CE               	comf	___awdiv@divisor+1,f
  7585  0EDF  0ACD               	incf	___awdiv@divisor,f
  7586  0EE0  1903               	skipnz
  7587  0EE1  0ACE               	incf	___awdiv@divisor+1,f
  7588  0EE2  01D2               	clrf	___awdiv@sign
  7589  0EE3  0AD2               	incf	___awdiv@sign,f
  7590  0EE4                     l4548:	
  7591  0EE4  1FD0               	btfss	___awdiv@dividend+1,7
  7592  0EE5  2EEF               	goto	l4554
  7593  0EE6  09CF               	comf	___awdiv@dividend,f
  7594  0EE7  09D0               	comf	___awdiv@dividend+1,f
  7595  0EE8  0ACF               	incf	___awdiv@dividend,f
  7596  0EE9  1903               	skipnz
  7597  0EEA  0AD0               	incf	___awdiv@dividend+1,f
  7598  0EEB  3001               	movlw	1
  7599  0EEC  00F4               	movwf	??___awdiv
  7600  0EED  0874               	movf	??___awdiv,w
  7601  0EEE  06D2               	xorwf	___awdiv@sign,f
  7602  0EEF                     l4554:	
  7603  0EEF  01D3               	clrf	___awdiv@quotient
  7604  0EF0  01D4               	clrf	___awdiv@quotient+1
  7605  0EF1  084E               	movf	___awdiv@divisor+1,w
  7606  0EF2  044D               	iorwf	___awdiv@divisor,w
  7607  0EF3  1903               	skipnz
  7608  0EF4  2F26               	goto	l4576
  7609  0EF5  01D1               	clrf	___awdiv@counter
  7610  0EF6  0AD1               	incf	___awdiv@counter,f
  7611  0EF7                     l4564:	
  7612  0EF7  1BCE               	btfsc	___awdiv@divisor+1,7
  7613  0EF8  2F05               	goto	l4566
  7614  0EF9  3001               	movlw	1
  7615  0EFA                     u5245:	
  7616  0EFA  1003               	clrc
  7617  0EFB  0DCD               	rlf	___awdiv@divisor,f
  7618  0EFC  0DCE               	rlf	___awdiv@divisor+1,f
  7619  0EFD  3EFF               	addlw	-1
  7620  0EFE  1D03               	skipz
  7621  0EFF  2EFA               	goto	u5245
  7622  0F00  3001               	movlw	1
  7623  0F01  00F4               	movwf	??___awdiv
  7624  0F02  0874               	movf	??___awdiv,w
  7625  0F03  07D1               	addwf	___awdiv@counter,f
  7626  0F04  2EF7               	goto	l4564
  7627  0F05                     l4566:	
  7628  0F05  3001               	movlw	1
  7629  0F06                     u5265:	
  7630  0F06  1003               	clrc
  7631  0F07  0DD3               	rlf	___awdiv@quotient,f
  7632  0F08  0DD4               	rlf	___awdiv@quotient+1,f
  7633  0F09  3EFF               	addlw	-1
  7634  0F0A  1D03               	skipz
  7635  0F0B  2F06               	goto	u5265
  7636  0F0C  084E               	movf	___awdiv@divisor+1,w
  7637  0F0D  0250               	subwf	___awdiv@dividend+1,w
  7638  0F0E  1D03               	skipz
  7639  0F0F  2F12               	goto	u5275
  7640  0F10  084D               	movf	___awdiv@divisor,w
  7641  0F11  024F               	subwf	___awdiv@dividend,w
  7642  0F12                     u5275:	
  7643  0F12  1C03               	skipc
  7644  0F13  2F1B               	goto	l4572
  7645  0F14  084D               	movf	___awdiv@divisor,w
  7646  0F15  02CF               	subwf	___awdiv@dividend,f
  7647  0F16  084E               	movf	___awdiv@divisor+1,w
  7648  0F17  1C03               	skipc
  7649  0F18  03D0               	decf	___awdiv@dividend+1,f
  7650  0F19  02D0               	subwf	___awdiv@dividend+1,f
  7651  0F1A  1453               	bsf	___awdiv@quotient,0
  7652  0F1B                     l4572:	
  7653  0F1B  3001               	movlw	1
  7654  0F1C                     u5285:	
  7655  0F1C  1003               	clrc
  7656  0F1D  0CCE               	rrf	___awdiv@divisor+1,f
  7657  0F1E  0CCD               	rrf	___awdiv@divisor,f
  7658  0F1F  3EFF               	addlw	-1
  7659  0F20  1D03               	skipz
  7660  0F21  2F1C               	goto	u5285
  7661  0F22  3001               	movlw	1
  7662  0F23  02D1               	subwf	___awdiv@counter,f
  7663  0F24  1D03               	btfss	3,2
  7664  0F25  2F05               	goto	l4566
  7665  0F26                     l4576:	
  7666  0F26  0852               	movf	___awdiv@sign,w
  7667  0F27  1903               	btfsc	3,2
  7668  0F28  2F2E               	goto	l4580
  7669  0F29  09D3               	comf	___awdiv@quotient,f
  7670  0F2A  09D4               	comf	___awdiv@quotient+1,f
  7671  0F2B  0AD3               	incf	___awdiv@quotient,f
  7672  0F2C  1903               	skipnz
  7673  0F2D  0AD4               	incf	___awdiv@quotient+1,f
  7674  0F2E                     l4580:	
  7675  0F2E  0854               	movf	___awdiv@quotient+1,w
  7676  0F2F  01CE               	clrf	?___awdiv+1
  7677  0F30  07CE               	addwf	?___awdiv+1,f
  7678  0F31  0853               	movf	___awdiv@quotient,w
  7679  0F32  01CD               	clrf	?___awdiv
  7680  0F33  07CD               	addwf	?___awdiv,f
  7681  0F34  0008               	return
  7682  0F35                     __end_of___awdiv:	
  7683                           
  7684                           	psect	text45
  7685  0AB1                     __ptext45:	
  7686 ;; *************** function _Lights_Initialization *****************
  7687 ;; Defined at:
  7688 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;		None               void
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7702 ;;      Params:         0       0       0       0
  7703 ;;      Locals:         0       0       0       0
  7704 ;;      Temps:          0       0       0       0
  7705 ;;      Totals:         0       0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		_setLights_Initialization
  7711 ;; This function is called by:
  7712 ;;		_main
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function _Lights_Initialization
  7718  0AB1                     _Lights_Initialization:	
  7719                           
  7720                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7724  0AB1  3001               	movlw	1
  7725  0AB2  158A  22D0         	fcall	_setLights_Initialization
  7726  0AB4  0008               	return
  7727  0AB5                     __end_of_Lights_Initialization:	
  7728                           
  7729                           	psect	text46
  7730  0AD0                     __ptext46:	
  7731 ;; *************** function _setLights_Initialization *****************
  7732 ;; Defined at:
  7733 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  lights          1    wreg     unsigned char 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  lights          1    0[BANK0 ] unsigned char 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;		None               void
  7740 ;; Registers used:
  7741 ;;		wreg, status,2, status,0, pclath, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7747 ;;      Params:         0       0       0       0
  7748 ;;      Locals:         0       1       0       0
  7749 ;;      Temps:          0       0       0       0
  7750 ;;      Totals:         0       1       0       0
  7751 ;;Total ram usage:        1 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    3
  7754 ;; This function calls:
  7755 ;;		_LightsPointSelect
  7756 ;; This function is called by:
  7757 ;;		_Lights_Initialization
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _setLights_Initialization
  7763  0AD0                     _setLights_Initialization:	
  7764                           
  7765                           ;incstack = 0
  7766                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7767                           ;setLights_Initialization@lights stored from wreg
  7768  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
  7769  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
  7770  0AD2  00CD               	movwf	setLights_Initialization@lights
  7771                           
  7772                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7773  0AD3  084D               	movf	setLights_Initialization@lights,w
  7774  0AD4  158A  2310         	fcall	_LightsPointSelect
  7775  0AD6  0008               	return
  7776  0AD7                     __end_of_setLights_Initialization:	
  7777                           
  7778                           	psect	text47
  7779  0A9B                     __ptext47:	
  7780 ;; *************** function _LED_Main *****************
  7781 ;; Defined at:
  7782 ;;		line 47 in file "../src/LED_B1.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;		None
  7787 ;; Return value:  Size  Location     Type
  7788 ;;		None               void
  7789 ;; Registers used:
  7790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7796 ;;      Params:         0       0       0       0
  7797 ;;      Locals:         0       0       0       0
  7798 ;;      Temps:          0       0       0       0
  7799 ;;      Totals:         0       0       0       0
  7800 ;;Total ram usage:        0 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    5
  7803 ;; This function calls:
  7804 ;;		_setPIRLED_Main
  7805 ;; This function is called by:
  7806 ;;		_main
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           
  7811                           ;psect for function _LED_Main
  7812  0A9B                     _LED_Main:	
  7813                           
  7814                           ;LED_B1.c: 55: setPIRLED_Main();
  7815                           
  7816                           ;incstack = 0
  7817                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7818  0A9B  118A  277F         	fcall	_setPIRLED_Main
  7819  0A9D  0008               	return
  7820  0A9E                     __end_of_LED_Main:	
  7821                           
  7822                           	psect	text48
  7823  077F                     __ptext48:	
  7824 ;; *************** function _setPIRLED_Main *****************
  7825 ;; Defined at:
  7826 ;;		line 265 in file "../src/LED_B1.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;		None
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  count           1    3[BANK0 ] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7840 ;;      Params:         0       0       0       0
  7841 ;;      Locals:         0       1       0       0
  7842 ;;      Temps:          0       1       0       0
  7843 ;;      Totals:         0       2       0       0
  7844 ;;Total ram usage:        2 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    4
  7847 ;; This function calls:
  7848 ;;		_setLED
  7849 ;; This function is called by:
  7850 ;;		_LED_Main
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _setPIRLED_Main
  7856  077F                     _setPIRLED_Main:	
  7857                           
  7858                           ;LED_B1.c: 267: char count;
  7859                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7863  077F  1283               	bcf	3,5	;RP0=0, select bank0
  7864  0780  1303               	bcf	3,6	;RP1=0, select bank0
  7865  0781  1C2A               	btfss	_PIRLED,0
  7866  0782  0008               	return
  7867                           
  7868                           ;LED_B1.c: 269: PIRLED.Time++;
  7869  0783  3001               	movlw	1
  7870  0784  07AC               	addwf	_PIRLED+2,f
  7871  0785  1803               	skipnc
  7872  0786  0AAD               	incf	_PIRLED+3,f
  7873  0787  3000               	movlw	0
  7874  0788  07AD               	addwf	_PIRLED+3,f
  7875                           
  7876                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  7877  0789  3000               	movlw	0
  7878  078A  022D               	subwf	_PIRLED+3,w
  7879  078B  3019               	movlw	25
  7880  078C  1903               	skipnz
  7881  078D  022C               	subwf	_PIRLED+2,w
  7882  078E  1C03               	skipc
  7883  078F  0008               	return
  7884                           
  7885                           ;LED_B1.c: 271: PIRLED.Time = 0;
  7886  0790  01AC               	clrf	_PIRLED+2
  7887  0791  01AD               	clrf	_PIRLED+3
  7888                           
  7889                           ;LED_B1.c: 272: setLED(1, 0);
  7890  0792  01CD               	clrf	setLED@command
  7891  0793  3001               	movlw	1
  7892  0794  158A  2735  118A   	fcall	_setLED
  7893                           
  7894                           ;LED_B1.c: 273: setLED(2, 0);
  7895  0797  1283               	bcf	3,5	;RP0=0, select bank0
  7896  0798  1303               	bcf	3,6	;RP1=0, select bank0
  7897  0799  01CD               	clrf	setLED@command
  7898  079A  3002               	movlw	2
  7899  079B  158A  2735  118A   	fcall	_setLED
  7900                           
  7901                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  7902  079E  1283               	bcf	3,5	;RP0=0, select bank0
  7903  079F  1303               	bcf	3,6	;RP1=0, select bank0
  7904  07A0  1CAA               	btfss	_PIRLED,1
  7905  07A1  2FA6               	goto	l4620
  7906                           
  7907                           ;LED_B1.c: 275: count = 4;
  7908  07A2  3004               	movlw	4
  7909  07A3  00CF               	movwf	??_setPIRLED_Main
  7910  07A4  084F               	movf	??_setPIRLED_Main,w
  7911  07A5  00D0               	movwf	setPIRLED_Main@count
  7912  07A6                     l4620:	
  7913                           
  7914                           ;LED_B1.c: 276: }
  7915                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  7916  07A6  1D2A               	btfss	_PIRLED,2
  7917  07A7  2FAC               	goto	l4624
  7918                           
  7919                           ;LED_B1.c: 278: count = 6;
  7920  07A8  3006               	movlw	6
  7921  07A9  00CF               	movwf	??_setPIRLED_Main
  7922  07AA  084F               	movf	??_setPIRLED_Main,w
  7923  07AB  00D0               	movwf	setPIRLED_Main@count
  7924  07AC                     l4624:	
  7925                           
  7926                           ;LED_B1.c: 279: }
  7927                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  7928  07AC  1DAA               	btfss	_PIRLED,3
  7929  07AD  2FB2               	goto	l4628
  7930                           
  7931                           ;LED_B1.c: 281: count = 8;
  7932  07AE  3008               	movlw	8
  7933  07AF  00CF               	movwf	??_setPIRLED_Main
  7934  07B0  084F               	movf	??_setPIRLED_Main,w
  7935  07B1  00D0               	movwf	setPIRLED_Main@count
  7936  07B2                     l4628:	
  7937                           
  7938                           ;LED_B1.c: 282: }
  7939                           ;LED_B1.c: 283: PIRLED.Count++;
  7940  07B2  3001               	movlw	1
  7941  07B3  00CF               	movwf	??_setPIRLED_Main
  7942  07B4  084F               	movf	??_setPIRLED_Main,w
  7943  07B5  07AB               	addwf	_PIRLED+1,f
  7944                           
  7945                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7946  07B6  082B               	movf	_PIRLED+1,w
  7947  07B7  3A01               	xorlw	1
  7948  07B8  1903               	skipnz
  7949  07B9  2FBE               	goto	l4634
  7950  07BA  082B               	movf	_PIRLED+1,w
  7951  07BB  3A02               	xorlw	2
  7952  07BC  1D03               	skipz
  7953  07BD  2FD2               	goto	l4638
  7954  07BE                     l4634:	
  7955                           
  7956                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7957  07BE  1003               	clrc
  7958  07BF  1E2A               	btfss	_PIRLED,4
  7959  07C0  1403               	setc
  7960  07C1  1C03               	btfss	3,0
  7961  07C2  2FC7               	goto	u5400
  7962  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  7963  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  7964  07C5  162A               	bsf	_PIRLED,4
  7965  07C6  2FCA               	goto	l4636
  7966  07C7                     u5400:	
  7967  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  7968  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  7969  07C9  122A               	bcf	_PIRLED,4
  7970  07CA                     l4636:	
  7971                           
  7972                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  7973  07CA  3000               	movlw	0
  7974  07CB  1A2A               	btfsc	_PIRLED,4
  7975  07CC  3001               	movlw	1
  7976  07CD  00CD               	movwf	setLED@command
  7977  07CE  3002               	movlw	2
  7978  07CF  158A  2735         	fcall	_setLED
  7979                           
  7980                           ;LED_B1.c: 287: } else {
  7981  07D1  0008               	return
  7982  07D2                     l4638:	
  7983                           
  7984                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7985  07D2  1003               	clrc
  7986  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  7987  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  7988  07D5  1E2A               	btfss	_PIRLED,4
  7989  07D6  1403               	setc
  7990  07D7  1C03               	btfss	3,0
  7991  07D8  2FDD               	goto	u5420
  7992  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  7993  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  7994  07DB  162A               	bsf	_PIRLED,4
  7995  07DC  2FE0               	goto	l4640
  7996  07DD                     u5420:	
  7997  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  7998  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  7999  07DF  122A               	bcf	_PIRLED,4
  8000  07E0                     l4640:	
  8001                           
  8002                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8003  07E0  3000               	movlw	0
  8004  07E1  1A2A               	btfsc	_PIRLED,4
  8005  07E2  3001               	movlw	1
  8006  07E3  00CD               	movwf	setLED@command
  8007  07E4  3001               	movlw	1
  8008  07E5  158A  2735  118A   	fcall	_setLED
  8009                           
  8010                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8011  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  8012  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  8013  07EA  082B               	movf	_PIRLED+1,w
  8014  07EB  0650               	xorwf	setPIRLED_Main@count,w
  8015  07EC  1D03               	skipz
  8016  07ED  0008               	return
  8017                           
  8018                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8019  07EE  01AB               	clrf	_PIRLED+1
  8020  07EF  0008               	return
  8021  07F0                     __end_of_setPIRLED_Main:	
  8022                           
  8023                           	psect	text49
  8024  0ADE                     __ptext49:	
  8025 ;; *************** function _LED_Initialization *****************
  8026 ;; Defined at:
  8027 ;;		line 31 in file "../src/LED_B1.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;		None               void
  8034 ;; Registers used:
  8035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8041 ;;      Params:         0       0       0       0
  8042 ;;      Locals:         0       0       0       0
  8043 ;;      Temps:          0       0       0       0
  8044 ;;      Totals:         0       0       0       0
  8045 ;;Total ram usage:        0 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    5
  8048 ;; This function calls:
  8049 ;;		_setLED_Initialization
  8050 ;; This function is called by:
  8051 ;;		_main
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           
  8056                           ;psect for function _LED_Initialization
  8057  0ADE                     _LED_Initialization:	
  8058                           
  8059                           ;LED_B1.c: 33: setLED_Initialization(1);
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8063  0ADE  3001               	movlw	1
  8064  0ADF  158A  239B  158A   	fcall	_setLED_Initialization
  8065                           
  8066                           ;LED_B1.c: 36: setLED_Initialization(2);
  8067  0AE2  3002               	movlw	2
  8068  0AE3  158A  239B         	fcall	_setLED_Initialization
  8069  0AE5  0008               	return
  8070  0AE6                     __end_of_LED_Initialization:	
  8071                           
  8072                           	psect	text50
  8073  0B9B                     __ptext50:	
  8074 ;; *************** function _setLED_Initialization *****************
  8075 ;; Defined at:
  8076 ;;		line 74 in file "../src/LED_B1.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;  led             1    wreg     unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  led             1    2[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8090 ;;      Params:         0       0       0       0
  8091 ;;      Locals:         0       1       0       0
  8092 ;;      Temps:          0       0       0       0
  8093 ;;      Totals:         0       1       0       0
  8094 ;;Total ram usage:        1 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    4
  8097 ;; This function calls:
  8098 ;;		_LedPointSelect
  8099 ;;		_setLED
  8100 ;; This function is called by:
  8101 ;;		_LED_Initialization
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _setLED_Initialization
  8107  0B9B                     _setLED_Initialization:	
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8111                           ;setLED_Initialization@led stored from wreg
  8112  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  8113  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  8114  0B9D  00CF               	movwf	setLED_Initialization@led
  8115                           
  8116                           ;LED_B1.c: 75: LedPointSelect(led);
  8117  0B9E  084F               	movf	setLED_Initialization@led,w
  8118  0B9F  158A  2389  158A   	fcall	_LedPointSelect
  8119                           
  8120                           ;LED_B1.c: 76: LED->Enable = 1;
  8121  0BA2  0876               	movf	_LED,w
  8122  0BA3  0084               	movwf	4
  8123  0BA4  1383               	bcf	3,7	;select IRP bank0
  8124  0BA5  1400               	bsf	0,0
  8125                           
  8126                           ;LED_B1.c: 77: setLED(led, 0);
  8127  0BA6  1283               	bcf	3,5	;RP0=0, select bank0
  8128  0BA7  1303               	bcf	3,6	;RP1=0, select bank0
  8129  0BA8  01CD               	clrf	setLED@command
  8130  0BA9  084F               	movf	setLED_Initialization@led,w
  8131  0BAA  158A  2735         	fcall	_setLED
  8132  0BAC  0008               	return
  8133  0BAD                     __end_of_setLED_Initialization:	
  8134                           
  8135                           	psect	text51
  8136  0547                     __ptext51:	
  8137 ;; *************** function _Exception_Main *****************
  8138 ;; Defined at:
  8139 ;;		line 499 in file "../src/Main_B1.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  i               2   12[BANK0 ] int 
  8144 ;;  i               2   10[BANK0 ] int 
  8145 ;;  error           1   14[BANK0 ] unsigned char 
  8146 ;;  status          1    9[BANK0 ] unsigned char 
  8147 ;;  count           1    8[BANK0 ] unsigned char 
  8148 ;;  lights          1    7[BANK0 ] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;		None               void
  8151 ;; Registers used:
  8152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8158 ;;      Params:         0       0       0       0
  8159 ;;      Locals:         0       8       0       0
  8160 ;;      Temps:          0       1       0       0
  8161 ;;      Totals:         0       9       0       0
  8162 ;;Total ram usage:        9 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    5
  8165 ;; This function calls:
  8166 ;;		_getAll_Lights_Line
  8167 ;;		_getLights_Status
  8168 ;;		_getMain_All_Error_Status
  8169 ;;		_getMain_All_LightsStatus
  8170 ;;		_setLED
  8171 ;;		_setLights_SwOff
  8172 ;;		_setLights_SwOn
  8173 ;; This function is called by:
  8174 ;;		_main
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _Exception_Main
  8180  0547                     _Exception_Main:	
  8181                           
  8182                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8186  0547  3000               	movlw	0
  8187  0548  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  8188  054B  1283               	bcf	3,5	;RP0=0, select bank0
  8189  054C  1303               	bcf	3,6	;RP1=0, select bank0
  8190  054D  00D3               	movwf	??_Exception_Main
  8191  054E  0853               	movf	??_Exception_Main,w
  8192  054F  00DB               	movwf	Exception_Main@error
  8193                           
  8194                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8195  0550  01D4               	clrf	Exception_Main@lights
  8196  0551  01D5               	clrf	Exception_Main@count
  8197  0552  0AD5               	incf	Exception_Main@count,f
  8198                           
  8199                           ;Main_B1.c: 502: char status = 0;
  8200  0553  01D6               	clrf	Exception_Main@status
  8201                           
  8202                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8203  0554  1DA7               	btfss	_myMain+2,3
  8204  0555  2D62               	goto	l5254
  8205                           
  8206                           ;Main_B1.c: 505: if (error == 0) {
  8207  0556  08DB               	movf	Exception_Main@error,f
  8208  0557  1D03               	skipz
  8209  0558  0008               	return
  8210                           
  8211                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8212  0559  11A7               	bcf	_myMain+2,3
  8213                           
  8214                           ;Main_B1.c: 511: setLED(error, 110);
  8215  055A  306E               	movlw	110
  8216  055B  00D3               	movwf	??_Exception_Main
  8217  055C  0853               	movf	??_Exception_Main,w
  8218  055D  00CD               	movwf	setLED@command
  8219  055E  085B               	movf	Exception_Main@error,w
  8220  055F  158A  2735         	fcall	_setLED
  8221                           
  8222                           ;Main_B1.c: 522: }
  8223                           ;Main_B1.c: 523: } else {
  8224  0561  0008               	return
  8225  0562                     l5254:	
  8226                           
  8227                           ;Main_B1.c: 524: if (error != 0) {
  8228  0562  1283               	bcf	3,5	;RP0=0, select bank0
  8229  0563  1303               	bcf	3,6	;RP1=0, select bank0
  8230  0564  085B               	movf	Exception_Main@error,w
  8231  0565  1903               	btfsc	3,2
  8232  0566  0008               	return
  8233                           
  8234                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8235  0567  15A7               	bsf	_myMain+2,3
  8236                           
  8237                           ;Main_B1.c: 529: setLED(error, 111);
  8238  0568  306F               	movlw	111
  8239  0569  00D3               	movwf	??_Exception_Main
  8240  056A  0853               	movf	??_Exception_Main,w
  8241  056B  00CD               	movwf	setLED@command
  8242  056C  085B               	movf	Exception_Main@error,w
  8243  056D  158A  2735  118A   	fcall	_setLED
  8244                           
  8245                           ;Main_B1.c: 591: switch (error) {
  8246  0570  2DFA               	goto	l5290
  8247  0571                     l5260:	
  8248                           ;Main_B1.c: 592: case 1:
  8249                           
  8250                           
  8251                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8252  0571  1283               	bcf	3,5	;RP0=0, select bank0
  8253  0572  1303               	bcf	3,6	;RP1=0, select bank0
  8254  0573  01D7               	clrf	Exception_Main@i
  8255  0574  01D8               	clrf	Exception_Main@i+1
  8256  0575                     l5268:	
  8257  0575  0858               	movf	Exception_Main@i+1,w
  8258  0576  3A80               	xorlw	128
  8259  0577  00D3               	movwf	??_Exception_Main
  8260  0578  3080               	movlw	128
  8261  0579  0253               	subwf	??_Exception_Main,w
  8262  057A  1D03               	skipz
  8263  057B  2D7E               	goto	u6825
  8264  057C  0855               	movf	Exception_Main@count,w
  8265  057D  0257               	subwf	Exception_Main@i,w
  8266  057E                     u6825:	
  8267  057E  1803               	btfsc	3,0
  8268  057F  2DA1               	goto	u6820
  8269                           
  8270                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8271  0580  1283               	bcf	3,5	;RP0=0, select bank0
  8272  0581  1303               	bcf	3,6	;RP1=0, select bank0
  8273  0582  0857               	movf	Exception_Main@i,w
  8274  0583  3E01               	addlw	1
  8275  0584  158A  2367  118A   	fcall	_getLights_Status
  8276  0587  3A01               	xorlw	1
  8277  0588  1D03               	skipz
  8278  0589  2D98               	goto	l5266
  8279                           
  8280                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8281  058A  1283               	bcf	3,5	;RP0=0, select bank0
  8282  058B  1303               	bcf	3,6	;RP1=0, select bank0
  8283  058C  0857               	movf	Exception_Main@i,w
  8284  058D  3E01               	addlw	1
  8285  058E  158A  24E1  118A   	fcall	_setLights_SwOn
  8286                           
  8287                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8288  0591  1283               	bcf	3,5	;RP0=0, select bank0
  8289  0592  1303               	bcf	3,6	;RP1=0, select bank0
  8290  0593  0857               	movf	Exception_Main@i,w
  8291  0594  3E01               	addlw	1
  8292  0595  158A  241C  118A   	fcall	_setLights_SwOff
  8293  0598                     l5266:	
  8294  0598  3001               	movlw	1
  8295  0599  1283               	bcf	3,5	;RP0=0, select bank0
  8296  059A  1303               	bcf	3,6	;RP1=0, select bank0
  8297  059B  07D7               	addwf	Exception_Main@i,f
  8298  059C  1803               	skipnc
  8299  059D  0AD8               	incf	Exception_Main@i+1,f
  8300  059E  3000               	movlw	0
  8301  059F  07D8               	addwf	Exception_Main@i+1,f
  8302  05A0  2D75               	goto	l5268
  8303  05A1                     u6820:	
  8304  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8305  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8306  05A3  0008               	return
  8307  05A4                     l5270:	
  8308                           ;Main_B1.c: 601: case 2:
  8309                           
  8310                           ;Main_B1.c: 598: }
  8311                           ;Main_B1.c: 599: }
  8312                           ;Main_B1.c: 600: break;
  8313                           
  8314                           
  8315                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8316  05A4  158A  2307  118A   	fcall	_getMain_All_LightsStatus
  8317                           
  8318                           ;Main_B1.c: 604: }
  8319                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8320                           
  8321                           ;Main_B1.c: 603: ;;
  8322  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  8323  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  8324  05A9  01D9               	clrf	Exception_Main@i_2122
  8325  05AA  01DA               	clrf	Exception_Main@i_2122+1
  8326  05AB                     l5280:	
  8327  05AB  085A               	movf	Exception_Main@i_2122+1,w
  8328  05AC  3A80               	xorlw	128
  8329  05AD  00D3               	movwf	??_Exception_Main
  8330  05AE  3080               	movlw	128
  8331  05AF  0253               	subwf	??_Exception_Main,w
  8332  05B0  1D03               	skipz
  8333  05B1  2DB4               	goto	u6845
  8334  05B2  0855               	movf	Exception_Main@count,w
  8335  05B3  0259               	subwf	Exception_Main@i_2122,w
  8336  05B4                     u6845:	
  8337  05B4  1803               	btfsc	3,0
  8338  05B5  2DD7               	goto	u6840
  8339                           
  8340                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8341  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  8342  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  8343  05B8  0859               	movf	Exception_Main@i_2122,w
  8344  05B9  3E01               	addlw	1
  8345  05BA  158A  2367  118A   	fcall	_getLights_Status
  8346  05BD  3A01               	xorlw	1
  8347  05BE  1D03               	skipz
  8348  05BF  2DCE               	goto	l5278
  8349                           
  8350                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8351  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  8352  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  8353  05C2  0859               	movf	Exception_Main@i_2122,w
  8354  05C3  3E01               	addlw	1
  8355  05C4  158A  24E1  118A   	fcall	_setLights_SwOn
  8356                           
  8357                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8358  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  8359  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  8360  05C9  0859               	movf	Exception_Main@i_2122,w
  8361  05CA  3E01               	addlw	1
  8362  05CB  158A  241C  118A   	fcall	_setLights_SwOff
  8363  05CE                     l5278:	
  8364  05CE  3001               	movlw	1
  8365  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  8366  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  8367  05D1  07D9               	addwf	Exception_Main@i_2122,f
  8368  05D2  1803               	skipnc
  8369  05D3  0ADA               	incf	Exception_Main@i_2122+1,f
  8370  05D4  3000               	movlw	0
  8371  05D5  07DA               	addwf	Exception_Main@i_2122+1,f
  8372  05D6  2DAB               	goto	l5280
  8373  05D7                     u6840:	
  8374  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  8375  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  8376  05D9  0008               	return
  8377  05DA                     l5282:	
  8378                           ;Main_B1.c: 613: case 3:
  8379                           
  8380                           ;Main_B1.c: 610: }
  8381                           ;Main_B1.c: 611: }
  8382                           ;Main_B1.c: 612: break;
  8383                           
  8384                           
  8385                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8386  05DA  158A  22FE  118A   	fcall	_getAll_Lights_Line
  8387  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  8388  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  8389  05DF  00D3               	movwf	??_Exception_Main
  8390  05E0  0853               	movf	??_Exception_Main,w
  8391  05E1  00D6               	movwf	Exception_Main@status
  8392                           
  8393                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8394  05E2  0856               	movf	Exception_Main@status,w
  8395  05E3  158A  2367  118A   	fcall	_getLights_Status
  8396  05E6  3A01               	xorlw	1
  8397  05E7  1903               	btfsc	3,2
  8398  05E8  2DEC               	goto	l5286
  8399  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  8400  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  8401  05EB  0008               	return
  8402  05EC                     l5286:	
  8403                           
  8404                           ;Main_B1.c: 617: setLights_SwOn(status);
  8405  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  8406  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  8407  05EE  0856               	movf	Exception_Main@status,w
  8408  05EF  158A  24E1  118A   	fcall	_setLights_SwOn
  8409                           
  8410                           ;Main_B1.c: 618: setLights_SwOff(status);
  8411  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  8412  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  8413  05F4  0856               	movf	Exception_Main@status,w
  8414  05F5  158A  241C         	fcall	_setLights_SwOff
  8415  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  8416  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  8417  05F9  0008               	return
  8418  05FA                     l5290:	
  8419                           ;Main_B1.c: 623: }
  8420                           
  8421                           ;Main_B1.c: 620: }
  8422                           ;Main_B1.c: 621: ;;
  8423                           ;Main_B1.c: 622: break;
  8424                           
  8425  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  8426  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  8427  05FC  085B               	movf	Exception_Main@error,w
  8428                           
  8429                           ; Switch size 1, requested type "space"
  8430                           ; Number of cases is 3, Range of values is 1 to 3
  8431                           ; switch strategies available:
  8432                           ; Name         Instructions Cycles
  8433                           ; simple_byte           10     6 (average)
  8434                           ; direct_byte           16    10 (fixed)
  8435                           ; jumptable            263     9 (fixed)
  8436                           ;	Chosen strategy is simple_byte
  8437  05FD  3A01               	xorlw	1	; case 1
  8438  05FE  1903               	skipnz
  8439  05FF  2D71               	goto	l5260
  8440  0600  3A03               	xorlw	3	; case 2
  8441  0601  1903               	skipnz
  8442  0602  2DA4               	goto	l5270
  8443  0603  3A01               	xorlw	1	; case 3
  8444  0604  1903               	skipnz
  8445  0605  2DDA               	goto	l5282
  8446  0606  2E08               	goto	l621
  8447  0607  0008               	return
  8448  0608                     l621:	
  8449  0608  0008               	return
  8450  0609                     __end_of_Exception_Main:	
  8451                           
  8452                           	psect	text52
  8453  0CE1                     __ptext52:	
  8454 ;; *************** function _setLights_SwOn *****************
  8455 ;; Defined at:
  8456 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;  sw              1    wreg     unsigned char 
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;  sw              1    3[BANK0 ] unsigned char 
  8461 ;; Return value:  Size  Location     Type
  8462 ;;		None               void
  8463 ;; Registers used:
  8464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8470 ;;      Params:         0       0       0       0
  8471 ;;      Locals:         0       1       0       0
  8472 ;;      Temps:          0       0       0       0
  8473 ;;      Totals:         0       1       0       0
  8474 ;;Total ram usage:        1 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    4
  8477 ;; This function calls:
  8478 ;;		_LightsPointSelect
  8479 ;;		_getLights_Status
  8480 ;;		_setLights_Trigger
  8481 ;; This function is called by:
  8482 ;;		_Exception_Main
  8483 ;;		_PIR_Main
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _setLights_SwOn
  8489  0CE1                     _setLights_SwOn:	
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8493                           ;setLights_SwOn@sw stored from wreg
  8494  0CE1  1283               	bcf	3,5	;RP0=0, select bank0
  8495  0CE2  1303               	bcf	3,6	;RP1=0, select bank0
  8496  0CE3  00D0               	movwf	setLights_SwOn@sw
  8497                           
  8498                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8499  0CE4  0850               	movf	setLights_SwOn@sw,w
  8500  0CE5  158A  2310  158A   	fcall	_LightsPointSelect
  8501                           
  8502                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8503  0CE8  0A78               	incf	_Lights,w
  8504  0CE9  0084               	movwf	4
  8505  0CEA  1383               	bcf	3,7	;select IRP bank0
  8506  0CEB  1500               	bsf	0,2
  8507                           
  8508                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8509  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  8510  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  8511  0CEE  0850               	movf	setLights_SwOn@sw,w
  8512  0CEF  158A  2367  158A   	fcall	_getLights_Status
  8513  0CF2  3800               	iorlw	0
  8514  0CF3  1D03               	skipz
  8515  0CF4  2D01               	goto	l4656
  8516                           
  8517                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8518  0CF5  0A78               	incf	_Lights,w
  8519  0CF6  0084               	movwf	4
  8520  0CF7  1383               	bcf	3,7	;select IRP bank0
  8521  0CF8  1580               	bsf	0,3
  8522                           
  8523                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8524  0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  8525  0CFA  1303               	bcf	3,6	;RP1=0, select bank0
  8526  0CFB  01CD               	clrf	setLights_Trigger@command
  8527  0CFC  0ACD               	incf	setLights_Trigger@command,f
  8528  0CFD  0850               	movf	setLights_SwOn@sw,w
  8529  0CFE  158A  246A         	fcall	_setLights_Trigger
  8530                           
  8531                           ;TriacRelay_B1.c: 418: } else {
  8532  0D00  0008               	return
  8533  0D01                     l4656:	
  8534                           
  8535                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8536  0D01  0A78               	incf	_Lights,w
  8537  0D02  0084               	movwf	4
  8538  0D03  1383               	bcf	3,7	;select IRP bank0
  8539  0D04  1180               	bcf	0,3
  8540  0D05  0008               	return
  8541  0D06                     __end_of_setLights_SwOn:	
  8542                           
  8543                           	psect	text53
  8544  0B67                     __ptext53:	
  8545 ;; *************** function _getLights_Status *****************
  8546 ;; Defined at:
  8547 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;  lights          1    wreg     unsigned char 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  lights          1    0[BANK0 ] unsigned char 
  8552 ;;  status          1    1[BANK0 ] unsigned char 
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      unsigned char 
  8555 ;; Registers used:
  8556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8562 ;;      Params:         0       0       0       0
  8563 ;;      Locals:         0       2       0       0
  8564 ;;      Temps:          0       0       0       0
  8565 ;;      Totals:         0       2       0       0
  8566 ;;Total ram usage:        2 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    3
  8569 ;; This function calls:
  8570 ;;		_LightsPointSelect
  8571 ;; This function is called by:
  8572 ;;		_Exception_Main
  8573 ;;		_PIR_Main
  8574 ;;		_setLights_SwOn
  8575 ;;		_setLights_ErrorClose
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           
  8580                           ;psect for function _getLights_Status
  8581  0B67                     _getLights_Status:	
  8582                           
  8583                           ;incstack = 0
  8584                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8585                           ;getLights_Status@lights stored from wreg
  8586  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  8587  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  8588  0B69  00CD               	movwf	getLights_Status@lights
  8589                           
  8590                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8591  0B6A  084D               	movf	getLights_Status@lights,w
  8592  0B6B  158A  2310         	fcall	_LightsPointSelect
  8593                           
  8594                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8595  0B6D  0878               	movf	_Lights,w
  8596  0B6E  0084               	movwf	4
  8597  0B6F  3000               	movlw	0
  8598  0B70  1383               	bcf	3,7	;select IRP bank0
  8599  0B71  1900               	btfsc	0,2
  8600  0B72  3001               	movlw	1
  8601  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  8602  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  8603  0B75  00CE               	movwf	getLights_Status@status
  8604                           
  8605                           ;TriacRelay_B1.c: 274: return status;
  8606  0B76  084E               	movf	getLights_Status@status,w
  8607  0B77  0008               	return
  8608  0B78                     __end_of_getLights_Status:	
  8609                           
  8610                           	psect	text54
  8611  0C1C                     __ptext54:	
  8612 ;; *************** function _setLights_SwOff *****************
  8613 ;; Defined at:
  8614 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  sw              1    wreg     unsigned char 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  sw              1    3[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;		None               void
  8621 ;; Registers used:
  8622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8628 ;;      Params:         0       0       0       0
  8629 ;;      Locals:         0       1       0       0
  8630 ;;      Temps:          0       0       0       0
  8631 ;;      Totals:         0       1       0       0
  8632 ;;Total ram usage:        1 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    4
  8635 ;; This function calls:
  8636 ;;		_LightsPointSelect
  8637 ;;		_setLights_Trigger
  8638 ;; This function is called by:
  8639 ;;		_Exception_Main
  8640 ;;		_PIR_Main
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function _setLights_SwOff
  8646  0C1C                     _setLights_SwOff:	
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8650                           ;setLights_SwOff@sw stored from wreg
  8651  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  8652  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  8653  0C1E  00D0               	movwf	setLights_SwOff@sw
  8654                           
  8655                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8656  0C1F  0850               	movf	setLights_SwOff@sw,w
  8657  0C20  158A  2310  158A   	fcall	_LightsPointSelect
  8658                           
  8659                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8660  0C23  0A78               	incf	_Lights,w
  8661  0C24  0084               	movwf	4
  8662  0C25  1383               	bcf	3,7	;select IRP bank0
  8663  0C26  1D00               	btfss	0,2
  8664  0C27  0008               	return
  8665                           
  8666                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8667  0C28  0A78               	incf	_Lights,w
  8668  0C29  0084               	movwf	4
  8669  0C2A  1100               	bcf	0,2
  8670                           
  8671                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8672  0C2B  0A78               	incf	_Lights,w
  8673  0C2C  0084               	movwf	4
  8674  0C2D  1980               	btfsc	0,3
  8675  0C2E  0008               	return
  8676                           
  8677                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8678  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  8679  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  8680  0C31  01CD               	clrf	setLights_Trigger@command
  8681  0C32  0850               	movf	setLights_SwOff@sw,w
  8682  0C33  158A  246A         	fcall	_setLights_Trigger
  8683  0C35  0008               	return
  8684  0C36                     __end_of_setLights_SwOff:	
  8685                           
  8686                           	psect	text55
  8687  0C6A                     __ptext55:	
  8688 ;; *************** function _setLights_Trigger *****************
  8689 ;; Defined at:
  8690 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  lights          1    wreg     unsigned char 
  8693 ;;  command         1    0[BANK0 ] unsigned char 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  lights          1    2[BANK0 ] unsigned char 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;		None               void
  8698 ;; Registers used:
  8699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8705 ;;      Params:         0       1       0       0
  8706 ;;      Locals:         0       1       0       0
  8707 ;;      Temps:          0       1       0       0
  8708 ;;      Totals:         0       3       0       0
  8709 ;;Total ram usage:        3 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    3
  8712 ;; This function calls:
  8713 ;;		_LightsPointSelect
  8714 ;; This function is called by:
  8715 ;;		_setLights_SwOn
  8716 ;;		_setLights_SwOff
  8717 ;;		_setLights_ErrorClose
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _setLights_Trigger
  8723  0C6A                     _setLights_Trigger:	
  8724                           
  8725                           ;incstack = 0
  8726                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8727                           ;setLights_Trigger@lights stored from wreg
  8728  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  8729  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  8730  0C6C  00CF               	movwf	setLights_Trigger@lights
  8731                           
  8732                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8733  0C6D  084F               	movf	setLights_Trigger@lights,w
  8734  0C6E  158A  2310         	fcall	_LightsPointSelect
  8735                           
  8736                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8737  0C70  0878               	movf	_Lights,w
  8738  0C71  0084               	movwf	4
  8739  0C72  1383               	bcf	3,7	;select IRP bank0
  8740  0C73  1580               	bsf	0,3
  8741                           
  8742                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8743  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  8744  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  8745  0C76  084D               	movf	setLights_Trigger@command,w
  8746  0C77  3A01               	xorlw	1
  8747  0C78  3000               	movlw	0
  8748  0C79  1903               	skipnz
  8749  0C7A  3001               	movlw	1
  8750  0C7B  00CE               	movwf	??_setLights_Trigger
  8751  0C7C  0878               	movf	_Lights,w
  8752  0C7D  0084               	movwf	4
  8753  0C7E  0ECE               	swapf	??_setLights_Trigger,f
  8754  0C7F  0800               	movf	0,w
  8755  0C80  064E               	xorwf	??_setLights_Trigger,w
  8756  0C81  39EF               	andlw	-17
  8757  0C82  064E               	xorwf	??_setLights_Trigger,w
  8758  0C83  0080               	movwf	0
  8759  0C84  0008               	return
  8760  0C85                     __end_of_setLights_Trigger:	
  8761                           
  8762                           	psect	text56
  8763  0B10                     __ptext56:	
  8764 ;; *************** function _LightsPointSelect *****************
  8765 ;; Defined at:
  8766 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  lights          1    wreg     unsigned char 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  lights          1    5[COMMON] unsigned char 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8780 ;;      Params:         0       0       0       0
  8781 ;;      Locals:         1       0       0       0
  8782 ;;      Temps:          1       0       0       0
  8783 ;;      Totals:         2       0       0       0
  8784 ;;Total ram usage:        2 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    2
  8787 ;; This function calls:
  8788 ;;		Nothing
  8789 ;; This function is called by:
  8790 ;;		_setLights_Initialization
  8791 ;;		_setLights_Main
  8792 ;;		_Lights_Control
  8793 ;;		_getLights_Status
  8794 ;;		_setLights_Trigger
  8795 ;;		_setLights_SwOn
  8796 ;;		_setLights_SwOff
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           
  8801                           ;psect for function _LightsPointSelect
  8802  0B10                     _LightsPointSelect:	
  8803                           
  8804                           ;incstack = 0
  8805                           ; Regs used in _LightsPointSelect: [wreg]
  8806                           ;LightsPointSelect@lights stored from wreg
  8807  0B10  00F5               	movwf	LightsPointSelect@lights
  8808                           
  8809                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8810  0B11  0875               	movf	LightsPointSelect@lights,w
  8811  0B12  3A01               	xorlw	1
  8812  0B13  1D03               	skipz
  8813  0B14  0008               	return
  8814                           
  8815                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8816  0B15  3040               	movlw	_Lights1& (0+255)
  8817  0B16  00F4               	movwf	??_LightsPointSelect
  8818  0B17  0874               	movf	??_LightsPointSelect,w
  8819  0B18  00F8               	movwf	_Lights
  8820  0B19  0008               	return
  8821  0B1A                     __end_of_LightsPointSelect:	
  8822                           
  8823                           	psect	text57
  8824  0F35                     __ptext57:	
  8825 ;; *************** function _setLED *****************
  8826 ;; Defined at:
  8827 ;;		line 81 in file "../src/LED_B1.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  led             1    wreg     unsigned char 
  8830 ;;  command         1    0[BANK0 ] unsigned char 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  led             1    1[BANK0 ] unsigned char 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;		None               void
  8835 ;; Registers used:
  8836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8842 ;;      Params:         0       1       0       0
  8843 ;;      Locals:         0       1       0       0
  8844 ;;      Temps:          0       0       0       0
  8845 ;;      Totals:         0       2       0       0
  8846 ;;Total ram usage:        2 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    3
  8849 ;; This function calls:
  8850 ;;		_LedPointSelect
  8851 ;; This function is called by:
  8852 ;;		_setLED_Initialization
  8853 ;;		_setPIRLED_Main
  8854 ;;		_Exception_Main
  8855 ;;		_PIR_Main
  8856 ;;		_setLights
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function _setLED
  8862  0F35                     _setLED:	
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8866                           ;setLED@led stored from wreg
  8867  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8868  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8869  0F37  00CE               	movwf	setLED@led
  8870                           
  8871                           ;LED_B1.c: 82: LedPointSelect(led);
  8872  0F38  084E               	movf	setLED@led,w
  8873  0F39  158A  2389  158A   	fcall	_LedPointSelect
  8874                           
  8875                           ;LED_B1.c: 83: if (command == 0) {
  8876  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  8877  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  8878  0F3E  08CD               	movf	setLED@command,f
  8879  0F3F  1D03               	skipz
  8880  0F40  2F4A               	goto	l4386
  8881                           
  8882                           ;LED_B1.c: 85: if (led == 1) {
  8883  0F41  084E               	movf	setLED@led,w
  8884  0F42  3A01               	xorlw	1
  8885  0F43  1D03               	skipz
  8886  0F44  2F46               	goto	l4382
  8887                           
  8888                           ;LED_B1.c: 89: RA6 = 1;
  8889  0F45  1705               	bsf	5,6	;volatile
  8890  0F46                     l4382:	
  8891                           
  8892                           ;LED_B1.c: 91: }
  8893                           ;LED_B1.c: 94: if (led == 2) {
  8894  0F46  084E               	movf	setLED@led,w
  8895  0F47  3A02               	xorlw	2
  8896  0F48  1903               	btfsc	3,2
  8897                           
  8898                           ;LED_B1.c: 98: RA7 = 1;
  8899  0F49  1785               	bsf	5,7	;volatile
  8900  0F4A                     l4386:	
  8901                           
  8902                           ;LED_B1.c: 100: }
  8903                           ;LED_B1.c: 120: }
  8904                           ;LED_B1.c: 121: if (command == 1) {
  8905  0F4A  084D               	movf	setLED@command,w
  8906  0F4B  3A01               	xorlw	1
  8907  0F4C  1D03               	skipz
  8908  0F4D  2F57               	goto	l4396
  8909                           
  8910                           ;LED_B1.c: 123: if (led == 1) {
  8911  0F4E  084E               	movf	setLED@led,w
  8912  0F4F  3A01               	xorlw	1
  8913  0F50  1D03               	skipz
  8914  0F51  2F53               	goto	l4392
  8915                           
  8916                           ;LED_B1.c: 127: RA6 = 0;
  8917  0F52  1305               	bcf	5,6	;volatile
  8918  0F53                     l4392:	
  8919                           
  8920                           ;LED_B1.c: 129: }
  8921                           ;LED_B1.c: 132: if (led == 2) {
  8922  0F53  084E               	movf	setLED@led,w
  8923  0F54  3A02               	xorlw	2
  8924  0F55  1903               	btfsc	3,2
  8925                           
  8926                           ;LED_B1.c: 136: RA7 = 0;
  8927  0F56  1385               	bcf	5,7	;volatile
  8928  0F57                     l4396:	
  8929                           
  8930                           ;LED_B1.c: 138: }
  8931                           ;LED_B1.c: 158: }
  8932                           ;LED_B1.c: 159: if (command == 10) {
  8933  0F57  084D               	movf	setLED@command,w
  8934  0F58  3A0A               	xorlw	10
  8935  0F59  1D03               	skipz
  8936  0F5A  2F6E               	goto	l4410
  8937                           
  8938                           ;LED_B1.c: 160: LED->GO = 0;
  8939  0F5B  0876               	movf	_LED,w
  8940  0F5C  0084               	movwf	4
  8941  0F5D  1383               	bcf	3,7	;select IRP bank0
  8942  0F5E  1080               	bcf	0,1
  8943                           
  8944                           ;LED_B1.c: 161: LED->Time = 0;
  8945  0F5F  0A76               	incf	_LED,w
  8946  0F60  0084               	movwf	4
  8947  0F61  0180               	clrf	0
  8948  0F62  0A84               	incf	4,f
  8949  0F63  0180               	clrf	0
  8950                           
  8951                           ;LED_B1.c: 163: if (led == 1) {
  8952  0F64  084E               	movf	setLED@led,w
  8953  0F65  3A01               	xorlw	1
  8954  0F66  1D03               	skipz
  8955  0F67  2F6A               	goto	l4406
  8956                           
  8957                           ;LED_B1.c: 167: RA6 = 1;
  8958  0F68  1705               	bsf	5,6	;volatile
  8959                           
  8960                           ;LED_B1.c: 169: }
  8961  0F69  2F6E               	goto	l4410
  8962  0F6A                     l4406:	
  8963                           
  8964                           ;LED_B1.c: 172: else if (led == 2) {
  8965  0F6A  084E               	movf	setLED@led,w
  8966  0F6B  3A02               	xorlw	2
  8967  0F6C  1903               	btfsc	3,2
  8968                           
  8969                           ;LED_B1.c: 176: RA7 = 1;
  8970  0F6D  1785               	bsf	5,7	;volatile
  8971  0F6E                     l4410:	
  8972                           
  8973                           ;LED_B1.c: 178: }
  8974                           ;LED_B1.c: 198: }
  8975                           ;LED_B1.c: 199: if (command == 11) {
  8976  0F6E  084D               	movf	setLED@command,w
  8977  0F6F  3A0B               	xorlw	11
  8978  0F70  1D03               	skipz
  8979  0F71  2F76               	goto	l4414
  8980                           
  8981                           ;LED_B1.c: 200: LED->GO = 1;
  8982  0F72  0876               	movf	_LED,w
  8983  0F73  0084               	movwf	4
  8984  0F74  1383               	bcf	3,7	;select IRP bank0
  8985  0F75  1480               	bsf	0,1
  8986  0F76                     l4414:	
  8987                           
  8988                           ;LED_B1.c: 201: }
  8989                           ;LED_B1.c: 205: if (command == 111) {
  8990  0F76  084D               	movf	setLED@command,w
  8991  0F77  3A6F               	xorlw	111
  8992  0F78  1D03               	skipz
  8993  0F79  2F94               	goto	l4440
  8994                           
  8995                           ;LED_B1.c: 206: PIRLED.Count = 0;
  8996  0F7A  01AB               	clrf	_PIRLED+1
  8997                           
  8998                           ;LED_B1.c: 207: PIRLED.Time = 0;
  8999  0F7B  01AC               	clrf	_PIRLED+2
  9000  0F7C  01AD               	clrf	_PIRLED+3
  9001                           
  9002                           ;LED_B1.c: 208: PIRLED.status = 0;
  9003  0F7D  122A               	bcf	_PIRLED,4
  9004                           
  9005                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9006  0F7E  142A               	bsf	_PIRLED,0
  9007                           
  9008                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9009  0F7F  10AA               	bcf	_PIRLED,1
  9010                           
  9011                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9012  0F80  112A               	bcf	_PIRLED,2
  9013                           
  9014                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9015  0F81  11AA               	bcf	_PIRLED,3
  9016                           
  9017                           ;LED_B1.c: 213: if (led == 1) {
  9018  0F82  084E               	movf	setLED@led,w
  9019  0F83  3A01               	xorlw	1
  9020  0F84  1D03               	skipz
  9021  0F85  2F88               	goto	l4432
  9022                           
  9023                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9024  0F86  14AA               	bsf	_PIRLED,1
  9025                           
  9026                           ;LED_B1.c: 215: } else if (led == 2) {
  9027  0F87  0008               	return
  9028  0F88                     l4432:	
  9029  0F88  084E               	movf	setLED@led,w
  9030  0F89  3A02               	xorlw	2
  9031  0F8A  1D03               	skipz
  9032  0F8B  2F8E               	goto	l4436
  9033                           
  9034                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9035  0F8C  152A               	bsf	_PIRLED,2
  9036                           
  9037                           ;LED_B1.c: 217: } else if (led == 3) {
  9038  0F8D  0008               	return
  9039  0F8E                     l4436:	
  9040  0F8E  084E               	movf	setLED@led,w
  9041  0F8F  3A03               	xorlw	3
  9042  0F90  1D03               	skipz
  9043  0F91  0008               	return
  9044                           
  9045                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9046  0F92  15AA               	bsf	_PIRLED,3
  9047                           
  9048                           ;LED_B1.c: 219: }
  9049                           ;LED_B1.c: 220: } else if (command == 110) {
  9050  0F93  0008               	return
  9051  0F94                     l4440:	
  9052  0F94  084D               	movf	setLED@command,w
  9053  0F95  3A6E               	xorlw	110
  9054  0F96  1D03               	skipz
  9055  0F97  0008               	return
  9056                           
  9057                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9058  0F98  102A               	bcf	_PIRLED,0
  9059  0F99  0008               	return
  9060  0F9A                     __end_of_setLED:	
  9061                           
  9062                           	psect	text58
  9063  0B89                     __ptext58:	
  9064 ;; *************** function _LedPointSelect *****************
  9065 ;; Defined at:
  9066 ;;		line 7 in file "../src/LED_B1.c"
  9067 ;; Parameters:    Size  Location     Type
  9068 ;;  led             1    wreg     unsigned char 
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;  led             1    5[COMMON] unsigned char 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;		None               void
  9073 ;; Registers used:
  9074 ;;		wreg
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9080 ;;      Params:         0       0       0       0
  9081 ;;      Locals:         1       0       0       0
  9082 ;;      Temps:          1       0       0       0
  9083 ;;      Totals:         2       0       0       0
  9084 ;;Total ram usage:        2 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    2
  9087 ;; This function calls:
  9088 ;;		Nothing
  9089 ;; This function is called by:
  9090 ;;		_setLED_Initialization
  9091 ;;		_setLED
  9092 ;;		_setLED_Main
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _LedPointSelect
  9098  0B89                     _LedPointSelect:	
  9099                           
  9100                           ;incstack = 0
  9101                           ; Regs used in _LedPointSelect: [wreg]
  9102                           ;LedPointSelect@led stored from wreg
  9103  0B89  00F5               	movwf	LedPointSelect@led
  9104                           
  9105                           ;LED_B1.c: 9: if (led == 1) {
  9106  0B8A  0875               	movf	LedPointSelect@led,w
  9107  0B8B  3A01               	xorlw	1
  9108  0B8C  1D03               	skipz
  9109  0B8D  2B92               	goto	l254
  9110                           
  9111                           ;LED_B1.c: 10: LED = &VarLED1;
  9112  0B8E  3045               	movlw	_VarLED1& (0+255)
  9113  0B8F  00F4               	movwf	??_LedPointSelect
  9114  0B90  0874               	movf	??_LedPointSelect,w
  9115  0B91  00F6               	movwf	_LED
  9116  0B92                     l254:	
  9117                           
  9118                           ;LED_B1.c: 11: }
  9119                           ;LED_B1.c: 14: if (led == 2) {
  9120  0B92  0875               	movf	LedPointSelect@led,w
  9121  0B93  3A02               	xorlw	2
  9122  0B94  1D03               	skipz
  9123  0B95  0008               	return
  9124                           
  9125                           ;LED_B1.c: 15: LED = &VarLED2;
  9126  0B96  3049               	movlw	_VarLED2& (0+255)
  9127  0B97  00F4               	movwf	??_LedPointSelect
  9128  0B98  0874               	movf	??_LedPointSelect,w
  9129  0B99  00F6               	movwf	_LED
  9130  0B9A  0008               	return
  9131  0B9B                     __end_of_LedPointSelect:	
  9132                           
  9133                           	psect	text59
  9134  0B07                     __ptext59:	
  9135 ;; *************** function _getMain_All_LightsStatus *****************
  9136 ;; Defined at:
  9137 ;;		line 373 in file "../src/Main_B1.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  status          1    4[COMMON] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      unsigned char 
  9144 ;; Registers used:
  9145 ;;		wreg, status,2
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9151 ;;      Params:         0       0       0       0
  9152 ;;      Locals:         1       0       0       0
  9153 ;;      Temps:          0       0       0       0
  9154 ;;      Totals:         1       0       0       0
  9155 ;;Total ram usage:        1 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    2
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_Exception_Main
  9162 ;;		_Load_Main
  9163 ;;		_setTemp_Main
  9164 ;;		_Lights_Main
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function _getMain_All_LightsStatus
  9170  0B07                     _getMain_All_LightsStatus:	
  9171                           
  9172                           ;Main_B1.c: 374: char status = 0;
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9176  0B07  01F4               	clrf	getMain_All_LightsStatus@status
  9177                           
  9178                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9179  0B08  3000               	movlw	0
  9180  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  9181  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  9182  0B0B  1940               	btfsc	_Lights1,2
  9183  0B0C  3001               	movlw	1
  9184  0B0D  00F4               	movwf	getMain_All_LightsStatus@status
  9185                           
  9186                           ;Main_B1.c: 420: return status;
  9187  0B0E  0874               	movf	getMain_All_LightsStatus@status,w
  9188  0B0F  0008               	return
  9189  0B10                     __end_of_getMain_All_LightsStatus:	
  9190                           
  9191                           	psect	text60
  9192  0DBA                     __ptext60:	
  9193 ;; *************** function _getMain_All_Error_Status *****************
  9194 ;; Defined at:
  9195 ;;		line 424 in file "../src/Main_B1.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  command         1    wreg     unsigned char 
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;  command         1    4[BANK0 ] unsigned char 
  9200 ;;  status          1    5[BANK0 ] unsigned char 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      unsigned char 
  9203 ;; Registers used:
  9204 ;;		wreg, status,2, status,0
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9210 ;;      Params:         0       0       0       0
  9211 ;;      Locals:         0       6       0       0
  9212 ;;      Temps:          1       0       0       0
  9213 ;;      Totals:         1       6       0       0
  9214 ;;Total ram usage:        7 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    2
  9217 ;; This function calls:
  9218 ;;		Nothing
  9219 ;; This function is called by:
  9220 ;;		_Exception_Main
  9221 ;;		_Load_Main
  9222 ;;		_setTemp_Main
  9223 ;;		_PIR_Main
  9224 ;;		_setSYSC_Main
  9225 ;;		_Lights_Main
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _getMain_All_Error_Status
  9231  0DBA                     _getMain_All_Error_Status:	
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9235                           ;getMain_All_Error_Status@command stored from wreg
  9236  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  9237  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  9238  0DBC  00D1               	movwf	getMain_All_Error_Status@command
  9239                           
  9240                           ;Main_B1.c: 425: char status = 0;
  9241  0DBD  01D2               	clrf	getMain_All_Error_Status@status
  9242                           
  9243                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9244  0DBE  08D2               	movf	getMain_All_Error_Status@status,f
  9245  0DBF  1D03               	skipz
  9246  0DC0  2DC9               	goto	l3186
  9247  0DC1  0851               	movf	getMain_All_Error_Status@command,w
  9248  0DC2  3A01               	xorlw	1
  9249  0DC3  1903               	skipnz
  9250  0DC4  2DC9               	goto	l3186
  9251                           
  9252                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9253  0DC5  3000               	movlw	0
  9254  0DC6  18A0               	btfsc	_SYSC,1
  9255  0DC7  3001               	movlw	1
  9256  0DC8  00D2               	movwf	getMain_All_Error_Status@status
  9257  0DC9                     l3186:	
  9258                           
  9259                           ;Main_B1.c: 430: }
  9260                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9261  0DC9  08D2               	movf	getMain_All_Error_Status@status,f
  9262  0DCA  1D03               	skipz
  9263  0DCB  2DDD               	goto	l3196
  9264  0DCC  0851               	movf	getMain_All_Error_Status@command,w
  9265  0DCD  3A02               	xorlw	2
  9266  0DCE  1903               	skipnz
  9267  0DCF  2DDD               	goto	l3196
  9268                           
  9269                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9270  0DD0  18B9               	btfsc	_Temp,1
  9271  0DD1  2DD5               	goto	l3194
  9272  0DD2  01CD               	clrf	_getMain_All_Error_Status$2109
  9273  0DD3  01CE               	clrf	_getMain_All_Error_Status$2109+1
  9274  0DD4  2DD9               	goto	l590
  9275  0DD5                     l3194:	
  9276  0DD5  3002               	movlw	2
  9277  0DD6  00CD               	movwf	_getMain_All_Error_Status$2109
  9278  0DD7  3000               	movlw	0
  9279  0DD8  00CE               	movwf	_getMain_All_Error_Status$2109+1
  9280  0DD9                     l590:	
  9281  0DD9  084D               	movf	_getMain_All_Error_Status$2109,w
  9282  0DDA  00F4               	movwf	??_getMain_All_Error_Status
  9283  0DDB  0874               	movf	??_getMain_All_Error_Status,w
  9284  0DDC  00D2               	movwf	getMain_All_Error_Status@status
  9285  0DDD                     l3196:	
  9286                           
  9287                           ;Main_B1.c: 438: }
  9288                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9289  0DDD  08D2               	movf	getMain_All_Error_Status@status,f
  9290  0DDE  1D03               	skipz
  9291  0DDF  2DF6               	goto	l591
  9292  0DE0  0851               	movf	getMain_All_Error_Status@command,w
  9293  0DE1  3A03               	xorlw	3
  9294  0DE2  1903               	skipnz
  9295  0DE3  2DF6               	goto	l591
  9296                           
  9297                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9298  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  9299  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  9300  0DE6  1ACA               	btfsc	_Load^(0+128),5
  9301  0DE7  2DED               	goto	l3204
  9302  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  9303  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  9304  0DEA  01CF               	clrf	_getMain_All_Error_Status$2110
  9305  0DEB  01D0               	clrf	_getMain_All_Error_Status$2110+1
  9306  0DEC  2DF2               	goto	l595
  9307  0DED                     l3204:	
  9308  0DED  3003               	movlw	3
  9309  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  9310  0DEF  00CF               	movwf	_getMain_All_Error_Status$2110
  9311  0DF0  3000               	movlw	0
  9312  0DF1  00D0               	movwf	_getMain_All_Error_Status$2110+1
  9313  0DF2                     l595:	
  9314  0DF2  084F               	movf	_getMain_All_Error_Status$2110,w
  9315  0DF3  00F4               	movwf	??_getMain_All_Error_Status
  9316  0DF4  0874               	movf	??_getMain_All_Error_Status,w
  9317  0DF5  00D2               	movwf	getMain_All_Error_Status@status
  9318  0DF6                     l591:	
  9319                           
  9320                           ;Main_B1.c: 445: }
  9321                           ;Main_B1.c: 455: return status;
  9322  0DF6  0852               	movf	getMain_All_Error_Status@status,w
  9323  0DF7  0008               	return
  9324  0DF8                     __end_of_getMain_All_Error_Status:	
  9325                           
  9326                           	psect	text61
  9327  0AFE                     __ptext61:	
  9328 ;; *************** function _getAll_Lights_Line *****************
  9329 ;; Defined at:
  9330 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;  line            1    4[COMMON] unsigned char 
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  1    wreg      unsigned char 
  9337 ;; Registers used:
  9338 ;;		wreg, status,2
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9344 ;;      Params:         0       0       0       0
  9345 ;;      Locals:         1       0       0       0
  9346 ;;      Temps:          0       0       0       0
  9347 ;;      Totals:         1       0       0       0
  9348 ;;Total ram usage:        1 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    2
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_Exception_Main
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function _getAll_Lights_Line
  9360  0AFE                     _getAll_Lights_Line:	
  9361                           
  9362                           ;TriacRelay_B1.c: 311: char line = 0;
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9366  0AFE  01F4               	clrf	getAll_Lights_Line@line
  9367                           
  9368                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9369  0AFF  1283               	bcf	3,5	;RP0=0, select bank0
  9370  0B00  1303               	bcf	3,6	;RP1=0, select bank0
  9371  0B01  1C41               	btfss	_Lights1+1,0
  9372  0B02  2B05               	goto	l3450
  9373                           
  9374                           ;TriacRelay_B1.c: 314: line = 1;
  9375  0B03  01F4               	clrf	getAll_Lights_Line@line
  9376  0B04  0AF4               	incf	getAll_Lights_Line@line,f
  9377  0B05                     l3450:	
  9378                           
  9379                           ;TriacRelay_B1.c: 315: }
  9380                           ;TriacRelay_B1.c: 327: return line;
  9381  0B05  0874               	movf	getAll_Lights_Line@line,w
  9382  0B06  0008               	return
  9383  0B07                     __end_of_getAll_Lights_Line:	
  9384                           
  9385                           	psect	text62
  9386  0B2F                     __ptext62:	
  9387 ;; *************** function _DetectSYSC_Signal *****************
  9388 ;; Defined at:
  9389 ;;		line 50 in file "../src/SYSC_B1.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;		None
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;		None
  9394 ;; Return value:  Size  Location     Type
  9395 ;;		None               void
  9396 ;; Registers used:
  9397 ;;		status,2
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9403 ;;      Params:         0       0       0       0
  9404 ;;      Locals:         0       0       0       0
  9405 ;;      Temps:          0       0       0       0
  9406 ;;      Totals:         0       0       0       0
  9407 ;;Total ram usage:        0 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    2
  9410 ;; This function calls:
  9411 ;;		Nothing
  9412 ;; This function is called by:
  9413 ;;		_main
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function _DetectSYSC_Signal
  9419  0B2F                     _DetectSYSC_Signal:	
  9420                           
  9421                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9422                           
  9423                           ;incstack = 0
  9424                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9425  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  9426  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  9427  0B31  19A0               	btfsc	_SYSC,3
  9428  0B32  2B39               	goto	l1106
  9429                           
  9430                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9431  0B33  1E85               	btfss	5,5	;volatile
  9432  0B34  0008               	return
  9433                           
  9434                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9435  0B35  15A0               	bsf	_SYSC,3
  9436                           
  9437                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9438  0B36  01A1               	clrf	_SYSC+1
  9439  0B37  01A2               	clrf	_SYSC+2
  9440                           
  9441                           ;SYSC_B1.c: 55: }
  9442                           ;SYSC_B1.c: 56: } else {
  9443  0B38  0008               	return
  9444  0B39                     l1106:	
  9445                           
  9446                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9447  0B39  1A85               	btfsc	5,5	;volatile
  9448  0B3A  0008               	return
  9449                           
  9450                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9451  0B3B  11A0               	bcf	_SYSC,3
  9452  0B3C  0008               	return
  9453  0B3D                     __end_of_DetectSYSC_Signal:	
  9454                           
  9455                           	psect	text63
  9456  0D86                     __ptext63:	
  9457 ;; *************** function _CDS_Main *****************
  9458 ;; Defined at:
  9459 ;;		line 11 in file "../src/CDS_B1.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;		None
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;		None
  9464 ;; Return value:  Size  Location     Type
  9465 ;;		None               void
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9473 ;;      Params:         0       0       0       0
  9474 ;;      Locals:         0       0       0       0
  9475 ;;      Temps:          0       3       0       0
  9476 ;;      Totals:         0       3       0       0
  9477 ;;Total ram usage:        3 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    2
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_main
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _CDS_Main
  9489  0D86                     _CDS_Main:	
  9490                           
  9491                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9495  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  9496  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  9497  0D88  1C2E               	btfss	__CDS,0
  9498  0D89  0008               	return
  9499                           
  9500                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9501  0D8A  18AE               	btfsc	__CDS,1
  9502  0D8B  2D99               	goto	l117
  9503                           
  9504                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9505  0D8C  19AE               	btfsc	__CDS,3
  9506  0D8D  0008               	return
  9507                           
  9508                           ;CDS_B1.c: 16: _CDS.Time++;
  9509  0D8E  3001               	movlw	1
  9510  0D8F  00CD               	movwf	??_CDS_Main
  9511  0D90  084D               	movf	??_CDS_Main,w
  9512  0D91  07AF               	addwf	__CDS+1,f
  9513                           
  9514                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9515  0D92  3005               	movlw	5
  9516  0D93  022F               	subwf	__CDS+1,w
  9517  0D94  1C03               	skipc
  9518  0D95  0008               	return
  9519                           
  9520                           ;CDS_B1.c: 18: {
  9521                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9522  0D96  01AF               	clrf	__CDS+1
  9523                           
  9524                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9525  0D97  15AE               	bsf	__CDS,3
  9526                           
  9527                           ;CDS_B1.c: 21: }
  9528                           ;CDS_B1.c: 22: }
  9529                           ;CDS_B1.c: 23: } else {
  9530  0D98  0008               	return
  9531  0D99                     l117:	
  9532                           
  9533                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9534  0D99  1CAE               	btfss	__CDS,1
  9535  0D9A  0008               	return
  9536                           
  9537                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9538  0D9B  10AE               	bcf	__CDS,1
  9539                           
  9540                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9541  0D9C  1A2E               	btfsc	__CDS,4
  9542  0D9D  2DA4               	goto	l4768
  9543                           
  9544                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9545  0D9E  0830               	movf	__CDS+2,w
  9546  0D9F  0231               	subwf	__CDS+3,w
  9547  0DA0  1C03               	skipc
  9548  0DA1  0008               	return
  9549                           
  9550                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9551  0DA2  162E               	bsf	__CDS,4
  9552                           
  9553                           ;CDS_B1.c: 29: }
  9554                           ;CDS_B1.c: 30: } else {
  9555  0DA3  0008               	return
  9556  0DA4                     l4768:	
  9557                           
  9558                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9559  0DA4  0830               	movf	__CDS+2,w
  9560  0DA5  3E9C               	addlw	156
  9561  0DA6  00CD               	movwf	??_CDS_Main
  9562  0DA7  30FF               	movlw	255
  9563  0DA8  1803               	skipnc
  9564  0DA9  3000               	movlw	0
  9565  0DAA  00CE               	movwf	??_CDS_Main+1
  9566  0DAB  084E               	movf	??_CDS_Main+1,w
  9567  0DAC  3A80               	xorlw	128
  9568  0DAD  00CF               	movwf	??_CDS_Main+2
  9569  0DAE  3080               	movlw	128
  9570  0DAF  024F               	subwf	??_CDS_Main+2,w
  9571  0DB0  1D03               	skipz
  9572  0DB1  2DB4               	goto	u5785
  9573  0DB2  0831               	movf	__CDS+3,w
  9574  0DB3  024D               	subwf	??_CDS_Main,w
  9575  0DB4                     u5785:	
  9576  0DB4  1C03               	skipc
  9577  0DB5  0008               	return
  9578                           
  9579                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9580  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  9581  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  9582  0DB8  122E               	bcf	__CDS,4
  9583  0DB9  0008               	return
  9584  0DBA                     __end_of_CDS_Main:	
  9585                           
  9586                           	psect	text64
  9587  0AAD                     __ptext64:	
  9588 ;; *************** function _CDS_Initialization *****************
  9589 ;; Defined at:
  9590 ;;		line 7 in file "../src/CDS_B1.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;		None               void
  9597 ;; Registers used:
  9598 ;;		None
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9604 ;;      Params:         0       0       0       0
  9605 ;;      Locals:         0       0       0       0
  9606 ;;      Temps:          0       0       0       0
  9607 ;;      Totals:         0       0       0       0
  9608 ;;Total ram usage:        0 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    2
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_main
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _CDS_Initialization
  9620  0AAD                     _CDS_Initialization:	
  9621                           
  9622                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _CDS_Initialization: []
  9626  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  9627  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  9628  0AAF  142E               	bsf	__CDS,0
  9629  0AB0  0008               	return
  9630  0AB1                     __end_of_CDS_Initialization:	
  9631                           
  9632                           	psect	text65
  9633  0C04                     __ptext65:	
  9634 ;; *************** function _ISR *****************
  9635 ;; Defined at:
  9636 ;;		line 116 in file "../src/MCU_B1.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;		None
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;		None               void
  9643 ;; Registers used:
  9644 ;;		wreg, status,2, status,0, pclath, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9650 ;;      Params:         0       0       0       0
  9651 ;;      Locals:         0       0       0       0
  9652 ;;      Temps:          4       0       0       0
  9653 ;;      Totals:         4       0       0       0
  9654 ;;Total ram usage:        4 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    1
  9657 ;; This function calls:
  9658 ;;		_TMR1_ISR
  9659 ;; This function is called by:
  9660 ;;		Interrupt level 1
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function _ISR
  9666  0C04                     _ISR:	
  9667                           
  9668                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9669  0C04  1683               	bsf	3,5	;RP0=1, select bank1
  9670  0C05  1303               	bcf	3,6	;RP1=0, select bank1
  9671  0C06  1C0C               	btfss	12,0	;volatile
  9672  0C07  2C0F               	goto	i1l426
  9673  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  9674  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  9675  0C0A  1C0C               	btfss	12,0	;volatile
  9676  0C0B  2C0F               	goto	i1l426
  9677                           
  9678                           ;MCU_B1.c: 126: TMR1_ISR();
  9679  0C0C  158A  23C1  158A   	fcall	_TMR1_ISR
  9680  0C0F                     i1l426:	
  9681                           ;MCU_B1.c: 127: }
  9682                           ;MCU_B1.c: 148: return;
  9683                           
  9684  0C0F  0873               	movf	??_ISR+3,w
  9685  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  9686  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  9687  0C12  00FF               	movwf	127
  9688  0C13  0872               	movf	??_ISR+2,w
  9689  0C14  008A               	movwf	10
  9690  0C15  0871               	movf	??_ISR+1,w
  9691  0C16  0084               	movwf	4
  9692  0C17  0E70               	swapf	??_ISR^(0+-128),w
  9693  0C18  0083               	movwf	3
  9694  0C19  0EFE               	swapf	126,f
  9695  0C1A  0E7E               	swapf	126,w
  9696  0C1B  0009               	retfie
  9697  0C1C                     __end_of_ISR:	
  9698                           
  9699                           	psect	intentry
  9700  0004                     __pintentry:	
  9701                           ;incstack = 0
  9702                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9703                           
  9704  0004                     interrupt_function:	
  9705  007E                     saved_w	set	btemp
  9706  0004  00FE               	movwf	btemp
  9707  0005  0E03               	swapf	3,w
  9708  0006  00F0               	movwf	??_ISR
  9709  0007  0804               	movf	4,w
  9710  0008  00F1               	movwf	??_ISR+1
  9711  0009  080A               	movf	10,w
  9712  000A  00F2               	movwf	??_ISR+2
  9713  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9714  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9715  000D  087F               	movf	btemp+1,w
  9716  000E  00F3               	movwf	??_ISR+3
  9717  000F  158A  2C04         	ljmp	_ISR
  9718                           
  9719                           	psect	text66
  9720  0BC1                     __ptext66:	
  9721 ;; *************** function _TMR1_ISR *****************
  9722 ;; Defined at:
  9723 ;;		line 236 in file "../src/MCU_B1.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, status,2
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9737 ;;      Params:         0       0       0       0
  9738 ;;      Locals:         0       0       0       0
  9739 ;;      Temps:          0       0       0       0
  9740 ;;      Totals:         0       0       0       0
  9741 ;;Total ram usage:        0 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_ISR
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _TMR1_ISR
  9752  0BC1                     _TMR1_ISR:	
  9753                           
  9754                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9758  0BC1  30FA               	movlw	250
  9759  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  9760  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  9761  0BC4  008F               	movwf	15	;volatile
  9762                           
  9763                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  9764  0BC5  3038               	movlw	56
  9765  0BC6  008E               	movwf	14	;volatile
  9766                           
  9767                           ;MCU_B1.c: 240: TMR1IF = 0;
  9768  0BC7  100C               	bcf	12,0	;volatile
  9769                           
  9770                           ;MCU_B1.c: 271: Timer1.Count++;
  9771  0BC8  3001               	movlw	1
  9772  0BC9  07B3               	addwf	_Timer1+1,f
  9773  0BCA  1803               	skipnc
  9774  0BCB  0AB4               	incf	_Timer1+2,f
  9775  0BCC  3000               	movlw	0
  9776  0BCD  07B4               	addwf	_Timer1+2,f
  9777                           
  9778                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
  9779  0BCE  30C8               	movlw	200
  9780  0BCF  0633               	xorwf	_Timer1+1,w
  9781  0BD0  0434               	iorwf	_Timer1+2,w
  9782  0BD1  1D03               	skipz
  9783  0BD2  0008               	return
  9784                           
  9785                           ;MCU_B1.c: 273: Timer1.Count = 0;
  9786  0BD3  01B3               	clrf	_Timer1+1
  9787  0BD4  01B4               	clrf	_Timer1+2
  9788                           
  9789                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
  9790  0BD5  1432               	bsf	_Timer1,0
  9791  0BD6  0008               	return
  9792  0BD7                     __end_of_TMR1_ISR:	
  9793  007E                     btemp	set	126	;btemp
  9794  007E                     wtemp	set	126
  9795  007E                     wtemp0	set	126
  9796  0080                     wtemp1	set	128
  9797  0082                     wtemp2	set	130
  9798  0084                     wtemp3	set	132
  9799  0086                     wtemp4	set	134
  9800  0088                     wtemp5	set	136
  9801  007F                     wtemp6	set	127
  9802  007E                     ttemp	set	126
  9803  007E                     ttemp0	set	126
  9804  0081                     ttemp1	set	129
  9805  0084                     ttemp2	set	132
  9806  0087                     ttemp3	set	135
  9807  007F                     ttemp4	set	127
  9808  007E                     ltemp	set	126
  9809  007E                     ltemp0	set	126
  9810  0082                     ltemp1	set	130
  9811  0086                     ltemp2	set	134
  9812  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         119
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      68
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   25326
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     765
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2906
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     347
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0     347
                                              5 COMMON     1     1      0
                                              6 BANK0      5     5      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    3967
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4194
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2899
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2636
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1031
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     907
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2292
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2292
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2376
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2376
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4302
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2252
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      94       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      44       5       85.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      94      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Jan 17 11:39:36 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 0052                      setTemp_Main@AD 0057  
                                fsr 0004                 ___wmul@multiplicand 004F  
                               l117 0D99                                 l254 0B92  
                               l700 0411                                 l621 0608  
                               l710 03EA                                 l702 0268  
                               l711 03E8                                 l703 0264  
                               l704 025E                                 l716 0394  
                               l820 077B                                 l901 0091  
                               l590 0DD9                                 l591 0DF6  
                               l903 00A4                                 l826 0777  
                               l595 0DF2                                 l893 0211  
                               l894 008B                                 l895 0059  
                               _GIE 005F                                 _RB2 0032  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RA6 002E  
                               _RA7 002F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0C04                                 _PSA 040B  
                               _WDT 0035                   ??_setLights_SwOff 0076  
                               _Cmd 0037              getAll_Lights_Line@line 0074  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0ADE           __end_of_LightsPointSelect 0B1A  
                  _getLights_Status 0B67             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 005C  
                              l1106 0B39                                l1258 0CB6  
                              l3204 0DED                      _Load_Main$2369 0057  
                              l5000 0355                                l5010 0386  
                              l1379 0D12                                l5006 0365  
                              l5110 007B                                l3450 0B05  
                              l3194 0DD5                                l3186 0DC9  
                              l4410 0F6E                                l5018 03B1  
                              l3522 0767                                l3196 0DDD  
                              l5028 03CA                                l3532 0776  
                              l4414 0F76                                l4406 0F6A  
                              l5214 01E1                                l4432 0F88  
                              l4440 0F94                                l4512 06CF  
                              l5064 03FE                                l5160 00DE  
                              l4530 0706                                l5082 0CB7  
                              l3554 0E6A                                l4436 0F8E  
                              l5260 0571                                l4620 07A6  
                              l4516 06E2                                l4508 06C8  
                              l5164 00EA                                l5148 00C7  
                              l3548 0E4F                                l5324 0FB5  
                              l4382 0F46                                l5270 05A4  
                              l5254 0562                                l5166 00EB  
                              l4392 0F53                                l5280 05AB  
                              l4640 07E0                                l4624 07AC  
                              l4712 0D08                                l5192 0170  
                              l5184 013F                                l5176 012B  
                              l5336 0FD8                                l4386 0F4A  
                              l5282 05DA                                l5266 0598  
                              l5290 05FA                                l4634 07BE  
                              l4554 0EEF                                l4482 0BFC  
                              l3498 0737                                l4810 0EB7  
                              l4396 0F57                                l5268 0575  
                              l4636 07CA                                l4628 07B2  
                              l4580 0F2E                                l4572 0F1B  
                              l4564 0EF7                                l4548 0EE4  
                              l4740 0E26                                l4732 0E02  
                              l5196 01A2                                l4900 04EF  
                              l5286 05EC                                l5278 05CE  
                              l4638 07D2                                l4566 0F05  
                              l4494 06A4                                l4734 0E10  
                              l5198 01B1                                l4590 0C95  
                              l4806 0EAF                                l4656 0D01  
                              l4576 0F26                                l4680 0D7F  
                              l4744 0E31                                l4920 0545  
                              l4594 0C9B                                l4826 0ED3  
                              l4914 0537                                l4906 050B  
                              l4842 0D49                                l3866 0C60  
                              l4588 0C92                                l4870 0481  
                              l4862 046B                                l4768 0DA4  
                              l4952 0267                                l4936 0248  
                              l4698 0658                                l4890 04C1  
                              l4874 048C                                l4866 0476  
                              l4858 0460                                l4884 04A5  
                              l4974 02CA                                l4798 0E9B  
                              l4968 028E               _myMain_Initialization 07FF  
                      __CFG_WDTE$ON 0000                                u3325 0E76  
                              u5115 0BBB                                u5400 07C7  
                              _PEIE 005E                                u5420 07DD  
                              u5245 0EFA                                u5265 0F06  
                              u5275 0F12                                u5285 0F1C  
                              u5615 0D13                                u6175 028C  
                              u5560 0654                                u5545 0640  
                              u5625 0D1A                                u6185 02C8  
                              u6275 03A9                                u6195 031F  
                              u5655 0E05                                u5585 0677  
                              u6625 0109                                u5675 0E11  
                              u6635 0121                                u6820 05A1  
                              u5685 0E1D                                u5695 0E27  
                              u6655 0158                                u6840 05D7  
                              u5785 0DB4                                u6825 057E  
                              u6745 01FE                                u6675 0194  
                              u6845 05B4                                u6695 01C1  
                              __CDS 002E             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0039                                _main 0F9A  
                              btemp 007E                     __end_of_WDT_Set 0B67  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0DBA        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0C6A  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0A9E                  ?_setLights_Trigger 004D  
                  ??_setPIRLED_Main 004F                               ?_main 005F  
                   __end_of___awdiv 0F35                               _ADRES 001E  
                   ___awdiv@divisor 004D                               _T1CON 0010  
                   __end_of___lwdiv 0E38                               i1l426 0C0F  
                   ___awdiv@counter 0051                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0BC1  
                             _Light 0077                 ??_setLights_Trigger 004E  
                  __end_of_PIR_Main 022F                    __end_of_TMR1_ISR 0BD7  
                  __end_of_TMR1_Set 0B59                               _getAD 0C85  
    __end_of_setSYSC_Initialization 0AB9      getLights_Allow_Condition@allow 004D  
           __end_of_getLight_LoadGO 0AC4                    __end_of_WDT_Main 0B89  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0B24                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0BAD  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 005A  
                 getPIR_AD@channel2 0055              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0053                      _setLights_Main 0D56  
                    _setLights_Line 0B3D                     __initialization 0013  
                    _setLights_SwOn 0CE1                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0C85                        __end_of_main 1000  
                  __end_of_Fosc_Set 0ABE      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0547                           ??_ADC_Set 0074  
                            ??_main 0063               PIR_Main@Enable_Switch 0059  
               __end_of_Lights_Main 0CBF          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0B07                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 004F  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0DBA  
                            _FVRCON 009D              getLights_Status@lights 004D  
                            _PIRLED 002A                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0C36  
              Exception_Main@i_2122 0059              getLights_Status@status 004E  
            __end_of_setLights_Main 0D86              __end_of_setLights_Line 0B4B  
            __end_of_setLights_SwOn 0D06        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 07FF                              _Lights 0078  
                            _Timer1 0032         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 0609  
              Exception_Main@lights 0054                              ___wmul 0D06  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 0056                              _setLED 0F35  
                            _myMain 0025                    ___awdiv@quotient 0053  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 005B  
       __end_of_Load_Initialization 0AA1     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 0050  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0AA7                      _Lights_Control 0609  
           __size_of_LedPointSelect 0012                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0054                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                   ?_setLights_SwOn 0070                       ?_setSYSC_Main 0070  
                   _setLights_SwOff 0C1C          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 0022  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0B78  
                     __end_of_getAD 0CA1                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0ADE                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0CA1            _setLights_Initialization 0AD0  
              _getMain_Lights_Count 0B1A                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0419          __end_of_set_TimeoutCleared 0AD0  
               ?_LED_Initialization 0070              __end_of_Lights_Control 068C  
                           ??_getAD 0075                 _Temp_Initialization 0AA7  
                        ??_CDS_Main 004D                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0009                   __end_of_Temp_Main 0AAD  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F9A  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 005E                             ?___wmul 004D  
                        ??_PIR_Main 0053                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 007F  
                        _getLoad_AD 0E7C                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0AE6  
                           ?_setLED 004D             setLights_Trigger@lights 004F  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0AD7  
                        _getTemp_AD 0D2B                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0CE1                             _WDT_Set 0B59  
                     getPIR_AD@VRAD 005C                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 0547             ??_setLoad_AH_AL_Restore 0074  
           __end_of_setLights_SwOff 0C36      _getLights_Allow_Condition$4188 004E  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0050  
                        getCDS_AD@j 0051                             _Lights1 0040  
                           _VarLED1 0045                             _VarLED2 0049  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0ED8                     __size_of___wmul 0025  
                           ___lwdiv 0DF8          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 005D                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0C50  
                           __ptext2 07FF                             __ptext3 0D2B  
                           __ptext4 0419                             __ptext5 0E7C  
                           __ptext6 0CBF                             __ptext7 0C85  
                           __ptext8 0ACA                             __ptext9 0BAD  
                        getPIR_AD@i 005D                          getPIR_AD@j 0059  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0AA1             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0B89  
                   getTemp_AD@ADRES 0050                             clrloop0 0AF7  
                 __end_of_setLights 070B                end_of_initialization 0023  
                     _getCDS_Status 0AEE                ?_SYSC_Initialization 0070  
             _setLED_Initialization 0B9B                   setLights_SwOff@sw 0050  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0AB5                         ?_getTemp_AD 0070  
          setLED_Initialization@led 004F             setTemp_Main@DangerValue 0056  
                _Mcu_Initialization 07F0                __end_of_my_MainTimer 0C6A  
              __end_of_setSYSC_Main 0E7C              __end_of_LedPointSelect 0B9B  
          Load_Main@ErrorCountValue 0059                 setPIRLED_Main@count 0050  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 0052                    ??_setLights_SwOn 0076  
                         _SYSC_Main 0AA4     getMain_All_Error_Status@command 0051  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0053                      __end_of_IO_Set 0C50  
        __end_of_CDS_Initialization 0AB1          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0D2B  
                 __size_of_PIR_Main 0209                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 0F9A            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 022F                         __end_of_ISR 0C1C  
        __end_of_PIR_Initialization 0B2F        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0ACA     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 077F  
               __size_of_getLoad_AD 005C                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0ACA  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
               __size_of_getTemp_AD 002B              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0AAA                     setLights@lights 0051  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0075                 Exception_Main@count 0055  
                   setLights@status 004F                 Exception_Main@error 005B  
                          ??___wmul 0074    __end_of_getMain_All_LightsStatus 0B10  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 0055    __end_of_getMain_All_Error_Status 0DF8  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 005A  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 004D                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 0B07                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                       PIR_Main@error 0058  
                         _getCDS_AD 0CBF      __size_of_setLoad_AH_AL_Restore 0016  
     __end_of_setLoad_AH_AL_Restore 0BED                           _getPIR_AD 0419  
       __size_of_LED_Initialization 0008                     Exception_Main@i 0057  
                        ?_Temp_Main 0070                    ___lwdiv@dividend 004F  
                    Load_Main@error 0056              _setTemp_Initialization 0A9A  
                     _PIR_Main$2832 005A                            ?___awdiv 004D  
             __size_of_my_MainTimer 001A                            ?___lwdiv 004D  
             __size_of_setSYSC_Main 0044            setLights_Trigger@command 004D  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0BED  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0800  
                    __size_of_getAD 001C                    ___lwdiv@quotient 0052  
                    _setPIRLED_Main 077F                            _CDS_Main 0D86  
                       ??_SYSC_Main 0075         __end_of_Temp_Initialization 0AAA  
                 interrupt_function 0004                          ?_getCDS_AD 004D  
                    ___wmul@product 0074                            _LED_Main 0A9B  
                         _setLights 068C                           clear_ram0 0AF6  
  __end_of_setLights_Initialization 0AD7                        _my_MainTimer 0C50  
                        ?_getPIR_AD 0055                        _setSYSC_Main 0E38  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 005C                            _PIR_Main 0026  
                      ??_getLoad_AD 004D                            _TMR1_ISR 0BC1  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0AC4  
                          _TMR1_Set 0B4B                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 004D                            _WDT_Main 0B78  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 004D  
                    getPIR_AD@VRAD1 005B                __size_of_Lights_Main 001E  
             __size_of_setTemp_Main 0074                         ??_Load_Main 0054  
            __end_of_setPIRLED_Main 07F0      getMain_All_Error_Status@status 0052  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0009  
         ?_getMain_All_LightsStatus 0070                            _Fosc_Set 0AB9  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0ED8  
                __end_of_getLoad_OK 0AEE   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                          ?_setLights 004F  
                __end_of_getTemp_AD 0D56              _setSYSC_Initialization 0AB5  
                 getLoad_AD@channel 004F                   _DetectSYSC_Signal 0B2F  
                          _SwDetect 0038                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2110 004F       _getMain_All_Error_Status$2109 004D  
               _Load_Initialization 0A9E                  ?_DetectSYSC_Signal 0070  
                         setLED@led 004E               ?_getLight_Load_Status 0070  
                      _setTemp_Main 070B                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000A  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 0AAD  
             _Lights_Initialization 0AB1                   getTemp_AD@channel 004F  
                   ?_setPIRLED_Main 0070                     ___lwdiv@divisor 004D  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 0051                            __ptext10 0B78  
                          __ptext11 0002                            __ptext20 0026  
                          __ptext12 0AAA                            __ptext21 0AEE  
                          __ptext13 070B                            __ptext30 0B1A  
                          __ptext22 0B24                            __ptext14 0AA7  
                          __ptext31 0AC4                            __ptext23 07F0  
                          __ptext15 0A9A                            __ptext40 0B3D  
                          __ptext32 0ABE                            __ptext24 0B59  
                          __ptext16 0AA4                            __ptext41 0BED  
                          __ptext33 0D06                            __ptext25 0B4B  
                          __ptext17 0E38                            __ptext50 0B9B  
                          __ptext42 0AE6                            __ptext34 0DF8  
                          __ptext26 0C36                            __ptext18 0AA1  
                          __ptext51 0547                            __ptext43 0609  
                          __ptext35 0A9E                            __ptext27 0AB9  
                          __ptext19 0AB5                            __ptext60 0DBA  
                          __ptext52 0CE1                            __ptext44 0ED8  
                          __ptext36 0BD7                            __ptext28 0AD7  
                          __ptext61 0AFE                            __ptext53 0B67  
                          __ptext45 0AB1                            __ptext37 0CA1  
                          __ptext29 022F                            __ptext62 0B2F  
                          __ptext54 0C1C                            __ptext46 0AD0  
                          __ptext38 0D56                            __ptext63 0D86  
                          __ptext55 0C6A                            __ptext47 0A9B  
                          __ptext39 068C                            __ptext64 0AAD  
                          __ptext56 0B10                            __ptext48 077F  
                          __ptext65 0C04                            __ptext57 0F35  
                          __ptext49 0ADE                            __ptext66 0BC1  
                          __ptext58 0B89                            __ptext59 0B07  
         __size_of_getLights_Status 0011         __end_of_SYSC_Initialization 0AA4  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 004E  
                     setLED@command 004D           __end_of_DetectSYSC_Signal 0B3D  
                     __size_of_main 0066                         ??_getPIR_AD 0056  
                _PIR_Initialization 0B24                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 005F                            main@argv 0061  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 0057  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0055  
                       ??_setLights 0050             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0AFE  
                   getLoad_AD@ADRES 0052              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 0053                         getLoad_AD@j 0051  
                       getLoad_AD@k 0050             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00C2  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 004D  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0B10  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0BAD  
        __end_of_LED_Initialization 0AE6               __end_of_getCDS_Status 0AF6  
    __end_of_setTemp_Initialization 0A9B          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0ABE                   getCDS_AD@channel1 0052  
                 getCDS_AD@channel2 004D   __end_of_getLights_Allow_Condition 0C04  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0BD7  
