

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Mar 12 09:50:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text66,local,class=CODE,merge=1,delta=2
    79                           	psect	intentry,global,class=CODE,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0096                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009F                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0185                     	;# 
   149  0186                     	;# 
   150  018C                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0096                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009F                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0186                     	;# 
   219  018C                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0096                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009F                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0186                     	;# 
   288  018C                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0096                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009C                     	;# 
   345  009D                     	;# 
   346  009F                     	;# 
   347  0108                     	;# 
   348  0109                     	;# 
   349  010C                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010D                     	;# 
   353  010E                     	;# 
   354  010F                     	;# 
   355  0185                     	;# 
   356  0186                     	;# 
   357  018C                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0009                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000D                     	;# 
   371  000E                     	;# 
   372  000E                     	;# 
   373  000F                     	;# 
   374  0010                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0013                     	;# 
   378  0014                     	;# 
   379  0015                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0017                     	;# 
   383  0018                     	;# 
   384  0019                     	;# 
   385  001A                     	;# 
   386  001B                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  001D                     	;# 
   390  001E                     	;# 
   391  001F                     	;# 
   392  0081                     	;# 
   393  0085                     	;# 
   394  0086                     	;# 
   395  0087                     	;# 
   396  0089                     	;# 
   397  008C                     	;# 
   398  008D                     	;# 
   399  008E                     	;# 
   400  008F                     	;# 
   401  0090                     	;# 
   402  0091                     	;# 
   403  0092                     	;# 
   404  0093                     	;# 
   405  0093                     	;# 
   406  0094                     	;# 
   407  0095                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0096                     	;# 
   411  0098                     	;# 
   412  0099                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009F                     	;# 
   416  0108                     	;# 
   417  0109                     	;# 
   418  010C                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  010F                     	;# 
   424  0185                     	;# 
   425  0186                     	;# 
   426  018C                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0009                     	;# 
   436  000A                     	;# 
   437  000B                     	;# 
   438  000C                     	;# 
   439  000D                     	;# 
   440  000E                     	;# 
   441  000E                     	;# 
   442  000F                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0014                     	;# 
   448  0015                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0017                     	;# 
   452  0018                     	;# 
   453  0019                     	;# 
   454  001A                     	;# 
   455  001B                     	;# 
   456  001B                     	;# 
   457  001C                     	;# 
   458  001D                     	;# 
   459  001E                     	;# 
   460  001F                     	;# 
   461  0081                     	;# 
   462  0085                     	;# 
   463  0086                     	;# 
   464  0087                     	;# 
   465  0089                     	;# 
   466  008C                     	;# 
   467  008D                     	;# 
   468  008E                     	;# 
   469  008F                     	;# 
   470  0090                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0093                     	;# 
   474  0093                     	;# 
   475  0094                     	;# 
   476  0095                     	;# 
   477  0095                     	;# 
   478  0096                     	;# 
   479  0096                     	;# 
   480  0098                     	;# 
   481  0099                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009F                     	;# 
   485  0108                     	;# 
   486  0109                     	;# 
   487  010C                     	;# 
   488  010C                     	;# 
   489  010D                     	;# 
   490  010D                     	;# 
   491  010E                     	;# 
   492  010F                     	;# 
   493  0185                     	;# 
   494  0186                     	;# 
   495  018C                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000D                     	;# 
   509  000E                     	;# 
   510  000E                     	;# 
   511  000F                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0013                     	;# 
   516  0014                     	;# 
   517  0015                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  001D                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  0081                     	;# 
   531  0085                     	;# 
   532  0086                     	;# 
   533  0087                     	;# 
   534  0089                     	;# 
   535  008C                     	;# 
   536  008D                     	;# 
   537  008E                     	;# 
   538  008F                     	;# 
   539  0090                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0093                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0095                     	;# 
   547  0096                     	;# 
   548  0096                     	;# 
   549  0098                     	;# 
   550  0099                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009F                     	;# 
   554  0108                     	;# 
   555  0109                     	;# 
   556  010C                     	;# 
   557  010C                     	;# 
   558  010D                     	;# 
   559  010D                     	;# 
   560  010E                     	;# 
   561  010F                     	;# 
   562  0185                     	;# 
   563  0186                     	;# 
   564  018C                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001D                     	;# 
   597  001E                     	;# 
   598  001F                     	;# 
   599  0081                     	;# 
   600  0085                     	;# 
   601  0086                     	;# 
   602  0087                     	;# 
   603  0089                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  008F                     	;# 
   608  0090                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0096                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009F                     	;# 
   623  0108                     	;# 
   624  0109                     	;# 
   625  010C                     	;# 
   626  010C                     	;# 
   627  010D                     	;# 
   628  010D                     	;# 
   629  010E                     	;# 
   630  010F                     	;# 
   631  0185                     	;# 
   632  0186                     	;# 
   633  018C                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0089                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  008F                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0093                     	;# 
   682  0094                     	;# 
   683  0095                     	;# 
   684  0095                     	;# 
   685  0096                     	;# 
   686  0096                     	;# 
   687  0098                     	;# 
   688  0099                     	;# 
   689  009C                     	;# 
   690  009D                     	;# 
   691  009F                     	;# 
   692  0108                     	;# 
   693  0109                     	;# 
   694  010C                     	;# 
   695  010C                     	;# 
   696  010D                     	;# 
   697  010D                     	;# 
   698  010E                     	;# 
   699  010F                     	;# 
   700  0185                     	;# 
   701  0186                     	;# 
   702  018C                     	;# 
   703  0000                     	;# 
   704  0001                     	;# 
   705  0002                     	;# 
   706  0003                     	;# 
   707  0004                     	;# 
   708  0005                     	;# 
   709  0006                     	;# 
   710  0007                     	;# 
   711  0009                     	;# 
   712  000A                     	;# 
   713  000B                     	;# 
   714  000C                     	;# 
   715  000D                     	;# 
   716  000E                     	;# 
   717  000E                     	;# 
   718  000F                     	;# 
   719  0010                     	;# 
   720  0011                     	;# 
   721  0012                     	;# 
   722  0013                     	;# 
   723  0014                     	;# 
   724  0015                     	;# 
   725  0015                     	;# 
   726  0016                     	;# 
   727  0017                     	;# 
   728  0018                     	;# 
   729  0019                     	;# 
   730  001A                     	;# 
   731  001B                     	;# 
   732  001B                     	;# 
   733  001C                     	;# 
   734  001D                     	;# 
   735  001E                     	;# 
   736  001F                     	;# 
   737  0081                     	;# 
   738  0085                     	;# 
   739  0086                     	;# 
   740  0087                     	;# 
   741  0089                     	;# 
   742  008C                     	;# 
   743  008D                     	;# 
   744  008E                     	;# 
   745  008F                     	;# 
   746  0090                     	;# 
   747  0091                     	;# 
   748  0092                     	;# 
   749  0093                     	;# 
   750  0093                     	;# 
   751  0094                     	;# 
   752  0095                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0096                     	;# 
   756  0098                     	;# 
   757  0099                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009F                     	;# 
   761  0108                     	;# 
   762  0109                     	;# 
   763  010C                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  010F                     	;# 
   769  0185                     	;# 
   770  0186                     	;# 
   771  018C                     	;# 
   772  0000                     	;# 
   773  0001                     	;# 
   774  0002                     	;# 
   775  0003                     	;# 
   776  0004                     	;# 
   777  0005                     	;# 
   778  0006                     	;# 
   779  0007                     	;# 
   780  0009                     	;# 
   781  000A                     	;# 
   782  000B                     	;# 
   783  000C                     	;# 
   784  000D                     	;# 
   785  000E                     	;# 
   786  000E                     	;# 
   787  000F                     	;# 
   788  0010                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0014                     	;# 
   793  0015                     	;# 
   794  0015                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001B                     	;# 
   802  001C                     	;# 
   803  001D                     	;# 
   804  001E                     	;# 
   805  001F                     	;# 
   806  0081                     	;# 
   807  0085                     	;# 
   808  0086                     	;# 
   809  0087                     	;# 
   810  0089                     	;# 
   811  008C                     	;# 
   812  008D                     	;# 
   813  008E                     	;# 
   814  008F                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0093                     	;# 
   820  0094                     	;# 
   821  0095                     	;# 
   822  0095                     	;# 
   823  0096                     	;# 
   824  0096                     	;# 
   825  0098                     	;# 
   826  0099                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009F                     	;# 
   830  0108                     	;# 
   831  0109                     	;# 
   832  010C                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0185                     	;# 
   839  0186                     	;# 
   840  018C                     	;# 
   841  0000                     	;# 
   842  0001                     	;# 
   843  0002                     	;# 
   844  0003                     	;# 
   845  0004                     	;# 
   846  0005                     	;# 
   847  0006                     	;# 
   848  0007                     	;# 
   849  0009                     	;# 
   850  000A                     	;# 
   851  000B                     	;# 
   852  000C                     	;# 
   853  000D                     	;# 
   854  000E                     	;# 
   855  000E                     	;# 
   856  000F                     	;# 
   857  0010                     	;# 
   858  0011                     	;# 
   859  0012                     	;# 
   860  0013                     	;# 
   861  0014                     	;# 
   862  0015                     	;# 
   863  0015                     	;# 
   864  0016                     	;# 
   865  0017                     	;# 
   866  0018                     	;# 
   867  0019                     	;# 
   868  001A                     	;# 
   869  001B                     	;# 
   870  001B                     	;# 
   871  001C                     	;# 
   872  001D                     	;# 
   873  001E                     	;# 
   874  001F                     	;# 
   875  0081                     	;# 
   876  0085                     	;# 
   877  0086                     	;# 
   878  0087                     	;# 
   879  0089                     	;# 
   880  008C                     	;# 
   881  008D                     	;# 
   882  008E                     	;# 
   883  008F                     	;# 
   884  0090                     	;# 
   885  0091                     	;# 
   886  0092                     	;# 
   887  0093                     	;# 
   888  0093                     	;# 
   889  0094                     	;# 
   890  0095                     	;# 
   891  0095                     	;# 
   892  0096                     	;# 
   893  0096                     	;# 
   894  0098                     	;# 
   895  0099                     	;# 
   896  009C                     	;# 
   897  009D                     	;# 
   898  009F                     	;# 
   899  0108                     	;# 
   900  0109                     	;# 
   901  010C                     	;# 
   902  010C                     	;# 
   903  010D                     	;# 
   904  010D                     	;# 
   905  010E                     	;# 
   906  010F                     	;# 
   907  0185                     	;# 
   908  0186                     	;# 
   909  018C                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0009                     	;# 
   919  000A                     	;# 
   920  000B                     	;# 
   921  000C                     	;# 
   922  000D                     	;# 
   923  000E                     	;# 
   924  000E                     	;# 
   925  000F                     	;# 
   926  0010                     	;# 
   927  0011                     	;# 
   928  0012                     	;# 
   929  0013                     	;# 
   930  0014                     	;# 
   931  0015                     	;# 
   932  0015                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001B                     	;# 
   940  001C                     	;# 
   941  001D                     	;# 
   942  001E                     	;# 
   943  001F                     	;# 
   944  0081                     	;# 
   945  0085                     	;# 
   946  0086                     	;# 
   947  0087                     	;# 
   948  0089                     	;# 
   949  008C                     	;# 
   950  008D                     	;# 
   951  008E                     	;# 
   952  008F                     	;# 
   953  0090                     	;# 
   954  0091                     	;# 
   955  0092                     	;# 
   956  0093                     	;# 
   957  0093                     	;# 
   958  0094                     	;# 
   959  0095                     	;# 
   960  0095                     	;# 
   961  0096                     	;# 
   962  0096                     	;# 
   963  0098                     	;# 
   964  0099                     	;# 
   965  009C                     	;# 
   966  009D                     	;# 
   967  009F                     	;# 
   968  0108                     	;# 
   969  0109                     	;# 
   970  010C                     	;# 
   971  010C                     	;# 
   972  010D                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  010F                     	;# 
   976  0185                     	;# 
   977  0186                     	;# 
   978  018C                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0009                     	;# 
   988  000A                     	;# 
   989  000B                     	;# 
   990  000C                     	;# 
   991  000D                     	;# 
   992  000E                     	;# 
   993  000E                     	;# 
   994  000F                     	;# 
   995  0010                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0014                     	;# 
  1000  0015                     	;# 
  1001  0015                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001B                     	;# 
  1009  001C                     	;# 
  1010  001D                     	;# 
  1011  001E                     	;# 
  1012  001F                     	;# 
  1013  0081                     	;# 
  1014  0085                     	;# 
  1015  0086                     	;# 
  1016  0087                     	;# 
  1017  0089                     	;# 
  1018  008C                     	;# 
  1019  008D                     	;# 
  1020  008E                     	;# 
  1021  008F                     	;# 
  1022  0090                     	;# 
  1023  0091                     	;# 
  1024  0092                     	;# 
  1025  0093                     	;# 
  1026  0093                     	;# 
  1027  0094                     	;# 
  1028  0095                     	;# 
  1029  0095                     	;# 
  1030  0096                     	;# 
  1031  0096                     	;# 
  1032  0098                     	;# 
  1033  0099                     	;# 
  1034  009C                     	;# 
  1035  009D                     	;# 
  1036  009F                     	;# 
  1037  0108                     	;# 
  1038  0109                     	;# 
  1039  010C                     	;# 
  1040  010C                     	;# 
  1041  010D                     	;# 
  1042  010D                     	;# 
  1043  010E                     	;# 
  1044  010F                     	;# 
  1045  0185                     	;# 
  1046  0186                     	;# 
  1047  018C                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  000E                     	;# 
  1063  000F                     	;# 
  1064  0010                     	;# 
  1065  0011                     	;# 
  1066  0012                     	;# 
  1067  0013                     	;# 
  1068  0014                     	;# 
  1069  0015                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  001D                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  0081                     	;# 
  1083  0085                     	;# 
  1084  0086                     	;# 
  1085  0087                     	;# 
  1086  0089                     	;# 
  1087  008C                     	;# 
  1088  008D                     	;# 
  1089  008E                     	;# 
  1090  008F                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0093                     	;# 
  1095  0093                     	;# 
  1096  0094                     	;# 
  1097  0095                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0096                     	;# 
  1101  0098                     	;# 
  1102  0099                     	;# 
  1103  009C                     	;# 
  1104  009D                     	;# 
  1105  009F                     	;# 
  1106  0108                     	;# 
  1107  0109                     	;# 
  1108  010C                     	;# 
  1109  010C                     	;# 
  1110  010D                     	;# 
  1111  010D                     	;# 
  1112  010E                     	;# 
  1113  010F                     	;# 
  1114  0185                     	;# 
  1115  0186                     	;# 
  1116  018C                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  000E                     	;# 
  1132  000F                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  001D                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  0081                     	;# 
  1152  0085                     	;# 
  1153  0086                     	;# 
  1154  0087                     	;# 
  1155  0089                     	;# 
  1156  008C                     	;# 
  1157  008D                     	;# 
  1158  008E                     	;# 
  1159  008F                     	;# 
  1160  0090                     	;# 
  1161  0091                     	;# 
  1162  0092                     	;# 
  1163  0093                     	;# 
  1164  0093                     	;# 
  1165  0094                     	;# 
  1166  0095                     	;# 
  1167  0095                     	;# 
  1168  0096                     	;# 
  1169  0096                     	;# 
  1170  0098                     	;# 
  1171  0099                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009F                     	;# 
  1175  0108                     	;# 
  1176  0109                     	;# 
  1177  010C                     	;# 
  1178  010C                     	;# 
  1179  010D                     	;# 
  1180  010D                     	;# 
  1181  010E                     	;# 
  1182  010F                     	;# 
  1183  0185                     	;# 
  1184  0186                     	;# 
  1185  018C                     	;# 
  1186  0000                     	;# 
  1187  0001                     	;# 
  1188  0002                     	;# 
  1189  0003                     	;# 
  1190  0004                     	;# 
  1191  0005                     	;# 
  1192  0006                     	;# 
  1193  0007                     	;# 
  1194  0009                     	;# 
  1195  000A                     	;# 
  1196  000B                     	;# 
  1197  000C                     	;# 
  1198  000D                     	;# 
  1199  000E                     	;# 
  1200  000E                     	;# 
  1201  000F                     	;# 
  1202  0010                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0014                     	;# 
  1207  0015                     	;# 
  1208  0015                     	;# 
  1209  0016                     	;# 
  1210  0017                     	;# 
  1211  0018                     	;# 
  1212  0019                     	;# 
  1213  001A                     	;# 
  1214  001B                     	;# 
  1215  001B                     	;# 
  1216  001C                     	;# 
  1217  001D                     	;# 
  1218  001E                     	;# 
  1219  001F                     	;# 
  1220  0081                     	;# 
  1221  0085                     	;# 
  1222  0086                     	;# 
  1223  0087                     	;# 
  1224  0089                     	;# 
  1225  008C                     	;# 
  1226  008D                     	;# 
  1227  008E                     	;# 
  1228  008F                     	;# 
  1229  0090                     	;# 
  1230  0091                     	;# 
  1231  0092                     	;# 
  1232  0093                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0095                     	;# 
  1237  0096                     	;# 
  1238  0096                     	;# 
  1239  0098                     	;# 
  1240  0099                     	;# 
  1241  009C                     	;# 
  1242  009D                     	;# 
  1243  009F                     	;# 
  1244  0108                     	;# 
  1245  0109                     	;# 
  1246  010C                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  010D                     	;# 
  1250  010E                     	;# 
  1251  010F                     	;# 
  1252  0185                     	;# 
  1253  0186                     	;# 
  1254  018C                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000D                     	;# 
  1268  000E                     	;# 
  1269  000E                     	;# 
  1270  000F                     	;# 
  1271  0010                     	;# 
  1272  0011                     	;# 
  1273  0012                     	;# 
  1274  0013                     	;# 
  1275  0014                     	;# 
  1276  0015                     	;# 
  1277  0015                     	;# 
  1278  0016                     	;# 
  1279  0017                     	;# 
  1280  0018                     	;# 
  1281  0019                     	;# 
  1282  001A                     	;# 
  1283  001B                     	;# 
  1284  001B                     	;# 
  1285  001C                     	;# 
  1286  001D                     	;# 
  1287  001E                     	;# 
  1288  001F                     	;# 
  1289  0081                     	;# 
  1290  0085                     	;# 
  1291  0086                     	;# 
  1292  0087                     	;# 
  1293  0089                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  008F                     	;# 
  1298  0090                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0093                     	;# 
  1303  0094                     	;# 
  1304  0095                     	;# 
  1305  0095                     	;# 
  1306  0096                     	;# 
  1307  0096                     	;# 
  1308  0098                     	;# 
  1309  0099                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009F                     	;# 
  1313  0108                     	;# 
  1314  0109                     	;# 
  1315  010C                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  010F                     	;# 
  1321  0185                     	;# 
  1322  0186                     	;# 
  1323  018C                     	;# 
  1324  001F                     _ADCON0	set	31
  1325  001E                     _ADRES	set	30
  1326  0005                     _PORTA	set	5
  1327  0006                     _PORTB	set	6
  1328  0007                     _PORTC	set	7
  1329  0010                     _T1CON	set	16
  1330  000F                     _TMR1H	set	15
  1331  000E                     _TMR1L	set	14
  1332  005F                     _GIE	set	95
  1333  00F9                     _GO_nDONE	set	249
  1334  005E                     _PEIE	set	94
  1335  002D                     _RA5	set	45
  1336  002E                     _RA6	set	46
  1337  002F                     _RA7	set	47
  1338  0032                     _RB2	set	50
  1339  0033                     _RB3	set	51
  1340  0060                     _TMR1IF	set	96
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0085                     _TRISA	set	133
  1345  0086                     _TRISB	set	134
  1346  0087                     _TRISC	set	135
  1347  0095                     _WPUB	set	149
  1348  0408                     _PS0	set	1032
  1349  0409                     _PS1	set	1033
  1350  040A                     _PS2	set	1034
  1351  040B                     _PSA	set	1035
  1352  0460                     _TMR1IE	set	1120
  1353  0185                     _ANSELA	set	389
  1354  0186                     _ANSELB	set	390
  1355                           
  1356                           	psect	text0
  1357  0000                     __ptext0:	
  1358                           ; #config settings
  1359                           
  1360                           
  1361                           ;psect for function _TMR1_ISR
  1362  0000                     
  1363                           	psect	cinit
  1364  0013                     start_initialization:	
  1365  0013                     __initialization:	
  1366                           
  1367                           ; Clear objects allocated to COMMON
  1368  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1369  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1370  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1371  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1372                           
  1373                           ; Clear objects allocated to BANK0
  1374  0017  1383               	bcf	3,7	;select IRP bank0
  1375  0018  3020               	movlw	low __pbssBANK0
  1376  0019  0084               	movwf	4
  1377  001A  3050               	movlw	low (__pbssBANK0+48)
  1378  001B  158A  2282  118A   	fcall	clear_ram0
  1379                           
  1380                           ; Clear objects allocated to BANK1
  1381  001E  30A0               	movlw	low __pbssBANK1
  1382  001F  0084               	movwf	4
  1383  0020  30E6               	movlw	low (__pbssBANK1+70)
  1384  0021  158A  2282         	fcall	clear_ram0
  1385  0023                     end_of_initialization:	
  1386                           ;End of C runtime variable initialization code
  1387                           
  1388  0023                     __end_of__initialization:	
  1389  0023  0183               	clrf	3
  1390  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1391                           
  1392                           	psect	bssCOMMON
  1393  0076                     __pbssCOMMON:	
  1394  0076                     _LED:	
  1395  0076                     	ds	1
  1396  0077                     _Light:	
  1397  0077                     	ds	1
  1398  0078                     _Lights:	
  1399  0078                     	ds	1
  1400  0079                     _LightsControl:	
  1401  0079                     	ds	1
  1402                           
  1403                           	psect	bssBANK0
  1404  0020                     __pbssBANK0:	
  1405  0020                     _SYSC:	
  1406  0020                     	ds	5
  1407  0025                     _myMain:	
  1408  0025                     	ds	5
  1409  002A                     _PIRLED:	
  1410  002A                     	ds	4
  1411  002E                     __CDS:	
  1412  002E                     	ds	4
  1413  0032                     _Timer1:	
  1414  0032                     	ds	3
  1415  0035                     _WDT:	
  1416  0035                     	ds	2
  1417  0037                     _Cmd:	
  1418  0037                     	ds	1
  1419  0038                     _SwDetect:	
  1420  0038                     	ds	1
  1421  0039                     _Temp:	
  1422  0039                     	ds	10
  1423  0043                     _Lights1:	
  1424  0043                     	ds	5
  1425  0048                     _VarLED1:	
  1426  0048                     	ds	4
  1427  004C                     _VarLED2:	
  1428  004C                     	ds	4
  1429                           
  1430                           	psect	bssBANK1
  1431  00A0                     __pbssBANK1:	
  1432  00A0                     __PIR:	
  1433  00A0                     	ds	42
  1434  00CA                     _Load:	
  1435  00CA                     	ds	28
  1436                           
  1437                           	psect	clrtext
  1438  0A82                     clear_ram0:	
  1439                           ;	Called with FSR containing the base address, and
  1440                           ;	W with the last address+1
  1441                           
  1442  0A82  0064               	clrwdt	;clear the watchdog before getting into this loop
  1443  0A83                     clrloop0:	
  1444  0A83  0180               	clrf	0	;clear RAM location pointed to by FSR
  1445  0A84  0A84               	incf	4,f	;increment pointer
  1446  0A85  0604               	xorwf	4,w	;XOR with final address
  1447  0A86  1903               	btfsc	3,2	;have we reached the end yet?
  1448  0A87  3400               	retlw	0	;all done for this memory range, return
  1449  0A88  0604               	xorwf	4,w	;XOR again to restore value
  1450  0A89  2A83               	goto	clrloop0	;do the next byte
  1451                           
  1452                           	psect	cstackCOMMON
  1453  0070                     __pcstackCOMMON:	
  1454  0070                     ?_setLED_Initialization:	
  1455  0070                     ?_setPIRLED_Main:	
  1456                           ; 0 bytes @ 0x0
  1457                           
  1458  0070                     ?_Fosc_Set:	
  1459                           ; 0 bytes @ 0x0
  1460                           
  1461  0070                     ?_IO_Set:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_TMR1_Set:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Set:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_WDT_Set:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ?_TMR1_ISR:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ??_TMR1_ISR:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ?_Timeout_Counter:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ?_set_TimeoutCleared:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_WDT_Clearing:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ?_myMain_Initialization:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_SYSC_Initialization:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Temp_Initialization:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_Load_Initialization:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_Lights_Initialization:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_PIR_Initialization:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_DetectSYSC_Signal:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_getLoad_AD:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ?_getTemp_AD:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_my_MainTimer:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_SYSC_Main:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_Temp_Main:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_Load_Main:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_Lights_Main:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_PIR_Main:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Exception_Main:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_setLights_SwOn:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_setLights_SwOff:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_setLoad_AH_AL_Restore:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_setTemp_Initialization:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_setTemp_Main:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_setOverTemp_ADV_Restore:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_setSYSC_Initialization:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_setSYSC_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_setLights_Initialization:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_setLights_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_Lights_Control:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_setLights_Line:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_CDS_Initialization:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_CDS_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_LedPointSelect:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_LED_Initialization:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_LED_Main:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_Mcu_Initialization:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_ISR:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ??_ISR:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_WDT_Main:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_LightsPointSelect:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0070                     ?_getLights_Status:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0070                     ?_getAll_Lights_Line:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_getLight_LoadGO:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_getLight_Load_Status:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_getLights_Allow_Condition:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_getCDS_Status:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ?_getMain_All_LightsStatus:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_getMain_All_Error_Status:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_getMain_Lights_Count:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_getLoad_OK:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     getLights_Allow_Condition@lights:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635                           
  1636                           ; 1 bytes @ 0x0
  1637  0070                     	ds	4
  1638  0074                     ??_Fosc_Set:	
  1639  0074                     ??_IO_Set:	
  1640                           ; 0 bytes @ 0x4
  1641                           
  1642  0074                     ??_TMR1_Set:	
  1643                           ; 0 bytes @ 0x4
  1644                           
  1645  0074                     ??_ADC_Set:	
  1646                           ; 0 bytes @ 0x4
  1647                           
  1648  0074                     ??_WDT_Set:	
  1649                           ; 0 bytes @ 0x4
  1650                           
  1651  0074                     ??_Timeout_Counter:	
  1652                           ; 0 bytes @ 0x4
  1653                           
  1654  0074                     ??_set_TimeoutCleared:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0074                     ??_WDT_Clearing:	
  1658                           ; 0 bytes @ 0x4
  1659                           
  1660  0074                     ??_myMain_Initialization:	
  1661                           ; 0 bytes @ 0x4
  1662                           
  1663  0074                     ??_SYSC_Initialization:	
  1664                           ; 0 bytes @ 0x4
  1665                           
  1666  0074                     ??_Temp_Initialization:	
  1667                           ; 0 bytes @ 0x4
  1668                           
  1669  0074                     ??_PIR_Initialization:	
  1670                           ; 0 bytes @ 0x4
  1671                           
  1672  0074                     ??_DetectSYSC_Signal:	
  1673                           ; 0 bytes @ 0x4
  1674                           
  1675  0074                     ??_my_MainTimer:	
  1676                           ; 0 bytes @ 0x4
  1677                           
  1678  0074                     ??_getAll_Lights_Line:	
  1679                           ; 0 bytes @ 0x4
  1680                           
  1681  0074                     ??_setLoad_AH_AL_Restore:	
  1682                           ; 0 bytes @ 0x4
  1683                           
  1684  0074                     ??_getLight_LoadGO:	
  1685                           ; 0 bytes @ 0x4
  1686                           
  1687  0074                     ??_getLight_Load_Status:	
  1688                           ; 0 bytes @ 0x4
  1689                           
  1690  0074                     ??_setTemp_Initialization:	
  1691                           ; 0 bytes @ 0x4
  1692                           
  1693  0074                     ??_setOverTemp_ADV_Restore:	
  1694                           ; 0 bytes @ 0x4
  1695                           
  1696  0074                     ??_setSYSC_Initialization:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_setLights_Line:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_CDS_Initialization:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_getCDS_Status:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_LedPointSelect:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_WDT_Main:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_getMain_All_LightsStatus:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??_getMain_All_Error_Status:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??_getMain_Lights_Count:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??_getLoad_OK:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ??_LightsPointSelect:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     ??___wmul:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0074                     ??___awdiv:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0074                     ??___lwdiv:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0074                     ?_getAD:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0074                     getCDS_Status@status:	
  1742                           ; 1 bytes @ 0x4
  1743                           
  1744  0074                     getAD@adcon1:	
  1745                           ; 1 bytes @ 0x4
  1746                           
  1747  0074                     getMain_All_LightsStatus@status:	
  1748                           ; 1 bytes @ 0x4
  1749                           
  1750  0074                     getMain_Lights_Count@count:	
  1751                           ; 1 bytes @ 0x4
  1752                           
  1753  0074                     getLoad_OK@ok:	
  1754                           ; 1 bytes @ 0x4
  1755                           
  1756  0074                     setLights_Line@lights:	
  1757                           ; 1 bytes @ 0x4
  1758                           
  1759  0074                     getAll_Lights_Line@line:	
  1760                           ; 1 bytes @ 0x4
  1761                           
  1762  0074                     getLight_LoadGO@loadgo:	
  1763                           ; 1 bytes @ 0x4
  1764                           
  1765  0074                     getLight_Load_Status@loadstatus:	
  1766                           ; 1 bytes @ 0x4
  1767                           
  1768  0074                     setOverTemp_ADV_Restore@i:	
  1769                           ; 1 bytes @ 0x4
  1770                           
  1771  0074                     ___wmul@product:	
  1772                           ; 2 bytes @ 0x4
  1773                           
  1774                           
  1775                           ; 2 bytes @ 0x4
  1776  0074                     	ds	1
  1777  0075                     ??_getAD:	
  1778  0075                     ??_SYSC_Main:	
  1779                           ; 0 bytes @ 0x5
  1780                           
  1781  0075                     ??_setSYSC_Main:	
  1782                           ; 0 bytes @ 0x5
  1783                           
  1784  0075                     ??_getLights_Allow_Condition:	
  1785                           ; 0 bytes @ 0x5
  1786                           
  1787  0075                     ??_Mcu_Initialization:	
  1788                           ; 0 bytes @ 0x5
  1789                           
  1790  0075                     LedPointSelect@led:	
  1791                           ; 0 bytes @ 0x5
  1792                           
  1793  0075                     getAD@adcon0:	
  1794                           ; 1 bytes @ 0x5
  1795                           
  1796  0075                     getMain_Lights_Count@status1:	
  1797                           ; 1 bytes @ 0x5
  1798                           
  1799  0075                     setLoad_AH_AL_Restore@i:	
  1800                           ; 1 bytes @ 0x5
  1801                           
  1802  0075                     LightsPointSelect@lights:	
  1803                           ; 1 bytes @ 0x5
  1804                           
  1805                           
  1806                           ; 1 bytes @ 0x5
  1807  0075                     	ds	1
  1808  0076                     ??_setLED_Initialization:	
  1809  0076                     ??_setLED:	
  1810                           ; 0 bytes @ 0x6
  1811                           
  1812  0076                     ??_Load_Initialization:	
  1813                           ; 0 bytes @ 0x6
  1814                           
  1815  0076                     ??_Lights_Initialization:	
  1816                           ; 0 bytes @ 0x6
  1817                           
  1818  0076                     ??_Temp_Main:	
  1819                           ; 0 bytes @ 0x6
  1820                           
  1821  0076                     ??_Lights_Main:	
  1822                           ; 0 bytes @ 0x6
  1823                           
  1824  0076                     ??_getLights_Status:	
  1825                           ; 0 bytes @ 0x6
  1826                           
  1827  0076                     ??_setLights_SwOn:	
  1828                           ; 0 bytes @ 0x6
  1829                           
  1830  0076                     ??_setLights_SwOff:	
  1831                           ; 0 bytes @ 0x6
  1832                           
  1833  0076                     ??_setLights_Initialization:	
  1834                           ; 0 bytes @ 0x6
  1835                           
  1836  0076                     ??_setLights_Main:	
  1837                           ; 0 bytes @ 0x6
  1838                           
  1839  0076                     ??_LED_Initialization:	
  1840                           ; 0 bytes @ 0x6
  1841                           
  1842  0076                     ??_LED_Main:	
  1843                           ; 0 bytes @ 0x6
  1844                           
  1845                           
  1846                           	psect	cstackBANK0
  1847  0050                     __pcstackBANK0:	
  1848                           ; 0 bytes @ 0x6
  1849                           
  1850  0050                     ?_setLED:	
  1851  0050                     ??_getLoad_AD:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0050                     ??_getTemp_AD:	
  1855                           ; 0 bytes @ 0x0
  1856                           
  1857  0050                     ??_CDS_Main:	
  1858                           ; 0 bytes @ 0x0
  1859                           
  1860  0050                     ?_getCDS_AD:	
  1861                           ; 0 bytes @ 0x0
  1862                           
  1863  0050                     ?_setLights_Trigger:	
  1864                           ; 0 bytes @ 0x0
  1865                           
  1866  0050                     ?___wmul:	
  1867                           ; 0 bytes @ 0x0
  1868                           
  1869  0050                     ?___awdiv:	
  1870                           ; 2 bytes @ 0x0
  1871                           
  1872  0050                     ?___lwdiv:	
  1873                           ; 2 bytes @ 0x0
  1874                           
  1875  0050                     getCDS_AD@channel2:	
  1876                           ; 2 bytes @ 0x0
  1877                           
  1878  0050                     setLED@command:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0050                     setLights_Initialization@lights:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0050                     getLights_Status@lights:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0050                     setLights_Trigger@command:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0050                     getLights_Allow_Condition@allow:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0050                     _getMain_All_Error_Status$2127:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0050                     ___wmul@multiplier:	
  1897                           ; 2 bytes @ 0x0
  1898                           
  1899  0050                     ___awdiv@divisor:	
  1900                           ; 2 bytes @ 0x0
  1901                           
  1902  0050                     ___lwdiv@divisor:	
  1903                           ; 2 bytes @ 0x0
  1904                           
  1905                           
  1906                           ; 2 bytes @ 0x0
  1907  0050                     	ds	1
  1908  0051                     ??_getCDS_AD:	
  1909  0051                     ??_setLights_Trigger:	
  1910                           ; 0 bytes @ 0x1
  1911                           
  1912  0051                     setLED@led:	
  1913                           ; 0 bytes @ 0x1
  1914                           
  1915  0051                     getLights_Status@status:	
  1916                           ; 1 bytes @ 0x1
  1917                           
  1918  0051                     _getLights_Allow_Condition$4230:	
  1919                           ; 1 bytes @ 0x1
  1920                           
  1921                           
  1922                           ; 1 bytes @ 0x1
  1923  0051                     	ds	1
  1924  0052                     ??_setPIRLED_Main:	
  1925  0052                     ?_setLights:	
  1926                           ; 0 bytes @ 0x2
  1927                           
  1928  0052                     setLED_Initialization@led:	
  1929                           ; 0 bytes @ 0x2
  1930                           
  1931  0052                     getLoad_AD@channel:	
  1932                           ; 1 bytes @ 0x2
  1933                           
  1934  0052                     getTemp_AD@channel:	
  1935                           ; 1 bytes @ 0x2
  1936                           
  1937  0052                     setLights@status:	
  1938                           ; 1 bytes @ 0x2
  1939                           
  1940  0052                     setLights_Trigger@lights:	
  1941                           ; 1 bytes @ 0x2
  1942                           
  1943  0052                     _getMain_All_Error_Status$2128:	
  1944                           ; 1 bytes @ 0x2
  1945                           
  1946  0052                     ___wmul@multiplicand:	
  1947                           ; 2 bytes @ 0x2
  1948                           
  1949  0052                     ___awdiv@dividend:	
  1950                           ; 2 bytes @ 0x2
  1951                           
  1952  0052                     ___lwdiv@dividend:	
  1953                           ; 2 bytes @ 0x2
  1954                           
  1955                           
  1956                           ; 2 bytes @ 0x2
  1957  0052                     	ds	1
  1958  0053                     ??_setLights:	
  1959  0053                     getCDS_AD@i:	
  1960                           ; 0 bytes @ 0x3
  1961                           
  1962  0053                     setPIRLED_Main@count:	
  1963                           ; 1 bytes @ 0x3
  1964                           
  1965  0053                     getLoad_AD@k:	
  1966                           ; 1 bytes @ 0x3
  1967                           
  1968  0053                     getTemp_AD@ADRES:	
  1969                           ; 1 bytes @ 0x3
  1970                           
  1971  0053                     setLights_SwOn@sw:	
  1972                           ; 1 bytes @ 0x3
  1973                           
  1974  0053                     setLights_SwOff@sw:	
  1975                           ; 1 bytes @ 0x3
  1976                           
  1977                           
  1978                           ; 1 bytes @ 0x3
  1979  0053                     	ds	1
  1980  0054                     getCDS_AD@j:	
  1981  0054                     getMain_All_Error_Status@command:	
  1982                           ; 1 bytes @ 0x4
  1983                           
  1984  0054                     getLoad_AD@j:	
  1985                           ; 1 bytes @ 0x4
  1986                           
  1987  0054                     setLights@lights:	
  1988                           ; 1 bytes @ 0x4
  1989                           
  1990  0054                     ___awdiv@counter:	
  1991                           ; 1 bytes @ 0x4
  1992                           
  1993  0054                     ___lwdiv@counter:	
  1994                           ; 1 bytes @ 0x4
  1995                           
  1996                           
  1997                           ; 1 bytes @ 0x4
  1998  0054                     	ds	1
  1999  0055                     getCDS_AD@channel1:	
  2000  0055                     getMain_All_Error_Status@status:	
  2001                           ; 1 bytes @ 0x5
  2002                           
  2003  0055                     getLoad_AD@ADRES:	
  2004                           ; 1 bytes @ 0x5
  2005                           
  2006  0055                     setLights_Main@lights:	
  2007                           ; 1 bytes @ 0x5
  2008                           
  2009  0055                     ___awdiv@sign:	
  2010                           ; 1 bytes @ 0x5
  2011                           
  2012  0055                     ___lwdiv@quotient:	
  2013                           ; 1 bytes @ 0x5
  2014                           
  2015                           
  2016                           ; 2 bytes @ 0x5
  2017  0055                     	ds	1
  2018  0056                     ??_PIR_Main:	
  2019  0056                     ??_Exception_Main:	
  2020                           ; 0 bytes @ 0x6
  2021                           
  2022  0056                     getLoad_AD@i:	
  2023                           ; 0 bytes @ 0x6
  2024                           
  2025  0056                     ___awdiv@quotient:	
  2026                           ; 1 bytes @ 0x6
  2027                           
  2028                           
  2029                           ; 2 bytes @ 0x6
  2030  0056                     	ds	1
  2031  0057                     ??_Load_Main:	
  2032  0057                     Exception_Main@lights:	
  2033                           ; 0 bytes @ 0x7
  2034                           
  2035                           
  2036                           ; 1 bytes @ 0x7
  2037  0057                     	ds	1
  2038  0058                     ?_getPIR_AD:	
  2039  0058                     ??_setTemp_Main:	
  2040                           ; 0 bytes @ 0x8
  2041                           
  2042  0058                     ??_Lights_Control:	
  2043                           ; 0 bytes @ 0x8
  2044                           
  2045  0058                     Exception_Main@count:	
  2046                           ; 0 bytes @ 0x8
  2047                           
  2048  0058                     getPIR_AD@channel2:	
  2049                           ; 1 bytes @ 0x8
  2050                           
  2051                           
  2052                           ; 1 bytes @ 0x8
  2053  0058                     	ds	1
  2054  0059                     ??_getPIR_AD:	
  2055  0059                     Exception_Main@status:	
  2056                           ; 0 bytes @ 0x9
  2057                           
  2058  0059                     Load_Main@error:	
  2059                           ; 1 bytes @ 0x9
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x9
  2063  0059                     	ds	1
  2064  005A                     setTemp_Main@error:	
  2065  005A                     Lights_Control@lights:	
  2066                           ; 1 bytes @ 0xA
  2067                           
  2068  005A                     Exception_Main@i:	
  2069                           ; 1 bytes @ 0xA
  2070                           
  2071  005A                     _Load_Main$2389:	
  2072                           ; 2 bytes @ 0xA
  2073                           
  2074                           
  2075                           ; 2 bytes @ 0xA
  2076  005A                     	ds	1
  2077  005B                     setTemp_Main@TempGO:	
  2078  005B                     PIR_Main@error:	
  2079                           ; 1 bytes @ 0xB
  2080                           
  2081                           
  2082                           ; 1 bytes @ 0xB
  2083  005B                     	ds	1
  2084  005C                     Load_Main@ErrorCountValue:	
  2085  005C                     setTemp_Main@SafeValue:	
  2086                           ; 1 bytes @ 0xC
  2087                           
  2088  005C                     PIR_Main@cds:	
  2089                           ; 1 bytes @ 0xC
  2090                           
  2091  005C                     getPIR_AD@j:	
  2092                           ; 1 bytes @ 0xC
  2093                           
  2094  005C                     Exception_Main@i_2140:	
  2095                           ; 1 bytes @ 0xC
  2096                           
  2097                           
  2098                           ; 2 bytes @ 0xC
  2099  005C                     	ds	1
  2100  005D                     Load_Main@Load_RunStatus:	
  2101  005D                     setTemp_Main@DangerValue:	
  2102                           ; 1 bytes @ 0xD
  2103                           
  2104  005D                     PIR_Main@Enable_Switch:	
  2105                           ; 1 bytes @ 0xD
  2106                           
  2107  005D                     getPIR_AD@channel1:	
  2108                           ; 1 bytes @ 0xD
  2109                           
  2110                           
  2111                           ; 1 bytes @ 0xD
  2112  005D                     	ds	1
  2113  005E                     Exception_Main@error:	
  2114  005E                     Load_Main@LightsCount:	
  2115                           ; 1 bytes @ 0xE
  2116                           
  2117  005E                     getPIR_AD@VRAD1:	
  2118                           ; 1 bytes @ 0xE
  2119                           
  2120  005E                     setTemp_Main@AD:	
  2121                           ; 1 bytes @ 0xE
  2122                           
  2123  005E                     _PIR_Main$2862:	
  2124                           ; 2 bytes @ 0xE
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0xE
  2128  005E                     	ds	1
  2129  005F                     getPIR_AD@VRAD:	
  2130  005F                     Load_Main@i:	
  2131                           ; 1 bytes @ 0xF
  2132                           
  2133                           
  2134                           ; 2 bytes @ 0xF
  2135  005F                     	ds	1
  2136  0060                     PIR_Main@TriggerValue:	
  2137  0060                     getPIR_AD@i:	
  2138                           ; 1 bytes @ 0x10
  2139                           
  2140                           
  2141                           ; 1 bytes @ 0x10
  2142  0060                     	ds	1
  2143  0061                     PIR_Main@LightsStatus:	
  2144                           
  2145                           ; 1 bytes @ 0x11
  2146  0061                     	ds	1
  2147  0062                     ?_main:	
  2148  0062                     main@argc:	
  2149                           ; 2 bytes @ 0x12
  2150                           
  2151                           
  2152                           ; 2 bytes @ 0x12
  2153  0062                     	ds	2
  2154  0064                     main@argv:	
  2155                           
  2156                           ; 2 bytes @ 0x14
  2157  0064                     	ds	2
  2158  0066                     ??_main:	
  2159                           
  2160                           ; 0 bytes @ 0x16
  2161  0066                     	ds	1
  2162                           
  2163                           	psect	maintext
  2164  0F29                     __pmaintext:	
  2165 ;;
  2166 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2167 ;;
  2168 ;; *************** function _main *****************
  2169 ;; Defined at:
  2170 ;;		line 7 in file "../src/Main_B1.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  argc            2   18[BANK0 ] int 
  2173 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;		None
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  2   18[BANK0 ] int 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 17F/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2185 ;;      Params:         0       4       0       0
  2186 ;;      Locals:         0       0       0       0
  2187 ;;      Temps:          0       1       0       0
  2188 ;;      Totals:         0       5       0       0
  2189 ;;Total ram usage:        5 bytes
  2190 ;; Hardware stack levels required when called:    7
  2191 ;; This function calls:
  2192 ;;		_CDS_Initialization
  2193 ;;		_CDS_Main
  2194 ;;		_DetectSYSC_Signal
  2195 ;;		_Exception_Main
  2196 ;;		_LED_Initialization
  2197 ;;		_LED_Main
  2198 ;;		_Lights_Initialization
  2199 ;;		_Lights_Main
  2200 ;;		_Load_Initialization
  2201 ;;		_Load_Main
  2202 ;;		_Mcu_Initialization
  2203 ;;		_PIR_Initialization
  2204 ;;		_PIR_Main
  2205 ;;		_SYSC_Initialization
  2206 ;;		_SYSC_Main
  2207 ;;		_Temp_Initialization
  2208 ;;		_Temp_Main
  2209 ;;		_WDT_Main
  2210 ;;		_getCDS_AD
  2211 ;;		_getLoad_AD
  2212 ;;		_getPIR_AD
  2213 ;;		_getTemp_AD
  2214 ;;		_myMain_Initialization
  2215 ;;		_my_MainTimer
  2216 ;; This function is called by:
  2217 ;;		Startup code after reset
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           
  2222                           ;psect for function _main
  2223  0F29                     _main:	
  2224                           
  2225                           ;Main_B1.c: 8: myMain_Initialization();
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2229  0F29  158A  2226  158A   	fcall	_myMain_Initialization
  2230                           
  2231                           ;Main_B1.c: 9: Mcu_Initialization();
  2232  0F2C  158A  22EA  158A   	fcall	_Mcu_Initialization
  2233                           
  2234                           ;Main_B1.c: 10: ;;
  2235                           ;Main_B1.c: 11: LED_Initialization();
  2236  0F2F  158A  226A  158A   	fcall	_LED_Initialization
  2237                           
  2238                           ;Main_B1.c: 12: ;;
  2239                           ;Main_B1.c: 14: SYSC_Initialization();
  2240  0F32  158A  222D  158A   	fcall	_SYSC_Initialization
  2241                           
  2242                           ;Main_B1.c: 15: Temp_Initialization();
  2243  0F35  158A  2233  158A   	fcall	_Temp_Initialization
  2244                           
  2245                           ;Main_B1.c: 16: Load_Initialization();
  2246  0F38  158A  222A  158A   	fcall	_Load_Initialization
  2247                           
  2248                           ;Main_B1.c: 17: ;;
  2249                           ;Main_B1.c: 18: ;;
  2250                           ;Main_B1.c: 20: ;;
  2251                           ;Main_B1.c: 21: Lights_Initialization();
  2252  0F3B  158A  223D  158A   	fcall	_Lights_Initialization
  2253                           
  2254                           ;Main_B1.c: 22: CDS_Initialization();
  2255  0F3E  158A  2239  158A   	fcall	_CDS_Initialization
  2256                           
  2257                           ;Main_B1.c: 23: PIR_Initialization();
  2258  0F41  158A  22A7  158A   	fcall	_PIR_Initialization
  2259  0F44                     l5504:	
  2260                           ;Main_B1.c: 24: ;;
  2261                           ;Main_B1.c: 25: ;;
  2262                           ;Main_B1.c: 26: ;;
  2263                           ;Main_B1.c: 27: ;;
  2264                           ;Main_B1.c: 28: ;;
  2265                           ;Main_B1.c: 30: while (1) {
  2266                           
  2267                           
  2268                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2269  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0F46  1C25               	btfss	_myMain,0
  2272  0F47  2F67               	goto	l5516
  2273                           
  2274                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2275  0F48  158A  22B2  158A   	fcall	_DetectSYSC_Signal
  2276                           
  2277                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2278  0F4B  3001               	movlw	1
  2279  0F4C  158A  260B  158A   	fcall	_getLoad_AD
  2280                           
  2281                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2282  0F4F  3011               	movlw	17
  2283  0F50  158A  2584  158A   	fcall	_getTemp_AD
  2284                           
  2285                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2286  0F53  3005               	movlw	5
  2287  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0F56  00E6               	movwf	??_main
  2290  0F57  0866               	movf	??_main,w
  2291  0F58  00D0               	movwf	getCDS_AD@channel2
  2292  0F59  3029               	movlw	41
  2293  0F5A  158A  246A  158A   	fcall	_getCDS_AD
  2294                           
  2295                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2296  0F5D  3009               	movlw	9
  2297  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2298  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2299  0F60  00E6               	movwf	??_main
  2300  0F61  0866               	movf	??_main,w
  2301  0F62  00D8               	movwf	getPIR_AD@channel2
  2302  0F63  302D               	movlw	45
  2303  0F64  118A  241A  158A   	fcall	_getPIR_AD
  2304  0F67                     l5516:	
  2305                           
  2306                           ;Main_B1.c: 57: }
  2307                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2308  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2309  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2310  0F69  1C32               	btfss	_Timer1,0
  2311  0F6A  2F44               	goto	l5504
  2312                           
  2313                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2314  0F6B  1032               	bcf	_Timer1,0
  2315                           
  2316                           ;Main_B1.c: 96: my_MainTimer();
  2317  0F6C  158A  23FB  158A   	fcall	_my_MainTimer
  2318                           
  2319                           ;Main_B1.c: 97: WDT_Main();
  2320  0F6F  158A  230A  158A   	fcall	_WDT_Main
  2321                           
  2322                           ;Main_B1.c: 98: ;;
  2323                           ;Main_B1.c: 99: ;;
  2324                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2325  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2326  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2327  0F74  1C25               	btfss	_myMain,0
  2328  0F75  2F44               	goto	l5504
  2329                           
  2330                           ;Main_B1.c: 101: ;;
  2331                           ;Main_B1.c: 103: LED_Main();
  2332  0F76  158A  2227  158A   	fcall	_LED_Main
  2333                           
  2334                           ;Main_B1.c: 104: ;;
  2335                           ;Main_B1.c: 106: SYSC_Main();
  2336  0F79  158A  2230  158A   	fcall	_SYSC_Main
  2337                           
  2338                           ;Main_B1.c: 107: Temp_Main();
  2339  0F7C  158A  2236  158A   	fcall	_Temp_Main
  2340                           
  2341                           ;Main_B1.c: 108: Load_Main();
  2342  0F7F  118A  2230  158A   	fcall	_Load_Main
  2343                           
  2344                           ;Main_B1.c: 109: ;;
  2345                           ;Main_B1.c: 111: Lights_Main();
  2346  0F82  158A  244C  158A   	fcall	_Lights_Main
  2347                           
  2348                           ;Main_B1.c: 112: ;;
  2349                           ;Main_B1.c: 113: ;;
  2350                           ;Main_B1.c: 114: CDS_Main();
  2351  0F85  118A  27C3  158A   	fcall	_CDS_Main
  2352                           
  2353                           ;Main_B1.c: 115: PIR_Main();
  2354  0F88  118A  2026  158A   	fcall	_PIR_Main
  2355                           
  2356                           ;Main_B1.c: 117: ;;
  2357                           ;Main_B1.c: 118: ;;
  2358                           ;Main_B1.c: 119: ;;
  2359                           ;Main_B1.c: 120: ;;
  2360                           ;Main_B1.c: 121: Exception_Main();
  2361  0F8B  118A  2548  158A   	fcall	_Exception_Main
  2362  0F8E  2F44               	goto	l5504
  2363  0F8F                     __end_of_main:	
  2364                           ;Main_B1.c: 128: }
  2365                           ;Main_B1.c: 129: }
  2366                           ;Main_B1.c: 163: }
  2367                           ;Main_B1.c: 164: return (0);
  2368                           ;	Return value of _main is never used
  2369                           
  2370                           
  2371                           	psect	text1
  2372  0BFB                     __ptext1:	
  2373 ;; *************** function _my_MainTimer *****************
  2374 ;; Defined at:
  2375 ;;		line 185 in file "../src/Main_B1.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2389 ;;      Params:         0       0       0       0
  2390 ;;      Locals:         0       0       0       0
  2391 ;;      Temps:          1       0       0       0
  2392 ;;      Totals:         1       0       0       0
  2393 ;;Total ram usage:        1 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    2
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _my_MainTimer
  2405  0BFB                     _my_MainTimer:	
  2406                           
  2407                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2411  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0BFD  1825               	btfsc	_myMain,0
  2414  0BFE  2C0B               	goto	l3964
  2415                           
  2416                           ;Main_B1.c: 188: myMain.PowerCount++;
  2417  0BFF  3001               	movlw	1
  2418  0C00  00F4               	movwf	??_my_MainTimer
  2419  0C01  0874               	movf	??_my_MainTimer,w
  2420  0C02  07A6               	addwf	_myMain+1,f
  2421                           
  2422                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2423  0C03  0826               	movf	_myMain+1,w
  2424  0C04  3A4B               	xorlw	75
  2425  0C05  1D03               	skipz
  2426  0C06  0008               	return
  2427                           
  2428                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2429  0C07  01A6               	clrf	_myMain+1
  2430                           
  2431                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2432  0C08  1425               	bsf	_myMain,0
  2433                           
  2434                           ;Main_B1.c: 196: ;;
  2435                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2436  0C09  1625               	bsf	_myMain,4
  2437                           
  2438                           ;Main_B1.c: 206: }
  2439                           ;Main_B1.c: 207: } else {
  2440  0C0A  0008               	return
  2441  0C0B                     l3964:	
  2442                           
  2443                           ;Main_B1.c: 208: myMain.PowerCount++;
  2444  0C0B  3001               	movlw	1
  2445  0C0C  00F4               	movwf	??_my_MainTimer
  2446  0C0D  0874               	movf	??_my_MainTimer,w
  2447  0C0E  07A6               	addwf	_myMain+1,f
  2448                           
  2449                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2450  0C0F  0826               	movf	_myMain+1,w
  2451  0C10  3A32               	xorlw	50
  2452  0C11  1D03               	skipz
  2453  0C12  0008               	return
  2454                           
  2455                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2456  0C13  01A6               	clrf	_myMain+1
  2457                           
  2458                           ;Main_B1.c: 222: ;;
  2459  0C14  0008               	return
  2460  0C15                     __end_of_my_MainTimer:	
  2461                           
  2462                           	psect	text2
  2463  0A26                     __ptext2:	
  2464 ;; *************** function _myMain_Initialization *****************
  2465 ;; Defined at:
  2466 ;;		line 170 in file "../src/Main_B1.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;		None               void
  2473 ;; Registers used:
  2474 ;;		None
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2480 ;;      Params:         0       0       0       0
  2481 ;;      Locals:         0       0       0       0
  2482 ;;      Temps:          0       0       0       0
  2483 ;;      Totals:         0       0       0       0
  2484 ;;Total ram usage:        0 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    2
  2487 ;; This function calls:
  2488 ;;		Nothing
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           
  2495                           ;psect for function _myMain_Initialization
  2496  0A26                     _myMain_Initialization:	
  2497                           
  2498                           ;incstack = 0
  2499                           ; Regs used in _myMain_Initialization: []
  2500  0A26  0008               	return
  2501  0A27                     __end_of_myMain_Initialization:	
  2502                           
  2503                           	psect	text3
  2504  0D84                     __ptext3:	
  2505 ;; *************** function _getTemp_AD *****************
  2506 ;; Defined at:
  2507 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  channel         1    wreg     unsigned char 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  channel         1    2[BANK0 ] unsigned char 
  2512 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;		None               void
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, pclath, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       0       0       0
  2523 ;;      Locals:         0       2       0       0
  2524 ;;      Temps:          0       2       0       0
  2525 ;;      Totals:         0       4       0       0
  2526 ;;Total ram usage:        4 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    4
  2529 ;; This function calls:
  2530 ;;		_getAD
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _getTemp_AD
  2538  0D84                     _getTemp_AD:	
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2542                           ;getTemp_AD@channel stored from wreg
  2543  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  2545  0D86  00D2               	movwf	getTemp_AD@channel
  2546                           
  2547                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2548  0D87  01D3               	clrf	getTemp_AD@ADRES
  2549                           
  2550                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2551  0D88  1D39               	btfss	_Temp,2
  2552  0D89  0008               	return
  2553                           
  2554                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2555  0D8A  3070               	movlw	112
  2556  0D8B  00D0               	movwf	??_getTemp_AD
  2557  0D8C  0850               	movf	??_getTemp_AD,w
  2558  0D8D  00F4               	movwf	getAD@adcon1
  2559  0D8E  0852               	movf	getTemp_AD@channel,w
  2560  0D8F  158A  2430  158A   	fcall	_getAD
  2561  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0D94  00D1               	movwf	??_getTemp_AD+1
  2564  0D95  0851               	movf	??_getTemp_AD+1,w
  2565  0D96  00D3               	movwf	getTemp_AD@ADRES
  2566                           
  2567                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2568  0D97  0853               	movf	getTemp_AD@ADRES,w
  2569  0D98  1903               	btfsc	3,2
  2570  0D99  0008               	return
  2571                           
  2572                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  2573  0D9A  0853               	movf	getTemp_AD@ADRES,w
  2574  0D9B  023D               	subwf	_Temp+4,w
  2575  0D9C  1803               	skipnc
  2576  0D9D  2DA3               	goto	l5006
  2577                           
  2578                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  2579  0D9E  0853               	movf	getTemp_AD@ADRES,w
  2580  0D9F  00D0               	movwf	??_getTemp_AD
  2581  0DA0  0850               	movf	??_getTemp_AD,w
  2582  0DA1  00BD               	movwf	_Temp+4
  2583                           
  2584                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  2585  0DA2  0008               	return
  2586  0DA3                     l5006:	
  2587  0DA3  0853               	movf	getTemp_AD@ADRES,w
  2588  0DA4  023E               	subwf	_Temp+5,w
  2589  0DA5  1803               	skipnc
  2590  0DA6  2DAC               	goto	l5010
  2591                           
  2592                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  2593  0DA7  0853               	movf	getTemp_AD@ADRES,w
  2594  0DA8  00D0               	movwf	??_getTemp_AD
  2595  0DA9  0850               	movf	??_getTemp_AD,w
  2596  0DAA  00BE               	movwf	_Temp+5
  2597                           
  2598                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  2599  0DAB  0008               	return
  2600  0DAC                     l5010:	
  2601  0DAC  0853               	movf	getTemp_AD@ADRES,w
  2602  0DAD  023F               	subwf	_Temp+6,w
  2603  0DAE  1803               	skipnc
  2604  0DAF  2DB5               	goto	l5014
  2605                           
  2606                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  2607  0DB0  0853               	movf	getTemp_AD@ADRES,w
  2608  0DB1  00D0               	movwf	??_getTemp_AD
  2609  0DB2  0850               	movf	??_getTemp_AD,w
  2610  0DB3  00BF               	movwf	_Temp+6
  2611                           
  2612                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  2613  0DB4  0008               	return
  2614  0DB5                     l5014:	
  2615  0DB5  0853               	movf	getTemp_AD@ADRES,w
  2616  0DB6  0240               	subwf	_Temp+7,w
  2617  0DB7  1803               	skipnc
  2618  0DB8  2DBE               	goto	l5018
  2619                           
  2620                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  2621  0DB9  0853               	movf	getTemp_AD@ADRES,w
  2622  0DBA  00D0               	movwf	??_getTemp_AD
  2623  0DBB  0850               	movf	??_getTemp_AD,w
  2624  0DBC  00C0               	movwf	_Temp+7
  2625                           
  2626                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  2627  0DBD  0008               	return
  2628  0DBE                     l5018:	
  2629  0DBE  0853               	movf	getTemp_AD@ADRES,w
  2630  0DBF  0241               	subwf	_Temp+8,w
  2631  0DC0  1803               	skipnc
  2632  0DC1  0008               	return
  2633                           
  2634                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  2635  0DC2  0853               	movf	getTemp_AD@ADRES,w
  2636  0DC3  00D0               	movwf	??_getTemp_AD
  2637  0DC4  0850               	movf	??_getTemp_AD,w
  2638  0DC5  00C1               	movwf	_Temp+8
  2639  0DC6  0008               	return
  2640  0DC7                     __end_of_getTemp_AD:	
  2641                           
  2642                           	psect	text4
  2643  041A                     __ptext4:	
  2644 ;; *************** function _getPIR_AD *****************
  2645 ;; Defined at:
  2646 ;;		line 348 in file "../src/PIR_B1.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  channel1        1    wreg     unsigned char 
  2649 ;;  channel2        1    8[BANK0 ] unsigned char 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  channel1        1   13[BANK0 ] unsigned char 
  2652 ;;  i               1   16[BANK0 ] unsigned char 
  2653 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2654 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2655 ;;  j               1   12[BANK0 ] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;		None               void
  2658 ;; Registers used:
  2659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2665 ;;      Params:         0       1       0       0
  2666 ;;      Locals:         0       5       0       0
  2667 ;;      Temps:          0       3       0       0
  2668 ;;      Totals:         0       9       0       0
  2669 ;;Total ram usage:        9 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    4
  2672 ;; This function calls:
  2673 ;;		___awdiv
  2674 ;;		___lwdiv
  2675 ;;		_getAD
  2676 ;; This function is called by:
  2677 ;;		_main
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _getPIR_AD
  2683  041A                     _getPIR_AD:	
  2684                           
  2685                           ;incstack = 0
  2686                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2687                           ;getPIR_AD@channel1 stored from wreg
  2688  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2689  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2690  041C  00DD               	movwf	getPIR_AD@channel1
  2691                           
  2692                           ;PIR_B1.c: 349: char i = 0, j = 0;
  2693  041D  01E0               	clrf	getPIR_AD@i
  2694  041E  01DC               	clrf	getPIR_AD@j
  2695                           
  2696                           ;PIR_B1.c: 350: char VRAD = 0, VRAD1 = 0;
  2697  041F  01DF               	clrf	getPIR_AD@VRAD
  2698  0420  01DE               	clrf	getPIR_AD@VRAD1
  2699                           
  2700                           ;PIR_B1.c: 351: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2701  0421  1683               	bsf	3,5	;RP0=1, select bank1
  2702  0422  1303               	bcf	3,6	;RP1=0, select bank1
  2703  0423  1CA0               	btfss	__PIR^(0+128),1
  2704  0424  0008               	return
  2705  0425  1920               	btfsc	__PIR^(0+128),2
  2706  0426  0008               	return
  2707                           
  2708                           ;PIR_B1.c: 352: _PIR.GO = 1;
  2709  0427  1520               	bsf	__PIR^(0+128),2
  2710                           
  2711                           ;PIR_B1.c: 359: VRAD1 = getAD(channel1, 0x70);
  2712  0428  3070               	movlw	112
  2713  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2714  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2715  042B  00D9               	movwf	??_getPIR_AD
  2716  042C  0859               	movf	??_getPIR_AD,w
  2717  042D  00F4               	movwf	getAD@adcon1
  2718  042E  085D               	movf	getPIR_AD@channel1,w
  2719  042F  158A  2430  118A   	fcall	_getAD
  2720  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2722  0434  00DA               	movwf	??_getPIR_AD+1
  2723  0435  085A               	movf	??_getPIR_AD+1,w
  2724  0436  00DE               	movwf	getPIR_AD@VRAD1
  2725                           
  2726                           ;PIR_B1.c: 360: VRAD = VRAD1 / 25;
  2727  0437  3019               	movlw	25
  2728  0438  00D0               	movwf	___awdiv@divisor
  2729  0439  3000               	movlw	0
  2730  043A  00D1               	movwf	___awdiv@divisor+1
  2731  043B  085E               	movf	getPIR_AD@VRAD1,w
  2732  043C  00D9               	movwf	??_getPIR_AD
  2733  043D  01DA               	clrf	??_getPIR_AD+1
  2734  043E  0859               	movf	??_getPIR_AD,w
  2735  043F  00D2               	movwf	___awdiv@dividend
  2736  0440  085A               	movf	??_getPIR_AD+1,w
  2737  0441  00D3               	movwf	___awdiv@dividend+1
  2738  0442  158A  2667  118A   	fcall	___awdiv
  2739  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2740  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2741  0447  0850               	movf	?___awdiv,w
  2742  0448  00DB               	movwf	??_getPIR_AD+2
  2743  0449  085B               	movf	??_getPIR_AD+2,w
  2744  044A  00DF               	movwf	getPIR_AD@VRAD
  2745                           
  2746                           ;PIR_B1.c: 361: _PIR.SignalAD = getAD(channel2, 0x70);
  2747  044B  3070               	movlw	112
  2748  044C  00D9               	movwf	??_getPIR_AD
  2749  044D  0859               	movf	??_getPIR_AD,w
  2750  044E  00F4               	movwf	getAD@adcon1
  2751  044F  0858               	movf	getPIR_AD@channel2,w
  2752  0450  158A  2430  118A   	fcall	_getAD
  2753  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2754  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0455  00DA               	movwf	??_getPIR_AD+1
  2756  0456  085A               	movf	??_getPIR_AD+1,w
  2757  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2758  0458  1303               	bcf	3,6	;RP1=0, select bank1
  2759  0459  00A1               	movwf	(__PIR^(0+128)+1)
  2760                           
  2761                           ;PIR_B1.c: 375: if (VRAD < 1) {
  2762  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2763  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2764  045C  08DF               	movf	getPIR_AD@VRAD,f
  2765  045D  1D03               	skipz
  2766  045E  2C61               	goto	l5036
  2767                           
  2768                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 5;
  2769  045F  3005               	movlw	5
  2770  0460  2C67               	goto	L1
  2771  0461                     l5036:	
  2772                           ;PIR_B1.c: 377: } else if (VRAD < 3) {
  2773                           
  2774  0461  3003               	movlw	3
  2775  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0463  025F               	subwf	getPIR_AD@VRAD,w
  2777  0464  1803               	skipnc
  2778  0465  2C6C               	goto	l5040
  2779                           
  2780                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 60;
  2781  0466  303C               	movlw	60
  2782  0467                     L1:	
  2783  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2784  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2785  0469  00C3               	movwf	(__PIR^(0+128)+35)
  2786  046A  3000               	movlw	0
  2787  046B  2C92               	goto	L5
  2788  046C                     l5040:	
  2789                           ;PIR_B1.c: 379: } else if (VRAD < 5) {
  2790                           
  2791  046C  3005               	movlw	5
  2792  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2793  046E  025F               	subwf	getPIR_AD@VRAD,w
  2794  046F  1803               	skipnc
  2795  0470  2C77               	goto	l5044
  2796                           
  2797                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 300;
  2798  0471  302C               	movlw	44
  2799  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2800  0473  1303               	bcf	3,6	;RP1=0, select bank1
  2801  0474  00C3               	movwf	(__PIR^(0+128)+35)
  2802  0475  3001               	movlw	1
  2803  0476  2C92               	goto	L5
  2804  0477                     l5044:	
  2805                           ;PIR_B1.c: 381: } else if (VRAD < 7) {
  2806                           
  2807  0477  3007               	movlw	7
  2808  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2809  0479  025F               	subwf	getPIR_AD@VRAD,w
  2810  047A  1803               	skipnc
  2811  047B  2C82               	goto	l5048
  2812                           
  2813                           ;PIR_B1.c: 382: _PIR.CloseTimeValue = 600;
  2814  047C  3058               	movlw	88
  2815  047D  1683               	bsf	3,5	;RP0=1, select bank1
  2816  047E  1303               	bcf	3,6	;RP1=0, select bank1
  2817  047F  00C3               	movwf	(__PIR^(0+128)+35)
  2818  0480  3002               	movlw	2
  2819  0481  2C92               	goto	L5
  2820  0482                     l5048:	
  2821                           ;PIR_B1.c: 383: } else if (VRAD < 9) {
  2822                           
  2823  0482  3009               	movlw	9
  2824  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2825  0484  025F               	subwf	getPIR_AD@VRAD,w
  2826  0485  1803               	skipnc
  2827  0486  2C8D               	goto	l5052
  2828                           
  2829                           ;PIR_B1.c: 384: _PIR.CloseTimeValue = 900;
  2830  0487  3084               	movlw	132
  2831  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2832  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2833  048A  00C3               	movwf	(__PIR^(0+128)+35)
  2834  048B  3003               	movlw	3
  2835  048C  2C92               	goto	L5
  2836  048D                     l5052:	
  2837                           ;PIR_B1.c: 385: } else {
  2838                           
  2839                           
  2840                           ;PIR_B1.c: 386: _PIR.CloseTimeValue = 1200;
  2841  048D  30B0               	movlw	176
  2842  048E  1683               	bsf	3,5	;RP0=1, select bank1
  2843  048F  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0490  00C3               	movwf	(__PIR^(0+128)+35)
  2845  0491  3004               	movlw	4
  2846  0492                     L5:	
  2847  0492  00C4               	movwf	(__PIR^(0+128)+36)
  2848                           
  2849                           ;PIR_B1.c: 387: }
  2850                           ;PIR_B1.c: 396: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2851  0493  0821               	movf	(__PIR^(0+128)+1),w
  2852  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2853  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0496  00D9               	movwf	??_getPIR_AD
  2855  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2856  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2857  0499  0824               	movf	(__PIR^(0+128)+4),w
  2858  049A  3EA5               	addlw	(__PIR+5)& (0+255)
  2859  049B  0084               	movwf	4
  2860  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2861  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2862  049E  0859               	movf	??_getPIR_AD,w
  2863  049F  1383               	bcf	3,7	;select IRP bank1
  2864  04A0  0080               	movwf	0
  2865                           
  2866                           ;PIR_B1.c: 397: for (i = 0; i < 10; i++) {
  2867  04A1  01E0               	clrf	getPIR_AD@i
  2868  04A2  300A               	movlw	10
  2869  04A3  0260               	subwf	getPIR_AD@i,w
  2870  04A4  1803               	btfsc	3,0
  2871  04A5  2CC2               	goto	l5068
  2872  04A6                     l5062:	
  2873                           
  2874                           ;PIR_B1.c: 398: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2875  04A6  0860               	movf	getPIR_AD@i,w
  2876  04A7  3EA5               	addlw	(__PIR+5)& (0+255)
  2877  04A8  0084               	movwf	4
  2878  04A9  0800               	movf	0,w
  2879  04AA  00D9               	movwf	??_getPIR_AD
  2880  04AB  01DA               	clrf	??_getPIR_AD+1
  2881  04AC  0859               	movf	??_getPIR_AD,w
  2882  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  2883  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  2884  04AF  07AF               	addwf	(__PIR^(0+128)+15),f
  2885  04B0  1803               	skipnc
  2886  04B1  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2887  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2888  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2889  04B4  085A               	movf	??_getPIR_AD+1,w
  2890  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  2891  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  2892  04B7  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2893  04B8  3001               	movlw	1
  2894  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2895  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2896  04BB  00D9               	movwf	??_getPIR_AD
  2897  04BC  0859               	movf	??_getPIR_AD,w
  2898  04BD  07E0               	addwf	getPIR_AD@i,f
  2899  04BE  300A               	movlw	10
  2900  04BF  0260               	subwf	getPIR_AD@i,w
  2901  04C0  1C03               	skipc
  2902  04C1  2CA6               	goto	l5062
  2903  04C2                     l5068:	
  2904                           
  2905                           ;PIR_B1.c: 399: }
  2906                           ;PIR_B1.c: 400: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2907  04C2  300A               	movlw	10
  2908  04C3  00D0               	movwf	___lwdiv@divisor
  2909  04C4  3000               	movlw	0
  2910  04C5  00D1               	movwf	___lwdiv@divisor+1
  2911  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2912  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2913  04C8  0830               	movf	((__PIR+1)^(0+128)+15),w
  2914  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2915  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2916  04CB  01D3               	clrf	___lwdiv@dividend+1
  2917  04CC  07D3               	addwf	___lwdiv@dividend+1,f
  2918  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2919  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2920  04CF  082F               	movf	(__PIR^(0+128)+15),w
  2921  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2922  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2923  04D2  01D2               	clrf	___lwdiv@dividend
  2924  04D3  07D2               	addwf	___lwdiv@dividend,f
  2925  04D4  158A  2544  118A   	fcall	___lwdiv
  2926  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2927  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2928  04D9  0850               	movf	?___lwdiv,w
  2929  04DA  00D9               	movwf	??_getPIR_AD
  2930  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  2931  04DC  1303               	bcf	3,6	;RP1=0, select bank1
  2932  04DD  0831               	movf	(__PIR^(0+128)+17),w
  2933  04DE  3EB2               	addlw	(__PIR+18)& (0+255)
  2934  04DF  0084               	movwf	4
  2935  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2936  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2937  04E2  0859               	movf	??_getPIR_AD,w
  2938  04E3  1383               	bcf	3,7	;select IRP bank1
  2939  04E4  0080               	movwf	0
  2940                           
  2941                           ;PIR_B1.c: 401: _PIR.TenAverageValue = 0;
  2942  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  2943  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  2944  04E7  01AF               	clrf	(__PIR^(0+128)+15)
  2945  04E8  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2946                           
  2947                           ;PIR_B1.c: 403: for (i = 0; i <= 9; i++) {
  2948  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2949  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2950  04EB  01E0               	clrf	getPIR_AD@i
  2951  04EC  300A               	movlw	10
  2952  04ED  0260               	subwf	getPIR_AD@i,w
  2953  04EE  1803               	btfsc	3,0
  2954  04EF  2D0C               	goto	l5084
  2955  04F0                     l5078:	
  2956                           
  2957                           ;PIR_B1.c: 404: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2958  04F0  0860               	movf	getPIR_AD@i,w
  2959  04F1  3EB2               	addlw	(__PIR+18)& (0+255)
  2960  04F2  0084               	movwf	4
  2961  04F3  0800               	movf	0,w
  2962  04F4  00D9               	movwf	??_getPIR_AD
  2963  04F5  01DA               	clrf	??_getPIR_AD+1
  2964  04F6  0859               	movf	??_getPIR_AD,w
  2965  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  2966  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  2967  04F9  07BC               	addwf	(__PIR^(0+128)+28),f
  2968  04FA  1803               	skipnc
  2969  04FB  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2970  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2971  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2972  04FE  085A               	movf	??_getPIR_AD+1,w
  2973  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2974  0500  1303               	bcf	3,6	;RP1=0, select bank1
  2975  0501  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2976  0502  3001               	movlw	1
  2977  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0505  00D9               	movwf	??_getPIR_AD
  2980  0506  0859               	movf	??_getPIR_AD,w
  2981  0507  07E0               	addwf	getPIR_AD@i,f
  2982  0508  300A               	movlw	10
  2983  0509  0260               	subwf	getPIR_AD@i,w
  2984  050A  1C03               	skipc
  2985  050B  2CF0               	goto	l5078
  2986  050C                     l5084:	
  2987                           
  2988                           ;PIR_B1.c: 405: }
  2989                           ;PIR_B1.c: 406: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2990  050C  300A               	movlw	10
  2991  050D  00D0               	movwf	___lwdiv@divisor
  2992  050E  3000               	movlw	0
  2993  050F  00D1               	movwf	___lwdiv@divisor+1
  2994  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2996  0512  083D               	movf	((__PIR+1)^(0+128)+28),w
  2997  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2999  0515  01D3               	clrf	___lwdiv@dividend+1
  3000  0516  07D3               	addwf	___lwdiv@dividend+1,f
  3001  0517  1683               	bsf	3,5	;RP0=1, select bank1
  3002  0518  1303               	bcf	3,6	;RP1=0, select bank1
  3003  0519  083C               	movf	(__PIR^(0+128)+28),w
  3004  051A  1283               	bcf	3,5	;RP0=0, select bank0
  3005  051B  1303               	bcf	3,6	;RP1=0, select bank0
  3006  051C  01D2               	clrf	___lwdiv@dividend
  3007  051D  07D2               	addwf	___lwdiv@dividend,f
  3008  051E  158A  2544  118A   	fcall	___lwdiv
  3009  0521  1283               	bcf	3,5	;RP0=0, select bank0
  3010  0522  1303               	bcf	3,6	;RP1=0, select bank0
  3011  0523  0850               	movf	?___lwdiv,w
  3012  0524  00D9               	movwf	??_getPIR_AD
  3013  0525  0859               	movf	??_getPIR_AD,w
  3014  0526  1683               	bsf	3,5	;RP0=1, select bank1
  3015  0527  1303               	bcf	3,6	;RP1=0, select bank1
  3016  0528  00A3               	movwf	(__PIR^(0+128)+3)
  3017                           
  3018                           ;PIR_B1.c: 407: _PIR.HundredAverageValue = 0;
  3019  0529  01BC               	clrf	(__PIR^(0+128)+28)
  3020  052A  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3021                           
  3022                           ;PIR_B1.c: 409: if (_PIR.TenCount < 10) {
  3023  052B  300A               	movlw	10
  3024  052C  0224               	subwf	(__PIR^(0+128)+4),w
  3025  052D  1803               	skipnc
  3026  052E  2D38               	goto	l5092
  3027                           
  3028                           ;PIR_B1.c: 410: _PIR.TenCount++;
  3029  052F  3001               	movlw	1
  3030  0530  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0531  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0532  00D9               	movwf	??_getPIR_AD
  3033  0533  0859               	movf	??_getPIR_AD,w
  3034  0534  1683               	bsf	3,5	;RP0=1, select bank1
  3035  0535  1303               	bcf	3,6	;RP1=0, select bank1
  3036  0536  07A4               	addwf	(__PIR^(0+128)+4),f
  3037                           
  3038                           ;PIR_B1.c: 411: } else {
  3039  0537  0008               	return
  3040  0538                     l5092:	
  3041                           
  3042                           ;PIR_B1.c: 412: _PIR.TenCount = 0;
  3043  0538  01A4               	clrf	(__PIR^(0+128)+4)
  3044                           
  3045                           ;PIR_B1.c: 413: if (_PIR.HundreCount < 10)
  3046  0539  300A               	movlw	10
  3047  053A  0231               	subwf	(__PIR^(0+128)+17),w
  3048  053B  1803               	skipnc
  3049  053C  2D46               	goto	l5098
  3050                           
  3051                           ;PIR_B1.c: 414: _PIR.HundreCount++;
  3052  053D  3001               	movlw	1
  3053  053E  1283               	bcf	3,5	;RP0=0, select bank0
  3054  053F  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0540  00D9               	movwf	??_getPIR_AD
  3056  0541  0859               	movf	??_getPIR_AD,w
  3057  0542  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0543  1303               	bcf	3,6	;RP1=0, select bank1
  3059  0544  07B1               	addwf	(__PIR^(0+128)+17),f
  3060  0545  0008               	return
  3061  0546                     l5098:	
  3062                           
  3063                           ;PIR_B1.c: 415: else
  3064                           ;PIR_B1.c: 416: _PIR.HundreCount = 0;
  3065  0546  01B1               	clrf	(__PIR^(0+128)+17)
  3066  0547  0008               	return
  3067  0548                     __end_of_getPIR_AD:	
  3068                           
  3069                           	psect	text5
  3070  0E0B                     __ptext5:	
  3071 ;; *************** function _getLoad_AD *****************
  3072 ;; Defined at:
  3073 ;;		line 16 in file "../src/OverLoad_B1.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  channel         1    wreg     unsigned char 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  channel         1    2[BANK0 ] unsigned char 
  3078 ;;  i               1    6[BANK0 ] unsigned char 
  3079 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3080 ;;  j               1    4[BANK0 ] unsigned char 
  3081 ;;  k               1    3[BANK0 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;		None               void
  3084 ;; Registers used:
  3085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3091 ;;      Params:         0       0       0       0
  3092 ;;      Locals:         0       5       0       0
  3093 ;;      Temps:          0       2       0       0
  3094 ;;      Totals:         0       7       0       0
  3095 ;;Total ram usage:        7 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    4
  3098 ;; This function calls:
  3099 ;;		_getAD
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _getLoad_AD
  3107  0E0B                     _getLoad_AD:	
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3111                           ;getLoad_AD@channel stored from wreg
  3112  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  3114  0E0D  00D2               	movwf	getLoad_AD@channel
  3115                           
  3116                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  3117  0E0E  01D6               	clrf	getLoad_AD@i
  3118  0E0F  01D4               	clrf	getLoad_AD@j
  3119  0E10  01D3               	clrf	getLoad_AD@k
  3120                           
  3121                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  3122  0E11  01D5               	clrf	getLoad_AD@ADRES
  3123                           
  3124                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  3125  0E12  1683               	bsf	3,5	;RP0=1, select bank1
  3126  0E13  1303               	bcf	3,6	;RP1=0, select bank1
  3127  0E14  1E4A               	btfss	_Load^(0+128),4
  3128  0E15  0008               	return
  3129                           
  3130                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0x73);
  3131  0E16  3073               	movlw	115
  3132  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0E18  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0E19  00D0               	movwf	??_getLoad_AD
  3135  0E1A  0850               	movf	??_getLoad_AD,w
  3136  0E1B  00F4               	movwf	getAD@adcon1
  3137  0E1C  0852               	movf	getLoad_AD@channel,w
  3138  0E1D  158A  2430  158A   	fcall	_getAD
  3139  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3141  0E22  00D1               	movwf	??_getLoad_AD+1
  3142  0E23  0851               	movf	??_getLoad_AD+1,w
  3143  0E24  00D5               	movwf	getLoad_AD@ADRES
  3144                           
  3145                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  3146  0E25  01D6               	clrf	getLoad_AD@i
  3147  0E26  3004               	movlw	4
  3148  0E27  0256               	subwf	getLoad_AD@i,w
  3149  0E28  1803               	btfsc	3,0
  3150  0E29  2E46               	goto	l4974
  3151  0E2A                     l4962:	
  3152                           
  3153                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  3154  0E2A  0856               	movf	getLoad_AD@i,w
  3155  0E2B  3ED4               	addlw	(_Load+10)& (0+255)
  3156  0E2C  0084               	movwf	4
  3157  0E2D  0855               	movf	getLoad_AD@ADRES,w
  3158  0E2E  1383               	bcf	3,7	;select IRP bank1
  3159  0E2F  0200               	subwf	0,w
  3160  0E30  1803               	skipnc
  3161  0E31  2E3E               	goto	l4970
  3162  0E32  08D4               	movf	getLoad_AD@j,f
  3163  0E33  1D03               	skipz
  3164  0E34  2E3E               	goto	l4970
  3165                           
  3166                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  3167  0E35  0855               	movf	getLoad_AD@ADRES,w
  3168  0E36  00D0               	movwf	??_getLoad_AD
  3169  0E37  0856               	movf	getLoad_AD@i,w
  3170  0E38  3ED4               	addlw	(_Load+10)& (0+255)
  3171  0E39  0084               	movwf	4
  3172  0E3A  0850               	movf	??_getLoad_AD,w
  3173  0E3B  0080               	movwf	0
  3174                           
  3175                           ;OverLoad_B1.c: 25: j = 1;
  3176  0E3C  01D4               	clrf	getLoad_AD@j
  3177  0E3D  0AD4               	incf	getLoad_AD@j,f
  3178  0E3E                     l4970:	
  3179  0E3E  3001               	movlw	1
  3180  0E3F  00D0               	movwf	??_getLoad_AD
  3181  0E40  0850               	movf	??_getLoad_AD,w
  3182  0E41  07D6               	addwf	getLoad_AD@i,f
  3183  0E42  3004               	movlw	4
  3184  0E43  0256               	subwf	getLoad_AD@i,w
  3185  0E44  1C03               	skipc
  3186  0E45  2E2A               	goto	l4962
  3187  0E46                     l4974:	
  3188                           
  3189                           ;OverLoad_B1.c: 26: }
  3190                           ;OverLoad_B1.c: 27: }
  3191                           ;OverLoad_B1.c: 28: if (j == 0) {
  3192  0E46  08D4               	movf	getLoad_AD@j,f
  3193  0E47  1D03               	skipz
  3194  0E48  0008               	return
  3195                           
  3196                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  3197  0E49  01D6               	clrf	getLoad_AD@i
  3198  0E4A                     L6:	
  3199  0E4A  3004               	movlw	4
  3200  0E4B  0256               	subwf	getLoad_AD@i,w
  3201  0E4C  1803               	btfsc	3,0
  3202  0E4D  0008               	return
  3203                           
  3204                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  3205  0E4E  0856               	movf	getLoad_AD@i,w
  3206  0E4F  3ED9               	addlw	(_Load+15)& (0+255)
  3207  0E50  0084               	movwf	4
  3208  0E51  1383               	bcf	3,7	;select IRP bank1
  3209  0E52  0800               	movf	0,w
  3210  0E53  0255               	subwf	getLoad_AD@ADRES,w
  3211  0E54  1803               	skipnc
  3212  0E55  2E62               	goto	l4990
  3213  0E56  08D3               	movf	getLoad_AD@k,f
  3214  0E57  1D03               	skipz
  3215  0E58  2E62               	goto	l4990
  3216                           
  3217                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  3218  0E59  0855               	movf	getLoad_AD@ADRES,w
  3219  0E5A  00D0               	movwf	??_getLoad_AD
  3220  0E5B  0856               	movf	getLoad_AD@i,w
  3221  0E5C  3ED9               	addlw	(_Load+15)& (0+255)
  3222  0E5D  0084               	movwf	4
  3223  0E5E  0850               	movf	??_getLoad_AD,w
  3224  0E5F  0080               	movwf	0
  3225                           
  3226                           ;OverLoad_B1.c: 32: k = 1;
  3227  0E60  01D3               	clrf	getLoad_AD@k
  3228  0E61  0AD3               	incf	getLoad_AD@k,f
  3229  0E62                     l4990:	
  3230  0E62  3001               	movlw	1
  3231  0E63  00D0               	movwf	??_getLoad_AD
  3232  0E64  0850               	movf	??_getLoad_AD,w
  3233  0E65  07D6               	addwf	getLoad_AD@i,f
  3234  0E66  2E4A               	goto	L6
  3235  0E67                     __end_of_getLoad_AD:	
  3236                           
  3237                           	psect	text6
  3238  0C6A                     __ptext6:	
  3239 ;; *************** function _getCDS_AD *****************
  3240 ;; Defined at:
  3241 ;;		line 48 in file "../src/CDS_B1.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  channel1        1    wreg     unsigned char 
  3244 ;;  channel2        1    0[BANK0 ] unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  channel1        1    5[BANK0 ] unsigned char 
  3247 ;;  j               1    4[BANK0 ] unsigned char 
  3248 ;;  i               1    3[BANK0 ] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, pclath, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3258 ;;      Params:         0       1       0       0
  3259 ;;      Locals:         0       3       0       0
  3260 ;;      Temps:          0       2       0       0
  3261 ;;      Totals:         0       6       0       0
  3262 ;;Total ram usage:        6 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    4
  3265 ;; This function calls:
  3266 ;;		_getAD
  3267 ;; This function is called by:
  3268 ;;		_main
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function _getCDS_AD
  3274  0C6A                     _getCDS_AD:	
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3278                           ;getCDS_AD@channel1 stored from wreg
  3279  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0C6C  00D5               	movwf	getCDS_AD@channel1
  3282                           
  3283                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3284  0C6D  01D3               	clrf	getCDS_AD@i
  3285  0C6E  01D4               	clrf	getCDS_AD@j
  3286                           
  3287                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3288  0C6F  1DAE               	btfss	__CDS,3
  3289  0C70  0008               	return
  3290                           
  3291                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3292  0C71  14AE               	bsf	__CDS,1
  3293                           
  3294                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3295  0C72  3070               	movlw	112
  3296  0C73  00D1               	movwf	??_getCDS_AD
  3297  0C74  0851               	movf	??_getCDS_AD,w
  3298  0C75  00F4               	movwf	getAD@adcon1
  3299  0C76  0855               	movf	getCDS_AD@channel1,w
  3300  0C77  158A  2430  158A   	fcall	_getAD
  3301  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  3302  0C7B  1303               	bcf	3,6	;RP1=0, select bank0
  3303  0C7C  00D2               	movwf	??_getCDS_AD+1
  3304  0C7D  0852               	movf	??_getCDS_AD+1,w
  3305  0C7E  00B0               	movwf	__CDS+2
  3306                           
  3307                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3308  0C7F  3070               	movlw	112
  3309  0C80  00D1               	movwf	??_getCDS_AD
  3310  0C81  0851               	movf	??_getCDS_AD,w
  3311  0C82  00F4               	movwf	getAD@adcon1
  3312  0C83  0850               	movf	getCDS_AD@channel2,w
  3313  0C84  158A  2430         	fcall	_getAD
  3314  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  3315  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  3316  0C88  00D2               	movwf	??_getCDS_AD+1
  3317  0C89  0852               	movf	??_getCDS_AD+1,w
  3318  0C8A  00B1               	movwf	__CDS+3
  3319  0C8B  0008               	return
  3320  0C8C                     __end_of_getCDS_AD:	
  3321                           
  3322                           	psect	text7
  3323  0C30                     __ptext7:	
  3324 ;; *************** function _getAD *****************
  3325 ;; Defined at:
  3326 ;;		line 434 in file "../src/MCU_B1.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  adcon0          1    wreg     unsigned char 
  3329 ;;  adcon1          1    4[COMMON] unsigned char 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  adcon0          1    5[COMMON] unsigned char 
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      unsigned char 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0, pclath, cstack
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3341 ;;      Params:         1       0       0       0
  3342 ;;      Locals:         1       0       0       0
  3343 ;;      Temps:          0       0       0       0
  3344 ;;      Totals:         2       0       0       0
  3345 ;;Total ram usage:        2 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    3
  3348 ;; This function calls:
  3349 ;;		_Timeout_Counter
  3350 ;;		_set_TimeoutCleared
  3351 ;; This function is called by:
  3352 ;;		_getCDS_AD
  3353 ;;		_getLoad_AD
  3354 ;;		_getTemp_AD
  3355 ;;		_getPIR_AD
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _getAD
  3361  0C30                     _getAD:	
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3365                           ;getAD@adcon0 stored from wreg
  3366  0C30  00F5               	movwf	getAD@adcon0
  3367                           
  3368                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3369  0C31  0875               	movf	getAD@adcon0,w
  3370  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0C34  009F               	movwf	31	;volatile
  3373                           
  3374                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3375  0C35  0874               	movf	getAD@adcon1,w
  3376  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  3377  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  3378  0C38  009F               	movwf	31	;volatile
  3379                           
  3380                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3381  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0C3B  149F               	bsf	31,1	;volatile
  3384                           
  3385                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3386  0C3C  2C40               	goto	l4686
  3387  0C3D                     l4684:	
  3388                           
  3389                           ;MCU_B1.c: 439: Timeout_Counter();
  3390  0C3D  158A  233F  158A   	fcall	_Timeout_Counter
  3391  0C40                     l4686:	
  3392  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0C41  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0C42  1C9F               	btfss	31,1	;volatile
  3395  0C43  2C46               	goto	l4690
  3396  0C44  1D27               	btfss	_myMain+2,2
  3397  0C45  2C3D               	goto	l4684
  3398  0C46                     l4690:	
  3399                           
  3400                           ;MCU_B1.c: 440: };
  3401                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3402  0C46  158A  2256         	fcall	_set_TimeoutCleared
  3403                           
  3404                           ;MCU_B1.c: 442: return ADRES;
  3405  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0C4A  081E               	movf	30,w	;volatile
  3408  0C4B  0008               	return
  3409  0C4C                     __end_of_getAD:	
  3410                           
  3411                           	psect	text8
  3412  0A56                     __ptext8:	
  3413 ;; *************** function _set_TimeoutCleared *****************
  3414 ;; Defined at:
  3415 ;;		line 281 in file "../src/Main_B1.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;		None               void
  3422 ;; Registers used:
  3423 ;;		status,2
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3429 ;;      Params:         0       0       0       0
  3430 ;;      Locals:         0       0       0       0
  3431 ;;      Temps:          0       0       0       0
  3432 ;;      Totals:         0       0       0       0
  3433 ;;Total ram usage:        0 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    2
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_getAD
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _set_TimeoutCleared
  3445  0A56                     _set_TimeoutCleared:	
  3446                           
  3447                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _set_TimeoutCleared: [status,2]
  3451  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0A58  1127               	bcf	_myMain+2,2
  3454                           
  3455                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3456  0A59  01A8               	clrf	_myMain+3
  3457  0A5A  01A9               	clrf	_myMain+4
  3458  0A5B  0008               	return
  3459  0A5C                     __end_of_set_TimeoutCleared:	
  3460                           
  3461                           	psect	text9
  3462  0B3F                     __ptext9:	
  3463 ;; *************** function _Timeout_Counter *****************
  3464 ;; Defined at:
  3465 ;;		line 272 in file "../src/Main_B1.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;		None               void
  3472 ;; Registers used:
  3473 ;;		wreg, status,2
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3479 ;;      Params:         0       0       0       0
  3480 ;;      Locals:         0       0       0       0
  3481 ;;      Temps:          0       0       0       0
  3482 ;;      Totals:         0       0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    2
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_getAD
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _Timeout_Counter
  3495  0B3F                     _Timeout_Counter:	
  3496                           
  3497                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3501  0B3F  3001               	movlw	1
  3502  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  3503  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  3504  0B42  07A8               	addwf	_myMain+3,f
  3505  0B43  1803               	skipnc
  3506  0B44  0AA9               	incf	_myMain+4,f
  3507  0B45  3000               	movlw	0
  3508  0B46  07A9               	addwf	_myMain+4,f
  3509                           
  3510                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3511  0B47  3061               	movlw	97
  3512  0B48  0629               	xorwf	_myMain+4,w
  3513  0B49  1D03               	skipz
  3514  0B4A  2B4D               	goto	u5255
  3515  0B4B  30A8               	movlw	168
  3516  0B4C  0628               	xorwf	_myMain+3,w
  3517  0B4D                     u5255:	
  3518  0B4D  1D03               	skipz
  3519  0B4E  0008               	return
  3520                           
  3521                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3522  0B4F  01A8               	clrf	_myMain+3
  3523  0B50  01A9               	clrf	_myMain+4
  3524                           
  3525                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3526  0B51  1527               	bsf	_myMain+2,2
  3527  0B52  0008               	return
  3528  0B53                     __end_of_Timeout_Counter:	
  3529                           
  3530                           	psect	text10
  3531  0B0A                     __ptext10:	
  3532 ;; *************** function _WDT_Main *****************
  3533 ;; Defined at:
  3534 ;;		line 1116 in file "../src/MCU_B1.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;		None
  3539 ;; Return value:  Size  Location     Type
  3540 ;;		None               void
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, pclath, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3548 ;;      Params:         0       0       0       0
  3549 ;;      Locals:         0       0       0       0
  3550 ;;      Temps:          1       0       0       0
  3551 ;;      Totals:         1       0       0       0
  3552 ;;Total ram usage:        1 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    3
  3555 ;; This function calls:
  3556 ;;		_WDT_Clearing
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _WDT_Main
  3564  0B0A                     _WDT_Main:	
  3565                           
  3566                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3570  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  3572  0B0C  1C35               	btfss	_WDT,0
  3573  0B0D  0008               	return
  3574                           
  3575                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3576  0B0E  3001               	movlw	1
  3577  0B0F  02B6               	subwf	_WDT+1,f
  3578  0B10  0836               	movf	_WDT+1,w
  3579  0B11  3AFF               	xorlw	255
  3580  0B12  1903               	skipnz
  3581  0B13  0008               	return
  3582                           
  3583                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3584  0B14  3064               	movlw	100
  3585  0B15  00F4               	movwf	??_WDT_Main
  3586  0B16  0874               	movf	??_WDT_Main,w
  3587  0B17  00B6               	movwf	_WDT+1
  3588                           
  3589                           ;MCU_B1.c: 1120: WDT_Clearing();
  3590  0B18  118A  2002         	fcall	_WDT_Clearing
  3591  0B1A  0008               	return
  3592  0B1B                     __end_of_WDT_Main:	
  3593                           
  3594                           	psect	text11
  3595  0002                     __ptext11:	
  3596 ;; *************** function _WDT_Clearing *****************
  3597 ;; Defined at:
  3598 ;;		line 1126 in file "../src/MCU_B1.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;		None               void
  3605 ;; Registers used:
  3606 ;;		None
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3612 ;;      Params:         0       0       0       0
  3613 ;;      Locals:         0       0       0       0
  3614 ;;      Temps:          0       0       0       0
  3615 ;;      Totals:         0       0       0       0
  3616 ;;Total ram usage:        0 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    2
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_WDT_Main
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           
  3627                           ;psect for function _WDT_Clearing
  3628  0002                     _WDT_Clearing:	
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _WDT_Clearing: []
  3632  0002  0064               	clrwdt	;# 
  3633  0003  0008               	return
  3634  0004                     __end_of_WDT_Clearing:	
  3635                           
  3636                           	psect	text12
  3637  0A36                     __ptext12:	
  3638 ;; *************** function _Temp_Main *****************
  3639 ;; Defined at:
  3640 ;;		line 65 in file "../src/OverTemperature_B1.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;		None
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3654 ;;      Params:         0       0       0       0
  3655 ;;      Locals:         0       0       0       0
  3656 ;;      Temps:          0       0       0       0
  3657 ;;      Totals:         0       0       0       0
  3658 ;;Total ram usage:        0 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    4
  3661 ;; This function calls:
  3662 ;;		_setTemp_Main
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function _Temp_Main
  3670  0A36                     _Temp_Main:	
  3671                           
  3672                           ;OverTemperature_B1.c: 67: setTemp_Main();
  3673                           
  3674                           ;incstack = 0
  3675                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3676  0A36  118A  260A         	fcall	_setTemp_Main
  3677  0A38  0008               	return
  3678  0A39                     __end_of_Temp_Main:	
  3679                           
  3680                           	psect	text13
  3681  060A                     __ptext13:	
  3682 ;; *************** function _setTemp_Main *****************
  3683 ;; Defined at:
  3684 ;;		line 72 in file "../src/OverTemperature_B1.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;  AD              2   14[BANK0 ] int 
  3689 ;;  DangerValue     1   13[BANK0 ] unsigned char 
  3690 ;;  SafeValue       1   12[BANK0 ] unsigned char 
  3691 ;;  TempGO          1   11[BANK0 ] unsigned char 
  3692 ;;  error           1   10[BANK0 ] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;		None               void
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3702 ;;      Params:         0       0       0       0
  3703 ;;      Locals:         0       6       0       0
  3704 ;;      Temps:          0       2       0       0
  3705 ;;      Totals:         0       8       0       0
  3706 ;;Total ram usage:        8 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    3
  3709 ;; This function calls:
  3710 ;;		___awdiv
  3711 ;;		_getMain_All_Error_Status
  3712 ;;		_getMain_All_LightsStatus
  3713 ;;		_setOverTemp_ADV_Restore
  3714 ;; This function is called by:
  3715 ;;		_Temp_Main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           
  3720                           ;psect for function _setTemp_Main
  3721  060A                     _setTemp_Main:	
  3722                           
  3723                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  3724                           
  3725                           ;incstack = 0
  3726                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3727  060A  3000               	movlw	0
  3728  060B  158A  2506  118A   	fcall	_getMain_All_Error_Status
  3729  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3730  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0610  00D8               	movwf	??_setTemp_Main
  3732  0611  0858               	movf	??_setTemp_Main,w
  3733  0612  00DA               	movwf	setTemp_Main@error
  3734                           
  3735                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  3736  0613  01DC               	clrf	setTemp_Main@SafeValue
  3737  0614  01DD               	clrf	setTemp_Main@DangerValue
  3738                           
  3739                           ;OverTemperature_B1.c: 75: int AD = 0;
  3740  0615  01DE               	clrf	setTemp_Main@AD
  3741  0616  01DF               	clrf	setTemp_Main@AD+1
  3742                           
  3743                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  3744  0617  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  3745  061A  1283               	bcf	3,5	;RP0=0, select bank0
  3746  061B  1303               	bcf	3,6	;RP1=0, select bank0
  3747  061C  00D8               	movwf	??_setTemp_Main
  3748  061D  0858               	movf	??_setTemp_Main,w
  3749  061E  00DB               	movwf	setTemp_Main@TempGO
  3750                           
  3751                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  3752  061F  1C39               	btfss	_Temp,0
  3753  0620  2EBD               	goto	l830
  3754                           
  3755                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  3756  0621  1939               	btfsc	_Temp,2
  3757  0622  2E3F               	goto	l4788
  3758                           
  3759                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3760  0623  085B               	movf	setTemp_Main@TempGO,w
  3761  0624  3A01               	xorlw	1
  3762  0625  1D03               	skipz
  3763  0626  2E29               	goto	l836
  3764  0627  1CB9               	btfss	_Temp,1
  3765  0628  2E2B               	goto	l4780
  3766  0629                     l836:	
  3767  0629  1CB9               	btfss	_Temp,1
  3768  062A  2E3C               	goto	l4786
  3769  062B                     l4780:	
  3770                           
  3771                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3772  062B  3001               	movlw	1
  3773  062C  07BA               	addwf	_Temp+1,f
  3774  062D  1803               	skipnc
  3775  062E  0ABB               	incf	_Temp+2,f
  3776  062F  3000               	movlw	0
  3777  0630  07BB               	addwf	_Temp+2,f
  3778                           
  3779                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  3780  0631  3000               	movlw	0
  3781  0632  023B               	subwf	_Temp+2,w
  3782  0633  30FA               	movlw	250
  3783  0634  1903               	skipnz
  3784  0635  023A               	subwf	_Temp+1,w
  3785  0636  1C03               	skipc
  3786  0637  0008               	return
  3787                           
  3788                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3789  0638  01BA               	clrf	_Temp+1
  3790  0639  01BB               	clrf	_Temp+2
  3791                           
  3792                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  3793  063A  1539               	bsf	_Temp,2
  3794                           
  3795                           ;OverTemperature_B1.c: 92: }
  3796                           ;OverTemperature_B1.c: 93: } else {
  3797  063B  0008               	return
  3798  063C                     l4786:	
  3799                           
  3800                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  3801  063C  01BA               	clrf	_Temp+1
  3802  063D  01BB               	clrf	_Temp+2
  3803                           
  3804                           ;OverTemperature_B1.c: 95: }
  3805                           ;OverTemperature_B1.c: 96: } else {
  3806  063E  0008               	return
  3807  063F                     l4788:	
  3808                           
  3809                           ;OverTemperature_B1.c: 97: Temp.Time++;
  3810  063F  3001               	movlw	1
  3811  0640  07BA               	addwf	_Temp+1,f
  3812  0641  1803               	skipnc
  3813  0642  0ABB               	incf	_Temp+2,f
  3814  0643  3000               	movlw	0
  3815  0644  07BB               	addwf	_Temp+2,f
  3816                           
  3817                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  3818  0645  3000               	movlw	0
  3819  0646  023B               	subwf	_Temp+2,w
  3820  0647  3005               	movlw	5
  3821  0648  1903               	skipnz
  3822  0649  023A               	subwf	_Temp+1,w
  3823  064A  1C03               	skipc
  3824  064B  0008               	return
  3825                           
  3826                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  3827  064C  01BA               	clrf	_Temp+1
  3828  064D  01BB               	clrf	_Temp+2
  3829                           
  3830                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  3831  064E  3003               	movlw	3
  3832  064F  00D0               	movwf	___awdiv@divisor
  3833  0650  3000               	movlw	0
  3834  0651  00D1               	movwf	___awdiv@divisor+1
  3835  0652  083E               	movf	_Temp+5,w
  3836  0653  073F               	addwf	_Temp+6,w
  3837  0654  00D8               	movwf	??_setTemp_Main
  3838  0655  01D9               	clrf	??_setTemp_Main+1
  3839  0656  0DD9               	rlf	??_setTemp_Main+1,f
  3840  0657  0840               	movf	_Temp+7,w
  3841  0658  0758               	addwf	??_setTemp_Main,w
  3842  0659  00D2               	movwf	___awdiv@dividend
  3843  065A  3000               	movlw	0
  3844  065B  1803               	skipnc
  3845  065C  3001               	movlw	1
  3846  065D  0759               	addwf	??_setTemp_Main+1,w
  3847  065E  00D3               	movwf	___awdiv@dividend+1
  3848  065F  158A  2667  118A   	fcall	___awdiv
  3849  0662  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0663  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0664  0851               	movf	?___awdiv+1,w
  3852  0665  01DF               	clrf	setTemp_Main@AD+1
  3853  0666  07DF               	addwf	setTemp_Main@AD+1,f
  3854  0667  0850               	movf	?___awdiv,w
  3855  0668  01DE               	clrf	setTemp_Main@AD
  3856  0669  07DE               	addwf	setTemp_Main@AD,f
  3857                           
  3858                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  3859  066A  158A  23AE  118A   	fcall	_setOverTemp_ADV_Restore
  3860                           
  3861                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  3862  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3863  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3864  066F  085F               	movf	setTemp_Main@AD+1,w
  3865  0670  3A80               	xorlw	128
  3866  0671  00FF               	movwf	127
  3867  0672  3080               	movlw	128
  3868  0673  027F               	subwf	127,w
  3869  0674  1D03               	skipz
  3870  0675  2E78               	goto	u5695
  3871  0676  3001               	movlw	1
  3872  0677  025E               	subwf	setTemp_Main@AD,w
  3873  0678                     u5695:	
  3874  0678  1C03               	skipc
  3875  0679  0008               	return
  3876                           
  3877                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  3878  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3879  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3880  067C  1139               	bcf	_Temp,2
  3881                           
  3882                           ;OverTemperature_B1.c: 117: SafeValue = 0x39;
  3883  067D  3039               	movlw	57
  3884  067E  00D8               	movwf	??_setTemp_Main
  3885  067F  0858               	movf	??_setTemp_Main,w
  3886  0680  00DC               	movwf	setTemp_Main@SafeValue
  3887                           
  3888                           ;OverTemperature_B1.c: 118: DangerValue = 0x6a;
  3889  0681  306A               	movlw	106
  3890  0682  00D8               	movwf	??_setTemp_Main
  3891  0683  0858               	movf	??_setTemp_Main,w
  3892  0684  00DD               	movwf	setTemp_Main@DangerValue
  3893                           
  3894                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  3895  0685  1CB9               	btfss	_Temp,1
  3896  0686  2EA3               	goto	l4816
  3897                           
  3898                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  3899  0687  085F               	movf	setTemp_Main@AD+1,w
  3900  0688  3A80               	xorlw	128
  3901  0689  00D8               	movwf	??_setTemp_Main
  3902  068A  3080               	movlw	128
  3903  068B  0258               	subwf	??_setTemp_Main,w
  3904  068C  1D03               	skipz
  3905  068D  2E90               	goto	u5715
  3906  068E  085C               	movf	setTemp_Main@SafeValue,w
  3907  068F  025E               	subwf	setTemp_Main@AD,w
  3908  0690                     u5715:	
  3909  0690  1C03               	skipc
  3910  0691  2E9F               	goto	l4814
  3911                           
  3912                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3913  0692  3001               	movlw	1
  3914  0693  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0694  1303               	bcf	3,6	;RP1=0, select bank0
  3916  0695  00D8               	movwf	??_setTemp_Main
  3917  0696  0858               	movf	??_setTemp_Main,w
  3918  0697  07BC               	addwf	_Temp+3,f
  3919                           
  3920                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3921  0698  3003               	movlw	3
  3922  0699  023C               	subwf	_Temp+3,w
  3923  069A  1C03               	skipc
  3924  069B  0008               	return
  3925                           
  3926                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3927  069C  01BC               	clrf	_Temp+3
  3928                           
  3929                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  3930  069D  10B9               	bcf	_Temp,1
  3931                           
  3932                           ;OverTemperature_B1.c: 137: }
  3933                           ;OverTemperature_B1.c: 138: } else {
  3934                           
  3935                           ;OverTemperature_B1.c: 136: ;;
  3936  069E  0008               	return
  3937  069F                     l4814:	
  3938                           
  3939                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  3940  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3941  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3942  06A1  01BC               	clrf	_Temp+3
  3943                           
  3944                           ;OverTemperature_B1.c: 140: }
  3945                           ;OverTemperature_B1.c: 141: } else {
  3946  06A2  0008               	return
  3947  06A3                     l4816:	
  3948                           
  3949                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  3950  06A3  085F               	movf	setTemp_Main@AD+1,w
  3951  06A4  3A80               	xorlw	128
  3952  06A5  3C80               	sublw	128
  3953  06A6  1D03               	skipz
  3954  06A7  2EAA               	goto	u5735
  3955  06A8  085E               	movf	setTemp_Main@AD,w
  3956  06A9  025D               	subwf	setTemp_Main@DangerValue,w
  3957  06AA                     u5735:	
  3958  06AA  1C03               	skipc
  3959  06AB  2EB9               	goto	l4826
  3960                           
  3961                           ;OverTemperature_B1.c: 143: Temp.Count++;
  3962  06AC  3001               	movlw	1
  3963  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  3964  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  3965  06AF  00D8               	movwf	??_setTemp_Main
  3966  06B0  0858               	movf	??_setTemp_Main,w
  3967  06B1  07BC               	addwf	_Temp+3,f
  3968                           
  3969                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  3970  06B2  3003               	movlw	3
  3971  06B3  023C               	subwf	_Temp+3,w
  3972  06B4  1C03               	skipc
  3973  06B5  0008               	return
  3974                           
  3975                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  3976  06B6  01BC               	clrf	_Temp+3
  3977                           
  3978                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  3979  06B7  14B9               	bsf	_Temp,1
  3980                           
  3981                           ;OverTemperature_B1.c: 147: }
  3982                           ;OverTemperature_B1.c: 148: } else {
  3983  06B8  0008               	return
  3984  06B9                     l4826:	
  3985                           
  3986                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  3987  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3988  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3989  06BB  01BC               	clrf	_Temp+3
  3990                           
  3991                           ;OverTemperature_B1.c: 169: }
  3992                           ;OverTemperature_B1.c: 170: }
  3993                           ;OverTemperature_B1.c: 171: }
  3994                           ;OverTemperature_B1.c: 174: } else {
  3995                           
  3996                           ;OverTemperature_B1.c: 150: }
  3997                           ;OverTemperature_B1.c: 151: }
  3998                           ;OverTemperature_B1.c: 152: ;;
  3999                           ;OverTemperature_B1.c: 153: ;;
  4000  06BC  0008               	return
  4001  06BD                     l830:	
  4002                           
  4003                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  4004  06BD  1C25               	btfss	_myMain,0
  4005  06BE  0008               	return
  4006                           
  4007                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  4008  06BF  1439               	bsf	_Temp,0
  4009  06C0  0008               	return
  4010  06C1                     __end_of_setTemp_Main:	
  4011                           
  4012                           	psect	text14
  4013  0BAE                     __ptext14:	
  4014 ;; *************** function _setOverTemp_ADV_Restore *****************
  4015 ;; Defined at:
  4016 ;;		line 182 in file "../src/OverTemperature_B1.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  i               2    4[COMMON] int 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4030 ;;      Params:         0       0       0       0
  4031 ;;      Locals:         2       0       0       0
  4032 ;;      Temps:          0       0       0       0
  4033 ;;      Totals:         2       0       0       0
  4034 ;;Total ram usage:        2 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    2
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_setTemp_Main
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _setOverTemp_ADV_Restore
  4046  0BAE                     _setOverTemp_ADV_Restore:	
  4047                           
  4048                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  4049                           
  4050                           ;incstack = 0
  4051                           ; Regs used in _setOverTemp_ADV_Restore: [wreg-fsr0h+status,2+status,0+btemp+1]
  4052  0BAE  01F4               	clrf	setOverTemp_ADV_Restore@i
  4053  0BAF  01F5               	clrf	setOverTemp_ADV_Restore@i+1
  4054  0BB0                     L7:	
  4055  0BB0  0875               	movf	setOverTemp_ADV_Restore@i+1,w
  4056  0BB1  3A80               	xorlw	128
  4057  0BB2  00FF               	movwf	127
  4058  0BB3  3080               	movlw	128
  4059  0BB4  027F               	subwf	127,w
  4060  0BB5  1D03               	skipz
  4061  0BB6  2BB9               	goto	u2835
  4062  0BB7  3005               	movlw	5
  4063  0BB8  0274               	subwf	setOverTemp_ADV_Restore@i,w
  4064  0BB9                     u2835:	
  4065  0BB9  1803               	btfsc	3,0
  4066  0BBA  0008               	return
  4067                           
  4068                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  4069  0BBB  0874               	movf	setOverTemp_ADV_Restore@i,w
  4070  0BBC  3E3D               	addlw	(_Temp+4)& (0+255)
  4071  0BBD  0084               	movwf	4
  4072  0BBE  1383               	bcf	3,7	;select IRP bank0
  4073  0BBF  0180               	clrf	0
  4074  0BC0  3001               	movlw	1
  4075  0BC1  07F4               	addwf	setOverTemp_ADV_Restore@i,f
  4076  0BC2  1803               	skipnc
  4077  0BC3  0AF5               	incf	setOverTemp_ADV_Restore@i+1,f
  4078  0BC4  3000               	movlw	0
  4079  0BC5  07F5               	addwf	setOverTemp_ADV_Restore@i+1,f
  4080  0BC6  2BB0               	goto	L7
  4081  0BC7                     __end_of_setOverTemp_ADV_Restore:	
  4082                           
  4083                           	psect	text15
  4084  0A33                     __ptext15:	
  4085 ;; *************** function _Temp_Initialization *****************
  4086 ;; Defined at:
  4087 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;		None               void
  4094 ;; Registers used:
  4095 ;;		status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4101 ;;      Params:         0       0       0       0
  4102 ;;      Locals:         0       0       0       0
  4103 ;;      Temps:          0       0       0       0
  4104 ;;      Totals:         0       0       0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    3
  4108 ;; This function calls:
  4109 ;;		_setTemp_Initialization
  4110 ;; This function is called by:
  4111 ;;		_main
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           
  4116                           ;psect for function _Temp_Initialization
  4117  0A33                     _Temp_Initialization:	
  4118                           
  4119                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4120                           
  4121                           ;incstack = 0
  4122                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4123  0A33  158A  2225         	fcall	_setTemp_Initialization
  4124  0A35  0008               	return
  4125  0A36                     __end_of_Temp_Initialization:	
  4126                           
  4127                           	psect	text16
  4128  0A25                     __ptext16:	
  4129 ;; *************** function _setTemp_Initialization *****************
  4130 ;; Defined at:
  4131 ;;		line 60 in file "../src/OverTemperature_B1.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;		None               void
  4138 ;; Registers used:
  4139 ;;		None
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4145 ;;      Params:         0       0       0       0
  4146 ;;      Locals:         0       0       0       0
  4147 ;;      Temps:          0       0       0       0
  4148 ;;      Totals:         0       0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    2
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_Temp_Initialization
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           
  4160                           ;psect for function _setTemp_Initialization
  4161  0A25                     _setTemp_Initialization:	
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _setTemp_Initialization: []
  4165  0A25  0008               	return
  4166  0A26                     __end_of_setTemp_Initialization:	
  4167                           
  4168                           	psect	text17
  4169  0A30                     __ptext17:	
  4170 ;; *************** function _SYSC_Main *****************
  4171 ;; Defined at:
  4172 ;;		line 17 in file "../src/SYSC_B1.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;		None               void
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0, pclath, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4186 ;;      Params:         0       0       0       0
  4187 ;;      Locals:         0       0       0       0
  4188 ;;      Temps:          0       0       0       0
  4189 ;;      Totals:         0       0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    4
  4193 ;; This function calls:
  4194 ;;		_setSYSC_Main
  4195 ;; This function is called by:
  4196 ;;		_main
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _SYSC_Main
  4202  0A30                     _SYSC_Main:	
  4203                           
  4204                           ;SYSC_B1.c: 19: setSYSC_Main();
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4208  0A30  158A  25C7         	fcall	_setSYSC_Main
  4209  0A32  0008               	return
  4210  0A33                     __end_of_SYSC_Main:	
  4211                           
  4212                           	psect	text18
  4213  0DC7                     __ptext18:	
  4214 ;; *************** function _setSYSC_Main *****************
  4215 ;; Defined at:
  4216 ;;		line 23 in file "../src/SYSC_B1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4230 ;;      Params:         0       0       0       0
  4231 ;;      Locals:         0       0       0       0
  4232 ;;      Temps:          0       0       0       0
  4233 ;;      Totals:         0       0       0       0
  4234 ;;Total ram usage:        0 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    3
  4237 ;; This function calls:
  4238 ;;		_getMain_All_Error_Status
  4239 ;; This function is called by:
  4240 ;;		_SYSC_Main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _setSYSC_Main
  4246  0DC7                     _setSYSC_Main:	
  4247                           
  4248                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4252  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0DC9  1C20               	btfss	_SYSC,0
  4255  0DCA  0008               	return
  4256                           
  4257                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4258  0DCB  18A0               	btfsc	_SYSC,1
  4259  0DCC  2DDE               	goto	l3628
  4260                           
  4261                           ;SYSC_B1.c: 27: SYSC.Time++;
  4262  0DCD  3001               	movlw	1
  4263  0DCE  07A1               	addwf	_SYSC+1,f
  4264  0DCF  1803               	skipnc
  4265  0DD0  0AA2               	incf	_SYSC+2,f
  4266  0DD1  3000               	movlw	0
  4267  0DD2  07A2               	addwf	_SYSC+2,f
  4268                           
  4269                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4270  0DD3  3000               	movlw	0
  4271  0DD4  0222               	subwf	_SYSC+2,w
  4272  0DD5  3019               	movlw	25
  4273  0DD6  1903               	skipnz
  4274  0DD7  0221               	subwf	_SYSC+1,w
  4275  0DD8  1C03               	skipc
  4276  0DD9  0008               	return
  4277                           
  4278                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4279  0DDA  01A1               	clrf	_SYSC+1
  4280  0DDB  01A2               	clrf	_SYSC+2
  4281                           
  4282                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4283  0DDC  14A0               	bsf	_SYSC,1
  4284                           
  4285                           ;SYSC_B1.c: 31: }
  4286                           ;SYSC_B1.c: 32: } else {
  4287  0DDD  0008               	return
  4288  0DDE                     l3628:	
  4289                           
  4290                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4291  0DDE  3001               	movlw	1
  4292  0DDF  158A  2506  158A   	fcall	_getMain_All_Error_Status
  4293  0DE2  3800               	iorlw	0
  4294  0DE3  1D03               	skipz
  4295  0DE4  0008               	return
  4296                           
  4297                           ;SYSC_B1.c: 34: SYSC.Time++;
  4298  0DE5  3001               	movlw	1
  4299  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  4300  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  4301  0DE8  07A1               	addwf	_SYSC+1,f
  4302  0DE9  1803               	skipnc
  4303  0DEA  0AA2               	incf	_SYSC+2,f
  4304  0DEB  3000               	movlw	0
  4305  0DEC  07A2               	addwf	_SYSC+2,f
  4306                           
  4307                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4308  0DED  3000               	movlw	0
  4309  0DEE  0222               	subwf	_SYSC+2,w
  4310  0DEF  3019               	movlw	25
  4311  0DF0  1903               	skipnz
  4312  0DF1  0221               	subwf	_SYSC+1,w
  4313  0DF2  1C03               	skipc
  4314  0DF3  2DF9               	goto	l3634
  4315                           
  4316                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4317  0DF4  01A1               	clrf	_SYSC+1
  4318  0DF5  01A2               	clrf	_SYSC+2
  4319                           
  4320                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4321  0DF6  01A3               	clrf	_SYSC+3
  4322  0DF7  01A4               	clrf	_SYSC+4
  4323                           
  4324                           ;SYSC_B1.c: 38: } else {
  4325  0DF8  0008               	return
  4326  0DF9                     l3634:	
  4327                           
  4328                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4329  0DF9  3001               	movlw	1
  4330  0DFA  07A3               	addwf	_SYSC+3,f
  4331  0DFB  1803               	skipnc
  4332  0DFC  0AA4               	incf	_SYSC+4,f
  4333  0DFD  3000               	movlw	0
  4334  0DFE  07A4               	addwf	_SYSC+4,f
  4335                           
  4336                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4337  0DFF  3001               	movlw	1
  4338  0E00  0624               	xorwf	_SYSC+4,w
  4339  0E01  1D03               	skipz
  4340  0E02  2E05               	goto	u3435
  4341  0E03  30F4               	movlw	244
  4342  0E04  0623               	xorwf	_SYSC+3,w
  4343  0E05                     u3435:	
  4344  0E05  1D03               	skipz
  4345  0E06  0008               	return
  4346                           
  4347                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4348  0E07  01A3               	clrf	_SYSC+3
  4349  0E08  01A4               	clrf	_SYSC+4
  4350                           
  4351                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4352  0E09  10A0               	bcf	_SYSC,1
  4353  0E0A  0008               	return
  4354  0E0B                     __end_of_setSYSC_Main:	
  4355                           
  4356                           	psect	text19
  4357  0A2D                     __ptext19:	
  4358 ;; *************** function _SYSC_Initialization *****************
  4359 ;; Defined at:
  4360 ;;		line 7 in file "../src/SYSC_B1.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4374 ;;      Params:         0       0       0       0
  4375 ;;      Locals:         0       0       0       0
  4376 ;;      Temps:          0       0       0       0
  4377 ;;      Totals:         0       0       0       0
  4378 ;;Total ram usage:        0 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    3
  4381 ;; This function calls:
  4382 ;;		_setSYSC_Initialization
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _SYSC_Initialization
  4390  0A2D                     _SYSC_Initialization:	
  4391                           
  4392                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4396  0A2D  158A  2241         	fcall	_setSYSC_Initialization
  4397  0A2F  0008               	return
  4398  0A30                     __end_of_SYSC_Initialization:	
  4399                           
  4400                           	psect	text20
  4401  0A41                     __ptext20:	
  4402 ;; *************** function _setSYSC_Initialization *****************
  4403 ;; Defined at:
  4404 ;;		line 13 in file "../src/SYSC_B1.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;		None               void
  4411 ;; Registers used:
  4412 ;;		None
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4418 ;;      Params:         0       0       0       0
  4419 ;;      Locals:         0       0       0       0
  4420 ;;      Temps:          0       0       0       0
  4421 ;;      Totals:         0       0       0       0
  4422 ;;Total ram usage:        0 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    2
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_SYSC_Initialization
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _setSYSC_Initialization
  4434  0A41                     _setSYSC_Initialization:	
  4435                           
  4436                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _setSYSC_Initialization: []
  4440  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0A43  1420               	bsf	_SYSC,0
  4443  0A44  0008               	return
  4444  0A45                     __end_of_setSYSC_Initialization:	
  4445                           
  4446                           	psect	text21
  4447  0026                     __ptext21:	
  4448 ;; *************** function _PIR_Main *****************
  4449 ;; Defined at:
  4450 ;;		line 13 in file "../src/PIR_B1.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4455 ;;  TriggerValue    1   16[BANK0 ] unsigned char 
  4456 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  4457 ;;  cds             1   12[BANK0 ] unsigned char 
  4458 ;;  error           1   11[BANK0 ] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       7       0       0
  4470 ;;      Temps:          0       5       0       0
  4471 ;;      Totals:         0      12       0       0
  4472 ;;Total ram usage:       12 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    5
  4475 ;; This function calls:
  4476 ;;		_getCDS_Status
  4477 ;;		_getLights_Status
  4478 ;;		_getMain_All_Error_Status
  4479 ;;		_setLED
  4480 ;;		_setLights_SwOff
  4481 ;;		_setLights_SwOn
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _PIR_Main
  4489  0026                     _PIR_Main:	
  4490                           
  4491                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4495  0026  3000               	movlw	0
  4496  0027  158A  2506  118A   	fcall	_getMain_All_Error_Status
  4497  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4498  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4499  002C  00D6               	movwf	??_PIR_Main
  4500  002D  0856               	movf	??_PIR_Main,w
  4501  002E  00DB               	movwf	PIR_Main@error
  4502                           
  4503                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4504  002F  158A  227A  118A   	fcall	_getCDS_Status
  4505  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4506  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0034  00D6               	movwf	??_PIR_Main
  4508  0035  0856               	movf	??_PIR_Main,w
  4509  0036  00DC               	movwf	PIR_Main@cds
  4510                           
  4511                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4512  0037  01E1               	clrf	PIR_Main@LightsStatus
  4513                           
  4514                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4515  0038  01DD               	clrf	PIR_Main@Enable_Switch
  4516  0039  0ADD               	incf	PIR_Main@Enable_Switch,f
  4517                           
  4518                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4519  003A  01E0               	clrf	PIR_Main@TriggerValue
  4520                           
  4521                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4522  003B  3001               	movlw	1
  4523  003C  158A  22F9  118A   	fcall	_getLights_Status
  4524  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4526  0041  00D6               	movwf	??_PIR_Main
  4527  0042  0856               	movf	??_PIR_Main,w
  4528  0043  00E1               	movwf	PIR_Main@LightsStatus
  4529                           
  4530                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4531  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0046  1C20               	btfss	__PIR^(0+128),0
  4534  0047  2A12               	goto	l913
  4535                           
  4536                           ;PIR_B1.c: 36: if (error == 0) {
  4537  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4538  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4539  004A  08DB               	movf	PIR_Main@error,f
  4540  004B  1D03               	skipz
  4541  004C  288B               	goto	l914
  4542                           
  4543                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4544  004D  085C               	movf	PIR_Main@cds,w
  4545  004E  3A01               	xorlw	1
  4546  004F  1D03               	skipz
  4547  0050  2859               	goto	l915
  4548  0051  085D               	movf	PIR_Main@Enable_Switch,w
  4549  0052  3A01               	xorlw	1
  4550  0053  1D03               	skipz
  4551  0054  2859               	goto	l915
  4552                           
  4553                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4554  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4555  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4556  0057  17A0               	bsf	__PIR^(0+128),7
  4557                           
  4558                           ;PIR_B1.c: 40: } else {
  4559  0058  287B               	goto	l5290
  4560  0059                     l915:	
  4561                           
  4562                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4563  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4564  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4565  005B  13A0               	bcf	__PIR^(0+128),7
  4566                           
  4567                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4568  005C  1DA0               	btfss	__PIR^(0+128),3
  4569  005D  287B               	goto	l5290
  4570                           
  4571                           ;PIR_B1.c: 45: setLED(1, 0);
  4572  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4573  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0060  01D0               	clrf	setLED@command
  4575  0061  3001               	movlw	1
  4576  0062  158A  26C4  118A   	fcall	_setLED
  4577                           
  4578                           ;PIR_B1.c: 46: setLED(2, 0);
  4579  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4580  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4581  0067  01D0               	clrf	setLED@command
  4582  0068  3002               	movlw	2
  4583  0069  158A  26C4  118A   	fcall	_setLED
  4584                           
  4585                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4586  006C  3001               	movlw	1
  4587  006D  158A  22F9  118A   	fcall	_getLights_Status
  4588  0070  3A01               	xorlw	1
  4589  0071  1D03               	skipz
  4590  0072  287B               	goto	l5290
  4591                           
  4592                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4593  0073  3001               	movlw	1
  4594  0074  158A  248C  118A   	fcall	_setLights_SwOn
  4595                           
  4596                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4597  0077  3001               	movlw	1
  4598  0078  158A  23C7  118A   	fcall	_setLights_SwOff
  4599  007B                     l5290:	
  4600                           
  4601                           ;PIR_B1.c: 55: }
  4602                           ;PIR_B1.c: 67: }
  4603                           ;PIR_B1.c: 68: }
  4604                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4605  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4606  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4607  007D  1A20               	btfsc	__PIR^(0+128),4
  4608  007E  2891               	goto	l921
  4609                           
  4610                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4611  007F  1620               	bsf	__PIR^(0+128),4
  4612                           
  4613                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4614  0080  19A0               	btfsc	__PIR^(0+128),3
  4615  0081  2891               	goto	l921
  4616                           
  4617                           ;PIR_B1.c: 76: setLED(1, 1);
  4618  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4619  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4620  0084  01D0               	clrf	setLED@command
  4621  0085  0AD0               	incf	setLED@command,f
  4622  0086  3001               	movlw	1
  4623  0087  158A  26C4  118A   	fcall	_setLED
  4624                           
  4625                           ;PIR_B1.c: 77: }
  4626                           ;PIR_B1.c: 80: }
  4627                           ;PIR_B1.c: 81: } else {
  4628  008A  2891               	goto	l921
  4629  008B                     l914:	
  4630                           
  4631                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4632  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4633  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4634  008D  1E20               	btfss	__PIR^(0+128),4
  4635  008E  2891               	goto	l921
  4636                           
  4637                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4638  008F  1220               	bcf	__PIR^(0+128),4
  4639                           
  4640                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4641  0090  13A0               	bcf	__PIR^(0+128),7
  4642  0091                     l921:	
  4643                           
  4644                           ;PIR_B1.c: 102: }
  4645                           ;PIR_B1.c: 103: }
  4646                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4647  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4648  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4649  0093  18A0               	btfsc	__PIR^(0+128),1
  4650  0094  28A4               	goto	l923
  4651                           
  4652                           ;PIR_B1.c: 106: _PIR.Time++;
  4653  0095  3001               	movlw	1
  4654  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4655  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4656  0098  00D6               	movwf	??_PIR_Main
  4657  0099  0856               	movf	??_PIR_Main,w
  4658  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4659  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4660  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4661                           
  4662                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4663  009D  0822               	movf	(__PIR^(0+128)+2),w
  4664  009E  3A05               	xorlw	5
  4665  009F  1D03               	skipz
  4666  00A0  29B1               	goto	l5378
  4667                           
  4668                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4669  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4670                           
  4671                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4672  00A2  14A0               	bsf	__PIR^(0+128),1
  4673                           
  4674                           ;PIR_B1.c: 110: }
  4675                           ;PIR_B1.c: 111: } else {
  4676  00A3  29B1               	goto	l5378
  4677  00A4                     l923:	
  4678                           
  4679                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4680  00A4  1D20               	btfss	__PIR^(0+128),2
  4681  00A5  29B1               	goto	l5378
  4682                           
  4683                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4684  00A6  1120               	bcf	__PIR^(0+128),2
  4685                           
  4686                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4687  00A7  10A0               	bcf	__PIR^(0+128),1
  4688                           
  4689                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4690  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4691                           
  4692                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4693  00A9  1DA0               	btfss	__PIR^(0+128),3
  4694  00AA  29B1               	goto	l5378
  4695                           
  4696                           ;PIR_B1.c: 118: _PIR.Time++;
  4697  00AB  3001               	movlw	1
  4698  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4699  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4700  00AE  00D6               	movwf	??_PIR_Main
  4701  00AF  0856               	movf	??_PIR_Main,w
  4702  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4703  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4704  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4705                           
  4706                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4707  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4708  00B4  3A3C               	xorlw	60
  4709  00B5  1D03               	skipz
  4710  00B6  28EB               	goto	l5346
  4711                           
  4712                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4713  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4714                           
  4715                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4716  00B8  305A               	movlw	90
  4717  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4718  00BA  1C03               	skipc
  4719  00BB  28C7               	goto	l5328
  4720                           
  4721                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4722  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4723                           
  4724                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4725  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4726  00BE  3A19               	xorlw	25
  4727  00BF  1903               	btfsc	3,2
  4728  00C0  28DC               	goto	L13
  4729                           
  4730                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4731                           
  4732                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4733  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4734  00C2  3A23               	xorlw	35
  4735  00C3  1D03               	skipz
  4736  00C4  28EA               	goto	l5344
  4737                           
  4738                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4739  00C5  302D               	movlw	45
  4740  00C6  28E3               	goto	L10
  4741  00C7                     l5328:	
  4742                           ;PIR_B1.c: 128: }
  4743                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4744                           
  4745  00C7  300B               	movlw	11
  4746  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4747  00C9  1803               	skipnc
  4748  00CA  28EA               	goto	l5344
  4749                           
  4750                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4751  00CB  3001               	movlw	1
  4752  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4753  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4754  00CE  00D6               	movwf	??_PIR_Main
  4755  00CF  0856               	movf	??_PIR_Main,w
  4756  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4757  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4758  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4759                           
  4760                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4761  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4762  00D4  3A02               	xorlw	2
  4763  00D5  1D03               	skipz
  4764  00D6  28EA               	goto	l5344
  4765                           
  4766                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4767  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4768                           
  4769                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4770  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4771  00D9  3A2D               	xorlw	45
  4772  00DA  1D03               	skipz
  4773  00DB  28DE               	goto	l5340
  4774  00DC                     L13:	
  4775                           
  4776                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4777  00DC  3023               	movlw	35
  4778  00DD  28E3               	goto	L10
  4779  00DE                     l5340:	
  4780                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4781                           
  4782  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4783  00DF  3A23               	xorlw	35
  4784  00E0  1D03               	skipz
  4785  00E1  28EA               	goto	l5344
  4786                           
  4787                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4788  00E2  3019               	movlw	25
  4789  00E3                     L10:	
  4790  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4791  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4792  00E5  00D6               	movwf	??_PIR_Main
  4793  00E6  0856               	movf	??_PIR_Main,w
  4794  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4795  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4796  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4797  00EA                     l5344:	
  4798                           
  4799                           ;PIR_B1.c: 138: }
  4800                           ;PIR_B1.c: 139: }
  4801                           ;PIR_B1.c: 140: }
  4802                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4803  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4804  00EB                     l5346:	
  4805                           
  4806                           ;PIR_B1.c: 142: }
  4807                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4808                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4809  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4810  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4811  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4812  00EE  00D6               	movwf	??_PIR_Main
  4813  00EF  01D7               	clrf	??_PIR_Main+1
  4814  00F0  09D6               	comf	??_PIR_Main,f
  4815  00F1  09D7               	comf	??_PIR_Main+1,f
  4816  00F2  0AD6               	incf	??_PIR_Main,f
  4817  00F3  1903               	skipnz
  4818  00F4  0AD7               	incf	??_PIR_Main+1,f
  4819  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4820  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4821  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4822  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4823  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4824  00FA  0756               	addwf	??_PIR_Main,w
  4825  00FB  00D8               	movwf	??_PIR_Main+2
  4826  00FC  0857               	movf	??_PIR_Main+1,w
  4827  00FD  1803               	skipnc
  4828  00FE  0A57               	incf	??_PIR_Main+1,w
  4829  00FF  00D9               	movwf	??_PIR_Main+3
  4830  0100  0859               	movf	??_PIR_Main+3,w
  4831  0101  3A80               	xorlw	128
  4832  0102  3C80               	sublw	128
  4833  0103  1D03               	skipz
  4834  0104  2909               	goto	u6945
  4835  0105  0858               	movf	??_PIR_Main+2,w
  4836  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4837  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4838  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4839  0109                     u6945:	
  4840  0109  1C03               	skipc
  4841  010A  292B               	goto	l5356
  4842  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4843  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4844  010D  0823               	movf	(__PIR^(0+128)+3),w
  4845  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4846  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4847  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4848  0111  00D6               	movwf	??_PIR_Main
  4849  0112  01D7               	clrf	??_PIR_Main+1
  4850  0113  0DD7               	rlf	??_PIR_Main+1,f
  4851  0114  0857               	movf	??_PIR_Main+1,w
  4852  0115  3A80               	xorlw	128
  4853  0116  00D8               	movwf	??_PIR_Main+2
  4854  0117  3080               	movlw	128
  4855  0118  0258               	subwf	??_PIR_Main+2,w
  4856  0119  1D03               	skipz
  4857  011A  2921               	goto	u6955
  4858  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4859  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4860  011D  0821               	movf	(__PIR^(0+128)+1),w
  4861  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4862  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0120  0256               	subwf	??_PIR_Main,w
  4864  0121                     u6955:	
  4865  0121  1C03               	skipc
  4866  0122  292B               	goto	l5356
  4867                           
  4868                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4869  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4870  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4871  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4872  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4873                           
  4874                           ;PIR_B1.c: 155: setLED(1, 0);
  4875  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0129  01D0               	clrf	setLED@command
  4878  012A  299A               	goto	L14
  4879  012B                     l5356:	
  4880                           ;PIR_B1.c: 159: } else {
  4881                           
  4882                           ;PIR_B1.c: 156: setLED(2, 0);
  4883                           
  4884                           
  4885                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4886  012B  3001               	movlw	1
  4887  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4888  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4889  012E  00D6               	movwf	??_PIR_Main
  4890  012F  0856               	movf	??_PIR_Main,w
  4891  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4892  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4893  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4894                           
  4895                           ;PIR_B1.c: 163: _PIR.Count++;
  4896  0133  3001               	movlw	1
  4897  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4898  0135  1803               	skipnc
  4899  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4900  0137  3000               	movlw	0
  4901  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4902                           
  4903                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4904  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4905  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4906  013B  0861               	movf	PIR_Main@LightsStatus,w
  4907  013C  3A01               	xorlw	1
  4908  013D  1903               	skipnz
  4909  013E  293F               	goto	l5364
  4910  013F                     l5364:	
  4911  013F  3003               	movlw	3
  4912  0140  00DE               	movwf	_PIR_Main$2862
  4913  0141  3000               	movlw	0
  4914  0142  00DF               	movwf	_PIR_Main$2862+1
  4915  0143  085E               	movf	_PIR_Main$2862,w
  4916  0144  00D6               	movwf	??_PIR_Main
  4917  0145  0856               	movf	??_PIR_Main,w
  4918  0146  00E0               	movwf	PIR_Main@TriggerValue
  4919                           
  4920                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4921  0147  0860               	movf	PIR_Main@TriggerValue,w
  4922  0148  00D6               	movwf	??_PIR_Main
  4923  0149  01D7               	clrf	??_PIR_Main+1
  4924  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4925  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4926  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4927  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4928  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4929  014F  0657               	xorwf	??_PIR_Main+1,w
  4930  0150  1D03               	skipz
  4931  0151  2958               	goto	u6975
  4932  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4934  0154  083E               	movf	(__PIR^(0+128)+30),w
  4935  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4936  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4937  0157  0656               	xorwf	??_PIR_Main,w
  4938  0158                     u6975:	
  4939  0158  1D03               	skipz
  4940  0159  29B1               	goto	l5378
  4941                           
  4942                           ;PIR_B1.c: 169: _PIR.CloseTimeSeconds = 0;
  4943  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4944  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4945  015C  01C2               	clrf	(__PIR^(0+128)+34)
  4946                           
  4947                           ;PIR_B1.c: 170: _PIR.CloseTimeMinutes = 0;
  4948  015D  01C0               	clrf	(__PIR^(0+128)+32)
  4949  015E  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4950                           
  4951                           ;PIR_B1.c: 172: _PIR.Count = 0;
  4952  015F  01BE               	clrf	(__PIR^(0+128)+30)
  4953  0160  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4954                           
  4955                           ;PIR_B1.c: 179: if (getLights_Status(1) == 0) {
  4956  0161  3001               	movlw	1
  4957  0162  158A  22F9  118A   	fcall	_getLights_Status
  4958  0165  3800               	iorlw	0
  4959  0166  1D03               	skipz
  4960  0167  2970               	goto	l5372
  4961                           
  4962                           ;PIR_B1.c: 180: setLights_SwOn(1);
  4963  0168  3001               	movlw	1
  4964  0169  158A  248C  118A   	fcall	_setLights_SwOn
  4965                           
  4966                           ;PIR_B1.c: 181: setLights_SwOff(1);
  4967  016C  3001               	movlw	1
  4968  016D  158A  23C7  118A   	fcall	_setLights_SwOff
  4969  0170                     l5372:	
  4970                           
  4971                           ;PIR_B1.c: 183: }
  4972                           ;PIR_B1.c: 197: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4973  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4974  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4975  0172  0848               	movf	(__PIR^(0+128)+40),w
  4976  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0175  00D6               	movwf	??_PIR_Main
  4979  0176  01D7               	clrf	??_PIR_Main+1
  4980  0177  09D6               	comf	??_PIR_Main,f
  4981  0178  09D7               	comf	??_PIR_Main+1,f
  4982  0179  0AD6               	incf	??_PIR_Main,f
  4983  017A  1903               	skipnz
  4984  017B  0AD7               	incf	??_PIR_Main+1,f
  4985  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4986  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4987  017E  0823               	movf	(__PIR^(0+128)+3),w
  4988  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0181  0756               	addwf	??_PIR_Main,w
  4991  0182  00D8               	movwf	??_PIR_Main+2
  4992  0183  0857               	movf	??_PIR_Main+1,w
  4993  0184  1803               	skipnc
  4994  0185  0A57               	incf	??_PIR_Main+1,w
  4995  0186  00D9               	movwf	??_PIR_Main+3
  4996  0187  0859               	movf	??_PIR_Main+3,w
  4997  0188  3A80               	xorlw	128
  4998  0189  00DA               	movwf	??_PIR_Main+4
  4999  018A  3080               	movlw	128
  5000  018B  025A               	subwf	??_PIR_Main+4,w
  5001  018C  1D03               	skipz
  5002  018D  2994               	goto	u6995
  5003  018E  1683               	bsf	3,5	;RP0=1, select bank1
  5004  018F  1303               	bcf	3,6	;RP1=0, select bank1
  5005  0190  0821               	movf	(__PIR^(0+128)+1),w
  5006  0191  1283               	bcf	3,5	;RP0=0, select bank0
  5007  0192  1303               	bcf	3,6	;RP1=0, select bank0
  5008  0193  0258               	subwf	??_PIR_Main+2,w
  5009  0194                     u6995:	
  5010  0194  1C03               	skipc
  5011  0195  29A2               	goto	l5376
  5012                           
  5013                           ;PIR_B1.c: 198: setLED(1, 1);
  5014  0196  1283               	bcf	3,5	;RP0=0, select bank0
  5015  0197  1303               	bcf	3,6	;RP1=0, select bank0
  5016  0198  01D0               	clrf	setLED@command
  5017  0199  0AD0               	incf	setLED@command,f
  5018  019A                     L14:	
  5019  019A  3001               	movlw	1
  5020  019B  158A  26C4  118A   	fcall	_setLED
  5021                           
  5022                           ;PIR_B1.c: 199: setLED(2, 0);
  5023  019E  1283               	bcf	3,5	;RP0=0, select bank0
  5024  019F  1303               	bcf	3,6	;RP1=0, select bank0
  5025  01A0  01D0               	clrf	setLED@command
  5026  01A1  29AD               	goto	L11
  5027  01A2                     l5376:	
  5028                           ;PIR_B1.c: 200: } else {
  5029                           
  5030                           
  5031                           ;PIR_B1.c: 201: setLED(1, 0);
  5032  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  5033  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  5034  01A4  01D0               	clrf	setLED@command
  5035  01A5  3001               	movlw	1
  5036  01A6  158A  26C4  118A   	fcall	_setLED
  5037                           
  5038                           ;PIR_B1.c: 202: setLED(2, 1);
  5039  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  5040  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  5041  01AB  01D0               	clrf	setLED@command
  5042  01AC  0AD0               	incf	setLED@command,f
  5043  01AD                     L11:	
  5044  01AD  3002               	movlw	2
  5045  01AE  158A  26C4  118A   	fcall	_setLED
  5046  01B1                     l5378:	
  5047                           
  5048                           ;PIR_B1.c: 203: }
  5049                           ;PIR_B1.c: 245: }
  5050                           ;PIR_B1.c: 246: }
  5051                           ;PIR_B1.c: 247: }
  5052                           ;PIR_B1.c: 248: }
  5053                           ;PIR_B1.c: 249: }
  5054                           ;PIR_B1.c: 250: }
  5055                           ;PIR_B1.c: 251: if (_PIR.OK == 0) {
  5056  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  5057  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  5058  01B3  19A0               	btfsc	__PIR^(0+128),3
  5059  01B4  29DC               	goto	l5392
  5060                           
  5061                           ;PIR_B1.c: 252: _PIR.Count++;
  5062  01B5  3001               	movlw	1
  5063  01B6  07BE               	addwf	(__PIR^(0+128)+30),f
  5064  01B7  1803               	skipnc
  5065  01B8  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5066  01B9  3000               	movlw	0
  5067  01BA  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5068                           
  5069                           ;PIR_B1.c: 253: if (_PIR.Count == (30000 / 20)) {
  5070  01BB  3005               	movlw	5
  5071  01BC  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5072  01BD  1D03               	skipz
  5073  01BE  29C1               	goto	u7015
  5074  01BF  30DC               	movlw	220
  5075  01C0  063E               	xorwf	(__PIR^(0+128)+30),w
  5076  01C1                     u7015:	
  5077  01C1  1D03               	skipz
  5078  01C2  0008               	return
  5079                           
  5080                           ;PIR_B1.c: 254: _PIR.Count = 0;
  5081  01C3  01BE               	clrf	(__PIR^(0+128)+30)
  5082  01C4  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5083                           
  5084                           ;PIR_B1.c: 255: _PIR.OK = 1;
  5085  01C5  15A0               	bsf	__PIR^(0+128),3
  5086                           
  5087                           ;PIR_B1.c: 257: setLED(1, 0);
  5088  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  5089  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  5090  01C8  01D0               	clrf	setLED@command
  5091  01C9  3001               	movlw	1
  5092  01CA  158A  26C4  118A   	fcall	_setLED
  5093                           
  5094                           ;PIR_B1.c: 263: if (getLights_Status(1) == 1) {
  5095  01CD  3001               	movlw	1
  5096  01CE  158A  22F9  118A   	fcall	_getLights_Status
  5097  01D1  3A01               	xorlw	1
  5098  01D2  1D03               	skipz
  5099  01D3  0008               	return
  5100                           
  5101                           ;PIR_B1.c: 264: setLights_SwOn(1);
  5102  01D4  3001               	movlw	1
  5103  01D5  158A  248C  118A   	fcall	_setLights_SwOn
  5104                           
  5105                           ;PIR_B1.c: 265: setLights_SwOff(1);
  5106  01D8  3001               	movlw	1
  5107  01D9  158A  23C7         	fcall	_setLights_SwOff
  5108                           
  5109                           ;PIR_B1.c: 267: }
  5110                           ;PIR_B1.c: 280: }
  5111                           ;PIR_B1.c: 281: } else {
  5112  01DB  0008               	return
  5113  01DC                     l5392:	
  5114                           
  5115                           ;PIR_B1.c: 283: if (LightsStatus == 1) {
  5116  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  5117  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  5118  01DE  0861               	movf	PIR_Main@LightsStatus,w
  5119  01DF  3A01               	xorlw	1
  5120  01E0  1D03               	skipz
  5121  01E1  2A0C               	goto	l5410
  5122                           
  5123                           ;PIR_B1.c: 284: _PIR.CloseTimeSeconds++;
  5124  01E2  3001               	movlw	1
  5125  01E3  00D6               	movwf	??_PIR_Main
  5126  01E4  0856               	movf	??_PIR_Main,w
  5127  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  5128  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  5129  01E7  07C2               	addwf	(__PIR^(0+128)+34),f
  5130                           
  5131                           ;PIR_B1.c: 285: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5132  01E8  0842               	movf	(__PIR^(0+128)+34),w
  5133  01E9  3A32               	xorlw	50
  5134  01EA  1D03               	skipz
  5135  01EB  0008               	return
  5136                           
  5137                           ;PIR_B1.c: 286: _PIR.CloseTimeSeconds = 0;
  5138  01EC  01C2               	clrf	(__PIR^(0+128)+34)
  5139                           
  5140                           ;PIR_B1.c: 287: _PIR.CloseTimeMinutes++;
  5141  01ED  3001               	movlw	1
  5142  01EE  07C0               	addwf	(__PIR^(0+128)+32),f
  5143  01EF  1803               	skipnc
  5144  01F0  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5145  01F1  3000               	movlw	0
  5146  01F2  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5147                           
  5148                           ;PIR_B1.c: 288: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5149  01F3  0844               	movf	((__PIR+1)^(0+128)+35),w
  5150  01F4  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5151  01F5  1D03               	skipz
  5152  01F6  29F9               	goto	u7055
  5153  01F7  0843               	movf	(__PIR^(0+128)+35),w
  5154  01F8  0640               	xorwf	(__PIR^(0+128)+32),w
  5155  01F9                     u7055:	
  5156  01F9  1D03               	skipz
  5157  01FA  0008               	return
  5158                           
  5159                           ;PIR_B1.c: 289: _PIR.CloseTimeMinutes = 0;
  5160  01FB  01C0               	clrf	(__PIR^(0+128)+32)
  5161  01FC  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5162                           
  5163                           ;PIR_B1.c: 295: if (getLights_Status(1) == 1) {
  5164  01FD  3001               	movlw	1
  5165  01FE  158A  22F9  118A   	fcall	_getLights_Status
  5166  0201  3A01               	xorlw	1
  5167  0202  1D03               	skipz
  5168  0203  0008               	return
  5169                           
  5170                           ;PIR_B1.c: 296: setLights_SwOn(1);
  5171  0204  3001               	movlw	1
  5172  0205  158A  248C  118A   	fcall	_setLights_SwOn
  5173                           
  5174                           ;PIR_B1.c: 297: setLights_SwOff(1);
  5175  0208  3001               	movlw	1
  5176  0209  158A  23C7         	fcall	_setLights_SwOff
  5177                           
  5178                           ;PIR_B1.c: 299: }
  5179                           ;PIR_B1.c: 311: }
  5180                           ;PIR_B1.c: 312: }
  5181                           ;PIR_B1.c: 313: } else {
  5182  020B  0008               	return
  5183  020C                     l5410:	
  5184                           
  5185                           ;PIR_B1.c: 314: _PIR.CloseTimeSeconds = 0;
  5186  020C  1683               	bsf	3,5	;RP0=1, select bank1
  5187  020D  1303               	bcf	3,6	;RP1=0, select bank1
  5188  020E  01C2               	clrf	(__PIR^(0+128)+34)
  5189                           
  5190                           ;PIR_B1.c: 315: _PIR.CloseTimeMinutes = 0;
  5191  020F  01C0               	clrf	(__PIR^(0+128)+32)
  5192  0210  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5193                           
  5194                           ;PIR_B1.c: 316: }
  5195                           ;PIR_B1.c: 318: }
  5196                           ;PIR_B1.c: 319: } else {
  5197  0211  0008               	return
  5198  0212                     l913:	
  5199                           
  5200                           ;PIR_B1.c: 320: if (myMain.PowerON == 1) {
  5201  0212  1283               	bcf	3,5	;RP0=0, select bank0
  5202  0213  1303               	bcf	3,6	;RP1=0, select bank0
  5203  0214  1C25               	btfss	_myMain,0
  5204  0215  0008               	return
  5205                           
  5206                           ;PIR_B1.c: 321: _PIR.Enable = 1;
  5207  0216  1683               	bsf	3,5	;RP0=1, select bank1
  5208  0217  1303               	bcf	3,6	;RP1=0, select bank1
  5209  0218  1420               	bsf	__PIR^(0+128),0
  5210                           
  5211                           ;PIR_B1.c: 323: setLED(1, 1);
  5212  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5213  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5214  021B  01D0               	clrf	setLED@command
  5215  021C  0AD0               	incf	setLED@command,f
  5216  021D  3001               	movlw	1
  5217  021E  158A  26C4  118A   	fcall	_setLED
  5218                           
  5219                           ;PIR_B1.c: 328: if (getLights_Status(1) == 0) {
  5220  0221  3001               	movlw	1
  5221  0222  158A  22F9  118A   	fcall	_getLights_Status
  5222  0225  3800               	iorlw	0
  5223  0226  1D03               	skipz
  5224  0227  0008               	return
  5225                           
  5226                           ;PIR_B1.c: 329: setLights_SwOn(1);
  5227  0228  3001               	movlw	1
  5228  0229  158A  248C  118A   	fcall	_setLights_SwOn
  5229                           
  5230                           ;PIR_B1.c: 330: setLights_SwOff(1);
  5231  022C  3001               	movlw	1
  5232  022D  158A  23C7         	fcall	_setLights_SwOff
  5233  022F  0008               	return
  5234  0230                     __end_of_PIR_Main:	
  5235                           
  5236                           	psect	text22
  5237  0A7A                     __ptext22:	
  5238 ;; *************** function _getCDS_Status *****************
  5239 ;; Defined at:
  5240 ;;		line 42 in file "../src/CDS_B1.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  status          1    4[COMMON] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      unsigned char 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5254 ;;      Params:         0       0       0       0
  5255 ;;      Locals:         1       0       0       0
  5256 ;;      Temps:          0       0       0       0
  5257 ;;      Totals:         1       0       0       0
  5258 ;;Total ram usage:        1 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    2
  5261 ;; This function calls:
  5262 ;;		Nothing
  5263 ;; This function is called by:
  5264 ;;		_PIR_Main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function _getCDS_Status
  5270  0A7A                     _getCDS_Status:	
  5271                           
  5272                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5273                           
  5274                           ;incstack = 0
  5275                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5276  0A7A  3000               	movlw	0
  5277  0A7B  1283               	bcf	3,5	;RP0=0, select bank0
  5278  0A7C  1303               	bcf	3,6	;RP1=0, select bank0
  5279  0A7D  1A2E               	btfsc	__CDS,4
  5280  0A7E  3001               	movlw	1
  5281  0A7F  00F4               	movwf	getCDS_Status@status
  5282                           
  5283                           ;CDS_B1.c: 44: return status;
  5284  0A80  0874               	movf	getCDS_Status@status,w
  5285  0A81  0008               	return
  5286  0A82                     __end_of_getCDS_Status:	
  5287                           
  5288                           	psect	text23
  5289  0AA7                     __ptext23:	
  5290 ;; *************** function _PIR_Initialization *****************
  5291 ;; Defined at:
  5292 ;;		line 7 in file "../src/PIR_B1.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		wreg
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5306 ;;      Params:         0       0       0       0
  5307 ;;      Locals:         0       0       0       0
  5308 ;;      Temps:          1       0       0       0
  5309 ;;      Totals:         1       0       0       0
  5310 ;;Total ram usage:        1 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    2
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_main
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           
  5321                           ;psect for function _PIR_Initialization
  5322  0AA7                     _PIR_Initialization:	
  5323                           
  5324                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5325                           
  5326                           ;incstack = 0
  5327                           ; Regs used in _PIR_Initialization: [wreg]
  5328  0AA7  3019               	movlw	25
  5329  0AA8  00F4               	movwf	??_PIR_Initialization
  5330  0AA9  0874               	movf	??_PIR_Initialization,w
  5331  0AAA  1683               	bsf	3,5	;RP0=1, select bank1
  5332  0AAB  1303               	bcf	3,6	;RP1=0, select bank1
  5333  0AAC  00C8               	movwf	(__PIR^(0+128)+40)
  5334                           
  5335                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5336  0AAD  3005               	movlw	5
  5337  0AAE  00C3               	movwf	(__PIR^(0+128)+35)
  5338  0AAF  3000               	movlw	0
  5339  0AB0  00C4               	movwf	(__PIR^(0+128)+36)
  5340  0AB1  0008               	return
  5341  0AB2                     __end_of_PIR_Initialization:	
  5342                           
  5343                           	psect	text24
  5344  0AEA                     __ptext24:	
  5345 ;; *************** function _Mcu_Initialization *****************
  5346 ;; Defined at:
  5347 ;;		line 30 in file "../src/MCU_B1.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;		None
  5352 ;; Return value:  Size  Location     Type
  5353 ;;		None               void
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, pclath, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5361 ;;      Params:         0       0       0       0
  5362 ;;      Locals:         0       0       0       0
  5363 ;;      Temps:          0       0       0       0
  5364 ;;      Totals:         0       0       0       0
  5365 ;;Total ram usage:        0 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    3
  5368 ;; This function calls:
  5369 ;;		_ADC_Set
  5370 ;;		_Fosc_Set
  5371 ;;		_IO_Set
  5372 ;;		_TMR1_Set
  5373 ;;		_WDT_Set
  5374 ;; This function is called by:
  5375 ;;		_main
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _Mcu_Initialization
  5381  0AEA                     _Mcu_Initialization:	
  5382                           
  5383                           ;MCU_B1.c: 32: Fosc_Set();
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5387  0AEA  158A  2245  158A   	fcall	_Fosc_Set
  5388                           
  5389                           ;MCU_B1.c: 34: IO_Set();
  5390  0AED  158A  23E1  158A   	fcall	_IO_Set
  5391                           
  5392                           ;MCU_B1.c: 36: ;;
  5393                           ;MCU_B1.c: 38: TMR1_Set();
  5394  0AF0  158A  22CE  158A   	fcall	_TMR1_Set
  5395                           
  5396                           ;MCU_B1.c: 40: ADC_Set();
  5397  0AF3  158A  2263  158A   	fcall	_ADC_Set
  5398                           
  5399                           ;MCU_B1.c: 42: ;;
  5400                           ;MCU_B1.c: 44: ;;
  5401                           ;MCU_B1.c: 46: ;;
  5402                           ;MCU_B1.c: 48: ;;
  5403                           ;MCU_B1.c: 50: ;;
  5404                           ;MCU_B1.c: 52: WDT_Set();
  5405  0AF6  158A  22DC         	fcall	_WDT_Set
  5406  0AF8  0008               	return
  5407  0AF9                     __end_of_Mcu_Initialization:	
  5408                           
  5409                           	psect	text25
  5410  0ADC                     __ptext25:	
  5411 ;; *************** function _WDT_Set *****************
  5412 ;; Defined at:
  5413 ;;		line 1102 in file "../src/MCU_B1.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5427 ;;      Params:         0       0       0       0
  5428 ;;      Locals:         0       0       0       0
  5429 ;;      Temps:          1       0       0       0
  5430 ;;      Totals:         1       0       0       0
  5431 ;;Total ram usage:        1 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    2
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_Mcu_Initialization
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _WDT_Set
  5443  0ADC                     _WDT_Set:	
  5444                           
  5445                           ;MCU_B1.c: 1104: PSA = 1;
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _WDT_Set: [wreg]
  5449  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  5450  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  5451  0ADE  1581               	bsf	1,3	;volatile
  5452                           
  5453                           ;MCU_B1.c: 1105: PS0 = 1;
  5454  0ADF  1401               	bsf	1,0	;volatile
  5455                           
  5456                           ;MCU_B1.c: 1106: PS1 = 1;
  5457  0AE0  1481               	bsf	1,1	;volatile
  5458                           
  5459                           ;MCU_B1.c: 1107: PS2 = 1;
  5460  0AE1  1501               	bsf	1,2	;volatile
  5461                           
  5462                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5463  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  5464  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  5465  0AE4  1435               	bsf	_WDT,0
  5466                           
  5467                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5468  0AE5  300A               	movlw	10
  5469  0AE6  00F4               	movwf	??_WDT_Set
  5470  0AE7  0874               	movf	??_WDT_Set,w
  5471  0AE8  00B6               	movwf	_WDT+1
  5472  0AE9  0008               	return
  5473  0AEA                     __end_of_WDT_Set:	
  5474                           
  5475                           	psect	text26
  5476  0ACE                     __ptext26:	
  5477 ;; *************** function _TMR1_Set *****************
  5478 ;; Defined at:
  5479 ;;		line 226 in file "../src/MCU_B1.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;		None               void
  5486 ;; Registers used:
  5487 ;;		wreg
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5493 ;;      Params:         0       0       0       0
  5494 ;;      Locals:         0       0       0       0
  5495 ;;      Temps:          0       0       0       0
  5496 ;;      Totals:         0       0       0       0
  5497 ;;Total ram usage:        0 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    2
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_Mcu_Initialization
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _TMR1_Set
  5509  0ACE                     _TMR1_Set:	
  5510                           
  5511                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _TMR1_Set: [wreg]
  5515  0ACE  3041               	movlw	65
  5516  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  5517  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  5518  0AD1  0090               	movwf	16	;volatile
  5519                           
  5520                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5521  0AD2  30FA               	movlw	250
  5522  0AD3  008F               	movwf	15	;volatile
  5523                           
  5524                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5525  0AD4  3038               	movlw	56
  5526  0AD5  008E               	movwf	14	;volatile
  5527                           
  5528                           ;MCU_B1.c: 230: TMR1IE = 1;
  5529  0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  5530  0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  5531  0AD8  140C               	bsf	12,0	;volatile
  5532                           
  5533                           ;MCU_B1.c: 231: PEIE = 1;
  5534  0AD9  170B               	bsf	11,6	;volatile
  5535                           
  5536                           ;MCU_B1.c: 232: GIE = 1;
  5537  0ADA  178B               	bsf	11,7	;volatile
  5538  0ADB  0008               	return
  5539  0ADC                     __end_of_TMR1_Set:	
  5540                           
  5541                           	psect	text27
  5542  0BE1                     __ptext27:	
  5543 ;; *************** function _IO_Set *****************
  5544 ;; Defined at:
  5545 ;;		line 60 in file "../src/MCU_B1.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;		None               void
  5552 ;; Registers used:
  5553 ;;		wreg, status,2
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5559 ;;      Params:         0       0       0       0
  5560 ;;      Locals:         0       0       0       0
  5561 ;;      Temps:          0       0       0       0
  5562 ;;      Totals:         0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    2
  5566 ;; This function calls:
  5567 ;;		Nothing
  5568 ;; This function is called by:
  5569 ;;		_Mcu_Initialization
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           
  5574                           ;psect for function _IO_Set
  5575  0BE1                     _IO_Set:	
  5576                           
  5577                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5578                           
  5579                           ;incstack = 0
  5580                           ; Regs used in _IO_Set: [wreg+status,2]
  5581  0BE1  302F               	movlw	47
  5582  0BE2  1683               	bsf	3,5	;RP0=1, select bank1
  5583  0BE3  1303               	bcf	3,6	;RP1=0, select bank1
  5584  0BE4  0085               	movwf	5	;volatile
  5585                           
  5586                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5587  0BE5  3013               	movlw	19
  5588  0BE6  0086               	movwf	6	;volatile
  5589                           
  5590                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5591  0BE7  300C               	movlw	12
  5592  0BE8  0087               	movwf	7	;volatile
  5593                           
  5594                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5595  0BE9  300F               	movlw	15
  5596  0BEA  1683               	bsf	3,5	;RP0=1, select bank3
  5597  0BEB  1703               	bsf	3,6	;RP1=1, select bank3
  5598  0BEC  0085               	movwf	5	;volatile
  5599                           
  5600                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5601  0BED  3012               	movlw	18
  5602  0BEE  0086               	movwf	6	;volatile
  5603                           
  5604                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5605  0BEF  30AF               	movlw	175
  5606  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  5607  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  5608  0BF2  0085               	movwf	5	;volatile
  5609                           
  5610                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5611  0BF3  3013               	movlw	19
  5612  0BF4  0086               	movwf	6	;volatile
  5613                           
  5614                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5615  0BF5  300C               	movlw	12
  5616  0BF6  0087               	movwf	7	;volatile
  5617                           
  5618                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5619  0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  5620  0BF8  1303               	bcf	3,6	;RP1=0, select bank1
  5621  0BF9  0195               	clrf	21	;volatile
  5622  0BFA  0008               	return
  5623  0BFB                     __end_of_IO_Set:	
  5624                           
  5625                           	psect	text28
  5626  0A45                     __ptext28:	
  5627 ;; *************** function _Fosc_Set *****************
  5628 ;; Defined at:
  5629 ;;		line 56 in file "../src/MCU_B1.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5643 ;;      Params:         0       0       0       0
  5644 ;;      Locals:         0       0       0       0
  5645 ;;      Temps:          0       0       0       0
  5646 ;;      Totals:         0       0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    2
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_Mcu_Initialization
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _Fosc_Set
  5659  0A45                     _Fosc_Set:	
  5660                           
  5661                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5662                           
  5663                           ;incstack = 0
  5664                           ; Regs used in _Fosc_Set: [wreg]
  5665  0A45  303C               	movlw	60
  5666  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  5667  0A47  1303               	bcf	3,6	;RP1=0, select bank1
  5668  0A48  0090               	movwf	16	;volatile
  5669  0A49  0008               	return
  5670  0A4A                     __end_of_Fosc_Set:	
  5671                           
  5672                           	psect	text29
  5673  0A63                     __ptext29:	
  5674 ;; *************** function _ADC_Set *****************
  5675 ;; Defined at:
  5676 ;;		line 427 in file "../src/MCU_B1.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5690 ;;      Params:         0       0       0       0
  5691 ;;      Locals:         0       0       0       0
  5692 ;;      Temps:          0       0       0       0
  5693 ;;      Totals:         0       0       0       0
  5694 ;;Total ram usage:        0 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    2
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_Mcu_Initialization
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           
  5705                           ;psect for function _ADC_Set
  5706  0A63                     _ADC_Set:	
  5707                           
  5708                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  5709                           
  5710                           ;incstack = 0
  5711                           ; Regs used in _ADC_Set: [wreg]
  5712  0A63  3073               	movlw	115
  5713  0A64  1683               	bsf	3,5	;RP0=1, select bank1
  5714  0A65  1303               	bcf	3,6	;RP1=0, select bank1
  5715  0A66  009F               	movwf	31	;volatile
  5716                           
  5717                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  5718  0A67  30C1               	movlw	193
  5719  0A68  009D               	movwf	29	;volatile
  5720  0A69  0008               	return
  5721  0A6A                     __end_of_ADC_Set:	
  5722                           
  5723                           	psect	text30
  5724  0230                     __ptext30:	
  5725 ;; *************** function _Load_Main *****************
  5726 ;; Defined at:
  5727 ;;		line 40 in file "../src/OverLoad_B1.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  i               2   15[BANK0 ] int 
  5732 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5733 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5734 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5735 ;;  error           1    9[BANK0 ] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5745 ;;      Params:         0       0       0       0
  5746 ;;      Locals:         0       8       0       0
  5747 ;;      Temps:          0       2       0       0
  5748 ;;      Totals:         0      10       0       0
  5749 ;;Total ram usage:       10 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    3
  5752 ;; This function calls:
  5753 ;;		___lwdiv
  5754 ;;		___wmul
  5755 ;;		_getLight_LoadGO
  5756 ;;		_getLight_Load_Status
  5757 ;;		_getMain_All_Error_Status
  5758 ;;		_getMain_All_LightsStatus
  5759 ;;		_getMain_Lights_Count
  5760 ;;		_setLoad_AH_AL_Restore
  5761 ;; This function is called by:
  5762 ;;		_main
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           
  5767                           ;psect for function _Load_Main
  5768  0230                     _Load_Main:	
  5769                           
  5770                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
  5771                           
  5772                           ;incstack = 0
  5773                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5774  0230  3000               	movlw	0
  5775  0231  158A  2506  118A   	fcall	_getMain_All_Error_Status
  5776  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5777  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5778  0236  00D7               	movwf	??_Load_Main
  5779  0237  0857               	movf	??_Load_Main,w
  5780  0238  00D9               	movwf	Load_Main@error
  5781                           
  5782                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
  5783  0239  01DD               	clrf	Load_Main@Load_RunStatus
  5784  023A  01DC               	clrf	Load_Main@ErrorCountValue
  5785  023B  01DE               	clrf	Load_Main@LightsCount
  5786                           
  5787                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5788  023C  1683               	bsf	3,5	;RP0=1, select bank1
  5789  023D  1303               	bcf	3,6	;RP1=0, select bank1
  5790  023E  1C4A               	btfss	_Load^(0+128),0
  5791  023F  2C12               	goto	l700
  5792                           
  5793                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5794  0240  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  5795  0243  3800               	iorlw	0
  5796  0244  1D03               	skipz
  5797  0245  2A49               	goto	l5116
  5798                           
  5799                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5800  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5801  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5802  0248  2A68               	goto	l5132
  5803  0249                     l5116:	
  5804                           ;OverLoad_B1.c: 47: } else {
  5805                           
  5806                           
  5807                           ;OverLoad_B1.c: 70: if (error == 0) {
  5808  0249  1283               	bcf	3,5	;RP0=0, select bank0
  5809  024A  1303               	bcf	3,6	;RP1=0, select bank0
  5810  024B  08D9               	movf	Load_Main@error,f
  5811  024C  1D03               	skipz
  5812  024D  2A65               	goto	l703
  5813                           
  5814                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5815  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5816  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5817  0250  14CA               	bsf	_Load^(0+128),1
  5818                           
  5819                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5820  0251  158A  224A  118A   	fcall	_getLight_LoadGO
  5821  0254  3A01               	xorlw	1
  5822  0255  1D03               	skipz
  5823  0256  2A5F               	goto	l704
  5824                           
  5825                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5826  0257  1683               	bsf	3,5	;RP0=1, select bank1
  5827  0258  1303               	bcf	3,6	;RP1=0, select bank1
  5828  0259  1DCA               	btfss	_Load^(0+128),3
  5829  025A  1BCA               	btfsc	_Load^(0+128),7
  5830  025B  2A69               	goto	l702
  5831                           
  5832                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5833  025C  15CA               	bsf	_Load^(0+128),3
  5834                           
  5835                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5836  025D  01E3               	clrf	(_Load^(0+128)+25)
  5837                           
  5838                           ;OverLoad_B1.c: 77: }
  5839                           ;OverLoad_B1.c: 78: } else {
  5840  025E  2A69               	goto	l702
  5841  025F                     l704:	
  5842                           
  5843                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5844  025F  1683               	bsf	3,5	;RP0=1, select bank1
  5845  0260  1303               	bcf	3,6	;RP1=0, select bank1
  5846  0261  1FCA               	btfss	_Load^(0+128),7
  5847  0262  2A69               	goto	l702
  5848                           
  5849                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5850  0263  13CA               	bcf	_Load^(0+128),7
  5851                           
  5852                           ;OverLoad_B1.c: 81: }
  5853                           ;OverLoad_B1.c: 82: }
  5854                           ;OverLoad_B1.c: 83: } else {
  5855  0264  2A69               	goto	l702
  5856  0265                     l703:	
  5857                           
  5858                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5859  0265  1683               	bsf	3,5	;RP0=1, select bank1
  5860  0266  1303               	bcf	3,6	;RP1=0, select bank1
  5861  0267  18CA               	btfsc	_Load^(0+128),1
  5862  0268                     l5132:	
  5863                           
  5864                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5865  0268  10CA               	bcf	_Load^(0+128),1
  5866  0269                     l702:	
  5867                           
  5868                           ;OverLoad_B1.c: 86: }
  5869                           ;OverLoad_B1.c: 87: }
  5870                           ;OverLoad_B1.c: 89: }
  5871                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5872  0269  1CCA               	btfss	_Load^(0+128),1
  5873  026A  2BEB               	goto	l710
  5874                           
  5875                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5876  026B  154A               	bsf	_Load^(0+128),2
  5877                           
  5878                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5879  026C  1E4A               	btfss	_Load^(0+128),4
  5880  026D  2BE9               	goto	l711
  5881                           
  5882                           ;OverLoad_B1.c: 96: Load.Time++;
  5883  026E  3001               	movlw	1
  5884  026F  07CB               	addwf	(_Load^(0+128)+1),f
  5885  0270  1803               	skipnc
  5886  0271  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5887  0272  3000               	movlw	0
  5888  0273  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5889                           
  5890                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5891  0274  3000               	movlw	0
  5892  0275  024C               	subwf	((_Load+1)^(0+128)+1),w
  5893  0276  3002               	movlw	2
  5894  0277  1903               	skipnz
  5895  0278  024B               	subwf	(_Load^(0+128)+1),w
  5896  0279  1C03               	skipc
  5897  027A  0008               	return
  5898                           
  5899                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5900  027B  01CB               	clrf	(_Load^(0+128)+1)
  5901  027C  01CC               	clrf	((_Load+1)^(0+128)+1)
  5902                           
  5903                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5904  027D  124A               	bcf	_Load^(0+128),4
  5905                           
  5906                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5907  027E  3001               	movlw	1
  5908  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5909  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5910  0281  00DF               	movwf	Load_Main@i
  5911  0282  3000               	movlw	0
  5912  0283  00E0               	movwf	Load_Main@i+1
  5913  0284  0860               	movf	Load_Main@i+1,w
  5914  0285  3A80               	xorlw	128
  5915  0286  00FF               	movwf	127
  5916  0287  3080               	movlw	128
  5917  0288  027F               	subwf	127,w
  5918  0289  1D03               	skipz
  5919  028A  2A8D               	goto	u6495
  5920  028B  3004               	movlw	4
  5921  028C  025F               	subwf	Load_Main@i,w
  5922  028D                     u6495:	
  5923  028D  1803               	btfsc	3,0
  5924  028E  2ACB               	goto	l5154
  5925  028F                     l5148:	
  5926                           
  5927                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5928  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5929  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5930  0291  085F               	movf	Load_Main@i,w
  5931  0292  3ED4               	addlw	(_Load+10)& (0+255)
  5932  0293  0084               	movwf	4
  5933  0294  1383               	bcf	3,7	;select IRP bank1
  5934  0295  0800               	movf	0,w
  5935  0296  00D7               	movwf	??_Load_Main
  5936  0297  01D8               	clrf	??_Load_Main+1
  5937  0298  0857               	movf	??_Load_Main,w
  5938  0299  1683               	bsf	3,5	;RP0=1, select bank1
  5939  029A  1303               	bcf	3,6	;RP1=0, select bank1
  5940  029B  07CF               	addwf	(_Load^(0+128)+5),f
  5941  029C  1803               	skipnc
  5942  029D  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5943  029E  1283               	bcf	3,5	;RP0=0, select bank0
  5944  029F  1303               	bcf	3,6	;RP1=0, select bank0
  5945  02A0  0858               	movf	??_Load_Main+1,w
  5946  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  5947  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  5948  02A3  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5949                           
  5950                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5951  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5952  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5953  02A6  085F               	movf	Load_Main@i,w
  5954  02A7  3ED9               	addlw	(_Load+15)& (0+255)
  5955  02A8  0084               	movwf	4
  5956  02A9  0800               	movf	0,w
  5957  02AA  00D7               	movwf	??_Load_Main
  5958  02AB  01D8               	clrf	??_Load_Main+1
  5959  02AC  0857               	movf	??_Load_Main,w
  5960  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  5961  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  5962  02AF  07D1               	addwf	(_Load^(0+128)+7),f
  5963  02B0  1803               	skipnc
  5964  02B1  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5965  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  5966  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  5967  02B4  0858               	movf	??_Load_Main+1,w
  5968  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  5969  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  5970  02B7  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5971  02B8  3001               	movlw	1
  5972  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5973  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5974  02BB  07DF               	addwf	Load_Main@i,f
  5975  02BC  1803               	skipnc
  5976  02BD  0AE0               	incf	Load_Main@i+1,f
  5977  02BE  3000               	movlw	0
  5978  02BF  07E0               	addwf	Load_Main@i+1,f
  5979  02C0  0860               	movf	Load_Main@i+1,w
  5980  02C1  3A80               	xorlw	128
  5981  02C2  00FF               	movwf	127
  5982  02C3  3080               	movlw	128
  5983  02C4  027F               	subwf	127,w
  5984  02C5  1D03               	skipz
  5985  02C6  2AC9               	goto	u6505
  5986  02C7  3004               	movlw	4
  5987  02C8  025F               	subwf	Load_Main@i,w
  5988  02C9                     u6505:	
  5989  02C9  1C03               	skipc
  5990  02CA  2A8F               	goto	l5148
  5991  02CB                     l5154:	
  5992                           
  5993                           ;OverLoad_B1.c: 104: }
  5994                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5995  02CB  3003               	movlw	3
  5996  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  5997  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  5998  02CE  00D0               	movwf	___lwdiv@divisor
  5999  02CF  3000               	movlw	0
  6000  02D0  00D1               	movwf	___lwdiv@divisor+1
  6001  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  6002  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  6003  02D3  0850               	movf	((_Load+1)^(0+128)+5),w
  6004  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  6005  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  6006  02D6  01D3               	clrf	___lwdiv@dividend+1
  6007  02D7  07D3               	addwf	___lwdiv@dividend+1,f
  6008  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  6009  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  6010  02DA  084F               	movf	(_Load^(0+128)+5),w
  6011  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  6012  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  6013  02DD  01D2               	clrf	___lwdiv@dividend
  6014  02DE  07D2               	addwf	___lwdiv@dividend,f
  6015  02DF  158A  2544  118A   	fcall	___lwdiv
  6016  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  6017  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  6018  02E4  0851               	movf	?___lwdiv+1,w
  6019  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  6020  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  6021  02E7  01D0               	clrf	((_Load+1)^(0+128)+5)
  6022  02E8  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6023  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  6024  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  6025  02EB  0850               	movf	?___lwdiv,w
  6026  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  6027  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  6028  02EE  01CF               	clrf	(_Load^(0+128)+5)
  6029  02EF  07CF               	addwf	(_Load^(0+128)+5),f
  6030                           
  6031                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  6032  02F0  3003               	movlw	3
  6033  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  6034  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  6035  02F3  00D0               	movwf	___lwdiv@divisor
  6036  02F4  3000               	movlw	0
  6037  02F5  00D1               	movwf	___lwdiv@divisor+1
  6038  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  6039  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  6040  02F8  0852               	movf	((_Load+1)^(0+128)+7),w
  6041  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  6042  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  6043  02FB  01D3               	clrf	___lwdiv@dividend+1
  6044  02FC  07D3               	addwf	___lwdiv@dividend+1,f
  6045  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  6046  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  6047  02FF  0851               	movf	(_Load^(0+128)+7),w
  6048  0300  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0301  1303               	bcf	3,6	;RP1=0, select bank0
  6050  0302  01D2               	clrf	___lwdiv@dividend
  6051  0303  07D2               	addwf	___lwdiv@dividend,f
  6052  0304  158A  2544  118A   	fcall	___lwdiv
  6053  0307  1283               	bcf	3,5	;RP0=0, select bank0
  6054  0308  1303               	bcf	3,6	;RP1=0, select bank0
  6055  0309  0851               	movf	?___lwdiv+1,w
  6056  030A  1683               	bsf	3,5	;RP0=1, select bank1
  6057  030B  1303               	bcf	3,6	;RP1=0, select bank1
  6058  030C  01D2               	clrf	((_Load+1)^(0+128)+7)
  6059  030D  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6060  030E  1283               	bcf	3,5	;RP0=0, select bank0
  6061  030F  1303               	bcf	3,6	;RP1=0, select bank0
  6062  0310  0850               	movf	?___lwdiv,w
  6063  0311  1683               	bsf	3,5	;RP0=1, select bank1
  6064  0312  1303               	bcf	3,6	;RP1=0, select bank1
  6065  0313  01D1               	clrf	(_Load^(0+128)+7)
  6066  0314  07D1               	addwf	(_Load^(0+128)+7),f
  6067                           
  6068                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
  6069  0315  158A  2369  118A   	fcall	_setLoad_AH_AL_Restore
  6070                           
  6071                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
  6072  0318  1683               	bsf	3,5	;RP0=1, select bank1
  6073  0319  1303               	bcf	3,6	;RP1=0, select bank1
  6074  031A  0852               	movf	((_Load+1)^(0+128)+7),w
  6075  031B  0250               	subwf	((_Load+1)^(0+128)+5),w
  6076  031C  1D03               	skipz
  6077  031D  2B20               	goto	u6515
  6078  031E  0851               	movf	(_Load^(0+128)+7),w
  6079  031F  024F               	subwf	(_Load^(0+128)+5),w
  6080  0320                     u6515:	
  6081  0320  1C03               	skipc
  6082  0321  0008               	return
  6083                           
  6084                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
  6085  0322  0351               	decf	(_Load^(0+128)+7),w
  6086  0323  3AFF               	xorlw	255
  6087  0324  074F               	addwf	(_Load^(0+128)+5),w
  6088  0325  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0326  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0327  00D7               	movwf	??_Load_Main
  6091  0328  0857               	movf	??_Load_Main,w
  6092  0329  1683               	bsf	3,5	;RP0=1, select bank1
  6093  032A  1303               	bcf	3,6	;RP1=0, select bank1
  6094  032B  00DE               	movwf	(_Load^(0+128)+20)
  6095                           
  6096                           ;OverLoad_B1.c: 112: Load.ADH = 0;
  6097  032C  01CF               	clrf	(_Load^(0+128)+5)
  6098  032D  01D0               	clrf	((_Load+1)^(0+128)+5)
  6099                           
  6100                           ;OverLoad_B1.c: 113: Load.ADL = 0;
  6101  032E  01D1               	clrf	(_Load^(0+128)+7)
  6102  032F  01D2               	clrf	((_Load+1)^(0+128)+7)
  6103                           
  6104                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
  6105  0330  1DCA               	btfss	_Load^(0+128),3
  6106  0331  2B95               	goto	l716
  6107                           
  6108                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
  6109  0332  3002               	movlw	2
  6110  0333  0263               	subwf	(_Load^(0+128)+25),w
  6111  0334  1803               	skipnc
  6112  0335  2B95               	goto	l716
  6113                           
  6114                           ;OverLoad_B1.c: 117: Load.Count++;
  6115  0336  3001               	movlw	1
  6116  0337  1283               	bcf	3,5	;RP0=0, select bank0
  6117  0338  1303               	bcf	3,6	;RP1=0, select bank0
  6118  0339  00D7               	movwf	??_Load_Main
  6119  033A  0857               	movf	??_Load_Main,w
  6120  033B  1683               	bsf	3,5	;RP0=1, select bank1
  6121  033C  1303               	bcf	3,6	;RP1=0, select bank1
  6122  033D  07E3               	addwf	(_Load^(0+128)+25),f
  6123                           
  6124                           ;OverLoad_B1.c: 122: Load_RunStatus = getLight_Load_Status();
  6125  033E  158A  2250  118A   	fcall	_getLight_Load_Status
  6126  0341  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0342  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0343  00D7               	movwf	??_Load_Main
  6129  0344  0857               	movf	??_Load_Main,w
  6130  0345  00DD               	movwf	Load_Main@Load_RunStatus
  6131                           
  6132                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
  6133  0346  158A  229D  118A   	fcall	_getMain_Lights_Count
  6134  0349  1283               	bcf	3,5	;RP0=0, select bank0
  6135  034A  1303               	bcf	3,6	;RP1=0, select bank0
  6136  034B  00D7               	movwf	??_Load_Main
  6137  034C  0857               	movf	??_Load_Main,w
  6138  034D  00DE               	movwf	Load_Main@LightsCount
  6139                           
  6140                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
  6141  034E  1683               	bsf	3,5	;RP0=1, select bank1
  6142  034F  1303               	bcf	3,6	;RP1=0, select bank1
  6143  0350  0863               	movf	(_Load^(0+128)+25),w
  6144  0351  3A01               	xorlw	1
  6145  0352  1D03               	skipz
  6146  0353  2B56               	goto	l5180
  6147                           
  6148                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(20*1.7);
  6149  0354  3022               	movlw	34
  6150  0355  2B63               	goto	L15
  6151  0356                     l5180:	
  6152                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
  6153                           
  6154  0356  0863               	movf	(_Load^(0+128)+25),w
  6155  0357  3A02               	xorlw	2
  6156  0358  1D03               	skipz
  6157  0359  2B95               	goto	l716
  6158                           
  6159                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
  6160  035A  1283               	bcf	3,5	;RP0=0, select bank0
  6161  035B  1303               	bcf	3,6	;RP1=0, select bank0
  6162  035C  085E               	movf	Load_Main@LightsCount,w
  6163  035D  3A01               	xorlw	1
  6164  035E  1D03               	skipz
  6165  035F  2B66               	goto	l5186
  6166                           
  6167                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(8*1.7);
  6168  0360  300D               	movlw	13
  6169  0361  1683               	bsf	3,5	;RP0=1, select bank1
  6170  0362  1303               	bcf	3,6	;RP1=0, select bank1
  6171  0363                     L15:	
  6172  0363  00E1               	movwf	(_Load^(0+128)+23)
  6173  0364  3000               	movlw	0
  6174  0365  2B94               	goto	L16
  6175  0366                     l5186:	
  6176                           ;OverLoad_B1.c: 132: } else {
  6177                           
  6178                           
  6179                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
  6180  0366  1283               	bcf	3,5	;RP0=0, select bank0
  6181  0367  08DD               	movf	Load_Main@Load_RunStatus,f
  6182  0368  1D03               	skipz
  6183  0369  2B87               	goto	l5190
  6184                           
  6185                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  6186  036A  085E               	movf	Load_Main@LightsCount,w
  6187  036B  00D7               	movwf	??_Load_Main
  6188  036C  01D8               	clrf	??_Load_Main+1
  6189  036D  0857               	movf	??_Load_Main,w
  6190  036E  00D0               	movwf	___wmul@multiplier
  6191  036F  0858               	movf	??_Load_Main+1,w
  6192  0370  00D1               	movwf	___wmul@multiplier+1
  6193  0371  300D               	movlw	13
  6194  0372  00D2               	movwf	___wmul@multiplicand
  6195  0373  3000               	movlw	0
  6196  0374  00D3               	movwf	___wmul@multiplicand+1
  6197  0375  158A  24B1  118A   	fcall	___wmul
  6198  0378  1283               	bcf	3,5	;RP0=0, select bank0
  6199  0379  1303               	bcf	3,6	;RP1=0, select bank0
  6200  037A  0851               	movf	?___wmul+1,w
  6201  037B  1683               	bsf	3,5	;RP0=1, select bank1
  6202  037C  1303               	bcf	3,6	;RP1=0, select bank1
  6203  037D  01E2               	clrf	((_Load+1)^(0+128)+23)
  6204  037E  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6205  037F  1283               	bcf	3,5	;RP0=0, select bank0
  6206  0380  1303               	bcf	3,6	;RP1=0, select bank0
  6207  0381  0850               	movf	?___wmul,w
  6208  0382  1683               	bsf	3,5	;RP0=1, select bank1
  6209  0383  1303               	bcf	3,6	;RP1=0, select bank1
  6210  0384  01E1               	clrf	(_Load^(0+128)+23)
  6211  0385  07E1               	addwf	(_Load^(0+128)+23),f
  6212                           
  6213                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
  6214  0386  2B95               	goto	l716
  6215  0387                     l5190:	
  6216  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6217  0388  085D               	movf	Load_Main@Load_RunStatus,w
  6218  0389  3A01               	xorlw	1
  6219  038A  1D03               	skipz
  6220  038B  2B95               	goto	l716
  6221                           
  6222                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6223  038C  1683               	bsf	3,5	;RP0=1, select bank1
  6224  038D  1303               	bcf	3,6	;RP1=0, select bank1
  6225  038E  0853               	movf	(_Load^(0+128)+9),w
  6226  038F  3E0D               	addlw	13
  6227  0390  00E1               	movwf	(_Load^(0+128)+23)
  6228  0391  3000               	movlw	0
  6229  0392  1803               	skipnc
  6230  0393  3001               	movlw	1
  6231  0394                     L16:	
  6232  0394  00E2               	movwf	(_Load^(0+128)+24)
  6233  0395                     l716:	
  6234                           
  6235                           ;OverLoad_B1.c: 137: }
  6236                           ;OverLoad_B1.c: 138: }
  6237                           ;OverLoad_B1.c: 139: }
  6238                           ;OverLoad_B1.c: 140: }
  6239                           ;OverLoad_B1.c: 141: }
  6240                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
  6241  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6242  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6243  0397  085E               	movf	(_Load^(0+128)+20),w
  6244  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6245  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6246  039A  00D7               	movwf	??_Load_Main
  6247  039B  01D8               	clrf	??_Load_Main+1
  6248  039C  1683               	bsf	3,5	;RP0=1, select bank1
  6249  039D  1303               	bcf	3,6	;RP1=0, select bank1
  6250  039E  0862               	movf	((_Load+1)^(0+128)+23),w
  6251  039F  1283               	bcf	3,5	;RP0=0, select bank0
  6252  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  6253  03A1  0258               	subwf	??_Load_Main+1,w
  6254  03A2  1D03               	skipz
  6255  03A3  2BAA               	goto	u6595
  6256  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  6257  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  6258  03A6  0861               	movf	(_Load^(0+128)+23),w
  6259  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  6260  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  6261  03A9  0257               	subwf	??_Load_Main,w
  6262  03AA                     u6595:	
  6263  03AA  1C03               	skipc
  6264  03AB  2BCB               	goto	l5208
  6265                           
  6266                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6267  03AC  085E               	movf	Load_Main@LightsCount,w
  6268  03AD  3A01               	xorlw	1
  6269  03AE  1903               	skipnz
  6270  03AF  2BB2               	goto	l5198
  6271  03B0  3003               	movlw	3
  6272  03B1  2BB3               	goto	L17
  6273  03B2                     l5198:	
  6274  03B2  3002               	movlw	2
  6275  03B3                     L17:	
  6276  03B3  00DA               	movwf	_Load_Main$2389
  6277  03B4  3000               	movlw	0
  6278  03B5  00DB               	movwf	_Load_Main$2389+1
  6279  03B6  085A               	movf	_Load_Main$2389,w
  6280  03B7  00D7               	movwf	??_Load_Main
  6281  03B8  0857               	movf	??_Load_Main,w
  6282  03B9  00DC               	movwf	Load_Main@ErrorCountValue
  6283                           
  6284                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
  6285  03BA  3001               	movlw	1
  6286  03BB  00D7               	movwf	??_Load_Main
  6287  03BC  0857               	movf	??_Load_Main,w
  6288  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  6289  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  6290  03BF  07E4               	addwf	(_Load^(0+128)+26),f
  6291                           
  6292                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
  6293  03C0  0864               	movf	(_Load^(0+128)+26),w
  6294  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6295  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6296  03C3  025C               	subwf	Load_Main@ErrorCountValue,w
  6297  03C4  1803               	skipnc
  6298  03C5  0008               	return
  6299                           
  6300                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
  6301  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6302  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6303  03C8  01E4               	clrf	(_Load^(0+128)+26)
  6304                           
  6305                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
  6306  03C9  16CA               	bsf	_Load^(0+128),5
  6307                           
  6308                           ;OverLoad_B1.c: 170: }
  6309                           ;OverLoad_B1.c: 171: } else {
  6310  03CA  0008               	return
  6311  03CB                     l5208:	
  6312                           
  6313                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
  6314  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  6315  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  6316  03CD  01E4               	clrf	(_Load^(0+128)+26)
  6317                           
  6318                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
  6319  03CE  1DCA               	btfss	_Load^(0+128),3
  6320  03CF  0008               	return
  6321                           
  6322                           ;OverLoad_B1.c: 174: Load.SafeCount++;
  6323  03D0  3001               	movlw	1
  6324  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  6325  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  6326  03D3  00D7               	movwf	??_Load_Main
  6327  03D4  0857               	movf	??_Load_Main,w
  6328  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  6329  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  6330  03D7  07E5               	addwf	(_Load^(0+128)+27),f
  6331                           
  6332                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
  6333  03D8  3003               	movlw	3
  6334  03D9  0265               	subwf	(_Load^(0+128)+27),w
  6335  03DA  1C03               	skipc
  6336  03DB  0008               	return
  6337                           
  6338                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
  6339  03DC  01E5               	clrf	(_Load^(0+128)+27)
  6340                           
  6341                           ;OverLoad_B1.c: 177: Load.OK = 1;
  6342  03DD  17CA               	bsf	_Load^(0+128),7
  6343                           
  6344                           ;OverLoad_B1.c: 178: Load.Run = 0;
  6345  03DE  11CA               	bcf	_Load^(0+128),3
  6346                           
  6347                           ;OverLoad_B1.c: 179: Load.Count = 0;
  6348  03DF  01E3               	clrf	(_Load^(0+128)+25)
  6349                           
  6350                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
  6351  03E0  085E               	movf	(_Load^(0+128)+20),w
  6352  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  6353  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  6354  03E3  00D7               	movwf	??_Load_Main
  6355  03E4  0857               	movf	??_Load_Main,w
  6356  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  6357  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  6358  03E7  00D3               	movwf	(_Load^(0+128)+9)
  6359                           
  6360                           ;OverLoad_B1.c: 184: }
  6361                           ;OverLoad_B1.c: 185: }
  6362                           ;OverLoad_B1.c: 208: }
  6363                           ;OverLoad_B1.c: 209: }
  6364                           ;OverLoad_B1.c: 210: }
  6365                           ;OverLoad_B1.c: 211: } else {
  6366  03E8  0008               	return
  6367  03E9                     l711:	
  6368                           
  6369                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
  6370  03E9  164A               	bsf	_Load^(0+128),4
  6371                           
  6372                           ;OverLoad_B1.c: 213: }
  6373                           ;OverLoad_B1.c: 214: } else {
  6374  03EA  0008               	return
  6375  03EB                     l710:	
  6376                           
  6377                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
  6378  03EB  1D4A               	btfss	_Load^(0+128),2
  6379  03EC  2BFF               	goto	l5244
  6380                           
  6381                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
  6382  03ED  114A               	bcf	_Load^(0+128),2
  6383                           
  6384                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
  6385  03EE  124A               	bcf	_Load^(0+128),4
  6386                           
  6387                           ;OverLoad_B1.c: 220: Load.Time = 0;
  6388  03EF  01CB               	clrf	(_Load^(0+128)+1)
  6389  03F0  01CC               	clrf	((_Load+1)^(0+128)+1)
  6390                           
  6391                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
  6392  03F1  158A  2369  118A   	fcall	_setLoad_AH_AL_Restore
  6393                           
  6394                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
  6395  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  6396  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  6397  03F6  01E4               	clrf	(_Load^(0+128)+26)
  6398                           
  6399                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
  6400  03F7  01E5               	clrf	(_Load^(0+128)+27)
  6401                           
  6402                           ;OverLoad_B1.c: 226: Load.ADH = 0;
  6403  03F8  01CF               	clrf	(_Load^(0+128)+5)
  6404  03F9  01D0               	clrf	((_Load+1)^(0+128)+5)
  6405                           
  6406                           ;OverLoad_B1.c: 227: Load.ADL = 0;
  6407  03FA  01D1               	clrf	(_Load^(0+128)+7)
  6408  03FB  01D2               	clrf	((_Load+1)^(0+128)+7)
  6409                           
  6410                           ;OverLoad_B1.c: 233: Load.Run = 0;
  6411  03FC  11CA               	bcf	_Load^(0+128),3
  6412                           
  6413                           ;OverLoad_B1.c: 234: Load.Count = 0;
  6414  03FD  01E3               	clrf	(_Load^(0+128)+25)
  6415                           
  6416                           ;OverLoad_B1.c: 235: Load.OK = 0;
  6417  03FE  13CA               	bcf	_Load^(0+128),7
  6418  03FF                     l5244:	
  6419                           
  6420                           ;OverLoad_B1.c: 257: }
  6421                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
  6422  03FF  1ECA               	btfss	_Load^(0+128),5
  6423  0400  0008               	return
  6424                           
  6425                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
  6426  0401  3001               	movlw	1
  6427  0402  07CD               	addwf	(_Load^(0+128)+3),f
  6428  0403  1803               	skipnc
  6429  0404  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6430  0405  3000               	movlw	0
  6431  0406  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6432                           
  6433                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
  6434  0407  3001               	movlw	1
  6435  0408  024E               	subwf	((_Load+1)^(0+128)+3),w
  6436  0409  30F4               	movlw	244
  6437  040A  1903               	skipnz
  6438  040B  024D               	subwf	(_Load^(0+128)+3),w
  6439  040C  1C03               	skipc
  6440  040D  0008               	return
  6441                           
  6442                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
  6443  040E  01CD               	clrf	(_Load^(0+128)+3)
  6444  040F  01CE               	clrf	((_Load+1)^(0+128)+3)
  6445                           
  6446                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
  6447  0410  12CA               	bcf	_Load^(0+128),5
  6448                           
  6449                           ;OverLoad_B1.c: 263: }
  6450                           ;OverLoad_B1.c: 264: }
  6451                           ;OverLoad_B1.c: 265: }
  6452                           ;OverLoad_B1.c: 266: } else {
  6453  0411  0008               	return
  6454  0412                     l700:	
  6455                           
  6456                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
  6457  0412  1283               	bcf	3,5	;RP0=0, select bank0
  6458  0413  1303               	bcf	3,6	;RP1=0, select bank0
  6459  0414  1C25               	btfss	_myMain,0
  6460  0415  0008               	return
  6461                           
  6462                           ;OverLoad_B1.c: 268: Load.Enable = 1;
  6463  0416  1683               	bsf	3,5	;RP0=1, select bank1
  6464  0417  1303               	bcf	3,6	;RP1=0, select bank1
  6465  0418  144A               	bsf	_Load^(0+128),0
  6466  0419  0008               	return
  6467  041A                     __end_of_Load_Main:	
  6468                           
  6469                           	psect	text31
  6470  0A9D                     __ptext31:	
  6471 ;; *************** function _getMain_Lights_Count *****************
  6472 ;; Defined at:
  6473 ;;		line 459 in file "../src/Main_B1.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;		None
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  status1         1    5[COMMON] unsigned char 
  6478 ;;  count           1    4[COMMON] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      unsigned char 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6488 ;;      Params:         0       0       0       0
  6489 ;;      Locals:         2       0       0       0
  6490 ;;      Temps:          0       0       0       0
  6491 ;;      Totals:         2       0       0       0
  6492 ;;Total ram usage:        2 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    2
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_Load_Main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _getMain_Lights_Count
  6504  0A9D                     _getMain_Lights_Count:	
  6505                           
  6506                           ;Main_B1.c: 460: char count = 0;
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6510  0A9D  01F4               	clrf	getMain_Lights_Count@count
  6511                           
  6512                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6513  0A9E  3000               	movlw	0
  6514  0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  6515  0AA0  1303               	bcf	3,6	;RP1=0, select bank0
  6516  0AA1  1943               	btfsc	_Lights1,2
  6517  0AA2  3001               	movlw	1
  6518  0AA3  00F5               	movwf	getMain_Lights_Count@status1
  6519                           
  6520                           ;Main_B1.c: 487: return count = status1;
  6521  0AA4  0875               	movf	getMain_Lights_Count@status1,w
  6522  0AA5  00F4               	movwf	getMain_Lights_Count@count
  6523  0AA6  0008               	return
  6524  0AA7                     __end_of_getMain_Lights_Count:	
  6525                           
  6526                           	psect	text32
  6527  0A50                     __ptext32:	
  6528 ;; *************** function _getLight_Load_Status *****************
  6529 ;; Defined at:
  6530 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  loadstatus      1    4[COMMON] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      unsigned char 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6544 ;;      Params:         0       0       0       0
  6545 ;;      Locals:         1       0       0       0
  6546 ;;      Temps:          0       0       0       0
  6547 ;;      Totals:         1       0       0       0
  6548 ;;Total ram usage:        1 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    2
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_Load_Main
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           
  6559                           ;psect for function _getLight_Load_Status
  6560  0A50                     _getLight_Load_Status:	
  6561                           
  6562                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6566  0A50  3000               	movlw	0
  6567  0A51  18F7               	btfsc	_Light,1
  6568  0A52  3001               	movlw	1
  6569  0A53  00F4               	movwf	getLight_Load_Status@loadstatus
  6570                           
  6571                           ;TriacRelay_B1.c: 407: return loadstatus;
  6572  0A54  0874               	movf	getLight_Load_Status@loadstatus,w
  6573  0A55  0008               	return
  6574  0A56                     __end_of_getLight_Load_Status:	
  6575                           
  6576                           	psect	text33
  6577  0A4A                     __ptext33:	
  6578 ;; *************** function _getLight_LoadGO *****************
  6579 ;; Defined at:
  6580 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  loadgo          1    4[COMMON] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      unsigned char 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6594 ;;      Params:         0       0       0       0
  6595 ;;      Locals:         1       0       0       0
  6596 ;;      Temps:          0       0       0       0
  6597 ;;      Totals:         1       0       0       0
  6598 ;;Total ram usage:        1 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    2
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_Load_Main
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           
  6609                           ;psect for function _getLight_LoadGO
  6610  0A4A                     _getLight_LoadGO:	
  6611                           
  6612                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6616  0A4A  3000               	movlw	0
  6617  0A4B  1877               	btfsc	_Light,0
  6618  0A4C  3001               	movlw	1
  6619  0A4D  00F4               	movwf	getLight_LoadGO@loadgo
  6620                           
  6621                           ;TriacRelay_B1.c: 402: return loadgo;
  6622  0A4E  0874               	movf	getLight_LoadGO@loadgo,w
  6623  0A4F  0008               	return
  6624  0A50                     __end_of_getLight_LoadGO:	
  6625                           
  6626                           	psect	text34
  6627  0CB1                     __ptext34:	
  6628 ;; *************** function ___wmul *****************
  6629 ;; Defined at:
  6630 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6633 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  product         2    4[COMMON] unsigned int 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  2    0[BANK0 ] unsigned int 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6645 ;;      Params:         0       4       0       0
  6646 ;;      Locals:         2       0       0       0
  6647 ;;      Temps:          0       0       0       0
  6648 ;;      Totals:         2       4       0       0
  6649 ;;Total ram usage:        6 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    2
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_Load_Main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function ___wmul
  6661  0CB1                     ___wmul:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6665  0CB1  01F4               	clrf	___wmul@product
  6666  0CB2  01F5               	clrf	___wmul@product+1
  6667  0CB3                     l4876:	
  6668  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  6669  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  6670  0CB5  1C50               	btfss	___wmul@multiplier,0
  6671  0CB6  2CBD               	goto	l1399
  6672  0CB7  0852               	movf	___wmul@multiplicand,w
  6673  0CB8  07F4               	addwf	___wmul@product,f
  6674  0CB9  1803               	skipnc
  6675  0CBA  0AF5               	incf	___wmul@product+1,f
  6676  0CBB  0853               	movf	___wmul@multiplicand+1,w
  6677  0CBC  07F5               	addwf	___wmul@product+1,f
  6678  0CBD                     l1399:	
  6679  0CBD  3001               	movlw	1
  6680  0CBE                     u5895:	
  6681  0CBE  1003               	clrc
  6682  0CBF  0DD2               	rlf	___wmul@multiplicand,f
  6683  0CC0  0DD3               	rlf	___wmul@multiplicand+1,f
  6684  0CC1  3EFF               	addlw	-1
  6685  0CC2  1D03               	skipz
  6686  0CC3  2CBE               	goto	u5895
  6687  0CC4  3001               	movlw	1
  6688  0CC5                     u5905:	
  6689  0CC5  1003               	clrc
  6690  0CC6  0CD1               	rrf	___wmul@multiplier+1,f
  6691  0CC7  0CD0               	rrf	___wmul@multiplier,f
  6692  0CC8  3EFF               	addlw	-1
  6693  0CC9  1D03               	skipz
  6694  0CCA  2CC5               	goto	u5905
  6695  0CCB  0851               	movf	___wmul@multiplier+1,w
  6696  0CCC  0450               	iorwf	___wmul@multiplier,w
  6697  0CCD  1D03               	skipz
  6698  0CCE  2CB3               	goto	l4876
  6699  0CCF  0875               	movf	___wmul@product+1,w
  6700  0CD0  01D1               	clrf	?___wmul+1
  6701  0CD1  07D1               	addwf	?___wmul+1,f
  6702  0CD2  0874               	movf	___wmul@product,w
  6703  0CD3  01D0               	clrf	?___wmul
  6704  0CD4  07D0               	addwf	?___wmul,f
  6705  0CD5  0008               	return
  6706  0CD6                     __end_of___wmul:	
  6707                           
  6708                           	psect	text35
  6709  0D44                     __ptext35:	
  6710 ;; *************** function ___lwdiv *****************
  6711 ;; Defined at:
  6712 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  divisor         2    0[BANK0 ] unsigned int 
  6715 ;;  dividend        2    2[BANK0 ] unsigned int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  quotient        2    5[BANK0 ] unsigned int 
  6718 ;;  counter         1    4[BANK0 ] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  2    0[BANK0 ] unsigned int 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6728 ;;      Params:         0       4       0       0
  6729 ;;      Locals:         0       3       0       0
  6730 ;;      Temps:          1       0       0       0
  6731 ;;      Totals:         1       7       0       0
  6732 ;;Total ram usage:        8 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    2
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_Load_Main
  6739 ;;		_getPIR_AD
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function ___lwdiv
  6745  0D44                     ___lwdiv:	
  6746                           
  6747                           ;incstack = 0
  6748                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6749  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  6750  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  6751  0D46  01D5               	clrf	___lwdiv@quotient
  6752  0D47  01D6               	clrf	___lwdiv@quotient+1
  6753  0D48  0851               	movf	___lwdiv@divisor+1,w
  6754  0D49  0450               	iorwf	___lwdiv@divisor,w
  6755  0D4A  1903               	skipnz
  6756  0D4B  2D7D               	goto	l4908
  6757  0D4C  01D4               	clrf	___lwdiv@counter
  6758  0D4D  0AD4               	incf	___lwdiv@counter,f
  6759  0D4E                     l4896:	
  6760  0D4E  1BD1               	btfsc	___lwdiv@divisor+1,7
  6761  0D4F  2D5C               	goto	l4898
  6762  0D50  3001               	movlw	1
  6763  0D51                     u5935:	
  6764  0D51  1003               	clrc
  6765  0D52  0DD0               	rlf	___lwdiv@divisor,f
  6766  0D53  0DD1               	rlf	___lwdiv@divisor+1,f
  6767  0D54  3EFF               	addlw	-1
  6768  0D55  1D03               	skipz
  6769  0D56  2D51               	goto	u5935
  6770  0D57  3001               	movlw	1
  6771  0D58  00F4               	movwf	??___lwdiv
  6772  0D59  0874               	movf	??___lwdiv,w
  6773  0D5A  07D4               	addwf	___lwdiv@counter,f
  6774  0D5B  2D4E               	goto	l4896
  6775  0D5C                     l4898:	
  6776  0D5C  3001               	movlw	1
  6777  0D5D                     u5955:	
  6778  0D5D  1003               	clrc
  6779  0D5E  0DD5               	rlf	___lwdiv@quotient,f
  6780  0D5F  0DD6               	rlf	___lwdiv@quotient+1,f
  6781  0D60  3EFF               	addlw	-1
  6782  0D61  1D03               	skipz
  6783  0D62  2D5D               	goto	u5955
  6784  0D63  0851               	movf	___lwdiv@divisor+1,w
  6785  0D64  0253               	subwf	___lwdiv@dividend+1,w
  6786  0D65  1D03               	skipz
  6787  0D66  2D69               	goto	u5965
  6788  0D67  0850               	movf	___lwdiv@divisor,w
  6789  0D68  0252               	subwf	___lwdiv@dividend,w
  6790  0D69                     u5965:	
  6791  0D69  1C03               	skipc
  6792  0D6A  2D72               	goto	l4904
  6793  0D6B  0850               	movf	___lwdiv@divisor,w
  6794  0D6C  02D2               	subwf	___lwdiv@dividend,f
  6795  0D6D  0851               	movf	___lwdiv@divisor+1,w
  6796  0D6E  1C03               	skipc
  6797  0D6F  03D3               	decf	___lwdiv@dividend+1,f
  6798  0D70  02D3               	subwf	___lwdiv@dividend+1,f
  6799  0D71  1455               	bsf	___lwdiv@quotient,0
  6800  0D72                     l4904:	
  6801  0D72  3001               	movlw	1
  6802  0D73                     u5975:	
  6803  0D73  1003               	clrc
  6804  0D74  0CD1               	rrf	___lwdiv@divisor+1,f
  6805  0D75  0CD0               	rrf	___lwdiv@divisor,f
  6806  0D76  3EFF               	addlw	-1
  6807  0D77  1D03               	skipz
  6808  0D78  2D73               	goto	u5975
  6809  0D79  3001               	movlw	1
  6810  0D7A  02D4               	subwf	___lwdiv@counter,f
  6811  0D7B  1D03               	btfss	3,2
  6812  0D7C  2D5C               	goto	l4898
  6813  0D7D                     l4908:	
  6814  0D7D  0856               	movf	___lwdiv@quotient+1,w
  6815  0D7E  01D1               	clrf	?___lwdiv+1
  6816  0D7F  07D1               	addwf	?___lwdiv+1,f
  6817  0D80  0855               	movf	___lwdiv@quotient,w
  6818  0D81  01D0               	clrf	?___lwdiv
  6819  0D82  07D0               	addwf	?___lwdiv,f
  6820  0D83  0008               	return
  6821  0D84                     __end_of___lwdiv:	
  6822                           
  6823                           	psect	text36
  6824  0A2A                     __ptext36:	
  6825 ;; *************** function _Load_Initialization *****************
  6826 ;; Defined at:
  6827 ;;		line 9 in file "../src/OverLoad_B1.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6841 ;;      Params:         0       0       0       0
  6842 ;;      Locals:         0       0       0       0
  6843 ;;      Temps:          0       0       0       0
  6844 ;;      Totals:         0       0       0       0
  6845 ;;Total ram usage:        0 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    3
  6848 ;; This function calls:
  6849 ;;		_setLoad_AH_AL_Restore
  6850 ;; This function is called by:
  6851 ;;		_main
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _Load_Initialization
  6857  0A2A                     _Load_Initialization:	
  6858                           
  6859                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6863  0A2A  158A  2369         	fcall	_setLoad_AH_AL_Restore
  6864  0A2C  0008               	return
  6865  0A2D                     __end_of_Load_Initialization:	
  6866                           
  6867                           	psect	text37
  6868  0B69                     __ptext37:	
  6869 ;; *************** function _setLoad_AH_AL_Restore *****************
  6870 ;; Defined at:
  6871 ;;		line 294 in file "../src/OverLoad_B1.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;		None
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  i               1    5[COMMON] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;		None               void
  6878 ;; Registers used:
  6879 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6885 ;;      Params:         0       0       0       0
  6886 ;;      Locals:         1       0       0       0
  6887 ;;      Temps:          1       0       0       0
  6888 ;;      Totals:         2       0       0       0
  6889 ;;Total ram usage:        2 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_Load_Initialization
  6896 ;;		_Load_Main
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           
  6901                           ;psect for function _setLoad_AH_AL_Restore
  6902  0B69                     _setLoad_AH_AL_Restore:	
  6903                           
  6904                           ;OverLoad_B1.c: 295: char i;
  6905                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
  6906                           
  6907                           ;incstack = 0
  6908                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6909  0B69  01F5               	clrf	setLoad_AH_AL_Restore@i
  6910  0B6A                     L18:	
  6911  0B6A  3005               	movlw	5
  6912  0B6B  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6913  0B6C  1803               	btfsc	3,0
  6914  0B6D  0008               	return
  6915                           
  6916                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
  6917  0B6E  0875               	movf	setLoad_AH_AL_Restore@i,w
  6918  0B6F  3ED4               	addlw	(_Load+10)& (0+255)
  6919  0B70  0084               	movwf	4
  6920  0B71  1383               	bcf	3,7	;select IRP bank1
  6921  0B72  0180               	clrf	0
  6922                           
  6923                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xff;
  6924  0B73  30FF               	movlw	255
  6925  0B74  00F4               	movwf	??_setLoad_AH_AL_Restore
  6926  0B75  0875               	movf	setLoad_AH_AL_Restore@i,w
  6927  0B76  3ED9               	addlw	(_Load+15)& (0+255)
  6928  0B77  0084               	movwf	4
  6929  0B78  0874               	movf	??_setLoad_AH_AL_Restore,w
  6930  0B79  0080               	movwf	0
  6931  0B7A  3001               	movlw	1
  6932  0B7B  00F4               	movwf	??_setLoad_AH_AL_Restore
  6933  0B7C  0874               	movf	??_setLoad_AH_AL_Restore,w
  6934  0B7D  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6935  0B7E  2B6A               	goto	L18
  6936  0B7F                     __end_of_setLoad_AH_AL_Restore:	
  6937                           
  6938                           	psect	text38
  6939  0C4C                     __ptext38:	
  6940 ;; *************** function _Lights_Main *****************
  6941 ;; Defined at:
  6942 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;		None
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;		None
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6956 ;;      Params:         0       0       0       0
  6957 ;;      Locals:         0       0       0       0
  6958 ;;      Temps:          0       0       0       0
  6959 ;;      Totals:         0       0       0       0
  6960 ;;Total ram usage:        0 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    6
  6963 ;; This function calls:
  6964 ;;		_Lights_Control
  6965 ;;		_getLoad_OK
  6966 ;;		_getMain_All_Error_Status
  6967 ;;		_getMain_All_LightsStatus
  6968 ;;		_setLights_Main
  6969 ;; This function is called by:
  6970 ;;		_main
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _Lights_Main
  6976  0C4C                     _Lights_Main:	
  6977                           
  6978                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6982  0C4C  1C77               	btfss	_Light,0
  6983  0C4D  2C62               	goto	l5262
  6984                           
  6985                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6986  0C4E  158A  2272  158A   	fcall	_getLoad_OK
  6987  0C51  3A01               	xorlw	1
  6988  0C52  1903               	skipnz
  6989  0C53  2C61               	goto	l1278
  6990  0C54  3000               	movlw	0
  6991  0C55  158A  2506  158A   	fcall	_getMain_All_Error_Status
  6992  0C58  3800               	iorlw	0
  6993  0C59  1D03               	skipz
  6994  0C5A  2C61               	goto	l1278
  6995  0C5B  118A  27F7  158A   	fcall	_getMain_All_LightsStatus
  6996  0C5E  3800               	iorlw	0
  6997  0C5F  1D03               	skipz
  6998  0C60  2C62               	goto	l5262
  6999  0C61                     l1278:	
  7000                           
  7001                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7002  0C61  1077               	bcf	_Light,0
  7003  0C62                     l5262:	
  7004                           
  7005                           ;TriacRelay_B1.c: 68: }
  7006                           ;TriacRelay_B1.c: 69: }
  7007                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7008  0C62  3001               	movlw	1
  7009  0C63  158A  24D6  158A   	fcall	_setLights_Main
  7010                           
  7011                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7012  0C66  3001               	movlw	1
  7013  0C67  118A  26C1         	fcall	_Lights_Control
  7014  0C69  0008               	return
  7015  0C6A                     __end_of_Lights_Main:	
  7016                           
  7017                           	psect	text39
  7018  0CD6                     __ptext39:	
  7019 ;; *************** function _setLights_Main *****************
  7020 ;; Defined at:
  7021 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  lights          1    wreg     unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  lights          1    5[BANK0 ] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7035 ;;      Params:         0       0       0       0
  7036 ;;      Locals:         0       1       0       0
  7037 ;;      Temps:          0       0       0       0
  7038 ;;      Totals:         0       1       0       0
  7039 ;;Total ram usage:        1 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    5
  7042 ;; This function calls:
  7043 ;;		_LightsPointSelect
  7044 ;;		_getLights_Allow_Condition
  7045 ;;		_setLights
  7046 ;; This function is called by:
  7047 ;;		_Lights_Main
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           
  7052                           ;psect for function _setLights_Main
  7053  0CD6                     _setLights_Main:	
  7054                           
  7055                           ;incstack = 0
  7056                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7057                           ;setLights_Main@lights stored from wreg
  7058  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  7059  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  7060  0CD8  00D5               	movwf	setLights_Main@lights
  7061                           
  7062                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7063  0CD9  0855               	movf	setLights_Main@lights,w
  7064  0CDA  158A  2293  158A   	fcall	_LightsPointSelect
  7065                           
  7066                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7067  0CDD  0878               	movf	_Lights,w
  7068  0CDE  0084               	movwf	4
  7069  0CDF  1383               	bcf	3,7	;select IRP bank0
  7070  0CE0  1880               	btfsc	0,1
  7071  0CE1  0008               	return
  7072                           
  7073                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7074  0CE2  0878               	movf	_Lights,w
  7075  0CE3  0084               	movwf	4
  7076  0CE4  1D80               	btfss	0,3
  7077  0CE5  0008               	return
  7078                           
  7079                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7080  0CE6  1283               	bcf	3,5	;RP0=0, select bank0
  7081  0CE7  1303               	bcf	3,6	;RP1=0, select bank0
  7082  0CE8  0855               	movf	setLights_Main@lights,w
  7083  0CE9  158A  237F  158A   	fcall	_getLights_Allow_Condition
  7084  0CEC  3800               	iorlw	0
  7085  0CED  1D03               	skipz
  7086  0CEE  0008               	return
  7087                           
  7088                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7089  0CEF  0878               	movf	_Lights,w
  7090  0CF0  0084               	movwf	4
  7091  0CF1  1383               	bcf	3,7	;select IRP bank0
  7092  0CF2  1180               	bcf	0,3
  7093                           
  7094                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7095  0CF3  0878               	movf	_Lights,w
  7096  0CF4  0084               	movwf	4
  7097  0CF5  1E00               	btfss	0,4
  7098  0CF6  2CFF               	goto	l4844
  7099                           
  7100                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7101  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  7102  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  7103  0CF9  01D2               	clrf	setLights@status
  7104  0CFA  0AD2               	incf	setLights@status,f
  7105  0CFB  0855               	movf	setLights_Main@lights,w
  7106  0CFC  118A  2744         	fcall	_setLights
  7107                           
  7108                           ;TriacRelay_B1.c: 99: } else {
  7109  0CFE  0008               	return
  7110  0CFF                     l4844:	
  7111                           
  7112                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7113  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  7114  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  7115  0D01  01D2               	clrf	setLights@status
  7116  0D02  0855               	movf	setLights_Main@lights,w
  7117  0D03  118A  2744         	fcall	_setLights
  7118  0D05  0008               	return
  7119  0D06                     __end_of_setLights_Main:	
  7120                           
  7121                           	psect	text40
  7122  0744                     __ptext40:	
  7123 ;; *************** function _setLights *****************
  7124 ;; Defined at:
  7125 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  lights          1    wreg     unsigned char 
  7128 ;;  status          1    2[BANK0 ] unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  lights          1    4[BANK0 ] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7140 ;;      Params:         0       1       0       0
  7141 ;;      Locals:         0       1       0       0
  7142 ;;      Temps:          0       1       0       0
  7143 ;;      Totals:         0       3       0       0
  7144 ;;Total ram usage:        3 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    4
  7147 ;; This function calls:
  7148 ;;		_setLED
  7149 ;;		_setLights_Line
  7150 ;; This function is called by:
  7151 ;;		_setLights_Main
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _setLights
  7157  0744                     _setLights:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7161                           ;setLights@lights stored from wreg
  7162  0744  1283               	bcf	3,5	;RP0=0, select bank0
  7163  0745  1303               	bcf	3,6	;RP1=0, select bank0
  7164  0746  00D4               	movwf	setLights@lights
  7165                           
  7166                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7167  0747  0852               	movf	setLights@status,w
  7168  0748  3A01               	xorlw	1
  7169  0749  1D03               	skipz
  7170  074A  2F87               	goto	l4608
  7171                           
  7172                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7173  074B  0854               	movf	setLights@lights,w
  7174  074C  3A02               	xorlw	2
  7175  074D  1D03               	skipz
  7176  074E  2F5C               	goto	l4590
  7177                           
  7178                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7179  074F  01D0               	clrf	setLED@command
  7180  0750  3001               	movlw	1
  7181  0751  158A  26C4  118A   	fcall	_setLED
  7182                           
  7183                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7184  0754  1283               	bcf	3,5	;RP0=0, select bank0
  7185  0755  1303               	bcf	3,6	;RP1=0, select bank0
  7186  0756  01D0               	clrf	setLED@command
  7187  0757  0AD0               	incf	setLED@command,f
  7188  0758  3002               	movlw	2
  7189  0759  158A  26C4  118A   	fcall	_setLED
  7190  075C                     l4590:	
  7191                           
  7192                           ;TriacRelay_B1.c: 121: }
  7193                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7194  075C  0878               	movf	_Lights,w
  7195  075D  0084               	movwf	4
  7196  075E  1383               	bcf	3,7	;select IRP bank0
  7197  075F  1900               	btfsc	0,2
  7198  0760  2F80               	goto	l4604
  7199                           
  7200                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7201  0761  0878               	movf	_Lights,w
  7202  0762  0084               	movwf	4
  7203  0763  1500               	bsf	0,2
  7204                           
  7205                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7206  0764  1283               	bcf	3,5	;RP0=0, select bank0
  7207  0765  1303               	bcf	3,6	;RP1=0, select bank0
  7208  0766  0854               	movf	setLights@lights,w
  7209  0767  3A01               	xorlw	1
  7210  0768  1D03               	skipz
  7211  0769  2F80               	goto	l4604
  7212                           
  7213                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7214  076A  1506               	bsf	6,2	;volatile
  7215                           
  7216                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7217  076B  3064               	movlw	100
  7218  076C  00D3               	movwf	??_setLights
  7219  076D  0878               	movf	_Lights,w
  7220  076E  3E04               	addlw	4
  7221  076F  0084               	movwf	4
  7222  0770  0853               	movf	??_setLights,w
  7223  0771  0080               	movwf	0
  7224                           
  7225                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7226  0772  308C               	movlw	140
  7227  0773  00D3               	movwf	??_setLights
  7228  0774  0878               	movf	_Lights,w
  7229  0775  3E03               	addlw	3
  7230  0776  0084               	movwf	4
  7231  0777  0853               	movf	??_setLights,w
  7232  0778  0080               	movwf	0
  7233                           
  7234                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7235  0779  0878               	movf	_Lights,w
  7236  077A  3E02               	addlw	2
  7237  077B  0084               	movwf	4
  7238  077C  0180               	clrf	0
  7239                           
  7240                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7241  077D  0878               	movf	_Lights,w
  7242  077E  0084               	movwf	4
  7243  077F  1480               	bsf	0,1
  7244  0780                     l4604:	
  7245                           
  7246                           ;TriacRelay_B1.c: 136: }
  7247                           ;TriacRelay_B1.c: 162: }
  7248                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7249  0780  14F7               	bsf	_Light,1
  7250                           
  7251                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7252  0781  1283               	bcf	3,5	;RP0=0, select bank0
  7253  0782  1303               	bcf	3,6	;RP1=0, select bank0
  7254  0783  0854               	movf	setLights@lights,w
  7255  0784  158A  22C0         	fcall	_setLights_Line
  7256                           
  7257                           ;TriacRelay_B1.c: 167: } else {
  7258  0786  0008               	return
  7259  0787                     l4608:	
  7260                           
  7261                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7262  0787  1283               	bcf	3,5	;RP0=0, select bank0
  7263  0788  1303               	bcf	3,6	;RP1=0, select bank0
  7264  0789  0854               	movf	setLights@lights,w
  7265  078A  3A02               	xorlw	2
  7266  078B  1D03               	skipz
  7267  078C  2F9A               	goto	l4612
  7268                           
  7269                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7270  078D  01D0               	clrf	setLED@command
  7271  078E  0AD0               	incf	setLED@command,f
  7272  078F  3001               	movlw	1
  7273  0790  158A  26C4  118A   	fcall	_setLED
  7274                           
  7275                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7276  0793  1283               	bcf	3,5	;RP0=0, select bank0
  7277  0794  1303               	bcf	3,6	;RP1=0, select bank0
  7278  0795  01D0               	clrf	setLED@command
  7279  0796  3002               	movlw	2
  7280  0797  158A  26C4  118A   	fcall	_setLED
  7281  079A                     l4612:	
  7282                           
  7283                           ;TriacRelay_B1.c: 173: }
  7284                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7285  079A  0878               	movf	_Lights,w
  7286  079B  0084               	movwf	4
  7287  079C  1383               	bcf	3,7	;select IRP bank0
  7288  079D  1D00               	btfss	0,2
  7289  079E  2FBE               	goto	l4626
  7290                           
  7291                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7292  079F  0878               	movf	_Lights,w
  7293  07A0  0084               	movwf	4
  7294  07A1  1100               	bcf	0,2
  7295                           
  7296                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7297  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  7298  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  7299  07A4  0854               	movf	setLights@lights,w
  7300  07A5  3A01               	xorlw	1
  7301  07A6  1D03               	skipz
  7302  07A7  2FBE               	goto	l4626
  7303                           
  7304                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7305  07A8  1506               	bsf	6,2	;volatile
  7306                           
  7307                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7308  07A9  3028               	movlw	40
  7309  07AA  00D3               	movwf	??_setLights
  7310  07AB  0878               	movf	_Lights,w
  7311  07AC  3E04               	addlw	4
  7312  07AD  0084               	movwf	4
  7313  07AE  0853               	movf	??_setLights,w
  7314  07AF  0080               	movwf	0
  7315                           
  7316                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7317  07B0  3050               	movlw	80
  7318  07B1  00D3               	movwf	??_setLights
  7319  07B2  0878               	movf	_Lights,w
  7320  07B3  3E03               	addlw	3
  7321  07B4  0084               	movwf	4
  7322  07B5  0853               	movf	??_setLights,w
  7323  07B6  0080               	movwf	0
  7324                           
  7325                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7326  07B7  0878               	movf	_Lights,w
  7327  07B8  3E02               	addlw	2
  7328  07B9  0084               	movwf	4
  7329  07BA  0180               	clrf	0
  7330                           
  7331                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7332  07BB  0878               	movf	_Lights,w
  7333  07BC  0084               	movwf	4
  7334  07BD  1480               	bsf	0,1
  7335  07BE                     l4626:	
  7336                           
  7337                           ;TriacRelay_B1.c: 184: }
  7338                           ;TriacRelay_B1.c: 211: }
  7339                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7340  07BE  10F7               	bcf	_Light,1
  7341                           
  7342                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7343  07BF  3000               	movlw	0
  7344  07C0  158A  22C0         	fcall	_setLights_Line
  7345  07C2  0008               	return
  7346  07C3                     __end_of_setLights:	
  7347                           
  7348                           	psect	text41
  7349  0AC0                     __ptext41:	
  7350 ;; *************** function _setLights_Line *****************
  7351 ;; Defined at:
  7352 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  lights          1    wreg     unsigned char 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  lights          1    4[COMMON] unsigned char 
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7366 ;;      Params:         0       0       0       0
  7367 ;;      Locals:         1       0       0       0
  7368 ;;      Temps:          0       0       0       0
  7369 ;;      Totals:         1       0       0       0
  7370 ;;Total ram usage:        1 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    2
  7373 ;; This function calls:
  7374 ;;		Nothing
  7375 ;; This function is called by:
  7376 ;;		_setLights
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function _setLights_Line
  7382  0AC0                     _setLights_Line:	
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in _setLights_Line: [wreg]
  7386                           ;setLights_Line@lights stored from wreg
  7387  0AC0  00F4               	movwf	setLights_Line@lights
  7388                           
  7389                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7390  0AC1  1477               	bsf	_Light,0
  7391                           
  7392                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7393  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  7394  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  7395  0AC4  1044               	bcf	_Lights1+1,0
  7396                           
  7397                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7398  0AC5  0874               	movf	setLights_Line@lights,w
  7399  0AC6  3A01               	xorlw	1
  7400  0AC7  1D03               	skipz
  7401  0AC8  0008               	return
  7402  0AC9  0874               	movf	setLights_Line@lights,w
  7403  0ACA  1903               	btfsc	3,2
  7404  0ACB  0008               	return
  7405                           
  7406                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7407  0ACC  1444               	bsf	_Lights1+1,0
  7408  0ACD  0008               	return
  7409  0ACE                     __end_of_setLights_Line:	
  7410                           
  7411                           	psect	text42
  7412  0B7F                     __ptext42:	
  7413 ;; *************** function _getLights_Allow_Condition *****************
  7414 ;; Defined at:
  7415 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  lights          1    wreg     unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  lights          1    0[COMMON] unsigned char 
  7420 ;;  allow           1    0[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      unsigned char 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7430 ;;      Params:         0       0       0       0
  7431 ;;      Locals:         0       2       0       0
  7432 ;;      Temps:          1       0       0       0
  7433 ;;      Totals:         1       2       0       0
  7434 ;;Total ram usage:        3 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    3
  7437 ;; This function calls:
  7438 ;;		_getLoad_OK
  7439 ;; This function is called by:
  7440 ;;		_setLights_Main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _getLights_Allow_Condition
  7446  0B7F                     _getLights_Allow_Condition:	
  7447                           
  7448                           ;TriacRelay_B1.c: 368: char allow = 0;
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7452  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  7453  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  7454  0B81  01D0               	clrf	getLights_Allow_Condition@allow
  7455                           
  7456                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7457  0B82  01D1               	clrf	_getLights_Allow_Condition$4230
  7458  0B83  0AD1               	incf	_getLights_Allow_Condition$4230,f
  7459  0B84  158A  2272  158A   	fcall	_getLoad_OK
  7460  0B87  3800               	iorlw	0
  7461  0B88  1903               	btfsc	3,2
  7462  0B89  1877               	btfsc	_Light,0
  7463  0B8A  2B8E               	goto	l4578
  7464  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  7465  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  7466  0B8D  01D1               	clrf	_getLights_Allow_Condition$4230
  7467  0B8E                     l4578:	
  7468  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  7469  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  7470  0B90  0851               	movf	_getLights_Allow_Condition$4230,w
  7471  0B91  00F5               	movwf	??_getLights_Allow_Condition
  7472  0B92  0875               	movf	??_getLights_Allow_Condition,w
  7473  0B93  00D0               	movwf	getLights_Allow_Condition@allow
  7474                           
  7475                           ;TriacRelay_B1.c: 396: return allow;
  7476  0B94  0850               	movf	getLights_Allow_Condition@allow,w
  7477  0B95  0008               	return
  7478  0B96                     __end_of_getLights_Allow_Condition:	
  7479                           
  7480                           	psect	text43
  7481  0A72                     __ptext43:	
  7482 ;; *************** function _getLoad_OK *****************
  7483 ;; Defined at:
  7484 ;;		line 274 in file "../src/OverLoad_B1.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  ok              1    4[COMMON] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      unsigned char 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7498 ;;      Params:         0       0       0       0
  7499 ;;      Locals:         1       0       0       0
  7500 ;;      Temps:          0       0       0       0
  7501 ;;      Totals:         1       0       0       0
  7502 ;;Total ram usage:        1 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    2
  7505 ;; This function calls:
  7506 ;;		Nothing
  7507 ;; This function is called by:
  7508 ;;		_Lights_Main
  7509 ;;		_getLights_Allow_Condition
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           
  7514                           ;psect for function _getLoad_OK
  7515  0A72                     _getLoad_OK:	
  7516                           
  7517                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
  7518                           
  7519                           ;incstack = 0
  7520                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7521  0A72  3000               	movlw	0
  7522  0A73  1683               	bsf	3,5	;RP0=1, select bank1
  7523  0A74  1303               	bcf	3,6	;RP1=0, select bank1
  7524  0A75  1BCA               	btfsc	_Load^(0+128),7
  7525  0A76  3001               	movlw	1
  7526  0A77  00F4               	movwf	getLoad_OK@ok
  7527                           
  7528                           ;OverLoad_B1.c: 276: return ok;
  7529  0A78  0874               	movf	getLoad_OK@ok,w
  7530  0A79  0008               	return
  7531  0A7A                     __end_of_getLoad_OK:	
  7532                           
  7533                           	psect	text44
  7534  06C1                     __ptext44:	
  7535 ;; *************** function _Lights_Control *****************
  7536 ;; Defined at:
  7537 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  lights          1    wreg     unsigned char 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  lights          1   10[BANK0 ] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;		None               void
  7544 ;; Registers used:
  7545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7551 ;;      Params:         0       0       0       0
  7552 ;;      Locals:         0       1       0       0
  7553 ;;      Temps:          0       2       0       0
  7554 ;;      Totals:         0       3       0       0
  7555 ;;Total ram usage:        3 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    3
  7558 ;; This function calls:
  7559 ;;		_LightsPointSelect
  7560 ;;		___awdiv
  7561 ;; This function is called by:
  7562 ;;		_Lights_Main
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           
  7567                           ;psect for function _Lights_Control
  7568  06C1                     _Lights_Control:	
  7569                           
  7570                           ;incstack = 0
  7571                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7572                           ;Lights_Control@lights stored from wreg
  7573  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  7574  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  7575  06C3  00DA               	movwf	Lights_Control@lights
  7576                           
  7577                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7578  06C4  085A               	movf	Lights_Control@lights,w
  7579  06C5  158A  2293  118A   	fcall	_LightsPointSelect
  7580                           
  7581                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7582  06C8  0878               	movf	_Lights,w
  7583  06C9  0084               	movwf	4
  7584  06CA  1383               	bcf	3,7	;select IRP bank0
  7585  06CB  1C80               	btfss	0,1
  7586  06CC  0008               	return
  7587                           
  7588                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7589  06CD  3001               	movlw	1
  7590  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  7591  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  7592  06D0  00D8               	movwf	??_Lights_Control
  7593  06D1  0878               	movf	_Lights,w
  7594  06D2  3E02               	addlw	2
  7595  06D3  0084               	movwf	4
  7596  06D4  0858               	movf	??_Lights_Control,w
  7597  06D5  0780               	addwf	0,f
  7598                           
  7599                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7600  06D6  0878               	movf	_Lights,w
  7601  06D7  0084               	movwf	4
  7602  06D8  1B80               	btfsc	0,7
  7603  06D9  2F10               	goto	l4862
  7604                           
  7605                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7606  06DA  3014               	movlw	20
  7607  06DB  00D0               	movwf	___awdiv@divisor
  7608  06DC  3000               	movlw	0
  7609  06DD  00D1               	movwf	___awdiv@divisor+1
  7610  06DE  0878               	movf	_Lights,w
  7611  06DF  3E04               	addlw	4
  7612  06E0  0084               	movwf	4
  7613  06E1  0800               	movf	0,w
  7614  06E2  00D8               	movwf	??_Lights_Control
  7615  06E3  01D9               	clrf	??_Lights_Control+1
  7616  06E4  0858               	movf	??_Lights_Control,w
  7617  06E5  00D2               	movwf	___awdiv@dividend
  7618  06E6  0859               	movf	??_Lights_Control+1,w
  7619  06E7  00D3               	movwf	___awdiv@dividend+1
  7620  06E8  158A  2667  118A   	fcall	___awdiv
  7621  06EB  0878               	movf	_Lights,w
  7622  06EC  3E02               	addlw	2
  7623  06ED  0084               	movwf	4
  7624  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  7625  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  7626  06F0  0851               	movf	?___awdiv+1,w
  7627  06F1  3A80               	xorlw	128
  7628  06F2  3C80               	sublw	128
  7629  06F3  1D03               	skipz
  7630  06F4  2EF8               	goto	u5825
  7631  06F5  0850               	movf	?___awdiv,w
  7632  06F6  1383               	bcf	3,7	;select IRP bank0
  7633  06F7  0200               	subwf	0,w
  7634  06F8                     u5825:	
  7635  06F8  1C03               	skipc
  7636  06F9  0008               	return
  7637                           
  7638                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7639  06FA  0878               	movf	_Lights,w
  7640  06FB  0084               	movwf	4
  7641  06FC  1383               	bcf	3,7	;select IRP bank0
  7642  06FD  1780               	bsf	0,7
  7643                           
  7644                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7645  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  7646  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  7647  0700  085A               	movf	Lights_Control@lights,w
  7648  0701  3A01               	xorlw	1
  7649  0702  1D03               	skipz
  7650  0703  0008               	return
  7651                           
  7652                           ;TriacRelay_B1.c: 229: RB3 = Lights->Status == 1 ? 1 : 0;
  7653  0704  0878               	movf	_Lights,w
  7654  0705  0084               	movwf	4
  7655  0706  1D00               	btfss	0,2
  7656  0707  2F0C               	goto	u5840
  7657  0708  1283               	bcf	3,5	;RP0=0, select bank0
  7658  0709  1303               	bcf	3,6	;RP1=0, select bank0
  7659  070A  1586               	bsf	6,3	;volatile
  7660  070B  0008               	return
  7661  070C                     u5840:	
  7662  070C  1283               	bcf	3,5	;RP0=0, select bank0
  7663  070D  1303               	bcf	3,6	;RP1=0, select bank0
  7664  070E  1186               	bcf	6,3	;volatile
  7665                           
  7666                           ;TriacRelay_B1.c: 230: }
  7667                           ;TriacRelay_B1.c: 242: }
  7668                           ;TriacRelay_B1.c: 243: } else {
  7669  070F  0008               	return
  7670  0710                     l4862:	
  7671                           
  7672                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7673  0710  3014               	movlw	20
  7674  0711  00D0               	movwf	___awdiv@divisor
  7675  0712  3000               	movlw	0
  7676  0713  00D1               	movwf	___awdiv@divisor+1
  7677  0714  0878               	movf	_Lights,w
  7678  0715  3E03               	addlw	3
  7679  0716  0084               	movwf	4
  7680  0717  1383               	bcf	3,7	;select IRP bank0
  7681  0718  0800               	movf	0,w
  7682  0719  00D8               	movwf	??_Lights_Control
  7683  071A  01D9               	clrf	??_Lights_Control+1
  7684  071B  0858               	movf	??_Lights_Control,w
  7685  071C  00D2               	movwf	___awdiv@dividend
  7686  071D  0859               	movf	??_Lights_Control+1,w
  7687  071E  00D3               	movwf	___awdiv@dividend+1
  7688  071F  158A  2667  118A   	fcall	___awdiv
  7689  0722  0878               	movf	_Lights,w
  7690  0723  3E02               	addlw	2
  7691  0724  0084               	movwf	4
  7692  0725  1283               	bcf	3,5	;RP0=0, select bank0
  7693  0726  1303               	bcf	3,6	;RP1=0, select bank0
  7694  0727  0851               	movf	?___awdiv+1,w
  7695  0728  3A80               	xorlw	128
  7696  0729  3C80               	sublw	128
  7697  072A  1D03               	skipz
  7698  072B  2F2F               	goto	u5865
  7699  072C  0850               	movf	?___awdiv,w
  7700  072D  1383               	bcf	3,7	;select IRP bank0
  7701  072E  0200               	subwf	0,w
  7702  072F                     u5865:	
  7703  072F  1C03               	skipc
  7704  0730  0008               	return
  7705                           
  7706                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7707  0731  0878               	movf	_Lights,w
  7708  0732  3E02               	addlw	2
  7709  0733  0084               	movwf	4
  7710  0734  1383               	bcf	3,7	;select IRP bank0
  7711  0735  0180               	clrf	0
  7712                           
  7713                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7714  0736  0878               	movf	_Lights,w
  7715  0737  0084               	movwf	4
  7716  0738  1080               	bcf	0,1
  7717                           
  7718                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7719  0739  0878               	movf	_Lights,w
  7720  073A  0084               	movwf	4
  7721  073B  1380               	bcf	0,7
  7722                           
  7723                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7724  073C  1283               	bcf	3,5	;RP0=0, select bank0
  7725  073D  1303               	bcf	3,6	;RP1=0, select bank0
  7726  073E  085A               	movf	Lights_Control@lights,w
  7727  073F  3A01               	xorlw	1
  7728  0740  1D03               	skipz
  7729  0741  0008               	return
  7730                           
  7731                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7732  0742  1106               	bcf	6,2	;volatile
  7733  0743  0008               	return
  7734  0744                     __end_of_Lights_Control:	
  7735                           
  7736                           	psect	text45
  7737  0E67                     __ptext45:	
  7738 ;; *************** function ___awdiv *****************
  7739 ;; Defined at:
  7740 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  divisor         2    0[BANK0 ] int 
  7743 ;;  dividend        2    2[BANK0 ] int 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  quotient        2    6[BANK0 ] int 
  7746 ;;  sign            1    5[BANK0 ] unsigned char 
  7747 ;;  counter         1    4[BANK0 ] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  2    0[BANK0 ] int 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7757 ;;      Params:         0       4       0       0
  7758 ;;      Locals:         0       4       0       0
  7759 ;;      Temps:          1       0       0       0
  7760 ;;      Totals:         1       8       0       0
  7761 ;;Total ram usage:        9 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    2
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_setTemp_Main
  7768 ;;		_getPIR_AD
  7769 ;;		_Lights_Control
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           
  7774                           ;psect for function ___awdiv
  7775  0E67                     ___awdiv:	
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7779  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  7780  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  7781  0E69  01D5               	clrf	___awdiv@sign
  7782  0E6A  1FD1               	btfss	___awdiv@divisor+1,7
  7783  0E6B  2E73               	goto	l4644
  7784  0E6C  09D0               	comf	___awdiv@divisor,f
  7785  0E6D  09D1               	comf	___awdiv@divisor+1,f
  7786  0E6E  0AD0               	incf	___awdiv@divisor,f
  7787  0E6F  1903               	skipnz
  7788  0E70  0AD1               	incf	___awdiv@divisor+1,f
  7789  0E71  01D5               	clrf	___awdiv@sign
  7790  0E72  0AD5               	incf	___awdiv@sign,f
  7791  0E73                     l4644:	
  7792  0E73  1FD3               	btfss	___awdiv@dividend+1,7
  7793  0E74  2E7E               	goto	l4650
  7794  0E75  09D2               	comf	___awdiv@dividend,f
  7795  0E76  09D3               	comf	___awdiv@dividend+1,f
  7796  0E77  0AD2               	incf	___awdiv@dividend,f
  7797  0E78  1903               	skipnz
  7798  0E79  0AD3               	incf	___awdiv@dividend+1,f
  7799  0E7A  3001               	movlw	1
  7800  0E7B  00F4               	movwf	??___awdiv
  7801  0E7C  0874               	movf	??___awdiv,w
  7802  0E7D  06D5               	xorwf	___awdiv@sign,f
  7803  0E7E                     l4650:	
  7804  0E7E  01D6               	clrf	___awdiv@quotient
  7805  0E7F  01D7               	clrf	___awdiv@quotient+1
  7806  0E80  0851               	movf	___awdiv@divisor+1,w
  7807  0E81  0450               	iorwf	___awdiv@divisor,w
  7808  0E82  1903               	skipnz
  7809  0E83  2EB5               	goto	l4672
  7810  0E84  01D4               	clrf	___awdiv@counter
  7811  0E85  0AD4               	incf	___awdiv@counter,f
  7812  0E86                     l4660:	
  7813  0E86  1BD1               	btfsc	___awdiv@divisor+1,7
  7814  0E87  2E94               	goto	l4662
  7815  0E88  3001               	movlw	1
  7816  0E89                     u5385:	
  7817  0E89  1003               	clrc
  7818  0E8A  0DD0               	rlf	___awdiv@divisor,f
  7819  0E8B  0DD1               	rlf	___awdiv@divisor+1,f
  7820  0E8C  3EFF               	addlw	-1
  7821  0E8D  1D03               	skipz
  7822  0E8E  2E89               	goto	u5385
  7823  0E8F  3001               	movlw	1
  7824  0E90  00F4               	movwf	??___awdiv
  7825  0E91  0874               	movf	??___awdiv,w
  7826  0E92  07D4               	addwf	___awdiv@counter,f
  7827  0E93  2E86               	goto	l4660
  7828  0E94                     l4662:	
  7829  0E94  3001               	movlw	1
  7830  0E95                     u5405:	
  7831  0E95  1003               	clrc
  7832  0E96  0DD6               	rlf	___awdiv@quotient,f
  7833  0E97  0DD7               	rlf	___awdiv@quotient+1,f
  7834  0E98  3EFF               	addlw	-1
  7835  0E99  1D03               	skipz
  7836  0E9A  2E95               	goto	u5405
  7837  0E9B  0851               	movf	___awdiv@divisor+1,w
  7838  0E9C  0253               	subwf	___awdiv@dividend+1,w
  7839  0E9D  1D03               	skipz
  7840  0E9E  2EA1               	goto	u5415
  7841  0E9F  0850               	movf	___awdiv@divisor,w
  7842  0EA0  0252               	subwf	___awdiv@dividend,w
  7843  0EA1                     u5415:	
  7844  0EA1  1C03               	skipc
  7845  0EA2  2EAA               	goto	l4668
  7846  0EA3  0850               	movf	___awdiv@divisor,w
  7847  0EA4  02D2               	subwf	___awdiv@dividend,f
  7848  0EA5  0851               	movf	___awdiv@divisor+1,w
  7849  0EA6  1C03               	skipc
  7850  0EA7  03D3               	decf	___awdiv@dividend+1,f
  7851  0EA8  02D3               	subwf	___awdiv@dividend+1,f
  7852  0EA9  1456               	bsf	___awdiv@quotient,0
  7853  0EAA                     l4668:	
  7854  0EAA  3001               	movlw	1
  7855  0EAB                     u5425:	
  7856  0EAB  1003               	clrc
  7857  0EAC  0CD1               	rrf	___awdiv@divisor+1,f
  7858  0EAD  0CD0               	rrf	___awdiv@divisor,f
  7859  0EAE  3EFF               	addlw	-1
  7860  0EAF  1D03               	skipz
  7861  0EB0  2EAB               	goto	u5425
  7862  0EB1  3001               	movlw	1
  7863  0EB2  02D4               	subwf	___awdiv@counter,f
  7864  0EB3  1D03               	btfss	3,2
  7865  0EB4  2E94               	goto	l4662
  7866  0EB5                     l4672:	
  7867  0EB5  0855               	movf	___awdiv@sign,w
  7868  0EB6  1903               	btfsc	3,2
  7869  0EB7  2EBD               	goto	l4676
  7870  0EB8  09D6               	comf	___awdiv@quotient,f
  7871  0EB9  09D7               	comf	___awdiv@quotient+1,f
  7872  0EBA  0AD6               	incf	___awdiv@quotient,f
  7873  0EBB  1903               	skipnz
  7874  0EBC  0AD7               	incf	___awdiv@quotient+1,f
  7875  0EBD                     l4676:	
  7876  0EBD  0857               	movf	___awdiv@quotient+1,w
  7877  0EBE  01D1               	clrf	?___awdiv+1
  7878  0EBF  07D1               	addwf	?___awdiv+1,f
  7879  0EC0  0856               	movf	___awdiv@quotient,w
  7880  0EC1  01D0               	clrf	?___awdiv
  7881  0EC2  07D0               	addwf	?___awdiv,f
  7882  0EC3  0008               	return
  7883  0EC4                     __end_of___awdiv:	
  7884                           
  7885                           	psect	text46
  7886  0A3D                     __ptext46:	
  7887 ;; *************** function _Lights_Initialization *****************
  7888 ;; Defined at:
  7889 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;		None
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;		None
  7894 ;; Return value:  Size  Location     Type
  7895 ;;		None               void
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0, pclath, cstack
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7903 ;;      Params:         0       0       0       0
  7904 ;;      Locals:         0       0       0       0
  7905 ;;      Temps:          0       0       0       0
  7906 ;;      Totals:         0       0       0       0
  7907 ;;Total ram usage:        0 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    4
  7910 ;; This function calls:
  7911 ;;		_setLights_Initialization
  7912 ;; This function is called by:
  7913 ;;		_main
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _Lights_Initialization
  7919  0A3D                     _Lights_Initialization:	
  7920                           
  7921                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7925  0A3D  3001               	movlw	1
  7926  0A3E  158A  225C         	fcall	_setLights_Initialization
  7927  0A40  0008               	return
  7928  0A41                     __end_of_Lights_Initialization:	
  7929                           
  7930                           	psect	text47
  7931  0A5C                     __ptext47:	
  7932 ;; *************** function _setLights_Initialization *****************
  7933 ;; Defined at:
  7934 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  lights          1    wreg     unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  lights          1    0[BANK0 ] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;		None               void
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, pclath, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7948 ;;      Params:         0       0       0       0
  7949 ;;      Locals:         0       1       0       0
  7950 ;;      Temps:          0       0       0       0
  7951 ;;      Totals:         0       1       0       0
  7952 ;;Total ram usage:        1 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    3
  7955 ;; This function calls:
  7956 ;;		_LightsPointSelect
  7957 ;; This function is called by:
  7958 ;;		_Lights_Initialization
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _setLights_Initialization
  7964  0A5C                     _setLights_Initialization:	
  7965                           
  7966                           ;incstack = 0
  7967                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7968                           ;setLights_Initialization@lights stored from wreg
  7969  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  7970  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  7971  0A5E  00D0               	movwf	setLights_Initialization@lights
  7972                           
  7973                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7974  0A5F  0850               	movf	setLights_Initialization@lights,w
  7975  0A60  158A  2293         	fcall	_LightsPointSelect
  7976  0A62  0008               	return
  7977  0A63                     __end_of_setLights_Initialization:	
  7978                           
  7979                           	psect	text48
  7980  0A27                     __ptext48:	
  7981 ;; *************** function _LED_Main *****************
  7982 ;; Defined at:
  7983 ;;		line 47 in file "../src/LED_B1.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;		None
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;		None
  7988 ;; Return value:  Size  Location     Type
  7989 ;;		None               void
  7990 ;; Registers used:
  7991 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7997 ;;      Params:         0       0       0       0
  7998 ;;      Locals:         0       0       0       0
  7999 ;;      Temps:          0       0       0       0
  8000 ;;      Totals:         0       0       0       0
  8001 ;;Total ram usage:        0 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    5
  8004 ;; This function calls:
  8005 ;;		_setPIRLED_Main
  8006 ;; This function is called by:
  8007 ;;		_main
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _LED_Main
  8013  0A27                     _LED_Main:	
  8014                           
  8015                           ;LED_B1.c: 55: setPIRLED_Main();
  8016                           
  8017                           ;incstack = 0
  8018                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8019  0A27  158A  278F         	fcall	_setPIRLED_Main
  8020  0A29  0008               	return
  8021  0A2A                     __end_of_LED_Main:	
  8022                           
  8023                           	psect	text49
  8024  0F8F                     __ptext49:	
  8025 ;; *************** function _setPIRLED_Main *****************
  8026 ;; Defined at:
  8027 ;;		line 265 in file "../src/LED_B1.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  count           1    3[BANK0 ] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;		None               void
  8034 ;; Registers used:
  8035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8041 ;;      Params:         0       0       0       0
  8042 ;;      Locals:         0       1       0       0
  8043 ;;      Temps:          0       1       0       0
  8044 ;;      Totals:         0       2       0       0
  8045 ;;Total ram usage:        2 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    4
  8048 ;; This function calls:
  8049 ;;		_setLED
  8050 ;; This function is called by:
  8051 ;;		_LED_Main
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           
  8056                           ;psect for function _setPIRLED_Main
  8057  0F8F                     _setPIRLED_Main:	
  8058                           
  8059                           ;LED_B1.c: 267: char count;
  8060                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  8061                           
  8062                           ;incstack = 0
  8063                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8064  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8065  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8066  0F91  1C2A               	btfss	_PIRLED,0
  8067  0F92  0008               	return
  8068                           
  8069                           ;LED_B1.c: 269: PIRLED.Time++;
  8070  0F93  3001               	movlw	1
  8071  0F94  07AC               	addwf	_PIRLED+2,f
  8072  0F95  1803               	skipnc
  8073  0F96  0AAD               	incf	_PIRLED+3,f
  8074  0F97  3000               	movlw	0
  8075  0F98  07AD               	addwf	_PIRLED+3,f
  8076                           
  8077                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  8078  0F99  3000               	movlw	0
  8079  0F9A  022D               	subwf	_PIRLED+3,w
  8080  0F9B  3019               	movlw	25
  8081  0F9C  1903               	skipnz
  8082  0F9D  022C               	subwf	_PIRLED+2,w
  8083  0F9E  1C03               	skipc
  8084  0F9F  0008               	return
  8085                           
  8086                           ;LED_B1.c: 271: PIRLED.Time = 0;
  8087  0FA0  01AC               	clrf	_PIRLED+2
  8088  0FA1  01AD               	clrf	_PIRLED+3
  8089                           
  8090                           ;LED_B1.c: 272: setLED(1, 0);
  8091  0FA2  01D0               	clrf	setLED@command
  8092  0FA3  3001               	movlw	1
  8093  0FA4  158A  26C4  158A   	fcall	_setLED
  8094                           
  8095                           ;LED_B1.c: 273: setLED(2, 0);
  8096  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  8097  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  8098  0FA9  01D0               	clrf	setLED@command
  8099  0FAA  3002               	movlw	2
  8100  0FAB  158A  26C4  158A   	fcall	_setLED
  8101                           
  8102                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  8103  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  8104  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  8105  0FB0  1CAA               	btfss	_PIRLED,1
  8106  0FB1  2FB6               	goto	l4716
  8107                           
  8108                           ;LED_B1.c: 275: count = 4;
  8109  0FB2  3004               	movlw	4
  8110  0FB3  00D2               	movwf	??_setPIRLED_Main
  8111  0FB4  0852               	movf	??_setPIRLED_Main,w
  8112  0FB5  00D3               	movwf	setPIRLED_Main@count
  8113  0FB6                     l4716:	
  8114                           
  8115                           ;LED_B1.c: 276: }
  8116                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  8117  0FB6  1D2A               	btfss	_PIRLED,2
  8118  0FB7  2FBC               	goto	l4720
  8119                           
  8120                           ;LED_B1.c: 278: count = 6;
  8121  0FB8  3006               	movlw	6
  8122  0FB9  00D2               	movwf	??_setPIRLED_Main
  8123  0FBA  0852               	movf	??_setPIRLED_Main,w
  8124  0FBB  00D3               	movwf	setPIRLED_Main@count
  8125  0FBC                     l4720:	
  8126                           
  8127                           ;LED_B1.c: 279: }
  8128                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  8129  0FBC  1DAA               	btfss	_PIRLED,3
  8130  0FBD  2FC2               	goto	l4724
  8131                           
  8132                           ;LED_B1.c: 281: count = 8;
  8133  0FBE  3008               	movlw	8
  8134  0FBF  00D2               	movwf	??_setPIRLED_Main
  8135  0FC0  0852               	movf	??_setPIRLED_Main,w
  8136  0FC1  00D3               	movwf	setPIRLED_Main@count
  8137  0FC2                     l4724:	
  8138                           
  8139                           ;LED_B1.c: 282: }
  8140                           ;LED_B1.c: 283: PIRLED.Count++;
  8141  0FC2  3001               	movlw	1
  8142  0FC3  00D2               	movwf	??_setPIRLED_Main
  8143  0FC4  0852               	movf	??_setPIRLED_Main,w
  8144  0FC5  07AB               	addwf	_PIRLED+1,f
  8145                           
  8146                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8147  0FC6  082B               	movf	_PIRLED+1,w
  8148  0FC7  3A01               	xorlw	1
  8149  0FC8  1903               	skipnz
  8150  0FC9  2FCE               	goto	l4730
  8151  0FCA  082B               	movf	_PIRLED+1,w
  8152  0FCB  3A02               	xorlw	2
  8153  0FCC  1D03               	skipz
  8154  0FCD  2FE2               	goto	l4734
  8155  0FCE                     l4730:	
  8156                           
  8157                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8158  0FCE  1003               	clrc
  8159  0FCF  1E2A               	btfss	_PIRLED,4
  8160  0FD0  1403               	setc
  8161  0FD1  1C03               	btfss	3,0
  8162  0FD2  2FD7               	goto	u5540
  8163  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  8164  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  8165  0FD5  162A               	bsf	_PIRLED,4
  8166  0FD6  2FDA               	goto	l4732
  8167  0FD7                     u5540:	
  8168  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  8169  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  8170  0FD9  122A               	bcf	_PIRLED,4
  8171  0FDA                     l4732:	
  8172                           
  8173                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  8174  0FDA  3000               	movlw	0
  8175  0FDB  1A2A               	btfsc	_PIRLED,4
  8176  0FDC  3001               	movlw	1
  8177  0FDD  00D0               	movwf	setLED@command
  8178  0FDE  3002               	movlw	2
  8179  0FDF  158A  26C4         	fcall	_setLED
  8180                           
  8181                           ;LED_B1.c: 287: } else {
  8182  0FE1  0008               	return
  8183  0FE2                     l4734:	
  8184                           
  8185                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8186  0FE2  1003               	clrc
  8187  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  8188  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  8189  0FE5  1E2A               	btfss	_PIRLED,4
  8190  0FE6  1403               	setc
  8191  0FE7  1C03               	btfss	3,0
  8192  0FE8  2FED               	goto	u5560
  8193  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  8194  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  8195  0FEB  162A               	bsf	_PIRLED,4
  8196  0FEC  2FF0               	goto	l4736
  8197  0FED                     u5560:	
  8198  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  8199  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  8200  0FEF  122A               	bcf	_PIRLED,4
  8201  0FF0                     l4736:	
  8202                           
  8203                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8204  0FF0  3000               	movlw	0
  8205  0FF1  1A2A               	btfsc	_PIRLED,4
  8206  0FF2  3001               	movlw	1
  8207  0FF3  00D0               	movwf	setLED@command
  8208  0FF4  3001               	movlw	1
  8209  0FF5  158A  26C4  158A   	fcall	_setLED
  8210                           
  8211                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8212  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  8213  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  8214  0FFA  082B               	movf	_PIRLED+1,w
  8215  0FFB  0653               	xorwf	setPIRLED_Main@count,w
  8216  0FFC  1D03               	skipz
  8217  0FFD  0008               	return
  8218                           
  8219                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8220  0FFE  01AB               	clrf	_PIRLED+1
  8221  0FFF  0008               	return
  8222  1000                     __end_of_setPIRLED_Main:	
  8223                           
  8224                           	psect	text50
  8225  0A6A                     __ptext50:	
  8226 ;; *************** function _LED_Initialization *****************
  8227 ;; Defined at:
  8228 ;;		line 31 in file "../src/LED_B1.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;		None               void
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8242 ;;      Params:         0       0       0       0
  8243 ;;      Locals:         0       0       0       0
  8244 ;;      Temps:          0       0       0       0
  8245 ;;      Totals:         0       0       0       0
  8246 ;;Total ram usage:        0 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    5
  8249 ;; This function calls:
  8250 ;;		_setLED_Initialization
  8251 ;; This function is called by:
  8252 ;;		_main
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _LED_Initialization
  8258  0A6A                     _LED_Initialization:	
  8259                           
  8260                           ;LED_B1.c: 33: setLED_Initialization(1);
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8264  0A6A  3001               	movlw	1
  8265  0A6B  158A  232D  158A   	fcall	_setLED_Initialization
  8266                           
  8267                           ;LED_B1.c: 36: setLED_Initialization(2);
  8268  0A6E  3002               	movlw	2
  8269  0A6F  158A  232D         	fcall	_setLED_Initialization
  8270  0A71  0008               	return
  8271  0A72                     __end_of_LED_Initialization:	
  8272                           
  8273                           	psect	text51
  8274  0B2D                     __ptext51:	
  8275 ;; *************** function _setLED_Initialization *****************
  8276 ;; Defined at:
  8277 ;;		line 74 in file "../src/LED_B1.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  led             1    wreg     unsigned char 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  led             1    2[BANK0 ] unsigned char 
  8282 ;; Return value:  Size  Location     Type
  8283 ;;		None               void
  8284 ;; Registers used:
  8285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8291 ;;      Params:         0       0       0       0
  8292 ;;      Locals:         0       1       0       0
  8293 ;;      Temps:          0       0       0       0
  8294 ;;      Totals:         0       1       0       0
  8295 ;;Total ram usage:        1 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    4
  8298 ;; This function calls:
  8299 ;;		_LedPointSelect
  8300 ;;		_setLED
  8301 ;; This function is called by:
  8302 ;;		_LED_Initialization
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           
  8307                           ;psect for function _setLED_Initialization
  8308  0B2D                     _setLED_Initialization:	
  8309                           
  8310                           ;incstack = 0
  8311                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8312                           ;setLED_Initialization@led stored from wreg
  8313  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  8314  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  8315  0B2F  00D2               	movwf	setLED_Initialization@led
  8316                           
  8317                           ;LED_B1.c: 75: LedPointSelect(led);
  8318  0B30  0852               	movf	setLED_Initialization@led,w
  8319  0B31  158A  231B  158A   	fcall	_LedPointSelect
  8320                           
  8321                           ;LED_B1.c: 76: LED->Enable = 1;
  8322  0B34  0876               	movf	_LED,w
  8323  0B35  0084               	movwf	4
  8324  0B36  1383               	bcf	3,7	;select IRP bank0
  8325  0B37  1400               	bsf	0,0
  8326                           
  8327                           ;LED_B1.c: 77: setLED(led, 0);
  8328  0B38  1283               	bcf	3,5	;RP0=0, select bank0
  8329  0B39  1303               	bcf	3,6	;RP1=0, select bank0
  8330  0B3A  01D0               	clrf	setLED@command
  8331  0B3B  0852               	movf	setLED_Initialization@led,w
  8332  0B3C  158A  26C4         	fcall	_setLED
  8333  0B3E  0008               	return
  8334  0B3F                     __end_of_setLED_Initialization:	
  8335                           
  8336                           	psect	text52
  8337  0548                     __ptext52:	
  8338 ;; *************** function _Exception_Main *****************
  8339 ;; Defined at:
  8340 ;;		line 499 in file "../src/Main_B1.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;		None
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;  i               2   12[BANK0 ] int 
  8345 ;;  i               2   10[BANK0 ] int 
  8346 ;;  error           1   14[BANK0 ] unsigned char 
  8347 ;;  status          1    9[BANK0 ] unsigned char 
  8348 ;;  count           1    8[BANK0 ] unsigned char 
  8349 ;;  lights          1    7[BANK0 ] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8359 ;;      Params:         0       0       0       0
  8360 ;;      Locals:         0       8       0       0
  8361 ;;      Temps:          0       1       0       0
  8362 ;;      Totals:         0       9       0       0
  8363 ;;Total ram usage:        9 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    5
  8366 ;; This function calls:
  8367 ;;		_getAll_Lights_Line
  8368 ;;		_getLights_Status
  8369 ;;		_getMain_All_Error_Status
  8370 ;;		_getMain_All_LightsStatus
  8371 ;;		_setLED
  8372 ;;		_setLights_SwOff
  8373 ;;		_setLights_SwOn
  8374 ;; This function is called by:
  8375 ;;		_main
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           
  8380                           ;psect for function _Exception_Main
  8381  0548                     _Exception_Main:	
  8382                           
  8383                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8387  0548  3000               	movlw	0
  8388  0549  158A  2506  118A   	fcall	_getMain_All_Error_Status
  8389  054C  1283               	bcf	3,5	;RP0=0, select bank0
  8390  054D  1303               	bcf	3,6	;RP1=0, select bank0
  8391  054E  00D6               	movwf	??_Exception_Main
  8392  054F  0856               	movf	??_Exception_Main,w
  8393  0550  00DE               	movwf	Exception_Main@error
  8394                           
  8395                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8396  0551  01D7               	clrf	Exception_Main@lights
  8397  0552  01D8               	clrf	Exception_Main@count
  8398  0553  0AD8               	incf	Exception_Main@count,f
  8399                           
  8400                           ;Main_B1.c: 502: char status = 0;
  8401  0554  01D9               	clrf	Exception_Main@status
  8402                           
  8403                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8404  0555  1DA7               	btfss	_myMain+2,3
  8405  0556  2D63               	goto	l5434
  8406                           
  8407                           ;Main_B1.c: 505: if (error == 0) {
  8408  0557  08DE               	movf	Exception_Main@error,f
  8409  0558  1D03               	skipz
  8410  0559  0008               	return
  8411                           
  8412                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8413  055A  11A7               	bcf	_myMain+2,3
  8414                           
  8415                           ;Main_B1.c: 511: setLED(error, 110);
  8416  055B  306E               	movlw	110
  8417  055C  00D6               	movwf	??_Exception_Main
  8418  055D  0856               	movf	??_Exception_Main,w
  8419  055E  00D0               	movwf	setLED@command
  8420  055F  085E               	movf	Exception_Main@error,w
  8421  0560  158A  26C4         	fcall	_setLED
  8422                           
  8423                           ;Main_B1.c: 522: }
  8424                           ;Main_B1.c: 523: } else {
  8425  0562  0008               	return
  8426  0563                     l5434:	
  8427                           
  8428                           ;Main_B1.c: 524: if (error != 0) {
  8429  0563  1283               	bcf	3,5	;RP0=0, select bank0
  8430  0564  1303               	bcf	3,6	;RP1=0, select bank0
  8431  0565  085E               	movf	Exception_Main@error,w
  8432  0566  1903               	btfsc	3,2
  8433  0567  0008               	return
  8434                           
  8435                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8436  0568  15A7               	bsf	_myMain+2,3
  8437                           
  8438                           ;Main_B1.c: 529: setLED(error, 111);
  8439  0569  306F               	movlw	111
  8440  056A  00D6               	movwf	??_Exception_Main
  8441  056B  0856               	movf	??_Exception_Main,w
  8442  056C  00D0               	movwf	setLED@command
  8443  056D  085E               	movf	Exception_Main@error,w
  8444  056E  158A  26C4  118A   	fcall	_setLED
  8445                           
  8446                           ;Main_B1.c: 591: switch (error) {
  8447  0571  2DFB               	goto	l5470
  8448  0572                     l5440:	
  8449                           ;Main_B1.c: 592: case 1:
  8450                           
  8451                           
  8452                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8453  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8454  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8455  0574  01DA               	clrf	Exception_Main@i
  8456  0575  01DB               	clrf	Exception_Main@i+1
  8457  0576                     l5448:	
  8458  0576  085B               	movf	Exception_Main@i+1,w
  8459  0577  3A80               	xorlw	128
  8460  0578  00D6               	movwf	??_Exception_Main
  8461  0579  3080               	movlw	128
  8462  057A  0256               	subwf	??_Exception_Main,w
  8463  057B  1D03               	skipz
  8464  057C  2D7F               	goto	u7135
  8465  057D  0858               	movf	Exception_Main@count,w
  8466  057E  025A               	subwf	Exception_Main@i,w
  8467  057F                     u7135:	
  8468  057F  1803               	btfsc	3,0
  8469  0580  2DA2               	goto	u7130
  8470                           
  8471                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8472  0581  1283               	bcf	3,5	;RP0=0, select bank0
  8473  0582  1303               	bcf	3,6	;RP1=0, select bank0
  8474  0583  085A               	movf	Exception_Main@i,w
  8475  0584  3E01               	addlw	1
  8476  0585  158A  22F9  118A   	fcall	_getLights_Status
  8477  0588  3A01               	xorlw	1
  8478  0589  1D03               	skipz
  8479  058A  2D99               	goto	l5446
  8480                           
  8481                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8482  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8483  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8484  058D  085A               	movf	Exception_Main@i,w
  8485  058E  3E01               	addlw	1
  8486  058F  158A  248C  118A   	fcall	_setLights_SwOn
  8487                           
  8488                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8489  0592  1283               	bcf	3,5	;RP0=0, select bank0
  8490  0593  1303               	bcf	3,6	;RP1=0, select bank0
  8491  0594  085A               	movf	Exception_Main@i,w
  8492  0595  3E01               	addlw	1
  8493  0596  158A  23C7  118A   	fcall	_setLights_SwOff
  8494  0599                     l5446:	
  8495  0599  3001               	movlw	1
  8496  059A  1283               	bcf	3,5	;RP0=0, select bank0
  8497  059B  1303               	bcf	3,6	;RP1=0, select bank0
  8498  059C  07DA               	addwf	Exception_Main@i,f
  8499  059D  1803               	skipnc
  8500  059E  0ADB               	incf	Exception_Main@i+1,f
  8501  059F  3000               	movlw	0
  8502  05A0  07DB               	addwf	Exception_Main@i+1,f
  8503  05A1  2D76               	goto	l5448
  8504  05A2                     u7130:	
  8505  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  8506  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  8507  05A4  0008               	return
  8508  05A5                     l5450:	
  8509                           ;Main_B1.c: 601: case 2:
  8510                           
  8511                           ;Main_B1.c: 598: }
  8512                           ;Main_B1.c: 599: }
  8513                           ;Main_B1.c: 600: break;
  8514                           
  8515                           
  8516                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8517  05A5  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  8518                           
  8519                           ;Main_B1.c: 604: }
  8520                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8521                           
  8522                           ;Main_B1.c: 603: ;;
  8523  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  8524  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  8525  05AA  01DC               	clrf	Exception_Main@i_2140
  8526  05AB  01DD               	clrf	Exception_Main@i_2140+1
  8527  05AC                     l5460:	
  8528  05AC  085D               	movf	Exception_Main@i_2140+1,w
  8529  05AD  3A80               	xorlw	128
  8530  05AE  00D6               	movwf	??_Exception_Main
  8531  05AF  3080               	movlw	128
  8532  05B0  0256               	subwf	??_Exception_Main,w
  8533  05B1  1D03               	skipz
  8534  05B2  2DB5               	goto	u7155
  8535  05B3  0858               	movf	Exception_Main@count,w
  8536  05B4  025C               	subwf	Exception_Main@i_2140,w
  8537  05B5                     u7155:	
  8538  05B5  1803               	btfsc	3,0
  8539  05B6  2DD8               	goto	u7150
  8540                           
  8541                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8542  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  8543  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  8544  05B9  085C               	movf	Exception_Main@i_2140,w
  8545  05BA  3E01               	addlw	1
  8546  05BB  158A  22F9  118A   	fcall	_getLights_Status
  8547  05BE  3A01               	xorlw	1
  8548  05BF  1D03               	skipz
  8549  05C0  2DCF               	goto	l5458
  8550                           
  8551                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8552  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  8553  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  8554  05C3  085C               	movf	Exception_Main@i_2140,w
  8555  05C4  3E01               	addlw	1
  8556  05C5  158A  248C  118A   	fcall	_setLights_SwOn
  8557                           
  8558                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8559  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  8560  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  8561  05CA  085C               	movf	Exception_Main@i_2140,w
  8562  05CB  3E01               	addlw	1
  8563  05CC  158A  23C7  118A   	fcall	_setLights_SwOff
  8564  05CF                     l5458:	
  8565  05CF  3001               	movlw	1
  8566  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  8567  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  8568  05D2  07DC               	addwf	Exception_Main@i_2140,f
  8569  05D3  1803               	skipnc
  8570  05D4  0ADD               	incf	Exception_Main@i_2140+1,f
  8571  05D5  3000               	movlw	0
  8572  05D6  07DD               	addwf	Exception_Main@i_2140+1,f
  8573  05D7  2DAC               	goto	l5460
  8574  05D8                     u7150:	
  8575  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  8576  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  8577  05DA  0008               	return
  8578  05DB                     l5462:	
  8579                           ;Main_B1.c: 613: case 3:
  8580                           
  8581                           ;Main_B1.c: 610: }
  8582                           ;Main_B1.c: 611: }
  8583                           ;Main_B1.c: 612: break;
  8584                           
  8585                           
  8586                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8587  05DB  158A  228A  118A   	fcall	_getAll_Lights_Line
  8588  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  8589  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  8590  05E0  00D6               	movwf	??_Exception_Main
  8591  05E1  0856               	movf	??_Exception_Main,w
  8592  05E2  00D9               	movwf	Exception_Main@status
  8593                           
  8594                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8595  05E3  0859               	movf	Exception_Main@status,w
  8596  05E4  158A  22F9  118A   	fcall	_getLights_Status
  8597  05E7  3A01               	xorlw	1
  8598  05E8  1903               	btfsc	3,2
  8599  05E9  2DED               	goto	l5466
  8600  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  8601  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  8602  05EC  0008               	return
  8603  05ED                     l5466:	
  8604                           
  8605                           ;Main_B1.c: 617: setLights_SwOn(status);
  8606  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  8607  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  8608  05EF  0859               	movf	Exception_Main@status,w
  8609  05F0  158A  248C  118A   	fcall	_setLights_SwOn
  8610                           
  8611                           ;Main_B1.c: 618: setLights_SwOff(status);
  8612  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  8613  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  8614  05F5  0859               	movf	Exception_Main@status,w
  8615  05F6  158A  23C7         	fcall	_setLights_SwOff
  8616  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  8617  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  8618  05FA  0008               	return
  8619  05FB                     l5470:	
  8620                           ;Main_B1.c: 623: }
  8621                           
  8622                           ;Main_B1.c: 620: }
  8623                           ;Main_B1.c: 621: ;;
  8624                           ;Main_B1.c: 622: break;
  8625                           
  8626  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  8627  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  8628  05FD  085E               	movf	Exception_Main@error,w
  8629                           
  8630                           ; Switch size 1, requested type "space"
  8631                           ; Number of cases is 3, Range of values is 1 to 3
  8632                           ; switch strategies available:
  8633                           ; Name         Instructions Cycles
  8634                           ; simple_byte           10     6 (average)
  8635                           ; direct_byte           16    10 (fixed)
  8636                           ; jumptable            263     9 (fixed)
  8637                           ;	Chosen strategy is simple_byte
  8638  05FE  3A01               	xorlw	1	; case 1
  8639  05FF  1903               	skipnz
  8640  0600  2D72               	goto	l5440
  8641  0601  3A03               	xorlw	3	; case 2
  8642  0602  1903               	skipnz
  8643  0603  2DA5               	goto	l5450
  8644  0604  3A01               	xorlw	1	; case 3
  8645  0605  1903               	skipnz
  8646  0606  2DDB               	goto	l5462
  8647  0607  2E09               	goto	l621
  8648  0608  0008               	return
  8649  0609                     l621:	
  8650  0609  0008               	return
  8651  060A                     __end_of_Exception_Main:	
  8652                           
  8653                           	psect	text53
  8654  0C8C                     __ptext53:	
  8655 ;; *************** function _setLights_SwOn *****************
  8656 ;; Defined at:
  8657 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  sw              1    wreg     unsigned char 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  sw              1    3[BANK0 ] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;		None               void
  8664 ;; Registers used:
  8665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8671 ;;      Params:         0       0       0       0
  8672 ;;      Locals:         0       1       0       0
  8673 ;;      Temps:          0       0       0       0
  8674 ;;      Totals:         0       1       0       0
  8675 ;;Total ram usage:        1 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    4
  8678 ;; This function calls:
  8679 ;;		_LightsPointSelect
  8680 ;;		_getLights_Status
  8681 ;;		_setLights_Trigger
  8682 ;; This function is called by:
  8683 ;;		_Exception_Main
  8684 ;;		_PIR_Main
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _setLights_SwOn
  8690  0C8C                     _setLights_SwOn:	
  8691                           
  8692                           ;incstack = 0
  8693                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8694                           ;setLights_SwOn@sw stored from wreg
  8695  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  8696  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  8697  0C8E  00D3               	movwf	setLights_SwOn@sw
  8698                           
  8699                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8700  0C8F  0853               	movf	setLights_SwOn@sw,w
  8701  0C90  158A  2293  158A   	fcall	_LightsPointSelect
  8702                           
  8703                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8704  0C93  0A78               	incf	_Lights,w
  8705  0C94  0084               	movwf	4
  8706  0C95  1383               	bcf	3,7	;select IRP bank0
  8707  0C96  1500               	bsf	0,2
  8708                           
  8709                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8710  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  8711  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  8712  0C99  0853               	movf	setLights_SwOn@sw,w
  8713  0C9A  158A  22F9  158A   	fcall	_getLights_Status
  8714  0C9D  3800               	iorlw	0
  8715  0C9E  1D03               	skipz
  8716  0C9F  2CAC               	goto	l4752
  8717                           
  8718                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8719  0CA0  0A78               	incf	_Lights,w
  8720  0CA1  0084               	movwf	4
  8721  0CA2  1383               	bcf	3,7	;select IRP bank0
  8722  0CA3  1580               	bsf	0,3
  8723                           
  8724                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8725  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  8726  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  8727  0CA6  01D0               	clrf	setLights_Trigger@command
  8728  0CA7  0AD0               	incf	setLights_Trigger@command,f
  8729  0CA8  0853               	movf	setLights_SwOn@sw,w
  8730  0CA9  158A  2415         	fcall	_setLights_Trigger
  8731                           
  8732                           ;TriacRelay_B1.c: 418: } else {
  8733  0CAB  0008               	return
  8734  0CAC                     l4752:	
  8735                           
  8736                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8737  0CAC  0A78               	incf	_Lights,w
  8738  0CAD  0084               	movwf	4
  8739  0CAE  1383               	bcf	3,7	;select IRP bank0
  8740  0CAF  1180               	bcf	0,3
  8741  0CB0  0008               	return
  8742  0CB1                     __end_of_setLights_SwOn:	
  8743                           
  8744                           	psect	text54
  8745  0AF9                     __ptext54:	
  8746 ;; *************** function _getLights_Status *****************
  8747 ;; Defined at:
  8748 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  lights          1    wreg     unsigned char 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  lights          1    0[BANK0 ] unsigned char 
  8753 ;;  status          1    1[BANK0 ] unsigned char 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;                  1    wreg      unsigned char 
  8756 ;; Registers used:
  8757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8763 ;;      Params:         0       0       0       0
  8764 ;;      Locals:         0       2       0       0
  8765 ;;      Temps:          0       0       0       0
  8766 ;;      Totals:         0       2       0       0
  8767 ;;Total ram usage:        2 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    3
  8770 ;; This function calls:
  8771 ;;		_LightsPointSelect
  8772 ;; This function is called by:
  8773 ;;		_Exception_Main
  8774 ;;		_PIR_Main
  8775 ;;		_setLights_SwOn
  8776 ;;		_setLights_ErrorClose
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           
  8781                           ;psect for function _getLights_Status
  8782  0AF9                     _getLights_Status:	
  8783                           
  8784                           ;incstack = 0
  8785                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8786                           ;getLights_Status@lights stored from wreg
  8787  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  8788  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  8789  0AFB  00D0               	movwf	getLights_Status@lights
  8790                           
  8791                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8792  0AFC  0850               	movf	getLights_Status@lights,w
  8793  0AFD  158A  2293         	fcall	_LightsPointSelect
  8794                           
  8795                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8796  0AFF  0878               	movf	_Lights,w
  8797  0B00  0084               	movwf	4
  8798  0B01  3000               	movlw	0
  8799  0B02  1383               	bcf	3,7	;select IRP bank0
  8800  0B03  1900               	btfsc	0,2
  8801  0B04  3001               	movlw	1
  8802  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  8803  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  8804  0B07  00D1               	movwf	getLights_Status@status
  8805                           
  8806                           ;TriacRelay_B1.c: 274: return status;
  8807  0B08  0851               	movf	getLights_Status@status,w
  8808  0B09  0008               	return
  8809  0B0A                     __end_of_getLights_Status:	
  8810                           
  8811                           	psect	text55
  8812  0BC7                     __ptext55:	
  8813 ;; *************** function _setLights_SwOff *****************
  8814 ;; Defined at:
  8815 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  sw              1    wreg     unsigned char 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  sw              1    3[BANK0 ] unsigned char 
  8820 ;; Return value:  Size  Location     Type
  8821 ;;		None               void
  8822 ;; Registers used:
  8823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8829 ;;      Params:         0       0       0       0
  8830 ;;      Locals:         0       1       0       0
  8831 ;;      Temps:          0       0       0       0
  8832 ;;      Totals:         0       1       0       0
  8833 ;;Total ram usage:        1 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    4
  8836 ;; This function calls:
  8837 ;;		_LightsPointSelect
  8838 ;;		_setLights_Trigger
  8839 ;; This function is called by:
  8840 ;;		_Exception_Main
  8841 ;;		_PIR_Main
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           
  8846                           ;psect for function _setLights_SwOff
  8847  0BC7                     _setLights_SwOff:	
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8851                           ;setLights_SwOff@sw stored from wreg
  8852  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  8853  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  8854  0BC9  00D3               	movwf	setLights_SwOff@sw
  8855                           
  8856                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8857  0BCA  0853               	movf	setLights_SwOff@sw,w
  8858  0BCB  158A  2293  158A   	fcall	_LightsPointSelect
  8859                           
  8860                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8861  0BCE  0A78               	incf	_Lights,w
  8862  0BCF  0084               	movwf	4
  8863  0BD0  1383               	bcf	3,7	;select IRP bank0
  8864  0BD1  1D00               	btfss	0,2
  8865  0BD2  0008               	return
  8866                           
  8867                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8868  0BD3  0A78               	incf	_Lights,w
  8869  0BD4  0084               	movwf	4
  8870  0BD5  1100               	bcf	0,2
  8871                           
  8872                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8873  0BD6  0A78               	incf	_Lights,w
  8874  0BD7  0084               	movwf	4
  8875  0BD8  1980               	btfsc	0,3
  8876  0BD9  0008               	return
  8877                           
  8878                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8879  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  8880  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  8881  0BDC  01D0               	clrf	setLights_Trigger@command
  8882  0BDD  0853               	movf	setLights_SwOff@sw,w
  8883  0BDE  158A  2415         	fcall	_setLights_Trigger
  8884  0BE0  0008               	return
  8885  0BE1                     __end_of_setLights_SwOff:	
  8886                           
  8887                           	psect	text56
  8888  0C15                     __ptext56:	
  8889 ;; *************** function _setLights_Trigger *****************
  8890 ;; Defined at:
  8891 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  lights          1    wreg     unsigned char 
  8894 ;;  command         1    0[BANK0 ] unsigned char 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;  lights          1    2[BANK0 ] unsigned char 
  8897 ;; Return value:  Size  Location     Type
  8898 ;;		None               void
  8899 ;; Registers used:
  8900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8906 ;;      Params:         0       1       0       0
  8907 ;;      Locals:         0       1       0       0
  8908 ;;      Temps:          0       1       0       0
  8909 ;;      Totals:         0       3       0       0
  8910 ;;Total ram usage:        3 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    3
  8913 ;; This function calls:
  8914 ;;		_LightsPointSelect
  8915 ;; This function is called by:
  8916 ;;		_setLights_SwOn
  8917 ;;		_setLights_SwOff
  8918 ;;		_setLights_ErrorClose
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _setLights_Trigger
  8924  0C15                     _setLights_Trigger:	
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928                           ;setLights_Trigger@lights stored from wreg
  8929  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  8930  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  8931  0C17  00D2               	movwf	setLights_Trigger@lights
  8932                           
  8933                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8934  0C18  0852               	movf	setLights_Trigger@lights,w
  8935  0C19  158A  2293         	fcall	_LightsPointSelect
  8936                           
  8937                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8938  0C1B  0878               	movf	_Lights,w
  8939  0C1C  0084               	movwf	4
  8940  0C1D  1383               	bcf	3,7	;select IRP bank0
  8941  0C1E  1580               	bsf	0,3
  8942                           
  8943                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8944  0C1F  1283               	bcf	3,5	;RP0=0, select bank0
  8945  0C20  1303               	bcf	3,6	;RP1=0, select bank0
  8946  0C21  0850               	movf	setLights_Trigger@command,w
  8947  0C22  3A01               	xorlw	1
  8948  0C23  3000               	movlw	0
  8949  0C24  1903               	skipnz
  8950  0C25  3001               	movlw	1
  8951  0C26  00D1               	movwf	??_setLights_Trigger
  8952  0C27  0878               	movf	_Lights,w
  8953  0C28  0084               	movwf	4
  8954  0C29  0ED1               	swapf	??_setLights_Trigger,f
  8955  0C2A  0800               	movf	0,w
  8956  0C2B  0651               	xorwf	??_setLights_Trigger,w
  8957  0C2C  39EF               	andlw	-17
  8958  0C2D  0651               	xorwf	??_setLights_Trigger,w
  8959  0C2E  0080               	movwf	0
  8960  0C2F  0008               	return
  8961  0C30                     __end_of_setLights_Trigger:	
  8962                           
  8963                           	psect	text57
  8964  0A93                     __ptext57:	
  8965 ;; *************** function _LightsPointSelect *****************
  8966 ;; Defined at:
  8967 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  lights          1    wreg     unsigned char 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  lights          1    5[COMMON] unsigned char 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;		None               void
  8974 ;; Registers used:
  8975 ;;		wreg
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8981 ;;      Params:         0       0       0       0
  8982 ;;      Locals:         1       0       0       0
  8983 ;;      Temps:          1       0       0       0
  8984 ;;      Totals:         2       0       0       0
  8985 ;;Total ram usage:        2 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    2
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_setLights_Initialization
  8992 ;;		_setLights_Main
  8993 ;;		_Lights_Control
  8994 ;;		_getLights_Status
  8995 ;;		_setLights_Trigger
  8996 ;;		_setLights_SwOn
  8997 ;;		_setLights_SwOff
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _LightsPointSelect
  9003  0A93                     _LightsPointSelect:	
  9004                           
  9005                           ;incstack = 0
  9006                           ; Regs used in _LightsPointSelect: [wreg]
  9007                           ;LightsPointSelect@lights stored from wreg
  9008  0A93  00F5               	movwf	LightsPointSelect@lights
  9009                           
  9010                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9011  0A94  0875               	movf	LightsPointSelect@lights,w
  9012  0A95  3A01               	xorlw	1
  9013  0A96  1D03               	skipz
  9014  0A97  0008               	return
  9015                           
  9016                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9017  0A98  3043               	movlw	_Lights1& (0+255)
  9018  0A99  00F4               	movwf	??_LightsPointSelect
  9019  0A9A  0874               	movf	??_LightsPointSelect,w
  9020  0A9B  00F8               	movwf	_Lights
  9021  0A9C  0008               	return
  9022  0A9D                     __end_of_LightsPointSelect:	
  9023                           
  9024                           	psect	text58
  9025  0EC4                     __ptext58:	
  9026 ;; *************** function _setLED *****************
  9027 ;; Defined at:
  9028 ;;		line 81 in file "../src/LED_B1.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  led             1    wreg     unsigned char 
  9031 ;;  command         1    0[BANK0 ] unsigned char 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;  led             1    1[BANK0 ] unsigned char 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;		None               void
  9036 ;; Registers used:
  9037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9043 ;;      Params:         0       1       0       0
  9044 ;;      Locals:         0       1       0       0
  9045 ;;      Temps:          0       0       0       0
  9046 ;;      Totals:         0       2       0       0
  9047 ;;Total ram usage:        2 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    3
  9050 ;; This function calls:
  9051 ;;		_LedPointSelect
  9052 ;; This function is called by:
  9053 ;;		_setLED_Initialization
  9054 ;;		_setPIRLED_Main
  9055 ;;		_Exception_Main
  9056 ;;		_PIR_Main
  9057 ;;		_setLights
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           
  9062                           ;psect for function _setLED
  9063  0EC4                     _setLED:	
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9067                           ;setLED@led stored from wreg
  9068  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  9069  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  9070  0EC6  00D1               	movwf	setLED@led
  9071                           
  9072                           ;LED_B1.c: 82: LedPointSelect(led);
  9073  0EC7  0851               	movf	setLED@led,w
  9074  0EC8  158A  231B  158A   	fcall	_LedPointSelect
  9075                           
  9076                           ;LED_B1.c: 83: if (command == 0) {
  9077  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  9078  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  9079  0ECD  08D0               	movf	setLED@command,f
  9080  0ECE  1D03               	skipz
  9081  0ECF  2ED9               	goto	l4482
  9082                           
  9083                           ;LED_B1.c: 85: if (led == 1) {
  9084  0ED0  0851               	movf	setLED@led,w
  9085  0ED1  3A01               	xorlw	1
  9086  0ED2  1D03               	skipz
  9087  0ED3  2ED5               	goto	l4478
  9088                           
  9089                           ;LED_B1.c: 89: RA6 = 1;
  9090  0ED4  1705               	bsf	5,6	;volatile
  9091  0ED5                     l4478:	
  9092                           
  9093                           ;LED_B1.c: 91: }
  9094                           ;LED_B1.c: 94: if (led == 2) {
  9095  0ED5  0851               	movf	setLED@led,w
  9096  0ED6  3A02               	xorlw	2
  9097  0ED7  1903               	btfsc	3,2
  9098                           
  9099                           ;LED_B1.c: 98: RA7 = 1;
  9100  0ED8  1785               	bsf	5,7	;volatile
  9101  0ED9                     l4482:	
  9102                           
  9103                           ;LED_B1.c: 100: }
  9104                           ;LED_B1.c: 120: }
  9105                           ;LED_B1.c: 121: if (command == 1) {
  9106  0ED9  0850               	movf	setLED@command,w
  9107  0EDA  3A01               	xorlw	1
  9108  0EDB  1D03               	skipz
  9109  0EDC  2EE6               	goto	l4492
  9110                           
  9111                           ;LED_B1.c: 123: if (led == 1) {
  9112  0EDD  0851               	movf	setLED@led,w
  9113  0EDE  3A01               	xorlw	1
  9114  0EDF  1D03               	skipz
  9115  0EE0  2EE2               	goto	l4488
  9116                           
  9117                           ;LED_B1.c: 127: RA6 = 0;
  9118  0EE1  1305               	bcf	5,6	;volatile
  9119  0EE2                     l4488:	
  9120                           
  9121                           ;LED_B1.c: 129: }
  9122                           ;LED_B1.c: 132: if (led == 2) {
  9123  0EE2  0851               	movf	setLED@led,w
  9124  0EE3  3A02               	xorlw	2
  9125  0EE4  1903               	btfsc	3,2
  9126                           
  9127                           ;LED_B1.c: 136: RA7 = 0;
  9128  0EE5  1385               	bcf	5,7	;volatile
  9129  0EE6                     l4492:	
  9130                           
  9131                           ;LED_B1.c: 138: }
  9132                           ;LED_B1.c: 158: }
  9133                           ;LED_B1.c: 159: if (command == 10) {
  9134  0EE6  0850               	movf	setLED@command,w
  9135  0EE7  3A0A               	xorlw	10
  9136  0EE8  1D03               	skipz
  9137  0EE9  2EFD               	goto	l4506
  9138                           
  9139                           ;LED_B1.c: 160: LED->GO = 0;
  9140  0EEA  0876               	movf	_LED,w
  9141  0EEB  0084               	movwf	4
  9142  0EEC  1383               	bcf	3,7	;select IRP bank0
  9143  0EED  1080               	bcf	0,1
  9144                           
  9145                           ;LED_B1.c: 161: LED->Time = 0;
  9146  0EEE  0A76               	incf	_LED,w
  9147  0EEF  0084               	movwf	4
  9148  0EF0  0180               	clrf	0
  9149  0EF1  0A84               	incf	4,f
  9150  0EF2  0180               	clrf	0
  9151                           
  9152                           ;LED_B1.c: 163: if (led == 1) {
  9153  0EF3  0851               	movf	setLED@led,w
  9154  0EF4  3A01               	xorlw	1
  9155  0EF5  1D03               	skipz
  9156  0EF6  2EF9               	goto	l4502
  9157                           
  9158                           ;LED_B1.c: 167: RA6 = 1;
  9159  0EF7  1705               	bsf	5,6	;volatile
  9160                           
  9161                           ;LED_B1.c: 169: }
  9162  0EF8  2EFD               	goto	l4506
  9163  0EF9                     l4502:	
  9164                           
  9165                           ;LED_B1.c: 172: else if (led == 2) {
  9166  0EF9  0851               	movf	setLED@led,w
  9167  0EFA  3A02               	xorlw	2
  9168  0EFB  1903               	btfsc	3,2
  9169                           
  9170                           ;LED_B1.c: 176: RA7 = 1;
  9171  0EFC  1785               	bsf	5,7	;volatile
  9172  0EFD                     l4506:	
  9173                           
  9174                           ;LED_B1.c: 178: }
  9175                           ;LED_B1.c: 198: }
  9176                           ;LED_B1.c: 199: if (command == 11) {
  9177  0EFD  0850               	movf	setLED@command,w
  9178  0EFE  3A0B               	xorlw	11
  9179  0EFF  1D03               	skipz
  9180  0F00  2F05               	goto	l4510
  9181                           
  9182                           ;LED_B1.c: 200: LED->GO = 1;
  9183  0F01  0876               	movf	_LED,w
  9184  0F02  0084               	movwf	4
  9185  0F03  1383               	bcf	3,7	;select IRP bank0
  9186  0F04  1480               	bsf	0,1
  9187  0F05                     l4510:	
  9188                           
  9189                           ;LED_B1.c: 201: }
  9190                           ;LED_B1.c: 205: if (command == 111) {
  9191  0F05  0850               	movf	setLED@command,w
  9192  0F06  3A6F               	xorlw	111
  9193  0F07  1D03               	skipz
  9194  0F08  2F23               	goto	l4536
  9195                           
  9196                           ;LED_B1.c: 206: PIRLED.Count = 0;
  9197  0F09  01AB               	clrf	_PIRLED+1
  9198                           
  9199                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9200  0F0A  01AC               	clrf	_PIRLED+2
  9201  0F0B  01AD               	clrf	_PIRLED+3
  9202                           
  9203                           ;LED_B1.c: 208: PIRLED.status = 0;
  9204  0F0C  122A               	bcf	_PIRLED,4
  9205                           
  9206                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9207  0F0D  142A               	bsf	_PIRLED,0
  9208                           
  9209                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9210  0F0E  10AA               	bcf	_PIRLED,1
  9211                           
  9212                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9213  0F0F  112A               	bcf	_PIRLED,2
  9214                           
  9215                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9216  0F10  11AA               	bcf	_PIRLED,3
  9217                           
  9218                           ;LED_B1.c: 213: if (led == 1) {
  9219  0F11  0851               	movf	setLED@led,w
  9220  0F12  3A01               	xorlw	1
  9221  0F13  1D03               	skipz
  9222  0F14  2F17               	goto	l4528
  9223                           
  9224                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9225  0F15  14AA               	bsf	_PIRLED,1
  9226                           
  9227                           ;LED_B1.c: 215: } else if (led == 2) {
  9228  0F16  0008               	return
  9229  0F17                     l4528:	
  9230  0F17  0851               	movf	setLED@led,w
  9231  0F18  3A02               	xorlw	2
  9232  0F19  1D03               	skipz
  9233  0F1A  2F1D               	goto	l4532
  9234                           
  9235                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9236  0F1B  152A               	bsf	_PIRLED,2
  9237                           
  9238                           ;LED_B1.c: 217: } else if (led == 3) {
  9239  0F1C  0008               	return
  9240  0F1D                     l4532:	
  9241  0F1D  0851               	movf	setLED@led,w
  9242  0F1E  3A03               	xorlw	3
  9243  0F1F  1D03               	skipz
  9244  0F20  0008               	return
  9245                           
  9246                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9247  0F21  15AA               	bsf	_PIRLED,3
  9248                           
  9249                           ;LED_B1.c: 219: }
  9250                           ;LED_B1.c: 220: } else if (command == 110) {
  9251  0F22  0008               	return
  9252  0F23                     l4536:	
  9253  0F23  0850               	movf	setLED@command,w
  9254  0F24  3A6E               	xorlw	110
  9255  0F25  1D03               	skipz
  9256  0F26  0008               	return
  9257                           
  9258                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9259  0F27  102A               	bcf	_PIRLED,0
  9260  0F28  0008               	return
  9261  0F29                     __end_of_setLED:	
  9262                           
  9263                           	psect	text59
  9264  0B1B                     __ptext59:	
  9265 ;; *************** function _LedPointSelect *****************
  9266 ;; Defined at:
  9267 ;;		line 7 in file "../src/LED_B1.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  led             1    wreg     unsigned char 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;  led             1    5[COMMON] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;		None               void
  9274 ;; Registers used:
  9275 ;;		wreg
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9281 ;;      Params:         0       0       0       0
  9282 ;;      Locals:         1       0       0       0
  9283 ;;      Temps:          1       0       0       0
  9284 ;;      Totals:         2       0       0       0
  9285 ;;Total ram usage:        2 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    2
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		_setLED_Initialization
  9292 ;;		_setLED
  9293 ;;		_setLED_Main
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           
  9298                           ;psect for function _LedPointSelect
  9299  0B1B                     _LedPointSelect:	
  9300                           
  9301                           ;incstack = 0
  9302                           ; Regs used in _LedPointSelect: [wreg]
  9303                           ;LedPointSelect@led stored from wreg
  9304  0B1B  00F5               	movwf	LedPointSelect@led
  9305                           
  9306                           ;LED_B1.c: 9: if (led == 1) {
  9307  0B1C  0875               	movf	LedPointSelect@led,w
  9308  0B1D  3A01               	xorlw	1
  9309  0B1E  1D03               	skipz
  9310  0B1F  2B24               	goto	l254
  9311                           
  9312                           ;LED_B1.c: 10: LED = &VarLED1;
  9313  0B20  3048               	movlw	_VarLED1& (0+255)
  9314  0B21  00F4               	movwf	??_LedPointSelect
  9315  0B22  0874               	movf	??_LedPointSelect,w
  9316  0B23  00F6               	movwf	_LED
  9317  0B24                     l254:	
  9318                           
  9319                           ;LED_B1.c: 11: }
  9320                           ;LED_B1.c: 14: if (led == 2) {
  9321  0B24  0875               	movf	LedPointSelect@led,w
  9322  0B25  3A02               	xorlw	2
  9323  0B26  1D03               	skipz
  9324  0B27  0008               	return
  9325                           
  9326                           ;LED_B1.c: 15: LED = &VarLED2;
  9327  0B28  304C               	movlw	_VarLED2& (0+255)
  9328  0B29  00F4               	movwf	??_LedPointSelect
  9329  0B2A  0874               	movf	??_LedPointSelect,w
  9330  0B2B  00F6               	movwf	_LED
  9331  0B2C  0008               	return
  9332  0B2D                     __end_of_LedPointSelect:	
  9333                           
  9334                           	psect	text60
  9335  07F7                     __ptext60:	
  9336 ;; *************** function _getMain_All_LightsStatus *****************
  9337 ;; Defined at:
  9338 ;;		line 373 in file "../src/Main_B1.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;  status          1    4[COMMON] unsigned char 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      unsigned char 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9352 ;;      Params:         0       0       0       0
  9353 ;;      Locals:         1       0       0       0
  9354 ;;      Temps:          0       0       0       0
  9355 ;;      Totals:         1       0       0       0
  9356 ;;Total ram usage:        1 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    2
  9359 ;; This function calls:
  9360 ;;		Nothing
  9361 ;; This function is called by:
  9362 ;;		_Exception_Main
  9363 ;;		_Load_Main
  9364 ;;		_setTemp_Main
  9365 ;;		_Lights_Main
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _getMain_All_LightsStatus
  9371  07F7                     _getMain_All_LightsStatus:	
  9372                           
  9373                           ;Main_B1.c: 374: char status = 0;
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9377  07F7  01F4               	clrf	getMain_All_LightsStatus@status
  9378                           
  9379                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9380  07F8  3000               	movlw	0
  9381  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  9382  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  9383  07FB  1943               	btfsc	_Lights1,2
  9384  07FC  3001               	movlw	1
  9385  07FD  00F4               	movwf	getMain_All_LightsStatus@status
  9386                           
  9387                           ;Main_B1.c: 420: return status;
  9388  07FE  0874               	movf	getMain_All_LightsStatus@status,w
  9389  07FF  0008               	return
  9390  0800                     __end_of_getMain_All_LightsStatus:	
  9391                           
  9392                           	psect	text61
  9393  0D06                     __ptext61:	
  9394 ;; *************** function _getMain_All_Error_Status *****************
  9395 ;; Defined at:
  9396 ;;		line 424 in file "../src/Main_B1.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;  command         1    wreg     unsigned char 
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;  command         1    4[BANK0 ] unsigned char 
  9401 ;;  status          1    5[BANK0 ] unsigned char 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  1    wreg      unsigned char 
  9404 ;; Registers used:
  9405 ;;		wreg, status,2, status,0
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9411 ;;      Params:         0       0       0       0
  9412 ;;      Locals:         0       6       0       0
  9413 ;;      Temps:          1       0       0       0
  9414 ;;      Totals:         1       6       0       0
  9415 ;;Total ram usage:        7 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    2
  9418 ;; This function calls:
  9419 ;;		Nothing
  9420 ;; This function is called by:
  9421 ;;		_Exception_Main
  9422 ;;		_Load_Main
  9423 ;;		_setTemp_Main
  9424 ;;		_PIR_Main
  9425 ;;		_setSYSC_Main
  9426 ;;		_Lights_Main
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _getMain_All_Error_Status
  9432  0D06                     _getMain_All_Error_Status:	
  9433                           
  9434                           ;incstack = 0
  9435                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9436                           ;getMain_All_Error_Status@command stored from wreg
  9437  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  9438  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  9439  0D08  00D4               	movwf	getMain_All_Error_Status@command
  9440                           
  9441                           ;Main_B1.c: 425: char status = 0;
  9442  0D09  01D5               	clrf	getMain_All_Error_Status@status
  9443                           
  9444                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9445  0D0A  08D5               	movf	getMain_All_Error_Status@status,f
  9446  0D0B  1D03               	skipz
  9447  0D0C  2D15               	goto	l3244
  9448  0D0D  0854               	movf	getMain_All_Error_Status@command,w
  9449  0D0E  3A01               	xorlw	1
  9450  0D0F  1903               	skipnz
  9451  0D10  2D15               	goto	l3244
  9452                           
  9453                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9454  0D11  3000               	movlw	0
  9455  0D12  18A0               	btfsc	_SYSC,1
  9456  0D13  3001               	movlw	1
  9457  0D14  00D5               	movwf	getMain_All_Error_Status@status
  9458  0D15                     l3244:	
  9459                           
  9460                           ;Main_B1.c: 430: }
  9461                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9462  0D15  08D5               	movf	getMain_All_Error_Status@status,f
  9463  0D16  1D03               	skipz
  9464  0D17  2D29               	goto	l3254
  9465  0D18  0854               	movf	getMain_All_Error_Status@command,w
  9466  0D19  3A02               	xorlw	2
  9467  0D1A  1903               	skipnz
  9468  0D1B  2D29               	goto	l3254
  9469                           
  9470                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9471  0D1C  18B9               	btfsc	_Temp,1
  9472  0D1D  2D21               	goto	l3252
  9473  0D1E  01D0               	clrf	_getMain_All_Error_Status$2127
  9474  0D1F  01D1               	clrf	_getMain_All_Error_Status$2127+1
  9475  0D20  2D25               	goto	l590
  9476  0D21                     l3252:	
  9477  0D21  3002               	movlw	2
  9478  0D22  00D0               	movwf	_getMain_All_Error_Status$2127
  9479  0D23  3000               	movlw	0
  9480  0D24  00D1               	movwf	_getMain_All_Error_Status$2127+1
  9481  0D25                     l590:	
  9482  0D25  0850               	movf	_getMain_All_Error_Status$2127,w
  9483  0D26  00F4               	movwf	??_getMain_All_Error_Status
  9484  0D27  0874               	movf	??_getMain_All_Error_Status,w
  9485  0D28  00D5               	movwf	getMain_All_Error_Status@status
  9486  0D29                     l3254:	
  9487                           
  9488                           ;Main_B1.c: 438: }
  9489                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9490  0D29  08D5               	movf	getMain_All_Error_Status@status,f
  9491  0D2A  1D03               	skipz
  9492  0D2B  2D42               	goto	l591
  9493  0D2C  0854               	movf	getMain_All_Error_Status@command,w
  9494  0D2D  3A03               	xorlw	3
  9495  0D2E  1903               	skipnz
  9496  0D2F  2D42               	goto	l591
  9497                           
  9498                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9499  0D30  1683               	bsf	3,5	;RP0=1, select bank1
  9500  0D31  1303               	bcf	3,6	;RP1=0, select bank1
  9501  0D32  1ACA               	btfsc	_Load^(0+128),5
  9502  0D33  2D39               	goto	l3262
  9503  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  9504  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  9505  0D36  01D2               	clrf	_getMain_All_Error_Status$2128
  9506  0D37  01D3               	clrf	_getMain_All_Error_Status$2128+1
  9507  0D38  2D3E               	goto	l595
  9508  0D39                     l3262:	
  9509  0D39  3003               	movlw	3
  9510  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  9511  0D3B  00D2               	movwf	_getMain_All_Error_Status$2128
  9512  0D3C  3000               	movlw	0
  9513  0D3D  00D3               	movwf	_getMain_All_Error_Status$2128+1
  9514  0D3E                     l595:	
  9515  0D3E  0852               	movf	_getMain_All_Error_Status$2128,w
  9516  0D3F  00F4               	movwf	??_getMain_All_Error_Status
  9517  0D40  0874               	movf	??_getMain_All_Error_Status,w
  9518  0D41  00D5               	movwf	getMain_All_Error_Status@status
  9519  0D42                     l591:	
  9520                           
  9521                           ;Main_B1.c: 445: }
  9522                           ;Main_B1.c: 455: return status;
  9523  0D42  0855               	movf	getMain_All_Error_Status@status,w
  9524  0D43  0008               	return
  9525  0D44                     __end_of_getMain_All_Error_Status:	
  9526                           
  9527                           	psect	text62
  9528  0A8A                     __ptext62:	
  9529 ;; *************** function _getAll_Lights_Line *****************
  9530 ;; Defined at:
  9531 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  line            1    4[COMMON] unsigned char 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      unsigned char 
  9538 ;; Registers used:
  9539 ;;		wreg, status,2
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9545 ;;      Params:         0       0       0       0
  9546 ;;      Locals:         1       0       0       0
  9547 ;;      Temps:          0       0       0       0
  9548 ;;      Totals:         1       0       0       0
  9549 ;;Total ram usage:        1 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    2
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_Exception_Main
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _getAll_Lights_Line
  9561  0A8A                     _getAll_Lights_Line:	
  9562                           
  9563                           ;TriacRelay_B1.c: 311: char line = 0;
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9567  0A8A  01F4               	clrf	getAll_Lights_Line@line
  9568                           
  9569                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9570  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  9571  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  9572  0A8D  1C44               	btfss	_Lights1+1,0
  9573  0A8E  2A91               	goto	l3520
  9574                           
  9575                           ;TriacRelay_B1.c: 314: line = 1;
  9576  0A8F  01F4               	clrf	getAll_Lights_Line@line
  9577  0A90  0AF4               	incf	getAll_Lights_Line@line,f
  9578  0A91                     l3520:	
  9579                           
  9580                           ;TriacRelay_B1.c: 315: }
  9581                           ;TriacRelay_B1.c: 327: return line;
  9582  0A91  0874               	movf	getAll_Lights_Line@line,w
  9583  0A92  0008               	return
  9584  0A93                     __end_of_getAll_Lights_Line:	
  9585                           
  9586                           	psect	text63
  9587  0AB2                     __ptext63:	
  9588 ;; *************** function _DetectSYSC_Signal *****************
  9589 ;; Defined at:
  9590 ;;		line 50 in file "../src/SYSC_B1.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;		None               void
  9597 ;; Registers used:
  9598 ;;		status,2
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9604 ;;      Params:         0       0       0       0
  9605 ;;      Locals:         0       0       0       0
  9606 ;;      Temps:          0       0       0       0
  9607 ;;      Totals:         0       0       0       0
  9608 ;;Total ram usage:        0 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    2
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_main
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _DetectSYSC_Signal
  9620  0AB2                     _DetectSYSC_Signal:	
  9621                           
  9622                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9626  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  9627  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  9628  0AB4  19A0               	btfsc	_SYSC,3
  9629  0AB5  2ABC               	goto	l1126
  9630                           
  9631                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9632  0AB6  1E85               	btfss	5,5	;volatile
  9633  0AB7  0008               	return
  9634                           
  9635                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9636  0AB8  15A0               	bsf	_SYSC,3
  9637                           
  9638                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9639  0AB9  01A1               	clrf	_SYSC+1
  9640  0ABA  01A2               	clrf	_SYSC+2
  9641                           
  9642                           ;SYSC_B1.c: 55: }
  9643                           ;SYSC_B1.c: 56: } else {
  9644  0ABB  0008               	return
  9645  0ABC                     l1126:	
  9646                           
  9647                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9648  0ABC  1A85               	btfsc	5,5	;volatile
  9649  0ABD  0008               	return
  9650                           
  9651                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9652  0ABE  11A0               	bcf	_SYSC,3
  9653  0ABF  0008               	return
  9654  0AC0                     __end_of_DetectSYSC_Signal:	
  9655                           
  9656                           	psect	text64
  9657  07C3                     __ptext64:	
  9658 ;; *************** function _CDS_Main *****************
  9659 ;; Defined at:
  9660 ;;		line 11 in file "../src/CDS_B1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9674 ;;      Params:         0       0       0       0
  9675 ;;      Locals:         0       0       0       0
  9676 ;;      Temps:          0       3       0       0
  9677 ;;      Totals:         0       3       0       0
  9678 ;;Total ram usage:        3 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    2
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_main
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           
  9689                           ;psect for function _CDS_Main
  9690  07C3                     _CDS_Main:	
  9691                           
  9692                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9693                           
  9694                           ;incstack = 0
  9695                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9696  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  9697  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  9698  07C5  1C2E               	btfss	__CDS,0
  9699  07C6  0008               	return
  9700                           
  9701                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9702  07C7  18AE               	btfsc	__CDS,1
  9703  07C8  2FD6               	goto	l117
  9704                           
  9705                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9706  07C9  19AE               	btfsc	__CDS,3
  9707  07CA  0008               	return
  9708                           
  9709                           ;CDS_B1.c: 16: _CDS.Time++;
  9710  07CB  3001               	movlw	1
  9711  07CC  00D0               	movwf	??_CDS_Main
  9712  07CD  0850               	movf	??_CDS_Main,w
  9713  07CE  07AF               	addwf	__CDS+1,f
  9714                           
  9715                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9716  07CF  3005               	movlw	5
  9717  07D0  022F               	subwf	__CDS+1,w
  9718  07D1  1C03               	skipc
  9719  07D2  0008               	return
  9720                           
  9721                           ;CDS_B1.c: 18: {
  9722                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9723  07D3  01AF               	clrf	__CDS+1
  9724                           
  9725                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9726  07D4  15AE               	bsf	__CDS,3
  9727                           
  9728                           ;CDS_B1.c: 21: }
  9729                           ;CDS_B1.c: 22: }
  9730                           ;CDS_B1.c: 23: } else {
  9731  07D5  0008               	return
  9732  07D6                     l117:	
  9733                           
  9734                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9735  07D6  1CAE               	btfss	__CDS,1
  9736  07D7  0008               	return
  9737                           
  9738                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9739  07D8  10AE               	bcf	__CDS,1
  9740                           
  9741                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9742  07D9  1A2E               	btfsc	__CDS,4
  9743  07DA  2FE1               	goto	l4932
  9744                           
  9745                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9746  07DB  0830               	movf	__CDS+2,w
  9747  07DC  0231               	subwf	__CDS+3,w
  9748  07DD  1C03               	skipc
  9749  07DE  0008               	return
  9750                           
  9751                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9752  07DF  162E               	bsf	__CDS,4
  9753                           
  9754                           ;CDS_B1.c: 29: }
  9755                           ;CDS_B1.c: 30: } else {
  9756  07E0  0008               	return
  9757  07E1                     l4932:	
  9758                           
  9759                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9760  07E1  0830               	movf	__CDS+2,w
  9761  07E2  3E9C               	addlw	156
  9762  07E3  00D0               	movwf	??_CDS_Main
  9763  07E4  30FF               	movlw	255
  9764  07E5  1803               	skipnc
  9765  07E6  3000               	movlw	0
  9766  07E7  00D1               	movwf	??_CDS_Main+1
  9767  07E8  0851               	movf	??_CDS_Main+1,w
  9768  07E9  3A80               	xorlw	128
  9769  07EA  00D2               	movwf	??_CDS_Main+2
  9770  07EB  3080               	movlw	128
  9771  07EC  0252               	subwf	??_CDS_Main+2,w
  9772  07ED  1D03               	skipz
  9773  07EE  2FF1               	goto	u6065
  9774  07EF  0831               	movf	__CDS+3,w
  9775  07F0  0250               	subwf	??_CDS_Main,w
  9776  07F1                     u6065:	
  9777  07F1  1C03               	skipc
  9778  07F2  0008               	return
  9779                           
  9780                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9781  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  9782  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  9783  07F5  122E               	bcf	__CDS,4
  9784  07F6  0008               	return
  9785  07F7                     __end_of_CDS_Main:	
  9786                           
  9787                           	psect	text65
  9788  0A39                     __ptext65:	
  9789 ;; *************** function _CDS_Initialization *****************
  9790 ;; Defined at:
  9791 ;;		line 7 in file "../src/CDS_B1.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;		None
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;		None
  9796 ;; Return value:  Size  Location     Type
  9797 ;;		None               void
  9798 ;; Registers used:
  9799 ;;		None
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9805 ;;      Params:         0       0       0       0
  9806 ;;      Locals:         0       0       0       0
  9807 ;;      Temps:          0       0       0       0
  9808 ;;      Totals:         0       0       0       0
  9809 ;;Total ram usage:        0 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    2
  9812 ;; This function calls:
  9813 ;;		Nothing
  9814 ;; This function is called by:
  9815 ;;		_main
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           
  9820                           ;psect for function _CDS_Initialization
  9821  0A39                     _CDS_Initialization:	
  9822                           
  9823                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9824                           
  9825                           ;incstack = 0
  9826                           ; Regs used in _CDS_Initialization: []
  9827  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  9828  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  9829  0A3B  142E               	bsf	__CDS,0
  9830  0A3C  0008               	return
  9831  0A3D                     __end_of_CDS_Initialization:	
  9832                           
  9833                           	psect	text66
  9834  0B96                     __ptext66:	
  9835 ;; *************** function _ISR *****************
  9836 ;; Defined at:
  9837 ;;		line 116 in file "../src/MCU_B1.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;		None               void
  9844 ;; Registers used:
  9845 ;;		wreg, status,2, status,0, pclath, cstack
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9851 ;;      Params:         0       0       0       0
  9852 ;;      Locals:         0       0       0       0
  9853 ;;      Temps:          4       0       0       0
  9854 ;;      Totals:         4       0       0       0
  9855 ;;Total ram usage:        4 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    1
  9858 ;; This function calls:
  9859 ;;		_TMR1_ISR
  9860 ;; This function is called by:
  9861 ;;		Interrupt level 1
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function _ISR
  9867  0B96                     _ISR:	
  9868                           
  9869                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9870  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  9871  0B97  1303               	bcf	3,6	;RP1=0, select bank1
  9872  0B98  1C0C               	btfss	12,0	;volatile
  9873  0B99  2BA1               	goto	i1l426
  9874  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  9875  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  9876  0B9C  1C0C               	btfss	12,0	;volatile
  9877  0B9D  2BA1               	goto	i1l426
  9878                           
  9879                           ;MCU_B1.c: 126: TMR1_ISR();
  9880  0B9E  158A  2353  158A   	fcall	_TMR1_ISR
  9881  0BA1                     i1l426:	
  9882                           ;MCU_B1.c: 127: }
  9883                           ;MCU_B1.c: 148: return;
  9884                           
  9885  0BA1  0873               	movf	??_ISR+3,w
  9886  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  9887  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  9888  0BA4  00FF               	movwf	127
  9889  0BA5  0872               	movf	??_ISR+2,w
  9890  0BA6  008A               	movwf	10
  9891  0BA7  0871               	movf	??_ISR+1,w
  9892  0BA8  0084               	movwf	4
  9893  0BA9  0E70               	swapf	??_ISR^(0+-128),w
  9894  0BAA  0083               	movwf	3
  9895  0BAB  0EFE               	swapf	126,f
  9896  0BAC  0E7E               	swapf	126,w
  9897  0BAD  0009               	retfie
  9898  0BAE                     __end_of_ISR:	
  9899                           
  9900                           	psect	intentry
  9901  0004                     __pintentry:	
  9902                           ;incstack = 0
  9903                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9904                           
  9905  0004                     interrupt_function:	
  9906  007E                     saved_w	set	btemp
  9907  0004  00FE               	movwf	btemp
  9908  0005  0E03               	swapf	3,w
  9909  0006  00F0               	movwf	??_ISR
  9910  0007  0804               	movf	4,w
  9911  0008  00F1               	movwf	??_ISR+1
  9912  0009  080A               	movf	10,w
  9913  000A  00F2               	movwf	??_ISR+2
  9914  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9915  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9916  000D  087F               	movf	btemp+1,w
  9917  000E  00F3               	movwf	??_ISR+3
  9918  000F  158A  2B96         	ljmp	_ISR
  9919                           
  9920                           	psect	text67
  9921  0B53                     __ptext67:	
  9922 ;; *************** function _TMR1_ISR *****************
  9923 ;; Defined at:
  9924 ;;		line 236 in file "../src/MCU_B1.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;		None               void
  9931 ;; Registers used:
  9932 ;;		wreg, status,2
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9938 ;;      Params:         0       0       0       0
  9939 ;;      Locals:         0       0       0       0
  9940 ;;      Temps:          0       0       0       0
  9941 ;;      Totals:         0       0       0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		_ISR
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function _TMR1_ISR
  9953  0B53                     _TMR1_ISR:	
  9954                           
  9955                           ;MCU_B1.c: 268: Timer1.Count++;
  9956                           
  9957                           ;incstack = 0
  9958                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9959  0B53  3001               	movlw	1
  9960  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  9961  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  9962  0B56  07B3               	addwf	_Timer1+1,f
  9963  0B57  1803               	skipnc
  9964  0B58  0AB4               	incf	_Timer1+2,f
  9965  0B59  3000               	movlw	0
  9966  0B5A  07B4               	addwf	_Timer1+2,f
  9967                           
  9968                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  9969  0B5B  30C8               	movlw	200
  9970  0B5C  0633               	xorwf	_Timer1+1,w
  9971  0B5D  0434               	iorwf	_Timer1+2,w
  9972  0B5E  1D03               	skipz
  9973  0B5F  2B63               	goto	i1l3768
  9974                           
  9975                           ;MCU_B1.c: 270: Timer1.Count = 0;
  9976  0B60  01B3               	clrf	_Timer1+1
  9977  0B61  01B4               	clrf	_Timer1+2
  9978                           
  9979                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  9980  0B62  1432               	bsf	_Timer1,0
  9981  0B63                     i1l3768:	
  9982                           
  9983                           ;MCU_B1.c: 272: }
  9984                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  9985  0B63  30FA               	movlw	250
  9986  0B64  008F               	movwf	15	;volatile
  9987                           
  9988                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  9989  0B65  3038               	movlw	56
  9990  0B66  008E               	movwf	14	;volatile
  9991                           
  9992                           ;MCU_B1.c: 276: TMR1IF = 0;
  9993  0B67  100C               	bcf	12,0	;volatile
  9994  0B68  0008               	return
  9995  0B69                     __end_of_TMR1_ISR:	
  9996  007E                     btemp	set	126	;btemp
  9997  007E                     wtemp	set	126
  9998  007E                     wtemp0	set	126
  9999  0080                     wtemp1	set	128
 10000  0082                     wtemp2	set	130
 10001  0084                     wtemp3	set	132
 10002  0086                     wtemp4	set	134
 10003  0088                     wtemp5	set	136
 10004  007F                     wtemp6	set	127
 10005  007E                     ttemp	set	126
 10006  007E                     ttemp0	set	126
 10007  0081                     ttemp1	set	129
 10008  0084                     ttemp2	set	132
 10009  0087                     ttemp3	set	135
 10010  007F                     ttemp4	set	127
 10011  007E                     ltemp	set	126
 10012  007E                     ltemp0	set	126
 10013  0082                     ltemp1	set	130
 10014  0086                     ltemp2	set	134
 10015  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      71
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setOverTemp_ADV_Restore
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   26731
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     902
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2983
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1569
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         8     8      0    1569
                                              8 BANK0      8     8      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
            _setOverTemp_ADV_Restore
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    3936
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4348
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2899
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2636
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1185
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2292
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2292
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2376
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2376
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4302
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2252
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setOverTemp_ADV_Restore
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      97       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      97      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Mar 12 09:50:49 2015

                        __CFG_CP$ON 0000                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0074                        ___awdiv@sign 0055  
                    setTemp_Main@AD 005E                                  fsr 0004  
               ___wmul@multiplicand 0052                                 l117 07D6  
                               l254 0B24                                 l700 0412  
                               l621 0609                                 l710 03EB  
                               l702 0269                                 l711 03E9  
                               l703 0265                                 l704 025F  
                               l716 0395                                 l590 0D25  
                               l830 06BD                                 l591 0D42  
                               l921 0091                                 l913 0212  
                               l914 008B                                 l595 0D3E  
                               l923 00A4                                 l915 0059  
                               l836 0629                                 _GIE 005F  
                               _RB2 0032                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RA6 002E                                 _RA7 002F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0B96  
                               _PSA 040B                                 _WDT 0035  
                 ??_setLights_SwOff 0076                                 _Cmd 0037  
            getAll_Lights_Line@line 0074                                 fsr0 0004  
                               indf 0000                     __end_of_ADC_Set 0A6A  
         __end_of_LightsPointSelect 0A9D                    _getLights_Status 0AF9  
           __size_of_Lights_Control 0083                                ?_ISR 0070  
                        Load_Main@i 005F                                l1126 0ABC  
                              l1278 0C61                                l5010 0DAC  
                    _Load_Main$2389 005A                                l3252 0D21  
                              l3244 0D15                                l3262 0D39  
                              l3254 0D29                                l5014 0DB5  
                              l5006 0DA3                                l1399 0CBD  
                              l3520 0A91                                l5040 046C  
                              l5018 0DBE                                l5132 0268  
                              l5116 0249                                l5052 048D  
                              l5044 0477                                l5036 0461  
                              l4510 0F05                                l4502 0EF9  
                              l5062 04A6                                l5208 03CB  
                              l5048 0482                                l4506 0EFD  
                              l5154 02CB                                l5410 020C  
                              l3634 0DF9                                l4532 0F1D  
                              l4612 079A                                l4604 0780  
                              l5244 03FF                                l5180 0356  
                              l5148 028F                                l5340 00DE  
                              l3628 0DDE                                l5092 0538  
                              l5084 050C                                l5068 04C2  
                              l5262 0C62                                l5190 0387  
                              l5078 04F0                                l4528 0F17  
                              l4536 0F23                                l5440 0572  
                              l4720 0FBC                                l4608 0787  
                              l5344 00EA                                l5328 00C7  
                              l5504 0F44                                l4482 0ED9  
                              l5450 05A5                                l5434 0563  
                              l4730 0FCE                                l4650 0E7E  
                              l4626 07BE                                l5186 0366  
                              l5346 00EB                                l5290 007B  
                              l5098 0546                                l4492 0EE6  
                              l5460 05AC                                l4732 0FDA  
                              l4724 0FC2                                l4716 0FB6  
                              l4660 0E86                                l4644 0E73  
                              l5372 0170                                l5364 013F  
                              l5356 012B                                l5516 0F67  
                              l4478 0ED5                                l5462 05DB  
                              l5446 0599                                l5470 05FB  
                              l4734 0FE2                                l4662 0E94  
                              l4590 075C                                l5198 03B2  
                              l4814 069F                                l4488 0EE2  
                              l4752 0CAC                                l5448 0576  
                              l4736 0FF0                                l4672 0EB5  
                              l4904 0D72                                l5392 01DC  
                              l5376 01A2                                l4816 06A3  
                              l5466 05ED                                l5458 05CF  
                              l4578 0B8E                                l5378 01B1  
                              l4826 06B9                                l4690 0C46  
                              l4932 07E1                                l4676 0EBD  
                              l4668 0EAA                                l4844 0CFF  
                              l4908 0D7D                                l4780 062B  
                              l4684 0C3D                                l3964 0C0B  
                              l4862 0710                                l4686 0C40  
                              l4786 063C                                l4970 0E3E  
                              l4962 0E2A                                l4876 0CB3  
                              l4788 063F                                l4990 0E62  
                              l4974 0E46                                l4896 0D4E  
                              l4898 0D5C               _myMain_Initialization 0A26  
                      __CFG_WDTE$ON 0000                                u3435 0E05  
                              u2835 0BB9                                _PEIE 005E  
                              u5405 0E95                                u5415 0EA1  
                              u7015 01C1                                u5255 0B4D  
                              u6065 07F1                                u5425 0EAB  
                              u7130 05A2                                u5540 0FD7  
                              u7150 05D8                                u7135 057F  
                              u7055 01F9                                u5560 0FED  
                              u5385 0E89                                u6505 02C9  
                              u7155 05B5                                u6515 0320  
                              u5715 0690                                u5735 06AA  
                              u5840 070C                                u5825 06F8  
                              u5905 0CC5                                u5935 0D51  
                              u6495 028D                                u5695 0678  
                              u5865 072F                                u5955 0D5D  
                              u6595 03AA                                u5965 0D69  
                              u5975 0D73                                u5895 0CBE  
                              u6945 0109                                u6955 0121  
                              u6975 0158                                u6995 0194  
                              __CDS 002E             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0039                                _main 0F29  
                              btemp 007E                     __end_of_WDT_Set 0AEA  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 07F7        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0C15  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0A2A                  ?_setLights_Trigger 0050  
                  ??_setPIRLED_Main 0052                               ?_main 0062  
                   __end_of___awdiv 0EC4                               _ADRES 001E  
                   ___awdiv@divisor 0050                               _T1CON 0010  
                   __end_of___lwdiv 0D84                               i1l426 0BA1  
                   ___awdiv@counter 0054                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0B53  
                             _Light 0077                 ??_setLights_Trigger 0051  
                  __end_of_PIR_Main 0230                    __end_of_TMR1_ISR 0B69  
                  __end_of_TMR1_Set 0ADC                               _getAD 0C30  
    __end_of_setSYSC_Initialization 0A45      getLights_Allow_Condition@allow 0050  
           __end_of_getLight_LoadGO 0A50                    __end_of_WDT_Main 0B1B  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0AA7                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0B3F  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 005D  
                 getPIR_AD@channel2 0058              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 005A                      _setLights_Main 0CD6  
                    _setLights_Line 0AC0                     __initialization 0013  
                    _setLights_SwOn 0C8C                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0C30                        __end_of_main 0F8F  
                  __end_of_Fosc_Set 0A4A      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0548                           ??_ADC_Set 0074  
                            ??_main 0066               PIR_Main@Enable_Switch 005D  
               __end_of_Lights_Main 0C6A          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 07F7                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0052  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0D06  
                            i1l3768 0B63                              _FVRCON 009D  
            getLights_Status@lights 0050                              _PIRLED 002A  
                            _OSCCON 0090                  __size_of_Load_Main 01EA  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _IO_Set 0BE1                Exception_Main@i_2140 005C  
            getLights_Status@status 0051              __end_of_setLights_Main 0D06  
            __end_of_setLights_Line 0ACE              __end_of_setLights_SwOn 0CB1  
      __size_of_SYSC_Initialization 0003            ?_setOverTemp_ADV_Restore 0070  
        __end_of_Mcu_Initialization 0AF9                              _Lights 0078  
                            _Timer1 0032         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 060A  
              Exception_Main@lights 0057                              ___wmul 0CB1  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 0059                              _setLED 0EC4  
                            _myMain 0025                    ___awdiv@quotient 0056  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 005E  
       __end_of_Load_Initialization 0A2D     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 0053  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0A33                      _Lights_Control 06C1  
           __size_of_LedPointSelect 0012                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 005B                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                   ?_setLights_SwOn 0070                       ?_setSYSC_Main 0070  
                   _setLights_SwOff 0BC7          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 0022  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0B0A  
                     __end_of_getAD 0C4C                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0A6A                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0C4C            _setLights_Initialization 0A5C  
              _getMain_Lights_Count 0A9D                           ?_WDT_Main 0070  
                 __end_of_Load_Main 041A          __end_of_set_TimeoutCleared 0A5C  
               ?_LED_Initialization 0070              __end_of_Lights_Control 0744  
                           ??_getAD 0075                 _Temp_Initialization 0A33  
                        ??_CDS_Main 0050                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0009                   __end_of_Temp_Main 0A39  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F29  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 0061                             ?___wmul 0050  
                        ??_PIR_Main 0056                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 007F  
                        _getLoad_AD 0E0B                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0A72  
                           ?_setLED 0050             setLights_Trigger@lights 0052  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0A63  
                        _getTemp_AD 0D84                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0C8C                             _WDT_Set 0ADC  
                     getPIR_AD@VRAD 005F                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 0548             ??_setLoad_AH_AL_Restore 0074  
           __end_of_setLights_SwOff 0BE1      _getLights_Allow_Condition$4230 0051  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0053  
                        getCDS_AD@j 0054                             _Lights1 0043  
                           _VarLED1 0048                             _VarLED2 004C  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0058  
                           ___awdiv 0E67                     __size_of___wmul 0025  
                           ___lwdiv 0D44          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 005C                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0BFB  
                           __ptext2 0A26                             __ptext3 0D84  
                           __ptext4 041A                             __ptext5 0E0B  
                           __ptext6 0C6A                             __ptext7 0C30  
                           __ptext8 0A56                             __ptext9 0B3F  
                        getPIR_AD@i 0060                          getPIR_AD@j 005C  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0A2D             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0B1B  
                   getTemp_AD@ADRES 0053                             clrloop0 0A83  
                 __end_of_setLights 07C3                end_of_initialization 0023  
                     _getCDS_Status 0A7A                ?_SYSC_Initialization 0070  
             _setLED_Initialization 0B2D                   setLights_SwOff@sw 0053  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0A41                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0052             setTemp_Main@DangerValue 005D  
                _Mcu_Initialization 0AEA    __size_of_setOverTemp_ADV_Restore 0019  
              __end_of_my_MainTimer 0C15                __end_of_setSYSC_Main 0E0B  
            __end_of_LedPointSelect 0B2D            Load_Main@ErrorCountValue 005C  
               setPIRLED_Main@count 0053                 ?_Mcu_Initialization 0070  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0055  
                  ??_setLights_SwOn 0076                           _SYSC_Main 0A30  
   getMain_All_Error_Status@command 0054                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070                    ?_setLights_SwOff 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0056  
                    __end_of_IO_Set 0BFB          __end_of_CDS_Initialization 0A3D  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0CD6                   __size_of_PIR_Main 020A  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0F29  
          ??_setSYSC_Initialization 0074                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0230  
                       __end_of_ISR 0BAE          __end_of_PIR_Initialization 0AB2  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0A56  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 06C1                 __size_of_getLoad_AD 005C  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0A56                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                 __size_of_getTemp_AD 0043  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0A36  
                   setLights@lights 0054                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0058                     setLights@status 0052  
               Exception_Main@error 005E                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0800                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0058  
  __end_of_getMain_All_Error_Status 0D44                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 005D                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 0050  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0A93  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 005B                           _getCDS_AD 0C6A  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0B7F  
                         _getPIR_AD 041A         __size_of_LED_Initialization 0008  
                   Exception_Main@i 005A                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0052                      Load_Main@error 0059  
            _setTemp_Initialization 0A25                       _PIR_Main$2862 005E  
                          ?___awdiv 0050               __size_of_my_MainTimer 001A  
                          ?___lwdiv 0050               __size_of_setSYSC_Main 0044  
           _setOverTemp_ADV_Restore 0BAE            setLights_Trigger@command 0050  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0B7F  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0A27  
                    __size_of_getAD 001C                    ___lwdiv@quotient 0055  
                    _setPIRLED_Main 0F8F                            _CDS_Main 07C3  
                       ??_SYSC_Main 0075         __end_of_Temp_Initialization 0A36  
                 interrupt_function 0004                          ?_getCDS_AD 0050  
                    ___wmul@product 0074                            _LED_Main 0A27  
                         _setLights 0744                           clear_ram0 0A82  
  __end_of_setLights_Initialization 0A63                        _my_MainTimer 0BFB  
                        ?_getPIR_AD 0058                        _setSYSC_Main 0DC7  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0060                            _PIR_Main 0026  
                      ??_getLoad_AD 0050                            _TMR1_ISR 0B53  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0A50  
                          _TMR1_Set 0ACE                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0050                            _WDT_Main 0B0A  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 0050  
                    getPIR_AD@VRAD1 005E                __size_of_Lights_Main 001E  
             __size_of_setTemp_Main 00B7                         ??_Load_Main 0057  
            __end_of_setPIRLED_Main 1000      getMain_All_Error_Status@status 0055  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0009  
         ?_getMain_All_LightsStatus 0070                            _Fosc_Set 0A45  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0E67  
                __end_of_getLoad_OK 0A7A   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                          ?_setLights 0052  
                __end_of_getTemp_AD 0DC7              _setSYSC_Initialization 0A41  
                 getLoad_AD@channel 0052                   _DetectSYSC_Signal 0AB2  
                          _SwDetect 0038                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2127 0050       _getMain_All_Error_Status$2128 0052  
               _Load_Initialization 0A2A                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0051           ??_setOverTemp_ADV_Restore 0074  
             ?_getLight_Load_Status 0070                        _setTemp_Main 060A  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0A39               _Lights_Initialization 0A3D  
                 getTemp_AD@channel 0052                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 0050                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0054  
                          __ptext10 0B0A                            __ptext11 0002  
                          __ptext20 0A41                            __ptext12 0A36  
                          __ptext21 0026                            __ptext13 060A  
                          __ptext30 0230                            __ptext22 0A7A  
                          __ptext14 0BAE                            __ptext31 0A9D  
                          __ptext23 0AA7                            __ptext15 0A33  
                          __ptext40 0744                            __ptext32 0A50  
                          __ptext24 0AEA                            __ptext16 0A25  
                          __ptext41 0AC0                            __ptext33 0A4A  
                          __ptext25 0ADC                            __ptext17 0A30  
                          __ptext50 0A6A                            __ptext42 0B7F  
                          __ptext34 0CB1                            __ptext26 0ACE  
                          __ptext18 0DC7                            __ptext51 0B2D  
                          __ptext43 0A72                            __ptext35 0D44  
                          __ptext27 0BE1                            __ptext19 0A2D  
                          __ptext60 07F7                            __ptext52 0548  
                          __ptext44 06C1                            __ptext36 0A2A  
                          __ptext28 0A45                            __ptext61 0D06  
                          __ptext53 0C8C                            __ptext45 0E67  
                          __ptext37 0B69                            __ptext29 0A63  
                          __ptext62 0A8A                            __ptext54 0AF9  
                          __ptext46 0A3D                            __ptext38 0C4C  
                          __ptext63 0AB2                            __ptext55 0BC7  
                          __ptext47 0A5C                            __ptext39 0CD6  
                          __ptext64 07C3                            __ptext56 0C15  
                          __ptext48 0A27                            __ptext65 0A39  
                          __ptext57 0A93                            __ptext49 0F8F  
                          __ptext66 0B96                            __ptext58 0EC4  
                          __ptext67 0B53                            __ptext59 0B1B  
         __size_of_getLights_Status 0011         __end_of_SYSC_Initialization 0A30  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 0051  
                     setLED@command 0050           __end_of_DetectSYSC_Signal 0AC0  
                     __size_of_main 0066            setOverTemp_ADV_Restore@i 0074  
                       ??_getPIR_AD 0059                  _PIR_Initialization 0AA7  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 0062  
                          main@argv 0064   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 005A     __end_of_setOverTemp_ADV_Restore 0BC7  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 005C  
                       ??_setLights 0053             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0A8A  
                   getLoad_AD@ADRES 0055              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 0056                         getLoad_AD@j 0054  
                       getLoad_AD@k 0053             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00C2  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0050  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0A93  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0B3F  
        __end_of_LED_Initialization 0A72               __end_of_getCDS_Status 0A82  
    __end_of_setTemp_Initialization 0A26          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0A4A                   getCDS_AD@channel1 0055  
                 getCDS_AD@channel2 0050   __end_of_getLights_Allow_Condition 0B96  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0B69  
