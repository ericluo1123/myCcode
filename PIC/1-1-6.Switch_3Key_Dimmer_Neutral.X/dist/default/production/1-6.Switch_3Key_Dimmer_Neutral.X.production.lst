

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 10:11:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	dabs	1,0x7E,2
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  0116                     	;# 
   183  0117                     	;# 
   184  011D                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  018E                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0197                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020D                     	;# 
   209  0210                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0298                     	;# 
   230  0298                     	;# 
   231  0299                     	;# 
   232  029A                     	;# 
   233  0394                     	;# 
   234  0395                     	;# 
   235  0396                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  0116                     	;# 
   294  0117                     	;# 
   295  011D                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0197                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020D                     	;# 
   320  0210                     	;# 
   321  0211                     	;# 
   322  0211                     	;# 
   323  0212                     	;# 
   324  0212                     	;# 
   325  0213                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0298                     	;# 
   341  0298                     	;# 
   342  0299                     	;# 
   343  029A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE9                     	;# 
   353  0FEA                     	;# 
   354  0FEB                     	;# 
   355  0FED                     	;# 
   356  0FEE                     	;# 
   357  0FEF                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0008                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  000E                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  0116                     	;# 
   405  0117                     	;# 
   406  011D                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0194                     	;# 
   416  0195                     	;# 
   417  0196                     	;# 
   418  0197                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  0394                     	;# 
   456  0395                     	;# 
   457  0396                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  0116                     	;# 
   516  0117                     	;# 
   517  011D                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  018E                     	;# 
   521  0191                     	;# 
   522  0191                     	;# 
   523  0192                     	;# 
   524  0193                     	;# 
   525  0193                     	;# 
   526  0194                     	;# 
   527  0195                     	;# 
   528  0196                     	;# 
   529  0197                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  020D                     	;# 
   542  0210                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0216                     	;# 
   555  0216                     	;# 
   556  0217                     	;# 
   557  0217                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  0394                     	;# 
   567  0395                     	;# 
   568  0396                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0197                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  0394                     	;# 
   678  0395                     	;# 
   679  0396                     	;# 
   680  0FE4                     	;# 
   681  0FE5                     	;# 
   682  0FE6                     	;# 
   683  0FE7                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEB                     	;# 
   688  0FED                     	;# 
   689  0FEE                     	;# 
   690  0FEF                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0008                     	;# 
   700  0009                     	;# 
   701  000A                     	;# 
   702  000B                     	;# 
   703  000C                     	;# 
   704  000D                     	;# 
   705  000E                     	;# 
   706  0010                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0015                     	;# 
   710  0016                     	;# 
   711  0016                     	;# 
   712  0017                     	;# 
   713  0018                     	;# 
   714  0019                     	;# 
   715  001A                     	;# 
   716  001B                     	;# 
   717  001C                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  010E                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018D                     	;# 
   742  018E                     	;# 
   743  0191                     	;# 
   744  0191                     	;# 
   745  0192                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0197                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020D                     	;# 
   764  0210                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0FE4                     	;# 
   792  0FE5                     	;# 
   793  0FE6                     	;# 
   794  0FE7                     	;# 
   795  0FE8                     	;# 
   796  0FE9                     	;# 
   797  0FEA                     	;# 
   798  0FEB                     	;# 
   799  0FED                     	;# 
   800  0FEE                     	;# 
   801  0FEF                     	;# 
   802  0000                     	;# 
   803  0001                     	;# 
   804  0002                     	;# 
   805  0003                     	;# 
   806  0004                     	;# 
   807  0005                     	;# 
   808  0006                     	;# 
   809  0007                     	;# 
   810  0008                     	;# 
   811  0009                     	;# 
   812  000A                     	;# 
   813  000B                     	;# 
   814  000C                     	;# 
   815  000D                     	;# 
   816  000E                     	;# 
   817  0010                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  0090                     	;# 
   833  0091                     	;# 
   834  0092                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  010C                     	;# 
   846  010D                     	;# 
   847  010E                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  0191                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0193                     	;# 
   858  0193                     	;# 
   859  0194                     	;# 
   860  0195                     	;# 
   861  0196                     	;# 
   862  0197                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  020D                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0298                     	;# 
   896  0298                     	;# 
   897  0299                     	;# 
   898  029A                     	;# 
   899  0394                     	;# 
   900  0395                     	;# 
   901  0396                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE9                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEF                     	;# 
   913  0000                     	;# 
   914  0001                     	;# 
   915  0002                     	;# 
   916  0003                     	;# 
   917  0004                     	;# 
   918  0005                     	;# 
   919  0006                     	;# 
   920  0007                     	;# 
   921  0008                     	;# 
   922  0009                     	;# 
   923  000A                     	;# 
   924  000B                     	;# 
   925  000C                     	;# 
   926  000D                     	;# 
   927  000E                     	;# 
   928  0010                     	;# 
   929  0011                     	;# 
   930  0012                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  008E                     	;# 
   943  0090                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0095                     	;# 
   947  0096                     	;# 
   948  0097                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  010C                     	;# 
   957  010D                     	;# 
   958  010E                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  011D                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0194                     	;# 
   971  0195                     	;# 
   972  0196                     	;# 
   973  0197                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020D                     	;# 
   986  0210                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  0394                     	;# 
  1011  0395                     	;# 
  1012  0396                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0010                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  008C                     	;# 
  1052  008D                     	;# 
  1053  008E                     	;# 
  1054  0090                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0099                     	;# 
  1061  009A                     	;# 
  1062  009B                     	;# 
  1063  009B                     	;# 
  1064  009C                     	;# 
  1065  009D                     	;# 
  1066  009E                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  011D                     	;# 
  1073  018C                     	;# 
  1074  018D                     	;# 
  1075  018E                     	;# 
  1076  0191                     	;# 
  1077  0191                     	;# 
  1078  0192                     	;# 
  1079  0193                     	;# 
  1080  0193                     	;# 
  1081  0194                     	;# 
  1082  0195                     	;# 
  1083  0196                     	;# 
  1084  0197                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019C                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  020D                     	;# 
  1097  0210                     	;# 
  1098  0211                     	;# 
  1099  0211                     	;# 
  1100  0212                     	;# 
  1101  0212                     	;# 
  1102  0213                     	;# 
  1103  0213                     	;# 
  1104  0214                     	;# 
  1105  0214                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0216                     	;# 
  1110  0216                     	;# 
  1111  0217                     	;# 
  1112  0217                     	;# 
  1113  0291                     	;# 
  1114  0291                     	;# 
  1115  0292                     	;# 
  1116  0293                     	;# 
  1117  0298                     	;# 
  1118  0298                     	;# 
  1119  0299                     	;# 
  1120  029A                     	;# 
  1121  0394                     	;# 
  1122  0395                     	;# 
  1123  0396                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  0010                     	;# 
  1151  0011                     	;# 
  1152  0012                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008D                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0095                     	;# 
  1169  0096                     	;# 
  1170  0097                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  010C                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0197                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  020D                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0291                     	;# 
  1225  0291                     	;# 
  1226  0292                     	;# 
  1227  0293                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  0394                     	;# 
  1233  0395                     	;# 
  1234  0396                     	;# 
  1235  0FE4                     	;# 
  1236  0FE5                     	;# 
  1237  0FE6                     	;# 
  1238  0FE7                     	;# 
  1239  0FE8                     	;# 
  1240  0FE9                     	;# 
  1241  0FEA                     	;# 
  1242  0FEB                     	;# 
  1243  0FED                     	;# 
  1244  0FEE                     	;# 
  1245  0FEF                     	;# 
  1246  0000                     	;# 
  1247  0001                     	;# 
  1248  0002                     	;# 
  1249  0003                     	;# 
  1250  0004                     	;# 
  1251  0005                     	;# 
  1252  0006                     	;# 
  1253  0007                     	;# 
  1254  0008                     	;# 
  1255  0009                     	;# 
  1256  000A                     	;# 
  1257  000B                     	;# 
  1258  000C                     	;# 
  1259  000D                     	;# 
  1260  000E                     	;# 
  1261  0010                     	;# 
  1262  0011                     	;# 
  1263  0012                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001C                     	;# 
  1273  008C                     	;# 
  1274  008D                     	;# 
  1275  008E                     	;# 
  1276  0090                     	;# 
  1277  0091                     	;# 
  1278  0092                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0099                     	;# 
  1283  009A                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  0116                     	;# 
  1293  0117                     	;# 
  1294  011D                     	;# 
  1295  018C                     	;# 
  1296  018D                     	;# 
  1297  018E                     	;# 
  1298  0191                     	;# 
  1299  0191                     	;# 
  1300  0192                     	;# 
  1301  0193                     	;# 
  1302  0193                     	;# 
  1303  0194                     	;# 
  1304  0195                     	;# 
  1305  0196                     	;# 
  1306  0197                     	;# 
  1307  0199                     	;# 
  1308  019A                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019D                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  020D                     	;# 
  1319  0210                     	;# 
  1320  0211                     	;# 
  1321  0211                     	;# 
  1322  0212                     	;# 
  1323  0212                     	;# 
  1324  0213                     	;# 
  1325  0213                     	;# 
  1326  0214                     	;# 
  1327  0214                     	;# 
  1328  0215                     	;# 
  1329  0215                     	;# 
  1330  0215                     	;# 
  1331  0216                     	;# 
  1332  0216                     	;# 
  1333  0217                     	;# 
  1334  0217                     	;# 
  1335  0291                     	;# 
  1336  0291                     	;# 
  1337  0292                     	;# 
  1338  0293                     	;# 
  1339  0298                     	;# 
  1340  0298                     	;# 
  1341  0299                     	;# 
  1342  029A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  000E                     	;# 
  1372  0010                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  008C                     	;# 
  1385  008D                     	;# 
  1386  008E                     	;# 
  1387  0090                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  010C                     	;# 
  1401  010D                     	;# 
  1402  010E                     	;# 
  1403  0116                     	;# 
  1404  0117                     	;# 
  1405  011D                     	;# 
  1406  018C                     	;# 
  1407  018D                     	;# 
  1408  018E                     	;# 
  1409  0191                     	;# 
  1410  0191                     	;# 
  1411  0192                     	;# 
  1412  0193                     	;# 
  1413  0193                     	;# 
  1414  0194                     	;# 
  1415  0195                     	;# 
  1416  0196                     	;# 
  1417  0197                     	;# 
  1418  0199                     	;# 
  1419  019A                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019C                     	;# 
  1425  019C                     	;# 
  1426  019D                     	;# 
  1427  019E                     	;# 
  1428  019F                     	;# 
  1429  020D                     	;# 
  1430  0210                     	;# 
  1431  0211                     	;# 
  1432  0211                     	;# 
  1433  0212                     	;# 
  1434  0212                     	;# 
  1435  0213                     	;# 
  1436  0213                     	;# 
  1437  0214                     	;# 
  1438  0214                     	;# 
  1439  0215                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0216                     	;# 
  1443  0216                     	;# 
  1444  0217                     	;# 
  1445  0217                     	;# 
  1446  0291                     	;# 
  1447  0291                     	;# 
  1448  0292                     	;# 
  1449  0293                     	;# 
  1450  0298                     	;# 
  1451  0298                     	;# 
  1452  0299                     	;# 
  1453  029A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  008C                     	;# 
  1496  008D                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0095                     	;# 
  1502  0096                     	;# 
  1503  0097                     	;# 
  1504  0099                     	;# 
  1505  009A                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  010C                     	;# 
  1512  010D                     	;# 
  1513  010E                     	;# 
  1514  0116                     	;# 
  1515  0117                     	;# 
  1516  011D                     	;# 
  1517  018C                     	;# 
  1518  018D                     	;# 
  1519  018E                     	;# 
  1520  0191                     	;# 
  1521  0191                     	;# 
  1522  0192                     	;# 
  1523  0193                     	;# 
  1524  0193                     	;# 
  1525  0194                     	;# 
  1526  0195                     	;# 
  1527  0196                     	;# 
  1528  0197                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  0210                     	;# 
  1542  0211                     	;# 
  1543  0211                     	;# 
  1544  0212                     	;# 
  1545  0212                     	;# 
  1546  0213                     	;# 
  1547  0213                     	;# 
  1548  0214                     	;# 
  1549  0214                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  0394                     	;# 
  1566  0395                     	;# 
  1567  0396                     	;# 
  1568  0FE4                     	;# 
  1569  0FE5                     	;# 
  1570  0FE6                     	;# 
  1571  0FE7                     	;# 
  1572  0FE8                     	;# 
  1573  0FE9                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEF                     	;# 
  1579  0000                     	;# 
  1580  0001                     	;# 
  1581  0002                     	;# 
  1582  0003                     	;# 
  1583  0004                     	;# 
  1584  0005                     	;# 
  1585  0006                     	;# 
  1586  0007                     	;# 
  1587  0008                     	;# 
  1588  0009                     	;# 
  1589  000A                     	;# 
  1590  000B                     	;# 
  1591  000C                     	;# 
  1592  000D                     	;# 
  1593  000E                     	;# 
  1594  0010                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008D                     	;# 
  1608  008E                     	;# 
  1609  0090                     	;# 
  1610  0091                     	;# 
  1611  0092                     	;# 
  1612  0095                     	;# 
  1613  0096                     	;# 
  1614  0097                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  010C                     	;# 
  1623  010D                     	;# 
  1624  010E                     	;# 
  1625  0116                     	;# 
  1626  0117                     	;# 
  1627  011D                     	;# 
  1628  018C                     	;# 
  1629  018D                     	;# 
  1630  018E                     	;# 
  1631  0191                     	;# 
  1632  0191                     	;# 
  1633  0192                     	;# 
  1634  0193                     	;# 
  1635  0193                     	;# 
  1636  0194                     	;# 
  1637  0195                     	;# 
  1638  0196                     	;# 
  1639  0197                     	;# 
  1640  0199                     	;# 
  1641  019A                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019C                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020D                     	;# 
  1652  0210                     	;# 
  1653  0211                     	;# 
  1654  0211                     	;# 
  1655  0212                     	;# 
  1656  0212                     	;# 
  1657  0213                     	;# 
  1658  0213                     	;# 
  1659  0214                     	;# 
  1660  0214                     	;# 
  1661  0215                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0216                     	;# 
  1665  0216                     	;# 
  1666  0217                     	;# 
  1667  0217                     	;# 
  1668  0291                     	;# 
  1669  0291                     	;# 
  1670  0292                     	;# 
  1671  0293                     	;# 
  1672  0298                     	;# 
  1673  0298                     	;# 
  1674  0299                     	;# 
  1675  029A                     	;# 
  1676  0394                     	;# 
  1677  0395                     	;# 
  1678  0396                     	;# 
  1679  0FE4                     	;# 
  1680  0FE5                     	;# 
  1681  0FE6                     	;# 
  1682  0FE7                     	;# 
  1683  0FE8                     	;# 
  1684  0FE9                     	;# 
  1685  0FEA                     	;# 
  1686  0FEB                     	;# 
  1687  0FED                     	;# 
  1688  0FEE                     	;# 
  1689  0FEF                     	;# 
  1690  0000                     	;# 
  1691  0001                     	;# 
  1692  0002                     	;# 
  1693  0003                     	;# 
  1694  0004                     	;# 
  1695  0005                     	;# 
  1696  0006                     	;# 
  1697  0007                     	;# 
  1698  0008                     	;# 
  1699  0009                     	;# 
  1700  000A                     	;# 
  1701  000B                     	;# 
  1702  000C                     	;# 
  1703  000D                     	;# 
  1704  000E                     	;# 
  1705  0010                     	;# 
  1706  0011                     	;# 
  1707  0012                     	;# 
  1708  0015                     	;# 
  1709  0016                     	;# 
  1710  0016                     	;# 
  1711  0017                     	;# 
  1712  0018                     	;# 
  1713  0019                     	;# 
  1714  001A                     	;# 
  1715  001B                     	;# 
  1716  001C                     	;# 
  1717  008C                     	;# 
  1718  008D                     	;# 
  1719  008E                     	;# 
  1720  0090                     	;# 
  1721  0091                     	;# 
  1722  0092                     	;# 
  1723  0095                     	;# 
  1724  0096                     	;# 
  1725  0097                     	;# 
  1726  0099                     	;# 
  1727  009A                     	;# 
  1728  009B                     	;# 
  1729  009B                     	;# 
  1730  009C                     	;# 
  1731  009D                     	;# 
  1732  009E                     	;# 
  1733  010C                     	;# 
  1734  010D                     	;# 
  1735  010E                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  011D                     	;# 
  1739  018C                     	;# 
  1740  018D                     	;# 
  1741  018E                     	;# 
  1742  0191                     	;# 
  1743  0191                     	;# 
  1744  0192                     	;# 
  1745  0193                     	;# 
  1746  0193                     	;# 
  1747  0194                     	;# 
  1748  0195                     	;# 
  1749  0196                     	;# 
  1750  0197                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  019C                     	;# 
  1759  019D                     	;# 
  1760  019E                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0291                     	;# 
  1780  0291                     	;# 
  1781  0292                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  0394                     	;# 
  1788  0395                     	;# 
  1789  0396                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000D                     	;# 
  1815  000E                     	;# 
  1816  0010                     	;# 
  1817  0011                     	;# 
  1818  0012                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008D                     	;# 
  1830  008E                     	;# 
  1831  0090                     	;# 
  1832  0091                     	;# 
  1833  0092                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  011D                     	;# 
  1850  018C                     	;# 
  1851  018D                     	;# 
  1852  018E                     	;# 
  1853  0191                     	;# 
  1854  0191                     	;# 
  1855  0192                     	;# 
  1856  0193                     	;# 
  1857  0193                     	;# 
  1858  0194                     	;# 
  1859  0195                     	;# 
  1860  0196                     	;# 
  1861  0197                     	;# 
  1862  0199                     	;# 
  1863  019A                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019C                     	;# 
  1870  019D                     	;# 
  1871  019E                     	;# 
  1872  019F                     	;# 
  1873  020D                     	;# 
  1874  0210                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0291                     	;# 
  1891  0291                     	;# 
  1892  0292                     	;# 
  1893  0293                     	;# 
  1894  0298                     	;# 
  1895  0298                     	;# 
  1896  0299                     	;# 
  1897  029A                     	;# 
  1898  0394                     	;# 
  1899  0395                     	;# 
  1900  0396                     	;# 
  1901  0FE4                     	;# 
  1902  0FE5                     	;# 
  1903  0FE6                     	;# 
  1904  0FE7                     	;# 
  1905  0FE8                     	;# 
  1906  0FE9                     	;# 
  1907  0FEA                     	;# 
  1908  0FEB                     	;# 
  1909  0FED                     	;# 
  1910  0FEE                     	;# 
  1911  0FEF                     	;# 
  1912  0000                     	;# 
  1913  0001                     	;# 
  1914  0002                     	;# 
  1915  0003                     	;# 
  1916  0004                     	;# 
  1917  0005                     	;# 
  1918  0006                     	;# 
  1919  0007                     	;# 
  1920  0008                     	;# 
  1921  0009                     	;# 
  1922  000A                     	;# 
  1923  000B                     	;# 
  1924  000C                     	;# 
  1925  000D                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0015                     	;# 
  1931  0016                     	;# 
  1932  0016                     	;# 
  1933  0017                     	;# 
  1934  0018                     	;# 
  1935  0019                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0090                     	;# 
  1943  0091                     	;# 
  1944  0092                     	;# 
  1945  0095                     	;# 
  1946  0096                     	;# 
  1947  0097                     	;# 
  1948  0099                     	;# 
  1949  009A                     	;# 
  1950  009B                     	;# 
  1951  009B                     	;# 
  1952  009C                     	;# 
  1953  009D                     	;# 
  1954  009E                     	;# 
  1955  010C                     	;# 
  1956  010D                     	;# 
  1957  010E                     	;# 
  1958  0116                     	;# 
  1959  0117                     	;# 
  1960  011D                     	;# 
  1961  018C                     	;# 
  1962  018D                     	;# 
  1963  018E                     	;# 
  1964  0191                     	;# 
  1965  0191                     	;# 
  1966  0192                     	;# 
  1967  0193                     	;# 
  1968  0193                     	;# 
  1969  0194                     	;# 
  1970  0195                     	;# 
  1971  0196                     	;# 
  1972  0197                     	;# 
  1973  0199                     	;# 
  1974  019A                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019E                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0291                     	;# 
  2002  0291                     	;# 
  2003  0292                     	;# 
  2004  0293                     	;# 
  2005  0298                     	;# 
  2006  0298                     	;# 
  2007  0299                     	;# 
  2008  029A                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0FE4                     	;# 
  2013  0FE5                     	;# 
  2014  0FE6                     	;# 
  2015  0FE7                     	;# 
  2016  0FE8                     	;# 
  2017  0FE9                     	;# 
  2018  0FEA                     	;# 
  2019  0FEB                     	;# 
  2020  0FED                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023                           
  2024                           	psect	idataBANK4
  2025  1233                     __pidataBANK4:	
  2026                           
  2027                           ;initializer for __product
  2028  1233  3463               	retlw	99
  2029  1234  3402               	retlw	2
  2030  1235  3400               	retlw	0
  2031  1236  3400               	retlw	0
  2032  1237  3400               	retlw	0
  2033  1238  3400               	retlw	0
  2034  1239  3400               	retlw	0
  2035  123A  3400               	retlw	0
  2036  123B  3400               	retlw	0
  2037  123C  3400               	retlw	0
  2038  123D  3400               	retlw	0
  2039  123E  3400               	retlw	0
  2040  123F  34FF               	retlw	255
  2041  1240  34FF               	retlw	255
  2042  1241  34FF               	retlw	255
  2043  1242  3400               	retlw	0
  2044  1243  3400               	retlw	0
  2045  1244  3400               	retlw	0
  2046  1245  3400               	retlw	0
  2047  1246  3400               	retlw	0
  2048  1247  3400               	retlw	0
  2049  1248  3400               	retlw	0
  2050  1249  3400               	retlw	0
  2051  124A  3400               	retlw	0
  2052  124B  3400               	retlw	0
  2053  124C  3400               	retlw	0
  2054  124D  3400               	retlw	0
  2055  124E  3400               	retlw	0
  2056  124F  3400               	retlw	0
  2057  1250  3400               	retlw	0
  2058  1251  3400               	retlw	0
  2059  1252  3400               	retlw	0
  2060                           
  2061                           	psect	stringtext
  2062  1000                     __pstringtext:	
  2063  1000                     _CC2500_registers_address:	
  2064  1000  3403               	retlw	3
  2065  1001  3416               	retlw	22
  2066  1002  3417               	retlw	23
  2067  1003  341E               	retlw	30
  2068  1004  341F               	retlw	31
  2069  1005  3420               	retlw	32
  2070  1006  342A               	retlw	42
  2071  1007  342B               	retlw	43
  2072  1008  340B               	retlw	11
  2073  1009  340C               	retlw	12
  2074  100A  340D               	retlw	13
  2075  100B  340E               	retlw	14
  2076  100C  340F               	retlw	15
  2077  100D  3410               	retlw	16
  2078  100E  3411               	retlw	17
  2079  100F  3412               	retlw	18
  2080  1010  3413               	retlw	19
  2081  1011  3414               	retlw	20
  2082  1012  340A               	retlw	10
  2083  1013  3415               	retlw	21
  2084  1014  3421               	retlw	33
  2085  1015  3422               	retlw	34
  2086  1016  3418               	retlw	24
  2087  1017  3419               	retlw	25
  2088  1018  341A               	retlw	26
  2089  1019  341B               	retlw	27
  2090  101A  341C               	retlw	28
  2091  101B  341D               	retlw	29
  2092  101C  3423               	retlw	35
  2093  101D  3424               	retlw	36
  2094  101E  3425               	retlw	37
  2095  101F  3426               	retlw	38
  2096  1020  3429               	retlw	41
  2097  1021  342C               	retlw	44
  2098  1022  342D               	retlw	45
  2099  1023  342E               	retlw	46
  2100  1024  3400               	retlw	0
  2101  1025  3401               	retlw	1
  2102  1026  3402               	retlw	2
  2103  1027  3407               	retlw	7
  2104  1028  3408               	retlw	8
  2105  1029  3409               	retlw	9
  2106  102A  3406               	retlw	6
  2107  102B  3404               	retlw	4
  2108  102C  3405               	retlw	5
  2109  102D  3427               	retlw	39
  2110  102E  3428               	retlw	40
  2111  102F                     __end_of_CC2500_registers_address:	
  2112  102F                     _CC2500_rfSettings:	
  2113  102F  3407               	retlw	7
  2114  1030  3407               	retlw	7
  2115  1031  3430               	retlw	48
  2116  1032  3487               	retlw	135
  2117  1033  346B               	retlw	107
  2118  1034  34F8               	retlw	248
  2119  1035  347F               	retlw	127
  2120  1036  343F               	retlw	63
  2121  1037  3409               	retlw	9
  2122  1038  3400               	retlw	0
  2123  1039  345C               	retlw	92
  2124  103A  34A7               	retlw	167
  2125  103B  3462               	retlw	98
  2126  103C  3486               	retlw	134
  2127  103D  3483               	retlw	131
  2128  103E  3403               	retlw	3
  2129  103F  3422               	retlw	34
  2130  1040  34F8               	retlw	248
  2131  1041  3400               	retlw	0
  2132  1042  3444               	retlw	68
  2133  1043  34B6               	retlw	182
  2134  1044  3410               	retlw	16
  2135  1045  3418               	retlw	24
  2136  1046  341D               	retlw	29
  2137  1047  341C               	retlw	28
  2138  1048  34C7               	retlw	199
  2139  1049  3400               	retlw	0
  2140  104A  34B2               	retlw	178
  2141  104B  34EA               	retlw	234
  2142  104C  340A               	retlw	10
  2143  104D  3400               	retlw	0
  2144  104E  3411               	retlw	17
  2145  104F  3459               	retlw	89
  2146  1050  3488               	retlw	136
  2147  1051  3431               	retlw	49
  2148  1052  340B               	retlw	11
  2149  1053  342F               	retlw	47
  2150  1054  342E               	retlw	46
  2151  1055  3406               	retlw	6
  2152  1056  3404               	retlw	4
  2153  1057  3405               	retlw	5
  2154  1058  3400               	retlw	0
  2155  1059  3430               	retlw	48
  2156  105A  34D3               	retlw	211
  2157  105B  3491               	retlw	145
  2158  105C  3441               	retlw	65
  2159  105D  3400               	retlw	0
  2160  105E                     __end_of_CC2500_rfSettings:	
  2161  105E                     _CC2500_patable_vaule:	
  2162  105E  34FE               	retlw	254
  2163  105F  34FE               	retlw	254
  2164  1060  34FE               	retlw	254
  2165  1061  34FE               	retlw	254
  2166  1062  34FE               	retlw	254
  2167  1063  34FE               	retlw	254
  2168  1064  34FE               	retlw	254
  2169  1065  34FE               	retlw	254
  2170  1066                     __end_of_CC2500_patable_vaule:	
  2171                           
  2172                           	psect	nvBANK0
  2173  006D                     __pnvBANK0:	
  2174  006D                     _product:	
  2175  006D                     	ds	1
  2176  000C                     _PORTA	set	12
  2177  000D                     _PORTB	set	13
  2178  000E                     _PORTC	set	14
  2179  0018                     _T1CON	set	24
  2180  0017                     _TMR1H	set	23
  2181  0016                     _TMR1L	set	22
  2182  005F                     _GIE	set	95
  2183  005B                     _IOCIE	set	91
  2184  0058                     _IOCIF	set	88
  2185  005E                     _PEIE	set	94
  2186  0060                     _RA0	set	96
  2187  0063                     _RA3	set	99
  2188  0064                     _RA4	set	100
  2189  0066                     _RA6	set	102
  2190  0067                     _RA7	set	103
  2191  0068                     _RB0	set	104
  2192  0069                     _RB1	set	105
  2193  006A                     _RB2	set	106
  2194  006B                     _RB3	set	107
  2195  006C                     _RB4	set	108
  2196  006D                     _RB5	set	109
  2197  0070                     _RC0	set	112
  2198  0071                     _RC1	set	113
  2199  0072                     _RC2	set	114
  2200  0074                     _RC4	set	116
  2201  0075                     _RC5	set	117
  2202  0076                     _RC6	set	118
  2203  0077                     _RC7	set	119
  2204  0088                     _TMR1IF	set	136
  2205  009D                     _ADCON0	set	157
  2206  009E                     _ADCON1	set	158
  2207  009C                     _ADRESH	set	156
  2208  009B                     _ADRESL	set	155
  2209  0099                     _OSCCON	set	153
  2210  008C                     _TRISA	set	140
  2211  008D                     _TRISB	set	141
  2212  008E                     _TRISC	set	142
  2213  0097                     _WDTCON	set	151
  2214  04E9                     _GO_nDONE	set	1257
  2215  0488                     _TMR1IE	set	1160
  2216  0117                     _FVRCON	set	279
  2217  010C                     _LATA	set	268
  2218  010D                     _LATB	set	269
  2219  010E                     _LATC	set	270
  2220  018C                     _ANSELA	set	396
  2221  018D                     _ANSELB	set	397
  2222  018E                     _ANSELC	set	398
  2223  0192                     _PMADRH	set	402
  2224  0191                     _PMADRL	set	401
  2225  0196                     _PMCON2	set	406
  2226  0194                     _PMDATH	set	404
  2227  0193                     _PMDATL	set	403
  2228  0CAE                     _CFGS	set	3246
  2229  0CAC                     _FREE	set	3244
  2230  0CAD                     _LWLO	set	3245
  2231  0CA8                     _RD	set	3240
  2232  0CA9                     _WR	set	3241
  2233  0CAA                     _WREN	set	3242
  2234  1069                     _WPUB1	set	4201
  2235  106A                     _WPUB2	set	4202
  2236  0396                     _IOCBF	set	918
  2237  0395                     _IOCBN	set	917
  2238  0394                     _IOCBP	set	916
  2239  1CB2                     _IOCBF2	set	7346
  2240                           
  2241                           ; #config settings
  2242  0000                     
  2243                           	psect	cinit
  2244  0015                     start_initialization:	
  2245  0015                     __initialization:	
  2246                           
  2247                           ; Clear objects allocated to BITCOMMON
  2248  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2249                           
  2250                           ; Clear objects allocated to COMMON
  2251  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2252  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2253  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2254  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2255  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2256  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2257                           
  2258                           ; Clear objects allocated to BANK0
  2259  001C  01EB               	clrf	__pbssBANK0& (0+127)
  2260  001D  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2261                           
  2262                           ; Clear objects allocated to BANK1
  2263  001E  30A0               	movlw	low __pbssBANK1
  2264  001F  0084               	movwf	4
  2265  0020  3000               	movlw	high __pbssBANK1
  2266  0021  0085               	movwf	5
  2267  0022  304F               	movlw	79
  2268  0023  319E  264B  3180   	fcall	clear_ram0
  2269                           
  2270                           ; Clear objects allocated to BANK2
  2271  0026  3020               	movlw	low __pbssBANK2
  2272  0027  0084               	movwf	4
  2273  0028  3001               	movlw	high __pbssBANK2
  2274  0029  0085               	movwf	5
  2275  002A  304D               	movlw	77
  2276  002B  319E  264B  3180   	fcall	clear_ram0
  2277                           
  2278                           ; Clear objects allocated to BANK3
  2279  002E  30A0               	movlw	low __pbssBANK3
  2280  002F  0084               	movwf	4
  2281  0030  3001               	movlw	high __pbssBANK3
  2282  0031  0085               	movwf	5
  2283  0032  3046               	movlw	70
  2284  0033  319E  264B  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Initialize objects allocated to BANK4
  2287  0036  3033               	movlw	low __pidataBANK4
  2288  0037  0084               	movwf	4
  2289  0038  3092               	movlw	(high __pidataBANK4)| (0+128)
  2290  0039  0085               	movwf	5
  2291  003A  3020               	movlw	low __pdataBANK4
  2292  003B  0086               	movwf	6
  2293  003C  3002               	movlw	high __pdataBANK4
  2294  003D  0087               	movwf	7
  2295  003E  3020               	movlw	32
  2296  003F  319E  2645         	fcall	init_ram
  2297  0041                     end_of_initialization:	
  2298                           ;End of C runtime variable initialization code
  2299                           
  2300  0041                     __end_of__initialization:	
  2301  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2302  0042  0020               	movlb	0
  2303  0043  3195  2D5A         	ljmp	_main	;jump to C main() function
  2304                           
  2305                           	psect	bitbssCOMMON
  2306  03E0                     __pbitbssCOMMON:	
  2307  03E0                     _Receive_OK:	
  2308  03E0                     	ds	1
  2309  03E1                     _Transceive_OK:	
  2310  03E1                     	ds	1
  2311                           
  2312                           	psect	bssCOMMON
  2313  0070                     __pbssCOMMON:	
  2314  0070                     _LED:	
  2315  0070                     	ds	2
  2316  0072                     _DelayOff:	
  2317  0072                     	ds	1
  2318  0073                     _Dimmer:	
  2319  0073                     	ds	1
  2320  0074                     _DimmerLightsIntr:	
  2321  0074                     	ds	1
  2322  0075                     _SPI0Buffer:	
  2323  0075                     	ds	1
  2324                           
  2325                           	psect	bssBANK0
  2326  006B                     __pbssBANK0:	
  2327  006B                     _DimmerLights:	
  2328  006B                     	ds	1
  2329  006C                     _Sw:	
  2330  006C                     	ds	1
  2331                           
  2332                           	psect	bssBANK1
  2333  00A0                     __pbssBANK1:	
  2334  00A0                     _myMain:	
  2335  00A0                     	ds	16
  2336  00B0                     _Buz1:	
  2337  00B0                     	ds	12
  2338  00BC                     _RF1:	
  2339  00BC                     	ds	12
  2340  00C8                     _Timer1:	
  2341  00C8                     	ds	3
  2342  00CB                     _RF_Count:	
  2343  00CB                     	ds	2
  2344  00CD                     _WDT:	
  2345  00CD                     	ds	2
  2346  00CF                     _CRC:	
  2347  00CF                     	ds	1
  2348  00D0                     _DimmerLights11:	
  2349  00D0                     	ds	1
  2350  00D1                     _DimmerLights22:	
  2351  00D1                     	ds	1
  2352  00D2                     _DimmerLights33:	
  2353  00D2                     	ds	1
  2354  00D3                     _DimmerLightsIntrIOC:	
  2355  00D3                     	ds	1
  2356  00D4                     _RFSW:	
  2357  00D4                     	ds	1
  2358  00D5                     _RSSI:	
  2359  00D5                     	ds	1
  2360  00D6                     _Rx_Length:	
  2361  00D6                     	ds	1
  2362  00D7                     _Tx_Length:	
  2363  00D7                     	ds	1
  2364  00D8                     _r_address:	
  2365  00D8                     	ds	1
  2366  00D9                     _r_data:	
  2367  00D9                     	ds	1
  2368  00DA                     _s_data:	
  2369  00DA                     	ds	1
  2370  00DB                     _VarErrLED:	
  2371  00DB                     	ds	4
  2372  00DF                     _VarLED1:	
  2373  00DF                     	ds	4
  2374  00E3                     _Dimmer1:	
  2375  00E3                     	ds	3
  2376  00E6                     _DlySw1:	
  2377  00E6                     	ds	2
  2378  00E8                     _DlySw2:	
  2379  00E8                     	ds	2
  2380  00EA                     _DlySw3:	
  2381  00EA                     	ds	2
  2382  00EC                     _RFSW1:	
  2383  00EC                     	ds	1
  2384  00ED                     _RFSW2:	
  2385  00ED                     	ds	1
  2386  00EE                     _RFSW3:	
  2387  00EE                     	ds	1
  2388                           
  2389                           	psect	bssBANK2
  2390  0120                     __pbssBANK2:	
  2391  0120                     _RF_Data:	
  2392  0120                     	ds	30
  2393  013E                     _DimmerLights1:	
  2394  013E                     	ds	15
  2395  014D                     _DimmerLights2:	
  2396  014D                     	ds	15
  2397  015C                     _Sw1:	
  2398  015C                     	ds	9
  2399  0165                     _VarLED2:	
  2400  0165                     	ds	4
  2401  0169                     _VarLED3:	
  2402  0169                     	ds	4
  2403                           
  2404                           	psect	bssBANK3
  2405  01A0                     __pbssBANK3:	
  2406  01A0                     _Memory:	
  2407  01A0                     	ds	37
  2408  01C5                     _DimmerLights3:	
  2409  01C5                     	ds	15
  2410  01D4                     _Sw2:	
  2411  01D4                     	ds	9
  2412  01DD                     _Sw3:	
  2413  01DD                     	ds	9
  2414                           
  2415                           	psect	dataBANK4
  2416  0220                     __pdataBANK4:	
  2417  0220                     __product:	
  2418  0220                     	ds	32
  2419                           
  2420                           	psect	clrtext
  2421  1E4B                     clear_ram0:	
  2422                           ;	Called with FSR0 containing the base address, and
  2423                           ;	WREG with the size to clear
  2424                           
  2425  1E4B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2426  1E4C                     clrloop0:	
  2427  1E4C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2428  1E4D  3101               	addfsr 0,1
  2429  1E4E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2430  1E4F  2E4C               	goto	clrloop0	;have we reached the end yet?
  2431  1E50  3400               	retlw	0	;all done for this memory range, return
  2432                           
  2433                           	psect	inittext
  2434  1E45                     init_ram:	
  2435  1E45  00FE               	movwf	126
  2436  1E46                     initloop:	
  2437  1E46  0012               	moviw fsr0++
  2438  1E47  001E               	movwi fsr1++
  2439  1E48  0BFE               	decfsz	126,f
  2440  1E49  2E46               	goto	initloop
  2441  1E4A  3400               	retlw	0
  2442                           
  2443                           	psect	cstackBANK3
  2444  01E6                     __pcstackBANK3:	
  2445  01E6                     ?_main:	
  2446  01E6                     main@argc:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449                           
  2450                           ; 2 bytes @ 0x0
  2451  01E6                     	ds	2
  2452  01E8                     main@argv:	
  2453                           
  2454                           ; 2 bytes @ 0x2
  2455  01E8                     	ds	2
  2456                           
  2457                           	psect	cstackCOMMON
  2458  0076                     __pcstackCOMMON:	
  2459  0076                     ?_Timeout_Counter:	
  2460  0076                     ?_set_TimeoutCleared:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0076                     ?_CC2500_WriteByte:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0076                     ?_CC2500_WriteCommand:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0076                     ?_CC2500_ReadStatus:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0076                     ?_CC2500_ReadByte:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0076                     ?_CC2500_PowerRST:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0076                     ?_CC2500_InitSetREG:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0076                     ?_CC2500_InitPATable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0076                     ?_CC2500_ClearTXFIFO:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0076                     ?_CC2500_ClearRXFIFO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0076                     ?_CC2500_FrequencyCabr:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0076                     ?_CC2500_SIDLEMode:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0076                     ?_DlyOff_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0076                     ?_DlyOff_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0076                     ?_setTxData:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0076                     ?_setDimmerLights_Initialization:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0076                     ?_Dimmer_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0076                     ?_setMemory_GO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0076                     ?_setDimmerLights_Main:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0076                     ?_setLED_Initialization:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0076                     ?_setLED_Main:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0076                     ?_Fosc_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0076                     ?_IO_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0076                     ?_TMR1_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0076                     ?_ADC_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0076                     ?_IOC_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0076                     ?_WDT_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0076                     ?_IOC_ISR:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0076                     ?_TMR1_ISR:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0076                     ?_Flash_Memory_Write:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0076                     ?_Flash_Memory_Modify:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0076                     ?_WDT_Clearing:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0076                     ?_myMain_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0076                     ?_Switch_Initialization:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0076                     ?_RF_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0076                     ?_my_MainTimer:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0076                     ?_Switch_Main:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0076                     ?_RF_Main:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0076                     ?_setSw_Enable:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0076                     ?_setRF_Enable:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0076                     ?_setRF_Initialization:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0076                     ?_setRF_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0076                     ?_getRxData:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0076                     ?_setLog_Code:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0076                     ?_setControl_Lights_Table:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0076                     ?_setRFSW_Control:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0076                     ?_setRFSW_AdjControl:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0076                     ?_setRF_DimmerValue:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0076                     ?_setSw_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0076                     ?_setSw_Main:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0076                     ?_Sw_DimmerOnFunc:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0076                     ?_Sw_DimmerAdjFunc:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0076                     ?_Sw_DimmerOffFunc:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0076                     ?_Buzzer_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0076                     ?_Buzzer_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0076                     ?_CC2500_TxData:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0076                     ?_CC2500_RxData:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0076                     ?_CC2500_PowerOnInitial:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0076                     ?_DelayOffPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0076                     ?_DelayOff_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0076                     ?_DelayOff_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0076                     ?_DimmerIntrIOCPointSelect:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0076                     ??_DimmerIntrIOCPointSelect:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0076                     ?_DimmerIntrPointSelect:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0076                     ??_DimmerIntrPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0076                     ?_setDimmerLights_IntrControl:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0076                     ?_DimmerLightsPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0076                     ?_DimmerLights_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0076                     ?_DimmerLights_Close:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0076                     ?_DimmerLights_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0076                     ?_setDimmerLights_AdjRF:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0076                     ?_LedPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0076                     ?_LED_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0076                     ?_LED_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0076                     ?_Mcu_Initialization:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0076                     ?_ISR:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0076                     ?_setDimmerReClock:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0076                     ?_Flash_Memory_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0076                     ?_Flash_Memory_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0076                     ?_Flash_Memory_Unlock:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0076                     ?_Flash_Memory_Erasing:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0076                     ?_WDT_Main:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0076                     ?_setRF_Learn:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0076                     ?_RfSWPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0076                     ?_TouchPower:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0076                     ?_SwPointSelect:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0076                     ?_DelayTimejudge:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0076                     ?_getDimmerLights_StatusFlag:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0076                     ?_getPercentValue:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0076                     ?_Flash_Memory_Read:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0076                     ?_setPercentValue:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0076                     	ds	1
  2739  0077                     DimmerIntrIOCPointSelect@lights:	
  2740  0077                     DimmerIntrPointSelect@lights:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743                           
  2744                           ; 1 bytes @ 0x1
  2745  0077                     	ds	1
  2746  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2747  0078                     ??_setDimmerLights_IntrControl:	
  2748                           ; 0 bytes @ 0x2
  2749                           
  2750  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2751                           ; 0 bytes @ 0x2
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x2
  2755  0078                     	ds	1
  2756  0079                     ??_IOC_ISR:	
  2757  0079                     ??_setDimmerReClock:	
  2758                           ; 0 bytes @ 0x3
  2759                           
  2760                           
  2761                           ; 0 bytes @ 0x3
  2762  0079                     	ds	1
  2763  007A                     setDimmerLights_IntrControl@lights:	
  2764                           
  2765                           ; 1 bytes @ 0x4
  2766  007A                     	ds	1
  2767  007B                     ??_TMR1_ISR:	
  2768  007B                     ??_ISR:	
  2769                           ; 0 bytes @ 0x5
  2770                           
  2771                           
  2772                           ; 0 bytes @ 0x5
  2773  007B                     	ds	1
  2774                           
  2775                           	psect	cstackBANK0
  2776  0020                     __pcstackBANK0:	
  2777  0020                     ??_Timeout_Counter:	
  2778  0020                     ??_set_TimeoutCleared:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ??_CC2500_WriteByte:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_CC2500_ReadByte:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ?_DelayTime_1us:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_setTxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ??_Dimmer_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ??_getDimmerLights_StatusFlag:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_setMemory_GO:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_Fosc_Set:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_IO_Set:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_TMR1_Set:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_ADC_Set:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_IOC_Set:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_WDT_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Flash_Memory_Read:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_Flash_Memory_Write:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_WDT_Clearing:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_myMain_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_setRF_Enable:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setRF_Initialization:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Buzzer_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Buzzer_Main:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_DelayOffPointSelect:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_DimmerLightsPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_LedPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Flash_Memory_Unlock:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Flash_Memory_Erasing:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_WDT_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_setRF_Learn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_RfSWPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_TouchPower:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_SwPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ?___bmul:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ?_getBuz_GO:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ?___awdiv:	
  2881                           ; 2 bytes @ 0x0
  2882                           
  2883  0020                     ?___ftpack:	
  2884                           ; 2 bytes @ 0x0
  2885                           
  2886  0020                     LedPointSelect@led:	
  2887                           ; 3 bytes @ 0x0
  2888                           
  2889  0020                     setRF_Learn@command:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     setRF_Enable@command:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ___bmul@multiplicand:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     DelayTime_1us@count:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0020                     ___awdiv@divisor:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     ___ftpack@arg:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907                           
  2908                           ; 3 bytes @ 0x0
  2909  0020                     	ds	1
  2910  0021                     ?_setLED:	
  2911  0021                     ??_setLED_Main:	
  2912                           ; 0 bytes @ 0x1
  2913                           
  2914  0021                     ??_RF_Initialization:	
  2915                           ; 0 bytes @ 0x1
  2916                           
  2917  0021                     ??_Mcu_Initialization:	
  2918                           ; 0 bytes @ 0x1
  2919                           
  2920  0021                     ??___bmul:	
  2921                           ; 0 bytes @ 0x1
  2922                           
  2923  0021                     CC2500_WriteByte@loop_a:	
  2924                           ; 0 bytes @ 0x1
  2925                           
  2926  0021                     CC2500_ReadByte@loop_b:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0021                     DelayOffPointSelect@sw:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0021                     DimmerLightsPointSelect@lights:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     getDimmerLights_StatusFlag@Status:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     setLED@command:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     Flash_Memory_Read@i:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     Flash_Memory_Write@i:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     RfSWPointSelect@sw:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     SwPointSelect@sw:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953                           
  2954                           ; 1 bytes @ 0x1
  2955  0021                     	ds	1
  2956  0022                     ??_CC2500_WriteCommand:	
  2957  0022                     ??_CC2500_ReadStatus:	
  2958                           ; 0 bytes @ 0x2
  2959                           
  2960  0022                     ??_DelayTime_1us:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0022                     ?_CC2500_WriteREG:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0022                     ??_DlyOff_Initialization:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0022                     ?_setSw_Status:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ?_setRFSW_Status:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_setDimmerLights_Trigger:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ?_setDimmerLights_Switch:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ??_setDimmerLights_Initialization:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ??_setLED:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ??_setSw_Enable:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ??_getBuz_GO:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ?_setDimmerLights_AdjGo:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ?_setDimmerLights_TriggerAdj:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     CC2500_WriteREG@value:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     DlyOff_Initialization@sw:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     _getDimmerLights_StatusFlag$2394:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     setDimmerLights_Switch@command:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     setDimmerLights_AdjGo@command:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     setDimmerLights_Trigger@command:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     setDimmerLights_TriggerAdj@command:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     setLED@led:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     Flash_Memory_Read@address:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     setMemory_GO@command:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     setRFSW_Status@command:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setSw_Enable@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setSw_Status@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     ___bmul@product:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     DelayTime_1us@i:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     ___awdiv@dividend:	
  3045                           ; 2 bytes @ 0x2
  3046                           
  3047                           
  3048                           ; 2 bytes @ 0x2
  3049  0022                     	ds	1
  3050  0023                     ??_CC2500_WriteREG:	
  3051  0023                     ??_setSw_Status:	
  3052                           ; 0 bytes @ 0x3
  3053                           
  3054  0023                     ??_setRFSW_Status:	
  3055                           ; 0 bytes @ 0x3
  3056                           
  3057  0023                     ??_setDimmerLights_Trigger:	
  3058                           ; 0 bytes @ 0x3
  3059                           
  3060  0023                     ??_setDimmerLights_Switch:	
  3061                           ; 0 bytes @ 0x3
  3062                           
  3063  0023                     ?_setDimmerLights:	
  3064                           ; 0 bytes @ 0x3
  3065                           
  3066  0023                     ??_setLED_Initialization:	
  3067                           ; 0 bytes @ 0x3
  3068                           
  3069  0023                     ??_setSw_Initialization:	
  3070                           ; 0 bytes @ 0x3
  3071                           
  3072  0023                     ??_DelayOff_Initialization:	
  3073                           ; 0 bytes @ 0x3
  3074                           
  3075  0023                     ??_DimmerLights_Close:	
  3076                           ; 0 bytes @ 0x3
  3077                           
  3078  0023                     ??_setDimmerLights_AdjGo:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setDimmerLights_TriggerAdj:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     CC2500_WriteCommand@command:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     CC2500_ReadStatus@status_addr:	
  3088                           ; 1 bytes @ 0x3
  3089                           
  3090  0023                     setDimmerLights_Initialization@lights:	
  3091                           ; 1 bytes @ 0x3
  3092                           
  3093  0023                     setDimmerLights@status:	
  3094                           ; 1 bytes @ 0x3
  3095                           
  3096  0023                     setDimmerLights_Switch@lights:	
  3097                           ; 1 bytes @ 0x3
  3098                           
  3099  0023                     setDimmerLights_AdjGo@lights:	
  3100                           ; 1 bytes @ 0x3
  3101                           
  3102  0023                     setDimmerLights_Trigger@lights:	
  3103                           ; 1 bytes @ 0x3
  3104                           
  3105  0023                     setDimmerLights_TriggerAdj@lights:	
  3106                           ; 1 bytes @ 0x3
  3107                           
  3108  0023                     setLED_Initialization@led:	
  3109                           ; 1 bytes @ 0x3
  3110                           
  3111  0023                     setLED_Main@led:	
  3112                           ; 1 bytes @ 0x3
  3113                           
  3114  0023                     Flash_Memory_Read@ret:	
  3115                           ; 1 bytes @ 0x3
  3116                           
  3117  0023                     setRFSW_Status@sw:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setSw_Initialization@sw:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setSw_Status@sw:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     ___bmul@multiplier:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     ___ftpack@exp:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132                           
  3133                           ; 1 bytes @ 0x3
  3134  0023                     	ds	1
  3135  0024                     ??_CC2500_ClearTXFIFO:	
  3136  0024                     ??_CC2500_ClearRXFIFO:	
  3137                           ; 0 bytes @ 0x4
  3138                           
  3139  0024                     ??_CC2500_SIDLEMode:	
  3140                           ; 0 bytes @ 0x4
  3141                           
  3142  0024                     ??_DelayTimejudge:	
  3143                           ; 0 bytes @ 0x4
  3144                           
  3145  0024                     ??_setDimmerLights:	
  3146                           ; 0 bytes @ 0x4
  3147                           
  3148  0024                     ??_Flash_Memory_Modify:	
  3149                           ; 0 bytes @ 0x4
  3150                           
  3151  0024                     ??_Switch_Initialization:	
  3152                           ; 0 bytes @ 0x4
  3153                           
  3154  0024                     ??_Sw_DimmerAdjFunc:	
  3155                           ; 0 bytes @ 0x4
  3156                           
  3157  0024                     ??_CC2500_TxData:	
  3158                           ; 0 bytes @ 0x4
  3159                           
  3160  0024                     ??_CC2500_RxData:	
  3161                           ; 0 bytes @ 0x4
  3162                           
  3163  0024                     ??_DimmerLights_Initialization:	
  3164                           ; 0 bytes @ 0x4
  3165                           
  3166  0024                     ??_LED_Initialization:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_LED_Main:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ??___awdiv:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     CC2500_WriteREG@w_addr:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ___ftpack@sign:	
  3179                           ; 1 bytes @ 0x4
  3180                           
  3181  0024                     getBuz_GO@i:	
  3182                           ; 1 bytes @ 0x4
  3183                           
  3184  0024                     DelayTime_1us@j:	
  3185                           ; 2 bytes @ 0x4
  3186                           
  3187                           
  3188                           ; 2 bytes @ 0x4
  3189  0024                     	ds	1
  3190  0025                     ??_CC2500_InitSetREG:	
  3191  0025                     ??_CC2500_InitPATable:	
  3192                           ; 0 bytes @ 0x5
  3193                           
  3194  0025                     ??___ftpack:	
  3195                           ; 0 bytes @ 0x5
  3196                           
  3197  0025                     CC2500_TxData@loop_e:	
  3198                           ; 0 bytes @ 0x5
  3199                           
  3200  0025                     CC2500_RxData@loop_f:	
  3201                           ; 1 bytes @ 0x5
  3202                           
  3203  0025                     setDimmerLights@lights:	
  3204                           ; 1 bytes @ 0x5
  3205                           
  3206  0025                     Flash_Memory_Modify@i:	
  3207                           ; 1 bytes @ 0x5
  3208                           
  3209  0025                     _Sw_DimmerAdjFunc$5971:	
  3210                           ; 1 bytes @ 0x5
  3211                           
  3212  0025                     ___awdiv@counter:	
  3213                           ; 1 bytes @ 0x5
  3214                           
  3215                           
  3216                           ; 1 bytes @ 0x5
  3217  0025                     	ds	1
  3218  0026                     ??_CC2500_PowerRST:	
  3219  0026                     ??_CC2500_FrequencyCabr:	
  3220                           ; 0 bytes @ 0x6
  3221                           
  3222  0026                     ??_Flash_Memory_Main:	
  3223                           ; 0 bytes @ 0x6
  3224                           
  3225  0026                     CC2500_InitSetREG@temp1:	
  3226                           ; 0 bytes @ 0x6
  3227                           
  3228  0026                     CC2500_InitPATable@temp:	
  3229                           ; 1 bytes @ 0x6
  3230                           
  3231  0026                     DelayTimejudge@i:	
  3232                           ; 1 bytes @ 0x6
  3233                           
  3234  0026                     _Sw_DimmerAdjFunc$5972:	
  3235                           ; 1 bytes @ 0x6
  3236                           
  3237  0026                     ___awdiv@sign:	
  3238                           ; 1 bytes @ 0x6
  3239                           
  3240                           
  3241                           ; 1 bytes @ 0x6
  3242  0026                     	ds	1
  3243  0027                     CC2500_InitSetREG@temp2:	
  3244  0027                     CC2500_InitPATable@loop_d:	
  3245                           ; 1 bytes @ 0x7
  3246                           
  3247  0027                     DelayTimejudge@j:	
  3248                           ; 1 bytes @ 0x7
  3249                           
  3250  0027                     _Sw_DimmerAdjFunc$5973:	
  3251                           ; 1 bytes @ 0x7
  3252                           
  3253  0027                     ___awdiv@quotient:	
  3254                           ; 1 bytes @ 0x7
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x7
  3258  0027                     	ds	1
  3259  0028                     ?___awtoft:	
  3260  0028                     CC2500_InitSetREG@loop_c:	
  3261                           ; 3 bytes @ 0x8
  3262                           
  3263  0028                     DelayTimejudge@k:	
  3264                           ; 1 bytes @ 0x8
  3265                           
  3266  0028                     Sw_DimmerAdjFunc@Idle:	
  3267                           ; 1 bytes @ 0x8
  3268                           
  3269  0028                     ___awtoft@c:	
  3270                           ; 1 bytes @ 0x8
  3271                           
  3272                           
  3273                           ; 2 bytes @ 0x8
  3274  0028                     	ds	1
  3275  0029                     ?_setBuz:	
  3276  0029                     ??_CC2500_PowerOnInitial:	
  3277                           ; 0 bytes @ 0x9
  3278                           
  3279  0029                     DelayTimejudge@value:	
  3280                           ; 0 bytes @ 0x9
  3281                           
  3282  0029                     Sw_DimmerAdjFunc@sw:	
  3283                           ; 1 bytes @ 0x9
  3284                           
  3285  0029                     setBuz@time:	
  3286                           ; 1 bytes @ 0x9
  3287                           
  3288                           
  3289                           ; 2 bytes @ 0x9
  3290  0029                     	ds	1
  3291  002A                     ?_setDelayOff_GO:	
  3292  002A                     setDelayOff_GO@command:	
  3293                           ; 0 bytes @ 0xA
  3294                           
  3295                           
  3296                           ; 1 bytes @ 0xA
  3297  002A                     	ds	1
  3298  002B                     ??_setBuz:	
  3299  002B                     ??___awtoft:	
  3300                           ; 0 bytes @ 0xB
  3301                           
  3302  002B                     setDelayOff_GO@value:	
  3303                           ; 0 bytes @ 0xB
  3304                           
  3305                           
  3306                           ; 1 bytes @ 0xB
  3307  002B                     	ds	1
  3308  002C                     ??_setDelayOff_GO:	
  3309  002C                     setBuz@count:	
  3310                           ; 0 bytes @ 0xC
  3311                           
  3312                           
  3313                           ; 1 bytes @ 0xC
  3314  002C                     	ds	1
  3315  002D                     ??_my_MainTimer:	
  3316  002D                     ??_setLog_Code:	
  3317                           ; 0 bytes @ 0xD
  3318                           
  3319  002D                     ___awtoft@sign:	
  3320                           ; 0 bytes @ 0xD
  3321                           
  3322                           
  3323                           ; 1 bytes @ 0xD
  3324  002D                     	ds	1
  3325  002E                     ?___ftdiv:	
  3326  002E                     ?___ftmul:	
  3327                           ; 3 bytes @ 0xE
  3328                           
  3329  002E                     setDelayOff_GO@sw:	
  3330                           ; 3 bytes @ 0xE
  3331                           
  3332  002E                     ___ftdiv@f2:	
  3333                           ; 1 bytes @ 0xE
  3334                           
  3335  002E                     ___ftmul@f1:	
  3336                           ; 3 bytes @ 0xE
  3337                           
  3338                           
  3339                           ; 3 bytes @ 0xE
  3340  002E                     	ds	3
  3341  0031                     ___ftdiv@f1:	
  3342  0031                     ___ftmul@f2:	
  3343                           ; 3 bytes @ 0x11
  3344                           
  3345                           
  3346                           ; 3 bytes @ 0x11
  3347  0031                     	ds	3
  3348  0034                     ??___ftdiv:	
  3349  0034                     ??___ftmul:	
  3350                           ; 0 bytes @ 0x14
  3351                           
  3352                           
  3353                           ; 0 bytes @ 0x14
  3354  0034                     	ds	4
  3355  0038                     ___ftdiv@cntr:	
  3356  0038                     ___ftmul@exp:	
  3357                           ; 1 bytes @ 0x18
  3358                           
  3359                           
  3360                           ; 1 bytes @ 0x18
  3361  0038                     	ds	1
  3362  0039                     ___ftdiv@f3:	
  3363  0039                     ___ftmul@f3_as_product:	
  3364                           ; 3 bytes @ 0x19
  3365                           
  3366                           
  3367                           ; 3 bytes @ 0x19
  3368  0039                     	ds	3
  3369  003C                     ___ftdiv@exp:	
  3370  003C                     ___ftmul@cntr:	
  3371                           ; 1 bytes @ 0x1C
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x1C
  3375  003C                     	ds	1
  3376  003D                     ___ftdiv@sign:	
  3377  003D                     ___ftmul@sign:	
  3378                           ; 1 bytes @ 0x1D
  3379                           
  3380                           
  3381                           ; 1 bytes @ 0x1D
  3382  003D                     	ds	1
  3383  003E                     ?___ftadd:	
  3384  003E                     ___ftadd@f1:	
  3385                           ; 3 bytes @ 0x1E
  3386                           
  3387                           
  3388                           ; 3 bytes @ 0x1E
  3389  003E                     	ds	3
  3390  0041                     ___ftadd@f2:	
  3391                           
  3392                           ; 3 bytes @ 0x21
  3393  0041                     	ds	3
  3394  0044                     ??___ftadd:	
  3395                           
  3396                           ; 0 bytes @ 0x24
  3397  0044                     	ds	4
  3398  0048                     ___ftadd@sign:	
  3399                           
  3400                           ; 1 bytes @ 0x28
  3401  0048                     	ds	1
  3402  0049                     ___ftadd@exp2:	
  3403                           
  3404                           ; 1 bytes @ 0x29
  3405  0049                     	ds	1
  3406  004A                     ___ftadd@exp1:	
  3407                           
  3408                           ; 1 bytes @ 0x2A
  3409  004A                     	ds	1
  3410  004B                     ?___fttol:	
  3411  004B                     ___fttol@f1:	
  3412                           ; 4 bytes @ 0x2B
  3413                           
  3414                           
  3415                           ; 3 bytes @ 0x2B
  3416  004B                     	ds	4
  3417  004F                     ??___fttol:	
  3418                           
  3419                           ; 0 bytes @ 0x2F
  3420  004F                     	ds	4
  3421  0053                     ___fttol@sign1:	
  3422                           
  3423                           ; 1 bytes @ 0x33
  3424  0053                     	ds	1
  3425  0054                     ___fttol@lval:	
  3426                           
  3427                           ; 4 bytes @ 0x34
  3428  0054                     	ds	4
  3429  0058                     ___fttol@exp1:	
  3430                           
  3431                           ; 1 bytes @ 0x38
  3432  0058                     	ds	1
  3433  0059                     ??_getPercentValue:	
  3434  0059                     ??_setPercentValue:	
  3435                           ; 0 bytes @ 0x39
  3436                           
  3437  0059                     setPercentValue@value:	
  3438                           ; 0 bytes @ 0x39
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x39
  3442  0059                     	ds	1
  3443  005A                     setPercentValue@i:	
  3444                           
  3445                           ; 3 bytes @ 0x3A
  3446  005A                     	ds	1
  3447  005B                     getPercentValue@value:	
  3448                           
  3449                           ; 1 bytes @ 0x3B
  3450  005B                     	ds	1
  3451  005C                     getPercentValue@i:	
  3452                           
  3453                           ; 3 bytes @ 0x3C
  3454  005C                     	ds	1
  3455  005D                     ?_setRF_DimmerLights:	
  3456  005D                     ??_Flash_Memory_Initialization:	
  3457                           ; 0 bytes @ 0x3D
  3458                           
  3459  005D                     setRF_DimmerLights@on:	
  3460                           ; 0 bytes @ 0x3D
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x3D
  3464  005D                     	ds	1
  3465  005E                     ??_setRF_DimmerLights:	
  3466  005E                     Flash_Memory_Initialization@i:	
  3467                           ; 0 bytes @ 0x3E
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x3E
  3471  005E                     	ds	1
  3472  005F                     ??_setDimmerLights_AdjRF:	
  3473                           
  3474                           ; 0 bytes @ 0x3F
  3475  005F                     	ds	1
  3476  0060                     setDimmerLights_AdjRF@lights:	
  3477  0060                     setRF_DimmerLights@status:	
  3478                           ; 1 bytes @ 0x40
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x40
  3482  0060                     	ds	1
  3483  0061                     ??_setRF_DimmerValue:	
  3484  0061                     setRF_DimmerLights@lights:	
  3485                           ; 0 bytes @ 0x41
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x41
  3489  0061                     	ds	1
  3490  0062                     ??_DlyOff_Main:	
  3491  0062                     ?_setDimmerLights_Adj:	
  3492                           ; 0 bytes @ 0x42
  3493                           
  3494  0062                     ??_setRFSW_Control:	
  3495                           ; 0 bytes @ 0x42
  3496                           
  3497  0062                     ??_Sw_DimmerOnFunc:	
  3498                           ; 0 bytes @ 0x42
  3499                           
  3500  0062                     ??_Sw_DimmerOffFunc:	
  3501                           ; 0 bytes @ 0x42
  3502                           
  3503  0062                     setDimmerLights_Adj@status:	
  3504                           ; 0 bytes @ 0x42
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0x42
  3508  0062                     	ds	1
  3509  0063                     ??_setDimmerLights_Adj:	
  3510  0063                     setRFSW_Control@sw:	
  3511                           ; 0 bytes @ 0x43
  3512                           
  3513  0063                     setRF_DimmerValue@lights:	
  3514                           ; 1 bytes @ 0x43
  3515                           
  3516  0063                     _Sw_DimmerOnFunc$5959:	
  3517                           ; 1 bytes @ 0x43
  3518                           
  3519                           
  3520                           ; 1 bytes @ 0x43
  3521  0063                     	ds	1
  3522  0064                     ??_setRFSW_AdjControl:	
  3523  0064                     DlyOff_Main@sw:	
  3524                           ; 0 bytes @ 0x44
  3525                           
  3526  0064                     setDimmerLights_Adj@lights:	
  3527                           ; 1 bytes @ 0x44
  3528                           
  3529  0064                     _Sw_DimmerOnFunc$5960:	
  3530                           ; 1 bytes @ 0x44
  3531                           
  3532  0064                     Sw_DimmerOffFunc@sw:	
  3533                           ; 1 bytes @ 0x44
  3534                           
  3535                           
  3536                           ; 1 bytes @ 0x44
  3537  0064                     	ds	1
  3538  0065                     ??_setDimmerLights_Main:	
  3539  0065                     ??_DelayOff_Main:	
  3540                           ; 0 bytes @ 0x45
  3541                           
  3542  0065                     _Sw_DimmerOnFunc$5961:	
  3543                           ; 0 bytes @ 0x45
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x45
  3547  0065                     	ds	1
  3548  0066                     _setDimmerLights_Main$2350:	
  3549  0066                     setRFSW_AdjControl@sw:	
  3550                           ; 1 bytes @ 0x46
  3551                           
  3552  0066                     Sw_DimmerOnFunc@Idle:	
  3553                           ; 1 bytes @ 0x46
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0x46
  3557  0066                     	ds	1
  3558  0067                     ??_setRF_Main:	
  3559  0067                     ??_getRxData:	
  3560                           ; 0 bytes @ 0x47
  3561                           
  3562  0067                     ??_setControl_Lights_Table:	
  3563                           ; 0 bytes @ 0x47
  3564                           
  3565  0067                     _setDimmerLights_Main$2358:	
  3566                           ; 0 bytes @ 0x47
  3567                           
  3568  0067                     Sw_DimmerOnFunc@sw:	
  3569                           ; 1 bytes @ 0x47
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x47
  3573  0067                     	ds	1
  3574  0068                     ??_setSw_Main:	
  3575  0068                     _setDimmerLights_Main$2359:	
  3576                           ; 0 bytes @ 0x48
  3577                           
  3578  0068                     _setRF_Main$5021:	
  3579                           ; 1 bytes @ 0x48
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x48
  3583  0068                     	ds	1
  3584  0069                     ??_RF_Main:	
  3585  0069                     setDimmerLights_Main@clear:	
  3586                           ; 0 bytes @ 0x49
  3587                           
  3588                           
  3589                           ; 1 bytes @ 0x49
  3590  0069                     	ds	1
  3591  006A                     setDimmerLights_Main@lights:	
  3592  006A                     setSw_Main@sw:	
  3593                           ; 1 bytes @ 0x4A
  3594                           
  3595                           
  3596                           ; 1 bytes @ 0x4A
  3597  006A                     	ds	1
  3598  006B                     ??_Switch_Main:	
  3599  006B                     ??_DimmerLights_Main:	
  3600                           ; 0 bytes @ 0x4B
  3601                           
  3602  006B                     ??_main:	
  3603                           ; 0 bytes @ 0x4B
  3604                           
  3605                           
  3606                           	psect	maintext
  3607  155A                     __pmaintext:	
  3608                           ; 0 bytes @ 0x4B
  3609 ;;
  3610 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3611 ;;
  3612 ;; *************** function _main *****************
  3613 ;; Defined at:
  3614 ;;		line 7 in file "../src/Main_B1.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  argc            2    0[BANK3 ] int 
  3617 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2    0[BANK3 ] int 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 17F/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3629 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3633 ;;Total ram usage:        4 bytes
  3634 ;; Hardware stack levels required when called:   15
  3635 ;; This function calls:
  3636 ;;		_Buzzer_Initialization
  3637 ;;		_Buzzer_Main
  3638 ;;		_CC2500_PowerOnInitial
  3639 ;;		_DelayOff_Initialization
  3640 ;;		_DelayOff_Main
  3641 ;;		_DimmerLights_Initialization
  3642 ;;		_DimmerLights_Main
  3643 ;;		_Flash_Memory_Initialization
  3644 ;;		_Flash_Memory_Main
  3645 ;;		_LED_Initialization
  3646 ;;		_LED_Main
  3647 ;;		_Mcu_Initialization
  3648 ;;		_RF_Initialization
  3649 ;;		_RF_Main
  3650 ;;		_Switch_Initialization
  3651 ;;		_Switch_Main
  3652 ;;		_WDT_Main
  3653 ;;		_myMain_Initialization
  3654 ;;		_my_MainTimer
  3655 ;; This function is called by:
  3656 ;;		Startup code after reset
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _main
  3662  155A                     _main:	
  3663                           
  3664                           ;Main_B1.c: 8: myMain_Initialization();
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3668  155A  319F  273A  3195   	fcall	_myMain_Initialization
  3669                           
  3670                           ;Main_B1.c: 9: Mcu_Initialization();
  3671  155D  319F  27DC  3195   	fcall	_Mcu_Initialization
  3672                           
  3673                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3674  1560  3185  2531  3195   	fcall	_Flash_Memory_Initialization
  3675                           
  3676                           ;Main_B1.c: 11: LED_Initialization();
  3677  1563  319F  2769  3195   	fcall	_LED_Initialization
  3678                           
  3679                           ;Main_B1.c: 12: Buzzer_Initialization();
  3680  1566  319E  2621  3195   	fcall	_Buzzer_Initialization
  3681                           
  3682                           ;Main_B1.c: 14: ;;
  3683                           ;Main_B1.c: 15: ;;
  3684                           ;Main_B1.c: 16: ;;
  3685                           ;Main_B1.c: 17: ;;
  3686                           ;Main_B1.c: 18: DelayOff_Initialization();
  3687  1569  319E  2698  3195   	fcall	_DelayOff_Initialization
  3688                           
  3689                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3690  156C  3192  2274  3195   	fcall	_DimmerLights_Initialization
  3691                           
  3692                           ;Main_B1.c: 21: ;;
  3693                           ;Main_B1.c: 22: ;;
  3694                           ;Main_B1.c: 23: ;;
  3695                           ;Main_B1.c: 24: Switch_Initialization();
  3696  156F  319F  27CB  3195   	fcall	_Switch_Initialization
  3697                           
  3698                           ;Main_B1.c: 25: RF_Initialization();
  3699  1572  319E  2624  3195   	fcall	_RF_Initialization
  3700                           
  3701                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3702  1575  3190  20D2  3195   	fcall	_CC2500_PowerOnInitial
  3703  1578                     l1613:	
  3704                           ;Main_B1.c: 27: ;;
  3705                           ;Main_B1.c: 29: while (1) {
  3706                           
  3707                           
  3708                           ;Main_B1.c: 56: }
  3709                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3710  1578  0021               	movlb	1	; select bank1
  3711  1579  1C48               	btfss	_Timer1^(0+128),0
  3712  157A  2D78               	goto	l1613
  3713                           
  3714                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3715  157B  1048               	bcf	_Timer1^(0+128),0
  3716                           
  3717                           ;Main_B1.c: 94: my_MainTimer();
  3718  157C  3197  2751  3195   	fcall	_my_MainTimer
  3719                           
  3720                           ;Main_B1.c: 95: WDT_Main();
  3721  157F  3190  2070  3195   	fcall	_WDT_Main
  3722                           
  3723                           ;Main_B1.c: 96: ;;
  3724                           ;Main_B1.c: 97: ;;
  3725                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3726  1582  0021               	movlb	1	; select bank1
  3727  1583  1C20               	btfss	_myMain^(0+128),0
  3728  1584  2D78               	goto	l1613
  3729                           
  3730                           ;Main_B1.c: 99: Flash_Memory_Main();
  3731  1585  3191  21F4  3195   	fcall	_Flash_Memory_Main
  3732                           
  3733                           ;Main_B1.c: 101: LED_Main();
  3734  1588  319F  2779  3195   	fcall	_LED_Main
  3735                           
  3736                           ;Main_B1.c: 102: Buzzer_Main();
  3737  158B  3196  2668  3195   	fcall	_Buzzer_Main
  3738                           
  3739                           ;Main_B1.c: 104: ;;
  3740                           ;Main_B1.c: 105: ;;
  3741                           ;Main_B1.c: 106: ;;
  3742                           ;Main_B1.c: 107: ;;
  3743                           ;Main_B1.c: 109: ;;
  3744                           ;Main_B1.c: 110: DimmerLights_Main();
  3745  158E  319F  271C  3195   	fcall	_DimmerLights_Main
  3746                           
  3747                           ;Main_B1.c: 111: Switch_Main();
  3748  1591  319E  26C8  3195   	fcall	_Switch_Main
  3749                           
  3750                           ;Main_B1.c: 112: ;;
  3751                           ;Main_B1.c: 113: ;;
  3752                           ;Main_B1.c: 115: RF_Main();
  3753  1594  319E  2627  3195   	fcall	_RF_Main
  3754                           
  3755                           ;Main_B1.c: 116: DelayOff_Main();
  3756  1597  319E  26A4  3195   	fcall	_DelayOff_Main
  3757                           
  3758                           ;Main_B1.c: 117: ;;
  3759  159A  2D78               	goto	l1613
  3760  159B                     __end_of_main:	
  3761                           ;Main_B1.c: 125: }
  3762                           ;Main_B1.c: 126: }
  3763                           ;Main_B1.c: 160: }
  3764                           ;Main_B1.c: 161: return (0);
  3765                           ;	Return value of _main is never used
  3766                           
  3767                           
  3768                           	psect	text1
  3769  1751                     __ptext1:	
  3770 ;; *************** function _my_MainTimer *****************
  3771 ;; Defined at:
  3772 ;;		line 180 in file "../src/Main_B1.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;Total ram usage:        0 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    7
  3793 ;; This function calls:
  3794 ;;		_setBuz
  3795 ;;		_setRF_Enable
  3796 ;;		_setSw_Enable
  3797 ;; This function is called by:
  3798 ;;		_main
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           
  3803                           ;psect for function _my_MainTimer
  3804  1751                     _my_MainTimer:	
  3805                           
  3806                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3810  1751  0021               	movlb	1	; select bank1
  3811  1752  1820               	btfsc	_myMain^(0+128),0
  3812  1753  2F7B               	goto	l9705
  3813                           
  3814                           ;Main_B1.c: 183: myMain.PowerCount++;
  3815  1754  3001               	movlw	1
  3816  1755  07A2               	addwf	(_myMain^(0+128)+2),f
  3817  1756  3000               	movlw	0
  3818  1757  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3819                           
  3820                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  3821  1758  3002               	movlw	2
  3822  1759  3EA0               	addlw	_myMain& (0+255)
  3823  175A  0086               	movwf	6
  3824  175B  0187               	clrf	7
  3825  175C  3F40               	moviw [0]fsr1
  3826  175D  3A96               	xorlw	150
  3827  175E  1D03               	skipz
  3828  175F  2F62               	goto	u10445
  3829  1760  3F41               	moviw [1]fsr1
  3830  1761  3A00               	xorlw	0
  3831  1762                     u10445:	
  3832  1762  1D03               	skipz
  3833  1763  2F93               	goto	l9715
  3834                           
  3835                           ;Main_B1.c: 185: {
  3836                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  3837  1764  01A2               	clrf	(_myMain^(0+128)+2)
  3838  1765  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3839                           
  3840                           ;Main_B1.c: 187: myMain.PowerON = 1;
  3841  1766  1420               	bsf	_myMain^(0+128),0
  3842                           
  3843                           ;Main_B1.c: 190: ;;
  3844                           ;Main_B1.c: 194: ;;
  3845                           ;Main_B1.c: 200: setBuz(3, 50);
  3846  1767  3032               	movlw	50
  3847  1768  0020               	movlb	0	; select bank0
  3848  1769  00A9               	movwf	setBuz@time
  3849  176A  3000               	movlw	0
  3850  176B  00AA               	movwf	setBuz@time+1
  3851  176C  3003               	movlw	3
  3852  176D  3197  27A7  3197   	fcall	_setBuz
  3853                           
  3854                           ;Main_B1.c: 201: myMain.SelfTest = 1;
  3855  1770  0021               	movlb	1	; select bank1
  3856  1771  1620               	bsf	_myMain^(0+128),4
  3857                           
  3858                           ;Main_B1.c: 203: setSw_Enable(1);
  3859  1772  3001               	movlw	1
  3860  1773  3193  2348  3197   	fcall	_setSw_Enable
  3861                           
  3862                           ;Main_B1.c: 206: setRF_Enable(1);
  3863  1776  3001               	movlw	1
  3864  1777  319E  26E1  3197   	fcall	_setRF_Enable
  3865                           
  3866                           ;Main_B1.c: 210: }
  3867                           ;Main_B1.c: 211: } else {
  3868  177A  2F93               	goto	l9715
  3869  177B                     l9705:	
  3870                           
  3871                           ;Main_B1.c: 219: myMain.Count1++;
  3872  177B  3001               	movlw	1
  3873  177C  0021               	movlb	1	; select bank1
  3874  177D  07A6               	addwf	(_myMain^(0+128)+6),f
  3875  177E  3000               	movlw	0
  3876  177F  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3877                           
  3878                           ;Main_B1.c: 220: if (myMain.Count1 == 100)
  3879  1780  3006               	movlw	6
  3880  1781  3EA0               	addlw	_myMain& (0+255)
  3881  1782  0086               	movwf	6
  3882  1783  0187               	clrf	7
  3883  1784  3F40               	moviw [0]fsr1
  3884  1785  3A64               	xorlw	100
  3885  1786  1D03               	skipz
  3886  1787  2F8A               	goto	u10455
  3887  1788  3F41               	moviw [1]fsr1
  3888  1789  3A00               	xorlw	0
  3889  178A                     u10455:	
  3890  178A  1D03               	skipz
  3891  178B  2F93               	goto	l9715
  3892                           
  3893                           ;Main_B1.c: 221: {
  3894                           ;Main_B1.c: 222: myMain.Count1 = 0;
  3895  178C  01A6               	clrf	(_myMain^(0+128)+6)
  3896  178D  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3897                           
  3898                           ;Main_B1.c: 234: if (myMain.Flag) {
  3899  178E  1CA0               	btfss	_myMain^(0+128),1
  3900  178F  2F92               	goto	l1628
  3901                           
  3902                           ;Main_B1.c: 235: myMain.Flag = 0;
  3903  1790  10A0               	bcf	_myMain^(0+128),1
  3904                           
  3905                           ;Main_B1.c: 244: } else {
  3906  1791  2F93               	goto	l9715
  3907  1792                     l1628:	
  3908                           
  3909                           ;Main_B1.c: 245: myMain.Flag = 1;
  3910  1792  14A0               	bsf	_myMain^(0+128),1
  3911  1793                     l9715:	
  3912                           
  3913                           ;Main_B1.c: 254: }
  3914                           ;Main_B1.c: 255: }
  3915                           ;Main_B1.c: 257: }
  3916                           ;Main_B1.c: 259: myMain.Count2++;
  3917  1793  3001               	movlw	1
  3918  1794  0021               	movlb	1	; select bank1
  3919  1795  07A8               	addwf	(_myMain^(0+128)+8),f
  3920  1796  3000               	movlw	0
  3921  1797  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3922                           
  3923                           ;Main_B1.c: 260: if (myMain.Count2 == 50) {
  3924  1798  3008               	movlw	8
  3925  1799  3EA0               	addlw	_myMain& (0+255)
  3926  179A  0086               	movwf	6
  3927  179B  0187               	clrf	7
  3928  179C  3F40               	moviw [0]fsr1
  3929  179D  3A32               	xorlw	50
  3930  179E  1D03               	skipz
  3931  179F  2FA2               	goto	u10475
  3932  17A0  3F41               	moviw [1]fsr1
  3933  17A1  3A00               	xorlw	0
  3934  17A2                     u10475:	
  3935  17A2  1D03               	skipz
  3936  17A3  0008               	return
  3937                           
  3938                           ;Main_B1.c: 261: myMain.Count2 = 0;
  3939  17A4  01A8               	clrf	(_myMain^(0+128)+8)
  3940  17A5  01A9               	clrf	((_myMain+1)^(0+128)+8)
  3941  17A6  0008               	return
  3942  17A7                     __end_of_my_MainTimer:	
  3943                           
  3944                           	psect	text2
  3945  1348                     __ptext2:	
  3946 ;; *************** function _setSw_Enable *****************
  3947 ;; Defined at:
  3948 ;;		line 91 in file "../src/Switch_B1.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  command         1    wreg     unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  command         1    2[BANK0 ] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;		None               void
  3955 ;; Registers used:
  3956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;Total ram usage:        1 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    6
  3969 ;; This function calls:
  3970 ;;		_SwPointSelect
  3971 ;; This function is called by:
  3972 ;;		_my_MainTimer
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           
  3977                           ;psect for function _setSw_Enable
  3978  1348                     _setSw_Enable:	
  3979                           
  3980                           ;incstack = 0
  3981                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3982                           ;setSw_Enable@command stored from wreg
  3983  1348  0020               	movlb	0	; select bank0
  3984  1349  00A2               	movwf	setSw_Enable@command
  3985                           
  3986                           ;Switch_B1.c: 94: SwPointSelect(1);
  3987  134A  3001               	movlw	1
  3988  134B  3191  21B8  3193   	fcall	_SwPointSelect
  3989                           
  3990                           ;Switch_B1.c: 95: Sw->Enable = command;
  3991  134E  0020               	movlb	0	; select bank0
  3992  134F  086C               	movf	_Sw,w
  3993  1350  0086               	movwf	6
  3994  1351  3001               	movlw	1	; select bank2/3
  3995  1352  0087               	movwf	7
  3996  1353  0822               	movf	setSw_Enable@command,w
  3997  1354  1001               	bcf	1,0
  3998  1355  1D03               	skipz
  3999  1356  1401               	bsf	1,0
  4000                           
  4001                           ;Switch_B1.c: 99: SwPointSelect(2);
  4002  1357  3002               	movlw	2
  4003  1358  3191  21B8  3193   	fcall	_SwPointSelect
  4004                           
  4005                           ;Switch_B1.c: 100: Sw->Enable = command;
  4006  135B  0020               	movlb	0	; select bank0
  4007  135C  086C               	movf	_Sw,w
  4008  135D  0086               	movwf	6
  4009  135E  3001               	movlw	1	; select bank2/3
  4010  135F  0087               	movwf	7
  4011  1360  0822               	movf	setSw_Enable@command,w
  4012  1361  1001               	bcf	1,0
  4013  1362  1D03               	skipz
  4014  1363  1401               	bsf	1,0
  4015                           
  4016                           ;Switch_B1.c: 104: SwPointSelect(3);
  4017  1364  3003               	movlw	3
  4018  1365  3191  21B8         	fcall	_SwPointSelect
  4019                           
  4020                           ;Switch_B1.c: 105: Sw->Enable = command;
  4021  1367  0020               	movlb	0	; select bank0
  4022  1368  086C               	movf	_Sw,w
  4023  1369  0086               	movwf	6
  4024  136A  3001               	movlw	1	; select bank2/3
  4025  136B  0087               	movwf	7
  4026  136C  0822               	movf	setSw_Enable@command,w
  4027  136D  1001               	bcf	1,0
  4028  136E  1D03               	skipz
  4029  136F  1401               	bsf	1,0
  4030  1370  0008               	return
  4031  1371                     __end_of_setSw_Enable:	
  4032                           
  4033                           	psect	text3
  4034  1EE1                     __ptext3:	
  4035 ;; *************** function _setRF_Enable *****************
  4036 ;; Defined at:
  4037 ;;		line 227 in file "../src/RF_Control_B1.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  command         1    wreg     unsigned char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  command         1    0[BANK0 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;		None               void
  4044 ;; Registers used:
  4045 ;;		wreg, status,2
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;Total ram usage:        1 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    5
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_my_MainTimer
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _setRF_Enable
  4067  1EE1                     _setRF_Enable:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4071                           ;setRF_Enable@command stored from wreg
  4072  1EE1  0020               	movlb	0	; select bank0
  4073  1EE2  00A0               	movwf	setRF_Enable@command
  4074                           
  4075                           ;RF_Control_B1.c: 228: RF1.Enable = command;
  4076  1EE3  0820               	movf	setRF_Enable@command,w
  4077  1EE4  0021               	movlb	1	; select bank1
  4078  1EE5  103C               	bcf	_RF1^(0+128),0
  4079  1EE6  1D03               	skipz
  4080  1EE7  143C               	bsf	_RF1^(0+128),0
  4081                           
  4082                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
  4083  1EE8  133C               	bcf	_RF1^(0+128),6
  4084                           
  4085                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
  4086  1EE9  113C               	bcf	_RF1^(0+128),2
  4087                           
  4088                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
  4089  1EEA  11BC               	bcf	_RF1^(0+128),3
  4090                           
  4091                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
  4092  1EEB  10BC               	bcf	_RF1^(0+128),1
  4093                           
  4094                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
  4095  1EEC  01C5               	clrf	(_RF1^(0+128)+9)
  4096                           
  4097                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
  4098  1EED  12BC               	bcf	_RF1^(0+128),5
  4099  1EEE  0008               	return
  4100  1EEF                     __end_of_setRF_Enable:	
  4101                           
  4102                           	psect	text4
  4103  1F3A                     __ptext4:	
  4104 ;; *************** function _myMain_Initialization *****************
  4105 ;; Defined at:
  4106 ;;		line 167 in file "../src/Main_B1.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;		None               void
  4113 ;; Registers used:
  4114 ;;		wreg, fsr1l, fsr1h
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;Total ram usage:        1 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    5
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _myMain_Initialization
  4136  1F3A                     _myMain_Initialization:	
  4137                           
  4138                           ;Main_B1.c: 169: product = &_product;
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4142  1F3A  3020               	movlw	__product& (0+255)
  4143  1F3B  0020               	movlb	0	; select bank0
  4144  1F3C  00A0               	movwf	??_myMain_Initialization
  4145  1F3D  0820               	movf	??_myMain_Initialization,w
  4146  1F3E  00ED               	movwf	_product
  4147                           
  4148                           ;Main_B1.c: 170: product->Data[20] = 211;
  4149  1F3F  30D3               	movlw	211
  4150  1F40  00A0               	movwf	??_myMain_Initialization
  4151  1F41  086D               	movf	_product,w
  4152  1F42  3E14               	addlw	20
  4153  1F43  0086               	movwf	6
  4154  1F44  3002               	movlw	2	; select bank4/5
  4155  1F45  0087               	movwf	7
  4156  1F46  0820               	movf	??_myMain_Initialization,w
  4157  1F47  0081               	movwf	1
  4158  1F48  0008               	return
  4159  1F49                     __end_of_myMain_Initialization:	
  4160                           
  4161                           	psect	text5
  4162  1070                     __ptext5:	
  4163 ;; *************** function _WDT_Main *****************
  4164 ;; Defined at:
  4165 ;;		line 1019 in file "../src/MCU_B1.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        1 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    6
  4186 ;; This function calls:
  4187 ;;		_WDT_Clearing
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _WDT_Main
  4195  1070                     _WDT_Main:	
  4196                           
  4197                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4201  1070  0021               	movlb	1	; select bank1
  4202  1071  1C4D               	btfss	_WDT^(0+128),0
  4203  1072  0008               	return
  4204                           
  4205                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4206  1073  3001               	movlw	1
  4207  1074  02CE               	subwf	(_WDT^(0+128)+1),f
  4208  1075  084E               	movf	(_WDT^(0+128)+1),w
  4209  1076  3AFF               	xorlw	255
  4210  1077  1903               	skipnz
  4211  1078  0008               	return
  4212                           
  4213                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4214  1079  3064               	movlw	100
  4215  107A  0020               	movlb	0	; select bank0
  4216  107B  00A0               	movwf	??_WDT_Main
  4217  107C  0820               	movf	??_WDT_Main,w
  4218  107D  0021               	movlb	1	; select bank1
  4219  107E  00CE               	movwf	(_WDT^(0+128)+1)
  4220                           
  4221                           ;MCU_B1.c: 1023: WDT_Clearing();
  4222  107F  3180  2002         	fcall	_WDT_Clearing
  4223  1081  0008               	return
  4224  1082                     __end_of_WDT_Main:	
  4225                           
  4226                           	psect	text6
  4227  0002                     __ptext6:	
  4228 ;; *************** function _WDT_Clearing *****************
  4229 ;; Defined at:
  4230 ;;		line 1029 in file "../src/MCU_B1.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;		None               void
  4237 ;; Registers used:
  4238 ;;		None
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    5
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_WDT_Main
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _WDT_Clearing
  4260  0002                     _WDT_Clearing:	
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _WDT_Clearing: []
  4264  0002  0064               	clrwdt	;# 
  4265  0003  0008               	return
  4266  0004                     __end_of_WDT_Clearing:	
  4267                           
  4268                           	psect	text7
  4269  1EC8                     __ptext7:	
  4270 ;; *************** function _Switch_Main *****************
  4271 ;; Defined at:
  4272 ;;		line 67 in file "../src/Switch_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        0 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:   11
  4293 ;; This function calls:
  4294 ;;		_setSw_Main
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _Switch_Main
  4302  1EC8                     _Switch_Main:	
  4303                           
  4304                           ;Switch_B1.c: 69: setSw_Main(1);
  4305                           
  4306                           ;incstack = 0
  4307                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4308  1EC8  3001               	movlw	1
  4309  1EC9  3182  2210  319E   	fcall	_setSw_Main
  4310                           
  4311                           ;Switch_B1.c: 73: setSw_Main(2);
  4312  1ECC  3002               	movlw	2
  4313  1ECD  3182  2210  319E   	fcall	_setSw_Main
  4314                           
  4315                           ;Switch_B1.c: 77: setSw_Main(3);
  4316  1ED0  3003               	movlw	3
  4317  1ED1  3182  2210         	fcall	_setSw_Main
  4318  1ED3  0008               	return
  4319  1ED4                     __end_of_Switch_Main:	
  4320                           
  4321                           	psect	text8
  4322  0210                     __ptext8:	
  4323 ;; *************** function _setSw_Main *****************
  4324 ;; Defined at:
  4325 ;;		line 117 in file "../src/Switch_B1.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  sw              1    wreg     unsigned char 
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  sw              1   74[BANK0 ] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;		None               void
  4332 ;; Registers used:
  4333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;Total ram usage:        3 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:   10
  4346 ;; This function calls:
  4347 ;;		_SwPointSelect
  4348 ;;		_Sw_DimmerAdjFunc
  4349 ;;		_Sw_DimmerOffFunc
  4350 ;;		_Sw_DimmerOnFunc
  4351 ;;		_setBuz
  4352 ;;		_setRF_Learn
  4353 ;; This function is called by:
  4354 ;;		_Switch_Main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _setSw_Main
  4360  0210                     _setSw_Main:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4364                           ;setSw_Main@sw stored from wreg
  4365  0210  0020               	movlb	0	; select bank0
  4366  0211  00EA               	movwf	setSw_Main@sw
  4367                           
  4368                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4369  0212  086A               	movf	setSw_Main@sw,w
  4370  0213  3191  21B8  3182   	fcall	_SwPointSelect
  4371                           
  4372                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4373  0216  0020               	movlb	0	; select bank0
  4374  0217  086C               	movf	_Sw,w
  4375  0218  0086               	movwf	6
  4376  0219  3001               	movlw	1	; select bank2/3
  4377  021A  0087               	movwf	7
  4378  021B  1C01               	btfss	1,0
  4379  021C  0008               	return
  4380                           
  4381                           ;Switch_B1.c: 121: if (sw == 1) {
  4382  021D  086A               	movf	setSw_Main@sw,w
  4383  021E  3A01               	xorlw	1
  4384  021F  1D03               	skipz
  4385  0220  2A29               	goto	l9461
  4386                           
  4387                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4388  0221  086C               	movf	_Sw,w
  4389  0222  0086               	movwf	6
  4390  0223  3001               	movlw	1	; select bank2/3
  4391  0224  0087               	movwf	7
  4392  0225  1081               	bcf	1,1
  4393  0226  180C               	btfsc	12,0	;volatile
  4394  0227  1481               	bsf	1,1
  4395                           
  4396                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4397  0228  2A42               	goto	l2699
  4398  0229                     l9461:	
  4399  0229  0020               	movlb	0	; select bank0
  4400  022A  086A               	movf	setSw_Main@sw,w
  4401  022B  3A02               	xorlw	2
  4402  022C  1D03               	skipz
  4403  022D  2A36               	goto	l9465
  4404                           
  4405                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4406  022E  086C               	movf	_Sw,w
  4407  022F  0086               	movwf	6
  4408  0230  3001               	movlw	1	; select bank2/3
  4409  0231  0087               	movwf	7
  4410  0232  1081               	bcf	1,1
  4411  0233  1B0C               	btfsc	12,6	;volatile
  4412  0234  1481               	bsf	1,1
  4413                           
  4414                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4415  0235  2A42               	goto	l2699
  4416  0236                     l9465:	
  4417  0236  0020               	movlb	0	; select bank0
  4418  0237  086A               	movf	setSw_Main@sw,w
  4419  0238  3A03               	xorlw	3
  4420  0239  1D03               	skipz
  4421  023A  2A42               	goto	l2699
  4422                           
  4423                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4424  023B  086C               	movf	_Sw,w
  4425  023C  0086               	movwf	6
  4426  023D  3001               	movlw	1	; select bank2/3
  4427  023E  0087               	movwf	7
  4428  023F  1081               	bcf	1,1
  4429  0240  1A0C               	btfsc	12,4	;volatile
  4430  0241  1481               	bsf	1,1
  4431  0242                     l2699:	
  4432                           
  4433                           ;Switch_B1.c: 127: }
  4434                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4435  0242  0020               	movlb	0	; select bank0
  4436  0243  086C               	movf	_Sw,w
  4437  0244  0086               	movwf	6
  4438  0245  3001               	movlw	1	; select bank2/3
  4439  0246  0087               	movwf	7
  4440  0247  1C81               	btfss	1,1
  4441  0248  2B0D               	goto	l9515
  4442                           
  4443                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4444  0249  086C               	movf	_Sw,w
  4445  024A  0086               	movwf	6
  4446  024B  3001               	movlw	1	; select bank2/3
  4447  024C  0087               	movwf	7
  4448  024D  1901               	btfsc	1,2
  4449  024E  2A70               	goto	l9481
  4450                           
  4451                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4452  024F  3001               	movlw	1
  4453  0250  00E8               	movwf	??_setSw_Main
  4454  0251  086C               	movf	_Sw,w
  4455  0252  3E02               	addlw	2
  4456  0253  0086               	movwf	6
  4457  0254  3001               	movlw	1	; select bank2/3
  4458  0255  0087               	movwf	7
  4459  0256  0868               	movf	??_setSw_Main,w
  4460  0257  0781               	addwf	1,f
  4461                           
  4462                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4463  0258  086C               	movf	_Sw,w
  4464  0259  3E02               	addlw	2
  4465  025A  0086               	movwf	6
  4466  025B  3001               	movlw	1	; select bank2/3
  4467  025C  0087               	movwf	7
  4468  025D  3005               	movlw	5
  4469  025E  0201               	subwf	1,w
  4470  025F  1C03               	skipc
  4471  0260  0008               	return
  4472                           
  4473                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4474  0261  086C               	movf	_Sw,w
  4475  0262  3E02               	addlw	2
  4476  0263  0086               	movwf	6
  4477  0264  3001               	movlw	1	; select bank2/3
  4478  0265  0087               	movwf	7
  4479  0266  0181               	clrf	1
  4480                           
  4481                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4482  0267  086C               	movf	_Sw,w
  4483  0268  0086               	movwf	6
  4484  0269  3001               	movlw	1	; select bank2/3
  4485  026A  0087               	movwf	7
  4486  026B  1501               	bsf	1,2
  4487                           
  4488                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4489  026C  086A               	movf	setSw_Main@sw,w
  4490  026D  318D  2590         	fcall	_Sw_DimmerOnFunc
  4491                           
  4492                           ;Switch_B1.c: 173: }
  4493                           ;Switch_B1.c: 174: } else {
  4494  026F  0008               	return
  4495  0270                     l9481:	
  4496                           
  4497                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4498  0270  0020               	movlb	0	; select bank0
  4499  0271  086C               	movf	_Sw,w
  4500  0272  0086               	movwf	6
  4501  0273  3001               	movlw	1	; select bank2/3
  4502  0274  0087               	movwf	7
  4503  0275  1981               	btfsc	1,3
  4504  0276  2A9D               	goto	l9491
  4505                           
  4506                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4507  0277  086C               	movf	_Sw,w
  4508  0278  3E03               	addlw	3
  4509  0279  0086               	movwf	6
  4510  027A  3001               	movlw	1	; select bank2/3
  4511  027B  0087               	movwf	7
  4512  027C  3001               	movlw	1
  4513  027D  0781               	addwf	1,f
  4514  027E  3141               	addfsr 1,1
  4515  027F  1803               	skipnc
  4516  0280  0A81               	incf	1,f
  4517                           
  4518                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4519  0281  086C               	movf	_Sw,w
  4520  0282  3E03               	addlw	3
  4521  0283  0086               	movwf	6
  4522  0284  3001               	movlw	1	; select bank2/3
  4523  0285  0087               	movwf	7
  4524  0286  3F40               	moviw [0]fsr1
  4525  0287  00E8               	movwf	??_setSw_Main
  4526  0288  3F41               	moviw [1]fsr1
  4527  0289  00E9               	movwf	??_setSw_Main+1
  4528  028A  3000               	movlw	0
  4529  028B  0269               	subwf	??_setSw_Main+1,w
  4530  028C  3096               	movlw	150
  4531  028D  1903               	skipnz
  4532  028E  0268               	subwf	??_setSw_Main,w
  4533  028F  1C03               	skipc
  4534  0290  0008               	return
  4535                           
  4536                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4537  0291  086C               	movf	_Sw,w
  4538  0292  3E03               	addlw	3
  4539  0293  0086               	movwf	6
  4540  0294  3001               	movlw	1	; select bank2/3
  4541  0295  0087               	movwf	7
  4542  0296  3000               	movlw	0
  4543  0297  3FC0               	movwi [0]fsr1
  4544  0298  3FC1               	movwi [1]fsr1
  4545                           
  4546                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4547  0299  086A               	movf	setSw_Main@sw,w
  4548  029A  3189  2131         	fcall	_Sw_DimmerAdjFunc
  4549                           
  4550                           ;Switch_B1.c: 184: }
  4551                           ;Switch_B1.c: 185: } else {
  4552  029C  0008               	return
  4553  029D                     l9491:	
  4554                           
  4555                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4556  029D  0020               	movlb	0	; select bank0
  4557  029E  086C               	movf	_Sw,w
  4558  029F  0086               	movwf	6
  4559  02A0  3001               	movlw	1	; select bank2/3
  4560  02A1  0087               	movwf	7
  4561  02A2  1A01               	btfsc	1,4
  4562  02A3  2ADB               	goto	l9505
  4563                           
  4564                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4565  02A4  086C               	movf	_Sw,w
  4566  02A5  3E05               	addlw	5
  4567  02A6  0086               	movwf	6
  4568  02A7  3001               	movlw	1	; select bank2/3
  4569  02A8  0087               	movwf	7
  4570  02A9  3001               	movlw	1
  4571  02AA  0781               	addwf	1,f
  4572  02AB  3141               	addfsr 1,1
  4573  02AC  1803               	skipnc
  4574  02AD  0A81               	incf	1,f
  4575                           
  4576                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4577  02AE  086C               	movf	_Sw,w
  4578  02AF  3E05               	addlw	5
  4579  02B0  0086               	movwf	6
  4580  02B1  3001               	movlw	1	; select bank2/3
  4581  02B2  0087               	movwf	7
  4582  02B3  3F40               	moviw [0]fsr1
  4583  02B4  00E8               	movwf	??_setSw_Main
  4584  02B5  3F41               	moviw [1]fsr1
  4585  02B6  00E9               	movwf	??_setSw_Main+1
  4586  02B7  3000               	movlw	0
  4587  02B8  0269               	subwf	??_setSw_Main+1,w
  4588  02B9  3096               	movlw	150
  4589  02BA  1903               	skipnz
  4590  02BB  0268               	subwf	??_setSw_Main,w
  4591  02BC  1C03               	skipc
  4592  02BD  0008               	return
  4593                           
  4594                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4595  02BE  086C               	movf	_Sw,w
  4596  02BF  3E05               	addlw	5
  4597  02C0  0086               	movwf	6
  4598  02C1  3001               	movlw	1	; select bank2/3
  4599  02C2  0087               	movwf	7
  4600  02C3  3000               	movlw	0
  4601  02C4  3FC0               	movwi [0]fsr1
  4602  02C5  3FC1               	movwi [1]fsr1
  4603                           
  4604                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4605  02C6  086C               	movf	_Sw,w
  4606  02C7  0086               	movwf	6
  4607  02C8  3001               	movlw	1	; select bank2/3
  4608  02C9  0087               	movwf	7
  4609  02CA  1601               	bsf	1,4
  4610                           
  4611                           ;Switch_B1.c: 193: setRF_Learn(1);
  4612  02CB  3001               	movlw	1
  4613  02CC  319E  2659  3182   	fcall	_setRF_Learn
  4614                           
  4615                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4616  02CF  0021               	movlb	1	; select bank1
  4617  02D0  1EA0               	btfss	_myMain^(0+128),5
  4618  02D1  0008               	return
  4619                           
  4620                           ;Switch_B1.c: 196: setBuz(2, 100);
  4621  02D2  3064               	movlw	100
  4622  02D3  0020               	movlb	0	; select bank0
  4623  02D4  00A9               	movwf	setBuz@time
  4624  02D5  3000               	movlw	0
  4625  02D6  00AA               	movwf	setBuz@time+1
  4626  02D7  3002               	movlw	2
  4627  02D8  3197  27A7         	fcall	_setBuz
  4628                           
  4629                           ;Switch_B1.c: 197: }
  4630                           ;Switch_B1.c: 199: }
  4631                           ;Switch_B1.c: 200: } else {
  4632  02DA  0008               	return
  4633  02DB                     l9505:	
  4634                           
  4635                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4636  02DB  0020               	movlb	0	; select bank0
  4637  02DC  086C               	movf	_Sw,w
  4638  02DD  0086               	movwf	6
  4639  02DE  3001               	movlw	1	; select bank2/3
  4640  02DF  0087               	movwf	7
  4641  02E0  1A81               	btfsc	1,5
  4642  02E1  0008               	return
  4643                           
  4644                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4645  02E2  086C               	movf	_Sw,w
  4646  02E3  3E07               	addlw	7
  4647  02E4  0086               	movwf	6
  4648  02E5  3001               	movlw	1	; select bank2/3
  4649  02E6  0087               	movwf	7
  4650  02E7  3001               	movlw	1
  4651  02E8  0781               	addwf	1,f
  4652  02E9  3141               	addfsr 1,1
  4653  02EA  1803               	skipnc
  4654  02EB  0A81               	incf	1,f
  4655                           
  4656                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4657  02EC  086C               	movf	_Sw,w
  4658  02ED  3E07               	addlw	7
  4659  02EE  0086               	movwf	6
  4660  02EF  3001               	movlw	1	; select bank2/3
  4661  02F0  0087               	movwf	7
  4662  02F1  3F40               	moviw [0]fsr1
  4663  02F2  00E8               	movwf	??_setSw_Main
  4664  02F3  3F41               	moviw [1]fsr1
  4665  02F4  00E9               	movwf	??_setSw_Main+1
  4666  02F5  3001               	movlw	1
  4667  02F6  0269               	subwf	??_setSw_Main+1,w
  4668  02F7  302C               	movlw	44
  4669  02F8  1903               	skipnz
  4670  02F9  0268               	subwf	??_setSw_Main,w
  4671  02FA  1C03               	skipc
  4672  02FB  0008               	return
  4673                           
  4674                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4675  02FC  086C               	movf	_Sw,w
  4676  02FD  3E07               	addlw	7
  4677  02FE  0086               	movwf	6
  4678  02FF  3001               	movlw	1	; select bank2/3
  4679  0300  0087               	movwf	7
  4680  0301  3000               	movlw	0
  4681  0302  3FC0               	movwi [0]fsr1
  4682  0303  3FC1               	movwi [1]fsr1
  4683                           
  4684                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4685  0304  086C               	movf	_Sw,w
  4686  0305  0086               	movwf	6
  4687  0306  3001               	movlw	1	; select bank2/3
  4688  0307  0087               	movwf	7
  4689  0308  1681               	bsf	1,5
  4690                           
  4691                           ;Switch_B1.c: 208: setRF_Learn(0);
  4692  0309  3000               	movlw	0
  4693  030A  319E  2659         	fcall	_setRF_Learn
  4694                           
  4695                           ;Switch_B1.c: 211: }
  4696                           ;Switch_B1.c: 212: }
  4697                           ;Switch_B1.c: 213: }
  4698                           ;Switch_B1.c: 214: }
  4699                           ;Switch_B1.c: 215: }
  4700                           ;Switch_B1.c: 216: } else {
  4701  030C  0008               	return
  4702  030D                     l9515:	
  4703                           
  4704                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4705  030D  0020               	movlb	0	; select bank0
  4706  030E  086C               	movf	_Sw,w
  4707  030F  0086               	movwf	6
  4708  0310  3001               	movlw	1	; select bank2/3
  4709  0311  0087               	movwf	7
  4710  0312  1D01               	btfss	1,2
  4711  0313  0008               	return
  4712                           
  4713                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4714  0314  3001               	movlw	1
  4715  0315  00E8               	movwf	??_setSw_Main
  4716  0316  086C               	movf	_Sw,w
  4717  0317  3E02               	addlw	2
  4718  0318  0086               	movwf	6
  4719  0319  3001               	movlw	1	; select bank2/3
  4720  031A  0087               	movwf	7
  4721  031B  0868               	movf	??_setSw_Main,w
  4722  031C  0781               	addwf	1,f
  4723                           
  4724                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4725  031D  086C               	movf	_Sw,w
  4726  031E  3E02               	addlw	2
  4727  031F  0086               	movwf	6
  4728  0320  3001               	movlw	1	; select bank2/3
  4729  0321  0087               	movwf	7
  4730  0322  3005               	movlw	5
  4731  0323  0201               	subwf	1,w
  4732  0324  1C03               	skipc
  4733  0325  0008               	return
  4734                           
  4735                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4736  0326  086C               	movf	_Sw,w
  4737  0327  3E02               	addlw	2
  4738  0328  0086               	movwf	6
  4739  0329  3001               	movlw	1	; select bank2/3
  4740  032A  0087               	movwf	7
  4741  032B  0181               	clrf	1
  4742                           
  4743                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4744  032C  086C               	movf	_Sw,w
  4745  032D  0086               	movwf	6
  4746  032E  3001               	movlw	1	; select bank2/3
  4747  032F  0087               	movwf	7
  4748  0330  1101               	bcf	1,2
  4749                           
  4750                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4751  0331  086C               	movf	_Sw,w
  4752  0332  3E03               	addlw	3
  4753  0333  0086               	movwf	6
  4754  0334  3001               	movlw	1	; select bank2/3
  4755  0335  0087               	movwf	7
  4756  0336  3000               	movlw	0
  4757  0337  3FC0               	movwi [0]fsr1
  4758  0338  3FC1               	movwi [1]fsr1
  4759                           
  4760                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4761  0339  086C               	movf	_Sw,w
  4762  033A  0086               	movwf	6
  4763  033B  3001               	movlw	1	; select bank2/3
  4764  033C  0087               	movwf	7
  4765  033D  1181               	bcf	1,3
  4766                           
  4767                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4768  033E  086C               	movf	_Sw,w
  4769  033F  3E05               	addlw	5
  4770  0340  0086               	movwf	6
  4771  0341  3001               	movlw	1	; select bank2/3
  4772  0342  0087               	movwf	7
  4773  0343  3000               	movlw	0
  4774  0344  3FC0               	movwi [0]fsr1
  4775  0345  3FC1               	movwi [1]fsr1
  4776                           
  4777                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4778  0346  086C               	movf	_Sw,w
  4779  0347  0086               	movwf	6
  4780  0348  3001               	movlw	1	; select bank2/3
  4781  0349  0087               	movwf	7
  4782  034A  1201               	bcf	1,4
  4783                           
  4784                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4785  034B  086C               	movf	_Sw,w
  4786  034C  3E07               	addlw	7
  4787  034D  0086               	movwf	6
  4788  034E  3001               	movlw	1	; select bank2/3
  4789  034F  0087               	movwf	7
  4790  0350  3000               	movlw	0
  4791  0351  3FC0               	movwi [0]fsr1
  4792  0352  3FC1               	movwi [1]fsr1
  4793                           
  4794                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4795  0353  086C               	movf	_Sw,w
  4796  0354  0086               	movwf	6
  4797  0355  3001               	movlw	1	; select bank2/3
  4798  0356  0087               	movwf	7
  4799  0357  1281               	bcf	1,5
  4800                           
  4801                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4802  0358  086A               	movf	setSw_Main@sw,w
  4803  0359  318B  233A  3182   	fcall	_Sw_DimmerOffFunc
  4804                           
  4805                           ;Switch_B1.c: 232: setRF_Learn(0);
  4806  035C  3000               	movlw	0
  4807  035D  319E  2659         	fcall	_setRF_Learn
  4808  035F  0008               	return
  4809  0360                     __end_of_setSw_Main:	
  4810                           
  4811                           	psect	text9
  4812  1E59                     __ptext9:	
  4813 ;; *************** function _setRF_Learn *****************
  4814 ;; Defined at:
  4815 ;;		line 23 in file "../src/RF_Control_B1.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  command         1    wreg     unsigned char 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  command         1    0[BANK0 ] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;Total ram usage:        1 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    5
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_setSw_Main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           
  4844                           ;psect for function _setRF_Learn
  4845  1E59                     _setRF_Learn:	
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _setRF_Learn: [wreg]
  4849                           ;setRF_Learn@command stored from wreg
  4850  1E59  0020               	movlb	0	; select bank0
  4851  1E5A  00A0               	movwf	setRF_Learn@command
  4852                           
  4853                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4854  1E5B  0820               	movf	setRF_Learn@command,w
  4855  1E5C  0021               	movlb	1	; select bank1
  4856  1E5D  133C               	bcf	_RF1^(0+128),6
  4857  1E5E  1D03               	skipz
  4858  1E5F  173C               	bsf	_RF1^(0+128),6
  4859  1E60  0008               	return
  4860  1E61                     __end_of_setRF_Learn:	
  4861                           
  4862                           	psect	text10
  4863  0D90                     __ptext10:	
  4864 ;; *************** function _Sw_DimmerOnFunc *****************
  4865 ;; Defined at:
  4866 ;;		line 241 in file "../src/Switch_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  sw              1    wreg     unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  sw              1   71[BANK0 ] unsigned char 
  4871 ;;  Idle            1   70[BANK0 ] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        6 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    9
  4888 ;; This function calls:
  4889 ;;		_setBuz
  4890 ;;		_setDimmerLights_Switch
  4891 ;;		_setDimmerLights_Trigger
  4892 ;;		_setRFSW_Status
  4893 ;;		_setRF_DimmerLights
  4894 ;;		_setTxData
  4895 ;; This function is called by:
  4896 ;;		_setSw_Main
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _Sw_DimmerOnFunc
  4902  0D90                     _Sw_DimmerOnFunc:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4906                           ;Sw_DimmerOnFunc@sw stored from wreg
  4907  0D90  0020               	movlb	0	; select bank0
  4908  0D91  00E7               	movwf	Sw_DimmerOnFunc@sw
  4909                           
  4910                           ;Switch_B1.c: 242: char Idle = 1;
  4911  0D92  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4912  0D93  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4913                           
  4914                           ;Switch_B1.c: 246: if (sw == 1) {
  4915  0D94  0867               	movf	Sw_DimmerOnFunc@sw,w
  4916  0D95  3A01               	xorlw	1
  4917  0D96  1D03               	skipz
  4918  0D97  2DA5               	goto	l8897
  4919                           
  4920                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4921  0D98  01E3               	clrf	_Sw_DimmerOnFunc$5959
  4922  0D99  0022               	movlb	2	; select bank2
  4923  0D9A  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
  4924  0D9B  2DA2               	goto	l8895
  4925  0D9C  0023               	movlb	3	; select bank3
  4926  0D9D  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4927  0D9E  2DA2               	goto	l8895
  4928  0D9F  0020               	movlb	0	; select bank0
  4929  0DA0  01E3               	clrf	_Sw_DimmerOnFunc$5959
  4930  0DA1  0AE3               	incf	_Sw_DimmerOnFunc$5959,f
  4931  0DA2                     l8895:	
  4932  0DA2  0020               	movlb	0	; select bank0
  4933  0DA3  0863               	movf	_Sw_DimmerOnFunc$5959,w
  4934  0DA4  2DC4               	goto	L2
  4935  0DA5                     l8897:	
  4936                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4937                           
  4938  0DA5  0867               	movf	Sw_DimmerOnFunc@sw,w
  4939  0DA6  3A02               	xorlw	2
  4940  0DA7  1D03               	skipz
  4941  0DA8  2DB6               	goto	l8909
  4942                           
  4943                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4944  0DA9  01E4               	clrf	_Sw_DimmerOnFunc$5960
  4945  0DAA  0022               	movlb	2	; select bank2
  4946  0DAB  19C6               	btfsc	(_DimmerLights1^(0+256)+8),3
  4947  0DAC  2DB3               	goto	l8907
  4948  0DAD  0023               	movlb	3	; select bank3
  4949  0DAE  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4950  0DAF  2DB3               	goto	l8907
  4951  0DB0  0020               	movlb	0	; select bank0
  4952  0DB1  01E4               	clrf	_Sw_DimmerOnFunc$5960
  4953  0DB2  0AE4               	incf	_Sw_DimmerOnFunc$5960,f
  4954  0DB3                     l8907:	
  4955  0DB3  0020               	movlb	0	; select bank0
  4956  0DB4  0864               	movf	_Sw_DimmerOnFunc$5960,w
  4957  0DB5  2DC4               	goto	L2
  4958  0DB6                     l8909:	
  4959                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4960                           
  4961  0DB6  0867               	movf	Sw_DimmerOnFunc@sw,w
  4962  0DB7  3A03               	xorlw	3
  4963  0DB8  1D03               	skipz
  4964  0DB9  2DC7               	goto	l2725
  4965                           
  4966                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4967  0DBA  01E5               	clrf	_Sw_DimmerOnFunc$5961
  4968  0DBB  0022               	movlb	2	; select bank2
  4969  0DBC  1DC6               	btfss	(_DimmerLights1^(0+256)+8),3
  4970  0DBD  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
  4971  0DBE  2DC2               	goto	l8919
  4972  0DBF  0020               	movlb	0	; select bank0
  4973  0DC0  01E5               	clrf	_Sw_DimmerOnFunc$5961
  4974  0DC1  0AE5               	incf	_Sw_DimmerOnFunc$5961,f
  4975  0DC2                     l8919:	
  4976  0DC2  0020               	movlb	0	; select bank0
  4977  0DC3  0865               	movf	_Sw_DimmerOnFunc$5961,w
  4978  0DC4                     L2:	
  4979  0DC4  00E2               	movwf	??_Sw_DimmerOnFunc
  4980  0DC5  0862               	movf	??_Sw_DimmerOnFunc,w
  4981  0DC6  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4982  0DC7                     l2725:	
  4983                           
  4984                           ;Switch_B1.c: 252: }
  4985                           ;Switch_B1.c: 263: if (Idle == 1) {
  4986  0DC7  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4987  0DC8  3A01               	xorlw	1
  4988  0DC9  1D03               	skipz
  4989  0DCA  0008               	return
  4990                           
  4991                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4992  0DCB  086C               	movf	_Sw,w
  4993  0DCC  0086               	movwf	6
  4994  0DCD  3001               	movlw	1	; select bank2/3
  4995  0DCE  0087               	movwf	7
  4996  0DCF  1781               	bsf	1,7
  4997                           
  4998                           ;Switch_B1.c: 265: setBuz(1, 100);
  4999  0DD0  3064               	movlw	100
  5000  0DD1  00A9               	movwf	setBuz@time
  5001  0DD2  3000               	movlw	0
  5002  0DD3  00AA               	movwf	setBuz@time+1
  5003  0DD4  3001               	movlw	1
  5004  0DD5  3197  27A7  318D   	fcall	_setBuz
  5005                           
  5006                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5007  0DD8  0020               	movlb	0	; select bank0
  5008  0DD9  086C               	movf	_Sw,w
  5009  0DDA  0086               	movwf	6
  5010  0DDB  3001               	movlw	1	; select bank2/3
  5011  0DDC  0087               	movwf	7
  5012  0DDD  1B01               	btfsc	1,6
  5013  0DDE  2E08               	goto	l8939
  5014                           
  5015                           ;Switch_B1.c: 267: Sw->Status = 1;
  5016  0DDF  086C               	movf	_Sw,w
  5017  0DE0  0086               	movwf	6
  5018  0DE1  3001               	movlw	1	; select bank2/3
  5019  0DE2  0087               	movwf	7
  5020  0DE3  1701               	bsf	1,6
  5021                           
  5022                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5023  0DE4  01A2               	clrf	setRFSW_Status@command
  5024  0DE5  0AA2               	incf	setRFSW_Status@command,f
  5025  0DE6  0867               	movf	Sw_DimmerOnFunc@sw,w
  5026  0DE7  319E  26FE  318D   	fcall	_setRFSW_Status
  5027                           
  5028                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5029  0DEA  0020               	movlb	0	; select bank0
  5030  0DEB  01A2               	clrf	setDimmerLights_Trigger@command
  5031  0DEC  0AA2               	incf	setDimmerLights_Trigger@command,f
  5032  0DED  0867               	movf	Sw_DimmerOnFunc@sw,w
  5033  0DEE  319F  2759  318D   	fcall	_setDimmerLights_Trigger
  5034                           
  5035                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5036  0DF1  0020               	movlb	0	; select bank0
  5037  0DF2  01A2               	clrf	setDimmerLights_Switch@command
  5038  0DF3  0AA2               	incf	setDimmerLights_Switch@command,f
  5039  0DF4  0867               	movf	Sw_DimmerOnFunc@sw,w
  5040  0DF5  319F  2749  318D   	fcall	_setDimmerLights_Switch
  5041                           
  5042                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5043  0DF8  0020               	movlb	0	; select bank0
  5044  0DF9  086C               	movf	_Sw,w
  5045  0DFA  0086               	movwf	6
  5046  0DFB  3001               	movlw	1	; select bank2/3
  5047  0DFC  0087               	movwf	7
  5048  0DFD  3000               	movlw	0
  5049  0DFE  1B01               	btfsc	1,6
  5050  0DFF  3001               	movlw	1
  5051  0E00  00DD               	movwf	setRF_DimmerLights@on
  5052  0E01  0867               	movf	Sw_DimmerOnFunc@sw,w
  5053  0E02  318A  22CE  318D   	fcall	_setRF_DimmerLights
  5054                           
  5055                           ;Switch_B1.c: 274: setTxData();
  5056  0E05  3185  25F8         	fcall	_setTxData
  5057                           
  5058                           ;Switch_B1.c: 276: } else {
  5059  0E07  0008               	return
  5060  0E08                     l8939:	
  5061                           
  5062                           ;Switch_B1.c: 277: Sw->Status = 0;
  5063  0E08  0020               	movlb	0	; select bank0
  5064  0E09  086C               	movf	_Sw,w
  5065  0E0A  0086               	movwf	6
  5066  0E0B  3001               	movlw	1	; select bank2/3
  5067  0E0C  0087               	movwf	7
  5068  0E0D  1301               	bcf	1,6
  5069                           
  5070                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5071  0E0E  086C               	movf	_Sw,w
  5072  0E0F  0086               	movwf	6
  5073  0E10  3001               	movlw	1	; select bank2/3
  5074  0E11  0087               	movwf	7
  5075  0E12  3000               	movlw	0
  5076  0E13  1B01               	btfsc	1,6
  5077  0E14  3001               	movlw	1
  5078  0E15  00A2               	movwf	setRFSW_Status@command
  5079  0E16  0867               	movf	Sw_DimmerOnFunc@sw,w
  5080  0E17  319E  26FE         	fcall	_setRFSW_Status
  5081  0E19  0008               	return
  5082  0E1A                     __end_of_Sw_DimmerOnFunc:	
  5083                           
  5084                           	psect	text11
  5085  0B3A                     __ptext11:	
  5086 ;; *************** function _Sw_DimmerOffFunc *****************
  5087 ;; Defined at:
  5088 ;;		line 284 in file "../src/Switch_B1.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  sw              1    wreg     unsigned char 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  sw              1   68[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:        3 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    9
  5109 ;; This function calls:
  5110 ;;		_setDelayOff_GO
  5111 ;;		_setDimmerLights_AdjGo
  5112 ;;		_setDimmerLights_Switch
  5113 ;;		_setDimmerLights_Trigger
  5114 ;;		_setDimmerLights_TriggerAdj
  5115 ;;		_setRF_DimmerLights
  5116 ;;		_setTxData
  5117 ;; This function is called by:
  5118 ;;		_setSw_Main
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _Sw_DimmerOffFunc
  5124  0B3A                     _Sw_DimmerOffFunc:	
  5125                           
  5126                           ;incstack = 0
  5127                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5128                           ;Sw_DimmerOffFunc@sw stored from wreg
  5129  0B3A  0020               	movlb	0	; select bank0
  5130  0B3B  00E4               	movwf	Sw_DimmerOffFunc@sw
  5131                           
  5132                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5133  0B3C  086C               	movf	_Sw,w
  5134  0B3D  0086               	movwf	6
  5135  0B3E  3001               	movlw	1	; select bank2/3
  5136  0B3F  0087               	movwf	7
  5137  0B40  1F81               	btfss	1,7
  5138  0B41  0008               	return
  5139                           
  5140                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5141  0B42  086C               	movf	_Sw,w
  5142  0B43  0086               	movwf	6
  5143  0B44  3001               	movlw	1	; select bank2/3
  5144  0B45  0087               	movwf	7
  5145  0B46  1381               	bcf	1,7
  5146                           
  5147                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5148  0B47  086C               	movf	_Sw,w
  5149  0B48  0086               	movwf	6
  5150  0B49  3001               	movlw	1	; select bank2/3
  5151  0B4A  0087               	movwf	7
  5152  0B4B  1F01               	btfss	1,6
  5153  0B4C  2B85               	goto	l9009
  5154                           
  5155                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5156  0B4D  0A6C               	incf	_Sw,w
  5157  0B4E  0086               	movwf	6
  5158  0B4F  3001               	movlw	1	; select bank2/3
  5159  0B50  0087               	movwf	7
  5160  0B51  1C01               	btfss	1,0
  5161  0B52  0008               	return
  5162                           
  5163                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5164  0B53  0A6C               	incf	_Sw,w
  5165  0B54  0086               	movwf	6
  5166  0B55  3001               	movlw	1	; select bank2/3
  5167  0B56  0087               	movwf	7
  5168  0B57  1001               	bcf	1,0
  5169                           
  5170                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5171  0B58  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5172  0B59  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5173  0B5A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5174  0B5B  319F  2799  318B   	fcall	_setDimmerLights_TriggerAdj
  5175                           
  5176                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5177  0B5E  0020               	movlb	0	; select bank0
  5178  0B5F  01A2               	clrf	setDimmerLights_AdjGo@command
  5179  0B60  0864               	movf	Sw_DimmerOffFunc@sw,w
  5180  0B61  319F  2789  318B   	fcall	_setDimmerLights_AdjGo
  5181                           
  5182                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5183  0B64  0020               	movlb	0	; select bank0
  5184  0B65  0864               	movf	Sw_DimmerOffFunc@sw,w
  5185  0B66  3E1A               	addlw	26
  5186  0B67  076D               	addwf	_product,w
  5187  0B68  00E2               	movwf	??_Sw_DimmerOffFunc
  5188  0B69  0862               	movf	??_Sw_DimmerOffFunc,w
  5189  0B6A  0086               	movwf	6
  5190  0B6B  3002               	movlw	2	; select bank4/5
  5191  0B6C  0087               	movwf	7
  5192  0B6D  0801               	movf	1,w
  5193  0B6E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5194  0B6F  086D               	movf	_product,w
  5195  0B70  3E11               	addlw	17
  5196  0B71  0086               	movwf	6
  5197  0B72  3002               	movlw	2	; select bank4/5
  5198  0B73  0087               	movwf	7
  5199  0B74  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5200  0B75  0081               	movwf	1
  5201                           
  5202                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5203  0B76  086C               	movf	_Sw,w
  5204  0B77  0086               	movwf	6
  5205  0B78  3001               	movlw	1	; select bank2/3
  5206  0B79  0087               	movwf	7
  5207  0B7A  3000               	movlw	0
  5208  0B7B  1B01               	btfsc	1,6
  5209  0B7C  3001               	movlw	1
  5210  0B7D  00DD               	movwf	setRF_DimmerLights@on
  5211  0B7E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5212  0B7F  318A  22CE  318B   	fcall	_setRF_DimmerLights
  5213                           
  5214                           ;Switch_B1.c: 295: setTxData();
  5215  0B82  3185  25F8         	fcall	_setTxData
  5216                           
  5217                           ;Switch_B1.c: 297: }
  5218                           ;Switch_B1.c: 298: } else {
  5219  0B84  0008               	return
  5220  0B85                     l9009:	
  5221                           
  5222                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5223  0B85  0020               	movlb	0	; select bank0
  5224  0B86  01A2               	clrf	setDimmerLights_Trigger@command
  5225  0B87  0AA2               	incf	setDimmerLights_Trigger@command,f
  5226  0B88  0864               	movf	Sw_DimmerOffFunc@sw,w
  5227  0B89  319F  2759  318B   	fcall	_setDimmerLights_Trigger
  5228                           
  5229                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5230  0B8C  0020               	movlb	0	; select bank0
  5231  0B8D  01A2               	clrf	setDimmerLights_Switch@command
  5232  0B8E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5233  0B8F  319F  2749  318B   	fcall	_setDimmerLights_Switch
  5234                           
  5235                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5236  0B92  0020               	movlb	0	; select bank0
  5237  0B93  01AA               	clrf	setDelayOff_GO@command
  5238  0B94  01AB               	clrf	setDelayOff_GO@value
  5239  0B95  0864               	movf	Sw_DimmerOffFunc@sw,w
  5240  0B96  3188  2071  318B   	fcall	_setDelayOff_GO
  5241                           
  5242                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5243  0B99  0020               	movlb	0	; select bank0
  5244  0B9A  086C               	movf	_Sw,w
  5245  0B9B  0086               	movwf	6
  5246  0B9C  3001               	movlw	1	; select bank2/3
  5247  0B9D  0087               	movwf	7
  5248  0B9E  3000               	movlw	0
  5249  0B9F  1B01               	btfsc	1,6
  5250  0BA0  3001               	movlw	1
  5251  0BA1  00DD               	movwf	setRF_DimmerLights@on
  5252  0BA2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5253  0BA3  318A  22CE  318B   	fcall	_setRF_DimmerLights
  5254                           
  5255                           ;Switch_B1.c: 304: setTxData();
  5256  0BA6  3185  25F8         	fcall	_setTxData
  5257  0BA8  0008               	return
  5258  0BA9                     __end_of_Sw_DimmerOffFunc:	
  5259                           
  5260                           	psect	text12
  5261  0931                     __ptext12:	
  5262 ;; *************** function _Sw_DimmerAdjFunc *****************
  5263 ;; Defined at:
  5264 ;;		line 311 in file "../src/Switch_B1.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  sw              1    wreg     unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  sw              1    9[BANK0 ] unsigned char 
  5269 ;;  Idle            1    8[BANK0 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;		None               void
  5272 ;; Registers used:
  5273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;Total ram usage:        6 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    7
  5286 ;; This function calls:
  5287 ;;		_setDimmerLights_AdjGo
  5288 ;;		_setDimmerLights_TriggerAdj
  5289 ;;		_setRFSW_Status
  5290 ;; This function is called by:
  5291 ;;		_setSw_Main
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _Sw_DimmerAdjFunc
  5297  0931                     _Sw_DimmerAdjFunc:	
  5298                           
  5299                           ;incstack = 0
  5300                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5301                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5302  0931  0020               	movlb	0	; select bank0
  5303  0932  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5304                           
  5305                           ;Switch_B1.c: 312: char Idle = 1;
  5306  0933  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5307  0934  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5308                           
  5309                           ;Switch_B1.c: 315: if (sw == 1) {
  5310  0935  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5311  0936  3A01               	xorlw	1
  5312  0937  1D03               	skipz
  5313  0938  2946               	goto	l8957
  5314                           
  5315                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5316  0939  01A5               	clrf	_Sw_DimmerAdjFunc$5971
  5317  093A  0022               	movlb	2	; select bank2
  5318  093B  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
  5319  093C  2943               	goto	l8955
  5320  093D  0023               	movlb	3	; select bank3
  5321  093E  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5322  093F  2943               	goto	l8955
  5323  0940  0020               	movlb	0	; select bank0
  5324  0941  01A5               	clrf	_Sw_DimmerAdjFunc$5971
  5325  0942  0AA5               	incf	_Sw_DimmerAdjFunc$5971,f
  5326  0943                     l8955:	
  5327  0943  0020               	movlb	0	; select bank0
  5328  0944  0825               	movf	_Sw_DimmerAdjFunc$5971,w
  5329  0945  2965               	goto	L4
  5330  0946                     l8957:	
  5331                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5332                           
  5333  0946  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5334  0947  3A02               	xorlw	2
  5335  0948  1D03               	skipz
  5336  0949  2957               	goto	l8969
  5337                           
  5338                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5339  094A  01A6               	clrf	_Sw_DimmerAdjFunc$5972
  5340  094B  0022               	movlb	2	; select bank2
  5341  094C  19C6               	btfsc	(_DimmerLights1^(0+256)+8),3
  5342  094D  2954               	goto	l8967
  5343  094E  0023               	movlb	3	; select bank3
  5344  094F  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5345  0950  2954               	goto	l8967
  5346  0951  0020               	movlb	0	; select bank0
  5347  0952  01A6               	clrf	_Sw_DimmerAdjFunc$5972
  5348  0953  0AA6               	incf	_Sw_DimmerAdjFunc$5972,f
  5349  0954                     l8967:	
  5350  0954  0020               	movlb	0	; select bank0
  5351  0955  0826               	movf	_Sw_DimmerAdjFunc$5972,w
  5352  0956  2965               	goto	L4
  5353  0957                     l8969:	
  5354                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5355                           
  5356  0957  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5357  0958  3A03               	xorlw	3
  5358  0959  1D03               	skipz
  5359  095A  2968               	goto	l2749
  5360                           
  5361                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5362  095B  01A7               	clrf	_Sw_DimmerAdjFunc$5973
  5363  095C  0022               	movlb	2	; select bank2
  5364  095D  1DC6               	btfss	(_DimmerLights1^(0+256)+8),3
  5365  095E  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
  5366  095F  2963               	goto	l8979
  5367  0960  0020               	movlb	0	; select bank0
  5368  0961  01A7               	clrf	_Sw_DimmerAdjFunc$5973
  5369  0962  0AA7               	incf	_Sw_DimmerAdjFunc$5973,f
  5370  0963                     l8979:	
  5371  0963  0020               	movlb	0	; select bank0
  5372  0964  0827               	movf	_Sw_DimmerAdjFunc$5973,w
  5373  0965                     L4:	
  5374  0965  00A4               	movwf	??_Sw_DimmerAdjFunc
  5375  0966  0824               	movf	??_Sw_DimmerAdjFunc,w
  5376  0967  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5377  0968                     l2749:	
  5378                           
  5379                           ;Switch_B1.c: 321: }
  5380                           ;Switch_B1.c: 332: if (Idle == 1) {
  5381  0968  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5382  0969  3A01               	xorlw	1
  5383  096A  1D03               	skipz
  5384  096B  0008               	return
  5385                           
  5386                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5387  096C  086C               	movf	_Sw,w
  5388  096D  0086               	movwf	6
  5389  096E  3001               	movlw	1	; select bank2/3
  5390  096F  0087               	movwf	7
  5391  0970  1F81               	btfss	1,7
  5392  0971  0008               	return
  5393                           
  5394                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5395  0972  086C               	movf	_Sw,w
  5396  0973  0086               	movwf	6
  5397  0974  3001               	movlw	1	; select bank2/3
  5398  0975  0087               	movwf	7
  5399  0976  1581               	bsf	1,3
  5400                           
  5401                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5402  0977  0A6C               	incf	_Sw,w
  5403  0978  0086               	movwf	6
  5404  0979  3001               	movlw	1	; select bank2/3
  5405  097A  0087               	movwf	7
  5406  097B  1401               	bsf	1,0
  5407                           
  5408                           ;Switch_B1.c: 336: Sw->Status = 1;
  5409  097C  086C               	movf	_Sw,w
  5410  097D  0086               	movwf	6
  5411  097E  3001               	movlw	1	; select bank2/3
  5412  097F  0087               	movwf	7
  5413  0980  1701               	bsf	1,6
  5414                           
  5415                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5416  0981  01A2               	clrf	setRFSW_Status@command
  5417  0982  0AA2               	incf	setRFSW_Status@command,f
  5418  0983  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5419  0984  319E  26FE  3189   	fcall	_setRFSW_Status
  5420                           
  5421                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5422  0987  0020               	movlb	0	; select bank0
  5423  0988  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5424  0989  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5425  098A  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5426  098B  319F  2799  3189   	fcall	_setDimmerLights_TriggerAdj
  5427                           
  5428                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5429  098E  0020               	movlb	0	; select bank0
  5430  098F  01A2               	clrf	setDimmerLights_AdjGo@command
  5431  0990  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5432  0991  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5433  0992  319F  2789         	fcall	_setDimmerLights_AdjGo
  5434  0994  0008               	return
  5435  0995                     __end_of_Sw_DimmerAdjFunc:	
  5436                           
  5437                           	psect	text13
  5438  1F99                     __ptext13:	
  5439 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5440 ;; Defined at:
  5441 ;;		line 722 in file "../src/Dimmer_B1.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  lights          1    wreg     unsigned char 
  5444 ;;  command         1    2[BANK0 ] unsigned char 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  lights          1    3[BANK0 ] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        2 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    6
  5463 ;; This function calls:
  5464 ;;		_DimmerLightsPointSelect
  5465 ;; This function is called by:
  5466 ;;		_Sw_DimmerOffFunc
  5467 ;;		_Sw_DimmerAdjFunc
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           
  5472                           ;psect for function _setDimmerLights_TriggerAdj
  5473  1F99                     _setDimmerLights_TriggerAdj:	
  5474                           
  5475                           ;incstack = 0
  5476                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5477                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5478  1F99  0020               	movlb	0	; select bank0
  5479  1F9A  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5480                           
  5481                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  5482  1F9B  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5483  1F9C  3191  2163         	fcall	_DimmerLightsPointSelect
  5484                           
  5485                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  5486  1F9E  0020               	movlb	0	; select bank0
  5487  1F9F  086B               	movf	_DimmerLights,w
  5488  1FA0  3E08               	addlw	8
  5489  1FA1  0086               	movwf	6
  5490  1FA2  3001               	movlw	1	; select bank2/3
  5491  1FA3  0087               	movwf	7
  5492  1FA4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5493  1FA5  1201               	bcf	1,4
  5494  1FA6  1D03               	skipz
  5495  1FA7  1601               	bsf	1,4
  5496  1FA8  0008               	return
  5497  1FA9                     __end_of_setDimmerLights_TriggerAdj:	
  5498                           
  5499                           	psect	text14
  5500  1F89                     __ptext14:	
  5501 ;; *************** function _setDimmerLights_AdjGo *****************
  5502 ;; Defined at:
  5503 ;;		line 710 in file "../src/Dimmer_B1.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  lights          1    wreg     unsigned char 
  5506 ;;  command         1    2[BANK0 ] unsigned char 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  lights          1    3[BANK0 ] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;		None               void
  5511 ;; Registers used:
  5512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:        2 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    6
  5525 ;; This function calls:
  5526 ;;		_DimmerLightsPointSelect
  5527 ;; This function is called by:
  5528 ;;		_Sw_DimmerOffFunc
  5529 ;;		_Sw_DimmerAdjFunc
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _setDimmerLights_AdjGo
  5535  1F89                     _setDimmerLights_AdjGo:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5539                           ;setDimmerLights_AdjGo@lights stored from wreg
  5540  1F89  0020               	movlb	0	; select bank0
  5541  1F8A  00A3               	movwf	setDimmerLights_AdjGo@lights
  5542                           
  5543                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  5544  1F8B  0823               	movf	setDimmerLights_AdjGo@lights,w
  5545  1F8C  3191  2163         	fcall	_DimmerLightsPointSelect
  5546                           
  5547                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  5548  1F8E  0020               	movlb	0	; select bank0
  5549  1F8F  086B               	movf	_DimmerLights,w
  5550  1F90  3E08               	addlw	8
  5551  1F91  0086               	movwf	6
  5552  1F92  3001               	movlw	1	; select bank2/3
  5553  1F93  0087               	movwf	7
  5554  1F94  0822               	movf	setDimmerLights_AdjGo@command,w
  5555  1F95  1181               	bcf	1,3
  5556  1F96  1D03               	skipz
  5557  1F97  1581               	bsf	1,3
  5558  1F98  0008               	return
  5559  1F99                     __end_of_setDimmerLights_AdjGo:	
  5560                           
  5561                           	psect	text15
  5562  1FCB                     __ptext15:	
  5563 ;; *************** function _Switch_Initialization *****************
  5564 ;; Defined at:
  5565 ;;		line 41 in file "../src/Switch_B1.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;		None               void
  5572 ;; Registers used:
  5573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    8
  5586 ;; This function calls:
  5587 ;;		_TouchPower
  5588 ;;		_setSw_Initialization
  5589 ;; This function is called by:
  5590 ;;		_main
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _Switch_Initialization
  5596  1FCB                     _Switch_Initialization:	
  5597                           
  5598                           ;Switch_B1.c: 42: TouchPower();
  5599                           
  5600                           ;incstack = 0
  5601                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5602  1FCB  319F  272B  319F   	fcall	_TouchPower
  5603                           
  5604                           ;Switch_B1.c: 44: WPUB1 = 0;
  5605  1FCE  0024               	movlb	4	; select bank4
  5606  1FCF  108D               	bcf	13,1	;volatile
  5607                           
  5608                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5609  1FD0  3001               	movlw	1
  5610  1FD1  319E  2651  319F   	fcall	_setSw_Initialization
  5611                           
  5612                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5613  1FD4  3002               	movlw	2
  5614  1FD5  319E  2651  319F   	fcall	_setSw_Initialization
  5615                           
  5616                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5617  1FD8  3003               	movlw	3
  5618  1FD9  319E  2651         	fcall	_setSw_Initialization
  5619  1FDB  0008               	return
  5620  1FDC                     __end_of_Switch_Initialization:	
  5621                           
  5622                           	psect	text16
  5623  1E51                     __ptext16:	
  5624 ;; *************** function _setSw_Initialization *****************
  5625 ;; Defined at:
  5626 ;;		line 83 in file "../src/Switch_B1.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  sw              1    wreg     unsigned char 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  sw              1    3[BANK0 ] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;		None               void
  5633 ;; Registers used:
  5634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;Total ram usage:        1 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    7
  5647 ;; This function calls:
  5648 ;;		_setLED
  5649 ;; This function is called by:
  5650 ;;		_Switch_Initialization
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _setSw_Initialization
  5656  1E51                     _setSw_Initialization:	
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5660                           ;setSw_Initialization@sw stored from wreg
  5661  1E51  0020               	movlb	0	; select bank0
  5662  1E52  00A3               	movwf	setSw_Initialization@sw
  5663                           
  5664                           ;Switch_B1.c: 84: setLED(sw, 1);
  5665  1E53  01A1               	clrf	setLED@command
  5666  1E54  0AA1               	incf	setLED@command,f
  5667  1E55  0823               	movf	setSw_Initialization@sw,w
  5668  1E56  318B  23A9         	fcall	_setLED
  5669  1E58  0008               	return
  5670  1E59                     __end_of_setSw_Initialization:	
  5671                           
  5672                           	psect	text17
  5673  1F2B                     __ptext17:	
  5674 ;; *************** function _TouchPower *****************
  5675 ;; Defined at:
  5676 ;;		line 10 in file "../src/Switch_B1.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;Total ram usage:        0 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    6
  5697 ;; This function calls:
  5698 ;;		_Timeout_Counter
  5699 ;;		_set_TimeoutCleared
  5700 ;; This function is called by:
  5701 ;;		_Switch_Initialization
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _TouchPower
  5707  1F2B                     _TouchPower:	
  5708                           
  5709                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5713  1F2B  2F31               	goto	l9445
  5714  1F2C                     l2667:	
  5715                           
  5716                           ;Switch_B1.c: 12: RC5 = 1;
  5717  1F2C  0020               	movlb	0	; select bank0
  5718  1F2D  168E               	bsf	14,5	;volatile
  5719                           
  5720                           ;Switch_B1.c: 13: Timeout_Counter();
  5721  1F2E  3190  20BD  319F   	fcall	_Timeout_Counter
  5722  1F31                     l9445:	
  5723  1F31  0020               	movlb	0	; select bank0
  5724  1F32  1A8E               	btfsc	14,5	;volatile
  5725  1F33  2F37               	goto	l9449
  5726  1F34  0021               	movlb	1	; select bank1
  5727  1F35  1D2D               	btfss	(_myMain^(0+128)+13),2
  5728  1F36  2F2C               	goto	l2667
  5729  1F37                     l9449:	
  5730                           
  5731                           ;Switch_B1.c: 14: }
  5732                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5733  1F37  319E  263A         	fcall	_set_TimeoutCleared
  5734  1F39  0008               	return
  5735  1F3A                     __end_of_TouchPower:	
  5736                           
  5737                           	psect	text18
  5738  1E27                     __ptext18:	
  5739 ;; *************** function _RF_Main *****************
  5740 ;; Defined at:
  5741 ;;		line 16 in file "../src/RF_Control_B1.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;		None               void
  5748 ;; Registers used:
  5749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:   14
  5762 ;; This function calls:
  5763 ;;		_setRF_Main
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _RF_Main
  5771  1E27                     _RF_Main:	
  5772                           
  5773                           ;RF_Control_B1.c: 18: setRF_Main();
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5777  1E27  3184  2456         	fcall	_setRF_Main
  5778  1E29  0008               	return
  5779  1E2A                     __end_of_RF_Main:	
  5780                           
  5781                           	psect	text19
  5782  0456                     __ptext19:	
  5783 ;; *************** function _setRF_Main *****************
  5784 ;; Defined at:
  5785 ;;		line 52 in file "../src/RF_Control_B1.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  Receive_OK      1    0        unsigned char 
  5790 ;;  loop_f          1    0        unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;		None               void
  5793 ;; Registers used:
  5794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;Total ram usage:        2 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:   13
  5807 ;; This function calls:
  5808 ;;		_CC2500_ReadStatus
  5809 ;;		_CC2500_RxData
  5810 ;;		_CC2500_TxData
  5811 ;;		_CC2500_WriteCommand
  5812 ;;		_getBuz_GO
  5813 ;;		_getRxData
  5814 ;; This function is called by:
  5815 ;;		_RF_Main
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _setRF_Main
  5821  0456                     _setRF_Main:	
  5822                           
  5823                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5824                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5825                           
  5826                           ;incstack = 0
  5827                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5828  0456  0021               	movlb	1	; select bank1
  5829  0457  1C3C               	btfss	_RF1^(0+128),0
  5830  0458  0008               	return
  5831                           
  5832                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5833  0459  319F  27BA  3184   	fcall	_getBuz_GO
  5834  045C  0020               	movlb	0	; select bank0
  5835  045D  0821               	movf	?_getBuz_GO+1,w
  5836  045E  0420               	iorwf	?_getBuz_GO,w
  5837  045F  1D03               	skipz
  5838  0460  0008               	return
  5839                           
  5840                           ;RF_Control_B1.c: 60: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5841  0461  01E8               	clrf	_setRF_Main$5021
  5842  0462  0AE8               	incf	_setRF_Main$5021,f
  5843  0463  1C0C               	btfss	12,0	;volatile
  5844  0464  1B0C               	btfsc	12,6	;volatile
  5845  0465  2C68               	goto	l9343
  5846  0466  1E0C               	btfss	12,4	;volatile
  5847  0467  01E8               	clrf	_setRF_Main$5021
  5848  0468                     l9343:	
  5849  0468  0868               	movf	_setRF_Main$5021,w
  5850  0469  0021               	movlb	1	; select bank1
  5851  046A  13BC               	bcf	_RF1^(0+128),7
  5852  046B  1D03               	skipz
  5853  046C  17BC               	bsf	_RF1^(0+128),7
  5854                           
  5855                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5856  046D  1BBC               	btfsc	_RF1^(0+128),7
  5857  046E  1B3C               	btfsc	_RF1^(0+128),6
  5858  046F  2C75               	goto	l2219
  5859                           
  5860                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5861  0470  01BE               	clrf	(_RF1^(0+128)+2)
  5862  0471  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5863                           
  5864                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5865  0472  14BD               	bsf	(_RF1^(0+128)+1),1
  5866                           
  5867                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5868  0473  11BC               	bcf	_RF1^(0+128),3
  5869                           
  5870                           ;RF_Control_B1.c: 76: } else {
  5871  0474  0008               	return
  5872  0475                     l2219:	
  5873                           
  5874                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5875  0475  18BD               	btfsc	(_RF1^(0+128)+1),1
  5876  0476  1B3C               	btfsc	_RF1^(0+128),6
  5877  0477  2C8C               	goto	l9365
  5878                           
  5879                           ;RF_Control_B1.c: 78: RF1.Count++;
  5880  0478  3001               	movlw	1
  5881  0479  07BE               	addwf	(_RF1^(0+128)+2),f
  5882  047A  3000               	movlw	0
  5883  047B  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  5884                           
  5885                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5886  047C  3002               	movlw	2
  5887  047D  3EBC               	addlw	_RF1& (0+255)
  5888  047E  0086               	movwf	6
  5889  047F  0187               	clrf	7
  5890  0480  3F40               	moviw [0]fsr1
  5891  0481  0643               	xorwf	(_RF1^(0+128)+7),w
  5892  0482  1D03               	skipz
  5893  0483  2C86               	goto	u9895
  5894  0484  3F41               	moviw [1]fsr1
  5895  0485  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  5896  0486                     u9895:	
  5897  0486  1D03               	skipz
  5898  0487  2CFE               	goto	l9419
  5899                           
  5900                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5901  0488  01BE               	clrf	(_RF1^(0+128)+2)
  5902  0489  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5903                           
  5904                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5905  048A  10BD               	bcf	(_RF1^(0+128)+1),1
  5906                           
  5907                           ;RF_Control_B1.c: 82: }
  5908                           ;RF_Control_B1.c: 83: } else {
  5909  048B  2CFE               	goto	l9419
  5910  048C                     l9365:	
  5911                           
  5912                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5913  048C  01BE               	clrf	(_RF1^(0+128)+2)
  5914  048D  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5915                           
  5916                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5917  048E  10BD               	bcf	(_RF1^(0+128)+1),1
  5918                           
  5919                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5920  048F  193C               	btfsc	_RF1^(0+128),2
  5921  0490  1B3C               	btfsc	_RF1^(0+128),6
  5922  0491  2CAD               	goto	l2224
  5923                           
  5924                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5925  0492  113C               	bcf	_RF1^(0+128),2
  5926                           
  5927                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5928  0493  11BC               	bcf	_RF1^(0+128),3
  5929                           
  5930                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5931  0494  10BC               	bcf	_RF1^(0+128),1
  5932                           
  5933                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5934  0495  303B               	movlw	59
  5935  0496  3192  22B7  3184   	fcall	_CC2500_ReadStatus
  5936                           
  5937                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5938  0499  0021               	movlb	1	; select bank1
  5939  049A  085A               	movf	_s_data^(0+128),w
  5940  049B  1903               	btfsc	3,2
  5941  049C  2CA9               	goto	l2225
  5942                           
  5943                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5944  049D  3036               	movlw	54
  5945  049E  3191  2116  3184   	fcall	_CC2500_WriteCommand
  5946                           
  5947                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5948  04A1  303B               	movlw	59
  5949  04A2  3191  2116  3184   	fcall	_CC2500_WriteCommand
  5950                           
  5951                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5952  04A5  303A               	movlw	58
  5953  04A6  3191  2116  3184   	fcall	_CC2500_WriteCommand
  5954  04A9                     l2225:	
  5955                           
  5956                           ;RF_Control_B1.c: 97: }
  5957                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5958  04A9  3189  2195  3184   	fcall	_CC2500_TxData
  5959                           
  5960                           ;RF_Control_B1.c: 100: } else {
  5961  04AC  2CFE               	goto	l9419
  5962  04AD                     l2224:	
  5963                           
  5964                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5965  04AD  1DBC               	btfss	_RF1^(0+128),3
  5966  04AE  2CE9               	goto	l2227
  5967                           
  5968                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5969  04AF  318C  241A  3184   	fcall	_CC2500_RxData
  5970                           
  5971                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5972  04B2  0021               	movlb	1	; select bank1
  5973  04B3  1CBC               	btfss	_RF1^(0+128),1
  5974  04B4  2CFE               	goto	l9419
  5975                           
  5976                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5977  04B5  10BC               	bcf	_RF1^(0+128),1
  5978                           
  5979                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5980  04B6  12BD               	bcf	(_RF1^(0+128)+1),5
  5981                           
  5982                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5983  04B7  01C6               	clrf	(_RF1^(0+128)+10)
  5984  04B8  01C7               	clrf	((_RF1+1)^(0+128)+10)
  5985                           
  5986                           ;RF_Control_B1.c: 116: getRxData();
  5987  04B9  3189  21FA  3184   	fcall	_getRxData
  5988                           
  5989                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  5990  04BC  3020               	movlw	32
  5991  04BD  0020               	movlb	0	; select bank0
  5992  04BE  068D               	xorwf	13,f
  5993                           
  5994                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5995  04BF  0021               	movlb	1	; select bank1
  5996  04C0  14BD               	bsf	(_RF1^(0+128)+1),1
  5997                           
  5998                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5999  04C1  1DBD               	btfss	(_RF1^(0+128)+1),3
  6000  04C2  2CD0               	goto	l9403
  6001                           
  6002                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  6003  04C3  3000               	movlw	0
  6004  04C4  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6005  04C5  300B               	movlw	11
  6006  04C6  1903               	skipnz
  6007  04C7  0243               	subwf	(_RF1^(0+128)+7),w
  6008  04C8  1C03               	skipc
  6009  04C9  2CCE               	goto	l9401
  6010                           
  6011                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  6012  04CA  300A               	movlw	10
  6013  04CB  00C3               	movwf	(_RF1^(0+128)+7)
  6014  04CC  3000               	movlw	0
  6015  04CD  00C4               	movwf	(_RF1^(0+128)+8)
  6016  04CE                     l9401:	
  6017                           
  6018                           ;RF_Control_B1.c: 125: }
  6019                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6020  04CE  01C0               	clrf	(_RF1^(0+128)+4)
  6021                           
  6022                           ;RF_Control_B1.c: 127: } else {
  6023  04CF  2CFE               	goto	l9419
  6024  04D0                     l9403:	
  6025                           
  6026                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6027  04D0  3001               	movlw	1
  6028  04D1  0020               	movlb	0	; select bank0
  6029  04D2  00E7               	movwf	??_setRF_Main
  6030  04D3  0867               	movf	??_setRF_Main,w
  6031  04D4  0021               	movlb	1	; select bank1
  6032  04D5  07C0               	addwf	(_RF1^(0+128)+4),f
  6033                           
  6034                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6035  04D6  0840               	movf	(_RF1^(0+128)+4),w
  6036  04D7  3A02               	xorlw	2
  6037  04D8  1D03               	skipz
  6038  04D9  2CFE               	goto	l9419
  6039                           
  6040                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6041  04DA  01C0               	clrf	(_RF1^(0+128)+4)
  6042                           
  6043                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6044  04DB  01C1               	clrf	(_RF1^(0+128)+5)
  6045  04DC  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6046                           
  6047                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  6048  04DD  3000               	movlw	0
  6049  04DE  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6050  04DF  30C8               	movlw	200
  6051  04E0  1903               	skipnz
  6052  04E1  0243               	subwf	(_RF1^(0+128)+7),w
  6053  04E2  1803               	skipnc
  6054  04E3  2CFE               	goto	l9419
  6055                           
  6056                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6057  04E4  300A               	movlw	10
  6058  04E5  07C3               	addwf	(_RF1^(0+128)+7),f
  6059  04E6  3000               	movlw	0
  6060  04E7  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6061                           
  6062                           ;RF_Control_B1.c: 134: }
  6063                           ;RF_Control_B1.c: 135: }
  6064                           ;RF_Control_B1.c: 136: }
  6065                           ;RF_Control_B1.c: 137: }
  6066                           ;RF_Control_B1.c: 138: } else {
  6067  04E8  2CFE               	goto	l9419
  6068  04E9                     l2227:	
  6069                           
  6070                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6071  04E9  1DBC               	btfss	_RF1^(0+128),3
  6072  04EA  18BC               	btfsc	_RF1^(0+128),1
  6073  04EB  2CFE               	goto	l9419
  6074                           
  6075                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6076  04EC  15BC               	bsf	_RF1^(0+128),3
  6077                           
  6078                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6079  04ED  16BD               	bsf	(_RF1^(0+128)+1),5
  6080                           
  6081                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6082  04EE  3036               	movlw	54
  6083  04EF  3191  2116  3184   	fcall	_CC2500_WriteCommand
  6084                           
  6085                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6086  04F2  303B               	movlw	59
  6087  04F3  3191  2116  3184   	fcall	_CC2500_WriteCommand
  6088                           
  6089                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6090  04F6  303A               	movlw	58
  6091  04F7  3191  2116  3184   	fcall	_CC2500_WriteCommand
  6092                           
  6093                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  6094  04FA  3034               	movlw	52
  6095  04FB  3191  2116  3184   	fcall	_CC2500_WriteCommand
  6096  04FE                     l9419:	
  6097                           
  6098                           ;RF_Control_B1.c: 149: }
  6099                           ;RF_Control_B1.c: 151: }
  6100                           ;RF_Control_B1.c: 152: }
  6101                           ;RF_Control_B1.c: 153: }
  6102                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  6103  04FE  0021               	movlb	1	; select bank1
  6104  04FF  1DBC               	btfss	_RF1^(0+128),3
  6105  0500  2D1F               	goto	l9431
  6106                           
  6107                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  6108  0501  3001               	movlw	1
  6109  0502  07C1               	addwf	(_RF1^(0+128)+5),f
  6110  0503  3000               	movlw	0
  6111  0504  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  6112                           
  6113                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  6114  0505  3005               	movlw	5
  6115  0506  3EBC               	addlw	_RF1& (0+255)
  6116  0507  0086               	movwf	6
  6117  0508  0187               	clrf	7
  6118  0509  3F40               	moviw [0]fsr1
  6119  050A  3A64               	xorlw	100
  6120  050B  1D03               	skipz
  6121  050C  2D0F               	goto	u10025
  6122  050D  3F41               	moviw [1]fsr1
  6123  050E  3A00               	xorlw	0
  6124  050F                     u10025:	
  6125  050F  1D03               	skipz
  6126  0510  2D1F               	goto	l9431
  6127                           
  6128                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  6129  0511  01C1               	clrf	(_RF1^(0+128)+5)
  6130  0512  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6131                           
  6132                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  6133  0513  01C0               	clrf	(_RF1^(0+128)+4)
  6134                           
  6135                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 10) {
  6136  0514  3000               	movlw	0
  6137  0515  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6138  0516  300B               	movlw	11
  6139  0517  1903               	skipnz
  6140  0518  0243               	subwf	(_RF1^(0+128)+7),w
  6141  0519  1C03               	skipc
  6142  051A  2D1F               	goto	l9431
  6143                           
  6144                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  6145  051B  300A               	movlw	10
  6146  051C  02C3               	subwf	(_RF1^(0+128)+7),f
  6147  051D  3000               	movlw	0
  6148  051E  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6149  051F                     l9431:	
  6150                           
  6151                           ;RF_Control_B1.c: 161: }
  6152                           ;RF_Control_B1.c: 162: }
  6153                           ;RF_Control_B1.c: 163: }
  6154                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  6155  051F  1EBD               	btfss	(_RF1^(0+128)+1),5
  6156  0520  0008               	return
  6157                           
  6158                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  6159  0521  3001               	movlw	1
  6160  0522  07C6               	addwf	(_RF1^(0+128)+10),f
  6161  0523  3000               	movlw	0
  6162  0524  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6163                           
  6164                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  6165  0525  3075               	movlw	117
  6166  0526  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6167  0527  3030               	movlw	48
  6168  0528  1903               	skipnz
  6169  0529  0246               	subwf	(_RF1^(0+128)+10),w
  6170  052A  1C03               	skipc
  6171  052B  0008               	return
  6172                           
  6173                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  6174  052C  01C6               	clrf	(_RF1^(0+128)+10)
  6175  052D  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6176                           
  6177                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  6178  052E  11BC               	bcf	_RF1^(0+128),3
  6179                           
  6180                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  6181  052F  10BC               	bcf	_RF1^(0+128),1
  6182  0530  0008               	return
  6183  0531                     __end_of_setRF_Main:	
  6184                           
  6185                           	psect	text20
  6186  09FA                     __ptext20:	
  6187 ;; *************** function _getRxData *****************
  6188 ;; Defined at:
  6189 ;;		line 252 in file "../src/RF_Control_B1.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        0 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:   12
  6210 ;; This function calls:
  6211 ;;		_setControl_Lights_Table
  6212 ;;		_setLog_Code
  6213 ;; This function is called by:
  6214 ;;		_setRF_Main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _getRxData
  6220  09FA                     _getRxData:	
  6221                           
  6222                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6223                           
  6224                           ;incstack = 0
  6225                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6226  09FA  0021               	movlb	1	; select bank1
  6227  09FB  1F3C               	btfss	_RF1^(0+128),6
  6228  09FC  2A0D               	goto	l8849
  6229                           
  6230                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6231  09FD  0022               	movlb	2	; select bank2
  6232  09FE  08A0               	movf	_RF_Data^(0+256),f
  6233  09FF  1D03               	skipz
  6234  0A00  2A0A               	goto	l2258
  6235  0A01  0821               	movf	(_RF_Data^(0+256)+1),w
  6236  0A02  3A64               	xorlw	100
  6237  0A03  1D03               	skipz
  6238  0A04  2A0A               	goto	l2258
  6239                           
  6240                           ;RF_Control_B1.c: 255: setLog_Code();
  6241  0A05  3194  247B         	fcall	_setLog_Code
  6242                           
  6243                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  6244  0A07  0021               	movlb	1	; select bank1
  6245  0A08  15BD               	bsf	(_RF1^(0+128)+1),3
  6246                           
  6247                           ;RF_Control_B1.c: 257: } else {
  6248  0A09  0008               	return
  6249  0A0A                     l2258:	
  6250                           
  6251                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  6252  0A0A  0021               	movlb	1	; select bank1
  6253  0A0B  11BD               	bcf	(_RF1^(0+128)+1),3
  6254                           
  6255                           ;RF_Control_B1.c: 259: }
  6256                           ;RF_Control_B1.c: 260: } else {
  6257  0A0C  0008               	return
  6258  0A0D                     l8849:	
  6259                           
  6260                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6261  0A0D  0022               	movlb	2	; select bank2
  6262  0A0E  08A0               	movf	_RF_Data^(0+256),f
  6263  0A0F  1D03               	skipz
  6264  0A10  2A4B               	goto	l8871
  6265  0A11  0821               	movf	(_RF_Data^(0+256)+1),w
  6266  0A12  3A02               	xorlw	2
  6267  0A13  1D03               	skipz
  6268  0A14  2A4B               	goto	l8871
  6269                           
  6270                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6271  0A15  082C               	movf	(_RF_Data^(0+256)+12),w
  6272  0A16  3AFF               	xorlw	255
  6273  0A17  1D03               	skipz
  6274  0A18  2A25               	goto	l8861
  6275  0A19  082D               	movf	(_RF_Data^(0+256)+13),w
  6276  0A1A  3AFF               	xorlw	255
  6277  0A1B  1D03               	skipz
  6278  0A1C  2A25               	goto	l8861
  6279  0A1D  082E               	movf	(_RF_Data^(0+256)+14),w
  6280  0A1E  3AFF               	xorlw	255
  6281  0A1F  1D03               	skipz
  6282  0A20  2A25               	goto	l8861
  6283                           
  6284                           ;RF_Control_B1.c: 264: __nop();
  6285  0A21  0000               	nop
  6286                           
  6287                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  6288  0A22  0021               	movlb	1	; select bank1
  6289  0A23  11BD               	bcf	(_RF1^(0+128)+1),3
  6290                           
  6291                           ;RF_Control_B1.c: 266: } else {
  6292  0A24  0008               	return
  6293  0A25                     l8861:	
  6294                           
  6295                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6296  0A25  0020               	movlb	0	; select bank0
  6297  0A26  086D               	movf	_product,w
  6298  0A27  3E0C               	addlw	12
  6299  0A28  0086               	movwf	6
  6300  0A29  3002               	movlw	2	; select bank4/5
  6301  0A2A  0087               	movwf	7
  6302  0A2B  0022               	movlb	2	; select bank2
  6303  0A2C  082C               	movf	(_RF_Data^(0+256)+12),w
  6304  0A2D  0601               	xorwf	1,w
  6305  0A2E  1D03               	skipz
  6306  0A2F  0008               	return
  6307  0A30  0020               	movlb	0	; select bank0
  6308  0A31  086D               	movf	_product,w
  6309  0A32  3E0D               	addlw	13
  6310  0A33  0086               	movwf	6
  6311  0A34  3002               	movlw	2	; select bank4/5
  6312  0A35  0087               	movwf	7
  6313  0A36  0022               	movlb	2	; select bank2
  6314  0A37  082D               	movf	(_RF_Data^(0+256)+13),w
  6315  0A38  0601               	xorwf	1,w
  6316  0A39  1D03               	skipz
  6317  0A3A  0008               	return
  6318  0A3B  0020               	movlb	0	; select bank0
  6319  0A3C  086D               	movf	_product,w
  6320  0A3D  3E0E               	addlw	14
  6321  0A3E  0086               	movwf	6
  6322  0A3F  3002               	movlw	2	; select bank4/5
  6323  0A40  0087               	movwf	7
  6324  0A41  0022               	movlb	2	; select bank2
  6325  0A42  082E               	movf	(_RF_Data^(0+256)+14),w
  6326  0A43  0601               	xorwf	1,w
  6327  0A44  1D03               	skipz
  6328  0A45  0008               	return
  6329                           
  6330                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  6331  0A46  318F  2751         	fcall	_setControl_Lights_Table
  6332                           
  6333                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  6334  0A48  0021               	movlb	1	; select bank1
  6335  0A49  15BD               	bsf	(_RF1^(0+128)+1),3
  6336                           
  6337                           ;RF_Control_B1.c: 270: }
  6338                           ;RF_Control_B1.c: 271: }
  6339                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6340  0A4A  0008               	return
  6341  0A4B                     l8871:	
  6342  0A4B  0022               	movlb	2	; select bank2
  6343  0A4C  0820               	movf	_RF_Data^(0+256),w
  6344  0A4D  3AFF               	xorlw	255
  6345  0A4E  1D03               	skipz
  6346  0A4F  2A56               	goto	l8877
  6347  0A50  0821               	movf	(_RF_Data^(0+256)+1),w
  6348  0A51  3A02               	xorlw	2
  6349  0A52  1D03               	skipz
  6350  0A53  2A56               	goto	l8877
  6351                           
  6352                           ;RF_Control_B1.c: 273: __nop();
  6353  0A54  0000               	nop
  6354                           
  6355                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6356  0A55  0008               	return
  6357  0A56                     l8877:	
  6358  0A56  0022               	movlb	2	; select bank2
  6359  0A57  08A0               	movf	_RF_Data^(0+256),f
  6360  0A58  1D03               	skipz
  6361  0A59  2A60               	goto	l2268
  6362  0A5A  0821               	movf	(_RF_Data^(0+256)+1),w
  6363  0A5B  3A65               	xorlw	101
  6364  0A5C  1D03               	skipz
  6365  0A5D  2A60               	goto	l2268
  6366                           
  6367                           ;RF_Control_B1.c: 275: __nop();
  6368  0A5E  0000               	nop
  6369                           
  6370                           ;RF_Control_B1.c: 276: } else {
  6371  0A5F  0008               	return
  6372  0A60                     l2268:	
  6373                           
  6374                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6375  0A60  0021               	movlb	1	; select bank1
  6376  0A61  11BD               	bcf	(_RF1^(0+128)+1),3
  6377  0A62  0008               	return
  6378  0A63                     __end_of_getRxData:	
  6379                           
  6380                           	psect	text21
  6381  147B                     __ptext21:	
  6382 ;; *************** function _setLog_Code *****************
  6383 ;; Defined at:
  6384 ;;		line 287 in file "../src/RF_Control_B1.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;Total ram usage:        1 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    7
  6405 ;; This function calls:
  6406 ;;		_setBuz
  6407 ;; This function is called by:
  6408 ;;		_getRxData
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _setLog_Code
  6414  147B                     _setLog_Code:	
  6415                           
  6416                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  6417                           
  6418                           ;incstack = 0
  6419                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6420  147B  0022               	movlb	2	; select bank2
  6421  147C  082C               	movf	(_RF_Data^(0+256)+12),w
  6422  147D  0020               	movlb	0	; select bank0
  6423  147E  00AD               	movwf	??_setLog_Code
  6424  147F  086D               	movf	_product,w
  6425  1480  3E0C               	addlw	12
  6426  1481  0086               	movwf	6
  6427  1482  3002               	movlw	2	; select bank4/5
  6428  1483  0087               	movwf	7
  6429  1484  082D               	movf	??_setLog_Code,w
  6430  1485  0081               	movwf	1
  6431                           
  6432                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  6433  1486  0022               	movlb	2	; select bank2
  6434  1487  082D               	movf	(_RF_Data^(0+256)+13),w
  6435  1488  0020               	movlb	0	; select bank0
  6436  1489  00AD               	movwf	??_setLog_Code
  6437  148A  086D               	movf	_product,w
  6438  148B  3E0D               	addlw	13
  6439  148C  0086               	movwf	6
  6440  148D  3002               	movlw	2	; select bank4/5
  6441  148E  0087               	movwf	7
  6442  148F  082D               	movf	??_setLog_Code,w
  6443  1490  0081               	movwf	1
  6444                           
  6445                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  6446  1491  0022               	movlb	2	; select bank2
  6447  1492  082E               	movf	(_RF_Data^(0+256)+14),w
  6448  1493  0020               	movlb	0	; select bank0
  6449  1494  00AD               	movwf	??_setLog_Code
  6450  1495  086D               	movf	_product,w
  6451  1496  3E0E               	addlw	14
  6452  1497  0086               	movwf	6
  6453  1498  3002               	movlw	2	; select bank4/5
  6454  1499  0087               	movwf	7
  6455  149A  082D               	movf	??_setLog_Code,w
  6456  149B  0081               	movwf	1
  6457                           
  6458                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  6459  149C  3064               	movlw	100
  6460  149D  00A9               	movwf	setBuz@time
  6461  149E  3000               	movlw	0
  6462  149F  00AA               	movwf	setBuz@time+1
  6463  14A0  3001               	movlw	1
  6464  14A1  3197  27A7  3194   	fcall	_setBuz
  6465                           
  6466                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  6467  14A4  0021               	movlb	1	; select bank1
  6468  14A5  133C               	bcf	_RF1^(0+128),6
  6469                           
  6470                           ;RF_Control_B1.c: 293: if (myMain.First) {
  6471  14A6  1EA0               	btfss	_myMain^(0+128),5
  6472  14A7  2CAA               	goto	l2273
  6473                           
  6474                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  6475  14A8  0023               	movlb	3	; select bank3
  6476  14A9  1544               	bsf	(_Memory^(0+384)+36),2
  6477  14AA                     l2273:	
  6478                           
  6479                           ;RF_Control_B1.c: 295: }
  6480                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  6481  14AA  0023               	movlb	3	; select bank3
  6482  14AB  1444               	bsf	(_Memory^(0+384)+36),0
  6483  14AC  0008               	return
  6484  14AD                     __end_of_setLog_Code:	
  6485                           
  6486                           	psect	text22
  6487  0F51                     __ptext22:	
  6488 ;; *************** function _setControl_Lights_Table *****************
  6489 ;; Defined at:
  6490 ;;		line 300 in file "../src/RF_Control_B1.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   11
  6511 ;; This function calls:
  6512 ;;		_setBuz
  6513 ;;		_setDimmerLights
  6514 ;;		_setRFSW_AdjControl
  6515 ;;		_setRFSW_Control
  6516 ;;		_setRFSW_Status
  6517 ;;		_setSw_Status
  6518 ;;		_setTxData
  6519 ;; This function is called by:
  6520 ;;		_getRxData
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           
  6525                           ;psect for function _setControl_Lights_Table
  6526  0F51                     _setControl_Lights_Table:	
  6527                           
  6528                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  6529                           
  6530                           ;incstack = 0
  6531                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6532  0F51  0022               	movlb	2	; select bank2
  6533  0F52  08AF               	movf	(_RF_Data^(0+256)+15),f
  6534  0F53  1D03               	skipz
  6535  0F54  2FAF               	goto	l8569
  6536                           
  6537                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  6538  0F55  0020               	movlb	0	; select bank0
  6539  0F56  01A3               	clrf	setDimmerLights@status
  6540  0F57  3001               	movlw	1
  6541  0F58  318C  248B  318F   	fcall	_setDimmerLights
  6542                           
  6543                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  6544  0F5B  0020               	movlb	0	; select bank0
  6545  0F5C  01A2               	clrf	setRFSW_Status@command
  6546  0F5D  3001               	movlw	1
  6547  0F5E  319E  26FE  318F   	fcall	_setRFSW_Status
  6548                           
  6549                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  6550  0F61  0020               	movlb	0	; select bank0
  6551  0F62  01A2               	clrf	setSw_Status@command
  6552  0F63  3001               	movlw	1
  6553  0F64  319F  270D  318F   	fcall	_setSw_Status
  6554                           
  6555                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  6556  0F67  0020               	movlb	0	; select bank0
  6557  0F68  01A3               	clrf	setDimmerLights@status
  6558  0F69  3002               	movlw	2
  6559  0F6A  318C  248B  318F   	fcall	_setDimmerLights
  6560                           
  6561                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  6562  0F6D  0020               	movlb	0	; select bank0
  6563  0F6E  01A2               	clrf	setRFSW_Status@command
  6564  0F6F  3002               	movlw	2
  6565  0F70  319E  26FE  318F   	fcall	_setRFSW_Status
  6566                           
  6567                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  6568  0F73  0020               	movlb	0	; select bank0
  6569  0F74  01A2               	clrf	setSw_Status@command
  6570  0F75  3002               	movlw	2
  6571  0F76  319F  270D  318F   	fcall	_setSw_Status
  6572                           
  6573                           ;RF_Control_B1.c: 313: setDimmerLights(3, 0);
  6574  0F79  0020               	movlb	0	; select bank0
  6575  0F7A  01A3               	clrf	setDimmerLights@status
  6576  0F7B  3003               	movlw	3
  6577  0F7C  318C  248B  318F   	fcall	_setDimmerLights
  6578                           
  6579                           ;RF_Control_B1.c: 314: setRFSW_Status(3, 0);
  6580  0F7F  0020               	movlb	0	; select bank0
  6581  0F80  01A2               	clrf	setRFSW_Status@command
  6582  0F81  3003               	movlw	3
  6583  0F82  319E  26FE  318F   	fcall	_setRFSW_Status
  6584                           
  6585                           ;RF_Control_B1.c: 315: setSw_Status(3, 0);
  6586  0F85  0020               	movlb	0	; select bank0
  6587  0F86  01A2               	clrf	setSw_Status@command
  6588  0F87  3003               	movlw	3
  6589  0F88  319F  270D  318F   	fcall	_setSw_Status
  6590                           
  6591                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  6592  0F8B  0020               	movlb	0	; select bank0
  6593  0F8C  086D               	movf	_product,w
  6594  0F8D  3E09               	addlw	9
  6595  0F8E  0086               	movwf	6
  6596  0F8F  3002               	movlw	2	; select bank4/5
  6597  0F90  0087               	movwf	7
  6598  0F91  0181               	clrf	1
  6599                           
  6600                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  6601  0F92  086D               	movf	_product,w
  6602  0F93  3E0B               	addlw	11
  6603  0F94  0086               	movwf	6
  6604  0F95  3002               	movlw	2	; select bank4/5
  6605  0F96  0087               	movwf	7
  6606  0F97  0181               	clrf	1
  6607                           
  6608                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  6609  0F98  086D               	movf	_product,w
  6610  0F99  3E0F               	addlw	15
  6611  0F9A  0086               	movwf	6
  6612  0F9B  3002               	movlw	2	; select bank4/5
  6613  0F9C  0087               	movwf	7
  6614  0F9D  0181               	clrf	1
  6615                           
  6616                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  6617  0F9E  086D               	movf	_product,w
  6618  0F9F  3E11               	addlw	17
  6619  0FA0  0086               	movwf	6
  6620  0FA1  3002               	movlw	2	; select bank4/5
  6621  0FA2  0087               	movwf	7
  6622  0FA3  0181               	clrf	1
  6623                           
  6624                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  6625  0FA4  3064               	movlw	100
  6626  0FA5  00A9               	movwf	setBuz@time
  6627  0FA6  3000               	movlw	0
  6628  0FA7  00AA               	movwf	setBuz@time+1
  6629  0FA8  3001               	movlw	1
  6630  0FA9  3197  27A7  318F   	fcall	_setBuz
  6631                           
  6632                           ;RF_Control_B1.c: 323: setTxData();
  6633  0FAC  3185  25F8         	fcall	_setTxData
  6634                           
  6635                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  6636  0FAE  0008               	return
  6637  0FAF                     l8569:	
  6638  0FAF  0022               	movlb	2	; select bank2
  6639  0FB0  082F               	movf	(_RF_Data^(0+256)+15),w
  6640  0FB1  3A20               	xorlw	32
  6641  0FB2  1D03               	skipz
  6642  0FB3  2FCA               	goto	l8575
  6643                           
  6644                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  6645  0FB4  0020               	movlb	0	; select bank0
  6646  0FB5  086D               	movf	_product,w
  6647  0FB6  3E09               	addlw	9
  6648  0FB7  0086               	movwf	6
  6649  0FB8  3002               	movlw	2	; select bank4/5
  6650  0FB9  0087               	movwf	7
  6651  0FBA  0181               	clrf	1
  6652                           
  6653                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  6654  0FBB  086D               	movf	_product,w
  6655  0FBC  3E0B               	addlw	11
  6656  0FBD  0086               	movwf	6
  6657  0FBE  3002               	movlw	2	; select bank4/5
  6658  0FBF  0087               	movwf	7
  6659  0FC0  0181               	clrf	1
  6660                           
  6661                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  6662  0FC1  086D               	movf	_product,w
  6663  0FC2  3E11               	addlw	17
  6664  0FC3  0086               	movwf	6
  6665  0FC4  3002               	movlw	2	; select bank4/5
  6666  0FC5  0087               	movwf	7
  6667  0FC6  0181               	clrf	1
  6668                           
  6669                           ;RF_Control_B1.c: 328: setTxData();
  6670  0FC7  3185  25F8         	fcall	_setTxData
  6671                           
  6672                           ;RF_Control_B1.c: 329: }
  6673  0FC9  0008               	return
  6674  0FCA                     l8575:	
  6675                           
  6676                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  6677  0FCA  0022               	movlb	2	; select bank2
  6678  0FCB  082F               	movf	(_RF_Data^(0+256)+15),w
  6679  0FCC  3A01               	xorlw	1
  6680  0FCD  1D03               	skipz
  6681  0FCE  2FD3               	goto	l8579
  6682                           
  6683                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  6684  0FCF  3001               	movlw	1
  6685  0FD0  3187  2769         	fcall	_setRFSW_Control
  6686                           
  6687                           ;RF_Control_B1.c: 333: }
  6688  0FD2  0008               	return
  6689  0FD3                     l8579:	
  6690                           
  6691                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  6692  0FD3  0022               	movlb	2	; select bank2
  6693  0FD4  082F               	movf	(_RF_Data^(0+256)+15),w
  6694  0FD5  3A11               	xorlw	17
  6695  0FD6  1D03               	skipz
  6696  0FD7  2FDC               	goto	l8583
  6697                           
  6698                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  6699  0FD8  3001               	movlw	1
  6700  0FD9  3194  24E2         	fcall	_setRFSW_AdjControl
  6701                           
  6702                           ;RF_Control_B1.c: 337: }
  6703  0FDB  0008               	return
  6704  0FDC                     l8583:	
  6705                           
  6706                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  6707  0FDC  0022               	movlb	2	; select bank2
  6708  0FDD  082F               	movf	(_RF_Data^(0+256)+15),w
  6709  0FDE  3A02               	xorlw	2
  6710  0FDF  1D03               	skipz
  6711  0FE0  2FE5               	goto	l8587
  6712                           
  6713                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  6714  0FE1  3002               	movlw	2
  6715  0FE2  3187  2769         	fcall	_setRFSW_Control
  6716                           
  6717                           ;RF_Control_B1.c: 344: }
  6718  0FE4  0008               	return
  6719  0FE5                     l8587:	
  6720                           
  6721                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  6722  0FE5  0022               	movlb	2	; select bank2
  6723  0FE6  082F               	movf	(_RF_Data^(0+256)+15),w
  6724  0FE7  3A21               	xorlw	33
  6725  0FE8  1D03               	skipz
  6726  0FE9  2FEE               	goto	l8591
  6727                           
  6728                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  6729  0FEA  3002               	movlw	2
  6730  0FEB  3194  24E2         	fcall	_setRFSW_AdjControl
  6731                           
  6732                           ;RF_Control_B1.c: 348: }
  6733  0FED  0008               	return
  6734  0FEE                     l8591:	
  6735                           
  6736                           ;RF_Control_B1.c: 353: else if (RF_Data[15] == 0x03) {
  6737  0FEE  0022               	movlb	2	; select bank2
  6738  0FEF  082F               	movf	(_RF_Data^(0+256)+15),w
  6739  0FF0  3A03               	xorlw	3
  6740  0FF1  1D03               	skipz
  6741  0FF2  2FF7               	goto	l8595
  6742                           
  6743                           ;RF_Control_B1.c: 354: setRFSW_Control(3);
  6744  0FF3  3003               	movlw	3
  6745  0FF4  3187  2769         	fcall	_setRFSW_Control
  6746                           
  6747                           ;RF_Control_B1.c: 355: }
  6748  0FF6  0008               	return
  6749  0FF7                     l8595:	
  6750                           
  6751                           ;RF_Control_B1.c: 357: else if (RF_Data[15] == 0x31) {
  6752  0FF7  0022               	movlb	2	; select bank2
  6753  0FF8  082F               	movf	(_RF_Data^(0+256)+15),w
  6754  0FF9  3A31               	xorlw	49
  6755  0FFA  1D03               	skipz
  6756  0FFB  0008               	return
  6757                           
  6758                           ;RF_Control_B1.c: 358: setRFSW_AdjControl(3);
  6759  0FFC  3003               	movlw	3
  6760  0FFD  3194  24E2         	fcall	_setRFSW_AdjControl
  6761  0FFF  0008               	return
  6762  1000                     __end_of_setControl_Lights_Table:	
  6763                           
  6764                           	psect	text23
  6765  0769                     __ptext23:	
  6766 ;; *************** function _setRFSW_Control *****************
  6767 ;; Defined at:
  6768 ;;		line 388 in file "../src/RF_Control_B1.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  sw              1    wreg     unsigned char 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  sw              1   67[BANK0 ] unsigned char 
  6773 ;; Return value:  Size  Location     Type
  6774 ;;		None               void
  6775 ;; Registers used:
  6776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;Total ram usage:        2 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    9
  6789 ;; This function calls:
  6790 ;;		_RfSWPointSelect
  6791 ;;		_setBuz
  6792 ;;		_setDelayOff_GO
  6793 ;;		_setDimmerLights_Switch
  6794 ;;		_setDimmerLights_Trigger
  6795 ;;		_setRF_DimmerLights
  6796 ;;		_setSw_Status
  6797 ;;		_setTxData
  6798 ;; This function is called by:
  6799 ;;		_setControl_Lights_Table
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function _setRFSW_Control
  6805  0769                     _setRFSW_Control:	
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6809                           ;setRFSW_Control@sw stored from wreg
  6810  0769  0020               	movlb	0	; select bank0
  6811  076A  00E3               	movwf	setRFSW_Control@sw
  6812                           
  6813                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  6814  076B  0863               	movf	setRFSW_Control@sw,w
  6815  076C  3192  2213  3187   	fcall	_RfSWPointSelect
  6816                           
  6817                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  6818  076F  0021               	movlb	1	; select bank1
  6819  0770  0854               	movf	_RFSW^(0+128),w
  6820  0771  0086               	movwf	6
  6821  0772  0187               	clrf	7
  6822  0773  1801               	btfsc	1,0
  6823  0774  2FAB               	goto	l8459
  6824                           
  6825                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  6826  0775  0022               	movlb	2	; select bank2
  6827  0776  0830               	movf	(_RF_Data^(0+256)+16),w
  6828  0777  3A80               	xorlw	128
  6829  0778  1D03               	skipz
  6830  0779  2F87               	goto	l8449
  6831                           
  6832                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  6833  077A  0020               	movlb	0	; select bank0
  6834  077B  01AA               	clrf	setDelayOff_GO@command
  6835  077C  0AAA               	incf	setDelayOff_GO@command,f
  6836  077D  0022               	movlb	2	; select bank2
  6837  077E  0831               	movf	(_RF_Data^(0+256)+17),w
  6838  077F  0020               	movlb	0	; select bank0
  6839  0780  00E2               	movwf	??_setRFSW_Control
  6840  0781  0862               	movf	??_setRFSW_Control,w
  6841  0782  00AB               	movwf	setDelayOff_GO@value
  6842  0783  0863               	movf	setRFSW_Control@sw,w
  6843  0784  3188  2071  3187   	fcall	_setDelayOff_GO
  6844  0787                     l8449:	
  6845                           
  6846                           ;RF_Control_B1.c: 393: }
  6847                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  6848  0787  0021               	movlb	1	; select bank1
  6849  0788  0854               	movf	_RFSW^(0+128),w
  6850  0789  0086               	movwf	6
  6851  078A  0187               	clrf	7
  6852  078B  1401               	bsf	1,0
  6853                           
  6854                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  6855  078C  0020               	movlb	0	; select bank0
  6856  078D  01A2               	clrf	setSw_Status@command
  6857  078E  0AA2               	incf	setSw_Status@command,f
  6858  078F  0863               	movf	setRFSW_Control@sw,w
  6859  0790  319F  270D  3187   	fcall	_setSw_Status
  6860                           
  6861                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  6862  0793  0020               	movlb	0	; select bank0
  6863  0794  01A2               	clrf	setDimmerLights_Trigger@command
  6864  0795  0AA2               	incf	setDimmerLights_Trigger@command,f
  6865  0796  0863               	movf	setRFSW_Control@sw,w
  6866  0797  319F  2759  3187   	fcall	_setDimmerLights_Trigger
  6867                           
  6868                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  6869  079A  0020               	movlb	0	; select bank0
  6870  079B  01A2               	clrf	setDimmerLights_Switch@command
  6871  079C  0AA2               	incf	setDimmerLights_Switch@command,f
  6872  079D  0863               	movf	setRFSW_Control@sw,w
  6873  079E  319F  2749  3187   	fcall	_setDimmerLights_Switch
  6874                           
  6875                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  6876  07A1  0021               	movlb	1	; select bank1
  6877  07A2  0854               	movf	_RFSW^(0+128),w
  6878  07A3  0086               	movwf	6
  6879  07A4  0187               	clrf	7
  6880  07A5  3000               	movlw	0
  6881  07A6  1801               	btfsc	1,0
  6882  07A7  3001               	movlw	1
  6883  07A8  0020               	movlb	0	; select bank0
  6884  07A9  00DD               	movwf	setRF_DimmerLights@on
  6885  07AA  2FE9               	goto	L5
  6886  07AB                     l8459:	
  6887                           ;RF_Control_B1.c: 401: } else {
  6888                           
  6889                           
  6890                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  6891  07AB  0022               	movlb	2	; select bank2
  6892  07AC  0830               	movf	(_RF_Data^(0+256)+16),w
  6893  07AD  3A80               	xorlw	128
  6894  07AE  1D03               	skipz
  6895  07AF  2FC1               	goto	l8463
  6896                           
  6897                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  6898  07B0  0020               	movlb	0	; select bank0
  6899  07B1  01AA               	clrf	setDelayOff_GO@command
  6900  07B2  0AAA               	incf	setDelayOff_GO@command,f
  6901  07B3  0022               	movlb	2	; select bank2
  6902  07B4  0831               	movf	(_RF_Data^(0+256)+17),w
  6903  07B5  0020               	movlb	0	; select bank0
  6904  07B6  00E2               	movwf	??_setRFSW_Control
  6905  07B7  0862               	movf	??_setRFSW_Control,w
  6906  07B8  00AB               	movwf	setDelayOff_GO@value
  6907  07B9  0863               	movf	setRFSW_Control@sw,w
  6908  07BA  3188  2071  3187   	fcall	_setDelayOff_GO
  6909                           
  6910                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  6911  07BD  0020               	movlb	0	; select bank0
  6912  07BE  01DD               	clrf	setRF_DimmerLights@on
  6913  07BF  0ADD               	incf	setRF_DimmerLights@on,f
  6914  07C0  2FE9               	goto	L5
  6915  07C1                     l8463:	
  6916                           ;RF_Control_B1.c: 405: } else {
  6917                           
  6918                           
  6919                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  6920  07C1  0021               	movlb	1	; select bank1
  6921  07C2  0854               	movf	_RFSW^(0+128),w
  6922  07C3  0086               	movwf	6
  6923  07C4  0187               	clrf	7
  6924  07C5  1001               	bcf	1,0
  6925                           
  6926                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  6927  07C6  0020               	movlb	0	; select bank0
  6928  07C7  01A2               	clrf	setSw_Status@command
  6929  07C8  0863               	movf	setRFSW_Control@sw,w
  6930  07C9  319F  270D  3187   	fcall	_setSw_Status
  6931                           
  6932                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  6933  07CC  0020               	movlb	0	; select bank0
  6934  07CD  01A2               	clrf	setDimmerLights_Trigger@command
  6935  07CE  0AA2               	incf	setDimmerLights_Trigger@command,f
  6936  07CF  0863               	movf	setRFSW_Control@sw,w
  6937  07D0  319F  2759  3187   	fcall	_setDimmerLights_Trigger
  6938                           
  6939                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  6940  07D3  0021               	movlb	1	; select bank1
  6941  07D4  0854               	movf	_RFSW^(0+128),w
  6942  07D5  0086               	movwf	6
  6943  07D6  0187               	clrf	7
  6944  07D7  3000               	movlw	0
  6945  07D8  1801               	btfsc	1,0
  6946  07D9  3001               	movlw	1
  6947  07DA  0020               	movlb	0	; select bank0
  6948  07DB  00A2               	movwf	setDimmerLights_Switch@command
  6949  07DC  0863               	movf	setRFSW_Control@sw,w
  6950  07DD  319F  2749  3187   	fcall	_setDimmerLights_Switch
  6951                           
  6952                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  6953  07E0  0020               	movlb	0	; select bank0
  6954  07E1  01AA               	clrf	setDelayOff_GO@command
  6955  07E2  01AB               	clrf	setDelayOff_GO@value
  6956  07E3  0863               	movf	setRFSW_Control@sw,w
  6957  07E4  3188  2071  3187   	fcall	_setDelayOff_GO
  6958                           
  6959                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  6960  07E7  0020               	movlb	0	; select bank0
  6961  07E8  01DD               	clrf	setRF_DimmerLights@on
  6962  07E9                     L5:	
  6963  07E9  0863               	movf	setRFSW_Control@sw,w
  6964  07EA  318A  22CE  3187   	fcall	_setRF_DimmerLights
  6965                           
  6966                           ;RF_Control_B1.c: 414: }
  6967                           ;RF_Control_B1.c: 415: }
  6968                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  6969  07ED  3064               	movlw	100
  6970  07EE  0020               	movlb	0	; select bank0
  6971  07EF  00A9               	movwf	setBuz@time
  6972  07F0  3000               	movlw	0
  6973  07F1  00AA               	movwf	setBuz@time+1
  6974  07F2  3001               	movlw	1
  6975  07F3  3197  27A7  3187   	fcall	_setBuz
  6976                           
  6977                           ;RF_Control_B1.c: 417: setTxData();
  6978  07F6  3185  25F8         	fcall	_setTxData
  6979  07F8  0008               	return
  6980  07F9                     __end_of_setRFSW_Control:	
  6981                           
  6982                           	psect	text24
  6983  0871                     __ptext24:	
  6984 ;; *************** function _setDelayOff_GO *****************
  6985 ;; Defined at:
  6986 ;;		line 86 in file "../src/DelayOff_B1.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  sw              1    wreg     unsigned char 
  6989 ;;  command         1   10[BANK0 ] unsigned char 
  6990 ;;  value           1   11[BANK0 ] unsigned char 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  sw              1   14[BANK0 ] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;		None               void
  6995 ;; Registers used:
  6996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:        5 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    7
  7009 ;; This function calls:
  7010 ;;		_DelayOffPointSelect
  7011 ;;		_DelayTimejudge
  7012 ;; This function is called by:
  7013 ;;		_setRFSW_Control
  7014 ;;		_Sw_DimmerOffFunc
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function _setDelayOff_GO
  7020  0871                     _setDelayOff_GO:	
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7024                           ;setDelayOff_GO@sw stored from wreg
  7025  0871  0020               	movlb	0	; select bank0
  7026  0872  00AE               	movwf	setDelayOff_GO@sw
  7027                           
  7028                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7029  0873  082E               	movf	setDelayOff_GO@sw,w
  7030  0874  3191  219B  3188   	fcall	_DelayOffPointSelect
  7031                           
  7032                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7033  0877  0872               	movf	_DelayOff,w
  7034  0878  0086               	movwf	6
  7035  0879  0187               	clrf	7
  7036  087A  1C01               	btfss	1,0
  7037  087B  0008               	return
  7038                           
  7039                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7040  087C  0020               	movlb	0	; select bank0
  7041  087D  082A               	movf	setDelayOff_GO@command,w
  7042  087E  3A01               	xorlw	1
  7043  087F  3000               	movlw	0
  7044  0880  1903               	skipnz
  7045  0881  3001               	movlw	1
  7046  0882  00AC               	movwf	??_setDelayOff_GO
  7047  0883  0872               	movf	_DelayOff,w
  7048  0884  0086               	movwf	6
  7049  0885  0187               	clrf	7
  7050  0886  0DAC               	rlf	??_setDelayOff_GO,f
  7051  0887  0801               	movf	1,w
  7052  0888  062C               	xorwf	??_setDelayOff_GO,w
  7053  0889  39FD               	andlw	-3
  7054  088A  062C               	xorwf	??_setDelayOff_GO,w
  7055  088B  0081               	movwf	1
  7056                           
  7057                           ;DelayOff_B1.c: 90: if (command == 1) {
  7058  088C  082A               	movf	setDelayOff_GO@command,w
  7059  088D  3A01               	xorlw	1
  7060  088E  1D03               	skipz
  7061  088F  28B9               	goto	l8269
  7062                           
  7063                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7064  0890  082B               	movf	setDelayOff_GO@value,w
  7065  0891  3193  239B  3188   	fcall	_DelayTimejudge
  7066  0894  0020               	movlb	0	; select bank0
  7067  0895  00AC               	movwf	??_setDelayOff_GO
  7068  0896  0872               	movf	_DelayOff,w
  7069  0897  0086               	movwf	6
  7070  0898  0187               	clrf	7
  7071  0899  082C               	movf	??_setDelayOff_GO,w
  7072  089A  0081               	movwf	1
  7073                           
  7074                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7075  089B  300F               	movlw	15
  7076  089C  052B               	andwf	setDelayOff_GO@value,w
  7077  089D  00AC               	movwf	??_setDelayOff_GO
  7078  089E  082C               	movf	??_setDelayOff_GO,w
  7079  089F  3A05               	xorlw	5
  7080  08A0  1903               	skipnz
  7081  08A1  28A6               	goto	l8263
  7082  08A2  082B               	movf	setDelayOff_GO@value,w
  7083  08A3  390F               	andlw	15
  7084  08A4  1D03               	btfss	3,2
  7085  08A5  28AC               	goto	l8267
  7086  08A6                     l8263:	
  7087  08A6  3026               	movlw	38
  7088  08A7  022B               	subwf	setDelayOff_GO@value,w
  7089  08A8  1803               	skipnc
  7090  08A9  28AC               	goto	l8267
  7091                           
  7092                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7093  08AA  082B               	movf	setDelayOff_GO@value,w
  7094  08AB  28AD               	goto	L6
  7095  08AC                     l8267:	
  7096                           ;DelayOff_B1.c: 94: } else {
  7097                           
  7098                           
  7099                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7100  08AC  3005               	movlw	5
  7101  08AD                     L6:	
  7102  08AD  00AC               	movwf	??_setDelayOff_GO
  7103  08AE  082E               	movf	setDelayOff_GO@sw,w
  7104  08AF  3E1A               	addlw	26
  7105  08B0  076D               	addwf	_product,w
  7106  08B1  00AD               	movwf	??_setDelayOff_GO+1
  7107  08B2  082D               	movf	??_setDelayOff_GO+1,w
  7108  08B3  0086               	movwf	6
  7109  08B4  3002               	movlw	2	; select bank4/5
  7110  08B5  0087               	movwf	7
  7111  08B6  082C               	movf	??_setDelayOff_GO,w
  7112  08B7  0081               	movwf	1
  7113                           
  7114                           ;DelayOff_B1.c: 96: }
  7115                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7116  08B8  28C5               	goto	l8273
  7117  08B9                     l8269:	
  7118  08B9  08AA               	movf	setDelayOff_GO@command,f
  7119  08BA  1D03               	skipz
  7120  08BB  28C5               	goto	l8273
  7121                           
  7122                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7123  08BC  082E               	movf	setDelayOff_GO@sw,w
  7124  08BD  3E1A               	addlw	26
  7125  08BE  076D               	addwf	_product,w
  7126  08BF  00AC               	movwf	??_setDelayOff_GO
  7127  08C0  082C               	movf	??_setDelayOff_GO,w
  7128  08C1  0086               	movwf	6
  7129  08C2  3002               	movlw	2	; select bank4/5
  7130  08C3  0087               	movwf	7
  7131  08C4  0181               	clrf	1
  7132  08C5                     l8273:	
  7133                           
  7134                           ;DelayOff_B1.c: 99: }
  7135                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7136  08C5  0872               	movf	_DelayOff,w
  7137  08C6  0086               	movwf	6
  7138  08C7  0187               	clrf	7
  7139  08C8  3000               	movlw	0
  7140  08C9  3FC0               	movwi [0]fsr1
  7141  08CA  3FC1               	movwi [1]fsr1
  7142                           
  7143                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7144  08CB  0872               	movf	_DelayOff,w
  7145  08CC  0086               	movwf	6
  7146  08CD  0187               	clrf	7
  7147  08CE  0181               	clrf	1
  7148  08CF  0008               	return
  7149  08D0                     __end_of_setDelayOff_GO:	
  7150                           
  7151                           	psect	text25
  7152  139B                     __ptext25:	
  7153 ;; *************** function _DelayTimejudge *****************
  7154 ;; Defined at:
  7155 ;;		line 106 in file "../src/DelayOff_B1.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  value           1    wreg     unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  value           1    9[BANK0 ] unsigned char 
  7160 ;;  k               1    8[BANK0 ] unsigned char 
  7161 ;;  j               1    7[BANK0 ] unsigned char 
  7162 ;;  i               1    6[BANK0 ] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      unsigned char 
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0, pclath, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;Total ram usage:        6 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    6
  7179 ;; This function calls:
  7180 ;;		___bmul
  7181 ;; This function is called by:
  7182 ;;		_setDelayOff_GO
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _DelayTimejudge
  7188  139B                     _DelayTimejudge:	
  7189                           
  7190                           ;incstack = 0
  7191                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7192                           ;DelayTimejudge@value stored from wreg
  7193  139B  0020               	movlb	0	; select bank0
  7194  139C  00A9               	movwf	DelayTimejudge@value
  7195                           
  7196                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7197  139D  3005               	movlw	5
  7198  139E  00A4               	movwf	??_DelayTimejudge
  7199  139F  0824               	movf	??_DelayTimejudge,w
  7200  13A0  00A6               	movwf	DelayTimejudge@i
  7201  13A1  01A7               	clrf	DelayTimejudge@j
  7202  13A2  01A8               	clrf	DelayTimejudge@k
  7203                           
  7204                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7205  13A3  3031               	movlw	49
  7206  13A4  0229               	subwf	DelayTimejudge@value,w
  7207  13A5  1803               	skipnc
  7208  13A6  2BC3               	goto	l8057
  7209                           
  7210                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7211  13A7  0829               	movf	DelayTimejudge@value,w
  7212  13A8  390F               	andlw	15
  7213  13A9  00A4               	movwf	??_DelayTimejudge
  7214  13AA  0824               	movf	??_DelayTimejudge,w
  7215  13AB  00A7               	movwf	DelayTimejudge@j
  7216                           
  7217                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7218  13AC  0829               	movf	DelayTimejudge@value,w
  7219  13AD  00A4               	movwf	??_DelayTimejudge
  7220  13AE  3004               	movlw	4
  7221  13AF                     u7975:	
  7222  13AF  36A4               	lsrf	??_DelayTimejudge,f
  7223  13B0  0B89               	decfsz	9,f
  7224  13B1  2BAF               	goto	u7975
  7225  13B2  0824               	movf	??_DelayTimejudge,w
  7226  13B3  390F               	andlw	15
  7227  13B4  00A5               	movwf	??_DelayTimejudge+1
  7228  13B5  0825               	movf	??_DelayTimejudge+1,w
  7229  13B6  00A8               	movwf	DelayTimejudge@k
  7230                           
  7231                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7232  13B7  300A               	movlw	10
  7233  13B8  00A4               	movwf	??_DelayTimejudge
  7234  13B9  0824               	movf	??_DelayTimejudge,w
  7235  13BA  00A0               	movwf	___bmul@multiplicand
  7236  13BB  0828               	movf	DelayTimejudge@k,w
  7237  13BC  319F  27EE         	fcall	___bmul
  7238  13BE  0020               	movlb	0	; select bank0
  7239  13BF  0727               	addwf	DelayTimejudge@j,w
  7240  13C0  00A5               	movwf	??_DelayTimejudge+1
  7241  13C1  0825               	movf	??_DelayTimejudge+1,w
  7242  13C2  00A6               	movwf	DelayTimejudge@i
  7243  13C3                     l8057:	
  7244                           
  7245                           ;DelayOff_B1.c: 112: }
  7246                           ;DelayOff_B1.c: 133: return i;
  7247  13C3  0826               	movf	DelayTimejudge@i,w
  7248  13C4  0008               	return
  7249  13C5                     __end_of_DelayTimejudge:	
  7250                           
  7251                           	psect	text26
  7252  1FEE                     __ptext26:	
  7253 ;; *************** function ___bmul *****************
  7254 ;; Defined at:
  7255 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;  multiplier      1    wreg     unsigned char 
  7258 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7261 ;;  product         1    2[BANK0 ] unsigned char 
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      unsigned char 
  7264 ;; Registers used:
  7265 ;;		wreg, status,2, status,0
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7271 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;Total ram usage:        4 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    5
  7278 ;; This function calls:
  7279 ;;		Nothing
  7280 ;; This function is called by:
  7281 ;;		_DelayTimejudge
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function ___bmul
  7287  1FEE                     ___bmul:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7291                           ;___bmul@multiplier stored from wreg
  7292  1FEE  0020               	movlb	0	; select bank0
  7293  1FEF  00A3               	movwf	___bmul@multiplier
  7294  1FF0  01A2               	clrf	___bmul@product
  7295  1FF1                     l8019:	
  7296  1FF1  1C23               	btfss	___bmul@multiplier,0
  7297  1FF2  2FF7               	goto	l8023
  7298  1FF3  0820               	movf	___bmul@multiplicand,w
  7299  1FF4  00A1               	movwf	??___bmul
  7300  1FF5  0821               	movf	??___bmul,w
  7301  1FF6  07A2               	addwf	___bmul@product,f
  7302  1FF7                     l8023:	
  7303  1FF7  1003               	clrc
  7304  1FF8  0DA0               	rlf	___bmul@multiplicand,f
  7305  1FF9  1003               	clrc
  7306  1FFA  0CA3               	rrf	___bmul@multiplier,f
  7307  1FFB  08A3               	movf	___bmul@multiplier,f
  7308  1FFC  1D03               	skipz
  7309  1FFD  2FF1               	goto	l8019
  7310  1FFE  0822               	movf	___bmul@product,w
  7311  1FFF  0008               	return
  7312  2000                     __end_of___bmul:	
  7313                           
  7314                           	psect	text27
  7315  14E2                     __ptext27:	
  7316 ;; *************** function _setRFSW_AdjControl *****************
  7317 ;; Defined at:
  7318 ;;		line 421 in file "../src/RF_Control_B1.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  sw              1    wreg     unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  sw              1   70[BANK0 ] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;		None               void
  7325 ;; Registers used:
  7326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;Total ram usage:        3 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:   10
  7339 ;; This function calls:
  7340 ;;		_RfSWPointSelect
  7341 ;;		_setRF_DimmerValue
  7342 ;;		_setTxData
  7343 ;; This function is called by:
  7344 ;;		_setControl_Lights_Table
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _setRFSW_AdjControl
  7350  14E2                     _setRFSW_AdjControl:	
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7354                           ;setRFSW_AdjControl@sw stored from wreg
  7355  14E2  0020               	movlb	0	; select bank0
  7356  14E3  00E6               	movwf	setRFSW_AdjControl@sw
  7357                           
  7358                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  7359  14E4  0866               	movf	setRFSW_AdjControl@sw,w
  7360  14E5  3192  2213  3194   	fcall	_RfSWPointSelect
  7361                           
  7362                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  7363  14E8  0021               	movlb	1	; select bank1
  7364  14E9  0854               	movf	_RFSW^(0+128),w
  7365  14EA  0086               	movwf	6
  7366  14EB  0187               	clrf	7
  7367  14EC  1C01               	btfss	1,0
  7368  14ED  2CF6               	goto	l8487
  7369                           
  7370                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  7371  14EE  0023               	movlb	3	; select bank3
  7372  14EF  1444               	bsf	(_Memory^(0+384)+36),0
  7373                           
  7374                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  7375  14F0  0020               	movlb	0	; select bank0
  7376  14F1  0866               	movf	setRFSW_AdjControl@sw,w
  7377  14F2  3194  24AD  3194   	fcall	_setRF_DimmerValue
  7378                           
  7379                           ;RF_Control_B1.c: 426: } else {
  7380  14F5  2D08               	goto	l2310
  7381  14F6                     l8487:	
  7382                           
  7383                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  7384  14F6  0020               	movlb	0	; select bank0
  7385  14F7  0866               	movf	setRFSW_AdjControl@sw,w
  7386  14F8  3E14               	addlw	20
  7387  14F9  076D               	addwf	_product,w
  7388  14FA  00E4               	movwf	??_setRFSW_AdjControl
  7389  14FB  0864               	movf	??_setRFSW_AdjControl,w
  7390  14FC  0086               	movwf	6
  7391  14FD  3002               	movlw	2	; select bank4/5
  7392  14FE  0087               	movwf	7
  7393  14FF  0801               	movf	1,w
  7394  1500  00E5               	movwf	??_setRFSW_AdjControl+1
  7395  1501  086D               	movf	_product,w
  7396  1502  3E09               	addlw	9
  7397  1503  0086               	movwf	6
  7398  1504  3002               	movlw	2	; select bank4/5
  7399  1505  0087               	movwf	7
  7400  1506  0865               	movf	??_setRFSW_AdjControl+1,w
  7401  1507  0081               	movwf	1
  7402  1508                     l2310:	
  7403                           
  7404                           ;RF_Control_B1.c: 428: }
  7405                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  7406  1508  0020               	movlb	0	; select bank0
  7407  1509  0866               	movf	setRFSW_AdjControl@sw,w
  7408  150A  3E1A               	addlw	26
  7409  150B  076D               	addwf	_product,w
  7410  150C  00E4               	movwf	??_setRFSW_AdjControl
  7411  150D  0864               	movf	??_setRFSW_AdjControl,w
  7412  150E  0086               	movwf	6
  7413  150F  3002               	movlw	2	; select bank4/5
  7414  1510  0087               	movwf	7
  7415  1511  0801               	movf	1,w
  7416  1512  00E5               	movwf	??_setRFSW_AdjControl+1
  7417  1513  086D               	movf	_product,w
  7418  1514  3E11               	addlw	17
  7419  1515  0086               	movwf	6
  7420  1516  3002               	movlw	2	; select bank4/5
  7421  1517  0087               	movwf	7
  7422  1518  0865               	movf	??_setRFSW_AdjControl+1,w
  7423  1519  0081               	movwf	1
  7424                           
  7425                           ;RF_Control_B1.c: 430: setTxData();
  7426  151A  3185  25F8         	fcall	_setTxData
  7427  151C  0008               	return
  7428  151D                     __end_of_setRFSW_AdjControl:	
  7429                           
  7430                           	psect	text28
  7431  14AD                     __ptext28:	
  7432 ;; *************** function _setRF_DimmerValue *****************
  7433 ;; Defined at:
  7434 ;;		line 441 in file "../src/RF_Control_B1.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  lights          1    wreg     unsigned char 
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;  lights          1   67[BANK0 ] unsigned char 
  7439 ;; Return value:  Size  Location     Type
  7440 ;;		None               void
  7441 ;; Registers used:
  7442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;Total ram usage:        3 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    9
  7455 ;; This function calls:
  7456 ;;		_setDimmerLights_AdjRF
  7457 ;; This function is called by:
  7458 ;;		_setRFSW_AdjControl
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           
  7463                           ;psect for function _setRF_DimmerValue
  7464  14AD                     _setRF_DimmerValue:	
  7465                           
  7466                           ;incstack = 0
  7467                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7468                           ;setRF_DimmerValue@lights stored from wreg
  7469  14AD  0020               	movlb	0	; select bank0
  7470  14AE  00E3               	movwf	setRF_DimmerValue@lights
  7471                           
  7472                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  7473  14AF  3065               	movlw	101
  7474  14B0  0022               	movlb	2	; select bank2
  7475  14B1  0229               	subwf	(_RF_Data^(0+256)+9),w
  7476  14B2  1C03               	skipc
  7477  14B3  2CBA               	goto	l8357
  7478                           
  7479                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  7480  14B4  3064               	movlw	100
  7481  14B5  0020               	movlb	0	; select bank0
  7482  14B6  00E1               	movwf	??_setRF_DimmerValue
  7483  14B7  0861               	movf	??_setRF_DimmerValue,w
  7484  14B8  0022               	movlb	2	; select bank2
  7485  14B9  00A9               	movwf	(_RF_Data^(0+256)+9)
  7486  14BA                     l8357:	
  7487                           
  7488                           ;RF_Control_B1.c: 444: }
  7489                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  7490  14BA  0829               	movf	(_RF_Data^(0+256)+9),w
  7491  14BB  0020               	movlb	0	; select bank0
  7492  14BC  00E1               	movwf	??_setRF_DimmerValue
  7493  14BD  086D               	movf	_product,w
  7494  14BE  3E09               	addlw	9
  7495  14BF  0086               	movwf	6
  7496  14C0  3002               	movlw	2	; select bank4/5
  7497  14C1  0087               	movwf	7
  7498  14C2  0861               	movf	??_setRF_DimmerValue,w
  7499  14C3  0081               	movwf	1
  7500                           
  7501                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  7502  14C4  0863               	movf	setRF_DimmerValue@lights,w
  7503  14C5  00E1               	movwf	??_setRF_DimmerValue
  7504  14C6  086D               	movf	_product,w
  7505  14C7  3E0B               	addlw	11
  7506  14C8  0086               	movwf	6
  7507  14C9  3002               	movlw	2	; select bank4/5
  7508  14CA  0087               	movwf	7
  7509  14CB  0861               	movf	??_setRF_DimmerValue,w
  7510  14CC  0081               	movwf	1
  7511                           
  7512                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  7513  14CD  086D               	movf	_product,w
  7514  14CE  3E09               	addlw	9
  7515  14CF  0086               	movwf	6
  7516  14D0  3002               	movlw	2	; select bank4/5
  7517  14D1  0087               	movwf	7
  7518  14D2  0801               	movf	1,w
  7519  14D3  00E1               	movwf	??_setRF_DimmerValue
  7520  14D4  0863               	movf	setRF_DimmerValue@lights,w
  7521  14D5  3E14               	addlw	20
  7522  14D6  076D               	addwf	_product,w
  7523  14D7  00E2               	movwf	??_setRF_DimmerValue+1
  7524  14D8  0862               	movf	??_setRF_DimmerValue+1,w
  7525  14D9  0086               	movwf	6
  7526  14DA  3002               	movlw	2	; select bank4/5
  7527  14DB  0087               	movwf	7
  7528  14DC  0861               	movf	??_setRF_DimmerValue,w
  7529  14DD  0081               	movwf	1
  7530                           
  7531                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  7532  14DE  0863               	movf	setRF_DimmerValue@lights,w
  7533  14DF  3192  22D9         	fcall	_setDimmerLights_AdjRF
  7534  14E1  0008               	return
  7535  14E2                     __end_of_setRF_DimmerValue:	
  7536                           
  7537                           	psect	text29
  7538  12D9                     __ptext29:	
  7539 ;; *************** function _setDimmerLights_AdjRF *****************
  7540 ;; Defined at:
  7541 ;;		line 690 in file "../src/Dimmer_B1.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  lights          1    wreg     unsigned char 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  lights          1   64[BANK0 ] unsigned char 
  7546 ;; Return value:  Size  Location     Type
  7547 ;;		None               void
  7548 ;; Registers used:
  7549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;Total ram usage:        2 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    8
  7562 ;; This function calls:
  7563 ;;		_DimmerLightsPointSelect
  7564 ;;		_getPercentValue
  7565 ;; This function is called by:
  7566 ;;		_setRF_DimmerValue
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           
  7571                           ;psect for function _setDimmerLights_AdjRF
  7572  12D9                     _setDimmerLights_AdjRF:	
  7573                           
  7574                           ;incstack = 0
  7575                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7576                           ;setDimmerLights_AdjRF@lights stored from wreg
  7577  12D9  0020               	movlb	0	; select bank0
  7578  12DA  00E0               	movwf	setDimmerLights_AdjRF@lights
  7579                           
  7580                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  7581  12DB  0860               	movf	setDimmerLights_AdjRF@lights,w
  7582  12DC  3191  2163  3192   	fcall	_DimmerLightsPointSelect
  7583                           
  7584                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  7585  12DF  0020               	movlb	0	; select bank0
  7586  12E0  086B               	movf	_DimmerLights,w
  7587  12E1  0086               	movwf	6
  7588  12E2  3001               	movlw	1	; select bank2/3
  7589  12E3  0087               	movwf	7
  7590  12E4  1501               	bsf	1,2
  7591                           
  7592                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  7593  12E5  086B               	movf	_DimmerLights,w
  7594  12E6  0086               	movwf	6
  7595  12E7  3001               	movlw	1	; select bank2/3
  7596  12E8  0087               	movwf	7
  7597  12E9  1481               	bsf	1,1
  7598                           
  7599                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7600  12EA  086D               	movf	_product,w
  7601  12EB  3E09               	addlw	9
  7602  12EC  0086               	movwf	6
  7603  12ED  3002               	movlw	2	; select bank4/5
  7604  12EE  0087               	movwf	7
  7605  12EF  0801               	movf	1,w
  7606  12F0  3188  2016         	fcall	_getPercentValue
  7607  12F2  0020               	movlb	0	; select bank0
  7608  12F3  00DF               	movwf	??_setDimmerLights_AdjRF
  7609  12F4  086B               	movf	_DimmerLights,w
  7610  12F5  3E05               	addlw	5
  7611  12F6  0086               	movwf	6
  7612  12F7  3001               	movlw	1	; select bank2/3
  7613  12F8  0087               	movwf	7
  7614  12F9  085F               	movf	??_setDimmerLights_AdjRF,w
  7615  12FA  0081               	movwf	1
  7616  12FB  0008               	return
  7617  12FC                     __end_of_setDimmerLights_AdjRF:	
  7618                           
  7619                           	psect	text30
  7620  0816                     __ptext30:	
  7621 ;; *************** function _getPercentValue *****************
  7622 ;; Defined at:
  7623 ;;		line 763 in file "../src/Dimmer_B1.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  value           1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  value           1   59[BANK0 ] unsigned char 
  7628 ;;  i               3   60[BANK0 ] float 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      unsigned char 
  7631 ;; Registers used:
  7632 ;;		wreg, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        6 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    7
  7645 ;; This function calls:
  7646 ;;		___awtoft
  7647 ;;		___ftadd
  7648 ;;		___ftdiv
  7649 ;;		___ftmul
  7650 ;;		___fttol
  7651 ;; This function is called by:
  7652 ;;		_setDimmerLights_AdjRF
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function _getPercentValue
  7658  0816                     _getPercentValue:	
  7659                           
  7660                           ;incstack = 0
  7661                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7662                           ;getPercentValue@value stored from wreg
  7663  0816  0020               	movlb	0	; select bank0
  7664  0817  00DB               	movwf	getPercentValue@value
  7665                           
  7666                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7667  0818  3000               	movlw	0
  7668  0819  00DC               	movwf	getPercentValue@i
  7669  081A  3050               	movlw	80
  7670  081B  00DD               	movwf	getPercentValue@i+1
  7671  081C  3042               	movlw	66
  7672  081D  00DE               	movwf	getPercentValue@i+2
  7673                           
  7674                           ;Dimmer_B1.c: 766: i /= 100;
  7675  081E  3000               	movlw	0
  7676  081F  00AE               	movwf	___ftdiv@f2
  7677  0820  30C8               	movlw	200
  7678  0821  00AF               	movwf	___ftdiv@f2+1
  7679  0822  3042               	movlw	66
  7680  0823  00B0               	movwf	___ftdiv@f2+2
  7681  0824  085C               	movf	getPercentValue@i,w
  7682  0825  00B1               	movwf	___ftdiv@f1
  7683  0826  085D               	movf	getPercentValue@i+1,w
  7684  0827  00B2               	movwf	___ftdiv@f1+1
  7685  0828  085E               	movf	getPercentValue@i+2,w
  7686  0829  00B3               	movwf	___ftdiv@f1+2
  7687  082A  318E  26A8  3188   	fcall	___ftdiv
  7688  082D  0020               	movlb	0	; select bank0
  7689  082E  082E               	movf	?___ftdiv,w
  7690  082F  00DC               	movwf	getPercentValue@i
  7691  0830  082F               	movf	?___ftdiv+1,w
  7692  0831  00DD               	movwf	getPercentValue@i+1
  7693  0832  0830               	movf	?___ftdiv+2,w
  7694  0833  00DE               	movwf	getPercentValue@i+2
  7695                           
  7696                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7697  0834  085B               	movf	getPercentValue@value,w
  7698  0835  00D9               	movwf	??_getPercentValue
  7699  0836  01DA               	clrf	??_getPercentValue+1
  7700  0837  09D9               	comf	??_getPercentValue,f
  7701  0838  09DA               	comf	??_getPercentValue+1,f
  7702  0839  0AD9               	incf	??_getPercentValue,f
  7703  083A  1903               	skipnz
  7704  083B  0ADA               	incf	??_getPercentValue+1,f
  7705  083C  0859               	movf	??_getPercentValue,w
  7706  083D  3E64               	addlw	100
  7707  083E  00A8               	movwf	___awtoft@c
  7708  083F  3000               	movlw	0
  7709  0840  3D5A               	addwfc	??_getPercentValue+1,w
  7710  0841  00A9               	movwf	___awtoft@c+1
  7711  0842  3192  2295  3188   	fcall	___awtoft
  7712  0845  0020               	movlb	0	; select bank0
  7713  0846  0828               	movf	?___awtoft,w
  7714  0847  00B1               	movwf	___ftmul@f2
  7715  0848  0829               	movf	?___awtoft+1,w
  7716  0849  00B2               	movwf	___ftmul@f2+1
  7717  084A  082A               	movf	?___awtoft+2,w
  7718  084B  00B3               	movwf	___ftmul@f2+2
  7719  084C  085C               	movf	getPercentValue@i,w
  7720  084D  00AE               	movwf	___ftmul@f1
  7721  084E  085D               	movf	getPercentValue@i+1,w
  7722  084F  00AF               	movwf	___ftmul@f1+1
  7723  0850  085E               	movf	getPercentValue@i+2,w
  7724  0851  00B0               	movwf	___ftmul@f1+2
  7725  0852  3186  26B5  3188   	fcall	___ftmul
  7726  0855  0020               	movlb	0	; select bank0
  7727  0856  082E               	movf	?___ftmul,w
  7728  0857  00C1               	movwf	___ftadd@f2
  7729  0858  082F               	movf	?___ftmul+1,w
  7730  0859  00C2               	movwf	___ftadd@f2+1
  7731  085A  0830               	movf	?___ftmul+2,w
  7732  085B  00C3               	movwf	___ftadd@f2+2
  7733  085C  3000               	movlw	0
  7734  085D  00BE               	movwf	___ftadd@f1
  7735  085E  3000               	movlw	0
  7736  085F  00BF               	movwf	___ftadd@f1+1
  7737  0860  3041               	movlw	65
  7738  0861  00C0               	movwf	___ftadd@f1+2
  7739  0862  3183  2360  3188   	fcall	___ftadd
  7740  0865  0020               	movlb	0	; select bank0
  7741  0866  083E               	movf	?___ftadd,w
  7742  0867  00CB               	movwf	___fttol@f1
  7743  0868  083F               	movf	?___ftadd+1,w
  7744  0869  00CC               	movwf	___fttol@f1+1
  7745  086A  0840               	movf	?___ftadd+2,w
  7746  086B  00CD               	movwf	___fttol@f1+2
  7747  086C  318D  2509         	fcall	___fttol
  7748  086E  0020               	movlb	0	; select bank0
  7749  086F  084B               	movf	?___fttol,w
  7750  0870  0008               	return
  7751  0871                     __end_of_getPercentValue:	
  7752                           
  7753                           	psect	text31
  7754  06B5                     __ptext31:	
  7755 ;; *************** function ___ftmul *****************
  7756 ;; Defined at:
  7757 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  f1              3   14[BANK0 ] float 
  7760 ;;  f2              3   17[BANK0 ] float 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7763 ;;  sign            1   29[BANK0 ] unsigned char 
  7764 ;;  cntr            1   28[BANK0 ] unsigned char 
  7765 ;;  exp             1   24[BANK0 ] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  3   14[BANK0 ] float 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0, pclath, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7775 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;Total ram usage:       16 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    6
  7782 ;; This function calls:
  7783 ;;		___ftpack
  7784 ;; This function is called by:
  7785 ;;		_getPercentValue
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function ___ftmul
  7791  06B5                     ___ftmul:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7795  06B5  0020               	movlb	0	; select bank0
  7796  06B6  082E               	movf	___ftmul@f1,w
  7797  06B7  00B4               	movwf	??___ftmul
  7798  06B8  082F               	movf	___ftmul@f1+1,w
  7799  06B9  00B5               	movwf	??___ftmul+1
  7800  06BA  0830               	movf	___ftmul@f1+2,w
  7801  06BB  00B6               	movwf	??___ftmul+2
  7802  06BC  1003               	clrc
  7803  06BD  0D35               	rlf	??___ftmul+1,w
  7804  06BE  0D36               	rlf	??___ftmul+2,w
  7805  06BF  00B7               	movwf	??___ftmul+3
  7806  06C0  0837               	movf	??___ftmul+3,w
  7807  06C1  00B8               	movwf	___ftmul@exp
  7808  06C2  08B8               	movf	___ftmul@exp,f
  7809  06C3  1D03               	skipz
  7810  06C4  2ECC               	goto	l5789
  7811  06C5  3000               	movlw	0
  7812  06C6  00AE               	movwf	?___ftmul
  7813  06C7  3000               	movlw	0
  7814  06C8  00AF               	movwf	?___ftmul+1
  7815  06C9  3000               	movlw	0
  7816  06CA  00B0               	movwf	?___ftmul+2
  7817  06CB  0008               	return
  7818  06CC                     l5789:	
  7819  06CC  0831               	movf	___ftmul@f2,w
  7820  06CD  00B4               	movwf	??___ftmul
  7821  06CE  0832               	movf	___ftmul@f2+1,w
  7822  06CF  00B5               	movwf	??___ftmul+1
  7823  06D0  0833               	movf	___ftmul@f2+2,w
  7824  06D1  00B6               	movwf	??___ftmul+2
  7825  06D2  1003               	clrc
  7826  06D3  0D35               	rlf	??___ftmul+1,w
  7827  06D4  0D36               	rlf	??___ftmul+2,w
  7828  06D5  00B7               	movwf	??___ftmul+3
  7829  06D6  0837               	movf	??___ftmul+3,w
  7830  06D7  00BD               	movwf	___ftmul@sign
  7831  06D8  08BD               	movf	___ftmul@sign,f
  7832  06D9  1D03               	skipz
  7833  06DA  2EE2               	goto	l5795
  7834  06DB  3000               	movlw	0
  7835  06DC  00AE               	movwf	?___ftmul
  7836  06DD  3000               	movlw	0
  7837  06DE  00AF               	movwf	?___ftmul+1
  7838  06DF  3000               	movlw	0
  7839  06E0  00B0               	movwf	?___ftmul+2
  7840  06E1  0008               	return
  7841  06E2                     l5795:	
  7842  06E2  083D               	movf	___ftmul@sign,w
  7843  06E3  3E7B               	addlw	123
  7844  06E4  00B4               	movwf	??___ftmul
  7845  06E5  0834               	movf	??___ftmul,w
  7846  06E6  07B8               	addwf	___ftmul@exp,f
  7847  06E7  082E               	movf	___ftmul@f1,w
  7848  06E8  00B4               	movwf	??___ftmul
  7849  06E9  082F               	movf	___ftmul@f1+1,w
  7850  06EA  00B5               	movwf	??___ftmul+1
  7851  06EB  0830               	movf	___ftmul@f1+2,w
  7852  06EC  00B6               	movwf	??___ftmul+2
  7853  06ED  3010               	movlw	16
  7854  06EE                     u4395:	
  7855  06EE  36B6               	lsrf	??___ftmul+2,f
  7856  06EF  0CB5               	rrf	??___ftmul+1,f
  7857  06F0  0CB4               	rrf	??___ftmul,f
  7858  06F1  0B89               	decfsz	9,f
  7859  06F2  2EEE               	goto	u4395
  7860  06F3  0834               	movf	??___ftmul,w
  7861  06F4  00B7               	movwf	??___ftmul+3
  7862  06F5  0837               	movf	??___ftmul+3,w
  7863  06F6  00BD               	movwf	___ftmul@sign
  7864  06F7  0831               	movf	___ftmul@f2,w
  7865  06F8  00B4               	movwf	??___ftmul
  7866  06F9  0832               	movf	___ftmul@f2+1,w
  7867  06FA  00B5               	movwf	??___ftmul+1
  7868  06FB  0833               	movf	___ftmul@f2+2,w
  7869  06FC  00B6               	movwf	??___ftmul+2
  7870  06FD  3010               	movlw	16
  7871  06FE                     u4405:	
  7872  06FE  36B6               	lsrf	??___ftmul+2,f
  7873  06FF  0CB5               	rrf	??___ftmul+1,f
  7874  0700  0CB4               	rrf	??___ftmul,f
  7875  0701  0B89               	decfsz	9,f
  7876  0702  2EFE               	goto	u4405
  7877  0703  0834               	movf	??___ftmul,w
  7878  0704  00B7               	movwf	??___ftmul+3
  7879  0705  0837               	movf	??___ftmul+3,w
  7880  0706  06BD               	xorwf	___ftmul@sign,f
  7881  0707  3080               	movlw	128
  7882  0708  00B4               	movwf	??___ftmul
  7883  0709  0834               	movf	??___ftmul,w
  7884  070A  05BD               	andwf	___ftmul@sign,f
  7885  070B  17AF               	bsf	___ftmul@f1+1,7
  7886  070C  17B2               	bsf	___ftmul@f2+1,7
  7887  070D  30FF               	movlw	255
  7888  070E  05B1               	andwf	___ftmul@f2,f
  7889  070F  30FF               	movlw	255
  7890  0710  05B2               	andwf	___ftmul@f2+1,f
  7891  0711  3000               	movlw	0
  7892  0712  05B3               	andwf	___ftmul@f2+2,f
  7893  0713  3000               	movlw	0
  7894  0714  00B9               	movwf	___ftmul@f3_as_product
  7895  0715  3000               	movlw	0
  7896  0716  00BA               	movwf	___ftmul@f3_as_product+1
  7897  0717  3000               	movlw	0
  7898  0718  00BB               	movwf	___ftmul@f3_as_product+2
  7899  0719  3007               	movlw	7
  7900  071A  00B4               	movwf	??___ftmul
  7901  071B  0834               	movf	??___ftmul,w
  7902  071C  00BC               	movwf	___ftmul@cntr
  7903  071D                     l5807:	
  7904  071D  1C2E               	btfss	___ftmul@f1,0
  7905  071E  2F25               	goto	l5811
  7906  071F  0831               	movf	___ftmul@f2,w
  7907  0720  07B9               	addwf	___ftmul@f3_as_product,f
  7908  0721  0832               	movf	___ftmul@f2+1,w
  7909  0722  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7910  0723  0833               	movf	___ftmul@f2+2,w
  7911  0724  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7912  0725                     l5811:	
  7913  0725  3001               	movlw	1
  7914  0726                     u4425:	
  7915  0726  36B0               	lsrf	___ftmul@f1+2,f
  7916  0727  0CAF               	rrf	___ftmul@f1+1,f
  7917  0728  0CAE               	rrf	___ftmul@f1,f
  7918  0729  0B89               	decfsz	9,f
  7919  072A  2F26               	goto	u4425
  7920  072B  3001               	movlw	1
  7921  072C                     u4435:	
  7922  072C  35B1               	lslf	___ftmul@f2,f
  7923  072D  0DB2               	rlf	___ftmul@f2+1,f
  7924  072E  0DB3               	rlf	___ftmul@f2+2,f
  7925  072F  0B89               	decfsz	9,f
  7926  0730  2F2C               	goto	u4435
  7927  0731  3001               	movlw	1
  7928  0732  02BC               	subwf	___ftmul@cntr,f
  7929  0733  1D03               	btfss	3,2
  7930  0734  2F1D               	goto	l5807
  7931  0735  3009               	movlw	9
  7932  0736  00B4               	movwf	??___ftmul
  7933  0737  0834               	movf	??___ftmul,w
  7934  0738  00BC               	movwf	___ftmul@cntr
  7935  0739                     l5819:	
  7936  0739  1C2E               	btfss	___ftmul@f1,0
  7937  073A  2F41               	goto	l5823
  7938  073B  0831               	movf	___ftmul@f2,w
  7939  073C  07B9               	addwf	___ftmul@f3_as_product,f
  7940  073D  0832               	movf	___ftmul@f2+1,w
  7941  073E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7942  073F  0833               	movf	___ftmul@f2+2,w
  7943  0740  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7944  0741                     l5823:	
  7945  0741  3001               	movlw	1
  7946  0742                     u4465:	
  7947  0742  36B0               	lsrf	___ftmul@f1+2,f
  7948  0743  0CAF               	rrf	___ftmul@f1+1,f
  7949  0744  0CAE               	rrf	___ftmul@f1,f
  7950  0745  0B89               	decfsz	9,f
  7951  0746  2F42               	goto	u4465
  7952  0747  3001               	movlw	1
  7953  0748                     u4475:	
  7954  0748  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7955  0749  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7956  074A  0CB9               	rrf	___ftmul@f3_as_product,f
  7957  074B  0B89               	decfsz	9,f
  7958  074C  2F48               	goto	u4475
  7959  074D  3001               	movlw	1
  7960  074E  02BC               	subwf	___ftmul@cntr,f
  7961  074F  1D03               	btfss	3,2
  7962  0750  2F39               	goto	l5819
  7963  0751  0839               	movf	___ftmul@f3_as_product,w
  7964  0752  00A0               	movwf	___ftpack@arg
  7965  0753  083A               	movf	___ftmul@f3_as_product+1,w
  7966  0754  00A1               	movwf	___ftpack@arg+1
  7967  0755  083B               	movf	___ftmul@f3_as_product+2,w
  7968  0756  00A2               	movwf	___ftpack@arg+2
  7969  0757  0838               	movf	___ftmul@exp,w
  7970  0758  00B4               	movwf	??___ftmul
  7971  0759  0834               	movf	??___ftmul,w
  7972  075A  00A3               	movwf	___ftpack@exp
  7973  075B  083D               	movf	___ftmul@sign,w
  7974  075C  00B5               	movwf	??___ftmul+1
  7975  075D  0835               	movf	??___ftmul+1,w
  7976  075E  00A4               	movwf	___ftpack@sign
  7977  075F  3188  20D0         	fcall	___ftpack
  7978  0761  0020               	movlb	0	; select bank0
  7979  0762  0820               	movf	?___ftpack,w
  7980  0763  00AE               	movwf	?___ftmul
  7981  0764  0821               	movf	?___ftpack+1,w
  7982  0765  00AF               	movwf	?___ftmul+1
  7983  0766  0822               	movf	?___ftpack+2,w
  7984  0767  00B0               	movwf	?___ftmul+2
  7985  0768  0008               	return
  7986  0769                     __end_of___ftmul:	
  7987                           
  7988                           	psect	text32
  7989  0360                     __ptext32:	
  7990 ;; *************** function ___ftadd *****************
  7991 ;; Defined at:
  7992 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  f1              3   30[BANK0 ] float 
  7995 ;;  f2              3   33[BANK0 ] float 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  exp1            1   42[BANK0 ] unsigned char 
  7998 ;;  exp2            1   41[BANK0 ] unsigned char 
  7999 ;;  sign            1   40[BANK0 ] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  3   30[BANK0 ] float 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, pclath, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8009 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;Total ram usage:       13 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    6
  8016 ;; This function calls:
  8017 ;;		___ftpack
  8018 ;; This function is called by:
  8019 ;;		_getPercentValue
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function ___ftadd
  8025  0360                     ___ftadd:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8029  0360  0020               	movlb	0	; select bank0
  8030  0361  083E               	movf	___ftadd@f1,w
  8031  0362  00C4               	movwf	??___ftadd
  8032  0363  083F               	movf	___ftadd@f1+1,w
  8033  0364  00C5               	movwf	??___ftadd+1
  8034  0365  0840               	movf	___ftadd@f1+2,w
  8035  0366  00C6               	movwf	??___ftadd+2
  8036  0367  1003               	clrc
  8037  0368  0D45               	rlf	??___ftadd+1,w
  8038  0369  0D46               	rlf	??___ftadd+2,w
  8039  036A  00C7               	movwf	??___ftadd+3
  8040  036B  0847               	movf	??___ftadd+3,w
  8041  036C  00CA               	movwf	___ftadd@exp1
  8042  036D  0841               	movf	___ftadd@f2,w
  8043  036E  00C4               	movwf	??___ftadd
  8044  036F  0842               	movf	___ftadd@f2+1,w
  8045  0370  00C5               	movwf	??___ftadd+1
  8046  0371  0843               	movf	___ftadd@f2+2,w
  8047  0372  00C6               	movwf	??___ftadd+2
  8048  0373  1003               	clrc
  8049  0374  0D45               	rlf	??___ftadd+1,w
  8050  0375  0D46               	rlf	??___ftadd+2,w
  8051  0376  00C7               	movwf	??___ftadd+3
  8052  0377  0847               	movf	??___ftadd+3,w
  8053  0378  00C9               	movwf	___ftadd@exp2
  8054  0379  084A               	movf	___ftadd@exp1,w
  8055  037A  1903               	btfsc	3,2
  8056  037B  2B88               	goto	l5677
  8057  037C  0849               	movf	___ftadd@exp2,w
  8058  037D  024A               	subwf	___ftadd@exp1,w
  8059  037E  1803               	skipnc
  8060  037F  2B8F               	goto	l5681
  8061  0380  034A               	decf	___ftadd@exp1,w
  8062  0381  3AFF               	xorlw	255
  8063  0382  0749               	addwf	___ftadd@exp2,w
  8064  0383  00C4               	movwf	??___ftadd
  8065  0384  3019               	movlw	25
  8066  0385  0244               	subwf	??___ftadd,w
  8067  0386  1C03               	skipc
  8068  0387  2B8F               	goto	l5681
  8069  0388                     l5677:	
  8070  0388  0841               	movf	___ftadd@f2,w
  8071  0389  00BE               	movwf	?___ftadd
  8072  038A  0842               	movf	___ftadd@f2+1,w
  8073  038B  00BF               	movwf	?___ftadd+1
  8074  038C  0843               	movf	___ftadd@f2+2,w
  8075  038D  00C0               	movwf	?___ftadd+2
  8076  038E  0008               	return
  8077  038F                     l5681:	
  8078  038F  0849               	movf	___ftadd@exp2,w
  8079  0390  1903               	btfsc	3,2
  8080  0391  0008               	return
  8081  0392  084A               	movf	___ftadd@exp1,w
  8082  0393  0249               	subwf	___ftadd@exp2,w
  8083  0394  1803               	skipnc
  8084  0395  2B9E               	goto	l5687
  8085  0396  0349               	decf	___ftadd@exp2,w
  8086  0397  3AFF               	xorlw	255
  8087  0398  074A               	addwf	___ftadd@exp1,w
  8088  0399  00C4               	movwf	??___ftadd
  8089  039A  3019               	movlw	25
  8090  039B  0244               	subwf	??___ftadd,w
  8091  039C  1803               	btfsc	3,0
  8092  039D  0008               	return
  8093  039E                     l5687:	
  8094  039E  3006               	movlw	6
  8095  039F  00C4               	movwf	??___ftadd
  8096  03A0  0844               	movf	??___ftadd,w
  8097  03A1  00C8               	movwf	___ftadd@sign
  8098  03A2  1BC0               	btfsc	___ftadd@f1+2,7
  8099  03A3  17C8               	bsf	___ftadd@sign,7
  8100  03A4  1BC3               	btfsc	___ftadd@f2+2,7
  8101  03A5  1748               	bsf	___ftadd@sign,6
  8102  03A6  17BF               	bsf	___ftadd@f1+1,7
  8103  03A7  30FF               	movlw	255
  8104  03A8  05BE               	andwf	___ftadd@f1,f
  8105  03A9  30FF               	movlw	255
  8106  03AA  05BF               	andwf	___ftadd@f1+1,f
  8107  03AB  3000               	movlw	0
  8108  03AC  05C0               	andwf	___ftadd@f1+2,f
  8109  03AD  17C2               	bsf	___ftadd@f2+1,7
  8110  03AE  30FF               	movlw	255
  8111  03AF  05C1               	andwf	___ftadd@f2,f
  8112  03B0  30FF               	movlw	255
  8113  03B1  05C2               	andwf	___ftadd@f2+1,f
  8114  03B2  3000               	movlw	0
  8115  03B3  05C3               	andwf	___ftadd@f2+2,f
  8116  03B4  0849               	movf	___ftadd@exp2,w
  8117  03B5  024A               	subwf	___ftadd@exp1,w
  8118  03B6  1803               	skipnc
  8119  03B7  2BDA               	goto	l5709
  8120  03B8                     l5699:	
  8121  03B8  3001               	movlw	1
  8122  03B9                     u4155:	
  8123  03B9  35C1               	lslf	___ftadd@f2,f
  8124  03BA  0DC2               	rlf	___ftadd@f2+1,f
  8125  03BB  0DC3               	rlf	___ftadd@f2+2,f
  8126  03BC  0B89               	decfsz	9,f
  8127  03BD  2BB9               	goto	u4155
  8128  03BE  3001               	movlw	1
  8129  03BF  02C9               	subwf	___ftadd@exp2,f
  8130  03C0  0849               	movf	___ftadd@exp2,w
  8131  03C1  064A               	xorwf	___ftadd@exp1,w
  8132  03C2  1903               	skipnz
  8133  03C3  2BD5               	goto	l5707
  8134  03C4  3001               	movlw	1
  8135  03C5  02C8               	subwf	___ftadd@sign,f
  8136  03C6  0848               	movf	___ftadd@sign,w
  8137  03C7  3907               	andlw	7
  8138  03C8  1903               	btfsc	3,2
  8139  03C9  2BD5               	goto	l5707
  8140  03CA  2BB8               	goto	l5699
  8141  03CB                     l5705:	
  8142  03CB  3001               	movlw	1
  8143  03CC                     u4185:	
  8144  03CC  36C0               	lsrf	___ftadd@f1+2,f
  8145  03CD  0CBF               	rrf	___ftadd@f1+1,f
  8146  03CE  0CBE               	rrf	___ftadd@f1,f
  8147  03CF  0B89               	decfsz	9,f
  8148  03D0  2BCC               	goto	u4185
  8149  03D1  3001               	movlw	1
  8150  03D2  00C4               	movwf	??___ftadd
  8151  03D3  0844               	movf	??___ftadd,w
  8152  03D4  07CA               	addwf	___ftadd@exp1,f
  8153  03D5                     l5707:	
  8154  03D5  084A               	movf	___ftadd@exp1,w
  8155  03D6  0649               	xorwf	___ftadd@exp2,w
  8156  03D7  1903               	btfsc	3,2
  8157  03D8  2BFF               	goto	l3058
  8158  03D9  2BCB               	goto	l5705
  8159  03DA                     l5709:	
  8160  03DA  084A               	movf	___ftadd@exp1,w
  8161  03DB  0249               	subwf	___ftadd@exp2,w
  8162  03DC  1803               	skipnc
  8163  03DD  2BFF               	goto	l3058
  8164  03DE                     l5711:	
  8165  03DE  3001               	movlw	1
  8166  03DF                     u4215:	
  8167  03DF  35BE               	lslf	___ftadd@f1,f
  8168  03E0  0DBF               	rlf	___ftadd@f1+1,f
  8169  03E1  0DC0               	rlf	___ftadd@f1+2,f
  8170  03E2  0B89               	decfsz	9,f
  8171  03E3  2BDF               	goto	u4215
  8172  03E4  3001               	movlw	1
  8173  03E5  02CA               	subwf	___ftadd@exp1,f
  8174  03E6  0849               	movf	___ftadd@exp2,w
  8175  03E7  064A               	xorwf	___ftadd@exp1,w
  8176  03E8  1903               	skipnz
  8177  03E9  2BFB               	goto	l5719
  8178  03EA  3001               	movlw	1
  8179  03EB  02C8               	subwf	___ftadd@sign,f
  8180  03EC  0848               	movf	___ftadd@sign,w
  8181  03ED  3907               	andlw	7
  8182  03EE  1903               	btfsc	3,2
  8183  03EF  2BFB               	goto	l5719
  8184  03F0  2BDE               	goto	l5711
  8185  03F1                     l5717:	
  8186  03F1  3001               	movlw	1
  8187  03F2                     u4245:	
  8188  03F2  36C3               	lsrf	___ftadd@f2+2,f
  8189  03F3  0CC2               	rrf	___ftadd@f2+1,f
  8190  03F4  0CC1               	rrf	___ftadd@f2,f
  8191  03F5  0B89               	decfsz	9,f
  8192  03F6  2BF2               	goto	u4245
  8193  03F7  3001               	movlw	1
  8194  03F8  00C4               	movwf	??___ftadd
  8195  03F9  0844               	movf	??___ftadd,w
  8196  03FA  07C9               	addwf	___ftadd@exp2,f
  8197  03FB                     l5719:	
  8198  03FB  084A               	movf	___ftadd@exp1,w
  8199  03FC  0649               	xorwf	___ftadd@exp2,w
  8200  03FD  1D03               	skipz
  8201  03FE  2BF1               	goto	l5717
  8202  03FF                     l3058:	
  8203  03FF  1FC8               	btfss	___ftadd@sign,7
  8204  0400  2C11               	goto	l5723
  8205  0401  30FF               	movlw	255
  8206  0402  06BE               	xorwf	___ftadd@f1,f
  8207  0403  30FF               	movlw	255
  8208  0404  06BF               	xorwf	___ftadd@f1+1,f
  8209  0405  30FF               	movlw	255
  8210  0406  06C0               	xorwf	___ftadd@f1+2,f
  8211  0407  3001               	movlw	1
  8212  0408  07BE               	addwf	___ftadd@f1,f
  8213  0409  3000               	movlw	0
  8214  040A  1803               	skipnc
  8215  040B  3001               	movlw	1
  8216  040C  07BF               	addwf	___ftadd@f1+1,f
  8217  040D  3000               	movlw	0
  8218  040E  1803               	skipnc
  8219  040F  3001               	movlw	1
  8220  0410  07C0               	addwf	___ftadd@f1+2,f
  8221  0411                     l5723:	
  8222  0411  1F48               	btfss	___ftadd@sign,6
  8223  0412  2C23               	goto	l5727
  8224  0413  30FF               	movlw	255
  8225  0414  06C1               	xorwf	___ftadd@f2,f
  8226  0415  30FF               	movlw	255
  8227  0416  06C2               	xorwf	___ftadd@f2+1,f
  8228  0417  30FF               	movlw	255
  8229  0418  06C3               	xorwf	___ftadd@f2+2,f
  8230  0419  3001               	movlw	1
  8231  041A  07C1               	addwf	___ftadd@f2,f
  8232  041B  3000               	movlw	0
  8233  041C  1803               	skipnc
  8234  041D  3001               	movlw	1
  8235  041E  07C2               	addwf	___ftadd@f2+1,f
  8236  041F  3000               	movlw	0
  8237  0420  1803               	skipnc
  8238  0421  3001               	movlw	1
  8239  0422  07C3               	addwf	___ftadd@f2+2,f
  8240  0423                     l5727:	
  8241  0423  01C8               	clrf	___ftadd@sign
  8242  0424  083E               	movf	___ftadd@f1,w
  8243  0425  07C1               	addwf	___ftadd@f2,f
  8244  0426  083F               	movf	___ftadd@f1+1,w
  8245  0427  3DC2               	addwfc	___ftadd@f2+1,f
  8246  0428  0840               	movf	___ftadd@f1+2,w
  8247  0429  3DC3               	addwfc	___ftadd@f2+2,f
  8248  042A  1FC3               	btfss	___ftadd@f2+2,7
  8249  042B  2C3E               	goto	l5737
  8250  042C  30FF               	movlw	255
  8251  042D  06C1               	xorwf	___ftadd@f2,f
  8252  042E  30FF               	movlw	255
  8253  042F  06C2               	xorwf	___ftadd@f2+1,f
  8254  0430  30FF               	movlw	255
  8255  0431  06C3               	xorwf	___ftadd@f2+2,f
  8256  0432  3001               	movlw	1
  8257  0433  07C1               	addwf	___ftadd@f2,f
  8258  0434  3000               	movlw	0
  8259  0435  1803               	skipnc
  8260  0436  3001               	movlw	1
  8261  0437  07C2               	addwf	___ftadd@f2+1,f
  8262  0438  3000               	movlw	0
  8263  0439  1803               	skipnc
  8264  043A  3001               	movlw	1
  8265  043B  07C3               	addwf	___ftadd@f2+2,f
  8266  043C  01C8               	clrf	___ftadd@sign
  8267  043D  0AC8               	incf	___ftadd@sign,f
  8268  043E                     l5737:	
  8269  043E  0841               	movf	___ftadd@f2,w
  8270  043F  00A0               	movwf	___ftpack@arg
  8271  0440  0842               	movf	___ftadd@f2+1,w
  8272  0441  00A1               	movwf	___ftpack@arg+1
  8273  0442  0843               	movf	___ftadd@f2+2,w
  8274  0443  00A2               	movwf	___ftpack@arg+2
  8275  0444  084A               	movf	___ftadd@exp1,w
  8276  0445  00C4               	movwf	??___ftadd
  8277  0446  0844               	movf	??___ftadd,w
  8278  0447  00A3               	movwf	___ftpack@exp
  8279  0448  0848               	movf	___ftadd@sign,w
  8280  0449  00C5               	movwf	??___ftadd+1
  8281  044A  0845               	movf	??___ftadd+1,w
  8282  044B  00A4               	movwf	___ftpack@sign
  8283  044C  3188  20D0         	fcall	___ftpack
  8284  044E  0020               	movlb	0	; select bank0
  8285  044F  0820               	movf	?___ftpack,w
  8286  0450  00BE               	movwf	?___ftadd
  8287  0451  0821               	movf	?___ftpack+1,w
  8288  0452  00BF               	movwf	?___ftadd+1
  8289  0453  0822               	movf	?___ftpack+2,w
  8290  0454  00C0               	movwf	?___ftadd+2
  8291  0455  0008               	return
  8292  0456                     __end_of___ftadd:	
  8293                           
  8294                           	psect	text33
  8295  1FBA                     __ptext33:	
  8296 ;; *************** function _getBuz_GO *****************
  8297 ;; Defined at:
  8298 ;;		line 82 in file "../src/Buzzer_B1.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  i               2    4[BANK0 ] int 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  2    0[BANK0 ] int 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;Total ram usage:        6 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    5
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_setRF_Main
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _getBuz_GO
  8328  1FBA                     _getBuz_GO:	
  8329                           
  8330                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8331                           
  8332                           ;incstack = 0
  8333                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8334  1FBA  0021               	movlb	1	; select bank1
  8335  1FBB  0C30               	rrf	_Buz1^(0+128),w
  8336  1FBC  3901               	andlw	1
  8337  1FBD  0020               	movlb	0	; select bank0
  8338  1FBE  00A2               	movwf	??_getBuz_GO
  8339  1FBF  01A3               	clrf	??_getBuz_GO+1
  8340  1FC0  0822               	movf	??_getBuz_GO,w
  8341  1FC1  00A4               	movwf	getBuz_GO@i
  8342  1FC2  0823               	movf	??_getBuz_GO+1,w
  8343  1FC3  00A5               	movwf	getBuz_GO@i+1
  8344                           
  8345                           ;Buzzer_B1.c: 84: return i;
  8346  1FC4  0825               	movf	getBuz_GO@i+1,w
  8347  1FC5  01A1               	clrf	?_getBuz_GO+1
  8348  1FC6  07A1               	addwf	?_getBuz_GO+1,f
  8349  1FC7  0824               	movf	getBuz_GO@i,w
  8350  1FC8  01A0               	clrf	?_getBuz_GO
  8351  1FC9  07A0               	addwf	?_getBuz_GO,f
  8352  1FCA  0008               	return
  8353  1FCB                     __end_of_getBuz_GO:	
  8354                           
  8355                           	psect	text34
  8356  0995                     __ptext34:	
  8357 ;; *************** function _CC2500_TxData *****************
  8358 ;; Defined at:
  8359 ;;		line 32 in file "../src/CC2500_B1.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;		None
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;		None               void
  8366 ;; Registers used:
  8367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;Total ram usage:        2 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    7
  8380 ;; This function calls:
  8381 ;;		_CC2500_WriteByte
  8382 ;;		_CC2500_WriteCommand
  8383 ;;		_Timeout_Counter
  8384 ;;		_set_TimeoutCleared
  8385 ;; This function is called by:
  8386 ;;		_setRF_Main
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           
  8391                           ;psect for function _CC2500_TxData
  8392  0995                     _CC2500_TxData:	
  8393                           
  8394                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8395                           ;CC2500_B1.c: 35: RC4 = 0;
  8396                           
  8397                           ;incstack = 0
  8398                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8399  0995  0020               	movlb	0	; select bank0
  8400  0996  120E               	bcf	14,4	;volatile
  8401                           
  8402                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8403  0997  307F               	movlw	127
  8404  0998  00A4               	movwf	??_CC2500_TxData
  8405  0999  0824               	movf	??_CC2500_TxData,w
  8406  099A  00F5               	movwf	_SPI0Buffer
  8407                           
  8408                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8409  099B  299F               	goto	l8609
  8410  099C                     l8607:	
  8411                           
  8412                           ;CC2500_B1.c: 38: Timeout_Counter();
  8413  099C  3190  20BD  3189   	fcall	_Timeout_Counter
  8414  099F                     l8609:	
  8415  099F  0020               	movlb	0	; select bank0
  8416  09A0  1D0E               	btfss	14,2	;volatile
  8417  09A1  29A5               	goto	l8613
  8418  09A2  0021               	movlb	1	; select bank1
  8419  09A3  1D2D               	btfss	(_myMain^(0+128)+13),2
  8420  09A4  299C               	goto	l8607
  8421  09A5                     l8613:	
  8422                           
  8423                           ;CC2500_B1.c: 39: };
  8424                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8425  09A5  319E  263A  3189   	fcall	_set_TimeoutCleared
  8426                           
  8427                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8428  09A8  3190  2095  3189   	fcall	_CC2500_WriteByte
  8429                           
  8430                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8431  09AB  0021               	movlb	1	; select bank1
  8432  09AC  0857               	movf	_Tx_Length^(0+128),w
  8433  09AD  0020               	movlb	0	; select bank0
  8434  09AE  00A4               	movwf	??_CC2500_TxData
  8435  09AF  0824               	movf	??_CC2500_TxData,w
  8436  09B0  00F5               	movwf	_SPI0Buffer
  8437                           
  8438                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8439  09B1  3190  2095  3189   	fcall	_CC2500_WriteByte
  8440                           
  8441                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8442  09B4  0020               	movlb	0	; select bank0
  8443  09B5  01A5               	clrf	CC2500_TxData@loop_e
  8444  09B6                     l8627:	
  8445  09B6  0021               	movlb	1	; select bank1
  8446  09B7  0857               	movf	_Tx_Length^(0+128),w
  8447  09B8  0020               	movlb	0	; select bank0
  8448  09B9  0225               	subwf	CC2500_TxData@loop_e,w
  8449  09BA  1803               	btfsc	3,0
  8450  09BB  29CE               	goto	l283
  8451                           
  8452                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8453  09BC  0825               	movf	CC2500_TxData@loop_e,w
  8454  09BD  3E20               	addlw	_RF_Data& (0+255)
  8455  09BE  0086               	movwf	6
  8456  09BF  3001               	movlw	1	; select bank2/3
  8457  09C0  0087               	movwf	7
  8458  09C1  0801               	movf	1,w
  8459  09C2  00A4               	movwf	??_CC2500_TxData
  8460  09C3  0824               	movf	??_CC2500_TxData,w
  8461  09C4  00F5               	movwf	_SPI0Buffer
  8462                           
  8463                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8464  09C5  3190  2095  3189   	fcall	_CC2500_WriteByte
  8465  09C8  3001               	movlw	1
  8466  09C9  0020               	movlb	0	; select bank0
  8467  09CA  00A4               	movwf	??_CC2500_TxData
  8468  09CB  0824               	movf	??_CC2500_TxData,w
  8469  09CC  07A5               	addwf	CC2500_TxData@loop_e,f
  8470  09CD  29B6               	goto	l8627
  8471  09CE                     l283:	
  8472                           
  8473                           ;CC2500_B1.c: 48: }
  8474                           ;CC2500_B1.c: 49: RC4 = 1;
  8475  09CE  160E               	bsf	14,4	;volatile
  8476                           
  8477                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8478  09CF  3035               	movlw	53
  8479  09D0  3191  2116  3189   	fcall	_CC2500_WriteCommand
  8480                           
  8481                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8482  09D3  29D7               	goto	l8633
  8483  09D4                     l8631:	
  8484                           
  8485                           ;CC2500_B1.c: 52: Timeout_Counter();
  8486  09D4  3190  20BD  3189   	fcall	_Timeout_Counter
  8487  09D7                     l8633:	
  8488  09D7  0020               	movlb	0	; select bank0
  8489  09D8  180D               	btfsc	13,0	;volatile
  8490  09D9  29DD               	goto	l8637
  8491  09DA  0021               	movlb	1	; select bank1
  8492  09DB  1D2D               	btfss	(_myMain^(0+128)+13),2
  8493  09DC  29D4               	goto	l8631
  8494  09DD                     l8637:	
  8495                           
  8496                           ;CC2500_B1.c: 53: };
  8497                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8498  09DD  319E  263A  3189   	fcall	_set_TimeoutCleared
  8499                           
  8500                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8501  09E0  29E4               	goto	l8641
  8502  09E1                     l8639:	
  8503                           
  8504                           ;CC2500_B1.c: 57: Timeout_Counter();
  8505  09E1  3190  20BD  3189   	fcall	_Timeout_Counter
  8506  09E4                     l8641:	
  8507  09E4  0020               	movlb	0	; select bank0
  8508  09E5  1C0D               	btfss	13,0	;volatile
  8509  09E6  29EA               	goto	l8645
  8510  09E7  0021               	movlb	1	; select bank1
  8511  09E8  1D2D               	btfss	(_myMain^(0+128)+13),2
  8512  09E9  29E1               	goto	l8639
  8513  09EA                     l8645:	
  8514                           
  8515                           ;CC2500_B1.c: 58: };
  8516                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8517  09EA  319E  263A  3189   	fcall	_set_TimeoutCleared
  8518                           
  8519                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8520  09ED  3036               	movlw	54
  8521  09EE  3191  2116  3189   	fcall	_CC2500_WriteCommand
  8522                           
  8523                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8524  09F1  303B               	movlw	59
  8525  09F2  3191  2116  3189   	fcall	_CC2500_WriteCommand
  8526                           
  8527                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8528  09F5  303A               	movlw	58
  8529  09F6  3191  2116         	fcall	_CC2500_WriteCommand
  8530                           
  8531                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8532  09F8  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8533  09F9  0008               	return
  8534  09FA                     __end_of_CC2500_TxData:	
  8535                           
  8536                           	psect	text35
  8537  0C1A                     __ptext35:	
  8538 ;; *************** function _CC2500_RxData *****************
  8539 ;; Defined at:
  8540 ;;		line 70 in file "../src/CC2500_B1.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;		None
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;		None               void
  8547 ;; Registers used:
  8548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;Total ram usage:        2 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    7
  8561 ;; This function calls:
  8562 ;;		_CC2500_ReadByte
  8563 ;;		_CC2500_ReadStatus
  8564 ;;		_CC2500_WriteByte
  8565 ;;		_Timeout_Counter
  8566 ;;		_set_TimeoutCleared
  8567 ;; This function is called by:
  8568 ;;		_setRF_Main
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           
  8573                           ;psect for function _CC2500_RxData
  8574  0C1A                     _CC2500_RxData:	
  8575                           
  8576                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8577                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8578                           
  8579                           ;incstack = 0
  8580                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8581  0C1A  0020               	movlb	0	; select bank0
  8582  0C1B  180D               	btfsc	13,0	;volatile
  8583  0C1C  2C21               	goto	l8661
  8584  0C1D  2C2A               	goto	l8667
  8585  0C1E                     l8659:	
  8586                           ;CC2500_B1.c: 76: {
  8587                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8588                           
  8589                           
  8590                           ;CC2500_B1.c: 78: Timeout_Counter();
  8591  0C1E  3190  20BD  318C   	fcall	_Timeout_Counter
  8592  0C21                     l8661:	
  8593  0C21  0020               	movlb	0	; select bank0
  8594  0C22  1C0D               	btfss	13,0	;volatile
  8595  0C23  2C27               	goto	l8665
  8596  0C24  0021               	movlb	1	; select bank1
  8597  0C25  1D2D               	btfss	(_myMain^(0+128)+13),2
  8598  0C26  2C1E               	goto	l8659
  8599  0C27                     l8665:	
  8600                           
  8601                           ;CC2500_B1.c: 79: };
  8602                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8603  0C27  319E  263A  318C   	fcall	_set_TimeoutCleared
  8604  0C2A                     l8667:	
  8605                           
  8606                           ;CC2500_B1.c: 81: }
  8607                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8608  0C2A  303B               	movlw	59
  8609  0C2B  3192  22B7  318C   	fcall	_CC2500_ReadStatus
  8610                           
  8611                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8612  0C2E  0021               	movlb	1	; select bank1
  8613  0C2F  085A               	movf	_s_data^(0+128),w
  8614  0C30  1903               	btfsc	3,2
  8615  0C31  0008               	return
  8616                           
  8617                           ;CC2500_B1.c: 86: RC4 = 0;
  8618  0C32  0020               	movlb	0	; select bank0
  8619  0C33  120E               	bcf	14,4	;volatile
  8620                           
  8621                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8622  0C34  30FF               	movlw	255
  8623  0C35  00A4               	movwf	??_CC2500_RxData
  8624  0C36  0824               	movf	??_CC2500_RxData,w
  8625  0C37  00F5               	movwf	_SPI0Buffer
  8626                           
  8627                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8628  0C38  2C3F               	goto	l8677
  8629  0C39                     l8679:	
  8630  0C39  0021               	movlb	1	; select bank1
  8631  0C3A  192D               	btfsc	(_myMain^(0+128)+13),2
  8632  0C3B  2C42               	goto	l308
  8633                           
  8634                           ;CC2500_B1.c: 89: Timeout_Counter();
  8635  0C3C  3190  20BD  318C   	fcall	_Timeout_Counter
  8636  0C3F                     l8677:	
  8637  0C3F  0020               	movlb	0	; select bank0
  8638  0C40  190E               	btfsc	14,2	;volatile
  8639  0C41  2C39               	goto	l8679
  8640  0C42                     l308:	
  8641                           
  8642                           ;CC2500_B1.c: 90: };
  8643                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8644  0C42  0021               	movlb	1	; select bank1
  8645  0C43  192D               	btfsc	(_myMain^(0+128)+13),2
  8646  0C44  2C85               	goto	l309
  8647                           
  8648                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8649  0C45  3190  2095  318C   	fcall	_CC2500_WriteByte
  8650                           
  8651                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8652  0C48  3190  20E7  318C   	fcall	_CC2500_ReadByte
  8653                           
  8654                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8655  0C4B  0875               	movf	_SPI0Buffer,w
  8656  0C4C  0020               	movlb	0	; select bank0
  8657  0C4D  00A4               	movwf	??_CC2500_RxData
  8658  0C4E  0824               	movf	??_CC2500_RxData,w
  8659  0C4F  0021               	movlb	1	; select bank1
  8660  0C50  00D6               	movwf	_Rx_Length^(0+128)
  8661                           
  8662                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8663  0C51  0020               	movlb	0	; select bank0
  8664  0C52  01A5               	clrf	CC2500_RxData@loop_f
  8665  0C53                     l8693:	
  8666  0C53  0021               	movlb	1	; select bank1
  8667  0C54  0856               	movf	_Rx_Length^(0+128),w
  8668  0C55  0020               	movlb	0	; select bank0
  8669  0C56  0225               	subwf	CC2500_RxData@loop_f,w
  8670  0C57  1803               	btfsc	3,0
  8671  0C58  2C6B               	goto	l8695
  8672                           
  8673                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8674  0C59  3190  20E7  318C   	fcall	_CC2500_ReadByte
  8675                           
  8676                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8677  0C5C  0875               	movf	_SPI0Buffer,w
  8678  0C5D  0020               	movlb	0	; select bank0
  8679  0C5E  00A4               	movwf	??_CC2500_RxData
  8680  0C5F  0825               	movf	CC2500_RxData@loop_f,w
  8681  0C60  3E20               	addlw	_RF_Data& (0+255)
  8682  0C61  0086               	movwf	6
  8683  0C62  3001               	movlw	1	; select bank2/3
  8684  0C63  0087               	movwf	7
  8685  0C64  0824               	movf	??_CC2500_RxData,w
  8686  0C65  0081               	movwf	1
  8687  0C66  3001               	movlw	1
  8688  0C67  00A4               	movwf	??_CC2500_RxData
  8689  0C68  0824               	movf	??_CC2500_RxData,w
  8690  0C69  07A5               	addwf	CC2500_RxData@loop_f,f
  8691  0C6A  2C53               	goto	l8693
  8692  0C6B                     l8695:	
  8693                           
  8694                           ;CC2500_B1.c: 99: }
  8695                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8696  0C6B  3190  20E7  318C   	fcall	_CC2500_ReadByte
  8697                           
  8698                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8699  0C6E  0875               	movf	_SPI0Buffer,w
  8700  0C6F  0020               	movlb	0	; select bank0
  8701  0C70  00A4               	movwf	??_CC2500_RxData
  8702  0C71  0824               	movf	??_CC2500_RxData,w
  8703  0C72  0021               	movlb	1	; select bank1
  8704  0C73  00D5               	movwf	_RSSI^(0+128)
  8705                           
  8706                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8707  0C74  3190  20E7  318C   	fcall	_CC2500_ReadByte
  8708                           
  8709                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8710  0C77  0875               	movf	_SPI0Buffer,w
  8711  0C78  0020               	movlb	0	; select bank0
  8712  0C79  00A4               	movwf	??_CC2500_RxData
  8713  0C7A  0824               	movf	??_CC2500_RxData,w
  8714  0C7B  0021               	movlb	1	; select bank1
  8715  0C7C  00CF               	movwf	_CRC^(0+128)
  8716                           
  8717                           ;CC2500_B1.c: 104: RC4 = 1;
  8718  0C7D  0020               	movlb	0	; select bank0
  8719  0C7E  160E               	bsf	14,4	;volatile
  8720                           
  8721                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8722  0C7F  0021               	movlb	1	; select bank1
  8723  0C80  1BCF               	btfsc	_CRC^(0+128),7
  8724                           
  8725                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8726  0C81  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8727                           
  8728                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8729  0C82  11BC               	bcf	_RF1^(0+128),3
  8730                           
  8731                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8732  0C83  14BC               	bsf	_RF1^(0+128),1
  8733                           
  8734                           ;CC2500_B1.c: 110: } else {
  8735  0C84  2C87               	goto	l8707
  8736  0C85                     l309:	
  8737                           
  8738                           ;CC2500_B1.c: 111: RC4 = 1;
  8739  0C85  0020               	movlb	0	; select bank0
  8740  0C86  160E               	bsf	14,4	;volatile
  8741  0C87                     l8707:	
  8742                           
  8743                           ;CC2500_B1.c: 112: }
  8744                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8745  0C87  319E  263A         	fcall	_set_TimeoutCleared
  8746  0C89  0021               	movlb	1	; select bank1
  8747  0C8A  0008               	return
  8748  0C8B                     __end_of_CC2500_RxData:	
  8749                           
  8750                           	psect	text36
  8751  12B7                     __ptext36:	
  8752 ;; *************** function _CC2500_ReadStatus *****************
  8753 ;; Defined at:
  8754 ;;		line 304 in file "../src/CC2500_B1.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  status_addr     1    wreg     unsigned char 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;		None               void
  8761 ;; Registers used:
  8762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;Total ram usage:        2 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    6
  8775 ;; This function calls:
  8776 ;;		_CC2500_ReadByte
  8777 ;;		_CC2500_WriteByte
  8778 ;;		_Timeout_Counter
  8779 ;;		_set_TimeoutCleared
  8780 ;; This function is called by:
  8781 ;;		_CC2500_RxData
  8782 ;;		_setRF_Main
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function _CC2500_ReadStatus
  8788  12B7                     _CC2500_ReadStatus:	
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8792                           ;CC2500_ReadStatus@status_addr stored from wreg
  8793  12B7  0020               	movlb	0	; select bank0
  8794  12B8  00A3               	movwf	CC2500_ReadStatus@status_addr
  8795                           
  8796                           ;CC2500_B1.c: 305: RC4 = 0;
  8797  12B9  120E               	bcf	14,4	;volatile
  8798                           
  8799                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8800  12BA  0823               	movf	CC2500_ReadStatus@status_addr,w
  8801  12BB  3EC0               	addlw	192
  8802  12BC  00A2               	movwf	??_CC2500_ReadStatus
  8803  12BD  0822               	movf	??_CC2500_ReadStatus,w
  8804  12BE  00F5               	movwf	_SPI0Buffer
  8805                           
  8806                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8807  12BF  2AC3               	goto	l8513
  8808  12C0                     l8511:	
  8809                           
  8810                           ;CC2500_B1.c: 309: Timeout_Counter();
  8811  12C0  3190  20BD  3192   	fcall	_Timeout_Counter
  8812  12C3                     l8513:	
  8813  12C3  0020               	movlb	0	; select bank0
  8814  12C4  1D0E               	btfss	14,2	;volatile
  8815  12C5  2AC9               	goto	l8517
  8816  12C6  0021               	movlb	1	; select bank1
  8817  12C7  1D2D               	btfss	(_myMain^(0+128)+13),2
  8818  12C8  2AC0               	goto	l8511
  8819  12C9                     l8517:	
  8820                           
  8821                           ;CC2500_B1.c: 310: };
  8822                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8823  12C9  319E  263A  3192   	fcall	_set_TimeoutCleared
  8824                           
  8825                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8826  12CC  3190  2095  3192   	fcall	_CC2500_WriteByte
  8827                           
  8828                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8829  12CF  3190  20E7         	fcall	_CC2500_ReadByte
  8830                           
  8831                           ;CC2500_B1.c: 315: RC4 = 1;
  8832  12D1  0020               	movlb	0	; select bank0
  8833  12D2  160E               	bsf	14,4	;volatile
  8834                           
  8835                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8836  12D3  0875               	movf	_SPI0Buffer,w
  8837  12D4  00A2               	movwf	??_CC2500_ReadStatus
  8838  12D5  0822               	movf	??_CC2500_ReadStatus,w
  8839  12D6  0021               	movlb	1	; select bank1
  8840  12D7  00DA               	movwf	_s_data^(0+128)
  8841  12D8  0008               	return
  8842  12D9                     __end_of_CC2500_ReadStatus:	
  8843                           
  8844                           	psect	text37
  8845  10E7                     __ptext37:	
  8846 ;; *************** function _CC2500_ReadByte *****************
  8847 ;; Defined at:
  8848 ;;		line 238 in file "../src/CC2500_B1.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;		None               void
  8855 ;; Registers used:
  8856 ;;		wreg, status,2, status,0
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;Total ram usage:        2 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    5
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_CC2500_RxData
  8873 ;;		_CC2500_ReadStatus
  8874 ;;		_CC2500_ReadREG
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _CC2500_ReadByte
  8880  10E7                     _CC2500_ReadByte:	
  8881                           
  8882                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8883                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8887  10E7  0020               	movlb	0	; select bank0
  8888  10E8  01A1               	clrf	CC2500_ReadByte@loop_b
  8889  10E9                     L7:	
  8890  10E9  3008               	movlw	8
  8891  10EA  0221               	subwf	CC2500_ReadByte@loop_b,w
  8892  10EB  1803               	btfsc	3,0
  8893  10EC  0008               	return
  8894                           
  8895                           ;CC2500_B1.c: 241: RC1 = 1;
  8896  10ED  148E               	bsf	14,1	;volatile
  8897                           
  8898                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8899  10EE  1003               	clrc
  8900  10EF  0DF5               	rlf	_SPI0Buffer,f
  8901                           
  8902                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8903  10F0  1D0E               	btfss	14,2	;volatile
  8904  10F1  28F4               	goto	l8405
  8905                           
  8906                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8907  10F2  1475               	bsf	_SPI0Buffer,0
  8908  10F3  28F8               	goto	l8407
  8909  10F4                     l8405:	
  8910                           
  8911                           ;CC2500_B1.c: 245: else
  8912                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8913  10F4  30FE               	movlw	254
  8914  10F5  00A0               	movwf	??_CC2500_ReadByte
  8915  10F6  0820               	movf	??_CC2500_ReadByte,w
  8916  10F7  05F5               	andwf	_SPI0Buffer,f
  8917  10F8                     l8407:	
  8918                           
  8919                           ;CC2500_B1.c: 247: RC1 = 0;
  8920  10F8  108E               	bcf	14,1	;volatile
  8921  10F9  3001               	movlw	1
  8922  10FA  00A0               	movwf	??_CC2500_ReadByte
  8923  10FB  0820               	movf	??_CC2500_ReadByte,w
  8924  10FC  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8925  10FD  28E9               	goto	L7
  8926  10FE                     __end_of_CC2500_ReadByte:	
  8927                           
  8928                           	psect	text38
  8929  1E24                     __ptext38:	
  8930 ;; *************** function _RF_Initialization *****************
  8931 ;; Defined at:
  8932 ;;		line 9 in file "../src/RF_Control_B1.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;		None
  8937 ;; Return value:  Size  Location     Type
  8938 ;;		None               void
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, pclath, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;Total ram usage:        0 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    6
  8953 ;; This function calls:
  8954 ;;		_setRF_Initialization
  8955 ;; This function is called by:
  8956 ;;		_main
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           
  8961                           ;psect for function _RF_Initialization
  8962  1E24                     _RF_Initialization:	
  8963                           
  8964                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8965                           
  8966                           ;incstack = 0
  8967                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8968  1E24  319E  2675         	fcall	_setRF_Initialization
  8969  1E26  0008               	return
  8970  1E27                     __end_of_RF_Initialization:	
  8971                           
  8972                           	psect	text39
  8973  1E75                     __ptext39:	
  8974 ;; *************** function _setRF_Initialization *****************
  8975 ;; Defined at:
  8976 ;;		line 43 in file "../src/RF_Control_B1.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;		None
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;		None
  8981 ;; Return value:  Size  Location     Type
  8982 ;;		None               void
  8983 ;; Registers used:
  8984 ;;		wreg
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;Total ram usage:        1 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    5
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_RF_Initialization
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           
  9005                           ;psect for function _setRF_Initialization
  9006  1E75                     _setRF_Initialization:	
  9007                           
  9008                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9009                           
  9010                           ;incstack = 0
  9011                           ; Regs used in _setRF_Initialization: [wreg]
  9012  1E75  3015               	movlw	21
  9013  1E76  0020               	movlb	0	; select bank0
  9014  1E77  00A0               	movwf	??_setRF_Initialization
  9015  1E78  0820               	movf	??_setRF_Initialization,w
  9016  1E79  0021               	movlb	1	; select bank1
  9017  1E7A  00D7               	movwf	_Tx_Length^(0+128)
  9018                           
  9019                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9020  1E7B  300A               	movlw	10
  9021  1E7C  00C3               	movwf	(_RF1^(0+128)+7)
  9022  1E7D  3000               	movlw	0
  9023  1E7E  00C4               	movwf	(_RF1^(0+128)+8)
  9024  1E7F  0008               	return
  9025  1E80                     __end_of_setRF_Initialization:	
  9026                           
  9027                           	psect	text40
  9028  1FDC                     __ptext40:	
  9029 ;; *************** function _Mcu_Initialization *****************
  9030 ;; Defined at:
  9031 ;;		line 30 in file "../src/MCU_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;		None
  9036 ;; Return value:  Size  Location     Type
  9037 ;;		None               void
  9038 ;; Registers used:
  9039 ;;		wreg, status,2, status,0, pclath, cstack
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;Total ram usage:        0 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    6
  9052 ;; This function calls:
  9053 ;;		_ADC_Set
  9054 ;;		_Fosc_Set
  9055 ;;		_IOC_Set
  9056 ;;		_IO_Set
  9057 ;;		_TMR1_Set
  9058 ;;		_WDT_Set
  9059 ;; This function is called by:
  9060 ;;		_main
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           
  9065                           ;psect for function _Mcu_Initialization
  9066  1FDC                     _Mcu_Initialization:	
  9067                           
  9068                           ;MCU_B1.c: 32: Fosc_Set();
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9072  1FDC  319E  2636  319F   	fcall	_Fosc_Set
  9073                           
  9074                           ;MCU_B1.c: 34: IO_Set();
  9075  1FDF  3190  20FE  319F   	fcall	_IO_Set
  9076                           
  9077                           ;MCU_B1.c: 36: ;;
  9078                           ;MCU_B1.c: 38: TMR1_Set();
  9079  1FE2  319E  26BC  319F   	fcall	_TMR1_Set
  9080                           
  9081                           ;MCU_B1.c: 40: ADC_Set();
  9082  1FE5  3187  27F9  319F   	fcall	_ADC_Set
  9083                           
  9084                           ;MCU_B1.c: 42: ;;
  9085                           ;MCU_B1.c: 44: ;;
  9086                           ;MCU_B1.c: 46: IOC_Set();
  9087  1FE8  319E  26D4  319F   	fcall	_IOC_Set
  9088                           
  9089                           ;MCU_B1.c: 48: ;;
  9090                           ;MCU_B1.c: 50: ;;
  9091                           ;MCU_B1.c: 52: WDT_Set();
  9092  1FEB  319E  266A         	fcall	_WDT_Set
  9093  1FED  0008               	return
  9094  1FEE                     __end_of_Mcu_Initialization:	
  9095                           
  9096                           	psect	text41
  9097  1E6A                     __ptext41:	
  9098 ;; *************** function _WDT_Set *****************
  9099 ;; Defined at:
  9100 ;;		line 1005 in file "../src/MCU_B1.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;		None               void
  9107 ;; Registers used:
  9108 ;;		wreg
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        1 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    5
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_Mcu_Initialization
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _WDT_Set
  9130  1E6A                     _WDT_Set:	
  9131                           
  9132                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in _WDT_Set: [wreg]
  9136  1E6A  3017               	movlw	23
  9137  1E6B  0021               	movlb	1	; select bank1
  9138  1E6C  0097               	movwf	23	;volatile
  9139                           
  9140                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  9141  1E6D  144D               	bsf	_WDT^(0+128),0
  9142                           
  9143                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  9144  1E6E  300A               	movlw	10
  9145  1E6F  0020               	movlb	0	; select bank0
  9146  1E70  00A0               	movwf	??_WDT_Set
  9147  1E71  0820               	movf	??_WDT_Set,w
  9148  1E72  0021               	movlb	1	; select bank1
  9149  1E73  00CE               	movwf	(_WDT^(0+128)+1)
  9150  1E74  0008               	return
  9151  1E75                     __end_of_WDT_Set:	
  9152                           
  9153                           	psect	text42
  9154  1EBC                     __ptext42:	
  9155 ;; *************** function _TMR1_Set *****************
  9156 ;; Defined at:
  9157 ;;		line 199 in file "../src/MCU_B1.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;		None               void
  9164 ;; Registers used:
  9165 ;;		wreg
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    5
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_Mcu_Initialization
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _TMR1_Set
  9187  1EBC                     _TMR1_Set:	
  9188                           
  9189                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9190                           
  9191                           ;incstack = 0
  9192                           ; Regs used in _TMR1_Set: [wreg]
  9193  1EBC  3041               	movlw	65
  9194  1EBD  0020               	movlb	0	; select bank0
  9195  1EBE  0098               	movwf	24	;volatile
  9196                           
  9197                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9198  1EBF  30FA               	movlw	250
  9199  1EC0  0097               	movwf	23	;volatile
  9200                           
  9201                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9202  1EC1  3038               	movlw	56
  9203  1EC2  0096               	movwf	22	;volatile
  9204                           
  9205                           ;MCU_B1.c: 203: TMR1IE = 1;
  9206  1EC3  0021               	movlb	1	; select bank1
  9207  1EC4  1411               	bsf	17,0	;volatile
  9208                           
  9209                           ;MCU_B1.c: 204: PEIE = 1;
  9210  1EC5  170B               	bsf	11,6	;volatile
  9211                           
  9212                           ;MCU_B1.c: 205: GIE = 1;
  9213  1EC6  178B               	bsf	11,7	;volatile
  9214  1EC7  0008               	return
  9215  1EC8                     __end_of_TMR1_Set:	
  9216                           
  9217                           	psect	text43
  9218  10FE                     __ptext43:	
  9219 ;; *************** function _IO_Set *****************
  9220 ;; Defined at:
  9221 ;;		line 60 in file "../src/MCU_B1.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;		None
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;		None
  9226 ;; Return value:  Size  Location     Type
  9227 ;;		None               void
  9228 ;; Registers used:
  9229 ;;		wreg, status,2
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;Total ram usage:        0 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:    5
  9242 ;; This function calls:
  9243 ;;		Nothing
  9244 ;; This function is called by:
  9245 ;;		_Mcu_Initialization
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           
  9250                           ;psect for function _IO_Set
  9251  10FE                     _IO_Set:	
  9252                           
  9253                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _IO_Set: [wreg+status,2]
  9257  10FE  3077               	movlw	119
  9258  10FF  0021               	movlb	1	; select bank1
  9259  1100  008C               	movwf	12	;volatile
  9260                           
  9261                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9262  1101  3005               	movlw	5
  9263  1102  008D               	movwf	13	;volatile
  9264                           
  9265                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9266  1103  300C               	movlw	12
  9267  1104  008E               	movwf	14	;volatile
  9268                           
  9269                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9270  1105  0022               	movlb	2	; select bank2
  9271  1106  018C               	clrf	12	;volatile
  9272                           
  9273                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9274  1107  018D               	clrf	13	;volatile
  9275                           
  9276                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9277  1108  018E               	clrf	14	;volatile
  9278                           
  9279                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9280  1109  3002               	movlw	2
  9281  110A  0023               	movlb	3	; select bank3
  9282  110B  008C               	movwf	12	;volatile
  9283                           
  9284                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9285  110C  018D               	clrf	13	;volatile
  9286                           
  9287                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9288  110D  018E               	clrf	14	;volatile
  9289                           
  9290                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9291  110E  3077               	movlw	119
  9292  110F  0020               	movlb	0	; select bank0
  9293  1110  008C               	movwf	12	;volatile
  9294                           
  9295                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9296  1111  3005               	movlw	5
  9297  1112  008D               	movwf	13	;volatile
  9298                           
  9299                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9300  1113  300C               	movlw	12
  9301  1114  008E               	movwf	14	;volatile
  9302  1115  0008               	return
  9303  1116                     __end_of_IO_Set:	
  9304                           
  9305                           	psect	text44
  9306  1ED4                     __ptext44:	
  9307 ;; *************** function _IOC_Set *****************
  9308 ;; Defined at:
  9309 ;;		line 367 in file "../src/MCU_B1.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, status,2
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    5
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_Mcu_Initialization
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _IOC_Set
  9339  1ED4                     _IOC_Set:	
  9340                           
  9341                           ;MCU_B1.c: 368: WPUB2 = 0;
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _IOC_Set: [wreg+status,2]
  9345  1ED4  0024               	movlb	4	; select bank4
  9346  1ED5  110D               	bcf	13,2	;volatile
  9347                           
  9348                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
  9349  1ED6  3004               	movlw	4
  9350  1ED7  0027               	movlb	7	; select bank7
  9351  1ED8  0094               	movwf	20	;volatile
  9352                           
  9353                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
  9354  1ED9  3004               	movlw	4
  9355  1EDA  0095               	movwf	21	;volatile
  9356                           
  9357                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9358  1EDB  0196               	clrf	22	;volatile
  9359                           
  9360                           ;MCU_B1.c: 394: IOCIE = 1;
  9361  1EDC  158B               	bsf	11,3	;volatile
  9362                           
  9363                           ;MCU_B1.c: 395: IOCIF = 0;
  9364  1EDD  100B               	bcf	11,0	;volatile
  9365                           
  9366                           ;MCU_B1.c: 396: PEIE = 1;
  9367  1EDE  170B               	bsf	11,6	;volatile
  9368                           
  9369                           ;MCU_B1.c: 397: GIE = 1;
  9370  1EDF  178B               	bsf	11,7	;volatile
  9371  1EE0  0008               	return
  9372  1EE1                     __end_of_IOC_Set:	
  9373                           
  9374                           	psect	text45
  9375  1E36                     __ptext45:	
  9376 ;; *************** function _Fosc_Set *****************
  9377 ;; Defined at:
  9378 ;;		line 56 in file "../src/MCU_B1.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;		None               void
  9385 ;; Registers used:
  9386 ;;		wreg
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        0 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    5
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_Mcu_Initialization
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _Fosc_Set
  9408  1E36                     _Fosc_Set:	
  9409                           
  9410                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _Fosc_Set: [wreg]
  9414  1E36  3078               	movlw	120
  9415  1E37  0021               	movlb	1	; select bank1
  9416  1E38  0099               	movwf	25	;volatile
  9417  1E39  0008               	return
  9418  1E3A                     __end_of_Fosc_Set:	
  9419                           
  9420                           	psect	text46
  9421  07F9                     __ptext46:	
  9422 ;; *************** function _ADC_Set *****************
  9423 ;; Defined at:
  9424 ;;		line 419 in file "../src/MCU_B1.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;		None               void
  9431 ;; Registers used:
  9432 ;;		wreg
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;Total ram usage:        0 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    5
  9445 ;; This function calls:
  9446 ;;		Nothing
  9447 ;; This function is called by:
  9448 ;;		_Mcu_Initialization
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function _ADC_Set
  9454  07F9                     _ADC_Set:	
  9455                           
  9456                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
  9457                           
  9458                           ;incstack = 0
  9459                           ; Regs used in _ADC_Set: [wreg]
  9460  07F9  30F2               	movlw	242
  9461  07FA  0021               	movlb	1	; select bank1
  9462  07FB  009E               	movwf	30	;volatile
  9463                           
  9464                           ;MCU_B1.c: 421: FVRCON = 0xc0;
  9465  07FC  30C0               	movlw	192
  9466  07FD  0022               	movlb	2	; select bank2
  9467  07FE  0097               	movwf	23	;volatile
  9468  07FF  0008               	return
  9469  0800                     __end_of_ADC_Set:	
  9470                           
  9471                           	psect	text47
  9472  1F79                     __ptext47:	
  9473 ;; *************** function _LED_Main *****************
  9474 ;; Defined at:
  9475 ;;		line 47 in file "../src/LED_B1.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    7
  9496 ;; This function calls:
  9497 ;;		_setLED_Main
  9498 ;; This function is called by:
  9499 ;;		_main
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _LED_Main
  9505  1F79                     _LED_Main:	
  9506                           
  9507                           ;LED_B1.c: 49: setLED_Main(1);
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9511  1F79  3001               	movlw	1
  9512  1F7A  3196  26B2  319F   	fcall	_setLED_Main
  9513                           
  9514                           ;LED_B1.c: 52: setLED_Main(2);
  9515  1F7D  3002               	movlw	2
  9516  1F7E  3196  26B2  319F   	fcall	_setLED_Main
  9517                           
  9518                           ;LED_B1.c: 55: setLED_Main(3);
  9519  1F81  3003               	movlw	3
  9520  1F82  3196  26B2  319F   	fcall	_setLED_Main
  9521                           
  9522                           ;LED_B1.c: 58: setLED_Main(99);
  9523  1F85  3063               	movlw	99
  9524  1F86  3196  26B2         	fcall	_setLED_Main
  9525  1F88  0008               	return
  9526  1F89                     __end_of_LED_Main:	
  9527                           
  9528                           	psect	text48
  9529  16B2                     __ptext48:	
  9530 ;; *************** function _setLED_Main *****************
  9531 ;; Defined at:
  9532 ;;		line 192 in file "../src/LED_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;  led             1    wreg     unsigned char 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  led             1    3[BANK0 ] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        3 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    6
  9553 ;; This function calls:
  9554 ;;		_LedPointSelect
  9555 ;; This function is called by:
  9556 ;;		_LED_Main
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _setLED_Main
  9562  16B2                     _setLED_Main:	
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9566                           ;setLED_Main@led stored from wreg
  9567  16B2  0020               	movlb	0	; select bank0
  9568  16B3  00A3               	movwf	setLED_Main@led
  9569                           
  9570                           ;LED_B1.c: 193: LedPointSelect(led);
  9571  16B4  0823               	movf	setLED_Main@led,w
  9572  16B5  3193  2322  3196   	fcall	_LedPointSelect
  9573                           
  9574                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9575  16B8  0870               	movf	_LED,w
  9576  16B9  0086               	movwf	6
  9577  16BA  0871               	movf	_LED+1,w
  9578  16BB  0087               	movwf	7
  9579  16BC  1C81               	btfss	1,1
  9580  16BD  0008               	return
  9581                           
  9582                           ;LED_B1.c: 195: LED->Time++;
  9583  16BE  0870               	movf	_LED,w
  9584  16BF  0086               	movwf	6
  9585  16C0  0871               	movf	_LED+1,w
  9586  16C1  0087               	movwf	7
  9587  16C2  3141               	addfsr 1,1
  9588  16C3  3001               	movlw	1
  9589  16C4  0781               	addwf	1,f
  9590  16C5  3141               	addfsr 1,1
  9591  16C6  1803               	skipnc
  9592  16C7  0A81               	incf	1,f
  9593                           
  9594                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9595  16C8  0870               	movf	_LED,w
  9596  16C9  0086               	movwf	6
  9597  16CA  0871               	movf	_LED+1,w
  9598  16CB  0087               	movwf	7
  9599  16CC  3141               	addfsr 1,1
  9600  16CD  3F40               	moviw [0]fsr1
  9601  16CE  0020               	movlb	0	; select bank0
  9602  16CF  00A1               	movwf	??_setLED_Main
  9603  16D0  3F41               	moviw [1]fsr1
  9604  16D1  00A2               	movwf	??_setLED_Main+1
  9605  16D2  3000               	movlw	0
  9606  16D3  0222               	subwf	??_setLED_Main+1,w
  9607  16D4  3032               	movlw	50
  9608  16D5  1903               	skipnz
  9609  16D6  0221               	subwf	??_setLED_Main,w
  9610  16D7  1C03               	skipc
  9611  16D8  0008               	return
  9612                           
  9613                           ;LED_B1.c: 197: LED->Time = 0;
  9614  16D9  0870               	movf	_LED,w
  9615  16DA  0086               	movwf	6
  9616  16DB  0871               	movf	_LED+1,w
  9617  16DC  0087               	movwf	7
  9618  16DD  3141               	addfsr 1,1
  9619  16DE  3000               	movlw	0
  9620  16DF  3FC0               	movwi [0]fsr1
  9621  16E0  3FC1               	movwi [1]fsr1
  9622                           
  9623                           ;LED_B1.c: 199: if (led == 1) {
  9624  16E1  0823               	movf	setLED_Main@led,w
  9625  16E2  3A01               	xorlw	1
  9626  16E3  1D03               	skipz
  9627  16E4  2EE8               	goto	l9221
  9628                           
  9629                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9630  16E5  3080               	movlw	128
  9631  16E6  068E               	xorwf	14,f
  9632                           
  9633                           ;LED_B1.c: 201: }
  9634  16E7  0008               	return
  9635  16E8                     l9221:	
  9636                           
  9637                           ;LED_B1.c: 204: else if (led == 2) {
  9638  16E8  0823               	movf	setLED_Main@led,w
  9639  16E9  3A02               	xorlw	2
  9640  16EA  1D03               	skipz
  9641  16EB  2EEF               	goto	l9225
  9642                           
  9643                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9644  16EC  3008               	movlw	8
  9645  16ED  068C               	xorwf	12,f
  9646                           
  9647                           ;LED_B1.c: 206: }
  9648  16EE  0008               	return
  9649  16EF                     l9225:	
  9650                           
  9651                           ;LED_B1.c: 209: else if (led == 3) {
  9652  16EF  0823               	movf	setLED_Main@led,w
  9653  16F0  3A03               	xorlw	3
  9654  16F1  1D03               	skipz
  9655  16F2  2EF6               	goto	l9229
  9656                           
  9657                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9658  16F3  3040               	movlw	64
  9659  16F4  068E               	xorwf	14,f
  9660                           
  9661                           ;LED_B1.c: 211: }
  9662  16F5  0008               	return
  9663  16F6                     l9229:	
  9664                           
  9665                           ;LED_B1.c: 214: else if (led == 99) {
  9666  16F6  0823               	movf	setLED_Main@led,w
  9667  16F7  3A63               	xorlw	99
  9668  16F8  1D03               	skipz
  9669  16F9  0008               	return
  9670                           
  9671                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9672  16FA  3020               	movlw	32
  9673  16FB  068D               	xorwf	13,f
  9674  16FC  0008               	return
  9675  16FD                     __end_of_setLED_Main:	
  9676                           
  9677                           	psect	text49
  9678  1F69                     __ptext49:	
  9679 ;; *************** function _LED_Initialization *****************
  9680 ;; Defined at:
  9681 ;;		line 31 in file "../src/LED_B1.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;		None               void
  9688 ;; Registers used:
  9689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;Total ram usage:        0 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    8
  9702 ;; This function calls:
  9703 ;;		_setLED_Initialization
  9704 ;; This function is called by:
  9705 ;;		_main
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _LED_Initialization
  9711  1F69                     _LED_Initialization:	
  9712                           
  9713                           ;LED_B1.c: 33: setLED_Initialization(1);
  9714                           
  9715                           ;incstack = 0
  9716                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9717  1F69  3001               	movlw	1
  9718  1F6A  319F  27A9  319F   	fcall	_setLED_Initialization
  9719                           
  9720                           ;LED_B1.c: 36: setLED_Initialization(2);
  9721  1F6D  3002               	movlw	2
  9722  1F6E  319F  27A9  319F   	fcall	_setLED_Initialization
  9723                           
  9724                           ;LED_B1.c: 39: setLED_Initialization(3);
  9725  1F71  3003               	movlw	3
  9726  1F72  319F  27A9  319F   	fcall	_setLED_Initialization
  9727                           
  9728                           ;LED_B1.c: 42: setLED_Initialization(99);
  9729  1F75  3063               	movlw	99
  9730  1F76  319F  27A9         	fcall	_setLED_Initialization
  9731  1F78  0008               	return
  9732  1F79                     __end_of_LED_Initialization:	
  9733                           
  9734                           	psect	text50
  9735  1FA9                     __ptext50:	
  9736 ;; *************** function _setLED_Initialization *****************
  9737 ;; Defined at:
  9738 ;;		line 63 in file "../src/LED_B1.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;  led             1    wreg     unsigned char 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  led             1    3[BANK0 ] unsigned char 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;Total ram usage:        1 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    7
  9759 ;; This function calls:
  9760 ;;		_LedPointSelect
  9761 ;;		_setLED
  9762 ;; This function is called by:
  9763 ;;		_LED_Initialization
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _setLED_Initialization
  9769  1FA9                     _setLED_Initialization:	
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9773                           ;setLED_Initialization@led stored from wreg
  9774  1FA9  0020               	movlb	0	; select bank0
  9775  1FAA  00A3               	movwf	setLED_Initialization@led
  9776                           
  9777                           ;LED_B1.c: 64: LedPointSelect(led);
  9778  1FAB  0823               	movf	setLED_Initialization@led,w
  9779  1FAC  3193  2322  319F   	fcall	_LedPointSelect
  9780                           
  9781                           ;LED_B1.c: 65: LED->Enable = 1;
  9782  1FAF  0870               	movf	_LED,w
  9783  1FB0  0086               	movwf	6
  9784  1FB1  0871               	movf	_LED+1,w
  9785  1FB2  0087               	movwf	7
  9786  1FB3  1401               	bsf	1,0
  9787                           
  9788                           ;LED_B1.c: 66: setLED(led, 0);
  9789  1FB4  0020               	movlb	0	; select bank0
  9790  1FB5  01A1               	clrf	setLED@command
  9791  1FB6  0823               	movf	setLED_Initialization@led,w
  9792  1FB7  318B  23A9         	fcall	_setLED
  9793  1FB9  0008               	return
  9794  1FBA                     __end_of_setLED_Initialization:	
  9795                           
  9796                           	psect	text51
  9797  11F4                     __ptext51:	
  9798 ;; *************** function _Flash_Memory_Main *****************
  9799 ;; Defined at:
  9800 ;;		line 900 in file "../src/MCU_B1.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;		None               void
  9807 ;; Registers used:
  9808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        0 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    8
  9821 ;; This function calls:
  9822 ;;		_Flash_Memory_Modify
  9823 ;; This function is called by:
  9824 ;;		_main
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           
  9829                           ;psect for function _Flash_Memory_Main
  9830  11F4                     _Flash_Memory_Main:	
  9831                           
  9832                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9836  11F4  0023               	movlb	3	; select bank3
  9837  11F5  1CC4               	btfss	(_Memory^(0+384)+36),1
  9838  11F6  0008               	return
  9839                           
  9840                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9841  11F7  1C44               	btfss	(_Memory^(0+384)+36),0
  9842  11F8  2A11               	goto	l1429
  9843                           
  9844                           ;MCU_B1.c: 903: Memory.Time++;
  9845  11F9  3001               	movlw	1
  9846  11FA  07C2               	addwf	(_Memory^(0+384)+34),f
  9847  11FB  3000               	movlw	0
  9848  11FC  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9849                           
  9850                           ;MCU_B1.c: 904: if (Memory.Time == 25)
  9851  11FD  3022               	movlw	34
  9852  11FE  3EA0               	addlw	_Memory& (0+255)
  9853  11FF  0086               	movwf	6
  9854  1200  3001               	movlw	1	; select bank3/4
  9855  1201  0087               	movwf	7
  9856  1202  3F40               	moviw [0]fsr1
  9857  1203  3A19               	xorlw	25
  9858  1204  1D03               	skipz
  9859  1205  2A08               	goto	u10405
  9860  1206  3F41               	moviw [1]fsr1
  9861  1207  3A00               	xorlw	0
  9862  1208                     u10405:	
  9863  1208  1D03               	skipz
  9864  1209  0008               	return
  9865                           
  9866                           ;MCU_B1.c: 905: {
  9867                           ;MCU_B1.c: 906: Memory.Time = 0;
  9868  120A  01C2               	clrf	(_Memory^(0+384)+34)
  9869  120B  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9870                           
  9871                           ;MCU_B1.c: 907: Memory.Modify = 0;
  9872  120C  1044               	bcf	(_Memory^(0+384)+36),0
  9873                           
  9874                           ;MCU_B1.c: 908: Memory.GO = 0;
  9875  120D  10C4               	bcf	(_Memory^(0+384)+36),1
  9876                           
  9877                           ;MCU_B1.c: 909: Flash_Memory_Modify();
  9878  120E  3195  25DE         	fcall	_Flash_Memory_Modify
  9879                           
  9880                           ;MCU_B1.c: 910: }
  9881                           ;MCU_B1.c: 911: } else {
  9882  1210  0008               	return
  9883  1211                     l1429:	
  9884                           
  9885                           ;MCU_B1.c: 912: Memory.GO = 0;
  9886  1211  10C4               	bcf	(_Memory^(0+384)+36),1
  9887  1212  0008               	return
  9888  1213                     __end_of_Flash_Memory_Main:	
  9889                           
  9890                           	psect	text52
  9891  15DE                     __ptext52:	
  9892 ;; *************** function _Flash_Memory_Modify *****************
  9893 ;; Defined at:
  9894 ;;		line 969 in file "../src/MCU_B1.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  i               1    5[BANK0 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;		None               void
  9901 ;; Registers used:
  9902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;Total ram usage:        2 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    7
  9915 ;; This function calls:
  9916 ;;		_Flash_Memory_Erasing
  9917 ;;		_Flash_Memory_Read
  9918 ;;		_Flash_Memory_Write
  9919 ;; This function is called by:
  9920 ;;		_Flash_Memory_Main
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function _Flash_Memory_Modify
  9926  15DE                     _Flash_Memory_Modify:	
  9927                           
  9928                           ;MCU_B1.c: 970: char i = 0;
  9929                           
  9930                           ;incstack = 0
  9931                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9932  15DE  0020               	movlb	0	; select bank0
  9933  15DF  01A5               	clrf	Flash_Memory_Modify@i
  9934                           
  9935                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
  9936  15E0  01A5               	clrf	Flash_Memory_Modify@i
  9937  15E1  3020               	movlw	32
  9938  15E2  0225               	subwf	Flash_Memory_Modify@i,w
  9939  15E3  1803               	btfsc	3,0
  9940  15E4  2DFA               	goto	l9291
  9941  15E5                     l9285:	
  9942                           
  9943                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
  9944  15E5  0825               	movf	Flash_Memory_Modify@i,w
  9945  15E6  3191  2149  3195   	fcall	_Flash_Memory_Read
  9946  15E9  0020               	movlb	0	; select bank0
  9947  15EA  00A4               	movwf	??_Flash_Memory_Modify
  9948  15EB  0825               	movf	Flash_Memory_Modify@i,w
  9949  15EC  3EA0               	addlw	_Memory& (0+255)
  9950  15ED  0086               	movwf	6
  9951  15EE  3001               	movlw	1	; select bank3/4
  9952  15EF  0087               	movwf	7
  9953  15F0  0824               	movf	??_Flash_Memory_Modify,w
  9954  15F1  0081               	movwf	1
  9955  15F2  3001               	movlw	1
  9956  15F3  00A4               	movwf	??_Flash_Memory_Modify
  9957  15F4  0824               	movf	??_Flash_Memory_Modify,w
  9958  15F5  07A5               	addwf	Flash_Memory_Modify@i,f
  9959  15F6  3020               	movlw	32
  9960  15F7  0225               	subwf	Flash_Memory_Modify@i,w
  9961  15F8  1C03               	skipc
  9962  15F9  2DE5               	goto	l9285
  9963  15FA                     l9291:	
  9964                           
  9965                           ;MCU_B1.c: 973: }
  9966                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
  9967  15FA  086D               	movf	_product,w
  9968  15FB  0086               	movwf	6
  9969  15FC  3002               	movlw	2	; select bank4/5
  9970  15FD  0087               	movwf	7
  9971  15FE  3002               	movlw	2	; select bank4/5
  9972  15FF  3F4C               	moviw [12]fsr1
  9973  1600  0023               	movlb	3	; select bank3
  9974  1601  00A0               	movwf	_Memory^(0+384)
  9975                           
  9976                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
  9977  1602  0020               	movlb	0	; select bank0
  9978  1603  086D               	movf	_product,w
  9979  1604  0086               	movwf	6
  9980  1605  3002               	movlw	2	; select bank4/5
  9981  1606  0087               	movwf	7
  9982  1607  3002               	movlw	2	; select bank4/5
  9983  1608  3F4D               	moviw [13]fsr1
  9984  1609  0023               	movlb	3	; select bank3
  9985  160A  00A1               	movwf	(_Memory^(0+384)+1)
  9986                           
  9987                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
  9988  160B  0020               	movlb	0	; select bank0
  9989  160C  086D               	movf	_product,w
  9990  160D  0086               	movwf	6
  9991  160E  3002               	movlw	2	; select bank4/5
  9992  160F  0087               	movwf	7
  9993  1610  3002               	movlw	2	; select bank4/5
  9994  1611  3F4E               	moviw [14]fsr1
  9995  1612  0023               	movlb	3	; select bank3
  9996  1613  00A2               	movwf	(_Memory^(0+384)+2)
  9997                           
  9998                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
  9999  1614  1D44               	btfss	(_Memory^(0+384)+36),2
 10000  1615  2E1A               	goto	l1451
 10001                           
 10002                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 10003  1616  1144               	bcf	(_Memory^(0+384)+36),2
 10004                           
 10005                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 10006  1617  0021               	movlb	1	; select bank1
 10007  1618  11A0               	bcf	_myMain^(0+128),3
 10008                           
 10009                           ;MCU_B1.c: 985: myMain.First = 0;
 10010  1619  12A0               	bcf	_myMain^(0+128),5
 10011  161A                     l1451:	
 10012                           
 10013                           ;MCU_B1.c: 987: }
 10014                           ;MCU_B1.c: 988: GIE = 0;
 10015  161A  138B               	bcf	11,7	;volatile
 10016                           
 10017                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 10018  161B  319E  26B0  3195   	fcall	_Flash_Memory_Erasing
 10019                           
 10020                           ;MCU_B1.c: 990: Flash_Memory_Write();
 10021  161E  3194  244C         	fcall	_Flash_Memory_Write
 10022                           
 10023                           ;MCU_B1.c: 991: GIE = 1;
 10024  1620  178B               	bsf	11,7	;volatile
 10025  1621  0008               	return
 10026  1622                     __end_of_Flash_Memory_Modify:	
 10027                           
 10028                           	psect	text53
 10029  1EB0                     __ptext53:	
 10030 ;; *************** function _Flash_Memory_Erasing *****************
 10031 ;; Defined at:
 10032 ;;		line 958 in file "../src/MCU_B1.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;		None
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;		None
 10037 ;; Return value:  Size  Location     Type
 10038 ;;		None               void
 10039 ;; Registers used:
 10040 ;;		wreg, status,2, status,0, pclath, cstack
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;Total ram usage:        0 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    6
 10053 ;; This function calls:
 10054 ;;		_Flash_Memory_Unlock
 10055 ;; This function is called by:
 10056 ;;		_Flash_Memory_Modify
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _Flash_Memory_Erasing
 10062  1EB0                     _Flash_Memory_Erasing:	
 10063                           
 10064                           ;MCU_B1.c: 959: CFGS = 0;
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10068  1EB0  0023               	movlb	3	; select bank3
 10069  1EB1  1315               	bcf	21,6	;volatile
 10070                           
 10071                           ;MCU_B1.c: 960: PMADRH = 0x30;
 10072  1EB2  3030               	movlw	48
 10073  1EB3  0092               	movwf	18	;volatile
 10074                           
 10075                           ;MCU_B1.c: 961: PMADRL = 0x00;
 10076  1EB4  0191               	clrf	17	;volatile
 10077                           
 10078                           ;MCU_B1.c: 962: FREE = 1;
 10079  1EB5  1615               	bsf	21,4	;volatile
 10080                           
 10081                           ;MCU_B1.c: 963: WREN = 1;
 10082  1EB6  1515               	bsf	21,2	;volatile
 10083                           
 10084                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 10085  1EB7  319E  2661         	fcall	_Flash_Memory_Unlock
 10086                           
 10087                           ;MCU_B1.c: 965: WREN = 0;
 10088  1EB9  0023               	movlb	3	; select bank3
 10089  1EBA  1115               	bcf	21,2	;volatile
 10090  1EBB  0008               	return
 10091  1EBC                     __end_of_Flash_Memory_Erasing:	
 10092                           
 10093                           	psect	text54
 10094  0531                     __ptext54:	
 10095 ;; *************** function _Flash_Memory_Initialization *****************
 10096 ;; Defined at:
 10097 ;;		line 859 in file "../src/MCU_B1.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  i               1   62[BANK0 ] unsigned char 
 10102 ;; Return value:  Size  Location     Type
 10103 ;;		None               void
 10104 ;; Registers used:
 10105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        2 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    8
 10118 ;; This function calls:
 10119 ;;		_Flash_Memory_Read
 10120 ;;		_Flash_Memory_Write
 10121 ;;		_setPercentValue
 10122 ;; This function is called by:
 10123 ;;		_main
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _Flash_Memory_Initialization
 10129  0531                     _Flash_Memory_Initialization:	
 10130                           
 10131                           ;MCU_B1.c: 860: char i = 0;
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10135  0531  0020               	movlb	0	; select bank0
 10136  0532  01DE               	clrf	Flash_Memory_Initialization@i
 10137                           
 10138                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 10139  0533  301F               	movlw	31
 10140  0534  3191  2149  3185   	fcall	_Flash_Memory_Read
 10141  0537  3AAA               	xorlw	170
 10142  0538  1D03               	skipz
 10143  0539  2DA3               	goto	l9623
 10144                           
 10145                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 10146  053A  3000               	movlw	0
 10147  053B  3191  2149  3185   	fcall	_Flash_Memory_Read
 10148  053E  0020               	movlb	0	; select bank0
 10149  053F  00DD               	movwf	??_Flash_Memory_Initialization
 10150  0540  086D               	movf	_product,w
 10151  0541  3E0C               	addlw	12
 10152  0542  0086               	movwf	6
 10153  0543  3002               	movlw	2	; select bank4/5
 10154  0544  0087               	movwf	7
 10155  0545  085D               	movf	??_Flash_Memory_Initialization,w
 10156  0546  0081               	movwf	1
 10157                           
 10158                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 10159  0547  3001               	movlw	1
 10160  0548  3191  2149  3185   	fcall	_Flash_Memory_Read
 10161  054B  0020               	movlb	0	; select bank0
 10162  054C  00DD               	movwf	??_Flash_Memory_Initialization
 10163  054D  086D               	movf	_product,w
 10164  054E  3E0D               	addlw	13
 10165  054F  0086               	movwf	6
 10166  0550  3002               	movlw	2	; select bank4/5
 10167  0551  0087               	movwf	7
 10168  0552  085D               	movf	??_Flash_Memory_Initialization,w
 10169  0553  0081               	movwf	1
 10170                           
 10171                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 10172  0554  3002               	movlw	2
 10173  0555  3191  2149  3185   	fcall	_Flash_Memory_Read
 10174  0558  0020               	movlb	0	; select bank0
 10175  0559  00DD               	movwf	??_Flash_Memory_Initialization
 10176  055A  086D               	movf	_product,w
 10177  055B  3E0E               	addlw	14
 10178  055C  0086               	movwf	6
 10179  055D  3002               	movlw	2	; select bank4/5
 10180  055E  0087               	movwf	7
 10181  055F  085D               	movf	??_Flash_Memory_Initialization,w
 10182  0560  0081               	movwf	1
 10183                           
 10184                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-90)*0.8)));
 10185  0561  3008               	movlw	8
 10186  0562  3196  2622  3185   	fcall	_setPercentValue
 10187  0565  0020               	movlb	0	; select bank0
 10188  0566  00DD               	movwf	??_Flash_Memory_Initialization
 10189  0567  085D               	movf	??_Flash_Memory_Initialization,w
 10190  0568  00DE               	movwf	Flash_Memory_Initialization@i
 10191                           
 10192                           ;MCU_B1.c: 871: product->Data[21] = i;
 10193  0569  085E               	movf	Flash_Memory_Initialization@i,w
 10194  056A  00DD               	movwf	??_Flash_Memory_Initialization
 10195  056B  086D               	movf	_product,w
 10196  056C  3E15               	addlw	21
 10197  056D  0086               	movwf	6
 10198  056E  3002               	movlw	2	; select bank4/5
 10199  056F  0087               	movwf	7
 10200  0570  085D               	movf	??_Flash_Memory_Initialization,w
 10201  0571  0081               	movwf	1
 10202                           
 10203                           ;MCU_B1.c: 872: product->Data[22] = i;
 10204  0572  085E               	movf	Flash_Memory_Initialization@i,w
 10205  0573  00DD               	movwf	??_Flash_Memory_Initialization
 10206  0574  086D               	movf	_product,w
 10207  0575  3E16               	addlw	22
 10208  0576  0086               	movwf	6
 10209  0577  3002               	movlw	2	; select bank4/5
 10210  0578  0087               	movwf	7
 10211  0579  085D               	movf	??_Flash_Memory_Initialization,w
 10212  057A  0081               	movwf	1
 10213                           
 10214                           ;MCU_B1.c: 873: product->Data[23] = i;
 10215  057B  085E               	movf	Flash_Memory_Initialization@i,w
 10216  057C  00DD               	movwf	??_Flash_Memory_Initialization
 10217  057D  086D               	movf	_product,w
 10218  057E  3E17               	addlw	23
 10219  057F  0086               	movwf	6
 10220  0580  3002               	movlw	2	; select bank4/5
 10221  0581  0087               	movwf	7
 10222  0582  085D               	movf	??_Flash_Memory_Initialization,w
 10223  0583  0081               	movwf	1
 10224                           
 10225                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10226  0584  086D               	movf	_product,w
 10227  0585  3E0C               	addlw	12
 10228  0586  0086               	movwf	6
 10229  0587  3002               	movlw	2	; select bank4/5
 10230  0588  0087               	movwf	7
 10231  0589  0801               	movf	1,w
 10232  058A  3AFF               	xorlw	255
 10233  058B  1D03               	skipz
 10234  058C  0008               	return
 10235  058D  086D               	movf	_product,w
 10236  058E  3E0D               	addlw	13
 10237  058F  0086               	movwf	6
 10238  0590  3002               	movlw	2	; select bank4/5
 10239  0591  0087               	movwf	7
 10240  0592  0801               	movf	1,w
 10241  0593  3AFF               	xorlw	255
 10242  0594  1D03               	skipz
 10243  0595  0008               	return
 10244  0596  086D               	movf	_product,w
 10245  0597  3E0E               	addlw	14
 10246  0598  0086               	movwf	6
 10247  0599  3002               	movlw	2	; select bank4/5
 10248  059A  0087               	movwf	7
 10249  059B  0801               	movf	1,w
 10250  059C  3AFF               	xorlw	255
 10251  059D  1D03               	skipz
 10252  059E  0008               	return
 10253                           
 10254                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 10255  059F  0021               	movlb	1	; select bank1
 10256  05A0  15A0               	bsf	_myMain^(0+128),3
 10257                           
 10258                           ;MCU_B1.c: 877: myMain.First = 1;
 10259  05A1  16A0               	bsf	_myMain^(0+128),5
 10260                           
 10261                           ;MCU_B1.c: 878: }
 10262                           ;MCU_B1.c: 879: } else {
 10263  05A2  0008               	return
 10264  05A3                     l9623:	
 10265                           
 10266                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-90)*0.8)));
 10267  05A3  3008               	movlw	8
 10268  05A4  3196  2622  3185   	fcall	_setPercentValue
 10269  05A7  0020               	movlb	0	; select bank0
 10270  05A8  00DD               	movwf	??_Flash_Memory_Initialization
 10271  05A9  085D               	movf	??_Flash_Memory_Initialization,w
 10272  05AA  00DE               	movwf	Flash_Memory_Initialization@i
 10273                           
 10274                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 10275  05AB  30FF               	movlw	255
 10276  05AC  00DD               	movwf	??_Flash_Memory_Initialization
 10277  05AD  085D               	movf	??_Flash_Memory_Initialization,w
 10278  05AE  0023               	movlb	3	; select bank3
 10279  05AF  00A0               	movwf	_Memory^(0+384)
 10280                           
 10281                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 10282  05B0  30FF               	movlw	255
 10283  05B1  0020               	movlb	0	; select bank0
 10284  05B2  00DD               	movwf	??_Flash_Memory_Initialization
 10285  05B3  085D               	movf	??_Flash_Memory_Initialization,w
 10286  05B4  0023               	movlb	3	; select bank3
 10287  05B5  00A1               	movwf	(_Memory^(0+384)+1)
 10288                           
 10289                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 10290  05B6  30FF               	movlw	255
 10291  05B7  0020               	movlb	0	; select bank0
 10292  05B8  00DD               	movwf	??_Flash_Memory_Initialization
 10293  05B9  085D               	movf	??_Flash_Memory_Initialization,w
 10294  05BA  0023               	movlb	3	; select bank3
 10295  05BB  00A2               	movwf	(_Memory^(0+384)+2)
 10296                           
 10297                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 10298  05BC  30FF               	movlw	255
 10299  05BD  0020               	movlb	0	; select bank0
 10300  05BE  00DD               	movwf	??_Flash_Memory_Initialization
 10301  05BF  085D               	movf	??_Flash_Memory_Initialization,w
 10302  05C0  0023               	movlb	3	; select bank3
 10303  05C1  00A3               	movwf	(_Memory^(0+384)+3)
 10304                           
 10305                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 10306  05C2  30FF               	movlw	255
 10307  05C3  0020               	movlb	0	; select bank0
 10308  05C4  00DD               	movwf	??_Flash_Memory_Initialization
 10309  05C5  085D               	movf	??_Flash_Memory_Initialization,w
 10310  05C6  0023               	movlb	3	; select bank3
 10311  05C7  00A4               	movwf	(_Memory^(0+384)+4)
 10312                           
 10313                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 10314  05C8  30FF               	movlw	255
 10315  05C9  0020               	movlb	0	; select bank0
 10316  05CA  00DD               	movwf	??_Flash_Memory_Initialization
 10317  05CB  085D               	movf	??_Flash_Memory_Initialization,w
 10318  05CC  0023               	movlb	3	; select bank3
 10319  05CD  00A5               	movwf	(_Memory^(0+384)+5)
 10320                           
 10321                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 10322  05CE  30AA               	movlw	170
 10323  05CF  0020               	movlb	0	; select bank0
 10324  05D0  00DD               	movwf	??_Flash_Memory_Initialization
 10325  05D1  085D               	movf	??_Flash_Memory_Initialization,w
 10326  05D2  0023               	movlb	3	; select bank3
 10327  05D3  00BF               	movwf	(_Memory^(0+384)+31)
 10328                           
 10329                           ;MCU_B1.c: 888: product->Data[21] = i;
 10330  05D4  0020               	movlb	0	; select bank0
 10331  05D5  085E               	movf	Flash_Memory_Initialization@i,w
 10332  05D6  00DD               	movwf	??_Flash_Memory_Initialization
 10333  05D7  086D               	movf	_product,w
 10334  05D8  3E15               	addlw	21
 10335  05D9  0086               	movwf	6
 10336  05DA  3002               	movlw	2	; select bank4/5
 10337  05DB  0087               	movwf	7
 10338  05DC  085D               	movf	??_Flash_Memory_Initialization,w
 10339  05DD  0081               	movwf	1
 10340                           
 10341                           ;MCU_B1.c: 889: product->Data[22] = i;
 10342  05DE  085E               	movf	Flash_Memory_Initialization@i,w
 10343  05DF  00DD               	movwf	??_Flash_Memory_Initialization
 10344  05E0  086D               	movf	_product,w
 10345  05E1  3E16               	addlw	22
 10346  05E2  0086               	movwf	6
 10347  05E3  3002               	movlw	2	; select bank4/5
 10348  05E4  0087               	movwf	7
 10349  05E5  085D               	movf	??_Flash_Memory_Initialization,w
 10350  05E6  0081               	movwf	1
 10351                           
 10352                           ;MCU_B1.c: 890: product->Data[23] = i;
 10353  05E7  085E               	movf	Flash_Memory_Initialization@i,w
 10354  05E8  00DD               	movwf	??_Flash_Memory_Initialization
 10355  05E9  086D               	movf	_product,w
 10356  05EA  3E17               	addlw	23
 10357  05EB  0086               	movwf	6
 10358  05EC  3002               	movlw	2	; select bank4/5
 10359  05ED  0087               	movwf	7
 10360  05EE  085D               	movf	??_Flash_Memory_Initialization,w
 10361  05EF  0081               	movwf	1
 10362                           
 10363                           ;MCU_B1.c: 891: GIE = 0;
 10364  05F0  138B               	bcf	11,7	;volatile
 10365                           
 10366                           ;MCU_B1.c: 892: Flash_Memory_Write();
 10367  05F1  3194  244C         	fcall	_Flash_Memory_Write
 10368                           
 10369                           ;MCU_B1.c: 893: GIE = 1;
 10370  05F3  178B               	bsf	11,7	;volatile
 10371                           
 10372                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 10373  05F4  0021               	movlb	1	; select bank1
 10374  05F5  15A0               	bsf	_myMain^(0+128),3
 10375                           
 10376                           ;MCU_B1.c: 895: myMain.First = 1;
 10377  05F6  16A0               	bsf	_myMain^(0+128),5
 10378  05F7  0008               	return
 10379  05F8                     __end_of_Flash_Memory_Initialization:	
 10380                           
 10381                           	psect	text55
 10382  144C                     __ptext55:	
 10383 ;; *************** function _Flash_Memory_Write *****************
 10384 ;; Defined at:
 10385 ;;		line 939 in file "../src/MCU_B1.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  i               1    1[BANK0 ] unsigned char 
 10390 ;; Return value:  Size  Location     Type
 10391 ;;		None               void
 10392 ;; Registers used:
 10393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;Total ram usage:        2 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    6
 10406 ;; This function calls:
 10407 ;;		_Flash_Memory_Unlock
 10408 ;; This function is called by:
 10409 ;;		_Flash_Memory_Initialization
 10410 ;;		_Flash_Memory_Modify
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _Flash_Memory_Write
 10416  144C                     _Flash_Memory_Write:	
 10417                           
 10418                           ;MCU_B1.c: 940: char i = 0;
 10419                           
 10420                           ;incstack = 0
 10421                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10422  144C  0020               	movlb	0	; select bank0
 10423  144D  01A1               	clrf	Flash_Memory_Write@i
 10424                           
 10425                           ;MCU_B1.c: 941: CFGS = 0;
 10426  144E  0023               	movlb	3	; select bank3
 10427  144F  1315               	bcf	21,6	;volatile
 10428                           
 10429                           ;MCU_B1.c: 942: PMADRH = 0x30;
 10430  1450  3030               	movlw	48
 10431  1451  0092               	movwf	18	;volatile
 10432                           
 10433                           ;MCU_B1.c: 943: PMDATH = 0;
 10434  1452  0194               	clrf	20	;volatile
 10435                           
 10436                           ;MCU_B1.c: 944: FREE = 0;
 10437  1453  1215               	bcf	21,4	;volatile
 10438                           
 10439                           ;MCU_B1.c: 945: LWLO = 1;
 10440  1454  1695               	bsf	21,5	;volatile
 10441                           
 10442                           ;MCU_B1.c: 946: WREN = 1;
 10443  1455  1515               	bsf	21,2	;volatile
 10444                           
 10445                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 10446  1456  0020               	movlb	0	; select bank0
 10447  1457  01A1               	clrf	Flash_Memory_Write@i
 10448  1458  3020               	movlw	32
 10449  1459  0221               	subwf	Flash_Memory_Write@i,w
 10450  145A  1803               	btfsc	3,0
 10451  145B  2C74               	goto	l1442
 10452  145C                     l8809:	
 10453                           
 10454                           ;MCU_B1.c: 948: PMADRL = i;
 10455  145C  0821               	movf	Flash_Memory_Write@i,w
 10456  145D  0023               	movlb	3	; select bank3
 10457  145E  0091               	movwf	17	;volatile
 10458                           
 10459                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 10460  145F  0020               	movlb	0	; select bank0
 10461  1460  0821               	movf	Flash_Memory_Write@i,w
 10462  1461  3EA0               	addlw	_Memory& (0+255)
 10463  1462  0086               	movwf	6
 10464  1463  3001               	movlw	1	; select bank3/4
 10465  1464  0087               	movwf	7
 10466  1465  0801               	movf	1,w
 10467  1466  0023               	movlb	3	; select bank3
 10468  1467  0093               	movwf	19	;volatile
 10469                           
 10470                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 10471  1468  319E  2661  3194   	fcall	_Flash_Memory_Unlock
 10472  146B  3001               	movlw	1
 10473  146C  0020               	movlb	0	; select bank0
 10474  146D  00A0               	movwf	??_Flash_Memory_Write
 10475  146E  0820               	movf	??_Flash_Memory_Write,w
 10476  146F  07A1               	addwf	Flash_Memory_Write@i,f
 10477  1470  3020               	movlw	32
 10478  1471  0221               	subwf	Flash_Memory_Write@i,w
 10479  1472  1C03               	skipc
 10480  1473  2C5C               	goto	l8809
 10481  1474                     l1442:	
 10482                           
 10483                           ;MCU_B1.c: 951: }
 10484                           ;MCU_B1.c: 952: LWLO = 0;
 10485  1474  0023               	movlb	3	; select bank3
 10486  1475  1295               	bcf	21,5	;volatile
 10487                           
 10488                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 10489  1476  319E  2661         	fcall	_Flash_Memory_Unlock
 10490                           
 10491                           ;MCU_B1.c: 954: WREN = 0;
 10492  1478  0023               	movlb	3	; select bank3
 10493  1479  1115               	bcf	21,2	;volatile
 10494  147A  0008               	return
 10495  147B                     __end_of_Flash_Memory_Write:	
 10496                           
 10497                           	psect	text56
 10498  1E61                     __ptext56:	
 10499 ;; *************** function _Flash_Memory_Unlock *****************
 10500 ;; Defined at:
 10501 ;;		line 918 in file "../src/MCU_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		wreg
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    5
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Flash_Memory_Write
 10526 ;;		_Flash_Memory_Erasing
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           
 10531                           ;psect for function _Flash_Memory_Unlock
 10532  1E61                     _Flash_Memory_Unlock:	
 10533                           
 10534                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 10535                           
 10536                           ;incstack = 0
 10537                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10538  1E61  3055               	movlw	85
 10539  1E62  0023               	movlb	3	; select bank3
 10540  1E63  0096               	movwf	22	;volatile
 10541                           
 10542                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 10543  1E64  30AA               	movlw	170
 10544  1E65  0096               	movwf	22	;volatile
 10545                           
 10546                           ;MCU_B1.c: 921: WR = 1;
 10547  1E66  1495               	bsf	21,1	;volatile
 10548                           
 10549                           ;MCU_B1.c: 922: __nop();
 10550  1E67  0000               	nop
 10551                           
 10552                           ;MCU_B1.c: 923: __nop();
 10553  1E68  0000               	nop
 10554  1E69  0008               	return
 10555  1E6A                     __end_of_Flash_Memory_Unlock:	
 10556                           
 10557                           	psect	text57
 10558  1149                     __ptext57:	
 10559 ;; *************** function _Flash_Memory_Read *****************
 10560 ;; Defined at:
 10561 ;;		line 927 in file "../src/MCU_B1.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  address         1    wreg     unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  address         1    2[BANK0 ] unsigned char 
 10566 ;;  ret             1    3[BANK0 ] unsigned char 
 10567 ;;  i               1    1[BANK0 ] unsigned char 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      unsigned char 
 10570 ;; Registers used:
 10571 ;;		wreg, status,2
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;Total ram usage:        4 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    5
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_Flash_Memory_Initialization
 10588 ;;		_Flash_Memory_Modify
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           
 10593                           ;psect for function _Flash_Memory_Read
 10594  1149                     _Flash_Memory_Read:	
 10595                           
 10596                           ;incstack = 0
 10597                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10598                           ;Flash_Memory_Read@address stored from wreg
 10599  1149  0020               	movlb	0	; select bank0
 10600  114A  00A2               	movwf	Flash_Memory_Read@address
 10601                           
 10602                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 10603  114B  01A1               	clrf	Flash_Memory_Read@i
 10604  114C  01A3               	clrf	Flash_Memory_Read@ret
 10605                           
 10606                           ;MCU_B1.c: 929: PMADRH = 0x30;
 10607  114D  3030               	movlw	48
 10608  114E  0023               	movlb	3	; select bank3
 10609  114F  0092               	movwf	18	;volatile
 10610                           
 10611                           ;MCU_B1.c: 930: PMADRL = address;
 10612  1150  0020               	movlb	0	; select bank0
 10613  1151  0822               	movf	Flash_Memory_Read@address,w
 10614  1152  0023               	movlb	3	; select bank3
 10615  1153  0091               	movwf	17	;volatile
 10616                           
 10617                           ;MCU_B1.c: 931: CFGS = 0;
 10618  1154  1315               	bcf	21,6	;volatile
 10619                           
 10620                           ;MCU_B1.c: 932: RD = 1;
 10621  1155  1415               	bsf	21,0	;volatile
 10622                           
 10623                           ;MCU_B1.c: 933: i = PMDATH;
 10624  1156  0814               	movf	20,w	;volatile
 10625  1157  0020               	movlb	0	; select bank0
 10626  1158  00A0               	movwf	??_Flash_Memory_Read
 10627  1159  0820               	movf	??_Flash_Memory_Read,w
 10628  115A  00A1               	movwf	Flash_Memory_Read@i
 10629                           
 10630                           ;MCU_B1.c: 934: ret = PMDATL;
 10631  115B  0023               	movlb	3	; select bank3
 10632  115C  0813               	movf	19,w	;volatile
 10633  115D  0020               	movlb	0	; select bank0
 10634  115E  00A0               	movwf	??_Flash_Memory_Read
 10635  115F  0820               	movf	??_Flash_Memory_Read,w
 10636  1160  00A3               	movwf	Flash_Memory_Read@ret
 10637                           
 10638                           ;MCU_B1.c: 935: return ret;
 10639  1161  0823               	movf	Flash_Memory_Read@ret,w
 10640  1162  0008               	return
 10641  1163                     __end_of_Flash_Memory_Read:	
 10642                           
 10643                           	psect	text58
 10644  1F1C                     __ptext58:	
 10645 ;; *************** function _DimmerLights_Main *****************
 10646 ;; Defined at:
 10647 ;;		line 418 in file "../src/Dimmer_B1.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;		None
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;		None
 10652 ;; Return value:  Size  Location     Type
 10653 ;;		None               void
 10654 ;; Registers used:
 10655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;Total ram usage:        0 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:   11
 10668 ;; This function calls:
 10669 ;;		_DimmerLights_Close
 10670 ;;		_setDimmerLights_Main
 10671 ;; This function is called by:
 10672 ;;		_main
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function _DimmerLights_Main
 10678  1F1C                     _DimmerLights_Main:	
 10679                           
 10680                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 10681                           
 10682                           ;incstack = 0
 10683                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10684  1F1C  3001               	movlw	1
 10685  1F1D  318E  261A  319F   	fcall	_setDimmerLights_Main
 10686                           
 10687                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 10688  1F20  3002               	movlw	2
 10689  1F21  318E  261A  319F   	fcall	_setDimmerLights_Main
 10690                           
 10691                           ;Dimmer_B1.c: 429: setDimmerLights_Main(3);
 10692  1F24  3003               	movlw	3
 10693  1F25  318E  261A  319F   	fcall	_setDimmerLights_Main
 10694                           
 10695                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 10696  1F28  3190  2082         	fcall	_DimmerLights_Close
 10697  1F2A  0008               	return
 10698  1F2B                     __end_of_DimmerLights_Main:	
 10699                           
 10700                           	psect	text59
 10701  0E1A                     __ptext59:	
 10702 ;; *************** function _setDimmerLights_Main *****************
 10703 ;; Defined at:
 10704 ;;		line 436 in file "../src/Dimmer_B1.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  lights          1    wreg     unsigned char 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  lights          1   74[BANK0 ] unsigned char 
 10709 ;;  clear           1   73[BANK0 ] unsigned char 
 10710 ;; Return value:  Size  Location     Type
 10711 ;;		None               void
 10712 ;; Registers used:
 10713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        6 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:   10
 10726 ;; This function calls:
 10727 ;;		_DimmerLightsPointSelect
 10728 ;;		_setBuz
 10729 ;;		_setDimmerLights
 10730 ;;		_setDimmerLights_Adj
 10731 ;; This function is called by:
 10732 ;;		_DimmerLights_Main
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _setDimmerLights_Main
 10738  0E1A                     _setDimmerLights_Main:	
 10739                           
 10740                           ;incstack = 0
 10741                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10742                           ;setDimmerLights_Main@lights stored from wreg
 10743  0E1A  0020               	movlb	0	; select bank0
 10744  0E1B  00EA               	movwf	setDimmerLights_Main@lights
 10745                           
 10746                           ;Dimmer_B1.c: 437: char clear = 1;
 10747  0E1C  01E9               	clrf	setDimmerLights_Main@clear
 10748  0E1D  0AE9               	incf	setDimmerLights_Main@clear,f
 10749                           
 10750                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 10751  0E1E  086A               	movf	setDimmerLights_Main@lights,w
 10752  0E1F  3191  2163  318E   	fcall	_DimmerLightsPointSelect
 10753                           
 10754                           ;Dimmer_B1.c: 441: if (lights == 1) {
 10755  0E22  0020               	movlb	0	; select bank0
 10756  0E23  086A               	movf	setDimmerLights_Main@lights,w
 10757  0E24  3A01               	xorlw	1
 10758  0E25  1D03               	skipz
 10759  0E26  2E34               	goto	l9155
 10760                           
 10761                           ;Dimmer_B1.c: 442: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10762  0E27  01E6               	clrf	_setDimmerLights_Main$2350
 10763  0E28  0022               	movlb	2	; select bank2
 10764  0E29  1D56               	btfss	(_DimmerLights2^(0+256)+9),2
 10765  0E2A  2E31               	goto	l9153
 10766  0E2B  0023               	movlb	3	; select bank3
 10767  0E2C  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10768  0E2D  2E31               	goto	l9153
 10769  0E2E  0020               	movlb	0	; select bank0
 10770  0E2F  01E6               	clrf	_setDimmerLights_Main$2350
 10771  0E30  0AE6               	incf	_setDimmerLights_Main$2350,f
 10772  0E31                     l9153:	
 10773  0E31  0020               	movlb	0	; select bank0
 10774  0E32  0866               	movf	_setDimmerLights_Main$2350,w
 10775  0E33  2E53               	goto	L9
 10776  0E34                     l9155:	
 10777                           ;Dimmer_B1.c: 443: } else if (lights == 2) {
 10778                           
 10779  0E34  086A               	movf	setDimmerLights_Main@lights,w
 10780  0E35  3A02               	xorlw	2
 10781  0E36  1D03               	skipz
 10782  0E37  2E45               	goto	l9167
 10783                           
 10784                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10785  0E38  01E7               	clrf	_setDimmerLights_Main$2358
 10786  0E39  0022               	movlb	2	; select bank2
 10787  0E3A  1D47               	btfss	(_DimmerLights1^(0+256)+9),2
 10788  0E3B  2E42               	goto	l9165
 10789  0E3C  0023               	movlb	3	; select bank3
 10790  0E3D  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10791  0E3E  2E42               	goto	l9165
 10792  0E3F  0020               	movlb	0	; select bank0
 10793  0E40  01E7               	clrf	_setDimmerLights_Main$2358
 10794  0E41  0AE7               	incf	_setDimmerLights_Main$2358,f
 10795  0E42                     l9165:	
 10796  0E42  0020               	movlb	0	; select bank0
 10797  0E43  0867               	movf	_setDimmerLights_Main$2358,w
 10798  0E44  2E53               	goto	L9
 10799  0E45                     l9167:	
 10800                           ;Dimmer_B1.c: 445: } else if (lights == 3) {
 10801                           
 10802  0E45  086A               	movf	setDimmerLights_Main@lights,w
 10803  0E46  3A03               	xorlw	3
 10804  0E47  1D03               	skipz
 10805  0E48  2E56               	goto	l9179
 10806                           
 10807                           ;Dimmer_B1.c: 446: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10808  0E49  01E8               	clrf	_setDimmerLights_Main$2359
 10809  0E4A  0022               	movlb	2	; select bank2
 10810  0E4B  1947               	btfsc	(_DimmerLights1^(0+256)+9),2
 10811  0E4C  1D56               	btfss	(_DimmerLights2^(0+256)+9),2
 10812  0E4D  2E51               	goto	l9177
 10813  0E4E  0020               	movlb	0	; select bank0
 10814  0E4F  01E8               	clrf	_setDimmerLights_Main$2359
 10815  0E50  0AE8               	incf	_setDimmerLights_Main$2359,f
 10816  0E51                     l9177:	
 10817  0E51  0020               	movlb	0	; select bank0
 10818  0E52  0868               	movf	_setDimmerLights_Main$2359,w
 10819  0E53                     L9:	
 10820  0E53  00E5               	movwf	??_setDimmerLights_Main
 10821  0E54  0865               	movf	??_setDimmerLights_Main,w
 10822  0E55  00E9               	movwf	setDimmerLights_Main@clear
 10823  0E56                     l9179:	
 10824                           
 10825                           ;Dimmer_B1.c: 447: }
 10826                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 10827  0E56  086B               	movf	_DimmerLights,w
 10828  0E57  3E08               	addlw	8
 10829  0E58  0086               	movwf	6
 10830  0E59  3001               	movlw	1	; select bank2/3
 10831  0E5A  0087               	movwf	7
 10832  0E5B  1D01               	btfss	1,2
 10833  0E5C  2E7A               	goto	l9189
 10834                           
 10835                           ;Dimmer_B1.c: 459: if (clear == 1) {
 10836  0E5D  0869               	movf	setDimmerLights_Main@clear,w
 10837  0E5E  3A01               	xorlw	1
 10838  0E5F  1D03               	skipz
 10839  0E60  0008               	return
 10840                           
 10841                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 10842  0E61  086B               	movf	_DimmerLights,w
 10843  0E62  3E08               	addlw	8
 10844  0E63  0086               	movwf	6
 10845  0E64  3001               	movlw	1	; select bank2/3
 10846  0E65  0087               	movwf	7
 10847  0E66  1101               	bcf	1,2
 10848                           
 10849                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 10850  0E67  086B               	movf	_DimmerLights,w
 10851  0E68  3E08               	addlw	8
 10852  0E69  0086               	movwf	6
 10853  0E6A  3001               	movlw	1	; select bank2/3
 10854  0E6B  0087               	movwf	7
 10855  0E6C  1C81               	btfss	1,1
 10856  0E6D  2E74               	goto	l9187
 10857                           
 10858                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 10859  0E6E  01A3               	clrf	setDimmerLights@status
 10860  0E6F  0AA3               	incf	setDimmerLights@status,f
 10861  0E70  086A               	movf	setDimmerLights_Main@lights,w
 10862  0E71  318C  248B         	fcall	_setDimmerLights
 10863                           
 10864                           ;Dimmer_B1.c: 463: } else {
 10865  0E73  0008               	return
 10866  0E74                     l9187:	
 10867                           
 10868                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 10869  0E74  0020               	movlb	0	; select bank0
 10870  0E75  01A3               	clrf	setDimmerLights@status
 10871  0E76  086A               	movf	setDimmerLights_Main@lights,w
 10872  0E77  318C  248B         	fcall	_setDimmerLights
 10873                           
 10874                           ;Dimmer_B1.c: 465: }
 10875                           ;Dimmer_B1.c: 469: }
 10876                           ;Dimmer_B1.c: 470: } else {
 10877  0E79  0008               	return
 10878  0E7A                     l9189:	
 10879                           
 10880                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 10881  0E7A  0020               	movlb	0	; select bank0
 10882  0E7B  086B               	movf	_DimmerLights,w
 10883  0E7C  3E08               	addlw	8
 10884  0E7D  0086               	movwf	6
 10885  0E7E  3001               	movlw	1	; select bank2/3
 10886  0E7F  0087               	movwf	7
 10887  0E80  1E01               	btfss	1,4
 10888  0E81  0008               	return
 10889                           
 10890                           ;Dimmer_B1.c: 472: if (clear == 1) {
 10891  0E82  0869               	movf	setDimmerLights_Main@clear,w
 10892  0E83  3A01               	xorlw	1
 10893  0E84  1D03               	skipz
 10894  0E85  0008               	return
 10895                           
 10896                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 10897  0E86  086B               	movf	_DimmerLights,w
 10898  0E87  3E08               	addlw	8
 10899  0E88  0086               	movwf	6
 10900  0E89  3001               	movlw	1	; select bank2/3
 10901  0E8A  0087               	movwf	7
 10902  0E8B  1201               	bcf	1,4
 10903                           
 10904                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 10905  0E8C  086B               	movf	_DimmerLights,w
 10906  0E8D  3E08               	addlw	8
 10907  0E8E  0086               	movwf	6
 10908  0E8F  3001               	movlw	1	; select bank2/3
 10909  0E90  0087               	movwf	7
 10910  0E91  1D81               	btfss	1,3
 10911  0E92  2EA2               	goto	l9199
 10912                           
 10913                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 10914  0E93  01E2               	clrf	setDimmerLights_Adj@status
 10915  0E94  0AE2               	incf	setDimmerLights_Adj@status,f
 10916  0E95  086A               	movf	setDimmerLights_Main@lights,w
 10917  0E96  3195  251D  318E   	fcall	_setDimmerLights_Adj
 10918                           
 10919                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 10920  0E99  3064               	movlw	100
 10921  0E9A  0020               	movlb	0	; select bank0
 10922  0E9B  00A9               	movwf	setBuz@time
 10923  0E9C  3000               	movlw	0
 10924  0E9D  00AA               	movwf	setBuz@time+1
 10925  0E9E  3001               	movlw	1
 10926  0E9F  3197  27A7         	fcall	_setBuz
 10927                           
 10928                           ;Dimmer_B1.c: 477: } else {
 10929  0EA1  0008               	return
 10930  0EA2                     l9199:	
 10931                           
 10932                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 10933  0EA2  0020               	movlb	0	; select bank0
 10934  0EA3  01E2               	clrf	setDimmerLights_Adj@status
 10935  0EA4  086A               	movf	setDimmerLights_Main@lights,w
 10936  0EA5  3195  251D         	fcall	_setDimmerLights_Adj
 10937  0EA7  0008               	return
 10938  0EA8                     __end_of_setDimmerLights_Main:	
 10939                           
 10940                           	psect	text60
 10941  151D                     __ptext60:	
 10942 ;; *************** function _setDimmerLights_Adj *****************
 10943 ;; Defined at:
 10944 ;;		line 657 in file "../src/Dimmer_B1.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  lights          1    wreg     unsigned char 
 10947 ;;  status          1   66[BANK0 ] unsigned char 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  lights          1   68[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;		None               void
 10952 ;; Registers used:
 10953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        3 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    9
 10966 ;; This function calls:
 10967 ;;		_DimmerLightsPointSelect
 10968 ;;		_setRF_DimmerLights
 10969 ;;		_setTxData
 10970 ;; This function is called by:
 10971 ;;		_setDimmerLights_Main
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _setDimmerLights_Adj
 10977  151D                     _setDimmerLights_Adj:	
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10981                           ;setDimmerLights_Adj@lights stored from wreg
 10982  151D  0020               	movlb	0	; select bank0
 10983  151E  00E4               	movwf	setDimmerLights_Adj@lights
 10984                           
 10985                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 10986  151F  0864               	movf	setDimmerLights_Adj@lights,w
 10987  1520  3191  2163  3195   	fcall	_DimmerLightsPointSelect
 10988                           
 10989                           ;Dimmer_B1.c: 659: if (status == 1) {
 10990  1523  0020               	movlb	0	; select bank0
 10991  1524  0862               	movf	setDimmerLights_Adj@status,w
 10992  1525  3A01               	xorlw	1
 10993  1526  1D03               	skipz
 10994  1527  2D33               	goto	l8763
 10995                           
 10996                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 10997  1528  086B               	movf	_DimmerLights,w
 10998  1529  0086               	movwf	6
 10999  152A  3001               	movlw	1	; select bank2/3
 11000  152B  0087               	movwf	7
 11001  152C  1581               	bsf	1,3
 11002                           
 11003                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 11004  152D  086B               	movf	_DimmerLights,w
 11005  152E  0086               	movwf	6
 11006  152F  3001               	movlw	1	; select bank2/3
 11007  1530  0087               	movwf	7
 11008  1531  1481               	bsf	1,1
 11009                           
 11010                           ;Dimmer_B1.c: 662: } else {
 11011  1532  0008               	return
 11012  1533                     l8763:	
 11013                           
 11014                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 11015  1533  086B               	movf	_DimmerLights,w
 11016  1534  0086               	movwf	6
 11017  1535  3001               	movlw	1	; select bank2/3
 11018  1536  0087               	movwf	7
 11019  1537  1D81               	btfss	1,3
 11020  1538  0008               	return
 11021                           
 11022                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 11023  1539  086B               	movf	_DimmerLights,w
 11024  153A  0086               	movwf	6
 11025  153B  3001               	movlw	1	; select bank2/3
 11026  153C  0087               	movwf	7
 11027  153D  1081               	bcf	1,1
 11028                           
 11029                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 11030  153E  086B               	movf	_DimmerLights,w
 11031  153F  0086               	movwf	6
 11032  1540  3001               	movlw	1	; select bank2/3
 11033  1541  0087               	movwf	7
 11034  1542  1181               	bcf	1,3
 11035                           
 11036                           ;Dimmer_B1.c: 667: ;;
 11037                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11038  1543  086B               	movf	_DimmerLights,w
 11039  1544  3E04               	addlw	4
 11040  1545  0086               	movwf	6
 11041  1546  3001               	movlw	1	; select bank2/3
 11042  1547  0087               	movwf	7
 11043  1548  0801               	movf	1,w
 11044  1549  00E3               	movwf	??_setDimmerLights_Adj
 11045  154A  086B               	movf	_DimmerLights,w
 11046  154B  3E05               	addlw	5
 11047  154C  0086               	movwf	6
 11048  154D  3001               	movlw	1	; select bank2/3
 11049  154E  0087               	movwf	7
 11050  154F  0863               	movf	??_setDimmerLights_Adj,w
 11051  1550  0081               	movwf	1
 11052                           
 11053                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 11054  1551  01DD               	clrf	setRF_DimmerLights@on
 11055  1552  0ADD               	incf	setRF_DimmerLights@on,f
 11056  1553  0864               	movf	setDimmerLights_Adj@lights,w
 11057  1554  318A  22CE  3195   	fcall	_setRF_DimmerLights
 11058                           
 11059                           ;Dimmer_B1.c: 677: setTxData();
 11060  1557  3185  25F8         	fcall	_setTxData
 11061  1559  0008               	return
 11062  155A                     __end_of_setDimmerLights_Adj:	
 11063                           
 11064                           	psect	text61
 11065  0C8B                     __ptext61:	
 11066 ;; *************** function _setDimmerLights *****************
 11067 ;; Defined at:
 11068 ;;		line 604 in file "../src/Dimmer_B1.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;  lights          1    wreg     unsigned char 
 11071 ;;  status          1    3[BANK0 ] unsigned char 
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;  lights          1    5[BANK0 ] unsigned char 
 11074 ;; Return value:  Size  Location     Type
 11075 ;;		None               void
 11076 ;; Registers used:
 11077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11083 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;Total ram usage:        3 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    7
 11090 ;; This function calls:
 11091 ;;		_DimmerLightsPointSelect
 11092 ;;		_setLED
 11093 ;;		_setMemory_GO
 11094 ;; This function is called by:
 11095 ;;		_setDimmerLights_Main
 11096 ;;		_setControl_Lights_Table
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           
 11101                           ;psect for function _setDimmerLights
 11102  0C8B                     _setDimmerLights:	
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11106                           ;setDimmerLights@lights stored from wreg
 11107  0C8B  0020               	movlb	0	; select bank0
 11108  0C8C  00A5               	movwf	setDimmerLights@lights
 11109                           
 11110                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 11111  0C8D  0825               	movf	setDimmerLights@lights,w
 11112  0C8E  3191  2163  318C   	fcall	_DimmerLightsPointSelect
 11113                           
 11114                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 11115  0C91  0020               	movlb	0	; select bank0
 11116  0C92  0825               	movf	setDimmerLights@lights,w
 11117  0C93  00A4               	movwf	??_setDimmerLights
 11118  0C94  0A73               	incf	_Dimmer,w
 11119  0C95  0086               	movwf	6
 11120  0C96  0187               	clrf	7
 11121  0C97  0824               	movf	??_setDimmerLights,w
 11122  0C98  0081               	movwf	1
 11123                           
 11124                           ;Dimmer_B1.c: 607: if (status == 1) {
 11125  0C99  0823               	movf	setDimmerLights@status,w
 11126  0C9A  3A01               	xorlw	1
 11127  0C9B  1D03               	skipz
 11128  0C9C  2CDD               	goto	l8439
 11129                           
 11130                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 11131  0C9D  086B               	movf	_DimmerLights,w
 11132  0C9E  0086               	movwf	6
 11133  0C9F  3001               	movlw	1	; select bank2/3
 11134  0CA0  0087               	movwf	7
 11135  0CA1  1681               	bsf	1,5
 11136                           
 11137                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 11138  0CA2  01A1               	clrf	setLED@command
 11139  0CA3  0825               	movf	setDimmerLights@lights,w
 11140  0CA4  318B  23A9  318C   	fcall	_setLED
 11141                           
 11142                           ;Dimmer_B1.c: 611: ;;
 11143                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 11144  0CA7  0020               	movlb	0	; select bank0
 11145  0CA8  086B               	movf	_DimmerLights,w
 11146  0CA9  0086               	movwf	6
 11147  0CAA  3001               	movlw	1	; select bank2/3
 11148  0CAB  0087               	movwf	7
 11149  0CAC  1481               	bsf	1,1
 11150                           
 11151                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 11152  0CAD  3007               	movlw	7
 11153  0CAE  00A4               	movwf	??_setDimmerLights
 11154  0CAF  086B               	movf	_DimmerLights,w
 11155  0CB0  3E02               	addlw	2
 11156  0CB1  0086               	movwf	6
 11157  0CB2  3001               	movlw	1	; select bank2/3
 11158  0CB3  0087               	movwf	7
 11159  0CB4  0824               	movf	??_setDimmerLights,w
 11160  0CB5  0081               	movwf	1
 11161                           
 11162                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 11163  0CB6  086B               	movf	_DimmerLights,w
 11164  0CB7  0086               	movwf	6
 11165  0CB8  3001               	movlw	1	; select bank2/3
 11166  0CB9  0087               	movwf	7
 11167  0CBA  1B01               	btfsc	1,6
 11168  0CBB  0008               	return
 11169                           
 11170                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 11171  0CBC  086B               	movf	_DimmerLights,w
 11172  0CBD  0086               	movwf	6
 11173  0CBE  3001               	movlw	1	; select bank2/3
 11174  0CBF  0087               	movwf	7
 11175  0CC0  1701               	bsf	1,6
 11176                           
 11177                           ;Dimmer_B1.c: 618: ;;
 11178                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 11179  0CC1  3000               	movlw	0
 11180  0CC2  3188  2000         	fcall	_setMemory_GO
 11181                           
 11182                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11183  0CC4  0020               	movlb	0	; select bank0
 11184  0CC5  086B               	movf	_DimmerLights,w
 11185  0CC6  3E05               	addlw	5
 11186  0CC7  0086               	movwf	6
 11187  0CC8  3001               	movlw	1	; select bank2/3
 11188  0CC9  0087               	movwf	7
 11189  0CCA  0801               	movf	1,w
 11190  0CCB  00A4               	movwf	??_setDimmerLights
 11191  0CCC  086B               	movf	_DimmerLights,w
 11192  0CCD  3E04               	addlw	4
 11193  0CCE  0086               	movwf	6
 11194  0CCF  3001               	movlw	1	; select bank2/3
 11195  0CD0  0087               	movwf	7
 11196  0CD1  0824               	movf	??_setDimmerLights,w
 11197  0CD2  0081               	movwf	1
 11198                           
 11199                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 11200  0CD3  3008               	movlw	8
 11201  0CD4  00A4               	movwf	??_setDimmerLights
 11202  0CD5  086B               	movf	_DimmerLights,w
 11203  0CD6  3E04               	addlw	4
 11204  0CD7  0086               	movwf	6
 11205  0CD8  3001               	movlw	1	; select bank2/3
 11206  0CD9  0087               	movwf	7
 11207  0CDA  0824               	movf	??_setDimmerLights,w
 11208  0CDB  0081               	movwf	1
 11209                           
 11210                           ;Dimmer_B1.c: 628: }
 11211                           ;Dimmer_B1.c: 629: } else {
 11212  0CDC  0008               	return
 11213  0CDD                     l8439:	
 11214                           
 11215                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 11216  0CDD  086B               	movf	_DimmerLights,w
 11217  0CDE  0086               	movwf	6
 11218  0CDF  3001               	movlw	1	; select bank2/3
 11219  0CE0  0087               	movwf	7
 11220  0CE1  1281               	bcf	1,5
 11221                           
 11222                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11223  0CE2  086B               	movf	_DimmerLights,w
 11224  0CE3  3E06               	addlw	6
 11225  0CE4  0086               	movwf	6
 11226  0CE5  3001               	movlw	1	; select bank2/3
 11227  0CE6  0087               	movwf	7
 11228  0CE7  0801               	movf	1,w
 11229  0CE8  00A4               	movwf	??_setDimmerLights
 11230  0CE9  086B               	movf	_DimmerLights,w
 11231  0CEA  3E04               	addlw	4
 11232  0CEB  0086               	movwf	6
 11233  0CEC  3001               	movlw	1	; select bank2/3
 11234  0CED  0087               	movwf	7
 11235  0CEE  0824               	movf	??_setDimmerLights,w
 11236  0CEF  0081               	movwf	1
 11237                           
 11238                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 11239  0CF0  086B               	movf	_DimmerLights,w
 11240  0CF1  0086               	movwf	6
 11241  0CF2  3001               	movlw	1	; select bank2/3
 11242  0CF3  0087               	movwf	7
 11243  0CF4  1481               	bsf	1,1
 11244                           
 11245                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 11246  0CF5  086B               	movf	_DimmerLights,w
 11247  0CF6  0086               	movwf	6
 11248  0CF7  3001               	movlw	1	; select bank2/3
 11249  0CF8  0087               	movwf	7
 11250  0CF9  1181               	bcf	1,3
 11251                           
 11252                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 11253  0CFA  086B               	movf	_DimmerLights,w
 11254  0CFB  0086               	movwf	6
 11255  0CFC  3001               	movlw	1	; select bank2/3
 11256  0CFD  0087               	movwf	7
 11257  0CFE  1201               	bcf	1,4
 11258                           
 11259                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 11260  0CFF  3007               	movlw	7
 11261  0D00  00A4               	movwf	??_setDimmerLights
 11262  0D01  086B               	movf	_DimmerLights,w
 11263  0D02  3E02               	addlw	2
 11264  0D03  0086               	movwf	6
 11265  0D04  3001               	movlw	1	; select bank2/3
 11266  0D05  0087               	movwf	7
 11267  0D06  0824               	movf	??_setDimmerLights,w
 11268  0D07  0081               	movwf	1
 11269  0D08  0008               	return
 11270  0D09                     __end_of_setDimmerLights:	
 11271                           
 11272                           	psect	text62
 11273  0BA9                     __ptext62:	
 11274 ;; *************** function _setLED *****************
 11275 ;; Defined at:
 11276 ;;		line 70 in file "../src/LED_B1.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  led             1    wreg     unsigned char 
 11279 ;;  command         1    1[BANK0 ] unsigned char 
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;  led             1    2[BANK0 ] unsigned char 
 11282 ;; Return value:  Size  Location     Type
 11283 ;;		None               void
 11284 ;; Registers used:
 11285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11286 ;; Tracked objects:
 11287 ;;		On entry : 0/0
 11288 ;;		On exit  : 0/0
 11289 ;;		Unchanged: 0/0
 11290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11291 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;Total ram usage:        2 bytes
 11296 ;; Hardware stack levels used:    1
 11297 ;; Hardware stack levels required when called:    6
 11298 ;; This function calls:
 11299 ;;		_LedPointSelect
 11300 ;; This function is called by:
 11301 ;;		_setDimmerLights
 11302 ;;		_setLED_Initialization
 11303 ;;		_setSw_Initialization
 11304 ;;		_setDimmerLights_ERROR
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           
 11309                           ;psect for function _setLED
 11310  0BA9                     _setLED:	
 11311                           
 11312                           ;incstack = 0
 11313                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11314                           ;setLED@led stored from wreg
 11315  0BA9  0020               	movlb	0	; select bank0
 11316  0BAA  00A2               	movwf	setLED@led
 11317                           
 11318                           ;LED_B1.c: 71: LedPointSelect(led);
 11319  0BAB  0822               	movf	setLED@led,w
 11320  0BAC  3193  2322  318B   	fcall	_LedPointSelect
 11321                           
 11322                           ;LED_B1.c: 72: if (command == 0) {
 11323  0BAF  0020               	movlb	0	; select bank0
 11324  0BB0  08A1               	movf	setLED@command,f
 11325  0BB1  1D03               	skipz
 11326  0BB2  2BCB               	goto	l8303
 11327                           
 11328                           ;LED_B1.c: 74: if (led == 1) {
 11329  0BB3  0822               	movf	setLED@led,w
 11330  0BB4  3A01               	xorlw	1
 11331  0BB5  1D03               	skipz
 11332  0BB6  2BB9               	goto	l8291
 11333                           
 11334                           ;LED_B1.c: 78: RC7 = 1;
 11335  0BB7  178E               	bsf	14,7	;volatile
 11336                           
 11337                           ;LED_B1.c: 80: }
 11338  0BB8  0008               	return
 11339  0BB9                     l8291:	
 11340                           
 11341                           ;LED_B1.c: 83: else if (led == 2) {
 11342  0BB9  0822               	movf	setLED@led,w
 11343  0BBA  3A02               	xorlw	2
 11344  0BBB  1D03               	skipz
 11345  0BBC  2BBF               	goto	l8295
 11346                           
 11347                           ;LED_B1.c: 87: RA3 = 1;
 11348  0BBD  158C               	bsf	12,3	;volatile
 11349                           
 11350                           ;LED_B1.c: 89: }
 11351  0BBE  0008               	return
 11352  0BBF                     l8295:	
 11353                           
 11354                           ;LED_B1.c: 92: else if (led == 3) {
 11355  0BBF  0822               	movf	setLED@led,w
 11356  0BC0  3A03               	xorlw	3
 11357  0BC1  1D03               	skipz
 11358  0BC2  2BC5               	goto	l8299
 11359                           
 11360                           ;LED_B1.c: 96: RC6 = 1;
 11361  0BC3  170E               	bsf	14,6	;volatile
 11362                           
 11363                           ;LED_B1.c: 98: }
 11364  0BC4  0008               	return
 11365  0BC5                     l8299:	
 11366                           
 11367                           ;LED_B1.c: 101: else if (led == 99) {
 11368  0BC5  0822               	movf	setLED@led,w
 11369  0BC6  3A63               	xorlw	99
 11370  0BC7  1D03               	skipz
 11371  0BC8  0008               	return
 11372                           
 11373                           ;LED_B1.c: 105: RB5 = 1;
 11374  0BC9  168D               	bsf	13,5	;volatile
 11375                           
 11376                           ;LED_B1.c: 107: }
 11377                           ;LED_B1.c: 109: } else if (command == 1) {
 11378  0BCA  0008               	return
 11379  0BCB                     l8303:	
 11380  0BCB  0821               	movf	setLED@command,w
 11381  0BCC  3A01               	xorlw	1
 11382  0BCD  1D03               	skipz
 11383  0BCE  2BE7               	goto	l8321
 11384                           
 11385                           ;LED_B1.c: 111: if (led == 1) {
 11386  0BCF  0822               	movf	setLED@led,w
 11387  0BD0  3A01               	xorlw	1
 11388  0BD1  1D03               	skipz
 11389  0BD2  2BD5               	goto	l8309
 11390                           
 11391                           ;LED_B1.c: 115: RC7 = 0;
 11392  0BD3  138E               	bcf	14,7	;volatile
 11393                           
 11394                           ;LED_B1.c: 117: }
 11395  0BD4  0008               	return
 11396  0BD5                     l8309:	
 11397                           
 11398                           ;LED_B1.c: 120: else if (led == 2) {
 11399  0BD5  0822               	movf	setLED@led,w
 11400  0BD6  3A02               	xorlw	2
 11401  0BD7  1D03               	skipz
 11402  0BD8  2BDB               	goto	l8313
 11403                           
 11404                           ;LED_B1.c: 124: RA3 = 0;
 11405  0BD9  118C               	bcf	12,3	;volatile
 11406                           
 11407                           ;LED_B1.c: 126: }
 11408  0BDA  0008               	return
 11409  0BDB                     l8313:	
 11410                           
 11411                           ;LED_B1.c: 129: else if (led == 3) {
 11412  0BDB  0822               	movf	setLED@led,w
 11413  0BDC  3A03               	xorlw	3
 11414  0BDD  1D03               	skipz
 11415  0BDE  2BE1               	goto	l8317
 11416                           
 11417                           ;LED_B1.c: 133: RC6 = 0;
 11418  0BDF  130E               	bcf	14,6	;volatile
 11419                           
 11420                           ;LED_B1.c: 135: }
 11421  0BE0  0008               	return
 11422  0BE1                     l8317:	
 11423                           
 11424                           ;LED_B1.c: 138: else if (led == 99) {
 11425  0BE1  0822               	movf	setLED@led,w
 11426  0BE2  3A63               	xorlw	99
 11427  0BE3  1D03               	skipz
 11428  0BE4  0008               	return
 11429                           
 11430                           ;LED_B1.c: 142: RB5 = 0;
 11431  0BE5  128D               	bcf	13,5	;volatile
 11432                           
 11433                           ;LED_B1.c: 144: }
 11434                           ;LED_B1.c: 146: } else if (command == 10) {
 11435  0BE6  0008               	return
 11436  0BE7                     l8321:	
 11437  0BE7  0821               	movf	setLED@command,w
 11438  0BE8  3A0A               	xorlw	10
 11439  0BE9  1D03               	skipz
 11440  0BEA  2C10               	goto	l8341
 11441                           
 11442                           ;LED_B1.c: 147: LED->GO = 0;
 11443  0BEB  0870               	movf	_LED,w
 11444  0BEC  0086               	movwf	6
 11445  0BED  0871               	movf	_LED+1,w
 11446  0BEE  0087               	movwf	7
 11447  0BEF  1081               	bcf	1,1
 11448                           
 11449                           ;LED_B1.c: 148: LED->Time = 0;
 11450  0BF0  0870               	movf	_LED,w
 11451  0BF1  0086               	movwf	6
 11452  0BF2  0871               	movf	_LED+1,w
 11453  0BF3  0087               	movwf	7
 11454  0BF4  3141               	addfsr 1,1
 11455  0BF5  3000               	movlw	0
 11456  0BF6  3FC0               	movwi [0]fsr1
 11457  0BF7  3FC1               	movwi [1]fsr1
 11458                           
 11459                           ;LED_B1.c: 150: if (led == 1) {
 11460  0BF8  0822               	movf	setLED@led,w
 11461  0BF9  3A01               	xorlw	1
 11462  0BFA  1D03               	skipz
 11463  0BFB  2BFE               	goto	l8329
 11464                           
 11465                           ;LED_B1.c: 154: RC7 = 1;
 11466  0BFC  178E               	bsf	14,7	;volatile
 11467                           
 11468                           ;LED_B1.c: 156: }
 11469  0BFD  0008               	return
 11470  0BFE                     l8329:	
 11471                           
 11472                           ;LED_B1.c: 159: else if (led == 2) {
 11473  0BFE  0822               	movf	setLED@led,w
 11474  0BFF  3A02               	xorlw	2
 11475  0C00  1D03               	skipz
 11476  0C01  2C04               	goto	l8333
 11477                           
 11478                           ;LED_B1.c: 163: RA3 = 1;
 11479  0C02  158C               	bsf	12,3	;volatile
 11480                           
 11481                           ;LED_B1.c: 165: }
 11482  0C03  0008               	return
 11483  0C04                     l8333:	
 11484                           
 11485                           ;LED_B1.c: 168: else if (led == 3) {
 11486  0C04  0822               	movf	setLED@led,w
 11487  0C05  3A03               	xorlw	3
 11488  0C06  1D03               	skipz
 11489  0C07  2C0A               	goto	l8337
 11490                           
 11491                           ;LED_B1.c: 172: RC6 = 1;
 11492  0C08  170E               	bsf	14,6	;volatile
 11493                           
 11494                           ;LED_B1.c: 174: }
 11495  0C09  0008               	return
 11496  0C0A                     l8337:	
 11497                           
 11498                           ;LED_B1.c: 177: else if (led == 99) {
 11499  0C0A  0822               	movf	setLED@led,w
 11500  0C0B  3A63               	xorlw	99
 11501  0C0C  1D03               	skipz
 11502  0C0D  0008               	return
 11503                           
 11504                           ;LED_B1.c: 181: RB5 = 1;
 11505  0C0E  168D               	bsf	13,5	;volatile
 11506                           
 11507                           ;LED_B1.c: 183: }
 11508                           ;LED_B1.c: 185: } else if (command == 11) {
 11509  0C0F  0008               	return
 11510  0C10                     l8341:	
 11511  0C10  0821               	movf	setLED@command,w
 11512  0C11  3A0B               	xorlw	11
 11513  0C12  1D03               	skipz
 11514  0C13  0008               	return
 11515                           
 11516                           ;LED_B1.c: 186: LED->GO = 1;
 11517  0C14  0870               	movf	_LED,w
 11518  0C15  0086               	movwf	6
 11519  0C16  0871               	movf	_LED+1,w
 11520  0C17  0087               	movwf	7
 11521  0C18  1481               	bsf	1,1
 11522  0C19  0008               	return
 11523  0C1A                     __end_of_setLED:	
 11524                           
 11525                           	psect	text63
 11526  1322                     __ptext63:	
 11527 ;; *************** function _LedPointSelect *****************
 11528 ;; Defined at:
 11529 ;;		line 7 in file "../src/LED_B1.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;  led             1    wreg     unsigned char 
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;  led             1    0[BANK0 ] unsigned char 
 11534 ;; Return value:  Size  Location     Type
 11535 ;;		None               void
 11536 ;; Registers used:
 11537 ;;		wreg, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;Total ram usage:        1 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; Hardware stack levels required when called:    5
 11550 ;; This function calls:
 11551 ;;		Nothing
 11552 ;; This function is called by:
 11553 ;;		_setLED_Initialization
 11554 ;;		_setLED
 11555 ;;		_setLED_Main
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           
 11560                           ;psect for function _LedPointSelect
 11561  1322                     _LedPointSelect:	
 11562                           
 11563                           ;incstack = 0
 11564                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11565                           ;LedPointSelect@led stored from wreg
 11566  1322  0020               	movlb	0	; select bank0
 11567  1323  00A0               	movwf	LedPointSelect@led
 11568                           
 11569                           ;LED_B1.c: 9: if (led == 1) {
 11570  1324  0820               	movf	LedPointSelect@led,w
 11571  1325  3A01               	xorlw	1
 11572  1326  1D03               	skipz
 11573  1327  2B2D               	goto	l8081
 11574                           
 11575                           ;LED_B1.c: 10: LED = &VarLED1;
 11576  1328  30DF               	movlw	low _VarLED1
 11577  1329  00F0               	movwf	_LED
 11578  132A  3000               	movlw	high _VarLED1
 11579  132B  00F1               	movwf	_LED+1
 11580                           
 11581                           ;LED_B1.c: 11: }
 11582  132C  0008               	return
 11583  132D                     l8081:	
 11584                           
 11585                           ;LED_B1.c: 14: else if (led == 2) {
 11586  132D  0820               	movf	LedPointSelect@led,w
 11587  132E  3A02               	xorlw	2
 11588  132F  1D03               	skipz
 11589  1330  2B36               	goto	l8085
 11590                           
 11591                           ;LED_B1.c: 15: LED = &VarLED2;
 11592  1331  3065               	movlw	low _VarLED2
 11593  1332  00F0               	movwf	_LED
 11594  1333  3001               	movlw	high _VarLED2
 11595  1334  00F1               	movwf	_LED+1
 11596                           
 11597                           ;LED_B1.c: 16: }
 11598  1335  0008               	return
 11599  1336                     l8085:	
 11600                           
 11601                           ;LED_B1.c: 19: else if (led == 3) {
 11602  1336  0820               	movf	LedPointSelect@led,w
 11603  1337  3A03               	xorlw	3
 11604  1338  1D03               	skipz
 11605  1339  2B3F               	goto	l8089
 11606                           
 11607                           ;LED_B1.c: 20: LED = &VarLED3;
 11608  133A  3069               	movlw	low _VarLED3
 11609  133B  00F0               	movwf	_LED
 11610  133C  3001               	movlw	high _VarLED3
 11611  133D  00F1               	movwf	_LED+1
 11612                           
 11613                           ;LED_B1.c: 21: }
 11614  133E  0008               	return
 11615  133F                     l8089:	
 11616                           
 11617                           ;LED_B1.c: 24: else if (led == 99) {
 11618  133F  0820               	movf	LedPointSelect@led,w
 11619  1340  3A63               	xorlw	99
 11620  1341  1D03               	skipz
 11621  1342  0008               	return
 11622                           
 11623                           ;LED_B1.c: 25: LED = &VarErrLED;
 11624  1343  30DB               	movlw	low _VarErrLED
 11625  1344  00F0               	movwf	_LED
 11626  1345  3000               	movlw	high _VarErrLED
 11627  1346  00F1               	movwf	_LED+1
 11628  1347  0008               	return
 11629  1348                     __end_of_LedPointSelect:	
 11630                           
 11631                           	psect	text64
 11632  1082                     __ptext64:	
 11633 ;; *************** function _DimmerLights_Close *****************
 11634 ;; Defined at:
 11635 ;;		line 407 in file "../src/Dimmer_B1.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;		None
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;		None
 11640 ;; Return value:  Size  Location     Type
 11641 ;;		None               void
 11642 ;; Registers used:
 11643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;Total ram usage:        0 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:    6
 11656 ;; This function calls:
 11657 ;;		_getDimmerLights_StatusFlag
 11658 ;;		_setMemory_GO
 11659 ;; This function is called by:
 11660 ;;		_DimmerLights_Main
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           
 11665                           ;psect for function _DimmerLights_Close
 11666  1082                     _DimmerLights_Close:	
 11667                           
 11668                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11672  1082  0873               	movf	_Dimmer,w
 11673  1083  0086               	movwf	6
 11674  1084  0187               	clrf	7
 11675  1085  1C01               	btfss	1,0
 11676  1086  0008               	return
 11677                           
 11678                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 11679  1087  0873               	movf	_Dimmer,w
 11680  1088  0086               	movwf	6
 11681  1089  0187               	clrf	7
 11682  108A  1001               	bcf	1,0
 11683                           
 11684                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 11685  108B  3190  20A9  3190   	fcall	_getDimmerLights_StatusFlag
 11686  108E  3800               	iorlw	0
 11687  108F  1D03               	skipz
 11688  1090  0008               	return
 11689                           
 11690                           ;Dimmer_B1.c: 411: ;;
 11691                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 11692  1091  3001               	movlw	1
 11693  1092  3188  2000         	fcall	_setMemory_GO
 11694  1094  0008               	return
 11695  1095                     __end_of_DimmerLights_Close:	
 11696                           
 11697                           	psect	text65
 11698  0800                     __ptext65:	
 11699 ;; *************** function _setMemory_GO *****************
 11700 ;; Defined at:
 11701 ;;		line 995 in file "../src/MCU_B1.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  command         1    wreg     unsigned char 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  command         1    2[BANK0 ] unsigned char 
 11706 ;; Return value:  Size  Location     Type
 11707 ;;		None               void
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;Total ram usage:        3 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    5
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_DimmerLights_Close
 11726 ;;		_setDimmerLights
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           
 11731                           ;psect for function _setMemory_GO
 11732  0800                     _setMemory_GO:	
 11733                           
 11734                           ;incstack = 0
 11735                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11736                           ;setMemory_GO@command stored from wreg
 11737  0800  0020               	movlb	0	; select bank0
 11738  0801  00A2               	movwf	setMemory_GO@command
 11739                           
 11740                           ;MCU_B1.c: 996: Memory.GO = command;
 11741  0802  0822               	movf	setMemory_GO@command,w
 11742  0803  0023               	movlb	3	; select bank3
 11743  0804  10C4               	bcf	(_Memory^(0+384)+36),1
 11744  0805  1D03               	skipz
 11745  0806  14C4               	bsf	(_Memory^(0+384)+36),1
 11746                           
 11747                           ;MCU_B1.c: 997: if (command == 0) {
 11748  0807  0020               	movlb	0	; select bank0
 11749  0808  08A2               	movf	setMemory_GO@command,f
 11750  0809  1D03               	skipz
 11751  080A  0008               	return
 11752                           
 11753                           ;MCU_B1.c: 998: Memory.Time = command;
 11754  080B  0822               	movf	setMemory_GO@command,w
 11755  080C  00A0               	movwf	??_setMemory_GO
 11756  080D  01A1               	clrf	??_setMemory_GO+1
 11757  080E  0820               	movf	??_setMemory_GO,w
 11758  080F  0023               	movlb	3	; select bank3
 11759  0810  00C2               	movwf	(_Memory^(0+384)+34)
 11760  0811  0020               	movlb	0	; select bank0
 11761  0812  0821               	movf	??_setMemory_GO+1,w
 11762  0813  0023               	movlb	3	; select bank3
 11763  0814  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11764  0815  0008               	return
 11765  0816                     __end_of_setMemory_GO:	
 11766                           
 11767                           	psect	text66
 11768  10A9                     __ptext66:	
 11769 ;; *************** function _getDimmerLights_StatusFlag *****************
 11770 ;; Defined at:
 11771 ;;		line 486 in file "../src/Dimmer_B1.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;  Status          1    1[BANK0 ] unsigned char 
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      unsigned char 
 11778 ;; Registers used:
 11779 ;;		wreg, status,2
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;Total ram usage:        3 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    5
 11792 ;; This function calls:
 11793 ;;		Nothing
 11794 ;; This function is called by:
 11795 ;;		_DimmerLights_Close
 11796 ;;		_DimmerLights_Exceptions
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           
 11801                           ;psect for function _getDimmerLights_StatusFlag
 11802  10A9                     _getDimmerLights_StatusFlag:	
 11803                           
 11804                           ;Dimmer_B1.c: 487: char Status = 0;
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11808  10A9  0020               	movlb	0	; select bank0
 11809  10AA  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11810                           
 11811                           ;Dimmer_B1.c: 490: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11812  10AB  01A2               	clrf	_getDimmerLights_StatusFlag$2394
 11813  10AC  0AA2               	incf	_getDimmerLights_StatusFlag$2394,f
 11814  10AD  0022               	movlb	2	; select bank2
 11815  10AE  1F3E               	btfss	_DimmerLights1^(0+256),6
 11816  10AF  1B4D               	btfsc	_DimmerLights2^(0+256),6
 11817  10B0  28B6               	goto	l8751
 11818  10B1  0023               	movlb	3	; select bank3
 11819  10B2  1B45               	btfsc	_DimmerLights3^(0+384),6
 11820  10B3  28B6               	goto	l8751
 11821  10B4  0020               	movlb	0	; select bank0
 11822  10B5  01A2               	clrf	_getDimmerLights_StatusFlag$2394
 11823  10B6                     l8751:	
 11824  10B6  0020               	movlb	0	; select bank0
 11825  10B7  0822               	movf	_getDimmerLights_StatusFlag$2394,w
 11826  10B8  00A0               	movwf	??_getDimmerLights_StatusFlag
 11827  10B9  0820               	movf	??_getDimmerLights_StatusFlag,w
 11828  10BA  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11829                           
 11830                           ;Dimmer_B1.c: 501: return Status;
 11831  10BB  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11832  10BC  0008               	return
 11833  10BD                     __end_of_getDimmerLights_StatusFlag:	
 11834                           
 11835                           	psect	text67
 11836  1274                     __ptext67:	
 11837 ;; *************** function _DimmerLights_Initialization *****************
 11838 ;; Defined at:
 11839 ;;		line 345 in file "../src/Dimmer_B1.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;		None               void
 11846 ;; Registers used:
 11847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;Total ram usage:        1 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    7
 11860 ;; This function calls:
 11861 ;;		_Dimmer_Initialization
 11862 ;;		_setDimmerLights_Initialization
 11863 ;; This function is called by:
 11864 ;;		_main
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           
 11869                           ;psect for function _DimmerLights_Initialization
 11870  1274                     _DimmerLights_Initialization:	
 11871                           
 11872                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 11873                           
 11874                           ;incstack = 0
 11875                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11876  1274  303E               	movlw	_DimmerLights1& (0+255)
 11877  1275  0020               	movlb	0	; select bank0
 11878  1276  00A4               	movwf	??_DimmerLights_Initialization
 11879  1277  0824               	movf	??_DimmerLights_Initialization,w
 11880  1278  0021               	movlb	1	; select bank1
 11881  1279  00D0               	movwf	_DimmerLights11^(0+128)
 11882                           
 11883                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 11884  127A  3001               	movlw	1
 11885  127B  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11886                           
 11887                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 11888  127E  304D               	movlw	_DimmerLights2& (0+255)
 11889  127F  0020               	movlb	0	; select bank0
 11890  1280  00A4               	movwf	??_DimmerLights_Initialization
 11891  1281  0824               	movf	??_DimmerLights_Initialization,w
 11892  1282  0021               	movlb	1	; select bank1
 11893  1283  00D1               	movwf	_DimmerLights22^(0+128)
 11894                           
 11895                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 11896  1284  3002               	movlw	2
 11897  1285  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11898                           
 11899                           ;Dimmer_B1.c: 358: DimmerLights33 = &DimmerLights3;
 11900  1288  30C5               	movlw	_DimmerLights3& (0+255)
 11901  1289  0020               	movlb	0	; select bank0
 11902  128A  00A4               	movwf	??_DimmerLights_Initialization
 11903  128B  0824               	movf	??_DimmerLights_Initialization,w
 11904  128C  0021               	movlb	1	; select bank1
 11905  128D  00D2               	movwf	_DimmerLights33^(0+128)
 11906                           
 11907                           ;Dimmer_B1.c: 359: setDimmerLights_Initialization(3);
 11908  128E  3003               	movlw	3
 11909  128F  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11910                           
 11911                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 11912  1292  319E  263F         	fcall	_Dimmer_Initialization
 11913  1294  0008               	return
 11914  1295                     __end_of_DimmerLights_Initialization:	
 11915                           
 11916                           	psect	text68
 11917  13F1                     __ptext68:	
 11918 ;; *************** function _setDimmerLights_Initialization *****************
 11919 ;; Defined at:
 11920 ;;		line 368 in file "../src/Dimmer_B1.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;  lights          1    wreg     unsigned char 
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;  lights          1    3[BANK0 ] unsigned char 
 11925 ;; Return value:  Size  Location     Type
 11926 ;;		None               void
 11927 ;; Registers used:
 11928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:        2 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    6
 11941 ;; This function calls:
 11942 ;;		_DimmerLightsPointSelect
 11943 ;; This function is called by:
 11944 ;;		_DimmerLights_Initialization
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _setDimmerLights_Initialization
 11950  13F1                     _setDimmerLights_Initialization:	
 11951                           
 11952                           ;incstack = 0
 11953                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11954                           ;setDimmerLights_Initialization@lights stored from wreg
 11955  13F1  0020               	movlb	0	; select bank0
 11956  13F2  00A3               	movwf	setDimmerLights_Initialization@lights
 11957                           
 11958                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 11959  13F3  0823               	movf	setDimmerLights_Initialization@lights,w
 11960  13F4  3191  2163         	fcall	_DimmerLightsPointSelect
 11961                           
 11962                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 11963  13F6  0020               	movlb	0	; select bank0
 11964  13F7  086B               	movf	_DimmerLights,w
 11965  13F8  3E09               	addlw	9
 11966  13F9  0086               	movwf	6
 11967  13FA  3001               	movlw	1	; select bank2/3
 11968  13FB  0087               	movwf	7
 11969  13FC  1501               	bsf	1,2
 11970                           
 11971                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 11972  13FD  3008               	movlw	8
 11973  13FE  00A2               	movwf	??_setDimmerLights_Initialization
 11974  13FF  086B               	movf	_DimmerLights,w
 11975  1400  3E05               	addlw	5
 11976  1401  0086               	movwf	6
 11977  1402  3001               	movlw	1	; select bank2/3
 11978  1403  0087               	movwf	7
 11979  1404  0822               	movf	??_setDimmerLights_Initialization,w
 11980  1405  0081               	movwf	1
 11981                           
 11982                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11983  1406  303C               	movlw	60
 11984  1407  00A2               	movwf	??_setDimmerLights_Initialization
 11985  1408  086B               	movf	_DimmerLights,w
 11986  1409  3E06               	addlw	6
 11987  140A  0086               	movwf	6
 11988  140B  3001               	movlw	1	; select bank2/3
 11989  140C  0087               	movwf	7
 11990  140D  0822               	movf	??_setDimmerLights_Initialization,w
 11991  140E  0081               	movwf	1
 11992                           
 11993                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11994  140F  086B               	movf	_DimmerLights,w
 11995  1410  3E06               	addlw	6
 11996  1411  0086               	movwf	6
 11997  1412  3001               	movlw	1	; select bank2/3
 11998  1413  0087               	movwf	7
 11999  1414  0801               	movf	1,w
 12000  1415  00A2               	movwf	??_setDimmerLights_Initialization
 12001  1416  086B               	movf	_DimmerLights,w
 12002  1417  3E04               	addlw	4
 12003  1418  0086               	movwf	6
 12004  1419  3001               	movlw	1	; select bank2/3
 12005  141A  0087               	movwf	7
 12006  141B  0822               	movf	??_setDimmerLights_Initialization,w
 12007  141C  0081               	movwf	1
 12008  141D  0008               	return
 12009  141E                     __end_of_setDimmerLights_Initialization:	
 12010                           
 12011                           	psect	text69
 12012  1E3F                     __ptext69:	
 12013 ;; *************** function _Dimmer_Initialization *****************
 12014 ;; Defined at:
 12015 ;;		line 797 in file "../src/Dimmer_B1.c"
 12016 ;; Parameters:    Size  Location     Type
 12017 ;;		None
 12018 ;; Auto vars:     Size  Location     Type
 12019 ;;		None
 12020 ;; Return value:  Size  Location     Type
 12021 ;;		None               void
 12022 ;; Registers used:
 12023 ;;		wreg
 12024 ;; Tracked objects:
 12025 ;;		On entry : 0/0
 12026 ;;		On exit  : 0/0
 12027 ;;		Unchanged: 0/0
 12028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;Total ram usage:        1 bytes
 12034 ;; Hardware stack levels used:    1
 12035 ;; Hardware stack levels required when called:    5
 12036 ;; This function calls:
 12037 ;;		Nothing
 12038 ;; This function is called by:
 12039 ;;		_DimmerLights_Initialization
 12040 ;; This function uses a non-reentrant model
 12041 ;;
 12042                           
 12043                           
 12044                           ;psect for function _Dimmer_Initialization
 12045  1E3F                     _Dimmer_Initialization:	
 12046                           
 12047                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 12048                           
 12049                           ;incstack = 0
 12050                           ; Regs used in _Dimmer_Initialization: [wreg]
 12051  1E3F  30E3               	movlw	_Dimmer1& (0+255)
 12052  1E40  0020               	movlb	0	; select bank0
 12053  1E41  00A0               	movwf	??_Dimmer_Initialization
 12054  1E42  0820               	movf	??_Dimmer_Initialization,w
 12055  1E43  00F3               	movwf	_Dimmer
 12056  1E44  0008               	return
 12057  1E45                     __end_of_Dimmer_Initialization:	
 12058                           
 12059                           	psect	text70
 12060  1EA4                     __ptext70:	
 12061 ;; *************** function _DelayOff_Main *****************
 12062 ;; Defined at:
 12063 ;;		line 41 in file "../src/DelayOff_B1.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;		None
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;		None
 12068 ;; Return value:  Size  Location     Type
 12069 ;;		None               void
 12070 ;; Registers used:
 12071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;Total ram usage:        0 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:   10
 12084 ;; This function calls:
 12085 ;;		_DlyOff_Main
 12086 ;; This function is called by:
 12087 ;;		_main
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           
 12092                           ;psect for function _DelayOff_Main
 12093  1EA4                     _DelayOff_Main:	
 12094                           
 12095                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12096                           
 12097                           ;incstack = 0
 12098                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12099  1EA4  3001               	movlw	1
 12100  1EA5  318A  2263  319E   	fcall	_DlyOff_Main
 12101                           
 12102                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12103  1EA8  3002               	movlw	2
 12104  1EA9  318A  2263  319E   	fcall	_DlyOff_Main
 12105                           
 12106                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 12107  1EAC  3003               	movlw	3
 12108  1EAD  318A  2263         	fcall	_DlyOff_Main
 12109  1EAF  0008               	return
 12110  1EB0                     __end_of_DelayOff_Main:	
 12111                           
 12112                           	psect	text71
 12113  0A63                     __ptext71:	
 12114 ;; *************** function _DlyOff_Main *****************
 12115 ;; Defined at:
 12116 ;;		line 62 in file "../src/DelayOff_B1.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;  sw              1    wreg     unsigned char 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  sw              1   68[BANK0 ] unsigned char 
 12121 ;; Return value:  Size  Location     Type
 12122 ;;		None               void
 12123 ;; Registers used:
 12124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12125 ;; Tracked objects:
 12126 ;;		On entry : 0/0
 12127 ;;		On exit  : 0/0
 12128 ;;		Unchanged: 0/0
 12129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;Total ram usage:        3 bytes
 12135 ;; Hardware stack levels used:    1
 12136 ;; Hardware stack levels required when called:    9
 12137 ;; This function calls:
 12138 ;;		_DelayOffPointSelect
 12139 ;;		_setBuz
 12140 ;;		_setDimmerLights_Switch
 12141 ;;		_setDimmerLights_Trigger
 12142 ;;		_setRFSW_Status
 12143 ;;		_setRF_DimmerLights
 12144 ;;		_setSw_Status
 12145 ;;		_setTxData
 12146 ;; This function is called by:
 12147 ;;		_DelayOff_Main
 12148 ;; This function uses a non-reentrant model
 12149 ;;
 12150                           
 12151                           
 12152                           ;psect for function _DlyOff_Main
 12153  0A63                     _DlyOff_Main:	
 12154                           
 12155                           ;incstack = 0
 12156                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12157                           ;DlyOff_Main@sw stored from wreg
 12158  0A63  0020               	movlb	0	; select bank0
 12159  0A64  00E4               	movwf	DlyOff_Main@sw
 12160                           
 12161                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12162  0A65  0864               	movf	DlyOff_Main@sw,w
 12163  0A66  3191  219B  318A   	fcall	_DelayOffPointSelect
 12164                           
 12165                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12166  0A69  0872               	movf	_DelayOff,w
 12167  0A6A  0086               	movwf	6
 12168  0A6B  0187               	clrf	7
 12169  0A6C  1C81               	btfss	1,1
 12170  0A6D  0008               	return
 12171                           
 12172                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12173  0A6E  0872               	movf	_DelayOff,w
 12174  0A6F  0086               	movwf	6
 12175  0A70  0187               	clrf	7
 12176  0A71  3001               	movlw	1
 12177  0A72  0781               	addwf	1,f
 12178  0A73  3141               	addfsr 1,1
 12179  0A74  1803               	skipnc
 12180  0A75  0A81               	incf	1,f
 12181                           
 12182                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12183  0A76  0872               	movf	_DelayOff,w
 12184  0A77  0086               	movwf	6
 12185  0A78  0187               	clrf	7
 12186  0A79  3F40               	moviw [0]fsr1
 12187  0A7A  0020               	movlb	0	; select bank0
 12188  0A7B  00E2               	movwf	??_DlyOff_Main
 12189  0A7C  3F41               	moviw [1]fsr1
 12190  0A7D  00E3               	movwf	??_DlyOff_Main+1
 12191  0A7E  3016               	movlw	22
 12192  0A7F  0263               	subwf	??_DlyOff_Main+1,w
 12193  0A80  3012               	movlw	18
 12194  0A81  1903               	skipnz
 12195  0A82  0262               	subwf	??_DlyOff_Main,w
 12196  0A83  1C03               	skipc
 12197  0A84  0008               	return
 12198                           
 12199                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12200  0A85  0872               	movf	_DelayOff,w
 12201  0A86  0086               	movwf	6
 12202  0A87  0187               	clrf	7
 12203  0A88  3000               	movlw	0
 12204  0A89  3FC0               	movwi [0]fsr1
 12205  0A8A  3FC1               	movwi [1]fsr1
 12206                           
 12207                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12208  0A8B  3001               	movlw	1
 12209  0A8C  00E2               	movwf	??_DlyOff_Main
 12210  0A8D  0872               	movf	_DelayOff,w
 12211  0A8E  0086               	movwf	6
 12212  0A8F  0187               	clrf	7
 12213  0A90  0862               	movf	??_DlyOff_Main,w
 12214  0A91  0781               	addwf	1,f
 12215                           
 12216                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12217  0A92  0872               	movf	_DelayOff,w
 12218  0A93  0086               	movwf	6
 12219  0A94  0187               	clrf	7
 12220  0A95  0872               	movf	_DelayOff,w
 12221  0A96  0084               	movwf	4
 12222  0A97  0185               	clrf	5
 12223  0A98  0800               	movf	0,w
 12224  0A99  0201               	subwf	1,w
 12225  0A9A  1C03               	skipc
 12226  0A9B  0008               	return
 12227                           
 12228                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12229  0A9C  0872               	movf	_DelayOff,w
 12230  0A9D  0086               	movwf	6
 12231  0A9E  0187               	clrf	7
 12232  0A9F  0181               	clrf	1
 12233                           
 12234                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12235  0AA0  0872               	movf	_DelayOff,w
 12236  0AA1  0086               	movwf	6
 12237  0AA2  0187               	clrf	7
 12238  0AA3  1081               	bcf	1,1
 12239                           
 12240                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12241  0AA4  01A2               	clrf	setSw_Status@command
 12242  0AA5  0864               	movf	DlyOff_Main@sw,w
 12243  0AA6  319F  270D  318A   	fcall	_setSw_Status
 12244                           
 12245                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12246  0AA9  0020               	movlb	0	; select bank0
 12247  0AAA  01A2               	clrf	setRFSW_Status@command
 12248  0AAB  0864               	movf	DlyOff_Main@sw,w
 12249  0AAC  319E  26FE  318A   	fcall	_setRFSW_Status
 12250                           
 12251                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12252  0AAF  0020               	movlb	0	; select bank0
 12253  0AB0  01DD               	clrf	setRF_DimmerLights@on
 12254  0AB1  0864               	movf	DlyOff_Main@sw,w
 12255  0AB2  318A  22CE  318A   	fcall	_setRF_DimmerLights
 12256                           
 12257                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12258  0AB5  0020               	movlb	0	; select bank0
 12259  0AB6  01A2               	clrf	setDimmerLights_Trigger@command
 12260  0AB7  0AA2               	incf	setDimmerLights_Trigger@command,f
 12261  0AB8  0864               	movf	DlyOff_Main@sw,w
 12262  0AB9  319F  2759  318A   	fcall	_setDimmerLights_Trigger
 12263                           
 12264                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12265  0ABC  0020               	movlb	0	; select bank0
 12266  0ABD  01A2               	clrf	setDimmerLights_Switch@command
 12267  0ABE  0864               	movf	DlyOff_Main@sw,w
 12268  0ABF  319F  2749  318A   	fcall	_setDimmerLights_Switch
 12269                           
 12270                           ;DelayOff_B1.c: 78: setTxData();
 12271  0AC2  3185  25F8  318A   	fcall	_setTxData
 12272                           
 12273                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12274  0AC5  3064               	movlw	100
 12275  0AC6  0020               	movlb	0	; select bank0
 12276  0AC7  00A9               	movwf	setBuz@time
 12277  0AC8  3000               	movlw	0
 12278  0AC9  00AA               	movwf	setBuz@time+1
 12279  0ACA  3001               	movlw	1
 12280  0ACB  3197  27A7         	fcall	_setBuz
 12281  0ACD  0008               	return
 12282  0ACE                     __end_of_DlyOff_Main:	
 12283                           
 12284                           	psect	text72
 12285  05F8                     __ptext72:	
 12286 ;; *************** function _setTxData *****************
 12287 ;; Defined at:
 12288 ;;		line 186 in file "../src/RF_Control_B1.c"
 12289 ;; Parameters:    Size  Location     Type
 12290 ;;		None
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  i               1    0        unsigned char 
 12293 ;; Return value:  Size  Location     Type
 12294 ;;		None               void
 12295 ;; Registers used:
 12296 ;;		wreg, fsr1l, fsr1h
 12297 ;; Tracked objects:
 12298 ;;		On entry : 0/0
 12299 ;;		On exit  : 0/0
 12300 ;;		Unchanged: 0/0
 12301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;Total ram usage:        1 bytes
 12307 ;; Hardware stack levels used:    1
 12308 ;; Hardware stack levels required when called:    5
 12309 ;; This function calls:
 12310 ;;		Nothing
 12311 ;; This function is called by:
 12312 ;;		_DlyOff_Main
 12313 ;;		_setDimmerLights_Adj
 12314 ;;		_setControl_Lights_Table
 12315 ;;		_setRFSW_Control
 12316 ;;		_setRFSW_AdjControl
 12317 ;;		_Sw_DimmerOnFunc
 12318 ;;		_Sw_DimmerOffFunc
 12319 ;; This function uses a non-reentrant model
 12320 ;;
 12321                           
 12322                           
 12323                           ;psect for function _setTxData
 12324  05F8                     _setTxData:	
 12325                           
 12326                           ;RF_Control_B1.c: 187: char i;
 12327                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _setTxData: [wregfsr1]
 12331  05F8  0021               	movlb	1	; select bank1
 12332  05F9  1C3C               	btfss	_RF1^(0+128),0
 12333  05FA  0008               	return
 12334                           
 12335                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 12336  05FB  153C               	bsf	_RF1^(0+128),2
 12337                           
 12338                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 12339  05FC  3014               	movlw	20
 12340  05FD  00C3               	movwf	(_RF1^(0+128)+7)
 12341  05FE  3000               	movlw	0
 12342  05FF  00C4               	movwf	(_RF1^(0+128)+8)
 12343                           
 12344                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 12345  0600  3063               	movlw	99
 12346  0601  0020               	movlb	0	; select bank0
 12347  0602  00A0               	movwf	??_setTxData
 12348  0603  0820               	movf	??_setTxData,w
 12349  0604  0022               	movlb	2	; select bank2
 12350  0605  00A0               	movwf	_RF_Data^(0+256)
 12351                           
 12352                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 12353  0606  3002               	movlw	2
 12354  0607  0020               	movlb	0	; select bank0
 12355  0608  00A0               	movwf	??_setTxData
 12356  0609  0820               	movf	??_setTxData,w
 12357  060A  0022               	movlb	2	; select bank2
 12358  060B  00A1               	movwf	(_RF_Data^(0+256)+1)
 12359                           
 12360                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 12361  060C  0020               	movlb	0	; select bank0
 12362  060D  086D               	movf	_product,w
 12363  060E  0086               	movwf	6
 12364  060F  3002               	movlw	2	; select bank4/5
 12365  0610  0087               	movwf	7
 12366  0611  3002               	movlw	2	; select bank4/5
 12367  0612  3F42               	moviw [2]fsr1
 12368  0613  0022               	movlb	2	; select bank2
 12369  0614  00A2               	movwf	(_RF_Data^(0+256)+2)
 12370                           
 12371                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 12372  0615  0020               	movlb	0	; select bank0
 12373  0616  086D               	movf	_product,w
 12374  0617  0086               	movwf	6
 12375  0618  3002               	movlw	2	; select bank4/5
 12376  0619  0087               	movwf	7
 12377  061A  3002               	movlw	2	; select bank4/5
 12378  061B  3F43               	moviw [3]fsr1
 12379  061C  0022               	movlb	2	; select bank2
 12380  061D  00A3               	movwf	(_RF_Data^(0+256)+3)
 12381                           
 12382                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 12383  061E  0020               	movlb	0	; select bank0
 12384  061F  086D               	movf	_product,w
 12385  0620  0086               	movwf	6
 12386  0621  3002               	movlw	2	; select bank4/5
 12387  0622  0087               	movwf	7
 12388  0623  3002               	movlw	2	; select bank4/5
 12389  0624  3F44               	moviw [4]fsr1
 12390  0625  0022               	movlb	2	; select bank2
 12391  0626  00A4               	movwf	(_RF_Data^(0+256)+4)
 12392                           
 12393                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 12394  0627  0020               	movlb	0	; select bank0
 12395  0628  086D               	movf	_product,w
 12396  0629  0086               	movwf	6
 12397  062A  3002               	movlw	2	; select bank4/5
 12398  062B  0087               	movwf	7
 12399  062C  3002               	movlw	2	; select bank4/5
 12400  062D  3F45               	moviw [5]fsr1
 12401  062E  0022               	movlb	2	; select bank2
 12402  062F  00A5               	movwf	(_RF_Data^(0+256)+5)
 12403                           
 12404                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 12405  0630  0020               	movlb	0	; select bank0
 12406  0631  086D               	movf	_product,w
 12407  0632  0086               	movwf	6
 12408  0633  3002               	movlw	2	; select bank4/5
 12409  0634  0087               	movwf	7
 12410  0635  3002               	movlw	2	; select bank4/5
 12411  0636  3F46               	moviw [6]fsr1
 12412  0637  0022               	movlb	2	; select bank2
 12413  0638  00A6               	movwf	(_RF_Data^(0+256)+6)
 12414                           
 12415                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 12416  0639  0020               	movlb	0	; select bank0
 12417  063A  086D               	movf	_product,w
 12418  063B  0086               	movwf	6
 12419  063C  3002               	movlw	2	; select bank4/5
 12420  063D  0087               	movwf	7
 12421  063E  3002               	movlw	2	; select bank4/5
 12422  063F  3F47               	moviw [7]fsr1
 12423  0640  0022               	movlb	2	; select bank2
 12424  0641  00A7               	movwf	(_RF_Data^(0+256)+7)
 12425                           
 12426                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 12427  0642  0020               	movlb	0	; select bank0
 12428  0643  086D               	movf	_product,w
 12429  0644  0086               	movwf	6
 12430  0645  3002               	movlw	2	; select bank4/5
 12431  0646  0087               	movwf	7
 12432  0647  3002               	movlw	2	; select bank4/5
 12433  0648  3F48               	moviw [8]fsr1
 12434  0649  0022               	movlb	2	; select bank2
 12435  064A  00A8               	movwf	(_RF_Data^(0+256)+8)
 12436                           
 12437                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 12438  064B  0020               	movlb	0	; select bank0
 12439  064C  086D               	movf	_product,w
 12440  064D  0086               	movwf	6
 12441  064E  3002               	movlw	2	; select bank4/5
 12442  064F  0087               	movwf	7
 12443  0650  3002               	movlw	2	; select bank4/5
 12444  0651  3F49               	moviw [9]fsr1
 12445  0652  0022               	movlb	2	; select bank2
 12446  0653  00A9               	movwf	(_RF_Data^(0+256)+9)
 12447                           
 12448                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 12449  0654  0020               	movlb	0	; select bank0
 12450  0655  086D               	movf	_product,w
 12451  0656  0086               	movwf	6
 12452  0657  3002               	movlw	2	; select bank4/5
 12453  0658  0087               	movwf	7
 12454  0659  3002               	movlw	2	; select bank4/5
 12455  065A  3F4A               	moviw [10]fsr1
 12456  065B  0022               	movlb	2	; select bank2
 12457  065C  00AA               	movwf	(_RF_Data^(0+256)+10)
 12458                           
 12459                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 12460  065D  0020               	movlb	0	; select bank0
 12461  065E  086D               	movf	_product,w
 12462  065F  0086               	movwf	6
 12463  0660  3002               	movlw	2	; select bank4/5
 12464  0661  0087               	movwf	7
 12465  0662  3002               	movlw	2	; select bank4/5
 12466  0663  3F4B               	moviw [11]fsr1
 12467  0664  0022               	movlb	2	; select bank2
 12468  0665  00AB               	movwf	(_RF_Data^(0+256)+11)
 12469                           
 12470                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 12471  0666  0020               	movlb	0	; select bank0
 12472  0667  086D               	movf	_product,w
 12473  0668  0086               	movwf	6
 12474  0669  3002               	movlw	2	; select bank4/5
 12475  066A  0087               	movwf	7
 12476  066B  3002               	movlw	2	; select bank4/5
 12477  066C  3F4C               	moviw [12]fsr1
 12478  066D  0022               	movlb	2	; select bank2
 12479  066E  00AC               	movwf	(_RF_Data^(0+256)+12)
 12480                           
 12481                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 12482  066F  0020               	movlb	0	; select bank0
 12483  0670  086D               	movf	_product,w
 12484  0671  0086               	movwf	6
 12485  0672  3002               	movlw	2	; select bank4/5
 12486  0673  0087               	movwf	7
 12487  0674  3002               	movlw	2	; select bank4/5
 12488  0675  3F4D               	moviw [13]fsr1
 12489  0676  0022               	movlb	2	; select bank2
 12490  0677  00AD               	movwf	(_RF_Data^(0+256)+13)
 12491                           
 12492                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 12493  0678  0020               	movlb	0	; select bank0
 12494  0679  086D               	movf	_product,w
 12495  067A  0086               	movwf	6
 12496  067B  3002               	movlw	2	; select bank4/5
 12497  067C  0087               	movwf	7
 12498  067D  3002               	movlw	2	; select bank4/5
 12499  067E  3F4E               	moviw [14]fsr1
 12500  067F  0022               	movlb	2	; select bank2
 12501  0680  00AE               	movwf	(_RF_Data^(0+256)+14)
 12502                           
 12503                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 12504  0681  0020               	movlb	0	; select bank0
 12505  0682  086D               	movf	_product,w
 12506  0683  0086               	movwf	6
 12507  0684  3002               	movlw	2	; select bank4/5
 12508  0685  0087               	movwf	7
 12509  0686  3002               	movlw	2	; select bank4/5
 12510  0687  3F4F               	moviw [15]fsr1
 12511  0688  0022               	movlb	2	; select bank2
 12512  0689  00AF               	movwf	(_RF_Data^(0+256)+15)
 12513                           
 12514                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 12515  068A  0020               	movlb	0	; select bank0
 12516  068B  086D               	movf	_product,w
 12517  068C  0086               	movwf	6
 12518  068D  3002               	movlw	2	; select bank4/5
 12519  068E  0087               	movwf	7
 12520  068F  3002               	movlw	2	; select bank4/5
 12521  0690  3F50               	moviw [16]fsr1
 12522  0691  0022               	movlb	2	; select bank2
 12523  0692  00B0               	movwf	(_RF_Data^(0+256)+16)
 12524                           
 12525                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 12526  0693  0020               	movlb	0	; select bank0
 12527  0694  086D               	movf	_product,w
 12528  0695  0086               	movwf	6
 12529  0696  3002               	movlw	2	; select bank4/5
 12530  0697  0087               	movwf	7
 12531  0698  3002               	movlw	2	; select bank4/5
 12532  0699  3F51               	moviw [17]fsr1
 12533  069A  0022               	movlb	2	; select bank2
 12534  069B  00B1               	movwf	(_RF_Data^(0+256)+17)
 12535                           
 12536                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 12537  069C  0020               	movlb	0	; select bank0
 12538  069D  086D               	movf	_product,w
 12539  069E  0086               	movwf	6
 12540  069F  3002               	movlw	2	; select bank4/5
 12541  06A0  0087               	movwf	7
 12542  06A1  3002               	movlw	2	; select bank4/5
 12543  06A2  3F52               	moviw [18]fsr1
 12544  06A3  0022               	movlb	2	; select bank2
 12545  06A4  00B2               	movwf	(_RF_Data^(0+256)+18)
 12546                           
 12547                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 12548  06A5  0020               	movlb	0	; select bank0
 12549  06A6  086D               	movf	_product,w
 12550  06A7  0086               	movwf	6
 12551  06A8  3002               	movlw	2	; select bank4/5
 12552  06A9  0087               	movwf	7
 12553  06AA  3002               	movlw	2	; select bank4/5
 12554  06AB  3F53               	moviw [19]fsr1
 12555  06AC  0022               	movlb	2	; select bank2
 12556  06AD  00B3               	movwf	(_RF_Data^(0+256)+19)
 12557                           
 12558                           ;RF_Control_B1.c: 221: RF_Data[20] = 211;
 12559  06AE  30D3               	movlw	211
 12560  06AF  0020               	movlb	0	; select bank0
 12561  06B0  00A0               	movwf	??_setTxData
 12562  06B1  0820               	movf	??_setTxData,w
 12563  06B2  0022               	movlb	2	; select bank2
 12564  06B3  00B4               	movwf	(_RF_Data^(0+256)+20)
 12565  06B4  0008               	return
 12566  06B5                     __end_of_setTxData:	
 12567                           
 12568                           	psect	text73
 12569  1F0D                     __ptext73:	
 12570 ;; *************** function _setSw_Status *****************
 12571 ;; Defined at:
 12572 ;;		line 111 in file "../src/Switch_B1.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;  sw              1    wreg     unsigned char 
 12575 ;;  command         1    2[BANK0 ] unsigned char 
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  sw              1    3[BANK0 ] unsigned char 
 12578 ;; Return value:  Size  Location     Type
 12579 ;;		None               void
 12580 ;; Registers used:
 12581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12587 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;Total ram usage:        2 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:    6
 12594 ;; This function calls:
 12595 ;;		_SwPointSelect
 12596 ;; This function is called by:
 12597 ;;		_DlyOff_Main
 12598 ;;		_setControl_Lights_Table
 12599 ;;		_setRFSW_Control
 12600 ;;		_setDimmerLights_ERROR
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           
 12605                           ;psect for function _setSw_Status
 12606  1F0D                     _setSw_Status:	
 12607                           
 12608                           ;incstack = 0
 12609                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12610                           ;setSw_Status@sw stored from wreg
 12611  1F0D  0020               	movlb	0	; select bank0
 12612  1F0E  00A3               	movwf	setSw_Status@sw
 12613                           
 12614                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12615  1F0F  0823               	movf	setSw_Status@sw,w
 12616  1F10  3191  21B8         	fcall	_SwPointSelect
 12617                           
 12618                           ;Switch_B1.c: 113: Sw->Status = command;
 12619  1F12  0020               	movlb	0	; select bank0
 12620  1F13  086C               	movf	_Sw,w
 12621  1F14  0086               	movwf	6
 12622  1F15  3001               	movlw	1	; select bank2/3
 12623  1F16  0087               	movwf	7
 12624  1F17  0822               	movf	setSw_Status@command,w
 12625  1F18  1301               	bcf	1,6
 12626  1F19  1D03               	skipz
 12627  1F1A  1701               	bsf	1,6
 12628  1F1B  0008               	return
 12629  1F1C                     __end_of_setSw_Status:	
 12630                           
 12631                           	psect	text74
 12632  11B8                     __ptext74:	
 12633 ;; *************** function _SwPointSelect *****************
 12634 ;; Defined at:
 12635 ;;		line 21 in file "../src/Switch_B1.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;  sw              1    wreg     unsigned char 
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  sw              1    1[BANK0 ] unsigned char 
 12640 ;; Return value:  Size  Location     Type
 12641 ;;		None               void
 12642 ;; Registers used:
 12643 ;;		wreg
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;Total ram usage:        2 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    5
 12656 ;; This function calls:
 12657 ;;		Nothing
 12658 ;; This function is called by:
 12659 ;;		_setSw_Enable
 12660 ;;		_setSw_Status
 12661 ;;		_setSw_Main
 12662 ;;		_Sw_Detect
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           
 12667                           ;psect for function _SwPointSelect
 12668  11B8                     _SwPointSelect:	
 12669                           
 12670                           ;incstack = 0
 12671                           ; Regs used in _SwPointSelect: [wreg]
 12672                           ;SwPointSelect@sw stored from wreg
 12673  11B8  0020               	movlb	0	; select bank0
 12674  11B9  00A1               	movwf	SwPointSelect@sw
 12675                           
 12676                           ;Switch_B1.c: 24: if (sw == 1) {
 12677  11BA  0821               	movf	SwPointSelect@sw,w
 12678  11BB  3A01               	xorlw	1
 12679  11BC  1D03               	skipz
 12680  11BD  29C3               	goto	l8097
 12681                           
 12682                           ;Switch_B1.c: 25: Sw = &Sw1;
 12683  11BE  305C               	movlw	_Sw1& (0+255)
 12684  11BF  00A0               	movwf	??_SwPointSelect
 12685  11C0  0820               	movf	??_SwPointSelect,w
 12686  11C1  00EC               	movwf	_Sw
 12687                           
 12688                           ;Switch_B1.c: 26: }
 12689  11C2  0008               	return
 12690  11C3                     l8097:	
 12691                           
 12692                           ;Switch_B1.c: 29: else if (sw == 2) {
 12693  11C3  0821               	movf	SwPointSelect@sw,w
 12694  11C4  3A02               	xorlw	2
 12695  11C5  1D03               	skipz
 12696  11C6  29CC               	goto	l8101
 12697                           
 12698                           ;Switch_B1.c: 30: Sw = &Sw2;
 12699  11C7  30D4               	movlw	_Sw2& (0+255)
 12700  11C8  00A0               	movwf	??_SwPointSelect
 12701  11C9  0820               	movf	??_SwPointSelect,w
 12702  11CA  00EC               	movwf	_Sw
 12703                           
 12704                           ;Switch_B1.c: 31: }
 12705  11CB  0008               	return
 12706  11CC                     l8101:	
 12707                           
 12708                           ;Switch_B1.c: 34: else if (sw == 3) {
 12709  11CC  0821               	movf	SwPointSelect@sw,w
 12710  11CD  3A03               	xorlw	3
 12711  11CE  1D03               	skipz
 12712  11CF  0008               	return
 12713                           
 12714                           ;Switch_B1.c: 35: Sw = &Sw3;
 12715  11D0  30DD               	movlw	_Sw3& (0+255)
 12716  11D1  00A0               	movwf	??_SwPointSelect
 12717  11D2  0820               	movf	??_SwPointSelect,w
 12718  11D3  00EC               	movwf	_Sw
 12719  11D4  0008               	return
 12720  11D5                     __end_of_SwPointSelect:	
 12721                           
 12722                           	psect	text75
 12723  0ACE                     __ptext75:	
 12724 ;; *************** function _setRF_DimmerLights *****************
 12725 ;; Defined at:
 12726 ;;		line 452 in file "../src/RF_Control_B1.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  lights          1    wreg     unsigned char 
 12729 ;;  on              1   61[BANK0 ] unsigned char 
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;  lights          1   65[BANK0 ] unsigned char 
 12732 ;;  status          1   64[BANK0 ] unsigned char 
 12733 ;; Return value:  Size  Location     Type
 12734 ;;		None               void
 12735 ;; Registers used:
 12736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12737 ;; Tracked objects:
 12738 ;;		On entry : 0/0
 12739 ;;		On exit  : 0/0
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12742 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;Total ram usage:        5 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    8
 12749 ;; This function calls:
 12750 ;;		_setPercentValue
 12751 ;; This function is called by:
 12752 ;;		_DlyOff_Main
 12753 ;;		_setDimmerLights_Adj
 12754 ;;		_setRFSW_Control
 12755 ;;		_Sw_DimmerOnFunc
 12756 ;;		_Sw_DimmerOffFunc
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           
 12761                           ;psect for function _setRF_DimmerLights
 12762  0ACE                     _setRF_DimmerLights:	
 12763                           
 12764                           ;incstack = 0
 12765                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12766                           ;setRF_DimmerLights@lights stored from wreg
 12767  0ACE  0020               	movlb	0	; select bank0
 12768  0ACF  00E1               	movwf	setRF_DimmerLights@lights
 12769                           
 12770                           ;RF_Control_B1.c: 453: char status;
 12771                           ;RF_Control_B1.c: 454: status = 1;
 12772  0AD0  01E0               	clrf	setRF_DimmerLights@status
 12773  0AD1  0AE0               	incf	setRF_DimmerLights@status,f
 12774                           
 12775                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 12776  0AD2  0861               	movf	setRF_DimmerLights@lights,w
 12777  0AD3  3EFF               	addlw	-1
 12778  0AD4  0A89               	incf	9,f
 12779  0AD5  2AD8               	goto	u8190
 12780  0AD6                     u8195:	
 12781  0AD6  1003               	clrc
 12782  0AD7  0DE0               	rlf	setRF_DimmerLights@status,f
 12783  0AD8                     u8190:	
 12784  0AD8  3EFF               	addlw	-1
 12785  0AD9  1D03               	skipz
 12786  0ADA  2AD6               	goto	u8195
 12787                           
 12788                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 12789  0ADB  0861               	movf	setRF_DimmerLights@lights,w
 12790  0ADC  00DE               	movwf	??_setRF_DimmerLights
 12791  0ADD  086D               	movf	_product,w
 12792  0ADE  3E0B               	addlw	11
 12793  0ADF  0086               	movwf	6
 12794  0AE0  3002               	movlw	2	; select bank4/5
 12795  0AE1  0087               	movwf	7
 12796  0AE2  085E               	movf	??_setRF_DimmerLights,w
 12797  0AE3  0081               	movwf	1
 12798                           
 12799                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12800  0AE4  3008               	movlw	8
 12801  0AE5  3196  2622  318A   	fcall	_setPercentValue
 12802  0AE8  0020               	movlb	0	; select bank0
 12803  0AE9  00DE               	movwf	??_setRF_DimmerLights
 12804  0AEA  0861               	movf	setRF_DimmerLights@lights,w
 12805  0AEB  3E14               	addlw	20
 12806  0AEC  076D               	addwf	_product,w
 12807  0AED  00DF               	movwf	??_setRF_DimmerLights+1
 12808  0AEE  085F               	movf	??_setRF_DimmerLights+1,w
 12809  0AEF  0086               	movwf	6
 12810  0AF0  3002               	movlw	2	; select bank4/5
 12811  0AF1  0087               	movwf	7
 12812  0AF2  085E               	movf	??_setRF_DimmerLights,w
 12813  0AF3  0081               	movwf	1
 12814                           
 12815                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 12816  0AF4  0861               	movf	setRF_DimmerLights@lights,w
 12817  0AF5  3E14               	addlw	20
 12818  0AF6  076D               	addwf	_product,w
 12819  0AF7  00DE               	movwf	??_setRF_DimmerLights
 12820  0AF8  085E               	movf	??_setRF_DimmerLights,w
 12821  0AF9  0086               	movwf	6
 12822  0AFA  3002               	movlw	2	; select bank4/5
 12823  0AFB  0087               	movwf	7
 12824  0AFC  0801               	movf	1,w
 12825  0AFD  00DF               	movwf	??_setRF_DimmerLights+1
 12826  0AFE  086D               	movf	_product,w
 12827  0AFF  3E09               	addlw	9
 12828  0B00  0086               	movwf	6
 12829  0B01  3002               	movlw	2	; select bank4/5
 12830  0B02  0087               	movwf	7
 12831  0B03  085F               	movf	??_setRF_DimmerLights+1,w
 12832  0B04  0081               	movwf	1
 12833                           
 12834                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 12835  0B05  0861               	movf	setRF_DimmerLights@lights,w
 12836  0B06  3E1A               	addlw	26
 12837  0B07  076D               	addwf	_product,w
 12838  0B08  00DE               	movwf	??_setRF_DimmerLights
 12839  0B09  085E               	movf	??_setRF_DimmerLights,w
 12840  0B0A  0086               	movwf	6
 12841  0B0B  3002               	movlw	2	; select bank4/5
 12842  0B0C  0087               	movwf	7
 12843  0B0D  0801               	movf	1,w
 12844  0B0E  00DF               	movwf	??_setRF_DimmerLights+1
 12845  0B0F  086D               	movf	_product,w
 12846  0B10  3E11               	addlw	17
 12847  0B11  0086               	movwf	6
 12848  0B12  3002               	movlw	2	; select bank4/5
 12849  0B13  0087               	movwf	7
 12850  0B14  085F               	movf	??_setRF_DimmerLights+1,w
 12851  0B15  0081               	movwf	1
 12852                           
 12853                           ;RF_Control_B1.c: 464: if (on == 1) {
 12854  0B16  085D               	movf	setRF_DimmerLights@on,w
 12855  0B17  3A01               	xorlw	1
 12856  0B18  1D03               	skipz
 12857  0B19  2B2A               	goto	l8197
 12858                           
 12859                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 12860  0B1A  086D               	movf	_product,w
 12861  0B1B  3E0F               	addlw	15
 12862  0B1C  0086               	movwf	6
 12863  0B1D  3002               	movlw	2	; select bank4/5
 12864  0B1E  0087               	movwf	7
 12865  0B1F  0801               	movf	1,w
 12866  0B20  0460               	iorwf	setRF_DimmerLights@status,w
 12867  0B21  00DE               	movwf	??_setRF_DimmerLights
 12868  0B22  086D               	movf	_product,w
 12869  0B23  3E0F               	addlw	15
 12870  0B24  0086               	movwf	6
 12871  0B25  3002               	movlw	2	; select bank4/5
 12872  0B26  0087               	movwf	7
 12873  0B27  085E               	movf	??_setRF_DimmerLights,w
 12874  0B28  0081               	movwf	1
 12875                           
 12876                           ;RF_Control_B1.c: 466: } else {
 12877  0B29  0008               	return
 12878  0B2A                     l8197:	
 12879                           
 12880                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 12881  0B2A  086D               	movf	_product,w
 12882  0B2B  3E0F               	addlw	15
 12883  0B2C  0086               	movwf	6
 12884  0B2D  3002               	movlw	2	; select bank4/5
 12885  0B2E  0087               	movwf	7
 12886  0B2F  0960               	comf	setRF_DimmerLights@status,w
 12887  0B30  0501               	andwf	1,w
 12888  0B31  00DE               	movwf	??_setRF_DimmerLights
 12889  0B32  086D               	movf	_product,w
 12890  0B33  3E0F               	addlw	15
 12891  0B34  0086               	movwf	6
 12892  0B35  3002               	movlw	2	; select bank4/5
 12893  0B36  0087               	movwf	7
 12894  0B37  085E               	movf	??_setRF_DimmerLights,w
 12895  0B38  0081               	movwf	1
 12896  0B39  0008               	return
 12897  0B3A                     __end_of_setRF_DimmerLights:	
 12898                           
 12899                           	psect	text76
 12900  1622                     __ptext76:	
 12901 ;; *************** function _setPercentValue *****************
 12902 ;; Defined at:
 12903 ;;		line 779 in file "../src/Dimmer_B1.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;  value           1    wreg     unsigned char 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  value           1   57[BANK0 ] unsigned char 
 12908 ;;  i               3   58[BANK0 ] float 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      unsigned char 
 12911 ;; Registers used:
 12912 ;;		wreg, status,2, status,0, pclath, cstack
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;Total ram usage:        4 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; Hardware stack levels required when called:    7
 12925 ;; This function calls:
 12926 ;;		___awtoft
 12927 ;;		___ftdiv
 12928 ;;		___fttol
 12929 ;; This function is called by:
 12930 ;;		_Flash_Memory_Initialization
 12931 ;;		_setRF_DimmerLights
 12932 ;; This function uses a non-reentrant model
 12933 ;;
 12934                           
 12935                           
 12936                           ;psect for function _setPercentValue
 12937  1622                     _setPercentValue:	
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12941                           ;setPercentValue@value stored from wreg
 12942  1622  0020               	movlb	0	; select bank0
 12943  1623  00D9               	movwf	setPercentValue@value
 12944                           
 12945                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 12946  1624  3000               	movlw	0
 12947  1625  00DA               	movwf	setPercentValue@i
 12948  1626  3050               	movlw	80
 12949  1627  00DB               	movwf	setPercentValue@i+1
 12950  1628  3042               	movlw	66
 12951  1629  00DC               	movwf	setPercentValue@i+2
 12952                           
 12953                           ;Dimmer_B1.c: 782: i /= 100;
 12954  162A  3000               	movlw	0
 12955  162B  00AE               	movwf	___ftdiv@f2
 12956  162C  30C8               	movlw	200
 12957  162D  00AF               	movwf	___ftdiv@f2+1
 12958  162E  3042               	movlw	66
 12959  162F  00B0               	movwf	___ftdiv@f2+2
 12960  1630  085A               	movf	setPercentValue@i,w
 12961  1631  00B1               	movwf	___ftdiv@f1
 12962  1632  085B               	movf	setPercentValue@i+1,w
 12963  1633  00B2               	movwf	___ftdiv@f1+1
 12964  1634  085C               	movf	setPercentValue@i+2,w
 12965  1635  00B3               	movwf	___ftdiv@f1+2
 12966  1636  318E  26A8  3196   	fcall	___ftdiv
 12967  1639  0020               	movlb	0	; select bank0
 12968  163A  082E               	movf	?___ftdiv,w
 12969  163B  00DA               	movwf	setPercentValue@i
 12970  163C  082F               	movf	?___ftdiv+1,w
 12971  163D  00DB               	movwf	setPercentValue@i+1
 12972  163E  0830               	movf	?___ftdiv+2,w
 12973  163F  00DC               	movwf	setPercentValue@i+2
 12974                           
 12975                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 12976  1640  0859               	movf	setPercentValue@value,w
 12977  1641  3EF8               	addlw	248
 12978  1642  00A8               	movwf	___awtoft@c
 12979  1643  30FF               	movlw	255
 12980  1644  1803               	skipnc
 12981  1645  3000               	movlw	0
 12982  1646  00A9               	movwf	___awtoft@c+1
 12983  1647  3192  2295  3196   	fcall	___awtoft
 12984  164A  0020               	movlb	0	; select bank0
 12985  164B  0828               	movf	?___awtoft,w
 12986  164C  00B1               	movwf	___ftdiv@f1
 12987  164D  0829               	movf	?___awtoft+1,w
 12988  164E  00B2               	movwf	___ftdiv@f1+1
 12989  164F  082A               	movf	?___awtoft+2,w
 12990  1650  00B3               	movwf	___ftdiv@f1+2
 12991  1651  085A               	movf	setPercentValue@i,w
 12992  1652  00AE               	movwf	___ftdiv@f2
 12993  1653  085B               	movf	setPercentValue@i+1,w
 12994  1654  00AF               	movwf	___ftdiv@f2+1
 12995  1655  085C               	movf	setPercentValue@i+2,w
 12996  1656  00B0               	movwf	___ftdiv@f2+2
 12997  1657  318E  26A8  3196   	fcall	___ftdiv
 12998  165A  0020               	movlb	0	; select bank0
 12999  165B  082E               	movf	?___ftdiv,w
 13000  165C  00CB               	movwf	___fttol@f1
 13001  165D  082F               	movf	?___ftdiv+1,w
 13002  165E  00CC               	movwf	___fttol@f1+1
 13003  165F  0830               	movf	?___ftdiv+2,w
 13004  1660  00CD               	movwf	___fttol@f1+2
 13005  1661  318D  2509         	fcall	___fttol
 13006  1663  0020               	movlb	0	; select bank0
 13007  1664  034B               	decf	?___fttol,w
 13008  1665  3AFF               	xorlw	255
 13009  1666  3E64               	addlw	100
 13010  1667  0008               	return
 13011  1668                     __end_of_setPercentValue:	
 13012                           
 13013                           	psect	text77
 13014  0D09                     __ptext77:	
 13015 ;; *************** function ___fttol *****************
 13016 ;; Defined at:
 13017 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;  f1              3   43[BANK0 ] float 
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  lval            4   52[BANK0 ] unsigned long 
 13022 ;;  exp1            1   56[BANK0 ] unsigned char 
 13023 ;;  sign1           1   51[BANK0 ] unsigned char 
 13024 ;; Return value:  Size  Location     Type
 13025 ;;                  4   43[BANK0 ] long 
 13026 ;; Registers used:
 13027 ;;		wreg, status,2, status,0
 13028 ;; Tracked objects:
 13029 ;;		On entry : 0/0
 13030 ;;		On exit  : 0/0
 13031 ;;		Unchanged: 0/0
 13032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13033 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;Total ram usage:       14 bytes
 13038 ;; Hardware stack levels used:    1
 13039 ;; Hardware stack levels required when called:    5
 13040 ;; This function calls:
 13041 ;;		Nothing
 13042 ;; This function is called by:
 13043 ;;		_getPercentValue
 13044 ;;		_setPercentValue
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function ___fttol
 13050  0D09                     ___fttol:	
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13054  0D09  0020               	movlb	0	; select bank0
 13055  0D0A  084B               	movf	___fttol@f1,w
 13056  0D0B  00CF               	movwf	??___fttol
 13057  0D0C  084C               	movf	___fttol@f1+1,w
 13058  0D0D  00D0               	movwf	??___fttol+1
 13059  0D0E  084D               	movf	___fttol@f1+2,w
 13060  0D0F  00D1               	movwf	??___fttol+2
 13061  0D10  1003               	clrc
 13062  0D11  0D50               	rlf	??___fttol+1,w
 13063  0D12  0D51               	rlf	??___fttol+2,w
 13064  0D13  00D2               	movwf	??___fttol+3
 13065  0D14  0852               	movf	??___fttol+3,w
 13066  0D15  00D8               	movwf	___fttol@exp1
 13067  0D16  08D8               	movf	___fttol@exp1,f
 13068  0D17  1D03               	skipz
 13069  0D18  2D22               	goto	l5839
 13070  0D19  3000               	movlw	0
 13071  0D1A  00CE               	movwf	?___fttol+3
 13072  0D1B  3000               	movlw	0
 13073  0D1C  00CD               	movwf	?___fttol+2
 13074  0D1D  3000               	movlw	0
 13075  0D1E  00CC               	movwf	?___fttol+1
 13076  0D1F  3000               	movlw	0
 13077  0D20  00CB               	movwf	?___fttol
 13078  0D21  0008               	return
 13079  0D22                     l5839:	
 13080  0D22  084B               	movf	___fttol@f1,w
 13081  0D23  00CF               	movwf	??___fttol
 13082  0D24  084C               	movf	___fttol@f1+1,w
 13083  0D25  00D0               	movwf	??___fttol+1
 13084  0D26  084D               	movf	___fttol@f1+2,w
 13085  0D27  00D1               	movwf	??___fttol+2
 13086  0D28  3017               	movlw	23
 13087  0D29                     u4505:	
 13088  0D29  36D1               	lsrf	??___fttol+2,f
 13089  0D2A  0CD0               	rrf	??___fttol+1,f
 13090  0D2B  0CCF               	rrf	??___fttol,f
 13091  0D2C  0B89               	decfsz	9,f
 13092  0D2D  2D29               	goto	u4505
 13093  0D2E  084F               	movf	??___fttol,w
 13094  0D2F  00D2               	movwf	??___fttol+3
 13095  0D30  0852               	movf	??___fttol+3,w
 13096  0D31  00D3               	movwf	___fttol@sign1
 13097  0D32  17CC               	bsf	___fttol@f1+1,7
 13098  0D33  30FF               	movlw	255
 13099  0D34  05CB               	andwf	___fttol@f1,f
 13100  0D35  30FF               	movlw	255
 13101  0D36  05CC               	andwf	___fttol@f1+1,f
 13102  0D37  3000               	movlw	0
 13103  0D38  05CD               	andwf	___fttol@f1+2,f
 13104  0D39  084B               	movf	___fttol@f1,w
 13105  0D3A  00D4               	movwf	___fttol@lval
 13106  0D3B  084C               	movf	___fttol@f1+1,w
 13107  0D3C  00D5               	movwf	___fttol@lval+1
 13108  0D3D  084D               	movf	___fttol@f1+2,w
 13109  0D3E  00D6               	movwf	___fttol@lval+2
 13110  0D3F  01D7               	clrf	___fttol@lval+3
 13111  0D40  308E               	movlw	142
 13112  0D41  02D8               	subwf	___fttol@exp1,f
 13113  0D42  1FD8               	btfss	___fttol@exp1,7
 13114  0D43  2D60               	goto	l5859
 13115  0D44  0858               	movf	___fttol@exp1,w
 13116  0D45  3A80               	xorlw	128
 13117  0D46  3E8F               	addlw	143
 13118  0D47  1803               	skipnc
 13119  0D48  2D52               	goto	l5857
 13120  0D49  3000               	movlw	0
 13121  0D4A  00CE               	movwf	?___fttol+3
 13122  0D4B  3000               	movlw	0
 13123  0D4C  00CD               	movwf	?___fttol+2
 13124  0D4D  3000               	movlw	0
 13125  0D4E  00CC               	movwf	?___fttol+1
 13126  0D4F  3000               	movlw	0
 13127  0D50  00CB               	movwf	?___fttol
 13128  0D51  0008               	return
 13129  0D52                     l5857:	
 13130  0D52  3001               	movlw	1
 13131  0D53                     u4535:	
 13132  0D53  36D7               	lsrf	___fttol@lval+3,f
 13133  0D54  0CD6               	rrf	___fttol@lval+2,f
 13134  0D55  0CD5               	rrf	___fttol@lval+1,f
 13135  0D56  0CD4               	rrf	___fttol@lval,f
 13136  0D57  0B89               	decfsz	9,f
 13137  0D58  2D53               	goto	u4535
 13138  0D59  3001               	movlw	1
 13139  0D5A  00CF               	movwf	??___fttol
 13140  0D5B  084F               	movf	??___fttol,w
 13141  0D5C  07D8               	addwf	___fttol@exp1,f
 13142  0D5D  1903               	btfsc	3,2
 13143  0D5E  2D79               	goto	l5869
 13144  0D5F  2D52               	goto	l5857
 13145  0D60                     l5859:	
 13146  0D60  3018               	movlw	24
 13147  0D61  0258               	subwf	___fttol@exp1,w
 13148  0D62  1C03               	skipc
 13149  0D63  2D76               	goto	l5867
 13150  0D64  3000               	movlw	0
 13151  0D65  00CE               	movwf	?___fttol+3
 13152  0D66  3000               	movlw	0
 13153  0D67  00CD               	movwf	?___fttol+2
 13154  0D68  3000               	movlw	0
 13155  0D69  00CC               	movwf	?___fttol+1
 13156  0D6A  3000               	movlw	0
 13157  0D6B  00CB               	movwf	?___fttol
 13158  0D6C  0008               	return
 13159  0D6D                     l5865:	
 13160  0D6D  3001               	movlw	1
 13161  0D6E                     u4565:	
 13162  0D6E  35D4               	lslf	___fttol@lval,f
 13163  0D6F  0DD5               	rlf	___fttol@lval+1,f
 13164  0D70  0DD6               	rlf	___fttol@lval+2,f
 13165  0D71  0DD7               	rlf	___fttol@lval+3,f
 13166  0D72  0B89               	decfsz	9,f
 13167  0D73  2D6E               	goto	u4565
 13168  0D74  3001               	movlw	1
 13169  0D75  02D8               	subwf	___fttol@exp1,f
 13170  0D76                     l5867:	
 13171  0D76  08D8               	movf	___fttol@exp1,f
 13172  0D77  1D03               	skipz
 13173  0D78  2D6D               	goto	l5865
 13174  0D79                     l5869:	
 13175  0D79  0853               	movf	___fttol@sign1,w
 13176  0D7A  1903               	btfsc	3,2
 13177  0D7B  2D87               	goto	l5873
 13178  0D7C  09D4               	comf	___fttol@lval,f
 13179  0D7D  09D5               	comf	___fttol@lval+1,f
 13180  0D7E  09D6               	comf	___fttol@lval+2,f
 13181  0D7F  09D7               	comf	___fttol@lval+3,f
 13182  0D80  0AD4               	incf	___fttol@lval,f
 13183  0D81  1903               	skipnz
 13184  0D82  0AD5               	incf	___fttol@lval+1,f
 13185  0D83  1903               	skipnz
 13186  0D84  0AD6               	incf	___fttol@lval+2,f
 13187  0D85  1903               	skipnz
 13188  0D86  0AD7               	incf	___fttol@lval+3,f
 13189  0D87                     l5873:	
 13190  0D87  0857               	movf	___fttol@lval+3,w
 13191  0D88  00CE               	movwf	?___fttol+3
 13192  0D89  0856               	movf	___fttol@lval+2,w
 13193  0D8A  00CD               	movwf	?___fttol+2
 13194  0D8B  0855               	movf	___fttol@lval+1,w
 13195  0D8C  00CC               	movwf	?___fttol+1
 13196  0D8D  0854               	movf	___fttol@lval,w
 13197  0D8E  00CB               	movwf	?___fttol
 13198  0D8F  0008               	return
 13199  0D90                     __end_of___fttol:	
 13200                           
 13201                           	psect	text78
 13202  0EA8                     __ptext78:	
 13203 ;; *************** function ___ftdiv *****************
 13204 ;; Defined at:
 13205 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;  f2              3   14[BANK0 ] float 
 13208 ;;  f1              3   17[BANK0 ] float 
 13209 ;; Auto vars:     Size  Location     Type
 13210 ;;  f3              3   25[BANK0 ] float 
 13211 ;;  sign            1   29[BANK0 ] unsigned char 
 13212 ;;  exp             1   28[BANK0 ] unsigned char 
 13213 ;;  cntr            1   24[BANK0 ] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  3   14[BANK0 ] float 
 13216 ;; Registers used:
 13217 ;;		wreg, status,2, status,0, pclath, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13223 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;Total ram usage:       16 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    6
 13230 ;; This function calls:
 13231 ;;		___ftpack
 13232 ;; This function is called by:
 13233 ;;		_getPercentValue
 13234 ;;		_setPercentValue
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           
 13239                           ;psect for function ___ftdiv
 13240  0EA8                     ___ftdiv:	
 13241                           
 13242                           ;incstack = 0
 13243                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13244  0EA8  0020               	movlb	0	; select bank0
 13245  0EA9  0831               	movf	___ftdiv@f1,w
 13246  0EAA  00B4               	movwf	??___ftdiv
 13247  0EAB  0832               	movf	___ftdiv@f1+1,w
 13248  0EAC  00B5               	movwf	??___ftdiv+1
 13249  0EAD  0833               	movf	___ftdiv@f1+2,w
 13250  0EAE  00B6               	movwf	??___ftdiv+2
 13251  0EAF  1003               	clrc
 13252  0EB0  0D35               	rlf	??___ftdiv+1,w
 13253  0EB1  0D36               	rlf	??___ftdiv+2,w
 13254  0EB2  00B7               	movwf	??___ftdiv+3
 13255  0EB3  0837               	movf	??___ftdiv+3,w
 13256  0EB4  00BC               	movwf	___ftdiv@exp
 13257  0EB5  08BC               	movf	___ftdiv@exp,f
 13258  0EB6  1D03               	skipz
 13259  0EB7  2EBF               	goto	l5747
 13260  0EB8  3000               	movlw	0
 13261  0EB9  00AE               	movwf	?___ftdiv
 13262  0EBA  3000               	movlw	0
 13263  0EBB  00AF               	movwf	?___ftdiv+1
 13264  0EBC  3000               	movlw	0
 13265  0EBD  00B0               	movwf	?___ftdiv+2
 13266  0EBE  0008               	return
 13267  0EBF                     l5747:	
 13268  0EBF  082E               	movf	___ftdiv@f2,w
 13269  0EC0  00B4               	movwf	??___ftdiv
 13270  0EC1  082F               	movf	___ftdiv@f2+1,w
 13271  0EC2  00B5               	movwf	??___ftdiv+1
 13272  0EC3  0830               	movf	___ftdiv@f2+2,w
 13273  0EC4  00B6               	movwf	??___ftdiv+2
 13274  0EC5  1003               	clrc
 13275  0EC6  0D35               	rlf	??___ftdiv+1,w
 13276  0EC7  0D36               	rlf	??___ftdiv+2,w
 13277  0EC8  00B7               	movwf	??___ftdiv+3
 13278  0EC9  0837               	movf	??___ftdiv+3,w
 13279  0ECA  00BD               	movwf	___ftdiv@sign
 13280  0ECB  08BD               	movf	___ftdiv@sign,f
 13281  0ECC  1D03               	skipz
 13282  0ECD  2ED5               	goto	l5753
 13283  0ECE  3000               	movlw	0
 13284  0ECF  00AE               	movwf	?___ftdiv
 13285  0ED0  3000               	movlw	0
 13286  0ED1  00AF               	movwf	?___ftdiv+1
 13287  0ED2  3000               	movlw	0
 13288  0ED3  00B0               	movwf	?___ftdiv+2
 13289  0ED4  0008               	return
 13290  0ED5                     l5753:	
 13291  0ED5  3000               	movlw	0
 13292  0ED6  00B9               	movwf	___ftdiv@f3
 13293  0ED7  3000               	movlw	0
 13294  0ED8  00BA               	movwf	___ftdiv@f3+1
 13295  0ED9  3000               	movlw	0
 13296  0EDA  00BB               	movwf	___ftdiv@f3+2
 13297  0EDB  3089               	movlw	137
 13298  0EDC  073D               	addwf	___ftdiv@sign,w
 13299  0EDD  00B4               	movwf	??___ftdiv
 13300  0EDE  0834               	movf	??___ftdiv,w
 13301  0EDF  02BC               	subwf	___ftdiv@exp,f
 13302  0EE0  0831               	movf	___ftdiv@f1,w
 13303  0EE1  00B4               	movwf	??___ftdiv
 13304  0EE2  0832               	movf	___ftdiv@f1+1,w
 13305  0EE3  00B5               	movwf	??___ftdiv+1
 13306  0EE4  0833               	movf	___ftdiv@f1+2,w
 13307  0EE5  00B6               	movwf	??___ftdiv+2
 13308  0EE6  3010               	movlw	16
 13309  0EE7                     u4315:	
 13310  0EE7  36B6               	lsrf	??___ftdiv+2,f
 13311  0EE8  0CB5               	rrf	??___ftdiv+1,f
 13312  0EE9  0CB4               	rrf	??___ftdiv,f
 13313  0EEA  0B89               	decfsz	9,f
 13314  0EEB  2EE7               	goto	u4315
 13315  0EEC  0834               	movf	??___ftdiv,w
 13316  0EED  00B7               	movwf	??___ftdiv+3
 13317  0EEE  0837               	movf	??___ftdiv+3,w
 13318  0EEF  00BD               	movwf	___ftdiv@sign
 13319  0EF0  082E               	movf	___ftdiv@f2,w
 13320  0EF1  00B4               	movwf	??___ftdiv
 13321  0EF2  082F               	movf	___ftdiv@f2+1,w
 13322  0EF3  00B5               	movwf	??___ftdiv+1
 13323  0EF4  0830               	movf	___ftdiv@f2+2,w
 13324  0EF5  00B6               	movwf	??___ftdiv+2
 13325  0EF6  3010               	movlw	16
 13326  0EF7                     u4325:	
 13327  0EF7  36B6               	lsrf	??___ftdiv+2,f
 13328  0EF8  0CB5               	rrf	??___ftdiv+1,f
 13329  0EF9  0CB4               	rrf	??___ftdiv,f
 13330  0EFA  0B89               	decfsz	9,f
 13331  0EFB  2EF7               	goto	u4325
 13332  0EFC  0834               	movf	??___ftdiv,w
 13333  0EFD  00B7               	movwf	??___ftdiv+3
 13334  0EFE  0837               	movf	??___ftdiv+3,w
 13335  0EFF  06BD               	xorwf	___ftdiv@sign,f
 13336  0F00  3080               	movlw	128
 13337  0F01  00B4               	movwf	??___ftdiv
 13338  0F02  0834               	movf	??___ftdiv,w
 13339  0F03  05BD               	andwf	___ftdiv@sign,f
 13340  0F04  17B2               	bsf	___ftdiv@f1+1,7
 13341  0F05  30FF               	movlw	255
 13342  0F06  05B1               	andwf	___ftdiv@f1,f
 13343  0F07  30FF               	movlw	255
 13344  0F08  05B2               	andwf	___ftdiv@f1+1,f
 13345  0F09  3000               	movlw	0
 13346  0F0A  05B3               	andwf	___ftdiv@f1+2,f
 13347  0F0B  17AF               	bsf	___ftdiv@f2+1,7
 13348  0F0C  30FF               	movlw	255
 13349  0F0D  05AE               	andwf	___ftdiv@f2,f
 13350  0F0E  30FF               	movlw	255
 13351  0F0F  05AF               	andwf	___ftdiv@f2+1,f
 13352  0F10  3000               	movlw	0
 13353  0F11  05B0               	andwf	___ftdiv@f2+2,f
 13354  0F12  3018               	movlw	24
 13355  0F13  00B4               	movwf	??___ftdiv
 13356  0F14  0834               	movf	??___ftdiv,w
 13357  0F15  00B8               	movwf	___ftdiv@cntr
 13358  0F16                     l5767:	
 13359  0F16  3001               	movlw	1
 13360  0F17                     u4335:	
 13361  0F17  35B9               	lslf	___ftdiv@f3,f
 13362  0F18  0DBA               	rlf	___ftdiv@f3+1,f
 13363  0F19  0DBB               	rlf	___ftdiv@f3+2,f
 13364  0F1A  0B89               	decfsz	9,f
 13365  0F1B  2F17               	goto	u4335
 13366  0F1C  0830               	movf	___ftdiv@f2+2,w
 13367  0F1D  0233               	subwf	___ftdiv@f1+2,w
 13368  0F1E  1D03               	skipz
 13369  0F1F  2F26               	goto	u4345
 13370  0F20  082F               	movf	___ftdiv@f2+1,w
 13371  0F21  0232               	subwf	___ftdiv@f1+1,w
 13372  0F22  1D03               	skipz
 13373  0F23  2F26               	goto	u4345
 13374  0F24  082E               	movf	___ftdiv@f2,w
 13375  0F25  0231               	subwf	___ftdiv@f1,w
 13376  0F26                     u4345:	
 13377  0F26  1C03               	skipc
 13378  0F27  2F2F               	goto	l5775
 13379  0F28  082E               	movf	___ftdiv@f2,w
 13380  0F29  02B1               	subwf	___ftdiv@f1,f
 13381  0F2A  082F               	movf	___ftdiv@f2+1,w
 13382  0F2B  3BB2               	subwfb	___ftdiv@f1+1,f
 13383  0F2C  0830               	movf	___ftdiv@f2+2,w
 13384  0F2D  3BB3               	subwfb	___ftdiv@f1+2,f
 13385  0F2E  1439               	bsf	___ftdiv@f3,0
 13386  0F2F                     l5775:	
 13387  0F2F  3001               	movlw	1
 13388  0F30                     u4355:	
 13389  0F30  35B1               	lslf	___ftdiv@f1,f
 13390  0F31  0DB2               	rlf	___ftdiv@f1+1,f
 13391  0F32  0DB3               	rlf	___ftdiv@f1+2,f
 13392  0F33  0B89               	decfsz	9,f
 13393  0F34  2F30               	goto	u4355
 13394  0F35  3001               	movlw	1
 13395  0F36  02B8               	subwf	___ftdiv@cntr,f
 13396  0F37  1D03               	btfss	3,2
 13397  0F38  2F16               	goto	l5767
 13398  0F39  0839               	movf	___ftdiv@f3,w
 13399  0F3A  00A0               	movwf	___ftpack@arg
 13400  0F3B  083A               	movf	___ftdiv@f3+1,w
 13401  0F3C  00A1               	movwf	___ftpack@arg+1
 13402  0F3D  083B               	movf	___ftdiv@f3+2,w
 13403  0F3E  00A2               	movwf	___ftpack@arg+2
 13404  0F3F  083C               	movf	___ftdiv@exp,w
 13405  0F40  00B4               	movwf	??___ftdiv
 13406  0F41  0834               	movf	??___ftdiv,w
 13407  0F42  00A3               	movwf	___ftpack@exp
 13408  0F43  083D               	movf	___ftdiv@sign,w
 13409  0F44  00B5               	movwf	??___ftdiv+1
 13410  0F45  0835               	movf	??___ftdiv+1,w
 13411  0F46  00A4               	movwf	___ftpack@sign
 13412  0F47  3188  20D0         	fcall	___ftpack
 13413  0F49  0020               	movlb	0	; select bank0
 13414  0F4A  0820               	movf	?___ftpack,w
 13415  0F4B  00AE               	movwf	?___ftdiv
 13416  0F4C  0821               	movf	?___ftpack+1,w
 13417  0F4D  00AF               	movwf	?___ftdiv+1
 13418  0F4E  0822               	movf	?___ftpack+2,w
 13419  0F4F  00B0               	movwf	?___ftdiv+2
 13420  0F50  0008               	return
 13421  0F51                     __end_of___ftdiv:	
 13422                           
 13423                           	psect	text79
 13424  1295                     __ptext79:	
 13425 ;; *************** function ___awtoft *****************
 13426 ;; Defined at:
 13427 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;  c               2    8[BANK0 ] int 
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;  sign            1   13[BANK0 ] unsigned char 
 13432 ;; Return value:  Size  Location     Type
 13433 ;;                  3    8[BANK0 ] float 
 13434 ;; Registers used:
 13435 ;;		wreg, status,2, status,0, pclath, cstack
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;Total ram usage:        6 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    6
 13448 ;; This function calls:
 13449 ;;		___ftpack
 13450 ;; This function is called by:
 13451 ;;		_getPercentValue
 13452 ;;		_setPercentValue
 13453 ;; This function uses a non-reentrant model
 13454 ;;
 13455                           
 13456                           
 13457                           ;psect for function ___awtoft
 13458  1295                     ___awtoft:	
 13459                           
 13460                           ;incstack = 0
 13461                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13462  1295  0020               	movlb	0	; select bank0
 13463  1296  01AD               	clrf	___awtoft@sign
 13464  1297  1FA9               	btfss	___awtoft@c+1,7
 13465  1298  2AA0               	goto	l7997
 13466  1299  09A8               	comf	___awtoft@c,f
 13467  129A  09A9               	comf	___awtoft@c+1,f
 13468  129B  0AA8               	incf	___awtoft@c,f
 13469  129C  1903               	skipnz
 13470  129D  0AA9               	incf	___awtoft@c+1,f
 13471  129E  01AD               	clrf	___awtoft@sign
 13472  129F  0AAD               	incf	___awtoft@sign,f
 13473  12A0                     l7997:	
 13474  12A0  0828               	movf	___awtoft@c,w
 13475  12A1  00A0               	movwf	___ftpack@arg
 13476  12A2  0829               	movf	___awtoft@c+1,w
 13477  12A3  00A1               	movwf	___ftpack@arg+1
 13478  12A4  01A2               	clrf	___ftpack@arg+2
 13479  12A5  308E               	movlw	142
 13480  12A6  00AB               	movwf	??___awtoft
 13481  12A7  082B               	movf	??___awtoft,w
 13482  12A8  00A3               	movwf	___ftpack@exp
 13483  12A9  082D               	movf	___awtoft@sign,w
 13484  12AA  00AC               	movwf	??___awtoft+1
 13485  12AB  082C               	movf	??___awtoft+1,w
 13486  12AC  00A4               	movwf	___ftpack@sign
 13487  12AD  3188  20D0         	fcall	___ftpack
 13488  12AF  0020               	movlb	0	; select bank0
 13489  12B0  0820               	movf	?___ftpack,w
 13490  12B1  00A8               	movwf	?___awtoft
 13491  12B2  0821               	movf	?___ftpack+1,w
 13492  12B3  00A9               	movwf	?___awtoft+1
 13493  12B4  0822               	movf	?___ftpack+2,w
 13494  12B5  00AA               	movwf	?___awtoft+2
 13495  12B6  0008               	return
 13496  12B7                     __end_of___awtoft:	
 13497                           
 13498                           	psect	text80
 13499  08D0                     __ptext80:	
 13500 ;; *************** function ___ftpack *****************
 13501 ;; Defined at:
 13502 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  arg             3    0[BANK0 ] unsigned um
 13505 ;;  exp             1    3[BANK0 ] unsigned char 
 13506 ;;  sign            1    4[BANK0 ] unsigned char 
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;		None
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  3    0[BANK0 ] float 
 13511 ;; Registers used:
 13512 ;;		wreg, status,2, status,0
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        8 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    5
 13525 ;; This function calls:
 13526 ;;		Nothing
 13527 ;; This function is called by:
 13528 ;;		___awtoft
 13529 ;;		___ftadd
 13530 ;;		___ftdiv
 13531 ;;		___ftmul
 13532 ;; This function uses a non-reentrant model
 13533 ;;
 13534                           
 13535                           
 13536                           ;psect for function ___ftpack
 13537  08D0                     ___ftpack:	
 13538                           
 13539                           ;incstack = 0
 13540                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13541  08D0  0020               	movlb	0	; select bank0
 13542  08D1  0823               	movf	___ftpack@exp,w
 13543  08D2  1903               	btfsc	3,2
 13544  08D3  28D9               	goto	l5631
 13545  08D4  0822               	movf	___ftpack@arg+2,w
 13546  08D5  0421               	iorwf	___ftpack@arg+1,w
 13547  08D6  0420               	iorwf	___ftpack@arg,w
 13548  08D7  1D03               	skipz
 13549  08D8  28EA               	goto	l5637
 13550  08D9                     l5631:	
 13551  08D9  3000               	movlw	0
 13552  08DA  00A0               	movwf	?___ftpack
 13553  08DB  3000               	movlw	0
 13554  08DC  00A1               	movwf	?___ftpack+1
 13555  08DD  3000               	movlw	0
 13556  08DE  00A2               	movwf	?___ftpack+2
 13557  08DF  0008               	return
 13558  08E0                     l5635:	
 13559  08E0  3001               	movlw	1
 13560  08E1  00A5               	movwf	??___ftpack
 13561  08E2  0825               	movf	??___ftpack,w
 13562  08E3  07A3               	addwf	___ftpack@exp,f
 13563  08E4  3001               	movlw	1
 13564  08E5                     u3965:	
 13565  08E5  36A2               	lsrf	___ftpack@arg+2,f
 13566  08E6  0CA1               	rrf	___ftpack@arg+1,f
 13567  08E7  0CA0               	rrf	___ftpack@arg,f
 13568  08E8  0B89               	decfsz	9,f
 13569  08E9  28E5               	goto	u3965
 13570  08EA                     l5637:	
 13571  08EA  30FE               	movlw	254
 13572  08EB  0522               	andwf	___ftpack@arg+2,w
 13573  08EC  1903               	btfsc	3,2
 13574  08ED  2903               	goto	l3029
 13575  08EE  28E0               	goto	l5635
 13576  08EF                     l5639:	
 13577  08EF  3001               	movlw	1
 13578  08F0  00A5               	movwf	??___ftpack
 13579  08F1  0825               	movf	??___ftpack,w
 13580  08F2  07A3               	addwf	___ftpack@exp,f
 13581  08F3  3001               	movlw	1
 13582  08F4  07A0               	addwf	___ftpack@arg,f
 13583  08F5  3000               	movlw	0
 13584  08F6  1803               	skipnc
 13585  08F7  3001               	movlw	1
 13586  08F8  07A1               	addwf	___ftpack@arg+1,f
 13587  08F9  3000               	movlw	0
 13588  08FA  1803               	skipnc
 13589  08FB  3001               	movlw	1
 13590  08FC  07A2               	addwf	___ftpack@arg+2,f
 13591  08FD  3001               	movlw	1
 13592  08FE                     u3985:	
 13593  08FE  36A2               	lsrf	___ftpack@arg+2,f
 13594  08FF  0CA1               	rrf	___ftpack@arg+1,f
 13595  0900  0CA0               	rrf	___ftpack@arg,f
 13596  0901  0B89               	decfsz	9,f
 13597  0902  28FE               	goto	u3985
 13598  0903                     l3029:	
 13599  0903  30FF               	movlw	255
 13600  0904  0522               	andwf	___ftpack@arg+2,w
 13601  0905  1903               	btfsc	3,2
 13602  0906  2910               	goto	l5647
 13603  0907  28EF               	goto	l5639
 13604  0908                     l5645:	
 13605  0908  3001               	movlw	1
 13606  0909  02A3               	subwf	___ftpack@exp,f
 13607  090A  3001               	movlw	1
 13608  090B                     u4005:	
 13609  090B  35A0               	lslf	___ftpack@arg,f
 13610  090C  0DA1               	rlf	___ftpack@arg+1,f
 13611  090D  0DA2               	rlf	___ftpack@arg+2,f
 13612  090E  0B89               	decfsz	9,f
 13613  090F  290B               	goto	u4005
 13614  0910                     l5647:	
 13615  0910  1FA1               	btfss	___ftpack@arg+1,7
 13616  0911  2908               	goto	l5645
 13617  0912  1823               	btfsc	___ftpack@exp,0
 13618  0913  291A               	goto	l3035
 13619  0914  30FF               	movlw	255
 13620  0915  05A0               	andwf	___ftpack@arg,f
 13621  0916  307F               	movlw	127
 13622  0917  05A1               	andwf	___ftpack@arg+1,f
 13623  0918  30FF               	movlw	255
 13624  0919  05A2               	andwf	___ftpack@arg+2,f
 13625  091A                     l3035:	
 13626  091A  1003               	clrc
 13627  091B  0CA3               	rrf	___ftpack@exp,f
 13628  091C  0823               	movf	___ftpack@exp,w
 13629  091D  00A5               	movwf	??___ftpack
 13630  091E  01A6               	clrf	??___ftpack+1
 13631  091F  01A7               	clrf	??___ftpack+2
 13632  0920  3010               	movlw	16
 13633  0921                     u4035:	
 13634  0921  35A5               	lslf	??___ftpack,f
 13635  0922  0DA6               	rlf	??___ftpack+1,f
 13636  0923  0DA7               	rlf	??___ftpack+2,f
 13637  0924  0B89               	decfsz	9,f
 13638  0925  2921               	goto	u4035
 13639  0926  0825               	movf	??___ftpack,w
 13640  0927  04A0               	iorwf	___ftpack@arg,f
 13641  0928  0826               	movf	??___ftpack+1,w
 13642  0929  04A1               	iorwf	___ftpack@arg+1,f
 13643  092A  0827               	movf	??___ftpack+2,w
 13644  092B  04A2               	iorwf	___ftpack@arg+2,f
 13645  092C  0824               	movf	___ftpack@sign,w
 13646  092D  1903               	btfsc	3,2
 13647  092E  0008               	return
 13648  092F  17A2               	bsf	___ftpack@arg+2,7
 13649  0930  0008               	return
 13650  0931                     __end_of___ftpack:	
 13651                           
 13652                           	psect	text81
 13653  1EFE                     __ptext81:	
 13654 ;; *************** function _setRFSW_Status *****************
 13655 ;; Defined at:
 13656 ;;		line 434 in file "../src/RF_Control_B1.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;  sw              1    wreg     unsigned char 
 13659 ;;  command         1    2[BANK0 ] unsigned char 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  sw              1    3[BANK0 ] unsigned char 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;		None               void
 13664 ;; Registers used:
 13665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13671 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;Total ram usage:        2 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; Hardware stack levels required when called:    6
 13678 ;; This function calls:
 13679 ;;		_RfSWPointSelect
 13680 ;; This function is called by:
 13681 ;;		_DlyOff_Main
 13682 ;;		_setControl_Lights_Table
 13683 ;;		_Sw_DimmerOnFunc
 13684 ;;		_Sw_DimmerAdjFunc
 13685 ;;		_setDimmerLights_ERROR
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           
 13690                           ;psect for function _setRFSW_Status
 13691  1EFE                     _setRFSW_Status:	
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13695                           ;setRFSW_Status@sw stored from wreg
 13696  1EFE  0020               	movlb	0	; select bank0
 13697  1EFF  00A3               	movwf	setRFSW_Status@sw
 13698                           
 13699                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 13700  1F00  0823               	movf	setRFSW_Status@sw,w
 13701  1F01  3192  2213         	fcall	_RfSWPointSelect
 13702                           
 13703                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 13704  1F03  0021               	movlb	1	; select bank1
 13705  1F04  0854               	movf	_RFSW^(0+128),w
 13706  1F05  0086               	movwf	6
 13707  1F06  0187               	clrf	7
 13708  1F07  0020               	movlb	0	; select bank0
 13709  1F08  0822               	movf	setRFSW_Status@command,w
 13710  1F09  1001               	bcf	1,0
 13711  1F0A  1D03               	skipz
 13712  1F0B  1401               	bsf	1,0
 13713  1F0C  0008               	return
 13714  1F0D                     __end_of_setRFSW_Status:	
 13715                           
 13716                           	psect	text82
 13717  1213                     __ptext82:	
 13718 ;; *************** function _RfSWPointSelect *****************
 13719 ;; Defined at:
 13720 ;;		line 369 in file "../src/RF_Control_B1.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  sw              1    wreg     unsigned char 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  sw              1    1[BANK0 ] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        2 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    5
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		_setRFSW_Control
 13745 ;;		_setRFSW_AdjControl
 13746 ;;		_setRFSW_Status
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           
 13751                           ;psect for function _RfSWPointSelect
 13752  1213                     _RfSWPointSelect:	
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in _RfSWPointSelect: [wreg]
 13756                           ;RfSWPointSelect@sw stored from wreg
 13757  1213  0020               	movlb	0	; select bank0
 13758  1214  00A1               	movwf	RfSWPointSelect@sw
 13759                           
 13760                           ;RF_Control_B1.c: 371: if (sw == 1) {
 13761  1215  0821               	movf	RfSWPointSelect@sw,w
 13762  1216  3A01               	xorlw	1
 13763  1217  1D03               	skipz
 13764  1218  2A1E               	goto	l2295
 13765                           
 13766                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 13767  1219  30EC               	movlw	_RFSW1& (0+255)
 13768  121A  00A0               	movwf	??_RfSWPointSelect
 13769  121B  0820               	movf	??_RfSWPointSelect,w
 13770  121C  0021               	movlb	1	; select bank1
 13771  121D  00D4               	movwf	_RFSW^(0+128)
 13772  121E                     l2295:	
 13773                           
 13774                           ;RF_Control_B1.c: 373: }
 13775                           ;RF_Control_B1.c: 376: if (sw == 2) {
 13776  121E  0020               	movlb	0	; select bank0
 13777  121F  0821               	movf	RfSWPointSelect@sw,w
 13778  1220  3A02               	xorlw	2
 13779  1221  1D03               	skipz
 13780  1222  2A28               	goto	l2296
 13781                           
 13782                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 13783  1223  30ED               	movlw	_RFSW2& (0+255)
 13784  1224  00A0               	movwf	??_RfSWPointSelect
 13785  1225  0820               	movf	??_RfSWPointSelect,w
 13786  1226  0021               	movlb	1	; select bank1
 13787  1227  00D4               	movwf	_RFSW^(0+128)
 13788  1228                     l2296:	
 13789                           
 13790                           ;RF_Control_B1.c: 378: }
 13791                           ;RF_Control_B1.c: 381: if (sw == 3) {
 13792  1228  0020               	movlb	0	; select bank0
 13793  1229  0821               	movf	RfSWPointSelect@sw,w
 13794  122A  3A03               	xorlw	3
 13795  122B  1D03               	skipz
 13796  122C  0008               	return
 13797                           
 13798                           ;RF_Control_B1.c: 382: RFSW = &RFSW3;
 13799  122D  30EE               	movlw	_RFSW3& (0+255)
 13800  122E  00A0               	movwf	??_RfSWPointSelect
 13801  122F  0820               	movf	??_RfSWPointSelect,w
 13802  1230  0021               	movlb	1	; select bank1
 13803  1231  00D4               	movwf	_RFSW^(0+128)
 13804  1232  0008               	return
 13805  1233                     __end_of_RfSWPointSelect:	
 13806                           
 13807                           	psect	text83
 13808  1F59                     __ptext83:	
 13809 ;; *************** function _setDimmerLights_Trigger *****************
 13810 ;; Defined at:
 13811 ;;		line 716 in file "../src/Dimmer_B1.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;  lights          1    wreg     unsigned char 
 13814 ;;  command         1    2[BANK0 ] unsigned char 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;  lights          1    3[BANK0 ] unsigned char 
 13817 ;; Return value:  Size  Location     Type
 13818 ;;		None               void
 13819 ;; Registers used:
 13820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13821 ;; Tracked objects:
 13822 ;;		On entry : 0/0
 13823 ;;		On exit  : 0/0
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;Total ram usage:        2 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    6
 13833 ;; This function calls:
 13834 ;;		_DimmerLightsPointSelect
 13835 ;; This function is called by:
 13836 ;;		_DlyOff_Main
 13837 ;;		_setRFSW_Control
 13838 ;;		_Sw_DimmerOnFunc
 13839 ;;		_Sw_DimmerOffFunc
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function _setDimmerLights_Trigger
 13845  1F59                     _setDimmerLights_Trigger:	
 13846                           
 13847                           ;incstack = 0
 13848                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13849                           ;setDimmerLights_Trigger@lights stored from wreg
 13850  1F59  0020               	movlb	0	; select bank0
 13851  1F5A  00A3               	movwf	setDimmerLights_Trigger@lights
 13852                           
 13853                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 13854  1F5B  0823               	movf	setDimmerLights_Trigger@lights,w
 13855  1F5C  3191  2163         	fcall	_DimmerLightsPointSelect
 13856                           
 13857                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 13858  1F5E  0020               	movlb	0	; select bank0
 13859  1F5F  086B               	movf	_DimmerLights,w
 13860  1F60  3E08               	addlw	8
 13861  1F61  0086               	movwf	6
 13862  1F62  3001               	movlw	1	; select bank2/3
 13863  1F63  0087               	movwf	7
 13864  1F64  0822               	movf	setDimmerLights_Trigger@command,w
 13865  1F65  1101               	bcf	1,2
 13866  1F66  1D03               	skipz
 13867  1F67  1501               	bsf	1,2
 13868  1F68  0008               	return
 13869  1F69                     __end_of_setDimmerLights_Trigger:	
 13870                           
 13871                           	psect	text84
 13872  1F49                     __ptext84:	
 13873 ;; *************** function _setDimmerLights_Switch *****************
 13874 ;; Defined at:
 13875 ;;		line 704 in file "../src/Dimmer_B1.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;  lights          1    wreg     unsigned char 
 13878 ;;  command         1    2[BANK0 ] unsigned char 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  lights          1    3[BANK0 ] unsigned char 
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        2 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    6
 13897 ;; This function calls:
 13898 ;;		_DimmerLightsPointSelect
 13899 ;; This function is called by:
 13900 ;;		_DlyOff_Main
 13901 ;;		_setRFSW_Control
 13902 ;;		_Sw_DimmerOnFunc
 13903 ;;		_Sw_DimmerOffFunc
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _setDimmerLights_Switch
 13909  1F49                     _setDimmerLights_Switch:	
 13910                           
 13911                           ;incstack = 0
 13912                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13913                           ;setDimmerLights_Switch@lights stored from wreg
 13914  1F49  0020               	movlb	0	; select bank0
 13915  1F4A  00A3               	movwf	setDimmerLights_Switch@lights
 13916                           
 13917                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 13918  1F4B  0823               	movf	setDimmerLights_Switch@lights,w
 13919  1F4C  3191  2163         	fcall	_DimmerLightsPointSelect
 13920                           
 13921                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 13922  1F4E  0020               	movlb	0	; select bank0
 13923  1F4F  086B               	movf	_DimmerLights,w
 13924  1F50  3E08               	addlw	8
 13925  1F51  0086               	movwf	6
 13926  1F52  3001               	movlw	1	; select bank2/3
 13927  1F53  0087               	movwf	7
 13928  1F54  0822               	movf	setDimmerLights_Switch@command,w
 13929  1F55  1081               	bcf	1,1
 13930  1F56  1D03               	skipz
 13931  1F57  1481               	bsf	1,1
 13932  1F58  0008               	return
 13933  1F59                     __end_of_setDimmerLights_Switch:	
 13934                           
 13935                           	psect	text85
 13936  1163                     __ptext85:	
 13937 ;; *************** function _DimmerLightsPointSelect *****************
 13938 ;; Defined at:
 13939 ;;		line 326 in file "../src/Dimmer_B1.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  lights          1    wreg     unsigned char 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  lights          1    1[BANK0 ] unsigned char 
 13944 ;; Return value:  Size  Location     Type
 13945 ;;		None               void
 13946 ;; Registers used:
 13947 ;;		wreg
 13948 ;; Tracked objects:
 13949 ;;		On entry : 0/0
 13950 ;;		On exit  : 0/0
 13951 ;;		Unchanged: 0/0
 13952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13957 ;;Total ram usage:        2 bytes
 13958 ;; Hardware stack levels used:    1
 13959 ;; Hardware stack levels required when called:    5
 13960 ;; This function calls:
 13961 ;;		Nothing
 13962 ;; This function is called by:
 13963 ;;		_setDimmerLights_Initialization
 13964 ;;		_setDimmerLights_Main
 13965 ;;		_setDimmerLights
 13966 ;;		_setDimmerLights_Adj
 13967 ;;		_setDimmerLights_AdjRF
 13968 ;;		_setDimmerLights_Switch
 13969 ;;		_setDimmerLights_AdjGo
 13970 ;;		_setDimmerLights_Trigger
 13971 ;;		_setDimmerLights_TriggerAdj
 13972 ;;		_setDimmerLights_ERROR
 13973 ;;		_setDimmerLights_TriggerERROR
 13974 ;;		_setDimmerLights_GO
 13975 ;;		_setDimmerLights_MaxmumValue
 13976 ;;		_setDimmerLights_Clear
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           
 13981                           ;psect for function _DimmerLightsPointSelect
 13982  1163                     _DimmerLightsPointSelect:	
 13983                           
 13984                           ;incstack = 0
 13985                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13986                           ;DimmerLightsPointSelect@lights stored from wreg
 13987  1163  0020               	movlb	0	; select bank0
 13988  1164  00A1               	movwf	DimmerLightsPointSelect@lights
 13989                           
 13990                           ;Dimmer_B1.c: 328: if (lights == 1) {
 13991  1165  0821               	movf	DimmerLightsPointSelect@lights,w
 13992  1166  3A01               	xorlw	1
 13993  1167  1D03               	skipz
 13994  1168  296D               	goto	l867
 13995                           
 13996                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 13997  1169  303E               	movlw	_DimmerLights1& (0+255)
 13998  116A  00A0               	movwf	??_DimmerLightsPointSelect
 13999  116B  0820               	movf	??_DimmerLightsPointSelect,w
 14000  116C  00EB               	movwf	_DimmerLights
 14001  116D                     l867:	
 14002                           
 14003                           ;Dimmer_B1.c: 330: }
 14004                           ;Dimmer_B1.c: 333: if (lights == 2) {
 14005  116D  0821               	movf	DimmerLightsPointSelect@lights,w
 14006  116E  3A02               	xorlw	2
 14007  116F  1D03               	skipz
 14008  1170  2975               	goto	l868
 14009                           
 14010                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 14011  1171  304D               	movlw	_DimmerLights2& (0+255)
 14012  1172  00A0               	movwf	??_DimmerLightsPointSelect
 14013  1173  0820               	movf	??_DimmerLightsPointSelect,w
 14014  1174  00EB               	movwf	_DimmerLights
 14015  1175                     l868:	
 14016                           
 14017                           ;Dimmer_B1.c: 335: }
 14018                           ;Dimmer_B1.c: 338: if (lights == 3) {
 14019  1175  0821               	movf	DimmerLightsPointSelect@lights,w
 14020  1176  3A03               	xorlw	3
 14021  1177  1D03               	skipz
 14022  1178  0008               	return
 14023                           
 14024                           ;Dimmer_B1.c: 339: DimmerLights = &DimmerLights3;
 14025  1179  30C5               	movlw	_DimmerLights3& (0+255)
 14026  117A  00A0               	movwf	??_DimmerLightsPointSelect
 14027  117B  0820               	movf	??_DimmerLightsPointSelect,w
 14028  117C  00EB               	movwf	_DimmerLights
 14029  117D  0008               	return
 14030  117E                     __end_of_DimmerLightsPointSelect:	
 14031                           
 14032                           	psect	text86
 14033  17A7                     __ptext86:	
 14034 ;; *************** function _setBuz *****************
 14035 ;; Defined at:
 14036 ;;		line 22 in file "../src/Buzzer_B1.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  count           1    wreg     unsigned char 
 14039 ;;  time            2    9[BANK0 ] int 
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;  count           1   12[BANK0 ] unsigned char 
 14042 ;; Return value:  Size  Location     Type
 14043 ;;		None               void
 14044 ;; Registers used:
 14045 ;;		wreg, status,2, status,0, pclath, cstack
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;Total ram usage:        4 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; Hardware stack levels required when called:    6
 14058 ;; This function calls:
 14059 ;;		___awdiv
 14060 ;; This function is called by:
 14061 ;;		_DlyOff_Main
 14062 ;;		_setDimmerLights_Main
 14063 ;;		_my_MainTimer
 14064 ;;		_setLog_Code
 14065 ;;		_setControl_Lights_Table
 14066 ;;		_setRFSW_Control
 14067 ;;		_setSw_Main
 14068 ;;		_Sw_DimmerOnFunc
 14069 ;;		_DimmerLights_Exceptions
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           
 14074                           ;psect for function _setBuz
 14075  17A7                     _setBuz:	
 14076                           
 14077                           ;incstack = 0
 14078                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14079                           ;setBuz@count stored from wreg
 14080  17A7  0020               	movlb	0	; select bank0
 14081  17A8  00AC               	movwf	setBuz@count
 14082                           
 14083                           ;Buzzer_B1.c: 23: time /= 10;
 14084  17A9  300A               	movlw	10
 14085  17AA  00A0               	movwf	___awdiv@divisor
 14086  17AB  3000               	movlw	0
 14087  17AC  00A1               	movwf	___awdiv@divisor+1
 14088  17AD  082A               	movf	setBuz@time+1,w
 14089  17AE  01A3               	clrf	___awdiv@dividend+1
 14090  17AF  07A3               	addwf	___awdiv@dividend+1,f
 14091  17B0  0829               	movf	setBuz@time,w
 14092  17B1  01A2               	clrf	___awdiv@dividend
 14093  17B2  07A2               	addwf	___awdiv@dividend,f
 14094  17B3  3196  26FD  3197   	fcall	___awdiv
 14095  17B6  0020               	movlb	0	; select bank0
 14096  17B7  0821               	movf	?___awdiv+1,w
 14097  17B8  01AA               	clrf	setBuz@time+1
 14098  17B9  07AA               	addwf	setBuz@time+1,f
 14099  17BA  0820               	movf	?___awdiv,w
 14100  17BB  01A9               	clrf	setBuz@time
 14101  17BC  07A9               	addwf	setBuz@time,f
 14102                           
 14103                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14104  17BD  0021               	movlb	1	; select bank1
 14105  17BE  1C30               	btfss	_Buz1^(0+128),0
 14106  17BF  0008               	return
 14107                           
 14108                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14109  17C0  18B0               	btfsc	_Buz1^(0+128),1
 14110  17C1  2FD8               	goto	l110
 14111                           
 14112                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14113  17C2  14B0               	bsf	_Buz1^(0+128),1
 14114                           
 14115                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14116  17C3  01B1               	clrf	(_Buz1^(0+128)+1)
 14117  17C4  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14118                           
 14119                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14120  17C5  0020               	movlb	0	; select bank0
 14121  17C6  082C               	movf	setBuz@count,w
 14122  17C7  00AB               	movwf	??_setBuz
 14123  17C8  082B               	movf	??_setBuz,w
 14124  17C9  0021               	movlb	1	; select bank1
 14125  17CA  00B3               	movwf	(_Buz1^(0+128)+3)
 14126                           
 14127                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14128  17CB  0020               	movlb	0	; select bank0
 14129  17CC  082A               	movf	setBuz@time+1,w
 14130  17CD  0021               	movlb	1	; select bank1
 14131  17CE  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14132  17CF  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14133  17D0  0020               	movlb	0	; select bank0
 14134  17D1  0829               	movf	setBuz@time,w
 14135  17D2  0021               	movlb	1	; select bank1
 14136  17D3  01B6               	clrf	(_Buz1^(0+128)+6)
 14137  17D4  07B6               	addwf	(_Buz1^(0+128)+6),f
 14138                           
 14139                           ;Buzzer_B1.c: 30: RB3 = 1;
 14140  17D5  0020               	movlb	0	; select bank0
 14141  17D6  158D               	bsf	13,3	;volatile
 14142                           
 14143                           ;Buzzer_B1.c: 31: } else {
 14144  17D7  0008               	return
 14145  17D8                     l110:	
 14146                           
 14147                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14148  17D8  19B0               	btfsc	_Buz1^(0+128),3
 14149  17D9  2FEC               	goto	l112
 14150                           
 14151                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14152  17DA  15B0               	bsf	_Buz1^(0+128),3
 14153                           
 14154                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14155  17DB  0020               	movlb	0	; select bank0
 14156  17DC  082C               	movf	setBuz@count,w
 14157  17DD  00AB               	movwf	??_setBuz
 14158  17DE  082B               	movf	??_setBuz,w
 14159  17DF  0021               	movlb	1	; select bank1
 14160  17E0  00B4               	movwf	(_Buz1^(0+128)+4)
 14161                           
 14162                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14163  17E1  0020               	movlb	0	; select bank0
 14164  17E2  082A               	movf	setBuz@time+1,w
 14165  17E3  0021               	movlb	1	; select bank1
 14166  17E4  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14167  17E5  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14168  17E6  0020               	movlb	0	; select bank0
 14169  17E7  0829               	movf	setBuz@time,w
 14170  17E8  0021               	movlb	1	; select bank1
 14171  17E9  01B8               	clrf	(_Buz1^(0+128)+8)
 14172  17EA  07B8               	addwf	(_Buz1^(0+128)+8),f
 14173                           
 14174                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14175  17EB  0008               	return
 14176  17EC                     l112:	
 14177  17EC  1A30               	btfsc	_Buz1^(0+128),4
 14178  17ED  0008               	return
 14179                           
 14180                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14181  17EE  1630               	bsf	_Buz1^(0+128),4
 14182                           
 14183                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14184  17EF  0020               	movlb	0	; select bank0
 14185  17F0  082C               	movf	setBuz@count,w
 14186  17F1  00AB               	movwf	??_setBuz
 14187  17F2  082B               	movf	??_setBuz,w
 14188  17F3  0021               	movlb	1	; select bank1
 14189  17F4  00B5               	movwf	(_Buz1^(0+128)+5)
 14190                           
 14191                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14192  17F5  0020               	movlb	0	; select bank0
 14193  17F6  082A               	movf	setBuz@time+1,w
 14194  17F7  0021               	movlb	1	; select bank1
 14195  17F8  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14196  17F9  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14197  17FA  0020               	movlb	0	; select bank0
 14198  17FB  0829               	movf	setBuz@time,w
 14199  17FC  0021               	movlb	1	; select bank1
 14200  17FD  01BA               	clrf	(_Buz1^(0+128)+10)
 14201  17FE  07BA               	addwf	(_Buz1^(0+128)+10),f
 14202  17FF  0008               	return
 14203  1800                     __end_of_setBuz:	
 14204                           
 14205                           	psect	text87
 14206  16FD                     __ptext87:	
 14207 ;; *************** function ___awdiv *****************
 14208 ;; Defined at:
 14209 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14210 ;; Parameters:    Size  Location     Type
 14211 ;;  divisor         2    0[BANK0 ] int 
 14212 ;;  dividend        2    2[BANK0 ] int 
 14213 ;; Auto vars:     Size  Location     Type
 14214 ;;  quotient        2    7[BANK0 ] int 
 14215 ;;  sign            1    6[BANK0 ] unsigned char 
 14216 ;;  counter         1    5[BANK0 ] unsigned char 
 14217 ;; Return value:  Size  Location     Type
 14218 ;;                  2    0[BANK0 ] int 
 14219 ;; Registers used:
 14220 ;;		wreg, status,2, status,0
 14221 ;; Tracked objects:
 14222 ;;		On entry : 0/0
 14223 ;;		On exit  : 0/0
 14224 ;;		Unchanged: 0/0
 14225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;Total ram usage:        9 bytes
 14231 ;; Hardware stack levels used:    1
 14232 ;; Hardware stack levels required when called:    5
 14233 ;; This function calls:
 14234 ;;		Nothing
 14235 ;; This function is called by:
 14236 ;;		_setBuz
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function ___awdiv
 14242  16FD                     ___awdiv:	
 14243                           
 14244                           ;incstack = 0
 14245                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14246  16FD  0020               	movlb	0	; select bank0
 14247  16FE  01A6               	clrf	___awdiv@sign
 14248  16FF  1FA1               	btfss	___awdiv@divisor+1,7
 14249  1700  2F08               	goto	l8113
 14250  1701  09A0               	comf	___awdiv@divisor,f
 14251  1702  09A1               	comf	___awdiv@divisor+1,f
 14252  1703  0AA0               	incf	___awdiv@divisor,f
 14253  1704  1903               	skipnz
 14254  1705  0AA1               	incf	___awdiv@divisor+1,f
 14255  1706  01A6               	clrf	___awdiv@sign
 14256  1707  0AA6               	incf	___awdiv@sign,f
 14257  1708                     l8113:	
 14258  1708  1FA3               	btfss	___awdiv@dividend+1,7
 14259  1709  2F13               	goto	l8119
 14260  170A  09A2               	comf	___awdiv@dividend,f
 14261  170B  09A3               	comf	___awdiv@dividend+1,f
 14262  170C  0AA2               	incf	___awdiv@dividend,f
 14263  170D  1903               	skipnz
 14264  170E  0AA3               	incf	___awdiv@dividend+1,f
 14265  170F  3001               	movlw	1
 14266  1710  00A4               	movwf	??___awdiv
 14267  1711  0824               	movf	??___awdiv,w
 14268  1712  06A6               	xorwf	___awdiv@sign,f
 14269  1713                     l8119:	
 14270  1713  01A7               	clrf	___awdiv@quotient
 14271  1714  01A8               	clrf	___awdiv@quotient+1
 14272  1715  0821               	movf	___awdiv@divisor+1,w
 14273  1716  0420               	iorwf	___awdiv@divisor,w
 14274  1717  1903               	skipnz
 14275  1718  2F42               	goto	l8141
 14276  1719  01A5               	clrf	___awdiv@counter
 14277  171A  0AA5               	incf	___awdiv@counter,f
 14278  171B                     l8129:	
 14279  171B  1BA1               	btfsc	___awdiv@divisor+1,7
 14280  171C  2F27               	goto	l8131
 14281  171D  3001               	movlw	1
 14282  171E                     u8085:	
 14283  171E  35A0               	lslf	___awdiv@divisor,f
 14284  171F  0DA1               	rlf	___awdiv@divisor+1,f
 14285  1720  0B89               	decfsz	9,f
 14286  1721  2F1E               	goto	u8085
 14287  1722  3001               	movlw	1
 14288  1723  00A4               	movwf	??___awdiv
 14289  1724  0824               	movf	??___awdiv,w
 14290  1725  07A5               	addwf	___awdiv@counter,f
 14291  1726  2F1B               	goto	l8129
 14292  1727                     l8131:	
 14293  1727  3001               	movlw	1
 14294  1728                     u8105:	
 14295  1728  35A7               	lslf	___awdiv@quotient,f
 14296  1729  0DA8               	rlf	___awdiv@quotient+1,f
 14297  172A  0B89               	decfsz	9,f
 14298  172B  2F28               	goto	u8105
 14299  172C  0821               	movf	___awdiv@divisor+1,w
 14300  172D  0223               	subwf	___awdiv@dividend+1,w
 14301  172E  1D03               	skipz
 14302  172F  2F32               	goto	u8115
 14303  1730  0820               	movf	___awdiv@divisor,w
 14304  1731  0222               	subwf	___awdiv@dividend,w
 14305  1732                     u8115:	
 14306  1732  1C03               	skipc
 14307  1733  2F39               	goto	l8137
 14308  1734  0820               	movf	___awdiv@divisor,w
 14309  1735  02A2               	subwf	___awdiv@dividend,f
 14310  1736  0821               	movf	___awdiv@divisor+1,w
 14311  1737  3BA3               	subwfb	___awdiv@dividend+1,f
 14312  1738  1427               	bsf	___awdiv@quotient,0
 14313  1739                     l8137:	
 14314  1739  3001               	movlw	1
 14315  173A                     u8125:	
 14316  173A  36A1               	lsrf	___awdiv@divisor+1,f
 14317  173B  0CA0               	rrf	___awdiv@divisor,f
 14318  173C  0B89               	decfsz	9,f
 14319  173D  2F3A               	goto	u8125
 14320  173E  3001               	movlw	1
 14321  173F  02A5               	subwf	___awdiv@counter,f
 14322  1740  1D03               	btfss	3,2
 14323  1741  2F27               	goto	l8131
 14324  1742                     l8141:	
 14325  1742  0826               	movf	___awdiv@sign,w
 14326  1743  1903               	btfsc	3,2
 14327  1744  2F4A               	goto	l8145
 14328  1745  09A7               	comf	___awdiv@quotient,f
 14329  1746  09A8               	comf	___awdiv@quotient+1,f
 14330  1747  0AA7               	incf	___awdiv@quotient,f
 14331  1748  1903               	skipnz
 14332  1749  0AA8               	incf	___awdiv@quotient+1,f
 14333  174A                     l8145:	
 14334  174A  0828               	movf	___awdiv@quotient+1,w
 14335  174B  01A1               	clrf	?___awdiv+1
 14336  174C  07A1               	addwf	?___awdiv+1,f
 14337  174D  0827               	movf	___awdiv@quotient,w
 14338  174E  01A0               	clrf	?___awdiv
 14339  174F  07A0               	addwf	?___awdiv,f
 14340  1750  0008               	return
 14341  1751                     __end_of___awdiv:	
 14342                           
 14343                           	psect	text88
 14344  1E98                     __ptext88:	
 14345 ;; *************** function _DelayOff_Initialization *****************
 14346 ;; Defined at:
 14347 ;;		line 26 in file "../src/DelayOff_B1.c"
 14348 ;; Parameters:    Size  Location     Type
 14349 ;;		None
 14350 ;; Auto vars:     Size  Location     Type
 14351 ;;		None
 14352 ;; Return value:  Size  Location     Type
 14353 ;;		None               void
 14354 ;; Registers used:
 14355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14356 ;; Tracked objects:
 14357 ;;		On entry : 0/0
 14358 ;;		On exit  : 0/0
 14359 ;;		Unchanged: 0/0
 14360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;Total ram usage:        0 bytes
 14366 ;; Hardware stack levels used:    1
 14367 ;; Hardware stack levels required when called:    7
 14368 ;; This function calls:
 14369 ;;		_DlyOff_Initialization
 14370 ;; This function is called by:
 14371 ;;		_main
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           
 14376                           ;psect for function _DelayOff_Initialization
 14377  1E98                     _DelayOff_Initialization:	
 14378                           
 14379                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14380                           
 14381                           ;incstack = 0
 14382                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14383  1E98  3001               	movlw	1
 14384  1E99  3190  2066  319E   	fcall	_DlyOff_Initialization
 14385                           
 14386                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14387  1E9C  3002               	movlw	2
 14388  1E9D  3190  2066  319E   	fcall	_DlyOff_Initialization
 14389                           
 14390                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14391  1EA0  3003               	movlw	3
 14392  1EA1  3190  2066         	fcall	_DlyOff_Initialization
 14393  1EA3  0008               	return
 14394  1EA4                     __end_of_DelayOff_Initialization:	
 14395                           
 14396                           	psect	text89
 14397  1066                     __ptext89:	
 14398 ;; *************** function _DlyOff_Initialization *****************
 14399 ;; Defined at:
 14400 ;;		line 56 in file "../src/DelayOff_B1.c"
 14401 ;; Parameters:    Size  Location     Type
 14402 ;;  sw              1    wreg     unsigned char 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;  sw              1    2[BANK0 ] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;		None               void
 14407 ;; Registers used:
 14408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:        1 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    6
 14421 ;; This function calls:
 14422 ;;		_DelayOffPointSelect
 14423 ;; This function is called by:
 14424 ;;		_DelayOff_Initialization
 14425 ;; This function uses a non-reentrant model
 14426 ;;
 14427                           
 14428                           
 14429                           ;psect for function _DlyOff_Initialization
 14430  1066                     _DlyOff_Initialization:	
 14431                           
 14432                           ;incstack = 0
 14433                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14434                           ;DlyOff_Initialization@sw stored from wreg
 14435  1066  0020               	movlb	0	; select bank0
 14436  1067  00A2               	movwf	DlyOff_Initialization@sw
 14437                           
 14438                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14439  1068  0822               	movf	DlyOff_Initialization@sw,w
 14440  1069  3191  219B         	fcall	_DelayOffPointSelect
 14441                           
 14442                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14443  106B  0872               	movf	_DelayOff,w
 14444  106C  0086               	movwf	6
 14445  106D  0187               	clrf	7
 14446  106E  1401               	bsf	1,0
 14447  106F  0008               	return
 14448  1070                     __end_of_DlyOff_Initialization:	
 14449                           
 14450                           	psect	text90
 14451  119B                     __ptext90:	
 14452 ;; *************** function _DelayOffPointSelect *****************
 14453 ;; Defined at:
 14454 ;;		line 7 in file "../src/DelayOff_B1.c"
 14455 ;; Parameters:    Size  Location     Type
 14456 ;;  sw              1    wreg     unsigned char 
 14457 ;; Auto vars:     Size  Location     Type
 14458 ;;  sw              1    1[BANK0 ] unsigned char 
 14459 ;; Return value:  Size  Location     Type
 14460 ;;		None               void
 14461 ;; Registers used:
 14462 ;;		wreg
 14463 ;; Tracked objects:
 14464 ;;		On entry : 0/0
 14465 ;;		On exit  : 0/0
 14466 ;;		Unchanged: 0/0
 14467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14472 ;;Total ram usage:        2 bytes
 14473 ;; Hardware stack levels used:    1
 14474 ;; Hardware stack levels required when called:    5
 14475 ;; This function calls:
 14476 ;;		Nothing
 14477 ;; This function is called by:
 14478 ;;		_DlyOff_Initialization
 14479 ;;		_DlyOff_Main
 14480 ;;		_setDelayOff_GO
 14481 ;; This function uses a non-reentrant model
 14482 ;;
 14483                           
 14484                           
 14485                           ;psect for function _DelayOffPointSelect
 14486  119B                     _DelayOffPointSelect:	
 14487                           
 14488                           ;incstack = 0
 14489                           ; Regs used in _DelayOffPointSelect: [wreg]
 14490                           ;DelayOffPointSelect@sw stored from wreg
 14491  119B  0020               	movlb	0	; select bank0
 14492  119C  00A1               	movwf	DelayOffPointSelect@sw
 14493                           
 14494                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14495  119D  0821               	movf	DelayOffPointSelect@sw,w
 14496  119E  3A01               	xorlw	1
 14497  119F  1D03               	skipz
 14498  11A0  29A6               	goto	l8037
 14499                           
 14500                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14501  11A1  30E6               	movlw	_DlySw1& (0+255)
 14502  11A2  00A0               	movwf	??_DelayOffPointSelect
 14503  11A3  0820               	movf	??_DelayOffPointSelect,w
 14504  11A4  00F2               	movwf	_DelayOff
 14505                           
 14506                           ;DelayOff_B1.c: 11: }
 14507  11A5  0008               	return
 14508  11A6                     l8037:	
 14509                           
 14510                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14511  11A6  0821               	movf	DelayOffPointSelect@sw,w
 14512  11A7  3A02               	xorlw	2
 14513  11A8  1D03               	skipz
 14514  11A9  29AF               	goto	l8041
 14515                           
 14516                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14517  11AA  30E8               	movlw	_DlySw2& (0+255)
 14518  11AB  00A0               	movwf	??_DelayOffPointSelect
 14519  11AC  0820               	movf	??_DelayOffPointSelect,w
 14520  11AD  00F2               	movwf	_DelayOff
 14521                           
 14522                           ;DelayOff_B1.c: 16: }
 14523  11AE  0008               	return
 14524  11AF                     l8041:	
 14525                           
 14526                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14527  11AF  0821               	movf	DelayOffPointSelect@sw,w
 14528  11B0  3A03               	xorlw	3
 14529  11B1  1D03               	skipz
 14530  11B2  0008               	return
 14531                           
 14532                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14533  11B3  30EA               	movlw	_DlySw3& (0+255)
 14534  11B4  00A0               	movwf	??_DelayOffPointSelect
 14535  11B5  0820               	movf	??_DelayOffPointSelect,w
 14536  11B6  00F2               	movwf	_DelayOff
 14537  11B7  0008               	return
 14538  11B8                     __end_of_DelayOffPointSelect:	
 14539                           
 14540                           	psect	text91
 14541  10D2                     __ptext91:	
 14542 ;; *************** function _CC2500_PowerOnInitial *****************
 14543 ;; Defined at:
 14544 ;;		line 122 in file "../src/CC2500_B1.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;		None
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;		None
 14549 ;; Return value:  Size  Location     Type
 14550 ;;		None               void
 14551 ;; Registers used:
 14552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;Total ram usage:        0 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    8
 14565 ;; This function calls:
 14566 ;;		_CC2500_ClearRXFIFO
 14567 ;;		_CC2500_ClearTXFIFO
 14568 ;;		_CC2500_FrequencyCabr
 14569 ;;		_CC2500_InitPATable
 14570 ;;		_CC2500_InitSetREG
 14571 ;;		_CC2500_PowerRST
 14572 ;;		_CC2500_SIDLEMode
 14573 ;; This function is called by:
 14574 ;;		_main
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           
 14579                           ;psect for function _CC2500_PowerOnInitial
 14580  10D2                     _CC2500_PowerOnInitial:	
 14581                           
 14582                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14586  10D2  3195  259B  3190   	fcall	_CC2500_PowerRST
 14587                           
 14588                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14589  10D5  3193  2371  3190   	fcall	_CC2500_InitSetREG
 14590                           
 14591                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14592  10D8  3191  21D5  3190   	fcall	_CC2500_InitPATable
 14593                           
 14594                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14595  10DB  319E  262E  3190   	fcall	_CC2500_ClearTXFIFO
 14596                           
 14597                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14598  10DE  319E  262A  3190   	fcall	_CC2500_ClearRXFIFO
 14599                           
 14600                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14601  10E1  319E  268C  3190   	fcall	_CC2500_FrequencyCabr
 14602                           
 14603                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14604  10E4  319E  2632         	fcall	_CC2500_SIDLEMode
 14605  10E6  0008               	return
 14606  10E7                     __end_of_CC2500_PowerOnInitial:	
 14607                           
 14608                           	psect	text92
 14609  1E32                     __ptext92:	
 14610 ;; *************** function _CC2500_SIDLEMode *****************
 14611 ;; Defined at:
 14612 ;;		line 212 in file "../src/CC2500_B1.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;		None
 14615 ;; Auto vars:     Size  Location     Type
 14616 ;;		None
 14617 ;; Return value:  Size  Location     Type
 14618 ;;		None               void
 14619 ;; Registers used:
 14620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14621 ;; Tracked objects:
 14622 ;;		On entry : 0/0
 14623 ;;		On exit  : 0/0
 14624 ;;		Unchanged: 0/0
 14625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;Total ram usage:        0 bytes
 14631 ;; Hardware stack levels used:    1
 14632 ;; Hardware stack levels required when called:    7
 14633 ;; This function calls:
 14634 ;;		_CC2500_WriteCommand
 14635 ;; This function is called by:
 14636 ;;		_CC2500_PowerOnInitial
 14637 ;; This function uses a non-reentrant model
 14638 ;;
 14639                           
 14640                           
 14641                           ;psect for function _CC2500_SIDLEMode
 14642  1E32                     _CC2500_SIDLEMode:	
 14643                           
 14644                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14645                           
 14646                           ;incstack = 0
 14647                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14648  1E32  3036               	movlw	54
 14649  1E33  3191  2116         	fcall	_CC2500_WriteCommand
 14650  1E35  0008               	return
 14651  1E36                     __end_of_CC2500_SIDLEMode:	
 14652                           
 14653                           	psect	text93
 14654  159B                     __ptext93:	
 14655 ;; *************** function _CC2500_PowerRST *****************
 14656 ;; Defined at:
 14657 ;;		line 135 in file "../src/CC2500_B1.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;		None
 14660 ;; Auto vars:     Size  Location     Type
 14661 ;;		None
 14662 ;; Return value:  Size  Location     Type
 14663 ;;		None               void
 14664 ;; Registers used:
 14665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14666 ;; Tracked objects:
 14667 ;;		On entry : 0/0
 14668 ;;		On exit  : 0/0
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;Total ram usage:        1 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; Hardware stack levels required when called:    6
 14678 ;; This function calls:
 14679 ;;		_CC2500_WriteByte
 14680 ;;		_DelayTime_1us
 14681 ;;		_Timeout_Counter
 14682 ;;		_set_TimeoutCleared
 14683 ;; This function is called by:
 14684 ;;		_CC2500_PowerOnInitial
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688                           
 14689                           ;psect for function _CC2500_PowerRST
 14690  159B                     _CC2500_PowerRST:	
 14691                           
 14692                           ;CC2500_B1.c: 136: RC1 = 0;
 14693                           
 14694                           ;incstack = 0
 14695                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14696  159B  0020               	movlb	0	; select bank0
 14697  159C  108E               	bcf	14,1	;volatile
 14698                           
 14699                           ;CC2500_B1.c: 137: RC0 = 0;
 14700  159D  100E               	bcf	14,0	;volatile
 14701                           
 14702                           ;CC2500_B1.c: 138: RC4 = 1;
 14703  159E  160E               	bsf	14,4	;volatile
 14704                           
 14705                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14706  159F  300A               	movlw	10
 14707  15A0  00A0               	movwf	DelayTime_1us@count
 14708  15A1  3000               	movlw	0
 14709  15A2  00A1               	movwf	DelayTime_1us@count+1
 14710  15A3  3192  22FC  3195   	fcall	_DelayTime_1us
 14711                           
 14712                           ;CC2500_B1.c: 140: RC4 = 0;
 14713  15A6  0020               	movlb	0	; select bank0
 14714  15A7  120E               	bcf	14,4	;volatile
 14715                           
 14716                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14717  15A8  300A               	movlw	10
 14718  15A9  00A0               	movwf	DelayTime_1us@count
 14719  15AA  3000               	movlw	0
 14720  15AB  00A1               	movwf	DelayTime_1us@count+1
 14721  15AC  3192  22FC  3195   	fcall	_DelayTime_1us
 14722                           
 14723                           ;CC2500_B1.c: 142: RC4 = 1;
 14724  15AF  0020               	movlb	0	; select bank0
 14725  15B0  160E               	bsf	14,4	;volatile
 14726                           
 14727                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14728  15B1  3028               	movlw	40
 14729  15B2  00A0               	movwf	DelayTime_1us@count
 14730  15B3  3000               	movlw	0
 14731  15B4  00A1               	movwf	DelayTime_1us@count+1
 14732  15B5  3192  22FC  3195   	fcall	_DelayTime_1us
 14733                           
 14734                           ;CC2500_B1.c: 144: RC4 = 0;
 14735  15B8  0020               	movlb	0	; select bank0
 14736  15B9  120E               	bcf	14,4	;volatile
 14737                           
 14738                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14739  15BA  3030               	movlw	48
 14740  15BB  00A6               	movwf	??_CC2500_PowerRST
 14741  15BC  0826               	movf	??_CC2500_PowerRST,w
 14742  15BD  00F5               	movwf	_SPI0Buffer
 14743                           
 14744                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14745  15BE  2DC2               	goto	l9025
 14746  15BF                     l9023:	
 14747                           
 14748                           ;CC2500_B1.c: 147: Timeout_Counter();
 14749  15BF  3190  20BD  3195   	fcall	_Timeout_Counter
 14750  15C2                     l9025:	
 14751  15C2  0020               	movlb	0	; select bank0
 14752  15C3  1D0E               	btfss	14,2	;volatile
 14753  15C4  2DC8               	goto	l9029
 14754  15C5  0021               	movlb	1	; select bank1
 14755  15C6  1D2D               	btfss	(_myMain^(0+128)+13),2
 14756  15C7  2DBF               	goto	l9023
 14757  15C8                     l9029:	
 14758                           
 14759                           ;CC2500_B1.c: 148: };
 14760                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14761  15C8  319E  263A  3195   	fcall	_set_TimeoutCleared
 14762                           
 14763                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14764  15CB  3190  2095  3195   	fcall	_CC2500_WriteByte
 14765                           
 14766                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14767  15CE  2DD2               	goto	l9035
 14768  15CF                     l9033:	
 14769                           
 14770                           ;CC2500_B1.c: 152: Timeout_Counter();
 14771  15CF  3190  20BD  3195   	fcall	_Timeout_Counter
 14772  15D2                     l9035:	
 14773  15D2  0020               	movlb	0	; select bank0
 14774  15D3  1D0E               	btfss	14,2	;volatile
 14775  15D4  2DD8               	goto	l9039
 14776  15D5  0021               	movlb	1	; select bank1
 14777  15D6  1D2D               	btfss	(_myMain^(0+128)+13),2
 14778  15D7  2DCF               	goto	l9033
 14779  15D8                     l9039:	
 14780                           
 14781                           ;CC2500_B1.c: 153: };
 14782                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14783  15D8  319E  263A         	fcall	_set_TimeoutCleared
 14784                           
 14785                           ;CC2500_B1.c: 155: RC0 = 0;
 14786  15DA  0020               	movlb	0	; select bank0
 14787  15DB  100E               	bcf	14,0	;volatile
 14788                           
 14789                           ;CC2500_B1.c: 156: RC4 = 1;
 14790  15DC  160E               	bsf	14,4	;volatile
 14791  15DD  0008               	return
 14792  15DE                     __end_of_CC2500_PowerRST:	
 14793                           
 14794                           	psect	text94
 14795  1371                     __ptext94:	
 14796 ;; *************** function _CC2500_InitSetREG *****************
 14797 ;; Defined at:
 14798 ;;		line 162 in file "../src/CC2500_B1.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;		None
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14803 ;;  temp2           1    7[BANK0 ] unsigned char 
 14804 ;;  temp1           1    6[BANK0 ] unsigned char 
 14805 ;; Return value:  Size  Location     Type
 14806 ;;		None               void
 14807 ;; Registers used:
 14808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14809 ;; Tracked objects:
 14810 ;;		On entry : 0/0
 14811 ;;		On exit  : 0/0
 14812 ;;		Unchanged: 0/0
 14813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;Total ram usage:        4 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:    7
 14821 ;; This function calls:
 14822 ;;		_CC2500_WriteREG
 14823 ;; This function is called by:
 14824 ;;		_CC2500_PowerOnInitial
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           
 14829                           ;psect for function _CC2500_InitSetREG
 14830  1371                     _CC2500_InitSetREG:	
 14831                           
 14832                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14833                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14834                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14835                           
 14836                           ;incstack = 0
 14837                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14838  1371  0020               	movlb	0	; select bank0
 14839  1372  01A8               	clrf	CC2500_InitSetREG@loop_c
 14840  1373                     L10:	
 14841  1373  302F               	movlw	47
 14842  1374  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14843  1375  1803               	btfsc	3,0
 14844  1376  0008               	return
 14845                           
 14846                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14847  1377  0828               	movf	CC2500_InitSetREG@loop_c,w
 14848  1378  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14849  1379  0084               	movwf	4
 14850  137A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14851  137B  1803               	skipnc
 14852  137C  3E01               	addlw	1
 14853  137D  0085               	movwf	5
 14854  137E  0800               	movf	0,w	;code access
 14855  137F  00A5               	movwf	??_CC2500_InitSetREG
 14856  1380  0825               	movf	??_CC2500_InitSetREG,w
 14857  1381  00A6               	movwf	CC2500_InitSetREG@temp1
 14858                           
 14859                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14860  1382  0828               	movf	CC2500_InitSetREG@loop_c,w
 14861  1383  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14862  1384  0084               	movwf	4
 14863  1385  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14864  1386  1803               	skipnc
 14865  1387  3E01               	addlw	1
 14866  1388  0085               	movwf	5
 14867  1389  0800               	movf	0,w	;code access
 14868  138A  00A5               	movwf	??_CC2500_InitSetREG
 14869  138B  0825               	movf	??_CC2500_InitSetREG,w
 14870  138C  00A7               	movwf	CC2500_InitSetREG@temp2
 14871                           
 14872                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14873  138D  0827               	movf	CC2500_InitSetREG@temp2,w
 14874  138E  00A5               	movwf	??_CC2500_InitSetREG
 14875  138F  0825               	movf	??_CC2500_InitSetREG,w
 14876  1390  00A2               	movwf	CC2500_WriteREG@value
 14877  1391  0826               	movf	CC2500_InitSetREG@temp1,w
 14878  1392  3192  2253  3193   	fcall	_CC2500_WriteREG
 14879  1395  3001               	movlw	1
 14880  1396  0020               	movlb	0	; select bank0
 14881  1397  00A5               	movwf	??_CC2500_InitSetREG
 14882  1398  0825               	movf	??_CC2500_InitSetREG,w
 14883  1399  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14884  139A  2B73               	goto	L10
 14885  139B                     __end_of_CC2500_InitSetREG:	
 14886                           
 14887                           	psect	text95
 14888  11D5                     __ptext95:	
 14889 ;; *************** function _CC2500_InitPATable *****************
 14890 ;; Defined at:
 14891 ;;		line 177 in file "../src/CC2500_B1.c"
 14892 ;; Parameters:    Size  Location     Type
 14893 ;;		None
 14894 ;; Auto vars:     Size  Location     Type
 14895 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14896 ;;  temp            1    6[BANK0 ] unsigned char 
 14897 ;; Return value:  Size  Location     Type
 14898 ;;		None               void
 14899 ;; Registers used:
 14900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14901 ;; Tracked objects:
 14902 ;;		On entry : 0/0
 14903 ;;		On exit  : 0/0
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;Total ram usage:        3 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; Hardware stack levels required when called:    7
 14913 ;; This function calls:
 14914 ;;		_CC2500_WriteREG
 14915 ;; This function is called by:
 14916 ;;		_CC2500_PowerOnInitial
 14917 ;; This function uses a non-reentrant model
 14918 ;;
 14919                           
 14920                           
 14921                           ;psect for function _CC2500_InitPATable
 14922  11D5                     _CC2500_InitPATable:	
 14923                           
 14924                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14925                           ;CC2500_B1.c: 179: unsigned char temp;
 14926                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14927                           
 14928                           ;incstack = 0
 14929                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14930  11D5  0020               	movlb	0	; select bank0
 14931  11D6  01A7               	clrf	CC2500_InitPATable@loop_d
 14932  11D7                     L11:	
 14933  11D7  3008               	movlw	8
 14934  11D8  0227               	subwf	CC2500_InitPATable@loop_d,w
 14935  11D9  1803               	btfsc	3,0
 14936  11DA  0008               	return
 14937                           
 14938                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14939  11DB  0827               	movf	CC2500_InitPATable@loop_d,w
 14940  11DC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14941  11DD  0084               	movwf	4
 14942  11DE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14943  11DF  1803               	skipnc
 14944  11E0  3E01               	addlw	1
 14945  11E1  0085               	movwf	5
 14946  11E2  0800               	movf	0,w	;code access
 14947  11E3  00A5               	movwf	??_CC2500_InitPATable
 14948  11E4  0825               	movf	??_CC2500_InitPATable,w
 14949  11E5  00A6               	movwf	CC2500_InitPATable@temp
 14950                           
 14951                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14952  11E6  0826               	movf	CC2500_InitPATable@temp,w
 14953  11E7  00A5               	movwf	??_CC2500_InitPATable
 14954  11E8  0825               	movf	??_CC2500_InitPATable,w
 14955  11E9  00A2               	movwf	CC2500_WriteREG@value
 14956  11EA  303E               	movlw	62
 14957  11EB  3192  2253  3191   	fcall	_CC2500_WriteREG
 14958  11EE  3001               	movlw	1
 14959  11EF  0020               	movlb	0	; select bank0
 14960  11F0  00A5               	movwf	??_CC2500_InitPATable
 14961  11F1  0825               	movf	??_CC2500_InitPATable,w
 14962  11F2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14963  11F3  29D7               	goto	L11
 14964  11F4                     __end_of_CC2500_InitPATable:	
 14965                           
 14966                           	psect	text96
 14967  1253                     __ptext96:	
 14968 ;; *************** function _CC2500_WriteREG *****************
 14969 ;; Defined at:
 14970 ;;		line 254 in file "../src/CC2500_B1.c"
 14971 ;; Parameters:    Size  Location     Type
 14972 ;;  w_addr          1    wreg     unsigned char 
 14973 ;;  value           1    2[BANK0 ] unsigned char 
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;		None               void
 14978 ;; Registers used:
 14979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        3 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    6
 14992 ;; This function calls:
 14993 ;;		_CC2500_WriteByte
 14994 ;;		_Timeout_Counter
 14995 ;;		_set_TimeoutCleared
 14996 ;; This function is called by:
 14997 ;;		_CC2500_InitSetREG
 14998 ;;		_CC2500_InitPATable
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           
 15003                           ;psect for function _CC2500_WriteREG
 15004  1253                     _CC2500_WriteREG:	
 15005                           
 15006                           ;incstack = 0
 15007                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15008                           ;CC2500_WriteREG@w_addr stored from wreg
 15009  1253  0020               	movlb	0	; select bank0
 15010  1254  00A4               	movwf	CC2500_WriteREG@w_addr
 15011                           
 15012                           ;CC2500_B1.c: 255: RC4 = 0;
 15013  1255  120E               	bcf	14,4	;volatile
 15014                           
 15015                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15016  1256  0824               	movf	CC2500_WriteREG@w_addr,w
 15017  1257  00A3               	movwf	??_CC2500_WriteREG
 15018  1258  0823               	movf	??_CC2500_WriteREG,w
 15019  1259  00F5               	movwf	_SPI0Buffer
 15020                           
 15021                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15022  125A  2A5E               	goto	l8727
 15023  125B                     l8725:	
 15024                           
 15025                           ;CC2500_B1.c: 258: Timeout_Counter();
 15026  125B  3190  20BD  3192   	fcall	_Timeout_Counter
 15027  125E                     l8727:	
 15028  125E  0020               	movlb	0	; select bank0
 15029  125F  1D0E               	btfss	14,2	;volatile
 15030  1260  2A64               	goto	l8731
 15031  1261  0021               	movlb	1	; select bank1
 15032  1262  1D2D               	btfss	(_myMain^(0+128)+13),2
 15033  1263  2A5B               	goto	l8725
 15034  1264                     l8731:	
 15035                           
 15036                           ;CC2500_B1.c: 259: };
 15037                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15038  1264  319E  263A  3192   	fcall	_set_TimeoutCleared
 15039                           
 15040                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15041  1267  3190  2095  3192   	fcall	_CC2500_WriteByte
 15042                           
 15043                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15044  126A  0020               	movlb	0	; select bank0
 15045  126B  0822               	movf	CC2500_WriteREG@value,w
 15046  126C  00A3               	movwf	??_CC2500_WriteREG
 15047  126D  0823               	movf	??_CC2500_WriteREG,w
 15048  126E  00F5               	movwf	_SPI0Buffer
 15049                           
 15050                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15051  126F  3190  2095         	fcall	_CC2500_WriteByte
 15052                           
 15053                           ;CC2500_B1.c: 265: RC4 = 1;
 15054  1271  0020               	movlb	0	; select bank0
 15055  1272  160E               	bsf	14,4	;volatile
 15056  1273  0008               	return
 15057  1274                     __end_of_CC2500_WriteREG:	
 15058                           
 15059                           	psect	text97
 15060  1E8C                     __ptext97:	
 15061 ;; *************** function _CC2500_FrequencyCabr *****************
 15062 ;; Defined at:
 15063 ;;		line 204 in file "../src/CC2500_B1.c"
 15064 ;; Parameters:    Size  Location     Type
 15065 ;;		None
 15066 ;; Auto vars:     Size  Location     Type
 15067 ;;		None
 15068 ;; Return value:  Size  Location     Type
 15069 ;;		None               void
 15070 ;; Registers used:
 15071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15072 ;; Tracked objects:
 15073 ;;		On entry : 0/0
 15074 ;;		On exit  : 0/0
 15075 ;;		Unchanged: 0/0
 15076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;Total ram usage:        0 bytes
 15082 ;; Hardware stack levels used:    1
 15083 ;; Hardware stack levels required when called:    7
 15084 ;; This function calls:
 15085 ;;		_CC2500_WriteCommand
 15086 ;;		_DelayTime_1us
 15087 ;; This function is called by:
 15088 ;;		_CC2500_PowerOnInitial
 15089 ;; This function uses a non-reentrant model
 15090 ;;
 15091                           
 15092                           
 15093                           ;psect for function _CC2500_FrequencyCabr
 15094  1E8C                     _CC2500_FrequencyCabr:	
 15095                           
 15096                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15097                           
 15098                           ;incstack = 0
 15099                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15100  1E8C  3033               	movlw	51
 15101  1E8D  3191  2116  319E   	fcall	_CC2500_WriteCommand
 15102                           
 15103                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15104  1E90  30E8               	movlw	232
 15105  1E91  0020               	movlb	0	; select bank0
 15106  1E92  00A0               	movwf	DelayTime_1us@count
 15107  1E93  3003               	movlw	3
 15108  1E94  00A1               	movwf	DelayTime_1us@count+1
 15109  1E95  3192  22FC         	fcall	_DelayTime_1us
 15110  1E97  0008               	return
 15111  1E98                     __end_of_CC2500_FrequencyCabr:	
 15112                           
 15113                           	psect	text98
 15114  12FC                     __ptext98:	
 15115 ;; *************** function _DelayTime_1us *****************
 15116 ;; Defined at:
 15117 ;;		line 323 in file "../src/CC2500_B1.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  count           2    0[BANK0 ] int 
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  j               2    4[BANK0 ] unsigned int 
 15122 ;;  i               2    2[BANK0 ] unsigned int 
 15123 ;; Return value:  Size  Location     Type
 15124 ;;		None               void
 15125 ;; Registers used:
 15126 ;;		wreg, status,2
 15127 ;; Tracked objects:
 15128 ;;		On entry : 0/0
 15129 ;;		On exit  : 0/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;Total ram usage:        6 bytes
 15137 ;; Hardware stack levels used:    1
 15138 ;; Hardware stack levels required when called:    5
 15139 ;; This function calls:
 15140 ;;		Nothing
 15141 ;; This function is called by:
 15142 ;;		_CC2500_PowerRST
 15143 ;;		_CC2500_FrequencyCabr
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           
 15148                           ;psect for function _DelayTime_1us
 15149  12FC                     _DelayTime_1us:	
 15150                           
 15151                           ;CC2500_B1.c: 324: unsigned int i, j;
 15152                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15153                           
 15154                           ;incstack = 0
 15155                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15156  12FC  3001               	movlw	1
 15157  12FD  0020               	movlb	0	; select bank0
 15158  12FE  00A2               	movwf	DelayTime_1us@i
 15159  12FF  3000               	movlw	0
 15160  1300  00A3               	movwf	DelayTime_1us@i+1
 15161  1301                     l402:	
 15162  1301  0821               	movf	DelayTime_1us@count+1,w
 15163  1302  0223               	subwf	DelayTime_1us@i+1,w
 15164  1303  1D03               	skipz
 15165  1304  2B07               	goto	u8935
 15166  1305  0820               	movf	DelayTime_1us@count,w
 15167  1306  0222               	subwf	DelayTime_1us@i,w
 15168  1307                     u8935:	
 15169  1307  1803               	btfsc	3,0
 15170  1308  0008               	return
 15171                           
 15172                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15173  1309  01A4               	clrf	DelayTime_1us@j
 15174  130A  01A5               	clrf	DelayTime_1us@j+1
 15175  130B  3000               	movlw	0
 15176  130C  0225               	subwf	DelayTime_1us@j+1,w
 15177  130D  3002               	movlw	2
 15178  130E  1903               	skipnz
 15179  130F  0224               	subwf	DelayTime_1us@j,w
 15180  1310  1803               	btfsc	3,0
 15181  1311  2B1D               	goto	l8719
 15182  1312                     l8717:	
 15183  1312  3001               	movlw	1
 15184  1313  07A4               	addwf	DelayTime_1us@j,f
 15185  1314  3000               	movlw	0
 15186  1315  3DA5               	addwfc	DelayTime_1us@j+1,f
 15187  1316  3000               	movlw	0
 15188  1317  0225               	subwf	DelayTime_1us@j+1,w
 15189  1318  3002               	movlw	2
 15190  1319  1903               	skipnz
 15191  131A  0224               	subwf	DelayTime_1us@j,w
 15192  131B  1C03               	skipc
 15193  131C  2B12               	goto	l8717
 15194  131D                     l8719:	
 15195  131D  3001               	movlw	1
 15196  131E  07A2               	addwf	DelayTime_1us@i,f
 15197  131F  3000               	movlw	0
 15198  1320  3DA3               	addwfc	DelayTime_1us@i+1,f
 15199  1321  2B01               	goto	l402
 15200  1322                     __end_of_DelayTime_1us:	
 15201                           
 15202                           	psect	text99
 15203  1E2E                     __ptext99:	
 15204 ;; *************** function _CC2500_ClearTXFIFO *****************
 15205 ;; Defined at:
 15206 ;;		line 190 in file "../src/CC2500_B1.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;		None
 15209 ;; Auto vars:     Size  Location     Type
 15210 ;;		None
 15211 ;; Return value:  Size  Location     Type
 15212 ;;		None               void
 15213 ;; Registers used:
 15214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15215 ;; Tracked objects:
 15216 ;;		On entry : 0/0
 15217 ;;		On exit  : 0/0
 15218 ;;		Unchanged: 0/0
 15219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;Total ram usage:        0 bytes
 15225 ;; Hardware stack levels used:    1
 15226 ;; Hardware stack levels required when called:    7
 15227 ;; This function calls:
 15228 ;;		_CC2500_WriteCommand
 15229 ;; This function is called by:
 15230 ;;		_CC2500_PowerOnInitial
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           
 15235                           ;psect for function _CC2500_ClearTXFIFO
 15236  1E2E                     _CC2500_ClearTXFIFO:	
 15237                           
 15238                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15239                           
 15240                           ;incstack = 0
 15241                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15242  1E2E  303B               	movlw	59
 15243  1E2F  3191  2116         	fcall	_CC2500_WriteCommand
 15244  1E31  0008               	return
 15245  1E32                     __end_of_CC2500_ClearTXFIFO:	
 15246                           
 15247                           	psect	text100
 15248  1E2A                     __ptext100:	
 15249 ;; *************** function _CC2500_ClearRXFIFO *****************
 15250 ;; Defined at:
 15251 ;;		line 197 in file "../src/CC2500_B1.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;		None
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;		None
 15256 ;; Return value:  Size  Location     Type
 15257 ;;		None               void
 15258 ;; Registers used:
 15259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;Total ram usage:        0 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    7
 15272 ;; This function calls:
 15273 ;;		_CC2500_WriteCommand
 15274 ;; This function is called by:
 15275 ;;		_CC2500_PowerOnInitial
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           
 15280                           ;psect for function _CC2500_ClearRXFIFO
 15281  1E2A                     _CC2500_ClearRXFIFO:	
 15282                           
 15283                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15284                           
 15285                           ;incstack = 0
 15286                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15287  1E2A  303A               	movlw	58
 15288  1E2B  3191  2116         	fcall	_CC2500_WriteCommand
 15289  1E2D  0008               	return
 15290  1E2E                     __end_of_CC2500_ClearRXFIFO:	
 15291                           
 15292                           	psect	text101
 15293  1116                     __ptext101:	
 15294 ;; *************** function _CC2500_WriteCommand *****************
 15295 ;; Defined at:
 15296 ;;		line 288 in file "../src/CC2500_B1.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  command         1    wreg     unsigned char 
 15299 ;; Auto vars:     Size  Location     Type
 15300 ;;  command         1    3[BANK0 ] unsigned char 
 15301 ;; Return value:  Size  Location     Type
 15302 ;;		None               void
 15303 ;; Registers used:
 15304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15305 ;; Tracked objects:
 15306 ;;		On entry : 0/0
 15307 ;;		On exit  : 0/0
 15308 ;;		Unchanged: 0/0
 15309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;Total ram usage:        2 bytes
 15315 ;; Hardware stack levels used:    1
 15316 ;; Hardware stack levels required when called:    6
 15317 ;; This function calls:
 15318 ;;		_CC2500_WriteByte
 15319 ;;		_Timeout_Counter
 15320 ;;		_set_TimeoutCleared
 15321 ;; This function is called by:
 15322 ;;		_CC2500_TxData
 15323 ;;		_CC2500_ClearTXFIFO
 15324 ;;		_CC2500_ClearRXFIFO
 15325 ;;		_CC2500_FrequencyCabr
 15326 ;;		_CC2500_SIDLEMode
 15327 ;;		_setRF_Main
 15328 ;;		_RF_RxDisable
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           
 15333                           ;psect for function _CC2500_WriteCommand
 15334  1116                     _CC2500_WriteCommand:	
 15335                           
 15336                           ;incstack = 0
 15337                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15338                           ;CC2500_WriteCommand@command stored from wreg
 15339  1116  0020               	movlb	0	; select bank0
 15340  1117  00A3               	movwf	CC2500_WriteCommand@command
 15341                           
 15342                           ;CC2500_B1.c: 289: RC4 = 0;
 15343  1118  120E               	bcf	14,4	;volatile
 15344                           
 15345                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15346  1119  0823               	movf	CC2500_WriteCommand@command,w
 15347  111A  00A2               	movwf	??_CC2500_WriteCommand
 15348  111B  0822               	movf	??_CC2500_WriteCommand,w
 15349  111C  00F5               	movwf	_SPI0Buffer
 15350                           
 15351                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15352  111D  2921               	goto	l8497
 15353  111E                     l8495:	
 15354                           
 15355                           ;CC2500_B1.c: 293: Timeout_Counter();
 15356  111E  3190  20BD  3191   	fcall	_Timeout_Counter
 15357  1121                     l8497:	
 15358  1121  0020               	movlb	0	; select bank0
 15359  1122  1D0E               	btfss	14,2	;volatile
 15360  1123  2927               	goto	l8501
 15361  1124  0021               	movlb	1	; select bank1
 15362  1125  1D2D               	btfss	(_myMain^(0+128)+13),2
 15363  1126  291E               	goto	l8495
 15364  1127                     l8501:	
 15365                           
 15366                           ;CC2500_B1.c: 294: };
 15367                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15368  1127  319E  263A  3191   	fcall	_set_TimeoutCleared
 15369                           
 15370                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15371  112A  3190  2095         	fcall	_CC2500_WriteByte
 15372                           
 15373                           ;CC2500_B1.c: 298: RC4 = 1;
 15374  112C  0020               	movlb	0	; select bank0
 15375  112D  160E               	bsf	14,4	;volatile
 15376  112E  0008               	return
 15377  112F                     __end_of_CC2500_WriteCommand:	
 15378                           
 15379                           	psect	text102
 15380  1E3A                     __ptext102:	
 15381 ;; *************** function _set_TimeoutCleared *****************
 15382 ;; Defined at:
 15383 ;;		line 278 in file "../src/Main_B1.c"
 15384 ;; Parameters:    Size  Location     Type
 15385 ;;		None
 15386 ;; Auto vars:     Size  Location     Type
 15387 ;;		None
 15388 ;; Return value:  Size  Location     Type
 15389 ;;		None               void
 15390 ;; Registers used:
 15391 ;;		status,2
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;Total ram usage:        0 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    5
 15404 ;; This function calls:
 15405 ;;		Nothing
 15406 ;; This function is called by:
 15407 ;;		_CC2500_TxData
 15408 ;;		_CC2500_RxData
 15409 ;;		_CC2500_PowerRST
 15410 ;;		_CC2500_WriteREG
 15411 ;;		_CC2500_WriteCommand
 15412 ;;		_CC2500_ReadStatus
 15413 ;;		_TouchPower
 15414 ;;		_CC2500_ReadREG
 15415 ;;		_getAD
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           
 15420                           ;psect for function _set_TimeoutCleared
 15421  1E3A                     _set_TimeoutCleared:	
 15422                           
 15423                           ;Main_B1.c: 279: myMain.Timeout = 0;
 15424                           
 15425                           ;incstack = 0
 15426                           ; Regs used in _set_TimeoutCleared: [status,2]
 15427  1E3A  0021               	movlb	1	; select bank1
 15428  1E3B  112D               	bcf	(_myMain^(0+128)+13),2
 15429                           
 15430                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
 15431  1E3C  01AE               	clrf	(_myMain^(0+128)+14)
 15432  1E3D  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15433  1E3E  0008               	return
 15434  1E3F                     __end_of_set_TimeoutCleared:	
 15435                           
 15436                           	psect	text103
 15437  10BD                     __ptext103:	
 15438 ;; *************** function _Timeout_Counter *****************
 15439 ;; Defined at:
 15440 ;;		line 268 in file "../src/Main_B1.c"
 15441 ;; Parameters:    Size  Location     Type
 15442 ;;		None
 15443 ;; Auto vars:     Size  Location     Type
 15444 ;;		None
 15445 ;; Return value:  Size  Location     Type
 15446 ;;		None               void
 15447 ;; Registers used:
 15448 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15449 ;; Tracked objects:
 15450 ;;		On entry : 0/0
 15451 ;;		On exit  : 0/0
 15452 ;;		Unchanged: 0/0
 15453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;Total ram usage:        0 bytes
 15459 ;; Hardware stack levels used:    1
 15460 ;; Hardware stack levels required when called:    5
 15461 ;; This function calls:
 15462 ;;		Nothing
 15463 ;; This function is called by:
 15464 ;;		_CC2500_TxData
 15465 ;;		_CC2500_RxData
 15466 ;;		_CC2500_PowerRST
 15467 ;;		_CC2500_WriteREG
 15468 ;;		_CC2500_WriteCommand
 15469 ;;		_CC2500_ReadStatus
 15470 ;;		_TouchPower
 15471 ;;		_CC2500_ReadREG
 15472 ;;		_getAD
 15473 ;; This function uses a non-reentrant model
 15474 ;;
 15475                           
 15476                           
 15477                           ;psect for function _Timeout_Counter
 15478  10BD                     _Timeout_Counter:	
 15479                           
 15480                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
 15481                           
 15482                           ;incstack = 0
 15483                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15484  10BD  3001               	movlw	1
 15485  10BE  0021               	movlb	1	; select bank1
 15486  10BF  07AE               	addwf	(_myMain^(0+128)+14),f
 15487  10C0  3000               	movlw	0
 15488  10C1  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 15489                           
 15490                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
 15491  10C2  300E               	movlw	14
 15492  10C3  3EA0               	addlw	_myMain& (0+255)
 15493  10C4  0086               	movwf	6
 15494  10C5  0187               	clrf	7
 15495  10C6  3F40               	moviw [0]fsr1
 15496  10C7  3A10               	xorlw	16
 15497  10C8  1D03               	skipz
 15498  10C9  28CC               	goto	u8495
 15499  10CA  3F41               	moviw [1]fsr1
 15500  10CB  3A27               	xorlw	39
 15501  10CC                     u8495:	
 15502  10CC  1D03               	skipz
 15503  10CD  0008               	return
 15504                           
 15505                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
 15506  10CE  01AE               	clrf	(_myMain^(0+128)+14)
 15507  10CF  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15508                           
 15509                           ;Main_B1.c: 272: myMain.Timeout = 1;
 15510  10D0  152D               	bsf	(_myMain^(0+128)+13),2
 15511  10D1  0008               	return
 15512  10D2                     __end_of_Timeout_Counter:	
 15513                           
 15514                           	psect	text104
 15515  1095                     __ptext104:	
 15516 ;; *************** function _CC2500_WriteByte *****************
 15517 ;; Defined at:
 15518 ;;		line 222 in file "../src/CC2500_B1.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;		None
 15521 ;; Auto vars:     Size  Location     Type
 15522 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15523 ;; Return value:  Size  Location     Type
 15524 ;;		None               void
 15525 ;; Registers used:
 15526 ;;		wreg, status,2, status,0
 15527 ;; Tracked objects:
 15528 ;;		On entry : 0/0
 15529 ;;		On exit  : 0/0
 15530 ;;		Unchanged: 0/0
 15531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;Total ram usage:        2 bytes
 15537 ;; Hardware stack levels used:    1
 15538 ;; Hardware stack levels required when called:    5
 15539 ;; This function calls:
 15540 ;;		Nothing
 15541 ;; This function is called by:
 15542 ;;		_CC2500_TxData
 15543 ;;		_CC2500_RxData
 15544 ;;		_CC2500_PowerRST
 15545 ;;		_CC2500_WriteREG
 15546 ;;		_CC2500_WriteCommand
 15547 ;;		_CC2500_ReadStatus
 15548 ;;		_CC2500_ReadREG
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           
 15553                           ;psect for function _CC2500_WriteByte
 15554  1095                     _CC2500_WriteByte:	
 15555                           
 15556                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15557                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15561  1095  0020               	movlb	0	; select bank0
 15562  1096  01A1               	clrf	CC2500_WriteByte@loop_a
 15563  1097                     L12:	
 15564  1097  3008               	movlw	8
 15565  1098  0221               	subwf	CC2500_WriteByte@loop_a,w
 15566  1099  1803               	btfsc	3,0
 15567  109A  0008               	return
 15568                           
 15569                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15570  109B  1FF5               	btfss	_SPI0Buffer,7
 15571  109C  289F               	goto	l358
 15572                           
 15573                           ;CC2500_B1.c: 226: RC0 = 1;
 15574  109D  140E               	bsf	14,0	;volatile
 15575  109E  28A0               	goto	l359
 15576  109F                     l358:	
 15577                           
 15578                           ;CC2500_B1.c: 227: else
 15579                           ;CC2500_B1.c: 228: RC0 = 0;
 15580  109F  100E               	bcf	14,0	;volatile
 15581  10A0                     l359:	
 15582                           
 15583                           ;CC2500_B1.c: 229: RC1 = 1;
 15584  10A0  148E               	bsf	14,1	;volatile
 15585                           
 15586                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15587  10A1  1003               	clrc
 15588  10A2  0DF5               	rlf	_SPI0Buffer,f
 15589                           
 15590                           ;CC2500_B1.c: 231: RC1 = 0;
 15591  10A3  108E               	bcf	14,1	;volatile
 15592  10A4  3001               	movlw	1
 15593  10A5  00A0               	movwf	??_CC2500_WriteByte
 15594  10A6  0820               	movf	??_CC2500_WriteByte,w
 15595  10A7  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15596  10A8  2897               	goto	L12
 15597  10A9                     __end_of_CC2500_WriteByte:	
 15598                           
 15599                           	psect	text105
 15600  1668                     __ptext105:	
 15601 ;; *************** function _Buzzer_Main *****************
 15602 ;; Defined at:
 15603 ;;		line 46 in file "../src/Buzzer_B1.c"
 15604 ;; Parameters:    Size  Location     Type
 15605 ;;		None
 15606 ;; Auto vars:     Size  Location     Type
 15607 ;;		None
 15608 ;; Return value:  Size  Location     Type
 15609 ;;		None               void
 15610 ;; Registers used:
 15611 ;;		wreg, status,2, status,0
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;Total ram usage:        1 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    5
 15624 ;; This function calls:
 15625 ;;		Nothing
 15626 ;; This function is called by:
 15627 ;;		_main
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631                           
 15632                           ;psect for function _Buzzer_Main
 15633  1668                     _Buzzer_Main:	
 15634                           
 15635                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15636                           
 15637                           ;incstack = 0
 15638                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15639  1668  0021               	movlb	1	; select bank1
 15640  1669  1CB0               	btfss	_Buz1^(0+128),1
 15641  166A  0008               	return
 15642                           
 15643                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15644  166B  3001               	movlw	1
 15645  166C  07B1               	addwf	(_Buz1^(0+128)+1),f
 15646  166D  3000               	movlw	0
 15647  166E  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 15648                           
 15649                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15650  166F  0837               	movf	((_Buz1+1)^(0+128)+6),w
 15651  1670  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 15652  1671  1D03               	skipz
 15653  1672  2E75               	goto	u10285
 15654  1673  0836               	movf	(_Buz1^(0+128)+6),w
 15655  1674  0231               	subwf	(_Buz1^(0+128)+1),w
 15656  1675                     u10285:	
 15657  1675  1C03               	skipc
 15658  1676  0008               	return
 15659                           
 15660                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15661  1677  01B1               	clrf	(_Buz1^(0+128)+1)
 15662  1678  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 15663                           
 15664                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15665  1679  12B0               	bcf	_Buz1^(0+128),5
 15666  167A  0020               	movlb	0	; select bank0
 15667  167B  1D8D               	btfss	13,3	;volatile
 15668  167C  2E7F               	goto	l9551
 15669  167D  0021               	movlb	1	; select bank1
 15670  167E  16B0               	bsf	_Buz1^(0+128),5
 15671  167F                     l9551:	
 15672                           
 15673                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15674  167F  0021               	movlb	1	; select bank1
 15675  1680  1AB0               	btfsc	_Buz1^(0+128),5
 15676  1681  2EAB               	goto	l120
 15677                           
 15678                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15679  1682  08B3               	movf	(_Buz1^(0+128)+3),f
 15680  1683  1D03               	skipz
 15681  1684  2EA7               	goto	l121
 15682                           
 15683                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15684  1685  1DB0               	btfss	_Buz1^(0+128),3
 15685  1686  2E95               	goto	l122
 15686                           
 15687                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15688  1687  11B0               	bcf	_Buz1^(0+128),3
 15689                           
 15690                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15691  1688  0834               	movf	(_Buz1^(0+128)+4),w
 15692  1689  0020               	movlb	0	; select bank0
 15693  168A  00A0               	movwf	??_Buzzer_Main
 15694  168B  0820               	movf	??_Buzzer_Main,w
 15695  168C  0021               	movlb	1	; select bank1
 15696  168D  00B3               	movwf	(_Buz1^(0+128)+3)
 15697                           
 15698                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15699  168E  0839               	movf	((_Buz1+1)^(0+128)+8),w
 15700  168F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15701  1690  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15702  1691  0838               	movf	(_Buz1^(0+128)+8),w
 15703  1692  01B6               	clrf	(_Buz1^(0+128)+6)
 15704  1693  07B6               	addwf	(_Buz1^(0+128)+6),f
 15705                           
 15706                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15707  1694  0008               	return
 15708  1695                     l122:	
 15709  1695  1E30               	btfss	_Buz1^(0+128),4
 15710  1696  2EA5               	goto	l124
 15711                           
 15712                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15713  1697  1230               	bcf	_Buz1^(0+128),4
 15714                           
 15715                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15716  1698  0835               	movf	(_Buz1^(0+128)+5),w
 15717  1699  0020               	movlb	0	; select bank0
 15718  169A  00A0               	movwf	??_Buzzer_Main
 15719  169B  0820               	movf	??_Buzzer_Main,w
 15720  169C  0021               	movlb	1	; select bank1
 15721  169D  00B3               	movwf	(_Buz1^(0+128)+3)
 15722                           
 15723                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15724  169E  083B               	movf	((_Buz1+1)^(0+128)+10),w
 15725  169F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15726  16A0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15727  16A1  083A               	movf	(_Buz1^(0+128)+10),w
 15728  16A2  01B6               	clrf	(_Buz1^(0+128)+6)
 15729  16A3  07B6               	addwf	(_Buz1^(0+128)+6),f
 15730                           
 15731                           ;Buzzer_B1.c: 62: } else {
 15732  16A4  0008               	return
 15733  16A5                     l124:	
 15734                           
 15735                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15736  16A5  10B0               	bcf	_Buz1^(0+128),1
 15737                           
 15738                           ;Buzzer_B1.c: 64: }
 15739                           ;Buzzer_B1.c: 65: } else {
 15740  16A6  0008               	return
 15741  16A7                     l121:	
 15742                           
 15743                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15744  16A7  16B0               	bsf	_Buz1^(0+128),5
 15745                           
 15746                           ;Buzzer_B1.c: 68: RB3 = 1;
 15747  16A8  0020               	movlb	0	; select bank0
 15748  16A9  158D               	bsf	13,3	;volatile
 15749                           
 15750                           ;Buzzer_B1.c: 69: }
 15751                           ;Buzzer_B1.c: 70: } else {
 15752  16AA  0008               	return
 15753  16AB                     l120:	
 15754                           
 15755                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15756  16AB  12B0               	bcf	_Buz1^(0+128),5
 15757                           
 15758                           ;Buzzer_B1.c: 73: RB3 = 0;
 15759  16AC  0020               	movlb	0	; select bank0
 15760  16AD  118D               	bcf	13,3	;volatile
 15761                           
 15762                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15763  16AE  3001               	movlw	1
 15764  16AF  0021               	movlb	1	; select bank1
 15765  16B0  02B3               	subwf	(_Buz1^(0+128)+3),f
 15766  16B1  0008               	return
 15767  16B2                     __end_of_Buzzer_Main:	
 15768                           
 15769                           	psect	text106
 15770  1E21                     __ptext106:	
 15771 ;; *************** function _Buzzer_Initialization *****************
 15772 ;; Defined at:
 15773 ;;		line 11 in file "../src/Buzzer_B1.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;		None
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;		None
 15778 ;; Return value:  Size  Location     Type
 15779 ;;		None               void
 15780 ;; Registers used:
 15781 ;;		None
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;Total ram usage:        0 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    5
 15794 ;; This function calls:
 15795 ;;		Nothing
 15796 ;; This function is called by:
 15797 ;;		_main
 15798 ;; This function uses a non-reentrant model
 15799 ;;
 15800                           
 15801                           
 15802                           ;psect for function _Buzzer_Initialization
 15803  1E21                     _Buzzer_Initialization:	
 15804                           
 15805                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15806                           
 15807                           ;incstack = 0
 15808                           ; Regs used in _Buzzer_Initialization: []
 15809  1E21  0021               	movlb	1	; select bank1
 15810  1E22  1430               	bsf	_Buz1^(0+128),0
 15811  1E23  0008               	return
 15812  1E24                     __end_of_Buzzer_Initialization:	
 15813                           
 15814                           	psect	intentry
 15815  0004                     __pintentry:	
 15816 ;; *************** function _ISR *****************
 15817 ;; Defined at:
 15818 ;;		line 107 in file "../src/MCU_B1.c"
 15819 ;; Parameters:    Size  Location     Type
 15820 ;;		None
 15821 ;; Auto vars:     Size  Location     Type
 15822 ;;		None
 15823 ;; Return value:  Size  Location     Type
 15824 ;;		None               void
 15825 ;; Registers used:
 15826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15827 ;; Tracked objects:
 15828 ;;		On entry : 0/0
 15829 ;;		On exit  : 0/0
 15830 ;;		Unchanged: 0/0
 15831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;Total ram usage:        1 bytes
 15837 ;; Hardware stack levels used:    1
 15838 ;; Hardware stack levels required when called:    4
 15839 ;; This function calls:
 15840 ;;		_IOC_ISR
 15841 ;;		_TMR1_ISR
 15842 ;; This function is called by:
 15843 ;;		Interrupt level 1
 15844 ;; This function uses a non-reentrant model
 15845 ;;
 15846                           
 15847  0004                     _ISR:	
 15848                           
 15849                           ;incstack = 0
 15850                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15851  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15852  0005  3180               	pagesel	$
 15853  0006  0020               	movlb	0	; select bank0
 15854  0007  087F               	movf	127,w
 15855  0008  00FB               	movwf	??_ISR
 15856                           
 15857                           ;MCU_B1.c: 109: IOC_ISR();
 15858  0009  319E  26EF  3180   	fcall	_IOC_ISR
 15859                           
 15860                           ;MCU_B1.c: 111: ;;
 15861                           ;MCU_B1.c: 113: TMR1_ISR();
 15862  000C  3193  23C5         	fcall	_TMR1_ISR
 15863  000E  087B               	movf	??_ISR,w
 15864  000F  0020               	movlb	0	; select bank0
 15865  0010  00FF               	movwf	127
 15866  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15867  0012  0009               	retfie
 15868  0013                     __end_of_ISR:	
 15869                           
 15870                           	psect	text108
 15871  13C5                     __ptext108:	
 15872 ;; *************** function _TMR1_ISR *****************
 15873 ;; Defined at:
 15874 ;;		line 209 in file "../src/MCU_B1.c"
 15875 ;; Parameters:    Size  Location     Type
 15876 ;;		None
 15877 ;; Auto vars:     Size  Location     Type
 15878 ;;		None
 15879 ;; Return value:  Size  Location     Type
 15880 ;;		None               void
 15881 ;; Registers used:
 15882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15883 ;; Tracked objects:
 15884 ;;		On entry : 0/0
 15885 ;;		On exit  : 0/0
 15886 ;;		Unchanged: 0/0
 15887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;Total ram usage:        0 bytes
 15893 ;; Hardware stack levels used:    1
 15894 ;; Hardware stack levels required when called:    2
 15895 ;; This function calls:
 15896 ;;		_setDimmerLights_IntrControl
 15897 ;; This function is called by:
 15898 ;;		_ISR
 15899 ;; This function uses a non-reentrant model
 15900 ;;
 15901                           
 15902                           
 15903                           ;psect for function _TMR1_ISR
 15904  13C5                     _TMR1_ISR:	
 15905                           
 15906                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 15907                           
 15908                           ;incstack = 0
 15909                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15910  13C5  0021               	movlb	1	; select bank1
 15911  13C6  1C11               	btfss	17,0	;volatile
 15912  13C7  0008               	return
 15913  13C8  0020               	movlb	0	; select bank0
 15914  13C9  1C11               	btfss	17,0	;volatile
 15915  13CA  0008               	return
 15916                           
 15917                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 15918  13CB  30FA               	movlw	250
 15919  13CC  0097               	movwf	23	;volatile
 15920                           
 15921                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 15922  13CD  3038               	movlw	56
 15923  13CE  0096               	movwf	22	;volatile
 15924                           
 15925                           ;MCU_B1.c: 214: TMR1IF = 0;
 15926  13CF  1011               	bcf	17,0	;volatile
 15927                           
 15928                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 15929  13D0  3001               	movlw	1
 15930  13D1  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15931                           
 15932                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 15933  13D4  3002               	movlw	2
 15934  13D5  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15935                           
 15936                           ;MCU_B1.c: 229: setDimmerLights_IntrControl(3);
 15937  13D8  3003               	movlw	3
 15938  13D9  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15939                           
 15940                           ;MCU_B1.c: 234: Timer1.Count++;
 15941  13DC  3001               	movlw	1
 15942  13DD  0021               	movlb	1	; select bank1
 15943  13DE  07C9               	addwf	(_Timer1^(0+128)+1),f
 15944  13DF  3000               	movlw	0
 15945  13E0  3DCA               	addwfc	((_Timer1+1)^(0+128)+1),f
 15946                           
 15947                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 15948  13E1  3001               	movlw	1
 15949  13E2  3EC8               	addlw	_Timer1& (0+255)
 15950  13E3  0086               	movwf	6
 15951  13E4  0187               	clrf	7
 15952  13E5  3F40               	moviw [0]fsr1
 15953  13E6  3A64               	xorlw	100
 15954  13E7  1D03               	skipz
 15955  13E8  2BEB               	goto	u750_25
 15956  13E9  3F41               	moviw [1]fsr1
 15957  13EA  3A00               	xorlw	0
 15958  13EB                     u750_25:	
 15959  13EB  1D03               	skipz
 15960  13EC  0008               	return
 15961                           
 15962                           ;MCU_B1.c: 236: {
 15963                           ;MCU_B1.c: 237: Timer1.Count = 0;
 15964  13ED  01C9               	clrf	(_Timer1^(0+128)+1)
 15965  13EE  01CA               	clrf	((_Timer1+1)^(0+128)+1)
 15966                           
 15967                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 15968  13EF  1448               	bsf	_Timer1^(0+128),0
 15969  13F0  0008               	return
 15970  13F1                     __end_of_TMR1_ISR:	
 15971                           
 15972                           	psect	text109
 15973  0045                     __ptext109:	
 15974 ;; *************** function _setDimmerLights_IntrControl *****************
 15975 ;; Defined at:
 15976 ;;		line 94 in file "../src/Dimmer_B1.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  lights          1    wreg     unsigned char 
 15979 ;; Auto vars:     Size  Location     Type
 15980 ;;  lights          1    4[COMMON] unsigned char 
 15981 ;; Return value:  Size  Location     Type
 15982 ;;		None               void
 15983 ;; Registers used:
 15984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15985 ;; Tracked objects:
 15986 ;;		On entry : 0/0
 15987 ;;		On exit  : 0/0
 15988 ;;		Unchanged: 0/0
 15989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;Total ram usage:        3 bytes
 15995 ;; Hardware stack levels used:    1
 15996 ;; Hardware stack levels required when called:    1
 15997 ;; This function calls:
 15998 ;;		_DimmerIntrPointSelect
 15999 ;; This function is called by:
 16000 ;;		_TMR1_ISR
 16001 ;; This function uses a non-reentrant model
 16002 ;;
 16003                           
 16004                           
 16005                           ;psect for function _setDimmerLights_IntrControl
 16006  0045                     _setDimmerLights_IntrControl:	
 16007                           
 16008                           ;incstack = 0
 16009                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16010                           ;setDimmerLights_IntrControl@lights stored from wreg
 16011  0045  00FA               	movwf	setDimmerLights_IntrControl@lights
 16012                           
 16013                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 16014  0046  087A               	movf	setDimmerLights_IntrControl@lights,w
 16015  0047  3191  212F  3180   	fcall	_DimmerIntrPointSelect
 16016                           
 16017                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 16018  004A  0874               	movf	_DimmerLightsIntr,w
 16019  004B  0086               	movwf	6
 16020  004C  3001               	movlw	1	; select bank2/3
 16021  004D  0087               	movwf	7
 16022  004E  1C01               	btfss	1,0
 16023  004F  28A5               	goto	i1l7053
 16024                           
 16025                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 16026  0050  3001               	movlw	1
 16027  0051  00F8               	movwf	??_setDimmerLights_IntrControl
 16028  0052  0874               	movf	_DimmerLightsIntr,w
 16029  0053  3E03               	addlw	3
 16030  0054  0086               	movwf	6
 16031  0055  3001               	movlw	1	; select bank2/3
 16032  0056  0087               	movwf	7
 16033  0057  0878               	movf	??_setDimmerLights_IntrControl,w
 16034  0058  0781               	addwf	1,f
 16035                           
 16036                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 16037  0059  0873               	movf	_Dimmer,w
 16038  005A  3E02               	addlw	2
 16039  005B  0086               	movwf	6
 16040  005C  0187               	clrf	7
 16041  005D  0874               	movf	_DimmerLightsIntr,w
 16042  005E  3E04               	addlw	4
 16043  005F  0084               	movwf	4
 16044  0060  3001               	movlw	1	; select bank2/3
 16045  0061  0085               	movwf	5
 16046  0062  0800               	movf	0,w
 16047  0063  0701               	addwf	1,w
 16048  0064  00F8               	movwf	??_setDimmerLights_IntrControl
 16049  0065  01F9               	clrf	??_setDimmerLights_IntrControl+1
 16050  0066  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 16051  0067  0874               	movf	_DimmerLightsIntr,w
 16052  0068  3E03               	addlw	3
 16053  0069  0086               	movwf	6
 16054  006A  3001               	movlw	1	; select bank2/3
 16055  006B  0087               	movwf	7
 16056  006C  0879               	movf	??_setDimmerLights_IntrControl+1,w
 16057  006D  3A80               	xorlw	128
 16058  006E  3C80               	sublw	128
 16059  006F  1D03               	skipz
 16060  0070  2873               	goto	u635_25
 16061  0071  0878               	movf	??_setDimmerLights_IntrControl,w
 16062  0072  0201               	subwf	1,w
 16063  0073                     u635_25:	
 16064  0073  1C03               	skipc
 16065  0074  29B3               	goto	i1l7119
 16066                           
 16067                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 16068  0075  0874               	movf	_DimmerLightsIntr,w
 16069  0076  3E03               	addlw	3
 16070  0077  0086               	movwf	6
 16071  0078  3001               	movlw	1	; select bank2/3
 16072  0079  0087               	movwf	7
 16073  007A  0181               	clrf	1
 16074                           
 16075                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 16076  007B  0874               	movf	_DimmerLightsIntr,w
 16077  007C  0086               	movwf	6
 16078  007D  3001               	movlw	1	; select bank2/3
 16079  007E  0087               	movwf	7
 16080  007F  1001               	bcf	1,0
 16081                           
 16082                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 16083  0080  0874               	movf	_DimmerLightsIntr,w
 16084  0081  0086               	movwf	6
 16085  0082  3001               	movlw	1	; select bank2/3
 16086  0083  0087               	movwf	7
 16087  0084  1F01               	btfss	1,6
 16088  0085  29B3               	goto	i1l7119
 16089                           
 16090                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 16091  0086  0874               	movf	_DimmerLightsIntr,w
 16092  0087  3E08               	addlw	8
 16093  0088  0086               	movwf	6
 16094  0089  3001               	movlw	1	; select bank2/3
 16095  008A  0087               	movwf	7
 16096  008B  1401               	bsf	1,0
 16097                           
 16098                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 16099  008C  0874               	movf	_DimmerLightsIntr,w
 16100  008D  3E08               	addlw	8
 16101  008E  0086               	movwf	6
 16102  008F  3001               	movlw	1	; select bank2/3
 16103  0090  0087               	movwf	7
 16104  0091  1681               	bsf	1,5
 16105                           
 16106                           ;Dimmer_B1.c: 107: if (lights == 1) {
 16107  0092  087A               	movf	setDimmerLights_IntrControl@lights,w
 16108  0093  3A01               	xorlw	1
 16109  0094  1D03               	skipz
 16110  0095  2898               	goto	i1l7045
 16111                           
 16112                           ;Dimmer_B1.c: 108: RB4 = 1;
 16113  0096  0020               	movlb	0	; select bank0
 16114  0097  160D               	bsf	13,4	;volatile
 16115  0098                     i1l7045:	
 16116                           ;Dimmer_B1.c: 109: ;;
 16117                           
 16118                           
 16119                           ;Dimmer_B1.c: 110: }
 16120                           ;Dimmer_B1.c: 113: if (lights == 2) {
 16121  0098  087A               	movf	setDimmerLights_IntrControl@lights,w
 16122  0099  3A02               	xorlw	2
 16123  009A  1D03               	skipz
 16124  009B  289E               	goto	i1l7049
 16125                           
 16126                           ;Dimmer_B1.c: 114: RA7 = 1;
 16127  009C  0020               	movlb	0	; select bank0
 16128  009D  178C               	bsf	12,7	;volatile
 16129  009E                     i1l7049:	
 16130                           
 16131                           ;Dimmer_B1.c: 115: }
 16132                           ;Dimmer_B1.c: 118: if (lights == 3) {
 16133  009E  087A               	movf	setDimmerLights_IntrControl@lights,w
 16134  009F  3A03               	xorlw	3
 16135  00A0  1D03               	skipz
 16136  00A1  29B3               	goto	i1l7119
 16137                           
 16138                           ;Dimmer_B1.c: 119: RB1 = 1;
 16139  00A2  0020               	movlb	0	; select bank0
 16140  00A3  148D               	bsf	13,1	;volatile
 16141                           
 16142                           ;Dimmer_B1.c: 120: }
 16143                           ;Dimmer_B1.c: 122: }
 16144                           ;Dimmer_B1.c: 123: }
 16145                           ;Dimmer_B1.c: 124: } else {
 16146  00A4  29B3               	goto	i1l7119
 16147  00A5                     i1l7053:	
 16148                           
 16149                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 16150  00A5  0874               	movf	_DimmerLightsIntr,w
 16151  00A6  3E08               	addlw	8
 16152  00A7  0086               	movwf	6
 16153  00A8  3001               	movlw	1	; select bank2/3
 16154  00A9  0087               	movwf	7
 16155  00AA  1C01               	btfss	1,0
 16156  00AB  29B3               	goto	i1l7119
 16157                           
 16158                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 16159  00AC  0874               	movf	_DimmerLightsIntr,w
 16160  00AD  3E08               	addlw	8
 16161  00AE  0086               	movwf	6
 16162  00AF  3001               	movlw	1	; select bank2/3
 16163  00B0  0087               	movwf	7
 16164  00B1  1001               	bcf	1,0
 16165                           
 16166                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 16167  00B2  0874               	movf	_DimmerLightsIntr,w
 16168  00B3  0086               	movwf	6
 16169  00B4  3001               	movlw	1	; select bank2/3
 16170  00B5  0087               	movwf	7
 16171  00B6  1C81               	btfss	1,1
 16172  00B7  29B3               	goto	i1l7119
 16173                           
 16174                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 16175  00B8  3001               	movlw	1
 16176  00B9  00F8               	movwf	??_setDimmerLights_IntrControl
 16177  00BA  0A74               	incf	_DimmerLightsIntr,w
 16178  00BB  0086               	movwf	6
 16179  00BC  3001               	movlw	1	; select bank2/3
 16180  00BD  0087               	movwf	7
 16181  00BE  0878               	movf	??_setDimmerLights_IntrControl,w
 16182  00BF  0781               	addwf	1,f
 16183                           
 16184                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16185  00C0  0A74               	incf	_DimmerLightsIntr,w
 16186  00C1  0086               	movwf	6
 16187  00C2  3001               	movlw	1	; select bank2/3
 16188  00C3  0087               	movwf	7
 16189  00C4  0874               	movf	_DimmerLightsIntr,w
 16190  00C5  3E02               	addlw	2
 16191  00C6  0084               	movwf	4
 16192  00C7  3001               	movlw	1	; select bank2/3
 16193  00C8  0085               	movwf	5
 16194  00C9  0800               	movf	0,w
 16195  00CA  0201               	subwf	1,w
 16196  00CB  1C03               	skipc
 16197  00CC  29B3               	goto	i1l7119
 16198                           
 16199                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 16200  00CD  0A74               	incf	_DimmerLightsIntr,w
 16201  00CE  0086               	movwf	6
 16202  00CF  3001               	movlw	1	; select bank2/3
 16203  00D0  0087               	movwf	7
 16204  00D1  0181               	clrf	1
 16205                           
 16206                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 16207  00D2  0874               	movf	_DimmerLightsIntr,w
 16208  00D3  0086               	movwf	6
 16209  00D4  3001               	movlw	1	; select bank2/3
 16210  00D5  0087               	movwf	7
 16211  00D6  1D81               	btfss	1,3
 16212  00D7  290E               	goto	i1l7079
 16213                           
 16214                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 16215  00D8  0874               	movf	_DimmerLightsIntr,w
 16216  00D9  0086               	movwf	6
 16217  00DA  3001               	movlw	1	; select bank2/3
 16218  00DB  0087               	movwf	7
 16219  00DC  1A01               	btfsc	1,4
 16220  00DD  28F5               	goto	i1l7073
 16221                           
 16222                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16223  00DE  0874               	movf	_DimmerLightsIntr,w
 16224  00DF  3E04               	addlw	4
 16225  00E0  0086               	movwf	6
 16226  00E1  3001               	movlw	1	; select bank2/3
 16227  00E2  0087               	movwf	7
 16228  00E3  3009               	movlw	9
 16229  00E4  0201               	subwf	1,w
 16230  00E5  1C03               	skipc
 16231  00E6  28EF               	goto	i1l7071
 16232                           
 16233                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 16234  00E7  0874               	movf	_DimmerLightsIntr,w
 16235  00E8  3E04               	addlw	4
 16236  00E9  0086               	movwf	6
 16237  00EA  3001               	movlw	1	; select bank2/3
 16238  00EB  0087               	movwf	7
 16239  00EC  3001               	movlw	1
 16240  00ED  0281               	subwf	1,f
 16241                           
 16242                           ;Dimmer_B1.c: 135: } else {
 16243  00EE  29B3               	goto	i1l7119
 16244  00EF                     i1l7071:	
 16245                           
 16246                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 16247  00EF  0874               	movf	_DimmerLightsIntr,w
 16248  00F0  0086               	movwf	6
 16249  00F1  3001               	movlw	1	; select bank2/3
 16250  00F2  0087               	movwf	7
 16251  00F3  1601               	bsf	1,4
 16252                           
 16253                           ;Dimmer_B1.c: 137: }
 16254                           ;Dimmer_B1.c: 138: } else {
 16255  00F4  29B3               	goto	i1l7119
 16256  00F5                     i1l7073:	
 16257                           
 16258                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16259  00F5  0874               	movf	_DimmerLightsIntr,w
 16260  00F6  3E04               	addlw	4
 16261  00F7  0086               	movwf	6
 16262  00F8  3001               	movlw	1	; select bank2/3
 16263  00F9  0087               	movwf	7
 16264  00FA  303C               	movlw	60
 16265  00FB  0201               	subwf	1,w
 16266  00FC  1803               	skipnc
 16267  00FD  2908               	goto	i1l7077
 16268                           
 16269                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 16270  00FE  3001               	movlw	1
 16271  00FF  00F8               	movwf	??_setDimmerLights_IntrControl
 16272  0100  0874               	movf	_DimmerLightsIntr,w
 16273  0101  3E04               	addlw	4
 16274  0102  0086               	movwf	6
 16275  0103  3001               	movlw	1	; select bank2/3
 16276  0104  0087               	movwf	7
 16277  0105  0878               	movf	??_setDimmerLights_IntrControl,w
 16278  0106  0781               	addwf	1,f
 16279                           
 16280                           ;Dimmer_B1.c: 141: } else {
 16281  0107  29B3               	goto	i1l7119
 16282  0108                     i1l7077:	
 16283                           
 16284                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 16285  0108  0874               	movf	_DimmerLightsIntr,w
 16286  0109  0086               	movwf	6
 16287  010A  3001               	movlw	1	; select bank2/3
 16288  010B  0087               	movwf	7
 16289  010C  1201               	bcf	1,4
 16290                           
 16291                           ;Dimmer_B1.c: 143: }
 16292                           ;Dimmer_B1.c: 144: }
 16293                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 16294  010D  29B3               	goto	i1l7119
 16295  010E                     i1l7079:	
 16296  010E  0874               	movf	_DimmerLightsIntr,w
 16297  010F  0086               	movwf	6
 16298  0110  3001               	movlw	1	; select bank2/3
 16299  0111  0087               	movwf	7
 16300  0112  1D01               	btfss	1,2
 16301  0113  2955               	goto	i1l7093
 16302                           
 16303                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16304  0114  0874               	movf	_DimmerLightsIntr,w
 16305  0115  3E05               	addlw	5
 16306  0116  0086               	movwf	6
 16307  0117  3001               	movlw	1	; select bank2/3
 16308  0118  0087               	movwf	7
 16309  0119  0874               	movf	_DimmerLightsIntr,w
 16310  011A  3E04               	addlw	4
 16311  011B  0084               	movwf	4
 16312  011C  3001               	movlw	1	; select bank2/3
 16313  011D  0085               	movwf	5
 16314  011E  0800               	movf	0,w
 16315  011F  0201               	subwf	1,w
 16316  0120  1803               	skipnc
 16317  0121  292A               	goto	i1l7085
 16318                           
 16319                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 16320  0122  0874               	movf	_DimmerLightsIntr,w
 16321  0123  3E04               	addlw	4
 16322  0124  0086               	movwf	6
 16323  0125  3001               	movlw	1	; select bank2/3
 16324  0126  0087               	movwf	7
 16325  0127  3001               	movlw	1
 16326  0128  0281               	subwf	1,f
 16327                           
 16328                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16329  0129  2941               	goto	i1l7089
 16330  012A                     i1l7085:	
 16331  012A  0874               	movf	_DimmerLightsIntr,w
 16332  012B  3E04               	addlw	4
 16333  012C  0086               	movwf	6
 16334  012D  3001               	movlw	1	; select bank2/3
 16335  012E  0087               	movwf	7
 16336  012F  0874               	movf	_DimmerLightsIntr,w
 16337  0130  3E05               	addlw	5
 16338  0131  0084               	movwf	4
 16339  0132  3001               	movlw	1	; select bank2/3
 16340  0133  0085               	movwf	5
 16341  0134  0800               	movf	0,w
 16342  0135  0201               	subwf	1,w
 16343  0136  1803               	skipnc
 16344  0137  2941               	goto	i1l7089
 16345                           
 16346                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 16347  0138  3001               	movlw	1
 16348  0139  00F8               	movwf	??_setDimmerLights_IntrControl
 16349  013A  0874               	movf	_DimmerLightsIntr,w
 16350  013B  3E04               	addlw	4
 16351  013C  0086               	movwf	6
 16352  013D  3001               	movlw	1	; select bank2/3
 16353  013E  0087               	movwf	7
 16354  013F  0878               	movf	??_setDimmerLights_IntrControl,w
 16355  0140  0781               	addwf	1,f
 16356  0141                     i1l7089:	
 16357                           
 16358                           ;Dimmer_B1.c: 150: }
 16359                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16360  0141  0874               	movf	_DimmerLightsIntr,w
 16361  0142  3E05               	addlw	5
 16362  0143  0086               	movwf	6
 16363  0144  3001               	movlw	1	; select bank2/3
 16364  0145  0087               	movwf	7
 16365  0146  0874               	movf	_DimmerLightsIntr,w
 16366  0147  3E04               	addlw	4
 16367  0148  0084               	movwf	4
 16368  0149  3001               	movlw	1	; select bank2/3
 16369  014A  0085               	movwf	5
 16370  014B  0800               	movf	0,w
 16371  014C  0601               	xorwf	1,w
 16372  014D  1D03               	skipz
 16373  014E  29B3               	goto	i1l7119
 16374                           
 16375                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 16376  014F  0874               	movf	_DimmerLightsIntr,w
 16377  0150  0086               	movwf	6
 16378  0151  3001               	movlw	1	; select bank2/3
 16379  0152  0087               	movwf	7
 16380  0153  1101               	bcf	1,2
 16381  0154  2970               	goto	i1l7099
 16382  0155                     i1l7093:	
 16383                           ;Dimmer_B1.c: 154: }
 16384                           ;Dimmer_B1.c: 155: } else {
 16385                           
 16386                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 16387                           
 16388                           
 16389                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 16390  0155  0874               	movf	_DimmerLightsIntr,w
 16391  0156  0086               	movwf	6
 16392  0157  3001               	movlw	1	; select bank2/3
 16393  0158  0087               	movwf	7
 16394  0159  1E81               	btfss	1,5
 16395  015A  2976               	goto	i1l7101
 16396                           
 16397                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 16398  015B  0874               	movf	_DimmerLightsIntr,w
 16399  015C  3E04               	addlw	4
 16400  015D  0086               	movwf	6
 16401  015E  3001               	movlw	1	; select bank2/3
 16402  015F  0087               	movwf	7
 16403  0160  3001               	movlw	1
 16404  0161  0281               	subwf	1,f
 16405                           
 16406                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16407  0162  0874               	movf	_DimmerLightsIntr,w
 16408  0163  3E05               	addlw	5
 16409  0164  0086               	movwf	6
 16410  0165  3001               	movlw	1	; select bank2/3
 16411  0166  0087               	movwf	7
 16412  0167  0874               	movf	_DimmerLightsIntr,w
 16413  0168  3E04               	addlw	4
 16414  0169  0084               	movwf	4
 16415  016A  3001               	movlw	1	; select bank2/3
 16416  016B  0085               	movwf	5
 16417  016C  0800               	movf	0,w
 16418  016D  0201               	subwf	1,w
 16419  016E  1C03               	skipc
 16420  016F  29B3               	goto	i1l7119
 16421  0170                     i1l7099:	
 16422                           
 16423                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 16424  0170  0874               	movf	_DimmerLightsIntr,w
 16425  0171  0086               	movwf	6
 16426  0172  3001               	movlw	1	; select bank2/3
 16427  0173  0087               	movwf	7
 16428  0174  1081               	bcf	1,1
 16429                           
 16430                           ;Dimmer_B1.c: 160: }
 16431                           ;Dimmer_B1.c: 161: } else {
 16432  0175  29B3               	goto	i1l7119
 16433  0176                     i1l7101:	
 16434                           
 16435                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 16436  0176  3001               	movlw	1
 16437  0177  00F8               	movwf	??_setDimmerLights_IntrControl
 16438  0178  0874               	movf	_DimmerLightsIntr,w
 16439  0179  3E04               	addlw	4
 16440  017A  0086               	movwf	6
 16441  017B  3001               	movlw	1	; select bank2/3
 16442  017C  0087               	movwf	7
 16443  017D  0878               	movf	??_setDimmerLights_IntrControl,w
 16444  017E  0781               	addwf	1,f
 16445                           
 16446                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16447  017F  0874               	movf	_DimmerLightsIntr,w
 16448  0180  3E04               	addlw	4
 16449  0181  0086               	movwf	6
 16450  0182  3001               	movlw	1	; select bank2/3
 16451  0183  0087               	movwf	7
 16452  0184  0874               	movf	_DimmerLightsIntr,w
 16453  0185  3E06               	addlw	6
 16454  0186  0084               	movwf	4
 16455  0187  3001               	movlw	1	; select bank2/3
 16456  0188  0085               	movwf	5
 16457  0189  0800               	movf	0,w
 16458  018A  0201               	subwf	1,w
 16459  018B  1C03               	skipc
 16460  018C  29B3               	goto	i1l7119
 16461                           
 16462                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 16463  018D  0874               	movf	_DimmerLightsIntr,w
 16464  018E  0086               	movwf	6
 16465  018F  3001               	movlw	1	; select bank2/3
 16466  0190  0087               	movwf	7
 16467  0191  1081               	bcf	1,1
 16468                           
 16469                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 16470  0192  0874               	movf	_DimmerLightsIntr,w
 16471  0193  0086               	movwf	6
 16472  0194  3001               	movlw	1	; select bank2/3
 16473  0195  0087               	movwf	7
 16474  0196  1301               	bcf	1,6
 16475                           
 16476                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 16477  0197  0874               	movf	_DimmerLightsIntr,w
 16478  0198  3E09               	addlw	9
 16479  0199  0086               	movwf	6
 16480  019A  3001               	movlw	1	; select bank2/3
 16481  019B  0087               	movwf	7
 16482  019C  1501               	bsf	1,2
 16483                           
 16484                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 16485  019D  0873               	movf	_Dimmer,w
 16486  019E  0086               	movwf	6
 16487  019F  0187               	clrf	7
 16488  01A0  1401               	bsf	1,0
 16489                           
 16490                           ;Dimmer_B1.c: 169: if (lights == 1) {
 16491  01A1  087A               	movf	setDimmerLights_IntrControl@lights,w
 16492  01A2  3A01               	xorlw	1
 16493  01A3  1D03               	skipz
 16494  01A4  29A7               	goto	i1l7111
 16495                           
 16496                           ;Dimmer_B1.c: 170: RC7 = 0;
 16497  01A5  0020               	movlb	0	; select bank0
 16498  01A6  138E               	bcf	14,7	;volatile
 16499  01A7                     i1l7111:	
 16500                           
 16501                           ;Dimmer_B1.c: 172: }
 16502                           ;Dimmer_B1.c: 175: if (lights == 2) {
 16503  01A7  087A               	movf	setDimmerLights_IntrControl@lights,w
 16504  01A8  3A02               	xorlw	2
 16505  01A9  1D03               	skipz
 16506  01AA  29AD               	goto	i1l7115
 16507                           
 16508                           ;Dimmer_B1.c: 176: RA3 = 0;
 16509  01AB  0020               	movlb	0	; select bank0
 16510  01AC  118C               	bcf	12,3	;volatile
 16511  01AD                     i1l7115:	
 16512                           
 16513                           ;Dimmer_B1.c: 177: }
 16514                           ;Dimmer_B1.c: 180: if (lights == 3) {
 16515  01AD  087A               	movf	setDimmerLights_IntrControl@lights,w
 16516  01AE  3A03               	xorlw	3
 16517  01AF  1D03               	skipz
 16518  01B0  29B3               	goto	i1l7119
 16519                           
 16520                           ;Dimmer_B1.c: 181: RC6 = 0;
 16521  01B1  0020               	movlb	0	; select bank0
 16522  01B2  130E               	bcf	14,6	;volatile
 16523  01B3                     i1l7119:	
 16524                           ;Dimmer_B1.c: 182: }
 16525                           ;Dimmer_B1.c: 184: ;;
 16526                           
 16527                           
 16528                           ;Dimmer_B1.c: 185: }
 16529                           ;Dimmer_B1.c: 186: }
 16530                           ;Dimmer_B1.c: 187: }
 16531                           ;Dimmer_B1.c: 188: }
 16532                           ;Dimmer_B1.c: 189: }
 16533                           ;Dimmer_B1.c: 190: }
 16534                           ;Dimmer_B1.c: 191: }
 16535                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 16536  01B3  0874               	movf	_DimmerLightsIntr,w
 16537  01B4  3E08               	addlw	8
 16538  01B5  0086               	movwf	6
 16539  01B6  3001               	movlw	1	; select bank2/3
 16540  01B7  0087               	movwf	7
 16541  01B8  1E81               	btfss	1,5
 16542  01B9  29EA               	goto	i1l7141
 16543                           
 16544                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 16545  01BA  3001               	movlw	1
 16546  01BB  00F8               	movwf	??_setDimmerLights_IntrControl
 16547  01BC  0874               	movf	_DimmerLightsIntr,w
 16548  01BD  3E07               	addlw	7
 16549  01BE  0086               	movwf	6
 16550  01BF  3001               	movlw	1	; select bank2/3
 16551  01C0  0087               	movwf	7
 16552  01C1  0878               	movf	??_setDimmerLights_IntrControl,w
 16553  01C2  0781               	addwf	1,f
 16554                           
 16555                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 16556  01C3  0874               	movf	_DimmerLightsIntr,w
 16557  01C4  3E07               	addlw	7
 16558  01C5  0086               	movwf	6
 16559  01C6  3001               	movlw	1	; select bank2/3
 16560  01C7  0087               	movwf	7
 16561  01C8  3005               	movlw	5
 16562  01C9  0201               	subwf	1,w
 16563  01CA  1C03               	skipc
 16564  01CB  29EA               	goto	i1l7141
 16565                           
 16566                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 16567  01CC  0874               	movf	_DimmerLightsIntr,w
 16568  01CD  3E07               	addlw	7
 16569  01CE  0086               	movwf	6
 16570  01CF  3001               	movlw	1	; select bank2/3
 16571  01D0  0087               	movwf	7
 16572  01D1  0181               	clrf	1
 16573                           
 16574                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 16575  01D2  0874               	movf	_DimmerLightsIntr,w
 16576  01D3  3E08               	addlw	8
 16577  01D4  0086               	movwf	6
 16578  01D5  3001               	movlw	1	; select bank2/3
 16579  01D6  0087               	movwf	7
 16580  01D7  1281               	bcf	1,5
 16581                           
 16582                           ;Dimmer_B1.c: 199: if (lights == 1) {
 16583  01D8  087A               	movf	setDimmerLights_IntrControl@lights,w
 16584  01D9  3A01               	xorlw	1
 16585  01DA  1D03               	skipz
 16586  01DB  29DE               	goto	i1l7133
 16587                           
 16588                           ;Dimmer_B1.c: 200: RB4 = 0;
 16589  01DC  0020               	movlb	0	; select bank0
 16590  01DD  120D               	bcf	13,4	;volatile
 16591  01DE                     i1l7133:	
 16592                           ;Dimmer_B1.c: 201: ;;
 16593                           
 16594                           
 16595                           ;Dimmer_B1.c: 202: }
 16596                           ;Dimmer_B1.c: 205: if (lights == 2) {
 16597  01DE  087A               	movf	setDimmerLights_IntrControl@lights,w
 16598  01DF  3A02               	xorlw	2
 16599  01E0  1D03               	skipz
 16600  01E1  29E4               	goto	i1l7137
 16601                           
 16602                           ;Dimmer_B1.c: 206: RA7 = 0;
 16603  01E2  0020               	movlb	0	; select bank0
 16604  01E3  138C               	bcf	12,7	;volatile
 16605  01E4                     i1l7137:	
 16606                           
 16607                           ;Dimmer_B1.c: 207: }
 16608                           ;Dimmer_B1.c: 210: if (lights == 3) {
 16609  01E4  087A               	movf	setDimmerLights_IntrControl@lights,w
 16610  01E5  3A03               	xorlw	3
 16611  01E6  1D03               	skipz
 16612  01E7  29EA               	goto	i1l7141
 16613                           
 16614                           ;Dimmer_B1.c: 211: RB1 = 0;
 16615  01E8  0020               	movlb	0	; select bank0
 16616  01E9  108D               	bcf	13,1	;volatile
 16617  01EA                     i1l7141:	
 16618                           
 16619                           ;Dimmer_B1.c: 212: }
 16620                           ;Dimmer_B1.c: 214: }
 16621                           ;Dimmer_B1.c: 215: }
 16622                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 16623  01EA  0874               	movf	_DimmerLightsIntr,w
 16624  01EB  3E09               	addlw	9
 16625  01EC  0086               	movwf	6
 16626  01ED  3001               	movlw	1	; select bank2/3
 16627  01EE  0087               	movwf	7
 16628  01EF  1E81               	btfss	1,5
 16629  01F0  0008               	return
 16630                           
 16631                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 16632  01F1  3001               	movlw	1
 16633  01F2  00F8               	movwf	??_setDimmerLights_IntrControl
 16634  01F3  0874               	movf	_DimmerLightsIntr,w
 16635  01F4  3E0A               	addlw	10
 16636  01F5  0086               	movwf	6
 16637  01F6  3001               	movlw	1	; select bank2/3
 16638  01F7  0087               	movwf	7
 16639  01F8  0878               	movf	??_setDimmerLights_IntrControl,w
 16640  01F9  0781               	addwf	1,f
 16641                           
 16642                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 16643  01FA  0874               	movf	_DimmerLightsIntr,w
 16644  01FB  3E0A               	addlw	10
 16645  01FC  0086               	movwf	6
 16646  01FD  3001               	movlw	1	; select bank2/3
 16647  01FE  0087               	movwf	7
 16648  01FF  0801               	movf	1,w
 16649  0200  3A46               	xorlw	70
 16650  0201  1D03               	skipz
 16651  0202  0008               	return
 16652                           
 16653                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 16654  0203  0874               	movf	_DimmerLightsIntr,w
 16655  0204  3E0A               	addlw	10
 16656  0205  0086               	movwf	6
 16657  0206  3001               	movlw	1	; select bank2/3
 16658  0207  0087               	movwf	7
 16659  0208  0181               	clrf	1
 16660                           
 16661                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 16662  0209  0874               	movf	_DimmerLightsIntr,w
 16663  020A  3E09               	addlw	9
 16664  020B  0086               	movwf	6
 16665  020C  3001               	movlw	1	; select bank2/3
 16666  020D  0087               	movwf	7
 16667  020E  1281               	bcf	1,5
 16668  020F  0008               	return
 16669  0210                     __end_of_setDimmerLights_IntrControl:	
 16670                           
 16671                           	psect	text110
 16672  112F                     __ptext110:	
 16673 ;; *************** function _DimmerIntrPointSelect *****************
 16674 ;; Defined at:
 16675 ;;		line 72 in file "../src/Dimmer_B1.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;  lights          1    wreg     unsigned char 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  lights          1    1[COMMON] unsigned char 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;		None               void
 16682 ;; Registers used:
 16683 ;;		wreg
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;Total ram usage:        2 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; This function calls:
 16696 ;;		Nothing
 16697 ;; This function is called by:
 16698 ;;		_setDimmerLights_IntrControl
 16699 ;; This function uses a non-reentrant model
 16700 ;;
 16701                           
 16702                           
 16703                           ;psect for function _DimmerIntrPointSelect
 16704  112F                     _DimmerIntrPointSelect:	
 16705                           
 16706                           ;incstack = 0
 16707                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16708                           ;DimmerIntrPointSelect@lights stored from wreg
 16709  112F  00F7               	movwf	DimmerIntrPointSelect@lights
 16710                           
 16711                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16712  1130  0877               	movf	DimmerIntrPointSelect@lights,w
 16713  1131  3A01               	xorlw	1
 16714  1132  1D03               	skipz
 16715  1133  2938               	goto	i1l820
 16716                           
 16717                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16718  1134  303E               	movlw	_DimmerLights1& (0+255)
 16719  1135  00F6               	movwf	??_DimmerIntrPointSelect
 16720  1136  0876               	movf	??_DimmerIntrPointSelect,w
 16721  1137  00F4               	movwf	_DimmerLightsIntr
 16722  1138                     i1l820:	
 16723                           
 16724                           ;Dimmer_B1.c: 76: }
 16725                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16726  1138  0877               	movf	DimmerIntrPointSelect@lights,w
 16727  1139  3A02               	xorlw	2
 16728  113A  1D03               	skipz
 16729  113B  2940               	goto	i1l821
 16730                           
 16731                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16732  113C  304D               	movlw	_DimmerLights2& (0+255)
 16733  113D  00F6               	movwf	??_DimmerIntrPointSelect
 16734  113E  0876               	movf	??_DimmerIntrPointSelect,w
 16735  113F  00F4               	movwf	_DimmerLightsIntr
 16736  1140                     i1l821:	
 16737                           
 16738                           ;Dimmer_B1.c: 81: }
 16739                           ;Dimmer_B1.c: 85: if (lights == 3) {
 16740  1140  0877               	movf	DimmerIntrPointSelect@lights,w
 16741  1141  3A03               	xorlw	3
 16742  1142  1D03               	skipz
 16743  1143  0008               	return
 16744                           
 16745                           ;Dimmer_B1.c: 86: DimmerLightsIntr = &DimmerLights3;
 16746  1144  30C5               	movlw	_DimmerLights3& (0+255)
 16747  1145  00F6               	movwf	??_DimmerIntrPointSelect
 16748  1146  0876               	movf	??_DimmerIntrPointSelect,w
 16749  1147  00F4               	movwf	_DimmerLightsIntr
 16750  1148  0008               	return
 16751  1149                     __end_of_DimmerIntrPointSelect:	
 16752                           
 16753                           	psect	text111
 16754  1EEF                     __ptext111:	
 16755 ;; *************** function _IOC_ISR *****************
 16756 ;; Defined at:
 16757 ;;		line 401 in file "../src/MCU_B1.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;		None
 16760 ;; Auto vars:     Size  Location     Type
 16761 ;;		None
 16762 ;; Return value:  Size  Location     Type
 16763 ;;		None               void
 16764 ;; Registers used:
 16765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;Total ram usage:        0 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; Hardware stack levels required when called:    3
 16778 ;; This function calls:
 16779 ;;		_setDimmerReClock
 16780 ;; This function is called by:
 16781 ;;		_ISR
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           
 16786                           ;psect for function _IOC_ISR
 16787  1EEF                     _IOC_ISR:	
 16788                           
 16789                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16793  1EEF  1D8B               	btfss	11,3	;volatile
 16794  1EF0  0008               	return
 16795  1EF1  1C0B               	btfss	11,0	;volatile
 16796  1EF2  0008               	return
 16797  1EF3  0027               	movlb	7	; select bank7
 16798  1EF4  1D16               	btfss	22,2	;volatile
 16799  1EF5  0008               	return
 16800                           
 16801                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16802  1EF6  1116               	bcf	22,2	;volatile
 16803                           
 16804                           ;MCU_B1.c: 404: IOCIF = 0;
 16805  1EF7  100B               	bcf	11,0	;volatile
 16806                           
 16807                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16808  1EF8  0021               	movlb	1	; select bank1
 16809  1EF9  1C20               	btfss	_myMain^(0+128),0
 16810  1EFA  0008               	return
 16811                           
 16812                           ;MCU_B1.c: 407: setDimmerReClock();
 16813  1EFB  319E  2680         	fcall	_setDimmerReClock
 16814  1EFD  0008               	return
 16815  1EFE                     __end_of_IOC_ISR:	
 16816                           
 16817                           	psect	text112
 16818  1E80                     __ptext112:	
 16819 ;; *************** function _setDimmerReClock *****************
 16820 ;; Defined at:
 16821 ;;		line 244 in file "../src/MCU_B1.c"
 16822 ;; Parameters:    Size  Location     Type
 16823 ;;		None
 16824 ;; Auto vars:     Size  Location     Type
 16825 ;;		None
 16826 ;; Return value:  Size  Location     Type
 16827 ;;		None               void
 16828 ;; Registers used:
 16829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16830 ;; Tracked objects:
 16831 ;;		On entry : 0/0
 16832 ;;		On exit  : 0/0
 16833 ;;		Unchanged: 0/0
 16834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;Total ram usage:        0 bytes
 16840 ;; Hardware stack levels used:    1
 16841 ;; Hardware stack levels required when called:    2
 16842 ;; This function calls:
 16843 ;;		_setDimmerLights_IntrIOC_GO
 16844 ;; This function is called by:
 16845 ;;		_IOC_ISR
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           
 16850                           ;psect for function _setDimmerReClock
 16851  1E80                     _setDimmerReClock:	
 16852                           
 16853                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16854                           
 16855                           ;incstack = 0
 16856                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16857  1E80  3001               	movlw	1
 16858  1E81  3194  241E  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16859                           
 16860                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16861  1E84  3002               	movlw	2
 16862  1E85  3194  241E  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16863                           
 16864                           ;MCU_B1.c: 257: setDimmerLights_IntrIOC_GO(3);
 16865  1E88  3003               	movlw	3
 16866  1E89  3194  241E         	fcall	_setDimmerLights_IntrIOC_GO
 16867  1E8B  0008               	return
 16868  1E8C                     __end_of_setDimmerReClock:	
 16869                           
 16870                           	psect	text113
 16871  141E                     __ptext113:	
 16872 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16873 ;; Defined at:
 16874 ;;		line 28 in file "../src/Dimmer_B1.c"
 16875 ;; Parameters:    Size  Location     Type
 16876 ;;  lights          1    wreg     unsigned char 
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;  lights          1    2[COMMON] unsigned char 
 16879 ;; Return value:  Size  Location     Type
 16880 ;;		None               void
 16881 ;; Registers used:
 16882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16883 ;; Tracked objects:
 16884 ;;		On entry : 0/0
 16885 ;;		On exit  : 0/0
 16886 ;;		Unchanged: 0/0
 16887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;Total ram usage:        1 bytes
 16893 ;; Hardware stack levels used:    1
 16894 ;; Hardware stack levels required when called:    1
 16895 ;; This function calls:
 16896 ;;		_DimmerIntrIOCPointSelect
 16897 ;; This function is called by:
 16898 ;;		_setDimmerReClock
 16899 ;; This function uses a non-reentrant model
 16900 ;;
 16901                           
 16902                           
 16903                           ;psect for function _setDimmerLights_IntrIOC_GO
 16904  141E                     _setDimmerLights_IntrIOC_GO:	
 16905                           
 16906                           ;incstack = 0
 16907                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16908                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16909  141E  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 16910                           
 16911                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16912  141F  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16913  1420  3191  217E  3194   	fcall	_DimmerIntrIOCPointSelect
 16914                           
 16915                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16916  1423  0021               	movlb	1	; select bank1
 16917  1424  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16918  1425  0086               	movwf	6
 16919  1426  3001               	movlw	1	; select bank2/3
 16920  1427  0087               	movwf	7
 16921  1428  1801               	btfsc	1,0
 16922  1429  0008               	return
 16923  142A  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16924  142B  3E09               	addlw	9
 16925  142C  0086               	movwf	6
 16926  142D  3001               	movlw	1	; select bank2/3
 16927  142E  0087               	movwf	7
 16928  142F  1A81               	btfsc	1,5
 16929  1430  0008               	return
 16930                           
 16931                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16932  1431  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16933  1432  0086               	movwf	6
 16934  1433  3001               	movlw	1	; select bank2/3
 16935  1434  0087               	movwf	7
 16936  1435  1401               	bsf	1,0
 16937                           
 16938                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16939  1436  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16940  1437  3E09               	addlw	9
 16941  1438  0086               	movwf	6
 16942  1439  3001               	movlw	1	; select bank2/3
 16943  143A  0087               	movwf	7
 16944  143B  1681               	bsf	1,5
 16945                           
 16946                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 16947  143C  0020               	movlb	0	; select bank0
 16948  143D  1D0D               	btfss	13,2	;volatile
 16949  143E  2C46               	goto	i1l6635
 16950                           
 16951                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 16952  143F  0873               	movf	_Dimmer,w
 16953  1440  3E02               	addlw	2
 16954  1441  0086               	movwf	6
 16955  1442  0187               	clrf	7
 16956  1443  0181               	clrf	1
 16957  1444  0A81               	incf	1,f
 16958                           
 16959                           ;Dimmer_B1.c: 37: } else {
 16960  1445  0008               	return
 16961  1446                     i1l6635:	
 16962                           
 16963                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 16964  1446  0873               	movf	_Dimmer,w
 16965  1447  3E02               	addlw	2
 16966  1448  0086               	movwf	6
 16967  1449  0187               	clrf	7
 16968  144A  0181               	clrf	1
 16969  144B  0008               	return
 16970  144C                     __end_of_setDimmerLights_IntrIOC_GO:	
 16971                           
 16972                           	psect	text114
 16973  117E                     __ptext114:	
 16974 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16975 ;; Defined at:
 16976 ;;		line 8 in file "../src/Dimmer_B1.c"
 16977 ;; Parameters:    Size  Location     Type
 16978 ;;  lights          1    wreg     unsigned char 
 16979 ;; Auto vars:     Size  Location     Type
 16980 ;;  lights          1    1[COMMON] unsigned char 
 16981 ;; Return value:  Size  Location     Type
 16982 ;;		None               void
 16983 ;; Registers used:
 16984 ;;		wreg
 16985 ;; Tracked objects:
 16986 ;;		On entry : 0/0
 16987 ;;		On exit  : 0/0
 16988 ;;		Unchanged: 0/0
 16989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16994 ;;Total ram usage:        2 bytes
 16995 ;; Hardware stack levels used:    1
 16996 ;; This function calls:
 16997 ;;		Nothing
 16998 ;; This function is called by:
 16999 ;;		_setDimmerLights_IntrIOC_GO
 17000 ;; This function uses a non-reentrant model
 17001 ;;
 17002                           
 17003                           
 17004                           ;psect for function _DimmerIntrIOCPointSelect
 17005  117E                     _DimmerIntrIOCPointSelect:	
 17006                           
 17007                           ;incstack = 0
 17008                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17009                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17010  117E  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 17011                           
 17012                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17013  117F  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17014  1180  3A01               	xorlw	1
 17015  1181  1D03               	skipz
 17016  1182  2988               	goto	i1l808
 17017                           
 17018                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17019  1183  303E               	movlw	_DimmerLights1& (0+255)
 17020  1184  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17021  1185  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17022  1186  0021               	movlb	1	; select bank1
 17023  1187  00D3               	movwf	_DimmerLightsIntrIOC^(0+128)
 17024  1188                     i1l808:	
 17025                           
 17026                           ;Dimmer_B1.c: 12: }
 17027                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17028  1188  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17029  1189  3A02               	xorlw	2
 17030  118A  1D03               	skipz
 17031  118B  2991               	goto	i1l809
 17032                           
 17033                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17034  118C  304D               	movlw	_DimmerLights2& (0+255)
 17035  118D  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17036  118E  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17037  118F  0021               	movlb	1	; select bank1
 17038  1190  00D3               	movwf	_DimmerLightsIntrIOC^(0+128)
 17039  1191                     i1l809:	
 17040                           
 17041                           ;Dimmer_B1.c: 17: }
 17042                           ;Dimmer_B1.c: 21: if (lights == 3) {
 17043  1191  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17044  1192  3A03               	xorlw	3
 17045  1193  1D03               	skipz
 17046  1194  0008               	return
 17047                           
 17048                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 17049  1195  30C5               	movlw	_DimmerLights3& (0+255)
 17050  1196  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17051  1197  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17052  1198  0021               	movlb	1	; select bank1
 17053  1199  00D3               	movwf	_DimmerLightsIntrIOC^(0+128)
 17054  119A  0008               	return
 17055  119B                     __end_of_DimmerIntrIOCPointSelect:	
 17056  007E                     btemp	set	126	;btemp
 17057  007E                     pic14e$flags	set	126
 17058  007E                     wtemp	set	126
 17059  007E                     wtemp0	set	126
 17060  0080                     wtemp1	set	128
 17061  0082                     wtemp2	set	130
 17062  0084                     wtemp3	set	132
 17063  0086                     wtemp4	set	134
 17064  0088                     wtemp5	set	136
 17065  007F                     wtemp6	set	127
 17066  007E                     ttemp	set	126
 17067  007E                     ttemp0	set	126
 17068  0081                     ttemp1	set	129
 17069  0084                     ttemp2	set	132
 17070  0087                     ttemp3	set	135
 17071  007F                     ttemp4	set	127
 17072  007E                     ltemp	set	126
 17073  007E                     ltemp0	set	126
 17074  0082                     ltemp1	set	130
 17075  0086                     ltemp2	set	134
 17076  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         234
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     75      78
    BANK1            80      0      79
    BANK2            80      0      77
    BANK3            80      4      74
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK1[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw3(BANK1[2]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  111871
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    2130
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   30056
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   30056
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   13168
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12581
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    2053
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1098
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1098
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38719
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38719
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37776
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35863
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14899
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1741
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15284
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15067
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14974
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1253
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1253
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13413
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   13246
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8910
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1897
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1067
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13928
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13928
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     883
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     987
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     161      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     161      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 10:11:13 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1274                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 10BD               _getDimmerLights_StatusFlag 10A9  
                 __end_of_setDelayOff_GO 08D0                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0E1A                             ___ftadd@sign 0048  
                                    l110 17D8                                      l120 16AB  
                                    l112 17EC                                      l121 16A7  
                                    l122 1695                                      l124 16A5  
                                    l402 1301                                      l308 0C42  
                                    l309 0C85                                      l283 09CE  
                                    l358 109F                                      l359 10A0  
                                    l867 116D                                      l868 1175  
                                    _GIE 005F                                      _CRC 00CF  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0070                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 00CD                                      _Sw1 015C  
                                    _Sw2 01D4                                      _Sw3 01DD  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10A9  
                  _Buzzer_Initialization 1E21                          __end_of_ADC_Set 0800  
                        ?_DelayTimejudge 0076                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0C8B  
                  _setDimmerLights_AdjRF 12D9                    _setDimmerLights_AdjGo 1F89  
                                   ?_ISR 0076                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1EFE                             ___ftdiv@sign 003D  
                                   l2310 1508                                     l2224 04AD  
                                   l2225 04A9                                     l1442 1474  
               ?_DimmerLightsPointSelect 0076                                     l3035 091A  
                                   l1451 161A                                     l2227 04E9  
                                   l2219 0475                                     l3029 0903  
                                   l1429 1211                                     l1613 1578  
                                   l2273 14AA                                     l3058 03FF  
                                   l2258 0A0A                                     l2268 0A60  
                                   l1628 1792                          __end_of_IOC_Set 1EE1  
                                   l2295 121E                                     l2296 1228  
                                   l2725 0DC7                                     l2667 1F2C  
                                   l2749 0968                                     l2699 0242  
                                   l8101 11CC                                     l5631 08D9  
                                   l5711 03DE                                     l8023 1FF7  
                                   l8041 11AF                                     l8113 1708  
                                   l5705 03CB                                     l8131 1727  
                                   l5635 08E0                                     l5723 0411  
                                   l5707 03D5                                     l5811 0725  
                                   l8019 1FF1                                     l8037 11A6  
                                   l8141 1742                                     l5645 0908  
                                   l5637 08EA                                     l5717 03F1  
                                   l5709 03DA                                     l9023 15BF  
                                   l8119 1713                                     l5647 0910  
                                   l5639 08EF                                     l8303 0BCB  
                                   l5727 0423                                     l5719 03FB  
                                   l5823 0741                                     l5807 071D  
                                   l9033 15CF                                     l9025 15C2  
                                   l8145 174A                                     l8137 1739  
                                   l8129 171B                                     l5753 0ED5  
                                   l8081 132D                                     l8313 0BDB  
                                   l8321 0BE7                                     l5737 043E  
                                   l5681 038F                                     l8057 13C3  
                                   l9009 0B85                                     l9035 15D2  
                                   l5747 0EBF                                     l5819 0739  
                                   l8501 1127                                     l9029 15C8  
                                   l8085 1336                                     l8333 0C04  
                                   l8341 0C10                                     l8317 0BE1  
                                   l8309 0BD5                                     l9221 16E8  
                                   l8405 10F4                                     l5677 0388  
                                   l9039 15D8                                     l5775 0F2F  
                                   l5767 0F16                                     l5839 0D22  
                                   l8407 10F8                                     l8511 12C0  
                                   l5687 039E                                     l8263 08A6  
                                   l5873 0D87                                     l5865 0D6D  
                                   l5857 0D52                                     l8097 11C3  
                                   l8089 133F                                     l8337 0C0A  
                                   l8329 0BFE                                     l9153 0E31  
                                   l9225 16EF                                     l8513 12C3  
                                   l8273 08C5                                     l9401 04CE  
                                   l5867 0D76                                     l5859 0D60  
                                   l8291 0BB9                                     l9155 0E34  
                                   l5699 03B8                                     l5795 06E2  
                                   l8267 08AC                                     l9403 04D0  
                                   l5869 0D79                                     l8197 0B2A  
                                   l9165 0E42                                     l9229 16F6  
                                   l8517 12C9                                     l8613 09A5  
                                   l5789 06CC                                     l8357 14BA  
                                   l8269 08B9                                     l8295 0BBF  
                                   l8439 0CDD                                     l9167 0E45  
                                   l8631 09D4                                     l8607 099C  
                                   l8463 07C1                                     l9431 051F  
                                   l9343 0468                                     l9177 0E51  
                                   l8641 09E4                                     l8633 09D7  
                                   l8609 099F                                     l8449 0787  
                                   l9505 02DB                                     l8731 1264  
                                   l8299 0BC5                                     l9187 0E74  
                                   l9179 0E56                                     l9291 15FA  
                                   l8707 0C87                                     l8627 09B6  
                                   l8459 07AB                                     l9419 04FE  
                                   l9515 030D                                     l8717 1312  
                                   l8725 125B                                     l9189 0E7A  
                                   l9285 15E5                                     l8661 0C21  
                                   l8645 09EA                                     l8637 09DD  
                                   l9365 048C                                     l9445 1F31  
                                   l9461 0229                    _myMain_Initialization 1F3A  
                                   l9551 167F                                     l8495 111E  
                                   l8719 131D                                     l8727 125E  
                                   l8751 10B6                                     l9199 0EA2  
                                   l9623 05A3                                     l8639 09E1  
                                   l8487 14F6                                     l8591 0FEE  
                                   l8583 0FDC                                     l8575 0FCA  
                                   l8497 1121                                     l8809 145C  
                                   l8665 0C27                                     l8569 0FAF  
                                   l9449 1F37                                     l9481 0270  
                                   l9465 0236                                     l9705 177B  
                                   l8763 1533                                     l8659 0C1E  
                                   l8667 0C2A                                     l8595 0FF7  
                                   l8587 0FE5                                     l8579 0FD3  
                                   l8907 0DB3                                     l9491 029D  
                                   l9715 1793                                     l8693 0C53  
                                   l8677 0C3F                                     l8861 0A25  
                                   l8909 0DB6                                     l8695 0C6B  
                                   l8679 0C39                                     l8871 0A4B  
                                   l8919 0DC2                                     l8849 0A0D  
                                   _CFGS 0CAE                                     l8955 0943  
                                   l8939 0E08                                     l7997 12A0  
                                   l8877 0A56                                     l8957 0946  
                                   l8967 0954                                     l8895 0DA2  
                           __CFG_WDTE$ON 0000                                     l8969 0957  
                                   l8897 0DA5                                     l8979 0963  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4005 090B                                     u4035 0921  
                                   u4215 03DF                                     u4315 0EE7  
                                   u4155 03B9                                     u4325 0EF7  
                                   u4245 03F2                                     u4405 06FE  
                                   u4335 0F17                                     u4345 0F26  
                                   u4505 0D29                                     u4185 03CC  
                                   u4425 0726                                     u4355 0F30  
                                   u4435 072C                                     _PEIE 005E  
                                   u4535 0D53                                     u4465 0742  
                                   u4475 0748                                     u4395 06EE  
                                   u4565 0D6E                                     u8105 1728  
                                   u8115 1732                                     u8125 173A  
                                   u3965 08E5                                     u3985 08FE  
                                   u8085 171E                                     u8190 0AD8  
                                   u8195 0AD6                                     u8495 10CC  
                                   u8935 1307                                     u7975 13AF  
                                   _LWLO 0CAD                                     _RFSW 00D4  
                                   u9895 0486                                     _RSSI 00D5  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _main 155A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0ACE                          __end_of_RF_Main 1E2A  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1E75  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1E80                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 151D  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 007B  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 001A                         __end_of_LED_Main 1F89  
          __end_of_DimmerIntrPointSelect 1149                    ?_setDimmerLights_Main 0076  
                        ?_setDelayOff_GO 002A                                    ?_main 01E6  
                        __end_of___awdiv 1751                          __end_of___ftadd 0456  
                        __end_of___ftdiv 0F51                                    u10025 050F  
                                  u10405 1208                          __end_of___ftmul 0769  
                        ___awdiv@divisor 0020                                    u10285 1675  
                                  u10445 1762                                    u10455 178A  
                                  _T1CON 0018                                    u10475 17A2  
                        __end_of___fttol 0D90             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l820 1138  
                                  i1l821 1140                                    i1l808 1188  
                                  i1l809 1191                   _setDimmerLights_Switch 1F49  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EC                                    _RFSW2 00ED  
                                  _RFSW3 00EE                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0076                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 10D2  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 144C  
             _setDimmerLights_IntrIOC_GO 141E                         __end_of_TMR1_ISR 13F1  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 1EC8  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0077  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1082  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0076                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1FBA                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0076                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$5960 0064  
                   _Sw_DimmerOnFunc$5961 0065                     _Sw_DimmerOnFunc$5959 0063  
                     _setRF_DimmerLights 0ACE              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0076               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 000C  
              setDimmerLights_Main@clear 0069                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0816                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0076  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 159B                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1E3A                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D09  
                   _setSw_Initialization 1E51                                   ??_main 006B  
                          ___fttol@sign1 0053                             ?_setLog_Code 0076  
                _setControl_Lights_Table 0F51                   ?_Buzzer_Initialization 0076  
      __size_of_DimmerIntrIOCPointSelect 001D                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0076  
                              ??_IOC_ISR 0079                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 117E                   ?_setDimmerLights_AdjRF 0076  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0024  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0A63  
                 ?_myMain_Initialization 0076                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 12B7                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0931                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F59                                   i1l7101 0176  
                                 i1l7111 01A7                                   i1l7115 01AD  
                                 i1l7133 01DE                                   i1l7141 01EA  
                                 i1l7045 0098                                   i1l7053 00A5  
                                 i1l7071 00EF                                   i1l7119 01B3  
                                 i1l7137 01E4                                   i1l7073 00F5  
                                 i1l7049 009E                                   i1l7085 012A  
                                 i1l7093 0155                                   i1l7077 0108  
                                 i1l7079 010E                                   i1l7089 0141  
                                 i1l6635 1446                                   i1l7099 0170  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u635_25 0073  
                                 u750_25 13EB                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 10FE  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1E3F           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 10E7                                   _Dimmer 0073  
                                 _DlySw1 00E6                                   _DlySw2 00E8  
                                 _DlySw3 00EA               __end_of_Mcu_Initialization 1FEE  
                    __end_of_Buzzer_Main 16B2                                   _Memory 01A0  
                                 _Timer1 00C8       __end_of_setDimmerLights_TriggerAdj 1FA9  
             _setDimmerLights_TriggerAdj 1F99                                   ___bmul 1FEE  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 001D  
                              ??___ftdiv 0034                    setDimmerLights@lights 0025  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0076              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D9  
                                 _s_data 00DA                                   _setLED 0BA9  
                                 _myMain 00A0                _setDimmerLights_Main$2350 0066  
              _setDimmerLights_Main$2358 0067                         _DimmerLightsIntr 0074  
              _setDimmerLights_Main$2359 0068                    ?_setSw_Initialization 0076  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 17A7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0076                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 0210  
            _setDimmerLights_IntrControl 0045                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0076  
                  __end_of_SwPointSelect 11D5                            ?_setRF_Enable 0076  
                        _RfSWPointSelect 1213             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 007A              __size_of_DimmerLights_Close 0013  
                __size_of_LedPointSelect 0026                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1F2B  
                      ?_Sw_DimmerAdjFunc 0076              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0871  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0041  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0076  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                            ?_my_MainTimer 0076  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0076                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0076  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0076  
         DimmerIntrIOCPointSelect@lights 0077                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1233                                ?_TMR1_ISR 0076  
                              ?_TMR1_Set 0076             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1F69                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0076  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0076                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1E3F                 __end_of_setDimmerReClock 1E8C  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0076  
                      ?_CC2500_WriteByte 0076                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D0                           _DimmerLights22 00D1  
                         _DimmerLights33 00D2                     __size_of_setLED_Main 004B  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006B  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0076  
                            _Buzzer_Main 1668                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0076                                  ?_IO_Set 0076  
                         ??_my_MainTimer 002D                               ??_LED_Main 0024  
                          ?_setMemory_GO 0076                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1E98                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 006B  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 155A                      _CC2500_WriteCommand 1116  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 001B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 007B                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0076                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 07F9                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1E80  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 14E2  
                __end_of_RfSWPointSelect 1233                        Sw_DimmerOnFunc@sw 0067  
                                _IOC_ISR 1EEF                                  _IOC_Set 1ED4  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0076  
                      _Flash_Memory_Main 11F4                        _Flash_Memory_Read 1149  
            ?_setDimmerLights_IntrIOC_GO 0076                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0076  
                                _RF_Data 0120                                  _RF_Main 1E27  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1E6A          __end_of_setControl_Lights_Table 1000  
                             ??_Fosc_Set 0020                              ?_TouchPower 0076  
                        _Sw_DimmerOnFunc 0D90                          _setPercentValue 1622  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0076  
                                _Dimmer1 00E3             __end_of_CC2500_FrequencyCabr 1E98  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1FCB  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DF                                  _VarLED2 0165  
                                _VarLED3 0169                        __end_of_getRxData 0A63  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 119B  
        __end_of_setDimmerLights_Trigger 1F69                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1F59  
                                ___awdiv 16FD                                  ___ftadd 0360  
                         ??_setSw_Enable 0022                                  ___ftdiv 0EA8  
                                ___ftmul 06B5                                  ___fttol 0D09  
                    __end_of_Switch_Main 1ED4                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0071                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 1751                                  __ptext2 1348  
                                __ptext3 1EE1                                  __ptext4 1F3A  
                                __ptext5 1070                                  __ptext6 0002  
                                __ptext7 1EC8                                  __ptext8 0210  
                                __ptext9 1E59                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0066                    _DimmerIntrPointSelect 112F  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1213  
              __end_of_Flash_Memory_Read 1163                               _setRF_Main 0456  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1EA4  
                      _DimmerLights_Main 1F1C           __size_of_DlyOff_Initialization 000A  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1070  
             __end_of_CC2500_ClearRXFIFO 1E2E               __end_of_CC2500_ClearTXFIFO 1E32  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0076  
                     ?_DimmerLights_Main 0076                                  _product 006D  
                         _LedPointSelect 1322                      _DelayOffPointSelect 119B  
                                clrloop0 1E4C           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1FDC                     end_of_initialization 0041  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1371  
                          _DelayTime_1us 12FC                        __end_of_setTxData 06B5  
             __end_of_Flash_Memory_Write 147B                                  init_ram 1E45  
                     ?_CC2500_InitSetREG 0076                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1E46  
                             _setSw_Main 0210                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 12B7                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1FA9                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0076                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0C1A  
                          _CC2500_TxData 0995                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1EEF              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0076  
                    _Flash_Memory_Modify 15DE                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E61                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1F2B  
                     _Mcu_Initialization 1FDC                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 17A7                           ?_DelayOff_Main 0076  
                       ?_RfSWPointSelect 0076                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1348                  __end_of_Sw_DimmerOnFunc 0E1A  
                __end_of_setPercentValue 1668                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 139B                      ?_Mcu_Initialization 0076  
                   ?_Flash_Memory_Modify 0076              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 151D  
                   ?_Flash_Memory_Unlock 0076                __end_of_CC2500_ReadStatus 12D9  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1116  
                   _setRF_Initialization 1E75                              _Switch_Main 1EC8  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0076  
                         ?_CC2500_TxData 0076                  _DimmerLightsPointSelect 1163  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 10D2  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0076                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 2000                __size_of_Sw_DimmerAdjFunc 0064  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 117E  
                      __size_of_TMR1_ISR 002C                   ?_DimmerIntrPointSelect 0076  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 0816  
          __size_of_setDimmerLights_Main 008E                           __end_of_setLED 0C1A  
                         __end_of_setBuz 1800          _getDimmerLights_StatusFlag$2394 0022  
                   _CC2500_FrequencyCabr 1E8C                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0076                          _setRFSW_Control 0769  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0076  
                    start_initialization 0015                        _setRF_DimmerValue 14AD  
                        ?_LedPointSelect 0076               __end_of_DimmerLights_Close 1095  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0079                       ?_setRF_DimmerValue 0076  
             __end_of_CC2500_InitPATable 11F4                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setSw_Enable 1371  
                           ?_Buzzer_Main 0076                       _set_TimeoutCleared 1E3A  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00DB                              ?_setSw_Main 0076  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0076  
                   __end_of_setSw_Status 1F1C                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0076                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0076                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D6                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 001D                                _Tx_Length 00D7  
                            __pdataBANK4 0220                                 ??_setLED 0022  
                               ?_ADC_Set 0076                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E32               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 14E2                    ?_CC2500_FrequencyCabr 0076  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0076  
                        _setRF_Main$5021 0068                              __pbssCOMMON 0070  
                               ?_IOC_Set 0076                                ___latbits 0003  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0076  
                          __pcstackBANK0 0020                            __pcstackBANK3 01E6  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0076  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 007E                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0076  
                               ?_WDT_Set 0076                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013E                            _DimmerLights2 014D  
                          _DimmerLights3 01C5                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0076  
                    __size_of_setRF_Main 00DB                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0076                                _getBuz_GO 1FBA  
    __end_of_Flash_Memory_Initialization 05F8              _Flash_Memory_Initialization 0531  
                               ?___awdiv 0020                                __ptext100 1E2A  
                              __ptext101 1116                                __ptext110 112F  
                              __ptext102 1E3A                                __ptext111 1EEF  
                              __ptext103 10BD                                __ptext112 1E80  
                              __ptext104 1095                                __ptext113 141E  
                              __ptext105 1668                                __ptext114 117E  
                              __ptext106 1E21                                __ptext108 13C5  
                              __ptext109 0045                                 ?___ftadd 003E  
                              _getRxData 09FA                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 0056                  __end_of_setRFSW_Control 07F9  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1E24                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1F3A                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0150  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 12FC  
          __end_of_setDimmerLights_AdjGo 1F99                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00D8           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F49  
                           _setRF_Enable 1EE1                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 11B8                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 16FD                      _DimmerLightsIntrIOC 00D3  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1F79                          SwPointSelect@sw 0021  
                              clear_ram0 1E4B                 CC2500_InitPATable@loop_d 0027  
                           _my_MainTimer 1751                                _setTxData 05F8  
    __end_of_DimmerLights_Initialization 1295              _DimmerLights_Initialization 1274  
                     _CC2500_ClearRXFIFO 1E2A                       _CC2500_ClearTXFIFO 1E2E  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E61  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 144C                               ?_getRxData 0076  
                               _TMR1_ISR 13C5                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1EBC  
                       _Sw_DimmerAdjFunc 0931                      ?_CC2500_ClearRXFIFO 0076  
                    ?_CC2500_ClearTXFIFO 0076        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00CB              __end_of_CC2500_WriteCommand 112F  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1070  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0076  
                       _Sw_DimmerOffFunc 0B3A                    _Sw_DimmerAdjFunc$5971 0025  
                  _Sw_DimmerAdjFunc$5972 0026                    _Sw_DimmerAdjFunc$5973 0027  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 0029  
                               _DelayOff 0072                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0078                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0076                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EBC                           ?_SwPointSelect 0076  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 14AD                    _DlyOff_Initialization 1066  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1E36  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 1FCB  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1EFE                             _setMemory_GO 0800  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0076  
                           ?_Switch_Main 0076               ??_DimmerIntrIOCPointSelect 0076  
                       _CC2500_WriteByte 1095             Flash_Memory_Initialization@i 005E  
                      setRFSW_Control@sw 0063                                setLED@led 0022  
                ??_DimmerIntrPointSelect 0076                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0076  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1348  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 1295                         ??_LedPointSelect 0020  
                               ___ftpack 08D0                             _setSw_Status 1F0D  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 16B2                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0B3A                 ?_DelayOff_Initialization 0076  
                       setDelayOff_GO@sw 002E                                 __ptext10 0D90  
                               __ptext11 0B3A                                 __ptext20 09FA  
                               __ptext12 0931                                 __ptext21 147B  
                               __ptext13 1F99                                 __ptext30 0816  
                               __ptext22 0F51                                 __ptext14 1F89  
                               __ptext31 06B5                                 __ptext23 0769  
                               __ptext15 1FCB                                 __ptext40 1FDC  
                               __ptext32 0360                                 __ptext24 0871  
                               __ptext16 1E51                                 __ptext41 1E6A  
                               __ptext33 1FBA                                 __ptext25 139B  
                               __ptext17 1F2B                                 __ptext50 1FA9  
                               __ptext42 1EBC                                 __ptext34 0995  
                               __ptext26 1FEE                                 __ptext18 1E27  
                               __ptext51 11F4                                 __ptext43 10FE  
                               __ptext35 0C1A                                 __ptext27 14E2  
                               __ptext19 0456                                 __ptext60 151D  
                               __ptext52 15DE                                 __ptext44 1ED4  
                               __ptext36 12B7                                 __ptext28 14AD  
                               __ptext61 0C8B                                 __ptext53 1EB0  
                               __ptext45 1E36                                 __ptext37 10E7  
                               __ptext29 12D9                                 __ptext70 1EA4  
                               __ptext62 0BA9                                 __ptext54 0531  
                               __ptext46 07F9                                 __ptext38 1E24  
                               __ptext71 0A63                                 __ptext63 1322  
                               __ptext55 144C                                 __ptext47 1F79  
                               __ptext39 1E75                                 __ptext80 08D0  
                               __ptext72 05F8                                 __ptext64 1082  
                               __ptext56 1E61                                 __ptext48 16B2  
                               __ptext81 1EFE                                 __ptext73 1F0D  
                               __ptext65 0800                                 __ptext57 1149  
                               __ptext49 1F69                                 __ptext90 119B  
                               __ptext82 1213                                 __ptext74 11B8  
                               __ptext66 10A9                                 __ptext58 1F1C  
                               __ptext91 10D2                                 __ptext83 1F59  
                               __ptext75 0ACE                                 __ptext67 1274  
                               __ptext59 0E1A                                 __ptext92 1E32  
                               __ptext84 1F49                                 __ptext76 1622  
                               __ptext68 13F1                                 __ptext93 159B  
                               __ptext85 1163                                 __ptext77 0D09  
                               __ptext69 1E3F                                 __ptext94 1371  
                               __ptext86 17A7                                 __ptext78 0EA8  
                               __ptext95 11D5                                 __ptext87 16FD  
                               __ptext79 1295                                 __ptext96 1253  
                               __ptext88 1E98                                 __ptext97 1E8C  
                               __ptext89 1066                                 __ptext98 12FC  
                               __ptext99 1E2E                                 __product 0220  
          ??_setDimmerLights_IntrControl 0078                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 0020           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1F0D            __end_of_Dimmer_Initialization 1E45  
           __end_of_setDimmerLights_Main 0EA8                             ??_setSw_Main 0068  
                          setLED@command 0021                            __size_of_main 0041  
                            _setRF_Learn 1E59                 __end_of_CC2500_SIDLEMode 1E36  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 11B8  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1082  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000C  
                        _CC2500_ReadByte 10E7                       _CC2500_InitPATable 11D5  
    __size_of_getDimmerLights_StatusFlag 0014            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0531                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0076  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 01E6  
                               main@argv 01E8                      ?_CC2500_InitPATable 0076  
                        _CC2500_PowerRST 159B              __end_of_Flash_Memory_Modify 1622  
                      ??_getPercentValue 0059                              _setLog_Code 147B  
            __end_of_Flash_Memory_Unlock 1E6A                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1253                       __end_of_setSw_Main 0360  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0076  
                         _DelayTimejudge 139B                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0078  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0076                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 141E  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13F1  
            __end_of_setDimmerLights_Adj 155A                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1E24  
   __size_of_setDimmerLights_IntrControl 01CB                     _Flash_Memory_Erasing 1EB0  
                     ?_RF_Initialization 0076                               _SPI0Buffer 0075  
        __end_of_DelayOff_Initialization 1EA4      __size_of_setDimmerLights_IntrIOC_GO 002E  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1EB0  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0871  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 13C5  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1322  
               __end_of_Sw_DimmerAdjFunc 0995                  __end_of_CC2500_ReadByte 10FE  
           __end_of_setSw_Initialization 1E59                          _Timeout_Counter 10BD  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1F79  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 008A  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E27                 __end_of_Sw_DimmerOffFunc 0BA9  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C8B                    __end_of_CC2500_TxData 09FA  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 15DE  
