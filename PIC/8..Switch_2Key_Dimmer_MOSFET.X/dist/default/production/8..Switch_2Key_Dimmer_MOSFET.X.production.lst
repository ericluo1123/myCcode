

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Oct 04 17:12:22 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	dabs	1,0x7E,2
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  011D                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0194                     	;# 
   211  0195                     	;# 
   212  0196                     	;# 
   213  0197                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  020D                     	;# 
   226  0210                     	;# 
   227  0211                     	;# 
   228  0211                     	;# 
   229  0212                     	;# 
   230  0212                     	;# 
   231  0213                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0214                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0216                     	;# 
   239  0216                     	;# 
   240  0217                     	;# 
   241  0217                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0FE4                     	;# 
   254  0FE5                     	;# 
   255  0FE6                     	;# 
   256  0FE7                     	;# 
   257  0FE8                     	;# 
   258  0FE9                     	;# 
   259  0FEA                     	;# 
   260  0FEB                     	;# 
   261  0FED                     	;# 
   262  0FEE                     	;# 
   263  0FEF                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  0116                     	;# 
   311  0117                     	;# 
   312  011D                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  018E                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0197                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020D                     	;# 
   337  0210                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0291                     	;# 
   354  0291                     	;# 
   355  0292                     	;# 
   356  0293                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  0394                     	;# 
   362  0395                     	;# 
   363  0396                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018D                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020D                     	;# 
   448  0210                     	;# 
   449  0211                     	;# 
   450  0211                     	;# 
   451  0212                     	;# 
   452  0212                     	;# 
   453  0213                     	;# 
   454  0213                     	;# 
   455  0214                     	;# 
   456  0214                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0216                     	;# 
   461  0216                     	;# 
   462  0217                     	;# 
   463  0217                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  0394                     	;# 
   473  0395                     	;# 
   474  0396                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0010                     	;# 
   502  0011                     	;# 
   503  0012                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  011D                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537  018E                     	;# 
   538  0191                     	;# 
   539  0191                     	;# 
   540  0192                     	;# 
   541  0193                     	;# 
   542  0193                     	;# 
   543  0194                     	;# 
   544  0195                     	;# 
   545  0196                     	;# 
   546  0197                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019C                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020D                     	;# 
   559  0210                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0298                     	;# 
   580  0298                     	;# 
   581  0299                     	;# 
   582  029A                     	;# 
   583  0394                     	;# 
   584  0395                     	;# 
   585  0396                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0010                     	;# 
   613  0011                     	;# 
   614  0012                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  008E                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0099                     	;# 
   634  009A                     	;# 
   635  009B                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  010C                     	;# 
   641  010D                     	;# 
   642  010E                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0197                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  020D                     	;# 
   670  0210                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0216                     	;# 
   683  0216                     	;# 
   684  0217                     	;# 
   685  0217                     	;# 
   686  0291                     	;# 
   687  0291                     	;# 
   688  0292                     	;# 
   689  0293                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  0394                     	;# 
   695  0395                     	;# 
   696  0396                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0197                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019C                     	;# 
   776  019C                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  019F                     	;# 
   780  020D                     	;# 
   781  0210                     	;# 
   782  0211                     	;# 
   783  0211                     	;# 
   784  0212                     	;# 
   785  0212                     	;# 
   786  0213                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0291                     	;# 
   798  0291                     	;# 
   799  0292                     	;# 
   800  0293                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  0394                     	;# 
   806  0395                     	;# 
   807  0396                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0015                     	;# 
   838  0016                     	;# 
   839  0016                     	;# 
   840  0017                     	;# 
   841  0018                     	;# 
   842  0019                     	;# 
   843  001A                     	;# 
   844  001B                     	;# 
   845  001C                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0095                     	;# 
   853  0096                     	;# 
   854  0097                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010D                     	;# 
   864  010E                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0197                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0298                     	;# 
   913  0298                     	;# 
   914  0299                     	;# 
   915  029A                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000D                     	;# 
   944  000E                     	;# 
   945  0010                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0090                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0197                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019C                     	;# 
   999  019D                     	;# 
  1000  019E                     	;# 
  1001  019F                     	;# 
  1002  020D                     	;# 
  1003  0210                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0216                     	;# 
  1016  0216                     	;# 
  1017  0217                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0298                     	;# 
  1024  0298                     	;# 
  1025  0299                     	;# 
  1026  029A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0010                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  008C                     	;# 
  1069  008D                     	;# 
  1070  008E                     	;# 
  1071  0090                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  010C                     	;# 
  1085  010D                     	;# 
  1086  010E                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  011D                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019C                     	;# 
  1109  019C                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  020D                     	;# 
  1114  0210                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  000E                     	;# 
  1167  0010                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  008C                     	;# 
  1180  008D                     	;# 
  1181  008E                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  010E                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  011D                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0194                     	;# 
  1210  0195                     	;# 
  1211  0196                     	;# 
  1212  0197                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019C                     	;# 
  1221  019D                     	;# 
  1222  019E                     	;# 
  1223  019F                     	;# 
  1224  020D                     	;# 
  1225  0210                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  029A                     	;# 
  1249  0394                     	;# 
  1250  0395                     	;# 
  1251  0396                     	;# 
  1252  0FE4                     	;# 
  1253  0FE5                     	;# 
  1254  0FE6                     	;# 
  1255  0FE7                     	;# 
  1256  0FE8                     	;# 
  1257  0FE9                     	;# 
  1258  0FEA                     	;# 
  1259  0FEB                     	;# 
  1260  0FED                     	;# 
  1261  0FEE                     	;# 
  1262  0FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0011                     	;# 
  1280  0012                     	;# 
  1281  0015                     	;# 
  1282  0016                     	;# 
  1283  0016                     	;# 
  1284  0017                     	;# 
  1285  0018                     	;# 
  1286  0019                     	;# 
  1287  001A                     	;# 
  1288  001B                     	;# 
  1289  001C                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0095                     	;# 
  1297  0096                     	;# 
  1298  0097                     	;# 
  1299  0099                     	;# 
  1300  009A                     	;# 
  1301  009B                     	;# 
  1302  009B                     	;# 
  1303  009C                     	;# 
  1304  009D                     	;# 
  1305  009E                     	;# 
  1306  010C                     	;# 
  1307  010D                     	;# 
  1308  010E                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  011D                     	;# 
  1312  018C                     	;# 
  1313  018D                     	;# 
  1314  018E                     	;# 
  1315  0191                     	;# 
  1316  0191                     	;# 
  1317  0192                     	;# 
  1318  0193                     	;# 
  1319  0193                     	;# 
  1320  0194                     	;# 
  1321  0195                     	;# 
  1322  0196                     	;# 
  1323  0197                     	;# 
  1324  0199                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020D                     	;# 
  1336  0210                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0291                     	;# 
  1353  0291                     	;# 
  1354  0292                     	;# 
  1355  0293                     	;# 
  1356  0298                     	;# 
  1357  0298                     	;# 
  1358  0299                     	;# 
  1359  029A                     	;# 
  1360  0394                     	;# 
  1361  0395                     	;# 
  1362  0396                     	;# 
  1363  0FE4                     	;# 
  1364  0FE5                     	;# 
  1365  0FE6                     	;# 
  1366  0FE7                     	;# 
  1367  0FE8                     	;# 
  1368  0FE9                     	;# 
  1369  0FEA                     	;# 
  1370  0FEB                     	;# 
  1371  0FED                     	;# 
  1372  0FEE                     	;# 
  1373  0FEF                     	;# 
  1374  0000                     	;# 
  1375  0001                     	;# 
  1376  0002                     	;# 
  1377  0003                     	;# 
  1378  0004                     	;# 
  1379  0005                     	;# 
  1380  0006                     	;# 
  1381  0007                     	;# 
  1382  0008                     	;# 
  1383  0009                     	;# 
  1384  000A                     	;# 
  1385  000B                     	;# 
  1386  000C                     	;# 
  1387  000D                     	;# 
  1388  000E                     	;# 
  1389  0010                     	;# 
  1390  0011                     	;# 
  1391  0012                     	;# 
  1392  0015                     	;# 
  1393  0016                     	;# 
  1394  0016                     	;# 
  1395  0017                     	;# 
  1396  0018                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  008C                     	;# 
  1402  008D                     	;# 
  1403  008E                     	;# 
  1404  0090                     	;# 
  1405  0091                     	;# 
  1406  0092                     	;# 
  1407  0095                     	;# 
  1408  0096                     	;# 
  1409  0097                     	;# 
  1410  0099                     	;# 
  1411  009A                     	;# 
  1412  009B                     	;# 
  1413  009B                     	;# 
  1414  009C                     	;# 
  1415  009D                     	;# 
  1416  009E                     	;# 
  1417  010C                     	;# 
  1418  010D                     	;# 
  1419  010E                     	;# 
  1420  0116                     	;# 
  1421  0117                     	;# 
  1422  011D                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  019A                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019D                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  020D                     	;# 
  1447  0210                     	;# 
  1448  0211                     	;# 
  1449  0211                     	;# 
  1450  0212                     	;# 
  1451  0212                     	;# 
  1452  0213                     	;# 
  1453  0213                     	;# 
  1454  0214                     	;# 
  1455  0214                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0216                     	;# 
  1460  0216                     	;# 
  1461  0217                     	;# 
  1462  0217                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0298                     	;# 
  1468  0298                     	;# 
  1469  0299                     	;# 
  1470  029A                     	;# 
  1471  0394                     	;# 
  1472  0395                     	;# 
  1473  0396                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0010                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0090                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  011D                     	;# 
  1534  018C                     	;# 
  1535  018D                     	;# 
  1536  018E                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0194                     	;# 
  1543  0195                     	;# 
  1544  0196                     	;# 
  1545  0197                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020D                     	;# 
  1558  0210                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0298                     	;# 
  1579  0298                     	;# 
  1580  0299                     	;# 
  1581  029A                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0010                     	;# 
  1612  0011                     	;# 
  1613  0012                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  001B                     	;# 
  1622  001C                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0090                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0116                     	;# 
  1643  0117                     	;# 
  1644  011D                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0197                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019C                     	;# 
  1664  019C                     	;# 
  1665  019D                     	;# 
  1666  019E                     	;# 
  1667  019F                     	;# 
  1668  020D                     	;# 
  1669  0210                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0298                     	;# 
  1690  0298                     	;# 
  1691  0299                     	;# 
  1692  029A                     	;# 
  1693  0394                     	;# 
  1694  0395                     	;# 
  1695  0396                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0010                     	;# 
  1723  0011                     	;# 
  1724  0012                     	;# 
  1725  0015                     	;# 
  1726  0016                     	;# 
  1727  0016                     	;# 
  1728  0017                     	;# 
  1729  0018                     	;# 
  1730  0019                     	;# 
  1731  001A                     	;# 
  1732  001B                     	;# 
  1733  001C                     	;# 
  1734  008C                     	;# 
  1735  008D                     	;# 
  1736  008E                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0099                     	;# 
  1744  009A                     	;# 
  1745  009B                     	;# 
  1746  009B                     	;# 
  1747  009C                     	;# 
  1748  009D                     	;# 
  1749  009E                     	;# 
  1750  010C                     	;# 
  1751  010D                     	;# 
  1752  010E                     	;# 
  1753  0116                     	;# 
  1754  0117                     	;# 
  1755  011D                     	;# 
  1756  018C                     	;# 
  1757  018D                     	;# 
  1758  018E                     	;# 
  1759  0191                     	;# 
  1760  0191                     	;# 
  1761  0192                     	;# 
  1762  0193                     	;# 
  1763  0193                     	;# 
  1764  0194                     	;# 
  1765  0195                     	;# 
  1766  0196                     	;# 
  1767  0197                     	;# 
  1768  0199                     	;# 
  1769  019A                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019C                     	;# 
  1775  019C                     	;# 
  1776  019D                     	;# 
  1777  019E                     	;# 
  1778  019F                     	;# 
  1779  020D                     	;# 
  1780  0210                     	;# 
  1781  0211                     	;# 
  1782  0211                     	;# 
  1783  0212                     	;# 
  1784  0212                     	;# 
  1785  0213                     	;# 
  1786  0213                     	;# 
  1787  0214                     	;# 
  1788  0214                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0216                     	;# 
  1793  0216                     	;# 
  1794  0217                     	;# 
  1795  0217                     	;# 
  1796  0291                     	;# 
  1797  0291                     	;# 
  1798  0292                     	;# 
  1799  0293                     	;# 
  1800  0298                     	;# 
  1801  0298                     	;# 
  1802  0299                     	;# 
  1803  029A                     	;# 
  1804  0394                     	;# 
  1805  0395                     	;# 
  1806  0396                     	;# 
  1807  0FE4                     	;# 
  1808  0FE5                     	;# 
  1809  0FE6                     	;# 
  1810  0FE7                     	;# 
  1811  0FE8                     	;# 
  1812  0FE9                     	;# 
  1813  0FEA                     	;# 
  1814  0FEB                     	;# 
  1815  0FED                     	;# 
  1816  0FEE                     	;# 
  1817  0FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0011                     	;# 
  1835  0012                     	;# 
  1836  0015                     	;# 
  1837  0016                     	;# 
  1838  0016                     	;# 
  1839  0017                     	;# 
  1840  0018                     	;# 
  1841  0019                     	;# 
  1842  001A                     	;# 
  1843  001B                     	;# 
  1844  001C                     	;# 
  1845  008C                     	;# 
  1846  008D                     	;# 
  1847  008E                     	;# 
  1848  0090                     	;# 
  1849  0091                     	;# 
  1850  0092                     	;# 
  1851  0095                     	;# 
  1852  0096                     	;# 
  1853  0097                     	;# 
  1854  0099                     	;# 
  1855  009A                     	;# 
  1856  009B                     	;# 
  1857  009B                     	;# 
  1858  009C                     	;# 
  1859  009D                     	;# 
  1860  009E                     	;# 
  1861  010C                     	;# 
  1862  010D                     	;# 
  1863  010E                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  011D                     	;# 
  1867  018C                     	;# 
  1868  018D                     	;# 
  1869  018E                     	;# 
  1870  0191                     	;# 
  1871  0191                     	;# 
  1872  0192                     	;# 
  1873  0193                     	;# 
  1874  0193                     	;# 
  1875  0194                     	;# 
  1876  0195                     	;# 
  1877  0196                     	;# 
  1878  0197                     	;# 
  1879  0199                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  019C                     	;# 
  1887  019D                     	;# 
  1888  019E                     	;# 
  1889  019F                     	;# 
  1890  020D                     	;# 
  1891  0210                     	;# 
  1892  0211                     	;# 
  1893  0211                     	;# 
  1894  0212                     	;# 
  1895  0212                     	;# 
  1896  0213                     	;# 
  1897  0213                     	;# 
  1898  0214                     	;# 
  1899  0214                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0216                     	;# 
  1904  0216                     	;# 
  1905  0217                     	;# 
  1906  0217                     	;# 
  1907  0291                     	;# 
  1908  0291                     	;# 
  1909  0292                     	;# 
  1910  0293                     	;# 
  1911  0298                     	;# 
  1912  0298                     	;# 
  1913  0299                     	;# 
  1914  029A                     	;# 
  1915  0394                     	;# 
  1916  0395                     	;# 
  1917  0396                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  008C                     	;# 
  1957  008D                     	;# 
  1958  008E                     	;# 
  1959  0090                     	;# 
  1960  0091                     	;# 
  1961  0092                     	;# 
  1962  0095                     	;# 
  1963  0096                     	;# 
  1964  0097                     	;# 
  1965  0099                     	;# 
  1966  009A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  011D                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020D                     	;# 
  2002  0210                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0216                     	;# 
  2015  0216                     	;# 
  2016  0217                     	;# 
  2017  0217                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0298                     	;# 
  2023  0298                     	;# 
  2024  0299                     	;# 
  2025  029A                     	;# 
  2026  0394                     	;# 
  2027  0395                     	;# 
  2028  0396                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040                           
  2041                           	psect	idataBANK3
  2042  1BEA                     __pidataBANK3:	
  2043                           
  2044                           ;initializer for __product
  2045  1BEA  3463               	retlw	99
  2046  1BEB  3402               	retlw	2
  2047  1BEC  3400               	retlw	0
  2048  1BED  3400               	retlw	0
  2049  1BEE  3400               	retlw	0
  2050  1BEF  3400               	retlw	0
  2051  1BF0  3400               	retlw	0
  2052  1BF1  3400               	retlw	0
  2053  1BF2  3400               	retlw	0
  2054  1BF3  3400               	retlw	0
  2055  1BF4  3400               	retlw	0
  2056  1BF5  3400               	retlw	0
  2057  1BF6  34FF               	retlw	255
  2058  1BF7  34FF               	retlw	255
  2059  1BF8  34FF               	retlw	255
  2060  1BF9  3400               	retlw	0
  2061  1BFA  3400               	retlw	0
  2062  1BFB  3400               	retlw	0
  2063  1BFC  3400               	retlw	0
  2064  1BFD  3400               	retlw	0
  2065  1BFE  3400               	retlw	0
  2066  1BFF  3400               	retlw	0
  2067  1C00  3400               	retlw	0
  2068  1C01  3400               	retlw	0
  2069  1C02  3400               	retlw	0
  2070  1C03  3400               	retlw	0
  2071  1C04  3400               	retlw	0
  2072  1C05  3400               	retlw	0
  2073  1C06  3400               	retlw	0
  2074  1C07  3400               	retlw	0
  2075  1C08  3400               	retlw	0
  2076  1C09  3400               	retlw	0
  2077                           
  2078                           	psect	stringtext
  2079  1800                     __pstringtext:	
  2080  1800                     _CC2500_registers_address:	
  2081  1800  3403               	retlw	3
  2082  1801  3416               	retlw	22
  2083  1802  3417               	retlw	23
  2084  1803  341E               	retlw	30
  2085  1804  341F               	retlw	31
  2086  1805  3420               	retlw	32
  2087  1806  342A               	retlw	42
  2088  1807  342B               	retlw	43
  2089  1808  340B               	retlw	11
  2090  1809  340C               	retlw	12
  2091  180A  340D               	retlw	13
  2092  180B  340E               	retlw	14
  2093  180C  340F               	retlw	15
  2094  180D  3410               	retlw	16
  2095  180E  3411               	retlw	17
  2096  180F  3412               	retlw	18
  2097  1810  3413               	retlw	19
  2098  1811  3414               	retlw	20
  2099  1812  340A               	retlw	10
  2100  1813  3415               	retlw	21
  2101  1814  3421               	retlw	33
  2102  1815  3422               	retlw	34
  2103  1816  3418               	retlw	24
  2104  1817  3419               	retlw	25
  2105  1818  341A               	retlw	26
  2106  1819  341B               	retlw	27
  2107  181A  341C               	retlw	28
  2108  181B  341D               	retlw	29
  2109  181C  3423               	retlw	35
  2110  181D  3424               	retlw	36
  2111  181E  3425               	retlw	37
  2112  181F  3426               	retlw	38
  2113  1820  3429               	retlw	41
  2114  1821  342C               	retlw	44
  2115  1822  342D               	retlw	45
  2116  1823  342E               	retlw	46
  2117  1824  3400               	retlw	0
  2118  1825  3401               	retlw	1
  2119  1826  3402               	retlw	2
  2120  1827  3407               	retlw	7
  2121  1828  3408               	retlw	8
  2122  1829  3409               	retlw	9
  2123  182A  3406               	retlw	6
  2124  182B  3404               	retlw	4
  2125  182C  3405               	retlw	5
  2126  182D  3427               	retlw	39
  2127  182E  3428               	retlw	40
  2128  182F                     __end_of_CC2500_registers_address:	
  2129  182F                     _CC2500_rfSettings:	
  2130  182F  3407               	retlw	7
  2131  1830  3407               	retlw	7
  2132  1831  3430               	retlw	48
  2133  1832  3487               	retlw	135
  2134  1833  346B               	retlw	107
  2135  1834  34F8               	retlw	248
  2136  1835  347F               	retlw	127
  2137  1836  343F               	retlw	63
  2138  1837  3409               	retlw	9
  2139  1838  3400               	retlw	0
  2140  1839  345C               	retlw	92
  2141  183A  34A7               	retlw	167
  2142  183B  3462               	retlw	98
  2143  183C  3486               	retlw	134
  2144  183D  3483               	retlw	131
  2145  183E  3403               	retlw	3
  2146  183F  3422               	retlw	34
  2147  1840  34F8               	retlw	248
  2148  1841  3400               	retlw	0
  2149  1842  3444               	retlw	68
  2150  1843  34B6               	retlw	182
  2151  1844  3410               	retlw	16
  2152  1845  3418               	retlw	24
  2153  1846  341D               	retlw	29
  2154  1847  341C               	retlw	28
  2155  1848  34C7               	retlw	199
  2156  1849  3400               	retlw	0
  2157  184A  34B2               	retlw	178
  2158  184B  34EA               	retlw	234
  2159  184C  340A               	retlw	10
  2160  184D  3400               	retlw	0
  2161  184E  3411               	retlw	17
  2162  184F  3459               	retlw	89
  2163  1850  3488               	retlw	136
  2164  1851  3431               	retlw	49
  2165  1852  340B               	retlw	11
  2166  1853  342F               	retlw	47
  2167  1854  342E               	retlw	46
  2168  1855  3406               	retlw	6
  2169  1856  3404               	retlw	4
  2170  1857  3405               	retlw	5
  2171  1858  3400               	retlw	0
  2172  1859  3430               	retlw	48
  2173  185A  34D3               	retlw	211
  2174  185B  3491               	retlw	145
  2175  185C  3441               	retlw	65
  2176  185D  3400               	retlw	0
  2177  185E                     __end_of_CC2500_rfSettings:	
  2178  185E                     _CC2500_patable_vaule:	
  2179  185E  34FE               	retlw	254
  2180  185F  34FE               	retlw	254
  2181  1860  34FE               	retlw	254
  2182  1861  34FE               	retlw	254
  2183  1862  34FE               	retlw	254
  2184  1863  34FE               	retlw	254
  2185  1864  34FE               	retlw	254
  2186  1865  34FE               	retlw	254
  2187  1866                     __end_of_CC2500_patable_vaule:	
  2188                           
  2189                           	psect	nvCOMMON
  2190  007D                     __pnvCOMMON:	
  2191  007D                     _product:	
  2192  007D                     	ds	1
  2193                           
  2194                           	psect	nvBANK1
  2195  00E6                     __pnvBANK1:	
  2196  00E6                     _Memory:	
  2197  00E6                     	ds	1
  2198  00E7                     _Timer0:	
  2199  00E7                     	ds	1
  2200  00E8                     _WDT:	
  2201  00E8                     	ds	1
  2202  00E9                     _myMain:	
  2203  00E9                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0015                     _TMR0	set	21
  2208  005F                     _GIE	set	95
  2209  005C                     _INTE	set	92
  2210  0059                     _INTF	set	89
  2211  005B                     _IOCIE	set	91
  2212  0058                     _IOCIF	set	88
  2213  005E                     _PEIE	set	94
  2214  0060                     _RA0	set	96
  2215  0063                     _RA3	set	99
  2216  0064                     _RA4	set	100
  2217  0066                     _RA6	set	102
  2218  0067                     _RA7	set	103
  2219  0068                     _RB0	set	104
  2220  0069                     _RB1	set	105
  2221  006B                     _RB3	set	107
  2222  006C                     _RB4	set	108
  2223  006D                     _RB5	set	109
  2224  0070                     _RC0	set	112
  2225  0071                     _RC1	set	113
  2226  0072                     _RC2	set	114
  2227  0074                     _RC4	set	116
  2228  0075                     _RC5	set	117
  2229  0077                     _RC7	set	119
  2230  005D                     _TMR0IE	set	93
  2231  005A                     _TMR0IF	set	90
  2232  009D                     _ADCON0	set	157
  2233  009E                     _ADCON1	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  0095                     _OPTION_REG	set	149
  2237  0099                     _OSCCON	set	153
  2238  008C                     _TRISA	set	140
  2239  008D                     _TRISB	set	141
  2240  008E                     _TRISC	set	142
  2241  0097                     _WDTCON	set	151
  2242  04E9                     _GO_nDONE	set	1257
  2243  0117                     _FVRCON	set	279
  2244  010C                     _LATA	set	268
  2245  010D                     _LATB	set	269
  2246  010E                     _LATC	set	270
  2247  018C                     _ANSELA	set	396
  2248  018D                     _ANSELB	set	397
  2249  018E                     _ANSELC	set	398
  2250  0192                     _PMADRH	set	402
  2251  0191                     _PMADRL	set	401
  2252  0196                     _PMCON2	set	406
  2253  0194                     _PMDATH	set	404
  2254  0193                     _PMDATL	set	403
  2255  0CAE                     _CFGS	set	3246
  2256  0CAC                     _FREE	set	3244
  2257  0CAD                     _LWLO	set	3245
  2258  0CA8                     _RD	set	3240
  2259  0CA9                     _WR	set	3241
  2260  0CAA                     _WREN	set	3242
  2261  1068                     _WPUB0	set	4200
  2262  1069                     _WPUB1	set	4201
  2263  106A                     _WPUB2	set	4202
  2264  0396                     _IOCBF	set	918
  2265  0395                     _IOCBN	set	917
  2266  0394                     _IOCBP	set	916
  2267  1CB2                     _IOCBF2	set	7346
  2268                           
  2269                           ; #config settings
  2270  0000                     
  2271                           	psect	cinit
  2272  0018                     start_initialization:	
  2273  0018                     __initialization:	
  2274                           
  2275                           ; Clear objects allocated to BITCOMMON
  2276  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2277                           
  2278                           ; Clear objects allocated to COMMON
  2279  0019  01F7               	clrf	__pbssCOMMON& (0+127)
  2280  001A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2281  001B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  2282  001C  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  2283  001D  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  2284                           
  2285                           ; Clear objects allocated to BANK1
  2286  001E  30A0               	movlw	low __pbssBANK1
  2287  001F  0084               	movwf	4
  2288  0020  3000               	movlw	high __pbssBANK1
  2289  0021  0085               	movwf	5
  2290  0022  3046               	movlw	70
  2291  0023  31A7  2787  3180   	fcall	clear_ram0
  2292                           
  2293                           ; Clear objects allocated to BANK2
  2294  0026  3020               	movlw	low __pbssBANK2
  2295  0027  0084               	movwf	4
  2296  0028  3001               	movlw	high __pbssBANK2
  2297  0029  0085               	movwf	5
  2298  002A  3045               	movlw	69
  2299  002B  31A7  2787  3180   	fcall	clear_ram0
  2300                           
  2301                           ; Clear objects allocated to BANK3
  2302  002E  30C0               	movlw	low __pbssBANK3
  2303  002F  0084               	movwf	4
  2304  0030  3001               	movlw	high __pbssBANK3
  2305  0031  0085               	movwf	5
  2306  0032  3011               	movlw	17
  2307  0033  31A7  2787  3180   	fcall	clear_ram0
  2308                           
  2309                           ; Clear objects allocated to BANK4
  2310  0036  3020               	movlw	low __pbssBANK4
  2311  0037  0084               	movwf	4
  2312  0038  3002               	movlw	high __pbssBANK4
  2313  0039  0085               	movwf	5
  2314  003A  3025               	movlw	37
  2315  003B  31A7  2787  3180   	fcall	clear_ram0
  2316                           
  2317                           ; Clear objects allocated to BANK5
  2318  003E  30A0               	movlw	low __pbssBANK5
  2319  003F  0084               	movwf	4
  2320  0040  3002               	movlw	high __pbssBANK5
  2321  0041  0085               	movwf	5
  2322  0042  3047               	movlw	71
  2323  0043  31A7  2787  3180   	fcall	clear_ram0
  2324                           
  2325                           ; Initialize objects allocated to BANK3
  2326  0046  30EA               	movlw	low __pidataBANK3
  2327  0047  0084               	movwf	4
  2328  0048  309B               	movlw	(high __pidataBANK3)| (0+128)
  2329  0049  0085               	movwf	5
  2330  004A  30A0               	movlw	low __pdataBANK3
  2331  004B  0086               	movwf	6
  2332  004C  3001               	movlw	high __pdataBANK3
  2333  004D  0087               	movwf	7
  2334  004E  3020               	movlw	32
  2335  004F  31A7  2781         	fcall	init_ram
  2336  0051                     end_of_initialization:	
  2337                           ;End of C runtime variable initialization code
  2338                           
  2339  0051                     __end_of__initialization:	
  2340  0051  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2341  0052  0020               	movlb	0
  2342  0053  3193  2B46         	ljmp	_main	;jump to C main() function
  2343                           
  2344                           	psect	bitbssCOMMON
  2345  03E0                     __pbitbssCOMMON:	
  2346  03E0                     _Receive_OK:	
  2347  03E0                     	ds	1
  2348  03E1                     _Transceive_OK:	
  2349  03E1                     	ds	1
  2350                           
  2351                           	psect	bssCOMMON
  2352  0077                     __pbssCOMMON:	
  2353  0077                     _DimmerLights:	
  2354  0077                     	ds	1
  2355  0078                     _DimmerLights11:	
  2356  0078                     	ds	1
  2357  0079                     _DimmerLights22:	
  2358  0079                     	ds	1
  2359  007A                     _Sw:	
  2360  007A                     	ds	1
  2361  007B                     _Load:	
  2362  007B                     	ds	1
  2363                           
  2364                           	psect	bssBANK1
  2365  00A0                     __pbssBANK1:	
  2366  00A0                     _RF_Data:	
  2367  00A0                     	ds	21
  2368  00B5                     _RF_Count:	
  2369  00B5                     	ds	2
  2370  00B7                     _Buz:	
  2371  00B7                     	ds	1
  2372  00B8                     _CRC:	
  2373  00B8                     	ds	1
  2374  00B9                     _DelayOff:	
  2375  00B9                     	ds	1
  2376  00BA                     _Dimmer:	
  2377  00BA                     	ds	1
  2378  00BB                     _DimmerLightsIntr:	
  2379  00BB                     	ds	1
  2380  00BC                     _LED:	
  2381  00BC                     	ds	1
  2382  00BD                     _RF:	
  2383  00BD                     	ds	1
  2384  00BE                     _RFSW:	
  2385  00BE                     	ds	1
  2386  00BF                     _RSSI:	
  2387  00BF                     	ds	1
  2388  00C0                     _Rx_Length:	
  2389  00C0                     	ds	1
  2390  00C1                     _SPI0Buffer:	
  2391  00C1                     	ds	1
  2392  00C2                     _Tx_Length:	
  2393  00C2                     	ds	1
  2394  00C3                     _r_address:	
  2395  00C3                     	ds	1
  2396  00C4                     _r_data:	
  2397  00C4                     	ds	1
  2398  00C5                     _s_data:	
  2399  00C5                     	ds	1
  2400  00C6                     _DlySw1:	
  2401  00C6                     	ds	5
  2402  00CB                     _DlySw2:	
  2403  00CB                     	ds	5
  2404  00D0                     _VarErrLED:	
  2405  00D0                     	ds	4
  2406  00D4                     _VarLED1:	
  2407  00D4                     	ds	4
  2408  00D8                     _VarLED2:	
  2409  00D8                     	ds	4
  2410  00DC                     _Dimmer1:	
  2411  00DC                     	ds	3
  2412  00DF                     _RF1:	
  2413  00DF                     	ds	3
  2414  00E2                     __WDT:	
  2415  00E2                     	ds	2
  2416  00E4                     _RFSW1:	
  2417  00E4                     	ds	1
  2418  00E5                     _RFSW2:	
  2419  00E5                     	ds	1
  2420                           
  2421                           	psect	bssBANK2
  2422  0120                     __pbssBANK2:	
  2423  0120                     _DimmerLights1:	
  2424  0120                     	ds	15
  2425  012F                     _DimmerLights2:	
  2426  012F                     	ds	15
  2427  013E                     _Buz1:	
  2428  013E                     	ds	12
  2429  014A                     _Sw1:	
  2430  014A                     	ds	9
  2431  0153                     _Sw2:	
  2432  0153                     	ds	9
  2433  015C                     _VarTimer0:	
  2434  015C                     	ds	9
  2435                           
  2436                           	psect	bssBANK3
  2437  01C0                     __pbssBANK3:	
  2438  01C0                     __myMain:	
  2439  01C0                     	ds	17
  2440                           
  2441                           	psect	dataBANK3
  2442  01A0                     __pdataBANK3:	
  2443  01A0                     __product:	
  2444  01A0                     	ds	32
  2445                           
  2446                           	psect	bssBANK4
  2447  0220                     __pbssBANK4:	
  2448  0220                     _VarMemory:	
  2449  0220                     	ds	37
  2450                           
  2451                           	psect	bssBANK5
  2452  02A0                     __pbssBANK5:	
  2453  02A0                     _Load1:	
  2454  02A0                     	ds	71
  2455                           
  2456                           	psect	clrtext
  2457  2787                     clear_ram0:	
  2458                           ;	Called with FSR0 containing the base address, and
  2459                           ;	WREG with the size to clear
  2460                           
  2461  2787  0064               	clrwdt	;clear the watchdog before getting into this loop
  2462  2788                     clrloop0:	
  2463  2788  0180               	clrf	0	;clear RAM location pointed to by FSR
  2464  2789  3101               	addfsr 0,1
  2465  278A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2466  278B  2F88               	goto	clrloop0	;have we reached the end yet?
  2467  278C  3400               	retlw	0	;all done for this memory range, return
  2468                           
  2469                           	psect	inittext
  2470  2781                     init_ram:	
  2471  2781  00FE               	movwf	126
  2472  2782                     initloop:	
  2473  2782  0012               	moviw fsr0++
  2474  2783  001E               	movwi fsr1++
  2475  2784  0BFE               	decfsz	126,f
  2476  2785  2F82               	goto	initloop
  2477  2786  3400               	retlw	0
  2478                           
  2479                           	psect	cstackCOMMON
  2480  0070                     __pcstackCOMMON:	
  2481  0070                     ?_CC2500_WriteByte:	
  2482  0070                     ?_CC2500_WriteCommand:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ReadStatus:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ReadByte:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_PowerRST:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_InitSetREG:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_InitPATable:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_ClearTXFIFO:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_ClearRXFIFO:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_FrequencyCabr:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_SIDLEMode:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_DlyOff_Initialization:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_DlyOff_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setTxData:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setDimmerLights_Initialization:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_Dimmer_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setLoad_GO:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setDimmerLights_Main:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setDimmerLights_ERROR:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setLoad_Count:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setLED_Initialization:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setLED_Main:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_Fosc_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_IO_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_TMR0_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_ADC_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_INT_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_IOC_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_WDT_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_IOC_ISR:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ??_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_TMR0_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_INT_ISR:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Flash_Memory_Write:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Flash_Memory_Modify:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_WDT_Clearing:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_myMain_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Load_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_Switch_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_RF_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_getLoad_AD:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_my_Main:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_Load_Main:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_Switch_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_RF_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setLoad_Enable:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setSw_Enable:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setLoad_AH_AL_Restore:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setLoad_Exceptions:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setRF_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setRF_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_getRxData:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_RF_RxDisable:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setLog_Code:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setControl_Lights_Table:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRFSW_Control:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setRFSW_AdjControl:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setRF_DimmerValue:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setSw_Initialization:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setSw_Main:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Sw_DimmerOnFunc:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Sw_DimmerAdjFunc:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Sw_DimmerOffFunc:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Buzzer_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Buzzer_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_CC2500_TxData:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_CC2500_RxData:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_CC2500_PowerOnInitial:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DelayOffPointSelect:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_DelayOff_Initialization:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DelayOff_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DimmerLightsPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_DimmerLights_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerLights_Close:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_DimmerLights_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_DimmerLights_Exceptions:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setDimmerLights_AdjRF:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_LedPointSelect:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_LED_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_LED_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Mcu_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_ISR:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setDimmerReClock:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ??_setDimmerReClock:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setINT_GO:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Unlock:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Flash_Memory_Erasing:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_WDT_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_RfPointSelect:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RfSWPointSelect:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_TouchPower:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_SwPointSelect:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?i1_setLoad_StatusOff:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?i1_RfPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ??i1_RfPointSelect:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayTimejudge:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_getDimmerLights_StatusFlag:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getPercentValue:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_Flash_Memory_Read:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_setPercentValue:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     setRF_Initialization@rf:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     i1setLoad_StatusOff@command:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791                           
  2792                           ; 1 bytes @ 0x0
  2793  0070                     	ds	1
  2794  0071                     ??i1_setLoad_StatusOff:	
  2795  0071                     i1setLoad_StatusOff@lights:	
  2796                           ; 0 bytes @ 0x1
  2797                           
  2798  0071                     i1RfPointSelect@rf:	
  2799                           ; 1 bytes @ 0x1
  2800                           
  2801                           
  2802                           ; 1 bytes @ 0x1
  2803  0071                     	ds	1
  2804  0072                     ??_TMR0_ISR:	
  2805  0072                     ?_setRF_ReceiveGO:	
  2806                           ; 0 bytes @ 0x2
  2807                           
  2808  0072                     setRF_ReceiveGO@command:	
  2809                           ; 0 bytes @ 0x2
  2810                           
  2811                           
  2812                           ; 1 bytes @ 0x2
  2813  0072                     	ds	1
  2814  0073                     ??_setRF_ReceiveGO:	
  2815  0073                     setRF_ReceiveGO@rf:	
  2816                           ; 0 bytes @ 0x3
  2817                           
  2818                           
  2819                           ; 1 bytes @ 0x3
  2820  0073                     	ds	1
  2821  0074                     ??_INT_ISR:	
  2822                           
  2823                           ; 0 bytes @ 0x4
  2824  0074                     	ds	2
  2825  0076                     ??_ISR:	
  2826                           
  2827                           ; 0 bytes @ 0x6
  2828  0076                     	ds	1
  2829                           
  2830                           	psect	cstackBANK0
  2831  0020                     __pcstackBANK0:	
  2832  0020                     ??_CC2500_WriteByte:	
  2833  0020                     ??_CC2500_ReadByte:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ?_DelayTime_1us:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_DelayTimejudge:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_Dimmer_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_getDimmerLights_StatusFlag:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_setLoad_GO:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ?_setLoad_StatusOff:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_setLoad_Count:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ?_setLoad_StatusOn:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_Fosc_Set:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_IO_Set:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_TMR0_Set:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_ADC_Set:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_INT_Set:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_IOC_Set:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_WDT_Set:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_Flash_Memory_Read:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_Flash_Memory_Write:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_WDT_Clearing:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_myMain_Initialization:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_setLoad_Enable:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_setLoad_AH_AL_Restore:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_setRF_Initialization:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_Buzzer_Initialization:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_Buzzer_Main:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_DelayOffPointSelect:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_DimmerLightsPointSelect:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_LedPointSelect:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_setINT_GO:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_Flash_Memory_Unlock:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Flash_Memory_Erasing:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_WDT_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_RfPointSelect:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_RfSWPointSelect:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_TouchPower:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_SwPointSelect:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ?_getAD:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ?___wmul:	
  2945                           ; 2 bytes @ 0x0
  2946                           
  2947  0020                     ?___lwdiv:	
  2948                           ; 2 bytes @ 0x0
  2949                           
  2950  0020                     ?___ftpack:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     setINT_GO@command:	
  2954                           ; 3 bytes @ 0x0
  2955                           
  2956  0020                     getAD@adcon1:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0020                     setLoad_Enable@command:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0020                     setLoad_GO@command:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0020                     setLoad_StatusOn@command:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     setLoad_StatusOff@command:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     DelayTime_1us@count:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     ___wmul@multiplier:	
  2975                           ; 2 bytes @ 0x0
  2976                           
  2977  0020                     ___lwdiv@divisor:	
  2978                           ; 2 bytes @ 0x0
  2979                           
  2980  0020                     ___ftpack@arg:	
  2981                           ; 2 bytes @ 0x0
  2982                           
  2983                           
  2984                           ; 3 bytes @ 0x0
  2985  0020                     	ds	1
  2986  0021                     ??_setLoad_StatusOff:	
  2987  0021                     ??_setLoad_StatusOn:	
  2988                           ; 0 bytes @ 0x1
  2989                           
  2990  0021                     ??_RF_Initialization:	
  2991                           ; 0 bytes @ 0x1
  2992                           
  2993  0021                     ??_Mcu_Initialization:	
  2994                           ; 0 bytes @ 0x1
  2995                           
  2996  0021                     CC2500_WriteByte@loop_a:	
  2997                           ; 0 bytes @ 0x1
  2998                           
  2999  0021                     CC2500_ReadByte@loop_b:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     DelayOffPointSelect@sw:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     DelayTimejudge@value:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     DimmerLightsPointSelect@lights:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     getDimmerLights_StatusFlag@Status:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     LedPointSelect@led:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     Flash_Memory_Read@i:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     Flash_Memory_Write@i:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     setLoad_Count@command:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     setLoad_StatusOn@lights:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     setLoad_StatusOff@lights:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     setLoad_AH_AL_Restore@i:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035  0021                     RfPointSelect@rf:	
  3036                           ; 1 bytes @ 0x1
  3037                           
  3038  0021                     RfSWPointSelect@sw:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041  0021                     SwPointSelect@sw:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044                           
  3045                           ; 1 bytes @ 0x1
  3046  0021                     	ds	1
  3047  0022                     ??_CC2500_WriteCommand:	
  3048  0022                     ??_CC2500_ReadStatus:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setRF_RxStatus:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ??_DelayTime_1us:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_CC2500_WriteREG:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ??_DlyOff_Initialization:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ?_setSw_Status:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ?_setRFSW_Status:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_setDimmerLights_Trigger:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ?_setDimmerLights_Switch:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_setTxData:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ??_setDimmerLights_Initialization:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_TriggerERROR:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setLED:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ??_setLED_Main:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ??_Load_Initialization:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     ??_setSw_Enable:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     ?_setRF_Enable:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     ?_setDimmerLights_AdjGo:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     ?_setDimmerLights_TriggerAdj:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0022                     ?_setDimmerLights_Clear:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0022                     ?_setRF_Learn:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0022                     CC2500_WriteREG@value:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0022                     DlyOff_Initialization@sw:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     DelayTimejudge@i:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     _getDimmerLights_StatusFlag$1712:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setDimmerLights_TriggerERROR@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setDimmerLights_Switch@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setDimmerLights_AdjGo@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setDimmerLights_Trigger@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setDimmerLights_TriggerAdj@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setDimmerLights_Clear@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setLED@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     Flash_Memory_Read@address:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     setRF_Learn@command:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setRF_RxStatus@command:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     setRF_Enable@command:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     setRFSW_Status@command:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     setSw_Enable@command:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     setSw_Status@command:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     DelayTime_1us@i:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0022                     ___wmul@multiplicand:	
  3169                           ; 2 bytes @ 0x2
  3170                           
  3171  0022                     ___lwdiv@dividend:	
  3172                           ; 2 bytes @ 0x2
  3173                           
  3174                           
  3175                           ; 2 bytes @ 0x2
  3176  0022                     	ds	1
  3177  0023                     ??_setRF_RxStatus:	
  3178  0023                     ??_CC2500_WriteREG:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_setSw_Status:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_setRFSW_Status:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_setDimmerLights_Trigger:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_Switch:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_setDimmerLights_TriggerERROR:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_setLED:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_setRF_Enable:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     ??_DelayOff_Initialization:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     ?_setDelayOff_GO:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0023                     ??_DimmerLights_Close:	
  3209                           ; 0 bytes @ 0x3
  3210                           
  3211  0023                     ??_setDimmerLights_AdjGo:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0023                     ??_setDimmerLights_TriggerAdj:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0023                     ??_setDimmerLights_Clear:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0023                     ??_getAD:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0023                     ??_setRF_Learn:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0023                     CC2500_WriteCommand@command:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0023                     CC2500_ReadStatus@status_addr:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     setDelayOff_GO@command:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     setDimmerLights_Initialization@lights:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setDimmerLights_TriggerERROR@lights:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setDimmerLights_Switch@lights:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setDimmerLights_AdjGo@lights:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     setDimmerLights_Trigger@lights:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     setDimmerLights_TriggerAdj@lights:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setDimmerLights_Clear@lights:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     setLED@led:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     getAD@adcon0:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     Flash_Memory_Read@ret:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0023                     setRF_Learn@rf:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0023                     setRF_RxStatus@rf:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0023                     setTxData@rf:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0023                     setRF_Enable@rf:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0023                     setRFSW_Status@sw:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0023                     setSw_Status@sw:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0023                     ___ftpack@exp:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286                           
  3287                           ; 1 bytes @ 0x3
  3288  0023                     	ds	1
  3289  0024                     ??_CC2500_ClearTXFIFO:	
  3290  0024                     ??_CC2500_ClearRXFIFO:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_CC2500_SIDLEMode:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ?_setDimmerLights:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_setDimmerLights_ERROR:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_setLED_Initialization:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_Flash_Memory_Modify:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_getLoad_AD:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??_RF_RxDisable:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     ??_setSw_Initialization:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     ??_Sw_DimmerAdjFunc:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0024                     ??_CC2500_TxData:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0024                     ??_CC2500_RxData:	
  3324                           ; 0 bytes @ 0x4
  3325                           
  3326  0024                     ??_DimmerLights_Initialization:	
  3327                           ; 0 bytes @ 0x4
  3328                           
  3329  0024                     ??___wmul:	
  3330                           ; 0 bytes @ 0x4
  3331                           
  3332  0024                     ??___lwdiv:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0024                     CC2500_WriteREG@w_addr:	
  3336                           ; 0 bytes @ 0x4
  3337                           
  3338  0024                     setDelayOff_GO@value:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     setDimmerLights@status:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     setLED_Initialization@led:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0024                     setLED_Main@led:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0024                     RF_RxDisable@rf:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0024                     setSw_Initialization@sw:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0024                     Sw_DimmerAdjFunc@Idle:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359  0024                     ___ftpack@sign:	
  3360                           ; 1 bytes @ 0x4
  3361                           
  3362  0024                     DelayTime_1us@j:	
  3363                           ; 1 bytes @ 0x4
  3364                           
  3365  0024                     ___wmul@product:	
  3366                           ; 2 bytes @ 0x4
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x4
  3370  0024                     	ds	1
  3371  0025                     ??_CC2500_InitSetREG:	
  3372  0025                     ??_CC2500_InitPATable:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     ??_setDimmerLights:	
  3376                           ; 0 bytes @ 0x5
  3377                           
  3378  0025                     ??_Switch_Initialization:	
  3379                           ; 0 bytes @ 0x5
  3380                           
  3381  0025                     ??___ftpack:	
  3382                           ; 0 bytes @ 0x5
  3383                           
  3384  0025                     ??_setDelayOff_GO:	
  3385                           ; 0 bytes @ 0x5
  3386                           
  3387  0025                     ??_LED_Initialization:	
  3388                           ; 0 bytes @ 0x5
  3389                           
  3390  0025                     ??_LED_Main:	
  3391                           ; 0 bytes @ 0x5
  3392                           
  3393  0025                     CC2500_TxData@loop_e:	
  3394                           ; 0 bytes @ 0x5
  3395                           
  3396  0025                     CC2500_RxData@loop_f:	
  3397                           ; 1 bytes @ 0x5
  3398                           
  3399  0025                     setDimmerLights_ERROR@lights:	
  3400                           ; 1 bytes @ 0x5
  3401                           
  3402  0025                     Sw_DimmerAdjFunc@sw:	
  3403                           ; 1 bytes @ 0x5
  3404                           
  3405  0025                     ___lwdiv@quotient:	
  3406                           ; 1 bytes @ 0x5
  3407                           
  3408                           
  3409                           ; 2 bytes @ 0x5
  3410  0025                     	ds	1
  3411  0026                     ??_CC2500_PowerRST:	
  3412  0026                     ??_CC2500_FrequencyCabr:	
  3413                           ; 0 bytes @ 0x6
  3414                           
  3415  0026                     ?_setBuz:	
  3416                           ; 0 bytes @ 0x6
  3417                           
  3418  0026                     CC2500_InitSetREG@temp1:	
  3419                           ; 0 bytes @ 0x6
  3420                           
  3421  0026                     CC2500_InitPATable@temp:	
  3422                           ; 1 bytes @ 0x6
  3423                           
  3424  0026                     setDimmerLights@lights:	
  3425                           ; 1 bytes @ 0x6
  3426                           
  3427  0026                     Flash_Memory_Modify@i:	
  3428                           ; 1 bytes @ 0x6
  3429                           
  3430  0026                     setBuz@time:	
  3431                           ; 1 bytes @ 0x6
  3432                           
  3433                           
  3434                           ; 2 bytes @ 0x6
  3435  0026                     	ds	1
  3436  0027                     ??_Flash_Memory_Main:	
  3437  0027                     CC2500_InitSetREG@temp2:	
  3438                           ; 0 bytes @ 0x7
  3439                           
  3440  0027                     CC2500_InitPATable@loop_d:	
  3441                           ; 1 bytes @ 0x7
  3442                           
  3443  0027                     setDelayOff_GO@sw:	
  3444                           ; 1 bytes @ 0x7
  3445                           
  3446  0027                     ___lwdiv@counter:	
  3447                           ; 1 bytes @ 0x7
  3448                           
  3449                           
  3450                           ; 1 bytes @ 0x7
  3451  0027                     	ds	1
  3452  0028                     ??_setBuz:	
  3453  0028                     ?___awtoft:	
  3454                           ; 0 bytes @ 0x8
  3455                           
  3456  0028                     CC2500_InitSetREG@loop_c:	
  3457                           ; 3 bytes @ 0x8
  3458                           
  3459  0028                     ___awtoft@c:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462                           
  3463                           ; 2 bytes @ 0x8
  3464  0028                     	ds	1
  3465  0029                     ??_CC2500_PowerOnInitial:	
  3466  0029                     setBuz@count:	
  3467                           ; 0 bytes @ 0x9
  3468                           
  3469  0029                     getLoad_AD@channel:	
  3470                           ; 1 bytes @ 0x9
  3471                           
  3472                           
  3473                           ; 1 bytes @ 0x9
  3474  0029                     	ds	1
  3475  002A                     ??_my_Main:	
  3476  002A                     ??_setLog_Code:	
  3477                           ; 0 bytes @ 0xA
  3478                           
  3479  002A                     ??_DimmerLights_Exceptions:	
  3480                           ; 0 bytes @ 0xA
  3481                           
  3482  002A                     DimmerLights_Exceptions@status:	
  3483                           ; 0 bytes @ 0xA
  3484                           
  3485  002A                     getLoad_AD@j:	
  3486                           ; 1 bytes @ 0xA
  3487                           
  3488                           
  3489                           ; 1 bytes @ 0xA
  3490  002A                     	ds	1
  3491  002B                     ??_setLoad_Exceptions:	
  3492  002B                     ??___awtoft:	
  3493                           ; 0 bytes @ 0xB
  3494                           
  3495  002B                     getLoad_AD@i:	
  3496                           ; 0 bytes @ 0xB
  3497                           
  3498  002B                     setLog_Code@rf:	
  3499                           ; 1 bytes @ 0xB
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0xB
  3503  002B                     	ds	1
  3504  002C                     setLoad_Exceptions@command:	
  3505                           
  3506                           ; 1 bytes @ 0xC
  3507  002C                     	ds	1
  3508  002D                     ??_Load_Main:	
  3509  002D                     ___awtoft@sign:	
  3510                           ; 0 bytes @ 0xD
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0xD
  3514  002D                     	ds	1
  3515  002E                     ?___ftdiv:	
  3516  002E                     ?___ftmul:	
  3517                           ; 3 bytes @ 0xE
  3518                           
  3519  002E                     ___ftdiv@f2:	
  3520                           ; 3 bytes @ 0xE
  3521                           
  3522  002E                     ___ftmul@f1:	
  3523                           ; 3 bytes @ 0xE
  3524                           
  3525                           
  3526                           ; 3 bytes @ 0xE
  3527  002E                     	ds	3
  3528  0031                     Load_Main@i:	
  3529  0031                     ___ftdiv@f1:	
  3530                           ; 1 bytes @ 0x11
  3531                           
  3532  0031                     ___ftmul@f2:	
  3533                           ; 3 bytes @ 0x11
  3534                           
  3535                           
  3536                           ; 3 bytes @ 0x11
  3537  0031                     	ds	3
  3538  0034                     ??___ftdiv:	
  3539  0034                     ??___ftmul:	
  3540                           ; 0 bytes @ 0x14
  3541                           
  3542                           
  3543                           ; 0 bytes @ 0x14
  3544  0034                     	ds	4
  3545  0038                     ___ftdiv@cntr:	
  3546  0038                     ___ftmul@exp:	
  3547                           ; 1 bytes @ 0x18
  3548                           
  3549                           
  3550                           ; 1 bytes @ 0x18
  3551  0038                     	ds	1
  3552  0039                     ___ftdiv@f3:	
  3553  0039                     ___ftmul@f3_as_product:	
  3554                           ; 3 bytes @ 0x19
  3555                           
  3556                           
  3557                           ; 3 bytes @ 0x19
  3558  0039                     	ds	3
  3559  003C                     ___ftdiv@exp:	
  3560  003C                     ___ftmul@cntr:	
  3561                           ; 1 bytes @ 0x1C
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0x1C
  3565  003C                     	ds	1
  3566  003D                     ___ftdiv@sign:	
  3567  003D                     ___ftmul@sign:	
  3568                           ; 1 bytes @ 0x1D
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x1D
  3572  003D                     	ds	1
  3573  003E                     ?___ftadd:	
  3574  003E                     ___ftadd@f1:	
  3575                           ; 3 bytes @ 0x1E
  3576                           
  3577                           
  3578                           ; 3 bytes @ 0x1E
  3579  003E                     	ds	3
  3580  0041                     ___ftadd@f2:	
  3581                           
  3582                           ; 3 bytes @ 0x21
  3583  0041                     	ds	3
  3584  0044                     ??___ftadd:	
  3585                           
  3586                           ; 0 bytes @ 0x24
  3587  0044                     	ds	4
  3588  0048                     ___ftadd@sign:	
  3589                           
  3590                           ; 1 bytes @ 0x28
  3591  0048                     	ds	1
  3592  0049                     ___ftadd@exp2:	
  3593                           
  3594                           ; 1 bytes @ 0x29
  3595  0049                     	ds	1
  3596  004A                     ___ftadd@exp1:	
  3597                           
  3598                           ; 1 bytes @ 0x2A
  3599  004A                     	ds	1
  3600  004B                     ?___fttol:	
  3601  004B                     ___fttol@f1:	
  3602                           ; 4 bytes @ 0x2B
  3603                           
  3604                           
  3605                           ; 3 bytes @ 0x2B
  3606  004B                     	ds	4
  3607  004F                     ??___fttol:	
  3608                           
  3609                           ; 0 bytes @ 0x2F
  3610  004F                     	ds	4
  3611  0053                     ___fttol@sign1:	
  3612                           
  3613                           ; 1 bytes @ 0x33
  3614  0053                     	ds	1
  3615  0054                     ___fttol@lval:	
  3616                           
  3617                           ; 4 bytes @ 0x34
  3618  0054                     	ds	4
  3619  0058                     ___fttol@exp1:	
  3620                           
  3621                           ; 1 bytes @ 0x38
  3622  0058                     	ds	1
  3623  0059                     ??_getPercentValue:	
  3624  0059                     ??_setPercentValue:	
  3625                           ; 0 bytes @ 0x39
  3626                           
  3627  0059                     setPercentValue@value:	
  3628                           ; 0 bytes @ 0x39
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x39
  3632  0059                     	ds	1
  3633  005A                     setPercentValue@i:	
  3634                           
  3635                           ; 3 bytes @ 0x3A
  3636  005A                     	ds	1
  3637  005B                     getPercentValue@value:	
  3638                           
  3639                           ; 1 bytes @ 0x3B
  3640  005B                     	ds	1
  3641  005C                     getPercentValue@i:	
  3642                           
  3643                           ; 3 bytes @ 0x3C
  3644  005C                     	ds	1
  3645  005D                     ?_setRF_DimmerLights:	
  3646  005D                     ??_Flash_Memory_Initialization:	
  3647                           ; 0 bytes @ 0x3D
  3648                           
  3649  005D                     setRF_DimmerLights@on:	
  3650                           ; 0 bytes @ 0x3D
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0x3D
  3654  005D                     	ds	1
  3655  005E                     ??_setRF_DimmerLights:	
  3656  005E                     Flash_Memory_Initialization@i:	
  3657                           ; 0 bytes @ 0x3E
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x3E
  3661  005E                     	ds	1
  3662  005F                     ??_setDimmerLights_AdjRF:	
  3663                           
  3664                           ; 0 bytes @ 0x3F
  3665  005F                     	ds	1
  3666  0060                     setDimmerLights_AdjRF@lights:	
  3667  0060                     setRF_DimmerLights@status:	
  3668                           ; 1 bytes @ 0x40
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x40
  3672  0060                     	ds	1
  3673  0061                     ??_setRF_DimmerValue:	
  3674  0061                     setRF_DimmerLights@lights:	
  3675                           ; 0 bytes @ 0x41
  3676                           
  3677                           
  3678                           ; 1 bytes @ 0x41
  3679  0061                     	ds	1
  3680  0062                     ??_DlyOff_Main:	
  3681  0062                     ?_setDimmerLights_Adj:	
  3682                           ; 0 bytes @ 0x42
  3683                           
  3684  0062                     ??_setRFSW_Control:	
  3685                           ; 0 bytes @ 0x42
  3686                           
  3687  0062                     ??_Sw_DimmerOnFunc:	
  3688                           ; 0 bytes @ 0x42
  3689                           
  3690  0062                     ??_Sw_DimmerOffFunc:	
  3691                           ; 0 bytes @ 0x42
  3692                           
  3693  0062                     setDimmerLights_Adj@status:	
  3694                           ; 0 bytes @ 0x42
  3695                           
  3696  0062                     Sw_DimmerOnFunc@Idle:	
  3697                           ; 1 bytes @ 0x42
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x42
  3701  0062                     	ds	1
  3702  0063                     ??_setDimmerLights_Adj:	
  3703  0063                     setRFSW_Control@sw:	
  3704                           ; 0 bytes @ 0x43
  3705                           
  3706  0063                     setRF_DimmerValue@lights:	
  3707                           ; 1 bytes @ 0x43
  3708                           
  3709  0063                     Sw_DimmerOnFunc@sw:	
  3710                           ; 1 bytes @ 0x43
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x43
  3714  0063                     	ds	1
  3715  0064                     ??_setRFSW_AdjControl:	
  3716  0064                     DlyOff_Main@sw:	
  3717                           ; 0 bytes @ 0x44
  3718                           
  3719  0064                     setDimmerLights_Adj@lights:	
  3720                           ; 1 bytes @ 0x44
  3721                           
  3722  0064                     Sw_DimmerOffFunc@sw:	
  3723                           ; 1 bytes @ 0x44
  3724                           
  3725                           
  3726                           ; 1 bytes @ 0x44
  3727  0064                     	ds	1
  3728  0065                     ??_setDimmerLights_Main:	
  3729  0065                     ??_setSw_Main:	
  3730                           ; 0 bytes @ 0x45
  3731                           
  3732  0065                     ??_DelayOff_Main:	
  3733                           ; 0 bytes @ 0x45
  3734                           
  3735  0065                     setDimmerLights_Main@clear:	
  3736                           ; 0 bytes @ 0x45
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x45
  3740  0065                     	ds	1
  3741  0066                     setDimmerLights_Main@lights:	
  3742  0066                     setRFSW_AdjControl@sw:	
  3743                           ; 1 bytes @ 0x46
  3744                           
  3745                           
  3746                           ; 1 bytes @ 0x46
  3747  0066                     	ds	1
  3748  0067                     ??_setControl_Lights_Table:	
  3749  0067                     ??_DimmerLights_Main:	
  3750                           ; 0 bytes @ 0x47
  3751                           
  3752  0067                     setControl_Lights_Table@rf:	
  3753                           ; 0 bytes @ 0x47
  3754                           
  3755  0067                     _setSw_Main$4742:	
  3756                           ; 1 bytes @ 0x47
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0x47
  3760  0067                     	ds	1
  3761  0068                     ??_getRxData:	
  3762  0068                     getRxData@rf:	
  3763                           ; 0 bytes @ 0x48
  3764                           
  3765  0068                     _setSw_Main$4743:	
  3766                           ; 1 bytes @ 0x48
  3767                           
  3768                           
  3769                           ; 1 bytes @ 0x48
  3770  0068                     	ds	1
  3771  0069                     ??_setRF_Main:	
  3772  0069                     setSw_Main@sw:	
  3773                           ; 0 bytes @ 0x49
  3774                           
  3775                           
  3776                           ; 1 bytes @ 0x49
  3777  0069                     	ds	1
  3778  006A                     ??_Switch_Main:	
  3779  006A                     setRF_Main@rf:	
  3780                           ; 0 bytes @ 0x4A
  3781                           
  3782                           
  3783                           ; 1 bytes @ 0x4A
  3784  006A                     	ds	1
  3785  006B                     _setRF_Main$3978:	
  3786                           
  3787                           ; 1 bytes @ 0x4B
  3788  006B                     	ds	1
  3789  006C                     ??_RF_Main:	
  3790  006C                     ?_main:	
  3791                           ; 0 bytes @ 0x4C
  3792                           
  3793  006C                     main@argc:	
  3794                           ; 2 bytes @ 0x4C
  3795                           
  3796                           
  3797                           ; 2 bytes @ 0x4C
  3798  006C                     	ds	2
  3799  006E                     main@argv:	
  3800                           
  3801                           ; 2 bytes @ 0x4E
  3802  006E                     	ds	2
  3803  0070                     ??_main:	
  3804                           
  3805                           	psect	maintext
  3806  1346                     __pmaintext:	
  3807                           ; 0 bytes @ 0x50
  3808 ;;
  3809 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3810 ;;
  3811 ;; *************** function _main *****************
  3812 ;; Defined at:
  3813 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  argc            2   76[BANK0 ] int 
  3816 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  2   76[BANK0 ] int 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 17F/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3832 ;;Total ram usage:        4 bytes
  3833 ;; Hardware stack levels required when called:   14
  3834 ;; This function calls:
  3835 ;;		_Buzzer_Initialization
  3836 ;;		_Buzzer_Main
  3837 ;;		_CC2500_PowerOnInitial
  3838 ;;		_DelayOff_Initialization
  3839 ;;		_DelayOff_Main
  3840 ;;		_DimmerLights_Initialization
  3841 ;;		_DimmerLights_Main
  3842 ;;		_Flash_Memory_Initialization
  3843 ;;		_Flash_Memory_Main
  3844 ;;		_LED_Initialization
  3845 ;;		_LED_Main
  3846 ;;		_Load_Initialization
  3847 ;;		_Load_Main
  3848 ;;		_Mcu_Initialization
  3849 ;;		_RF_Initialization
  3850 ;;		_RF_Main
  3851 ;;		_Switch_Initialization
  3852 ;;		_Switch_Main
  3853 ;;		_WDT_Main
  3854 ;;		_getLoad_AD
  3855 ;;		_myMain_Initialization
  3856 ;;		_my_Main
  3857 ;; This function is called by:
  3858 ;;		Startup code after reset
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _main
  3864  1346                     _main:	
  3865                           
  3866                           ;Main_B1.c: 9: myMain_Initialization();
  3867                           
  3868                           ;incstack = 0
  3869                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3870  1346  3199  21E0  3193   	fcall	_myMain_Initialization
  3871                           
  3872                           ;Main_B1.c: 10: Mcu_Initialization();
  3873  1349  319B  2322  3193   	fcall	_Mcu_Initialization
  3874                           
  3875                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3876  134C  318F  2708  3193   	fcall	_Flash_Memory_Initialization
  3877                           
  3878                           ;Main_B1.c: 12: LED_Initialization();
  3879  134F  3198  20A3  3193   	fcall	_LED_Initialization
  3880                           
  3881                           ;Main_B1.c: 13: Buzzer_Initialization();
  3882  1352  3198  2073  3193   	fcall	_Buzzer_Initialization
  3883                           
  3884                           ;Main_B1.c: 15: ;;
  3885                           ;Main_B1.c: 16: ;;
  3886                           ;Main_B1.c: 17: Load_Initialization();
  3887  1355  3198  20C8  3193   	fcall	_Load_Initialization
  3888                           
  3889                           ;Main_B1.c: 18: ;;
  3890                           ;Main_B1.c: 19: DelayOff_Initialization();
  3891  1358  31A7  27A2  3193   	fcall	_DelayOff_Initialization
  3892                           
  3893                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3894  135B  319A  2209  3193   	fcall	_DimmerLights_Initialization
  3895                           
  3896                           ;Main_B1.c: 22: ;;
  3897                           ;Main_B1.c: 23: ;;
  3898                           ;Main_B1.c: 24: ;;
  3899                           ;Main_B1.c: 26: Switch_Initialization();
  3900  135E  3198  20EF  3193   	fcall	_Switch_Initialization
  3901                           
  3902                           ;Main_B1.c: 27: RF_Initialization();
  3903  1361  31A7  276E  3193   	fcall	_RF_Initialization
  3904                           
  3905                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  3906  1364  3199  21F4  3193   	fcall	_CC2500_PowerOnInitial
  3907  1367                     l9182:	
  3908                           ;Main_B1.c: 29: ;;
  3909                           ;Main_B1.c: 32: while (1) {
  3910                           
  3911                           
  3912                           ;Main_B1.c: 33: if (myMain->PowerON) {
  3913  1367  0021               	movlb	1	; select bank1
  3914  1368  0869               	movf	_myMain^(0+128),w
  3915  1369  0086               	movwf	6
  3916  136A  3001               	movlw	1	; select bank2/3
  3917  136B  0087               	movwf	7
  3918  136C  1C01               	btfss	1,0
  3919  136D  2B75               	goto	l9186
  3920                           
  3921                           ;Main_B1.c: 35: ;;
  3922                           ;Main_B1.c: 39: getLoad_AD(0x05);
  3923  136E  3005               	movlw	5
  3924  136F  318A  22DF  3193   	fcall	_getLoad_AD
  3925                           
  3926                           ;Main_B1.c: 43: ;;
  3927                           ;Main_B1.c: 47: ;;
  3928                           ;Main_B1.c: 59: Buzzer_Main();
  3929  1372  3187  2723  3193   	fcall	_Buzzer_Main
  3930  1375                     l9186:	
  3931                           
  3932                           ;Main_B1.c: 61: }
  3933                           ;Main_B1.c: 64: if (myMain->T0_Timerout) {
  3934  1375  0021               	movlb	1	; select bank1
  3935  1376  0869               	movf	_myMain^(0+128),w
  3936  1377  0086               	movwf	6
  3937  1378  3001               	movlw	1	; select bank2/3
  3938  1379  0087               	movwf	7
  3939  137A  1C81               	btfss	1,1
  3940  137B  2B67               	goto	l9182
  3941                           
  3942                           ;Main_B1.c: 65: myMain->T0_Timerout = 0;
  3943  137C  0869               	movf	_myMain^(0+128),w
  3944  137D  0086               	movwf	6
  3945  137E  3001               	movlw	1	; select bank2/3
  3946  137F  0087               	movwf	7
  3947  1380  1081               	bcf	1,1
  3948                           
  3949                           ;Main_B1.c: 66: my_Main();
  3950  1381  3197  2700  3193   	fcall	_my_Main
  3951                           
  3952                           ;Main_B1.c: 67: WDT_Main();
  3953  1384  319B  2374  3193   	fcall	_WDT_Main
  3954                           
  3955                           ;Main_B1.c: 68: ;;
  3956                           ;Main_B1.c: 69: ;;
  3957                           ;Main_B1.c: 70: if (myMain->PowerON) {
  3958  1387  0021               	movlb	1	; select bank1
  3959  1388  0869               	movf	_myMain^(0+128),w
  3960  1389  0086               	movwf	6
  3961  138A  3001               	movlw	1	; select bank2/3
  3962  138B  0087               	movwf	7
  3963  138C  1C01               	btfss	1,0
  3964  138D  2B67               	goto	l9182
  3965                           
  3966                           ;Main_B1.c: 71: Flash_Memory_Main();
  3967  138E  3190  20BA  3193   	fcall	_Flash_Memory_Main
  3968                           
  3969                           ;Main_B1.c: 73: LED_Main();
  3970  1391  3198  20AF  3193   	fcall	_LED_Main
  3971                           
  3972                           ;Main_B1.c: 75: ;;
  3973                           ;Main_B1.c: 76: ;;
  3974                           ;Main_B1.c: 77: Load_Main();
  3975  1394  3183  2329  3193   	fcall	_Load_Main
  3976                           
  3977                           ;Main_B1.c: 78: ;;
  3978                           ;Main_B1.c: 80: ;;
  3979                           ;Main_B1.c: 81: DimmerLights_Main();
  3980  1397  31A7  27F5  3193   	fcall	_DimmerLights_Main
  3981                           
  3982                           ;Main_B1.c: 82: Switch_Main();
  3983  139A  31A7  27BA  3193   	fcall	_Switch_Main
  3984                           
  3985                           ;Main_B1.c: 83: ;;
  3986                           ;Main_B1.c: 84: ;;
  3987                           ;Main_B1.c: 86: RF_Main();
  3988  139D  31A7  2772  3193   	fcall	_RF_Main
  3989                           
  3990                           ;Main_B1.c: 87: DelayOff_Main();
  3991  13A0  31A7  27AA  3193   	fcall	_DelayOff_Main
  3992                           
  3993                           ;Main_B1.c: 88: ;;
  3994  13A3  2B67               	goto	l9182
  3995  13A4                     __end_of_main:	
  3996                           
  3997                           	psect	text1
  3998  1700                     __ptext1:	
  3999 ;; *************** function _my_Main *****************
  4000 ;; Defined at:
  4001 ;;		line 124 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    6
  4022 ;; This function calls:
  4023 ;;		_setBuz
  4024 ;;		_setLoad_Enable
  4025 ;;		_setRF_Enable
  4026 ;;		_setSw_Enable
  4027 ;; This function is called by:
  4028 ;;		_main
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _my_Main
  4034  1700                     _my_Main:	
  4035                           
  4036                           ;Main_B1.c: 126: if (myMain->PowerON == 0) {
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4040  1700  0021               	movlb	1	; select bank1
  4041  1701  0869               	movf	_myMain^(0+128),w
  4042  1702  0086               	movwf	6
  4043  1703  3001               	movlw	1	; select bank2/3
  4044  1704  0087               	movwf	7
  4045  1705  1801               	btfsc	1,0
  4046  1706  2F47               	goto	l9042
  4047                           
  4048                           ;Main_B1.c: 127: myMain->PowerCount++;
  4049  1707  0A69               	incf	_myMain^(0+128),w
  4050  1708  0086               	movwf	6
  4051  1709  3001               	movlw	1	; select bank2/3
  4052  170A  0087               	movwf	7
  4053  170B  3001               	movlw	1
  4054  170C  0781               	addwf	1,f
  4055  170D  3141               	addfsr 1,1
  4056  170E  1803               	skipnc
  4057  170F  0A81               	incf	1,f
  4058                           
  4059                           ;Main_B1.c: 128: if (myMain->PowerCount == 150)
  4060  1710  0A69               	incf	_myMain^(0+128),w
  4061  1711  0086               	movwf	6
  4062  1712  3001               	movlw	1	; select bank2/3
  4063  1713  0087               	movwf	7
  4064  1714  3F40               	moviw [0]fsr1
  4065  1715  3A96               	xorlw	150
  4066  1716  1D03               	skipz
  4067  1717  2F1A               	goto	u8955
  4068  1718  3F41               	moviw [1]fsr1
  4069  1719  3A00               	xorlw	0
  4070  171A                     u8955:	
  4071  171A  1D03               	skipz
  4072  171B  0008               	return
  4073                           
  4074                           ;Main_B1.c: 129: {
  4075                           ;Main_B1.c: 130: myMain->PowerCount = 0;
  4076  171C  0A69               	incf	_myMain^(0+128),w
  4077  171D  0086               	movwf	6
  4078  171E  3001               	movlw	1	; select bank2/3
  4079  171F  0087               	movwf	7
  4080  1720  3000               	movlw	0
  4081  1721  3FC0               	movwi [0]fsr1
  4082  1722  3FC1               	movwi [1]fsr1
  4083                           
  4084                           ;Main_B1.c: 131: myMain->PowerON = 1;
  4085  1723  0869               	movf	_myMain^(0+128),w
  4086  1724  0086               	movwf	6
  4087  1725  3001               	movlw	1	; select bank2/3
  4088  1726  0087               	movwf	7
  4089  1727  1401               	bsf	1,0
  4090                           
  4091                           ;Main_B1.c: 134: ;;
  4092                           ;Main_B1.c: 138: setLoad_Enable(1);
  4093  1728  3001               	movlw	1
  4094  1729  3199  2198  3197   	fcall	_setLoad_Enable
  4095                           
  4096                           ;Main_B1.c: 144: setBuz(3, 50);
  4097  172C  3032               	movlw	50
  4098  172D  0020               	movlb	0	; select bank0
  4099  172E  00A6               	movwf	setBuz@time
  4100  172F  3000               	movlw	0
  4101  1730  00A7               	movwf	setBuz@time+1
  4102  1731  3003               	movlw	3
  4103  1732  3188  2017  3197   	fcall	_setBuz
  4104                           
  4105                           ;Main_B1.c: 145: myMain->SelfTest = 1;
  4106  1735  0021               	movlb	1	; select bank1
  4107  1736  0869               	movf	_myMain^(0+128),w
  4108  1737  3E03               	addlw	3
  4109  1738  0086               	movwf	6
  4110  1739  3001               	movlw	1	; select bank2/3
  4111  173A  0087               	movwf	7
  4112  173B  1401               	bsf	1,0
  4113                           
  4114                           ;Main_B1.c: 147: setSw_Enable(1);
  4115  173C  3001               	movlw	1
  4116  173D  319B  2358  3197   	fcall	_setSw_Enable
  4117                           
  4118                           ;Main_B1.c: 150: setRF_Enable(1, 1);
  4119  1740  0020               	movlb	0	; select bank0
  4120  1741  01A2               	clrf	setRF_Enable@command
  4121  1742  0AA2               	incf	setRF_Enable@command,f
  4122  1743  3001               	movlw	1
  4123  1744  319D  2513         	fcall	_setRF_Enable
  4124                           
  4125                           ;Main_B1.c: 154: }
  4126                           ;Main_B1.c: 155: } else {
  4127  1746  0008               	return
  4128  1747                     l9042:	
  4129                           
  4130                           ;Main_B1.c: 163: myMain->Count1++;
  4131  1747  0021               	movlb	1	; select bank1
  4132  1748  0869               	movf	_myMain^(0+128),w
  4133  1749  3E06               	addlw	6
  4134  174A  0086               	movwf	6
  4135  174B  3001               	movlw	1	; select bank2/3
  4136  174C  0087               	movwf	7
  4137  174D  3001               	movlw	1
  4138  174E  0781               	addwf	1,f
  4139  174F  3141               	addfsr 1,1
  4140  1750  1803               	skipnc
  4141  1751  0A81               	incf	1,f
  4142                           
  4143                           ;Main_B1.c: 164: if (myMain->Count1 == 100)
  4144  1752  0869               	movf	_myMain^(0+128),w
  4145  1753  3E06               	addlw	6
  4146  1754  0086               	movwf	6
  4147  1755  3001               	movlw	1	; select bank2/3
  4148  1756  0087               	movwf	7
  4149  1757  3F40               	moviw [0]fsr1
  4150  1758  3A64               	xorlw	100
  4151  1759  1D03               	skipz
  4152  175A  2F5D               	goto	u8965
  4153  175B  3F41               	moviw [1]fsr1
  4154  175C  3A00               	xorlw	0
  4155  175D                     u8965:	
  4156  175D  1D03               	skipz
  4157  175E  0008               	return
  4158                           
  4159                           ;Main_B1.c: 165: {
  4160                           ;Main_B1.c: 166: myMain->Count1 = 0;
  4161  175F  0869               	movf	_myMain^(0+128),w
  4162  1760  3E06               	addlw	6
  4163  1761  0086               	movwf	6
  4164  1762  3001               	movlw	1	; select bank2/3
  4165  1763  0087               	movwf	7
  4166  1764  3000               	movlw	0
  4167  1765  3FC0               	movwi [0]fsr1
  4168  1766  3FC1               	movwi [1]fsr1
  4169                           
  4170                           ;Main_B1.c: 179: if (myMain->Flag) {
  4171  1767  0869               	movf	_myMain^(0+128),w
  4172  1768  0086               	movwf	6
  4173  1769  3001               	movlw	1	; select bank2/3
  4174  176A  0087               	movwf	7
  4175  176B  1D81               	btfss	1,3
  4176  176C  2F73               	goto	l9050
  4177                           
  4178                           ;Main_B1.c: 180: myMain->Flag = 0;
  4179  176D  0869               	movf	_myMain^(0+128),w
  4180  176E  0086               	movwf	6
  4181  176F  3001               	movlw	1	; select bank2/3
  4182  1770  0087               	movwf	7
  4183  1771  1181               	bcf	1,3
  4184                           
  4185                           ;Main_B1.c: 189: } else {
  4186  1772  0008               	return
  4187  1773                     l9050:	
  4188                           
  4189                           ;Main_B1.c: 190: myMain->Flag = 1;
  4190  1773  0869               	movf	_myMain^(0+128),w
  4191  1774  0086               	movwf	6
  4192  1775  3001               	movlw	1	; select bank2/3
  4193  1776  0087               	movwf	7
  4194  1777  1581               	bsf	1,3
  4195  1778  0008               	return
  4196  1779                     __end_of_my_Main:	
  4197                           
  4198                           	psect	text2
  4199  1998                     __ptext2:	
  4200 ;; *************** function _setLoad_Enable *****************
  4201 ;; Defined at:
  4202 ;;		line 260 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  command         1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  command         1    0[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, fsr1l, fsr1h
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;Total ram usage:        1 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    4
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_my_Main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _setLoad_Enable
  4232  1998                     _setLoad_Enable:	
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4236                           ;setLoad_Enable@command stored from wreg
  4237  1998  0020               	movlb	0	; select bank0
  4238  1999  00A0               	movwf	setLoad_Enable@command
  4239                           
  4240                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4241  199A  087B               	movf	_Load,w
  4242  199B  0086               	movwf	6
  4243  199C  3002               	movlw	2	; select bank4/5
  4244  199D  0087               	movwf	7
  4245  199E  0820               	movf	setLoad_Enable@command,w
  4246  199F  1001               	bcf	1,0
  4247  19A0  1D03               	skipz
  4248  19A1  1401               	bsf	1,0
  4249                           
  4250                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4251  19A2  087B               	movf	_Load,w
  4252  19A3  0086               	movwf	6
  4253  19A4  3002               	movlw	2	; select bank4/5
  4254  19A5  0087               	movwf	7
  4255  19A6  1081               	bcf	1,1
  4256  19A7  0008               	return
  4257  19A8                     __end_of_setLoad_Enable:	
  4258                           
  4259                           	psect	text3
  4260  19E0                     __ptext3:	
  4261 ;; *************** function _myMain_Initialization *****************
  4262 ;; Defined at:
  4263 ;;		line 112 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;		None               void
  4270 ;; Registers used:
  4271 ;;		wreg, fsr1l, fsr1h
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;Total ram usage:        1 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    4
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_main
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _myMain_Initialization
  4293  19E0                     _myMain_Initialization:	
  4294                           
  4295                           ;Main_B1.c: 114: product = &_product;
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4299  19E0  30A0               	movlw	__product& (0+255)
  4300  19E1  0020               	movlb	0	; select bank0
  4301  19E2  00A0               	movwf	??_myMain_Initialization
  4302  19E3  0820               	movf	??_myMain_Initialization,w
  4303  19E4  00FD               	movwf	_product
  4304                           
  4305                           ;Main_B1.c: 115: product->Data[20] = 210;
  4306  19E5  30D2               	movlw	210
  4307  19E6  00A0               	movwf	??_myMain_Initialization
  4308  19E7  087D               	movf	_product,w
  4309  19E8  3E14               	addlw	20
  4310  19E9  0086               	movwf	6
  4311  19EA  3001               	movlw	1	; select bank2/3
  4312  19EB  0087               	movwf	7
  4313  19EC  0820               	movf	??_myMain_Initialization,w
  4314  19ED  0081               	movwf	1
  4315                           
  4316                           ;Main_B1.c: 118: myMain = &_myMain;
  4317  19EE  30C0               	movlw	__myMain& (0+255)
  4318  19EF  00A0               	movwf	??_myMain_Initialization
  4319  19F0  0820               	movf	??_myMain_Initialization,w
  4320  19F1  0021               	movlb	1	; select bank1
  4321  19F2  00E9               	movwf	_myMain^(0+128)
  4322  19F3  0008               	return
  4323  19F4                     __end_of_myMain_Initialization:	
  4324                           
  4325                           	psect	text4
  4326  0ADF                     __ptext4:	
  4327 ;; *************** function _getLoad_AD *****************
  4328 ;; Defined at:
  4329 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  channel         1    wreg     unsigned char 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  channel         1    9[BANK0 ] unsigned char 
  4334 ;;  i               1   11[BANK0 ] unsigned char 
  4335 ;;  j               1   10[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;Total ram usage:        8 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    5
  4352 ;; This function calls:
  4353 ;;		_getAD
  4354 ;; This function is called by:
  4355 ;;		_main
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _getLoad_AD
  4361  0ADF                     _getLoad_AD:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4365                           ;getLoad_AD@channel stored from wreg
  4366  0ADF  0020               	movlb	0	; select bank0
  4367  0AE0  00A9               	movwf	getLoad_AD@channel
  4368                           
  4369                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4370  0AE1  01AB               	clrf	getLoad_AD@i
  4371  0AE2  01AA               	clrf	getLoad_AD@j
  4372                           
  4373                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4374  0AE3  087B               	movf	_Load,w
  4375  0AE4  0086               	movwf	6
  4376  0AE5  3002               	movlw	2	; select bank4/5
  4377  0AE6  0087               	movwf	7
  4378  0AE7  1E01               	btfss	1,4
  4379  0AE8  0008               	return
  4380                           
  4381                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4382  0AE9  30C0               	movlw	192
  4383  0AEA  00A4               	movwf	??_getLoad_AD
  4384  0AEB  0824               	movf	??_getLoad_AD,w
  4385  0AEC  00A0               	movwf	getAD@adcon1
  4386  0AED  0829               	movf	getLoad_AD@channel,w
  4387  0AEE  319A  2275  318A   	fcall	_getAD
  4388  0AF1  087B               	movf	_Load,w
  4389  0AF2  3E32               	addlw	50
  4390  0AF3  0086               	movwf	6
  4391  0AF4  3002               	movlw	2	; select bank4/5
  4392  0AF5  0087               	movwf	7
  4393  0AF6  0020               	movlb	0	; select bank0
  4394  0AF7  0820               	movf	?_getAD,w
  4395  0AF8  3FC0               	movwi [0]fsr1
  4396  0AF9  0821               	movf	?_getAD+1,w
  4397  0AFA  3FC1               	movwi [1]fsr1
  4398                           
  4399                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4400  0AFB  01AB               	clrf	getLoad_AD@i
  4401  0AFC  3005               	movlw	5
  4402  0AFD  022B               	subwf	getLoad_AD@i,w
  4403  0AFE  1803               	btfsc	3,0
  4404  0AFF  2B39               	goto	l9010
  4405  0B00                     l9000:	
  4406                           
  4407                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4408  0B00  087B               	movf	_Load,w
  4409  0B01  3E32               	addlw	50
  4410  0B02  0086               	movwf	6
  4411  0B03  3002               	movlw	2	; select bank4/5
  4412  0B04  0087               	movwf	7
  4413  0B05  3F40               	moviw [0]fsr1
  4414  0B06  00A4               	movwf	??_getLoad_AD
  4415  0B07  3F41               	moviw [1]fsr1
  4416  0B08  00A5               	movwf	??_getLoad_AD+1
  4417  0B09  352B               	lslf	getLoad_AD@i,w
  4418  0B0A  3E08               	addlw	8
  4419  0B0B  077B               	addwf	_Load,w
  4420  0B0C  00A6               	movwf	??_getLoad_AD+2
  4421  0B0D  0826               	movf	??_getLoad_AD+2,w
  4422  0B0E  0086               	movwf	6
  4423  0B0F  3002               	movlw	2	; select bank4/5
  4424  0B10  0087               	movwf	7
  4425  0B11  3F40               	moviw [0]fsr1
  4426  0B12  00A7               	movwf	??_getLoad_AD+3
  4427  0B13  3F41               	moviw [1]fsr1
  4428  0B14  00A8               	movwf	??_getLoad_AD+4
  4429  0B15  0825               	movf	??_getLoad_AD+1,w
  4430  0B16  0228               	subwf	??_getLoad_AD+4,w
  4431  0B17  1D03               	skipz
  4432  0B18  2B1B               	goto	u8885
  4433  0B19  0824               	movf	??_getLoad_AD,w
  4434  0B1A  0227               	subwf	??_getLoad_AD+3,w
  4435  0B1B                     u8885:	
  4436  0B1B  1803               	skipnc
  4437  0B1C  2B31               	goto	l9006
  4438                           
  4439                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4440  0B1D  087B               	movf	_Load,w
  4441  0B1E  3E32               	addlw	50
  4442  0B1F  0086               	movwf	6
  4443  0B20  3002               	movlw	2	; select bank4/5
  4444  0B21  0087               	movwf	7
  4445  0B22  352B               	lslf	getLoad_AD@i,w
  4446  0B23  3E08               	addlw	8
  4447  0B24  077B               	addwf	_Load,w
  4448  0B25  00A4               	movwf	??_getLoad_AD
  4449  0B26  0824               	movf	??_getLoad_AD,w
  4450  0B27  0084               	movwf	4
  4451  0B28  3002               	movlw	2	; select bank4/5
  4452  0B29  0085               	movwf	5
  4453  0B2A  3F40               	moviw [0]fsr1
  4454  0B2B  3F80               	movwi [0]fsr0
  4455  0B2C  3F41               	moviw [1]fsr1
  4456  0B2D  3F81               	movwi [1]fsr0
  4457                           
  4458                           ;OverLoad_B1.c: 24: j = 1;
  4459  0B2E  01AA               	clrf	getLoad_AD@j
  4460  0B2F  0AAA               	incf	getLoad_AD@j,f
  4461                           
  4462                           ;OverLoad_B1.c: 25: break;
  4463  0B30  2B39               	goto	l9010
  4464  0B31                     l9006:	
  4465  0B31  3001               	movlw	1
  4466  0B32  00A4               	movwf	??_getLoad_AD
  4467  0B33  0824               	movf	??_getLoad_AD,w
  4468  0B34  07AB               	addwf	getLoad_AD@i,f
  4469  0B35  3005               	movlw	5
  4470  0B36  022B               	subwf	getLoad_AD@i,w
  4471  0B37  1C03               	skipc
  4472  0B38  2B00               	goto	l9000
  4473  0B39                     l9010:	
  4474                           
  4475                           ;OverLoad_B1.c: 26: }
  4476                           ;OverLoad_B1.c: 27: }
  4477                           ;OverLoad_B1.c: 28: if (!j) {
  4478  0B39  08AA               	movf	getLoad_AD@j,f
  4479  0B3A  1D03               	skipz
  4480  0B3B  0008               	return
  4481                           
  4482                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4483  0B3C  01AB               	clrf	getLoad_AD@i
  4484  0B3D                     L1:	
  4485  0B3D  3005               	movlw	5
  4486  0B3E  022B               	subwf	getLoad_AD@i,w
  4487  0B3F  1803               	btfsc	3,0
  4488  0B40  0008               	return
  4489                           
  4490                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4491  0B41  352B               	lslf	getLoad_AD@i,w
  4492  0B42  3E1A               	addlw	26
  4493  0B43  077B               	addwf	_Load,w
  4494  0B44  00A4               	movwf	??_getLoad_AD
  4495  0B45  0824               	movf	??_getLoad_AD,w
  4496  0B46  0086               	movwf	6
  4497  0B47  3002               	movlw	2	; select bank4/5
  4498  0B48  0087               	movwf	7
  4499  0B49  3F40               	moviw [0]fsr1
  4500  0B4A  00A5               	movwf	??_getLoad_AD+1
  4501  0B4B  3F41               	moviw [1]fsr1
  4502  0B4C  00A6               	movwf	??_getLoad_AD+2
  4503  0B4D  087B               	movf	_Load,w
  4504  0B4E  3E32               	addlw	50
  4505  0B4F  0086               	movwf	6
  4506  0B50  3002               	movlw	2	; select bank4/5
  4507  0B51  0087               	movwf	7
  4508  0B52  3F40               	moviw [0]fsr1
  4509  0B53  00A7               	movwf	??_getLoad_AD+3
  4510  0B54  3F41               	moviw [1]fsr1
  4511  0B55  00A8               	movwf	??_getLoad_AD+4
  4512  0B56  0826               	movf	??_getLoad_AD+2,w
  4513  0B57  0228               	subwf	??_getLoad_AD+4,w
  4514  0B58  1D03               	skipz
  4515  0B59  2B5C               	goto	u8925
  4516  0B5A  0825               	movf	??_getLoad_AD+1,w
  4517  0B5B  0227               	subwf	??_getLoad_AD+3,w
  4518  0B5C                     u8925:	
  4519  0B5C  1803               	skipnc
  4520  0B5D  2B70               	goto	l9022
  4521                           
  4522                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4523  0B5E  087B               	movf	_Load,w
  4524  0B5F  3E32               	addlw	50
  4525  0B60  0086               	movwf	6
  4526  0B61  3002               	movlw	2	; select bank4/5
  4527  0B62  0087               	movwf	7
  4528  0B63  352B               	lslf	getLoad_AD@i,w
  4529  0B64  3E1A               	addlw	26
  4530  0B65  077B               	addwf	_Load,w
  4531  0B66  00A4               	movwf	??_getLoad_AD
  4532  0B67  0824               	movf	??_getLoad_AD,w
  4533  0B68  0084               	movwf	4
  4534  0B69  3002               	movlw	2	; select bank4/5
  4535  0B6A  0085               	movwf	5
  4536  0B6B  3F40               	moviw [0]fsr1
  4537  0B6C  3F80               	movwi [0]fsr0
  4538  0B6D  3F41               	moviw [1]fsr1
  4539  0B6E  3F81               	movwi [1]fsr0
  4540                           
  4541                           ;OverLoad_B1.c: 32: break;
  4542  0B6F  0008               	return
  4543  0B70                     l9022:	
  4544  0B70  3001               	movlw	1
  4545  0B71  00A4               	movwf	??_getLoad_AD
  4546  0B72  0824               	movf	??_getLoad_AD,w
  4547  0B73  07AB               	addwf	getLoad_AD@i,f
  4548  0B74  2B3D               	goto	L1
  4549  0B75                     __end_of_getLoad_AD:	
  4550                           
  4551                           	psect	text5
  4552  1A75                     __ptext5:	
  4553 ;; *************** function _getAD *****************
  4554 ;; Defined at:
  4555 ;;		line 415 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  adcon0          1    wreg     unsigned char 
  4558 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  2    0[BANK0 ] int 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4570 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;Total ram usage:        4 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    4
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_getLoad_AD
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _getAD
  4586  1A75                     _getAD:	
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4590                           ;getAD@adcon0 stored from wreg
  4591  1A75  0020               	movlb	0	; select bank0
  4592  1A76  00A3               	movwf	getAD@adcon0
  4593                           
  4594                           ;MCU_B1.c: 416: ADCON0 = adcon0;
  4595  1A77  0823               	movf	getAD@adcon0,w
  4596  1A78  0021               	movlb	1	; select bank1
  4597  1A79  009D               	movwf	29	;volatile
  4598                           
  4599                           ;MCU_B1.c: 417: ADCON1 = adcon1;
  4600  1A7A  0020               	movlb	0	; select bank0
  4601  1A7B  0820               	movf	getAD@adcon1,w
  4602  1A7C  0021               	movlb	1	; select bank1
  4603  1A7D  009E               	movwf	30	;volatile
  4604                           
  4605                           ;MCU_B1.c: 418: GO_nDONE = 1;
  4606  1A7E  149D               	bsf	29,1	;volatile
  4607  1A7F                     l1393:	
  4608                           ;MCU_B1.c: 419: while (GO_nDONE == 1);
  4609                           
  4610  1A7F  189D               	btfsc	29,1	;volatile
  4611  1A80  2A7F               	goto	l1393
  4612                           
  4613                           ;MCU_B1.c: 420: return ((ADRESH*256)+ADRESL);
  4614  1A81  081C               	movf	28,w	;volatile
  4615  1A82  0020               	movlb	0	; select bank0
  4616  1A83  01A1               	clrf	?_getAD+1
  4617  1A84  07A1               	addwf	?_getAD+1,f
  4618  1A85  0021               	movlb	1	; select bank1
  4619  1A86  081B               	movf	27,w	;volatile
  4620  1A87  0020               	movlb	0	; select bank0
  4621  1A88  01A0               	clrf	?_getAD
  4622  1A89  07A0               	addwf	?_getAD,f
  4623  1A8A  0008               	return
  4624  1A8B                     __end_of_getAD:	
  4625                           
  4626                           	psect	text6
  4627  1B74                     __ptext6:	
  4628 ;; *************** function _WDT_Main *****************
  4629 ;; Defined at:
  4630 ;;		line 973 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;		None               void
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;Total ram usage:        1 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    5
  4651 ;; This function calls:
  4652 ;;		_WDT_Clearing
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _WDT_Main
  4660  1B74                     _WDT_Main:	
  4661                           
  4662                           ;MCU_B1.c: 974: if (WDT->Enable) {
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4666  1B74  0021               	movlb	1	; select bank1
  4667  1B75  0868               	movf	_WDT^(0+128),w
  4668  1B76  0086               	movwf	6
  4669  1B77  0187               	clrf	7
  4670  1B78  1C01               	btfss	1,0
  4671  1B79  0008               	return
  4672                           
  4673                           ;MCU_B1.c: 975: if (WDT->Count-- > 0) {
  4674  1B7A  0A68               	incf	_WDT^(0+128),w
  4675  1B7B  0086               	movwf	6
  4676  1B7C  0187               	clrf	7
  4677  1B7D  3001               	movlw	1
  4678  1B7E  0281               	subwf	1,f
  4679  1B7F  0801               	movf	1,w
  4680  1B80  3AFF               	xorlw	255
  4681  1B81  1903               	skipnz
  4682  1B82  0008               	return
  4683                           
  4684                           ;MCU_B1.c: 976: WDT->Count = 10;
  4685  1B83  300A               	movlw	10
  4686  1B84  0020               	movlb	0	; select bank0
  4687  1B85  00A0               	movwf	??_WDT_Main
  4688  1B86  0021               	movlb	1	; select bank1
  4689  1B87  0A68               	incf	_WDT^(0+128),w
  4690  1B88  0086               	movwf	6
  4691  1B89  0187               	clrf	7
  4692  1B8A  0020               	movlb	0	; select bank0
  4693  1B8B  0820               	movf	??_WDT_Main,w
  4694  1B8C  0081               	movwf	1
  4695                           
  4696                           ;MCU_B1.c: 977: WDT_Clearing();
  4697  1B8D  3187  27FE         	fcall	_WDT_Clearing
  4698  1B8F  0008               	return
  4699  1B90                     __end_of_WDT_Main:	
  4700                           
  4701                           	psect	text7
  4702  07FE                     __ptext7:	
  4703 ;; *************** function _WDT_Clearing *****************
  4704 ;; Defined at:
  4705 ;;		line 983 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;		None               void
  4712 ;; Registers used:
  4713 ;;		None
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;Total ram usage:        0 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    4
  4726 ;; This function calls:
  4727 ;;		Nothing
  4728 ;; This function is called by:
  4729 ;;		_WDT_Main
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _WDT_Clearing
  4735  07FE                     _WDT_Clearing:	
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _WDT_Clearing: []
  4739  07FE  0064               	clrwdt	;# 
  4740  07FF  0008               	return
  4741  0800                     __end_of_WDT_Clearing:	
  4742                           
  4743                           	psect	text8
  4744  27BA                     __ptext8:	
  4745 ;; *************** function _Switch_Main *****************
  4746 ;; Defined at:
  4747 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;Total ram usage:        0 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:   10
  4768 ;; This function calls:
  4769 ;;		_setSw_Main
  4770 ;; This function is called by:
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           
  4776                           ;psect for function _Switch_Main
  4777  27BA                     _Switch_Main:	
  4778                           
  4779                           ;Switch_B1.c: 63: setSw_Main(1);
  4780                           
  4781                           ;incstack = 0
  4782                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4783  27BA  3001               	movlw	1
  4784  27BB  3185  25C8  31A7   	fcall	_setSw_Main
  4785                           
  4786                           ;Switch_B1.c: 67: setSw_Main(2);
  4787  27BE  3002               	movlw	2
  4788  27BF  3185  25C8         	fcall	_setSw_Main
  4789  27C1  0008               	return
  4790  27C2                     __end_of_Switch_Main:	
  4791                           
  4792                           	psect	text9
  4793  05C8                     __ptext9:	
  4794 ;; *************** function _setSw_Main *****************
  4795 ;; Defined at:
  4796 ;;		line 111 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  sw              1    wreg     unsigned char 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  sw              1   73[BANK0 ] unsigned char 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;Total ram usage:        5 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    9
  4817 ;; This function calls:
  4818 ;;		_SwPointSelect
  4819 ;;		_Sw_DimmerAdjFunc
  4820 ;;		_Sw_DimmerOffFunc
  4821 ;;		_Sw_DimmerOnFunc
  4822 ;;		_setBuz
  4823 ;;		_setRF_Learn
  4824 ;; This function is called by:
  4825 ;;		_Switch_Main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _setSw_Main
  4831  05C8                     _setSw_Main:	
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4835                           ;setSw_Main@sw stored from wreg
  4836  05C8  0020               	movlb	0	; select bank0
  4837  05C9  00E9               	movwf	setSw_Main@sw
  4838                           
  4839                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4840  05CA  087A               	movf	_Sw,w
  4841  05CB  0086               	movwf	6
  4842  05CC  3001               	movlw	1	; select bank2/3
  4843  05CD  0087               	movwf	7
  4844  05CE  1C01               	btfss	1,0
  4845  05CF  0008               	return
  4846                           
  4847                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4848  05D0  0869               	movf	setSw_Main@sw,w
  4849  05D1  3199  21CC  3185   	fcall	_SwPointSelect
  4850                           
  4851                           ;Switch_B1.c: 125: if (sw == 1) {
  4852  05D4  0020               	movlb	0	; select bank0
  4853  05D5  0869               	movf	setSw_Main@sw,w
  4854  05D6  3A01               	xorlw	1
  4855  05D7  1D03               	skipz
  4856  05D8  2DE5               	goto	l8794
  4857                           
  4858                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4859  05D9  01E7               	clrf	_setSw_Main$4742
  4860  05DA  0AE7               	incf	_setSw_Main$4742,f
  4861  05DB  1F0C               	btfss	12,6	;volatile
  4862  05DC  1A0C               	btfsc	12,4	;volatile
  4863  05DD  2DDF               	goto	l8792
  4864  05DE  01E7               	clrf	_setSw_Main$4742
  4865  05DF                     l8792:	
  4866  05DF  087A               	movf	_Sw,w
  4867  05E0  0086               	movwf	6
  4868  05E1  3001               	movlw	1	; select bank2/3
  4869  05E2  0087               	movwf	7
  4870  05E3  0867               	movf	_setSw_Main$4742,w
  4871  05E4  2DF4               	goto	L2
  4872  05E5                     l8794:	
  4873                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4874                           
  4875  05E5  0869               	movf	setSw_Main@sw,w
  4876  05E6  3A02               	xorlw	2
  4877  05E7  1D03               	skipz
  4878  05E8  2DF7               	goto	l8804
  4879                           
  4880                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4881  05E9  01E8               	clrf	_setSw_Main$4743
  4882  05EA  0AE8               	incf	_setSw_Main$4743,f
  4883  05EB  1C0C               	btfss	12,0	;volatile
  4884  05EC  188D               	btfsc	13,1	;volatile
  4885  05ED  2DEF               	goto	l8802
  4886  05EE  01E8               	clrf	_setSw_Main$4743
  4887  05EF                     l8802:	
  4888  05EF  087A               	movf	_Sw,w
  4889  05F0  0086               	movwf	6
  4890  05F1  3001               	movlw	1	; select bank2/3
  4891  05F2  0087               	movwf	7
  4892  05F3  0868               	movf	_setSw_Main$4743,w
  4893  05F4                     L2:	
  4894  05F4  1081               	bcf	1,1
  4895  05F5  1D03               	skipz
  4896  05F6  1481               	bsf	1,1
  4897  05F7                     l8804:	
  4898                           
  4899                           ;Switch_B1.c: 129: }
  4900                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4901  05F7  087A               	movf	_Sw,w
  4902  05F8  0086               	movwf	6
  4903  05F9  3001               	movlw	1	; select bank2/3
  4904  05FA  0087               	movwf	7
  4905  05FB  1C81               	btfss	1,1
  4906  05FC  2ECE               	goto	l8852
  4907                           
  4908                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4909  05FD  087A               	movf	_Sw,w
  4910  05FE  0086               	movwf	6
  4911  05FF  3001               	movlw	1	; select bank2/3
  4912  0600  0087               	movwf	7
  4913  0601  1901               	btfsc	1,2
  4914  0602  2E24               	goto	l8818
  4915                           
  4916                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4917  0603  3001               	movlw	1
  4918  0604  00E5               	movwf	??_setSw_Main
  4919  0605  087A               	movf	_Sw,w
  4920  0606  3E02               	addlw	2
  4921  0607  0086               	movwf	6
  4922  0608  3001               	movlw	1	; select bank2/3
  4923  0609  0087               	movwf	7
  4924  060A  0865               	movf	??_setSw_Main,w
  4925  060B  0781               	addwf	1,f
  4926                           
  4927                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4928  060C  087A               	movf	_Sw,w
  4929  060D  3E02               	addlw	2
  4930  060E  0086               	movwf	6
  4931  060F  3001               	movlw	1	; select bank2/3
  4932  0610  0087               	movwf	7
  4933  0611  3005               	movlw	5
  4934  0612  0201               	subwf	1,w
  4935  0613  1C03               	skipc
  4936  0614  0008               	return
  4937                           
  4938                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4939  0615  087A               	movf	_Sw,w
  4940  0616  3E02               	addlw	2
  4941  0617  0086               	movwf	6
  4942  0618  3001               	movlw	1	; select bank2/3
  4943  0619  0087               	movwf	7
  4944  061A  0181               	clrf	1
  4945                           
  4946                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4947  061B  087A               	movf	_Sw,w
  4948  061C  0086               	movwf	6
  4949  061D  3001               	movlw	1	; select bank2/3
  4950  061E  0087               	movwf	7
  4951  061F  1501               	bsf	1,2
  4952                           
  4953                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4954  0620  0869               	movf	setSw_Main@sw,w
  4955  0621  3195  25A7         	fcall	_Sw_DimmerOnFunc
  4956                           
  4957                           ;Switch_B1.c: 148: }
  4958                           ;Switch_B1.c: 149: } else {
  4959  0623  0008               	return
  4960  0624                     l8818:	
  4961                           
  4962                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4963  0624  087A               	movf	_Sw,w
  4964  0625  0086               	movwf	6
  4965  0626  3001               	movlw	1	; select bank2/3
  4966  0627  0087               	movwf	7
  4967  0628  1981               	btfsc	1,3
  4968  0629  2E56               	goto	l8828
  4969                           
  4970                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  4971  062A  087A               	movf	_Sw,w
  4972  062B  3E03               	addlw	3
  4973  062C  0086               	movwf	6
  4974  062D  3001               	movlw	1	; select bank2/3
  4975  062E  0087               	movwf	7
  4976  062F  3001               	movlw	1
  4977  0630  0781               	addwf	1,f
  4978  0631  3141               	addfsr 1,1
  4979  0632  1803               	skipnc
  4980  0633  0A81               	incf	1,f
  4981                           
  4982                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  4983  0634  087A               	movf	_Sw,w
  4984  0635  3E03               	addlw	3
  4985  0636  0086               	movwf	6
  4986  0637  3001               	movlw	1	; select bank2/3
  4987  0638  0087               	movwf	7
  4988  0639  3F40               	moviw [0]fsr1
  4989  063A  0020               	movlb	0	; select bank0
  4990  063B  00E5               	movwf	??_setSw_Main
  4991  063C  3F41               	moviw [1]fsr1
  4992  063D  00E6               	movwf	??_setSw_Main+1
  4993  063E  3000               	movlw	0
  4994  063F  0266               	subwf	??_setSw_Main+1,w
  4995  0640  3096               	movlw	150
  4996  0641  1903               	skipnz
  4997  0642  0265               	subwf	??_setSw_Main,w
  4998  0643  1C03               	skipc
  4999  0644  0008               	return
  5000                           
  5001                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5002  0645  087A               	movf	_Sw,w
  5003  0646  3E03               	addlw	3
  5004  0647  0086               	movwf	6
  5005  0648  3001               	movlw	1	; select bank2/3
  5006  0649  0087               	movwf	7
  5007  064A  3000               	movlw	0
  5008  064B  3FC0               	movwi [0]fsr1
  5009  064C  3FC1               	movwi [1]fsr1
  5010                           
  5011                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  5012  064D  087A               	movf	_Sw,w
  5013  064E  0086               	movwf	6
  5014  064F  3001               	movlw	1	; select bank2/3
  5015  0650  0087               	movwf	7
  5016  0651  1581               	bsf	1,3
  5017                           
  5018                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5019  0652  0869               	movf	setSw_Main@sw,w
  5020  0653  319F  277B         	fcall	_Sw_DimmerAdjFunc
  5021                           
  5022                           ;Switch_B1.c: 160: }
  5023                           ;Switch_B1.c: 161: } else {
  5024  0655  0008               	return
  5025  0656                     l8828:	
  5026                           
  5027                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  5028  0656  087A               	movf	_Sw,w
  5029  0657  0086               	movwf	6
  5030  0658  3001               	movlw	1	; select bank2/3
  5031  0659  0087               	movwf	7
  5032  065A  1A01               	btfsc	1,4
  5033  065B  2E9B               	goto	l8842
  5034                           
  5035                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5036  065C  087A               	movf	_Sw,w
  5037  065D  3E05               	addlw	5
  5038  065E  0086               	movwf	6
  5039  065F  3001               	movlw	1	; select bank2/3
  5040  0660  0087               	movwf	7
  5041  0661  3001               	movlw	1
  5042  0662  0781               	addwf	1,f
  5043  0663  3141               	addfsr 1,1
  5044  0664  1803               	skipnc
  5045  0665  0A81               	incf	1,f
  5046                           
  5047                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5048  0666  087A               	movf	_Sw,w
  5049  0667  3E05               	addlw	5
  5050  0668  0086               	movwf	6
  5051  0669  3001               	movlw	1	; select bank2/3
  5052  066A  0087               	movwf	7
  5053  066B  3F40               	moviw [0]fsr1
  5054  066C  0020               	movlb	0	; select bank0
  5055  066D  00E5               	movwf	??_setSw_Main
  5056  066E  3F41               	moviw [1]fsr1
  5057  066F  00E6               	movwf	??_setSw_Main+1
  5058  0670  3000               	movlw	0
  5059  0671  0266               	subwf	??_setSw_Main+1,w
  5060  0672  3096               	movlw	150
  5061  0673  1903               	skipnz
  5062  0674  0265               	subwf	??_setSw_Main,w
  5063  0675  1C03               	skipc
  5064  0676  0008               	return
  5065                           
  5066                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5067  0677  087A               	movf	_Sw,w
  5068  0678  3E05               	addlw	5
  5069  0679  0086               	movwf	6
  5070  067A  3001               	movlw	1	; select bank2/3
  5071  067B  0087               	movwf	7
  5072  067C  3000               	movlw	0
  5073  067D  3FC0               	movwi [0]fsr1
  5074  067E  3FC1               	movwi [1]fsr1
  5075                           
  5076                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5077  067F  087A               	movf	_Sw,w
  5078  0680  0086               	movwf	6
  5079  0681  3001               	movlw	1	; select bank2/3
  5080  0682  0087               	movwf	7
  5081  0683  1601               	bsf	1,4
  5082                           
  5083                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  5084  0684  01A2               	clrf	setRF_Learn@command
  5085  0685  0AA2               	incf	setRF_Learn@command,f
  5086  0686  3001               	movlw	1
  5087  0687  3199  2129  3185   	fcall	_setRF_Learn
  5088                           
  5089                           ;Switch_B1.c: 172: if (myMain->First) {
  5090  068A  0021               	movlb	1	; select bank1
  5091  068B  0869               	movf	_myMain^(0+128),w
  5092  068C  3E03               	addlw	3
  5093  068D  0086               	movwf	6
  5094  068E  3001               	movlw	1	; select bank2/3
  5095  068F  0087               	movwf	7
  5096  0690  1C81               	btfss	1,1
  5097  0691  0008               	return
  5098                           
  5099                           ;Switch_B1.c: 173: setBuz(2, 100);
  5100  0692  3064               	movlw	100
  5101  0693  0020               	movlb	0	; select bank0
  5102  0694  00A6               	movwf	setBuz@time
  5103  0695  3000               	movlw	0
  5104  0696  00A7               	movwf	setBuz@time+1
  5105  0697  3002               	movlw	2
  5106  0698  3188  2017         	fcall	_setBuz
  5107                           
  5108                           ;Switch_B1.c: 174: }
  5109                           ;Switch_B1.c: 176: }
  5110                           ;Switch_B1.c: 177: } else {
  5111  069A  0008               	return
  5112  069B                     l8842:	
  5113                           
  5114                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  5115  069B  087A               	movf	_Sw,w
  5116  069C  0086               	movwf	6
  5117  069D  3001               	movlw	1	; select bank2/3
  5118  069E  0087               	movwf	7
  5119  069F  1A81               	btfsc	1,5
  5120  06A0  0008               	return
  5121                           
  5122                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5123  06A1  087A               	movf	_Sw,w
  5124  06A2  3E07               	addlw	7
  5125  06A3  0086               	movwf	6
  5126  06A4  3001               	movlw	1	; select bank2/3
  5127  06A5  0087               	movwf	7
  5128  06A6  3001               	movlw	1
  5129  06A7  0781               	addwf	1,f
  5130  06A8  3141               	addfsr 1,1
  5131  06A9  1803               	skipnc
  5132  06AA  0A81               	incf	1,f
  5133                           
  5134                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  5135  06AB  087A               	movf	_Sw,w
  5136  06AC  3E07               	addlw	7
  5137  06AD  0086               	movwf	6
  5138  06AE  3001               	movlw	1	; select bank2/3
  5139  06AF  0087               	movwf	7
  5140  06B0  3F40               	moviw [0]fsr1
  5141  06B1  0020               	movlb	0	; select bank0
  5142  06B2  00E5               	movwf	??_setSw_Main
  5143  06B3  3F41               	moviw [1]fsr1
  5144  06B4  00E6               	movwf	??_setSw_Main+1
  5145  06B5  3001               	movlw	1
  5146  06B6  0266               	subwf	??_setSw_Main+1,w
  5147  06B7  302C               	movlw	44
  5148  06B8  1903               	skipnz
  5149  06B9  0265               	subwf	??_setSw_Main,w
  5150  06BA  1C03               	skipc
  5151  06BB  0008               	return
  5152                           
  5153                           ;Switch_B1.c: 181: {
  5154                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  5155  06BC  087A               	movf	_Sw,w
  5156  06BD  3E07               	addlw	7
  5157  06BE  0086               	movwf	6
  5158  06BF  3001               	movlw	1	; select bank2/3
  5159  06C0  0087               	movwf	7
  5160  06C1  3000               	movlw	0
  5161  06C2  3FC0               	movwi [0]fsr1
  5162  06C3  3FC1               	movwi [1]fsr1
  5163                           
  5164                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  5165  06C4  087A               	movf	_Sw,w
  5166  06C5  0086               	movwf	6
  5167  06C6  3001               	movlw	1	; select bank2/3
  5168  06C7  0087               	movwf	7
  5169  06C8  1681               	bsf	1,5
  5170                           
  5171                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  5172  06C9  01A2               	clrf	setRF_Learn@command
  5173  06CA  3001               	movlw	1
  5174  06CB  3199  2129         	fcall	_setRF_Learn
  5175                           
  5176                           ;Switch_B1.c: 189: }
  5177                           ;Switch_B1.c: 190: }
  5178                           ;Switch_B1.c: 191: }
  5179                           ;Switch_B1.c: 192: }
  5180                           ;Switch_B1.c: 193: }
  5181                           ;Switch_B1.c: 194: } else {
  5182  06CD  0008               	return
  5183  06CE                     l8852:	
  5184                           
  5185                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  5186  06CE  087A               	movf	_Sw,w
  5187  06CF  0086               	movwf	6
  5188  06D0  3001               	movlw	1	; select bank2/3
  5189  06D1  0087               	movwf	7
  5190  06D2  1D01               	btfss	1,2
  5191  06D3  0008               	return
  5192                           
  5193                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  5194  06D4  3001               	movlw	1
  5195  06D5  0020               	movlb	0	; select bank0
  5196  06D6  00E5               	movwf	??_setSw_Main
  5197  06D7  087A               	movf	_Sw,w
  5198  06D8  3E02               	addlw	2
  5199  06D9  0086               	movwf	6
  5200  06DA  3001               	movlw	1	; select bank2/3
  5201  06DB  0087               	movwf	7
  5202  06DC  0865               	movf	??_setSw_Main,w
  5203  06DD  0781               	addwf	1,f
  5204                           
  5205                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  5206  06DE  087A               	movf	_Sw,w
  5207  06DF  3E02               	addlw	2
  5208  06E0  0086               	movwf	6
  5209  06E1  3001               	movlw	1	; select bank2/3
  5210  06E2  0087               	movwf	7
  5211  06E3  3005               	movlw	5
  5212  06E4  0201               	subwf	1,w
  5213  06E5  1C03               	skipc
  5214  06E6  0008               	return
  5215                           
  5216                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  5217  06E7  087A               	movf	_Sw,w
  5218  06E8  3E02               	addlw	2
  5219  06E9  0086               	movwf	6
  5220  06EA  3001               	movlw	1	; select bank2/3
  5221  06EB  0087               	movwf	7
  5222  06EC  0181               	clrf	1
  5223                           
  5224                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  5225  06ED  087A               	movf	_Sw,w
  5226  06EE  0086               	movwf	6
  5227  06EF  3001               	movlw	1	; select bank2/3
  5228  06F0  0087               	movwf	7
  5229  06F1  1101               	bcf	1,2
  5230                           
  5231                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  5232  06F2  087A               	movf	_Sw,w
  5233  06F3  3E03               	addlw	3
  5234  06F4  0086               	movwf	6
  5235  06F5  3001               	movlw	1	; select bank2/3
  5236  06F6  0087               	movwf	7
  5237  06F7  3000               	movlw	0
  5238  06F8  3FC0               	movwi [0]fsr1
  5239  06F9  3FC1               	movwi [1]fsr1
  5240                           
  5241                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  5242  06FA  087A               	movf	_Sw,w
  5243  06FB  0086               	movwf	6
  5244  06FC  3001               	movlw	1	; select bank2/3
  5245  06FD  0087               	movwf	7
  5246  06FE  1181               	bcf	1,3
  5247                           
  5248                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  5249  06FF  087A               	movf	_Sw,w
  5250  0700  3E05               	addlw	5
  5251  0701  0086               	movwf	6
  5252  0702  3001               	movlw	1	; select bank2/3
  5253  0703  0087               	movwf	7
  5254  0704  3000               	movlw	0
  5255  0705  3FC0               	movwi [0]fsr1
  5256  0706  3FC1               	movwi [1]fsr1
  5257                           
  5258                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  5259  0707  087A               	movf	_Sw,w
  5260  0708  0086               	movwf	6
  5261  0709  3001               	movlw	1	; select bank2/3
  5262  070A  0087               	movwf	7
  5263  070B  1201               	bcf	1,4
  5264                           
  5265                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5266  070C  087A               	movf	_Sw,w
  5267  070D  3E07               	addlw	7
  5268  070E  0086               	movwf	6
  5269  070F  3001               	movlw	1	; select bank2/3
  5270  0710  0087               	movwf	7
  5271  0711  3000               	movlw	0
  5272  0712  3FC0               	movwi [0]fsr1
  5273  0713  3FC1               	movwi [1]fsr1
  5274                           
  5275                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  5276  0714  087A               	movf	_Sw,w
  5277  0715  0086               	movwf	6
  5278  0716  3001               	movlw	1	; select bank2/3
  5279  0717  0087               	movwf	7
  5280  0718  1281               	bcf	1,5
  5281                           
  5282                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  5283  0719  0869               	movf	setSw_Main@sw,w
  5284  071A  3196  2616  3185   	fcall	_Sw_DimmerOffFunc
  5285                           
  5286                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  5287  071D  0020               	movlb	0	; select bank0
  5288  071E  01A2               	clrf	setRF_Learn@command
  5289  071F  3001               	movlw	1
  5290  0720  3199  2129         	fcall	_setRF_Learn
  5291  0722  0008               	return
  5292  0723                     __end_of_setSw_Main:	
  5293                           
  5294                           	psect	text10
  5295  1929                     __ptext10:	
  5296 ;; *************** function _setRF_Learn *****************
  5297 ;; Defined at:
  5298 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  rf              1    wreg     unsigned char 
  5301 ;;  command         1    2[BANK0 ] unsigned char 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  rf              1    3[BANK0 ] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;		None               void
  5306 ;; Registers used:
  5307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5313 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;Total ram usage:        2 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    5
  5320 ;; This function calls:
  5321 ;;		_RfPointSelect
  5322 ;; This function is called by:
  5323 ;;		_setSw_Main
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function _setRF_Learn
  5329  1929                     _setRF_Learn:	
  5330                           
  5331                           ;incstack = 0
  5332                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5333                           ;setRF_Learn@rf stored from wreg
  5334  1929  0020               	movlb	0	; select bank0
  5335  192A  00A3               	movwf	setRF_Learn@rf
  5336                           
  5337                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  5338  192B  0823               	movf	setRF_Learn@rf,w
  5339  192C  3198  208B         	fcall	_RfPointSelect
  5340                           
  5341                           ;RF_Control_B1.c: 32: RF->Learn = command;
  5342  192E  0021               	movlb	1	; select bank1
  5343  192F  083D               	movf	_RF^(0+128),w
  5344  1930  0086               	movwf	6
  5345  1931  0187               	clrf	7
  5346  1932  0020               	movlb	0	; select bank0
  5347  1933  0822               	movf	setRF_Learn@command,w
  5348  1934  1301               	bcf	1,6
  5349  1935  1D03               	skipz
  5350  1936  1701               	bsf	1,6
  5351  1937  0008               	return
  5352  1938                     __end_of_setRF_Learn:	
  5353                           
  5354                           	psect	text11
  5355  15A7                     __ptext11:	
  5356 ;; *************** function _Sw_DimmerOnFunc *****************
  5357 ;; Defined at:
  5358 ;;		line 222 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  sw              1    wreg     unsigned char 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  sw              1   67[BANK0 ] unsigned char 
  5363 ;;  Idle            1   66[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        2 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    8
  5380 ;; This function calls:
  5381 ;;		_setBuz
  5382 ;;		_setDimmerLights_Switch
  5383 ;;		_setDimmerLights_Trigger
  5384 ;;		_setRFSW_Status
  5385 ;;		_setRF_DimmerLights
  5386 ;;		_setTxData
  5387 ;; This function is called by:
  5388 ;;		_setSw_Main
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _Sw_DimmerOnFunc
  5394  15A7                     _Sw_DimmerOnFunc:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5398                           ;Sw_DimmerOnFunc@sw stored from wreg
  5399  15A7  0020               	movlb	0	; select bank0
  5400  15A8  00E3               	movwf	Sw_DimmerOnFunc@sw
  5401                           
  5402                           ;Switch_B1.c: 223: char Idle = 1;
  5403  15A9  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5404  15AA  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5405                           
  5406                           ;Switch_B1.c: 235: if (sw == 1) {
  5407  15AB  0863               	movf	Sw_DimmerOnFunc@sw,w
  5408  15AC  3A01               	xorlw	1
  5409  15AD  1D03               	skipz
  5410  15AE  2DB1               	goto	l8432
  5411                           
  5412                           ;Switch_B1.c: 236: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5413  15AF  0879               	movf	_DimmerLights22,w
  5414  15B0  2DB6               	goto	L3
  5415  15B1                     l8432:	
  5416                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5417                           
  5418  15B1  0863               	movf	Sw_DimmerOnFunc@sw,w
  5419  15B2  3A02               	xorlw	2
  5420  15B3  1D03               	skipz
  5421  15B4  2DC1               	goto	l8436
  5422                           
  5423                           ;Switch_B1.c: 238: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5424  15B5  0878               	movf	_DimmerLights11,w
  5425  15B6                     L3:	
  5426  15B6  3E09               	addlw	9
  5427  15B7  0086               	movwf	6
  5428  15B8  3001               	movlw	1	; select bank2/3
  5429  15B9  0087               	movwf	7
  5430  15BA  1003               	clrc
  5431  15BB  1D01               	btfss	1,2
  5432  15BC  1403               	setc
  5433  15BD  3000               	movlw	0
  5434  15BE  1803               	btfsc	3,0
  5435  15BF  3001               	movlw	1
  5436  15C0  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5437  15C1                     l8436:	
  5438                           
  5439                           ;Switch_B1.c: 239: }
  5440                           ;Switch_B1.c: 242: if (Idle) {
  5441  15C1  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5442  15C2  1903               	btfsc	3,2
  5443  15C3  0008               	return
  5444                           
  5445                           ;Switch_B1.c: 243: Sw->Flag = 1;
  5446  15C4  087A               	movf	_Sw,w
  5447  15C5  0086               	movwf	6
  5448  15C6  3001               	movlw	1	; select bank2/3
  5449  15C7  0087               	movwf	7
  5450  15C8  1781               	bsf	1,7
  5451                           
  5452                           ;Switch_B1.c: 244: setBuz(1, 100);
  5453  15C9  3064               	movlw	100
  5454  15CA  00A6               	movwf	setBuz@time
  5455  15CB  3000               	movlw	0
  5456  15CC  00A7               	movwf	setBuz@time+1
  5457  15CD  3001               	movlw	1
  5458  15CE  3188  2017  3195   	fcall	_setBuz
  5459                           
  5460                           ;Switch_B1.c: 245: if (!Sw->Status) {
  5461  15D1  087A               	movf	_Sw,w
  5462  15D2  0086               	movwf	6
  5463  15D3  3001               	movlw	1	; select bank2/3
  5464  15D4  0087               	movwf	7
  5465  15D5  1B01               	btfsc	1,6
  5466  15D6  2E03               	goto	l8456
  5467                           
  5468                           ;Switch_B1.c: 246: Sw->Status = 1;
  5469  15D7  087A               	movf	_Sw,w
  5470  15D8  0086               	movwf	6
  5471  15D9  3001               	movlw	1	; select bank2/3
  5472  15DA  0087               	movwf	7
  5473  15DB  1701               	bsf	1,6
  5474                           
  5475                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  5476  15DC  0020               	movlb	0	; select bank0
  5477  15DD  01A2               	clrf	setRFSW_Status@command
  5478  15DE  0AA2               	incf	setRFSW_Status@command,f
  5479  15DF  0863               	movf	Sw_DimmerOnFunc@sw,w
  5480  15E0  3198  20FC  3195   	fcall	_setRFSW_Status
  5481                           
  5482                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  5483  15E3  0020               	movlb	0	; select bank0
  5484  15E4  01A2               	clrf	setDimmerLights_Trigger@command
  5485  15E5  0AA2               	incf	setDimmerLights_Trigger@command,f
  5486  15E6  0863               	movf	Sw_DimmerOnFunc@sw,w
  5487  15E7  3199  2158  3195   	fcall	_setDimmerLights_Trigger
  5488                           
  5489                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  5490  15EA  0020               	movlb	0	; select bank0
  5491  15EB  01A2               	clrf	setDimmerLights_Switch@command
  5492  15EC  0AA2               	incf	setDimmerLights_Switch@command,f
  5493  15ED  0863               	movf	Sw_DimmerOnFunc@sw,w
  5494  15EE  3199  2148  3195   	fcall	_setDimmerLights_Switch
  5495                           
  5496                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  5497  15F1  087A               	movf	_Sw,w
  5498  15F2  0086               	movwf	6
  5499  15F3  3001               	movlw	1	; select bank2/3
  5500  15F4  0087               	movwf	7
  5501  15F5  3000               	movlw	0
  5502  15F6  1B01               	btfsc	1,6
  5503  15F7  3001               	movlw	1
  5504  15F8  0020               	movlb	0	; select bank0
  5505  15F9  00DD               	movwf	setRF_DimmerLights@on
  5506  15FA  0863               	movf	Sw_DimmerOnFunc@sw,w
  5507  15FB  3194  24CE  3195   	fcall	_setRF_DimmerLights
  5508                           
  5509                           ;Switch_B1.c: 253: setTxData(1);
  5510  15FE  3001               	movlw	1
  5511  15FF  318C  240F         	fcall	_setTxData
  5512                           
  5513                           ;Switch_B1.c: 255: } else {
  5514  1601  0020               	movlb	0	; select bank0
  5515  1602  0008               	return
  5516  1603                     l8456:	
  5517                           
  5518                           ;Switch_B1.c: 256: Sw->Status = 0;
  5519  1603  087A               	movf	_Sw,w
  5520  1604  0086               	movwf	6
  5521  1605  3001               	movlw	1	; select bank2/3
  5522  1606  0087               	movwf	7
  5523  1607  1301               	bcf	1,6
  5524                           
  5525                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  5526  1608  087A               	movf	_Sw,w
  5527  1609  0086               	movwf	6
  5528  160A  3001               	movlw	1	; select bank2/3
  5529  160B  0087               	movwf	7
  5530  160C  3000               	movlw	0
  5531  160D  1B01               	btfsc	1,6
  5532  160E  3001               	movlw	1
  5533  160F  0020               	movlb	0	; select bank0
  5534  1610  00A2               	movwf	setRFSW_Status@command
  5535  1611  0863               	movf	Sw_DimmerOnFunc@sw,w
  5536  1612  3198  20FC         	fcall	_setRFSW_Status
  5537  1614  0020               	movlb	0	; select bank0
  5538  1615  0008               	return
  5539  1616                     __end_of_Sw_DimmerOnFunc:	
  5540                           
  5541                           	psect	text12
  5542  1616                     __ptext12:	
  5543 ;; *************** function _Sw_DimmerOffFunc *****************
  5544 ;; Defined at:
  5545 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  sw              1    wreg     unsigned char 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  sw              1   68[BANK0 ] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;		None               void
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:        3 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    8
  5566 ;; This function calls:
  5567 ;;		_setDelayOff_GO
  5568 ;;		_setDimmerLights_AdjGo
  5569 ;;		_setDimmerLights_Switch
  5570 ;;		_setDimmerLights_Trigger
  5571 ;;		_setDimmerLights_TriggerAdj
  5572 ;;		_setRF_DimmerLights
  5573 ;;		_setTxData
  5574 ;; This function is called by:
  5575 ;;		_setSw_Main
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _Sw_DimmerOffFunc
  5581  1616                     _Sw_DimmerOffFunc:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5585                           ;Sw_DimmerOffFunc@sw stored from wreg
  5586  1616  0020               	movlb	0	; select bank0
  5587  1617  00E4               	movwf	Sw_DimmerOffFunc@sw
  5588                           
  5589                           ;Switch_B1.c: 264: if (Sw->Flag) {
  5590  1618  087A               	movf	_Sw,w
  5591  1619  0086               	movwf	6
  5592  161A  3001               	movlw	1	; select bank2/3
  5593  161B  0087               	movwf	7
  5594  161C  1F81               	btfss	1,7
  5595  161D  0008               	return
  5596                           
  5597                           ;Switch_B1.c: 265: Sw->Flag = 0;
  5598  161E  087A               	movf	_Sw,w
  5599  161F  0086               	movwf	6
  5600  1620  3001               	movlw	1	; select bank2/3
  5601  1621  0087               	movwf	7
  5602  1622  1381               	bcf	1,7
  5603                           
  5604                           ;Switch_B1.c: 266: if (Sw->Status) {
  5605  1623  087A               	movf	_Sw,w
  5606  1624  0086               	movwf	6
  5607  1625  3001               	movlw	1	; select bank2/3
  5608  1626  0087               	movwf	7
  5609  1627  1F01               	btfss	1,6
  5610  1628  2E62               	goto	l8500
  5611                           
  5612                           ;Switch_B1.c: 267: if (Sw->Adj) {
  5613  1629  0A7A               	incf	_Sw,w
  5614  162A  0086               	movwf	6
  5615  162B  3001               	movlw	1	; select bank2/3
  5616  162C  0087               	movwf	7
  5617  162D  1C01               	btfss	1,0
  5618  162E  0008               	return
  5619                           
  5620                           ;Switch_B1.c: 268: Sw->Adj = 0;
  5621  162F  0A7A               	incf	_Sw,w
  5622  1630  0086               	movwf	6
  5623  1631  3001               	movlw	1	; select bank2/3
  5624  1632  0087               	movwf	7
  5625  1633  1001               	bcf	1,0
  5626                           
  5627                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  5628  1634  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5629  1635  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5630  1636  0864               	movf	Sw_DimmerOffFunc@sw,w
  5631  1637  3199  2188  3196   	fcall	_setDimmerLights_TriggerAdj
  5632                           
  5633                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  5634  163A  0020               	movlb	0	; select bank0
  5635  163B  01A2               	clrf	setDimmerLights_AdjGo@command
  5636  163C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5637  163D  3199  2178  3196   	fcall	_setDimmerLights_AdjGo
  5638                           
  5639                           ;Switch_B1.c: 272: product->Data[17]=product->Data[26 + sw];
  5640  1640  0020               	movlb	0	; select bank0
  5641  1641  0864               	movf	Sw_DimmerOffFunc@sw,w
  5642  1642  3E1A               	addlw	26
  5643  1643  077D               	addwf	_product,w
  5644  1644  00E2               	movwf	??_Sw_DimmerOffFunc
  5645  1645  0862               	movf	??_Sw_DimmerOffFunc,w
  5646  1646  0086               	movwf	6
  5647  1647  3001               	movlw	1	; select bank2/3
  5648  1648  0087               	movwf	7
  5649  1649  0801               	movf	1,w
  5650  164A  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5651  164B  087D               	movf	_product,w
  5652  164C  3E11               	addlw	17
  5653  164D  0086               	movwf	6
  5654  164E  3001               	movlw	1	; select bank2/3
  5655  164F  0087               	movwf	7
  5656  1650  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5657  1651  0081               	movwf	1
  5658                           
  5659                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5660  1652  087A               	movf	_Sw,w
  5661  1653  0086               	movwf	6
  5662  1654  3001               	movlw	1	; select bank2/3
  5663  1655  0087               	movwf	7
  5664  1656  3000               	movlw	0
  5665  1657  1B01               	btfsc	1,6
  5666  1658  3001               	movlw	1
  5667  1659  00DD               	movwf	setRF_DimmerLights@on
  5668  165A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5669  165B  3194  24CE  3196   	fcall	_setRF_DimmerLights
  5670                           
  5671                           ;Switch_B1.c: 274: setTxData(1);
  5672  165E  3001               	movlw	1
  5673  165F  318C  240F         	fcall	_setTxData
  5674                           
  5675                           ;Switch_B1.c: 276: }
  5676                           ;Switch_B1.c: 277: } else {
  5677  1661  0008               	return
  5678  1662                     l8500:	
  5679                           
  5680                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  5681  1662  0020               	movlb	0	; select bank0
  5682  1663  01A2               	clrf	setDimmerLights_Trigger@command
  5683  1664  0AA2               	incf	setDimmerLights_Trigger@command,f
  5684  1665  0864               	movf	Sw_DimmerOffFunc@sw,w
  5685  1666  3199  2158  3196   	fcall	_setDimmerLights_Trigger
  5686                           
  5687                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  5688  1669  0020               	movlb	0	; select bank0
  5689  166A  01A2               	clrf	setDimmerLights_Switch@command
  5690  166B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5691  166C  3199  2148  3196   	fcall	_setDimmerLights_Switch
  5692                           
  5693                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  5694  166F  0020               	movlb	0	; select bank0
  5695  1670  01A3               	clrf	setDelayOff_GO@command
  5696  1671  01A4               	clrf	setDelayOff_GO@value
  5697  1672  0864               	movf	Sw_DimmerOffFunc@sw,w
  5698  1673  3192  228C  3196   	fcall	_setDelayOff_GO
  5699                           
  5700                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  5701  1676  087A               	movf	_Sw,w
  5702  1677  0086               	movwf	6
  5703  1678  3001               	movlw	1	; select bank2/3
  5704  1679  0087               	movwf	7
  5705  167A  3000               	movlw	0
  5706  167B  1B01               	btfsc	1,6
  5707  167C  3001               	movlw	1
  5708  167D  0020               	movlb	0	; select bank0
  5709  167E  00DD               	movwf	setRF_DimmerLights@on
  5710  167F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5711  1680  3194  24CE  3196   	fcall	_setRF_DimmerLights
  5712                           
  5713                           ;Switch_B1.c: 283: setTxData(1);
  5714  1683  3001               	movlw	1
  5715  1684  318C  240F         	fcall	_setTxData
  5716  1686  0008               	return
  5717  1687                     __end_of_Sw_DimmerOffFunc:	
  5718                           
  5719                           	psect	text13
  5720  1F7B                     __ptext13:	
  5721 ;; *************** function _Sw_DimmerAdjFunc *****************
  5722 ;; Defined at:
  5723 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  sw              1    wreg     unsigned char 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  sw              1    5[BANK0 ] unsigned char 
  5728 ;;  Idle            1    4[BANK0 ] unsigned char 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;		None               void
  5731 ;; Registers used:
  5732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;Total ram usage:        2 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    6
  5745 ;; This function calls:
  5746 ;;		_setDimmerLights_AdjGo
  5747 ;;		_setDimmerLights_TriggerAdj
  5748 ;;		_setRFSW_Status
  5749 ;; This function is called by:
  5750 ;;		_setSw_Main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _Sw_DimmerAdjFunc
  5756  1F7B                     _Sw_DimmerAdjFunc:	
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5760                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5761  1F7B  0020               	movlb	0	; select bank0
  5762  1F7C  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5763                           
  5764                           ;Switch_B1.c: 291: char Idle = 1;
  5765  1F7D  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5766  1F7E  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5767                           
  5768                           ;Switch_B1.c: 303: if (sw == 1) {
  5769  1F7F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5770  1F80  3A01               	xorlw	1
  5771  1F81  1D03               	skipz
  5772  1F82  2F85               	goto	l8466
  5773                           
  5774                           ;Switch_B1.c: 304: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5775  1F83  0879               	movf	_DimmerLights22,w
  5776  1F84  2F8A               	goto	L4
  5777  1F85                     l8466:	
  5778                           ;Switch_B1.c: 305: } else if (sw == 2) {
  5779                           
  5780  1F85  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5781  1F86  3A02               	xorlw	2
  5782  1F87  1D03               	skipz
  5783  1F88  2F95               	goto	l8470
  5784                           
  5785                           ;Switch_B1.c: 306: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5786  1F89  0878               	movf	_DimmerLights11,w
  5787  1F8A                     L4:	
  5788  1F8A  3E09               	addlw	9
  5789  1F8B  0086               	movwf	6
  5790  1F8C  3001               	movlw	1	; select bank2/3
  5791  1F8D  0087               	movwf	7
  5792  1F8E  1003               	clrc
  5793  1F8F  1D01               	btfss	1,2
  5794  1F90  1403               	setc
  5795  1F91  3000               	movlw	0
  5796  1F92  1803               	btfsc	3,0
  5797  1F93  3001               	movlw	1
  5798  1F94  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5799  1F95                     l8470:	
  5800                           
  5801                           ;Switch_B1.c: 307: }
  5802                           ;Switch_B1.c: 310: if (Idle) {
  5803  1F95  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5804  1F96  1903               	btfsc	3,2
  5805  1F97  0008               	return
  5806                           
  5807                           ;Switch_B1.c: 311: if (Sw->Flag) {
  5808  1F98  087A               	movf	_Sw,w
  5809  1F99  0086               	movwf	6
  5810  1F9A  3001               	movlw	1	; select bank2/3
  5811  1F9B  0087               	movwf	7
  5812  1F9C  1F81               	btfss	1,7
  5813  1F9D  0008               	return
  5814                           
  5815                           ;Switch_B1.c: 312: Sw->Adj = 1;
  5816  1F9E  0A7A               	incf	_Sw,w
  5817  1F9F  0086               	movwf	6
  5818  1FA0  3001               	movlw	1	; select bank2/3
  5819  1FA1  0087               	movwf	7
  5820  1FA2  1401               	bsf	1,0
  5821                           
  5822                           ;Switch_B1.c: 313: Sw->Status = 1;
  5823  1FA3  087A               	movf	_Sw,w
  5824  1FA4  0086               	movwf	6
  5825  1FA5  3001               	movlw	1	; select bank2/3
  5826  1FA6  0087               	movwf	7
  5827  1FA7  1701               	bsf	1,6
  5828                           
  5829                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  5830  1FA8  01A2               	clrf	setRFSW_Status@command
  5831  1FA9  0AA2               	incf	setRFSW_Status@command,f
  5832  1FAA  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5833  1FAB  3198  20FC  319F   	fcall	_setRFSW_Status
  5834                           
  5835                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  5836  1FAE  0020               	movlb	0	; select bank0
  5837  1FAF  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5838  1FB0  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5839  1FB1  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5840  1FB2  3199  2188  319F   	fcall	_setDimmerLights_TriggerAdj
  5841                           
  5842                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  5843  1FB5  0020               	movlb	0	; select bank0
  5844  1FB6  01A2               	clrf	setDimmerLights_AdjGo@command
  5845  1FB7  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5846  1FB8  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5847  1FB9  3199  2178         	fcall	_setDimmerLights_AdjGo
  5848  1FBB  0020               	movlb	0	; select bank0
  5849  1FBC  0008               	return
  5850  1FBD                     __end_of_Sw_DimmerAdjFunc:	
  5851                           
  5852                           	psect	text14
  5853  1988                     __ptext14:	
  5854 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5855 ;; Defined at:
  5856 ;;		line 450 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  lights          1    wreg     unsigned char 
  5859 ;;  command         1    2[BANK0 ] unsigned char 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  lights          1    3[BANK0 ] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;		None               void
  5864 ;; Registers used:
  5865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:        2 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    5
  5878 ;; This function calls:
  5879 ;;		_DimmerLightsPointSelect
  5880 ;; This function is called by:
  5881 ;;		_Sw_DimmerOffFunc
  5882 ;;		_Sw_DimmerAdjFunc
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _setDimmerLights_TriggerAdj
  5888  1988                     _setDimmerLights_TriggerAdj:	
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5892                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5893  1988  0020               	movlb	0	; select bank0
  5894  1989  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5895                           
  5896                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  5897  198A  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5898  198B  3199  21B9         	fcall	_DimmerLightsPointSelect
  5899                           
  5900                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  5901  198D  0877               	movf	_DimmerLights,w
  5902  198E  3E09               	addlw	9
  5903  198F  0086               	movwf	6
  5904  1990  3001               	movlw	1	; select bank2/3
  5905  1991  0087               	movwf	7
  5906  1992  0020               	movlb	0	; select bank0
  5907  1993  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5908  1994  1181               	bcf	1,3
  5909  1995  1D03               	skipz
  5910  1996  1581               	bsf	1,3
  5911  1997  0008               	return
  5912  1998                     __end_of_setDimmerLights_TriggerAdj:	
  5913                           
  5914                           	psect	text15
  5915  1978                     __ptext15:	
  5916 ;; *************** function _setDimmerLights_AdjGo *****************
  5917 ;; Defined at:
  5918 ;;		line 440 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  lights          1    wreg     unsigned char 
  5921 ;;  command         1    2[BANK0 ] unsigned char 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  lights          1    3[BANK0 ] unsigned char 
  5924 ;; Return value:  Size  Location     Type
  5925 ;;		None               void
  5926 ;; Registers used:
  5927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5933 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;Total ram usage:        2 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    5
  5940 ;; This function calls:
  5941 ;;		_DimmerLightsPointSelect
  5942 ;; This function is called by:
  5943 ;;		_Sw_DimmerOffFunc
  5944 ;;		_Sw_DimmerAdjFunc
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function _setDimmerLights_AdjGo
  5950  1978                     _setDimmerLights_AdjGo:	
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5954                           ;setDimmerLights_AdjGo@lights stored from wreg
  5955  1978  0020               	movlb	0	; select bank0
  5956  1979  00A3               	movwf	setDimmerLights_AdjGo@lights
  5957                           
  5958                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  5959  197A  0823               	movf	setDimmerLights_AdjGo@lights,w
  5960  197B  3199  21B9         	fcall	_DimmerLightsPointSelect
  5961                           
  5962                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  5963  197D  0877               	movf	_DimmerLights,w
  5964  197E  3E09               	addlw	9
  5965  197F  0086               	movwf	6
  5966  1980  3001               	movlw	1	; select bank2/3
  5967  1981  0087               	movwf	7
  5968  1982  0020               	movlb	0	; select bank0
  5969  1983  0822               	movf	setDimmerLights_AdjGo@command,w
  5970  1984  1101               	bcf	1,2
  5971  1985  1D03               	skipz
  5972  1986  1501               	bsf	1,2
  5973  1987  0008               	return
  5974  1988                     __end_of_setDimmerLights_AdjGo:	
  5975                           
  5976                           	psect	text16
  5977  18EF                     __ptext16:	
  5978 ;; *************** function _Switch_Initialization *****************
  5979 ;; Defined at:
  5980 ;;		line 37 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;		None
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;		None               void
  5987 ;; Registers used:
  5988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;Total ram usage:        0 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    7
  6001 ;; This function calls:
  6002 ;;		_TouchPower
  6003 ;;		_setSw_Initialization
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _Switch_Initialization
  6011  18EF                     _Switch_Initialization:	
  6012                           
  6013                           ;Switch_B1.c: 38: TouchPower();
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6017  18EF  31A7  2776  3198   	fcall	_TouchPower
  6018                           
  6019                           ;Switch_B1.c: 40: WPUB1 = 0;
  6020  18F2  0024               	movlb	4	; select bank4
  6021  18F3  108D               	bcf	13,1	;volatile
  6022                           
  6023                           ;Switch_B1.c: 49: setSw_Initialization(1);
  6024  18F4  3001               	movlw	1
  6025  18F5  31A7  27B2  3198   	fcall	_setSw_Initialization
  6026                           
  6027                           ;Switch_B1.c: 52: setSw_Initialization(2);
  6028  18F8  3002               	movlw	2
  6029  18F9  31A7  27B2         	fcall	_setSw_Initialization
  6030  18FB  0008               	return
  6031  18FC                     __end_of_Switch_Initialization:	
  6032                           
  6033                           	psect	text17
  6034  27B2                     __ptext17:	
  6035 ;; *************** function _setSw_Initialization *****************
  6036 ;; Defined at:
  6037 ;;		line 77 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  sw              1    wreg     unsigned char 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  sw              1    4[BANK0 ] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;		None               void
  6044 ;; Registers used:
  6045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;Total ram usage:        1 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    6
  6058 ;; This function calls:
  6059 ;;		_setLED
  6060 ;; This function is called by:
  6061 ;;		_Switch_Initialization
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _setSw_Initialization
  6067  27B2                     _setSw_Initialization:	
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6071                           ;setSw_Initialization@sw stored from wreg
  6072  27B2  0020               	movlb	0	; select bank0
  6073  27B3  00A4               	movwf	setSw_Initialization@sw
  6074                           
  6075                           ;Switch_B1.c: 78: setLED(sw, 1);
  6076  27B4  01A2               	clrf	setLED@command
  6077  27B5  0AA2               	incf	setLED@command,f
  6078  27B6  0824               	movf	setSw_Initialization@sw,w
  6079  27B7  3192  22E8         	fcall	_setLED
  6080  27B9  0008               	return
  6081  27BA                     __end_of_setSw_Initialization:	
  6082                           
  6083                           	psect	text18
  6084  2776                     __ptext18:	
  6085 ;; *************** function _TouchPower *****************
  6086 ;; Defined at:
  6087 ;;		line 10 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;		None
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;		None               void
  6094 ;; Registers used:
  6095 ;;		None
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;Total ram usage:        0 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    4
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_Switch_Initialization
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function _TouchPower
  6117  2776                     _TouchPower:	
  6118  2776                     l2726:	
  6119                           ;Switch_B1.c: 11: while (!RC5)
  6120                           
  6121                           ;incstack = 0
  6122                           ; Regs used in _TouchPower: []
  6123                           
  6124  2776  0020               	movlb	0	; select bank0
  6125  2777  1A8E               	btfsc	14,5	;volatile
  6126  2778  0008               	return
  6127                           
  6128                           ;Switch_B1.c: 12: RC5 = 1;
  6129  2779  168E               	bsf	14,5	;volatile
  6130  277A  2F76               	goto	l2726
  6131  277B                     __end_of_TouchPower:	
  6132                           
  6133                           	psect	text19
  6134  2772                     __ptext19:	
  6135 ;; *************** function _RF_Main *****************
  6136 ;; Defined at:
  6137 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;		None               void
  6144 ;; Registers used:
  6145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;Total ram usage:        0 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:   13
  6158 ;; This function calls:
  6159 ;;		_setRF_Main
  6160 ;; This function is called by:
  6161 ;;		_main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _RF_Main
  6167  2772                     _RF_Main:	
  6168                           
  6169                           ;RF_Control_B1.c: 25: setRF_Main(1);
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6173  2772  3001               	movlw	1
  6174  2773  318A  224B         	fcall	_setRF_Main
  6175  2775  0008               	return
  6176  2776                     __end_of_RF_Main:	
  6177                           
  6178                           	psect	text20
  6179  0A4B                     __ptext20:	
  6180 ;; *************** function _setRF_Main *****************
  6181 ;; Defined at:
  6182 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  rf              1    wreg     unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  rf              1   74[BANK0 ] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;		None               void
  6189 ;; Registers used:
  6190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;Total ram usage:        3 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:   12
  6203 ;; This function calls:
  6204 ;;		_CC2500_RxData
  6205 ;;		_CC2500_TxData
  6206 ;;		_CC2500_WriteCommand
  6207 ;;		_RF_RxDisable
  6208 ;;		_RfPointSelect
  6209 ;;		_getRxData
  6210 ;;		_setINT_GO
  6211 ;; This function is called by:
  6212 ;;		_RF_Main
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function _setRF_Main
  6218  0A4B                     _setRF_Main:	
  6219                           
  6220                           ;incstack = 0
  6221                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6222                           ;setRF_Main@rf stored from wreg
  6223  0A4B  0020               	movlb	0	; select bank0
  6224  0A4C  00EA               	movwf	setRF_Main@rf
  6225                           
  6226                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  6227  0A4D  086A               	movf	setRF_Main@rf,w
  6228  0A4E  3198  208B  318A   	fcall	_RfPointSelect
  6229                           
  6230                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  6231  0A51  0021               	movlb	1	; select bank1
  6232  0A52  083D               	movf	_RF^(0+128),w
  6233  0A53  0086               	movwf	6
  6234  0A54  0187               	clrf	7
  6235  0A55  1C01               	btfss	1,0
  6236  0A56  0008               	return
  6237                           
  6238                           ;RF_Control_B1.c: 67: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  6239  0A57  0020               	movlb	0	; select bank0
  6240  0A58  01EB               	clrf	_setRF_Main$3978
  6241  0A59  1F0C               	btfss	12,6	;volatile
  6242  0A5A  1A0C               	btfsc	12,4	;volatile
  6243  0A5B  2A60               	goto	l8730
  6244  0A5C  180C               	btfsc	12,0	;volatile
  6245  0A5D  2A60               	goto	l8730
  6246  0A5E  1C8D               	btfss	13,1	;volatile
  6247  0A5F  2A69               	goto	l8734
  6248  0A60                     l8730:	
  6249  0A60  0021               	movlb	1	; select bank1
  6250  0A61  083D               	movf	_RF^(0+128),w
  6251  0A62  0086               	movwf	6
  6252  0A63  0187               	clrf	7
  6253  0A64  1B01               	btfsc	1,6
  6254  0A65  2A69               	goto	l8734
  6255  0A66  0020               	movlb	0	; select bank0
  6256  0A67  01EB               	clrf	_setRF_Main$3978
  6257  0A68  0AEB               	incf	_setRF_Main$3978,f
  6258  0A69                     l8734:	
  6259  0A69  0021               	movlb	1	; select bank1
  6260  0A6A  083D               	movf	_RF^(0+128),w
  6261  0A6B  0086               	movwf	6
  6262  0A6C  0187               	clrf	7
  6263  0A6D  0020               	movlb	0	; select bank0
  6264  0A6E  086B               	movf	_setRF_Main$3978,w
  6265  0A6F  1381               	bcf	1,7
  6266  0A70  1D03               	skipz
  6267  0A71  1781               	bsf	1,7
  6268                           
  6269                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  6270  0A72  0021               	movlb	1	; select bank1
  6271  0A73  083D               	movf	_RF^(0+128),w
  6272  0A74  0086               	movwf	6
  6273  0A75  0187               	clrf	7
  6274  0A76  1B81               	btfsc	1,7
  6275  0A77  2AA5               	goto	l8756
  6276                           
  6277                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  6278  0A78  083D               	movf	_RF^(0+128),w
  6279  0A79  0086               	movwf	6
  6280  0A7A  0187               	clrf	7
  6281  0A7B  1C81               	btfss	1,1
  6282  0A7C  2A89               	goto	l8744
  6283                           
  6284                           ;RF_Control_B1.c: 77: {
  6285                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  6286  0A7D  083D               	movf	_RF^(0+128),w
  6287  0A7E  0086               	movwf	6
  6288  0A7F  0187               	clrf	7
  6289  0A80  1081               	bcf	1,1
  6290                           
  6291                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6292  0A81  3194  2405  318A   	fcall	_CC2500_RxData
  6293                           
  6294                           ;RF_Control_B1.c: 86: getRxData(1);
  6295  0A84  3001               	movlw	1
  6296  0A85  3191  218D  318A   	fcall	_getRxData
  6297                           
  6298                           ;RF_Control_B1.c: 89: } else {
  6299  0A88  2AA9               	goto	l8758
  6300  0A89                     l8744:	
  6301                           
  6302                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  6303  0A89  0021               	movlb	1	; select bank1
  6304  0A8A  083D               	movf	_RF^(0+128),w
  6305  0A8B  0086               	movwf	6
  6306  0A8C  0187               	clrf	7
  6307  0A8D  1901               	btfsc	1,2
  6308  0A8E  2AA9               	goto	l8758
  6309                           
  6310                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  6311  0A8F  083D               	movf	_RF^(0+128),w
  6312  0A90  0086               	movwf	6
  6313  0A91  0187               	clrf	7
  6314  0A92  1981               	btfsc	1,3
  6315  0A93  2AA9               	goto	l8758
  6316                           
  6317                           ;RF_Control_B1.c: 93: {
  6318                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  6319  0A94  083D               	movf	_RF^(0+128),w
  6320  0A95  0086               	movwf	6
  6321  0A96  0187               	clrf	7
  6322  0A97  1581               	bsf	1,3
  6323                           
  6324                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  6325  0A98  3036               	movlw	54
  6326  0A99  3199  2138  318A   	fcall	_CC2500_WriteCommand
  6327                           
  6328                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  6329  0A9C  3034               	movlw	52
  6330  0A9D  3199  2138  318A   	fcall	_CC2500_WriteCommand
  6331                           
  6332                           ;RF_Control_B1.c: 97: setINT_GO(1);
  6333  0AA0  3001               	movlw	1
  6334  0AA1  31A7  27CB  318A   	fcall	_setINT_GO
  6335                           
  6336                           ;RF_Control_B1.c: 98: }
  6337                           ;RF_Control_B1.c: 100: }
  6338                           ;RF_Control_B1.c: 101: }
  6339                           ;RF_Control_B1.c: 102: } else {
  6340  0AA4  2AA9               	goto	l8758
  6341  0AA5                     l8756:	
  6342                           
  6343                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  6344  0AA5  3001               	movlw	1
  6345  0AA6  319C  2496  318A   	fcall	_RF_RxDisable
  6346  0AA9                     l8758:	
  6347                           
  6348                           ;RF_Control_B1.c: 104: }
  6349                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  6350  0AA9  0021               	movlb	1	; select bank1
  6351  0AAA  083D               	movf	_RF^(0+128),w
  6352  0AAB  0086               	movwf	6
  6353  0AAC  0187               	clrf	7
  6354  0AAD  1D01               	btfss	1,2
  6355  0AAE  0008               	return
  6356                           
  6357                           ;RF_Control_B1.c: 106: {
  6358                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  6359  0AAF  3001               	movlw	1
  6360  0AB0  319C  2496  318A   	fcall	_RF_RxDisable
  6361                           
  6362                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  6363  0AB3  0021               	movlb	1	; select bank1
  6364  0AB4  083D               	movf	_RF^(0+128),w
  6365  0AB5  0086               	movwf	6
  6366  0AB6  0187               	clrf	7
  6367  0AB7  1A81               	btfsc	1,5
  6368  0AB8  2AD4               	goto	l8772
  6369                           
  6370                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  6371  0AB9  3001               	movlw	1
  6372  0ABA  0020               	movlb	0	; select bank0
  6373  0ABB  00E9               	movwf	??_setRF_Main
  6374  0ABC  0021               	movlb	1	; select bank1
  6375  0ABD  0A3D               	incf	_RF^(0+128),w
  6376  0ABE  0086               	movwf	6
  6377  0ABF  0187               	clrf	7
  6378  0AC0  0020               	movlb	0	; select bank0
  6379  0AC1  0869               	movf	??_setRF_Main,w
  6380  0AC2  0781               	addwf	1,f
  6381                           
  6382                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  6383  0AC3  0021               	movlb	1	; select bank1
  6384  0AC4  0A3D               	incf	_RF^(0+128),w
  6385  0AC5  0086               	movwf	6
  6386  0AC6  0187               	clrf	7
  6387  0AC7  0801               	movf	1,w
  6388  0AC8  3A19               	xorlw	25
  6389  0AC9  1D03               	skipz
  6390  0ACA  0008               	return
  6391                           
  6392                           ;RF_Control_B1.c: 111: {
  6393                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  6394  0ACB  0A3D               	incf	_RF^(0+128),w
  6395  0ACC  0086               	movwf	6
  6396  0ACD  0187               	clrf	7
  6397  0ACE  0181               	clrf	1
  6398                           
  6399                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  6400  0ACF  083D               	movf	_RF^(0+128),w
  6401  0AD0  0086               	movwf	6
  6402  0AD1  0187               	clrf	7
  6403  0AD2  1681               	bsf	1,5
  6404                           
  6405                           ;RF_Control_B1.c: 114: }
  6406                           ;RF_Control_B1.c: 115: } else {
  6407  0AD3  0008               	return
  6408  0AD4                     l8772:	
  6409                           
  6410                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  6411  0AD4  083D               	movf	_RF^(0+128),w
  6412  0AD5  0086               	movwf	6
  6413  0AD6  0187               	clrf	7
  6414  0AD7  1281               	bcf	1,5
  6415                           
  6416                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  6417  0AD8  083D               	movf	_RF^(0+128),w
  6418  0AD9  0086               	movwf	6
  6419  0ADA  0187               	clrf	7
  6420  0ADB  1101               	bcf	1,2
  6421                           
  6422                           ;RF_Control_B1.c: 118: CC2500_TxData();
  6423  0ADC  3190  2076         	fcall	_CC2500_TxData
  6424  0ADE  0008               	return
  6425  0ADF                     __end_of_setRF_Main:	
  6426                           
  6427                           	psect	text21
  6428  118D                     __ptext21:	
  6429 ;; *************** function _getRxData *****************
  6430 ;; Defined at:
  6431 ;;		line 202 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  rf              1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  rf              1   72[BANK0 ] unsigned char 
  6436 ;;  i               1    0        unsigned char 
  6437 ;; Return value:  Size  Location     Type
  6438 ;;		None               void
  6439 ;; Registers used:
  6440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;Total ram usage:        1 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:   11
  6453 ;; This function calls:
  6454 ;;		_RfPointSelect
  6455 ;;		_setControl_Lights_Table
  6456 ;;		_setLog_Code
  6457 ;; This function is called by:
  6458 ;;		_setRF_Main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _getRxData
  6464  118D                     _getRxData:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6468                           ;getRxData@rf stored from wreg
  6469  118D  0020               	movlb	0	; select bank0
  6470  118E  00E8               	movwf	getRxData@rf
  6471                           
  6472                           ;RF_Control_B1.c: 203: unsigned char i;
  6473                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  6474  118F  0868               	movf	getRxData@rf,w
  6475  1190  3198  208B  3191   	fcall	_RfPointSelect
  6476                           
  6477                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  6478  1193  0021               	movlb	1	; select bank1
  6479  1194  083D               	movf	_RF^(0+128),w
  6480  1195  0086               	movwf	6
  6481  1196  0187               	clrf	7
  6482  1197  1F01               	btfss	1,6
  6483  1198  29A4               	goto	l8380
  6484                           
  6485                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6486  1199  08A0               	movf	_RF_Data^(0+128),f
  6487  119A  1D03               	skipz
  6488  119B  0008               	return
  6489  119C  0821               	movf	(_RF_Data^(0+128)+1),w
  6490  119D  3A64               	xorlw	100
  6491  119E  1D03               	skipz
  6492  119F  0008               	return
  6493                           
  6494                           ;RF_Control_B1.c: 207: {
  6495                           ;RF_Control_B1.c: 208: setLog_Code(1);
  6496  11A0  3001               	movlw	1
  6497  11A1  3191  2145         	fcall	_setLog_Code
  6498                           
  6499                           ;RF_Control_B1.c: 209: }
  6500                           ;RF_Control_B1.c: 210: } else {
  6501  11A3  0008               	return
  6502  11A4                     l8380:	
  6503                           
  6504                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6505  11A4  0021               	movlb	1	; select bank1
  6506  11A5  08A0               	movf	_RF_Data^(0+128),f
  6507  11A6  1D03               	skipz
  6508  11A7  0008               	return
  6509  11A8  0821               	movf	(_RF_Data^(0+128)+1),w
  6510  11A9  3A02               	xorlw	2
  6511  11AA  1D03               	skipz
  6512  11AB  0008               	return
  6513                           
  6514                           ;RF_Control_B1.c: 212: {
  6515                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6516  11AC  082C               	movf	(_RF_Data^(0+128)+12),w
  6517  11AD  3AFF               	xorlw	255
  6518  11AE  1D03               	skipz
  6519  11AF  29BA               	goto	l8392
  6520  11B0  082D               	movf	(_RF_Data^(0+128)+13),w
  6521  11B1  3AFF               	xorlw	255
  6522  11B2  1D03               	skipz
  6523  11B3  29BA               	goto	l8392
  6524  11B4  082E               	movf	(_RF_Data^(0+128)+14),w
  6525  11B5  3AFF               	xorlw	255
  6526  11B6  1D03               	skipz
  6527  11B7  29BA               	goto	l8392
  6528                           
  6529                           ;RF_Control_B1.c: 214: __nop();
  6530  11B8  0000               	nop
  6531                           
  6532                           ;RF_Control_B1.c: 215: } else {
  6533  11B9  0008               	return
  6534  11BA                     l8392:	
  6535                           
  6536                           ;RF_Control_B1.c: 216: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6537  11BA  087D               	movf	_product,w
  6538  11BB  3E0C               	addlw	12
  6539  11BC  0086               	movwf	6
  6540  11BD  3001               	movlw	1	; select bank2/3
  6541  11BE  0087               	movwf	7
  6542  11BF  0021               	movlb	1	; select bank1
  6543  11C0  082C               	movf	(_RF_Data^(0+128)+12),w
  6544  11C1  0601               	xorwf	1,w
  6545  11C2  1D03               	skipz
  6546  11C3  0008               	return
  6547  11C4  087D               	movf	_product,w
  6548  11C5  3E0D               	addlw	13
  6549  11C6  0086               	movwf	6
  6550  11C7  3001               	movlw	1	; select bank2/3
  6551  11C8  0087               	movwf	7
  6552  11C9  082D               	movf	(_RF_Data^(0+128)+13),w
  6553  11CA  0601               	xorwf	1,w
  6554  11CB  1D03               	skipz
  6555  11CC  0008               	return
  6556  11CD  087D               	movf	_product,w
  6557  11CE  3E0E               	addlw	14
  6558  11CF  0086               	movwf	6
  6559  11D0  3001               	movlw	1	; select bank2/3
  6560  11D1  0087               	movwf	7
  6561  11D2  082E               	movf	(_RF_Data^(0+128)+14),w
  6562  11D3  0601               	xorwf	1,w
  6563  11D4  1D03               	skipz
  6564  11D5  0008               	return
  6565                           
  6566                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  6567  11D6  3001               	movlw	1
  6568  11D7  3189  21B9         	fcall	_setControl_Lights_Table
  6569                           
  6570                           ;RF_Control_B1.c: 224: {
  6571                           ;RF_Control_B1.c: 225: ;
  6572                           
  6573                           ;RF_Control_B1.c: 221: {
  6574                           ;RF_Control_B1.c: 222: ;
  6575                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6576                           
  6577                           ;RF_Control_B1.c: 218: }
  6578                           ;RF_Control_B1.c: 219: }
  6579                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6580  11D9  0008               	return
  6581  11DA                     __end_of_getRxData:	
  6582                           
  6583                           	psect	text22
  6584  1145                     __ptext22:	
  6585 ;; *************** function _setLog_Code *****************
  6586 ;; Defined at:
  6587 ;;		line 235 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  rf              1    wreg     unsigned char 
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;  rf              1   11[BANK0 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;		None               void
  6594 ;; Registers used:
  6595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:        2 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    6
  6608 ;; This function calls:
  6609 ;;		_RfPointSelect
  6610 ;;		_setBuz
  6611 ;; This function is called by:
  6612 ;;		_getRxData
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           
  6617                           ;psect for function _setLog_Code
  6618  1145                     _setLog_Code:	
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6622                           ;setLog_Code@rf stored from wreg
  6623  1145  0020               	movlb	0	; select bank0
  6624  1146  00AB               	movwf	setLog_Code@rf
  6625                           
  6626                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  6627  1147  082B               	movf	setLog_Code@rf,w
  6628  1148  3198  208B  3191   	fcall	_RfPointSelect
  6629                           
  6630                           ;RF_Control_B1.c: 237: product->Data[12]=RF_Data[12];
  6631  114B  0021               	movlb	1	; select bank1
  6632  114C  082C               	movf	(_RF_Data^(0+128)+12),w
  6633  114D  0020               	movlb	0	; select bank0
  6634  114E  00AA               	movwf	??_setLog_Code
  6635  114F  087D               	movf	_product,w
  6636  1150  3E0C               	addlw	12
  6637  1151  0086               	movwf	6
  6638  1152  3001               	movlw	1	; select bank2/3
  6639  1153  0087               	movwf	7
  6640  1154  082A               	movf	??_setLog_Code,w
  6641  1155  0081               	movwf	1
  6642                           
  6643                           ;RF_Control_B1.c: 238: product->Data[13]=RF_Data[13];
  6644  1156  0021               	movlb	1	; select bank1
  6645  1157  082D               	movf	(_RF_Data^(0+128)+13),w
  6646  1158  0020               	movlb	0	; select bank0
  6647  1159  00AA               	movwf	??_setLog_Code
  6648  115A  087D               	movf	_product,w
  6649  115B  3E0D               	addlw	13
  6650  115C  0086               	movwf	6
  6651  115D  3001               	movlw	1	; select bank2/3
  6652  115E  0087               	movwf	7
  6653  115F  082A               	movf	??_setLog_Code,w
  6654  1160  0081               	movwf	1
  6655                           
  6656                           ;RF_Control_B1.c: 239: product->Data[14]=RF_Data[14];
  6657  1161  0021               	movlb	1	; select bank1
  6658  1162  082E               	movf	(_RF_Data^(0+128)+14),w
  6659  1163  0020               	movlb	0	; select bank0
  6660  1164  00AA               	movwf	??_setLog_Code
  6661  1165  087D               	movf	_product,w
  6662  1166  3E0E               	addlw	14
  6663  1167  0086               	movwf	6
  6664  1168  3001               	movlw	1	; select bank2/3
  6665  1169  0087               	movwf	7
  6666  116A  082A               	movf	??_setLog_Code,w
  6667  116B  0081               	movwf	1
  6668                           
  6669                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  6670  116C  3064               	movlw	100
  6671  116D  00A6               	movwf	setBuz@time
  6672  116E  3000               	movlw	0
  6673  116F  00A7               	movwf	setBuz@time+1
  6674  1170  3001               	movlw	1
  6675  1171  3188  2017  3191   	fcall	_setBuz
  6676                           
  6677                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  6678  1174  0021               	movlb	1	; select bank1
  6679  1175  083D               	movf	_RF^(0+128),w
  6680  1176  0086               	movwf	6
  6681  1177  0187               	clrf	7
  6682  1178  1301               	bcf	1,6
  6683                           
  6684                           ;RF_Control_B1.c: 242: if (myMain->First) {
  6685  1179  0869               	movf	_myMain^(0+128),w
  6686  117A  3E03               	addlw	3
  6687  117B  0086               	movwf	6
  6688  117C  3001               	movlw	1	; select bank2/3
  6689  117D  0087               	movwf	7
  6690  117E  1C81               	btfss	1,1
  6691  117F  2986               	goto	l2332
  6692                           
  6693                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  6694  1180  0866               	movf	_Memory^(0+128),w
  6695  1181  3E22               	addlw	34
  6696  1182  0086               	movwf	6
  6697  1183  3002               	movlw	2	; select bank4/5
  6698  1184  0087               	movwf	7
  6699  1185  1501               	bsf	1,2
  6700  1186                     l2332:	
  6701                           
  6702                           ;RF_Control_B1.c: 244: }
  6703                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  6704  1186  0866               	movf	_Memory^(0+128),w
  6705  1187  3E22               	addlw	34
  6706  1188  0086               	movwf	6
  6707  1189  3002               	movlw	2	; select bank4/5
  6708  118A  0087               	movwf	7
  6709  118B  1401               	bsf	1,0
  6710  118C  0008               	return
  6711  118D                     __end_of_setLog_Code:	
  6712                           
  6713                           	psect	text23
  6714  09B9                     __ptext23:	
  6715 ;; *************** function _setControl_Lights_Table *****************
  6716 ;; Defined at:
  6717 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  rf              1    wreg     unsigned char 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  rf              1   71[BANK0 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        1 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:   10
  6738 ;; This function calls:
  6739 ;;		_RfPointSelect
  6740 ;;		_setBuz
  6741 ;;		_setDimmerLights
  6742 ;;		_setRFSW_AdjControl
  6743 ;;		_setRFSW_Control
  6744 ;;		_setRFSW_Status
  6745 ;;		_setSw_Status
  6746 ;;		_setTxData
  6747 ;; This function is called by:
  6748 ;;		_getRxData
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _setControl_Lights_Table
  6754  09B9                     _setControl_Lights_Table:	
  6755                           
  6756                           ;incstack = 0
  6757                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6758                           ;setControl_Lights_Table@rf stored from wreg
  6759  09B9  0020               	movlb	0	; select bank0
  6760  09BA  00E7               	movwf	setControl_Lights_Table@rf
  6761                           
  6762                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  6763  09BB  0867               	movf	setControl_Lights_Table@rf,w
  6764  09BC  3198  208B  3189   	fcall	_RfPointSelect
  6765                           
  6766                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  6767  09BF  0021               	movlb	1	; select bank1
  6768  09C0  08AF               	movf	(_RF_Data^(0+128)+15),f
  6769  09C1  1D03               	skipz
  6770  09C2  2A0C               	goto	l8188
  6771                           
  6772                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  6773  09C3  0020               	movlb	0	; select bank0
  6774  09C4  01A4               	clrf	setDimmerLights@status
  6775  09C5  3001               	movlw	1
  6776  09C6  318B  2375  3189   	fcall	_setDimmerLights
  6777                           
  6778                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  6779  09C9  0020               	movlb	0	; select bank0
  6780  09CA  01A2               	clrf	setRFSW_Status@command
  6781  09CB  3001               	movlw	1
  6782  09CC  3198  20FC  3189   	fcall	_setRFSW_Status
  6783                           
  6784                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  6785  09CF  0020               	movlb	0	; select bank0
  6786  09D0  01A2               	clrf	setSw_Status@command
  6787  09D1  3001               	movlw	1
  6788  09D2  3199  210B  3189   	fcall	_setSw_Status
  6789                           
  6790                           ;RF_Control_B1.c: 258: setDimmerLights(2, 0);
  6791  09D5  0020               	movlb	0	; select bank0
  6792  09D6  01A4               	clrf	setDimmerLights@status
  6793  09D7  3002               	movlw	2
  6794  09D8  318B  2375  3189   	fcall	_setDimmerLights
  6795                           
  6796                           ;RF_Control_B1.c: 259: setRFSW_Status(2, 0);
  6797  09DB  0020               	movlb	0	; select bank0
  6798  09DC  01A2               	clrf	setRFSW_Status@command
  6799  09DD  3002               	movlw	2
  6800  09DE  3198  20FC  3189   	fcall	_setRFSW_Status
  6801                           
  6802                           ;RF_Control_B1.c: 260: setSw_Status(2, 0);
  6803  09E1  0020               	movlb	0	; select bank0
  6804  09E2  01A2               	clrf	setSw_Status@command
  6805  09E3  3002               	movlw	2
  6806  09E4  3199  210B  3189   	fcall	_setSw_Status
  6807                           
  6808                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6809  09E7  087D               	movf	_product,w
  6810  09E8  3E09               	addlw	9
  6811  09E9  0086               	movwf	6
  6812  09EA  3001               	movlw	1	; select bank2/3
  6813  09EB  0087               	movwf	7
  6814  09EC  0181               	clrf	1
  6815                           
  6816                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6817  09ED  087D               	movf	_product,w
  6818  09EE  3E0B               	addlw	11
  6819  09EF  0086               	movwf	6
  6820  09F0  3001               	movlw	1	; select bank2/3
  6821  09F1  0087               	movwf	7
  6822  09F2  0181               	clrf	1
  6823                           
  6824                           ;RF_Control_B1.c: 270: product->Data[15]=0;
  6825  09F3  087D               	movf	_product,w
  6826  09F4  3E0F               	addlw	15
  6827  09F5  0086               	movwf	6
  6828  09F6  3001               	movlw	1	; select bank2/3
  6829  09F7  0087               	movwf	7
  6830  09F8  0181               	clrf	1
  6831                           
  6832                           ;RF_Control_B1.c: 271: product->Data[17]=0;
  6833  09F9  087D               	movf	_product,w
  6834  09FA  3E11               	addlw	17
  6835  09FB  0086               	movwf	6
  6836  09FC  3001               	movlw	1	; select bank2/3
  6837  09FD  0087               	movwf	7
  6838  09FE  0181               	clrf	1
  6839                           
  6840                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  6841  09FF  3064               	movlw	100
  6842  0A00  0020               	movlb	0	; select bank0
  6843  0A01  00A6               	movwf	setBuz@time
  6844  0A02  3000               	movlw	0
  6845  0A03  00A7               	movwf	setBuz@time+1
  6846  0A04  3001               	movlw	1
  6847  0A05  3188  2017  3189   	fcall	_setBuz
  6848                           
  6849                           ;RF_Control_B1.c: 273: setTxData(1);
  6850  0A08  3001               	movlw	1
  6851  0A09  318C  240F         	fcall	_setTxData
  6852                           
  6853                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  6854  0A0B  0008               	return
  6855  0A0C                     l8188:	
  6856  0A0C  0021               	movlb	1	; select bank1
  6857  0A0D  082F               	movf	(_RF_Data^(0+128)+15),w
  6858  0A0E  3A20               	xorlw	32
  6859  0A0F  1D03               	skipz
  6860  0A10  2A27               	goto	l8194
  6861                           
  6862                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6863  0A11  087D               	movf	_product,w
  6864  0A12  3E09               	addlw	9
  6865  0A13  0086               	movwf	6
  6866  0A14  3001               	movlw	1	; select bank2/3
  6867  0A15  0087               	movwf	7
  6868  0A16  0181               	clrf	1
  6869                           
  6870                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6871  0A17  087D               	movf	_product,w
  6872  0A18  3E0B               	addlw	11
  6873  0A19  0086               	movwf	6
  6874  0A1A  3001               	movlw	1	; select bank2/3
  6875  0A1B  0087               	movwf	7
  6876  0A1C  0181               	clrf	1
  6877                           
  6878                           ;RF_Control_B1.c: 277: product->Data[17]=0;
  6879  0A1D  087D               	movf	_product,w
  6880  0A1E  3E11               	addlw	17
  6881  0A1F  0086               	movwf	6
  6882  0A20  3001               	movlw	1	; select bank2/3
  6883  0A21  0087               	movwf	7
  6884  0A22  0181               	clrf	1
  6885                           
  6886                           ;RF_Control_B1.c: 278: setTxData(1);
  6887  0A23  3001               	movlw	1
  6888  0A24  318C  240F         	fcall	_setTxData
  6889                           
  6890                           ;RF_Control_B1.c: 279: }
  6891  0A26  0008               	return
  6892  0A27                     l8194:	
  6893                           
  6894                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  6895  0A27  0021               	movlb	1	; select bank1
  6896  0A28  082F               	movf	(_RF_Data^(0+128)+15),w
  6897  0A29  3A01               	xorlw	1
  6898  0A2A  1D03               	skipz
  6899  0A2B  2A30               	goto	l8198
  6900                           
  6901                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  6902  0A2C  3001               	movlw	1
  6903  0A2D  3189  2129         	fcall	_setRFSW_Control
  6904                           
  6905                           ;RF_Control_B1.c: 283: }
  6906  0A2F  0008               	return
  6907  0A30                     l8198:	
  6908                           
  6909                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  6910  0A30  0021               	movlb	1	; select bank1
  6911  0A31  082F               	movf	(_RF_Data^(0+128)+15),w
  6912  0A32  3A11               	xorlw	17
  6913  0A33  1D03               	skipz
  6914  0A34  2A39               	goto	l8202
  6915                           
  6916                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  6917  0A35  3001               	movlw	1
  6918  0A36  319F  273B         	fcall	_setRFSW_AdjControl
  6919                           
  6920                           ;RF_Control_B1.c: 287: }
  6921  0A38  0008               	return
  6922  0A39                     l8202:	
  6923                           
  6924                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x02) {
  6925  0A39  0021               	movlb	1	; select bank1
  6926  0A3A  082F               	movf	(_RF_Data^(0+128)+15),w
  6927  0A3B  3A02               	xorlw	2
  6928  0A3C  1D03               	skipz
  6929  0A3D  2A42               	goto	l8206
  6930                           
  6931                           ;RF_Control_B1.c: 293: setRFSW_Control(2);
  6932  0A3E  3002               	movlw	2
  6933  0A3F  3189  2129         	fcall	_setRFSW_Control
  6934                           
  6935                           ;RF_Control_B1.c: 294: }
  6936  0A41  0008               	return
  6937  0A42                     l8206:	
  6938                           
  6939                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x21) {
  6940  0A42  0021               	movlb	1	; select bank1
  6941  0A43  082F               	movf	(_RF_Data^(0+128)+15),w
  6942  0A44  3A21               	xorlw	33
  6943  0A45  1D03               	skipz
  6944  0A46  0008               	return
  6945                           
  6946                           ;RF_Control_B1.c: 297: setRFSW_AdjControl(2);
  6947  0A47  3002               	movlw	2
  6948  0A48  319F  273B         	fcall	_setRFSW_AdjControl
  6949  0A4A  0008               	return
  6950  0A4B                     __end_of_setControl_Lights_Table:	
  6951                           
  6952                           	psect	text24
  6953  0929                     __ptext24:	
  6954 ;; *************** function _setRFSW_Control *****************
  6955 ;; Defined at:
  6956 ;;		line 334 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  sw              1    wreg     unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  sw              1   67[BANK0 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;		None               void
  6963 ;; Registers used:
  6964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        2 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    8
  6977 ;; This function calls:
  6978 ;;		_RfSWPointSelect
  6979 ;;		_setBuz
  6980 ;;		_setDelayOff_GO
  6981 ;;		_setDimmerLights_Switch
  6982 ;;		_setDimmerLights_Trigger
  6983 ;;		_setRF_DimmerLights
  6984 ;;		_setSw_Status
  6985 ;;		_setTxData
  6986 ;; This function is called by:
  6987 ;;		_setControl_Lights_Table
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _setRFSW_Control
  6993  0929                     _setRFSW_Control:	
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6997                           ;setRFSW_Control@sw stored from wreg
  6998  0929  0020               	movlb	0	; select bank0
  6999  092A  00E3               	movwf	setRFSW_Control@sw
  7000                           
  7001                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  7002  092B  0863               	movf	setRFSW_Control@sw,w
  7003  092C  319A  2249  3189   	fcall	_RfSWPointSelect
  7004                           
  7005                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  7006  092F  0021               	movlb	1	; select bank1
  7007  0930  083E               	movf	_RFSW^(0+128),w
  7008  0931  0086               	movwf	6
  7009  0932  0187               	clrf	7
  7010  0933  1801               	btfsc	1,0
  7011  0934  296A               	goto	l8088
  7012                           
  7013                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  7014  0935  0830               	movf	(_RF_Data^(0+128)+16),w
  7015  0936  3A80               	xorlw	128
  7016  0937  1D03               	skipz
  7017  0938  2946               	goto	l8078
  7018                           
  7019                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  7020  0939  0020               	movlb	0	; select bank0
  7021  093A  01A3               	clrf	setDelayOff_GO@command
  7022  093B  0AA3               	incf	setDelayOff_GO@command,f
  7023  093C  0021               	movlb	1	; select bank1
  7024  093D  0831               	movf	(_RF_Data^(0+128)+17),w
  7025  093E  0020               	movlb	0	; select bank0
  7026  093F  00E2               	movwf	??_setRFSW_Control
  7027  0940  0862               	movf	??_setRFSW_Control,w
  7028  0941  00A4               	movwf	setDelayOff_GO@value
  7029  0942  0863               	movf	setRFSW_Control@sw,w
  7030  0943  3192  228C  3189   	fcall	_setDelayOff_GO
  7031  0946                     l8078:	
  7032                           
  7033                           ;RF_Control_B1.c: 339: }
  7034                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  7035  0946  0021               	movlb	1	; select bank1
  7036  0947  083E               	movf	_RFSW^(0+128),w
  7037  0948  0086               	movwf	6
  7038  0949  0187               	clrf	7
  7039  094A  1401               	bsf	1,0
  7040                           
  7041                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  7042  094B  0020               	movlb	0	; select bank0
  7043  094C  01A2               	clrf	setSw_Status@command
  7044  094D  0AA2               	incf	setSw_Status@command,f
  7045  094E  0863               	movf	setRFSW_Control@sw,w
  7046  094F  3199  210B  3189   	fcall	_setSw_Status
  7047                           
  7048                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  7049  0952  0020               	movlb	0	; select bank0
  7050  0953  01A2               	clrf	setDimmerLights_Trigger@command
  7051  0954  0AA2               	incf	setDimmerLights_Trigger@command,f
  7052  0955  0863               	movf	setRFSW_Control@sw,w
  7053  0956  3199  2158  3189   	fcall	_setDimmerLights_Trigger
  7054                           
  7055                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  7056  0959  0020               	movlb	0	; select bank0
  7057  095A  01A2               	clrf	setDimmerLights_Switch@command
  7058  095B  0AA2               	incf	setDimmerLights_Switch@command,f
  7059  095C  0863               	movf	setRFSW_Control@sw,w
  7060  095D  3199  2148  3189   	fcall	_setDimmerLights_Switch
  7061                           
  7062                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  7063  0960  0021               	movlb	1	; select bank1
  7064  0961  083E               	movf	_RFSW^(0+128),w
  7065  0962  0086               	movwf	6
  7066  0963  0187               	clrf	7
  7067  0964  3000               	movlw	0
  7068  0965  1801               	btfsc	1,0
  7069  0966  3001               	movlw	1
  7070  0967  0020               	movlb	0	; select bank0
  7071  0968  00DD               	movwf	setRF_DimmerLights@on
  7072  0969  29A8               	goto	L5
  7073  096A                     l8088:	
  7074                           ;RF_Control_B1.c: 347: } else {
  7075                           
  7076                           
  7077                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  7078  096A  0021               	movlb	1	; select bank1
  7079  096B  0830               	movf	(_RF_Data^(0+128)+16),w
  7080  096C  3A80               	xorlw	128
  7081  096D  1D03               	skipz
  7082  096E  2980               	goto	l8094
  7083                           
  7084                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  7085  096F  0020               	movlb	0	; select bank0
  7086  0970  01A3               	clrf	setDelayOff_GO@command
  7087  0971  0AA3               	incf	setDelayOff_GO@command,f
  7088  0972  0021               	movlb	1	; select bank1
  7089  0973  0831               	movf	(_RF_Data^(0+128)+17),w
  7090  0974  0020               	movlb	0	; select bank0
  7091  0975  00E2               	movwf	??_setRFSW_Control
  7092  0976  0862               	movf	??_setRFSW_Control,w
  7093  0977  00A4               	movwf	setDelayOff_GO@value
  7094  0978  0863               	movf	setRFSW_Control@sw,w
  7095  0979  3192  228C  3189   	fcall	_setDelayOff_GO
  7096                           
  7097                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  7098  097C  0020               	movlb	0	; select bank0
  7099  097D  01DD               	clrf	setRF_DimmerLights@on
  7100  097E  0ADD               	incf	setRF_DimmerLights@on,f
  7101  097F  29A8               	goto	L5
  7102  0980                     l8094:	
  7103                           ;RF_Control_B1.c: 351: } else {
  7104                           
  7105                           
  7106                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  7107  0980  0021               	movlb	1	; select bank1
  7108  0981  083E               	movf	_RFSW^(0+128),w
  7109  0982  0086               	movwf	6
  7110  0983  0187               	clrf	7
  7111  0984  1001               	bcf	1,0
  7112                           
  7113                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  7114  0985  0020               	movlb	0	; select bank0
  7115  0986  01A2               	clrf	setSw_Status@command
  7116  0987  0863               	movf	setRFSW_Control@sw,w
  7117  0988  3199  210B  3189   	fcall	_setSw_Status
  7118                           
  7119                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  7120  098B  0020               	movlb	0	; select bank0
  7121  098C  01A2               	clrf	setDimmerLights_Trigger@command
  7122  098D  0AA2               	incf	setDimmerLights_Trigger@command,f
  7123  098E  0863               	movf	setRFSW_Control@sw,w
  7124  098F  3199  2158  3189   	fcall	_setDimmerLights_Trigger
  7125                           
  7126                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  7127  0992  0021               	movlb	1	; select bank1
  7128  0993  083E               	movf	_RFSW^(0+128),w
  7129  0994  0086               	movwf	6
  7130  0995  0187               	clrf	7
  7131  0996  3000               	movlw	0
  7132  0997  1801               	btfsc	1,0
  7133  0998  3001               	movlw	1
  7134  0999  0020               	movlb	0	; select bank0
  7135  099A  00A2               	movwf	setDimmerLights_Switch@command
  7136  099B  0863               	movf	setRFSW_Control@sw,w
  7137  099C  3199  2148  3189   	fcall	_setDimmerLights_Switch
  7138                           
  7139                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  7140  099F  0020               	movlb	0	; select bank0
  7141  09A0  01A3               	clrf	setDelayOff_GO@command
  7142  09A1  01A4               	clrf	setDelayOff_GO@value
  7143  09A2  0863               	movf	setRFSW_Control@sw,w
  7144  09A3  3192  228C  3189   	fcall	_setDelayOff_GO
  7145                           
  7146                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  7147  09A6  0020               	movlb	0	; select bank0
  7148  09A7  01DD               	clrf	setRF_DimmerLights@on
  7149  09A8                     L5:	
  7150  09A8  0863               	movf	setRFSW_Control@sw,w
  7151  09A9  3194  24CE  3189   	fcall	_setRF_DimmerLights
  7152                           
  7153                           ;RF_Control_B1.c: 360: }
  7154                           ;RF_Control_B1.c: 361: }
  7155                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  7156  09AC  3064               	movlw	100
  7157  09AD  0020               	movlb	0	; select bank0
  7158  09AE  00A6               	movwf	setBuz@time
  7159  09AF  3000               	movlw	0
  7160  09B0  00A7               	movwf	setBuz@time+1
  7161  09B1  3001               	movlw	1
  7162  09B2  3188  2017  3189   	fcall	_setBuz
  7163                           
  7164                           ;RF_Control_B1.c: 363: setTxData(1);
  7165  09B5  3001               	movlw	1
  7166  09B6  318C  240F         	fcall	_setTxData
  7167  09B8  0008               	return
  7168  09B9                     __end_of_setRFSW_Control:	
  7169                           
  7170                           	psect	text25
  7171  128C                     __ptext25:	
  7172 ;; *************** function _setDelayOff_GO *****************
  7173 ;; Defined at:
  7174 ;;		line 85 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  sw              1    wreg     unsigned char 
  7177 ;;  command         1    3[BANK0 ] unsigned char 
  7178 ;;  value           1    4[BANK0 ] unsigned char 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  sw              1    7[BANK0 ] unsigned char 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;		None               void
  7183 ;; Registers used:
  7184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;Total ram usage:        5 bytes
  7195 ;; Hardware stack levels used:    1
  7196 ;; Hardware stack levels required when called:    5
  7197 ;; This function calls:
  7198 ;;		_DelayOffPointSelect
  7199 ;;		_DelayTimejudge
  7200 ;; This function is called by:
  7201 ;;		_setRFSW_Control
  7202 ;;		_Sw_DimmerOffFunc
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           
  7207                           ;psect for function _setDelayOff_GO
  7208  128C                     _setDelayOff_GO:	
  7209                           
  7210                           ;incstack = 0
  7211                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7212                           ;setDelayOff_GO@sw stored from wreg
  7213  128C  0020               	movlb	0	; select bank0
  7214  128D  00A7               	movwf	setDelayOff_GO@sw
  7215                           
  7216                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  7217  128E  0827               	movf	setDelayOff_GO@sw,w
  7218  128F  3188  2000  3192   	fcall	_DelayOffPointSelect
  7219                           
  7220                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  7221  1292  0021               	movlb	1	; select bank1
  7222  1293  0839               	movf	_DelayOff^(0+128),w
  7223  1294  0086               	movwf	6
  7224  1295  0187               	clrf	7
  7225  1296  1C01               	btfss	1,0
  7226  1297  0008               	return
  7227                           
  7228                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  7229  1298  0839               	movf	_DelayOff^(0+128),w
  7230  1299  0086               	movwf	6
  7231  129A  0187               	clrf	7
  7232  129B  0020               	movlb	0	; select bank0
  7233  129C  0823               	movf	setDelayOff_GO@command,w
  7234  129D  1081               	bcf	1,1
  7235  129E  1D03               	skipz
  7236  129F  1481               	bsf	1,1
  7237                           
  7238                           ;DelayOff_B1.c: 89: if (command) {
  7239  12A0  0823               	movf	setDelayOff_GO@command,w
  7240  12A1  1903               	btfsc	3,2
  7241  12A2  2ACE               	goto	l6028
  7242                           
  7243                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  7244  12A3  0824               	movf	setDelayOff_GO@value,w
  7245  12A4  319D  253F  3192   	fcall	_DelayTimejudge
  7246  12A7  0020               	movlb	0	; select bank0
  7247  12A8  00A5               	movwf	??_setDelayOff_GO
  7248  12A9  0021               	movlb	1	; select bank1
  7249  12AA  0A39               	incf	_DelayOff^(0+128),w
  7250  12AB  0086               	movwf	6
  7251  12AC  0187               	clrf	7
  7252  12AD  0020               	movlb	0	; select bank0
  7253  12AE  0825               	movf	??_setDelayOff_GO,w
  7254  12AF  0081               	movwf	1
  7255                           
  7256                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  7257  12B0  300F               	movlw	15
  7258  12B1  0524               	andwf	setDelayOff_GO@value,w
  7259  12B2  00A5               	movwf	??_setDelayOff_GO
  7260  12B3  0825               	movf	??_setDelayOff_GO,w
  7261  12B4  3A05               	xorlw	5
  7262  12B5  1903               	skipnz
  7263  12B6  2ABB               	goto	l6022
  7264  12B7  0824               	movf	setDelayOff_GO@value,w
  7265  12B8  390F               	andlw	15
  7266  12B9  1D03               	btfss	3,2
  7267  12BA  2AC1               	goto	l6026
  7268  12BB                     l6022:	
  7269  12BB  3026               	movlw	38
  7270  12BC  0224               	subwf	setDelayOff_GO@value,w
  7271  12BD  1803               	skipnc
  7272  12BE  2AC1               	goto	l6026
  7273                           
  7274                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  7275  12BF  0824               	movf	setDelayOff_GO@value,w
  7276  12C0  2AC2               	goto	L6
  7277  12C1                     l6026:	
  7278                           ;DelayOff_B1.c: 93: } else {
  7279                           
  7280                           
  7281                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  7282  12C1  3005               	movlw	5
  7283  12C2                     L6:	
  7284  12C2  00A5               	movwf	??_setDelayOff_GO
  7285  12C3  0827               	movf	setDelayOff_GO@sw,w
  7286  12C4  3E1A               	addlw	26
  7287  12C5  077D               	addwf	_product,w
  7288  12C6  00A6               	movwf	??_setDelayOff_GO+1
  7289  12C7  0826               	movf	??_setDelayOff_GO+1,w
  7290  12C8  0086               	movwf	6
  7291  12C9  3001               	movlw	1	; select bank2/3
  7292  12CA  0087               	movwf	7
  7293  12CB  0825               	movf	??_setDelayOff_GO,w
  7294  12CC  0081               	movwf	1
  7295                           
  7296                           ;DelayOff_B1.c: 95: }
  7297                           ;DelayOff_B1.c: 96: } else if (!command) {
  7298  12CD  2ADA               	goto	l6032
  7299  12CE                     l6028:	
  7300  12CE  08A3               	movf	setDelayOff_GO@command,f
  7301  12CF  1D03               	skipz
  7302  12D0  2ADA               	goto	l6032
  7303                           
  7304                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  7305  12D1  0827               	movf	setDelayOff_GO@sw,w
  7306  12D2  3E1A               	addlw	26
  7307  12D3  077D               	addwf	_product,w
  7308  12D4  00A5               	movwf	??_setDelayOff_GO
  7309  12D5  0825               	movf	??_setDelayOff_GO,w
  7310  12D6  0086               	movwf	6
  7311  12D7  3001               	movlw	1	; select bank2/3
  7312  12D8  0087               	movwf	7
  7313  12D9  0181               	clrf	1
  7314  12DA                     l6032:	
  7315                           
  7316                           ;DelayOff_B1.c: 98: }
  7317                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  7318  12DA  0021               	movlb	1	; select bank1
  7319  12DB  0839               	movf	_DelayOff^(0+128),w
  7320  12DC  3E02               	addlw	2
  7321  12DD  0086               	movwf	6
  7322  12DE  0187               	clrf	7
  7323  12DF  3000               	movlw	0
  7324  12E0  3FC0               	movwi [0]fsr1
  7325  12E1  3FC1               	movwi [1]fsr1
  7326                           
  7327                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  7328  12E2  0839               	movf	_DelayOff^(0+128),w
  7329  12E3  3E04               	addlw	4
  7330  12E4  0086               	movwf	6
  7331  12E5  0187               	clrf	7
  7332  12E6  0181               	clrf	1
  7333  12E7  0008               	return
  7334  12E8                     __end_of_setDelayOff_GO:	
  7335                           
  7336                           	psect	text26
  7337  1D3F                     __ptext26:	
  7338 ;; *************** function _DelayTimejudge *****************
  7339 ;; Defined at:
  7340 ;;		line 105 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  value           1    wreg     unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  value           1    1[BANK0 ] unsigned char 
  7345 ;;  i               1    2[BANK0 ] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      unsigned char 
  7348 ;; Registers used:
  7349 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        3 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    4
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_setDelayOff_GO
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _DelayTimejudge
  7371  1D3F                     _DelayTimejudge:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7375                           ;DelayTimejudge@value stored from wreg
  7376  1D3F  0020               	movlb	0	; select bank0
  7377  1D40  00A1               	movwf	DelayTimejudge@value
  7378                           
  7379                           ;DelayOff_B1.c: 106: char i = 5;
  7380  1D41  3005               	movlw	5
  7381  1D42  00A0               	movwf	??_DelayTimejudge
  7382  1D43  0820               	movf	??_DelayTimejudge,w
  7383  1D44  00A2               	movwf	DelayTimejudge@i
  7384                           
  7385                           ;DelayOff_B1.c: 107: switch (value) {
  7386  1D45  2D55               	goto	l5888
  7387  1D46                     l5874:	
  7388                           ;DelayOff_B1.c: 108: case 0x05:
  7389                           
  7390                           
  7391                           ;DelayOff_B1.c: 109: i = 5;
  7392  1D46  3005               	movlw	5
  7393  1D47  2D51               	goto	L11
  7394  1D48                     l5876:	
  7395                           ;DelayOff_B1.c: 111: case 0x10:
  7396                           
  7397                           ;DelayOff_B1.c: 110: break;
  7398                           
  7399                           
  7400                           ;DelayOff_B1.c: 112: i = 10;
  7401  1D48  300A               	movlw	10
  7402  1D49  2D51               	goto	L11
  7403  1D4A                     l5878:	
  7404                           ;DelayOff_B1.c: 114: case 0x15:
  7405                           
  7406                           ;DelayOff_B1.c: 113: break;
  7407                           
  7408                           
  7409                           ;DelayOff_B1.c: 115: i = 15;
  7410  1D4A  300F               	movlw	15
  7411  1D4B  2D51               	goto	L11
  7412  1D4C                     l5880:	
  7413                           ;DelayOff_B1.c: 117: case 0x20:
  7414                           
  7415                           ;DelayOff_B1.c: 116: break;
  7416                           
  7417                           
  7418                           ;DelayOff_B1.c: 118: i = 20;
  7419  1D4C  3014               	movlw	20
  7420  1D4D  2D51               	goto	L11
  7421  1D4E                     l5882:	
  7422                           ;DelayOff_B1.c: 120: case 0x25:
  7423                           
  7424                           ;DelayOff_B1.c: 119: break;
  7425                           
  7426                           
  7427                           ;DelayOff_B1.c: 121: i = 25;
  7428  1D4E  3019               	movlw	25
  7429  1D4F  2D51               	goto	L11
  7430  1D50                     l5884:	
  7431                           ;DelayOff_B1.c: 123: case 0x30:
  7432                           
  7433                           ;DelayOff_B1.c: 122: break;
  7434                           
  7435                           
  7436                           ;DelayOff_B1.c: 124: i = 30;
  7437  1D50  301E               	movlw	30
  7438  1D51                     L11:	
  7439  1D51  00A0               	movwf	??_DelayTimejudge
  7440  1D52  0820               	movf	??_DelayTimejudge,w
  7441  1D53  00A2               	movwf	DelayTimejudge@i
  7442                           
  7443                           ;DelayOff_B1.c: 126: }
  7444                           
  7445                           ;DelayOff_B1.c: 125: break;
  7446  1D54  2D69               	goto	l5890
  7447  1D55                     l5888:	
  7448  1D55  0821               	movf	DelayTimejudge@value,w
  7449                           
  7450                           ; Switch size 1, requested type "space"
  7451                           ; Number of cases is 6, Range of values is 5 to 48
  7452                           ; switch strategies available:
  7453                           ; Name         Instructions Cycles
  7454                           ; simple_byte           19    10 (average)
  7455                           ; direct_byte           97     9 (fixed)
  7456                           ; jumptable            263     9 (fixed)
  7457                           ;	Chosen strategy is simple_byte
  7458  1D56  3A05               	xorlw	5	; case 5
  7459  1D57  1903               	skipnz
  7460  1D58  2D46               	goto	l5874
  7461  1D59  3A15               	xorlw	21	; case 16
  7462  1D5A  1903               	skipnz
  7463  1D5B  2D48               	goto	l5876
  7464  1D5C  3A05               	xorlw	5	; case 21
  7465  1D5D  1903               	skipnz
  7466  1D5E  2D4A               	goto	l5878
  7467  1D5F  3A35               	xorlw	53	; case 32
  7468  1D60  1903               	skipnz
  7469  1D61  2D4C               	goto	l5880
  7470  1D62  3A05               	xorlw	5	; case 37
  7471  1D63  1903               	skipnz
  7472  1D64  2D4E               	goto	l5882
  7473  1D65  3A15               	xorlw	21	; case 48
  7474  1D66  1903               	skipnz
  7475  1D67  2D50               	goto	l5884
  7476  1D68  2D69               	goto	l5890
  7477  1D69                     l5890:	
  7478                           
  7479                           ;DelayOff_B1.c: 127: return i;
  7480  1D69  0822               	movf	DelayTimejudge@i,w
  7481  1D6A  0008               	return
  7482  1D6B                     __end_of_DelayTimejudge:	
  7483                           
  7484                           	psect	text27
  7485  1F3B                     __ptext27:	
  7486 ;; *************** function _setRFSW_AdjControl *****************
  7487 ;; Defined at:
  7488 ;;		line 367 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  sw              1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  sw              1   70[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;Total ram usage:        3 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    9
  7509 ;; This function calls:
  7510 ;;		_RfSWPointSelect
  7511 ;;		_setRF_DimmerValue
  7512 ;;		_setTxData
  7513 ;; This function is called by:
  7514 ;;		_setControl_Lights_Table
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           
  7519                           ;psect for function _setRFSW_AdjControl
  7520  1F3B                     _setRFSW_AdjControl:	
  7521                           
  7522                           ;incstack = 0
  7523                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7524                           ;setRFSW_AdjControl@sw stored from wreg
  7525  1F3B  0020               	movlb	0	; select bank0
  7526  1F3C  00E6               	movwf	setRFSW_AdjControl@sw
  7527                           
  7528                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  7529  1F3D  0866               	movf	setRFSW_AdjControl@sw,w
  7530  1F3E  319A  2249  319F   	fcall	_RfSWPointSelect
  7531                           
  7532                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  7533  1F41  0021               	movlb	1	; select bank1
  7534  1F42  083E               	movf	_RFSW^(0+128),w
  7535  1F43  0086               	movwf	6
  7536  1F44  0187               	clrf	7
  7537  1F45  1C01               	btfss	1,0
  7538  1F46  2F53               	goto	l6248
  7539                           
  7540                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  7541  1F47  0866               	movf	_Memory^(0+128),w
  7542  1F48  3E22               	addlw	34
  7543  1F49  0086               	movwf	6
  7544  1F4A  3002               	movlw	2	; select bank4/5
  7545  1F4B  0087               	movwf	7
  7546  1F4C  1401               	bsf	1,0
  7547                           
  7548                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  7549  1F4D  0020               	movlb	0	; select bank0
  7550  1F4E  0866               	movf	setRFSW_AdjControl@sw,w
  7551  1F4F  319E  268F  319F   	fcall	_setRF_DimmerValue
  7552                           
  7553                           ;RF_Control_B1.c: 372: } else {
  7554  1F52  2F65               	goto	l2364
  7555  1F53                     l6248:	
  7556                           
  7557                           ;RF_Control_B1.c: 373: product->Data[9]=product->Data[20 + sw];
  7558  1F53  0020               	movlb	0	; select bank0
  7559  1F54  0866               	movf	setRFSW_AdjControl@sw,w
  7560  1F55  3E14               	addlw	20
  7561  1F56  077D               	addwf	_product,w
  7562  1F57  00E4               	movwf	??_setRFSW_AdjControl
  7563  1F58  0864               	movf	??_setRFSW_AdjControl,w
  7564  1F59  0086               	movwf	6
  7565  1F5A  3001               	movlw	1	; select bank2/3
  7566  1F5B  0087               	movwf	7
  7567  1F5C  0801               	movf	1,w
  7568  1F5D  00E5               	movwf	??_setRFSW_AdjControl+1
  7569  1F5E  087D               	movf	_product,w
  7570  1F5F  3E09               	addlw	9
  7571  1F60  0086               	movwf	6
  7572  1F61  3001               	movlw	1	; select bank2/3
  7573  1F62  0087               	movwf	7
  7574  1F63  0865               	movf	??_setRFSW_AdjControl+1,w
  7575  1F64  0081               	movwf	1
  7576  1F65                     l2364:	
  7577                           
  7578                           ;RF_Control_B1.c: 374: }
  7579                           ;RF_Control_B1.c: 375: product->Data[17]=product->Data[26 + sw];
  7580  1F65  0020               	movlb	0	; select bank0
  7581  1F66  0866               	movf	setRFSW_AdjControl@sw,w
  7582  1F67  3E1A               	addlw	26
  7583  1F68  077D               	addwf	_product,w
  7584  1F69  00E4               	movwf	??_setRFSW_AdjControl
  7585  1F6A  0864               	movf	??_setRFSW_AdjControl,w
  7586  1F6B  0086               	movwf	6
  7587  1F6C  3001               	movlw	1	; select bank2/3
  7588  1F6D  0087               	movwf	7
  7589  1F6E  0801               	movf	1,w
  7590  1F6F  00E5               	movwf	??_setRFSW_AdjControl+1
  7591  1F70  087D               	movf	_product,w
  7592  1F71  3E11               	addlw	17
  7593  1F72  0086               	movwf	6
  7594  1F73  3001               	movlw	1	; select bank2/3
  7595  1F74  0087               	movwf	7
  7596  1F75  0865               	movf	??_setRFSW_AdjControl+1,w
  7597  1F76  0081               	movwf	1
  7598                           
  7599                           ;RF_Control_B1.c: 376: setTxData(1);
  7600  1F77  3001               	movlw	1
  7601  1F78  318C  240F         	fcall	_setTxData
  7602  1F7A  0008               	return
  7603  1F7B                     __end_of_setRFSW_AdjControl:	
  7604                           
  7605                           	psect	text28
  7606  1E8F                     __ptext28:	
  7607 ;; *************** function _setRF_DimmerValue *****************
  7608 ;; Defined at:
  7609 ;;		line 387 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  lights          1    wreg     unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  lights          1   67[BANK0 ] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;		None               void
  7616 ;; Registers used:
  7617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;Total ram usage:        3 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    8
  7630 ;; This function calls:
  7631 ;;		_setDimmerLights_AdjRF
  7632 ;; This function is called by:
  7633 ;;		_setRFSW_AdjControl
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function _setRF_DimmerValue
  7639  1E8F                     _setRF_DimmerValue:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7643                           ;setRF_DimmerValue@lights stored from wreg
  7644  1E8F  0020               	movlb	0	; select bank0
  7645  1E90  00E3               	movwf	setRF_DimmerValue@lights
  7646                           
  7647                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  7648  1E91  3065               	movlw	101
  7649  1E92  0021               	movlb	1	; select bank1
  7650  1E93  0229               	subwf	(_RF_Data^(0+128)+9),w
  7651  1E94  1C03               	skipc
  7652  1E95  2E9C               	goto	l6112
  7653                           
  7654                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  7655  1E96  3064               	movlw	100
  7656  1E97  0020               	movlb	0	; select bank0
  7657  1E98  00E1               	movwf	??_setRF_DimmerValue
  7658  1E99  0861               	movf	??_setRF_DimmerValue,w
  7659  1E9A  0021               	movlb	1	; select bank1
  7660  1E9B  00A9               	movwf	(_RF_Data^(0+128)+9)
  7661  1E9C                     l6112:	
  7662                           
  7663                           ;RF_Control_B1.c: 390: }
  7664                           ;RF_Control_B1.c: 391: product->Data[9]=RF_Data[9];
  7665  1E9C  0829               	movf	(_RF_Data^(0+128)+9),w
  7666  1E9D  0020               	movlb	0	; select bank0
  7667  1E9E  00E1               	movwf	??_setRF_DimmerValue
  7668  1E9F  087D               	movf	_product,w
  7669  1EA0  3E09               	addlw	9
  7670  1EA1  0086               	movwf	6
  7671  1EA2  3001               	movlw	1	; select bank2/3
  7672  1EA3  0087               	movwf	7
  7673  1EA4  0861               	movf	??_setRF_DimmerValue,w
  7674  1EA5  0081               	movwf	1
  7675                           
  7676                           ;RF_Control_B1.c: 392: product->Data[11]=lights;
  7677  1EA6  0863               	movf	setRF_DimmerValue@lights,w
  7678  1EA7  00E1               	movwf	??_setRF_DimmerValue
  7679  1EA8  087D               	movf	_product,w
  7680  1EA9  3E0B               	addlw	11
  7681  1EAA  0086               	movwf	6
  7682  1EAB  3001               	movlw	1	; select bank2/3
  7683  1EAC  0087               	movwf	7
  7684  1EAD  0861               	movf	??_setRF_DimmerValue,w
  7685  1EAE  0081               	movwf	1
  7686                           
  7687                           ;RF_Control_B1.c: 393: product->Data[(20 + lights)]=product->Data[9];
  7688  1EAF  087D               	movf	_product,w
  7689  1EB0  3E09               	addlw	9
  7690  1EB1  0086               	movwf	6
  7691  1EB2  3001               	movlw	1	; select bank2/3
  7692  1EB3  0087               	movwf	7
  7693  1EB4  0801               	movf	1,w
  7694  1EB5  00E1               	movwf	??_setRF_DimmerValue
  7695  1EB6  0863               	movf	setRF_DimmerValue@lights,w
  7696  1EB7  3E14               	addlw	20
  7697  1EB8  077D               	addwf	_product,w
  7698  1EB9  00E2               	movwf	??_setRF_DimmerValue+1
  7699  1EBA  0862               	movf	??_setRF_DimmerValue+1,w
  7700  1EBB  0086               	movwf	6
  7701  1EBC  3001               	movlw	1	; select bank2/3
  7702  1EBD  0087               	movwf	7
  7703  1EBE  0861               	movf	??_setRF_DimmerValue,w
  7704  1EBF  0081               	movwf	1
  7705                           
  7706                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  7707  1EC0  0863               	movf	setRF_DimmerValue@lights,w
  7708  1EC1  3187  27DC         	fcall	_setDimmerLights_AdjRF
  7709  1EC3  0008               	return
  7710  1EC4                     __end_of_setRF_DimmerValue:	
  7711                           
  7712                           	psect	text29
  7713  07DC                     __ptext29:	
  7714 ;; *************** function _setDimmerLights_AdjRF *****************
  7715 ;; Defined at:
  7716 ;;		line 423 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  lights          1    wreg     unsigned char 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  lights          1   64[BANK0 ] unsigned char 
  7721 ;; Return value:  Size  Location     Type
  7722 ;;		None               void
  7723 ;; Registers used:
  7724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;Total ram usage:        2 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    7
  7737 ;; This function calls:
  7738 ;;		_DimmerLightsPointSelect
  7739 ;;		_getPercentValue
  7740 ;; This function is called by:
  7741 ;;		_setRF_DimmerValue
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           
  7746                           ;psect for function _setDimmerLights_AdjRF
  7747  07DC                     _setDimmerLights_AdjRF:	
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7751                           ;setDimmerLights_AdjRF@lights stored from wreg
  7752  07DC  0020               	movlb	0	; select bank0
  7753  07DD  00E0               	movwf	setDimmerLights_AdjRF@lights
  7754                           
  7755                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  7756  07DE  0860               	movf	setDimmerLights_AdjRF@lights,w
  7757  07DF  3199  21B9  3187   	fcall	_DimmerLightsPointSelect
  7758                           
  7759                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  7760  07E2  0877               	movf	_DimmerLights,w
  7761  07E3  0086               	movwf	6
  7762  07E4  3001               	movlw	1	; select bank2/3
  7763  07E5  0087               	movwf	7
  7764  07E6  1501               	bsf	1,2
  7765                           
  7766                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  7767  07E7  0877               	movf	_DimmerLights,w
  7768  07E8  0086               	movwf	6
  7769  07E9  3001               	movlw	1	; select bank2/3
  7770  07EA  0087               	movwf	7
  7771  07EB  1481               	bsf	1,1
  7772                           
  7773                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(product->Data[9]);
  7774  07EC  087D               	movf	_product,w
  7775  07ED  3E09               	addlw	9
  7776  07EE  0086               	movwf	6
  7777  07EF  3001               	movlw	1	; select bank2/3
  7778  07F0  0087               	movwf	7
  7779  07F1  0801               	movf	1,w
  7780  07F2  3192  2231         	fcall	_getPercentValue
  7781  07F4  0020               	movlb	0	; select bank0
  7782  07F5  00DF               	movwf	??_setDimmerLights_AdjRF
  7783  07F6  0877               	movf	_DimmerLights,w
  7784  07F7  3E05               	addlw	5
  7785  07F8  0086               	movwf	6
  7786  07F9  3001               	movlw	1	; select bank2/3
  7787  07FA  0087               	movwf	7
  7788  07FB  085F               	movf	??_setDimmerLights_AdjRF,w
  7789  07FC  0081               	movwf	1
  7790  07FD  0008               	return
  7791  07FE                     __end_of_setDimmerLights_AdjRF:	
  7792                           
  7793                           	psect	text30
  7794  1231                     __ptext30:	
  7795 ;; *************** function _getPercentValue *****************
  7796 ;; Defined at:
  7797 ;;		line 490 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  value           1    wreg     unsigned char 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  value           1   59[BANK0 ] unsigned char 
  7802 ;;  i               3   60[BANK0 ] float 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  1    wreg      unsigned char 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, pclath, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;Total ram usage:        6 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    6
  7819 ;; This function calls:
  7820 ;;		___awtoft
  7821 ;;		___ftadd
  7822 ;;		___ftdiv
  7823 ;;		___ftmul
  7824 ;;		___fttol
  7825 ;; This function is called by:
  7826 ;;		_setDimmerLights_AdjRF
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _getPercentValue
  7832  1231                     _getPercentValue:	
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7836                           ;getPercentValue@value stored from wreg
  7837  1231  0020               	movlb	0	; select bank0
  7838  1232  00DB               	movwf	getPercentValue@value
  7839                           
  7840                           ;Dimmer_B1.c: 499: float i=((char)(65*1.5))-((char)(20*1.5));
  7841  1233  3000               	movlw	0
  7842  1234  00DC               	movwf	getPercentValue@i
  7843  1235  3086               	movlw	134
  7844  1236  00DD               	movwf	getPercentValue@i+1
  7845  1237  3042               	movlw	66
  7846  1238  00DE               	movwf	getPercentValue@i+2
  7847                           
  7848                           ;Dimmer_B1.c: 500: i/=100;
  7849  1239  3000               	movlw	0
  7850  123A  00AE               	movwf	___ftdiv@f2
  7851  123B  30C8               	movlw	200
  7852  123C  00AF               	movwf	___ftdiv@f2+1
  7853  123D  3042               	movlw	66
  7854  123E  00B0               	movwf	___ftdiv@f2+2
  7855  123F  085C               	movf	getPercentValue@i,w
  7856  1240  00B1               	movwf	___ftdiv@f1
  7857  1241  085D               	movf	getPercentValue@i+1,w
  7858  1242  00B2               	movwf	___ftdiv@f1+1
  7859  1243  085E               	movf	getPercentValue@i+2,w
  7860  1244  00B3               	movwf	___ftdiv@f1+2
  7861  1245  318C  24B5  3192   	fcall	___ftdiv
  7862  1248  0020               	movlb	0	; select bank0
  7863  1249  082E               	movf	?___ftdiv,w
  7864  124A  00DC               	movwf	getPercentValue@i
  7865  124B  082F               	movf	?___ftdiv+1,w
  7866  124C  00DD               	movwf	getPercentValue@i+1
  7867  124D  0830               	movf	?___ftdiv+2,w
  7868  124E  00DE               	movwf	getPercentValue@i+2
  7869                           
  7870                           ;Dimmer_B1.c: 501: return (char)(((100-value)*i)+((char)(65*1.5)));
  7871  124F  085B               	movf	getPercentValue@value,w
  7872  1250  00D9               	movwf	??_getPercentValue
  7873  1251  01DA               	clrf	??_getPercentValue+1
  7874  1252  09D9               	comf	??_getPercentValue,f
  7875  1253  09DA               	comf	??_getPercentValue+1,f
  7876  1254  0AD9               	incf	??_getPercentValue,f
  7877  1255  1903               	skipnz
  7878  1256  0ADA               	incf	??_getPercentValue+1,f
  7879  1257  0859               	movf	??_getPercentValue,w
  7880  1258  3E64               	addlw	100
  7881  1259  00A8               	movwf	___awtoft@c
  7882  125A  3000               	movlw	0
  7883  125B  3D5A               	addwfc	??_getPercentValue+1,w
  7884  125C  00A9               	movwf	___awtoft@c+1
  7885  125D  319C  240A  3192   	fcall	___awtoft
  7886  1260  0020               	movlb	0	; select bank0
  7887  1261  0828               	movf	?___awtoft,w
  7888  1262  00B1               	movwf	___ftmul@f2
  7889  1263  0829               	movf	?___awtoft+1,w
  7890  1264  00B2               	movwf	___ftmul@f2+1
  7891  1265  082A               	movf	?___awtoft+2,w
  7892  1266  00B3               	movwf	___ftmul@f2+2
  7893  1267  085C               	movf	getPercentValue@i,w
  7894  1268  00AE               	movwf	___ftmul@f1
  7895  1269  085D               	movf	getPercentValue@i+1,w
  7896  126A  00AF               	movwf	___ftmul@f1+1
  7897  126B  085E               	movf	getPercentValue@i+2,w
  7898  126C  00B0               	movwf	___ftmul@f1+2
  7899  126D  318D  255E  3192   	fcall	___ftmul
  7900  1270  0020               	movlb	0	; select bank0
  7901  1271  082E               	movf	?___ftmul,w
  7902  1272  00C1               	movwf	___ftadd@f2
  7903  1273  082F               	movf	?___ftmul+1,w
  7904  1274  00C2               	movwf	___ftadd@f2+1
  7905  1275  0830               	movf	?___ftmul+2,w
  7906  1276  00C3               	movwf	___ftadd@f2+2
  7907  1277  3000               	movlw	0
  7908  1278  00BE               	movwf	___ftadd@f1
  7909  1279  30C2               	movlw	194
  7910  127A  00BF               	movwf	___ftadd@f1+1
  7911  127B  3042               	movlw	66
  7912  127C  00C0               	movwf	___ftadd@f1+2
  7913  127D  318E  2612  3192   	fcall	___ftadd
  7914  1280  0020               	movlb	0	; select bank0
  7915  1281  083E               	movf	?___ftadd,w
  7916  1282  00CB               	movwf	___fttol@f1
  7917  1283  083F               	movf	?___ftadd+1,w
  7918  1284  00CC               	movwf	___fttol@f1+1
  7919  1285  0840               	movf	?___ftadd+2,w
  7920  1286  00CD               	movwf	___fttol@f1+2
  7921  1287  3197  2779         	fcall	___fttol
  7922  1289  0020               	movlb	0	; select bank0
  7923  128A  084B               	movf	?___fttol,w
  7924  128B  0008               	return
  7925  128C                     __end_of_getPercentValue:	
  7926                           
  7927                           	psect	text31
  7928  0D5E                     __ptext31:	
  7929 ;; *************** function ___ftmul *****************
  7930 ;; Defined at:
  7931 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  f1              3   14[BANK0 ] float 
  7934 ;;  f2              3   17[BANK0 ] float 
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7937 ;;  sign            1   29[BANK0 ] unsigned char 
  7938 ;;  cntr            1   28[BANK0 ] unsigned char 
  7939 ;;  exp             1   24[BANK0 ] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  3   14[BANK0 ] float 
  7942 ;; Registers used:
  7943 ;;		wreg, status,2, status,0, pclath, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7949 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;Total ram usage:       16 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    5
  7956 ;; This function calls:
  7957 ;;		___ftpack
  7958 ;; This function is called by:
  7959 ;;		_getPercentValue
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function ___ftmul
  7965  0D5E                     ___ftmul:	
  7966                           
  7967                           ;incstack = 0
  7968                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7969  0D5E  0020               	movlb	0	; select bank0
  7970  0D5F  082E               	movf	___ftmul@f1,w
  7971  0D60  00B4               	movwf	??___ftmul
  7972  0D61  082F               	movf	___ftmul@f1+1,w
  7973  0D62  00B5               	movwf	??___ftmul+1
  7974  0D63  0830               	movf	___ftmul@f1+2,w
  7975  0D64  00B6               	movwf	??___ftmul+2
  7976  0D65  1003               	clrc
  7977  0D66  0D35               	rlf	??___ftmul+1,w
  7978  0D67  0D36               	rlf	??___ftmul+2,w
  7979  0D68  00B7               	movwf	??___ftmul+3
  7980  0D69  0837               	movf	??___ftmul+3,w
  7981  0D6A  00B8               	movwf	___ftmul@exp
  7982  0D6B  08B8               	movf	___ftmul@exp,f
  7983  0D6C  1D03               	skipz
  7984  0D6D  2D75               	goto	l5762
  7985  0D6E  3000               	movlw	0
  7986  0D6F  00AE               	movwf	?___ftmul
  7987  0D70  3000               	movlw	0
  7988  0D71  00AF               	movwf	?___ftmul+1
  7989  0D72  3000               	movlw	0
  7990  0D73  00B0               	movwf	?___ftmul+2
  7991  0D74  0008               	return
  7992  0D75                     l5762:	
  7993  0D75  0831               	movf	___ftmul@f2,w
  7994  0D76  00B4               	movwf	??___ftmul
  7995  0D77  0832               	movf	___ftmul@f2+1,w
  7996  0D78  00B5               	movwf	??___ftmul+1
  7997  0D79  0833               	movf	___ftmul@f2+2,w
  7998  0D7A  00B6               	movwf	??___ftmul+2
  7999  0D7B  1003               	clrc
  8000  0D7C  0D35               	rlf	??___ftmul+1,w
  8001  0D7D  0D36               	rlf	??___ftmul+2,w
  8002  0D7E  00B7               	movwf	??___ftmul+3
  8003  0D7F  0837               	movf	??___ftmul+3,w
  8004  0D80  00BD               	movwf	___ftmul@sign
  8005  0D81  08BD               	movf	___ftmul@sign,f
  8006  0D82  1D03               	skipz
  8007  0D83  2D8B               	goto	l5768
  8008  0D84  3000               	movlw	0
  8009  0D85  00AE               	movwf	?___ftmul
  8010  0D86  3000               	movlw	0
  8011  0D87  00AF               	movwf	?___ftmul+1
  8012  0D88  3000               	movlw	0
  8013  0D89  00B0               	movwf	?___ftmul+2
  8014  0D8A  0008               	return
  8015  0D8B                     l5768:	
  8016  0D8B  083D               	movf	___ftmul@sign,w
  8017  0D8C  3E7B               	addlw	123
  8018  0D8D  00B4               	movwf	??___ftmul
  8019  0D8E  0834               	movf	??___ftmul,w
  8020  0D8F  07B8               	addwf	___ftmul@exp,f
  8021  0D90  082E               	movf	___ftmul@f1,w
  8022  0D91  00B4               	movwf	??___ftmul
  8023  0D92  082F               	movf	___ftmul@f1+1,w
  8024  0D93  00B5               	movwf	??___ftmul+1
  8025  0D94  0830               	movf	___ftmul@f1+2,w
  8026  0D95  00B6               	movwf	??___ftmul+2
  8027  0D96  3010               	movlw	16
  8028  0D97                     u4155:	
  8029  0D97  36B6               	lsrf	??___ftmul+2,f
  8030  0D98  0CB5               	rrf	??___ftmul+1,f
  8031  0D99  0CB4               	rrf	??___ftmul,f
  8032  0D9A  0B89               	decfsz	9,f
  8033  0D9B  2D97               	goto	u4155
  8034  0D9C  0834               	movf	??___ftmul,w
  8035  0D9D  00B7               	movwf	??___ftmul+3
  8036  0D9E  0837               	movf	??___ftmul+3,w
  8037  0D9F  00BD               	movwf	___ftmul@sign
  8038  0DA0  0831               	movf	___ftmul@f2,w
  8039  0DA1  00B4               	movwf	??___ftmul
  8040  0DA2  0832               	movf	___ftmul@f2+1,w
  8041  0DA3  00B5               	movwf	??___ftmul+1
  8042  0DA4  0833               	movf	___ftmul@f2+2,w
  8043  0DA5  00B6               	movwf	??___ftmul+2
  8044  0DA6  3010               	movlw	16
  8045  0DA7                     u4165:	
  8046  0DA7  36B6               	lsrf	??___ftmul+2,f
  8047  0DA8  0CB5               	rrf	??___ftmul+1,f
  8048  0DA9  0CB4               	rrf	??___ftmul,f
  8049  0DAA  0B89               	decfsz	9,f
  8050  0DAB  2DA7               	goto	u4165
  8051  0DAC  0834               	movf	??___ftmul,w
  8052  0DAD  00B7               	movwf	??___ftmul+3
  8053  0DAE  0837               	movf	??___ftmul+3,w
  8054  0DAF  06BD               	xorwf	___ftmul@sign,f
  8055  0DB0  3080               	movlw	128
  8056  0DB1  00B4               	movwf	??___ftmul
  8057  0DB2  0834               	movf	??___ftmul,w
  8058  0DB3  05BD               	andwf	___ftmul@sign,f
  8059  0DB4  17AF               	bsf	___ftmul@f1+1,7
  8060  0DB5  17B2               	bsf	___ftmul@f2+1,7
  8061  0DB6  30FF               	movlw	255
  8062  0DB7  05B1               	andwf	___ftmul@f2,f
  8063  0DB8  30FF               	movlw	255
  8064  0DB9  05B2               	andwf	___ftmul@f2+1,f
  8065  0DBA  3000               	movlw	0
  8066  0DBB  05B3               	andwf	___ftmul@f2+2,f
  8067  0DBC  3000               	movlw	0
  8068  0DBD  00B9               	movwf	___ftmul@f3_as_product
  8069  0DBE  3000               	movlw	0
  8070  0DBF  00BA               	movwf	___ftmul@f3_as_product+1
  8071  0DC0  3000               	movlw	0
  8072  0DC1  00BB               	movwf	___ftmul@f3_as_product+2
  8073  0DC2  3007               	movlw	7
  8074  0DC3  00B4               	movwf	??___ftmul
  8075  0DC4  0834               	movf	??___ftmul,w
  8076  0DC5  00BC               	movwf	___ftmul@cntr
  8077  0DC6                     l5780:	
  8078  0DC6  1C2E               	btfss	___ftmul@f1,0
  8079  0DC7  2DCE               	goto	l5784
  8080  0DC8  0831               	movf	___ftmul@f2,w
  8081  0DC9  07B9               	addwf	___ftmul@f3_as_product,f
  8082  0DCA  0832               	movf	___ftmul@f2+1,w
  8083  0DCB  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8084  0DCC  0833               	movf	___ftmul@f2+2,w
  8085  0DCD  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8086  0DCE                     l5784:	
  8087  0DCE  3001               	movlw	1
  8088  0DCF                     u4185:	
  8089  0DCF  36B0               	lsrf	___ftmul@f1+2,f
  8090  0DD0  0CAF               	rrf	___ftmul@f1+1,f
  8091  0DD1  0CAE               	rrf	___ftmul@f1,f
  8092  0DD2  0B89               	decfsz	9,f
  8093  0DD3  2DCF               	goto	u4185
  8094  0DD4  3001               	movlw	1
  8095  0DD5                     u4195:	
  8096  0DD5  35B1               	lslf	___ftmul@f2,f
  8097  0DD6  0DB2               	rlf	___ftmul@f2+1,f
  8098  0DD7  0DB3               	rlf	___ftmul@f2+2,f
  8099  0DD8  0B89               	decfsz	9,f
  8100  0DD9  2DD5               	goto	u4195
  8101  0DDA  3001               	movlw	1
  8102  0DDB  02BC               	subwf	___ftmul@cntr,f
  8103  0DDC  1D03               	btfss	3,2
  8104  0DDD  2DC6               	goto	l5780
  8105  0DDE  3009               	movlw	9
  8106  0DDF  00B4               	movwf	??___ftmul
  8107  0DE0  0834               	movf	??___ftmul,w
  8108  0DE1  00BC               	movwf	___ftmul@cntr
  8109  0DE2                     l5792:	
  8110  0DE2  1C2E               	btfss	___ftmul@f1,0
  8111  0DE3  2DEA               	goto	l5796
  8112  0DE4  0831               	movf	___ftmul@f2,w
  8113  0DE5  07B9               	addwf	___ftmul@f3_as_product,f
  8114  0DE6  0832               	movf	___ftmul@f2+1,w
  8115  0DE7  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8116  0DE8  0833               	movf	___ftmul@f2+2,w
  8117  0DE9  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8118  0DEA                     l5796:	
  8119  0DEA  3001               	movlw	1
  8120  0DEB                     u4225:	
  8121  0DEB  36B0               	lsrf	___ftmul@f1+2,f
  8122  0DEC  0CAF               	rrf	___ftmul@f1+1,f
  8123  0DED  0CAE               	rrf	___ftmul@f1,f
  8124  0DEE  0B89               	decfsz	9,f
  8125  0DEF  2DEB               	goto	u4225
  8126  0DF0  3001               	movlw	1
  8127  0DF1                     u4235:	
  8128  0DF1  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8129  0DF2  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8130  0DF3  0CB9               	rrf	___ftmul@f3_as_product,f
  8131  0DF4  0B89               	decfsz	9,f
  8132  0DF5  2DF1               	goto	u4235
  8133  0DF6  3001               	movlw	1
  8134  0DF7  02BC               	subwf	___ftmul@cntr,f
  8135  0DF8  1D03               	btfss	3,2
  8136  0DF9  2DE2               	goto	l5792
  8137  0DFA  0839               	movf	___ftmul@f3_as_product,w
  8138  0DFB  00A0               	movwf	___ftpack@arg
  8139  0DFC  083A               	movf	___ftmul@f3_as_product+1,w
  8140  0DFD  00A1               	movwf	___ftpack@arg+1
  8141  0DFE  083B               	movf	___ftmul@f3_as_product+2,w
  8142  0DFF  00A2               	movwf	___ftpack@arg+2
  8143  0E00  0838               	movf	___ftmul@exp,w
  8144  0E01  00B4               	movwf	??___ftmul
  8145  0E02  0834               	movf	??___ftmul,w
  8146  0E03  00A3               	movwf	___ftpack@exp
  8147  0E04  083D               	movf	___ftmul@sign,w
  8148  0E05  00B5               	movwf	??___ftmul+1
  8149  0E06  0835               	movf	??___ftmul+1,w
  8150  0E07  00A4               	movwf	___ftpack@sign
  8151  0E08  3193  23A4         	fcall	___ftpack
  8152  0E0A  0020               	movlb	0	; select bank0
  8153  0E0B  0820               	movf	?___ftpack,w
  8154  0E0C  00AE               	movwf	?___ftmul
  8155  0E0D  0821               	movf	?___ftpack+1,w
  8156  0E0E  00AF               	movwf	?___ftmul+1
  8157  0E0F  0822               	movf	?___ftpack+2,w
  8158  0E10  00B0               	movwf	?___ftmul+2
  8159  0E11  0008               	return
  8160  0E12                     __end_of___ftmul:	
  8161                           
  8162                           	psect	text32
  8163  0E12                     __ptext32:	
  8164 ;; *************** function ___ftadd *****************
  8165 ;; Defined at:
  8166 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  f1              3   30[BANK0 ] float 
  8169 ;;  f2              3   33[BANK0 ] float 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  exp1            1   42[BANK0 ] unsigned char 
  8172 ;;  exp2            1   41[BANK0 ] unsigned char 
  8173 ;;  sign            1   40[BANK0 ] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  3   30[BANK0 ] float 
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8183 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;Total ram usage:       13 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    5
  8190 ;; This function calls:
  8191 ;;		___ftpack
  8192 ;; This function is called by:
  8193 ;;		_getPercentValue
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           
  8198                           ;psect for function ___ftadd
  8199  0E12                     ___ftadd:	
  8200                           
  8201                           ;incstack = 0
  8202                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8203  0E12  0020               	movlb	0	; select bank0
  8204  0E13  083E               	movf	___ftadd@f1,w
  8205  0E14  00C4               	movwf	??___ftadd
  8206  0E15  083F               	movf	___ftadd@f1+1,w
  8207  0E16  00C5               	movwf	??___ftadd+1
  8208  0E17  0840               	movf	___ftadd@f1+2,w
  8209  0E18  00C6               	movwf	??___ftadd+2
  8210  0E19  1003               	clrc
  8211  0E1A  0D45               	rlf	??___ftadd+1,w
  8212  0E1B  0D46               	rlf	??___ftadd+2,w
  8213  0E1C  00C7               	movwf	??___ftadd+3
  8214  0E1D  0847               	movf	??___ftadd+3,w
  8215  0E1E  00CA               	movwf	___ftadd@exp1
  8216  0E1F  0841               	movf	___ftadd@f2,w
  8217  0E20  00C4               	movwf	??___ftadd
  8218  0E21  0842               	movf	___ftadd@f2+1,w
  8219  0E22  00C5               	movwf	??___ftadd+1
  8220  0E23  0843               	movf	___ftadd@f2+2,w
  8221  0E24  00C6               	movwf	??___ftadd+2
  8222  0E25  1003               	clrc
  8223  0E26  0D45               	rlf	??___ftadd+1,w
  8224  0E27  0D46               	rlf	??___ftadd+2,w
  8225  0E28  00C7               	movwf	??___ftadd+3
  8226  0E29  0847               	movf	??___ftadd+3,w
  8227  0E2A  00C9               	movwf	___ftadd@exp2
  8228  0E2B  084A               	movf	___ftadd@exp1,w
  8229  0E2C  1903               	btfsc	3,2
  8230  0E2D  2E3A               	goto	l5650
  8231  0E2E  0849               	movf	___ftadd@exp2,w
  8232  0E2F  024A               	subwf	___ftadd@exp1,w
  8233  0E30  1803               	skipnc
  8234  0E31  2E41               	goto	l5654
  8235  0E32  034A               	decf	___ftadd@exp1,w
  8236  0E33  3AFF               	xorlw	255
  8237  0E34  0749               	addwf	___ftadd@exp2,w
  8238  0E35  00C4               	movwf	??___ftadd
  8239  0E36  3019               	movlw	25
  8240  0E37  0244               	subwf	??___ftadd,w
  8241  0E38  1C03               	skipc
  8242  0E39  2E41               	goto	l5654
  8243  0E3A                     l5650:	
  8244  0E3A  0841               	movf	___ftadd@f2,w
  8245  0E3B  00BE               	movwf	?___ftadd
  8246  0E3C  0842               	movf	___ftadd@f2+1,w
  8247  0E3D  00BF               	movwf	?___ftadd+1
  8248  0E3E  0843               	movf	___ftadd@f2+2,w
  8249  0E3F  00C0               	movwf	?___ftadd+2
  8250  0E40  0008               	return
  8251  0E41                     l5654:	
  8252  0E41  0849               	movf	___ftadd@exp2,w
  8253  0E42  1903               	btfsc	3,2
  8254  0E43  0008               	return
  8255  0E44  084A               	movf	___ftadd@exp1,w
  8256  0E45  0249               	subwf	___ftadd@exp2,w
  8257  0E46  1803               	skipnc
  8258  0E47  2E50               	goto	l5660
  8259  0E48  0349               	decf	___ftadd@exp2,w
  8260  0E49  3AFF               	xorlw	255
  8261  0E4A  074A               	addwf	___ftadd@exp1,w
  8262  0E4B  00C4               	movwf	??___ftadd
  8263  0E4C  3019               	movlw	25
  8264  0E4D  0244               	subwf	??___ftadd,w
  8265  0E4E  1803               	btfsc	3,0
  8266  0E4F  0008               	return
  8267  0E50                     l5660:	
  8268  0E50  3006               	movlw	6
  8269  0E51  00C4               	movwf	??___ftadd
  8270  0E52  0844               	movf	??___ftadd,w
  8271  0E53  00C8               	movwf	___ftadd@sign
  8272  0E54  1BC0               	btfsc	___ftadd@f1+2,7
  8273  0E55  17C8               	bsf	___ftadd@sign,7
  8274  0E56  1BC3               	btfsc	___ftadd@f2+2,7
  8275  0E57  1748               	bsf	___ftadd@sign,6
  8276  0E58  17BF               	bsf	___ftadd@f1+1,7
  8277  0E59  30FF               	movlw	255
  8278  0E5A  05BE               	andwf	___ftadd@f1,f
  8279  0E5B  30FF               	movlw	255
  8280  0E5C  05BF               	andwf	___ftadd@f1+1,f
  8281  0E5D  3000               	movlw	0
  8282  0E5E  05C0               	andwf	___ftadd@f1+2,f
  8283  0E5F  17C2               	bsf	___ftadd@f2+1,7
  8284  0E60  30FF               	movlw	255
  8285  0E61  05C1               	andwf	___ftadd@f2,f
  8286  0E62  30FF               	movlw	255
  8287  0E63  05C2               	andwf	___ftadd@f2+1,f
  8288  0E64  3000               	movlw	0
  8289  0E65  05C3               	andwf	___ftadd@f2+2,f
  8290  0E66  0849               	movf	___ftadd@exp2,w
  8291  0E67  024A               	subwf	___ftadd@exp1,w
  8292  0E68  1803               	skipnc
  8293  0E69  2E8C               	goto	l5682
  8294  0E6A                     l5672:	
  8295  0E6A  3001               	movlw	1
  8296  0E6B                     u3915:	
  8297  0E6B  35C1               	lslf	___ftadd@f2,f
  8298  0E6C  0DC2               	rlf	___ftadd@f2+1,f
  8299  0E6D  0DC3               	rlf	___ftadd@f2+2,f
  8300  0E6E  0B89               	decfsz	9,f
  8301  0E6F  2E6B               	goto	u3915
  8302  0E70  3001               	movlw	1
  8303  0E71  02C9               	subwf	___ftadd@exp2,f
  8304  0E72  0849               	movf	___ftadd@exp2,w
  8305  0E73  064A               	xorwf	___ftadd@exp1,w
  8306  0E74  1903               	skipnz
  8307  0E75  2E87               	goto	l5680
  8308  0E76  3001               	movlw	1
  8309  0E77  02C8               	subwf	___ftadd@sign,f
  8310  0E78  0848               	movf	___ftadd@sign,w
  8311  0E79  3907               	andlw	7
  8312  0E7A  1903               	btfsc	3,2
  8313  0E7B  2E87               	goto	l5680
  8314  0E7C  2E6A               	goto	l5672
  8315  0E7D                     l5678:	
  8316  0E7D  3001               	movlw	1
  8317  0E7E                     u3945:	
  8318  0E7E  36C0               	lsrf	___ftadd@f1+2,f
  8319  0E7F  0CBF               	rrf	___ftadd@f1+1,f
  8320  0E80  0CBE               	rrf	___ftadd@f1,f
  8321  0E81  0B89               	decfsz	9,f
  8322  0E82  2E7E               	goto	u3945
  8323  0E83  3001               	movlw	1
  8324  0E84  00C4               	movwf	??___ftadd
  8325  0E85  0844               	movf	??___ftadd,w
  8326  0E86  07CA               	addwf	___ftadd@exp1,f
  8327  0E87                     l5680:	
  8328  0E87  084A               	movf	___ftadd@exp1,w
  8329  0E88  0649               	xorwf	___ftadd@exp2,w
  8330  0E89  1903               	btfsc	3,2
  8331  0E8A  2EB1               	goto	l3101
  8332  0E8B  2E7D               	goto	l5678
  8333  0E8C                     l5682:	
  8334  0E8C  084A               	movf	___ftadd@exp1,w
  8335  0E8D  0249               	subwf	___ftadd@exp2,w
  8336  0E8E  1803               	skipnc
  8337  0E8F  2EB1               	goto	l3101
  8338  0E90                     l5684:	
  8339  0E90  3001               	movlw	1
  8340  0E91                     u3975:	
  8341  0E91  35BE               	lslf	___ftadd@f1,f
  8342  0E92  0DBF               	rlf	___ftadd@f1+1,f
  8343  0E93  0DC0               	rlf	___ftadd@f1+2,f
  8344  0E94  0B89               	decfsz	9,f
  8345  0E95  2E91               	goto	u3975
  8346  0E96  3001               	movlw	1
  8347  0E97  02CA               	subwf	___ftadd@exp1,f
  8348  0E98  0849               	movf	___ftadd@exp2,w
  8349  0E99  064A               	xorwf	___ftadd@exp1,w
  8350  0E9A  1903               	skipnz
  8351  0E9B  2EAD               	goto	l5692
  8352  0E9C  3001               	movlw	1
  8353  0E9D  02C8               	subwf	___ftadd@sign,f
  8354  0E9E  0848               	movf	___ftadd@sign,w
  8355  0E9F  3907               	andlw	7
  8356  0EA0  1903               	btfsc	3,2
  8357  0EA1  2EAD               	goto	l5692
  8358  0EA2  2E90               	goto	l5684
  8359  0EA3                     l5690:	
  8360  0EA3  3001               	movlw	1
  8361  0EA4                     u4005:	
  8362  0EA4  36C3               	lsrf	___ftadd@f2+2,f
  8363  0EA5  0CC2               	rrf	___ftadd@f2+1,f
  8364  0EA6  0CC1               	rrf	___ftadd@f2,f
  8365  0EA7  0B89               	decfsz	9,f
  8366  0EA8  2EA4               	goto	u4005
  8367  0EA9  3001               	movlw	1
  8368  0EAA  00C4               	movwf	??___ftadd
  8369  0EAB  0844               	movf	??___ftadd,w
  8370  0EAC  07C9               	addwf	___ftadd@exp2,f
  8371  0EAD                     l5692:	
  8372  0EAD  084A               	movf	___ftadd@exp1,w
  8373  0EAE  0649               	xorwf	___ftadd@exp2,w
  8374  0EAF  1D03               	skipz
  8375  0EB0  2EA3               	goto	l5690
  8376  0EB1                     l3101:	
  8377  0EB1  1FC8               	btfss	___ftadd@sign,7
  8378  0EB2  2EC3               	goto	l5696
  8379  0EB3  30FF               	movlw	255
  8380  0EB4  06BE               	xorwf	___ftadd@f1,f
  8381  0EB5  30FF               	movlw	255
  8382  0EB6  06BF               	xorwf	___ftadd@f1+1,f
  8383  0EB7  30FF               	movlw	255
  8384  0EB8  06C0               	xorwf	___ftadd@f1+2,f
  8385  0EB9  3001               	movlw	1
  8386  0EBA  07BE               	addwf	___ftadd@f1,f
  8387  0EBB  3000               	movlw	0
  8388  0EBC  1803               	skipnc
  8389  0EBD  3001               	movlw	1
  8390  0EBE  07BF               	addwf	___ftadd@f1+1,f
  8391  0EBF  3000               	movlw	0
  8392  0EC0  1803               	skipnc
  8393  0EC1  3001               	movlw	1
  8394  0EC2  07C0               	addwf	___ftadd@f1+2,f
  8395  0EC3                     l5696:	
  8396  0EC3  1F48               	btfss	___ftadd@sign,6
  8397  0EC4  2ED5               	goto	l5700
  8398  0EC5  30FF               	movlw	255
  8399  0EC6  06C1               	xorwf	___ftadd@f2,f
  8400  0EC7  30FF               	movlw	255
  8401  0EC8  06C2               	xorwf	___ftadd@f2+1,f
  8402  0EC9  30FF               	movlw	255
  8403  0ECA  06C3               	xorwf	___ftadd@f2+2,f
  8404  0ECB  3001               	movlw	1
  8405  0ECC  07C1               	addwf	___ftadd@f2,f
  8406  0ECD  3000               	movlw	0
  8407  0ECE  1803               	skipnc
  8408  0ECF  3001               	movlw	1
  8409  0ED0  07C2               	addwf	___ftadd@f2+1,f
  8410  0ED1  3000               	movlw	0
  8411  0ED2  1803               	skipnc
  8412  0ED3  3001               	movlw	1
  8413  0ED4  07C3               	addwf	___ftadd@f2+2,f
  8414  0ED5                     l5700:	
  8415  0ED5  01C8               	clrf	___ftadd@sign
  8416  0ED6  083E               	movf	___ftadd@f1,w
  8417  0ED7  07C1               	addwf	___ftadd@f2,f
  8418  0ED8  083F               	movf	___ftadd@f1+1,w
  8419  0ED9  3DC2               	addwfc	___ftadd@f2+1,f
  8420  0EDA  0840               	movf	___ftadd@f1+2,w
  8421  0EDB  3DC3               	addwfc	___ftadd@f2+2,f
  8422  0EDC  1FC3               	btfss	___ftadd@f2+2,7
  8423  0EDD  2EF0               	goto	l5710
  8424  0EDE  30FF               	movlw	255
  8425  0EDF  06C1               	xorwf	___ftadd@f2,f
  8426  0EE0  30FF               	movlw	255
  8427  0EE1  06C2               	xorwf	___ftadd@f2+1,f
  8428  0EE2  30FF               	movlw	255
  8429  0EE3  06C3               	xorwf	___ftadd@f2+2,f
  8430  0EE4  3001               	movlw	1
  8431  0EE5  07C1               	addwf	___ftadd@f2,f
  8432  0EE6  3000               	movlw	0
  8433  0EE7  1803               	skipnc
  8434  0EE8  3001               	movlw	1
  8435  0EE9  07C2               	addwf	___ftadd@f2+1,f
  8436  0EEA  3000               	movlw	0
  8437  0EEB  1803               	skipnc
  8438  0EEC  3001               	movlw	1
  8439  0EED  07C3               	addwf	___ftadd@f2+2,f
  8440  0EEE  01C8               	clrf	___ftadd@sign
  8441  0EEF  0AC8               	incf	___ftadd@sign,f
  8442  0EF0                     l5710:	
  8443  0EF0  0841               	movf	___ftadd@f2,w
  8444  0EF1  00A0               	movwf	___ftpack@arg
  8445  0EF2  0842               	movf	___ftadd@f2+1,w
  8446  0EF3  00A1               	movwf	___ftpack@arg+1
  8447  0EF4  0843               	movf	___ftadd@f2+2,w
  8448  0EF5  00A2               	movwf	___ftpack@arg+2
  8449  0EF6  084A               	movf	___ftadd@exp1,w
  8450  0EF7  00C4               	movwf	??___ftadd
  8451  0EF8  0844               	movf	??___ftadd,w
  8452  0EF9  00A3               	movwf	___ftpack@exp
  8453  0EFA  0848               	movf	___ftadd@sign,w
  8454  0EFB  00C5               	movwf	??___ftadd+1
  8455  0EFC  0845               	movf	??___ftadd+1,w
  8456  0EFD  00A4               	movwf	___ftpack@sign
  8457  0EFE  3193  23A4         	fcall	___ftpack
  8458  0F00  0020               	movlb	0	; select bank0
  8459  0F01  0820               	movf	?___ftpack,w
  8460  0F02  00BE               	movwf	?___ftadd
  8461  0F03  0821               	movf	?___ftpack+1,w
  8462  0F04  00BF               	movwf	?___ftadd+1
  8463  0F05  0822               	movf	?___ftpack+2,w
  8464  0F06  00C0               	movwf	?___ftadd+2
  8465  0F07  0008               	return
  8466  0F08                     __end_of___ftadd:	
  8467                           
  8468                           	psect	text33
  8469  1C96                     __ptext33:	
  8470 ;; *************** function _RF_RxDisable *****************
  8471 ;; Defined at:
  8472 ;;		line 187 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  rf              1    wreg     unsigned char 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  rf              1    4[BANK0 ] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;		None               void
  8479 ;; Registers used:
  8480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        1 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    6
  8493 ;; This function calls:
  8494 ;;		_CC2500_WriteCommand
  8495 ;;		_RfPointSelect
  8496 ;;		_setINT_GO
  8497 ;; This function is called by:
  8498 ;;		_setRF_Main
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _RF_RxDisable
  8504  1C96                     _RF_RxDisable:	
  8505                           
  8506                           ;incstack = 0
  8507                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8508                           ;RF_RxDisable@rf stored from wreg
  8509  1C96  0020               	movlb	0	; select bank0
  8510  1C97  00A4               	movwf	RF_RxDisable@rf
  8511                           
  8512                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  8513  1C98  0824               	movf	RF_RxDisable@rf,w
  8514  1C99  3198  208B  319C   	fcall	_RfPointSelect
  8515                           
  8516                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  8517  1C9C  0021               	movlb	1	; select bank1
  8518  1C9D  083D               	movf	_RF^(0+128),w
  8519  1C9E  0086               	movwf	6
  8520  1C9F  0187               	clrf	7
  8521  1CA0  1D81               	btfss	1,3
  8522  1CA1  0008               	return
  8523                           
  8524                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  8525  1CA2  083D               	movf	_RF^(0+128),w
  8526  1CA3  0086               	movwf	6
  8527  1CA4  0187               	clrf	7
  8528  1CA5  1181               	bcf	1,3
  8529                           
  8530                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  8531  1CA6  083D               	movf	_RF^(0+128),w
  8532  1CA7  0086               	movwf	6
  8533  1CA8  0187               	clrf	7
  8534  1CA9  1081               	bcf	1,1
  8535                           
  8536                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  8537  1CAA  0A3D               	incf	_RF^(0+128),w
  8538  1CAB  0086               	movwf	6
  8539  1CAC  0187               	clrf	7
  8540  1CAD  0181               	clrf	1
  8541                           
  8542                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  8543  1CAE  083D               	movf	_RF^(0+128),w
  8544  1CAF  0086               	movwf	6
  8545  1CB0  0187               	clrf	7
  8546  1CB1  1281               	bcf	1,5
  8547                           
  8548                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  8549  1CB2  3036               	movlw	54
  8550  1CB3  3199  2138  319C   	fcall	_CC2500_WriteCommand
  8551                           
  8552                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  8553  1CB6  303A               	movlw	58
  8554  1CB7  3199  2138  319C   	fcall	_CC2500_WriteCommand
  8555                           
  8556                           ;RF_Control_B1.c: 197: setINT_GO(0);
  8557  1CBA  3000               	movlw	0
  8558  1CBB  31A7  27CB         	fcall	_setINT_GO
  8559  1CBD  0008               	return
  8560  1CBE                     __end_of_RF_RxDisable:	
  8561                           
  8562                           	psect	text34
  8563  1076                     __ptext34:	
  8564 ;; *************** function _CC2500_TxData *****************
  8565 ;; Defined at:
  8566 ;;		line 32 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    6
  8587 ;; This function calls:
  8588 ;;		_CC2500_WriteByte
  8589 ;;		_CC2500_WriteCommand
  8590 ;; This function is called by:
  8591 ;;		_setRF_Main
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _CC2500_TxData
  8597  1076                     _CC2500_TxData:	
  8598                           
  8599                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8600                           ;CC2500_B1.c: 35: RC4 = 0;
  8601                           
  8602                           ;incstack = 0
  8603                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8604  1076  0020               	movlb	0	; select bank0
  8605  1077  120E               	bcf	14,4	;volatile
  8606                           
  8607                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8608  1078  307F               	movlw	127
  8609  1079  00A4               	movwf	??_CC2500_TxData
  8610  107A  0824               	movf	??_CC2500_TxData,w
  8611  107B  0021               	movlb	1	; select bank1
  8612  107C  00C1               	movwf	_SPI0Buffer^(0+128)
  8613  107D                     l275:	
  8614                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8615                           
  8616  107D  0020               	movlb	0	; select bank0
  8617  107E  190E               	btfsc	14,2	;volatile
  8618  107F  287D               	goto	l275
  8619                           
  8620                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8621  1080  319A  22A3  3190   	fcall	_CC2500_WriteByte
  8622                           
  8623                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8624  1083  0021               	movlb	1	; select bank1
  8625  1084  0842               	movf	_Tx_Length^(0+128),w
  8626  1085  0020               	movlb	0	; select bank0
  8627  1086  00A4               	movwf	??_CC2500_TxData
  8628  1087  0824               	movf	??_CC2500_TxData,w
  8629  1088  0021               	movlb	1	; select bank1
  8630  1089  00C1               	movwf	_SPI0Buffer^(0+128)
  8631                           
  8632                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8633  108A  319A  22A3  3190   	fcall	_CC2500_WriteByte
  8634                           
  8635                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8636  108D  0020               	movlb	0	; select bank0
  8637  108E  01A5               	clrf	CC2500_TxData@loop_e
  8638  108F                     l6404:	
  8639  108F  0021               	movlb	1	; select bank1
  8640  1090  0842               	movf	_Tx_Length^(0+128),w
  8641  1091  0020               	movlb	0	; select bank0
  8642  1092  0225               	subwf	CC2500_TxData@loop_e,w
  8643  1093  1803               	btfsc	3,0
  8644  1094  28A7               	goto	l280
  8645                           
  8646                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8647  1095  0825               	movf	CC2500_TxData@loop_e,w
  8648  1096  3EA0               	addlw	_RF_Data& (0+255)
  8649  1097  0086               	movwf	6
  8650  1098  0187               	clrf	7
  8651  1099  0801               	movf	1,w
  8652  109A  00A4               	movwf	??_CC2500_TxData
  8653  109B  0824               	movf	??_CC2500_TxData,w
  8654  109C  0021               	movlb	1	; select bank1
  8655  109D  00C1               	movwf	_SPI0Buffer^(0+128)
  8656                           
  8657                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8658  109E  319A  22A3  3190   	fcall	_CC2500_WriteByte
  8659  10A1  3001               	movlw	1
  8660  10A2  0020               	movlb	0	; select bank0
  8661  10A3  00A4               	movwf	??_CC2500_TxData
  8662  10A4  0824               	movf	??_CC2500_TxData,w
  8663  10A5  07A5               	addwf	CC2500_TxData@loop_e,f
  8664  10A6  288F               	goto	l6404
  8665  10A7                     l280:	
  8666                           
  8667                           ;CC2500_B1.c: 44: }
  8668                           ;CC2500_B1.c: 45: RC4 = 1;
  8669  10A7  160E               	bsf	14,4	;volatile
  8670                           
  8671                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8672  10A8  3035               	movlw	53
  8673  10A9  3199  2138  3190   	fcall	_CC2500_WriteCommand
  8674  10AC                     l281:	
  8675                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8676                           
  8677  10AC  0020               	movlb	0	; select bank0
  8678  10AD  1C0D               	btfss	13,0	;volatile
  8679  10AE  28AC               	goto	l281
  8680  10AF                     l284:	
  8681                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8682                           
  8683  10AF  180D               	btfsc	13,0	;volatile
  8684  10B0  28AF               	goto	l284
  8685                           
  8686                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8687  10B1  3036               	movlw	54
  8688  10B2  3199  2138  3190   	fcall	_CC2500_WriteCommand
  8689                           
  8690                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8691  10B5  303B               	movlw	59
  8692  10B6  3199  2138         	fcall	_CC2500_WriteCommand
  8693                           
  8694                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8695  10B8  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8696  10B9  0008               	return
  8697  10BA                     __end_of_CC2500_TxData:	
  8698                           
  8699                           	psect	text35
  8700  1405                     __ptext35:	
  8701 ;; *************** function _CC2500_RxData *****************
  8702 ;; Defined at:
  8703 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;		None               void
  8710 ;; Registers used:
  8711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    6
  8724 ;; This function calls:
  8725 ;;		_CC2500_ReadByte
  8726 ;;		_CC2500_ReadStatus
  8727 ;;		_CC2500_WriteByte
  8728 ;;		_CC2500_WriteCommand
  8729 ;;		_setRF_RxStatus
  8730 ;; This function is called by:
  8731 ;;		_setRF_Main
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _CC2500_RxData
  8737  1405                     _CC2500_RxData:	
  8738                           
  8739                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8740                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8744  1405  0020               	movlb	0	; select bank0
  8745  1406  180D               	btfsc	13,0	;volatile
  8746  1407                     l291:	
  8747                           ;CC2500_B1.c: 63: {
  8748                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8749                           
  8750  1407  180D               	btfsc	13,0	;volatile
  8751  1408  2C07               	goto	l291
  8752                           
  8753                           ;CC2500_B1.c: 65: }
  8754                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8755  1409  303B               	movlw	59
  8756  140A  319B  233D  3194   	fcall	_CC2500_ReadStatus
  8757                           
  8758                           ;CC2500_B1.c: 67: if (s_data != 0)
  8759  140D  0021               	movlb	1	; select bank1
  8760  140E  0845               	movf	_s_data^(0+128),w
  8761  140F  1903               	btfsc	3,2
  8762  1410  2C5B               	goto	l8248
  8763                           
  8764                           ;CC2500_B1.c: 69: {
  8765                           ;CC2500_B1.c: 70: RC4 = 0;
  8766  1411  0020               	movlb	0	; select bank0
  8767  1412  120E               	bcf	14,4	;volatile
  8768                           
  8769                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8770  1413  30FF               	movlw	255
  8771  1414  00A4               	movwf	??_CC2500_RxData
  8772  1415  0824               	movf	??_CC2500_RxData,w
  8773  1416  0021               	movlb	1	; select bank1
  8774  1417  00C1               	movwf	_SPI0Buffer^(0+128)
  8775  1418                     l295:	
  8776                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8777                           
  8778  1418  0020               	movlb	0	; select bank0
  8779  1419  190E               	btfsc	14,2	;volatile
  8780  141A  2C18               	goto	l295
  8781                           
  8782                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8783  141B  319A  22A3  3194   	fcall	_CC2500_WriteByte
  8784                           
  8785                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8786  141E  319B  2390  3194   	fcall	_CC2500_ReadByte
  8787                           
  8788                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8789  1421  0021               	movlb	1	; select bank1
  8790  1422  0841               	movf	_SPI0Buffer^(0+128),w
  8791  1423  0020               	movlb	0	; select bank0
  8792  1424  00A4               	movwf	??_CC2500_RxData
  8793  1425  0824               	movf	??_CC2500_RxData,w
  8794  1426  0021               	movlb	1	; select bank1
  8795  1427  00C0               	movwf	_Rx_Length^(0+128)
  8796                           
  8797                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8798  1428  0020               	movlb	0	; select bank0
  8799  1429  01A5               	clrf	CC2500_RxData@loop_f
  8800  142A                     l8234:	
  8801  142A  0021               	movlb	1	; select bank1
  8802  142B  0840               	movf	_Rx_Length^(0+128),w
  8803  142C  0020               	movlb	0	; select bank0
  8804  142D  0225               	subwf	CC2500_RxData@loop_f,w
  8805  142E  1803               	btfsc	3,0
  8806  142F  2C42               	goto	l8236
  8807                           
  8808                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8809  1430  319B  2390  3194   	fcall	_CC2500_ReadByte
  8810                           
  8811                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8812  1433  0021               	movlb	1	; select bank1
  8813  1434  0841               	movf	_SPI0Buffer^(0+128),w
  8814  1435  0020               	movlb	0	; select bank0
  8815  1436  00A4               	movwf	??_CC2500_RxData
  8816  1437  0825               	movf	CC2500_RxData@loop_f,w
  8817  1438  3EA0               	addlw	_RF_Data& (0+255)
  8818  1439  0086               	movwf	6
  8819  143A  0187               	clrf	7
  8820  143B  0824               	movf	??_CC2500_RxData,w
  8821  143C  0081               	movwf	1
  8822  143D  3001               	movlw	1
  8823  143E  00A4               	movwf	??_CC2500_RxData
  8824  143F  0824               	movf	??_CC2500_RxData,w
  8825  1440  07A5               	addwf	CC2500_RxData@loop_f,f
  8826  1441  2C2A               	goto	l8234
  8827  1442                     l8236:	
  8828                           
  8829                           ;CC2500_B1.c: 80: }
  8830                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8831  1442  319B  2390  3194   	fcall	_CC2500_ReadByte
  8832                           
  8833                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8834  1445  0021               	movlb	1	; select bank1
  8835  1446  0841               	movf	_SPI0Buffer^(0+128),w
  8836  1447  0020               	movlb	0	; select bank0
  8837  1448  00A4               	movwf	??_CC2500_RxData
  8838  1449  0824               	movf	??_CC2500_RxData,w
  8839  144A  0021               	movlb	1	; select bank1
  8840  144B  00BF               	movwf	_RSSI^(0+128)
  8841                           
  8842                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8843  144C  319B  2390  3194   	fcall	_CC2500_ReadByte
  8844                           
  8845                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8846  144F  0021               	movlb	1	; select bank1
  8847  1450  0841               	movf	_SPI0Buffer^(0+128),w
  8848  1451  0020               	movlb	0	; select bank0
  8849  1452  00A4               	movwf	??_CC2500_RxData
  8850  1453  0824               	movf	??_CC2500_RxData,w
  8851  1454  0021               	movlb	1	; select bank1
  8852  1455  00B8               	movwf	_CRC^(0+128)
  8853                           
  8854                           ;CC2500_B1.c: 85: RC4 = 1;
  8855  1456  0020               	movlb	0	; select bank0
  8856  1457  160E               	bsf	14,4	;volatile
  8857                           
  8858                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8859  1458  0021               	movlb	1	; select bank1
  8860  1459  1BB8               	btfsc	_CRC^(0+128),7
  8861                           
  8862                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8863  145A  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8864  145B                     l8248:	
  8865                           
  8866                           ;CC2500_B1.c: 88: }
  8867                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8868  145B  3036               	movlw	54
  8869  145C  3199  2138  3194   	fcall	_CC2500_WriteCommand
  8870                           
  8871                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8872  145F  303A               	movlw	58
  8873  1460  3199  2138  3194   	fcall	_CC2500_WriteCommand
  8874                           
  8875                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  8876  1463  0020               	movlb	0	; select bank0
  8877  1464  01A2               	clrf	setRF_RxStatus@command
  8878  1465  3001               	movlw	1
  8879  1466  3199  211A         	fcall	_setRF_RxStatus
  8880  1468  0008               	return
  8881  1469                     __end_of_CC2500_RxData:	
  8882                           
  8883                           	psect	text36
  8884  191A                     __ptext36:	
  8885 ;; *************** function _setRF_RxStatus *****************
  8886 ;; Defined at:
  8887 ;;		line 42 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  rf              1    wreg     unsigned char 
  8890 ;;  command         1    2[BANK0 ] unsigned char 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  rf              1    3[BANK0 ] unsigned char 
  8893 ;; Return value:  Size  Location     Type
  8894 ;;		None               void
  8895 ;; Registers used:
  8896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;Total ram usage:        2 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    5
  8909 ;; This function calls:
  8910 ;;		_RfPointSelect
  8911 ;; This function is called by:
  8912 ;;		_CC2500_RxData
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function _setRF_RxStatus
  8918  191A                     _setRF_RxStatus:	
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8922                           ;setRF_RxStatus@rf stored from wreg
  8923  191A  0020               	movlb	0	; select bank0
  8924  191B  00A3               	movwf	setRF_RxStatus@rf
  8925                           
  8926                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  8927  191C  0823               	movf	setRF_RxStatus@rf,w
  8928  191D  3198  208B         	fcall	_RfPointSelect
  8929                           
  8930                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  8931  191F  0021               	movlb	1	; select bank1
  8932  1920  083D               	movf	_RF^(0+128),w
  8933  1921  0086               	movwf	6
  8934  1922  0187               	clrf	7
  8935  1923  0020               	movlb	0	; select bank0
  8936  1924  0822               	movf	setRF_RxStatus@command,w
  8937  1925  1181               	bcf	1,3
  8938  1926  1D03               	skipz
  8939  1927  1581               	bsf	1,3
  8940  1928  0008               	return
  8941  1929                     __end_of_setRF_RxStatus:	
  8942                           
  8943                           	psect	text37
  8944  1B3D                     __ptext37:	
  8945 ;; *************** function _CC2500_ReadStatus *****************
  8946 ;; Defined at:
  8947 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;  status_addr     1    wreg     unsigned char 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;		None               void
  8954 ;; Registers used:
  8955 ;;		wreg, status,2, status,0, pclath, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        2 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    5
  8968 ;; This function calls:
  8969 ;;		_CC2500_ReadByte
  8970 ;;		_CC2500_WriteByte
  8971 ;; This function is called by:
  8972 ;;		_CC2500_RxData
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _CC2500_ReadStatus
  8978  1B3D                     _CC2500_ReadStatus:	
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8982                           ;CC2500_ReadStatus@status_addr stored from wreg
  8983  1B3D  0020               	movlb	0	; select bank0
  8984  1B3E  00A3               	movwf	CC2500_ReadStatus@status_addr
  8985                           
  8986                           ;CC2500_B1.c: 264: RC4 = 0;
  8987  1B3F  120E               	bcf	14,4	;volatile
  8988                           
  8989                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  8990  1B40  0823               	movf	CC2500_ReadStatus@status_addr,w
  8991  1B41  3EC0               	addlw	192
  8992  1B42  00A2               	movwf	??_CC2500_ReadStatus
  8993  1B43  0822               	movf	??_CC2500_ReadStatus,w
  8994  1B44  0021               	movlb	1	; select bank1
  8995  1B45  00C1               	movwf	_SPI0Buffer^(0+128)
  8996  1B46                     l371:	
  8997                           ;CC2500_B1.c: 267: while (RC2 == 1);
  8998                           
  8999  1B46  0020               	movlb	0	; select bank0
  9000  1B47  190E               	btfsc	14,2	;volatile
  9001  1B48  2B46               	goto	l371
  9002                           
  9003                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  9004  1B49  319A  22A3  319B   	fcall	_CC2500_WriteByte
  9005                           
  9006                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  9007  1B4C  319B  2390         	fcall	_CC2500_ReadByte
  9008                           
  9009                           ;CC2500_B1.c: 271: RC4 = 1;
  9010  1B4E  0020               	movlb	0	; select bank0
  9011  1B4F  160E               	bsf	14,4	;volatile
  9012                           
  9013                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  9014  1B50  0021               	movlb	1	; select bank1
  9015  1B51  0841               	movf	_SPI0Buffer^(0+128),w
  9016  1B52  0020               	movlb	0	; select bank0
  9017  1B53  00A2               	movwf	??_CC2500_ReadStatus
  9018  1B54  0822               	movf	??_CC2500_ReadStatus,w
  9019  1B55  0021               	movlb	1	; select bank1
  9020  1B56  00C5               	movwf	_s_data^(0+128)
  9021  1B57  0008               	return
  9022  1B58                     __end_of_CC2500_ReadStatus:	
  9023                           
  9024                           	psect	text38
  9025  1B90                     __ptext38:	
  9026 ;; *************** function _CC2500_ReadByte *****************
  9027 ;; Defined at:
  9028 ;;		line 207 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:        2 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    4
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_CC2500_RxData
  9053 ;;		_CC2500_ReadStatus
  9054 ;;		_CC2500_ReadREG
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _CC2500_ReadByte
  9060  1B90                     _CC2500_ReadByte:	
  9061                           
  9062                           ;CC2500_B1.c: 208: unsigned char loop_b;
  9063                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9067  1B90  0020               	movlb	0	; select bank0
  9068  1B91  01A1               	clrf	CC2500_ReadByte@loop_b
  9069  1B92                     L12:	
  9070  1B92  3008               	movlw	8
  9071  1B93  0221               	subwf	CC2500_ReadByte@loop_b,w
  9072  1B94  1803               	btfsc	3,0
  9073  1B95  0008               	return
  9074                           
  9075                           ;CC2500_B1.c: 210: RC1 = 1;
  9076  1B96  148E               	bsf	14,1	;volatile
  9077                           
  9078                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  9079  1B97  1003               	clrc
  9080  1B98  0021               	movlb	1	; select bank1
  9081  1B99  0DC1               	rlf	_SPI0Buffer^(0+128),f
  9082                           
  9083                           ;CC2500_B1.c: 212: if (RC2 == 1)
  9084  1B9A  0020               	movlb	0	; select bank0
  9085  1B9B  1D0E               	btfss	14,2	;volatile
  9086  1B9C  2BA0               	goto	l6148
  9087                           
  9088                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  9089  1B9D  0021               	movlb	1	; select bank1
  9090  1B9E  1441               	bsf	_SPI0Buffer^(0+128),0
  9091  1B9F  2BA6               	goto	l6150
  9092  1BA0                     l6148:	
  9093                           
  9094                           ;CC2500_B1.c: 214: else
  9095                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  9096  1BA0  30FE               	movlw	254
  9097  1BA1  0020               	movlb	0	; select bank0
  9098  1BA2  00A0               	movwf	??_CC2500_ReadByte
  9099  1BA3  0820               	movf	??_CC2500_ReadByte,w
  9100  1BA4  0021               	movlb	1	; select bank1
  9101  1BA5  05C1               	andwf	_SPI0Buffer^(0+128),f
  9102  1BA6                     l6150:	
  9103                           
  9104                           ;CC2500_B1.c: 216: RC1 = 0;
  9105  1BA6  0020               	movlb	0	; select bank0
  9106  1BA7  108E               	bcf	14,1	;volatile
  9107  1BA8  3001               	movlw	1
  9108  1BA9  00A0               	movwf	??_CC2500_ReadByte
  9109  1BAA  0820               	movf	??_CC2500_ReadByte,w
  9110  1BAB  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9111  1BAC  2B92               	goto	L12
  9112  1BAD                     __end_of_CC2500_ReadByte:	
  9113                           
  9114                           	psect	text39
  9115  276E                     __ptext39:	
  9116 ;; *************** function _RF_Initialization *****************
  9117 ;; Defined at:
  9118 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;		None
  9123 ;; Return value:  Size  Location     Type
  9124 ;;		None               void
  9125 ;; Registers used:
  9126 ;;		wreg, status,2, status,0, pclath, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        0 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    5
  9139 ;; This function calls:
  9140 ;;		_setRF_Initialization
  9141 ;; This function is called by:
  9142 ;;		_main
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function _RF_Initialization
  9148  276E                     _RF_Initialization:	
  9149                           
  9150                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9154  276E  3001               	movlw	1
  9155  276F  31A7  279B         	fcall	_setRF_Initialization
  9156  2771  0008               	return
  9157  2772                     __end_of_RF_Initialization:	
  9158                           
  9159                           	psect	text40
  9160  279B                     __ptext40:	
  9161 ;; *************** function _setRF_Initialization *****************
  9162 ;; Defined at:
  9163 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;  rf              1    wreg     unsigned char 
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;  rf              1    0[COMMON] unsigned char 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;		None               void
  9170 ;; Registers used:
  9171 ;;		wreg
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;Total ram usage:        1 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    4
  9184 ;; This function calls:
  9185 ;;		Nothing
  9186 ;; This function is called by:
  9187 ;;		_RF_Initialization
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           
  9192                           ;psect for function _setRF_Initialization
  9193  279B                     _setRF_Initialization:	
  9194                           
  9195                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  9196                           
  9197                           ;incstack = 0
  9198                           ; Regs used in _setRF_Initialization: [wreg]
  9199  279B  3015               	movlw	21
  9200  279C  0020               	movlb	0	; select bank0
  9201  279D  00A0               	movwf	??_setRF_Initialization
  9202  279E  0820               	movf	??_setRF_Initialization,w
  9203  279F  0021               	movlb	1	; select bank1
  9204  27A0  00C2               	movwf	_Tx_Length^(0+128)
  9205  27A1  0008               	return
  9206  27A2                     __end_of_setRF_Initialization:	
  9207                           
  9208                           	psect	text41
  9209  1B22                     __ptext41:	
  9210 ;; *************** function _Mcu_Initialization *****************
  9211 ;; Defined at:
  9212 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;		None               void
  9219 ;; Registers used:
  9220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        1 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    5
  9233 ;; This function calls:
  9234 ;;		_ADC_Set
  9235 ;;		_Fosc_Set
  9236 ;;		_INT_Set
  9237 ;;		_IOC_Set
  9238 ;;		_IO_Set
  9239 ;;		_TMR0_Set
  9240 ;;		_WDT_Set
  9241 ;; This function is called by:
  9242 ;;		_main
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _Mcu_Initialization
  9248  1B22                     _Mcu_Initialization:	
  9249                           
  9250                           ;MCU_B1.c: 32: Fosc_Set();
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9254  1B22  31A7  276A  319B   	fcall	_Fosc_Set
  9255                           
  9256                           ;MCU_B1.c: 34: IO_Set();
  9257  1B25  319A  22EE  319B   	fcall	_IO_Set
  9258                           
  9259                           ;MCU_B1.c: 36: TMR0_Set();
  9260  1B28  3198  20E2  319B   	fcall	_TMR0_Set
  9261                           
  9262                           ;MCU_B1.c: 38: ;;
  9263                           ;MCU_B1.c: 40: ADC_Set();
  9264  1B2B  31A7  2794  319B   	fcall	_ADC_Set
  9265                           
  9266                           ;MCU_B1.c: 44: INT_Set();
  9267  1B2E  31A7  277B  319B   	fcall	_INT_Set
  9268                           
  9269                           ;MCU_B1.c: 46: IOC_Set();
  9270  1B31  3198  20D5  319B   	fcall	_IOC_Set
  9271                           
  9272                           ;MCU_B1.c: 48: ;;
  9273                           ;MCU_B1.c: 50: ;;
  9274                           ;MCU_B1.c: 52: Memory=&VarMemory;
  9275  1B34  3020               	movlw	_VarMemory& (0+255)
  9276  1B35  0020               	movlb	0	; select bank0
  9277  1B36  00A1               	movwf	??_Mcu_Initialization
  9278  1B37  0821               	movf	??_Mcu_Initialization,w
  9279  1B38  0021               	movlb	1	; select bank1
  9280  1B39  00E6               	movwf	_Memory^(0+128)
  9281                           
  9282                           ;MCU_B1.c: 54: WDT_Set();
  9283  1B3A  319A  228B         	fcall	_WDT_Set
  9284  1B3C  0008               	return
  9285  1B3D                     __end_of_Mcu_Initialization:	
  9286                           
  9287                           	psect	text42
  9288  1A8B                     __ptext42:	
  9289 ;; *************** function _WDT_Set *****************
  9290 ;; Defined at:
  9291 ;;		line 965 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;		None
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, fsr1l, fsr1h
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;Total ram usage:        1 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    4
  9312 ;; This function calls:
  9313 ;;		Nothing
  9314 ;; This function is called by:
  9315 ;;		_Mcu_Initialization
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           
  9320                           ;psect for function _WDT_Set
  9321  1A8B                     _WDT_Set:	
  9322                           
  9323                           ;MCU_B1.c: 966: WDTCON = 0b00010111;;
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _WDT_Set: [wregfsr1]
  9327  1A8B  3017               	movlw	23
  9328  1A8C  0021               	movlb	1	; select bank1
  9329  1A8D  0097               	movwf	23	;volatile
  9330                           
  9331                           ;MCU_B1.c: 967: WDT = &_WDT;
  9332  1A8E  30E2               	movlw	__WDT& (0+255)
  9333  1A8F  0020               	movlb	0	; select bank0
  9334  1A90  00A0               	movwf	??_WDT_Set
  9335  1A91  0820               	movf	??_WDT_Set,w
  9336  1A92  0021               	movlb	1	; select bank1
  9337  1A93  00E8               	movwf	_WDT^(0+128)
  9338                           
  9339                           ;MCU_B1.c: 968: WDT->Enable = 1;
  9340  1A94  0868               	movf	_WDT^(0+128),w
  9341  1A95  0086               	movwf	6
  9342  1A96  0187               	clrf	7
  9343  1A97  1401               	bsf	1,0
  9344                           
  9345                           ;MCU_B1.c: 969: WDT->Count = 10;
  9346  1A98  300A               	movlw	10
  9347  1A99  0020               	movlb	0	; select bank0
  9348  1A9A  00A0               	movwf	??_WDT_Set
  9349  1A9B  0021               	movlb	1	; select bank1
  9350  1A9C  0A68               	incf	_WDT^(0+128),w
  9351  1A9D  0086               	movwf	6
  9352  1A9E  0187               	clrf	7
  9353  1A9F  0020               	movlb	0	; select bank0
  9354  1AA0  0820               	movf	??_WDT_Set,w
  9355  1AA1  0081               	movwf	1
  9356  1AA2  0008               	return
  9357  1AA3                     __end_of_WDT_Set:	
  9358                           
  9359                           	psect	text43
  9360  18E2                     __ptext43:	
  9361 ;; *************** function _TMR0_Set *****************
  9362 ;; Defined at:
  9363 ;;		line 128 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;		None
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;		None               void
  9370 ;; Registers used:
  9371 ;;		wreg, status,2
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;Total ram usage:        1 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:    4
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_Mcu_Initialization
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function _TMR0_Set
  9393  18E2                     _TMR0_Set:	
  9394                           
  9395                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9396                           
  9397                           ;incstack = 0
  9398                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9399  18E2  305C               	movlw	_VarTimer0& (0+255)
  9400  18E3  0020               	movlb	0	; select bank0
  9401  18E4  00A0               	movwf	??_TMR0_Set
  9402  18E5  0820               	movf	??_TMR0_Set,w
  9403  18E6  0021               	movlb	1	; select bank1
  9404  18E7  00E7               	movwf	_Timer0^(0+128)
  9405                           
  9406                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9407  18E8  0195               	clrf	21	;volatile
  9408                           
  9409                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9410  18E9  30A6               	movlw	166
  9411  18EA  0020               	movlb	0	; select bank0
  9412  18EB  0095               	movwf	21	;volatile
  9413                           
  9414                           ;MCU_B1.c: 132: TMR0IE = 1;
  9415  18EC  168B               	bsf	11,5	;volatile
  9416                           
  9417                           ;MCU_B1.c: 133: GIE = 1;
  9418  18ED  178B               	bsf	11,7	;volatile
  9419  18EE  0008               	return
  9420  18EF                     __end_of_TMR0_Set:	
  9421                           
  9422                           	psect	text44
  9423  1AEE                     __ptext44:	
  9424 ;; *************** function _IO_Set *****************
  9425 ;; Defined at:
  9426 ;;		line 62 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;		None
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;		None
  9431 ;; Return value:  Size  Location     Type
  9432 ;;		None               void
  9433 ;; Registers used:
  9434 ;;		wreg, status,2
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;Total ram usage:        0 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:    4
  9447 ;; This function calls:
  9448 ;;		Nothing
  9449 ;; This function is called by:
  9450 ;;		_Mcu_Initialization
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           
  9455                           ;psect for function _IO_Set
  9456  1AEE                     _IO_Set:	
  9457                           
  9458                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9459                           
  9460                           ;incstack = 0
  9461                           ; Regs used in _IO_Set: [wreg+status,2]
  9462  1AEE  3077               	movlw	119
  9463  1AEF  0021               	movlb	1	; select bank1
  9464  1AF0  008C               	movwf	12	;volatile
  9465                           
  9466                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9467  1AF1  3007               	movlw	7
  9468  1AF2  008D               	movwf	13	;volatile
  9469                           
  9470                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9471  1AF3  300C               	movlw	12
  9472  1AF4  008E               	movwf	14	;volatile
  9473                           
  9474                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9475  1AF5  0022               	movlb	2	; select bank2
  9476  1AF6  018C               	clrf	12	;volatile
  9477                           
  9478                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9479  1AF7  3002               	movlw	2
  9480  1AF8  008D               	movwf	13	;volatile
  9481                           
  9482                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9483  1AF9  018E               	clrf	14	;volatile
  9484                           
  9485                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9486  1AFA  3022               	movlw	34
  9487  1AFB  0023               	movlb	3	; select bank3
  9488  1AFC  008C               	movwf	12	;volatile
  9489                           
  9490                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9491  1AFD  018D               	clrf	13	;volatile
  9492                           
  9493                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9494  1AFE  018E               	clrf	14	;volatile
  9495                           
  9496                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9497  1AFF  3077               	movlw	119
  9498  1B00  0020               	movlb	0	; select bank0
  9499  1B01  008C               	movwf	12	;volatile
  9500                           
  9501                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9502  1B02  3007               	movlw	7
  9503  1B03  008D               	movwf	13	;volatile
  9504                           
  9505                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9506  1B04  300C               	movlw	12
  9507  1B05  008E               	movwf	14	;volatile
  9508  1B06  0008               	return
  9509  1B07                     __end_of_IO_Set:	
  9510                           
  9511                           	psect	text45
  9512  18D5                     __ptext45:	
  9513 ;; *************** function _IOC_Set *****************
  9514 ;; Defined at:
  9515 ;;		line 329 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;		None               void
  9522 ;; Registers used:
  9523 ;;		wreg, status,2
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        0 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    4
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_Mcu_Initialization
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _IOC_Set
  9545  18D5                     _IOC_Set:	
  9546                           
  9547                           ;MCU_B1.c: 330: WPUB2 = 0;
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _IOC_Set: [wreg+status,2]
  9551  18D5  0024               	movlb	4	; select bank4
  9552  18D6  110D               	bcf	13,2	;volatile
  9553                           
  9554                           ;MCU_B1.c: 338: IOCBP = 0b00000100;
  9555  18D7  3004               	movlw	4
  9556  18D8  0027               	movlb	7	; select bank7
  9557  18D9  0094               	movwf	20	;volatile
  9558                           
  9559                           ;MCU_B1.c: 339: IOCBN = 0b00000100;
  9560  18DA  3004               	movlw	4
  9561  18DB  0095               	movwf	21	;volatile
  9562                           
  9563                           ;MCU_B1.c: 348: IOCBF = 0b00000000;
  9564  18DC  0196               	clrf	22	;volatile
  9565                           
  9566                           ;MCU_B1.c: 350: IOCIE = 1;
  9567  18DD  158B               	bsf	11,3	;volatile
  9568                           
  9569                           ;MCU_B1.c: 351: IOCIF = 0;
  9570  18DE  100B               	bcf	11,0	;volatile
  9571                           
  9572                           ;MCU_B1.c: 352: PEIE = 1;
  9573  18DF  170B               	bsf	11,6	;volatile
  9574                           
  9575                           ;MCU_B1.c: 353: GIE = 1;
  9576  18E0  178B               	bsf	11,7	;volatile
  9577  18E1  0008               	return
  9578  18E2                     __end_of_IOC_Set:	
  9579                           
  9580                           	psect	text46
  9581  277B                     __ptext46:	
  9582 ;; *************** function _INT_Set *****************
  9583 ;; Defined at:
  9584 ;;		line 302 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;		None
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;		None
  9589 ;; Return value:  Size  Location     Type
  9590 ;;		None               void
  9591 ;; Registers used:
  9592 ;;		None
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:        0 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    4
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_Mcu_Initialization
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function _INT_Set
  9614  277B                     _INT_Set:	
  9615                           
  9616                           ;MCU_B1.c: 303: WPUB0 = 0;
  9617                           
  9618                           ;incstack = 0
  9619                           ; Regs used in _INT_Set: []
  9620  277B  0024               	movlb	4	; select bank4
  9621  277C  100D               	bcf	13,0	;volatile
  9622                           
  9623                           ;MCU_B1.c: 304: INTE = 1;
  9624  277D  160B               	bsf	11,4	;volatile
  9625                           
  9626                           ;MCU_B1.c: 305: PEIE = 1;
  9627  277E  170B               	bsf	11,6	;volatile
  9628                           
  9629                           ;MCU_B1.c: 306: GIE = 1;
  9630  277F  178B               	bsf	11,7	;volatile
  9631  2780  0008               	return
  9632  2781                     __end_of_INT_Set:	
  9633                           
  9634                           	psect	text47
  9635  276A                     __ptext47:	
  9636 ;; *************** function _Fosc_Set *****************
  9637 ;; Defined at:
  9638 ;;		line 58 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    4
  9659 ;; This function calls:
  9660 ;;		Nothing
  9661 ;; This function is called by:
  9662 ;;		_Mcu_Initialization
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           
  9667                           ;psect for function _Fosc_Set
  9668  276A                     _Fosc_Set:	
  9669                           
  9670                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9671                           
  9672                           ;incstack = 0
  9673                           ; Regs used in _Fosc_Set: [wreg]
  9674  276A  3078               	movlw	120
  9675  276B  0021               	movlb	1	; select bank1
  9676  276C  0099               	movwf	25	;volatile
  9677  276D  0008               	return
  9678  276E                     __end_of_Fosc_Set:	
  9679                           
  9680                           	psect	text48
  9681  2794                     __ptext48:	
  9682 ;; *************** function _ADC_Set *****************
  9683 ;; Defined at:
  9684 ;;		line 388 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;		None
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;		None
  9689 ;; Return value:  Size  Location     Type
  9690 ;;		None               void
  9691 ;; Registers used:
  9692 ;;		wreg
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        0 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    4
  9705 ;; This function calls:
  9706 ;;		Nothing
  9707 ;; This function is called by:
  9708 ;;		_Mcu_Initialization
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _ADC_Set
  9714  2794                     _ADC_Set:	
  9715                           
  9716                           ;MCU_B1.c: 389: ADCON1 = 0xf2;
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in _ADC_Set: [wreg]
  9720  2794  30F2               	movlw	242
  9721  2795  0021               	movlb	1	; select bank1
  9722  2796  009E               	movwf	30	;volatile
  9723                           
  9724                           ;MCU_B1.c: 390: FVRCON = 0xc0;
  9725  2797  30C0               	movlw	192
  9726  2798  0022               	movlb	2	; select bank2
  9727  2799  0097               	movwf	23	;volatile
  9728  279A  0008               	return
  9729  279B                     __end_of_ADC_Set:	
  9730                           
  9731                           	psect	text49
  9732  0329                     __ptext49:	
  9733 ;; *************** function _Load_Main *****************
  9734 ;; Defined at:
  9735 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  i               1   17[BANK0 ] unsigned char 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        5 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    9
  9756 ;; This function calls:
  9757 ;;		___lwdiv
  9758 ;;		___wmul
  9759 ;;		_setDimmerLights_Clear
  9760 ;;		_setLoad_AH_AL_Restore
  9761 ;;		_setLoad_Exceptions
  9762 ;; This function is called by:
  9763 ;;		_main
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _Load_Main
  9769  0329                     _Load_Main:	
  9770                           
  9771                           ;OverLoad_B1.c: 41: char i;
  9772                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9776  0329  087B               	movf	_Load,w
  9777  032A  0086               	movwf	6
  9778  032B  3002               	movlw	2	; select bank4/5
  9779  032C  0087               	movwf	7
  9780  032D  1E81               	btfss	1,5
  9781  032E  2B56               	goto	l9062
  9782                           
  9783                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
  9784  032F  087B               	movf	_Load,w
  9785  0330  3E03               	addlw	3
  9786  0331  0086               	movwf	6
  9787  0332  3002               	movlw	2	; select bank4/5
  9788  0333  0087               	movwf	7
  9789  0334  3001               	movlw	1
  9790  0335  0781               	addwf	1,f
  9791  0336  3141               	addfsr 1,1
  9792  0337  1803               	skipnc
  9793  0338  0A81               	incf	1,f
  9794                           
  9795                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
  9796  0339  087B               	movf	_Load,w
  9797  033A  3E03               	addlw	3
  9798  033B  0086               	movwf	6
  9799  033C  3002               	movlw	2	; select bank4/5
  9800  033D  0087               	movwf	7
  9801  033E  3F40               	moviw [0]fsr1
  9802  033F  0020               	movlb	0	; select bank0
  9803  0340  00AD               	movwf	??_Load_Main
  9804  0341  3F41               	moviw [1]fsr1
  9805  0342  00AE               	movwf	??_Load_Main+1
  9806  0343  3003               	movlw	3
  9807  0344  022E               	subwf	??_Load_Main+1,w
  9808  0345  30E8               	movlw	232
  9809  0346  1903               	skipnz
  9810  0347  022D               	subwf	??_Load_Main,w
  9811  0348  1C03               	skipc
  9812  0349  0008               	return
  9813                           
  9814                           ;OverLoad_B1.c: 45: {
  9815                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
  9816  034A  087B               	movf	_Load,w
  9817  034B  3E03               	addlw	3
  9818  034C  0086               	movwf	6
  9819  034D  3002               	movlw	2	; select bank4/5
  9820  034E  0087               	movwf	7
  9821  034F  3000               	movlw	0
  9822  0350  3FC0               	movwi [0]fsr1
  9823  0351  3FC1               	movwi [1]fsr1
  9824                           
  9825                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
  9826  0352  3000               	movlw	0
  9827  0353  319F  27BD         	fcall	_setLoad_Exceptions
  9828                           
  9829                           ;OverLoad_B1.c: 48: }
  9830                           ;OverLoad_B1.c: 49: } else {
  9831  0355  0008               	return
  9832  0356                     l9062:	
  9833                           
  9834                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
  9835  0356  087B               	movf	_Load,w
  9836  0357  0086               	movwf	6
  9837  0358  3002               	movlw	2	; select bank4/5
  9838  0359  0087               	movwf	7
  9839  035A  1E01               	btfss	1,4
  9840  035B  2D5D               	goto	l9144
  9841                           
  9842                           ;OverLoad_B1.c: 51: Load->Time++;
  9843  035C  0A7B               	incf	_Load,w
  9844  035D  0086               	movwf	6
  9845  035E  3002               	movlw	2	; select bank4/5
  9846  035F  0087               	movwf	7
  9847  0360  3001               	movlw	1
  9848  0361  0781               	addwf	1,f
  9849  0362  3141               	addfsr 1,1
  9850  0363  1803               	skipnc
  9851  0364  0A81               	incf	1,f
  9852                           
  9853                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
  9854  0365  0A7B               	incf	_Load,w
  9855  0366  0086               	movwf	6
  9856  0367  3002               	movlw	2	; select bank4/5
  9857  0368  0087               	movwf	7
  9858  0369  3F40               	moviw [0]fsr1
  9859  036A  0020               	movlb	0	; select bank0
  9860  036B  00AD               	movwf	??_Load_Main
  9861  036C  3F41               	moviw [1]fsr1
  9862  036D  00AE               	movwf	??_Load_Main+1
  9863  036E  3000               	movlw	0
  9864  036F  022E               	subwf	??_Load_Main+1,w
  9865  0370  3005               	movlw	5
  9866  0371  1903               	skipnz
  9867  0372  022D               	subwf	??_Load_Main,w
  9868  0373  1C03               	skipc
  9869  0374  0008               	return
  9870                           
  9871                           ;OverLoad_B1.c: 53: {
  9872                           ;OverLoad_B1.c: 54: Load->Time = 0;
  9873  0375  0A7B               	incf	_Load,w
  9874  0376  0086               	movwf	6
  9875  0377  3002               	movlw	2	; select bank4/5
  9876  0378  0087               	movwf	7
  9877  0379  3000               	movlw	0
  9878  037A  3FC0               	movwi [0]fsr1
  9879  037B  3FC1               	movwi [1]fsr1
  9880                           
  9881                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
  9882  037C  087B               	movf	_Load,w
  9883  037D  0086               	movwf	6
  9884  037E  3002               	movlw	2	; select bank4/5
  9885  037F  0087               	movwf	7
  9886  0380  1201               	bcf	1,4
  9887                           
  9888                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
  9889  0381  087B               	movf	_Load,w
  9890  0382  3E45               	addlw	69
  9891  0383  0086               	movwf	6
  9892  0384  3002               	movlw	2	; select bank4/5
  9893  0385  0087               	movwf	7
  9894  0386  087B               	movf	_Load,w
  9895  0387  3E44               	addlw	68
  9896  0388  0084               	movwf	4
  9897  0389  3002               	movlw	2	; select bank4/5
  9898  038A  0085               	movwf	5
  9899  038B  0800               	movf	0,w
  9900  038C  00AD               	movwf	??_Load_Main
  9901  038D  087B               	movf	_Load,w
  9902  038E  3E43               	addlw	67
  9903  038F  0084               	movwf	4
  9904  0390  3002               	movlw	2	; select bank4/5
  9905  0391  0085               	movwf	5
  9906  0392  0800               	movf	0,w
  9907  0393  072D               	addwf	??_Load_Main,w
  9908  0394  0701               	addwf	1,w
  9909  0395  00AE               	movwf	??_Load_Main+1
  9910  0396  087B               	movf	_Load,w
  9911  0397  3E3E               	addlw	62
  9912  0398  0086               	movwf	6
  9913  0399  3002               	movlw	2	; select bank4/5
  9914  039A  0087               	movwf	7
  9915  039B  082E               	movf	??_Load_Main+1,w
  9916  039C  0081               	movwf	1
  9917                           
  9918                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
  9919  039D  01B1               	clrf	Load_Main@i
  9920  039E  0AB1               	incf	Load_Main@i,f
  9921  039F  3004               	movlw	4
  9922  03A0  0231               	subwf	Load_Main@i,w
  9923  03A1  1803               	btfsc	3,0
  9924  03A2  2BD1               	goto	l9084
  9925  03A3                     l9078:	
  9926                           
  9927                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
  9928  03A3  3531               	lslf	Load_Main@i,w
  9929  03A4  3E08               	addlw	8
  9930  03A5  077B               	addwf	_Load,w
  9931  03A6  00AD               	movwf	??_Load_Main
  9932  03A7  082D               	movf	??_Load_Main,w
  9933  03A8  0086               	movwf	6
  9934  03A9  3002               	movlw	2	; select bank4/5
  9935  03AA  0087               	movwf	7
  9936  03AB  087B               	movf	_Load,w
  9937  03AC  3E2E               	addlw	46
  9938  03AD  0084               	movwf	4
  9939  03AE  3002               	movlw	2	; select bank4/5
  9940  03AF  0085               	movwf	5
  9941  03B0  3F40               	moviw [0]fsr1
  9942  03B1  0780               	addwf	0,f
  9943  03B2  3101               	addfsr 0,1
  9944  03B3  3F41               	moviw [1]fsr1
  9945  03B4  3D80               	addwfc	0,f
  9946  03B5  313F               	addfsr 0,-1
  9947                           
  9948                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
  9949  03B6  3531               	lslf	Load_Main@i,w
  9950  03B7  3E1A               	addlw	26
  9951  03B8  077B               	addwf	_Load,w
  9952  03B9  00AD               	movwf	??_Load_Main
  9953  03BA  082D               	movf	??_Load_Main,w
  9954  03BB  0086               	movwf	6
  9955  03BC  3002               	movlw	2	; select bank4/5
  9956  03BD  0087               	movwf	7
  9957  03BE  087B               	movf	_Load,w
  9958  03BF  3E30               	addlw	48
  9959  03C0  0084               	movwf	4
  9960  03C1  3002               	movlw	2	; select bank4/5
  9961  03C2  0085               	movwf	5
  9962  03C3  3F40               	moviw [0]fsr1
  9963  03C4  0780               	addwf	0,f
  9964  03C5  3101               	addfsr 0,1
  9965  03C6  3F41               	moviw [1]fsr1
  9966  03C7  3D80               	addwfc	0,f
  9967  03C8  313F               	addfsr 0,-1
  9968  03C9  3001               	movlw	1
  9969  03CA  00AD               	movwf	??_Load_Main
  9970  03CB  082D               	movf	??_Load_Main,w
  9971  03CC  07B1               	addwf	Load_Main@i,f
  9972  03CD  3004               	movlw	4
  9973  03CE  0231               	subwf	Load_Main@i,w
  9974  03CF  1C03               	skipc
  9975  03D0  2BA3               	goto	l9078
  9976  03D1                     l9084:	
  9977                           
  9978                           ;OverLoad_B1.c: 60: }
  9979                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
  9980  03D1  3003               	movlw	3
  9981  03D2  00A0               	movwf	___lwdiv@divisor
  9982  03D3  3000               	movlw	0
  9983  03D4  00A1               	movwf	___lwdiv@divisor+1
  9984  03D5  087B               	movf	_Load,w
  9985  03D6  3E2E               	addlw	46
  9986  03D7  0086               	movwf	6
  9987  03D8  3002               	movlw	2	; select bank4/5
  9988  03D9  0087               	movwf	7
  9989  03DA  3F40               	moviw [0]fsr1
  9990  03DB  00A2               	movwf	___lwdiv@dividend
  9991  03DC  3F41               	moviw [1]fsr1
  9992  03DD  00A3               	movwf	___lwdiv@dividend+1
  9993  03DE  319E  26C4  3183   	fcall	___lwdiv
  9994  03E1  087B               	movf	_Load,w
  9995  03E2  3E2E               	addlw	46
  9996  03E3  0086               	movwf	6
  9997  03E4  3002               	movlw	2	; select bank4/5
  9998  03E5  0087               	movwf	7
  9999  03E6  0020               	movlb	0	; select bank0
 10000  03E7  0820               	movf	?___lwdiv,w
 10001  03E8  3FC0               	movwi [0]fsr1
 10002  03E9  0821               	movf	?___lwdiv+1,w
 10003  03EA  3FC1               	movwi [1]fsr1
 10004                           
 10005                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 10006  03EB  3003               	movlw	3
 10007  03EC  00A0               	movwf	___lwdiv@divisor
 10008  03ED  3000               	movlw	0
 10009  03EE  00A1               	movwf	___lwdiv@divisor+1
 10010  03EF  087B               	movf	_Load,w
 10011  03F0  3E30               	addlw	48
 10012  03F1  0086               	movwf	6
 10013  03F2  3002               	movlw	2	; select bank4/5
 10014  03F3  0087               	movwf	7
 10015  03F4  3F40               	moviw [0]fsr1
 10016  03F5  00A2               	movwf	___lwdiv@dividend
 10017  03F6  3F41               	moviw [1]fsr1
 10018  03F7  00A3               	movwf	___lwdiv@dividend+1
 10019  03F8  319E  26C4  3183   	fcall	___lwdiv
 10020  03FB  087B               	movf	_Load,w
 10021  03FC  3E30               	addlw	48
 10022  03FD  0086               	movwf	6
 10023  03FE  3002               	movlw	2	; select bank4/5
 10024  03FF  0087               	movwf	7
 10025  0400  0020               	movlb	0	; select bank0
 10026  0401  0820               	movf	?___lwdiv,w
 10027  0402  3FC0               	movwi [0]fsr1
 10028  0403  0821               	movf	?___lwdiv+1,w
 10029  0404  3FC1               	movwi [1]fsr1
 10030                           
 10031                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 10032  0405  087B               	movf	_Load,w
 10033  0406  3E2E               	addlw	46
 10034  0407  0086               	movwf	6
 10035  0408  3002               	movlw	2	; select bank4/5
 10036  0409  0087               	movwf	7
 10037  040A  3F40               	moviw [0]fsr1
 10038  040B  00AD               	movwf	??_Load_Main
 10039  040C  3F41               	moviw [1]fsr1
 10040  040D  00AE               	movwf	??_Load_Main+1
 10041  040E  087B               	movf	_Load,w
 10042  040F  3E30               	addlw	48
 10043  0410  0086               	movwf	6
 10044  0411  3002               	movlw	2	; select bank4/5
 10045  0412  0087               	movwf	7
 10046  0413  3F40               	moviw [0]fsr1
 10047  0414  00AF               	movwf	??_Load_Main+2
 10048  0415  3F41               	moviw [1]fsr1
 10049  0416  00B0               	movwf	??_Load_Main+3
 10050  0417  082E               	movf	??_Load_Main+1,w
 10051  0418  0230               	subwf	??_Load_Main+3,w
 10052  0419  1D03               	skipz
 10053  041A  2C1D               	goto	u9045
 10054  041B  082D               	movf	??_Load_Main,w
 10055  041C  022F               	subwf	??_Load_Main+2,w
 10056  041D                     u9045:	
 10057  041D  1803               	skipnc
 10058  041E  2D5A               	goto	l9142
 10059                           
 10060                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 10061  041F  087B               	movf	_Load,w
 10062  0420  3E2E               	addlw	46
 10063  0421  0086               	movwf	6
 10064  0422  3002               	movlw	2	; select bank4/5
 10065  0423  0087               	movwf	7
 10066  0424  087B               	movf	_Load,w
 10067  0425  3E30               	addlw	48
 10068  0426  0084               	movwf	4
 10069  0427  3002               	movlw	2	; select bank4/5
 10070  0428  0085               	movwf	5
 10071  0429  3F00               	moviw [0]fsr0
 10072  042A  00AD               	movwf	??_Load_Main
 10073  042B  3F01               	moviw [1]fsr0
 10074  042C  00AE               	movwf	??_Load_Main+1
 10075  042D  09AD               	comf	??_Load_Main,f
 10076  042E  09AE               	comf	??_Load_Main+1,f
 10077  042F  0AAD               	incf	??_Load_Main,f
 10078  0430  1903               	skipnz
 10079  0431  0AAE               	incf	??_Load_Main+1,f
 10080  0432  3F40               	moviw [0]fsr1
 10081  0433  072D               	addwf	??_Load_Main,w
 10082  0434  00AF               	movwf	??_Load_Main+2
 10083  0435  3F41               	moviw [1]fsr1
 10084  0436  3D2E               	addwfc	??_Load_Main+1,w
 10085  0437  00B0               	movwf	??_Load_Main+3
 10086  0438  087B               	movf	_Load,w
 10087  0439  3E2C               	addlw	44
 10088  043A  0086               	movwf	6
 10089  043B  3002               	movlw	2	; select bank4/5
 10090  043C  0087               	movwf	7
 10091  043D  082F               	movf	??_Load_Main+2,w
 10092  043E  3FC0               	movwi [0]fsr1
 10093  043F  0830               	movf	??_Load_Main+3,w
 10094  0440  3FC1               	movwi [1]fsr1
 10095                           
 10096                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 10097  0441  087B               	movf	_Load,w
 10098  0442  3E3A               	addlw	58
 10099  0443  0086               	movwf	6
 10100  0444  3002               	movlw	2	; select bank4/5
 10101  0445  0087               	movwf	7
 10102  0446  3002               	movlw	2
 10103  0447  0201               	subwf	1,w
 10104  0448  1803               	skipnc
 10105  0449  2C9A               	goto	l9106
 10106                           
 10107                           ;OverLoad_B1.c: 67: Load->Count++;
 10108  044A  3001               	movlw	1
 10109  044B  00AD               	movwf	??_Load_Main
 10110  044C  087B               	movf	_Load,w
 10111  044D  3E3A               	addlw	58
 10112  044E  0086               	movwf	6
 10113  044F  3002               	movlw	2	; select bank4/5
 10114  0450  0087               	movwf	7
 10115  0451  082D               	movf	??_Load_Main,w
 10116  0452  0781               	addwf	1,f
 10117                           
 10118                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 10119  0453  087B               	movf	_Load,w
 10120  0454  3E3A               	addlw	58
 10121  0455  0086               	movwf	6
 10122  0456  3002               	movlw	2	; select bank4/5
 10123  0457  0087               	movwf	7
 10124  0458  0801               	movf	1,w
 10125  0459  3A01               	xorlw	1
 10126  045A  1D03               	skipz
 10127  045B  2C66               	goto	l9098
 10128                           
 10129                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 10130  045C  087B               	movf	_Load,w
 10131  045D  3E36               	addlw	54
 10132  045E  0086               	movwf	6
 10133  045F  3002               	movlw	2	; select bank4/5
 10134  0460  0087               	movwf	7
 10135  0461  30F4               	movlw	244
 10136  0462  3FC0               	movwi [0]fsr1
 10137  0463  3001               	movlw	1
 10138  0464  3FC1               	movwi [1]fsr1
 10139                           
 10140                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 10141  0465  2C9A               	goto	l9106
 10142  0466                     l9098:	
 10143  0466  087B               	movf	_Load,w
 10144  0467  3E3A               	addlw	58
 10145  0468  0086               	movwf	6
 10146  0469  3002               	movlw	2	; select bank4/5
 10147  046A  0087               	movwf	7
 10148  046B  0801               	movf	1,w
 10149  046C  3A02               	xorlw	2
 10150  046D  1D03               	skipz
 10151  046E  2C9A               	goto	l9106
 10152                           
 10153                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 10154  046F  087B               	movf	_Load,w
 10155  0470  3E3E               	addlw	62
 10156  0471  0086               	movwf	6
 10157  0472  3002               	movlw	2	; select bank4/5
 10158  0473  0087               	movwf	7
 10159  0474  0801               	movf	1,w
 10160  0475  3A01               	xorlw	1
 10161  0476  1D03               	skipz
 10162  0477  2C82               	goto	l9104
 10163                           
 10164                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x32;
 10165  0478  087B               	movf	_Load,w
 10166  0479  3E36               	addlw	54
 10167  047A  0086               	movwf	6
 10168  047B  3002               	movlw	2	; select bank4/5
 10169  047C  0087               	movwf	7
 10170  047D  3032               	movlw	50
 10171  047E  3FC0               	movwi [0]fsr1
 10172  047F  3000               	movlw	0
 10173  0480  3FC1               	movwi [1]fsr1
 10174                           
 10175                           ;OverLoad_B1.c: 73: } else {
 10176  0481  2C9A               	goto	l9106
 10177  0482                     l9104:	
 10178                           
 10179                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x32 + Load->TotalLoad) - 0x08;
 10180  0482  087B               	movf	_Load,w
 10181  0483  3E06               	addlw	6
 10182  0484  0086               	movwf	6
 10183  0485  3002               	movlw	2	; select bank4/5
 10184  0486  0087               	movwf	7
 10185  0487  3F40               	moviw [0]fsr1
 10186  0488  00AD               	movwf	??_Load_Main
 10187  0489  3F41               	moviw [1]fsr1
 10188  048A  00AE               	movwf	??_Load_Main+1
 10189  048B  082D               	movf	??_Load_Main,w
 10190  048C  3E2A               	addlw	42
 10191  048D  00AF               	movwf	??_Load_Main+2
 10192  048E  3000               	movlw	0
 10193  048F  3D2E               	addwfc	??_Load_Main+1,w
 10194  0490  00B0               	movwf	??_Load_Main+3
 10195  0491  087B               	movf	_Load,w
 10196  0492  3E36               	addlw	54
 10197  0493  0086               	movwf	6
 10198  0494  3002               	movlw	2	; select bank4/5
 10199  0495  0087               	movwf	7
 10200  0496  082F               	movf	??_Load_Main+2,w
 10201  0497  3FC0               	movwi [0]fsr1
 10202  0498  0830               	movf	??_Load_Main+3,w
 10203  0499  3FC1               	movwi [1]fsr1
 10204  049A                     l9106:	
 10205                           
 10206                           ;OverLoad_B1.c: 75: }
 10207                           ;OverLoad_B1.c: 76: }
 10208                           ;OverLoad_B1.c: 77: }
 10209                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 10210  049A  087B               	movf	_Load,w
 10211  049B  3E36               	addlw	54
 10212  049C  0086               	movwf	6
 10213  049D  3002               	movlw	2	; select bank4/5
 10214  049E  0087               	movwf	7
 10215  049F  3F40               	moviw [0]fsr1
 10216  04A0  00AD               	movwf	??_Load_Main
 10217  04A1  3F41               	moviw [1]fsr1
 10218  04A2  00AE               	movwf	??_Load_Main+1
 10219  04A3  087B               	movf	_Load,w
 10220  04A4  3E2C               	addlw	44
 10221  04A5  0086               	movwf	6
 10222  04A6  3002               	movlw	2	; select bank4/5
 10223  04A7  0087               	movwf	7
 10224  04A8  3F40               	moviw [0]fsr1
 10225  04A9  00AF               	movwf	??_Load_Main+2
 10226  04AA  3F41               	moviw [1]fsr1
 10227  04AB  00B0               	movwf	??_Load_Main+3
 10228  04AC  082E               	movf	??_Load_Main+1,w
 10229  04AD  0230               	subwf	??_Load_Main+3,w
 10230  04AE  1D03               	skipz
 10231  04AF  2CB2               	goto	u9095
 10232  04B0  082D               	movf	??_Load_Main,w
 10233  04B1  022F               	subwf	??_Load_Main+2,w
 10234  04B2                     u9095:	
 10235  04B2  1C03               	skipc
 10236  04B3  2CD1               	goto	l9116
 10237                           
 10238                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 10239  04B4  3001               	movlw	1
 10240  04B5  00AD               	movwf	??_Load_Main
 10241  04B6  087B               	movf	_Load,w
 10242  04B7  3E3C               	addlw	60
 10243  04B8  0086               	movwf	6
 10244  04B9  3002               	movlw	2	; select bank4/5
 10245  04BA  0087               	movwf	7
 10246  04BB  082D               	movf	??_Load_Main,w
 10247  04BC  0781               	addwf	1,f
 10248                           
 10249                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 10250  04BD  087B               	movf	_Load,w
 10251  04BE  3E3C               	addlw	60
 10252  04BF  0086               	movwf	6
 10253  04C0  3002               	movlw	2	; select bank4/5
 10254  04C1  0087               	movwf	7
 10255  04C2  3003               	movlw	3
 10256  04C3  0201               	subwf	1,w
 10257  04C4  1C03               	skipc
 10258  04C5  2D5A               	goto	l9142
 10259                           
 10260                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 10261  04C6  087B               	movf	_Load,w
 10262  04C7  3E3C               	addlw	60
 10263  04C8  0086               	movwf	6
 10264  04C9  3002               	movlw	2	; select bank4/5
 10265  04CA  0087               	movwf	7
 10266  04CB  0181               	clrf	1
 10267                           
 10268                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 10269  04CC  3001               	movlw	1
 10270  04CD  319F  27BD  3183   	fcall	_setLoad_Exceptions
 10271                           
 10272                           ;OverLoad_B1.c: 92: }
 10273                           ;OverLoad_B1.c: 93: } else {
 10274  04D0  2D5A               	goto	l9142
 10275  04D1                     l9116:	
 10276                           
 10277                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 10278  04D1  087B               	movf	_Load,w
 10279  04D2  3E3C               	addlw	60
 10280  04D3  0086               	movwf	6
 10281  04D4  3002               	movlw	2	; select bank4/5
 10282  04D5  0087               	movwf	7
 10283  04D6  0181               	clrf	1
 10284                           
 10285                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 10286  04D7  087B               	movf	_Load,w
 10287  04D8  3E42               	addlw	66
 10288  04D9  0086               	movwf	6
 10289  04DA  3002               	movlw	2	; select bank4/5
 10290  04DB  0087               	movwf	7
 10291  04DC  300A               	movlw	10
 10292  04DD  0201               	subwf	1,w
 10293  04DE  1803               	skipnc
 10294  04DF  2CEA               	goto	l9122
 10295                           
 10296                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 10297  04E0  3001               	movlw	1
 10298  04E1  0020               	movlb	0	; select bank0
 10299  04E2  00AD               	movwf	??_Load_Main
 10300  04E3  087B               	movf	_Load,w
 10301  04E4  3E42               	addlw	66
 10302  04E5  0086               	movwf	6
 10303  04E6  3002               	movlw	2	; select bank4/5
 10304  04E7  0087               	movwf	7
 10305  04E8  082D               	movf	??_Load_Main,w
 10306  04E9  0781               	addwf	1,f
 10307  04EA                     l9122:	
 10308                           
 10309                           ;OverLoad_B1.c: 97: }
 10310                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 10311  04EA  087B               	movf	_Load,w
 10312  04EB  3E42               	addlw	66
 10313  04EC  0086               	movwf	6
 10314  04ED  3002               	movlw	2	; select bank4/5
 10315  04EE  0087               	movwf	7
 10316  04EF  300A               	movlw	10
 10317  04F0  0201               	subwf	1,w
 10318  04F1  1C03               	skipc
 10319  04F2  2D5A               	goto	l9142
 10320                           
 10321                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 10322  04F3  087B               	movf	_Load,w
 10323  04F4  0086               	movwf	6
 10324  04F5  3002               	movlw	2	; select bank4/5
 10325  04F6  0087               	movwf	7
 10326  04F7  1581               	bsf	1,3
 10327                           
 10328                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 10329  04F8  0020               	movlb	0	; select bank0
 10330  04F9  01A2               	clrf	setDimmerLights_Clear@command
 10331  04FA  0AA2               	incf	setDimmerLights_Clear@command,f
 10332  04FB  3001               	movlw	1
 10333  04FC  3199  2168  3183   	fcall	_setDimmerLights_Clear
 10334                           
 10335                           ;OverLoad_B1.c: 107: ;;
 10336                           ;OverLoad_B1.c: 113: setDimmerLights_Clear(2, 1);
 10337  04FF  0020               	movlb	0	; select bank0
 10338  0500  01A2               	clrf	setDimmerLights_Clear@command
 10339  0501  0AA2               	incf	setDimmerLights_Clear@command,f
 10340  0502  3002               	movlw	2
 10341  0503  3199  2168  3183   	fcall	_setDimmerLights_Clear
 10342                           
 10343                           ;OverLoad_B1.c: 117: ;;
 10344                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 10345  0506  087B               	movf	_Load,w
 10346  0507  3E46               	addlw	70
 10347  0508  0086               	movwf	6
 10348  0509  3002               	movlw	2	; select bank4/5
 10349  050A  0087               	movwf	7
 10350  050B  1C01               	btfss	1,0
 10351  050C  2D21               	goto	l9134
 10352                           
 10353                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 10354  050D  087B               	movf	_Load,w
 10355  050E  3E46               	addlw	70
 10356  050F  0086               	movwf	6
 10357  0510  3002               	movlw	2	; select bank4/5
 10358  0511  0087               	movwf	7
 10359  0512  1001               	bcf	1,0
 10360                           
 10361                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 10362  0513  087B               	movf	_Load,w
 10363  0514  3E2C               	addlw	44
 10364  0515  0086               	movwf	6
 10365  0516  3002               	movlw	2	; select bank4/5
 10366  0517  0087               	movwf	7
 10367  0518  087B               	movf	_Load,w
 10368  0519  3E06               	addlw	6
 10369  051A  0084               	movwf	4
 10370  051B  3002               	movlw	2	; select bank4/5
 10371  051C  0085               	movwf	5
 10372  051D  3F40               	moviw [0]fsr1
 10373  051E  3F80               	movwi [0]fsr0
 10374  051F  3F41               	moviw [1]fsr1
 10375  0520  3F81               	movwi [1]fsr0
 10376  0521                     l9134:	
 10377                           
 10378                           ;OverLoad_B1.c: 136: }
 10379                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 10380  0521  087B               	movf	_Load,w
 10381  0522  3E46               	addlw	70
 10382  0523  0086               	movwf	6
 10383  0524  3002               	movlw	2	; select bank4/5
 10384  0525  0087               	movwf	7
 10385  0526  1C81               	btfss	1,1
 10386  0527  2D5A               	goto	l9142
 10387                           
 10388                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 10389  0528  087B               	movf	_Load,w
 10390  0529  3E46               	addlw	70
 10391  052A  0086               	movwf	6
 10392  052B  3002               	movlw	2	; select bank4/5
 10393  052C  0087               	movwf	7
 10394  052D  1081               	bcf	1,1
 10395                           
 10396                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 10397  052E  087B               	movf	_Load,w
 10398  052F  3E2C               	addlw	44
 10399  0530  0086               	movwf	6
 10400  0531  3002               	movlw	2	; select bank4/5
 10401  0532  0087               	movwf	7
 10402  0533  087B               	movf	_Load,w
 10403  0534  3E06               	addlw	6
 10404  0535  0084               	movwf	4
 10405  0536  3002               	movlw	2	; select bank4/5
 10406  0537  0085               	movwf	5
 10407  0538  3F40               	moviw [0]fsr1
 10408  0539  3F80               	movwi [0]fsr0
 10409  053A  3F41               	moviw [1]fsr1
 10410  053B  3F81               	movwi [1]fsr0
 10411                           
 10412                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x32 * Load->LightsCount;
 10413  053C  087B               	movf	_Load,w
 10414  053D  3E3E               	addlw	62
 10415  053E  0086               	movwf	6
 10416  053F  3002               	movlw	2	; select bank4/5
 10417  0540  0087               	movwf	7
 10418  0541  0801               	movf	1,w
 10419  0542  0020               	movlb	0	; select bank0
 10420  0543  00AD               	movwf	??_Load_Main
 10421  0544  01AE               	clrf	??_Load_Main+1
 10422  0545  082D               	movf	??_Load_Main,w
 10423  0546  00A0               	movwf	___wmul@multiplier
 10424  0547  082E               	movf	??_Load_Main+1,w
 10425  0548  00A1               	movwf	___wmul@multiplier+1
 10426  0549  3032               	movlw	50
 10427  054A  00A2               	movwf	___wmul@multiplicand
 10428  054B  3000               	movlw	0
 10429  054C  00A3               	movwf	___wmul@multiplicand+1
 10430  054D  319B  23AD  3183   	fcall	___wmul
 10431  0550  087B               	movf	_Load,w
 10432  0551  3E36               	addlw	54
 10433  0552  0086               	movwf	6
 10434  0553  3002               	movlw	2	; select bank4/5
 10435  0554  0087               	movwf	7
 10436  0555  0020               	movlb	0	; select bank0
 10437  0556  0820               	movf	?___wmul,w
 10438  0557  3FC0               	movwi [0]fsr1
 10439  0558  0821               	movf	?___wmul+1,w
 10440  0559  3FC1               	movwi [1]fsr1
 10441  055A                     l9142:	
 10442                           
 10443                           ;OverLoad_B1.c: 142: }
 10444                           ;OverLoad_B1.c: 143: }
 10445                           ;OverLoad_B1.c: 144: }
 10446                           ;OverLoad_B1.c: 145: }
 10447                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 10448  055A  319C  244E         	fcall	_setLoad_AH_AL_Restore
 10449                           
 10450                           ;OverLoad_B1.c: 158: }
 10451                           ;OverLoad_B1.c: 159: } else {
 10452  055C  0008               	return
 10453  055D                     l9144:	
 10454                           
 10455                           ;OverLoad_B1.c: 160: if (Load->GO) {
 10456  055D  087B               	movf	_Load,w
 10457  055E  0086               	movwf	6
 10458  055F  3002               	movlw	2	; select bank4/5
 10459  0560  0087               	movwf	7
 10460  0561  1C81               	btfss	1,1
 10461  0562  2D79               	goto	l9150
 10462                           
 10463                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 10464  0563  087B               	movf	_Load,w
 10465  0564  0086               	movwf	6
 10466  0565  3002               	movlw	2	; select bank4/5
 10467  0566  0087               	movwf	7
 10468  0567  1901               	btfsc	1,2
 10469  0568  2D73               	goto	l1769
 10470                           
 10471                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 10472  0569  087B               	movf	_Load,w
 10473  056A  0086               	movwf	6
 10474  056B  3002               	movlw	2	; select bank4/5
 10475  056C  0087               	movwf	7
 10476  056D  1501               	bsf	1,2
 10477                           
 10478                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 10479  056E  087B               	movf	_Load,w
 10480  056F  0086               	movwf	6
 10481  0570  3002               	movlw	2	; select bank4/5
 10482  0571  0087               	movwf	7
 10483  0572  1181               	bcf	1,3
 10484  0573                     l1769:	
 10485                           ;OverLoad_B1.c: 164: }
 10486                           ;OverLoad_B1.c: 165: if (1 && 1) {
 10487                           
 10488                           
 10489                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 10490  0573  087B               	movf	_Load,w
 10491  0574  0086               	movwf	6
 10492  0575  3002               	movlw	2	; select bank4/5
 10493  0576  0087               	movwf	7
 10494  0577  1601               	bsf	1,4
 10495                           
 10496                           ;OverLoad_B1.c: 167: }
 10497                           ;OverLoad_B1.c: 168: } else {
 10498  0578  0008               	return
 10499  0579                     l9150:	
 10500                           
 10501                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 10502  0579  087B               	movf	_Load,w
 10503  057A  0086               	movwf	6
 10504  057B  3002               	movlw	2	; select bank4/5
 10505  057C  0087               	movwf	7
 10506  057D  1D01               	btfss	1,2
 10507  057E  0008               	return
 10508                           
 10509                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 10510  057F  087B               	movf	_Load,w
 10511  0580  0086               	movwf	6
 10512  0581  3002               	movlw	2	; select bank4/5
 10513  0582  0087               	movwf	7
 10514  0583  1101               	bcf	1,2
 10515                           
 10516                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 10517  0584  087B               	movf	_Load,w
 10518  0585  0086               	movwf	6
 10519  0586  3002               	movlw	2	; select bank4/5
 10520  0587  0087               	movwf	7
 10521  0588  1581               	bsf	1,3
 10522                           
 10523                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 10524  0589  087B               	movf	_Load,w
 10525  058A  3E3C               	addlw	60
 10526  058B  0086               	movwf	6
 10527  058C  3002               	movlw	2	; select bank4/5
 10528  058D  0087               	movwf	7
 10529  058E  0181               	clrf	1
 10530                           
 10531                           ;OverLoad_B1.c: 173: Load->Count = 0;
 10532  058F  087B               	movf	_Load,w
 10533  0590  3E3A               	addlw	58
 10534  0591  0086               	movwf	6
 10535  0592  3002               	movlw	2	; select bank4/5
 10536  0593  0087               	movwf	7
 10537  0594  0181               	clrf	1
 10538                           
 10539                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 10540  0595  087B               	movf	_Load,w
 10541  0596  3E06               	addlw	6
 10542  0597  0086               	movwf	6
 10543  0598  3002               	movlw	2	; select bank4/5
 10544  0599  0087               	movwf	7
 10545  059A  3000               	movlw	0
 10546  059B  3FC0               	movwi [0]fsr1
 10547  059C  3FC1               	movwi [1]fsr1
 10548                           
 10549                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 10550  059D  087B               	movf	_Load,w
 10551  059E  3E3F               	addlw	63
 10552  059F  0086               	movwf	6
 10553  05A0  3002               	movlw	2	; select bank4/5
 10554  05A1  0087               	movwf	7
 10555  05A2  0181               	clrf	1
 10556                           
 10557                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 10558  05A3  087B               	movf	_Load,w
 10559  05A4  3E46               	addlw	70
 10560  05A5  0086               	movwf	6
 10561  05A6  3002               	movlw	2	; select bank4/5
 10562  05A7  0087               	movwf	7
 10563  05A8  1001               	bcf	1,0
 10564                           
 10565                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 10566  05A9  087B               	movf	_Load,w
 10567  05AA  3E46               	addlw	70
 10568  05AB  0086               	movwf	6
 10569  05AC  3002               	movlw	2	; select bank4/5
 10570  05AD  0087               	movwf	7
 10571  05AE  1081               	bcf	1,1
 10572                           
 10573                           ;OverLoad_B1.c: 178: Load->AD = 0;
 10574  05AF  087B               	movf	_Load,w
 10575  05B0  3E2C               	addlw	44
 10576  05B1  0086               	movwf	6
 10577  05B2  3002               	movlw	2	; select bank4/5
 10578  05B3  0087               	movwf	7
 10579  05B4  3000               	movlw	0
 10580  05B5  3FC0               	movwi [0]fsr1
 10581  05B6  3FC1               	movwi [1]fsr1
 10582                           
 10583                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 10584  05B7  319C  244E  3183   	fcall	_setLoad_AH_AL_Restore
 10585                           
 10586                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 10587  05BA  0020               	movlb	0	; select bank0
 10588  05BB  01A2               	clrf	setDimmerLights_Clear@command
 10589  05BC  0AA2               	incf	setDimmerLights_Clear@command,f
 10590  05BD  3001               	movlw	1
 10591  05BE  3199  2168  3183   	fcall	_setDimmerLights_Clear
 10592                           
 10593                           ;OverLoad_B1.c: 187: ;;
 10594                           ;OverLoad_B1.c: 193: setDimmerLights_Clear(2, 1);
 10595  05C1  0020               	movlb	0	; select bank0
 10596  05C2  01A2               	clrf	setDimmerLights_Clear@command
 10597  05C3  0AA2               	incf	setDimmerLights_Clear@command,f
 10598  05C4  3002               	movlw	2
 10599  05C5  3199  2168         	fcall	_setDimmerLights_Clear
 10600                           
 10601                           ;OverLoad_B1.c: 197: ;;
 10602  05C7  0008               	return
 10603  05C8                     __end_of_Load_Main:	
 10604                           
 10605                           	psect	text50
 10606  1FBD                     __ptext50:	
 10607 ;; *************** function _setLoad_Exceptions *****************
 10608 ;; Defined at:
 10609 ;;		line 232 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;  command         1    wreg     unsigned char 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  command         1   12[BANK0 ] unsigned char 
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;Total ram usage:        2 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    8
 10630 ;; This function calls:
 10631 ;;		_DimmerLights_Exceptions
 10632 ;;		_setLED
 10633 ;;		_setRF_Enable
 10634 ;;		_setSw_Enable
 10635 ;; This function is called by:
 10636 ;;		_Load_Main
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _setLoad_Exceptions
 10642  1FBD                     _setLoad_Exceptions:	
 10643                           
 10644                           ;incstack = 0
 10645                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10646                           ;setLoad_Exceptions@command stored from wreg
 10647  1FBD  0020               	movlb	0	; select bank0
 10648  1FBE  00AC               	movwf	setLoad_Exceptions@command
 10649                           
 10650                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 10651  1FBF  087B               	movf	_Load,w
 10652  1FC0  0086               	movwf	6
 10653  1FC1  3002               	movlw	2	; select bank4/5
 10654  1FC2  0087               	movwf	7
 10655  1FC3  082C               	movf	setLoad_Exceptions@command,w
 10656  1FC4  1281               	bcf	1,5
 10657  1FC5  1D03               	skipz
 10658  1FC6  1681               	bsf	1,5
 10659                           
 10660                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 10661  1FC7  092C               	comf	setLoad_Exceptions@command,w
 10662  1FC8  3901               	andlw	1
 10663  1FC9  00AB               	movwf	??_setLoad_Exceptions
 10664  1FCA  087B               	movf	_Load,w
 10665  1FCB  0086               	movwf	6
 10666  1FCC  3002               	movlw	2	; select bank4/5
 10667  1FCD  0087               	movwf	7
 10668  1FCE  0DAB               	rlf	??_setLoad_Exceptions,f
 10669  1FCF  0DAB               	rlf	??_setLoad_Exceptions,f
 10670  1FD0  0DAB               	rlf	??_setLoad_Exceptions,f
 10671  1FD1  0801               	movf	1,w
 10672  1FD2  062B               	xorwf	??_setLoad_Exceptions,w
 10673  1FD3  39F7               	andlw	-9
 10674  1FD4  062B               	xorwf	??_setLoad_Exceptions,w
 10675  1FD5  0081               	movwf	1
 10676                           
 10677                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 10678  1FD6  082C               	movf	setLoad_Exceptions@command,w
 10679  1FD7  00AB               	movwf	??_setLoad_Exceptions
 10680  1FD8  087B               	movf	_Load,w
 10681  1FD9  3E05               	addlw	5
 10682  1FDA  0086               	movwf	6
 10683  1FDB  3002               	movlw	2	; select bank4/5
 10684  1FDC  0087               	movwf	7
 10685  1FDD  082B               	movf	??_setLoad_Exceptions,w
 10686  1FDE  0081               	movwf	1
 10687                           
 10688                           ;OverLoad_B1.c: 237: if (command) {
 10689  1FDF  082C               	movf	setLoad_Exceptions@command,w
 10690  1FE0  1903               	btfsc	3,2
 10691  1FE1  2FE6               	goto	l1776
 10692                           
 10693                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 10694  1FE2  3002               	movlw	2
 10695  1FE3  3194  2469  319F   	fcall	_DimmerLights_Exceptions
 10696  1FE6                     l1776:	
 10697                           
 10698                           ;OverLoad_B1.c: 242: }
 10699                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 10700  1FE6  0020               	movlb	0	; select bank0
 10701  1FE7  082C               	movf	setLoad_Exceptions@command,w
 10702  1FE8  3E0A               	addlw	10
 10703  1FE9  00AB               	movwf	??_setLoad_Exceptions
 10704  1FEA  082B               	movf	??_setLoad_Exceptions,w
 10705  1FEB  00A2               	movwf	setLED@command
 10706  1FEC  3063               	movlw	99
 10707  1FED  3192  22E8  319F   	fcall	_setLED
 10708                           
 10709                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 10710  1FF0  0020               	movlb	0	; select bank0
 10711  1FF1  092C               	comf	setLoad_Exceptions@command,w
 10712  1FF2  3901               	andlw	1
 10713  1FF3  319B  2358  319F   	fcall	_setSw_Enable
 10714                           
 10715                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 10716  1FF6  0020               	movlb	0	; select bank0
 10717  1FF7  092C               	comf	setLoad_Exceptions@command,w
 10718  1FF8  3901               	andlw	1
 10719  1FF9  00AB               	movwf	??_setLoad_Exceptions
 10720  1FFA  082B               	movf	??_setLoad_Exceptions,w
 10721  1FFB  00A2               	movwf	setRF_Enable@command
 10722  1FFC  3001               	movlw	1
 10723  1FFD  319D  2513         	fcall	_setRF_Enable
 10724  1FFF  0008               	return
 10725  2000                     __end_of_setLoad_Exceptions:	
 10726                           
 10727                           	psect	text51
 10728  1B58                     __ptext51:	
 10729 ;; *************** function _setSw_Enable *****************
 10730 ;; Defined at:
 10731 ;;		line 85 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  command         1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  command         1    2[BANK0 ] unsigned char 
 10736 ;; Return value:  Size  Location     Type
 10737 ;;		None               void
 10738 ;; Registers used:
 10739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;Total ram usage:        1 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    5
 10752 ;; This function calls:
 10753 ;;		_SwPointSelect
 10754 ;; This function is called by:
 10755 ;;		_my_Main
 10756 ;;		_setLoad_Exceptions
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _setSw_Enable
 10762  1B58                     _setSw_Enable:	
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10766                           ;setSw_Enable@command stored from wreg
 10767  1B58  0020               	movlb	0	; select bank0
 10768  1B59  00A2               	movwf	setSw_Enable@command
 10769                           
 10770                           ;Switch_B1.c: 88: SwPointSelect(1);
 10771  1B5A  3001               	movlw	1
 10772  1B5B  3199  21CC  319B   	fcall	_SwPointSelect
 10773                           
 10774                           ;Switch_B1.c: 89: Sw->Enable = command;
 10775  1B5E  087A               	movf	_Sw,w
 10776  1B5F  0086               	movwf	6
 10777  1B60  3001               	movlw	1	; select bank2/3
 10778  1B61  0087               	movwf	7
 10779  1B62  0020               	movlb	0	; select bank0
 10780  1B63  0822               	movf	setSw_Enable@command,w
 10781  1B64  1001               	bcf	1,0
 10782  1B65  1D03               	skipz
 10783  1B66  1401               	bsf	1,0
 10784                           
 10785                           ;Switch_B1.c: 93: SwPointSelect(2);
 10786  1B67  3002               	movlw	2
 10787  1B68  3199  21CC         	fcall	_SwPointSelect
 10788                           
 10789                           ;Switch_B1.c: 94: Sw->Enable = command;
 10790  1B6A  087A               	movf	_Sw,w
 10791  1B6B  0086               	movwf	6
 10792  1B6C  3001               	movlw	1	; select bank2/3
 10793  1B6D  0087               	movwf	7
 10794  1B6E  0020               	movlb	0	; select bank0
 10795  1B6F  0822               	movf	setSw_Enable@command,w
 10796  1B70  1001               	bcf	1,0
 10797  1B71  1D03               	skipz
 10798  1B72  1401               	bsf	1,0
 10799  1B73  0008               	return
 10800  1B74                     __end_of_setSw_Enable:	
 10801                           
 10802                           	psect	text52
 10803  1D13                     __ptext52:	
 10804 ;; *************** function _setRF_Enable *****************
 10805 ;; Defined at:
 10806 ;;		line 174 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;  rf              1    wreg     unsigned char 
 10809 ;;  command         1    2[BANK0 ] unsigned char 
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;  rf              1    3[BANK0 ] unsigned char 
 10812 ;; Return value:  Size  Location     Type
 10813 ;;		None               void
 10814 ;; Registers used:
 10815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 0/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10821 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;Total ram usage:        2 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    5
 10828 ;; This function calls:
 10829 ;;		_RfPointSelect
 10830 ;;		_setINT_GO
 10831 ;; This function is called by:
 10832 ;;		_my_Main
 10833 ;;		_setLoad_Exceptions
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           
 10838                           ;psect for function _setRF_Enable
 10839  1D13                     _setRF_Enable:	
 10840                           
 10841                           ;incstack = 0
 10842                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10843                           ;setRF_Enable@rf stored from wreg
 10844  1D13  0020               	movlb	0	; select bank0
 10845  1D14  00A3               	movwf	setRF_Enable@rf
 10846                           
 10847                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
 10848  1D15  0823               	movf	setRF_Enable@rf,w
 10849  1D16  3198  208B  319D   	fcall	_RfPointSelect
 10850                           
 10851                           ;RF_Control_B1.c: 176: RF->Enable = command;
 10852  1D19  0021               	movlb	1	; select bank1
 10853  1D1A  083D               	movf	_RF^(0+128),w
 10854  1D1B  0086               	movwf	6
 10855  1D1C  0187               	clrf	7
 10856  1D1D  0020               	movlb	0	; select bank0
 10857  1D1E  0822               	movf	setRF_Enable@command,w
 10858  1D1F  1001               	bcf	1,0
 10859  1D20  1D03               	skipz
 10860  1D21  1401               	bsf	1,0
 10861                           
 10862                           ;RF_Control_B1.c: 177: RF->Learn = 0;
 10863  1D22  0021               	movlb	1	; select bank1
 10864  1D23  083D               	movf	_RF^(0+128),w
 10865  1D24  0086               	movwf	6
 10866  1D25  0187               	clrf	7
 10867  1D26  1301               	bcf	1,6
 10868                           
 10869                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
 10870  1D27  083D               	movf	_RF^(0+128),w
 10871  1D28  0086               	movwf	6
 10872  1D29  0187               	clrf	7
 10873  1D2A  1101               	bcf	1,2
 10874                           
 10875                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
 10876  1D2B  083D               	movf	_RF^(0+128),w
 10877  1D2C  0086               	movwf	6
 10878  1D2D  0187               	clrf	7
 10879  1D2E  1181               	bcf	1,3
 10880                           
 10881                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
 10882  1D2F  083D               	movf	_RF^(0+128),w
 10883  1D30  0086               	movwf	6
 10884  1D31  0187               	clrf	7
 10885  1D32  1081               	bcf	1,1
 10886                           
 10887                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
 10888  1D33  0A3D               	incf	_RF^(0+128),w
 10889  1D34  0086               	movwf	6
 10890  1D35  0187               	clrf	7
 10891  1D36  0181               	clrf	1
 10892                           
 10893                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
 10894  1D37  083D               	movf	_RF^(0+128),w
 10895  1D38  0086               	movwf	6
 10896  1D39  0187               	clrf	7
 10897  1D3A  1281               	bcf	1,5
 10898                           
 10899                           ;RF_Control_B1.c: 183: setINT_GO(0);
 10900  1D3B  3000               	movlw	0
 10901  1D3C  31A7  27CB         	fcall	_setINT_GO
 10902  1D3E  0008               	return
 10903  1D3F                     __end_of_setRF_Enable:	
 10904                           
 10905                           	psect	text53
 10906  27CB                     __ptext53:	
 10907 ;; *************** function _setINT_GO *****************
 10908 ;; Defined at:
 10909 ;;		line 319 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;  command         1    wreg     unsigned char 
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;  command         1    0[BANK0 ] unsigned char 
 10914 ;; Return value:  Size  Location     Type
 10915 ;;		None               void
 10916 ;; Registers used:
 10917 ;;		wreg
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;Total ram usage:        1 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    4
 10930 ;; This function calls:
 10931 ;;		Nothing
 10932 ;; This function is called by:
 10933 ;;		_setRF_Main
 10934 ;;		_setRF_Enable
 10935 ;;		_RF_RxDisable
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           
 10940                           ;psect for function _setINT_GO
 10941  27CB                     _setINT_GO:	
 10942                           
 10943                           ;incstack = 0
 10944                           ; Regs used in _setINT_GO: [wreg]
 10945                           ;setINT_GO@command stored from wreg
 10946  27CB  0020               	movlb	0	; select bank0
 10947  27CC  00A0               	movwf	setINT_GO@command
 10948                           
 10949                           ;MCU_B1.c: 320: INTF = 0;
 10950  27CD  108B               	bcf	11,1	;volatile
 10951                           
 10952                           ;MCU_B1.c: 321: INTE = command;
 10953  27CE  1C20               	btfss	setINT_GO@command,0
 10954  27CF  2FD2               	goto	u7740
 10955  27D0  160B               	bsf	11,4	;volatile
 10956  27D1  0008               	return
 10957  27D2                     u7740:	
 10958  27D2  120B               	bcf	11,4	;volatile
 10959  27D3  0008               	return
 10960  27D4                     __end_of_setINT_GO:	
 10961                           
 10962                           	psect	text54
 10963  1469                     __ptext54:	
 10964 ;; *************** function _DimmerLights_Exceptions *****************
 10965 ;; Defined at:
 10966 ;;		line 246 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  status          1    wreg     unsigned char 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  status          1   10[BANK0 ] unsigned char 
 10971 ;; Return value:  Size  Location     Type
 10972 ;;		None               void
 10973 ;; Registers used:
 10974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:        1 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    7
 10987 ;; This function calls:
 10988 ;;		_getDimmerLights_StatusFlag
 10989 ;;		_setBuz
 10990 ;;		_setDimmerLights_ERROR
 10991 ;;		_setDimmerLights_TriggerERROR
 10992 ;; This function is called by:
 10993 ;;		_setLoad_Exceptions
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _DimmerLights_Exceptions
 10999  1469                     _DimmerLights_Exceptions:	
 11000                           
 11001                           ;incstack = 0
 11002                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11003                           ;DimmerLights_Exceptions@status stored from wreg
 11004  1469  0020               	movlb	0	; select bank0
 11005  146A  00AA               	movwf	DimmerLights_Exceptions@status
 11006                           
 11007                           ;Dimmer_B1.c: 248: if(status == 1)
 11008  146B  082A               	movf	DimmerLights_Exceptions@status,w
 11009  146C  3A01               	xorlw	1
 11010  146D  1D03               	skipz
 11011  146E  2C7F               	goto	l8286
 11012                           
 11013                           ;Dimmer_B1.c: 249: {
 11014                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 11015  146F  319A  225F  3194   	fcall	_getDimmerLights_StatusFlag
 11016  1472  3A00               	xorlw	0
 11017  1473  1903               	skipnz
 11018  1474  2C97               	goto	l8292
 11019                           
 11020                           ;Dimmer_B1.c: 251: {
 11021                           ;Dimmer_B1.c: 252: setBuz(10,300);
 11022  1475  302C               	movlw	44
 11023  1476  0020               	movlb	0	; select bank0
 11024  1477  00A6               	movwf	setBuz@time
 11025  1478  3001               	movlw	1
 11026  1479  00A7               	movwf	setBuz@time+1
 11027  147A  300A               	movlw	10
 11028  147B  3188  2017  3194   	fcall	_setBuz
 11029  147E  2C97               	goto	l8292
 11030  147F                     l8286:	
 11031                           ;Dimmer_B1.c: 264: }
 11032                           
 11033                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(2);
 11034                           
 11035                           ;Dimmer_B1.c: 253: }
 11036                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 11037                           
 11038                           
 11039                           ;Dimmer_B1.c: 265: else if(status == 2)
 11040  147F  0020               	movlb	0	; select bank0
 11041  1480  082A               	movf	DimmerLights_Exceptions@status,w
 11042  1481  3A02               	xorlw	2
 11043  1482  1D03               	skipz
 11044  1483  2C92               	goto	l8290
 11045                           
 11046                           ;Dimmer_B1.c: 266: {
 11047                           ;Dimmer_B1.c: 267: setBuz(5,300);
 11048  1484  302C               	movlw	44
 11049  1485  00A6               	movwf	setBuz@time
 11050  1486  3001               	movlw	1
 11051  1487  00A7               	movwf	setBuz@time+1
 11052  1488  3005               	movlw	5
 11053  1489  3188  2017  3194   	fcall	_setBuz
 11054                           
 11055                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 11056  148C  0021               	movlb	1	; select bank1
 11057  148D  0A3A               	incf	_Dimmer^(0+128),w
 11058  148E  0086               	movwf	6
 11059  148F  0187               	clrf	7
 11060  1490  0801               	movf	1,w
 11061  1491  2C9C               	goto	L13
 11062  1492                     l8290:	
 11063                           ;Dimmer_B1.c: 269: }
 11064                           
 11065                           
 11066                           ;Dimmer_B1.c: 270: else if(status == 3)
 11067  1492  0020               	movlb	0	; select bank0
 11068  1493  082A               	movf	DimmerLights_Exceptions@status,w
 11069  1494  3A03               	xorlw	3
 11070  1495  1D03               	skipz
 11071  1496  2C9F               	goto	l833
 11072  1497                     l8292:	
 11073                           
 11074                           ;Dimmer_B1.c: 271: {
 11075                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 11076  1497  3001               	movlw	1
 11077  1498  3191  21DA  3194   	fcall	_setDimmerLights_ERROR
 11078                           
 11079                           ;Dimmer_B1.c: 276: setDimmerLights_ERROR(2);
 11080  149B  3002               	movlw	2
 11081  149C                     L13:	
 11082  149C  3191  21DA  3194   	fcall	_setDimmerLights_ERROR
 11083  149F                     l833:	
 11084                           
 11085                           ;Dimmer_B1.c: 281: }
 11086                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 11087  149F  0020               	movlb	0	; select bank0
 11088  14A0  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11089  14A1  3001               	movlw	1
 11090  14A2  319C  24E8  3194   	fcall	_setDimmerLights_TriggerERROR
 11091                           
 11092                           ;Dimmer_B1.c: 287: setDimmerLights_TriggerERROR(2,0);
 11093  14A5  0020               	movlb	0	; select bank0
 11094  14A6  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11095  14A7  3002               	movlw	2
 11096  14A8  319C  24E8  3194   	fcall	_setDimmerLights_TriggerERROR
 11097                           
 11098                           ;Dimmer_B1.c: 293: if(myMain->SelfTest == 0)
 11099  14AB  0021               	movlb	1	; select bank1
 11100  14AC  0869               	movf	_myMain^(0+128),w
 11101  14AD  3E03               	addlw	3
 11102  14AE  0086               	movwf	6
 11103  14AF  3001               	movlw	1	; select bank2/3
 11104  14B0  0087               	movwf	7
 11105  14B1  1801               	btfsc	1,0
 11106  14B2  0008               	return
 11107                           
 11108                           ;Dimmer_B1.c: 294: {
 11109                           ;Dimmer_B1.c: 295: myMain->i=0;
 11110  14B3  0869               	movf	_myMain^(0+128),w
 11111  14B4  3E0F               	addlw	15
 11112  14B5  0086               	movwf	6
 11113  14B6  3001               	movlw	1	; select bank2/3
 11114  14B7  0087               	movwf	7
 11115  14B8  1001               	bcf	1,0
 11116                           
 11117                           ;Dimmer_B1.c: 296: myMain->j=0;
 11118  14B9  0869               	movf	_myMain^(0+128),w
 11119  14BA  3E0F               	addlw	15
 11120  14BB  0086               	movwf	6
 11121  14BC  3001               	movlw	1	; select bank2/3
 11122  14BD  0087               	movwf	7
 11123  14BE  1081               	bcf	1,1
 11124                           
 11125                           ;Dimmer_B1.c: 297: myMain->k=1;
 11126  14BF  0869               	movf	_myMain^(0+128),w
 11127  14C0  3E0F               	addlw	15
 11128  14C1  0086               	movwf	6
 11129  14C2  3001               	movlw	1	; select bank2/3
 11130  14C3  0087               	movwf	7
 11131  14C4  1501               	bsf	1,2
 11132                           
 11133                           ;Dimmer_B1.c: 298: myMain->Count2=0;
 11134  14C5  0869               	movf	_myMain^(0+128),w
 11135  14C6  3E08               	addlw	8
 11136  14C7  0086               	movwf	6
 11137  14C8  3001               	movlw	1	; select bank2/3
 11138  14C9  0087               	movwf	7
 11139  14CA  3000               	movlw	0
 11140  14CB  3FC0               	movwi [0]fsr1
 11141  14CC  3FC1               	movwi [1]fsr1
 11142  14CD  0008               	return
 11143  14CE                     __end_of_DimmerLights_Exceptions:	
 11144                           
 11145                           	psect	text55
 11146  1CE8                     __ptext55:	
 11147 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11148 ;; Defined at:
 11149 ;;		line 320 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  lights          1    wreg     unsigned char 
 11152 ;;  command         1    2[BANK0 ] unsigned char 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  lights          1    3[BANK0 ] unsigned char 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;		None               void
 11157 ;; Registers used:
 11158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11164 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;Total ram usage:        2 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    5
 11171 ;; This function calls:
 11172 ;;		_DimmerLightsPointSelect
 11173 ;; This function is called by:
 11174 ;;		_DimmerLights_Exceptions
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _setDimmerLights_TriggerERROR
 11180  1CE8                     _setDimmerLights_TriggerERROR:	
 11181                           
 11182                           ;incstack = 0
 11183                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11184                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11185  1CE8  0020               	movlb	0	; select bank0
 11186  1CE9  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11187                           
 11188                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 11189  1CEA  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11190  1CEB  3199  21B9         	fcall	_DimmerLightsPointSelect
 11191                           
 11192                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 11193  1CED  0877               	movf	_DimmerLights,w
 11194  1CEE  3E09               	addlw	9
 11195  1CEF  0086               	movwf	6
 11196  1CF0  3001               	movlw	1	; select bank2/3
 11197  1CF1  0087               	movwf	7
 11198  1CF2  0020               	movlb	0	; select bank0
 11199  1CF3  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11200  1CF4  1081               	bcf	1,1
 11201  1CF5  1D03               	skipz
 11202  1CF6  1481               	bsf	1,1
 11203                           
 11204                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 11205  1CF7  0877               	movf	_DimmerLights,w
 11206  1CF8  3E09               	addlw	9
 11207  1CF9  0086               	movwf	6
 11208  1CFA  3001               	movlw	1	; select bank2/3
 11209  1CFB  0087               	movwf	7
 11210  1CFC  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11211  1CFD  1001               	bcf	1,0
 11212  1CFE  1D03               	skipz
 11213  1CFF  1401               	bsf	1,0
 11214                           
 11215                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 11216  1D00  0877               	movf	_DimmerLights,w
 11217  1D01  3E09               	addlw	9
 11218  1D02  0086               	movwf	6
 11219  1D03  3001               	movlw	1	; select bank2/3
 11220  1D04  0087               	movwf	7
 11221  1D05  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11222  1D06  1181               	bcf	1,3
 11223  1D07  1D03               	skipz
 11224  1D08  1581               	bsf	1,3
 11225                           
 11226                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 11227  1D09  0877               	movf	_DimmerLights,w
 11228  1D0A  3E09               	addlw	9
 11229  1D0B  0086               	movwf	6
 11230  1D0C  3001               	movlw	1	; select bank2/3
 11231  1D0D  0087               	movwf	7
 11232  1D0E  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11233  1D0F  1101               	bcf	1,2
 11234  1D10  1D03               	skipz
 11235  1D11  1501               	bsf	1,2
 11236  1D12  0008               	return
 11237  1D13                     __end_of_setDimmerLights_TriggerERROR:	
 11238                           
 11239                           	psect	text56
 11240  11DA                     __ptext56:	
 11241 ;; *************** function _setDimmerLights_ERROR *****************
 11242 ;; Defined at:
 11243 ;;		line 302 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;  lights          1    wreg     unsigned char 
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;  lights          1    5[BANK0 ] unsigned char 
 11248 ;; Return value:  Size  Location     Type
 11249 ;;		None               void
 11250 ;; Registers used:
 11251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;Total ram usage:        2 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    6
 11264 ;; This function calls:
 11265 ;;		_DimmerLightsPointSelect
 11266 ;;		_setLED
 11267 ;;		_setLoad_StatusOff
 11268 ;;		_setRFSW_Status
 11269 ;;		_setSw_Status
 11270 ;; This function is called by:
 11271 ;;		_DimmerLights_Exceptions
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           
 11276                           ;psect for function _setDimmerLights_ERROR
 11277  11DA                     _setDimmerLights_ERROR:	
 11278                           
 11279                           ;incstack = 0
 11280                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11281                           ;setDimmerLights_ERROR@lights stored from wreg
 11282  11DA  0020               	movlb	0	; select bank0
 11283  11DB  00A5               	movwf	setDimmerLights_ERROR@lights
 11284                           
 11285                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 11286  11DC  0825               	movf	setDimmerLights_ERROR@lights,w
 11287  11DD  3199  21B9  3191   	fcall	_DimmerLightsPointSelect
 11288                           
 11289                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 11290  11E0  0877               	movf	_DimmerLights,w
 11291  11E1  0086               	movwf	6
 11292  11E2  3001               	movlw	1	; select bank2/3
 11293  11E3  0087               	movwf	7
 11294  11E4  1E81               	btfss	1,5
 11295  11E5  0008               	return
 11296                           
 11297                           ;Dimmer_B1.c: 306: {
 11298                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 11299  11E6  0877               	movf	_DimmerLights,w
 11300  11E7  0086               	movwf	6
 11301  11E8  3001               	movlw	1	; select bank2/3
 11302  11E9  0087               	movwf	7
 11303  11EA  1081               	bcf	1,1
 11304                           
 11305                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 11306  11EB  0877               	movf	_DimmerLights,w
 11307  11EC  0086               	movwf	6
 11308  11ED  3001               	movlw	1	; select bank2/3
 11309  11EE  0087               	movwf	7
 11310  11EF  1181               	bcf	1,3
 11311                           
 11312                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 11313  11F0  0877               	movf	_DimmerLights,w
 11314  11F1  0086               	movwf	6
 11315  11F2  3001               	movlw	1	; select bank2/3
 11316  11F3  0087               	movwf	7
 11317  11F4  1201               	bcf	1,4
 11318                           
 11319                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 11320  11F5  0877               	movf	_DimmerLights,w
 11321  11F6  0086               	movwf	6
 11322  11F7  3001               	movlw	1	; select bank2/3
 11323  11F8  0087               	movwf	7
 11324  11F9  1301               	bcf	1,6
 11325                           
 11326                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 11327  11FA  3003               	movlw	3
 11328  11FB  0020               	movlb	0	; select bank0
 11329  11FC  00A4               	movwf	??_setDimmerLights_ERROR
 11330  11FD  0877               	movf	_DimmerLights,w
 11331  11FE  3E02               	addlw	2
 11332  11FF  0086               	movwf	6
 11333  1200  3001               	movlw	1	; select bank2/3
 11334  1201  0087               	movwf	7
 11335  1202  0824               	movf	??_setDimmerLights_ERROR,w
 11336  1203  0081               	movwf	1
 11337                           
 11338                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 11339  1204  0877               	movf	_DimmerLights,w
 11340  1205  3E06               	addlw	6
 11341  1206  0086               	movwf	6
 11342  1207  3001               	movlw	1	; select bank2/3
 11343  1208  0087               	movwf	7
 11344  1209  0801               	movf	1,w
 11345  120A  00A4               	movwf	??_setDimmerLights_ERROR
 11346  120B  0877               	movf	_DimmerLights,w
 11347  120C  3E04               	addlw	4
 11348  120D  0086               	movwf	6
 11349  120E  3001               	movlw	1	; select bank2/3
 11350  120F  0087               	movwf	7
 11351  1210  0824               	movf	??_setDimmerLights_ERROR,w
 11352  1211  0081               	movwf	1
 11353                           
 11354                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 11355  1212  0021               	movlb	1	; select bank1
 11356  1213  083A               	movf	_Dimmer^(0+128),w
 11357  1214  0086               	movwf	6
 11358  1215  0187               	clrf	7
 11359  1216  1401               	bsf	1,0
 11360                           
 11361                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 11362  1217  0020               	movlb	0	; select bank0
 11363  1218  01A0               	clrf	setLoad_StatusOff@command
 11364  1219  0AA0               	incf	setLoad_StatusOff@command,f
 11365  121A  0825               	movf	setDimmerLights_ERROR@lights,w
 11366  121B  319D  25F8  3191   	fcall	_setLoad_StatusOff
 11367                           
 11368                           ;Dimmer_B1.c: 315: setLED(lights,1);
 11369  121E  0020               	movlb	0	; select bank0
 11370  121F  01A2               	clrf	setLED@command
 11371  1220  0AA2               	incf	setLED@command,f
 11372  1221  0825               	movf	setDimmerLights_ERROR@lights,w
 11373  1222  3192  22E8  3191   	fcall	_setLED
 11374                           
 11375                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 11376  1225  0020               	movlb	0	; select bank0
 11377  1226  01A2               	clrf	setSw_Status@command
 11378  1227  0825               	movf	setDimmerLights_ERROR@lights,w
 11379  1228  3199  210B  3191   	fcall	_setSw_Status
 11380                           
 11381                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 11382  122B  0020               	movlb	0	; select bank0
 11383  122C  01A2               	clrf	setRFSW_Status@command
 11384  122D  0825               	movf	setDimmerLights_ERROR@lights,w
 11385  122E  3198  20FC         	fcall	_setRFSW_Status
 11386  1230  0008               	return
 11387  1231                     __end_of_setDimmerLights_ERROR:	
 11388                           
 11389                           	psect	text57
 11390  1968                     __ptext57:	
 11391 ;; *************** function _setDimmerLights_Clear *****************
 11392 ;; Defined at:
 11393 ;;		line 456 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  lights          1    wreg     unsigned char 
 11396 ;;  command         1    2[BANK0 ] unsigned char 
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;  lights          1    3[BANK0 ] unsigned char 
 11399 ;; Return value:  Size  Location     Type
 11400 ;;		None               void
 11401 ;; Registers used:
 11402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11403 ;; Tracked objects:
 11404 ;;		On entry : 0/0
 11405 ;;		On exit  : 0/0
 11406 ;;		Unchanged: 0/0
 11407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11408 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;Total ram usage:        2 bytes
 11413 ;; Hardware stack levels used:    1
 11414 ;; Hardware stack levels required when called:    5
 11415 ;; This function calls:
 11416 ;;		_DimmerLightsPointSelect
 11417 ;; This function is called by:
 11418 ;;		_Load_Main
 11419 ;; This function uses a non-reentrant model
 11420 ;;
 11421                           
 11422                           
 11423                           ;psect for function _setDimmerLights_Clear
 11424  1968                     _setDimmerLights_Clear:	
 11425                           
 11426                           ;incstack = 0
 11427                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11428                           ;setDimmerLights_Clear@lights stored from wreg
 11429  1968  0020               	movlb	0	; select bank0
 11430  1969  00A3               	movwf	setDimmerLights_Clear@lights
 11431                           
 11432                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 11433  196A  0823               	movf	setDimmerLights_Clear@lights,w
 11434  196B  3199  21B9         	fcall	_DimmerLightsPointSelect
 11435                           
 11436                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 11437  196D  0877               	movf	_DimmerLights,w
 11438  196E  3E0C               	addlw	12
 11439  196F  0086               	movwf	6
 11440  1970  3001               	movlw	1	; select bank2/3
 11441  1971  0087               	movwf	7
 11442  1972  0020               	movlb	0	; select bank0
 11443  1973  0822               	movf	setDimmerLights_Clear@command,w
 11444  1974  1001               	bcf	1,0
 11445  1975  1D03               	skipz
 11446  1976  1401               	bsf	1,0
 11447  1977  0008               	return
 11448  1978                     __end_of_setDimmerLights_Clear:	
 11449                           
 11450                           	psect	text58
 11451  1EC4                     __ptext58:	
 11452 ;; *************** function ___lwdiv *****************
 11453 ;; Defined at:
 11454 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  divisor         2    0[BANK0 ] unsigned int 
 11457 ;;  dividend        2    2[BANK0 ] unsigned int 
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  quotient        2    5[BANK0 ] unsigned int 
 11460 ;;  counter         1    7[BANK0 ] unsigned char 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  2    0[BANK0 ] unsigned int 
 11463 ;; Registers used:
 11464 ;;		wreg, status,2, status,0
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;Total ram usage:        8 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    4
 11477 ;; This function calls:
 11478 ;;		Nothing
 11479 ;; This function is called by:
 11480 ;;		_Load_Main
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           
 11485                           ;psect for function ___lwdiv
 11486  1EC4                     ___lwdiv:	
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11490  1EC4  0020               	movlb	0	; select bank0
 11491  1EC5  01A5               	clrf	___lwdiv@quotient
 11492  1EC6  01A6               	clrf	___lwdiv@quotient+1
 11493  1EC7  0821               	movf	___lwdiv@divisor+1,w
 11494  1EC8  0420               	iorwf	___lwdiv@divisor,w
 11495  1EC9  1903               	skipnz
 11496  1ECA  2EF4               	goto	l7250
 11497  1ECB  01A7               	clrf	___lwdiv@counter
 11498  1ECC  0AA7               	incf	___lwdiv@counter,f
 11499  1ECD                     l7238:	
 11500  1ECD  1BA1               	btfsc	___lwdiv@divisor+1,7
 11501  1ECE  2ED9               	goto	l7240
 11502  1ECF  3001               	movlw	1
 11503  1ED0                     u6295:	
 11504  1ED0  35A0               	lslf	___lwdiv@divisor,f
 11505  1ED1  0DA1               	rlf	___lwdiv@divisor+1,f
 11506  1ED2  0B89               	decfsz	9,f
 11507  1ED3  2ED0               	goto	u6295
 11508  1ED4  3001               	movlw	1
 11509  1ED5  00A4               	movwf	??___lwdiv
 11510  1ED6  0824               	movf	??___lwdiv,w
 11511  1ED7  07A7               	addwf	___lwdiv@counter,f
 11512  1ED8  2ECD               	goto	l7238
 11513  1ED9                     l7240:	
 11514  1ED9  3001               	movlw	1
 11515  1EDA                     u6315:	
 11516  1EDA  35A5               	lslf	___lwdiv@quotient,f
 11517  1EDB  0DA6               	rlf	___lwdiv@quotient+1,f
 11518  1EDC  0B89               	decfsz	9,f
 11519  1EDD  2EDA               	goto	u6315
 11520  1EDE  0821               	movf	___lwdiv@divisor+1,w
 11521  1EDF  0223               	subwf	___lwdiv@dividend+1,w
 11522  1EE0  1D03               	skipz
 11523  1EE1  2EE4               	goto	u6325
 11524  1EE2  0820               	movf	___lwdiv@divisor,w
 11525  1EE3  0222               	subwf	___lwdiv@dividend,w
 11526  1EE4                     u6325:	
 11527  1EE4  1C03               	skipc
 11528  1EE5  2EEB               	goto	l7246
 11529  1EE6  0820               	movf	___lwdiv@divisor,w
 11530  1EE7  02A2               	subwf	___lwdiv@dividend,f
 11531  1EE8  0821               	movf	___lwdiv@divisor+1,w
 11532  1EE9  3BA3               	subwfb	___lwdiv@dividend+1,f
 11533  1EEA  1425               	bsf	___lwdiv@quotient,0
 11534  1EEB                     l7246:	
 11535  1EEB  3001               	movlw	1
 11536  1EEC                     u6335:	
 11537  1EEC  36A1               	lsrf	___lwdiv@divisor+1,f
 11538  1EED  0CA0               	rrf	___lwdiv@divisor,f
 11539  1EEE  0B89               	decfsz	9,f
 11540  1EEF  2EEC               	goto	u6335
 11541  1EF0  3001               	movlw	1
 11542  1EF1  02A7               	subwf	___lwdiv@counter,f
 11543  1EF2  1D03               	btfss	3,2
 11544  1EF3  2ED9               	goto	l7240
 11545  1EF4                     l7250:	
 11546  1EF4  0826               	movf	___lwdiv@quotient+1,w
 11547  1EF5  01A1               	clrf	?___lwdiv+1
 11548  1EF6  07A1               	addwf	?___lwdiv+1,f
 11549  1EF7  0825               	movf	___lwdiv@quotient,w
 11550  1EF8  01A0               	clrf	?___lwdiv
 11551  1EF9  07A0               	addwf	?___lwdiv,f
 11552  1EFA  0008               	return
 11553  1EFB                     __end_of___lwdiv:	
 11554                           
 11555                           	psect	text59
 11556  18C8                     __ptext59:	
 11557 ;; *************** function _Load_Initialization *****************
 11558 ;; Defined at:
 11559 ;;		line 9 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;		None
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;		None               void
 11566 ;; Registers used:
 11567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        1 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:    5
 11580 ;; This function calls:
 11581 ;;		_setLoad_AH_AL_Restore
 11582 ;; This function is called by:
 11583 ;;		_main
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _Load_Initialization
 11589  18C8                     _Load_Initialization:	
 11590                           
 11591                           ;OverLoad_B1.c: 10: Load = &Load1;
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11595  18C8  30A0               	movlw	_Load1& (0+255)
 11596  18C9  0020               	movlb	0	; select bank0
 11597  18CA  00A2               	movwf	??_Load_Initialization
 11598  18CB  0822               	movf	??_Load_Initialization,w
 11599  18CC  00FB               	movwf	_Load
 11600                           
 11601                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 11602  18CD  087B               	movf	_Load,w
 11603  18CE  0086               	movwf	6
 11604  18CF  3002               	movlw	2	; select bank4/5
 11605  18D0  0087               	movwf	7
 11606  18D1  1581               	bsf	1,3
 11607                           
 11608                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 11609  18D2  319C  244E         	fcall	_setLoad_AH_AL_Restore
 11610  18D4  0008               	return
 11611  18D5                     __end_of_Load_Initialization:	
 11612                           
 11613                           	psect	text60
 11614  1C4E                     __ptext60:	
 11615 ;; *************** function _setLoad_AH_AL_Restore *****************
 11616 ;; Defined at:
 11617 ;;		line 307 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  i               1    1[BANK0 ] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        2 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    4
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_Load_Initialization
 11642 ;;		_Load_Main
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           
 11647                           ;psect for function _setLoad_AH_AL_Restore
 11648  1C4E                     _setLoad_AH_AL_Restore:	
 11649                           
 11650                           ;OverLoad_B1.c: 308: char i;
 11651                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 11652                           
 11653                           ;incstack = 0
 11654                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11655  1C4E  0020               	movlb	0	; select bank0
 11656  1C4F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11657  1C50                     L14:	
 11658  1C50  3005               	movlw	5
 11659  1C51  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11660  1C52  1803               	btfsc	3,0
 11661  1C53  0008               	return
 11662                           
 11663                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 11664  1C54  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11665  1C55  3E08               	addlw	8
 11666  1C56  077B               	addwf	_Load,w
 11667  1C57  00A0               	movwf	??_setLoad_AH_AL_Restore
 11668  1C58  0820               	movf	??_setLoad_AH_AL_Restore,w
 11669  1C59  0086               	movwf	6
 11670  1C5A  3002               	movlw	2	; select bank4/5
 11671  1C5B  0087               	movwf	7
 11672  1C5C  3000               	movlw	0
 11673  1C5D  3FC0               	movwi [0]fsr1
 11674  1C5E  3FC1               	movwi [1]fsr1
 11675                           
 11676                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 11677  1C5F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11678  1C60  3E1A               	addlw	26
 11679  1C61  077B               	addwf	_Load,w
 11680  1C62  00A0               	movwf	??_setLoad_AH_AL_Restore
 11681  1C63  0820               	movf	??_setLoad_AH_AL_Restore,w
 11682  1C64  0086               	movwf	6
 11683  1C65  3002               	movlw	2	; select bank4/5
 11684  1C66  0087               	movwf	7
 11685  1C67  30FF               	movlw	255
 11686  1C68  3FC0               	movwi [0]fsr1
 11687  1C69  30FF               	movlw	255
 11688  1C6A  3FC1               	movwi [1]fsr1
 11689  1C6B  3001               	movlw	1
 11690  1C6C  00A0               	movwf	??_setLoad_AH_AL_Restore
 11691  1C6D  0820               	movf	??_setLoad_AH_AL_Restore,w
 11692  1C6E  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11693  1C6F  2C50               	goto	L14
 11694  1C70                     __end_of_setLoad_AH_AL_Restore:	
 11695                           
 11696                           	psect	text61
 11697  18AF                     __ptext61:	
 11698 ;; *************** function _LED_Main *****************
 11699 ;; Defined at:
 11700 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;		None
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;		None
 11705 ;; Return value:  Size  Location     Type
 11706 ;;		None               void
 11707 ;; Registers used:
 11708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11709 ;; Tracked objects:
 11710 ;;		On entry : 0/0
 11711 ;;		On exit  : 0/0
 11712 ;;		Unchanged: 0/0
 11713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;Total ram usage:        0 bytes
 11719 ;; Hardware stack levels used:    1
 11720 ;; Hardware stack levels required when called:    6
 11721 ;; This function calls:
 11722 ;;		_setLED_Main
 11723 ;; This function is called by:
 11724 ;;		_main
 11725 ;; This function uses a non-reentrant model
 11726 ;;
 11727                           
 11728                           
 11729                           ;psect for function _LED_Main
 11730  18AF                     _LED_Main:	
 11731                           
 11732                           ;LED_B1.c: 54: setLED_Main(1);
 11733                           
 11734                           ;incstack = 0
 11735                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11736  18AF  3001               	movlw	1
 11737  18B0  319E  26FB  3198   	fcall	_setLED_Main
 11738                           
 11739                           ;LED_B1.c: 57: setLED_Main(2);
 11740  18B3  3002               	movlw	2
 11741  18B4  319E  26FB  3198   	fcall	_setLED_Main
 11742                           
 11743                           ;LED_B1.c: 63: setLED_Main(99);
 11744  18B7  3063               	movlw	99
 11745  18B8  319E  26FB         	fcall	_setLED_Main
 11746  18BA  0008               	return
 11747  18BB                     __end_of_LED_Main:	
 11748                           
 11749                           	psect	text62
 11750  1EFB                     __ptext62:	
 11751 ;; *************** function _setLED_Main *****************
 11752 ;; Defined at:
 11753 ;;		line 214 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;  led             1    wreg     unsigned char 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  led             1    4[BANK0 ] unsigned char 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;		None               void
 11760 ;; Registers used:
 11761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;Total ram usage:        3 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    5
 11774 ;; This function calls:
 11775 ;;		_LedPointSelect
 11776 ;; This function is called by:
 11777 ;;		_LED_Main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _setLED_Main
 11783  1EFB                     _setLED_Main:	
 11784                           
 11785                           ;incstack = 0
 11786                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11787                           ;setLED_Main@led stored from wreg
 11788  1EFB  0020               	movlb	0	; select bank0
 11789  1EFC  00A4               	movwf	setLED_Main@led
 11790                           
 11791                           ;LED_B1.c: 216: LedPointSelect(led);
 11792  1EFD  0824               	movf	setLED_Main@led,w
 11793  1EFE  319C  242C  319E   	fcall	_LedPointSelect
 11794                           
 11795                           ;LED_B1.c: 217: if(LED->GO)
 11796  1F01  0021               	movlb	1	; select bank1
 11797  1F02  083C               	movf	_LED^(0+128),w
 11798  1F03  0086               	movwf	6
 11799  1F04  0187               	clrf	7
 11800  1F05  1C81               	btfss	1,1
 11801  1F06  0008               	return
 11802                           
 11803                           ;LED_B1.c: 218: {
 11804                           ;LED_B1.c: 219: LED->Time++;
 11805  1F07  0A3C               	incf	_LED^(0+128),w
 11806  1F08  0086               	movwf	6
 11807  1F09  0187               	clrf	7
 11808  1F0A  3001               	movlw	1
 11809  1F0B  0781               	addwf	1,f
 11810  1F0C  3141               	addfsr 1,1
 11811  1F0D  1803               	skipnc
 11812  1F0E  0A81               	incf	1,f
 11813                           
 11814                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 11815  1F0F  0A3C               	incf	_LED^(0+128),w
 11816  1F10  0086               	movwf	6
 11817  1F11  0187               	clrf	7
 11818  1F12  3F40               	moviw [0]fsr1
 11819  1F13  0020               	movlb	0	; select bank0
 11820  1F14  00A2               	movwf	??_setLED_Main
 11821  1F15  3F41               	moviw [1]fsr1
 11822  1F16  00A3               	movwf	??_setLED_Main+1
 11823  1F17  3000               	movlw	0
 11824  1F18  0223               	subwf	??_setLED_Main+1,w
 11825  1F19  3032               	movlw	50
 11826  1F1A  1903               	skipnz
 11827  1F1B  0222               	subwf	??_setLED_Main,w
 11828  1F1C  1C03               	skipc
 11829  1F1D  0008               	return
 11830                           
 11831                           ;LED_B1.c: 221: {
 11832                           ;LED_B1.c: 222: LED->Time=0;
 11833  1F1E  0021               	movlb	1	; select bank1
 11834  1F1F  0A3C               	incf	_LED^(0+128),w
 11835  1F20  0086               	movwf	6
 11836  1F21  0187               	clrf	7
 11837  1F22  3000               	movlw	0
 11838  1F23  3FC0               	movwi [0]fsr1
 11839  1F24  3FC1               	movwi [1]fsr1
 11840                           
 11841                           ;LED_B1.c: 224: if(led == 1)
 11842  1F25  0020               	movlb	0	; select bank0
 11843  1F26  0824               	movf	setLED_Main@led,w
 11844  1F27  3A01               	xorlw	1
 11845  1F28  1D03               	skipz
 11846  1F29  2F2D               	goto	l6922
 11847                           
 11848                           ;LED_B1.c: 225: {
 11849                           ;LED_B1.c: 226: RA3=~RA3;
 11850  1F2A  3008               	movlw	8
 11851  1F2B  068C               	xorwf	12,f
 11852                           
 11853                           ;LED_B1.c: 227: }
 11854  1F2C  0008               	return
 11855  1F2D                     l6922:	
 11856                           
 11857                           ;LED_B1.c: 230: else if(led == 2)
 11858  1F2D  0824               	movf	setLED_Main@led,w
 11859  1F2E  3A02               	xorlw	2
 11860  1F2F  1D03               	skipz
 11861  1F30  2F34               	goto	l6926
 11862                           
 11863                           ;LED_B1.c: 231: {
 11864                           ;LED_B1.c: 232: RC7=~RC7;
 11865  1F31  3080               	movlw	128
 11866  1F32  068E               	xorwf	14,f
 11867                           
 11868                           ;LED_B1.c: 233: }
 11869  1F33  0008               	return
 11870  1F34                     l6926:	
 11871                           
 11872                           ;LED_B1.c: 242: else if(led == 99)
 11873  1F34  0824               	movf	setLED_Main@led,w
 11874  1F35  3A63               	xorlw	99
 11875  1F36  1D03               	skipz
 11876  1F37  0008               	return
 11877                           
 11878                           ;LED_B1.c: 243: {
 11879                           ;LED_B1.c: 244: RB5=~RB5;
 11880  1F38  3020               	movlw	32
 11881  1F39  068D               	xorwf	13,f
 11882  1F3A  0008               	return
 11883  1F3B                     __end_of_setLED_Main:	
 11884                           
 11885                           	psect	text63
 11886  18A3                     __ptext63:	
 11887 ;; *************** function _LED_Initialization *****************
 11888 ;; Defined at:
 11889 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;		None               void
 11896 ;; Registers used:
 11897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        0 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    7
 11910 ;; This function calls:
 11911 ;;		_setLED_Initialization
 11912 ;; This function is called by:
 11913 ;;		_main
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           
 11918                           ;psect for function _LED_Initialization
 11919  18A3                     _LED_Initialization:	
 11920                           
 11921                           ;LED_B1.c: 38: setLED_Initialization(1);
 11922                           
 11923                           ;incstack = 0
 11924                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11925  18A3  3001               	movlw	1
 11926  18A4  3199  21A8  3198   	fcall	_setLED_Initialization
 11927                           
 11928                           ;LED_B1.c: 41: setLED_Initialization(2);
 11929  18A7  3002               	movlw	2
 11930  18A8  3199  21A8  3198   	fcall	_setLED_Initialization
 11931                           
 11932                           ;LED_B1.c: 47: setLED_Initialization(99);
 11933  18AB  3063               	movlw	99
 11934  18AC  3199  21A8         	fcall	_setLED_Initialization
 11935  18AE  0008               	return
 11936  18AF                     __end_of_LED_Initialization:	
 11937                           
 11938                           	psect	text64
 11939  19A8                     __ptext64:	
 11940 ;; *************** function _setLED_Initialization *****************
 11941 ;; Defined at:
 11942 ;;		line 67 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  led             1    wreg     unsigned char 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;  led             1    4[BANK0 ] unsigned char 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;		None               void
 11949 ;; Registers used:
 11950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;Total ram usage:        1 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    6
 11963 ;; This function calls:
 11964 ;;		_LedPointSelect
 11965 ;;		_setLED
 11966 ;; This function is called by:
 11967 ;;		_LED_Initialization
 11968 ;; This function uses a non-reentrant model
 11969 ;;
 11970                           
 11971                           
 11972                           ;psect for function _setLED_Initialization
 11973  19A8                     _setLED_Initialization:	
 11974                           
 11975                           ;incstack = 0
 11976                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11977                           ;setLED_Initialization@led stored from wreg
 11978  19A8  0020               	movlb	0	; select bank0
 11979  19A9  00A4               	movwf	setLED_Initialization@led
 11980                           
 11981                           ;LED_B1.c: 69: LedPointSelect(led);
 11982  19AA  0824               	movf	setLED_Initialization@led,w
 11983  19AB  319C  242C  3199   	fcall	_LedPointSelect
 11984                           
 11985                           ;LED_B1.c: 70: LED->Enable=1;
 11986  19AE  0021               	movlb	1	; select bank1
 11987  19AF  083C               	movf	_LED^(0+128),w
 11988  19B0  0086               	movwf	6
 11989  19B1  0187               	clrf	7
 11990  19B2  1401               	bsf	1,0
 11991                           
 11992                           ;LED_B1.c: 71: setLED(led,0);
 11993  19B3  0020               	movlb	0	; select bank0
 11994  19B4  01A2               	clrf	setLED@command
 11995  19B5  0824               	movf	setLED_Initialization@led,w
 11996  19B6  3192  22E8         	fcall	_setLED
 11997  19B8  0008               	return
 11998  19B9                     __end_of_setLED_Initialization:	
 11999                           
 12000                           	psect	text65
 12001  10BA                     __ptext65:	
 12002 ;; *************** function _Flash_Memory_Main *****************
 12003 ;; Defined at:
 12004 ;;		line 867 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;		None
 12009 ;; Return value:  Size  Location     Type
 12010 ;;		None               void
 12011 ;; Registers used:
 12012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;Total ram usage:        0 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    7
 12025 ;; This function calls:
 12026 ;;		_Flash_Memory_Modify
 12027 ;; This function is called by:
 12028 ;;		_main
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _Flash_Memory_Main
 12034  10BA                     _Flash_Memory_Main:	
 12035                           
 12036                           ;MCU_B1.c: 868: if (Memory->GO) {
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12040  10BA  0021               	movlb	1	; select bank1
 12041  10BB  0866               	movf	_Memory^(0+128),w
 12042  10BC  3E22               	addlw	34
 12043  10BD  0086               	movwf	6
 12044  10BE  3002               	movlw	2	; select bank4/5
 12045  10BF  0087               	movwf	7
 12046  10C0  1C81               	btfss	1,1
 12047  10C1  0008               	return
 12048                           
 12049                           ;MCU_B1.c: 869: if (Memory->Modify) {
 12050  10C2  0866               	movf	_Memory^(0+128),w
 12051  10C3  3E22               	addlw	34
 12052  10C4  0086               	movwf	6
 12053  10C5  3002               	movlw	2	; select bank4/5
 12054  10C6  0087               	movwf	7
 12055  10C7  1C01               	btfss	1,0
 12056  10C8  28F7               	goto	l8968
 12057                           
 12058                           ;MCU_B1.c: 870: Memory->Time++;
 12059  10C9  0866               	movf	_Memory^(0+128),w
 12060  10CA  3E23               	addlw	35
 12061  10CB  0086               	movwf	6
 12062  10CC  3002               	movlw	2	; select bank4/5
 12063  10CD  0087               	movwf	7
 12064  10CE  3001               	movlw	1
 12065  10CF  0781               	addwf	1,f
 12066  10D0  3141               	addfsr 1,1
 12067  10D1  1803               	skipnc
 12068  10D2  0A81               	incf	1,f
 12069                           
 12070                           ;MCU_B1.c: 871: if (Memory->Time == 25)
 12071  10D3  0866               	movf	_Memory^(0+128),w
 12072  10D4  3E23               	addlw	35
 12073  10D5  0086               	movwf	6
 12074  10D6  3002               	movlw	2	; select bank4/5
 12075  10D7  0087               	movwf	7
 12076  10D8  3F40               	moviw [0]fsr1
 12077  10D9  3A19               	xorlw	25
 12078  10DA  1D03               	skipz
 12079  10DB  28DE               	goto	u8835
 12080  10DC  3F41               	moviw [1]fsr1
 12081  10DD  3A00               	xorlw	0
 12082  10DE                     u8835:	
 12083  10DE  1D03               	skipz
 12084  10DF  0008               	return
 12085                           
 12086                           ;MCU_B1.c: 872: {
 12087                           ;MCU_B1.c: 873: Memory->Time = 0;
 12088  10E0  0866               	movf	_Memory^(0+128),w
 12089  10E1  3E23               	addlw	35
 12090  10E2  0086               	movwf	6
 12091  10E3  3002               	movlw	2	; select bank4/5
 12092  10E4  0087               	movwf	7
 12093  10E5  3000               	movlw	0
 12094  10E6  3FC0               	movwi [0]fsr1
 12095  10E7  3FC1               	movwi [1]fsr1
 12096                           
 12097                           ;MCU_B1.c: 874: Memory->Modify = 0;
 12098  10E8  0866               	movf	_Memory^(0+128),w
 12099  10E9  3E22               	addlw	34
 12100  10EA  0086               	movwf	6
 12101  10EB  3002               	movlw	2	; select bank4/5
 12102  10EC  0087               	movwf	7
 12103  10ED  1001               	bcf	1,0
 12104                           
 12105                           ;MCU_B1.c: 875: Memory->GO = 0;
 12106  10EE  0866               	movf	_Memory^(0+128),w
 12107  10EF  3E22               	addlw	34
 12108  10F0  0086               	movwf	6
 12109  10F1  3002               	movlw	2	; select bank4/5
 12110  10F2  0087               	movwf	7
 12111  10F3  1081               	bcf	1,1
 12112                           
 12113                           ;MCU_B1.c: 876: Flash_Memory_Modify();
 12114  10F4  3195  2539         	fcall	_Flash_Memory_Modify
 12115                           
 12116                           ;MCU_B1.c: 878: }
 12117                           ;MCU_B1.c: 879: } else {
 12118  10F6  0008               	return
 12119  10F7                     l8968:	
 12120                           
 12121                           ;MCU_B1.c: 880: Memory->GO = 0;
 12122  10F7  0021               	movlb	1	; select bank1
 12123  10F8  0866               	movf	_Memory^(0+128),w
 12124  10F9  3E22               	addlw	34
 12125  10FA  0086               	movwf	6
 12126  10FB  3002               	movlw	2	; select bank4/5
 12127  10FC  0087               	movwf	7
 12128  10FD  1081               	bcf	1,1
 12129  10FE  0008               	return
 12130  10FF                     __end_of_Flash_Memory_Main:	
 12131                           
 12132                           	psect	text66
 12133  1539                     __ptext66:	
 12134 ;; *************** function _Flash_Memory_Modify *****************
 12135 ;; Defined at:
 12136 ;;		line 937 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;		None
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;  i               1    6[BANK0 ] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;		None               void
 12143 ;; Registers used:
 12144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;Total ram usage:        3 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    6
 12157 ;; This function calls:
 12158 ;;		_Flash_Memory_Erasing
 12159 ;;		_Flash_Memory_Read
 12160 ;;		_Flash_Memory_Write
 12161 ;; This function is called by:
 12162 ;;		_Flash_Memory_Main
 12163 ;; This function uses a non-reentrant model
 12164 ;;
 12165                           
 12166                           
 12167                           ;psect for function _Flash_Memory_Modify
 12168  1539                     _Flash_Memory_Modify:	
 12169                           
 12170                           ;MCU_B1.c: 938: char i;
 12171                           ;MCU_B1.c: 939: for (i = 0; i < 32; i++) {
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12175  1539  0020               	movlb	0	; select bank0
 12176  153A  01A6               	clrf	Flash_Memory_Modify@i
 12177  153B  3020               	movlw	32
 12178  153C  0226               	subwf	Flash_Memory_Modify@i,w
 12179  153D  1803               	btfsc	3,0
 12180  153E  2D58               	goto	l8690
 12181  153F                     l8684:	
 12182                           
 12183                           ;MCU_B1.c: 940: Memory->Data[i] = Flash_Memory_Read(i);
 12184  153F  0826               	movf	Flash_Memory_Modify@i,w
 12185  1540  319A  22D5  3195   	fcall	_Flash_Memory_Read
 12186  1543  0020               	movlb	0	; select bank0
 12187  1544  00A4               	movwf	??_Flash_Memory_Modify
 12188  1545  0826               	movf	Flash_Memory_Modify@i,w
 12189  1546  0021               	movlb	1	; select bank1
 12190  1547  0766               	addwf	_Memory^(0+128),w
 12191  1548  0020               	movlb	0	; select bank0
 12192  1549  00A5               	movwf	??_Flash_Memory_Modify+1
 12193  154A  0825               	movf	??_Flash_Memory_Modify+1,w
 12194  154B  0086               	movwf	6
 12195  154C  3002               	movlw	2	; select bank4/5
 12196  154D  0087               	movwf	7
 12197  154E  0824               	movf	??_Flash_Memory_Modify,w
 12198  154F  0081               	movwf	1
 12199  1550  3001               	movlw	1
 12200  1551  00A4               	movwf	??_Flash_Memory_Modify
 12201  1552  0824               	movf	??_Flash_Memory_Modify,w
 12202  1553  07A6               	addwf	Flash_Memory_Modify@i,f
 12203  1554  3020               	movlw	32
 12204  1555  0226               	subwf	Flash_Memory_Modify@i,w
 12205  1556  1C03               	skipc
 12206  1557  2D3F               	goto	l8684
 12207  1558                     l8690:	
 12208                           
 12209                           ;MCU_B1.c: 941: }
 12210                           ;MCU_B1.c: 942: Memory->Data[0]=product->Data[12];
 12211  1558  087D               	movf	_product,w
 12212  1559  3E0C               	addlw	12
 12213  155A  0086               	movwf	6
 12214  155B  3001               	movlw	1	; select bank2/3
 12215  155C  0087               	movwf	7
 12216  155D  0801               	movf	1,w
 12217  155E  00A4               	movwf	??_Flash_Memory_Modify
 12218  155F  0021               	movlb	1	; select bank1
 12219  1560  0866               	movf	_Memory^(0+128),w
 12220  1561  0086               	movwf	6
 12221  1562  3002               	movlw	2	; select bank4/5
 12222  1563  0087               	movwf	7
 12223  1564  0020               	movlb	0	; select bank0
 12224  1565  0824               	movf	??_Flash_Memory_Modify,w
 12225  1566  0081               	movwf	1
 12226                           
 12227                           ;MCU_B1.c: 943: Memory->Data[1]=product->Data[13];
 12228  1567  087D               	movf	_product,w
 12229  1568  3E0D               	addlw	13
 12230  1569  0086               	movwf	6
 12231  156A  3001               	movlw	1	; select bank2/3
 12232  156B  0087               	movwf	7
 12233  156C  0801               	movf	1,w
 12234  156D  00A4               	movwf	??_Flash_Memory_Modify
 12235  156E  0021               	movlb	1	; select bank1
 12236  156F  0A66               	incf	_Memory^(0+128),w
 12237  1570  0086               	movwf	6
 12238  1571  3002               	movlw	2	; select bank4/5
 12239  1572  0087               	movwf	7
 12240  1573  0020               	movlb	0	; select bank0
 12241  1574  0824               	movf	??_Flash_Memory_Modify,w
 12242  1575  0081               	movwf	1
 12243                           
 12244                           ;MCU_B1.c: 944: Memory->Data[2]=product->Data[14];
 12245  1576  087D               	movf	_product,w
 12246  1577  3E0E               	addlw	14
 12247  1578  0086               	movwf	6
 12248  1579  3001               	movlw	1	; select bank2/3
 12249  157A  0087               	movwf	7
 12250  157B  0801               	movf	1,w
 12251  157C  00A4               	movwf	??_Flash_Memory_Modify
 12252  157D  0021               	movlb	1	; select bank1
 12253  157E  0866               	movf	_Memory^(0+128),w
 12254  157F  3E02               	addlw	2
 12255  1580  0086               	movwf	6
 12256  1581  3002               	movlw	2	; select bank4/5
 12257  1582  0087               	movwf	7
 12258  1583  0020               	movlb	0	; select bank0
 12259  1584  0824               	movf	??_Flash_Memory_Modify,w
 12260  1585  0081               	movwf	1
 12261                           
 12262                           ;MCU_B1.c: 950: if (Memory->LoopSave) {
 12263  1586  0021               	movlb	1	; select bank1
 12264  1587  0866               	movf	_Memory^(0+128),w
 12265  1588  3E22               	addlw	34
 12266  1589  0086               	movwf	6
 12267  158A  3002               	movlw	2	; select bank4/5
 12268  158B  0087               	movwf	7
 12269  158C  1D01               	btfss	1,2
 12270  158D  2D9F               	goto	l8694
 12271                           
 12272                           ;MCU_B1.c: 951: Memory->LoopSave = 0;
 12273  158E  0866               	movf	_Memory^(0+128),w
 12274  158F  3E22               	addlw	34
 12275  1590  0086               	movwf	6
 12276  1591  3002               	movlw	2	; select bank4/5
 12277  1592  0087               	movwf	7
 12278  1593  1101               	bcf	1,2
 12279                           
 12280                           ;MCU_B1.c: 952: myMain->FirstOpen = 0;
 12281  1594  0869               	movf	_myMain^(0+128),w
 12282  1595  0086               	movwf	6
 12283  1596  3001               	movlw	1	; select bank2/3
 12284  1597  0087               	movwf	7
 12285  1598  1281               	bcf	1,5
 12286                           
 12287                           ;MCU_B1.c: 953: myMain->First = 0;
 12288  1599  0869               	movf	_myMain^(0+128),w
 12289  159A  3E03               	addlw	3
 12290  159B  0086               	movwf	6
 12291  159C  3001               	movlw	1	; select bank2/3
 12292  159D  0087               	movwf	7
 12293  159E  1081               	bcf	1,1
 12294  159F                     l8694:	
 12295                           
 12296                           ;MCU_B1.c: 955: }
 12297                           ;MCU_B1.c: 956: GIE = 0;
 12298  159F  138B               	bcf	11,7	;volatile
 12299                           
 12300                           ;MCU_B1.c: 957: Flash_Memory_Erasing();
 12301  15A0  3198  2097  3195   	fcall	_Flash_Memory_Erasing
 12302                           
 12303                           ;MCU_B1.c: 958: Flash_Memory_Write();
 12304  15A3  319E  2629         	fcall	_Flash_Memory_Write
 12305                           
 12306                           ;MCU_B1.c: 959: GIE = 1;
 12307  15A5  178B               	bsf	11,7	;volatile
 12308  15A6  0008               	return
 12309  15A7                     __end_of_Flash_Memory_Modify:	
 12310                           
 12311                           	psect	text67
 12312  1897                     __ptext67:	
 12313 ;; *************** function _Flash_Memory_Erasing *****************
 12314 ;; Defined at:
 12315 ;;		line 926 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;		None
 12318 ;; Auto vars:     Size  Location     Type
 12319 ;;		None
 12320 ;; Return value:  Size  Location     Type
 12321 ;;		None               void
 12322 ;; Registers used:
 12323 ;;		wreg, status,2, status,0, pclath, cstack
 12324 ;; Tracked objects:
 12325 ;;		On entry : 0/0
 12326 ;;		On exit  : 0/0
 12327 ;;		Unchanged: 0/0
 12328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;Total ram usage:        0 bytes
 12334 ;; Hardware stack levels used:    1
 12335 ;; Hardware stack levels required when called:    5
 12336 ;; This function calls:
 12337 ;;		_Flash_Memory_Unlock
 12338 ;; This function is called by:
 12339 ;;		_Flash_Memory_Modify
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           
 12344                           ;psect for function _Flash_Memory_Erasing
 12345  1897                     _Flash_Memory_Erasing:	
 12346                           
 12347                           ;MCU_B1.c: 927: CFGS = 0;
 12348                           
 12349                           ;incstack = 0
 12350                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12351  1897  0023               	movlb	3	; select bank3
 12352  1898  1315               	bcf	21,6	;volatile
 12353                           
 12354                           ;MCU_B1.c: 928: PMADRH = 0x30;
 12355  1899  3030               	movlw	48
 12356  189A  0092               	movwf	18	;volatile
 12357                           
 12358                           ;MCU_B1.c: 929: PMADRL = 0x00;
 12359  189B  0191               	clrf	17	;volatile
 12360                           
 12361                           ;MCU_B1.c: 930: FREE = 1;
 12362  189C  1615               	bsf	21,4	;volatile
 12363                           
 12364                           ;MCU_B1.c: 931: WREN = 1;
 12365  189D  1515               	bsf	21,2	;volatile
 12366                           
 12367                           ;MCU_B1.c: 932: Flash_Memory_Unlock();
 12368  189E  31A7  27C2         	fcall	_Flash_Memory_Unlock
 12369                           
 12370                           ;MCU_B1.c: 933: WREN = 0;
 12371  18A0  0023               	movlb	3	; select bank3
 12372  18A1  1115               	bcf	21,2	;volatile
 12373  18A2  0008               	return
 12374  18A3                     __end_of_Flash_Memory_Erasing:	
 12375                           
 12376                           	psect	text68
 12377  0F08                     __ptext68:	
 12378 ;; *************** function _Flash_Memory_Initialization *****************
 12379 ;; Defined at:
 12380 ;;		line 826 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;  i               1   62[BANK0 ] unsigned char 
 12385 ;; Return value:  Size  Location     Type
 12386 ;;		None               void
 12387 ;; Registers used:
 12388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;Total ram usage:        2 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    7
 12401 ;; This function calls:
 12402 ;;		_Flash_Memory_Read
 12403 ;;		_Flash_Memory_Write
 12404 ;;		_setPercentValue
 12405 ;; This function is called by:
 12406 ;;		_main
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           
 12411                           ;psect for function _Flash_Memory_Initialization
 12412  0F08                     _Flash_Memory_Initialization:	
 12413                           
 12414                           ;MCU_B1.c: 827: char i;
 12415                           ;MCU_B1.c: 828: if (Flash_Memory_Read(31) == 0xaa) {
 12416                           
 12417                           ;incstack = 0
 12418                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12419  0F08  301F               	movlw	31
 12420  0F09  319A  22D5  318F   	fcall	_Flash_Memory_Read
 12421  0F0C  3AAA               	xorlw	170
 12422  0F0D  1D03               	skipz
 12423  0F0E  2F81               	goto	l8924
 12424                           
 12425                           ;MCU_B1.c: 829: product->Data[12] = Flash_Memory_Read(0);
 12426  0F0F  3000               	movlw	0
 12427  0F10  319A  22D5  318F   	fcall	_Flash_Memory_Read
 12428  0F13  0020               	movlb	0	; select bank0
 12429  0F14  00DD               	movwf	??_Flash_Memory_Initialization
 12430  0F15  087D               	movf	_product,w
 12431  0F16  3E0C               	addlw	12
 12432  0F17  0086               	movwf	6
 12433  0F18  3001               	movlw	1	; select bank2/3
 12434  0F19  0087               	movwf	7
 12435  0F1A  085D               	movf	??_Flash_Memory_Initialization,w
 12436  0F1B  0081               	movwf	1
 12437                           
 12438                           ;MCU_B1.c: 830: product->Data[13] = Flash_Memory_Read(1);
 12439  0F1C  3001               	movlw	1
 12440  0F1D  319A  22D5  318F   	fcall	_Flash_Memory_Read
 12441  0F20  0020               	movlb	0	; select bank0
 12442  0F21  00DD               	movwf	??_Flash_Memory_Initialization
 12443  0F22  087D               	movf	_product,w
 12444  0F23  3E0D               	addlw	13
 12445  0F24  0086               	movwf	6
 12446  0F25  3001               	movlw	1	; select bank2/3
 12447  0F26  0087               	movwf	7
 12448  0F27  085D               	movf	??_Flash_Memory_Initialization,w
 12449  0F28  0081               	movwf	1
 12450                           
 12451                           ;MCU_B1.c: 831: product->Data[14] = Flash_Memory_Read(2);
 12452  0F29  3002               	movlw	2
 12453  0F2A  319A  22D5  318F   	fcall	_Flash_Memory_Read
 12454  0F2D  0020               	movlb	0	; select bank0
 12455  0F2E  00DD               	movwf	??_Flash_Memory_Initialization
 12456  0F2F  087D               	movf	_product,w
 12457  0F30  3E0E               	addlw	14
 12458  0F31  0086               	movwf	6
 12459  0F32  3001               	movlw	1	; select bank2/3
 12460  0F33  0087               	movwf	7
 12461  0F34  085D               	movf	??_Flash_Memory_Initialization,w
 12462  0F35  0081               	movwf	1
 12463                           
 12464                           ;MCU_B1.c: 837: i = setPercentValue(((char)(65*1.5)));
 12465  0F36  3061               	movlw	97
 12466  0F37  3190  20FF  318F   	fcall	_setPercentValue
 12467  0F3A  0020               	movlb	0	; select bank0
 12468  0F3B  00DD               	movwf	??_Flash_Memory_Initialization
 12469  0F3C  085D               	movf	??_Flash_Memory_Initialization,w
 12470  0F3D  00DE               	movwf	Flash_Memory_Initialization@i
 12471                           
 12472                           ;MCU_B1.c: 838: product->Data[21] = i;
 12473  0F3E  085E               	movf	Flash_Memory_Initialization@i,w
 12474  0F3F  00DD               	movwf	??_Flash_Memory_Initialization
 12475  0F40  087D               	movf	_product,w
 12476  0F41  3E15               	addlw	21
 12477  0F42  0086               	movwf	6
 12478  0F43  3001               	movlw	1	; select bank2/3
 12479  0F44  0087               	movwf	7
 12480  0F45  085D               	movf	??_Flash_Memory_Initialization,w
 12481  0F46  0081               	movwf	1
 12482                           
 12483                           ;MCU_B1.c: 839: product->Data[22] = i;
 12484  0F47  085E               	movf	Flash_Memory_Initialization@i,w
 12485  0F48  00DD               	movwf	??_Flash_Memory_Initialization
 12486  0F49  087D               	movf	_product,w
 12487  0F4A  3E16               	addlw	22
 12488  0F4B  0086               	movwf	6
 12489  0F4C  3001               	movlw	1	; select bank2/3
 12490  0F4D  0087               	movwf	7
 12491  0F4E  085D               	movf	??_Flash_Memory_Initialization,w
 12492  0F4F  0081               	movwf	1
 12493                           
 12494                           ;MCU_B1.c: 840: product->Data[23] = i;
 12495  0F50  085E               	movf	Flash_Memory_Initialization@i,w
 12496  0F51  00DD               	movwf	??_Flash_Memory_Initialization
 12497  0F52  087D               	movf	_product,w
 12498  0F53  3E17               	addlw	23
 12499  0F54  0086               	movwf	6
 12500  0F55  3001               	movlw	1	; select bank2/3
 12501  0F56  0087               	movwf	7
 12502  0F57  085D               	movf	??_Flash_Memory_Initialization,w
 12503  0F58  0081               	movwf	1
 12504                           
 12505                           ;MCU_B1.c: 842: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12506  0F59  087D               	movf	_product,w
 12507  0F5A  3E0C               	addlw	12
 12508  0F5B  0086               	movwf	6
 12509  0F5C  3001               	movlw	1	; select bank2/3
 12510  0F5D  0087               	movwf	7
 12511  0F5E  0801               	movf	1,w
 12512  0F5F  3AFF               	xorlw	255
 12513  0F60  1D03               	skipz
 12514  0F61  0008               	return
 12515  0F62  087D               	movf	_product,w
 12516  0F63  3E0D               	addlw	13
 12517  0F64  0086               	movwf	6
 12518  0F65  3001               	movlw	1	; select bank2/3
 12519  0F66  0087               	movwf	7
 12520  0F67  0801               	movf	1,w
 12521  0F68  3AFF               	xorlw	255
 12522  0F69  1D03               	skipz
 12523  0F6A  0008               	return
 12524  0F6B  087D               	movf	_product,w
 12525  0F6C  3E0E               	addlw	14
 12526  0F6D  0086               	movwf	6
 12527  0F6E  3001               	movlw	1	; select bank2/3
 12528  0F6F  0087               	movwf	7
 12529  0F70  0801               	movf	1,w
 12530  0F71  3AFF               	xorlw	255
 12531  0F72  1D03               	skipz
 12532  0F73  0008               	return
 12533                           
 12534                           ;MCU_B1.c: 843: myMain->FirstOpen = 1;
 12535  0F74  0021               	movlb	1	; select bank1
 12536  0F75  0869               	movf	_myMain^(0+128),w
 12537  0F76  0086               	movwf	6
 12538  0F77  3001               	movlw	1	; select bank2/3
 12539  0F78  0087               	movwf	7
 12540  0F79  1681               	bsf	1,5
 12541                           
 12542                           ;MCU_B1.c: 844: myMain->First = 1;
 12543  0F7A  0869               	movf	_myMain^(0+128),w
 12544  0F7B  3E03               	addlw	3
 12545  0F7C  0086               	movwf	6
 12546  0F7D  3001               	movlw	1	; select bank2/3
 12547  0F7E  0087               	movwf	7
 12548  0F7F  1481               	bsf	1,1
 12549                           
 12550                           ;MCU_B1.c: 845: }
 12551                           ;MCU_B1.c: 846: } else {
 12552  0F80  0008               	return
 12553  0F81                     l8924:	
 12554                           
 12555                           ;MCU_B1.c: 847: i = setPercentValue(((char)(65*1.5)));
 12556  0F81  3061               	movlw	97
 12557  0F82  3190  20FF  318F   	fcall	_setPercentValue
 12558  0F85  0020               	movlb	0	; select bank0
 12559  0F86  00DD               	movwf	??_Flash_Memory_Initialization
 12560  0F87  085D               	movf	??_Flash_Memory_Initialization,w
 12561  0F88  00DE               	movwf	Flash_Memory_Initialization@i
 12562                           
 12563                           ;MCU_B1.c: 848: Memory->Data[0]=0xff;
 12564  0F89  30FF               	movlw	255
 12565  0F8A  00DD               	movwf	??_Flash_Memory_Initialization
 12566  0F8B  0021               	movlb	1	; select bank1
 12567  0F8C  0866               	movf	_Memory^(0+128),w
 12568  0F8D  0086               	movwf	6
 12569  0F8E  3002               	movlw	2	; select bank4/5
 12570  0F8F  0087               	movwf	7
 12571  0F90  0020               	movlb	0	; select bank0
 12572  0F91  085D               	movf	??_Flash_Memory_Initialization,w
 12573  0F92  0081               	movwf	1
 12574                           
 12575                           ;MCU_B1.c: 849: Memory->Data[1]=0xff;
 12576  0F93  30FF               	movlw	255
 12577  0F94  00DD               	movwf	??_Flash_Memory_Initialization
 12578  0F95  0021               	movlb	1	; select bank1
 12579  0F96  0A66               	incf	_Memory^(0+128),w
 12580  0F97  0086               	movwf	6
 12581  0F98  3002               	movlw	2	; select bank4/5
 12582  0F99  0087               	movwf	7
 12583  0F9A  0020               	movlb	0	; select bank0
 12584  0F9B  085D               	movf	??_Flash_Memory_Initialization,w
 12585  0F9C  0081               	movwf	1
 12586                           
 12587                           ;MCU_B1.c: 850: Memory->Data[2]=0xff;
 12588  0F9D  30FF               	movlw	255
 12589  0F9E  00DD               	movwf	??_Flash_Memory_Initialization
 12590  0F9F  0021               	movlb	1	; select bank1
 12591  0FA0  0866               	movf	_Memory^(0+128),w
 12592  0FA1  3E02               	addlw	2
 12593  0FA2  0086               	movwf	6
 12594  0FA3  3002               	movlw	2	; select bank4/5
 12595  0FA4  0087               	movwf	7
 12596  0FA5  0020               	movlb	0	; select bank0
 12597  0FA6  085D               	movf	??_Flash_Memory_Initialization,w
 12598  0FA7  0081               	movwf	1
 12599                           
 12600                           ;MCU_B1.c: 851: Memory->Data[3]=0xff;
 12601  0FA8  30FF               	movlw	255
 12602  0FA9  00DD               	movwf	??_Flash_Memory_Initialization
 12603  0FAA  0021               	movlb	1	; select bank1
 12604  0FAB  0866               	movf	_Memory^(0+128),w
 12605  0FAC  3E03               	addlw	3
 12606  0FAD  0086               	movwf	6
 12607  0FAE  3002               	movlw	2	; select bank4/5
 12608  0FAF  0087               	movwf	7
 12609  0FB0  0020               	movlb	0	; select bank0
 12610  0FB1  085D               	movf	??_Flash_Memory_Initialization,w
 12611  0FB2  0081               	movwf	1
 12612                           
 12613                           ;MCU_B1.c: 852: Memory->Data[4]=0xff;
 12614  0FB3  30FF               	movlw	255
 12615  0FB4  00DD               	movwf	??_Flash_Memory_Initialization
 12616  0FB5  0021               	movlb	1	; select bank1
 12617  0FB6  0866               	movf	_Memory^(0+128),w
 12618  0FB7  3E04               	addlw	4
 12619  0FB8  0086               	movwf	6
 12620  0FB9  3002               	movlw	2	; select bank4/5
 12621  0FBA  0087               	movwf	7
 12622  0FBB  0020               	movlb	0	; select bank0
 12623  0FBC  085D               	movf	??_Flash_Memory_Initialization,w
 12624  0FBD  0081               	movwf	1
 12625                           
 12626                           ;MCU_B1.c: 853: Memory->Data[5]=0xff;
 12627  0FBE  30FF               	movlw	255
 12628  0FBF  00DD               	movwf	??_Flash_Memory_Initialization
 12629  0FC0  0021               	movlb	1	; select bank1
 12630  0FC1  0866               	movf	_Memory^(0+128),w
 12631  0FC2  3E05               	addlw	5
 12632  0FC3  0086               	movwf	6
 12633  0FC4  3002               	movlw	2	; select bank4/5
 12634  0FC5  0087               	movwf	7
 12635  0FC6  0020               	movlb	0	; select bank0
 12636  0FC7  085D               	movf	??_Flash_Memory_Initialization,w
 12637  0FC8  0081               	movwf	1
 12638                           
 12639                           ;MCU_B1.c: 854: Memory->Data[31]=0xaa;
 12640  0FC9  30AA               	movlw	170
 12641  0FCA  00DD               	movwf	??_Flash_Memory_Initialization
 12642  0FCB  0021               	movlb	1	; select bank1
 12643  0FCC  0866               	movf	_Memory^(0+128),w
 12644  0FCD  3E1F               	addlw	31
 12645  0FCE  0086               	movwf	6
 12646  0FCF  3002               	movlw	2	; select bank4/5
 12647  0FD0  0087               	movwf	7
 12648  0FD1  0020               	movlb	0	; select bank0
 12649  0FD2  085D               	movf	??_Flash_Memory_Initialization,w
 12650  0FD3  0081               	movwf	1
 12651                           
 12652                           ;MCU_B1.c: 855: product->Data[21] = i;
 12653  0FD4  085E               	movf	Flash_Memory_Initialization@i,w
 12654  0FD5  00DD               	movwf	??_Flash_Memory_Initialization
 12655  0FD6  087D               	movf	_product,w
 12656  0FD7  3E15               	addlw	21
 12657  0FD8  0086               	movwf	6
 12658  0FD9  3001               	movlw	1	; select bank2/3
 12659  0FDA  0087               	movwf	7
 12660  0FDB  085D               	movf	??_Flash_Memory_Initialization,w
 12661  0FDC  0081               	movwf	1
 12662                           
 12663                           ;MCU_B1.c: 856: product->Data[22] = i;
 12664  0FDD  085E               	movf	Flash_Memory_Initialization@i,w
 12665  0FDE  00DD               	movwf	??_Flash_Memory_Initialization
 12666  0FDF  087D               	movf	_product,w
 12667  0FE0  3E16               	addlw	22
 12668  0FE1  0086               	movwf	6
 12669  0FE2  3001               	movlw	1	; select bank2/3
 12670  0FE3  0087               	movwf	7
 12671  0FE4  085D               	movf	??_Flash_Memory_Initialization,w
 12672  0FE5  0081               	movwf	1
 12673                           
 12674                           ;MCU_B1.c: 857: product->Data[23] = i;
 12675  0FE6  085E               	movf	Flash_Memory_Initialization@i,w
 12676  0FE7  00DD               	movwf	??_Flash_Memory_Initialization
 12677  0FE8  087D               	movf	_product,w
 12678  0FE9  3E17               	addlw	23
 12679  0FEA  0086               	movwf	6
 12680  0FEB  3001               	movlw	1	; select bank2/3
 12681  0FEC  0087               	movwf	7
 12682  0FED  085D               	movf	??_Flash_Memory_Initialization,w
 12683  0FEE  0081               	movwf	1
 12684                           
 12685                           ;MCU_B1.c: 858: GIE = 0;
 12686  0FEF  138B               	bcf	11,7	;volatile
 12687                           
 12688                           ;MCU_B1.c: 859: Flash_Memory_Write();
 12689  0FF0  319E  2629         	fcall	_Flash_Memory_Write
 12690                           
 12691                           ;MCU_B1.c: 860: GIE = 1;
 12692  0FF2  178B               	bsf	11,7	;volatile
 12693                           
 12694                           ;MCU_B1.c: 861: myMain->FirstOpen = 1;
 12695  0FF3  0021               	movlb	1	; select bank1
 12696  0FF4  0869               	movf	_myMain^(0+128),w
 12697  0FF5  0086               	movwf	6
 12698  0FF6  3001               	movlw	1	; select bank2/3
 12699  0FF7  0087               	movwf	7
 12700  0FF8  1681               	bsf	1,5
 12701                           
 12702                           ;MCU_B1.c: 862: myMain->First = 1;
 12703  0FF9  0869               	movf	_myMain^(0+128),w
 12704  0FFA  3E03               	addlw	3
 12705  0FFB  0086               	movwf	6
 12706  0FFC  3001               	movlw	1	; select bank2/3
 12707  0FFD  0087               	movwf	7
 12708  0FFE  1481               	bsf	1,1
 12709  0FFF  0008               	return
 12710  1000                     __end_of_Flash_Memory_Initialization:	
 12711                           
 12712                           	psect	text69
 12713  1E29                     __ptext69:	
 12714 ;; *************** function _Flash_Memory_Write *****************
 12715 ;; Defined at:
 12716 ;;		line 907 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;		None
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  i               1    1[BANK0 ] unsigned char 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;		None               void
 12723 ;; Registers used:
 12724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;Total ram usage:        2 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    5
 12737 ;; This function calls:
 12738 ;;		_Flash_Memory_Unlock
 12739 ;; This function is called by:
 12740 ;;		_Flash_Memory_Initialization
 12741 ;;		_Flash_Memory_Modify
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           
 12746                           ;psect for function _Flash_Memory_Write
 12747  1E29                     _Flash_Memory_Write:	
 12748                           
 12749                           ;MCU_B1.c: 908: char i;
 12750                           ;MCU_B1.c: 909: CFGS = 0;
 12751                           
 12752                           ;incstack = 0
 12753                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12754  1E29  0023               	movlb	3	; select bank3
 12755  1E2A  1315               	bcf	21,6	;volatile
 12756                           
 12757                           ;MCU_B1.c: 910: PMADRH = 0x30;
 12758  1E2B  3030               	movlw	48
 12759  1E2C  0092               	movwf	18	;volatile
 12760                           
 12761                           ;MCU_B1.c: 911: PMDATH = 0;
 12762  1E2D  0194               	clrf	20	;volatile
 12763                           
 12764                           ;MCU_B1.c: 912: FREE = 0;
 12765  1E2E  1215               	bcf	21,4	;volatile
 12766                           
 12767                           ;MCU_B1.c: 913: LWLO = 1;
 12768  1E2F  1695               	bsf	21,5	;volatile
 12769                           
 12770                           ;MCU_B1.c: 914: WREN = 1;
 12771  1E30  1515               	bsf	21,2	;volatile
 12772                           
 12773                           ;MCU_B1.c: 915: for (i = 0; i < 32; i++) {
 12774  1E31  0020               	movlb	0	; select bank0
 12775  1E32  01A1               	clrf	Flash_Memory_Write@i
 12776  1E33  3020               	movlw	32
 12777  1E34  0221               	subwf	Flash_Memory_Write@i,w
 12778  1E35  1803               	btfsc	3,0
 12779  1E36  2E53               	goto	l1419
 12780  1E37                     l8314:	
 12781                           
 12782                           ;MCU_B1.c: 916: PMADRL = i;
 12783  1E37  0821               	movf	Flash_Memory_Write@i,w
 12784  1E38  0023               	movlb	3	; select bank3
 12785  1E39  0091               	movwf	17	;volatile
 12786                           
 12787                           ;MCU_B1.c: 917: PMDATL = Memory->Data[i];
 12788  1E3A  0020               	movlb	0	; select bank0
 12789  1E3B  0821               	movf	Flash_Memory_Write@i,w
 12790  1E3C  0021               	movlb	1	; select bank1
 12791  1E3D  0766               	addwf	_Memory^(0+128),w
 12792  1E3E  0020               	movlb	0	; select bank0
 12793  1E3F  00A0               	movwf	??_Flash_Memory_Write
 12794  1E40  0820               	movf	??_Flash_Memory_Write,w
 12795  1E41  0086               	movwf	6
 12796  1E42  3002               	movlw	2	; select bank4/5
 12797  1E43  0087               	movwf	7
 12798  1E44  0801               	movf	1,w
 12799  1E45  0023               	movlb	3	; select bank3
 12800  1E46  0093               	movwf	19	;volatile
 12801                           
 12802                           ;MCU_B1.c: 918: Flash_Memory_Unlock();
 12803  1E47  31A7  27C2  319E   	fcall	_Flash_Memory_Unlock
 12804  1E4A  3001               	movlw	1
 12805  1E4B  0020               	movlb	0	; select bank0
 12806  1E4C  00A0               	movwf	??_Flash_Memory_Write
 12807  1E4D  0820               	movf	??_Flash_Memory_Write,w
 12808  1E4E  07A1               	addwf	Flash_Memory_Write@i,f
 12809  1E4F  3020               	movlw	32
 12810  1E50  0221               	subwf	Flash_Memory_Write@i,w
 12811  1E51  1C03               	skipc
 12812  1E52  2E37               	goto	l8314
 12813  1E53                     l1419:	
 12814                           
 12815                           ;MCU_B1.c: 919: }
 12816                           ;MCU_B1.c: 920: LWLO = 0;
 12817  1E53  0023               	movlb	3	; select bank3
 12818  1E54  1295               	bcf	21,5	;volatile
 12819                           
 12820                           ;MCU_B1.c: 921: Flash_Memory_Unlock();
 12821  1E55  31A7  27C2         	fcall	_Flash_Memory_Unlock
 12822                           
 12823                           ;MCU_B1.c: 922: WREN = 0;
 12824  1E57  0023               	movlb	3	; select bank3
 12825  1E58  1115               	bcf	21,2	;volatile
 12826  1E59  0008               	return
 12827  1E5A                     __end_of_Flash_Memory_Write:	
 12828                           
 12829                           	psect	text70
 12830  27C2                     __ptext70:	
 12831 ;; *************** function _Flash_Memory_Unlock *****************
 12832 ;; Defined at:
 12833 ;;		line 886 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;		None
 12838 ;; Return value:  Size  Location     Type
 12839 ;;		None               void
 12840 ;; Registers used:
 12841 ;;		wreg
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;Total ram usage:        0 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    4
 12854 ;; This function calls:
 12855 ;;		Nothing
 12856 ;; This function is called by:
 12857 ;;		_Flash_Memory_Write
 12858 ;;		_Flash_Memory_Erasing
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           
 12863                           ;psect for function _Flash_Memory_Unlock
 12864  27C2                     _Flash_Memory_Unlock:	
 12865                           
 12866                           ;MCU_B1.c: 887: PMCON2 = 0x55;
 12867                           
 12868                           ;incstack = 0
 12869                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12870  27C2  3055               	movlw	85
 12871  27C3  0023               	movlb	3	; select bank3
 12872  27C4  0096               	movwf	22	;volatile
 12873                           
 12874                           ;MCU_B1.c: 888: PMCON2 = 0xaa;
 12875  27C5  30AA               	movlw	170
 12876  27C6  0096               	movwf	22	;volatile
 12877                           
 12878                           ;MCU_B1.c: 889: WR = 1;
 12879  27C7  1495               	bsf	21,1	;volatile
 12880                           
 12881                           ;MCU_B1.c: 890: __nop();
 12882  27C8  0000               	nop
 12883                           
 12884                           ;MCU_B1.c: 891: __nop();
 12885  27C9  0000               	nop
 12886  27CA  0008               	return
 12887  27CB                     __end_of_Flash_Memory_Unlock:	
 12888                           
 12889                           	psect	text71
 12890  1AD5                     __ptext71:	
 12891 ;; *************** function _Flash_Memory_Read *****************
 12892 ;; Defined at:
 12893 ;;		line 895 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  address         1    wreg     unsigned char 
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  address         1    2[BANK0 ] unsigned char 
 12898 ;;  ret             1    3[BANK0 ] unsigned char 
 12899 ;;  i               1    1[BANK0 ] unsigned char 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  1    wreg      unsigned char 
 12902 ;; Registers used:
 12903 ;;		wreg, status,2
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;Total ram usage:        4 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    4
 12916 ;; This function calls:
 12917 ;;		Nothing
 12918 ;; This function is called by:
 12919 ;;		_Flash_Memory_Initialization
 12920 ;;		_Flash_Memory_Modify
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           
 12925                           ;psect for function _Flash_Memory_Read
 12926  1AD5                     _Flash_Memory_Read:	
 12927                           
 12928                           ;incstack = 0
 12929                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12930                           ;Flash_Memory_Read@address stored from wreg
 12931  1AD5  0020               	movlb	0	; select bank0
 12932  1AD6  00A2               	movwf	Flash_Memory_Read@address
 12933                           
 12934                           ;MCU_B1.c: 896: char i, ret = 0;
 12935  1AD7  01A3               	clrf	Flash_Memory_Read@ret
 12936                           
 12937                           ;MCU_B1.c: 897: PMADRH = 0x30;
 12938  1AD8  3030               	movlw	48
 12939  1AD9  0023               	movlb	3	; select bank3
 12940  1ADA  0092               	movwf	18	;volatile
 12941                           
 12942                           ;MCU_B1.c: 898: PMADRL = address;
 12943  1ADB  0020               	movlb	0	; select bank0
 12944  1ADC  0822               	movf	Flash_Memory_Read@address,w
 12945  1ADD  0023               	movlb	3	; select bank3
 12946  1ADE  0091               	movwf	17	;volatile
 12947                           
 12948                           ;MCU_B1.c: 899: CFGS = 0;
 12949  1ADF  1315               	bcf	21,6	;volatile
 12950                           
 12951                           ;MCU_B1.c: 900: RD = 1;
 12952  1AE0  1415               	bsf	21,0	;volatile
 12953                           
 12954                           ;MCU_B1.c: 901: i = PMDATH;
 12955  1AE1  0814               	movf	20,w	;volatile
 12956  1AE2  0020               	movlb	0	; select bank0
 12957  1AE3  00A0               	movwf	??_Flash_Memory_Read
 12958  1AE4  0820               	movf	??_Flash_Memory_Read,w
 12959  1AE5  00A1               	movwf	Flash_Memory_Read@i
 12960                           
 12961                           ;MCU_B1.c: 902: ret = PMDATL;
 12962  1AE6  0023               	movlb	3	; select bank3
 12963  1AE7  0813               	movf	19,w	;volatile
 12964  1AE8  0020               	movlb	0	; select bank0
 12965  1AE9  00A0               	movwf	??_Flash_Memory_Read
 12966  1AEA  0820               	movf	??_Flash_Memory_Read,w
 12967  1AEB  00A3               	movwf	Flash_Memory_Read@ret
 12968                           
 12969                           ;MCU_B1.c: 903: return ret;
 12970  1AEC  0823               	movf	Flash_Memory_Read@ret,w
 12971  1AED  0008               	return
 12972  1AEE                     __end_of_Flash_Memory_Read:	
 12973                           
 12974                           	psect	text72
 12975  27F5                     __ptext72:	
 12976 ;; *************** function _DimmerLights_Main *****************
 12977 ;; Defined at:
 12978 ;;		line 114 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;		None
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;		None
 12983 ;; Return value:  Size  Location     Type
 12984 ;;		None               void
 12985 ;; Registers used:
 12986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;Total ram usage:        0 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:   10
 12999 ;; This function calls:
 13000 ;;		_DimmerLights_Close
 13001 ;;		_setDimmerLights_Main
 13002 ;; This function is called by:
 13003 ;;		_main
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           
 13008                           ;psect for function _DimmerLights_Main
 13009  27F5                     _DimmerLights_Main:	
 13010                           
 13011                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 13012                           
 13013                           ;incstack = 0
 13014                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13015  27F5  3001               	movlw	1
 13016  27F6  3188  20A0  31A7   	fcall	_setDimmerLights_Main
 13017                           
 13018                           ;Dimmer_B1.c: 121: setDimmerLights_Main(2);
 13019  27F9  3002               	movlw	2
 13020  27FA  3188  20A0  31A7   	fcall	_setDimmerLights_Main
 13021                           
 13022                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 13023  27FD  319B  2307         	fcall	_DimmerLights_Close
 13024  27FF  0008               	return
 13025  2800                     __end_of_DimmerLights_Main:	
 13026                           
 13027                           	psect	text73
 13028  08A0                     __ptext73:	
 13029 ;; *************** function _setDimmerLights_Main *****************
 13030 ;; Defined at:
 13031 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;  lights          1    wreg     unsigned char 
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;  lights          1   70[BANK0 ] unsigned char 
 13036 ;;  clear           1   69[BANK0 ] unsigned char 
 13037 ;; Return value:  Size  Location     Type
 13038 ;;		None               void
 13039 ;; Registers used:
 13040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;Total ram usage:        2 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:    9
 13053 ;; This function calls:
 13054 ;;		_DimmerLightsPointSelect
 13055 ;;		_setBuz
 13056 ;;		_setDimmerLights
 13057 ;;		_setDimmerLights_Adj
 13058 ;; This function is called by:
 13059 ;;		_DimmerLights_Main
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           
 13064                           ;psect for function _setDimmerLights_Main
 13065  08A0                     _setDimmerLights_Main:	
 13066                           
 13067                           ;incstack = 0
 13068                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13069                           ;setDimmerLights_Main@lights stored from wreg
 13070  08A0  0020               	movlb	0	; select bank0
 13071  08A1  00E6               	movwf	setDimmerLights_Main@lights
 13072                           
 13073                           ;Dimmer_B1.c: 133: char clear=1;
 13074  08A2  01E5               	clrf	setDimmerLights_Main@clear
 13075  08A3  0AE5               	incf	setDimmerLights_Main@clear,f
 13076                           
 13077                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 13078  08A4  0866               	movf	setDimmerLights_Main@lights,w
 13079  08A5  3199  21B9  3188   	fcall	_DimmerLightsPointSelect
 13080                           
 13081                           ;Dimmer_B1.c: 152: if(lights == 1)
 13082  08A8  0020               	movlb	0	; select bank0
 13083  08A9  0866               	movf	setDimmerLights_Main@lights,w
 13084  08AA  3A01               	xorlw	1
 13085  08AB  1D03               	skipz
 13086  08AC  28AF               	goto	l8586
 13087                           
 13088                           ;Dimmer_B1.c: 153: {
 13089                           ;Dimmer_B1.c: 154: clear=(!DimmerLights22->Clear)?0:1;
 13090  08AD  0879               	movf	_DimmerLights22,w
 13091  08AE  28B4               	goto	L15
 13092  08AF                     l8586:	
 13093                           ;Dimmer_B1.c: 155: }
 13094                           
 13095                           
 13096                           ;Dimmer_B1.c: 156: else if(lights == 2)
 13097  08AF  0866               	movf	setDimmerLights_Main@lights,w
 13098  08B0  3A02               	xorlw	2
 13099  08B1  1D03               	skipz
 13100  08B2  28BC               	goto	l8590
 13101                           
 13102                           ;Dimmer_B1.c: 157: {
 13103                           ;Dimmer_B1.c: 158: clear=(!DimmerLights11->Clear)?0:1;
 13104  08B3  0878               	movf	_DimmerLights11,w
 13105  08B4                     L15:	
 13106  08B4  3E0C               	addlw	12
 13107  08B5  0086               	movwf	6
 13108  08B6  3001               	movlw	1	; select bank2/3
 13109  08B7  0087               	movwf	7
 13110  08B8  3000               	movlw	0
 13111  08B9  1801               	btfsc	1,0
 13112  08BA  3001               	movlw	1
 13113  08BB  00E5               	movwf	setDimmerLights_Main@clear
 13114  08BC                     l8590:	
 13115                           
 13116                           ;Dimmer_B1.c: 159: }
 13117                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 13118  08BC  0877               	movf	_DimmerLights,w
 13119  08BD  3E09               	addlw	9
 13120  08BE  0086               	movwf	6
 13121  08BF  3001               	movlw	1	; select bank2/3
 13122  08C0  0087               	movwf	7
 13123  08C1  1C81               	btfss	1,1
 13124  08C2  28F3               	goto	l8608
 13125                           
 13126                           ;Dimmer_B1.c: 163: {
 13127                           ;Dimmer_B1.c: 164: if(clear)
 13128  08C3  0865               	movf	setDimmerLights_Main@clear,w
 13129  08C4  1903               	btfsc	3,2
 13130  08C5  0008               	return
 13131                           
 13132                           ;Dimmer_B1.c: 165: {
 13133                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 13134  08C6  0877               	movf	_DimmerLights,w
 13135  08C7  3E09               	addlw	9
 13136  08C8  0086               	movwf	6
 13137  08C9  3001               	movlw	1	; select bank2/3
 13138  08CA  0087               	movwf	7
 13139  08CB  1C01               	btfss	1,0
 13140  08CC  28E0               	goto	l8602
 13141                           
 13142                           ;Dimmer_B1.c: 167: {
 13143                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 13144  08CD  0877               	movf	_DimmerLights,w
 13145  08CE  3E09               	addlw	9
 13146  08CF  0086               	movwf	6
 13147  08D0  3001               	movlw	1	; select bank2/3
 13148  08D1  0087               	movwf	7
 13149  08D2  1081               	bcf	1,1
 13150                           
 13151                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 13152  08D3  01A4               	clrf	setDimmerLights@status
 13153  08D4  0AA4               	incf	setDimmerLights@status,f
 13154  08D5  0866               	movf	setDimmerLights_Main@lights,w
 13155  08D6  318B  2375         	fcall	_setDimmerLights
 13156                           
 13157                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 13158  08D8  0877               	movf	_DimmerLights,w
 13159  08D9  3E0C               	addlw	12
 13160  08DA  0086               	movwf	6
 13161  08DB  3001               	movlw	1	; select bank2/3
 13162  08DC  0087               	movwf	7
 13163  08DD  1001               	bcf	1,0
 13164                           
 13165                           ;Dimmer_B1.c: 174: }
 13166  08DE  0020               	movlb	0	; select bank0
 13167  08DF  0008               	return
 13168  08E0                     l8602:	
 13169                           
 13170                           ;Dimmer_B1.c: 175: else
 13171                           ;Dimmer_B1.c: 176: {
 13172                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 13173  08E0  0877               	movf	_DimmerLights,w
 13174  08E1  3E09               	addlw	9
 13175  08E2  0086               	movwf	6
 13176  08E3  3001               	movlw	1	; select bank2/3
 13177  08E4  0087               	movwf	7
 13178  08E5  1081               	bcf	1,1
 13179                           
 13180                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 13181  08E6  0020               	movlb	0	; select bank0
 13182  08E7  01A4               	clrf	setDimmerLights@status
 13183  08E8  0866               	movf	setDimmerLights_Main@lights,w
 13184  08E9  318B  2375         	fcall	_setDimmerLights
 13185                           
 13186                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 13187  08EB  0877               	movf	_DimmerLights,w
 13188  08EC  3E0C               	addlw	12
 13189  08ED  0086               	movwf	6
 13190  08EE  3001               	movlw	1	; select bank2/3
 13191  08EF  0087               	movwf	7
 13192  08F0  1001               	bcf	1,0
 13193  08F1  0020               	movlb	0	; select bank0
 13194  08F2  0008               	return
 13195  08F3                     l8608:	
 13196                           ;Dimmer_B1.c: 183: }
 13197                           ;Dimmer_B1.c: 184: }
 13198                           ;Dimmer_B1.c: 185: }
 13199                           
 13200                           
 13201                           ;Dimmer_B1.c: 186: else
 13202                           ;Dimmer_B1.c: 187: {
 13203                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 13204  08F3  0877               	movf	_DimmerLights,w
 13205  08F4  3E09               	addlw	9
 13206  08F5  0086               	movwf	6
 13207  08F6  3001               	movlw	1	; select bank2/3
 13208  08F7  0087               	movwf	7
 13209  08F8  1981               	btfsc	1,3
 13210  08F9  28FC               	goto	l8610
 13211  08FA  0020               	movlb	0	; select bank0
 13212  08FB  0008               	return
 13213  08FC                     l8610:	
 13214                           
 13215                           ;Dimmer_B1.c: 189: {
 13216                           ;Dimmer_B1.c: 190: if(clear)
 13217  08FC  0020               	movlb	0	; select bank0
 13218  08FD  0865               	movf	setDimmerLights_Main@clear,w
 13219  08FE  1903               	btfsc	3,2
 13220  08FF  0008               	return
 13221                           
 13222                           ;Dimmer_B1.c: 191: {
 13223                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 13224  0900  0866               	movf	setDimmerLights_Main@lights,w
 13225  0901  3199  21B9  3188   	fcall	_DimmerLightsPointSelect
 13226                           
 13227                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 13228  0904  0877               	movf	_DimmerLights,w
 13229  0905  3E09               	addlw	9
 13230  0906  0086               	movwf	6
 13231  0907  3001               	movlw	1	; select bank2/3
 13232  0908  0087               	movwf	7
 13233  0909  1181               	bcf	1,3
 13234                           
 13235                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 13236  090A  0877               	movf	_DimmerLights,w
 13237  090B  3E09               	addlw	9
 13238  090C  0086               	movwf	6
 13239  090D  3001               	movlw	1	; select bank2/3
 13240  090E  0087               	movwf	7
 13241  090F  1D01               	btfss	1,2
 13242  0910  2922               	goto	l8620
 13243                           
 13244                           ;Dimmer_B1.c: 195: {
 13245                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 13246  0911  0020               	movlb	0	; select bank0
 13247  0912  01E2               	clrf	setDimmerLights_Adj@status
 13248  0913  0AE2               	incf	setDimmerLights_Adj@status,f
 13249  0914  0866               	movf	setDimmerLights_Main@lights,w
 13250  0915  3190  2032  3188   	fcall	_setDimmerLights_Adj
 13251                           
 13252                           ;Dimmer_B1.c: 197: setBuz(1,100);
 13253  0918  3064               	movlw	100
 13254  0919  0020               	movlb	0	; select bank0
 13255  091A  00A6               	movwf	setBuz@time
 13256  091B  3000               	movlw	0
 13257  091C  00A7               	movwf	setBuz@time+1
 13258  091D  3001               	movlw	1
 13259  091E  3188  2017         	fcall	_setBuz
 13260                           
 13261                           ;Dimmer_B1.c: 198: }
 13262  0920  0020               	movlb	0	; select bank0
 13263  0921  0008               	return
 13264  0922                     l8620:	
 13265                           
 13266                           ;Dimmer_B1.c: 199: else
 13267                           ;Dimmer_B1.c: 200: {
 13268                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 13269  0922  0020               	movlb	0	; select bank0
 13270  0923  01E2               	clrf	setDimmerLights_Adj@status
 13271  0924  0866               	movf	setDimmerLights_Main@lights,w
 13272  0925  3190  2032         	fcall	_setDimmerLights_Adj
 13273  0927  0020               	movlb	0	; select bank0
 13274  0928  0008               	return
 13275  0929                     __end_of_setDimmerLights_Main:	
 13276                           
 13277                           	psect	text74
 13278  1032                     __ptext74:	
 13279 ;; *************** function _setDimmerLights_Adj *****************
 13280 ;; Defined at:
 13281 ;;		line 388 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  lights          1    wreg     unsigned char 
 13284 ;;  status          1   66[BANK0 ] unsigned char 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  lights          1   68[BANK0 ] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;		None               void
 13289 ;; Registers used:
 13290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        3 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    8
 13303 ;; This function calls:
 13304 ;;		_DimmerLightsPointSelect
 13305 ;;		_setLoad_StatusOff
 13306 ;;		_setRF_DimmerLights
 13307 ;;		_setTxData
 13308 ;; This function is called by:
 13309 ;;		_setDimmerLights_Main
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           
 13314                           ;psect for function _setDimmerLights_Adj
 13315  1032                     _setDimmerLights_Adj:	
 13316                           
 13317                           ;incstack = 0
 13318                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13319                           ;setDimmerLights_Adj@lights stored from wreg
 13320  1032  0020               	movlb	0	; select bank0
 13321  1033  00E4               	movwf	setDimmerLights_Adj@lights
 13322                           
 13323                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 13324  1034  0864               	movf	setDimmerLights_Adj@lights,w
 13325  1035  3199  21B9  3190   	fcall	_DimmerLightsPointSelect
 13326                           
 13327                           ;Dimmer_B1.c: 391: if(status)
 13328  1038  0020               	movlb	0	; select bank0
 13329  1039  0862               	movf	setDimmerLights_Adj@status,w
 13330  103A  1903               	btfsc	3,2
 13331  103B  2847               	goto	l8272
 13332                           
 13333                           ;Dimmer_B1.c: 392: {
 13334                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 13335  103C  0877               	movf	_DimmerLights,w
 13336  103D  0086               	movwf	6
 13337  103E  3001               	movlw	1	; select bank2/3
 13338  103F  0087               	movwf	7
 13339  1040  1581               	bsf	1,3
 13340                           
 13341                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 13342  1041  0877               	movf	_DimmerLights,w
 13343  1042  0086               	movwf	6
 13344  1043  3001               	movlw	1	; select bank2/3
 13345  1044  0087               	movwf	7
 13346  1045  1481               	bsf	1,1
 13347                           
 13348                           ;Dimmer_B1.c: 395: }
 13349  1046  0008               	return
 13350  1047                     l8272:	
 13351                           
 13352                           ;Dimmer_B1.c: 396: else
 13353                           ;Dimmer_B1.c: 397: {
 13354                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 13355  1047  0877               	movf	_DimmerLights,w
 13356  1048  0086               	movwf	6
 13357  1049  3001               	movlw	1	; select bank2/3
 13358  104A  0087               	movwf	7
 13359  104B  1D81               	btfss	1,3
 13360  104C  0008               	return
 13361                           
 13362                           ;Dimmer_B1.c: 399: {
 13363                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 13364  104D  0877               	movf	_DimmerLights,w
 13365  104E  0086               	movwf	6
 13366  104F  3001               	movlw	1	; select bank2/3
 13367  1050  0087               	movwf	7
 13368  1051  1081               	bcf	1,1
 13369                           
 13370                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 13371  1052  0877               	movf	_DimmerLights,w
 13372  1053  0086               	movwf	6
 13373  1054  3001               	movlw	1	; select bank2/3
 13374  1055  0087               	movwf	7
 13375  1056  1181               	bcf	1,3
 13376                           
 13377                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 13378  1057  01A0               	clrf	setLoad_StatusOff@command
 13379  1058  0AA0               	incf	setLoad_StatusOff@command,f
 13380  1059  3000               	movlw	0
 13381  105A  319D  25F8  3190   	fcall	_setLoad_StatusOff
 13382                           
 13383                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 13384  105D  0877               	movf	_DimmerLights,w
 13385  105E  3E04               	addlw	4
 13386  105F  0086               	movwf	6
 13387  1060  3001               	movlw	1	; select bank2/3
 13388  1061  0087               	movwf	7
 13389  1062  0801               	movf	1,w
 13390  1063  0020               	movlb	0	; select bank0
 13391  1064  00E3               	movwf	??_setDimmerLights_Adj
 13392  1065  0877               	movf	_DimmerLights,w
 13393  1066  3E05               	addlw	5
 13394  1067  0086               	movwf	6
 13395  1068  3001               	movlw	1	; select bank2/3
 13396  1069  0087               	movwf	7
 13397  106A  0863               	movf	??_setDimmerLights_Adj,w
 13398  106B  0081               	movwf	1
 13399                           
 13400                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 13401  106C  01DD               	clrf	setRF_DimmerLights@on
 13402  106D  0ADD               	incf	setRF_DimmerLights@on,f
 13403  106E  0864               	movf	setDimmerLights_Adj@lights,w
 13404  106F  3194  24CE  3190   	fcall	_setRF_DimmerLights
 13405                           
 13406                           ;Dimmer_B1.c: 412: setTxData(1);
 13407  1072  3001               	movlw	1
 13408  1073  318C  240F         	fcall	_setTxData
 13409  1075  0008               	return
 13410  1076                     __end_of_setDimmerLights_Adj:	
 13411                           
 13412                           	psect	text75
 13413  1DF8                     __ptext75:	
 13414 ;; *************** function _setLoad_StatusOff *****************
 13415 ;; Defined at:
 13416 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  lights          1    wreg     unsigned char 
 13419 ;;  command         1    0[BANK0 ] unsigned char 
 13420 ;; Auto vars:     Size  Location     Type
 13421 ;;  lights          1    1[BANK0 ] unsigned char 
 13422 ;; Return value:  Size  Location     Type
 13423 ;;		None               void
 13424 ;; Registers used:
 13425 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;Total ram usage:        2 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:    4
 13438 ;; This function calls:
 13439 ;;		Nothing
 13440 ;; This function is called by:
 13441 ;;		_setDimmerLights_ERROR
 13442 ;;		_setDimmerLights_Adj
 13443 ;; This function uses a non-reentrant model
 13444 ;;
 13445                           
 13446                           
 13447                           ;psect for function _setLoad_StatusOff
 13448  1DF8                     _setLoad_StatusOff:	
 13449                           
 13450                           ;incstack = 0
 13451                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 13452                           ;setLoad_StatusOff@lights stored from wreg
 13453  1DF8  0020               	movlb	0	; select bank0
 13454  1DF9  00A1               	movwf	setLoad_StatusOff@lights
 13455                           
 13456                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 13457  1DFA  087B               	movf	_Load,w
 13458  1DFB  3E46               	addlw	70
 13459  1DFC  0086               	movwf	6
 13460  1DFD  3002               	movlw	2	; select bank4/5
 13461  1DFE  0087               	movwf	7
 13462  1DFF  0820               	movf	setLoad_StatusOff@command,w
 13463  1E00  1081               	bcf	1,1
 13464  1E01  1D03               	skipz
 13465  1E02  1481               	bsf	1,1
 13466                           
 13467                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 13468  1E03  087B               	movf	_Load,w
 13469  1E04  3E42               	addlw	66
 13470  1E05  0086               	movwf	6
 13471  1E06  3002               	movlw	2	; select bank4/5
 13472  1E07  0087               	movwf	7
 13473  1E08  3002               	movlw	2
 13474  1E09  0281               	subwf	1,f
 13475                           
 13476                           ;OverLoad_B1.c: 287: if (lights == 1) {
 13477  1E0A  0821               	movf	setLoad_StatusOff@lights,w
 13478  1E0B  3A01               	xorlw	1
 13479  1E0C  1D03               	skipz
 13480  1E0D  2E14               	goto	l8062
 13481                           
 13482                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 13483  1E0E  087B               	movf	_Load,w
 13484  1E0F  3E43               	addlw	67
 13485  1E10  0086               	movwf	6
 13486  1E11  3002               	movlw	2	; select bank4/5
 13487  1E12  0087               	movwf	7
 13488  1E13  0181               	clrf	1
 13489  1E14                     l8062:	
 13490                           
 13491                           ;OverLoad_B1.c: 289: }
 13492                           ;OverLoad_B1.c: 290: if (lights == 2) {
 13493  1E14  0821               	movf	setLoad_StatusOff@lights,w
 13494  1E15  3A02               	xorlw	2
 13495  1E16  1D03               	skipz
 13496  1E17  2E1E               	goto	l8066
 13497                           
 13498                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 13499  1E18  087B               	movf	_Load,w
 13500  1E19  3E44               	addlw	68
 13501  1E1A  0086               	movwf	6
 13502  1E1B  3002               	movlw	2	; select bank4/5
 13503  1E1C  0087               	movwf	7
 13504  1E1D  0181               	clrf	1
 13505  1E1E                     l8066:	
 13506                           
 13507                           ;OverLoad_B1.c: 292: }
 13508                           ;OverLoad_B1.c: 293: if (lights == 3) {
 13509  1E1E  0821               	movf	setLoad_StatusOff@lights,w
 13510  1E1F  3A03               	xorlw	3
 13511  1E20  1D03               	skipz
 13512  1E21  0008               	return
 13513                           
 13514                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 13515  1E22  087B               	movf	_Load,w
 13516  1E23  3E45               	addlw	69
 13517  1E24  0086               	movwf	6
 13518  1E25  3002               	movlw	2	; select bank4/5
 13519  1E26  0087               	movwf	7
 13520  1E27  0181               	clrf	1
 13521  1E28  0008               	return
 13522  1E29                     __end_of_setLoad_StatusOff:	
 13523                           
 13524                           	psect	text76
 13525  0B75                     __ptext76:	
 13526 ;; *************** function _setDimmerLights *****************
 13527 ;; Defined at:
 13528 ;;		line 330 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;  lights          1    wreg     unsigned char 
 13531 ;;  status          1    4[BANK0 ] unsigned char 
 13532 ;; Auto vars:     Size  Location     Type
 13533 ;;  lights          1    6[BANK0 ] unsigned char 
 13534 ;; Return value:  Size  Location     Type
 13535 ;;		None               void
 13536 ;; Registers used:
 13537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13538 ;; Tracked objects:
 13539 ;;		On entry : 0/0
 13540 ;;		On exit  : 0/0
 13541 ;;		Unchanged: 0/0
 13542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13543 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;Total ram usage:        3 bytes
 13548 ;; Hardware stack levels used:    1
 13549 ;; Hardware stack levels required when called:    6
 13550 ;; This function calls:
 13551 ;;		_DimmerLightsPointSelect
 13552 ;;		_setLED
 13553 ;;		_setLoad_Count
 13554 ;;		_setLoad_StatusOn
 13555 ;; This function is called by:
 13556 ;;		_setDimmerLights_Main
 13557 ;;		_setControl_Lights_Table
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function _setDimmerLights
 13563  0B75                     _setDimmerLights:	
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13567                           ;setDimmerLights@lights stored from wreg
 13568  0B75  0020               	movlb	0	; select bank0
 13569  0B76  00A6               	movwf	setDimmerLights@lights
 13570                           
 13571                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 13572  0B77  0826               	movf	setDimmerLights@lights,w
 13573  0B78  3199  21B9  318B   	fcall	_DimmerLightsPointSelect
 13574                           
 13575                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 13576  0B7B  0020               	movlb	0	; select bank0
 13577  0B7C  0826               	movf	setDimmerLights@lights,w
 13578  0B7D  00A5               	movwf	??_setDimmerLights
 13579  0B7E  0021               	movlb	1	; select bank1
 13580  0B7F  0A3A               	incf	_Dimmer^(0+128),w
 13581  0B80  0086               	movwf	6
 13582  0B81  0187               	clrf	7
 13583  0B82  0020               	movlb	0	; select bank0
 13584  0B83  0825               	movf	??_setDimmerLights,w
 13585  0B84  0081               	movwf	1
 13586                           
 13587                           ;Dimmer_B1.c: 334: if(status)
 13588  0B85  0824               	movf	setDimmerLights@status,w
 13589  0B86  1903               	btfsc	3,2
 13590  0B87  2BDD               	goto	l8052
 13591                           
 13592                           ;Dimmer_B1.c: 335: {
 13593                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 13594  0B88  0877               	movf	_DimmerLights,w
 13595  0B89  0086               	movwf	6
 13596  0B8A  3001               	movlw	1	; select bank2/3
 13597  0B8B  0087               	movwf	7
 13598  0B8C  1681               	bsf	1,5
 13599                           
 13600                           ;Dimmer_B1.c: 337: setLED(lights,0);
 13601  0B8D  01A2               	clrf	setLED@command
 13602  0B8E  0826               	movf	setDimmerLights@lights,w
 13603  0B8F  3192  22E8  318B   	fcall	_setLED
 13604                           
 13605                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 13606  0B92  3000               	movlw	0
 13607  0B93  319A  221E  318B   	fcall	_setLoad_Count
 13608                           
 13609                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 13610  0B96  0877               	movf	_DimmerLights,w
 13611  0B97  0086               	movwf	6
 13612  0B98  3001               	movlw	1	; select bank2/3
 13613  0B99  0087               	movwf	7
 13614  0B9A  1481               	bsf	1,1
 13615                           
 13616                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 13617  0B9B  3003               	movlw	3
 13618  0B9C  0020               	movlb	0	; select bank0
 13619  0B9D  00A5               	movwf	??_setDimmerLights
 13620  0B9E  0877               	movf	_DimmerLights,w
 13621  0B9F  3E02               	addlw	2
 13622  0BA0  0086               	movwf	6
 13623  0BA1  3001               	movlw	1	; select bank2/3
 13624  0BA2  0087               	movwf	7
 13625  0BA3  0825               	movf	??_setDimmerLights,w
 13626  0BA4  0081               	movwf	1
 13627                           
 13628                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 13629  0BA5  0877               	movf	_DimmerLights,w
 13630  0BA6  0086               	movwf	6
 13631  0BA7  3001               	movlw	1	; select bank2/3
 13632  0BA8  0087               	movwf	7
 13633  0BA9  1B01               	btfsc	1,6
 13634  0BAA  0008               	return
 13635                           
 13636                           ;Dimmer_B1.c: 345: {
 13637                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 13638  0BAB  0877               	movf	_DimmerLights,w
 13639  0BAC  0086               	movwf	6
 13640  0BAD  3001               	movlw	1	; select bank2/3
 13641  0BAE  0087               	movwf	7
 13642  0BAF  1701               	bsf	1,6
 13643                           
 13644                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 13645  0BB0  01A0               	clrf	setLoad_StatusOn@command
 13646  0BB1  0AA0               	incf	setLoad_StatusOn@command,f
 13647  0BB2  0826               	movf	setDimmerLights@lights,w
 13648  0BB3  3190  2000         	fcall	_setLoad_StatusOn
 13649                           
 13650                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 13651  0BB5  0021               	movlb	1	; select bank1
 13652  0BB6  0866               	movf	_Memory^(0+128),w
 13653  0BB7  3E22               	addlw	34
 13654  0BB8  0086               	movwf	6
 13655  0BB9  3002               	movlw	2	; select bank4/5
 13656  0BBA  0087               	movwf	7
 13657  0BBB  1081               	bcf	1,1
 13658  0BBC  0866               	movf	_Memory^(0+128),w
 13659  0BBD  3E23               	addlw	35
 13660  0BBE  0086               	movwf	6
 13661  0BBF  3002               	movlw	2	; select bank4/5
 13662  0BC0  0087               	movwf	7
 13663  0BC1  3000               	movlw	0
 13664  0BC2  3FC0               	movwi [0]fsr1
 13665  0BC3  3FC1               	movwi [1]fsr1
 13666                           
 13667                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 13668  0BC4  0877               	movf	_DimmerLights,w
 13669  0BC5  3E05               	addlw	5
 13670  0BC6  0086               	movwf	6
 13671  0BC7  3001               	movlw	1	; select bank2/3
 13672  0BC8  0087               	movwf	7
 13673  0BC9  0801               	movf	1,w
 13674  0BCA  0020               	movlb	0	; select bank0
 13675  0BCB  00A5               	movwf	??_setDimmerLights
 13676  0BCC  0877               	movf	_DimmerLights,w
 13677  0BCD  3E04               	addlw	4
 13678  0BCE  0086               	movwf	6
 13679  0BCF  3001               	movlw	1	; select bank2/3
 13680  0BD0  0087               	movwf	7
 13681  0BD1  0825               	movf	??_setDimmerLights,w
 13682  0BD2  0081               	movwf	1
 13683                           
 13684                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)(65*1.5));
 13685  0BD3  3061               	movlw	97
 13686  0BD4  00A5               	movwf	??_setDimmerLights
 13687  0BD5  0877               	movf	_DimmerLights,w
 13688  0BD6  3E04               	addlw	4
 13689  0BD7  0086               	movwf	6
 13690  0BD8  3001               	movlw	1	; select bank2/3
 13691  0BD9  0087               	movwf	7
 13692  0BDA  0825               	movf	??_setDimmerLights,w
 13693  0BDB  0081               	movwf	1
 13694                           
 13695                           ;Dimmer_B1.c: 357: }
 13696                           ;Dimmer_B1.c: 358: }
 13697  0BDC  0008               	return
 13698  0BDD                     l8052:	
 13699                           
 13700                           ;Dimmer_B1.c: 359: else
 13701                           ;Dimmer_B1.c: 360: {
 13702                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 13703  0BDD  0877               	movf	_DimmerLights,w
 13704  0BDE  0086               	movwf	6
 13705  0BDF  3001               	movlw	1	; select bank2/3
 13706  0BE0  0087               	movwf	7
 13707  0BE1  1281               	bcf	1,5
 13708                           
 13709                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13710  0BE2  0877               	movf	_DimmerLights,w
 13711  0BE3  3E06               	addlw	6
 13712  0BE4  0086               	movwf	6
 13713  0BE5  3001               	movlw	1	; select bank2/3
 13714  0BE6  0087               	movwf	7
 13715  0BE7  0801               	movf	1,w
 13716  0BE8  00A5               	movwf	??_setDimmerLights
 13717  0BE9  0877               	movf	_DimmerLights,w
 13718  0BEA  3E04               	addlw	4
 13719  0BEB  0086               	movwf	6
 13720  0BEC  3001               	movlw	1	; select bank2/3
 13721  0BED  0087               	movwf	7
 13722  0BEE  0825               	movf	??_setDimmerLights,w
 13723  0BEF  0081               	movwf	1
 13724                           
 13725                           ;Dimmer_B1.c: 368: DimmerLights->MosfetClose=1;
 13726  0BF0  0877               	movf	_DimmerLights,w
 13727  0BF1  3E09               	addlw	9
 13728  0BF2  0086               	movwf	6
 13729  0BF3  3001               	movlw	1	; select bank2/3
 13730  0BF4  0087               	movwf	7
 13731  0BF5  1701               	bsf	1,6
 13732                           
 13733                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 13734  0BF6  0877               	movf	_DimmerLights,w
 13735  0BF7  0086               	movwf	6
 13736  0BF8  3001               	movlw	1	; select bank2/3
 13737  0BF9  0087               	movwf	7
 13738  0BFA  1481               	bsf	1,1
 13739                           
 13740                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 13741  0BFB  0877               	movf	_DimmerLights,w
 13742  0BFC  0086               	movwf	6
 13743  0BFD  3001               	movlw	1	; select bank2/3
 13744  0BFE  0087               	movwf	7
 13745  0BFF  1181               	bcf	1,3
 13746                           
 13747                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 13748  0C00  0877               	movf	_DimmerLights,w
 13749  0C01  0086               	movwf	6
 13750  0C02  3001               	movlw	1	; select bank2/3
 13751  0C03  0087               	movwf	7
 13752  0C04  1201               	bcf	1,4
 13753                           
 13754                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 13755  0C05  3003               	movlw	3
 13756  0C06  00A5               	movwf	??_setDimmerLights
 13757  0C07  0877               	movf	_DimmerLights,w
 13758  0C08  3E02               	addlw	2
 13759  0C09  0086               	movwf	6
 13760  0C0A  3001               	movlw	1	; select bank2/3
 13761  0C0B  0087               	movwf	7
 13762  0C0C  0825               	movf	??_setDimmerLights,w
 13763  0C0D  0081               	movwf	1
 13764  0C0E  0008               	return
 13765  0C0F                     __end_of_setDimmerLights:	
 13766                           
 13767                           	psect	text77
 13768  1000                     __ptext77:	
 13769 ;; *************** function _setLoad_StatusOn *****************
 13770 ;; Defined at:
 13771 ;;		line 269 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;  lights          1    wreg     unsigned char 
 13774 ;;  command         1    0[BANK0 ] unsigned char 
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;  lights          1    1[BANK0 ] unsigned char 
 13777 ;; Return value:  Size  Location     Type
 13778 ;;		None               void
 13779 ;; Registers used:
 13780 ;;		wreg, fsr1l, fsr1h
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13786 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;Total ram usage:        2 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    4
 13793 ;; This function calls:
 13794 ;;		Nothing
 13795 ;; This function is called by:
 13796 ;;		_setDimmerLights
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           
 13801                           ;psect for function _setLoad_StatusOn
 13802  1000                     _setLoad_StatusOn:	
 13803                           
 13804                           ;incstack = 0
 13805                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 13806                           ;setLoad_StatusOn@lights stored from wreg
 13807  1000  0020               	movlb	0	; select bank0
 13808  1001  00A1               	movwf	setLoad_StatusOn@lights
 13809                           
 13810                           ;OverLoad_B1.c: 270: Load->GO = 1;
 13811  1002  087B               	movf	_Load,w
 13812  1003  0086               	movwf	6
 13813  1004  3002               	movlw	2	; select bank4/5
 13814  1005  0087               	movwf	7
 13815  1006  1481               	bsf	1,1
 13816                           
 13817                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 13818  1007  087B               	movf	_Load,w
 13819  1008  3E46               	addlw	70
 13820  1009  0086               	movwf	6
 13821  100A  3002               	movlw	2	; select bank4/5
 13822  100B  0087               	movwf	7
 13823  100C  0820               	movf	setLoad_StatusOn@command,w
 13824  100D  1001               	bcf	1,0
 13825  100E  1D03               	skipz
 13826  100F  1401               	bsf	1,0
 13827                           
 13828                           ;OverLoad_B1.c: 273: if (lights == 1) {
 13829  1010  0821               	movf	setLoad_StatusOn@lights,w
 13830  1011  3A01               	xorlw	1
 13831  1012  1D03               	skipz
 13832  1013  281B               	goto	l8016
 13833                           
 13834                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 13835  1014  087B               	movf	_Load,w
 13836  1015  3E43               	addlw	67
 13837  1016  0086               	movwf	6
 13838  1017  3002               	movlw	2	; select bank4/5
 13839  1018  0087               	movwf	7
 13840  1019  0181               	clrf	1
 13841  101A  0A81               	incf	1,f
 13842  101B                     l8016:	
 13843                           
 13844                           ;OverLoad_B1.c: 275: }
 13845                           ;OverLoad_B1.c: 276: if (lights == 2) {
 13846  101B  0821               	movf	setLoad_StatusOn@lights,w
 13847  101C  3A02               	xorlw	2
 13848  101D  1D03               	skipz
 13849  101E  2826               	goto	l8020
 13850                           
 13851                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 13852  101F  087B               	movf	_Load,w
 13853  1020  3E44               	addlw	68
 13854  1021  0086               	movwf	6
 13855  1022  3002               	movlw	2	; select bank4/5
 13856  1023  0087               	movwf	7
 13857  1024  0181               	clrf	1
 13858  1025  0A81               	incf	1,f
 13859  1026                     l8020:	
 13860                           
 13861                           ;OverLoad_B1.c: 278: }
 13862                           ;OverLoad_B1.c: 279: if (lights == 3) {
 13863  1026  0821               	movf	setLoad_StatusOn@lights,w
 13864  1027  3A03               	xorlw	3
 13865  1028  1D03               	skipz
 13866  1029  0008               	return
 13867                           
 13868                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 13869  102A  087B               	movf	_Load,w
 13870  102B  3E45               	addlw	69
 13871  102C  0086               	movwf	6
 13872  102D  3002               	movlw	2	; select bank4/5
 13873  102E  0087               	movwf	7
 13874  102F  0181               	clrf	1
 13875  1030  0A81               	incf	1,f
 13876  1031  0008               	return
 13877  1032                     __end_of_setLoad_StatusOn:	
 13878                           
 13879                           	psect	text78
 13880  1A1E                     __ptext78:	
 13881 ;; *************** function _setLoad_Count *****************
 13882 ;; Defined at:
 13883 ;;		line 254 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;  command         1    wreg     unsigned char 
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;  command         1    1[BANK0 ] unsigned char 
 13888 ;; Return value:  Size  Location     Type
 13889 ;;		None               void
 13890 ;; Registers used:
 13891 ;;		wreg, fsr1l, fsr1h
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;Total ram usage:        2 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; Hardware stack levels required when called:    4
 13904 ;; This function calls:
 13905 ;;		Nothing
 13906 ;; This function is called by:
 13907 ;;		_setDimmerLights
 13908 ;; This function uses a non-reentrant model
 13909 ;;
 13910                           
 13911                           
 13912                           ;psect for function _setLoad_Count
 13913  1A1E                     _setLoad_Count:	
 13914                           
 13915                           ;incstack = 0
 13916                           ; Regs used in _setLoad_Count: [wregfsr1]
 13917                           ;setLoad_Count@command stored from wreg
 13918  1A1E  0020               	movlb	0	; select bank0
 13919  1A1F  00A1               	movwf	setLoad_Count@command
 13920                           
 13921                           ;OverLoad_B1.c: 255: Load->Count = command;
 13922  1A20  0821               	movf	setLoad_Count@command,w
 13923  1A21  00A0               	movwf	??_setLoad_Count
 13924  1A22  087B               	movf	_Load,w
 13925  1A23  3E3A               	addlw	58
 13926  1A24  0086               	movwf	6
 13927  1A25  3002               	movlw	2	; select bank4/5
 13928  1A26  0087               	movwf	7
 13929  1A27  0820               	movf	??_setLoad_Count,w
 13930  1A28  0081               	movwf	1
 13931                           
 13932                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 13933  1A29  0821               	movf	setLoad_Count@command,w
 13934  1A2A  00A0               	movwf	??_setLoad_Count
 13935  1A2B  087B               	movf	_Load,w
 13936  1A2C  3E42               	addlw	66
 13937  1A2D  0086               	movwf	6
 13938  1A2E  3002               	movlw	2	; select bank4/5
 13939  1A2F  0087               	movwf	7
 13940  1A30  0820               	movf	??_setLoad_Count,w
 13941  1A31  0081               	movwf	1
 13942  1A32  0008               	return
 13943  1A33                     __end_of_setLoad_Count:	
 13944                           
 13945                           	psect	text79
 13946  12E8                     __ptext79:	
 13947 ;; *************** function _setLED *****************
 13948 ;; Defined at:
 13949 ;;		line 74 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  led             1    wreg     unsigned char 
 13952 ;;  command         1    2[BANK0 ] unsigned char 
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;  led             1    3[BANK0 ] unsigned char 
 13955 ;; Return value:  Size  Location     Type
 13956 ;;		None               void
 13957 ;; Registers used:
 13958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13964 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;Total ram usage:        2 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; Hardware stack levels required when called:    5
 13971 ;; This function calls:
 13972 ;;		_LedPointSelect
 13973 ;; This function is called by:
 13974 ;;		_setDimmerLights_ERROR
 13975 ;;		_setDimmerLights
 13976 ;;		_setLED_Initialization
 13977 ;;		_setLoad_Exceptions
 13978 ;;		_setSw_Initialization
 13979 ;; This function uses a non-reentrant model
 13980 ;;
 13981                           
 13982                           
 13983                           ;psect for function _setLED
 13984  12E8                     _setLED:	
 13985                           
 13986                           ;incstack = 0
 13987                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13988                           ;setLED@led stored from wreg
 13989  12E8  0020               	movlb	0	; select bank0
 13990  12E9  00A3               	movwf	setLED@led
 13991                           
 13992                           ;LED_B1.c: 76: LedPointSelect(led);
 13993  12EA  0823               	movf	setLED@led,w
 13994  12EB  319C  242C  3192   	fcall	_LedPointSelect
 13995                           
 13996                           ;LED_B1.c: 77: if(command == 0)
 13997  12EE  0020               	movlb	0	; select bank0
 13998  12EF  08A2               	movf	setLED@command,f
 13999  12F0  1D03               	skipz
 14000  12F1  2B04               	goto	l7976
 14001                           
 14002                           ;LED_B1.c: 78: {
 14003                           ;LED_B1.c: 80: if(led == 1)
 14004  12F2  0823               	movf	setLED@led,w
 14005  12F3  3A01               	xorlw	1
 14006  12F4  1D03               	skipz
 14007  12F5  2AF8               	goto	l7968
 14008                           
 14009                           ;LED_B1.c: 81: {
 14010                           ;LED_B1.c: 85: RA3=1;
 14011  12F6  158C               	bsf	12,3	;volatile
 14012                           
 14013                           ;LED_B1.c: 87: }
 14014  12F7  0008               	return
 14015  12F8                     l7968:	
 14016                           
 14017                           ;LED_B1.c: 90: else if(led == 2)
 14018  12F8  0823               	movf	setLED@led,w
 14019  12F9  3A02               	xorlw	2
 14020  12FA  1D03               	skipz
 14021  12FB  2AFE               	goto	l7972
 14022                           
 14023                           ;LED_B1.c: 91: {
 14024                           ;LED_B1.c: 95: RC7=1;
 14025  12FC  178E               	bsf	14,7	;volatile
 14026                           
 14027                           ;LED_B1.c: 97: }
 14028  12FD  0008               	return
 14029  12FE                     l7972:	
 14030                           
 14031                           ;LED_B1.c: 110: else if(led == 99)
 14032  12FE  0823               	movf	setLED@led,w
 14033  12FF  3A63               	xorlw	99
 14034  1300  1D03               	skipz
 14035  1301  0008               	return
 14036                           
 14037                           ;LED_B1.c: 111: {
 14038                           ;LED_B1.c: 115: RB5=1;
 14039  1302  168D               	bsf	13,5	;volatile
 14040                           
 14041                           ;LED_B1.c: 117: }
 14042                           ;LED_B1.c: 119: }
 14043  1303  0008               	return
 14044  1304                     l7976:	
 14045                           
 14046                           ;LED_B1.c: 120: else if(command == 1)
 14047  1304  0822               	movf	setLED@command,w
 14048  1305  3A01               	xorlw	1
 14049  1306  1D03               	skipz
 14050  1307  2B1A               	goto	l7990
 14051                           
 14052                           ;LED_B1.c: 121: {
 14053                           ;LED_B1.c: 123: if(led == 1)
 14054  1308  0823               	movf	setLED@led,w
 14055  1309  3A01               	xorlw	1
 14056  130A  1D03               	skipz
 14057  130B  2B0E               	goto	l7982
 14058                           
 14059                           ;LED_B1.c: 124: {
 14060                           ;LED_B1.c: 128: RA3=0;
 14061  130C  118C               	bcf	12,3	;volatile
 14062                           
 14063                           ;LED_B1.c: 130: }
 14064  130D  0008               	return
 14065  130E                     l7982:	
 14066                           
 14067                           ;LED_B1.c: 133: else if(led == 2)
 14068  130E  0823               	movf	setLED@led,w
 14069  130F  3A02               	xorlw	2
 14070  1310  1D03               	skipz
 14071  1311  2B14               	goto	l7986
 14072                           
 14073                           ;LED_B1.c: 134: {
 14074                           ;LED_B1.c: 138: RC7=0;
 14075  1312  138E               	bcf	14,7	;volatile
 14076                           
 14077                           ;LED_B1.c: 140: }
 14078  1313  0008               	return
 14079  1314                     l7986:	
 14080                           
 14081                           ;LED_B1.c: 153: else if(led == 99)
 14082  1314  0823               	movf	setLED@led,w
 14083  1315  3A63               	xorlw	99
 14084  1316  1D03               	skipz
 14085  1317  0008               	return
 14086                           
 14087                           ;LED_B1.c: 154: {
 14088                           ;LED_B1.c: 158: RB5=0;
 14089  1318  128D               	bcf	13,5	;volatile
 14090                           
 14091                           ;LED_B1.c: 160: }
 14092                           ;LED_B1.c: 162: }
 14093  1319  0008               	return
 14094  131A                     l7990:	
 14095                           
 14096                           ;LED_B1.c: 163: else if(command == 10)
 14097  131A  0822               	movf	setLED@command,w
 14098  131B  3A0A               	xorlw	10
 14099  131C  1D03               	skipz
 14100  131D  2B3C               	goto	l8006
 14101                           
 14102                           ;LED_B1.c: 164: {
 14103                           ;LED_B1.c: 165: LED->GO=0;
 14104  131E  0021               	movlb	1	; select bank1
 14105  131F  083C               	movf	_LED^(0+128),w
 14106  1320  0086               	movwf	6
 14107  1321  0187               	clrf	7
 14108  1322  1081               	bcf	1,1
 14109                           
 14110                           ;LED_B1.c: 166: LED->Time=0;
 14111  1323  0A3C               	incf	_LED^(0+128),w
 14112  1324  0086               	movwf	6
 14113  1325  0187               	clrf	7
 14114  1326  3000               	movlw	0
 14115  1327  3FC0               	movwi [0]fsr1
 14116  1328  3FC1               	movwi [1]fsr1
 14117                           
 14118                           ;LED_B1.c: 168: if(led == 1)
 14119  1329  0020               	movlb	0	; select bank0
 14120  132A  0823               	movf	setLED@led,w
 14121  132B  3A01               	xorlw	1
 14122  132C  1D03               	skipz
 14123  132D  2B30               	goto	l7998
 14124                           
 14125                           ;LED_B1.c: 169: {
 14126                           ;LED_B1.c: 173: RA3=1;
 14127  132E  158C               	bsf	12,3	;volatile
 14128                           
 14129                           ;LED_B1.c: 175: }
 14130  132F  0008               	return
 14131  1330                     l7998:	
 14132                           
 14133                           ;LED_B1.c: 178: else if(led == 2)
 14134  1330  0823               	movf	setLED@led,w
 14135  1331  3A02               	xorlw	2
 14136  1332  1D03               	skipz
 14137  1333  2B36               	goto	l8002
 14138                           
 14139                           ;LED_B1.c: 179: {
 14140                           ;LED_B1.c: 183: RC7=1;
 14141  1334  178E               	bsf	14,7	;volatile
 14142                           
 14143                           ;LED_B1.c: 185: }
 14144  1335  0008               	return
 14145  1336                     l8002:	
 14146                           
 14147                           ;LED_B1.c: 198: else if(led == 99)
 14148  1336  0823               	movf	setLED@led,w
 14149  1337  3A63               	xorlw	99
 14150  1338  1D03               	skipz
 14151  1339  0008               	return
 14152                           
 14153                           ;LED_B1.c: 199: {
 14154                           ;LED_B1.c: 203: RB5=1;
 14155  133A  168D               	bsf	13,5	;volatile
 14156                           
 14157                           ;LED_B1.c: 205: }
 14158                           ;LED_B1.c: 207: }
 14159  133B  0008               	return
 14160  133C                     l8006:	
 14161                           
 14162                           ;LED_B1.c: 208: else if(command == 11)
 14163  133C  0822               	movf	setLED@command,w
 14164  133D  3A0B               	xorlw	11
 14165  133E  1D03               	skipz
 14166  133F  0008               	return
 14167                           
 14168                           ;LED_B1.c: 209: {
 14169                           ;LED_B1.c: 210: LED->GO=1;
 14170  1340  0021               	movlb	1	; select bank1
 14171  1341  083C               	movf	_LED^(0+128),w
 14172  1342  0086               	movwf	6
 14173  1343  0187               	clrf	7
 14174  1344  1481               	bsf	1,1
 14175  1345  0008               	return
 14176  1346                     __end_of_setLED:	
 14177                           
 14178                           	psect	text80
 14179  1C2C                     __ptext80:	
 14180 ;; *************** function _LedPointSelect *****************
 14181 ;; Defined at:
 14182 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  led             1    wreg     unsigned char 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  led             1    1[BANK0 ] unsigned char 
 14187 ;; Return value:  Size  Location     Type
 14188 ;;		None               void
 14189 ;; Registers used:
 14190 ;;		wreg
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;Total ram usage:        2 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    4
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		_setLED_Initialization
 14207 ;;		_setLED
 14208 ;;		_setLED_Main
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           
 14213                           ;psect for function _LedPointSelect
 14214  1C2C                     _LedPointSelect:	
 14215                           
 14216                           ;incstack = 0
 14217                           ; Regs used in _LedPointSelect: [wreg]
 14218                           ;LedPointSelect@led stored from wreg
 14219  1C2C  0020               	movlb	0	; select bank0
 14220  1C2D  00A1               	movwf	LedPointSelect@led
 14221                           
 14222                           ;LED_B1.c: 10: if(led == 1)
 14223  1C2E  0821               	movf	LedPointSelect@led,w
 14224  1C2F  3A01               	xorlw	1
 14225  1C30  1D03               	skipz
 14226  1C31  2C38               	goto	l5914
 14227                           
 14228                           ;LED_B1.c: 11: {
 14229                           ;LED_B1.c: 12: LED=&VarLED1;
 14230  1C32  30D4               	movlw	_VarLED1& (0+255)
 14231  1C33  00A0               	movwf	??_LedPointSelect
 14232  1C34  0820               	movf	??_LedPointSelect,w
 14233  1C35  0021               	movlb	1	; select bank1
 14234  1C36  00BC               	movwf	_LED^(0+128)
 14235                           
 14236                           ;LED_B1.c: 13: }
 14237  1C37  0008               	return
 14238  1C38                     l5914:	
 14239                           
 14240                           ;LED_B1.c: 16: else if(led == 2)
 14241  1C38  0020               	movlb	0	; select bank0
 14242  1C39  0821               	movf	LedPointSelect@led,w
 14243  1C3A  3A02               	xorlw	2
 14244  1C3B  1D03               	skipz
 14245  1C3C  2C43               	goto	l5918
 14246                           
 14247                           ;LED_B1.c: 17: {
 14248                           ;LED_B1.c: 18: LED=&VarLED2;
 14249  1C3D  30D8               	movlw	_VarLED2& (0+255)
 14250  1C3E  00A0               	movwf	??_LedPointSelect
 14251  1C3F  0820               	movf	??_LedPointSelect,w
 14252  1C40  0021               	movlb	1	; select bank1
 14253  1C41  00BC               	movwf	_LED^(0+128)
 14254                           
 14255                           ;LED_B1.c: 19: }
 14256  1C42  0008               	return
 14257  1C43                     l5918:	
 14258                           
 14259                           ;LED_B1.c: 28: else if(led == 99)
 14260  1C43  0020               	movlb	0	; select bank0
 14261  1C44  0821               	movf	LedPointSelect@led,w
 14262  1C45  3A63               	xorlw	99
 14263  1C46  1D03               	skipz
 14264  1C47  0008               	return
 14265                           
 14266                           ;LED_B1.c: 29: {
 14267                           ;LED_B1.c: 30: LED=&VarErrLED;
 14268  1C48  30D0               	movlw	_VarErrLED& (0+255)
 14269  1C49  00A0               	movwf	??_LedPointSelect
 14270  1C4A  0820               	movf	??_LedPointSelect,w
 14271  1C4B  0021               	movlb	1	; select bank1
 14272  1C4C  00BC               	movwf	_LED^(0+128)
 14273  1C4D  0008               	return
 14274  1C4E                     __end_of_LedPointSelect:	
 14275                           
 14276                           	psect	text81
 14277  1B07                     __ptext81:	
 14278 ;; *************** function _DimmerLights_Close *****************
 14279 ;; Defined at:
 14280 ;;		line 101 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;		None
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;		None
 14285 ;; Return value:  Size  Location     Type
 14286 ;;		None               void
 14287 ;; Registers used:
 14288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;Total ram usage:        0 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    5
 14301 ;; This function calls:
 14302 ;;		_getDimmerLights_StatusFlag
 14303 ;;		_setLoad_GO
 14304 ;; This function is called by:
 14305 ;;		_DimmerLights_Main
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           
 14310                           ;psect for function _DimmerLights_Close
 14311  1B07                     _DimmerLights_Close:	
 14312                           
 14313                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 14314                           
 14315                           ;incstack = 0
 14316                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14317  1B07  0021               	movlb	1	; select bank1
 14318  1B08  083A               	movf	_Dimmer^(0+128),w
 14319  1B09  0086               	movwf	6
 14320  1B0A  0187               	clrf	7
 14321  1B0B  1C01               	btfss	1,0
 14322  1B0C  0008               	return
 14323                           
 14324                           ;Dimmer_B1.c: 104: {
 14325                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 14326  1B0D  083A               	movf	_Dimmer^(0+128),w
 14327  1B0E  0086               	movwf	6
 14328  1B0F  0187               	clrf	7
 14329  1B10  1001               	bcf	1,0
 14330                           
 14331                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 14332  1B11  319A  225F  319B   	fcall	_getDimmerLights_StatusFlag
 14333  1B14  3800               	iorlw	0
 14334  1B15  1D03               	skipz
 14335  1B16  0008               	return
 14336                           
 14337                           ;Dimmer_B1.c: 107: {
 14338                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 14339  1B17  3000               	movlw	0
 14340  1B18  31A7  27EA         	fcall	_setLoad_GO
 14341                           
 14342                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 14343  1B1A  0021               	movlb	1	; select bank1
 14344  1B1B  0866               	movf	_Memory^(0+128),w
 14345  1B1C  3E22               	addlw	34
 14346  1B1D  0086               	movwf	6
 14347  1B1E  3002               	movlw	2	; select bank4/5
 14348  1B1F  0087               	movwf	7
 14349  1B20  1481               	bsf	1,1
 14350  1B21  0008               	return
 14351  1B22                     __end_of_DimmerLights_Close:	
 14352                           
 14353                           	psect	text82
 14354  27EA                     __ptext82:	
 14355 ;; *************** function _setLoad_GO *****************
 14356 ;; Defined at:
 14357 ;;		line 265 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;  command         1    wreg     unsigned char 
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;  command         1    0[BANK0 ] unsigned char 
 14362 ;; Return value:  Size  Location     Type
 14363 ;;		None               void
 14364 ;; Registers used:
 14365 ;;		wreg, fsr1l, fsr1h
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;Total ram usage:        1 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    4
 14378 ;; This function calls:
 14379 ;;		Nothing
 14380 ;; This function is called by:
 14381 ;;		_DimmerLights_Close
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385                           
 14386                           ;psect for function _setLoad_GO
 14387  27EA                     _setLoad_GO:	
 14388                           
 14389                           ;incstack = 0
 14390                           ; Regs used in _setLoad_GO: [wregfsr1]
 14391                           ;setLoad_GO@command stored from wreg
 14392  27EA  0020               	movlb	0	; select bank0
 14393  27EB  00A0               	movwf	setLoad_GO@command
 14394                           
 14395                           ;OverLoad_B1.c: 266: Load->GO = command;
 14396  27EC  087B               	movf	_Load,w
 14397  27ED  0086               	movwf	6
 14398  27EE  3002               	movlw	2	; select bank4/5
 14399  27EF  0087               	movwf	7
 14400  27F0  0820               	movf	setLoad_GO@command,w
 14401  27F1  1081               	bcf	1,1
 14402  27F2  1D03               	skipz
 14403  27F3  1481               	bsf	1,1
 14404  27F4  0008               	return
 14405  27F5                     __end_of_setLoad_GO:	
 14406                           
 14407                           	psect	text83
 14408  1A5F                     __ptext83:	
 14409 ;; *************** function _getDimmerLights_StatusFlag *****************
 14410 ;; Defined at:
 14411 ;;		line 208 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;		None
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  Status          1    1[BANK0 ] unsigned char 
 14416 ;; Return value:  Size  Location     Type
 14417 ;;                  1    wreg      unsigned char 
 14418 ;; Registers used:
 14419 ;;		wreg, fsr1l, fsr1h, status,2
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;Total ram usage:        3 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; Hardware stack levels required when called:    4
 14432 ;; This function calls:
 14433 ;;		Nothing
 14434 ;; This function is called by:
 14435 ;;		_DimmerLights_Close
 14436 ;;		_DimmerLights_Exceptions
 14437 ;; This function uses a non-reentrant model
 14438 ;;
 14439                           
 14440                           
 14441                           ;psect for function _getDimmerLights_StatusFlag
 14442  1A5F                     _getDimmerLights_StatusFlag:	
 14443                           
 14444                           ;Dimmer_B1.c: 210: char Status=0;
 14445                           
 14446                           ;incstack = 0
 14447                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 14448  1A5F  0020               	movlb	0	; select bank0
 14449  1A60  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14450                           
 14451                           ;Dimmer_B1.c: 217: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 14452  1A61  01A2               	clrf	_getDimmerLights_StatusFlag$1712
 14453  1A62  0AA2               	incf	_getDimmerLights_StatusFlag$1712,f
 14454  1A63  0878               	movf	_DimmerLights11,w
 14455  1A64  0086               	movwf	6
 14456  1A65  3001               	movlw	1	; select bank2/3
 14457  1A66  0087               	movwf	7
 14458  1A67  1B01               	btfsc	1,6
 14459  1A68  2A6F               	goto	l6284
 14460  1A69  0879               	movf	_DimmerLights22,w
 14461  1A6A  0086               	movwf	6
 14462  1A6B  3001               	movlw	1	; select bank2/3
 14463  1A6C  0087               	movwf	7
 14464  1A6D  1F01               	btfss	1,6
 14465  1A6E  01A2               	clrf	_getDimmerLights_StatusFlag$1712
 14466  1A6F                     l6284:	
 14467  1A6F  0822               	movf	_getDimmerLights_StatusFlag$1712,w
 14468  1A70  00A0               	movwf	??_getDimmerLights_StatusFlag
 14469  1A71  0820               	movf	??_getDimmerLights_StatusFlag,w
 14470  1A72  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14471                           
 14472                           ;Dimmer_B1.c: 224: return Status;
 14473  1A73  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14474  1A74  0008               	return
 14475  1A75                     __end_of_getDimmerLights_StatusFlag:	
 14476                           
 14477                           	psect	text84
 14478  1A09                     __ptext84:	
 14479 ;; *************** function _DimmerLights_Initialization *****************
 14480 ;; Defined at:
 14481 ;;		line 41 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;		None
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;		None
 14486 ;; Return value:  Size  Location     Type
 14487 ;;		None               void
 14488 ;; Registers used:
 14489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        1 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    6
 14502 ;; This function calls:
 14503 ;;		_Dimmer_Initialization
 14504 ;;		_setDimmerLights_Initialization
 14505 ;; This function is called by:
 14506 ;;		_main
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function _DimmerLights_Initialization
 14512  1A09                     _DimmerLights_Initialization:	
 14513                           
 14514                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 14515                           
 14516                           ;incstack = 0
 14517                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14518  1A09  3020               	movlw	_DimmerLights1& (0+255)
 14519  1A0A  0020               	movlb	0	; select bank0
 14520  1A0B  00A4               	movwf	??_DimmerLights_Initialization
 14521  1A0C  0824               	movf	??_DimmerLights_Initialization,w
 14522  1A0D  00F8               	movwf	_DimmerLights11
 14523                           
 14524                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 14525  1A0E  3001               	movlw	1
 14526  1A0F  319D  256B  319A   	fcall	_setDimmerLights_Initialization
 14527                           
 14528                           ;Dimmer_B1.c: 49: DimmerLights22=&DimmerLights2;
 14529  1A12  302F               	movlw	_DimmerLights2& (0+255)
 14530  1A13  0020               	movlb	0	; select bank0
 14531  1A14  00A4               	movwf	??_DimmerLights_Initialization
 14532  1A15  0824               	movf	??_DimmerLights_Initialization,w
 14533  1A16  00F9               	movwf	_DimmerLights22
 14534                           
 14535                           ;Dimmer_B1.c: 50: setDimmerLights_Initialization(2);
 14536  1A17  3002               	movlw	2
 14537  1A18  319D  256B  319A   	fcall	_setDimmerLights_Initialization
 14538                           
 14539                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 14540  1A1B  31A7  278D         	fcall	_Dimmer_Initialization
 14541  1A1D  0008               	return
 14542  1A1E                     __end_of_DimmerLights_Initialization:	
 14543                           
 14544                           	psect	text85
 14545  1D6B                     __ptext85:	
 14546 ;; *************** function _setDimmerLights_Initialization *****************
 14547 ;; Defined at:
 14548 ;;		line 63 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14549 ;; Parameters:    Size  Location     Type
 14550 ;;  lights          1    wreg     unsigned char 
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;  lights          1    3[BANK0 ] unsigned char 
 14553 ;; Return value:  Size  Location     Type
 14554 ;;		None               void
 14555 ;; Registers used:
 14556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;Total ram usage:        2 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:    5
 14569 ;; This function calls:
 14570 ;;		_DimmerLightsPointSelect
 14571 ;; This function is called by:
 14572 ;;		_DimmerLights_Initialization
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           
 14577                           ;psect for function _setDimmerLights_Initialization
 14578  1D6B                     _setDimmerLights_Initialization:	
 14579                           
 14580                           ;incstack = 0
 14581                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14582                           ;setDimmerLights_Initialization@lights stored from wreg
 14583  1D6B  0020               	movlb	0	; select bank0
 14584  1D6C  00A3               	movwf	setDimmerLights_Initialization@lights
 14585                           
 14586                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 14587  1D6D  0823               	movf	setDimmerLights_Initialization@lights,w
 14588  1D6E  3199  21B9         	fcall	_DimmerLightsPointSelect
 14589                           
 14590                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 14591  1D70  0877               	movf	_DimmerLights,w
 14592  1D71  3E0C               	addlw	12
 14593  1D72  0086               	movwf	6
 14594  1D73  3001               	movlw	1	; select bank2/3
 14595  1D74  0087               	movwf	7
 14596  1D75  1401               	bsf	1,0
 14597                           
 14598                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)(65*1.5));
 14599  1D76  3061               	movlw	97
 14600  1D77  0020               	movlb	0	; select bank0
 14601  1D78  00A2               	movwf	??_setDimmerLights_Initialization
 14602  1D79  0877               	movf	_DimmerLights,w
 14603  1D7A  3E05               	addlw	5
 14604  1D7B  0086               	movwf	6
 14605  1D7C  3001               	movlw	1	; select bank2/3
 14606  1D7D  0087               	movwf	7
 14607  1D7E  0822               	movf	??_setDimmerLights_Initialization,w
 14608  1D7F  0081               	movwf	1
 14609                           
 14610                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)(20*1.5));
 14611  1D80  301E               	movlw	30
 14612  1D81  00A2               	movwf	??_setDimmerLights_Initialization
 14613  1D82  0877               	movf	_DimmerLights,w
 14614  1D83  3E06               	addlw	6
 14615  1D84  0086               	movwf	6
 14616  1D85  3001               	movlw	1	; select bank2/3
 14617  1D86  0087               	movwf	7
 14618  1D87  0822               	movf	??_setDimmerLights_Initialization,w
 14619  1D88  0081               	movwf	1
 14620                           
 14621                           ;Dimmer_B1.c: 87: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 14622  1D89  0877               	movf	_DimmerLights,w
 14623  1D8A  3E05               	addlw	5
 14624  1D8B  0086               	movwf	6
 14625  1D8C  3001               	movlw	1	; select bank2/3
 14626  1D8D  0087               	movwf	7
 14627  1D8E  0801               	movf	1,w
 14628  1D8F  00A2               	movwf	??_setDimmerLights_Initialization
 14629  1D90  0877               	movf	_DimmerLights,w
 14630  1D91  3E04               	addlw	4
 14631  1D92  0086               	movwf	6
 14632  1D93  3001               	movlw	1	; select bank2/3
 14633  1D94  0087               	movwf	7
 14634  1D95  0822               	movf	??_setDimmerLights_Initialization,w
 14635  1D96  0081               	movwf	1
 14636  1D97  0008               	return
 14637  1D98                     __end_of_setDimmerLights_Initialization:	
 14638                           
 14639                           	psect	text86
 14640  278D                     __ptext86:	
 14641 ;; *************** function _Dimmer_Initialization *****************
 14642 ;; Defined at:
 14643 ;;		line 520 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;		None
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;		None
 14648 ;; Return value:  Size  Location     Type
 14649 ;;		None               void
 14650 ;; Registers used:
 14651 ;;		wreg
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;Total ram usage:        1 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    4
 14664 ;; This function calls:
 14665 ;;		Nothing
 14666 ;; This function is called by:
 14667 ;;		_DimmerLights_Initialization
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function _Dimmer_Initialization
 14673  278D                     _Dimmer_Initialization:	
 14674                           
 14675                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 14676                           
 14677                           ;incstack = 0
 14678                           ; Regs used in _Dimmer_Initialization: [wreg]
 14679  278D  30DC               	movlw	_Dimmer1& (0+255)
 14680  278E  0020               	movlb	0	; select bank0
 14681  278F  00A0               	movwf	??_Dimmer_Initialization
 14682  2790  0820               	movf	??_Dimmer_Initialization,w
 14683  2791  0021               	movlb	1	; select bank1
 14684  2792  00BA               	movwf	_Dimmer^(0+128)
 14685  2793  0008               	return
 14686  2794                     __end_of_Dimmer_Initialization:	
 14687                           
 14688                           	psect	text87
 14689  27AA                     __ptext87:	
 14690 ;; *************** function _DelayOff_Main *****************
 14691 ;; Defined at:
 14692 ;;		line 41 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 14693 ;; Parameters:    Size  Location     Type
 14694 ;;		None
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;		None
 14697 ;; Return value:  Size  Location     Type
 14698 ;;		None               void
 14699 ;; Registers used:
 14700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14701 ;; Tracked objects:
 14702 ;;		On entry : 0/0
 14703 ;;		On exit  : 0/0
 14704 ;;		Unchanged: 0/0
 14705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;Total ram usage:        0 bytes
 14711 ;; Hardware stack levels used:    1
 14712 ;; Hardware stack levels required when called:    9
 14713 ;; This function calls:
 14714 ;;		_DlyOff_Main
 14715 ;; This function is called by:
 14716 ;;		_main
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720                           
 14721                           ;psect for function _DelayOff_Main
 14722  27AA                     _DelayOff_Main:	
 14723                           
 14724                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14725                           
 14726                           ;incstack = 0
 14727                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14728  27AA  3001               	movlw	1
 14729  27AB  3196  2687  31A7   	fcall	_DlyOff_Main
 14730                           
 14731                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14732  27AE  3002               	movlw	2
 14733  27AF  3196  2687         	fcall	_DlyOff_Main
 14734  27B1  0008               	return
 14735  27B2                     __end_of_DelayOff_Main:	
 14736                           
 14737                           	psect	text88
 14738  1687                     __ptext88:	
 14739 ;; *************** function _DlyOff_Main *****************
 14740 ;; Defined at:
 14741 ;;		line 62 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;  sw              1    wreg     unsigned char 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  sw              1   68[BANK0 ] unsigned char 
 14746 ;; Return value:  Size  Location     Type
 14747 ;;		None               void
 14748 ;; Registers used:
 14749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        3 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    8
 14762 ;; This function calls:
 14763 ;;		_DelayOffPointSelect
 14764 ;;		_setBuz
 14765 ;;		_setDimmerLights_Switch
 14766 ;;		_setDimmerLights_Trigger
 14767 ;;		_setRFSW_Status
 14768 ;;		_setRF_DimmerLights
 14769 ;;		_setSw_Status
 14770 ;;		_setTxData
 14771 ;; This function is called by:
 14772 ;;		_DelayOff_Main
 14773 ;; This function uses a non-reentrant model
 14774 ;;
 14775                           
 14776                           
 14777                           ;psect for function _DlyOff_Main
 14778  1687                     _DlyOff_Main:	
 14779                           
 14780                           ;incstack = 0
 14781                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14782                           ;DlyOff_Main@sw stored from wreg
 14783  1687  0020               	movlb	0	; select bank0
 14784  1688  00E4               	movwf	DlyOff_Main@sw
 14785                           
 14786                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14787  1689  0864               	movf	DlyOff_Main@sw,w
 14788  168A  3188  2000  3196   	fcall	_DelayOffPointSelect
 14789                           
 14790                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 14791  168D  0021               	movlb	1	; select bank1
 14792  168E  0839               	movf	_DelayOff^(0+128),w
 14793  168F  0086               	movwf	6
 14794  1690  0187               	clrf	7
 14795  1691  1C81               	btfss	1,1
 14796  1692  0008               	return
 14797                           
 14798                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14799  1693  0839               	movf	_DelayOff^(0+128),w
 14800  1694  3E02               	addlw	2
 14801  1695  0086               	movwf	6
 14802  1696  0187               	clrf	7
 14803  1697  3001               	movlw	1
 14804  1698  0781               	addwf	1,f
 14805  1699  3141               	addfsr 1,1
 14806  169A  1803               	skipnc
 14807  169B  0A81               	incf	1,f
 14808                           
 14809                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14810  169C  0839               	movf	_DelayOff^(0+128),w
 14811  169D  3E02               	addlw	2
 14812  169E  0086               	movwf	6
 14813  169F  0187               	clrf	7
 14814  16A0  3F40               	moviw [0]fsr1
 14815  16A1  0020               	movlb	0	; select bank0
 14816  16A2  00E2               	movwf	??_DlyOff_Main
 14817  16A3  3F41               	moviw [1]fsr1
 14818  16A4  00E3               	movwf	??_DlyOff_Main+1
 14819  16A5  3016               	movlw	22
 14820  16A6  0263               	subwf	??_DlyOff_Main+1,w
 14821  16A7  3012               	movlw	18
 14822  16A8  1903               	skipnz
 14823  16A9  0262               	subwf	??_DlyOff_Main,w
 14824  16AA  1C03               	skipc
 14825  16AB  0008               	return
 14826                           
 14827                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14828  16AC  0021               	movlb	1	; select bank1
 14829  16AD  0839               	movf	_DelayOff^(0+128),w
 14830  16AE  3E02               	addlw	2
 14831  16AF  0086               	movwf	6
 14832  16B0  0187               	clrf	7
 14833  16B1  3000               	movlw	0
 14834  16B2  3FC0               	movwi [0]fsr1
 14835  16B3  3FC1               	movwi [1]fsr1
 14836                           
 14837                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14838  16B4  3001               	movlw	1
 14839  16B5  0020               	movlb	0	; select bank0
 14840  16B6  00E2               	movwf	??_DlyOff_Main
 14841  16B7  0021               	movlb	1	; select bank1
 14842  16B8  0839               	movf	_DelayOff^(0+128),w
 14843  16B9  3E04               	addlw	4
 14844  16BA  0086               	movwf	6
 14845  16BB  0187               	clrf	7
 14846  16BC  0020               	movlb	0	; select bank0
 14847  16BD  0862               	movf	??_DlyOff_Main,w
 14848  16BE  0781               	addwf	1,f
 14849                           
 14850                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14851  16BF  0021               	movlb	1	; select bank1
 14852  16C0  0839               	movf	_DelayOff^(0+128),w
 14853  16C1  3E04               	addlw	4
 14854  16C2  0086               	movwf	6
 14855  16C3  0187               	clrf	7
 14856  16C4  0A39               	incf	_DelayOff^(0+128),w
 14857  16C5  0084               	movwf	4
 14858  16C6  0185               	clrf	5
 14859  16C7  0800               	movf	0,w
 14860  16C8  0201               	subwf	1,w
 14861  16C9  1C03               	skipc
 14862  16CA  0008               	return
 14863                           
 14864                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14865  16CB  0839               	movf	_DelayOff^(0+128),w
 14866  16CC  3E04               	addlw	4
 14867  16CD  0086               	movwf	6
 14868  16CE  0187               	clrf	7
 14869  16CF  0181               	clrf	1
 14870                           
 14871                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14872  16D0  0839               	movf	_DelayOff^(0+128),w
 14873  16D1  0086               	movwf	6
 14874  16D2  0187               	clrf	7
 14875  16D3  1081               	bcf	1,1
 14876                           
 14877                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 14878  16D4  0020               	movlb	0	; select bank0
 14879  16D5  01A2               	clrf	setSw_Status@command
 14880  16D6  0864               	movf	DlyOff_Main@sw,w
 14881  16D7  3199  210B  3196   	fcall	_setSw_Status
 14882                           
 14883                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 14884  16DA  0020               	movlb	0	; select bank0
 14885  16DB  01A2               	clrf	setRFSW_Status@command
 14886  16DC  0864               	movf	DlyOff_Main@sw,w
 14887  16DD  3198  20FC  3196   	fcall	_setRFSW_Status
 14888                           
 14889                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 14890  16E0  0020               	movlb	0	; select bank0
 14891  16E1  01DD               	clrf	setRF_DimmerLights@on
 14892  16E2  0864               	movf	DlyOff_Main@sw,w
 14893  16E3  3194  24CE  3196   	fcall	_setRF_DimmerLights
 14894                           
 14895                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 14896  16E6  0020               	movlb	0	; select bank0
 14897  16E7  01A2               	clrf	setDimmerLights_Trigger@command
 14898  16E8  0AA2               	incf	setDimmerLights_Trigger@command,f
 14899  16E9  0864               	movf	DlyOff_Main@sw,w
 14900  16EA  3199  2158  3196   	fcall	_setDimmerLights_Trigger
 14901                           
 14902                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 14903  16ED  0020               	movlb	0	; select bank0
 14904  16EE  01A2               	clrf	setDimmerLights_Switch@command
 14905  16EF  0864               	movf	DlyOff_Main@sw,w
 14906  16F0  3199  2148  3196   	fcall	_setDimmerLights_Switch
 14907                           
 14908                           ;DelayOff_B1.c: 77: setTxData(1);
 14909  16F3  3001               	movlw	1
 14910  16F4  318C  240F  3196   	fcall	_setTxData
 14911                           
 14912                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 14913  16F7  3064               	movlw	100
 14914  16F8  0020               	movlb	0	; select bank0
 14915  16F9  00A6               	movwf	setBuz@time
 14916  16FA  3000               	movlw	0
 14917  16FB  00A7               	movwf	setBuz@time+1
 14918  16FC  3001               	movlw	1
 14919  16FD  3188  2017         	fcall	_setBuz
 14920  16FF  0008               	return
 14921  1700                     __end_of_DlyOff_Main:	
 14922                           
 14923                           	psect	text89
 14924  0C0F                     __ptext89:	
 14925 ;; *************** function _setTxData *****************
 14926 ;; Defined at:
 14927 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 14928 ;; Parameters:    Size  Location     Type
 14929 ;;  rf              1    wreg     unsigned char 
 14930 ;; Auto vars:     Size  Location     Type
 14931 ;;  rf              1    3[BANK0 ] unsigned char 
 14932 ;;  i               1    0        unsigned char 
 14933 ;; Return value:  Size  Location     Type
 14934 ;;		None               void
 14935 ;; Registers used:
 14936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14937 ;; Tracked objects:
 14938 ;;		On entry : 0/0
 14939 ;;		On exit  : 0/0
 14940 ;;		Unchanged: 0/0
 14941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;Total ram usage:        2 bytes
 14947 ;; Hardware stack levels used:    1
 14948 ;; Hardware stack levels required when called:    5
 14949 ;; This function calls:
 14950 ;;		_RfPointSelect
 14951 ;; This function is called by:
 14952 ;;		_DlyOff_Main
 14953 ;;		_setDimmerLights_Adj
 14954 ;;		_setControl_Lights_Table
 14955 ;;		_setRFSW_Control
 14956 ;;		_setRFSW_AdjControl
 14957 ;;		_Sw_DimmerOnFunc
 14958 ;;		_Sw_DimmerOffFunc
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           
 14963                           ;psect for function _setTxData
 14964  0C0F                     _setTxData:	
 14965                           
 14966                           ;incstack = 0
 14967                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14968                           ;setTxData@rf stored from wreg
 14969  0C0F  0020               	movlb	0	; select bank0
 14970  0C10  00A3               	movwf	setTxData@rf
 14971                           
 14972                           ;RF_Control_B1.c: 132: char i;
 14973                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 14974  0C11  0823               	movf	setTxData@rf,w
 14975  0C12  3198  208B  318C   	fcall	_RfPointSelect
 14976                           
 14977                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 14978  0C15  0021               	movlb	1	; select bank1
 14979  0C16  083D               	movf	_RF^(0+128),w
 14980  0C17  0086               	movwf	6
 14981  0C18  0187               	clrf	7
 14982  0C19  1C01               	btfss	1,0
 14983  0C1A  0008               	return
 14984                           
 14985                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 14986  0C1B  083D               	movf	_RF^(0+128),w
 14987  0C1C  0086               	movwf	6
 14988  0C1D  0187               	clrf	7
 14989  0C1E  1901               	btfsc	1,2
 14990  0C1F  0008               	return
 14991                           
 14992                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 14993  0C20  083D               	movf	_RF^(0+128),w
 14994  0C21  0086               	movwf	6
 14995  0C22  0187               	clrf	7
 14996  0C23  1501               	bsf	1,2
 14997                           
 14998                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 14999  0C24  3063               	movlw	99
 15000  0C25  0020               	movlb	0	; select bank0
 15001  0C26  00A2               	movwf	??_setTxData
 15002  0C27  0822               	movf	??_setTxData,w
 15003  0C28  0021               	movlb	1	; select bank1
 15004  0C29  00A0               	movwf	_RF_Data^(0+128)
 15005                           
 15006                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 15007  0C2A  3002               	movlw	2
 15008  0C2B  0020               	movlb	0	; select bank0
 15009  0C2C  00A2               	movwf	??_setTxData
 15010  0C2D  0822               	movf	??_setTxData,w
 15011  0C2E  0021               	movlb	1	; select bank1
 15012  0C2F  00A1               	movwf	(_RF_Data^(0+128)+1)
 15013                           
 15014                           ;RF_Control_B1.c: 148: RF_Data[2] = product->Data[2];
 15015  0C30  087D               	movf	_product,w
 15016  0C31  0086               	movwf	6
 15017  0C32  3001               	movlw	1	; select bank2/3
 15018  0C33  0087               	movwf	7
 15019  0C34  3001               	movlw	1	; select bank2/3
 15020  0C35  3F42               	moviw [2]fsr1
 15021  0C36  00A2               	movwf	(_RF_Data^(0+128)+2)
 15022                           
 15023                           ;RF_Control_B1.c: 149: RF_Data[3] = product->Data[3];
 15024  0C37  087D               	movf	_product,w
 15025  0C38  0086               	movwf	6
 15026  0C39  3001               	movlw	1	; select bank2/3
 15027  0C3A  0087               	movwf	7
 15028  0C3B  3001               	movlw	1	; select bank2/3
 15029  0C3C  3F43               	moviw [3]fsr1
 15030  0C3D  00A3               	movwf	(_RF_Data^(0+128)+3)
 15031                           
 15032                           ;RF_Control_B1.c: 150: RF_Data[4] = product->Data[4];
 15033  0C3E  087D               	movf	_product,w
 15034  0C3F  0086               	movwf	6
 15035  0C40  3001               	movlw	1	; select bank2/3
 15036  0C41  0087               	movwf	7
 15037  0C42  3001               	movlw	1	; select bank2/3
 15038  0C43  3F44               	moviw [4]fsr1
 15039  0C44  00A4               	movwf	(_RF_Data^(0+128)+4)
 15040                           
 15041                           ;RF_Control_B1.c: 151: RF_Data[5] = product->Data[5];
 15042  0C45  087D               	movf	_product,w
 15043  0C46  0086               	movwf	6
 15044  0C47  3001               	movlw	1	; select bank2/3
 15045  0C48  0087               	movwf	7
 15046  0C49  3001               	movlw	1	; select bank2/3
 15047  0C4A  3F45               	moviw [5]fsr1
 15048  0C4B  00A5               	movwf	(_RF_Data^(0+128)+5)
 15049                           
 15050                           ;RF_Control_B1.c: 152: RF_Data[6] = product->Data[6];
 15051  0C4C  087D               	movf	_product,w
 15052  0C4D  0086               	movwf	6
 15053  0C4E  3001               	movlw	1	; select bank2/3
 15054  0C4F  0087               	movwf	7
 15055  0C50  3001               	movlw	1	; select bank2/3
 15056  0C51  3F46               	moviw [6]fsr1
 15057  0C52  00A6               	movwf	(_RF_Data^(0+128)+6)
 15058                           
 15059                           ;RF_Control_B1.c: 153: RF_Data[7] = product->Data[7];
 15060  0C53  087D               	movf	_product,w
 15061  0C54  0086               	movwf	6
 15062  0C55  3001               	movlw	1	; select bank2/3
 15063  0C56  0087               	movwf	7
 15064  0C57  3001               	movlw	1	; select bank2/3
 15065  0C58  3F47               	moviw [7]fsr1
 15066  0C59  00A7               	movwf	(_RF_Data^(0+128)+7)
 15067                           
 15068                           ;RF_Control_B1.c: 154: RF_Data[8] = product->Data[8];
 15069  0C5A  087D               	movf	_product,w
 15070  0C5B  0086               	movwf	6
 15071  0C5C  3001               	movlw	1	; select bank2/3
 15072  0C5D  0087               	movwf	7
 15073  0C5E  3001               	movlw	1	; select bank2/3
 15074  0C5F  3F48               	moviw [8]fsr1
 15075  0C60  00A8               	movwf	(_RF_Data^(0+128)+8)
 15076                           
 15077                           ;RF_Control_B1.c: 155: RF_Data[9] = product->Data[9];
 15078  0C61  087D               	movf	_product,w
 15079  0C62  0086               	movwf	6
 15080  0C63  3001               	movlw	1	; select bank2/3
 15081  0C64  0087               	movwf	7
 15082  0C65  3001               	movlw	1	; select bank2/3
 15083  0C66  3F49               	moviw [9]fsr1
 15084  0C67  00A9               	movwf	(_RF_Data^(0+128)+9)
 15085                           
 15086                           ;RF_Control_B1.c: 156: RF_Data[10] = product->Data[10];
 15087  0C68  087D               	movf	_product,w
 15088  0C69  0086               	movwf	6
 15089  0C6A  3001               	movlw	1	; select bank2/3
 15090  0C6B  0087               	movwf	7
 15091  0C6C  3001               	movlw	1	; select bank2/3
 15092  0C6D  3F4A               	moviw [10]fsr1
 15093  0C6E  00AA               	movwf	(_RF_Data^(0+128)+10)
 15094                           
 15095                           ;RF_Control_B1.c: 157: RF_Data[11] = product->Data[11];
 15096  0C6F  087D               	movf	_product,w
 15097  0C70  0086               	movwf	6
 15098  0C71  3001               	movlw	1	; select bank2/3
 15099  0C72  0087               	movwf	7
 15100  0C73  3001               	movlw	1	; select bank2/3
 15101  0C74  3F4B               	moviw [11]fsr1
 15102  0C75  00AB               	movwf	(_RF_Data^(0+128)+11)
 15103                           
 15104                           ;RF_Control_B1.c: 158: RF_Data[12] = product->Data[12];
 15105  0C76  087D               	movf	_product,w
 15106  0C77  0086               	movwf	6
 15107  0C78  3001               	movlw	1	; select bank2/3
 15108  0C79  0087               	movwf	7
 15109  0C7A  3001               	movlw	1	; select bank2/3
 15110  0C7B  3F4C               	moviw [12]fsr1
 15111  0C7C  00AC               	movwf	(_RF_Data^(0+128)+12)
 15112                           
 15113                           ;RF_Control_B1.c: 159: RF_Data[13] = product->Data[13];
 15114  0C7D  087D               	movf	_product,w
 15115  0C7E  0086               	movwf	6
 15116  0C7F  3001               	movlw	1	; select bank2/3
 15117  0C80  0087               	movwf	7
 15118  0C81  3001               	movlw	1	; select bank2/3
 15119  0C82  3F4D               	moviw [13]fsr1
 15120  0C83  00AD               	movwf	(_RF_Data^(0+128)+13)
 15121                           
 15122                           ;RF_Control_B1.c: 160: RF_Data[14] = product->Data[14];
 15123  0C84  087D               	movf	_product,w
 15124  0C85  0086               	movwf	6
 15125  0C86  3001               	movlw	1	; select bank2/3
 15126  0C87  0087               	movwf	7
 15127  0C88  3001               	movlw	1	; select bank2/3
 15128  0C89  3F4E               	moviw [14]fsr1
 15129  0C8A  00AE               	movwf	(_RF_Data^(0+128)+14)
 15130                           
 15131                           ;RF_Control_B1.c: 161: RF_Data[15] = product->Data[15];
 15132  0C8B  087D               	movf	_product,w
 15133  0C8C  0086               	movwf	6
 15134  0C8D  3001               	movlw	1	; select bank2/3
 15135  0C8E  0087               	movwf	7
 15136  0C8F  3001               	movlw	1	; select bank2/3
 15137  0C90  3F4F               	moviw [15]fsr1
 15138  0C91  00AF               	movwf	(_RF_Data^(0+128)+15)
 15139                           
 15140                           ;RF_Control_B1.c: 162: RF_Data[16] = product->Data[16];
 15141  0C92  087D               	movf	_product,w
 15142  0C93  0086               	movwf	6
 15143  0C94  3001               	movlw	1	; select bank2/3
 15144  0C95  0087               	movwf	7
 15145  0C96  3001               	movlw	1	; select bank2/3
 15146  0C97  3F50               	moviw [16]fsr1
 15147  0C98  00B0               	movwf	(_RF_Data^(0+128)+16)
 15148                           
 15149                           ;RF_Control_B1.c: 163: RF_Data[17] = product->Data[17];
 15150  0C99  087D               	movf	_product,w
 15151  0C9A  0086               	movwf	6
 15152  0C9B  3001               	movlw	1	; select bank2/3
 15153  0C9C  0087               	movwf	7
 15154  0C9D  3001               	movlw	1	; select bank2/3
 15155  0C9E  3F51               	moviw [17]fsr1
 15156  0C9F  00B1               	movwf	(_RF_Data^(0+128)+17)
 15157                           
 15158                           ;RF_Control_B1.c: 164: RF_Data[18] = product->Data[18];
 15159  0CA0  087D               	movf	_product,w
 15160  0CA1  0086               	movwf	6
 15161  0CA2  3001               	movlw	1	; select bank2/3
 15162  0CA3  0087               	movwf	7
 15163  0CA4  3001               	movlw	1	; select bank2/3
 15164  0CA5  3F52               	moviw [18]fsr1
 15165  0CA6  00B2               	movwf	(_RF_Data^(0+128)+18)
 15166                           
 15167                           ;RF_Control_B1.c: 165: RF_Data[19] = product->Data[19];
 15168  0CA7  087D               	movf	_product,w
 15169  0CA8  0086               	movwf	6
 15170  0CA9  3001               	movlw	1	; select bank2/3
 15171  0CAA  0087               	movwf	7
 15172  0CAB  3001               	movlw	1	; select bank2/3
 15173  0CAC  3F53               	moviw [19]fsr1
 15174  0CAD  00B3               	movwf	(_RF_Data^(0+128)+19)
 15175                           
 15176                           ;RF_Control_B1.c: 166: RF_Data[20] = 210;
 15177  0CAE  30D2               	movlw	210
 15178  0CAF  0020               	movlb	0	; select bank0
 15179  0CB0  00A2               	movwf	??_setTxData
 15180  0CB1  0822               	movf	??_setTxData,w
 15181  0CB2  0021               	movlb	1	; select bank1
 15182  0CB3  00B4               	movwf	(_RF_Data^(0+128)+20)
 15183  0CB4  0008               	return
 15184  0CB5                     __end_of_setTxData:	
 15185                           
 15186                           	psect	text90
 15187  188B                     __ptext90:	
 15188 ;; *************** function _RfPointSelect *****************
 15189 ;; Defined at:
 15190 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  rf              1    wreg     unsigned char 
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;  rf              1    1[BANK0 ] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;		None               void
 15197 ;; Registers used:
 15198 ;;		wreg
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;Total ram usage:        2 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    4
 15211 ;; This function calls:
 15212 ;;		Nothing
 15213 ;; This function is called by:
 15214 ;;		_setRF_Learn
 15215 ;;		_setRF_RxStatus
 15216 ;;		_setRF_Main
 15217 ;;		_setTxData
 15218 ;;		_setRF_Enable
 15219 ;;		_RF_RxDisable
 15220 ;;		_getRxData
 15221 ;;		_setLog_Code
 15222 ;;		_setControl_Lights_Table
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           
 15227                           ;psect for function _RfPointSelect
 15228  188B                     _RfPointSelect:	
 15229                           
 15230                           ;incstack = 0
 15231                           ; Regs used in _RfPointSelect: [wreg]
 15232                           ;RfPointSelect@rf stored from wreg
 15233  188B  0020               	movlb	0	; select bank0
 15234  188C  00A1               	movwf	RfPointSelect@rf
 15235                           
 15236                           ;RF_Control_B1.c: 9: if (rf == 1) {
 15237  188D  0821               	movf	RfPointSelect@rf,w
 15238  188E  3A01               	xorlw	1
 15239  188F  1D03               	skipz
 15240  1890  0008               	return
 15241                           
 15242                           ;RF_Control_B1.c: 10: RF = &RF1;
 15243  1891  30DF               	movlw	_RF1& (0+255)
 15244  1892  00A0               	movwf	??_RfPointSelect
 15245  1893  0820               	movf	??_RfPointSelect,w
 15246  1894  0021               	movlb	1	; select bank1
 15247  1895  00BD               	movwf	_RF^(0+128)
 15248  1896  0008               	return
 15249  1897                     __end_of_RfPointSelect:	
 15250                           
 15251                           	psect	text91
 15252  190B                     __ptext91:	
 15253 ;; *************** function _setSw_Status *****************
 15254 ;; Defined at:
 15255 ;;		line 105 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 15256 ;; Parameters:    Size  Location     Type
 15257 ;;  sw              1    wreg     unsigned char 
 15258 ;;  command         1    2[BANK0 ] unsigned char 
 15259 ;; Auto vars:     Size  Location     Type
 15260 ;;  sw              1    3[BANK0 ] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;		None               void
 15263 ;; Registers used:
 15264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15270 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;Total ram usage:        2 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    5
 15277 ;; This function calls:
 15278 ;;		_SwPointSelect
 15279 ;; This function is called by:
 15280 ;;		_DlyOff_Main
 15281 ;;		_setDimmerLights_ERROR
 15282 ;;		_setControl_Lights_Table
 15283 ;;		_setRFSW_Control
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           
 15288                           ;psect for function _setSw_Status
 15289  190B                     _setSw_Status:	
 15290                           
 15291                           ;incstack = 0
 15292                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15293                           ;setSw_Status@sw stored from wreg
 15294  190B  0020               	movlb	0	; select bank0
 15295  190C  00A3               	movwf	setSw_Status@sw
 15296                           
 15297                           ;Switch_B1.c: 106: SwPointSelect(sw);
 15298  190D  0823               	movf	setSw_Status@sw,w
 15299  190E  3199  21CC         	fcall	_SwPointSelect
 15300                           
 15301                           ;Switch_B1.c: 107: Sw->Status = command;
 15302  1910  087A               	movf	_Sw,w
 15303  1911  0086               	movwf	6
 15304  1912  3001               	movlw	1	; select bank2/3
 15305  1913  0087               	movwf	7
 15306  1914  0020               	movlb	0	; select bank0
 15307  1915  0822               	movf	setSw_Status@command,w
 15308  1916  1301               	bcf	1,6
 15309  1917  1D03               	skipz
 15310  1918  1701               	bsf	1,6
 15311  1919  0008               	return
 15312  191A                     __end_of_setSw_Status:	
 15313                           
 15314                           	psect	text92
 15315  19CC                     __ptext92:	
 15316 ;; *************** function _SwPointSelect *****************
 15317 ;; Defined at:
 15318 ;;		line 17 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;  sw              1    wreg     unsigned char 
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;  sw              1    1[BANK0 ] unsigned char 
 15323 ;; Return value:  Size  Location     Type
 15324 ;;		None               void
 15325 ;; Registers used:
 15326 ;;		wreg
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;Total ram usage:        2 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; Hardware stack levels required when called:    4
 15339 ;; This function calls:
 15340 ;;		Nothing
 15341 ;; This function is called by:
 15342 ;;		_setSw_Enable
 15343 ;;		_setSw_Status
 15344 ;;		_setSw_Main
 15345 ;;		_Sw_Detect
 15346 ;; This function uses a non-reentrant model
 15347 ;;
 15348                           
 15349                           
 15350                           ;psect for function _SwPointSelect
 15351  19CC                     _SwPointSelect:	
 15352                           
 15353                           ;incstack = 0
 15354                           ; Regs used in _SwPointSelect: [wreg]
 15355                           ;SwPointSelect@sw stored from wreg
 15356  19CC  0020               	movlb	0	; select bank0
 15357  19CD  00A1               	movwf	SwPointSelect@sw
 15358                           
 15359                           ;Switch_B1.c: 20: if (sw == 1) {
 15360  19CE  0821               	movf	SwPointSelect@sw,w
 15361  19CF  3A01               	xorlw	1
 15362  19D0  1D03               	skipz
 15363  19D1  29D7               	goto	l5930
 15364                           
 15365                           ;Switch_B1.c: 21: Sw = &Sw1;
 15366  19D2  304A               	movlw	_Sw1& (0+255)
 15367  19D3  00A0               	movwf	??_SwPointSelect
 15368  19D4  0820               	movf	??_SwPointSelect,w
 15369  19D5  00FA               	movwf	_Sw
 15370                           
 15371                           ;Switch_B1.c: 22: }
 15372  19D6  0008               	return
 15373  19D7                     l5930:	
 15374                           
 15375                           ;Switch_B1.c: 25: else if (sw == 2) {
 15376  19D7  0821               	movf	SwPointSelect@sw,w
 15377  19D8  3A02               	xorlw	2
 15378  19D9  1D03               	skipz
 15379  19DA  0008               	return
 15380                           
 15381                           ;Switch_B1.c: 26: Sw = &Sw2;
 15382  19DB  3053               	movlw	_Sw2& (0+255)
 15383  19DC  00A0               	movwf	??_SwPointSelect
 15384  19DD  0820               	movf	??_SwPointSelect,w
 15385  19DE  00FA               	movwf	_Sw
 15386  19DF  0008               	return
 15387  19E0                     __end_of_SwPointSelect:	
 15388                           
 15389                           	psect	text93
 15390  14CE                     __ptext93:	
 15391 ;; *************** function _setRF_DimmerLights *****************
 15392 ;; Defined at:
 15393 ;;		line 398 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;  lights          1    wreg     unsigned char 
 15396 ;;  on              1   61[BANK0 ] unsigned char 
 15397 ;; Auto vars:     Size  Location     Type
 15398 ;;  lights          1   65[BANK0 ] unsigned char 
 15399 ;;  status          1   64[BANK0 ] unsigned char 
 15400 ;; Return value:  Size  Location     Type
 15401 ;;		None               void
 15402 ;; Registers used:
 15403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15404 ;; Tracked objects:
 15405 ;;		On entry : 0/0
 15406 ;;		On exit  : 0/0
 15407 ;;		Unchanged: 0/0
 15408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15409 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;Total ram usage:        5 bytes
 15414 ;; Hardware stack levels used:    1
 15415 ;; Hardware stack levels required when called:    7
 15416 ;; This function calls:
 15417 ;;		_setPercentValue
 15418 ;; This function is called by:
 15419 ;;		_DlyOff_Main
 15420 ;;		_setDimmerLights_Adj
 15421 ;;		_setRFSW_Control
 15422 ;;		_Sw_DimmerOnFunc
 15423 ;;		_Sw_DimmerOffFunc
 15424 ;; This function uses a non-reentrant model
 15425 ;;
 15426                           
 15427                           
 15428                           ;psect for function _setRF_DimmerLights
 15429  14CE                     _setRF_DimmerLights:	
 15430                           
 15431                           ;incstack = 0
 15432                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15433                           ;setRF_DimmerLights@lights stored from wreg
 15434  14CE  0020               	movlb	0	; select bank0
 15435  14CF  00E1               	movwf	setRF_DimmerLights@lights
 15436                           
 15437                           ;RF_Control_B1.c: 399: char status;
 15438                           ;RF_Control_B1.c: 400: status = 1;
 15439  14D0  01E0               	clrf	setRF_DimmerLights@status
 15440  14D1  0AE0               	incf	setRF_DimmerLights@status,f
 15441                           
 15442                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 15443  14D2  0861               	movf	setRF_DimmerLights@lights,w
 15444  14D3  3EFF               	addlw	-1
 15445  14D4  0A89               	incf	9,f
 15446  14D5  2CD8               	goto	u7470
 15447  14D6                     u7475:	
 15448  14D6  1003               	clrc
 15449  14D7  0DE0               	rlf	setRF_DimmerLights@status,f
 15450  14D8                     u7470:	
 15451  14D8  3EFF               	addlw	-1
 15452  14D9  1D03               	skipz
 15453  14DA  2CD6               	goto	u7475
 15454                           
 15455                           ;RF_Control_B1.c: 402: product->Data[11]=lights;
 15456  14DB  0861               	movf	setRF_DimmerLights@lights,w
 15457  14DC  00DE               	movwf	??_setRF_DimmerLights
 15458  14DD  087D               	movf	_product,w
 15459  14DE  3E0B               	addlw	11
 15460  14DF  0086               	movwf	6
 15461  14E0  3001               	movlw	1	; select bank2/3
 15462  14E1  0087               	movwf	7
 15463  14E2  085E               	movf	??_setRF_DimmerLights,w
 15464  14E3  0081               	movwf	1
 15465                           
 15466                           ;RF_Control_B1.c: 405: product->Data[(20 + lights)]=setPercentValue(((char)(65*1.5)));
 15467  14E4  3061               	movlw	97
 15468  14E5  3190  20FF  3194   	fcall	_setPercentValue
 15469  14E8  0020               	movlb	0	; select bank0
 15470  14E9  00DE               	movwf	??_setRF_DimmerLights
 15471  14EA  0861               	movf	setRF_DimmerLights@lights,w
 15472  14EB  3E14               	addlw	20
 15473  14EC  077D               	addwf	_product,w
 15474  14ED  00DF               	movwf	??_setRF_DimmerLights+1
 15475  14EE  085F               	movf	??_setRF_DimmerLights+1,w
 15476  14EF  0086               	movwf	6
 15477  14F0  3001               	movlw	1	; select bank2/3
 15478  14F1  0087               	movwf	7
 15479  14F2  085E               	movf	??_setRF_DimmerLights,w
 15480  14F3  0081               	movwf	1
 15481                           
 15482                           ;RF_Control_B1.c: 408: product->Data[9]=product->Data[20 + lights];
 15483  14F4  0861               	movf	setRF_DimmerLights@lights,w
 15484  14F5  3E14               	addlw	20
 15485  14F6  077D               	addwf	_product,w
 15486  14F7  00DE               	movwf	??_setRF_DimmerLights
 15487  14F8  085E               	movf	??_setRF_DimmerLights,w
 15488  14F9  0086               	movwf	6
 15489  14FA  3001               	movlw	1	; select bank2/3
 15490  14FB  0087               	movwf	7
 15491  14FC  0801               	movf	1,w
 15492  14FD  00DF               	movwf	??_setRF_DimmerLights+1
 15493  14FE  087D               	movf	_product,w
 15494  14FF  3E09               	addlw	9
 15495  1500  0086               	movwf	6
 15496  1501  3001               	movlw	1	; select bank2/3
 15497  1502  0087               	movwf	7
 15498  1503  085F               	movf	??_setRF_DimmerLights+1,w
 15499  1504  0081               	movwf	1
 15500                           
 15501                           ;RF_Control_B1.c: 409: product->Data[17]=product->Data[26 + lights];
 15502  1505  0861               	movf	setRF_DimmerLights@lights,w
 15503  1506  3E1A               	addlw	26
 15504  1507  077D               	addwf	_product,w
 15505  1508  00DE               	movwf	??_setRF_DimmerLights
 15506  1509  085E               	movf	??_setRF_DimmerLights,w
 15507  150A  0086               	movwf	6
 15508  150B  3001               	movlw	1	; select bank2/3
 15509  150C  0087               	movwf	7
 15510  150D  0801               	movf	1,w
 15511  150E  00DF               	movwf	??_setRF_DimmerLights+1
 15512  150F  087D               	movf	_product,w
 15513  1510  3E11               	addlw	17
 15514  1511  0086               	movwf	6
 15515  1512  3001               	movlw	1	; select bank2/3
 15516  1513  0087               	movwf	7
 15517  1514  085F               	movf	??_setRF_DimmerLights+1,w
 15518  1515  0081               	movwf	1
 15519                           
 15520                           ;RF_Control_B1.c: 410: if (on) {
 15521  1516  085D               	movf	setRF_DimmerLights@on,w
 15522  1517  1903               	btfsc	3,2
 15523  1518  2D29               	goto	l7950
 15524                           
 15525                           ;RF_Control_B1.c: 411: product->Data[15]=(product->Data[15] | status);
 15526  1519  087D               	movf	_product,w
 15527  151A  3E0F               	addlw	15
 15528  151B  0086               	movwf	6
 15529  151C  3001               	movlw	1	; select bank2/3
 15530  151D  0087               	movwf	7
 15531  151E  0801               	movf	1,w
 15532  151F  0460               	iorwf	setRF_DimmerLights@status,w
 15533  1520  00DE               	movwf	??_setRF_DimmerLights
 15534  1521  087D               	movf	_product,w
 15535  1522  3E0F               	addlw	15
 15536  1523  0086               	movwf	6
 15537  1524  3001               	movlw	1	; select bank2/3
 15538  1525  0087               	movwf	7
 15539  1526  085E               	movf	??_setRF_DimmerLights,w
 15540  1527  0081               	movwf	1
 15541                           
 15542                           ;RF_Control_B1.c: 412: } else {
 15543  1528  0008               	return
 15544  1529                     l7950:	
 15545                           
 15546                           ;RF_Control_B1.c: 413: product->Data[15]=(product->Data[15]&(~status));
 15547  1529  087D               	movf	_product,w
 15548  152A  3E0F               	addlw	15
 15549  152B  0086               	movwf	6
 15550  152C  3001               	movlw	1	; select bank2/3
 15551  152D  0087               	movwf	7
 15552  152E  0960               	comf	setRF_DimmerLights@status,w
 15553  152F  0501               	andwf	1,w
 15554  1530  00DE               	movwf	??_setRF_DimmerLights
 15555  1531  087D               	movf	_product,w
 15556  1532  3E0F               	addlw	15
 15557  1533  0086               	movwf	6
 15558  1534  3001               	movlw	1	; select bank2/3
 15559  1535  0087               	movwf	7
 15560  1536  085E               	movf	??_setRF_DimmerLights,w
 15561  1537  0081               	movwf	1
 15562  1538  0008               	return
 15563  1539                     __end_of_setRF_DimmerLights:	
 15564                           
 15565                           	psect	text94
 15566  10FF                     __ptext94:	
 15567 ;; *************** function _setPercentValue *****************
 15568 ;; Defined at:
 15569 ;;		line 505 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;  value           1    wreg     unsigned char 
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;  value           1   57[BANK0 ] unsigned char 
 15574 ;;  i               3   58[BANK0 ] float 
 15575 ;; Return value:  Size  Location     Type
 15576 ;;                  1    wreg      unsigned char 
 15577 ;; Registers used:
 15578 ;;		wreg, status,2, status,0, pclath, cstack
 15579 ;; Tracked objects:
 15580 ;;		On entry : 0/0
 15581 ;;		On exit  : 0/0
 15582 ;;		Unchanged: 0/0
 15583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;Total ram usage:        4 bytes
 15589 ;; Hardware stack levels used:    1
 15590 ;; Hardware stack levels required when called:    6
 15591 ;; This function calls:
 15592 ;;		___awtoft
 15593 ;;		___ftdiv
 15594 ;;		___fttol
 15595 ;; This function is called by:
 15596 ;;		_Flash_Memory_Initialization
 15597 ;;		_setRF_DimmerLights
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _setPercentValue
 15603  10FF                     _setPercentValue:	
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15607                           ;setPercentValue@value stored from wreg
 15608  10FF  0020               	movlb	0	; select bank0
 15609  1100  00D9               	movwf	setPercentValue@value
 15610                           
 15611                           ;Dimmer_B1.c: 514: float i=((char)(65*1.5))-((char)(20*1.5));
 15612  1101  3000               	movlw	0
 15613  1102  00DA               	movwf	setPercentValue@i
 15614  1103  3086               	movlw	134
 15615  1104  00DB               	movwf	setPercentValue@i+1
 15616  1105  3042               	movlw	66
 15617  1106  00DC               	movwf	setPercentValue@i+2
 15618                           
 15619                           ;Dimmer_B1.c: 515: i/=100;
 15620  1107  3000               	movlw	0
 15621  1108  00AE               	movwf	___ftdiv@f2
 15622  1109  30C8               	movlw	200
 15623  110A  00AF               	movwf	___ftdiv@f2+1
 15624  110B  3042               	movlw	66
 15625  110C  00B0               	movwf	___ftdiv@f2+2
 15626  110D  085A               	movf	setPercentValue@i,w
 15627  110E  00B1               	movwf	___ftdiv@f1
 15628  110F  085B               	movf	setPercentValue@i+1,w
 15629  1110  00B2               	movwf	___ftdiv@f1+1
 15630  1111  085C               	movf	setPercentValue@i+2,w
 15631  1112  00B3               	movwf	___ftdiv@f1+2
 15632  1113  318C  24B5  3190   	fcall	___ftdiv
 15633  1116  0020               	movlb	0	; select bank0
 15634  1117  082E               	movf	?___ftdiv,w
 15635  1118  00DA               	movwf	setPercentValue@i
 15636  1119  082F               	movf	?___ftdiv+1,w
 15637  111A  00DB               	movwf	setPercentValue@i+1
 15638  111B  0830               	movf	?___ftdiv+2,w
 15639  111C  00DC               	movwf	setPercentValue@i+2
 15640                           
 15641                           ;Dimmer_B1.c: 516: return (100-(char)((value-((char)(65*1.5)))/i));
 15642  111D  0859               	movf	setPercentValue@value,w
 15643  111E  3E9F               	addlw	159
 15644  111F  00A8               	movwf	___awtoft@c
 15645  1120  30FF               	movlw	255
 15646  1121  1803               	skipnc
 15647  1122  3000               	movlw	0
 15648  1123  00A9               	movwf	___awtoft@c+1
 15649  1124  319C  240A  3190   	fcall	___awtoft
 15650  1127  0020               	movlb	0	; select bank0
 15651  1128  0828               	movf	?___awtoft,w
 15652  1129  00B1               	movwf	___ftdiv@f1
 15653  112A  0829               	movf	?___awtoft+1,w
 15654  112B  00B2               	movwf	___ftdiv@f1+1
 15655  112C  082A               	movf	?___awtoft+2,w
 15656  112D  00B3               	movwf	___ftdiv@f1+2
 15657  112E  085A               	movf	setPercentValue@i,w
 15658  112F  00AE               	movwf	___ftdiv@f2
 15659  1130  085B               	movf	setPercentValue@i+1,w
 15660  1131  00AF               	movwf	___ftdiv@f2+1
 15661  1132  085C               	movf	setPercentValue@i+2,w
 15662  1133  00B0               	movwf	___ftdiv@f2+2
 15663  1134  318C  24B5  3190   	fcall	___ftdiv
 15664  1137  0020               	movlb	0	; select bank0
 15665  1138  082E               	movf	?___ftdiv,w
 15666  1139  00CB               	movwf	___fttol@f1
 15667  113A  082F               	movf	?___ftdiv+1,w
 15668  113B  00CC               	movwf	___fttol@f1+1
 15669  113C  0830               	movf	?___ftdiv+2,w
 15670  113D  00CD               	movwf	___fttol@f1+2
 15671  113E  3197  2779         	fcall	___fttol
 15672  1140  0020               	movlb	0	; select bank0
 15673  1141  034B               	decf	?___fttol,w
 15674  1142  3AFF               	xorlw	255
 15675  1143  3E64               	addlw	100
 15676  1144  0008               	return
 15677  1145                     __end_of_setPercentValue:	
 15678                           
 15679                           	psect	text95
 15680  1779                     __ptext95:	
 15681 ;; *************** function ___fttol *****************
 15682 ;; Defined at:
 15683 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15684 ;; Parameters:    Size  Location     Type
 15685 ;;  f1              3   43[BANK0 ] float 
 15686 ;; Auto vars:     Size  Location     Type
 15687 ;;  lval            4   52[BANK0 ] unsigned long 
 15688 ;;  exp1            1   56[BANK0 ] unsigned char 
 15689 ;;  sign1           1   51[BANK0 ] unsigned char 
 15690 ;; Return value:  Size  Location     Type
 15691 ;;                  4   43[BANK0 ] long 
 15692 ;; Registers used:
 15693 ;;		wreg, status,2, status,0
 15694 ;; Tracked objects:
 15695 ;;		On entry : 0/0
 15696 ;;		On exit  : 0/0
 15697 ;;		Unchanged: 0/0
 15698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;Total ram usage:       14 bytes
 15704 ;; Hardware stack levels used:    1
 15705 ;; Hardware stack levels required when called:    4
 15706 ;; This function calls:
 15707 ;;		Nothing
 15708 ;; This function is called by:
 15709 ;;		_getPercentValue
 15710 ;;		_setPercentValue
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714                           
 15715                           ;psect for function ___fttol
 15716  1779                     ___fttol:	
 15717                           
 15718                           ;incstack = 0
 15719                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15720  1779  0020               	movlb	0	; select bank0
 15721  177A  084B               	movf	___fttol@f1,w
 15722  177B  00CF               	movwf	??___fttol
 15723  177C  084C               	movf	___fttol@f1+1,w
 15724  177D  00D0               	movwf	??___fttol+1
 15725  177E  084D               	movf	___fttol@f1+2,w
 15726  177F  00D1               	movwf	??___fttol+2
 15727  1780  1003               	clrc
 15728  1781  0D50               	rlf	??___fttol+1,w
 15729  1782  0D51               	rlf	??___fttol+2,w
 15730  1783  00D2               	movwf	??___fttol+3
 15731  1784  0852               	movf	??___fttol+3,w
 15732  1785  00D8               	movwf	___fttol@exp1
 15733  1786  08D8               	movf	___fttol@exp1,f
 15734  1787  1D03               	skipz
 15735  1788  2F92               	goto	l5812
 15736  1789  3000               	movlw	0
 15737  178A  00CE               	movwf	?___fttol+3
 15738  178B  3000               	movlw	0
 15739  178C  00CD               	movwf	?___fttol+2
 15740  178D  3000               	movlw	0
 15741  178E  00CC               	movwf	?___fttol+1
 15742  178F  3000               	movlw	0
 15743  1790  00CB               	movwf	?___fttol
 15744  1791  0008               	return
 15745  1792                     l5812:	
 15746  1792  084B               	movf	___fttol@f1,w
 15747  1793  00CF               	movwf	??___fttol
 15748  1794  084C               	movf	___fttol@f1+1,w
 15749  1795  00D0               	movwf	??___fttol+1
 15750  1796  084D               	movf	___fttol@f1+2,w
 15751  1797  00D1               	movwf	??___fttol+2
 15752  1798  3017               	movlw	23
 15753  1799                     u4265:	
 15754  1799  36D1               	lsrf	??___fttol+2,f
 15755  179A  0CD0               	rrf	??___fttol+1,f
 15756  179B  0CCF               	rrf	??___fttol,f
 15757  179C  0B89               	decfsz	9,f
 15758  179D  2F99               	goto	u4265
 15759  179E  084F               	movf	??___fttol,w
 15760  179F  00D2               	movwf	??___fttol+3
 15761  17A0  0852               	movf	??___fttol+3,w
 15762  17A1  00D3               	movwf	___fttol@sign1
 15763  17A2  17CC               	bsf	___fttol@f1+1,7
 15764  17A3  30FF               	movlw	255
 15765  17A4  05CB               	andwf	___fttol@f1,f
 15766  17A5  30FF               	movlw	255
 15767  17A6  05CC               	andwf	___fttol@f1+1,f
 15768  17A7  3000               	movlw	0
 15769  17A8  05CD               	andwf	___fttol@f1+2,f
 15770  17A9  084B               	movf	___fttol@f1,w
 15771  17AA  00D4               	movwf	___fttol@lval
 15772  17AB  084C               	movf	___fttol@f1+1,w
 15773  17AC  00D5               	movwf	___fttol@lval+1
 15774  17AD  084D               	movf	___fttol@f1+2,w
 15775  17AE  00D6               	movwf	___fttol@lval+2
 15776  17AF  01D7               	clrf	___fttol@lval+3
 15777  17B0  308E               	movlw	142
 15778  17B1  02D8               	subwf	___fttol@exp1,f
 15779  17B2  1FD8               	btfss	___fttol@exp1,7
 15780  17B3  2FD0               	goto	l5832
 15781  17B4  0858               	movf	___fttol@exp1,w
 15782  17B5  3A80               	xorlw	128
 15783  17B6  3E8F               	addlw	143
 15784  17B7  1803               	skipnc
 15785  17B8  2FC2               	goto	l5830
 15786  17B9  3000               	movlw	0
 15787  17BA  00CE               	movwf	?___fttol+3
 15788  17BB  3000               	movlw	0
 15789  17BC  00CD               	movwf	?___fttol+2
 15790  17BD  3000               	movlw	0
 15791  17BE  00CC               	movwf	?___fttol+1
 15792  17BF  3000               	movlw	0
 15793  17C0  00CB               	movwf	?___fttol
 15794  17C1  0008               	return
 15795  17C2                     l5830:	
 15796  17C2  3001               	movlw	1
 15797  17C3                     u4295:	
 15798  17C3  36D7               	lsrf	___fttol@lval+3,f
 15799  17C4  0CD6               	rrf	___fttol@lval+2,f
 15800  17C5  0CD5               	rrf	___fttol@lval+1,f
 15801  17C6  0CD4               	rrf	___fttol@lval,f
 15802  17C7  0B89               	decfsz	9,f
 15803  17C8  2FC3               	goto	u4295
 15804  17C9  3001               	movlw	1
 15805  17CA  00CF               	movwf	??___fttol
 15806  17CB  084F               	movf	??___fttol,w
 15807  17CC  07D8               	addwf	___fttol@exp1,f
 15808  17CD  1903               	btfsc	3,2
 15809  17CE  2FE9               	goto	l5842
 15810  17CF  2FC2               	goto	l5830
 15811  17D0                     l5832:	
 15812  17D0  3018               	movlw	24
 15813  17D1  0258               	subwf	___fttol@exp1,w
 15814  17D2  1C03               	skipc
 15815  17D3  2FE6               	goto	l5840
 15816  17D4  3000               	movlw	0
 15817  17D5  00CE               	movwf	?___fttol+3
 15818  17D6  3000               	movlw	0
 15819  17D7  00CD               	movwf	?___fttol+2
 15820  17D8  3000               	movlw	0
 15821  17D9  00CC               	movwf	?___fttol+1
 15822  17DA  3000               	movlw	0
 15823  17DB  00CB               	movwf	?___fttol
 15824  17DC  0008               	return
 15825  17DD                     l5838:	
 15826  17DD  3001               	movlw	1
 15827  17DE                     u4325:	
 15828  17DE  35D4               	lslf	___fttol@lval,f
 15829  17DF  0DD5               	rlf	___fttol@lval+1,f
 15830  17E0  0DD6               	rlf	___fttol@lval+2,f
 15831  17E1  0DD7               	rlf	___fttol@lval+3,f
 15832  17E2  0B89               	decfsz	9,f
 15833  17E3  2FDE               	goto	u4325
 15834  17E4  3001               	movlw	1
 15835  17E5  02D8               	subwf	___fttol@exp1,f
 15836  17E6                     l5840:	
 15837  17E6  08D8               	movf	___fttol@exp1,f
 15838  17E7  1D03               	skipz
 15839  17E8  2FDD               	goto	l5838
 15840  17E9                     l5842:	
 15841  17E9  0853               	movf	___fttol@sign1,w
 15842  17EA  1903               	btfsc	3,2
 15843  17EB  2FF7               	goto	l5846
 15844  17EC  09D4               	comf	___fttol@lval,f
 15845  17ED  09D5               	comf	___fttol@lval+1,f
 15846  17EE  09D6               	comf	___fttol@lval+2,f
 15847  17EF  09D7               	comf	___fttol@lval+3,f
 15848  17F0  0AD4               	incf	___fttol@lval,f
 15849  17F1  1903               	skipnz
 15850  17F2  0AD5               	incf	___fttol@lval+1,f
 15851  17F3  1903               	skipnz
 15852  17F4  0AD6               	incf	___fttol@lval+2,f
 15853  17F5  1903               	skipnz
 15854  17F6  0AD7               	incf	___fttol@lval+3,f
 15855  17F7                     l5846:	
 15856  17F7  0857               	movf	___fttol@lval+3,w
 15857  17F8  00CE               	movwf	?___fttol+3
 15858  17F9  0856               	movf	___fttol@lval+2,w
 15859  17FA  00CD               	movwf	?___fttol+2
 15860  17FB  0855               	movf	___fttol@lval+1,w
 15861  17FC  00CC               	movwf	?___fttol+1
 15862  17FD  0854               	movf	___fttol@lval,w
 15863  17FE  00CB               	movwf	?___fttol
 15864  17FF  0008               	return
 15865  1800                     __end_of___fttol:	
 15866                           
 15867                           	psect	text96
 15868  0CB5                     __ptext96:	
 15869 ;; *************** function ___ftdiv *****************
 15870 ;; Defined at:
 15871 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;  f2              3   14[BANK0 ] float 
 15874 ;;  f1              3   17[BANK0 ] float 
 15875 ;; Auto vars:     Size  Location     Type
 15876 ;;  f3              3   25[BANK0 ] float 
 15877 ;;  sign            1   29[BANK0 ] unsigned char 
 15878 ;;  exp             1   28[BANK0 ] unsigned char 
 15879 ;;  cntr            1   24[BANK0 ] unsigned char 
 15880 ;; Return value:  Size  Location     Type
 15881 ;;                  3   14[BANK0 ] float 
 15882 ;; Registers used:
 15883 ;;		wreg, status,2, status,0, pclath, cstack
 15884 ;; Tracked objects:
 15885 ;;		On entry : 0/0
 15886 ;;		On exit  : 0/0
 15887 ;;		Unchanged: 0/0
 15888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15889 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15893 ;;Total ram usage:       16 bytes
 15894 ;; Hardware stack levels used:    1
 15895 ;; Hardware stack levels required when called:    5
 15896 ;; This function calls:
 15897 ;;		___ftpack
 15898 ;; This function is called by:
 15899 ;;		_getPercentValue
 15900 ;;		_setPercentValue
 15901 ;; This function uses a non-reentrant model
 15902 ;;
 15903                           
 15904                           
 15905                           ;psect for function ___ftdiv
 15906  0CB5                     ___ftdiv:	
 15907                           
 15908                           ;incstack = 0
 15909                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15910  0CB5  0020               	movlb	0	; select bank0
 15911  0CB6  0831               	movf	___ftdiv@f1,w
 15912  0CB7  00B4               	movwf	??___ftdiv
 15913  0CB8  0832               	movf	___ftdiv@f1+1,w
 15914  0CB9  00B5               	movwf	??___ftdiv+1
 15915  0CBA  0833               	movf	___ftdiv@f1+2,w
 15916  0CBB  00B6               	movwf	??___ftdiv+2
 15917  0CBC  1003               	clrc
 15918  0CBD  0D35               	rlf	??___ftdiv+1,w
 15919  0CBE  0D36               	rlf	??___ftdiv+2,w
 15920  0CBF  00B7               	movwf	??___ftdiv+3
 15921  0CC0  0837               	movf	??___ftdiv+3,w
 15922  0CC1  00BC               	movwf	___ftdiv@exp
 15923  0CC2  08BC               	movf	___ftdiv@exp,f
 15924  0CC3  1D03               	skipz
 15925  0CC4  2CCC               	goto	l5720
 15926  0CC5  3000               	movlw	0
 15927  0CC6  00AE               	movwf	?___ftdiv
 15928  0CC7  3000               	movlw	0
 15929  0CC8  00AF               	movwf	?___ftdiv+1
 15930  0CC9  3000               	movlw	0
 15931  0CCA  00B0               	movwf	?___ftdiv+2
 15932  0CCB  0008               	return
 15933  0CCC                     l5720:	
 15934  0CCC  082E               	movf	___ftdiv@f2,w
 15935  0CCD  00B4               	movwf	??___ftdiv
 15936  0CCE  082F               	movf	___ftdiv@f2+1,w
 15937  0CCF  00B5               	movwf	??___ftdiv+1
 15938  0CD0  0830               	movf	___ftdiv@f2+2,w
 15939  0CD1  00B6               	movwf	??___ftdiv+2
 15940  0CD2  1003               	clrc
 15941  0CD3  0D35               	rlf	??___ftdiv+1,w
 15942  0CD4  0D36               	rlf	??___ftdiv+2,w
 15943  0CD5  00B7               	movwf	??___ftdiv+3
 15944  0CD6  0837               	movf	??___ftdiv+3,w
 15945  0CD7  00BD               	movwf	___ftdiv@sign
 15946  0CD8  08BD               	movf	___ftdiv@sign,f
 15947  0CD9  1D03               	skipz
 15948  0CDA  2CE2               	goto	l5726
 15949  0CDB  3000               	movlw	0
 15950  0CDC  00AE               	movwf	?___ftdiv
 15951  0CDD  3000               	movlw	0
 15952  0CDE  00AF               	movwf	?___ftdiv+1
 15953  0CDF  3000               	movlw	0
 15954  0CE0  00B0               	movwf	?___ftdiv+2
 15955  0CE1  0008               	return
 15956  0CE2                     l5726:	
 15957  0CE2  3000               	movlw	0
 15958  0CE3  00B9               	movwf	___ftdiv@f3
 15959  0CE4  3000               	movlw	0
 15960  0CE5  00BA               	movwf	___ftdiv@f3+1
 15961  0CE6  3000               	movlw	0
 15962  0CE7  00BB               	movwf	___ftdiv@f3+2
 15963  0CE8  3089               	movlw	137
 15964  0CE9  073D               	addwf	___ftdiv@sign,w
 15965  0CEA  00B4               	movwf	??___ftdiv
 15966  0CEB  0834               	movf	??___ftdiv,w
 15967  0CEC  02BC               	subwf	___ftdiv@exp,f
 15968  0CED  0831               	movf	___ftdiv@f1,w
 15969  0CEE  00B4               	movwf	??___ftdiv
 15970  0CEF  0832               	movf	___ftdiv@f1+1,w
 15971  0CF0  00B5               	movwf	??___ftdiv+1
 15972  0CF1  0833               	movf	___ftdiv@f1+2,w
 15973  0CF2  00B6               	movwf	??___ftdiv+2
 15974  0CF3  3010               	movlw	16
 15975  0CF4                     u4075:	
 15976  0CF4  36B6               	lsrf	??___ftdiv+2,f
 15977  0CF5  0CB5               	rrf	??___ftdiv+1,f
 15978  0CF6  0CB4               	rrf	??___ftdiv,f
 15979  0CF7  0B89               	decfsz	9,f
 15980  0CF8  2CF4               	goto	u4075
 15981  0CF9  0834               	movf	??___ftdiv,w
 15982  0CFA  00B7               	movwf	??___ftdiv+3
 15983  0CFB  0837               	movf	??___ftdiv+3,w
 15984  0CFC  00BD               	movwf	___ftdiv@sign
 15985  0CFD  082E               	movf	___ftdiv@f2,w
 15986  0CFE  00B4               	movwf	??___ftdiv
 15987  0CFF  082F               	movf	___ftdiv@f2+1,w
 15988  0D00  00B5               	movwf	??___ftdiv+1
 15989  0D01  0830               	movf	___ftdiv@f2+2,w
 15990  0D02  00B6               	movwf	??___ftdiv+2
 15991  0D03  3010               	movlw	16
 15992  0D04                     u4085:	
 15993  0D04  36B6               	lsrf	??___ftdiv+2,f
 15994  0D05  0CB5               	rrf	??___ftdiv+1,f
 15995  0D06  0CB4               	rrf	??___ftdiv,f
 15996  0D07  0B89               	decfsz	9,f
 15997  0D08  2D04               	goto	u4085
 15998  0D09  0834               	movf	??___ftdiv,w
 15999  0D0A  00B7               	movwf	??___ftdiv+3
 16000  0D0B  0837               	movf	??___ftdiv+3,w
 16001  0D0C  06BD               	xorwf	___ftdiv@sign,f
 16002  0D0D  3080               	movlw	128
 16003  0D0E  00B4               	movwf	??___ftdiv
 16004  0D0F  0834               	movf	??___ftdiv,w
 16005  0D10  05BD               	andwf	___ftdiv@sign,f
 16006  0D11  17B2               	bsf	___ftdiv@f1+1,7
 16007  0D12  30FF               	movlw	255
 16008  0D13  05B1               	andwf	___ftdiv@f1,f
 16009  0D14  30FF               	movlw	255
 16010  0D15  05B2               	andwf	___ftdiv@f1+1,f
 16011  0D16  3000               	movlw	0
 16012  0D17  05B3               	andwf	___ftdiv@f1+2,f
 16013  0D18  17AF               	bsf	___ftdiv@f2+1,7
 16014  0D19  30FF               	movlw	255
 16015  0D1A  05AE               	andwf	___ftdiv@f2,f
 16016  0D1B  30FF               	movlw	255
 16017  0D1C  05AF               	andwf	___ftdiv@f2+1,f
 16018  0D1D  3000               	movlw	0
 16019  0D1E  05B0               	andwf	___ftdiv@f2+2,f
 16020  0D1F  3018               	movlw	24
 16021  0D20  00B4               	movwf	??___ftdiv
 16022  0D21  0834               	movf	??___ftdiv,w
 16023  0D22  00B8               	movwf	___ftdiv@cntr
 16024  0D23                     l5740:	
 16025  0D23  3001               	movlw	1
 16026  0D24                     u4095:	
 16027  0D24  35B9               	lslf	___ftdiv@f3,f
 16028  0D25  0DBA               	rlf	___ftdiv@f3+1,f
 16029  0D26  0DBB               	rlf	___ftdiv@f3+2,f
 16030  0D27  0B89               	decfsz	9,f
 16031  0D28  2D24               	goto	u4095
 16032  0D29  0830               	movf	___ftdiv@f2+2,w
 16033  0D2A  0233               	subwf	___ftdiv@f1+2,w
 16034  0D2B  1D03               	skipz
 16035  0D2C  2D33               	goto	u4105
 16036  0D2D  082F               	movf	___ftdiv@f2+1,w
 16037  0D2E  0232               	subwf	___ftdiv@f1+1,w
 16038  0D2F  1D03               	skipz
 16039  0D30  2D33               	goto	u4105
 16040  0D31  082E               	movf	___ftdiv@f2,w
 16041  0D32  0231               	subwf	___ftdiv@f1,w
 16042  0D33                     u4105:	
 16043  0D33  1C03               	skipc
 16044  0D34  2D3C               	goto	l5748
 16045  0D35  082E               	movf	___ftdiv@f2,w
 16046  0D36  02B1               	subwf	___ftdiv@f1,f
 16047  0D37  082F               	movf	___ftdiv@f2+1,w
 16048  0D38  3BB2               	subwfb	___ftdiv@f1+1,f
 16049  0D39  0830               	movf	___ftdiv@f2+2,w
 16050  0D3A  3BB3               	subwfb	___ftdiv@f1+2,f
 16051  0D3B  1439               	bsf	___ftdiv@f3,0
 16052  0D3C                     l5748:	
 16053  0D3C  3001               	movlw	1
 16054  0D3D                     u4115:	
 16055  0D3D  35B1               	lslf	___ftdiv@f1,f
 16056  0D3E  0DB2               	rlf	___ftdiv@f1+1,f
 16057  0D3F  0DB3               	rlf	___ftdiv@f1+2,f
 16058  0D40  0B89               	decfsz	9,f
 16059  0D41  2D3D               	goto	u4115
 16060  0D42  3001               	movlw	1
 16061  0D43  02B8               	subwf	___ftdiv@cntr,f
 16062  0D44  1D03               	btfss	3,2
 16063  0D45  2D23               	goto	l5740
 16064  0D46  0839               	movf	___ftdiv@f3,w
 16065  0D47  00A0               	movwf	___ftpack@arg
 16066  0D48  083A               	movf	___ftdiv@f3+1,w
 16067  0D49  00A1               	movwf	___ftpack@arg+1
 16068  0D4A  083B               	movf	___ftdiv@f3+2,w
 16069  0D4B  00A2               	movwf	___ftpack@arg+2
 16070  0D4C  083C               	movf	___ftdiv@exp,w
 16071  0D4D  00B4               	movwf	??___ftdiv
 16072  0D4E  0834               	movf	??___ftdiv,w
 16073  0D4F  00A3               	movwf	___ftpack@exp
 16074  0D50  083D               	movf	___ftdiv@sign,w
 16075  0D51  00B5               	movwf	??___ftdiv+1
 16076  0D52  0835               	movf	??___ftdiv+1,w
 16077  0D53  00A4               	movwf	___ftpack@sign
 16078  0D54  3193  23A4         	fcall	___ftpack
 16079  0D56  0020               	movlb	0	; select bank0
 16080  0D57  0820               	movf	?___ftpack,w
 16081  0D58  00AE               	movwf	?___ftdiv
 16082  0D59  0821               	movf	?___ftpack+1,w
 16083  0D5A  00AF               	movwf	?___ftdiv+1
 16084  0D5B  0822               	movf	?___ftpack+2,w
 16085  0D5C  00B0               	movwf	?___ftdiv+2
 16086  0D5D  0008               	return
 16087  0D5E                     __end_of___ftdiv:	
 16088                           
 16089                           	psect	text97
 16090  1C0A                     __ptext97:	
 16091 ;; *************** function ___awtoft *****************
 16092 ;; Defined at:
 16093 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;  c               2    8[BANK0 ] int 
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;  sign            1   13[BANK0 ] unsigned char 
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  3    8[BANK0 ] float 
 16100 ;; Registers used:
 16101 ;;		wreg, status,2, status,0, pclath, cstack
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;Total ram usage:        6 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    5
 16114 ;; This function calls:
 16115 ;;		___ftpack
 16116 ;; This function is called by:
 16117 ;;		_getPercentValue
 16118 ;;		_setPercentValue
 16119 ;; This function uses a non-reentrant model
 16120 ;;
 16121                           
 16122                           
 16123                           ;psect for function ___awtoft
 16124  1C0A                     ___awtoft:	
 16125                           
 16126                           ;incstack = 0
 16127                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16128  1C0A  0020               	movlb	0	; select bank0
 16129  1C0B  01AD               	clrf	___awtoft@sign
 16130  1C0C  1FA9               	btfss	___awtoft@c+1,7
 16131  1C0D  2C15               	goto	l5638
 16132  1C0E  09A8               	comf	___awtoft@c,f
 16133  1C0F  09A9               	comf	___awtoft@c+1,f
 16134  1C10  0AA8               	incf	___awtoft@c,f
 16135  1C11  1903               	skipnz
 16136  1C12  0AA9               	incf	___awtoft@c+1,f
 16137  1C13  01AD               	clrf	___awtoft@sign
 16138  1C14  0AAD               	incf	___awtoft@sign,f
 16139  1C15                     l5638:	
 16140  1C15  0828               	movf	___awtoft@c,w
 16141  1C16  00A0               	movwf	___ftpack@arg
 16142  1C17  0829               	movf	___awtoft@c+1,w
 16143  1C18  00A1               	movwf	___ftpack@arg+1
 16144  1C19  01A2               	clrf	___ftpack@arg+2
 16145  1C1A  308E               	movlw	142
 16146  1C1B  00AB               	movwf	??___awtoft
 16147  1C1C  082B               	movf	??___awtoft,w
 16148  1C1D  00A3               	movwf	___ftpack@exp
 16149  1C1E  082D               	movf	___awtoft@sign,w
 16150  1C1F  00AC               	movwf	??___awtoft+1
 16151  1C20  082C               	movf	??___awtoft+1,w
 16152  1C21  00A4               	movwf	___ftpack@sign
 16153  1C22  3193  23A4         	fcall	___ftpack
 16154  1C24  0020               	movlb	0	; select bank0
 16155  1C25  0820               	movf	?___ftpack,w
 16156  1C26  00A8               	movwf	?___awtoft
 16157  1C27  0821               	movf	?___ftpack+1,w
 16158  1C28  00A9               	movwf	?___awtoft+1
 16159  1C29  0822               	movf	?___ftpack+2,w
 16160  1C2A  00AA               	movwf	?___awtoft+2
 16161  1C2B  0008               	return
 16162  1C2C                     __end_of___awtoft:	
 16163                           
 16164                           	psect	text98
 16165  13A4                     __ptext98:	
 16166 ;; *************** function ___ftpack *****************
 16167 ;; Defined at:
 16168 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;  arg             3    0[BANK0 ] unsigned um
 16171 ;;  exp             1    3[BANK0 ] unsigned char 
 16172 ;;  sign            1    4[BANK0 ] unsigned char 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;		None
 16175 ;; Return value:  Size  Location     Type
 16176 ;;                  3    0[BANK0 ] float 
 16177 ;; Registers used:
 16178 ;;		wreg, status,2, status,0
 16179 ;; Tracked objects:
 16180 ;;		On entry : 0/0
 16181 ;;		On exit  : 0/0
 16182 ;;		Unchanged: 0/0
 16183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16184 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;Total ram usage:        8 bytes
 16189 ;; Hardware stack levels used:    1
 16190 ;; Hardware stack levels required when called:    4
 16191 ;; This function calls:
 16192 ;;		Nothing
 16193 ;; This function is called by:
 16194 ;;		___awtoft
 16195 ;;		___ftadd
 16196 ;;		___ftdiv
 16197 ;;		___ftmul
 16198 ;; This function uses a non-reentrant model
 16199 ;;
 16200                           
 16201                           
 16202                           ;psect for function ___ftpack
 16203  13A4                     ___ftpack:	
 16204                           
 16205                           ;incstack = 0
 16206                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16207  13A4  0020               	movlb	0	; select bank0
 16208  13A5  0823               	movf	___ftpack@exp,w
 16209  13A6  1903               	btfsc	3,2
 16210  13A7  2BAD               	goto	l5604
 16211  13A8  0822               	movf	___ftpack@arg+2,w
 16212  13A9  0421               	iorwf	___ftpack@arg+1,w
 16213  13AA  0420               	iorwf	___ftpack@arg,w
 16214  13AB  1D03               	skipz
 16215  13AC  2BBE               	goto	l5610
 16216  13AD                     l5604:	
 16217  13AD  3000               	movlw	0
 16218  13AE  00A0               	movwf	?___ftpack
 16219  13AF  3000               	movlw	0
 16220  13B0  00A1               	movwf	?___ftpack+1
 16221  13B1  3000               	movlw	0
 16222  13B2  00A2               	movwf	?___ftpack+2
 16223  13B3  0008               	return
 16224  13B4                     l5608:	
 16225  13B4  3001               	movlw	1
 16226  13B5  00A5               	movwf	??___ftpack
 16227  13B6  0825               	movf	??___ftpack,w
 16228  13B7  07A3               	addwf	___ftpack@exp,f
 16229  13B8  3001               	movlw	1
 16230  13B9                     u3725:	
 16231  13B9  36A2               	lsrf	___ftpack@arg+2,f
 16232  13BA  0CA1               	rrf	___ftpack@arg+1,f
 16233  13BB  0CA0               	rrf	___ftpack@arg,f
 16234  13BC  0B89               	decfsz	9,f
 16235  13BD  2BB9               	goto	u3725
 16236  13BE                     l5610:	
 16237  13BE  30FE               	movlw	254
 16238  13BF  0522               	andwf	___ftpack@arg+2,w
 16239  13C0  1903               	btfsc	3,2
 16240  13C1  2BD7               	goto	l3072
 16241  13C2  2BB4               	goto	l5608
 16242  13C3                     l5612:	
 16243  13C3  3001               	movlw	1
 16244  13C4  00A5               	movwf	??___ftpack
 16245  13C5  0825               	movf	??___ftpack,w
 16246  13C6  07A3               	addwf	___ftpack@exp,f
 16247  13C7  3001               	movlw	1
 16248  13C8  07A0               	addwf	___ftpack@arg,f
 16249  13C9  3000               	movlw	0
 16250  13CA  1803               	skipnc
 16251  13CB  3001               	movlw	1
 16252  13CC  07A1               	addwf	___ftpack@arg+1,f
 16253  13CD  3000               	movlw	0
 16254  13CE  1803               	skipnc
 16255  13CF  3001               	movlw	1
 16256  13D0  07A2               	addwf	___ftpack@arg+2,f
 16257  13D1  3001               	movlw	1
 16258  13D2                     u3745:	
 16259  13D2  36A2               	lsrf	___ftpack@arg+2,f
 16260  13D3  0CA1               	rrf	___ftpack@arg+1,f
 16261  13D4  0CA0               	rrf	___ftpack@arg,f
 16262  13D5  0B89               	decfsz	9,f
 16263  13D6  2BD2               	goto	u3745
 16264  13D7                     l3072:	
 16265  13D7  30FF               	movlw	255
 16266  13D8  0522               	andwf	___ftpack@arg+2,w
 16267  13D9  1903               	btfsc	3,2
 16268  13DA  2BE4               	goto	l5620
 16269  13DB  2BC3               	goto	l5612
 16270  13DC                     l5618:	
 16271  13DC  3001               	movlw	1
 16272  13DD  02A3               	subwf	___ftpack@exp,f
 16273  13DE  3001               	movlw	1
 16274  13DF                     u3765:	
 16275  13DF  35A0               	lslf	___ftpack@arg,f
 16276  13E0  0DA1               	rlf	___ftpack@arg+1,f
 16277  13E1  0DA2               	rlf	___ftpack@arg+2,f
 16278  13E2  0B89               	decfsz	9,f
 16279  13E3  2BDF               	goto	u3765
 16280  13E4                     l5620:	
 16281  13E4  1FA1               	btfss	___ftpack@arg+1,7
 16282  13E5  2BDC               	goto	l5618
 16283  13E6  1823               	btfsc	___ftpack@exp,0
 16284  13E7  2BEE               	goto	l3078
 16285  13E8  30FF               	movlw	255
 16286  13E9  05A0               	andwf	___ftpack@arg,f
 16287  13EA  307F               	movlw	127
 16288  13EB  05A1               	andwf	___ftpack@arg+1,f
 16289  13EC  30FF               	movlw	255
 16290  13ED  05A2               	andwf	___ftpack@arg+2,f
 16291  13EE                     l3078:	
 16292  13EE  1003               	clrc
 16293  13EF  0CA3               	rrf	___ftpack@exp,f
 16294  13F0  0823               	movf	___ftpack@exp,w
 16295  13F1  00A5               	movwf	??___ftpack
 16296  13F2  01A6               	clrf	??___ftpack+1
 16297  13F3  01A7               	clrf	??___ftpack+2
 16298  13F4  3010               	movlw	16
 16299  13F5                     u3795:	
 16300  13F5  35A5               	lslf	??___ftpack,f
 16301  13F6  0DA6               	rlf	??___ftpack+1,f
 16302  13F7  0DA7               	rlf	??___ftpack+2,f
 16303  13F8  0B89               	decfsz	9,f
 16304  13F9  2BF5               	goto	u3795
 16305  13FA  0825               	movf	??___ftpack,w
 16306  13FB  04A0               	iorwf	___ftpack@arg,f
 16307  13FC  0826               	movf	??___ftpack+1,w
 16308  13FD  04A1               	iorwf	___ftpack@arg+1,f
 16309  13FE  0827               	movf	??___ftpack+2,w
 16310  13FF  04A2               	iorwf	___ftpack@arg+2,f
 16311  1400  0824               	movf	___ftpack@sign,w
 16312  1401  1903               	btfsc	3,2
 16313  1402  0008               	return
 16314  1403  17A2               	bsf	___ftpack@arg+2,7
 16315  1404  0008               	return
 16316  1405                     __end_of___ftpack:	
 16317                           
 16318                           	psect	text99
 16319  18FC                     __ptext99:	
 16320 ;; *************** function _setRFSW_Status *****************
 16321 ;; Defined at:
 16322 ;;		line 380 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16323 ;; Parameters:    Size  Location     Type
 16324 ;;  sw              1    wreg     unsigned char 
 16325 ;;  command         1    2[BANK0 ] unsigned char 
 16326 ;; Auto vars:     Size  Location     Type
 16327 ;;  sw              1    3[BANK0 ] unsigned char 
 16328 ;; Return value:  Size  Location     Type
 16329 ;;		None               void
 16330 ;; Registers used:
 16331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16332 ;; Tracked objects:
 16333 ;;		On entry : 0/0
 16334 ;;		On exit  : 0/0
 16335 ;;		Unchanged: 0/0
 16336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;Total ram usage:        2 bytes
 16342 ;; Hardware stack levels used:    1
 16343 ;; Hardware stack levels required when called:    5
 16344 ;; This function calls:
 16345 ;;		_RfSWPointSelect
 16346 ;; This function is called by:
 16347 ;;		_DlyOff_Main
 16348 ;;		_setDimmerLights_ERROR
 16349 ;;		_setControl_Lights_Table
 16350 ;;		_Sw_DimmerOnFunc
 16351 ;;		_Sw_DimmerAdjFunc
 16352 ;; This function uses a non-reentrant model
 16353 ;;
 16354                           
 16355                           
 16356                           ;psect for function _setRFSW_Status
 16357  18FC                     _setRFSW_Status:	
 16358                           
 16359                           ;incstack = 0
 16360                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16361                           ;setRFSW_Status@sw stored from wreg
 16362  18FC  0020               	movlb	0	; select bank0
 16363  18FD  00A3               	movwf	setRFSW_Status@sw
 16364                           
 16365                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 16366  18FE  0823               	movf	setRFSW_Status@sw,w
 16367  18FF  319A  2249         	fcall	_RfSWPointSelect
 16368                           
 16369                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 16370  1901  0021               	movlb	1	; select bank1
 16371  1902  083E               	movf	_RFSW^(0+128),w
 16372  1903  0086               	movwf	6
 16373  1904  0187               	clrf	7
 16374  1905  0020               	movlb	0	; select bank0
 16375  1906  0822               	movf	setRFSW_Status@command,w
 16376  1907  1001               	bcf	1,0
 16377  1908  1D03               	skipz
 16378  1909  1401               	bsf	1,0
 16379  190A  0008               	return
 16380  190B                     __end_of_setRFSW_Status:	
 16381                           
 16382                           	psect	text100
 16383  1A49                     __ptext100:	
 16384 ;; *************** function _RfSWPointSelect *****************
 16385 ;; Defined at:
 16386 ;;		line 315 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;  sw              1    wreg     unsigned char 
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;  sw              1    1[BANK0 ] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;		None               void
 16393 ;; Registers used:
 16394 ;;		wreg
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;Total ram usage:        2 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    4
 16407 ;; This function calls:
 16408 ;;		Nothing
 16409 ;; This function is called by:
 16410 ;;		_setRFSW_Control
 16411 ;;		_setRFSW_AdjControl
 16412 ;;		_setRFSW_Status
 16413 ;; This function uses a non-reentrant model
 16414 ;;
 16415                           
 16416                           
 16417                           ;psect for function _RfSWPointSelect
 16418  1A49                     _RfSWPointSelect:	
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _RfSWPointSelect: [wreg]
 16422                           ;RfSWPointSelect@sw stored from wreg
 16423  1A49  0020               	movlb	0	; select bank0
 16424  1A4A  00A1               	movwf	RfSWPointSelect@sw
 16425                           
 16426                           ;RF_Control_B1.c: 317: if (sw == 1) {
 16427  1A4B  0821               	movf	RfSWPointSelect@sw,w
 16428  1A4C  3A01               	xorlw	1
 16429  1A4D  1D03               	skipz
 16430  1A4E  2A54               	goto	l2350
 16431                           
 16432                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 16433  1A4F  30E4               	movlw	_RFSW1& (0+255)
 16434  1A50  00A0               	movwf	??_RfSWPointSelect
 16435  1A51  0820               	movf	??_RfSWPointSelect,w
 16436  1A52  0021               	movlb	1	; select bank1
 16437  1A53  00BE               	movwf	_RFSW^(0+128)
 16438  1A54                     l2350:	
 16439                           
 16440                           ;RF_Control_B1.c: 319: }
 16441                           ;RF_Control_B1.c: 322: if (sw == 2) {
 16442  1A54  0020               	movlb	0	; select bank0
 16443  1A55  0821               	movf	RfSWPointSelect@sw,w
 16444  1A56  3A02               	xorlw	2
 16445  1A57  1D03               	skipz
 16446  1A58  0008               	return
 16447                           
 16448                           ;RF_Control_B1.c: 323: RFSW = &RFSW2;
 16449  1A59  30E5               	movlw	_RFSW2& (0+255)
 16450  1A5A  00A0               	movwf	??_RfSWPointSelect
 16451  1A5B  0820               	movf	??_RfSWPointSelect,w
 16452  1A5C  0021               	movlb	1	; select bank1
 16453  1A5D  00BE               	movwf	_RFSW^(0+128)
 16454  1A5E  0008               	return
 16455  1A5F                     __end_of_RfSWPointSelect:	
 16456                           
 16457                           	psect	text101
 16458  1958                     __ptext101:	
 16459 ;; *************** function _setDimmerLights_Trigger *****************
 16460 ;; Defined at:
 16461 ;;		line 445 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;  lights          1    wreg     unsigned char 
 16464 ;;  command         1    2[BANK0 ] unsigned char 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  lights          1    3[BANK0 ] unsigned char 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;		None               void
 16469 ;; Registers used:
 16470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16471 ;; Tracked objects:
 16472 ;;		On entry : 0/0
 16473 ;;		On exit  : 0/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16476 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;Total ram usage:        2 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; Hardware stack levels required when called:    5
 16483 ;; This function calls:
 16484 ;;		_DimmerLightsPointSelect
 16485 ;; This function is called by:
 16486 ;;		_DlyOff_Main
 16487 ;;		_setRFSW_Control
 16488 ;;		_Sw_DimmerOnFunc
 16489 ;;		_Sw_DimmerOffFunc
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           
 16494                           ;psect for function _setDimmerLights_Trigger
 16495  1958                     _setDimmerLights_Trigger:	
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16499                           ;setDimmerLights_Trigger@lights stored from wreg
 16500  1958  0020               	movlb	0	; select bank0
 16501  1959  00A3               	movwf	setDimmerLights_Trigger@lights
 16502                           
 16503                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 16504  195A  0823               	movf	setDimmerLights_Trigger@lights,w
 16505  195B  3199  21B9         	fcall	_DimmerLightsPointSelect
 16506                           
 16507                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 16508  195D  0877               	movf	_DimmerLights,w
 16509  195E  3E09               	addlw	9
 16510  195F  0086               	movwf	6
 16511  1960  3001               	movlw	1	; select bank2/3
 16512  1961  0087               	movwf	7
 16513  1962  0020               	movlb	0	; select bank0
 16514  1963  0822               	movf	setDimmerLights_Trigger@command,w
 16515  1964  1081               	bcf	1,1
 16516  1965  1D03               	skipz
 16517  1966  1481               	bsf	1,1
 16518  1967  0008               	return
 16519  1968                     __end_of_setDimmerLights_Trigger:	
 16520                           
 16521                           	psect	text102
 16522  1948                     __ptext102:	
 16523 ;; *************** function _setDimmerLights_Switch *****************
 16524 ;; Defined at:
 16525 ;;		line 435 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;  lights          1    wreg     unsigned char 
 16528 ;;  command         1    2[BANK0 ] unsigned char 
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;  lights          1    3[BANK0 ] unsigned char 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;		None               void
 16533 ;; Registers used:
 16534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16540 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;Total ram usage:        2 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    5
 16547 ;; This function calls:
 16548 ;;		_DimmerLightsPointSelect
 16549 ;; This function is called by:
 16550 ;;		_DlyOff_Main
 16551 ;;		_setRFSW_Control
 16552 ;;		_Sw_DimmerOnFunc
 16553 ;;		_Sw_DimmerOffFunc
 16554 ;; This function uses a non-reentrant model
 16555 ;;
 16556                           
 16557                           
 16558                           ;psect for function _setDimmerLights_Switch
 16559  1948                     _setDimmerLights_Switch:	
 16560                           
 16561                           ;incstack = 0
 16562                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16563                           ;setDimmerLights_Switch@lights stored from wreg
 16564  1948  0020               	movlb	0	; select bank0
 16565  1949  00A3               	movwf	setDimmerLights_Switch@lights
 16566                           
 16567                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 16568  194A  0823               	movf	setDimmerLights_Switch@lights,w
 16569  194B  3199  21B9         	fcall	_DimmerLightsPointSelect
 16570                           
 16571                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 16572  194D  0877               	movf	_DimmerLights,w
 16573  194E  3E09               	addlw	9
 16574  194F  0086               	movwf	6
 16575  1950  3001               	movlw	1	; select bank2/3
 16576  1951  0087               	movwf	7
 16577  1952  0020               	movlb	0	; select bank0
 16578  1953  0822               	movf	setDimmerLights_Switch@command,w
 16579  1954  1001               	bcf	1,0
 16580  1955  1D03               	skipz
 16581  1956  1401               	bsf	1,0
 16582  1957  0008               	return
 16583  1958                     __end_of_setDimmerLights_Switch:	
 16584                           
 16585                           	psect	text103
 16586  19B9                     __ptext103:	
 16587 ;; *************** function _DimmerLightsPointSelect *****************
 16588 ;; Defined at:
 16589 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  lights          1    wreg     unsigned char 
 16592 ;; Auto vars:     Size  Location     Type
 16593 ;;  lights          1    1[BANK0 ] unsigned char 
 16594 ;; Return value:  Size  Location     Type
 16595 ;;		None               void
 16596 ;; Registers used:
 16597 ;;		wreg
 16598 ;; Tracked objects:
 16599 ;;		On entry : 0/0
 16600 ;;		On exit  : 0/0
 16601 ;;		Unchanged: 0/0
 16602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;Total ram usage:        2 bytes
 16608 ;; Hardware stack levels used:    1
 16609 ;; Hardware stack levels required when called:    4
 16610 ;; This function calls:
 16611 ;;		Nothing
 16612 ;; This function is called by:
 16613 ;;		_setDimmerLights_Initialization
 16614 ;;		_setDimmerLights_Main
 16615 ;;		_setDimmerLights_ERROR
 16616 ;;		_setDimmerLights_TriggerERROR
 16617 ;;		_setDimmerLights
 16618 ;;		_setDimmerLights_Adj
 16619 ;;		_setDimmerLights_AdjRF
 16620 ;;		_setDimmerLights_Switch
 16621 ;;		_setDimmerLights_AdjGo
 16622 ;;		_setDimmerLights_Trigger
 16623 ;;		_setDimmerLights_TriggerAdj
 16624 ;;		_setDimmerLights_Clear
 16625 ;;		_setDimmerLights_GO
 16626 ;;		_setDimmerLights_MaxmumValue
 16627 ;; This function uses a non-reentrant model
 16628 ;;
 16629                           
 16630                           
 16631                           ;psect for function _DimmerLightsPointSelect
 16632  19B9                     _DimmerLightsPointSelect:	
 16633                           
 16634                           ;incstack = 0
 16635                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16636                           ;DimmerLightsPointSelect@lights stored from wreg
 16637  19B9  0020               	movlb	0	; select bank0
 16638  19BA  00A1               	movwf	DimmerLightsPointSelect@lights
 16639                           
 16640                           ;Dimmer_B1.c: 10: if(lights == 1)
 16641  19BB  0821               	movf	DimmerLightsPointSelect@lights,w
 16642  19BC  3A01               	xorlw	1
 16643  19BD  1D03               	skipz
 16644  19BE  29C3               	goto	l786
 16645                           
 16646                           ;Dimmer_B1.c: 11: {
 16647                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 16648  19BF  3020               	movlw	_DimmerLights1& (0+255)
 16649  19C0  00A0               	movwf	??_DimmerLightsPointSelect
 16650  19C1  0820               	movf	??_DimmerLightsPointSelect,w
 16651  19C2  00F7               	movwf	_DimmerLights
 16652  19C3                     l786:	
 16653                           
 16654                           ;Dimmer_B1.c: 13: }
 16655                           ;Dimmer_B1.c: 20: if(lights == 2)
 16656  19C3  0821               	movf	DimmerLightsPointSelect@lights,w
 16657  19C4  3A02               	xorlw	2
 16658  19C5  1D03               	skipz
 16659  19C6  0008               	return
 16660                           
 16661                           ;Dimmer_B1.c: 21: {
 16662                           ;Dimmer_B1.c: 22: DimmerLights=&DimmerLights2;
 16663  19C7  302F               	movlw	_DimmerLights2& (0+255)
 16664  19C8  00A0               	movwf	??_DimmerLightsPointSelect
 16665  19C9  0820               	movf	??_DimmerLightsPointSelect,w
 16666  19CA  00F7               	movwf	_DimmerLights
 16667  19CB  0008               	return
 16668  19CC                     __end_of_DimmerLightsPointSelect:	
 16669                           
 16670                           	psect	text104
 16671  0817                     __ptext104:	
 16672 ;; *************** function _setBuz *****************
 16673 ;; Defined at:
 16674 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;  count           1    wreg     unsigned char 
 16677 ;;  time            2    6[BANK0 ] int 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  count           1    9[BANK0 ] unsigned char 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;		None               void
 16682 ;; Registers used:
 16683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;Total ram usage:        4 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    5
 16696 ;; This function calls:
 16697 ;;		___wmul
 16698 ;; This function is called by:
 16699 ;;		_DlyOff_Main
 16700 ;;		_setDimmerLights_Main
 16701 ;;		_DimmerLights_Exceptions
 16702 ;;		_my_Main
 16703 ;;		_setLog_Code
 16704 ;;		_setControl_Lights_Table
 16705 ;;		_setRFSW_Control
 16706 ;;		_setSw_Main
 16707 ;;		_Sw_DimmerOnFunc
 16708 ;; This function uses a non-reentrant model
 16709 ;;
 16710                           
 16711                           
 16712                           ;psect for function _setBuz
 16713  0817                     _setBuz:	
 16714                           
 16715                           ;incstack = 0
 16716                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16717                           ;setBuz@count stored from wreg
 16718  0817  0020               	movlb	0	; select bank0
 16719  0818  00A9               	movwf	setBuz@count
 16720                           
 16721                           ;Buzzer_B1.c: 24: time *= 20;
 16722  0819  3014               	movlw	20
 16723  081A  00A0               	movwf	___wmul@multiplier
 16724  081B  3000               	movlw	0
 16725  081C  00A1               	movwf	___wmul@multiplier+1
 16726  081D  0827               	movf	setBuz@time+1,w
 16727  081E  01A3               	clrf	___wmul@multiplicand+1
 16728  081F  07A3               	addwf	___wmul@multiplicand+1,f
 16729  0820  0826               	movf	setBuz@time,w
 16730  0821  01A2               	clrf	___wmul@multiplicand
 16731  0822  07A2               	addwf	___wmul@multiplicand,f
 16732  0823  319B  23AD  3188   	fcall	___wmul
 16733  0826  0020               	movlb	0	; select bank0
 16734  0827  0821               	movf	?___wmul+1,w
 16735  0828  01A7               	clrf	setBuz@time+1
 16736  0829  07A7               	addwf	setBuz@time+1,f
 16737  082A  0820               	movf	?___wmul,w
 16738  082B  01A6               	clrf	setBuz@time
 16739  082C  07A6               	addwf	setBuz@time,f
 16740                           
 16741                           ;Buzzer_B1.c: 25: if (Buz->Enable) {
 16742  082D  0021               	movlb	1	; select bank1
 16743  082E  0837               	movf	_Buz^(0+128),w
 16744  082F  0086               	movwf	6
 16745  0830  3001               	movlw	1	; select bank2/3
 16746  0831  0087               	movwf	7
 16747  0832  1C01               	btfss	1,0
 16748  0833  0008               	return
 16749                           
 16750                           ;Buzzer_B1.c: 26: if (!Buz->GO) {
 16751  0834  0837               	movf	_Buz^(0+128),w
 16752  0835  0086               	movwf	6
 16753  0836  3001               	movlw	1	; select bank2/3
 16754  0837  0087               	movwf	7
 16755  0838  1881               	btfsc	1,1
 16756  0839  2858               	goto	l7922
 16757                           
 16758                           ;Buzzer_B1.c: 27: Buz->GO = 1;
 16759  083A  0837               	movf	_Buz^(0+128),w
 16760  083B  0086               	movwf	6
 16761  083C  3001               	movlw	1	; select bank2/3
 16762  083D  0087               	movwf	7
 16763  083E  1481               	bsf	1,1
 16764                           
 16765                           ;Buzzer_B1.c: 28: Buz->Count = count;
 16766  083F  0020               	movlb	0	; select bank0
 16767  0840  0829               	movf	setBuz@count,w
 16768  0841  00A8               	movwf	??_setBuz
 16769  0842  0021               	movlb	1	; select bank1
 16770  0843  0837               	movf	_Buz^(0+128),w
 16771  0844  3E03               	addlw	3
 16772  0845  0086               	movwf	6
 16773  0846  3001               	movlw	1	; select bank2/3
 16774  0847  0087               	movwf	7
 16775  0848  0020               	movlb	0	; select bank0
 16776  0849  0828               	movf	??_setBuz,w
 16777  084A  0081               	movwf	1
 16778                           
 16779                           ;Buzzer_B1.c: 29: Buz->TimeValue = time;
 16780  084B  0021               	movlb	1	; select bank1
 16781  084C  0837               	movf	_Buz^(0+128),w
 16782  084D  3E06               	addlw	6
 16783  084E  0086               	movwf	6
 16784  084F  3001               	movlw	1	; select bank2/3
 16785  0850  0087               	movwf	7
 16786  0851  0020               	movlb	0	; select bank0
 16787  0852  0826               	movf	setBuz@time,w
 16788  0853  3FC0               	movwi [0]fsr1
 16789  0854  0827               	movf	setBuz@time+1,w
 16790  0855  3FC1               	movwi [1]fsr1
 16791                           
 16792                           ;Buzzer_B1.c: 31: RB3 = 1;
 16793  0856  158D               	bsf	13,3	;volatile
 16794                           
 16795                           ;Buzzer_B1.c: 32: } else {
 16796  0857  0008               	return
 16797  0858                     l7922:	
 16798                           
 16799                           ;Buzzer_B1.c: 33: if (!Buz->BufferStatus1) {
 16800  0858  0021               	movlb	1	; select bank1
 16801  0859  0837               	movf	_Buz^(0+128),w
 16802  085A  0086               	movwf	6
 16803  085B  3001               	movlw	1	; select bank2/3
 16804  085C  0087               	movwf	7
 16805  085D  1981               	btfsc	1,3
 16806  085E  287C               	goto	l7926
 16807                           
 16808                           ;Buzzer_B1.c: 34: Buz->BufferStatus1 = 1;
 16809  085F  0837               	movf	_Buz^(0+128),w
 16810  0860  0086               	movwf	6
 16811  0861  3001               	movlw	1	; select bank2/3
 16812  0862  0087               	movwf	7
 16813  0863  1581               	bsf	1,3
 16814                           
 16815                           ;Buzzer_B1.c: 35: Buz->CountBuffer1 = count;
 16816  0864  0020               	movlb	0	; select bank0
 16817  0865  0829               	movf	setBuz@count,w
 16818  0866  00A8               	movwf	??_setBuz
 16819  0867  0021               	movlb	1	; select bank1
 16820  0868  0837               	movf	_Buz^(0+128),w
 16821  0869  3E04               	addlw	4
 16822  086A  0086               	movwf	6
 16823  086B  3001               	movlw	1	; select bank2/3
 16824  086C  0087               	movwf	7
 16825  086D  0020               	movlb	0	; select bank0
 16826  086E  0828               	movf	??_setBuz,w
 16827  086F  0081               	movwf	1
 16828                           
 16829                           ;Buzzer_B1.c: 36: Buz->TimeValueBuffer1 = time;
 16830  0870  0021               	movlb	1	; select bank1
 16831  0871  0837               	movf	_Buz^(0+128),w
 16832  0872  3E08               	addlw	8
 16833  0873  0086               	movwf	6
 16834  0874  3001               	movlw	1	; select bank2/3
 16835  0875  0087               	movwf	7
 16836  0876  0020               	movlb	0	; select bank0
 16837  0877  0826               	movf	setBuz@time,w
 16838  0878  3FC0               	movwi [0]fsr1
 16839  0879  0827               	movf	setBuz@time+1,w
 16840  087A  3FC1               	movwi [1]fsr1
 16841                           
 16842                           ;Buzzer_B1.c: 37: } else if (!Buz->BufferStatus2) {
 16843  087B  0008               	return
 16844  087C                     l7926:	
 16845  087C  0021               	movlb	1	; select bank1
 16846  087D  0837               	movf	_Buz^(0+128),w
 16847  087E  0086               	movwf	6
 16848  087F  3001               	movlw	1	; select bank2/3
 16849  0880  0087               	movwf	7
 16850  0881  1A01               	btfsc	1,4
 16851  0882  0008               	return
 16852                           
 16853                           ;Buzzer_B1.c: 38: Buz->BufferStatus2 = 1;
 16854  0883  0837               	movf	_Buz^(0+128),w
 16855  0884  0086               	movwf	6
 16856  0885  3001               	movlw	1	; select bank2/3
 16857  0886  0087               	movwf	7
 16858  0887  1601               	bsf	1,4
 16859                           
 16860                           ;Buzzer_B1.c: 39: Buz->CountBuffer2 = count;
 16861  0888  0020               	movlb	0	; select bank0
 16862  0889  0829               	movf	setBuz@count,w
 16863  088A  00A8               	movwf	??_setBuz
 16864  088B  0021               	movlb	1	; select bank1
 16865  088C  0837               	movf	_Buz^(0+128),w
 16866  088D  3E05               	addlw	5
 16867  088E  0086               	movwf	6
 16868  088F  3001               	movlw	1	; select bank2/3
 16869  0890  0087               	movwf	7
 16870  0891  0020               	movlb	0	; select bank0
 16871  0892  0828               	movf	??_setBuz,w
 16872  0893  0081               	movwf	1
 16873                           
 16874                           ;Buzzer_B1.c: 40: Buz->TimeValueBuffer2 = time;
 16875  0894  0021               	movlb	1	; select bank1
 16876  0895  0837               	movf	_Buz^(0+128),w
 16877  0896  3E0A               	addlw	10
 16878  0897  0086               	movwf	6
 16879  0898  3001               	movlw	1	; select bank2/3
 16880  0899  0087               	movwf	7
 16881  089A  0020               	movlb	0	; select bank0
 16882  089B  0826               	movf	setBuz@time,w
 16883  089C  3FC0               	movwi [0]fsr1
 16884  089D  0827               	movf	setBuz@time+1,w
 16885  089E  3FC1               	movwi [1]fsr1
 16886  089F  0008               	return
 16887  08A0                     __end_of_setBuz:	
 16888                           
 16889                           	psect	text105
 16890  1BAD                     __ptext105:	
 16891 ;; *************** function ___wmul *****************
 16892 ;; Defined at:
 16893 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 16894 ;; Parameters:    Size  Location     Type
 16895 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16896 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16897 ;; Auto vars:     Size  Location     Type
 16898 ;;  product         2    4[BANK0 ] unsigned int 
 16899 ;; Return value:  Size  Location     Type
 16900 ;;                  2    0[BANK0 ] unsigned int 
 16901 ;; Registers used:
 16902 ;;		wreg, status,2, status,0
 16903 ;; Tracked objects:
 16904 ;;		On entry : 0/0
 16905 ;;		On exit  : 0/0
 16906 ;;		Unchanged: 0/0
 16907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16908 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;Total ram usage:        6 bytes
 16913 ;; Hardware stack levels used:    1
 16914 ;; Hardware stack levels required when called:    4
 16915 ;; This function calls:
 16916 ;;		Nothing
 16917 ;; This function is called by:
 16918 ;;		_setBuz
 16919 ;;		_Load_Main
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           
 16924                           ;psect for function ___wmul
 16925  1BAD                     ___wmul:	
 16926                           
 16927                           ;incstack = 0
 16928                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16929  1BAD  0020               	movlb	0	; select bank0
 16930  1BAE  01A4               	clrf	___wmul@product
 16931  1BAF  01A5               	clrf	___wmul@product+1
 16932  1BB0                     l7902:	
 16933  1BB0  1C20               	btfss	___wmul@multiplier,0
 16934  1BB1  2BB6               	goto	l2911
 16935  1BB2  0822               	movf	___wmul@multiplicand,w
 16936  1BB3  07A4               	addwf	___wmul@product,f
 16937  1BB4  0823               	movf	___wmul@multiplicand+1,w
 16938  1BB5  3DA5               	addwfc	___wmul@product+1,f
 16939  1BB6                     l2911:	
 16940  1BB6  3001               	movlw	1
 16941  1BB7                     u7405:	
 16942  1BB7  35A2               	lslf	___wmul@multiplicand,f
 16943  1BB8  0DA3               	rlf	___wmul@multiplicand+1,f
 16944  1BB9  0B89               	decfsz	9,f
 16945  1BBA  2BB7               	goto	u7405
 16946  1BBB  3001               	movlw	1
 16947  1BBC                     u7415:	
 16948  1BBC  36A1               	lsrf	___wmul@multiplier+1,f
 16949  1BBD  0CA0               	rrf	___wmul@multiplier,f
 16950  1BBE  0B89               	decfsz	9,f
 16951  1BBF  2BBC               	goto	u7415
 16952  1BC0  0821               	movf	___wmul@multiplier+1,w
 16953  1BC1  0420               	iorwf	___wmul@multiplier,w
 16954  1BC2  1D03               	skipz
 16955  1BC3  2BB0               	goto	l7902
 16956  1BC4  0825               	movf	___wmul@product+1,w
 16957  1BC5  01A1               	clrf	?___wmul+1
 16958  1BC6  07A1               	addwf	?___wmul+1,f
 16959  1BC7  0824               	movf	___wmul@product,w
 16960  1BC8  01A0               	clrf	?___wmul
 16961  1BC9  07A0               	addwf	?___wmul,f
 16962  1BCA  0008               	return
 16963  1BCB                     __end_of___wmul:	
 16964                           
 16965                           	psect	text106
 16966  27A2                     __ptext106:	
 16967 ;; *************** function _DelayOff_Initialization *****************
 16968 ;; Defined at:
 16969 ;;		line 26 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;		None
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;		None
 16974 ;; Return value:  Size  Location     Type
 16975 ;;		None               void
 16976 ;; Registers used:
 16977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;Total ram usage:        0 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; Hardware stack levels required when called:    6
 16990 ;; This function calls:
 16991 ;;		_DlyOff_Initialization
 16992 ;; This function is called by:
 16993 ;;		_main
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           
 16998                           ;psect for function _DelayOff_Initialization
 16999  27A2                     _DelayOff_Initialization:	
 17000                           
 17001                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17002                           
 17003                           ;incstack = 0
 17004                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17005  27A2  3001               	movlw	1
 17006  27A3  31A7  27DF  31A7   	fcall	_DlyOff_Initialization
 17007                           
 17008                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17009  27A6  3002               	movlw	2
 17010  27A7  31A7  27DF         	fcall	_DlyOff_Initialization
 17011  27A9  0008               	return
 17012  27AA                     __end_of_DelayOff_Initialization:	
 17013                           
 17014                           	psect	text107
 17015  27DF                     __ptext107:	
 17016 ;; *************** function _DlyOff_Initialization *****************
 17017 ;; Defined at:
 17018 ;;		line 56 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 17019 ;; Parameters:    Size  Location     Type
 17020 ;;  sw              1    wreg     unsigned char 
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;  sw              1    2[BANK0 ] unsigned char 
 17023 ;; Return value:  Size  Location     Type
 17024 ;;		None               void
 17025 ;; Registers used:
 17026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17027 ;; Tracked objects:
 17028 ;;		On entry : 0/0
 17029 ;;		On exit  : 0/0
 17030 ;;		Unchanged: 0/0
 17031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;Total ram usage:        1 bytes
 17037 ;; Hardware stack levels used:    1
 17038 ;; Hardware stack levels required when called:    5
 17039 ;; This function calls:
 17040 ;;		_DelayOffPointSelect
 17041 ;; This function is called by:
 17042 ;;		_DelayOff_Initialization
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _DlyOff_Initialization
 17048  27DF                     _DlyOff_Initialization:	
 17049                           
 17050                           ;incstack = 0
 17051                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17052                           ;DlyOff_Initialization@sw stored from wreg
 17053  27DF  0020               	movlb	0	; select bank0
 17054  27E0  00A2               	movwf	DlyOff_Initialization@sw
 17055                           
 17056                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17057  27E1  0822               	movf	DlyOff_Initialization@sw,w
 17058  27E2  3188  2000         	fcall	_DelayOffPointSelect
 17059                           
 17060                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17061  27E4  0021               	movlb	1	; select bank1
 17062  27E5  0839               	movf	_DelayOff^(0+128),w
 17063  27E6  0086               	movwf	6
 17064  27E7  0187               	clrf	7
 17065  27E8  1401               	bsf	1,0
 17066  27E9  0008               	return
 17067  27EA                     __end_of_DlyOff_Initialization:	
 17068                           
 17069                           	psect	text108
 17070  0800                     __ptext108:	
 17071 ;; *************** function _DelayOffPointSelect *****************
 17072 ;; Defined at:
 17073 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 17074 ;; Parameters:    Size  Location     Type
 17075 ;;  sw              1    wreg     unsigned char 
 17076 ;; Auto vars:     Size  Location     Type
 17077 ;;  sw              1    1[BANK0 ] unsigned char 
 17078 ;; Return value:  Size  Location     Type
 17079 ;;		None               void
 17080 ;; Registers used:
 17081 ;;		wreg
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;Total ram usage:        2 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; Hardware stack levels required when called:    4
 17094 ;; This function calls:
 17095 ;;		Nothing
 17096 ;; This function is called by:
 17097 ;;		_DlyOff_Initialization
 17098 ;;		_DlyOff_Main
 17099 ;;		_setDelayOff_GO
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           
 17104                           ;psect for function _DelayOffPointSelect
 17105  0800                     _DelayOffPointSelect:	
 17106                           
 17107                           ;incstack = 0
 17108                           ; Regs used in _DelayOffPointSelect: [wreg]
 17109                           ;DelayOffPointSelect@sw stored from wreg
 17110  0800  0020               	movlb	0	; select bank0
 17111  0801  00A1               	movwf	DelayOffPointSelect@sw
 17112                           
 17113                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17114  0802  0821               	movf	DelayOffPointSelect@sw,w
 17115  0803  3A01               	xorlw	1
 17116  0804  1D03               	skipz
 17117  0805  280C               	goto	l5868
 17118                           
 17119                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17120  0806  30C6               	movlw	_DlySw1& (0+255)
 17121  0807  00A0               	movwf	??_DelayOffPointSelect
 17122  0808  0820               	movf	??_DelayOffPointSelect,w
 17123  0809  0021               	movlb	1	; select bank1
 17124  080A  00B9               	movwf	_DelayOff^(0+128)
 17125                           
 17126                           ;DelayOff_B1.c: 11: }
 17127  080B  0008               	return
 17128  080C                     l5868:	
 17129                           
 17130                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17131  080C  0020               	movlb	0	; select bank0
 17132  080D  0821               	movf	DelayOffPointSelect@sw,w
 17133  080E  3A02               	xorlw	2
 17134  080F  1D03               	skipz
 17135  0810  0008               	return
 17136                           
 17137                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17138  0811  30CB               	movlw	_DlySw2& (0+255)
 17139  0812  00A0               	movwf	??_DelayOffPointSelect
 17140  0813  0820               	movf	??_DelayOffPointSelect,w
 17141  0814  0021               	movlb	1	; select bank1
 17142  0815  00B9               	movwf	_DelayOff^(0+128)
 17143  0816  0008               	return
 17144  0817                     __end_of_DelayOffPointSelect:	
 17145                           
 17146                           	psect	text109
 17147  19F4                     __ptext109:	
 17148 ;; *************** function _CC2500_PowerOnInitial *****************
 17149 ;; Defined at:
 17150 ;;		line 97 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;		None
 17153 ;; Auto vars:     Size  Location     Type
 17154 ;;		None
 17155 ;; Return value:  Size  Location     Type
 17156 ;;		None               void
 17157 ;; Registers used:
 17158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17159 ;; Tracked objects:
 17160 ;;		On entry : 0/0
 17161 ;;		On exit  : 0/0
 17162 ;;		Unchanged: 0/0
 17163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;Total ram usage:        0 bytes
 17169 ;; Hardware stack levels used:    1
 17170 ;; Hardware stack levels required when called:    7
 17171 ;; This function calls:
 17172 ;;		_CC2500_ClearRXFIFO
 17173 ;;		_CC2500_ClearTXFIFO
 17174 ;;		_CC2500_FrequencyCabr
 17175 ;;		_CC2500_InitPATable
 17176 ;;		_CC2500_InitSetREG
 17177 ;;		_CC2500_PowerRST
 17178 ;;		_CC2500_SIDLEMode
 17179 ;; This function is called by:
 17180 ;;		_main
 17181 ;; This function uses a non-reentrant model
 17182 ;;
 17183                           
 17184                           
 17185                           ;psect for function _CC2500_PowerOnInitial
 17186  19F4                     _CC2500_PowerOnInitial:	
 17187                           
 17188                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 17189                           
 17190                           ;incstack = 0
 17191                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17192  19F4  319D  25C8  3199   	fcall	_CC2500_PowerRST
 17193                           
 17194                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 17195  19F7  319C  24BE  3199   	fcall	_CC2500_InitSetREG
 17196                           
 17197                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 17198  19FA  319B  23CB  3199   	fcall	_CC2500_InitPATable
 17199                           
 17200                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 17201  19FD  31A7  2762  3199   	fcall	_CC2500_ClearTXFIFO
 17202                           
 17203                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 17204  1A00  31A7  275E  3199   	fcall	_CC2500_ClearRXFIFO
 17205                           
 17206                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 17207  1A03  3198  207F  3199   	fcall	_CC2500_FrequencyCabr
 17208                           
 17209                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 17210  1A06  31A7  2766         	fcall	_CC2500_SIDLEMode
 17211  1A08  0008               	return
 17212  1A09                     __end_of_CC2500_PowerOnInitial:	
 17213                           
 17214                           	psect	text110
 17215  2766                     __ptext110:	
 17216 ;; *************** function _CC2500_SIDLEMode *****************
 17217 ;; Defined at:
 17218 ;;		line 181 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;		None
 17221 ;; Auto vars:     Size  Location     Type
 17222 ;;		None
 17223 ;; Return value:  Size  Location     Type
 17224 ;;		None               void
 17225 ;; Registers used:
 17226 ;;		wreg, status,2, status,0, pclath, cstack
 17227 ;; Tracked objects:
 17228 ;;		On entry : 0/0
 17229 ;;		On exit  : 0/0
 17230 ;;		Unchanged: 0/0
 17231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;Total ram usage:        0 bytes
 17237 ;; Hardware stack levels used:    1
 17238 ;; Hardware stack levels required when called:    6
 17239 ;; This function calls:
 17240 ;;		_CC2500_WriteCommand
 17241 ;; This function is called by:
 17242 ;;		_CC2500_PowerOnInitial
 17243 ;; This function uses a non-reentrant model
 17244 ;;
 17245                           
 17246                           
 17247                           ;psect for function _CC2500_SIDLEMode
 17248  2766                     _CC2500_SIDLEMode:	
 17249                           
 17250                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 17254  2766  3036               	movlw	54
 17255  2767  3199  2138         	fcall	_CC2500_WriteCommand
 17256  2769  0008               	return
 17257  276A                     __end_of_CC2500_SIDLEMode:	
 17258                           
 17259                           	psect	text111
 17260  1DC8                     __ptext111:	
 17261 ;; *************** function _CC2500_PowerRST *****************
 17262 ;; Defined at:
 17263 ;;		line 110 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17264 ;; Parameters:    Size  Location     Type
 17265 ;;		None
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;		None
 17268 ;; Return value:  Size  Location     Type
 17269 ;;		None               void
 17270 ;; Registers used:
 17271 ;;		wreg, status,2, status,0, pclath, cstack
 17272 ;; Tracked objects:
 17273 ;;		On entry : 0/0
 17274 ;;		On exit  : 0/0
 17275 ;;		Unchanged: 0/0
 17276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17281 ;;Total ram usage:        1 bytes
 17282 ;; Hardware stack levels used:    1
 17283 ;; Hardware stack levels required when called:    5
 17284 ;; This function calls:
 17285 ;;		_CC2500_WriteByte
 17286 ;;		_DelayTime_1us
 17287 ;; This function is called by:
 17288 ;;		_CC2500_PowerOnInitial
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           
 17293                           ;psect for function _CC2500_PowerRST
 17294  1DC8                     _CC2500_PowerRST:	
 17295                           
 17296                           ;CC2500_B1.c: 111: RC1 = 0;
 17297                           
 17298                           ;incstack = 0
 17299                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 17300  1DC8  0020               	movlb	0	; select bank0
 17301  1DC9  108E               	bcf	14,1	;volatile
 17302                           
 17303                           ;CC2500_B1.c: 112: RC0 = 0;
 17304  1DCA  100E               	bcf	14,0	;volatile
 17305                           
 17306                           ;CC2500_B1.c: 113: RC4 = 1;
 17307  1DCB  160E               	bsf	14,4	;volatile
 17308                           
 17309                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 17310  1DCC  300A               	movlw	10
 17311  1DCD  00A0               	movwf	DelayTime_1us@count
 17312  1DCE  3000               	movlw	0
 17313  1DCF  00A1               	movwf	DelayTime_1us@count+1
 17314  1DD0  319C  2470  319D   	fcall	_DelayTime_1us
 17315                           
 17316                           ;CC2500_B1.c: 115: RC4 = 0;
 17317  1DD3  0020               	movlb	0	; select bank0
 17318  1DD4  120E               	bcf	14,4	;volatile
 17319                           
 17320                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 17321  1DD5  300A               	movlw	10
 17322  1DD6  00A0               	movwf	DelayTime_1us@count
 17323  1DD7  3000               	movlw	0
 17324  1DD8  00A1               	movwf	DelayTime_1us@count+1
 17325  1DD9  319C  2470  319D   	fcall	_DelayTime_1us
 17326                           
 17327                           ;CC2500_B1.c: 117: RC4 = 1;
 17328  1DDC  0020               	movlb	0	; select bank0
 17329  1DDD  160E               	bsf	14,4	;volatile
 17330                           
 17331                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 17332  1DDE  3028               	movlw	40
 17333  1DDF  00A0               	movwf	DelayTime_1us@count
 17334  1DE0  3000               	movlw	0
 17335  1DE1  00A1               	movwf	DelayTime_1us@count+1
 17336  1DE2  319C  2470  319D   	fcall	_DelayTime_1us
 17337                           
 17338                           ;CC2500_B1.c: 119: RC4 = 0;
 17339  1DE5  0020               	movlb	0	; select bank0
 17340  1DE6  120E               	bcf	14,4	;volatile
 17341                           
 17342                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 17343  1DE7  3030               	movlw	48
 17344  1DE8  00A6               	movwf	??_CC2500_PowerRST
 17345  1DE9  0826               	movf	??_CC2500_PowerRST,w
 17346  1DEA  0021               	movlb	1	; select bank1
 17347  1DEB  00C1               	movwf	_SPI0Buffer^(0+128)
 17348  1DEC                     l308:	
 17349                           ;CC2500_B1.c: 121: while (RC2 == 1);
 17350                           
 17351  1DEC  0020               	movlb	0	; select bank0
 17352  1DED  190E               	btfsc	14,2	;volatile
 17353  1DEE  2DEC               	goto	l308
 17354                           
 17355                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 17356  1DEF  319A  22A3  319D   	fcall	_CC2500_WriteByte
 17357  1DF2                     l311:	
 17358                           ;CC2500_B1.c: 123: while (RC2 == 1);
 17359                           
 17360  1DF2  0020               	movlb	0	; select bank0
 17361  1DF3  190E               	btfsc	14,2	;volatile
 17362  1DF4  2DF2               	goto	l311
 17363                           
 17364                           ;CC2500_B1.c: 124: RC0 = 0;
 17365  1DF5  100E               	bcf	14,0	;volatile
 17366                           
 17367                           ;CC2500_B1.c: 125: RC4 = 1;
 17368  1DF6  160E               	bsf	14,4	;volatile
 17369  1DF7  0008               	return
 17370  1DF8                     __end_of_CC2500_PowerRST:	
 17371                           
 17372                           	psect	text112
 17373  1CBE                     __ptext112:	
 17374 ;; *************** function _CC2500_InitSetREG *****************
 17375 ;; Defined at:
 17376 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17377 ;; Parameters:    Size  Location     Type
 17378 ;;		None
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17381 ;;  temp2           1    7[BANK0 ] unsigned char 
 17382 ;;  temp1           1    6[BANK0 ] unsigned char 
 17383 ;; Return value:  Size  Location     Type
 17384 ;;		None               void
 17385 ;; Registers used:
 17386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17387 ;; Tracked objects:
 17388 ;;		On entry : 0/0
 17389 ;;		On exit  : 0/0
 17390 ;;		Unchanged: 0/0
 17391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17396 ;;Total ram usage:        4 bytes
 17397 ;; Hardware stack levels used:    1
 17398 ;; Hardware stack levels required when called:    6
 17399 ;; This function calls:
 17400 ;;		_CC2500_WriteREG
 17401 ;; This function is called by:
 17402 ;;		_CC2500_PowerOnInitial
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406                           
 17407                           ;psect for function _CC2500_InitSetREG
 17408  1CBE                     _CC2500_InitSetREG:	
 17409                           
 17410                           ;CC2500_B1.c: 132: unsigned char loop_c;
 17411                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 17412                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 17413                           
 17414                           ;incstack = 0
 17415                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17416  1CBE  0020               	movlb	0	; select bank0
 17417  1CBF  01A8               	clrf	CC2500_InitSetREG@loop_c
 17418  1CC0                     L16:	
 17419  1CC0  302F               	movlw	47
 17420  1CC1  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17421  1CC2  1803               	btfsc	3,0
 17422  1CC3  0008               	return
 17423                           
 17424                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 17425  1CC4  0828               	movf	CC2500_InitSetREG@loop_c,w
 17426  1CC5  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17427  1CC6  0084               	movwf	4
 17428  1CC7  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 17429  1CC8  1803               	skipnc
 17430  1CC9  3E01               	addlw	1
 17431  1CCA  0085               	movwf	5
 17432  1CCB  0800               	movf	0,w	;code access
 17433  1CCC  00A5               	movwf	??_CC2500_InitSetREG
 17434  1CCD  0825               	movf	??_CC2500_InitSetREG,w
 17435  1CCE  00A6               	movwf	CC2500_InitSetREG@temp1
 17436                           
 17437                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 17438  1CCF  0828               	movf	CC2500_InitSetREG@loop_c,w
 17439  1CD0  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17440  1CD1  0084               	movwf	4
 17441  1CD2  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 17442  1CD3  1803               	skipnc
 17443  1CD4  3E01               	addlw	1
 17444  1CD5  0085               	movwf	5
 17445  1CD6  0800               	movf	0,w	;code access
 17446  1CD7  00A5               	movwf	??_CC2500_InitSetREG
 17447  1CD8  0825               	movf	??_CC2500_InitSetREG,w
 17448  1CD9  00A7               	movwf	CC2500_InitSetREG@temp2
 17449                           
 17450                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 17451  1CDA  0827               	movf	CC2500_InitSetREG@temp2,w
 17452  1CDB  00A5               	movwf	??_CC2500_InitSetREG
 17453  1CDC  0825               	movf	??_CC2500_InitSetREG,w
 17454  1CDD  00A2               	movwf	CC2500_WriteREG@value
 17455  1CDE  0826               	movf	CC2500_InitSetREG@temp1,w
 17456  1CDF  319A  22BC  319C   	fcall	_CC2500_WriteREG
 17457  1CE2  3001               	movlw	1
 17458  1CE3  0020               	movlb	0	; select bank0
 17459  1CE4  00A5               	movwf	??_CC2500_InitSetREG
 17460  1CE5  0825               	movf	??_CC2500_InitSetREG,w
 17461  1CE6  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17462  1CE7  2CC0               	goto	L16
 17463  1CE8                     __end_of_CC2500_InitSetREG:	
 17464                           
 17465                           	psect	text113
 17466  1BCB                     __ptext113:	
 17467 ;; *************** function _CC2500_InitPATable *****************
 17468 ;; Defined at:
 17469 ;;		line 146 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;		None
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17474 ;;  temp            1    6[BANK0 ] unsigned char 
 17475 ;; Return value:  Size  Location     Type
 17476 ;;		None               void
 17477 ;; Registers used:
 17478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;Total ram usage:        3 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; Hardware stack levels required when called:    6
 17491 ;; This function calls:
 17492 ;;		_CC2500_WriteREG
 17493 ;; This function is called by:
 17494 ;;		_CC2500_PowerOnInitial
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           
 17499                           ;psect for function _CC2500_InitPATable
 17500  1BCB                     _CC2500_InitPATable:	
 17501                           
 17502                           ;CC2500_B1.c: 147: unsigned char loop_d;
 17503                           ;CC2500_B1.c: 148: unsigned char temp;
 17504                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 17505                           
 17506                           ;incstack = 0
 17507                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17508  1BCB  0020               	movlb	0	; select bank0
 17509  1BCC  01A7               	clrf	CC2500_InitPATable@loop_d
 17510  1BCD                     L17:	
 17511  1BCD  3008               	movlw	8
 17512  1BCE  0227               	subwf	CC2500_InitPATable@loop_d,w
 17513  1BCF  1803               	btfsc	3,0
 17514  1BD0  0008               	return
 17515                           
 17516                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 17517  1BD1  0827               	movf	CC2500_InitPATable@loop_d,w
 17518  1BD2  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17519  1BD3  0084               	movwf	4
 17520  1BD4  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17521  1BD5  1803               	skipnc
 17522  1BD6  3E01               	addlw	1
 17523  1BD7  0085               	movwf	5
 17524  1BD8  0800               	movf	0,w	;code access
 17525  1BD9  00A5               	movwf	??_CC2500_InitPATable
 17526  1BDA  0825               	movf	??_CC2500_InitPATable,w
 17527  1BDB  00A6               	movwf	CC2500_InitPATable@temp
 17528                           
 17529                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 17530  1BDC  0826               	movf	CC2500_InitPATable@temp,w
 17531  1BDD  00A5               	movwf	??_CC2500_InitPATable
 17532  1BDE  0825               	movf	??_CC2500_InitPATable,w
 17533  1BDF  00A2               	movwf	CC2500_WriteREG@value
 17534  1BE0  303E               	movlw	62
 17535  1BE1  319A  22BC  319B   	fcall	_CC2500_WriteREG
 17536  1BE4  3001               	movlw	1
 17537  1BE5  0020               	movlb	0	; select bank0
 17538  1BE6  00A5               	movwf	??_CC2500_InitPATable
 17539  1BE7  0825               	movf	??_CC2500_InitPATable,w
 17540  1BE8  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17541  1BE9  2BCD               	goto	L17
 17542  1BEA                     __end_of_CC2500_InitPATable:	
 17543                           
 17544                           	psect	text114
 17545  1ABC                     __ptext114:	
 17546 ;; *************** function _CC2500_WriteREG *****************
 17547 ;; Defined at:
 17548 ;;		line 223 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17549 ;; Parameters:    Size  Location     Type
 17550 ;;  w_addr          1    wreg     unsigned char 
 17551 ;;  value           1    2[BANK0 ] unsigned char 
 17552 ;; Auto vars:     Size  Location     Type
 17553 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17554 ;; Return value:  Size  Location     Type
 17555 ;;		None               void
 17556 ;; Registers used:
 17557 ;;		wreg, status,2, status,0, pclath, cstack
 17558 ;; Tracked objects:
 17559 ;;		On entry : 0/0
 17560 ;;		On exit  : 0/0
 17561 ;;		Unchanged: 0/0
 17562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17563 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;Total ram usage:        3 bytes
 17568 ;; Hardware stack levels used:    1
 17569 ;; Hardware stack levels required when called:    5
 17570 ;; This function calls:
 17571 ;;		_CC2500_WriteByte
 17572 ;; This function is called by:
 17573 ;;		_CC2500_InitSetREG
 17574 ;;		_CC2500_InitPATable
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           
 17579                           ;psect for function _CC2500_WriteREG
 17580  1ABC                     _CC2500_WriteREG:	
 17581                           
 17582                           ;incstack = 0
 17583                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 17584                           ;CC2500_WriteREG@w_addr stored from wreg
 17585  1ABC  0020               	movlb	0	; select bank0
 17586  1ABD  00A4               	movwf	CC2500_WriteREG@w_addr
 17587                           
 17588                           ;CC2500_B1.c: 224: RC4 = 0;
 17589  1ABE  120E               	bcf	14,4	;volatile
 17590                           
 17591                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 17592  1ABF  0824               	movf	CC2500_WriteREG@w_addr,w
 17593  1AC0  00A3               	movwf	??_CC2500_WriteREG
 17594  1AC1  0823               	movf	??_CC2500_WriteREG,w
 17595  1AC2  0021               	movlb	1	; select bank1
 17596  1AC3  00C1               	movwf	_SPI0Buffer^(0+128)
 17597  1AC4                     l353:	
 17598                           ;CC2500_B1.c: 226: while (RC2 == 1);
 17599                           
 17600  1AC4  0020               	movlb	0	; select bank0
 17601  1AC5  190E               	btfsc	14,2	;volatile
 17602  1AC6  2AC4               	goto	l353
 17603                           
 17604                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 17605  1AC7  319A  22A3  319A   	fcall	_CC2500_WriteByte
 17606                           
 17607                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 17608  1ACA  0020               	movlb	0	; select bank0
 17609  1ACB  0822               	movf	CC2500_WriteREG@value,w
 17610  1ACC  00A3               	movwf	??_CC2500_WriteREG
 17611  1ACD  0823               	movf	??_CC2500_WriteREG,w
 17612  1ACE  0021               	movlb	1	; select bank1
 17613  1ACF  00C1               	movwf	_SPI0Buffer^(0+128)
 17614                           
 17615                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 17616  1AD0  319A  22A3         	fcall	_CC2500_WriteByte
 17617                           
 17618                           ;CC2500_B1.c: 230: RC4 = 1;
 17619  1AD2  0020               	movlb	0	; select bank0
 17620  1AD3  160E               	bsf	14,4	;volatile
 17621  1AD4  0008               	return
 17622  1AD5                     __end_of_CC2500_WriteREG:	
 17623                           
 17624                           	psect	text115
 17625  187F                     __ptext115:	
 17626 ;; *************** function _CC2500_FrequencyCabr *****************
 17627 ;; Defined at:
 17628 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;		None               void
 17635 ;; Registers used:
 17636 ;;		wreg, status,2, status,0, pclath, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;Total ram usage:        0 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    6
 17649 ;; This function calls:
 17650 ;;		_CC2500_WriteCommand
 17651 ;;		_DelayTime_1us
 17652 ;; This function is called by:
 17653 ;;		_CC2500_PowerOnInitial
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           
 17658                           ;psect for function _CC2500_FrequencyCabr
 17659  187F                     _CC2500_FrequencyCabr:	
 17660                           
 17661                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 17665  187F  3033               	movlw	51
 17666  1880  3199  2138  3198   	fcall	_CC2500_WriteCommand
 17667                           
 17668                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 17669  1883  30E8               	movlw	232
 17670  1884  0020               	movlb	0	; select bank0
 17671  1885  00A0               	movwf	DelayTime_1us@count
 17672  1886  3003               	movlw	3
 17673  1887  00A1               	movwf	DelayTime_1us@count+1
 17674  1888  319C  2470         	fcall	_DelayTime_1us
 17675  188A  0008               	return
 17676  188B                     __end_of_CC2500_FrequencyCabr:	
 17677                           
 17678                           	psect	text116
 17679  1C70                     __ptext116:	
 17680 ;; *************** function _DelayTime_1us *****************
 17681 ;; Defined at:
 17682 ;;		line 279 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17683 ;; Parameters:    Size  Location     Type
 17684 ;;  count           2    0[BANK0 ] int 
 17685 ;; Auto vars:     Size  Location     Type
 17686 ;;  j               2    4[BANK0 ] unsigned int 
 17687 ;;  i               2    2[BANK0 ] unsigned int 
 17688 ;; Return value:  Size  Location     Type
 17689 ;;		None               void
 17690 ;; Registers used:
 17691 ;;		wreg, status,2
 17692 ;; Tracked objects:
 17693 ;;		On entry : 0/0
 17694 ;;		On exit  : 0/0
 17695 ;;		Unchanged: 0/0
 17696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17698 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17700 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17701 ;;Total ram usage:        6 bytes
 17702 ;; Hardware stack levels used:    1
 17703 ;; Hardware stack levels required when called:    4
 17704 ;; This function calls:
 17705 ;;		Nothing
 17706 ;; This function is called by:
 17707 ;;		_CC2500_PowerRST
 17708 ;;		_CC2500_FrequencyCabr
 17709 ;; This function uses a non-reentrant model
 17710 ;;
 17711                           
 17712                           
 17713                           ;psect for function _DelayTime_1us
 17714  1C70                     _DelayTime_1us:	
 17715                           
 17716                           ;CC2500_B1.c: 280: unsigned int i, j;
 17717                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 17718                           
 17719                           ;incstack = 0
 17720                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17721  1C70  3001               	movlw	1
 17722  1C71  0020               	movlb	0	; select bank0
 17723  1C72  00A2               	movwf	DelayTime_1us@i
 17724  1C73  3000               	movlw	0
 17725  1C74  00A3               	movwf	DelayTime_1us@i+1
 17726  1C75                     l377:	
 17727  1C75  0821               	movf	DelayTime_1us@count+1,w
 17728  1C76  0223               	subwf	DelayTime_1us@i+1,w
 17729  1C77  1D03               	skipz
 17730  1C78  2C7B               	goto	u7915
 17731  1C79  0820               	movf	DelayTime_1us@count,w
 17732  1C7A  0222               	subwf	DelayTime_1us@i,w
 17733  1C7B                     u7915:	
 17734  1C7B  1803               	btfsc	3,0
 17735  1C7C  0008               	return
 17736                           
 17737                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 17738  1C7D  01A4               	clrf	DelayTime_1us@j
 17739  1C7E  01A5               	clrf	DelayTime_1us@j+1
 17740  1C7F  3000               	movlw	0
 17741  1C80  0225               	subwf	DelayTime_1us@j+1,w
 17742  1C81  3002               	movlw	2
 17743  1C82  1903               	skipnz
 17744  1C83  0224               	subwf	DelayTime_1us@j,w
 17745  1C84  1803               	btfsc	3,0
 17746  1C85  2C91               	goto	l8262
 17747  1C86                     l8260:	
 17748  1C86  3001               	movlw	1
 17749  1C87  07A4               	addwf	DelayTime_1us@j,f
 17750  1C88  3000               	movlw	0
 17751  1C89  3DA5               	addwfc	DelayTime_1us@j+1,f
 17752  1C8A  3000               	movlw	0
 17753  1C8B  0225               	subwf	DelayTime_1us@j+1,w
 17754  1C8C  3002               	movlw	2
 17755  1C8D  1903               	skipnz
 17756  1C8E  0224               	subwf	DelayTime_1us@j,w
 17757  1C8F  1C03               	skipc
 17758  1C90  2C86               	goto	l8260
 17759  1C91                     l8262:	
 17760  1C91  3001               	movlw	1
 17761  1C92  07A2               	addwf	DelayTime_1us@i,f
 17762  1C93  3000               	movlw	0
 17763  1C94  3DA3               	addwfc	DelayTime_1us@i+1,f
 17764  1C95  2C75               	goto	l377
 17765  1C96                     __end_of_DelayTime_1us:	
 17766                           
 17767                           	psect	text117
 17768  2762                     __ptext117:	
 17769 ;; *************** function _CC2500_ClearTXFIFO *****************
 17770 ;; Defined at:
 17771 ;;		line 159 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17772 ;; Parameters:    Size  Location     Type
 17773 ;;		None
 17774 ;; Auto vars:     Size  Location     Type
 17775 ;;		None
 17776 ;; Return value:  Size  Location     Type
 17777 ;;		None               void
 17778 ;; Registers used:
 17779 ;;		wreg, status,2, status,0, pclath, cstack
 17780 ;; Tracked objects:
 17781 ;;		On entry : 0/0
 17782 ;;		On exit  : 0/0
 17783 ;;		Unchanged: 0/0
 17784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;Total ram usage:        0 bytes
 17790 ;; Hardware stack levels used:    1
 17791 ;; Hardware stack levels required when called:    6
 17792 ;; This function calls:
 17793 ;;		_CC2500_WriteCommand
 17794 ;; This function is called by:
 17795 ;;		_CC2500_PowerOnInitial
 17796 ;; This function uses a non-reentrant model
 17797 ;;
 17798                           
 17799                           
 17800                           ;psect for function _CC2500_ClearTXFIFO
 17801  2762                     _CC2500_ClearTXFIFO:	
 17802                           
 17803                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 17804                           
 17805                           ;incstack = 0
 17806                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17807  2762  303B               	movlw	59
 17808  2763  3199  2138         	fcall	_CC2500_WriteCommand
 17809  2765  0008               	return
 17810  2766                     __end_of_CC2500_ClearTXFIFO:	
 17811                           
 17812                           	psect	text118
 17813  275E                     __ptext118:	
 17814 ;; *************** function _CC2500_ClearRXFIFO *****************
 17815 ;; Defined at:
 17816 ;;		line 166 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17817 ;; Parameters:    Size  Location     Type
 17818 ;;		None
 17819 ;; Auto vars:     Size  Location     Type
 17820 ;;		None
 17821 ;; Return value:  Size  Location     Type
 17822 ;;		None               void
 17823 ;; Registers used:
 17824 ;;		wreg, status,2, status,0, pclath, cstack
 17825 ;; Tracked objects:
 17826 ;;		On entry : 0/0
 17827 ;;		On exit  : 0/0
 17828 ;;		Unchanged: 0/0
 17829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;Total ram usage:        0 bytes
 17835 ;; Hardware stack levels used:    1
 17836 ;; Hardware stack levels required when called:    6
 17837 ;; This function calls:
 17838 ;;		_CC2500_WriteCommand
 17839 ;; This function is called by:
 17840 ;;		_CC2500_PowerOnInitial
 17841 ;; This function uses a non-reentrant model
 17842 ;;
 17843                           
 17844                           
 17845                           ;psect for function _CC2500_ClearRXFIFO
 17846  275E                     _CC2500_ClearRXFIFO:	
 17847                           
 17848                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 17849                           
 17850                           ;incstack = 0
 17851                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17852  275E  303A               	movlw	58
 17853  275F  3199  2138         	fcall	_CC2500_WriteCommand
 17854  2761  0008               	return
 17855  2762                     __end_of_CC2500_ClearRXFIFO:	
 17856                           
 17857                           	psect	text119
 17858  1938                     __ptext119:	
 17859 ;; *************** function _CC2500_WriteCommand *****************
 17860 ;; Defined at:
 17861 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;  command         1    wreg     unsigned char 
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;  command         1    3[BANK0 ] unsigned char 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;		None               void
 17868 ;; Registers used:
 17869 ;;		wreg, status,2, status,0, pclath, cstack
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        2 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    5
 17882 ;; This function calls:
 17883 ;;		_CC2500_WriteByte
 17884 ;; This function is called by:
 17885 ;;		_CC2500_TxData
 17886 ;;		_CC2500_RxData
 17887 ;;		_CC2500_ClearTXFIFO
 17888 ;;		_CC2500_ClearRXFIFO
 17889 ;;		_CC2500_FrequencyCabr
 17890 ;;		_CC2500_SIDLEMode
 17891 ;;		_setRF_Main
 17892 ;;		_RF_RxDisable
 17893 ;; This function uses a non-reentrant model
 17894 ;;
 17895                           
 17896                           
 17897                           ;psect for function _CC2500_WriteCommand
 17898  1938                     _CC2500_WriteCommand:	
 17899                           
 17900                           ;incstack = 0
 17901                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 17902                           ;CC2500_WriteCommand@command stored from wreg
 17903  1938  0020               	movlb	0	; select bank0
 17904  1939  00A3               	movwf	CC2500_WriteCommand@command
 17905                           
 17906                           ;CC2500_B1.c: 250: RC4 = 0;
 17907  193A  120E               	bcf	14,4	;volatile
 17908                           
 17909                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 17910  193B  0823               	movf	CC2500_WriteCommand@command,w
 17911  193C  00A2               	movwf	??_CC2500_WriteCommand
 17912  193D  0822               	movf	??_CC2500_WriteCommand,w
 17913  193E  0021               	movlb	1	; select bank1
 17914  193F  00C1               	movwf	_SPI0Buffer^(0+128)
 17915  1940                     l365:	
 17916                           ;CC2500_B1.c: 253: while (RC2 == 1);
 17917                           
 17918  1940  0020               	movlb	0	; select bank0
 17919  1941  190E               	btfsc	14,2	;volatile
 17920  1942  2940               	goto	l365
 17921                           
 17922                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 17923  1943  319A  22A3         	fcall	_CC2500_WriteByte
 17924                           
 17925                           ;CC2500_B1.c: 256: RC4 = 1;
 17926  1945  0020               	movlb	0	; select bank0
 17927  1946  160E               	bsf	14,4	;volatile
 17928  1947  0008               	return
 17929  1948                     __end_of_CC2500_WriteCommand:	
 17930                           
 17931                           	psect	text120
 17932  1AA3                     __ptext120:	
 17933 ;; *************** function _CC2500_WriteByte *****************
 17934 ;; Defined at:
 17935 ;;		line 191 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;		None
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17940 ;; Return value:  Size  Location     Type
 17941 ;;		None               void
 17942 ;; Registers used:
 17943 ;;		wreg, status,2, status,0
 17944 ;; Tracked objects:
 17945 ;;		On entry : 0/0
 17946 ;;		On exit  : 0/0
 17947 ;;		Unchanged: 0/0
 17948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17952 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17953 ;;Total ram usage:        2 bytes
 17954 ;; Hardware stack levels used:    1
 17955 ;; Hardware stack levels required when called:    4
 17956 ;; This function calls:
 17957 ;;		Nothing
 17958 ;; This function is called by:
 17959 ;;		_CC2500_TxData
 17960 ;;		_CC2500_RxData
 17961 ;;		_CC2500_PowerRST
 17962 ;;		_CC2500_WriteREG
 17963 ;;		_CC2500_WriteCommand
 17964 ;;		_CC2500_ReadStatus
 17965 ;;		_CC2500_ReadREG
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           
 17970                           ;psect for function _CC2500_WriteByte
 17971  1AA3                     _CC2500_WriteByte:	
 17972                           
 17973                           ;CC2500_B1.c: 192: unsigned char loop_a;
 17974                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 17975                           
 17976                           ;incstack = 0
 17977                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17978  1AA3  0020               	movlb	0	; select bank0
 17979  1AA4  01A1               	clrf	CC2500_WriteByte@loop_a
 17980  1AA5                     L18:	
 17981  1AA5  3008               	movlw	8
 17982  1AA6  0221               	subwf	CC2500_WriteByte@loop_a,w
 17983  1AA7  1803               	btfsc	3,0
 17984  1AA8  0008               	return
 17985                           
 17986                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 17987  1AA9  0021               	movlb	1	; select bank1
 17988  1AAA  1FC1               	btfss	_SPI0Buffer^(0+128),7
 17989  1AAB  2AAF               	goto	l341
 17990                           
 17991                           ;CC2500_B1.c: 195: RC0 = 1;
 17992  1AAC  0020               	movlb	0	; select bank0
 17993  1AAD  140E               	bsf	14,0	;volatile
 17994  1AAE  2AB1               	goto	l342
 17995  1AAF                     l341:	
 17996                           
 17997                           ;CC2500_B1.c: 196: else
 17998                           ;CC2500_B1.c: 197: RC0 = 0;
 17999  1AAF  0020               	movlb	0	; select bank0
 18000  1AB0  100E               	bcf	14,0	;volatile
 18001  1AB1                     l342:	
 18002                           
 18003                           ;CC2500_B1.c: 198: RC1 = 1;
 18004  1AB1  148E               	bsf	14,1	;volatile
 18005                           
 18006                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 18007  1AB2  1003               	clrc
 18008  1AB3  0021               	movlb	1	; select bank1
 18009  1AB4  0DC1               	rlf	_SPI0Buffer^(0+128),f
 18010                           
 18011                           ;CC2500_B1.c: 200: RC1 = 0;
 18012  1AB5  0020               	movlb	0	; select bank0
 18013  1AB6  108E               	bcf	14,1	;volatile
 18014  1AB7  3001               	movlw	1
 18015  1AB8  00A0               	movwf	??_CC2500_WriteByte
 18016  1AB9  0820               	movf	??_CC2500_WriteByte,w
 18017  1ABA  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18018  1ABB  2AA5               	goto	L18
 18019  1ABC                     __end_of_CC2500_WriteByte:	
 18020                           
 18021                           	psect	text121
 18022  0723                     __ptext121:	
 18023 ;; *************** function _Buzzer_Main *****************
 18024 ;; Defined at:
 18025 ;;		line 47 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 18026 ;; Parameters:    Size  Location     Type
 18027 ;;		None
 18028 ;; Auto vars:     Size  Location     Type
 18029 ;;		None
 18030 ;; Return value:  Size  Location     Type
 18031 ;;		None               void
 18032 ;; Registers used:
 18033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18034 ;; Tracked objects:
 18035 ;;		On entry : 0/0
 18036 ;;		On exit  : 0/0
 18037 ;;		Unchanged: 0/0
 18038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18043 ;;Total ram usage:        4 bytes
 18044 ;; Hardware stack levels used:    1
 18045 ;; Hardware stack levels required when called:    4
 18046 ;; This function calls:
 18047 ;;		Nothing
 18048 ;; This function is called by:
 18049 ;;		_main
 18050 ;; This function uses a non-reentrant model
 18051 ;;
 18052                           
 18053                           
 18054                           ;psect for function _Buzzer_Main
 18055  0723                     _Buzzer_Main:	
 18056                           
 18057                           ;Buzzer_B1.c: 48: Buz->Switch = (RB3) ? 1 : 0;
 18058                           
 18059                           ;incstack = 0
 18060                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 18061  0723  0021               	movlb	1	; select bank1
 18062  0724  0837               	movf	_Buz^(0+128),w
 18063  0725  0086               	movwf	6
 18064  0726  3001               	movlw	1	; select bank2/3
 18065  0727  0087               	movwf	7
 18066  0728  1281               	bcf	1,5
 18067  0729  0020               	movlb	0	; select bank0
 18068  072A  198D               	btfsc	13,3	;volatile
 18069  072B  1681               	bsf	1,5
 18070                           
 18071                           ;Buzzer_B1.c: 50: if (Buz->GO) {
 18072  072C  0021               	movlb	1	; select bank1
 18073  072D  0837               	movf	_Buz^(0+128),w
 18074  072E  0086               	movwf	6
 18075  072F  3001               	movlw	1	; select bank2/3
 18076  0730  0087               	movwf	7
 18077  0731  1C81               	btfss	1,1
 18078  0732  0008               	return
 18079                           
 18080                           ;Buzzer_B1.c: 52: if (Buz->Time >= Buz->TimeValue) {
 18081  0733  0837               	movf	_Buz^(0+128),w
 18082  0734  3E06               	addlw	6
 18083  0735  0086               	movwf	6
 18084  0736  3001               	movlw	1	; select bank2/3
 18085  0737  0087               	movwf	7
 18086  0738  3F40               	moviw [0]fsr1
 18087  0739  0020               	movlb	0	; select bank0
 18088  073A  00A0               	movwf	??_Buzzer_Main
 18089  073B  3F41               	moviw [1]fsr1
 18090  073C  00A1               	movwf	??_Buzzer_Main+1
 18091  073D  0021               	movlb	1	; select bank1
 18092  073E  0A37               	incf	_Buz^(0+128),w
 18093  073F  0086               	movwf	6
 18094  0740  3001               	movlw	1	; select bank2/3
 18095  0741  0087               	movwf	7
 18096  0742  3F40               	moviw [0]fsr1
 18097  0743  0020               	movlb	0	; select bank0
 18098  0744  00A2               	movwf	??_Buzzer_Main+2
 18099  0745  3F41               	moviw [1]fsr1
 18100  0746  00A3               	movwf	??_Buzzer_Main+3
 18101  0747  0821               	movf	??_Buzzer_Main+1,w
 18102  0748  0223               	subwf	??_Buzzer_Main+3,w
 18103  0749  1D03               	skipz
 18104  074A  2F4D               	goto	u6405
 18105  074B  0820               	movf	??_Buzzer_Main,w
 18106  074C  0222               	subwf	??_Buzzer_Main+2,w
 18107  074D                     u6405:	
 18108  074D  1C03               	skipc
 18109  074E  0008               	return
 18110                           
 18111                           ;Buzzer_B1.c: 53: Buz->Time = 0;
 18112  074F  0021               	movlb	1	; select bank1
 18113  0750  0A37               	incf	_Buz^(0+128),w
 18114  0751  0086               	movwf	6
 18115  0752  3001               	movlw	1	; select bank2/3
 18116  0753  0087               	movwf	7
 18117  0754  3000               	movlw	0
 18118  0755  3FC0               	movwi [0]fsr1
 18119  0756  3FC1               	movwi [1]fsr1
 18120                           
 18121                           ;Buzzer_B1.c: 54: if (!Buz->Switch) {
 18122  0757  0837               	movf	_Buz^(0+128),w
 18123  0758  0086               	movwf	6
 18124  0759  3001               	movlw	1	; select bank2/3
 18125  075A  0087               	movwf	7
 18126  075B  1A81               	btfsc	1,5
 18127  075C  2FCB               	goto	l7300
 18128                           
 18129                           ;Buzzer_B1.c: 55: if (Buz->Count == 0) {
 18130  075D  0837               	movf	_Buz^(0+128),w
 18131  075E  3E03               	addlw	3
 18132  075F  0086               	movwf	6
 18133  0760  3001               	movlw	1	; select bank2/3
 18134  0761  0087               	movwf	7
 18135  0762  0881               	movf	1,f
 18136  0763  1D03               	skipz
 18137  0764  2FC3               	goto	l7296
 18138                           
 18139                           ;Buzzer_B1.c: 56: if (Buz->BufferStatus1) {
 18140  0765  0837               	movf	_Buz^(0+128),w
 18141  0766  0086               	movwf	6
 18142  0767  3001               	movlw	1	; select bank2/3
 18143  0768  0087               	movwf	7
 18144  0769  1D81               	btfss	1,3
 18145  076A  2F91               	goto	l7288
 18146                           
 18147                           ;Buzzer_B1.c: 57: Buz->BufferStatus1 = 0;
 18148  076B  0837               	movf	_Buz^(0+128),w
 18149  076C  0086               	movwf	6
 18150  076D  3001               	movlw	1	; select bank2/3
 18151  076E  0087               	movwf	7
 18152  076F  1181               	bcf	1,3
 18153                           
 18154                           ;Buzzer_B1.c: 58: Buz->Count = Buz->CountBuffer1;
 18155  0770  0837               	movf	_Buz^(0+128),w
 18156  0771  3E04               	addlw	4
 18157  0772  0086               	movwf	6
 18158  0773  3001               	movlw	1	; select bank2/3
 18159  0774  0087               	movwf	7
 18160  0775  0801               	movf	1,w
 18161  0776  0020               	movlb	0	; select bank0
 18162  0777  00A0               	movwf	??_Buzzer_Main
 18163  0778  0021               	movlb	1	; select bank1
 18164  0779  0837               	movf	_Buz^(0+128),w
 18165  077A  3E03               	addlw	3
 18166  077B  0086               	movwf	6
 18167  077C  3001               	movlw	1	; select bank2/3
 18168  077D  0087               	movwf	7
 18169  077E  0020               	movlb	0	; select bank0
 18170  077F  0820               	movf	??_Buzzer_Main,w
 18171  0780  0081               	movwf	1
 18172                           
 18173                           ;Buzzer_B1.c: 59: Buz->TimeValue = Buz->TimeValueBuffer1;
 18174  0781  0021               	movlb	1	; select bank1
 18175  0782  0837               	movf	_Buz^(0+128),w
 18176  0783  3E08               	addlw	8
 18177  0784  0086               	movwf	6
 18178  0785  3001               	movlw	1	; select bank2/3
 18179  0786  0087               	movwf	7
 18180  0787  0837               	movf	_Buz^(0+128),w
 18181  0788  3E06               	addlw	6
 18182  0789  0084               	movwf	4
 18183  078A  3001               	movlw	1	; select bank2/3
 18184  078B  0085               	movwf	5
 18185  078C  3F40               	moviw [0]fsr1
 18186  078D  3F80               	movwi [0]fsr0
 18187  078E  3F41               	moviw [1]fsr1
 18188  078F  3F81               	movwi [1]fsr0
 18189                           
 18190                           ;Buzzer_B1.c: 60: } else if (Buz->BufferStatus2) {
 18191  0790  0008               	return
 18192  0791                     l7288:	
 18193  0791  0837               	movf	_Buz^(0+128),w
 18194  0792  0086               	movwf	6
 18195  0793  3001               	movlw	1	; select bank2/3
 18196  0794  0087               	movwf	7
 18197  0795  1E01               	btfss	1,4
 18198  0796  2FBD               	goto	l7294
 18199                           
 18200                           ;Buzzer_B1.c: 61: Buz->BufferStatus2 = 0;
 18201  0797  0837               	movf	_Buz^(0+128),w
 18202  0798  0086               	movwf	6
 18203  0799  3001               	movlw	1	; select bank2/3
 18204  079A  0087               	movwf	7
 18205  079B  1201               	bcf	1,4
 18206                           
 18207                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer2;
 18208  079C  0837               	movf	_Buz^(0+128),w
 18209  079D  3E05               	addlw	5
 18210  079E  0086               	movwf	6
 18211  079F  3001               	movlw	1	; select bank2/3
 18212  07A0  0087               	movwf	7
 18213  07A1  0801               	movf	1,w
 18214  07A2  0020               	movlb	0	; select bank0
 18215  07A3  00A0               	movwf	??_Buzzer_Main
 18216  07A4  0021               	movlb	1	; select bank1
 18217  07A5  0837               	movf	_Buz^(0+128),w
 18218  07A6  3E03               	addlw	3
 18219  07A7  0086               	movwf	6
 18220  07A8  3001               	movlw	1	; select bank2/3
 18221  07A9  0087               	movwf	7
 18222  07AA  0020               	movlb	0	; select bank0
 18223  07AB  0820               	movf	??_Buzzer_Main,w
 18224  07AC  0081               	movwf	1
 18225                           
 18226                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer2;
 18227  07AD  0021               	movlb	1	; select bank1
 18228  07AE  0837               	movf	_Buz^(0+128),w
 18229  07AF  3E0A               	addlw	10
 18230  07B0  0086               	movwf	6
 18231  07B1  3001               	movlw	1	; select bank2/3
 18232  07B2  0087               	movwf	7
 18233  07B3  0837               	movf	_Buz^(0+128),w
 18234  07B4  3E06               	addlw	6
 18235  07B5  0084               	movwf	4
 18236  07B6  3001               	movlw	1	; select bank2/3
 18237  07B7  0085               	movwf	5
 18238  07B8  3F40               	moviw [0]fsr1
 18239  07B9  3F80               	movwi [0]fsr0
 18240  07BA  3F41               	moviw [1]fsr1
 18241  07BB  3F81               	movwi [1]fsr0
 18242                           
 18243                           ;Buzzer_B1.c: 64: } else {
 18244  07BC  0008               	return
 18245  07BD                     l7294:	
 18246                           
 18247                           ;Buzzer_B1.c: 65: Buz->GO = 0;
 18248  07BD  0837               	movf	_Buz^(0+128),w
 18249  07BE  0086               	movwf	6
 18250  07BF  3001               	movlw	1	; select bank2/3
 18251  07C0  0087               	movwf	7
 18252  07C1  1081               	bcf	1,1
 18253                           
 18254                           ;Buzzer_B1.c: 66: }
 18255                           ;Buzzer_B1.c: 67: } else {
 18256  07C2  0008               	return
 18257  07C3                     l7296:	
 18258                           
 18259                           ;Buzzer_B1.c: 68: Buz->Switch = 1;
 18260  07C3  0837               	movf	_Buz^(0+128),w
 18261  07C4  0086               	movwf	6
 18262  07C5  3001               	movlw	1	; select bank2/3
 18263  07C6  0087               	movwf	7
 18264  07C7  1681               	bsf	1,5
 18265                           
 18266                           ;Buzzer_B1.c: 70: RB3 = 1;
 18267  07C8  0020               	movlb	0	; select bank0
 18268  07C9  158D               	bsf	13,3	;volatile
 18269                           
 18270                           ;Buzzer_B1.c: 71: }
 18271                           ;Buzzer_B1.c: 72: } else {
 18272  07CA  0008               	return
 18273  07CB                     l7300:	
 18274                           
 18275                           ;Buzzer_B1.c: 73: Buz->Switch = 0;
 18276  07CB  0021               	movlb	1	; select bank1
 18277  07CC  0837               	movf	_Buz^(0+128),w
 18278  07CD  0086               	movwf	6
 18279  07CE  3001               	movlw	1	; select bank2/3
 18280  07CF  0087               	movwf	7
 18281  07D0  1281               	bcf	1,5
 18282                           
 18283                           ;Buzzer_B1.c: 75: RB3 = 0;
 18284  07D1  0020               	movlb	0	; select bank0
 18285  07D2  118D               	bcf	13,3	;volatile
 18286                           
 18287                           ;Buzzer_B1.c: 77: Buz->Count--;
 18288  07D3  0021               	movlb	1	; select bank1
 18289  07D4  0837               	movf	_Buz^(0+128),w
 18290  07D5  3E03               	addlw	3
 18291  07D6  0086               	movwf	6
 18292  07D7  3001               	movlw	1	; select bank2/3
 18293  07D8  0087               	movwf	7
 18294  07D9  3001               	movlw	1
 18295  07DA  0281               	subwf	1,f
 18296  07DB  0008               	return
 18297  07DC                     __end_of_Buzzer_Main:	
 18298                           
 18299                           	psect	text122
 18300  1873                     __ptext122:	
 18301 ;; *************** function _Buzzer_Initialization *****************
 18302 ;; Defined at:
 18303 ;;		line 11 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;		None
 18306 ;; Auto vars:     Size  Location     Type
 18307 ;;		None
 18308 ;; Return value:  Size  Location     Type
 18309 ;;		None               void
 18310 ;; Registers used:
 18311 ;;		wreg, fsr1l, fsr1h
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;Total ram usage:        1 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    4
 18324 ;; This function calls:
 18325 ;;		Nothing
 18326 ;; This function is called by:
 18327 ;;		_main
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           
 18332                           ;psect for function _Buzzer_Initialization
 18333  1873                     _Buzzer_Initialization:	
 18334                           
 18335                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 18336                           
 18337                           ;incstack = 0
 18338                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 18339  1873  303E               	movlw	_Buz1& (0+255)
 18340  1874  0020               	movlb	0	; select bank0
 18341  1875  00A0               	movwf	??_Buzzer_Initialization
 18342  1876  0820               	movf	??_Buzzer_Initialization,w
 18343  1877  0021               	movlb	1	; select bank1
 18344  1878  00B7               	movwf	_Buz^(0+128)
 18345                           
 18346                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 18347  1879  0837               	movf	_Buz^(0+128),w
 18348  187A  0086               	movwf	6
 18349  187B  3001               	movlw	1	; select bank2/3
 18350  187C  0087               	movwf	7
 18351  187D  1401               	bsf	1,0
 18352  187E  0008               	return
 18353  187F                     __end_of_Buzzer_Initialization:	
 18354                           
 18355                           	psect	intentry
 18356  0004                     __pintentry:	
 18357 ;; *************** function _ISR *****************
 18358 ;; Defined at:
 18359 ;;		line 109 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 18360 ;; Parameters:    Size  Location     Type
 18361 ;;		None
 18362 ;; Auto vars:     Size  Location     Type
 18363 ;;		None
 18364 ;; Return value:  Size  Location     Type
 18365 ;;		None               void
 18366 ;; Registers used:
 18367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18368 ;; Tracked objects:
 18369 ;;		On entry : 0/0
 18370 ;;		On exit  : 0/0
 18371 ;;		Unchanged: 0/0
 18372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;Total ram usage:        1 bytes
 18378 ;; Hardware stack levels used:    1
 18379 ;; Hardware stack levels required when called:    3
 18380 ;; This function calls:
 18381 ;;		_INT_ISR
 18382 ;;		_IOC_ISR
 18383 ;;		_TMR0_ISR
 18384 ;; This function is called by:
 18385 ;;		Interrupt level 1
 18386 ;; This function uses a non-reentrant model
 18387 ;;
 18388                           
 18389  0004                     _ISR:	
 18390                           
 18391                           ;incstack = 0
 18392                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18393  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18394  0005  3180               	pagesel	$
 18395  0006  0020               	movlb	0	; select bank0
 18396  0007  087F               	movf	127,w
 18397  0008  00F6               	movwf	??_ISR
 18398                           
 18399                           ;MCU_B1.c: 111: IOC_ISR();
 18400  0009  319A  2233  3180   	fcall	_IOC_ISR
 18401                           
 18402                           ;MCU_B1.c: 113: TMR0_ISR();
 18403  000C  3180  2055  3180   	fcall	_TMR0_ISR
 18404                           
 18405                           ;MCU_B1.c: 115: ;;
 18406                           ;MCU_B1.c: 119: INT_ISR();
 18407  000F  3198  2067         	fcall	_INT_ISR
 18408  0011  0876               	movf	??_ISR,w
 18409  0012  0020               	movlb	0	; select bank0
 18410  0013  00FF               	movwf	127
 18411  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 18412  0015  0009               	retfie
 18413  0016                     __end_of_ISR:	
 18414                           
 18415                           	psect	text124
 18416  0055                     __ptext124:	
 18417 ;; *************** function _TMR0_ISR *****************
 18418 ;; Defined at:
 18419 ;;		line 137 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 18420 ;; Parameters:    Size  Location     Type
 18421 ;;		None
 18422 ;; Auto vars:     Size  Location     Type
 18423 ;;		None
 18424 ;; Return value:  Size  Location     Type
 18425 ;;		None               void
 18426 ;; Registers used:
 18427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18428 ;; Tracked objects:
 18429 ;;		On entry : 0/0
 18430 ;;		On exit  : 0/0
 18431 ;;		Unchanged: 0/0
 18432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18436 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18437 ;;Total ram usage:        4 bytes
 18438 ;; Hardware stack levels used:    1
 18439 ;; Hardware stack levels required when called:    1
 18440 ;; This function calls:
 18441 ;;		i1_setLoad_StatusOff
 18442 ;; This function is called by:
 18443 ;;		_ISR
 18444 ;; This function uses a non-reentrant model
 18445 ;;
 18446                           
 18447                           
 18448                           ;psect for function _TMR0_ISR
 18449  0055                     _TMR0_ISR:	
 18450                           
 18451                           ;MCU_B1.c: 138: if (TMR0IE && TMR0IF) {
 18452                           
 18453                           ;incstack = 0
 18454                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18455  0055  1E8B               	btfss	11,5	;volatile
 18456  0056  0008               	return
 18457  0057  1D0B               	btfss	11,2	;volatile
 18458  0058  0008               	return
 18459                           
 18460                           ;MCU_B1.c: 139: TMR0 = (256-90);
 18461  0059  30A6               	movlw	166
 18462  005A  0020               	movlb	0	; select bank0
 18463  005B  0095               	movwf	21	;volatile
 18464                           
 18465                           ;MCU_B1.c: 140: TMR0IF = 0;
 18466  005C  110B               	bcf	11,2	;volatile
 18467                           
 18468                           ;MCU_B1.c: 145: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=0; ;; if(
      +                          Di
 18469  005D  0878               	movf	_DimmerLights11,w
 18470  005E  0086               	movwf	6
 18471  005F  3001               	movlw	1	; select bank2/3
 18472  0060  0087               	movwf	7
 18473  0061  1C01               	btfss	1,0
 18474  0062  28D1               	goto	i1l7382
 18475  0063  3001               	movlw	1
 18476  0064  00F2               	movwf	??_TMR0_ISR
 18477  0065  0878               	movf	_DimmerLights11,w
 18478  0066  3E03               	addlw	3
 18479  0067  0086               	movwf	6
 18480  0068  3001               	movlw	1	; select bank2/3
 18481  0069  0087               	movwf	7
 18482  006A  0872               	movf	??_TMR0_ISR,w
 18483  006B  0781               	addwf	1,f
 18484  006C  0021               	movlb	1	; select bank1
 18485  006D  083A               	movf	_Dimmer^(0+128),w
 18486  006E  3E02               	addlw	2
 18487  006F  0086               	movwf	6
 18488  0070  0187               	clrf	7
 18489  0071  0801               	movf	1,w
 18490  0072  00F2               	movwf	??_TMR0_ISR
 18491  0073  01F3               	clrf	??_TMR0_ISR+1
 18492  0074  09F2               	comf	??_TMR0_ISR,f
 18493  0075  09F3               	comf	??_TMR0_ISR+1,f
 18494  0076  0AF2               	incf	??_TMR0_ISR,f
 18495  0077  1903               	skipnz
 18496  0078  0AF3               	incf	??_TMR0_ISR+1,f
 18497  0079  0878               	movf	_DimmerLights11,w
 18498  007A  3E04               	addlw	4
 18499  007B  0086               	movwf	6
 18500  007C  3001               	movlw	1	; select bank2/3
 18501  007D  0087               	movwf	7
 18502  007E  0801               	movf	1,w
 18503  007F  0772               	addwf	??_TMR0_ISR,w
 18504  0080  00F4               	movwf	??_TMR0_ISR+2
 18505  0081  0873               	movf	??_TMR0_ISR+1,w
 18506  0082  1803               	skipnc
 18507  0083  0A73               	incf	??_TMR0_ISR+1,w
 18508  0084  00F5               	movwf	??_TMR0_ISR+3
 18509  0085  0878               	movf	_DimmerLights11,w
 18510  0086  3E03               	addlw	3
 18511  0087  0086               	movwf	6
 18512  0088  3001               	movlw	1	; select bank2/3
 18513  0089  0087               	movwf	7
 18514  008A  0875               	movf	??_TMR0_ISR+3,w
 18515  008B  3A80               	xorlw	128
 18516  008C  3C80               	sublw	128
 18517  008D  1D03               	skipz
 18518  008E  2891               	goto	u651_25
 18519  008F  0874               	movf	??_TMR0_ISR+2,w
 18520  0090  0201               	subwf	1,w
 18521  0091                     u651_25:	
 18522  0091  1C03               	skipc
 18523  0092  29AA               	goto	i1l1316
 18524  0093  0878               	movf	_DimmerLights11,w
 18525  0094  3E03               	addlw	3
 18526  0095  0086               	movwf	6
 18527  0096  3001               	movlw	1	; select bank2/3
 18528  0097  0087               	movwf	7
 18529  0098  0181               	clrf	1
 18530  0099  0878               	movf	_DimmerLights11,w
 18531  009A  0086               	movwf	6
 18532  009B  3001               	movlw	1	; select bank2/3
 18533  009C  0087               	movwf	7
 18534  009D  1001               	bcf	1,0
 18535  009E  0878               	movf	_DimmerLights11,w
 18536  009F  3E07               	addlw	7
 18537  00A0  0086               	movwf	6
 18538  00A1  3001               	movlw	1	; select bank2/3
 18539  00A2  0087               	movwf	7
 18540  00A3  1401               	bsf	1,0
 18541  00A4  0878               	movf	_DimmerLights11,w
 18542  00A5  0086               	movwf	6
 18543  00A6  3001               	movlw	1	; select bank2/3
 18544  00A7  0087               	movwf	7
 18545  00A8  1F01               	btfss	1,6
 18546  00A9  29AA               	goto	i1l1316
 18547  00AA  0020               	movlb	0	; select bank0
 18548  00AB  138C               	bcf	12,7	;volatile
 18549  00AC  0878               	movf	_DimmerLights11,w
 18550  00AD  3E09               	addlw	9
 18551  00AE  0086               	movwf	6
 18552  00AF  3001               	movlw	1	; select bank2/3
 18553  00B0  0087               	movwf	7
 18554  00B1  1F01               	btfss	1,6
 18555  00B2  29AA               	goto	i1l1316
 18556  00B3  0878               	movf	_DimmerLights11,w
 18557  00B4  3E09               	addlw	9
 18558  00B5  0086               	movwf	6
 18559  00B6  3001               	movlw	1	; select bank2/3
 18560  00B7  0087               	movwf	7
 18561  00B8  1301               	bcf	1,6
 18562  00B9  0878               	movf	_DimmerLights11,w
 18563  00BA  0086               	movwf	6
 18564  00BB  3001               	movlw	1	; select bank2/3
 18565  00BC  0087               	movwf	7
 18566  00BD  1301               	bcf	1,6
 18567  00BE  0878               	movf	_DimmerLights11,w
 18568  00BF  3E0C               	addlw	12
 18569  00C0  0086               	movwf	6
 18570  00C1  3001               	movlw	1	; select bank2/3
 18571  00C2  0087               	movwf	7
 18572  00C3  1401               	bsf	1,0
 18573  00C4  118C               	bcf	12,3	;volatile
 18574  00C5  0021               	movlb	1	; select bank1
 18575  00C6  083A               	movf	_Dimmer^(0+128),w
 18576  00C7  0086               	movwf	6
 18577  00C8  0187               	clrf	7
 18578  00C9  1401               	bsf	1,0
 18579  00CA  01F0               	clrf	i1setLoad_StatusOff@command
 18580  00CB  0AF0               	incf	i1setLoad_StatusOff@command,f
 18581  00CC  3001               	movlw	1
 18582  00CD  319D  2598  3180   	fcall	i1_setLoad_StatusOff
 18583  00D0  29AA               	goto	i1l1316
 18584  00D1                     i1l7382:	
 18585  00D1  0878               	movf	_DimmerLights11,w
 18586  00D2  3E09               	addlw	9
 18587  00D3  0086               	movwf	6
 18588  00D4  3001               	movlw	1	; select bank2/3
 18589  00D5  0087               	movwf	7
 18590  00D6  1E81               	btfss	1,5
 18591  00D7  28F6               	goto	i1l7392
 18592  00D8  3001               	movlw	1
 18593  00D9  00F2               	movwf	??_TMR0_ISR
 18594  00DA  0878               	movf	_DimmerLights11,w
 18595  00DB  3E03               	addlw	3
 18596  00DC  0086               	movwf	6
 18597  00DD  3001               	movlw	1	; select bank2/3
 18598  00DE  0087               	movwf	7
 18599  00DF  0872               	movf	??_TMR0_ISR,w
 18600  00E0  0781               	addwf	1,f
 18601  00E1  0878               	movf	_DimmerLights11,w
 18602  00E2  3E03               	addlw	3
 18603  00E3  0086               	movwf	6
 18604  00E4  3001               	movlw	1	; select bank2/3
 18605  00E5  0087               	movwf	7
 18606  00E6  3014               	movlw	20
 18607  00E7  0201               	subwf	1,w
 18608  00E8  1C03               	skipc
 18609  00E9  28F6               	goto	i1l7392
 18610  00EA  0878               	movf	_DimmerLights11,w
 18611  00EB  3E03               	addlw	3
 18612  00EC  0086               	movwf	6
 18613  00ED  3001               	movlw	1	; select bank2/3
 18614  00EE  0087               	movwf	7
 18615  00EF  0181               	clrf	1
 18616  00F0  0878               	movf	_DimmerLights11,w
 18617  00F1  3E09               	addlw	9
 18618  00F2  0086               	movwf	6
 18619  00F3  3001               	movlw	1	; select bank2/3
 18620  00F4  0087               	movwf	7
 18621  00F5  1281               	bcf	1,5
 18622  00F6                     i1l7392:	
 18623  00F6  0878               	movf	_DimmerLights11,w
 18624  00F7  3E07               	addlw	7
 18625  00F8  0086               	movwf	6
 18626  00F9  3001               	movlw	1	; select bank2/3
 18627  00FA  0087               	movwf	7
 18628  00FB  1C01               	btfss	1,0
 18629  00FC  29AA               	goto	i1l1316
 18630  00FD  0878               	movf	_DimmerLights11,w
 18631  00FE  3E07               	addlw	7
 18632  00FF  0086               	movwf	6
 18633  0100  3001               	movlw	1	; select bank2/3
 18634  0101  0087               	movwf	7
 18635  0102  1001               	bcf	1,0
 18636  0103  0878               	movf	_DimmerLights11,w
 18637  0104  0086               	movwf	6
 18638  0105  3001               	movlw	1	; select bank2/3
 18639  0106  0087               	movwf	7
 18640  0107  1C81               	btfss	1,1
 18641  0108  29AA               	goto	i1l1316
 18642  0109  3001               	movlw	1
 18643  010A  00F2               	movwf	??_TMR0_ISR
 18644  010B  0A78               	incf	_DimmerLights11,w
 18645  010C  0086               	movwf	6
 18646  010D  3001               	movlw	1	; select bank2/3
 18647  010E  0087               	movwf	7
 18648  010F  0872               	movf	??_TMR0_ISR,w
 18649  0110  0781               	addwf	1,f
 18650  0111  0A78               	incf	_DimmerLights11,w
 18651  0112  0086               	movwf	6
 18652  0113  3001               	movlw	1	; select bank2/3
 18653  0114  0087               	movwf	7
 18654  0115  0878               	movf	_DimmerLights11,w
 18655  0116  3E02               	addlw	2
 18656  0117  0084               	movwf	4
 18657  0118  3001               	movlw	1	; select bank2/3
 18658  0119  0085               	movwf	5
 18659  011A  0800               	movf	0,w
 18660  011B  0201               	subwf	1,w
 18661  011C  1C03               	skipc
 18662  011D  29AA               	goto	i1l1316
 18663  011E  0A78               	incf	_DimmerLights11,w
 18664  011F  0086               	movwf	6
 18665  0120  3001               	movlw	1	; select bank2/3
 18666  0121  0087               	movwf	7
 18667  0122  0181               	clrf	1
 18668  0123  0878               	movf	_DimmerLights11,w
 18669  0124  0086               	movwf	6
 18670  0125  3001               	movlw	1	; select bank2/3
 18671  0126  0087               	movwf	7
 18672  0127  1D81               	btfss	1,3
 18673  0128  295F               	goto	i1l7418
 18674  0129  0878               	movf	_DimmerLights11,w
 18675  012A  0086               	movwf	6
 18676  012B  3001               	movlw	1	; select bank2/3
 18677  012C  0087               	movwf	7
 18678  012D  1A01               	btfsc	1,4
 18679  012E  2948               	goto	i1l7412
 18680  012F  0878               	movf	_DimmerLights11,w
 18681  0130  3E04               	addlw	4
 18682  0131  0086               	movwf	6
 18683  0132  3001               	movlw	1	; select bank2/3
 18684  0133  0087               	movwf	7
 18685  0134  3061               	movlw	97
 18686  0135  0201               	subwf	1,w
 18687  0136  1803               	skipnc
 18688  0137  2942               	goto	i1l7410
 18689  0138  3001               	movlw	1
 18690  0139  00F2               	movwf	??_TMR0_ISR
 18691  013A  0878               	movf	_DimmerLights11,w
 18692  013B  3E04               	addlw	4
 18693  013C  0086               	movwf	6
 18694  013D  3001               	movlw	1	; select bank2/3
 18695  013E  0087               	movwf	7
 18696  013F  0872               	movf	??_TMR0_ISR,w
 18697  0140  0781               	addwf	1,f
 18698  0141  29AA               	goto	i1l1316
 18699  0142                     i1l7410:	
 18700  0142  0878               	movf	_DimmerLights11,w
 18701  0143  0086               	movwf	6
 18702  0144  3001               	movlw	1	; select bank2/3
 18703  0145  0087               	movwf	7
 18704  0146  1601               	bsf	1,4
 18705  0147  29AA               	goto	i1l1316
 18706  0148                     i1l7412:	
 18707  0148  0878               	movf	_DimmerLights11,w
 18708  0149  3E04               	addlw	4
 18709  014A  0086               	movwf	6
 18710  014B  3001               	movlw	1	; select bank2/3
 18711  014C  0087               	movwf	7
 18712  014D  301F               	movlw	31
 18713  014E  0201               	subwf	1,w
 18714  014F  1C03               	skipc
 18715  0150  2959               	goto	i1l7416
 18716  0151  0878               	movf	_DimmerLights11,w
 18717  0152  3E04               	addlw	4
 18718  0153  0086               	movwf	6
 18719  0154  3001               	movlw	1	; select bank2/3
 18720  0155  0087               	movwf	7
 18721  0156  3001               	movlw	1
 18722  0157  0281               	subwf	1,f
 18723  0158  29AA               	goto	i1l1316
 18724  0159                     i1l7416:	
 18725  0159  0878               	movf	_DimmerLights11,w
 18726  015A  0086               	movwf	6
 18727  015B  3001               	movlw	1	; select bank2/3
 18728  015C  0087               	movwf	7
 18729  015D  1201               	bcf	1,4
 18730  015E  29AA               	goto	i1l1316
 18731  015F                     i1l7418:	
 18732  015F  0878               	movf	_DimmerLights11,w
 18733  0160  0086               	movwf	6
 18734  0161  3001               	movlw	1	; select bank2/3
 18735  0162  0087               	movwf	7
 18736  0163  1D01               	btfss	1,2
 18737  0164  29A5               	goto	i1l7432
 18738  0165  0878               	movf	_DimmerLights11,w
 18739  0166  3E04               	addlw	4
 18740  0167  0086               	movwf	6
 18741  0168  3001               	movlw	1	; select bank2/3
 18742  0169  0087               	movwf	7
 18743  016A  0878               	movf	_DimmerLights11,w
 18744  016B  3E05               	addlw	5
 18745  016C  0084               	movwf	4
 18746  016D  3001               	movlw	1	; select bank2/3
 18747  016E  0085               	movwf	5
 18748  016F  0800               	movf	0,w
 18749  0170  0201               	subwf	1,w
 18750  0171  1803               	skipnc
 18751  0172  297D               	goto	i1l7424
 18752  0173  3001               	movlw	1
 18753  0174  00F2               	movwf	??_TMR0_ISR
 18754  0175  0878               	movf	_DimmerLights11,w
 18755  0176  3E04               	addlw	4
 18756  0177  0086               	movwf	6
 18757  0178  3001               	movlw	1	; select bank2/3
 18758  0179  0087               	movwf	7
 18759  017A  0872               	movf	??_TMR0_ISR,w
 18760  017B  0781               	addwf	1,f
 18761  017C  2992               	goto	i1l7428
 18762  017D                     i1l7424:	
 18763  017D  0878               	movf	_DimmerLights11,w
 18764  017E  3E05               	addlw	5
 18765  017F  0086               	movwf	6
 18766  0180  3001               	movlw	1	; select bank2/3
 18767  0181  0087               	movwf	7
 18768  0182  0878               	movf	_DimmerLights11,w
 18769  0183  3E04               	addlw	4
 18770  0184  0084               	movwf	4
 18771  0185  3001               	movlw	1	; select bank2/3
 18772  0186  0085               	movwf	5
 18773  0187  0800               	movf	0,w
 18774  0188  0201               	subwf	1,w
 18775  0189  1803               	skipnc
 18776  018A  2992               	goto	i1l7428
 18777  018B  0878               	movf	_DimmerLights11,w
 18778  018C  3E04               	addlw	4
 18779  018D  0086               	movwf	6
 18780  018E  3001               	movlw	1	; select bank2/3
 18781  018F  0087               	movwf	7
 18782  0190  3001               	movlw	1
 18783  0191  0281               	subwf	1,f
 18784  0192                     i1l7428:	
 18785  0192  0878               	movf	_DimmerLights11,w
 18786  0193  3E05               	addlw	5
 18787  0194  0086               	movwf	6
 18788  0195  3001               	movlw	1	; select bank2/3
 18789  0196  0087               	movwf	7
 18790  0197  0878               	movf	_DimmerLights11,w
 18791  0198  3E04               	addlw	4
 18792  0199  0084               	movwf	4
 18793  019A  3001               	movlw	1	; select bank2/3
 18794  019B  0085               	movwf	5
 18795  019C  0800               	movf	0,w
 18796  019D  0601               	xorwf	1,w
 18797  019E  1D03               	skipz
 18798  019F  29AA               	goto	i1l1316
 18799  01A0  0878               	movf	_DimmerLights11,w
 18800  01A1  0086               	movwf	6
 18801  01A2  3001               	movlw	1	; select bank2/3
 18802  01A3  0087               	movwf	7
 18803  01A4  1101               	bcf	1,2
 18804  01A5                     i1l7432:	
 18805  01A5  0878               	movf	_DimmerLights11,w
 18806  01A6  0086               	movwf	6
 18807  01A7  3001               	movlw	1	; select bank2/3
 18808  01A8  0087               	movwf	7
 18809  01A9  1081               	bcf	1,1
 18810  01AA                     i1l1316:	
 18811                           
 18812                           ;MCU_B1.c: 149: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLights22->Cou
      +                          nt >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count=0; Dimm
      +                          erLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=0; if(Dim
      +                          me
 18813  01AA  0879               	movf	_DimmerLights22,w
 18814  01AB  0086               	movwf	6
 18815  01AC  3001               	movlw	1	; select bank2/3
 18816  01AD  0087               	movwf	7
 18817  01AE  1C01               	btfss	1,0
 18818  01AF  2A1E               	goto	i1l7454
 18819  01B0  3001               	movlw	1
 18820  01B1  00F2               	movwf	??_TMR0_ISR
 18821  01B2  0879               	movf	_DimmerLights22,w
 18822  01B3  3E03               	addlw	3
 18823  01B4  0086               	movwf	6
 18824  01B5  3001               	movlw	1	; select bank2/3
 18825  01B6  0087               	movwf	7
 18826  01B7  0872               	movf	??_TMR0_ISR,w
 18827  01B8  0781               	addwf	1,f
 18828  01B9  0021               	movlb	1	; select bank1
 18829  01BA  083A               	movf	_Dimmer^(0+128),w
 18830  01BB  3E02               	addlw	2
 18831  01BC  0086               	movwf	6
 18832  01BD  0187               	clrf	7
 18833  01BE  0801               	movf	1,w
 18834  01BF  00F2               	movwf	??_TMR0_ISR
 18835  01C0  01F3               	clrf	??_TMR0_ISR+1
 18836  01C1  09F2               	comf	??_TMR0_ISR,f
 18837  01C2  09F3               	comf	??_TMR0_ISR+1,f
 18838  01C3  0AF2               	incf	??_TMR0_ISR,f
 18839  01C4  1903               	skipnz
 18840  01C5  0AF3               	incf	??_TMR0_ISR+1,f
 18841  01C6  0879               	movf	_DimmerLights22,w
 18842  01C7  3E04               	addlw	4
 18843  01C8  0086               	movwf	6
 18844  01C9  3001               	movlw	1	; select bank2/3
 18845  01CA  0087               	movwf	7
 18846  01CB  0801               	movf	1,w
 18847  01CC  0772               	addwf	??_TMR0_ISR,w
 18848  01CD  00F4               	movwf	??_TMR0_ISR+2
 18849  01CE  0873               	movf	??_TMR0_ISR+1,w
 18850  01CF  1803               	skipnc
 18851  01D0  0A73               	incf	??_TMR0_ISR+1,w
 18852  01D1  00F5               	movwf	??_TMR0_ISR+3
 18853  01D2  0879               	movf	_DimmerLights22,w
 18854  01D3  3E03               	addlw	3
 18855  01D4  0086               	movwf	6
 18856  01D5  3001               	movlw	1	; select bank2/3
 18857  01D6  0087               	movwf	7
 18858  01D7  0875               	movf	??_TMR0_ISR+3,w
 18859  01D8  3A80               	xorlw	128
 18860  01D9  3C80               	sublw	128
 18861  01DA  1D03               	skipz
 18862  01DB  29DE               	goto	u668_25
 18863  01DC  0874               	movf	??_TMR0_ISR+2,w
 18864  01DD  0201               	subwf	1,w
 18865  01DE                     u668_25:	
 18866  01DE  1C03               	skipc
 18867  01DF  2AF7               	goto	i1l7506
 18868  01E0  0879               	movf	_DimmerLights22,w
 18869  01E1  3E03               	addlw	3
 18870  01E2  0086               	movwf	6
 18871  01E3  3001               	movlw	1	; select bank2/3
 18872  01E4  0087               	movwf	7
 18873  01E5  0181               	clrf	1
 18874  01E6  0879               	movf	_DimmerLights22,w
 18875  01E7  0086               	movwf	6
 18876  01E8  3001               	movlw	1	; select bank2/3
 18877  01E9  0087               	movwf	7
 18878  01EA  1001               	bcf	1,0
 18879  01EB  0879               	movf	_DimmerLights22,w
 18880  01EC  3E07               	addlw	7
 18881  01ED  0086               	movwf	6
 18882  01EE  3001               	movlw	1	; select bank2/3
 18883  01EF  0087               	movwf	7
 18884  01F0  1401               	bsf	1,0
 18885  01F1  0879               	movf	_DimmerLights22,w
 18886  01F2  0086               	movwf	6
 18887  01F3  3001               	movlw	1	; select bank2/3
 18888  01F4  0087               	movwf	7
 18889  01F5  1F01               	btfss	1,6
 18890  01F6  2AF7               	goto	i1l7506
 18891  01F7  0020               	movlb	0	; select bank0
 18892  01F8  120D               	bcf	13,4	;volatile
 18893  01F9  0879               	movf	_DimmerLights22,w
 18894  01FA  3E09               	addlw	9
 18895  01FB  0086               	movwf	6
 18896  01FC  3001               	movlw	1	; select bank2/3
 18897  01FD  0087               	movwf	7
 18898  01FE  1F01               	btfss	1,6
 18899  01FF  2AF7               	goto	i1l7506
 18900  0200  0879               	movf	_DimmerLights22,w
 18901  0201  3E09               	addlw	9
 18902  0202  0086               	movwf	6
 18903  0203  3001               	movlw	1	; select bank2/3
 18904  0204  0087               	movwf	7
 18905  0205  1301               	bcf	1,6
 18906  0206  0879               	movf	_DimmerLights22,w
 18907  0207  0086               	movwf	6
 18908  0208  3001               	movlw	1	; select bank2/3
 18909  0209  0087               	movwf	7
 18910  020A  1301               	bcf	1,6
 18911  020B  0879               	movf	_DimmerLights22,w
 18912  020C  3E0C               	addlw	12
 18913  020D  0086               	movwf	6
 18914  020E  3001               	movlw	1	; select bank2/3
 18915  020F  0087               	movwf	7
 18916  0210  1401               	bsf	1,0
 18917  0211  138E               	bcf	14,7	;volatile
 18918  0212  0021               	movlb	1	; select bank1
 18919  0213  083A               	movf	_Dimmer^(0+128),w
 18920  0214  0086               	movwf	6
 18921  0215  0187               	clrf	7
 18922  0216  1401               	bsf	1,0
 18923  0217  01F0               	clrf	i1setLoad_StatusOff@command
 18924  0218  0AF0               	incf	i1setLoad_StatusOff@command,f
 18925  0219  3002               	movlw	2
 18926  021A  319D  2598  3180   	fcall	i1_setLoad_StatusOff
 18927  021D  2AF7               	goto	i1l7506
 18928  021E                     i1l7454:	
 18929  021E  0879               	movf	_DimmerLights22,w
 18930  021F  3E09               	addlw	9
 18931  0220  0086               	movwf	6
 18932  0221  3001               	movlw	1	; select bank2/3
 18933  0222  0087               	movwf	7
 18934  0223  1E81               	btfss	1,5
 18935  0224  2A43               	goto	i1l7464
 18936  0225  3001               	movlw	1
 18937  0226  00F2               	movwf	??_TMR0_ISR
 18938  0227  0879               	movf	_DimmerLights22,w
 18939  0228  3E03               	addlw	3
 18940  0229  0086               	movwf	6
 18941  022A  3001               	movlw	1	; select bank2/3
 18942  022B  0087               	movwf	7
 18943  022C  0872               	movf	??_TMR0_ISR,w
 18944  022D  0781               	addwf	1,f
 18945  022E  0879               	movf	_DimmerLights22,w
 18946  022F  3E03               	addlw	3
 18947  0230  0086               	movwf	6
 18948  0231  3001               	movlw	1	; select bank2/3
 18949  0232  0087               	movwf	7
 18950  0233  3014               	movlw	20
 18951  0234  0201               	subwf	1,w
 18952  0235  1C03               	skipc
 18953  0236  2A43               	goto	i1l7464
 18954  0237  0879               	movf	_DimmerLights22,w
 18955  0238  3E03               	addlw	3
 18956  0239  0086               	movwf	6
 18957  023A  3001               	movlw	1	; select bank2/3
 18958  023B  0087               	movwf	7
 18959  023C  0181               	clrf	1
 18960  023D  0879               	movf	_DimmerLights22,w
 18961  023E  3E09               	addlw	9
 18962  023F  0086               	movwf	6
 18963  0240  3001               	movlw	1	; select bank2/3
 18964  0241  0087               	movwf	7
 18965  0242  1281               	bcf	1,5
 18966  0243                     i1l7464:	
 18967  0243  0879               	movf	_DimmerLights22,w
 18968  0244  3E07               	addlw	7
 18969  0245  0086               	movwf	6
 18970  0246  3001               	movlw	1	; select bank2/3
 18971  0247  0087               	movwf	7
 18972  0248  1C01               	btfss	1,0
 18973  0249  2AF7               	goto	i1l7506
 18974  024A  0879               	movf	_DimmerLights22,w
 18975  024B  3E07               	addlw	7
 18976  024C  0086               	movwf	6
 18977  024D  3001               	movlw	1	; select bank2/3
 18978  024E  0087               	movwf	7
 18979  024F  1001               	bcf	1,0
 18980  0250  0879               	movf	_DimmerLights22,w
 18981  0251  0086               	movwf	6
 18982  0252  3001               	movlw	1	; select bank2/3
 18983  0253  0087               	movwf	7
 18984  0254  1C81               	btfss	1,1
 18985  0255  2AF7               	goto	i1l7506
 18986  0256  3001               	movlw	1
 18987  0257  00F2               	movwf	??_TMR0_ISR
 18988  0258  0A79               	incf	_DimmerLights22,w
 18989  0259  0086               	movwf	6
 18990  025A  3001               	movlw	1	; select bank2/3
 18991  025B  0087               	movwf	7
 18992  025C  0872               	movf	??_TMR0_ISR,w
 18993  025D  0781               	addwf	1,f
 18994  025E  0A79               	incf	_DimmerLights22,w
 18995  025F  0086               	movwf	6
 18996  0260  3001               	movlw	1	; select bank2/3
 18997  0261  0087               	movwf	7
 18998  0262  0879               	movf	_DimmerLights22,w
 18999  0263  3E02               	addlw	2
 19000  0264  0084               	movwf	4
 19001  0265  3001               	movlw	1	; select bank2/3
 19002  0266  0085               	movwf	5
 19003  0267  0800               	movf	0,w
 19004  0268  0201               	subwf	1,w
 19005  0269  1C03               	skipc
 19006  026A  2AF7               	goto	i1l7506
 19007  026B  0A79               	incf	_DimmerLights22,w
 19008  026C  0086               	movwf	6
 19009  026D  3001               	movlw	1	; select bank2/3
 19010  026E  0087               	movwf	7
 19011  026F  0181               	clrf	1
 19012  0270  0879               	movf	_DimmerLights22,w
 19013  0271  0086               	movwf	6
 19014  0272  3001               	movlw	1	; select bank2/3
 19015  0273  0087               	movwf	7
 19016  0274  1D81               	btfss	1,3
 19017  0275  2AAC               	goto	i1l7490
 19018  0276  0879               	movf	_DimmerLights22,w
 19019  0277  0086               	movwf	6
 19020  0278  3001               	movlw	1	; select bank2/3
 19021  0279  0087               	movwf	7
 19022  027A  1A01               	btfsc	1,4
 19023  027B  2A95               	goto	i1l7484
 19024  027C  0879               	movf	_DimmerLights22,w
 19025  027D  3E04               	addlw	4
 19026  027E  0086               	movwf	6
 19027  027F  3001               	movlw	1	; select bank2/3
 19028  0280  0087               	movwf	7
 19029  0281  3061               	movlw	97
 19030  0282  0201               	subwf	1,w
 19031  0283  1803               	skipnc
 19032  0284  2A8F               	goto	i1l7482
 19033  0285  3001               	movlw	1
 19034  0286  00F2               	movwf	??_TMR0_ISR
 19035  0287  0879               	movf	_DimmerLights22,w
 19036  0288  3E04               	addlw	4
 19037  0289  0086               	movwf	6
 19038  028A  3001               	movlw	1	; select bank2/3
 19039  028B  0087               	movwf	7
 19040  028C  0872               	movf	??_TMR0_ISR,w
 19041  028D  0781               	addwf	1,f
 19042  028E  2AF7               	goto	i1l7506
 19043  028F                     i1l7482:	
 19044  028F  0879               	movf	_DimmerLights22,w
 19045  0290  0086               	movwf	6
 19046  0291  3001               	movlw	1	; select bank2/3
 19047  0292  0087               	movwf	7
 19048  0293  1601               	bsf	1,4
 19049  0294  2AF7               	goto	i1l7506
 19050  0295                     i1l7484:	
 19051  0295  0879               	movf	_DimmerLights22,w
 19052  0296  3E04               	addlw	4
 19053  0297  0086               	movwf	6
 19054  0298  3001               	movlw	1	; select bank2/3
 19055  0299  0087               	movwf	7
 19056  029A  301F               	movlw	31
 19057  029B  0201               	subwf	1,w
 19058  029C  1C03               	skipc
 19059  029D  2AA6               	goto	i1l7488
 19060  029E  0879               	movf	_DimmerLights22,w
 19061  029F  3E04               	addlw	4
 19062  02A0  0086               	movwf	6
 19063  02A1  3001               	movlw	1	; select bank2/3
 19064  02A2  0087               	movwf	7
 19065  02A3  3001               	movlw	1
 19066  02A4  0281               	subwf	1,f
 19067  02A5  2AF7               	goto	i1l7506
 19068  02A6                     i1l7488:	
 19069  02A6  0879               	movf	_DimmerLights22,w
 19070  02A7  0086               	movwf	6
 19071  02A8  3001               	movlw	1	; select bank2/3
 19072  02A9  0087               	movwf	7
 19073  02AA  1201               	bcf	1,4
 19074  02AB  2AF7               	goto	i1l7506
 19075  02AC                     i1l7490:	
 19076  02AC  0879               	movf	_DimmerLights22,w
 19077  02AD  0086               	movwf	6
 19078  02AE  3001               	movlw	1	; select bank2/3
 19079  02AF  0087               	movwf	7
 19080  02B0  1D01               	btfss	1,2
 19081  02B1  2AF2               	goto	i1l7504
 19082  02B2  0879               	movf	_DimmerLights22,w
 19083  02B3  3E04               	addlw	4
 19084  02B4  0086               	movwf	6
 19085  02B5  3001               	movlw	1	; select bank2/3
 19086  02B6  0087               	movwf	7
 19087  02B7  0879               	movf	_DimmerLights22,w
 19088  02B8  3E05               	addlw	5
 19089  02B9  0084               	movwf	4
 19090  02BA  3001               	movlw	1	; select bank2/3
 19091  02BB  0085               	movwf	5
 19092  02BC  0800               	movf	0,w
 19093  02BD  0201               	subwf	1,w
 19094  02BE  1803               	skipnc
 19095  02BF  2ACA               	goto	i1l7496
 19096  02C0  3001               	movlw	1
 19097  02C1  00F2               	movwf	??_TMR0_ISR
 19098  02C2  0879               	movf	_DimmerLights22,w
 19099  02C3  3E04               	addlw	4
 19100  02C4  0086               	movwf	6
 19101  02C5  3001               	movlw	1	; select bank2/3
 19102  02C6  0087               	movwf	7
 19103  02C7  0872               	movf	??_TMR0_ISR,w
 19104  02C8  0781               	addwf	1,f
 19105  02C9  2ADF               	goto	i1l7500
 19106  02CA                     i1l7496:	
 19107  02CA  0879               	movf	_DimmerLights22,w
 19108  02CB  3E05               	addlw	5
 19109  02CC  0086               	movwf	6
 19110  02CD  3001               	movlw	1	; select bank2/3
 19111  02CE  0087               	movwf	7
 19112  02CF  0879               	movf	_DimmerLights22,w
 19113  02D0  3E04               	addlw	4
 19114  02D1  0084               	movwf	4
 19115  02D2  3001               	movlw	1	; select bank2/3
 19116  02D3  0085               	movwf	5
 19117  02D4  0800               	movf	0,w
 19118  02D5  0201               	subwf	1,w
 19119  02D6  1803               	skipnc
 19120  02D7  2ADF               	goto	i1l7500
 19121  02D8  0879               	movf	_DimmerLights22,w
 19122  02D9  3E04               	addlw	4
 19123  02DA  0086               	movwf	6
 19124  02DB  3001               	movlw	1	; select bank2/3
 19125  02DC  0087               	movwf	7
 19126  02DD  3001               	movlw	1
 19127  02DE  0281               	subwf	1,f
 19128  02DF                     i1l7500:	
 19129  02DF  0879               	movf	_DimmerLights22,w
 19130  02E0  3E05               	addlw	5
 19131  02E1  0086               	movwf	6
 19132  02E2  3001               	movlw	1	; select bank2/3
 19133  02E3  0087               	movwf	7
 19134  02E4  0879               	movf	_DimmerLights22,w
 19135  02E5  3E04               	addlw	4
 19136  02E6  0084               	movwf	4
 19137  02E7  3001               	movlw	1	; select bank2/3
 19138  02E8  0085               	movwf	5
 19139  02E9  0800               	movf	0,w
 19140  02EA  0601               	xorwf	1,w
 19141  02EB  1D03               	skipz
 19142  02EC  2AF7               	goto	i1l7506
 19143  02ED  0879               	movf	_DimmerLights22,w
 19144  02EE  0086               	movwf	6
 19145  02EF  3001               	movlw	1	; select bank2/3
 19146  02F0  0087               	movwf	7
 19147  02F1  1101               	bcf	1,2
 19148  02F2                     i1l7504:	
 19149  02F2  0879               	movf	_DimmerLights22,w
 19150  02F3  0086               	movwf	6
 19151  02F4  3001               	movlw	1	; select bank2/3
 19152  02F5  0087               	movwf	7
 19153  02F6  1081               	bcf	1,1
 19154  02F7                     i1l7506:	
 19155                           
 19156                           ;MCU_B1.c: 158: Timer0->Count++;
 19157  02F7  0021               	movlb	1	; select bank1
 19158  02F8  0A67               	incf	_Timer0^(0+128),w
 19159  02F9  0086               	movwf	6
 19160  02FA  3001               	movlw	1	; select bank2/3
 19161  02FB  0087               	movwf	7
 19162  02FC  3001               	movlw	1
 19163  02FD  0781               	addwf	1,f
 19164  02FE  3141               	addfsr 1,1
 19165  02FF  1803               	skipnc
 19166  0300  0A81               	incf	1,f
 19167                           
 19168                           ;MCU_B1.c: 159: if (Timer0->Count == 200) {
 19169  0301  0A67               	incf	_Timer0^(0+128),w
 19170  0302  0086               	movwf	6
 19171  0303  3001               	movlw	1	; select bank2/3
 19172  0304  0087               	movwf	7
 19173  0305  3F40               	moviw [0]fsr1
 19174  0306  3AC8               	xorlw	200
 19175  0307  1D03               	skipz
 19176  0308  2B0B               	goto	u684_25
 19177  0309  3F41               	moviw [1]fsr1
 19178  030A  3A00               	xorlw	0
 19179  030B                     u684_25:	
 19180  030B  1D03               	skipz
 19181  030C  2B19               	goto	i1l1360
 19182                           
 19183                           ;MCU_B1.c: 160: Timer0->Count = 0;
 19184  030D  0A67               	incf	_Timer0^(0+128),w
 19185  030E  0086               	movwf	6
 19186  030F  3001               	movlw	1	; select bank2/3
 19187  0310  0087               	movwf	7
 19188  0311  3000               	movlw	0
 19189  0312  3FC0               	movwi [0]fsr1
 19190  0313  3FC1               	movwi [1]fsr1
 19191                           
 19192                           ;MCU_B1.c: 161: myMain->T0_Timerout = 1;
 19193  0314  0869               	movf	_myMain^(0+128),w
 19194  0315  0086               	movwf	6
 19195  0316  3001               	movlw	1	; select bank2/3
 19196  0317  0087               	movwf	7
 19197  0318  1481               	bsf	1,1
 19198  0319                     i1l1360:	
 19199                           
 19200                           ;MCU_B1.c: 162: }
 19201                           ;MCU_B1.c: 165: if (Buz->GO) {
 19202  0319  0837               	movf	_Buz^(0+128),w
 19203  031A  0086               	movwf	6
 19204  031B  3001               	movlw	1	; select bank2/3
 19205  031C  0087               	movwf	7
 19206  031D  1C81               	btfss	1,1
 19207  031E  0008               	return
 19208                           
 19209                           ;MCU_B1.c: 166: Buz->Time++;
 19210  031F  0A37               	incf	_Buz^(0+128),w
 19211  0320  0086               	movwf	6
 19212  0321  3001               	movlw	1	; select bank2/3
 19213  0322  0087               	movwf	7
 19214  0323  3001               	movlw	1
 19215  0324  0781               	addwf	1,f
 19216  0325  3141               	addfsr 1,1
 19217  0326  1803               	skipnc
 19218  0327  0A81               	incf	1,f
 19219  0328  0008               	return
 19220  0329                     __end_of_TMR0_ISR:	
 19221                           
 19222                           	psect	text125
 19223  1D98                     __ptext125:	
 19224 ;; *************** function i1_setLoad_StatusOff *****************
 19225 ;; Defined at:
 19226 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;  lights          1    wreg     unsigned char 
 19229 ;;  command         1    0[COMMON] unsigned char 
 19230 ;; Auto vars:     Size  Location     Type
 19231 ;;  lights          1    1[COMMON] unsigned char 
 19232 ;; Return value:  Size  Location     Type
 19233 ;;		None               void
 19234 ;; Registers used:
 19235 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19236 ;; Tracked objects:
 19237 ;;		On entry : 0/0
 19238 ;;		On exit  : 0/0
 19239 ;;		Unchanged: 0/0
 19240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19241 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19245 ;;Total ram usage:        2 bytes
 19246 ;; Hardware stack levels used:    1
 19247 ;; This function calls:
 19248 ;;		Nothing
 19249 ;; This function is called by:
 19250 ;;		_TMR0_ISR
 19251 ;; This function uses a non-reentrant model
 19252 ;;
 19253                           
 19254                           
 19255                           ;psect for function i1_setLoad_StatusOff
 19256  1D98                     i1_setLoad_StatusOff:	
 19257                           
 19258                           ;incstack = 0
 19259                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 19260                           ;i1setLoad_StatusOff@lights stored from wreg
 19261  1D98  00F1               	movwf	i1setLoad_StatusOff@lights
 19262                           
 19263                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 19264  1D99  087B               	movf	_Load,w
 19265  1D9A  3E46               	addlw	70
 19266  1D9B  0086               	movwf	6
 19267  1D9C  3002               	movlw	2	; select bank4/5
 19268  1D9D  0087               	movwf	7
 19269  1D9E  0870               	movf	i1setLoad_StatusOff@command,w
 19270  1D9F  1081               	bcf	1,1
 19271  1DA0  1D03               	skipz
 19272  1DA1  1481               	bsf	1,1
 19273                           
 19274                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 19275  1DA2  087B               	movf	_Load,w
 19276  1DA3  3E42               	addlw	66
 19277  1DA4  0086               	movwf	6
 19278  1DA5  3002               	movlw	2	; select bank4/5
 19279  1DA6  0087               	movwf	7
 19280  1DA7  3002               	movlw	2
 19281  1DA8  0281               	subwf	1,f
 19282                           
 19283                           ;OverLoad_B1.c: 287: if (lights == 1) {
 19284  1DA9  0871               	movf	i1setLoad_StatusOff@lights,w
 19285  1DAA  3A01               	xorlw	1
 19286  1DAB  1D03               	skipz
 19287  1DAC  2DB3               	goto	i1l7262
 19288                           
 19289                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 19290  1DAD  087B               	movf	_Load,w
 19291  1DAE  3E43               	addlw	67
 19292  1DAF  0086               	movwf	6
 19293  1DB0  3002               	movlw	2	; select bank4/5
 19294  1DB1  0087               	movwf	7
 19295  1DB2  0181               	clrf	1
 19296  1DB3                     i1l7262:	
 19297                           
 19298                           ;OverLoad_B1.c: 289: }
 19299                           ;OverLoad_B1.c: 290: if (lights == 2) {
 19300  1DB3  0871               	movf	i1setLoad_StatusOff@lights,w
 19301  1DB4  3A02               	xorlw	2
 19302  1DB5  1D03               	skipz
 19303  1DB6  2DBD               	goto	i1l7266
 19304                           
 19305                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 19306  1DB7  087B               	movf	_Load,w
 19307  1DB8  3E44               	addlw	68
 19308  1DB9  0086               	movwf	6
 19309  1DBA  3002               	movlw	2	; select bank4/5
 19310  1DBB  0087               	movwf	7
 19311  1DBC  0181               	clrf	1
 19312  1DBD                     i1l7266:	
 19313                           
 19314                           ;OverLoad_B1.c: 292: }
 19315                           ;OverLoad_B1.c: 293: if (lights == 3) {
 19316  1DBD  0871               	movf	i1setLoad_StatusOff@lights,w
 19317  1DBE  3A03               	xorlw	3
 19318  1DBF  1D03               	skipz
 19319  1DC0  0008               	return
 19320                           
 19321                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 19322  1DC1  087B               	movf	_Load,w
 19323  1DC2  3E45               	addlw	69
 19324  1DC3  0086               	movwf	6
 19325  1DC4  3002               	movlw	2	; select bank4/5
 19326  1DC5  0087               	movwf	7
 19327  1DC6  0181               	clrf	1
 19328  1DC7  0008               	return
 19329  1DC8                     __end_ofi1_setLoad_StatusOff:	
 19330                           
 19331                           	psect	text126
 19332  1A33                     __ptext126:	
 19333 ;; *************** function _IOC_ISR *****************
 19334 ;; Defined at:
 19335 ;;		line 357 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19336 ;; Parameters:    Size  Location     Type
 19337 ;;		None
 19338 ;; Auto vars:     Size  Location     Type
 19339 ;;		None
 19340 ;; Return value:  Size  Location     Type
 19341 ;;		None               void
 19342 ;; Registers used:
 19343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19344 ;; Tracked objects:
 19345 ;;		On entry : 0/0
 19346 ;;		On exit  : 0/0
 19347 ;;		Unchanged: 0/0
 19348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19353 ;;Total ram usage:        0 bytes
 19354 ;; Hardware stack levels used:    1
 19355 ;; Hardware stack levels required when called:    1
 19356 ;; This function calls:
 19357 ;;		_setDimmerReClock
 19358 ;; This function is called by:
 19359 ;;		_ISR
 19360 ;; This function uses a non-reentrant model
 19361 ;;
 19362                           
 19363                           
 19364                           ;psect for function _IOC_ISR
 19365  1A33                     _IOC_ISR:	
 19366                           
 19367                           ;MCU_B1.c: 358: if (IOCIE && IOCBF2) {
 19368                           
 19369                           ;incstack = 0
 19370                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19371  1A33  1D8B               	btfss	11,3	;volatile
 19372  1A34  0008               	return
 19373  1A35  0027               	movlb	7	; select bank7
 19374  1A36  1D16               	btfss	22,2	;volatile
 19375  1A37  0008               	return
 19376                           
 19377                           ;MCU_B1.c: 359: IOCBF2 = 0;
 19378  1A38  1116               	bcf	22,2	;volatile
 19379                           
 19380                           ;MCU_B1.c: 360: IOCIF = 0;
 19381  1A39  100B               	bcf	11,0	;volatile
 19382                           
 19383                           ;MCU_B1.c: 361: if (myMain->PowerON) {
 19384  1A3A  0021               	movlb	1	; select bank1
 19385  1A3B  0869               	movf	_myMain^(0+128),w
 19386  1A3C  0086               	movwf	6
 19387  1A3D  3001               	movlw	1	; select bank2/3
 19388  1A3E  0087               	movwf	7
 19389  1A3F  1C01               	btfss	1,0
 19390  1A40  0008               	return
 19391                           
 19392                           ;MCU_B1.c: 374: Dimmer->Correction = 0;
 19393  1A41  083A               	movf	_Dimmer^(0+128),w
 19394  1A42  3E02               	addlw	2
 19395  1A43  0086               	movwf	6
 19396  1A44  0187               	clrf	7
 19397  1A45  0181               	clrf	1
 19398                           
 19399                           ;MCU_B1.c: 375: setDimmerReClock();
 19400  1A46  319E  265A         	fcall	_setDimmerReClock
 19401  1A48  0008               	return
 19402  1A49                     __end_of_IOC_ISR:	
 19403                           
 19404                           	psect	text127
 19405  1E5A                     __ptext127:	
 19406 ;; *************** function _setDimmerReClock *****************
 19407 ;; Defined at:
 19408 ;;		line 175 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19409 ;; Parameters:    Size  Location     Type
 19410 ;;		None
 19411 ;; Auto vars:     Size  Location     Type
 19412 ;;		None
 19413 ;; Return value:  Size  Location     Type
 19414 ;;		None               void
 19415 ;; Registers used:
 19416 ;;		wreg, fsr1l, fsr1h
 19417 ;; Tracked objects:
 19418 ;;		On entry : 0/0
 19419 ;;		On exit  : 0/0
 19420 ;;		Unchanged: 0/0
 19421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;Total ram usage:        0 bytes
 19427 ;; Hardware stack levels used:    1
 19428 ;; This function calls:
 19429 ;;		Nothing
 19430 ;; This function is called by:
 19431 ;;		_IOC_ISR
 19432 ;; This function uses a non-reentrant model
 19433 ;;
 19434                           
 19435                           
 19436                           ;psect for function _setDimmerReClock
 19437  1E5A                     _setDimmerReClock:	
 19438                           
 19439                           ;MCU_B1.c: 176: TMR0 = 255;
 19440                           
 19441                           ;incstack = 0
 19442                           ; Regs used in _setDimmerReClock: [wregfsr1]
 19443  1E5A  30FF               	movlw	255
 19444  1E5B  0020               	movlb	0	; select bank0
 19445  1E5C  0095               	movwf	21	;volatile
 19446                           
 19447                           ;MCU_B1.c: 188: if (!DimmerLights11->GO && !DimmerLights11->MosfetOpen) {
 19448  1E5D  0878               	movf	_DimmerLights11,w
 19449  1E5E  0086               	movwf	6
 19450  1E5F  3001               	movlw	1	; select bank2/3
 19451  1E60  0087               	movwf	7
 19452  1E61  1801               	btfsc	1,0
 19453  1E62  2E75               	goto	i1l6994
 19454  1E63  0878               	movf	_DimmerLights11,w
 19455  1E64  3E09               	addlw	9
 19456  1E65  0086               	movwf	6
 19457  1E66  3001               	movlw	1	; select bank2/3
 19458  1E67  0087               	movwf	7
 19459  1E68  1A81               	btfsc	1,5
 19460  1E69  2E75               	goto	i1l6994
 19461                           
 19462                           ;MCU_B1.c: 189: DimmerLights11->GO = 1;
 19463  1E6A  0878               	movf	_DimmerLights11,w
 19464  1E6B  0086               	movwf	6
 19465  1E6C  3001               	movlw	1	; select bank2/3
 19466  1E6D  0087               	movwf	7
 19467  1E6E  1401               	bsf	1,0
 19468                           
 19469                           ;MCU_B1.c: 190: if (DimmerLights11->StatusFlag) {
 19470  1E6F  0878               	movf	_DimmerLights11,w
 19471  1E70  0086               	movwf	6
 19472  1E71  3001               	movlw	1	; select bank2/3
 19473  1E72  0087               	movwf	7
 19474  1E73  1B01               	btfsc	1,6
 19475                           
 19476                           ;MCU_B1.c: 191: RA7 = 1;
 19477  1E74  178C               	bsf	12,7	;volatile
 19478  1E75                     i1l6994:	
 19479                           ;MCU_B1.c: 192: ;;
 19480                           
 19481                           
 19482                           ;MCU_B1.c: 193: }
 19483                           ;MCU_B1.c: 194: }
 19484                           ;MCU_B1.c: 229: if (!DimmerLights22->GO && !DimmerLights22->MosfetOpen) {
 19485  1E75  0879               	movf	_DimmerLights22,w
 19486  1E76  0086               	movwf	6
 19487  1E77  3001               	movlw	1	; select bank2/3
 19488  1E78  0087               	movwf	7
 19489  1E79  1801               	btfsc	1,0
 19490  1E7A  0008               	return
 19491  1E7B  0879               	movf	_DimmerLights22,w
 19492  1E7C  3E09               	addlw	9
 19493  1E7D  0086               	movwf	6
 19494  1E7E  3001               	movlw	1	; select bank2/3
 19495  1E7F  0087               	movwf	7
 19496  1E80  1A81               	btfsc	1,5
 19497  1E81  0008               	return
 19498                           
 19499                           ;MCU_B1.c: 230: DimmerLights22->GO = 1;
 19500  1E82  0879               	movf	_DimmerLights22,w
 19501  1E83  0086               	movwf	6
 19502  1E84  3001               	movlw	1	; select bank2/3
 19503  1E85  0087               	movwf	7
 19504  1E86  1401               	bsf	1,0
 19505                           
 19506                           ;MCU_B1.c: 231: if (DimmerLights22->StatusFlag) {
 19507  1E87  0879               	movf	_DimmerLights22,w
 19508  1E88  0086               	movwf	6
 19509  1E89  3001               	movlw	1	; select bank2/3
 19510  1E8A  0087               	movwf	7
 19511  1E8B  1F01               	btfss	1,6
 19512  1E8C  0008               	return
 19513                           
 19514                           ;MCU_B1.c: 232: RB4 = 1;
 19515  1E8D  160D               	bsf	13,4	;volatile
 19516  1E8E  0008               	return
 19517  1E8F                     __end_of_setDimmerReClock:	
 19518                           
 19519                           	psect	text128
 19520  1867                     __ptext128:	
 19521 ;; *************** function _INT_ISR *****************
 19522 ;; Defined at:
 19523 ;;		line 310 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19524 ;; Parameters:    Size  Location     Type
 19525 ;;		None
 19526 ;; Auto vars:     Size  Location     Type
 19527 ;;		None
 19528 ;; Return value:  Size  Location     Type
 19529 ;;		None               void
 19530 ;; Registers used:
 19531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19532 ;; Tracked objects:
 19533 ;;		On entry : 0/0
 19534 ;;		On exit  : 0/0
 19535 ;;		Unchanged: 0/0
 19536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19541 ;;Total ram usage:        0 bytes
 19542 ;; Hardware stack levels used:    1
 19543 ;; Hardware stack levels required when called:    2
 19544 ;; This function calls:
 19545 ;;		_setRF_ReceiveGO
 19546 ;; This function is called by:
 19547 ;;		_ISR
 19548 ;; This function uses a non-reentrant model
 19549 ;;
 19550                           
 19551                           
 19552                           ;psect for function _INT_ISR
 19553  1867                     _INT_ISR:	
 19554                           
 19555                           ;MCU_B1.c: 311: if (INTE && INTF) {
 19556                           
 19557                           ;incstack = 0
 19558                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19559  1867  1E0B               	btfss	11,4	;volatile
 19560  1868  0008               	return
 19561  1869  1C8B               	btfss	11,1	;volatile
 19562  186A  0008               	return
 19563                           
 19564                           ;MCU_B1.c: 312: INTF = 0;
 19565  186B  108B               	bcf	11,1	;volatile
 19566                           
 19567                           ;MCU_B1.c: 313: INTE = 0;
 19568  186C  120B               	bcf	11,4	;volatile
 19569                           
 19570                           ;MCU_B1.c: 314: setRF_ReceiveGO(1, 1);
 19571  186D  01F2               	clrf	setRF_ReceiveGO@command
 19572  186E  0AF2               	incf	setRF_ReceiveGO@command,f
 19573  186F  3001               	movlw	1
 19574  1870  3198  20BB         	fcall	_setRF_ReceiveGO
 19575  1872  0008               	return
 19576  1873                     __end_of_INT_ISR:	
 19577                           
 19578                           	psect	text129
 19579  18BB                     __ptext129:	
 19580 ;; *************** function _setRF_ReceiveGO *****************
 19581 ;; Defined at:
 19582 ;;		line 36 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 19583 ;; Parameters:    Size  Location     Type
 19584 ;;  rf              1    wreg     unsigned char 
 19585 ;;  command         1    2[COMMON] unsigned char 
 19586 ;; Auto vars:     Size  Location     Type
 19587 ;;  rf              1    3[COMMON] unsigned char 
 19588 ;; Return value:  Size  Location     Type
 19589 ;;		None               void
 19590 ;; Registers used:
 19591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19592 ;; Tracked objects:
 19593 ;;		On entry : 0/0
 19594 ;;		On exit  : 0/0
 19595 ;;		Unchanged: 0/0
 19596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19597 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19601 ;;Total ram usage:        2 bytes
 19602 ;; Hardware stack levels used:    1
 19603 ;; Hardware stack levels required when called:    1
 19604 ;; This function calls:
 19605 ;;		i1_RfPointSelect
 19606 ;; This function is called by:
 19607 ;;		_INT_ISR
 19608 ;; This function uses a non-reentrant model
 19609 ;;
 19610                           
 19611                           
 19612                           ;psect for function _setRF_ReceiveGO
 19613  18BB                     _setRF_ReceiveGO:	
 19614                           
 19615                           ;incstack = 0
 19616                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19617                           ;setRF_ReceiveGO@rf stored from wreg
 19618  18BB  00F3               	movwf	setRF_ReceiveGO@rf
 19619                           
 19620                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 19621  18BC  0873               	movf	setRF_ReceiveGO@rf,w
 19622  18BD  31A7  27D4         	fcall	i1_RfPointSelect
 19623                           
 19624                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 19625  18BF  0021               	movlb	1	; select bank1
 19626  18C0  083D               	movf	_RF^(0+128),w
 19627  18C1  0086               	movwf	6
 19628  18C2  0187               	clrf	7
 19629  18C3  0872               	movf	setRF_ReceiveGO@command,w
 19630  18C4  1081               	bcf	1,1
 19631  18C5  1D03               	skipz
 19632  18C6  1481               	bsf	1,1
 19633  18C7  0008               	return
 19634  18C8                     __end_of_setRF_ReceiveGO:	
 19635                           
 19636                           	psect	text130
 19637  27D4                     __ptext130:	
 19638 ;; *************** function i1_RfPointSelect *****************
 19639 ;; Defined at:
 19640 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 19641 ;; Parameters:    Size  Location     Type
 19642 ;;  rf              1    wreg     unsigned char 
 19643 ;; Auto vars:     Size  Location     Type
 19644 ;;  rf              1    1[COMMON] unsigned char 
 19645 ;; Return value:  Size  Location     Type
 19646 ;;		None               void
 19647 ;; Registers used:
 19648 ;;		wreg
 19649 ;; Tracked objects:
 19650 ;;		On entry : 0/0
 19651 ;;		On exit  : 0/0
 19652 ;;		Unchanged: 0/0
 19653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19658 ;;Total ram usage:        2 bytes
 19659 ;; Hardware stack levels used:    1
 19660 ;; This function calls:
 19661 ;;		Nothing
 19662 ;; This function is called by:
 19663 ;;		_setRF_ReceiveGO
 19664 ;; This function uses a non-reentrant model
 19665 ;;
 19666                           
 19667                           
 19668                           ;psect for function i1_RfPointSelect
 19669  27D4                     i1_RfPointSelect:	
 19670                           
 19671                           ;incstack = 0
 19672                           ; Regs used in i1_RfPointSelect: [wreg]
 19673                           ;i1RfPointSelect@rf stored from wreg
 19674  27D4  00F1               	movwf	i1RfPointSelect@rf
 19675                           
 19676                           ;RF_Control_B1.c: 9: if (rf == 1) {
 19677  27D5  0871               	movf	i1RfPointSelect@rf,w
 19678  27D6  3A01               	xorlw	1
 19679  27D7  1D03               	skipz
 19680  27D8  0008               	return
 19681                           
 19682                           ;RF_Control_B1.c: 10: RF = &RF1;
 19683  27D9  30DF               	movlw	_RF1& (0+255)
 19684  27DA  00F0               	movwf	??i1_RfPointSelect
 19685  27DB  0870               	movf	??i1_RfPointSelect,w
 19686  27DC  0021               	movlb	1	; select bank1
 19687  27DD  00BD               	movwf	_RF^(0+128)
 19688  27DE  0008               	return
 19689  27DF                     __end_ofi1_RfPointSelect:	
 19690  007E                     btemp	set	126	;btemp
 19691  007E                     pic14e$flags	set	126
 19692  007E                     wtemp	set	126
 19693  007E                     wtemp0	set	126
 19694  0080                     wtemp1	set	128
 19695  0082                     wtemp2	set	130
 19696  0084                     wtemp3	set	132
 19697  0086                     wtemp4	set	134
 19698  0088                     wtemp5	set	136
 19699  007F                     wtemp6	set	127
 19700  007E                     ttemp	set	126
 19701  007E                     ttemp0	set	126
 19702  0081                     ttemp1	set	129
 19703  0084                     ttemp2	set	132
 19704  0087                     ttemp3	set	135
 19705  007F                     ttemp4	set	127
 19706  007E                     ltemp	set	126
 19707  007E                     ltemp0	set	126
 19708  0082                     ltemp1	set	130
 19709  0086                     ltemp2	set	134
 19710  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         269
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     80      80
    BANK1            80      0      74
    BANK2            80      0      69
    BANK3            80      0      49
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK3[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   92006
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
                         _getLoad_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1840
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     470
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     139
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   22096
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   22096
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9690
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1360
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     916
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     916
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28954
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   28954
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   27950
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1487
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26410
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    7560
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6064
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     269
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_Exceptions                              1     1      0    4587
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_ERROR                                2     2      0    2659
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1013
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1013
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10538
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10459
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    7025
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1637
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     885
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10231
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10231
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0       0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Oct 04 17:12:22 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 07FE             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BD  
                __end_of_CC2500_WriteREG 1AD5                                       _WR 0CA9  
                                     _Sw 007A       __end_of_getDimmerLights_StatusFlag 1A75  
             _getDimmerLights_StatusFlag 1A5F                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 12E8                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1E29                     _setDimmerLights_Main 08A0  
                           ___ftadd@sign 0048                                      l311 1DF2  
                                    l308 1DEC                                      l341 1AAF  
                                    l342 1AB1                                      l280 10A7  
                                    l353 1AC4                                      l281 10AC  
                                    l371 1B46                                      l291 1407  
                                    l275 107D                                      l284 10AF  
                                    l365 1940                                      l295 1418  
                                    l377 1C75                                      l833 149F  
                                    l786 19C3                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0015  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BC                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00DF  
                                    _ISR 0004                                      _WDT 00E8  
                                    _Sw1 014A                                      _Sw2 0153  
                                    _Buz 00B7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1ABC           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1873                          __end_of_ADC_Set 279B  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0B75  
                  _setDimmerLights_ERROR 11DA                    _setDimmerLights_AdjRF 07DC  
                  _setDimmerLights_AdjGo 1978                    _setDimmerLights_Clear 1968  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1A49                               Load_Main@i 0031  
                           ___ftdiv@sign 003D                                     l3101 0EB1  
               ?_DimmerLightsPointSelect 0070                                     l1419 1E53  
                                   l2332 1186                                     l2350 1A54  
                                   l3072 13D7                                     l1393 1A7F  
                                   l2364 1F65                          __end_of_IOC_Set 18E2  
                                   l3078 13EE                                     l6022 12BB  
                                   l2726 2776                                     l2911 1BB6  
                                   l1776 1FE6                                     l6112 1E9C  
                                   l6032 12DA                                     l1769 0573  
                                   l6026 12C1                                     l6028 12CE  
                                   l6150 1BA6                                     l5610 13BE  
                                   l8002 1336                                     l7300 07CB  
                                   l5620 13E4                                     l5612 13C3  
                                   l5604 13AD                                     l8020 1026  
                                   l6148 1BA0                                     l6404 108F  
                                   l5700 0ED5                                     l8006 133C  
                                   l5710 0EF0                                     l5608 13B4  
                                   l5720 0CCC                                     l8016 101B  
                                   l7240 1ED9                                     l6248 1F53  
                                   l9000 0B00                                     l5618 13DC  
                                   l7250 1EF4                                     l5650 0E3A  
                                   l8202 0A39                                     l9010 0B39  
                                   l5740 0D23                                     l5812 1792  
                                   l6284 1A6F                                     l8052 0BDD  
                                   l5660 0E50                                     l5638 1C15  
                                   l5726 0CE2                                     l5830 17C2  
                                   l8062 1E14                                     l7246 1EEB  
                                   l7238 1ECD                                     l5654 0E41  
                                   l8206 0A42                                     l9022 0B70  
                                   l9006 0B31                                     l5840 17E6  
                                   l5832 17D0                                     l9104 0482  
                                   l5680 0E87                                     l5672 0E6A  
                                   l5842 17E9                                     l5930 19D7  
                                   l5914 1C38                                     l8066 1E1E  
                                   l8314 1E37                                     l9122 04EA  
                                   l9106 049A                                     l8234 142A  
                                   l5690 0EA3                                     l5682 0E8C  
                                   l5762 0D75                                     l9050 1773  
                                   l9042 1747                                     l8260 1C86  
                                   l5748 0D3C                                     l9116 04D1  
                                   l8236 1442                                     l5692 0EAD  
                                   l5684 0E90                                     l5780 0DC6  
                                   l8500 1662                                     l7294 07BD  
                                   l8262 1C91                                     l5846 17F7  
                                   l5838 17DD                                     l5918 1C43  
                                   l9150 0579                                     l9134 0521  
                                   l9142 055A                                     l9062 0356  
                                   l5678 0E7D                                     l8094 0980  
                                   l8078 0946                                     l7288 0791  
                                   l7296 07C3                                     l8272 1047  
                                   l9144 055D                                     l8248 145B  
                                   l5696 0EC3                                     l5792 0DE2  
                                   l5784 0DCE                                     l5768 0D8B  
                                   l5880 1D4C                                     l8088 096A  
                                   l8432 15B1                                     l8610 08FC  
                                   l8602 08E0                                     l6922 1F2D  
                                   l8290 1492                                     l5882 1D4E  
                                   l5890 1D69                                     l5874 1D46  
                                   l8194 0A27                                     l5868 080C  
                                   l8620 0922                                     l8292 1497  
                                   l9084 03D1                                     l5796 0DEA  
                                   l5884 1D50                                     l5876 1D48  
                                   l8188 0A0C                                     l8380 11A4  
                                   l8436 15C1                                     l7902 1BB0  
                                   l6926 1F34                                     l8286 147F  
                                   l9078 03A3                                     l5878 1D4A  
                                   l8198 0A30                                     l8470 1F95  
                                   l9182 1367                                     l8608 08F3  
                                   l5888 1D55                                     l8392 11BA  
                                   l8456 1603                                     l7922 0858  
                                   l9098 0466                                     l8730 0A60  
                                   l8466 1F85                                     l8802 05EF  
                                   l9186 1375                                     l8804 05F7  
                  _myMain_Initialization 19E0                                     l7926 087C  
                                   l7950 1529                                     l8590 08BC  
                                   l8734 0A69                                     l8744 0A89  
                                   l8586 08AF                                     l8690 1558  
                                   l8842 069B                                     l8818 0624  
                                   l7972 12FE                                     l8924 0F81  
                                   l8684 153F                                     l8772 0AD4  
                                   l8756 0AA5                                     l8828 0656  
                                   l8852 06CE                                     l7982 130E  
                                   l7990 131A                                     l8694 159F  
                                   l8758 0AA9                                     l7968 12F8  
                                   l7976 1304                                     l8792 05DF  
                                   _CFGS 0CAE                                     l7986 1314  
                                   l8794 05E5                                     l7998 1330  
                                   l8968 10F7                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1873                                     _LATC 010E  
                                   u4005 0EA4                                     u4105 0D33  
                                   u4115 0D3D                                     u4225 0DEB  
                                   u4075 0CF4                                     u4235 0DF1  
                                   u4155 0D97                                     u4085 0D04  
                                   u4325 17DE                                     u4165 0DA7  
                                   u4095 0D24                                     u4265 1799  
                                   u4185 0DCF                                     u4195 0DD5  
                                   _PEIE 005E                                     u3725 13B9  
                                   _INTE 005C                                     _INTF 0059  
                                   u4295 17C3                                     u3745 13D2  
                                   u6315 1EDA                                     u3915 0E6B  
                                   u6405 074D                                     u3765 13DF  
                                   u6325 1EE4                                     u6335 1EEC  
                                   u3945 0E7E                                     u3795 13F5  
                                   u7405 1BB7                                     u7415 1BBC  
                                   u6295 1ED0                                     u3975 0E91  
                                   u9045 041D                                     u7470 14D8  
                                   u7475 14D6                                     u7740 27D2  
                                   u9095 04B2                                     u7915 1C7B  
                                   u8835 10DE                                     u8925 0B5C  
                                   u8955 171A                                     _LWLO 0CAD  
                                   u8885 0B1B                                     u8965 175D  
                                   _RFSW 00BE                                     _TMR0 0015  
                        __end_of_INT_Set 2781                                     _RSSI 00BF  
                                   _WREN 0CAA                                     _Buz1 013E  
                                   __WDT 00E2                                     _Load 007B  
                                   _main 1346                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 1700                          __end_of_RF_Main 2776  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1AA3  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1E5A                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0021                            _RfPointSelect 188B  
             __end_of_setRFSW_AdjControl 1F7B                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 0076  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 18BB                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 1A33  
                                  ?_main 006C                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0F08                          __end_of___ftdiv 0D5E  
                        __end_of___ftmul 0E12                          __end_of___fttol 1800  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1EFB                   _setDimmerLights_Switch 1948  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E4  
                                  _RFSW2 00E5                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0030  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 0329             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 18EF                                    _getAD 1A75  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 14CE  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                        __end_of_my_Main 1779                           _setLoad_Enable 1998  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1B90              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 19B9                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 14CE  
            __size_of_Flash_Memory_Write 0031                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1231  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 13A4  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 276E  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0C0F                     _setSw_Initialization 27B2  
             __size_of_setLoad_StatusOff 0031                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 09B9                   ?_Buzzer_Initialization 0070  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
                              ??_IOC_ISR 0070                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 19CC  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 19A8                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 1687                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1C2C                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1405                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1958                                   i1l1316 01AA  
                                 i1l1360 0319                                   i1l7410 0142  
                                 i1l7500 02DF                                   i1l7412 0148  
                                 i1l7262 1DB3                                   i1l7504 02F2  
                                 i1l7424 017D                                   i1l7432 01A5  
                                 i1l7416 0159                                   i1l7266 1DBD  
                                 i1l7506 02F7                                   i1l7418 015F  
                                 i1l7428 0192                                   i1l7454 021E  
                                 i1l7382 00D1                                   i1l7464 0243  
                                 i1l7392 00F6                                   i1l7482 028F  
                                 i1l7490 02AC                                   i1l7484 0295  
                                 i1l7496 02CA                                   i1l7488 02A6  
                                 i1l6994 1E75                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u651_25 0091                       __size_of_Load_Main 029F  
                                 u684_25 030B                                   u668_25 01DE  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1AEE                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 278D  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1A09  
                                 _Dimmer 00BA                                   _DlySw1 00C6  
                                 _DlySw2 00CB              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 1B3D                      __end_of_Buzzer_Main 07DC  
                                 _Memory 00E6                                   _Timer0 00E7  
     __end_of_setDimmerLights_TriggerAdj 1998               _setDimmerLights_TriggerAdj 1988  
          setDimmerLights_Switch@command 0022                                   ___wmul 1BAD  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
                        i1_RfPointSelect 27D4              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C4  
                                 _s_data 00C5                                   _setLED 12E8  
                                 _myMain 00E9                         _DimmerLightsIntr 00BB  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 0817              __end_of_Load_Initialization 18D5  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002A                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 19E0                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1A49  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 2776  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 128C  
       __end_of_CC2500_registers_address 182F                  __end_of__initialization 0051  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1BEA                            __end_of_getAD 1A8B  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 18A3                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0065                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                      __end_of_Load_Main 05C8                 __end_of_setDimmerReClock 1E8F  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0023  
                         _DimmerLights11 0078                           _DimmerLights22 0079  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0723  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 27A2  
                             __pnvCOMMON 007D                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0077  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 27DF  
                    i1_setLoad_StatusOff 1D98                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 0029                               __pmaintext 1346  
                    _CC2500_WriteCommand 1938         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0072  
                             ??_TMR0_Set 0020                               _getLoad_AD 0ADF  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A6  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 2794                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 27A2  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1F3B  
                __end_of_RfSWPointSelect 1A5F                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1A33  
                                _IOC_Set 18D5                     __size_of_setLog_Code 0048  
                                _INT_ISR 1867                                  _INT_Set 277B  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 10BA  
                      _Flash_Memory_Read 1AD5                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 2772  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1A8B          __end_of_setControl_Lights_Table 0A4B  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 15A7                          _setPercentValue 10FF  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0070                                  _Dimmer1 00DC  
           __end_of_CC2500_FrequencyCabr 188B                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D4                                  _VarLED2 00D8  
                      __end_of_getRxData 11DA                 _CC2500_registers_address 1800  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1968  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1958  
                                ___ftadd 0E12                           ??_setSw_Enable 0022  
                                ___ftdiv 0CB5                          __size_of___wmul 001E  
                                ___ftmul 0D5E                                  ___fttol 1779  
                    __end_of_Switch_Main 27C2                                  ___lwdiv 1EC4  
                ??_Buzzer_Initialization 0020                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0089  
                         ??_setSw_Status 0023                                  __ptext1 1700  
                                __ptext2 1998                                  __ptext3 19E0  
                                __ptext4 0ADF                                  __ptext5 1A75  
                                __ptext6 1B74                                  __ptext7 07FE  
                                __ptext8 27BA                                  __ptext9 05C8  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 10FF  
              __end_of_Flash_Memory_Read 1AEE                               _setRF_Main 0A4B  
                ??_myMain_Initialization 0020                            _DelayOff_Main 27AA  
                      _DimmerLights_Main 27F5                                  _my_Main 1700  
                      __end_of_setINT_GO 27D4           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 27EA  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 2762  
             __end_of_CC2500_ClearTXFIFO 2766            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 1C2C  
                    _DelayOffPointSelect 0800                                  clrloop0 2788  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 18FC  
                   end_of_initialization 0051                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 27EA                        _CC2500_InitSetREG 1CBE  
                          _DelayTime_1us 1C70                        __end_of_setTxData 0CB5  
             __end_of_Flash_Memory_Write 1E5A                                  init_ram 2781  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 2782  
                             _setSw_Main 05C8                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1B3D                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 19A8  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1405                            _CC2500_TxData 1076  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1D3F  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1539  
                _DimmerLights_Exceptions 1469                              ?_getLoad_AD 0070  
                           __pstringtext 1800                      _Flash_Memory_Unlock 27C2  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
                       _setLoad_StatusOn 1000         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 2800  
                     _Mcu_Initialization 1B22                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4742 0067  
                        _setSw_Main$4743 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C4E                  __end_of_Sw_DimmerOnFunc 1616  
                __end_of_setPercentValue 1145                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1CE8                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1032  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1B58  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 2000  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1B07  
                   _setRF_Initialization 279B                              _Switch_Main 27BA  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 19B9                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 19F4                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0042  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 1BCB  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 02D4  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0089  
                         __end_of_setLED 1346                           __end_of_setBuz 08A0  
                          _setLoad_Count 1A1E          _getDimmerLights_StatusFlag$1712 0022  
                   _CC2500_FrequencyCabr 187F                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0929                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 1E8F                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1B22                                _Load_Main 0329  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
                     ??_setDimmerReClock 0070                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1BEA                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1B74  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D0                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 191A                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1897  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015C  
              ??_DimmerLights_Exceptions 002A                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C0                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C2  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 0028  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 2766  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1EC4  
                  ?_CC2500_FrequencyCabr 0070                         setINT_GO@command 0020  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$3978 006B                              __pbssCOMMON 0077  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 009A  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1C70                  __size_of_setRF_RxStatus 000F  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00E6  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 0094                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 1000              _Flash_Memory_Initialization 0F08  
                              __ptext100 1A49                                __ptext101 1958  
                              __ptext110 2766                                __ptext102 1948  
                              __ptext111 1DC8                                __ptext103 19B9  
                              __ptext120 1AA3                                __ptext112 1CBE  
                              __ptext104 0817                                __ptext121 0723  
                              __ptext113 1BCB                                __ptext105 1BAD  
                              __ptext130 27D4                                __ptext122 1873  
                              __ptext114 1ABC                                __ptext106 27A2  
                              __ptext115 187F                                __ptext107 27DF  
                              __ptext124 0055                                __ptext116 1C70  
                              __ptext108 0800                                __ptext125 1D98  
                              __ptext117 2762                                __ptext109 19F4  
                               ?___ftadd 003E                                __ptext126 1A33  
                              __ptext118 275E                                __ptext127 1E5A  
                              __ptext119 1938                                __ptext128 1867  
                              __ptext129 18BB                                _getRxData 118D  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 09B9                          _setRF_ReceiveGO 18BB  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000C            __end_of_Buzzer_Initialization 187F  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 277B  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 015B            __end_of_setDimmerLights_ERROR 1231  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 07FE  
          __end_of_setDimmerLights_AdjGo 1988                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010                                 ?_my_Main 0070  
          __end_of_setDimmerLights_Clear 1978                                _r_address 00C3  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1866  
          __end_of_myMain_Initialization 19F4                           __size_of_getAD 0016  
                           _setRF_Enable 1D13                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 19CC  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 27CB  
                    __end_of_setLED_Main 1F3B                 __end_of_setLoad_StatusOn 1032  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 18AF  
                        SwPointSelect@sw 0021                                clear_ram0 2787  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0C0F  
    __end_of_DimmerLights_Initialization 1A1E              _DimmerLights_Initialization 1A09  
                     _CC2500_ClearRXFIFO 275E                       _CC2500_ClearTXFIFO 2762  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1938  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1E29                               ?_getRxData 0070  
                               _TMR0_ISR 0055                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1DC8                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 18E2                         _Sw_DimmerAdjFunc 1F7B  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1CBE  
            __end_of_CC2500_WriteCommand 1948                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1B74                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 1616                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B9  
                           setSw_Main@sw 0069                              ??_Load_Main 002D  
                       __size_of_IOC_ISR 0016                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 18A3                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0800                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 118D                    _DlyOff_Initialization 27DF  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                               _Fosc_Set 276A                         __size_of_WDT_Set 0018  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0B75  
                  _Switch_Initialization 18EF                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 18FC  
                   __size_of_Buzzer_Main 00B9                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 1AA3  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 18C8                        setRFSW_Control@sw 0063  
                    _Load_Initialization 18C8                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1D13    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1CE8                       _setLoad_Exceptions 1FBD  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1B58  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 1C0A                         ??_LedPointSelect 0020  
                               ___ftpack 13A4                             _setSw_Status 190B  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1EFB                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 1539  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 0079  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 1929                                 __ptext11 15A7  
                               __ptext20 0A4B                                 __ptext12 1616  
                               __ptext21 118D                                 __ptext13 1F7B  
                               __ptext30 1231                                 __ptext22 1145  
                               __ptext14 1988                                 __ptext31 0D5E  
                               __ptext23 09B9                                 __ptext15 1978  
                               __ptext40 279B                                 __ptext32 0E12  
                               __ptext24 0929                                 __ptext16 18EF  
                               __ptext41 1B22                                 __ptext33 1C96  
                               __ptext25 128C                                 __ptext17 27B2  
                               __ptext50 1FBD                                 __ptext42 1A8B  
                               __ptext34 1076                                 __ptext26 1D3F  
                               __ptext18 2776                                 __ptext51 1B58  
                               __ptext43 18E2                                 __ptext35 1405  
                               __ptext27 1F3B                                 __ptext19 2772  
                               __ptext60 1C4E                                 __ptext52 1D13  
                               __ptext44 1AEE                                 __ptext36 191A  
                               __ptext28 1E8F                                 __ptext61 18AF  
                               __ptext53 27CB                                 __ptext45 18D5  
                               __ptext37 1B3D                                 __ptext29 07DC  
                               __ptext70 27C2                                 __ptext62 1EFB  
                               __ptext54 1469                                 __ptext46 277B  
                               __ptext38 1B90                                 __ptext71 1AD5  
                               __ptext63 18A3                                 __ptext55 1CE8  
                               __ptext47 276A                                 __ptext39 276E  
                               __ptext80 1C2C                                 __ptext72 27F5  
                               __ptext64 19A8                                 __ptext56 11DA  
                               __ptext48 2794                                 __ptext81 1B07  
                               __ptext73 08A0                                 __ptext65 10BA  
                               __ptext57 1968                                 __ptext49 0329  
                               __ptext90 188B                                 __ptext82 27EA  
                               __ptext74 1032                                 __ptext66 1539  
                               __ptext58 1EC4                                 __ptext91 190B  
                               __ptext83 1A5F                                 __ptext75 1DF8  
                               __ptext67 1897                                 __ptext59 18C8  
                               __ptext92 19CC                                 __ptext84 1A09  
                               __ptext76 0B75                                 __ptext68 0F08  
                               __ptext93 14CE                                 __ptext85 1D6B  
                               __ptext77 1000                                 __ptext69 1E29  
                               __ptext94 10FF                                 __ptext86 278D  
                               __ptext78 1A1E                                 __ptext95 1779  
                               __ptext87 27AA                                 __ptext79 12E8  
                               __ptext96 0CB5                                 __ptext88 1687  
                               __ptext97 1C0A                                 __ptext89 0C0F  
                               __ptext98 13A4                                 __ptext99 18FC  
                               __product 01A0                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 190B  
          __end_of_Dimmer_Initialization 2794             __end_of_setDimmerLights_Main 0929  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 005E  
                            _setRF_Learn 1929                 __end_of_CC2500_SIDLEMode 276A  
                         _setRF_RxStatus 191A               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 0817               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1B07                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0035                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 1B90                       _CC2500_InitPATable 1BCB  
    __size_of_getDimmerLights_StatusFlag 0016            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0ADF              __size_of_Mcu_Initialization 001B  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006C            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1DC8                       __end_of_setLoad_GO 27F5  
            __end_of_Flash_Memory_Modify 15A7                        ??_getPercentValue 0059  
                            _setLog_Code 1145                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 27CB                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1ABC                       __end_of_setSw_Main 0723  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1D3F  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0070                   __end_of_setRF_RxStatus 1929  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1D98  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1D6B              __end_of_setDimmerLights_Adj 1076  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0072  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 0028  
                      _RF_Initialization 276E                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                     _Flash_Memory_Erasing 1897  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C1  
        __end_of_DelayOff_Initialization 27AA                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 27B2  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 128C         __size_of_setControl_Lights_Table 0092  
                      _setLoad_StatusOff 1DF8                   __end_of_DelayTimejudge 1D6B  
                 __size_of_RfPointSelect 000C                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1C96  
               __end_of_Sw_DimmerAdjFunc 1FBD                  __end_of_CC2500_ReadByte 1BAD  
           __end_of_setSw_Initialization 27BA                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 1C96  
             __end_of_LED_Initialization 18AF         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020                 __size_of_Sw_DimmerOnFunc 006F  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 2772                 __end_of_Sw_DimmerOffFunc 1687  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1469                    __end_of_CC2500_TxData 10BA  
                  _setLoad_AH_AL_Restore 1C4E                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1DF8  
