

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 06 17:12:22 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043                           
  2044                           	psect	idataBANK3
  2045  1CFD                     __pidataBANK3:	
  2046                           
  2047                           ;initializer for __product
  2048  1CFD  3463               	retlw	99
  2049  1CFE  3402               	retlw	2
  2050  1CFF  3400               	retlw	0
  2051  1D00  3400               	retlw	0
  2052  1D01  3400               	retlw	0
  2053  1D02  3400               	retlw	0
  2054  1D03  3400               	retlw	0
  2055  1D04  3400               	retlw	0
  2056  1D05  3400               	retlw	0
  2057  1D06  3400               	retlw	0
  2058  1D07  3400               	retlw	0
  2059  1D08  3400               	retlw	0
  2060  1D09  34FF               	retlw	255
  2061  1D0A  34FF               	retlw	255
  2062  1D0B  34FF               	retlw	255
  2063  1D0C  3400               	retlw	0
  2064  1D0D  3400               	retlw	0
  2065  1D0E  3400               	retlw	0
  2066  1D0F  3400               	retlw	0
  2067  1D10  3400               	retlw	0
  2068  1D11  3400               	retlw	0
  2069  1D12  3400               	retlw	0
  2070  1D13  3400               	retlw	0
  2071  1D14  3400               	retlw	0
  2072  1D15  3400               	retlw	0
  2073  1D16  3400               	retlw	0
  2074  1D17  3400               	retlw	0
  2075  1D18  3400               	retlw	0
  2076  1D19  3400               	retlw	0
  2077  1D1A  3400               	retlw	0
  2078  1D1B  3400               	retlw	0
  2079  1D1C  3400               	retlw	0
  2080                           
  2081                           	psect	stringtext
  2082  1800                     __pstringtext:	
  2083  1800                     _CC2500_registers_address:	
  2084  1800  3403               	retlw	3
  2085  1801  3416               	retlw	22
  2086  1802  3417               	retlw	23
  2087  1803  341E               	retlw	30
  2088  1804  341F               	retlw	31
  2089  1805  3420               	retlw	32
  2090  1806  342A               	retlw	42
  2091  1807  342B               	retlw	43
  2092  1808  340B               	retlw	11
  2093  1809  340C               	retlw	12
  2094  180A  340D               	retlw	13
  2095  180B  340E               	retlw	14
  2096  180C  340F               	retlw	15
  2097  180D  3410               	retlw	16
  2098  180E  3411               	retlw	17
  2099  180F  3412               	retlw	18
  2100  1810  3413               	retlw	19
  2101  1811  3414               	retlw	20
  2102  1812  340A               	retlw	10
  2103  1813  3415               	retlw	21
  2104  1814  3421               	retlw	33
  2105  1815  3422               	retlw	34
  2106  1816  3418               	retlw	24
  2107  1817  3419               	retlw	25
  2108  1818  341A               	retlw	26
  2109  1819  341B               	retlw	27
  2110  181A  341C               	retlw	28
  2111  181B  341D               	retlw	29
  2112  181C  3423               	retlw	35
  2113  181D  3424               	retlw	36
  2114  181E  3425               	retlw	37
  2115  181F  3426               	retlw	38
  2116  1820  3429               	retlw	41
  2117  1821  342C               	retlw	44
  2118  1822  342D               	retlw	45
  2119  1823  342E               	retlw	46
  2120  1824  3400               	retlw	0
  2121  1825  3401               	retlw	1
  2122  1826  3402               	retlw	2
  2123  1827  3407               	retlw	7
  2124  1828  3408               	retlw	8
  2125  1829  3409               	retlw	9
  2126  182A  3406               	retlw	6
  2127  182B  3404               	retlw	4
  2128  182C  3405               	retlw	5
  2129  182D  3427               	retlw	39
  2130  182E  3428               	retlw	40
  2131  182F                     __end_of_CC2500_registers_address:	
  2132  182F                     _CC2500_rfSettings:	
  2133  182F  3407               	retlw	7
  2134  1830  3407               	retlw	7
  2135  1831  3430               	retlw	48
  2136  1832  3487               	retlw	135
  2137  1833  346B               	retlw	107
  2138  1834  34F8               	retlw	248
  2139  1835  347F               	retlw	127
  2140  1836  343F               	retlw	63
  2141  1837  3409               	retlw	9
  2142  1838  3400               	retlw	0
  2143  1839  345C               	retlw	92
  2144  183A  34A7               	retlw	167
  2145  183B  3462               	retlw	98
  2146  183C  3486               	retlw	134
  2147  183D  3483               	retlw	131
  2148  183E  3403               	retlw	3
  2149  183F  3422               	retlw	34
  2150  1840  34F8               	retlw	248
  2151  1841  3400               	retlw	0
  2152  1842  3444               	retlw	68
  2153  1843  34B6               	retlw	182
  2154  1844  3410               	retlw	16
  2155  1845  3418               	retlw	24
  2156  1846  341D               	retlw	29
  2157  1847  341C               	retlw	28
  2158  1848  34C7               	retlw	199
  2159  1849  3400               	retlw	0
  2160  184A  34B2               	retlw	178
  2161  184B  34EA               	retlw	234
  2162  184C  340A               	retlw	10
  2163  184D  3400               	retlw	0
  2164  184E  3411               	retlw	17
  2165  184F  3459               	retlw	89
  2166  1850  3488               	retlw	136
  2167  1851  3431               	retlw	49
  2168  1852  340B               	retlw	11
  2169  1853  342F               	retlw	47
  2170  1854  342E               	retlw	46
  2171  1855  3406               	retlw	6
  2172  1856  3404               	retlw	4
  2173  1857  3405               	retlw	5
  2174  1858  3400               	retlw	0
  2175  1859  3430               	retlw	48
  2176  185A  34D3               	retlw	211
  2177  185B  3491               	retlw	145
  2178  185C  3441               	retlw	65
  2179  185D  3400               	retlw	0
  2180  185E                     __end_of_CC2500_rfSettings:	
  2181  185E                     _CC2500_patable_vaule:	
  2182  185E  34FE               	retlw	254
  2183  185F  34FE               	retlw	254
  2184  1860  34FE               	retlw	254
  2185  1861  34FE               	retlw	254
  2186  1862  34FE               	retlw	254
  2187  1863  34FE               	retlw	254
  2188  1864  34FE               	retlw	254
  2189  1865  34FE               	retlw	254
  2190  1866                     __end_of_CC2500_patable_vaule:	
  2191                           
  2192                           	psect	nvCOMMON
  2193  007D                     __pnvCOMMON:	
  2194  007D                     _product:	
  2195  007D                     	ds	1
  2196                           
  2197                           	psect	nvBANK1
  2198  00E7                     __pnvBANK1:	
  2199  00E7                     _Memory:	
  2200  00E7                     	ds	1
  2201  00E8                     _Timer0:	
  2202  00E8                     	ds	1
  2203  00E9                     _WDT:	
  2204  00E9                     	ds	1
  2205  00EA                     _myMain:	
  2206  00EA                     	ds	1
  2207  000C                     _PORTA	set	12
  2208  000D                     _PORTB	set	13
  2209  000E                     _PORTC	set	14
  2210  0015                     _TMR0	set	21
  2211  005F                     _GIE	set	95
  2212  005C                     _INTE	set	92
  2213  0059                     _INTF	set	89
  2214  005B                     _IOCIE	set	91
  2215  0058                     _IOCIF	set	88
  2216  005E                     _PEIE	set	94
  2217  0060                     _RA0	set	96
  2218  0063                     _RA3	set	99
  2219  0064                     _RA4	set	100
  2220  0066                     _RA6	set	102
  2221  0067                     _RA7	set	103
  2222  0068                     _RB0	set	104
  2223  0069                     _RB1	set	105
  2224  006A                     _RB2	set	106
  2225  006B                     _RB3	set	107
  2226  006C                     _RB4	set	108
  2227  006D                     _RB5	set	109
  2228  0070                     _RC0	set	112
  2229  0071                     _RC1	set	113
  2230  0072                     _RC2	set	114
  2231  0074                     _RC4	set	116
  2232  0075                     _RC5	set	117
  2233  0077                     _RC7	set	119
  2234  005D                     _TMR0IE	set	93
  2235  005A                     _TMR0IF	set	90
  2236  009D                     _ADCON0	set	157
  2237  009E                     _ADCON1	set	158
  2238  009C                     _ADRESH	set	156
  2239  009B                     _ADRESL	set	155
  2240  0095                     _OPTION_REG	set	149
  2241  0099                     _OSCCON	set	153
  2242  008C                     _TRISA	set	140
  2243  008D                     _TRISB	set	141
  2244  008E                     _TRISC	set	142
  2245  0097                     _WDTCON	set	151
  2246  04E9                     _GO_nDONE	set	1257
  2247  0117                     _FVRCON	set	279
  2248  010C                     _LATA	set	268
  2249  010D                     _LATB	set	269
  2250  010E                     _LATC	set	270
  2251  018C                     _ANSELA	set	396
  2252  018D                     _ANSELB	set	397
  2253  018E                     _ANSELC	set	398
  2254  0192                     _PMADRH	set	402
  2255  0191                     _PMADRL	set	401
  2256  0196                     _PMCON2	set	406
  2257  0194                     _PMDATH	set	404
  2258  0193                     _PMDATL	set	403
  2259  0CAE                     _CFGS	set	3246
  2260  0CAC                     _FREE	set	3244
  2261  0CAD                     _LWLO	set	3245
  2262  0CA8                     _RD	set	3240
  2263  0CA9                     _WR	set	3241
  2264  0CAA                     _WREN	set	3242
  2265  1068                     _WPUB0	set	4200
  2266  1069                     _WPUB1	set	4201
  2267  106A                     _WPUB2	set	4202
  2268  0396                     _IOCBF	set	918
  2269  0395                     _IOCBN	set	917
  2270  0394                     _IOCBP	set	916
  2271  1CB2                     _IOCBF2	set	7346
  2272                           
  2273                           ; #config settings
  2274  0000                     
  2275                           	psect	cinit
  2276  0018                     start_initialization:	
  2277  0018                     __initialization:	
  2278                           
  2279                           ; Clear objects allocated to BITCOMMON
  2280  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2281                           
  2282                           ; Clear objects allocated to COMMON
  2283  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2284  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2285  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2286  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2287                           
  2288                           ; Clear objects allocated to BANK1
  2289  001D  30A0               	movlw	low __pbssBANK1
  2290  001E  0084               	movwf	4
  2291  001F  3000               	movlw	high __pbssBANK1
  2292  0020  0085               	movwf	5
  2293  0021  3047               	movlw	71
  2294  0022  3198  20CC  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK2
  2297  0025  3020               	movlw	low __pbssBANK2
  2298  0026  0084               	movwf	4
  2299  0027  3001               	movlw	high __pbssBANK2
  2300  0028  0085               	movwf	5
  2301  0029  3045               	movlw	69
  2302  002A  3198  20CC  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Clear objects allocated to BANK3
  2305  002D  30C0               	movlw	low __pbssBANK3
  2306  002E  0084               	movwf	4
  2307  002F  3001               	movlw	high __pbssBANK3
  2308  0030  0085               	movwf	5
  2309  0031  3011               	movlw	17
  2310  0032  3198  20CC  3180   	fcall	clear_ram0
  2311                           
  2312                           ; Clear objects allocated to BANK4
  2313  0035  3020               	movlw	low __pbssBANK4
  2314  0036  0084               	movwf	4
  2315  0037  3002               	movlw	high __pbssBANK4
  2316  0038  0085               	movwf	5
  2317  0039  3025               	movlw	37
  2318  003A  3198  20CC  3180   	fcall	clear_ram0
  2319                           
  2320                           ; Clear objects allocated to BANK5
  2321  003D  30A0               	movlw	low __pbssBANK5
  2322  003E  0084               	movwf	4
  2323  003F  3002               	movlw	high __pbssBANK5
  2324  0040  0085               	movwf	5
  2325  0041  3047               	movlw	71
  2326  0042  3198  20CC  3180   	fcall	clear_ram0
  2327                           
  2328                           ; Initialize objects allocated to BANK3
  2329  0045  30FD               	movlw	low __pidataBANK3
  2330  0046  0084               	movwf	4
  2331  0047  309C               	movlw	(high __pidataBANK3)| (0+128)
  2332  0048  0085               	movwf	5
  2333  0049  30A0               	movlw	low __pdataBANK3
  2334  004A  0086               	movwf	6
  2335  004B  3001               	movlw	high __pdataBANK3
  2336  004C  0087               	movwf	7
  2337  004D  3020               	movlw	32
  2338  004E  3198  20C6         	fcall	init_ram
  2339  0050                     end_of_initialization:	
  2340                           ;End of C runtime variable initialization code
  2341                           
  2342  0050                     __end_of__initialization:	
  2343  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2344  0051  0020               	movlb	0
  2345  0052  3194  2C43         	ljmp	_main	;jump to C main() function
  2346                           
  2347                           	psect	bitbssCOMMON
  2348  03E0                     __pbitbssCOMMON:	
  2349  03E0                     _Receive_OK:	
  2350  03E0                     	ds	1
  2351  03E1                     _Transceive_OK:	
  2352  03E1                     	ds	1
  2353                           
  2354                           	psect	bssCOMMON
  2355  0078                     __pbssCOMMON:	
  2356  0078                     _DimmerLights:	
  2357  0078                     	ds	1
  2358  0079                     _DimmerLightsIntr:	
  2359  0079                     	ds	1
  2360  007A                     _Sw:	
  2361  007A                     	ds	1
  2362  007B                     _Load:	
  2363  007B                     	ds	1
  2364                           
  2365                           	psect	bssBANK1
  2366  00A0                     __pbssBANK1:	
  2367  00A0                     _RF_Data:	
  2368  00A0                     	ds	21
  2369  00B5                     _RF_Count:	
  2370  00B5                     	ds	2
  2371  00B7                     _Buz:	
  2372  00B7                     	ds	1
  2373  00B8                     _CRC:	
  2374  00B8                     	ds	1
  2375  00B9                     _DelayOff:	
  2376  00B9                     	ds	1
  2377  00BA                     _Dimmer:	
  2378  00BA                     	ds	1
  2379  00BB                     _DimmerLights11:	
  2380  00BB                     	ds	1
  2381  00BC                     _DimmerLights22:	
  2382  00BC                     	ds	1
  2383  00BD                     _LED:	
  2384  00BD                     	ds	1
  2385  00BE                     _RF:	
  2386  00BE                     	ds	1
  2387  00BF                     _RFSW:	
  2388  00BF                     	ds	1
  2389  00C0                     _RSSI:	
  2390  00C0                     	ds	1
  2391  00C1                     _Rx_Length:	
  2392  00C1                     	ds	1
  2393  00C2                     _SPI0Buffer:	
  2394  00C2                     	ds	1
  2395  00C3                     _Tx_Length:	
  2396  00C3                     	ds	1
  2397  00C4                     _r_address:	
  2398  00C4                     	ds	1
  2399  00C5                     _r_data:	
  2400  00C5                     	ds	1
  2401  00C6                     _s_data:	
  2402  00C6                     	ds	1
  2403  00C7                     _DlySw1:	
  2404  00C7                     	ds	5
  2405  00CC                     _DlySw2:	
  2406  00CC                     	ds	5
  2407  00D1                     _VarErrLED:	
  2408  00D1                     	ds	4
  2409  00D5                     _VarLED1:	
  2410  00D5                     	ds	4
  2411  00D9                     _VarLED2:	
  2412  00D9                     	ds	4
  2413  00DD                     _Dimmer1:	
  2414  00DD                     	ds	3
  2415  00E0                     _RF1:	
  2416  00E0                     	ds	3
  2417  00E3                     __WDT:	
  2418  00E3                     	ds	2
  2419  00E5                     _RFSW1:	
  2420  00E5                     	ds	1
  2421  00E6                     _RFSW2:	
  2422  00E6                     	ds	1
  2423                           
  2424                           	psect	bssBANK2
  2425  0120                     __pbssBANK2:	
  2426  0120                     _DimmerLights1:	
  2427  0120                     	ds	15
  2428  012F                     _DimmerLights2:	
  2429  012F                     	ds	15
  2430  013E                     _Buz1:	
  2431  013E                     	ds	12
  2432  014A                     _Sw1:	
  2433  014A                     	ds	9
  2434  0153                     _Sw2:	
  2435  0153                     	ds	9
  2436  015C                     _VarTimer0:	
  2437  015C                     	ds	9
  2438                           
  2439                           	psect	bssBANK3
  2440  01C0                     __pbssBANK3:	
  2441  01C0                     __myMain:	
  2442  01C0                     	ds	17
  2443                           
  2444                           	psect	dataBANK3
  2445  01A0                     __pdataBANK3:	
  2446  01A0                     __product:	
  2447  01A0                     	ds	32
  2448                           
  2449                           	psect	bssBANK4
  2450  0220                     __pbssBANK4:	
  2451  0220                     _VarMemory:	
  2452  0220                     	ds	37
  2453                           
  2454                           	psect	bssBANK5
  2455  02A0                     __pbssBANK5:	
  2456  02A0                     _Load1:	
  2457  02A0                     	ds	71
  2458                           
  2459                           	psect	clrtext
  2460  18CC                     clear_ram0:	
  2461                           ;	Called with FSR0 containing the base address, and
  2462                           ;	WREG with the size to clear
  2463                           
  2464  18CC  0064               	clrwdt	;clear the watchdog before getting into this loop
  2465  18CD                     clrloop0:	
  2466  18CD  0180               	clrf	0	;clear RAM location pointed to by FSR
  2467  18CE  3101               	addfsr 0,1
  2468  18CF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2469  18D0  28CD               	goto	clrloop0	;have we reached the end yet?
  2470  18D1  3400               	retlw	0	;all done for this memory range, return
  2471                           
  2472                           	psect	inittext
  2473  18C6                     init_ram:	
  2474  18C6  00FE               	movwf	126
  2475  18C7                     initloop:	
  2476  18C7  0012               	moviw fsr0++
  2477  18C8  001E               	movwi fsr1++
  2478  18C9  0BFE               	decfsz	126,f
  2479  18CA  28C7               	goto	initloop
  2480  18CB  3400               	retlw	0
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0070                     __pcstackCOMMON:	
  2484  0070                     ?_CC2500_WriteByte:	
  2485  0070                     ?_CC2500_WriteCommand:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ReadStatus:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ReadByte:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_PowerRST:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_InitSetREG:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_InitPATable:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_ClearTXFIFO:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_ClearRXFIFO:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_FrequencyCabr:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_SIDLEMode:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_DlyOff_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_DlyOff_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setTxData:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setDimmerLights_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_Dimmer_Initialization:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setLoad_GO:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setDimmerLights_Main:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_ERROR:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setLoad_Count:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setLED_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Fosc_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_IO_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_TMR0_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_ADC_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_INT_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_IOC_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Set:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_TMR0_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_INT_ISR:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Flash_Memory_Write:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Flash_Memory_Modify:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_WDT_Clearing:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setLoad_AH_AL_Restore:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setLoad_Exceptions:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setSw_Enable:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setRF_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setRF_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_getRxData:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_RF_RxDisable:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setLog_Code:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setControl_Lights_Table:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRFSW_Control:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setRFSW_AdjControl:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setRF_DimmerValue:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setSw_Initialization:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setSw_Main:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_Sw_DimmerOnFunc:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Sw_DimmerAdjFunc:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Sw_DimmerOffFunc:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_myMain_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_my_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_Buzzer_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Buzzer_Main:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_TxData:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_RxData:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_PowerOnInitial:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DelayOffPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DelayOff_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DelayOff_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DimmerIntrPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ??_DimmerIntrPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_IntrControl:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setDimmerLights_IntrGO:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLightsPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DimmerLights_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_DimmerLights_Close:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerLights_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DimmerLights_Exceptions:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_AdjRF:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LedPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_LED_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Mcu_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_ISR:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerReClock:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setINT_GO:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Flash_Memory_Unlock:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Flash_Memory_Erasing:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_WDT_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Load_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setLoad_Enable:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_RfPointSelect:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_RF_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RF_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RfSWPointSelect:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_TouchPower:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_SwPointSelect:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_Switch_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Switch_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?i1_setLoad_StatusOff:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?i1_RfPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??i1_RfPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_DelayTimejudge:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_getDimmerLights_StatusFlag:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_getPercentValue:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_Flash_Memory_Read:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_setPercentValue:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     setRF_Initialization@rf:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     i1setLoad_StatusOff@command:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800                           
  2801                           ; 1 bytes @ 0x0
  2802  0070                     	ds	1
  2803  0071                     ??i1_setLoad_StatusOff:	
  2804  0071                     DimmerIntrPointSelect@lights:	
  2805                           ; 0 bytes @ 0x1
  2806                           
  2807  0071                     i1setLoad_StatusOff@lights:	
  2808                           ; 1 bytes @ 0x1
  2809                           
  2810  0071                     i1RfPointSelect@rf:	
  2811                           ; 1 bytes @ 0x1
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x1
  2815  0071                     	ds	1
  2816  0072                     ?_setRF_ReceiveGO:	
  2817  0072                     ??_setDimmerLights_IntrControl:	
  2818                           ; 0 bytes @ 0x2
  2819                           
  2820  0072                     ??_setDimmerLights_IntrGO:	
  2821                           ; 0 bytes @ 0x2
  2822                           
  2823  0072                     setDimmerLights_IntrGO@lights:	
  2824                           ; 0 bytes @ 0x2
  2825                           
  2826  0072                     setRF_ReceiveGO@command:	
  2827                           ; 1 bytes @ 0x2
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x2
  2831  0072                     	ds	1
  2832  0073                     ??_IOC_ISR:	
  2833  0073                     ??_setRF_ReceiveGO:	
  2834                           ; 0 bytes @ 0x3
  2835                           
  2836  0073                     ??_setDimmerReClock:	
  2837                           ; 0 bytes @ 0x3
  2838                           
  2839  0073                     setRF_ReceiveGO@rf:	
  2840                           ; 0 bytes @ 0x3
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x3
  2844  0073                     	ds	1
  2845  0074                     ??_INT_ISR:	
  2846                           
  2847                           ; 0 bytes @ 0x4
  2848  0074                     	ds	2
  2849  0076                     setDimmerLights_IntrControl@lights:	
  2850                           
  2851                           ; 1 bytes @ 0x6
  2852  0076                     	ds	1
  2853  0077                     ??_TMR0_ISR:	
  2854  0077                     ??_ISR:	
  2855                           ; 0 bytes @ 0x7
  2856                           
  2857                           
  2858                           ; 0 bytes @ 0x7
  2859  0077                     	ds	1
  2860                           
  2861                           	psect	cstackBANK0
  2862  0020                     __pcstackBANK0:	
  2863  0020                     ??_CC2500_WriteByte:	
  2864  0020                     ??_CC2500_ReadByte:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ?_DelayTime_1us:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_DelayTimejudge:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?_setLoad_StatusOff:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_Dimmer_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_getDimmerLights_StatusFlag:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_setLoad_GO:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_setLoad_Count:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ?_setLoad_StatusOn:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_Fosc_Set:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_IO_Set:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_TMR0_Set:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_ADC_Set:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_INT_Set:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_IOC_Set:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_WDT_Set:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_Flash_Memory_Read:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_Flash_Memory_Write:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_WDT_Clearing:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_setLoad_AH_AL_Restore:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_setRF_Initialization:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_myMain_Initialization:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_Buzzer_Initialization:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_Buzzer_Main:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_DelayOffPointSelect:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_DimmerLightsPointSelect:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_LedPointSelect:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_setINT_GO:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_Flash_Memory_Unlock:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_Flash_Memory_Erasing:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_WDT_Main:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_setLoad_Enable:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_RfPointSelect:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_RfSWPointSelect:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_TouchPower:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_SwPointSelect:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ?_getAD:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ?___wmul:	
  2976                           ; 2 bytes @ 0x0
  2977                           
  2978  0020                     ?___lwdiv:	
  2979                           ; 2 bytes @ 0x0
  2980                           
  2981  0020                     ?___ftpack:	
  2982                           ; 2 bytes @ 0x0
  2983                           
  2984  0020                     setINT_GO@command:	
  2985                           ; 3 bytes @ 0x0
  2986                           
  2987  0020                     getAD@adcon1:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0020                     setLoad_Enable@command:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0020                     setLoad_GO@command:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0020                     setLoad_StatusOn@command:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0020                     setLoad_StatusOff@command:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0020                     DelayTime_1us@count:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0020                     ___wmul@multiplier:	
  3006                           ; 2 bytes @ 0x0
  3007                           
  3008  0020                     ___lwdiv@divisor:	
  3009                           ; 2 bytes @ 0x0
  3010                           
  3011  0020                     ___ftpack@arg:	
  3012                           ; 2 bytes @ 0x0
  3013                           
  3014                           
  3015                           ; 3 bytes @ 0x0
  3016  0020                     	ds	1
  3017  0021                     ??_setLoad_StatusOff:	
  3018  0021                     ??_setLoad_StatusOn:	
  3019                           ; 0 bytes @ 0x1
  3020                           
  3021  0021                     ??_Mcu_Initialization:	
  3022                           ; 0 bytes @ 0x1
  3023                           
  3024  0021                     ??_RF_Initialization:	
  3025                           ; 0 bytes @ 0x1
  3026                           
  3027  0021                     CC2500_WriteByte@loop_a:	
  3028                           ; 0 bytes @ 0x1
  3029                           
  3030  0021                     CC2500_ReadByte@loop_b:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033  0021                     DelayOffPointSelect@sw:	
  3034                           ; 1 bytes @ 0x1
  3035                           
  3036  0021                     DelayTimejudge@value:	
  3037                           ; 1 bytes @ 0x1
  3038                           
  3039  0021                     DimmerLightsPointSelect@lights:	
  3040                           ; 1 bytes @ 0x1
  3041                           
  3042  0021                     getDimmerLights_StatusFlag@Status:	
  3043                           ; 1 bytes @ 0x1
  3044                           
  3045  0021                     LedPointSelect@led:	
  3046                           ; 1 bytes @ 0x1
  3047                           
  3048  0021                     Flash_Memory_Read@i:	
  3049                           ; 1 bytes @ 0x1
  3050                           
  3051  0021                     Flash_Memory_Write@i:	
  3052                           ; 1 bytes @ 0x1
  3053                           
  3054  0021                     setLoad_Count@command:	
  3055                           ; 1 bytes @ 0x1
  3056                           
  3057  0021                     setLoad_StatusOn@lights:	
  3058                           ; 1 bytes @ 0x1
  3059                           
  3060  0021                     setLoad_StatusOff@lights:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0021                     setLoad_AH_AL_Restore@i:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0021                     RfPointSelect@rf:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0021                     RfSWPointSelect@sw:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0021                     SwPointSelect@sw:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075                           
  3076                           ; 1 bytes @ 0x1
  3077  0021                     	ds	1
  3078  0022                     ??_CC2500_WriteCommand:	
  3079  0022                     ??_CC2500_ReadStatus:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0022                     ?_setRF_RxStatus:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0022                     ??_DelayTime_1us:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0022                     ?_CC2500_WriteREG:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0022                     ??_DlyOff_Initialization:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0022                     ?_setSw_Status:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0022                     ?_setRFSW_Status:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0022                     ?_setDimmerLights_Trigger:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0022                     ?_setDimmerLights_Switch:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0022                     ??_setTxData:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0022                     ??_setDimmerLights_Initialization:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0022                     ?_setDimmerLights_TriggerERROR:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0022                     ?_setLED:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0022                     ??_setLED_Main:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0022                     ??_setSw_Enable:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0022                     ?_setRF_Enable:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0022                     ?_setDimmerLights_AdjGo:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0022                     ?_setDimmerLights_TriggerAdj:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0022                     ?_setDimmerLights_Clear:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0022                     ??_Load_Initialization:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0022                     ?_setRF_Learn:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0022                     CC2500_WriteREG@value:	
  3143                           ; 0 bytes @ 0x2
  3144                           
  3145  0022                     DlyOff_Initialization@sw:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     DelayTimejudge@i:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     _getDimmerLights_StatusFlag$1782:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     setDimmerLights_TriggerERROR@command:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     setDimmerLights_Switch@command:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0022                     setDimmerLights_AdjGo@command:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0022                     setDimmerLights_Trigger@command:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0022                     setDimmerLights_TriggerAdj@command:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0022                     setDimmerLights_Clear@command:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0022                     setLED@command:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0022                     Flash_Memory_Read@address:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0022                     setRF_Learn@command:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0022                     setRF_RxStatus@command:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0022                     setRF_Enable@command:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187  0022                     setRFSW_Status@command:	
  3188                           ; 1 bytes @ 0x2
  3189                           
  3190  0022                     setSw_Enable@command:	
  3191                           ; 1 bytes @ 0x2
  3192                           
  3193  0022                     setSw_Status@command:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196  0022                     DelayTime_1us@i:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199  0022                     ___wmul@multiplicand:	
  3200                           ; 2 bytes @ 0x2
  3201                           
  3202  0022                     ___lwdiv@dividend:	
  3203                           ; 2 bytes @ 0x2
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x2
  3207  0022                     	ds	1
  3208  0023                     ??_setRF_RxStatus:	
  3209  0023                     ??_CC2500_WriteREG:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0023                     ??_setSw_Status:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0023                     ??_setRFSW_Status:	
  3216                           ; 0 bytes @ 0x3
  3217                           
  3218  0023                     ??_setDimmerLights_Trigger:	
  3219                           ; 0 bytes @ 0x3
  3220                           
  3221  0023                     ??_setDimmerLights_Switch:	
  3222                           ; 0 bytes @ 0x3
  3223                           
  3224  0023                     ??_setDimmerLights_TriggerERROR:	
  3225                           ; 0 bytes @ 0x3
  3226                           
  3227  0023                     ??_setLED:	
  3228                           ; 0 bytes @ 0x3
  3229                           
  3230  0023                     ??_setRF_Enable:	
  3231                           ; 0 bytes @ 0x3
  3232                           
  3233  0023                     ??_DelayOff_Initialization:	
  3234                           ; 0 bytes @ 0x3
  3235                           
  3236  0023                     ?_setDelayOff_GO:	
  3237                           ; 0 bytes @ 0x3
  3238                           
  3239  0023                     ??_DimmerLights_Close:	
  3240                           ; 0 bytes @ 0x3
  3241                           
  3242  0023                     ??_setDimmerLights_AdjGo:	
  3243                           ; 0 bytes @ 0x3
  3244                           
  3245  0023                     ??_setDimmerLights_TriggerAdj:	
  3246                           ; 0 bytes @ 0x3
  3247                           
  3248  0023                     ??_setDimmerLights_Clear:	
  3249                           ; 0 bytes @ 0x3
  3250                           
  3251  0023                     ??_getAD:	
  3252                           ; 0 bytes @ 0x3
  3253                           
  3254  0023                     ??_setRF_Learn:	
  3255                           ; 0 bytes @ 0x3
  3256                           
  3257  0023                     CC2500_WriteCommand@command:	
  3258                           ; 0 bytes @ 0x3
  3259                           
  3260  0023                     CC2500_ReadStatus@status_addr:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0023                     setDelayOff_GO@command:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0023                     setDimmerLights_Initialization@lights:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269  0023                     setDimmerLights_TriggerERROR@lights:	
  3270                           ; 1 bytes @ 0x3
  3271                           
  3272  0023                     setDimmerLights_Switch@lights:	
  3273                           ; 1 bytes @ 0x3
  3274                           
  3275  0023                     setDimmerLights_AdjGo@lights:	
  3276                           ; 1 bytes @ 0x3
  3277                           
  3278  0023                     setDimmerLights_Trigger@lights:	
  3279                           ; 1 bytes @ 0x3
  3280                           
  3281  0023                     setDimmerLights_TriggerAdj@lights:	
  3282                           ; 1 bytes @ 0x3
  3283                           
  3284  0023                     setDimmerLights_Clear@lights:	
  3285                           ; 1 bytes @ 0x3
  3286                           
  3287  0023                     setLED@led:	
  3288                           ; 1 bytes @ 0x3
  3289                           
  3290  0023                     getAD@adcon0:	
  3291                           ; 1 bytes @ 0x3
  3292                           
  3293  0023                     Flash_Memory_Read@ret:	
  3294                           ; 1 bytes @ 0x3
  3295                           
  3296  0023                     setRF_Learn@rf:	
  3297                           ; 1 bytes @ 0x3
  3298                           
  3299  0023                     setRF_RxStatus@rf:	
  3300                           ; 1 bytes @ 0x3
  3301                           
  3302  0023                     setTxData@rf:	
  3303                           ; 1 bytes @ 0x3
  3304                           
  3305  0023                     setRF_Enable@rf:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0023                     setRFSW_Status@sw:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0023                     setSw_Status@sw:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0023                     ___ftpack@exp:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317                           
  3318                           ; 1 bytes @ 0x3
  3319  0023                     	ds	1
  3320  0024                     ??_CC2500_ClearTXFIFO:	
  3321  0024                     ??_CC2500_ClearRXFIFO:	
  3322                           ; 0 bytes @ 0x4
  3323                           
  3324  0024                     ??_CC2500_SIDLEMode:	
  3325                           ; 0 bytes @ 0x4
  3326                           
  3327  0024                     ?_setDimmerLights:	
  3328                           ; 0 bytes @ 0x4
  3329                           
  3330  0024                     ??_setDimmerLights_ERROR:	
  3331                           ; 0 bytes @ 0x4
  3332                           
  3333  0024                     ??_setLED_Initialization:	
  3334                           ; 0 bytes @ 0x4
  3335                           
  3336  0024                     ??_Flash_Memory_Modify:	
  3337                           ; 0 bytes @ 0x4
  3338                           
  3339  0024                     ??_RF_RxDisable:	
  3340                           ; 0 bytes @ 0x4
  3341                           
  3342  0024                     ??_setSw_Initialization:	
  3343                           ; 0 bytes @ 0x4
  3344                           
  3345  0024                     ??_Sw_DimmerAdjFunc:	
  3346                           ; 0 bytes @ 0x4
  3347                           
  3348  0024                     ??_CC2500_TxData:	
  3349                           ; 0 bytes @ 0x4
  3350                           
  3351  0024                     ??_CC2500_RxData:	
  3352                           ; 0 bytes @ 0x4
  3353                           
  3354  0024                     ??_DimmerLights_Initialization:	
  3355                           ; 0 bytes @ 0x4
  3356                           
  3357  0024                     ??_getLoad_AD:	
  3358                           ; 0 bytes @ 0x4
  3359                           
  3360  0024                     ??___wmul:	
  3361                           ; 0 bytes @ 0x4
  3362                           
  3363  0024                     ??___lwdiv:	
  3364                           ; 0 bytes @ 0x4
  3365                           
  3366  0024                     CC2500_WriteREG@w_addr:	
  3367                           ; 0 bytes @ 0x4
  3368                           
  3369  0024                     setDelayOff_GO@value:	
  3370                           ; 1 bytes @ 0x4
  3371                           
  3372  0024                     setDimmerLights@status:	
  3373                           ; 1 bytes @ 0x4
  3374                           
  3375  0024                     setLED_Initialization@led:	
  3376                           ; 1 bytes @ 0x4
  3377                           
  3378  0024                     setLED_Main@led:	
  3379                           ; 1 bytes @ 0x4
  3380                           
  3381  0024                     RF_RxDisable@rf:	
  3382                           ; 1 bytes @ 0x4
  3383                           
  3384  0024                     setSw_Initialization@sw:	
  3385                           ; 1 bytes @ 0x4
  3386                           
  3387  0024                     Sw_DimmerAdjFunc@Idle:	
  3388                           ; 1 bytes @ 0x4
  3389                           
  3390  0024                     ___ftpack@sign:	
  3391                           ; 1 bytes @ 0x4
  3392                           
  3393  0024                     DelayTime_1us@j:	
  3394                           ; 1 bytes @ 0x4
  3395                           
  3396  0024                     ___wmul@product:	
  3397                           ; 2 bytes @ 0x4
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x4
  3401  0024                     	ds	1
  3402  0025                     ??_CC2500_InitSetREG:	
  3403  0025                     ??_CC2500_InitPATable:	
  3404                           ; 0 bytes @ 0x5
  3405                           
  3406  0025                     ??_setDimmerLights:	
  3407                           ; 0 bytes @ 0x5
  3408                           
  3409  0025                     ??___ftpack:	
  3410                           ; 0 bytes @ 0x5
  3411                           
  3412  0025                     ??_setDelayOff_GO:	
  3413                           ; 0 bytes @ 0x5
  3414                           
  3415  0025                     ??_LED_Initialization:	
  3416                           ; 0 bytes @ 0x5
  3417                           
  3418  0025                     ??_LED_Main:	
  3419                           ; 0 bytes @ 0x5
  3420                           
  3421  0025                     ??_Switch_Initialization:	
  3422                           ; 0 bytes @ 0x5
  3423                           
  3424  0025                     CC2500_TxData@loop_e:	
  3425                           ; 0 bytes @ 0x5
  3426                           
  3427  0025                     CC2500_RxData@loop_f:	
  3428                           ; 1 bytes @ 0x5
  3429                           
  3430  0025                     setDimmerLights_ERROR@lights:	
  3431                           ; 1 bytes @ 0x5
  3432                           
  3433  0025                     Sw_DimmerAdjFunc@sw:	
  3434                           ; 1 bytes @ 0x5
  3435                           
  3436  0025                     ___lwdiv@quotient:	
  3437                           ; 1 bytes @ 0x5
  3438                           
  3439                           
  3440                           ; 2 bytes @ 0x5
  3441  0025                     	ds	1
  3442  0026                     ??_CC2500_PowerRST:	
  3443  0026                     ??_CC2500_FrequencyCabr:	
  3444                           ; 0 bytes @ 0x6
  3445                           
  3446  0026                     ?_setBuz:	
  3447                           ; 0 bytes @ 0x6
  3448                           
  3449  0026                     CC2500_InitSetREG@temp1:	
  3450                           ; 0 bytes @ 0x6
  3451                           
  3452  0026                     CC2500_InitPATable@temp:	
  3453                           ; 1 bytes @ 0x6
  3454                           
  3455  0026                     setDimmerLights@lights:	
  3456                           ; 1 bytes @ 0x6
  3457                           
  3458  0026                     Flash_Memory_Modify@i:	
  3459                           ; 1 bytes @ 0x6
  3460                           
  3461  0026                     setBuz@time:	
  3462                           ; 1 bytes @ 0x6
  3463                           
  3464                           
  3465                           ; 2 bytes @ 0x6
  3466  0026                     	ds	1
  3467  0027                     ??_Flash_Memory_Main:	
  3468  0027                     CC2500_InitSetREG@temp2:	
  3469                           ; 0 bytes @ 0x7
  3470                           
  3471  0027                     CC2500_InitPATable@loop_d:	
  3472                           ; 1 bytes @ 0x7
  3473                           
  3474  0027                     setDelayOff_GO@sw:	
  3475                           ; 1 bytes @ 0x7
  3476                           
  3477  0027                     ___lwdiv@counter:	
  3478                           ; 1 bytes @ 0x7
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x7
  3482  0027                     	ds	1
  3483  0028                     ??_setBuz:	
  3484  0028                     ?___awtoft:	
  3485                           ; 0 bytes @ 0x8
  3486                           
  3487  0028                     CC2500_InitSetREG@loop_c:	
  3488                           ; 3 bytes @ 0x8
  3489                           
  3490  0028                     ___awtoft@c:	
  3491                           ; 1 bytes @ 0x8
  3492                           
  3493                           
  3494                           ; 2 bytes @ 0x8
  3495  0028                     	ds	1
  3496  0029                     ??_CC2500_PowerOnInitial:	
  3497  0029                     setBuz@count:	
  3498                           ; 0 bytes @ 0x9
  3499                           
  3500  0029                     getLoad_AD@channel:	
  3501                           ; 1 bytes @ 0x9
  3502                           
  3503                           
  3504                           ; 1 bytes @ 0x9
  3505  0029                     	ds	1
  3506  002A                     ??_setLog_Code:	
  3507  002A                     ??_my_Main:	
  3508                           ; 0 bytes @ 0xA
  3509                           
  3510  002A                     ??_DimmerLights_Exceptions:	
  3511                           ; 0 bytes @ 0xA
  3512                           
  3513  002A                     DimmerLights_Exceptions@status:	
  3514                           ; 0 bytes @ 0xA
  3515                           
  3516  002A                     getLoad_AD@j:	
  3517                           ; 1 bytes @ 0xA
  3518                           
  3519                           
  3520                           ; 1 bytes @ 0xA
  3521  002A                     	ds	1
  3522  002B                     ??_setLoad_Exceptions:	
  3523  002B                     ??___awtoft:	
  3524                           ; 0 bytes @ 0xB
  3525                           
  3526  002B                     getLoad_AD@i:	
  3527                           ; 0 bytes @ 0xB
  3528                           
  3529  002B                     setLog_Code@rf:	
  3530                           ; 1 bytes @ 0xB
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0xB
  3534  002B                     	ds	1
  3535  002C                     setLoad_Exceptions@command:	
  3536                           
  3537                           ; 1 bytes @ 0xC
  3538  002C                     	ds	1
  3539  002D                     ??_Load_Main:	
  3540  002D                     ___awtoft@sign:	
  3541                           ; 0 bytes @ 0xD
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0xD
  3545  002D                     	ds	1
  3546  002E                     ?___ftdiv:	
  3547  002E                     ?___ftmul:	
  3548                           ; 3 bytes @ 0xE
  3549                           
  3550  002E                     ___ftdiv@f2:	
  3551                           ; 3 bytes @ 0xE
  3552                           
  3553  002E                     ___ftmul@f1:	
  3554                           ; 3 bytes @ 0xE
  3555                           
  3556                           
  3557                           ; 3 bytes @ 0xE
  3558  002E                     	ds	3
  3559  0031                     Load_Main@i:	
  3560  0031                     ___ftdiv@f1:	
  3561                           ; 1 bytes @ 0x11
  3562                           
  3563  0031                     ___ftmul@f2:	
  3564                           ; 3 bytes @ 0x11
  3565                           
  3566                           
  3567                           ; 3 bytes @ 0x11
  3568  0031                     	ds	3
  3569  0034                     ??___ftdiv:	
  3570  0034                     ??___ftmul:	
  3571                           ; 0 bytes @ 0x14
  3572                           
  3573                           
  3574                           ; 0 bytes @ 0x14
  3575  0034                     	ds	4
  3576  0038                     ___ftdiv@cntr:	
  3577  0038                     ___ftmul@exp:	
  3578                           ; 1 bytes @ 0x18
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x18
  3582  0038                     	ds	1
  3583  0039                     ___ftdiv@f3:	
  3584  0039                     ___ftmul@f3_as_product:	
  3585                           ; 3 bytes @ 0x19
  3586                           
  3587                           
  3588                           ; 3 bytes @ 0x19
  3589  0039                     	ds	3
  3590  003C                     ___ftdiv@exp:	
  3591  003C                     ___ftmul@cntr:	
  3592                           ; 1 bytes @ 0x1C
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x1C
  3596  003C                     	ds	1
  3597  003D                     ___ftdiv@sign:	
  3598  003D                     ___ftmul@sign:	
  3599                           ; 1 bytes @ 0x1D
  3600                           
  3601                           
  3602                           ; 1 bytes @ 0x1D
  3603  003D                     	ds	1
  3604  003E                     ?___ftadd:	
  3605  003E                     ___ftadd@f1:	
  3606                           ; 3 bytes @ 0x1E
  3607                           
  3608                           
  3609                           ; 3 bytes @ 0x1E
  3610  003E                     	ds	3
  3611  0041                     ___ftadd@f2:	
  3612                           
  3613                           ; 3 bytes @ 0x21
  3614  0041                     	ds	3
  3615  0044                     ??___ftadd:	
  3616                           
  3617                           ; 0 bytes @ 0x24
  3618  0044                     	ds	4
  3619  0048                     ___ftadd@sign:	
  3620                           
  3621                           ; 1 bytes @ 0x28
  3622  0048                     	ds	1
  3623  0049                     ___ftadd@exp2:	
  3624                           
  3625                           ; 1 bytes @ 0x29
  3626  0049                     	ds	1
  3627  004A                     ___ftadd@exp1:	
  3628                           
  3629                           ; 1 bytes @ 0x2A
  3630  004A                     	ds	1
  3631  004B                     ?___fttol:	
  3632  004B                     ___fttol@f1:	
  3633                           ; 4 bytes @ 0x2B
  3634                           
  3635                           
  3636                           ; 3 bytes @ 0x2B
  3637  004B                     	ds	4
  3638  004F                     ??___fttol:	
  3639                           
  3640                           ; 0 bytes @ 0x2F
  3641  004F                     	ds	4
  3642  0053                     ___fttol@sign1:	
  3643                           
  3644                           ; 1 bytes @ 0x33
  3645  0053                     	ds	1
  3646  0054                     ___fttol@lval:	
  3647                           
  3648                           ; 4 bytes @ 0x34
  3649  0054                     	ds	4
  3650  0058                     ___fttol@exp1:	
  3651                           
  3652                           ; 1 bytes @ 0x38
  3653  0058                     	ds	1
  3654  0059                     ??_getPercentValue:	
  3655  0059                     ??_setPercentValue:	
  3656                           ; 0 bytes @ 0x39
  3657                           
  3658  0059                     setPercentValue@value:	
  3659                           ; 0 bytes @ 0x39
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0x39
  3663  0059                     	ds	1
  3664  005A                     setPercentValue@i:	
  3665                           
  3666                           ; 3 bytes @ 0x3A
  3667  005A                     	ds	1
  3668  005B                     getPercentValue@value:	
  3669                           
  3670                           ; 1 bytes @ 0x3B
  3671  005B                     	ds	1
  3672  005C                     getPercentValue@i:	
  3673                           
  3674                           ; 3 bytes @ 0x3C
  3675  005C                     	ds	1
  3676  005D                     ?_setRF_DimmerLights:	
  3677  005D                     ??_Flash_Memory_Initialization:	
  3678                           ; 0 bytes @ 0x3D
  3679                           
  3680  005D                     setRF_DimmerLights@on:	
  3681                           ; 0 bytes @ 0x3D
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x3D
  3685  005D                     	ds	1
  3686  005E                     ??_setRF_DimmerLights:	
  3687  005E                     Flash_Memory_Initialization@i:	
  3688                           ; 0 bytes @ 0x3E
  3689                           
  3690                           
  3691                           ; 1 bytes @ 0x3E
  3692  005E                     	ds	1
  3693  005F                     ??_setDimmerLights_AdjRF:	
  3694                           
  3695                           ; 0 bytes @ 0x3F
  3696  005F                     	ds	1
  3697  0060                     setDimmerLights_AdjRF@lights:	
  3698  0060                     setRF_DimmerLights@status:	
  3699                           ; 1 bytes @ 0x40
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x40
  3703  0060                     	ds	1
  3704  0061                     ??_setRF_DimmerValue:	
  3705  0061                     setRF_DimmerLights@lights:	
  3706                           ; 0 bytes @ 0x41
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x41
  3710  0061                     	ds	1
  3711  0062                     ??_DlyOff_Main:	
  3712  0062                     ?_setDimmerLights_Adj:	
  3713                           ; 0 bytes @ 0x42
  3714                           
  3715  0062                     ??_setRFSW_Control:	
  3716                           ; 0 bytes @ 0x42
  3717                           
  3718  0062                     ??_Sw_DimmerOnFunc:	
  3719                           ; 0 bytes @ 0x42
  3720                           
  3721  0062                     ??_Sw_DimmerOffFunc:	
  3722                           ; 0 bytes @ 0x42
  3723                           
  3724  0062                     setDimmerLights_Adj@status:	
  3725                           ; 0 bytes @ 0x42
  3726                           
  3727  0062                     Sw_DimmerOnFunc@Idle:	
  3728                           ; 1 bytes @ 0x42
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x42
  3732  0062                     	ds	1
  3733  0063                     ??_setDimmerLights_Adj:	
  3734  0063                     setRFSW_Control@sw:	
  3735                           ; 0 bytes @ 0x43
  3736                           
  3737  0063                     setRF_DimmerValue@lights:	
  3738                           ; 1 bytes @ 0x43
  3739                           
  3740  0063                     Sw_DimmerOnFunc@sw:	
  3741                           ; 1 bytes @ 0x43
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x43
  3745  0063                     	ds	1
  3746  0064                     ??_setRFSW_AdjControl:	
  3747  0064                     DlyOff_Main@sw:	
  3748                           ; 0 bytes @ 0x44
  3749                           
  3750  0064                     setDimmerLights_Adj@lights:	
  3751                           ; 1 bytes @ 0x44
  3752                           
  3753  0064                     Sw_DimmerOffFunc@sw:	
  3754                           ; 1 bytes @ 0x44
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x44
  3758  0064                     	ds	1
  3759  0065                     ??_setDimmerLights_Main:	
  3760  0065                     ??_setSw_Main:	
  3761                           ; 0 bytes @ 0x45
  3762                           
  3763  0065                     ??_DelayOff_Main:	
  3764                           ; 0 bytes @ 0x45
  3765                           
  3766  0065                     setDimmerLights_Main@clear:	
  3767                           ; 0 bytes @ 0x45
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x45
  3771  0065                     	ds	1
  3772  0066                     setDimmerLights_Main@lights:	
  3773  0066                     setRFSW_AdjControl@sw:	
  3774                           ; 1 bytes @ 0x46
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0x46
  3778  0066                     	ds	1
  3779  0067                     ??_setControl_Lights_Table:	
  3780  0067                     ??_DimmerLights_Main:	
  3781                           ; 0 bytes @ 0x47
  3782                           
  3783  0067                     setControl_Lights_Table@rf:	
  3784                           ; 0 bytes @ 0x47
  3785                           
  3786  0067                     _setSw_Main$4550:	
  3787                           ; 1 bytes @ 0x47
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x47
  3791  0067                     	ds	1
  3792  0068                     ??_getRxData:	
  3793  0068                     getRxData@rf:	
  3794                           ; 0 bytes @ 0x48
  3795                           
  3796  0068                     _setSw_Main$4551:	
  3797                           ; 1 bytes @ 0x48
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x48
  3801  0068                     	ds	1
  3802  0069                     ??_setRF_Main:	
  3803  0069                     setSw_Main@sw:	
  3804                           ; 0 bytes @ 0x49
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x49
  3808  0069                     	ds	1
  3809  006A                     ??_Switch_Main:	
  3810  006A                     setRF_Main@rf:	
  3811                           ; 0 bytes @ 0x4A
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x4A
  3815  006A                     	ds	1
  3816  006B                     _setRF_Main$3777:	
  3817                           
  3818                           ; 1 bytes @ 0x4B
  3819  006B                     	ds	1
  3820  006C                     ??_RF_Main:	
  3821  006C                     ?_main:	
  3822                           ; 0 bytes @ 0x4C
  3823                           
  3824  006C                     main@argc:	
  3825                           ; 2 bytes @ 0x4C
  3826                           
  3827                           
  3828                           ; 2 bytes @ 0x4C
  3829  006C                     	ds	2
  3830  006E                     main@argv:	
  3831                           
  3832                           ; 2 bytes @ 0x4E
  3833  006E                     	ds	2
  3834  0070                     ??_main:	
  3835                           
  3836                           	psect	maintext
  3837  1443                     __pmaintext:	
  3838                           ; 0 bytes @ 0x50
  3839 ;;
  3840 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3841 ;;
  3842 ;; *************** function _main *****************
  3843 ;; Defined at:
  3844 ;;		line 7 in file "../src/main_B1.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  argc            2   76[BANK0 ] int 
  3847 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   76[BANK0 ] int 
  3852 ;; Registers used:
  3853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 17F/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3862 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3863 ;;Total ram usage:        4 bytes
  3864 ;; Hardware stack levels required when called:   15
  3865 ;; This function calls:
  3866 ;;		_Buzzer_Initialization
  3867 ;;		_Buzzer_Main
  3868 ;;		_CC2500_PowerOnInitial
  3869 ;;		_DelayOff_Initialization
  3870 ;;		_DelayOff_Main
  3871 ;;		_DimmerLights_Initialization
  3872 ;;		_DimmerLights_Main
  3873 ;;		_Flash_Memory_Initialization
  3874 ;;		_Flash_Memory_Main
  3875 ;;		_LED_Initialization
  3876 ;;		_LED_Main
  3877 ;;		_Load_Initialization
  3878 ;;		_Load_Main
  3879 ;;		_Mcu_Initialization
  3880 ;;		_RF_Initialization
  3881 ;;		_RF_Main
  3882 ;;		_Switch_Initialization
  3883 ;;		_Switch_Main
  3884 ;;		_WDT_Main
  3885 ;;		_getLoad_AD
  3886 ;;		_myMain_Initialization
  3887 ;;		_my_Main
  3888 ;; This function is called by:
  3889 ;;		Startup code after reset
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           
  3894                           ;psect for function _main
  3895  1443                     _main:	
  3896                           
  3897                           ;main_B1.c: 9: myMain_Initialization();
  3898                           
  3899                           ;incstack = 0
  3900                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3901  1443  319A  22EC  3194   	fcall	_myMain_Initialization
  3902                           
  3903                           ;main_B1.c: 10: Mcu_Initialization();
  3904  1446  319C  2435  3194   	fcall	_Mcu_Initialization
  3905                           
  3906                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3907  1449  3185  25E2  3194   	fcall	_Flash_Memory_Initialization
  3908                           
  3909                           ;main_B1.c: 12: LED_Initialization();
  3910  144C  3199  218C  3194   	fcall	_LED_Initialization
  3911                           
  3912                           ;main_B1.c: 13: Buzzer_Initialization();
  3913  144F  3199  215C  3194   	fcall	_Buzzer_Initialization
  3914                           
  3915                           ;main_B1.c: 15: ;;
  3916                           ;main_B1.c: 16: ;;
  3917                           ;main_B1.c: 17: Load_Initialization();
  3918  1452  3199  21B1  3194   	fcall	_Load_Initialization
  3919                           
  3920                           ;main_B1.c: 18: ;;
  3921                           ;main_B1.c: 19: DelayOff_Initialization();
  3922  1455  3198  20E7  3194   	fcall	_DelayOff_Initialization
  3923                           
  3924                           ;main_B1.c: 21: DimmerLights_Initialization();
  3925  1458  319B  236D  3194   	fcall	_DimmerLights_Initialization
  3926                           
  3927                           ;main_B1.c: 22: ;;
  3928                           ;main_B1.c: 23: ;;
  3929                           ;main_B1.c: 24: ;;
  3930                           ;main_B1.c: 26: Switch_Initialization();
  3931  145B  3199  21D8  3194   	fcall	_Switch_Initialization
  3932                           
  3933                           ;main_B1.c: 27: RF_Initialization();
  3934  145E  3198  20B3  3194   	fcall	_RF_Initialization
  3935                           
  3936                           ;main_B1.c: 28: CC2500_PowerOnInitial();
  3937  1461  319B  2300  3194   	fcall	_CC2500_PowerOnInitial
  3938  1464                     l7832:	
  3939                           ;main_B1.c: 29: ;;
  3940                           ;main_B1.c: 32: while (1) {
  3941                           
  3942                           
  3943                           ;main_B1.c: 33: if (myMain->PowerON) {
  3944  1464  0021               	movlb	1	; select bank1
  3945  1465  086A               	movf	_myMain^(0+128),w
  3946  1466  0086               	movwf	6
  3947  1467  3001               	movlw	1	; select bank2/3
  3948  1468  0087               	movwf	7
  3949  1469  1C01               	btfss	1,0
  3950  146A  2C72               	goto	l7836
  3951                           
  3952                           ;main_B1.c: 35: ;;
  3953                           ;main_B1.c: 39: getLoad_AD(0x05);
  3954  146B  3005               	movlw	5
  3955  146C  318C  241A  3194   	fcall	_getLoad_AD
  3956                           
  3957                           ;main_B1.c: 43: ;;
  3958                           ;main_B1.c: 47: ;;
  3959                           ;main_B1.c: 59: Buzzer_Main();
  3960  146F  318E  2699  3194   	fcall	_Buzzer_Main
  3961  1472                     l7836:	
  3962                           
  3963                           ;main_B1.c: 61: }
  3964                           ;main_B1.c: 64: if (myMain->T0_Timerout) {
  3965  1472  0021               	movlb	1	; select bank1
  3966  1473  086A               	movf	_myMain^(0+128),w
  3967  1474  0086               	movwf	6
  3968  1475  3001               	movlw	1	; select bank2/3
  3969  1476  0087               	movwf	7
  3970  1477  1C81               	btfss	1,1
  3971  1478  2C64               	goto	l7832
  3972                           
  3973                           ;main_B1.c: 65: myMain->T0_Timerout = 0;
  3974  1479  086A               	movf	_myMain^(0+128),w
  3975  147A  0086               	movwf	6
  3976  147B  3001               	movlw	1	; select bank2/3
  3977  147C  0087               	movwf	7
  3978  147D  1081               	bcf	1,1
  3979                           
  3980                           ;main_B1.c: 66: my_Main();
  3981  147E  3188  204F  3194   	fcall	_my_Main
  3982                           
  3983                           ;main_B1.c: 67: WDT_Main();
  3984  1481  319C  2487  3194   	fcall	_WDT_Main
  3985                           
  3986                           ;main_B1.c: 68: ;;
  3987                           ;main_B1.c: 69: ;;
  3988                           ;main_B1.c: 70: if (myMain->PowerON) {
  3989  1484  0021               	movlb	1	; select bank1
  3990  1485  086A               	movf	_myMain^(0+128),w
  3991  1486  0086               	movwf	6
  3992  1487  3001               	movlw	1	; select bank2/3
  3993  1488  0087               	movwf	7
  3994  1489  1C01               	btfss	1,0
  3995  148A  2C64               	goto	l7832
  3996                           
  3997                           ;main_B1.c: 71: Flash_Memory_Main();
  3998  148B  3191  21BE  3194   	fcall	_Flash_Memory_Main
  3999                           
  4000                           ;main_B1.c: 73: LED_Main();
  4001  148E  3199  2198  3194   	fcall	_LED_Main
  4002                           
  4003                           ;main_B1.c: 75: ;;
  4004                           ;main_B1.c: 76: ;;
  4005                           ;main_B1.c: 77: Load_Main();
  4006  1491  3180  2054  3194   	fcall	_Load_Main
  4007                           
  4008                           ;main_B1.c: 78: ;;
  4009                           ;main_B1.c: 80: ;;
  4010                           ;main_B1.c: 81: DimmerLights_Main();
  4011  1494  3199  2145  3194   	fcall	_DimmerLights_Main
  4012                           
  4013                           ;main_B1.c: 82: Switch_Main();
  4014  1497  3198  20FF  3194   	fcall	_Switch_Main
  4015                           
  4016                           ;main_B1.c: 83: ;;
  4017                           ;main_B1.c: 84: ;;
  4018                           ;main_B1.c: 86: RF_Main();
  4019  149A  3198  20B7  3194   	fcall	_RF_Main
  4020                           
  4021                           ;main_B1.c: 87: DelayOff_Main();
  4022  149D  3198  20EF  3194   	fcall	_DelayOff_Main
  4023                           
  4024                           ;main_B1.c: 88: ;;
  4025  14A0  2C64               	goto	l7832
  4026  14A1                     __end_of_main:	
  4027                           
  4028                           	psect	text1
  4029  084F                     __ptext1:	
  4030 ;; *************** function _my_Main *****************
  4031 ;; Defined at:
  4032 ;;		line 125 in file "../src/main_B1.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;		None               void
  4039 ;; Registers used:
  4040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    7
  4053 ;; This function calls:
  4054 ;;		_setBuz
  4055 ;;		_setLoad_Enable
  4056 ;;		_setRF_Enable
  4057 ;;		_setSw_Enable
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _my_Main
  4065  084F                     _my_Main:	
  4066                           
  4067                           ;main_B1.c: 127: if (myMain->PowerON == 0) {
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4071  084F  0021               	movlb	1	; select bank1
  4072  0850  086A               	movf	_myMain^(0+128),w
  4073  0851  0086               	movwf	6
  4074  0852  3001               	movlw	1	; select bank2/3
  4075  0853  0087               	movwf	7
  4076  0854  1801               	btfsc	1,0
  4077  0855  2896               	goto	l7756
  4078                           
  4079                           ;main_B1.c: 128: myMain->PowerCount++;
  4080  0856  0A6A               	incf	_myMain^(0+128),w
  4081  0857  0086               	movwf	6
  4082  0858  3001               	movlw	1	; select bank2/3
  4083  0859  0087               	movwf	7
  4084  085A  3001               	movlw	1
  4085  085B  0781               	addwf	1,f
  4086  085C  3141               	addfsr 1,1
  4087  085D  1803               	skipnc
  4088  085E  0A81               	incf	1,f
  4089                           
  4090                           ;main_B1.c: 129: if (myMain->PowerCount == 150)
  4091  085F  0A6A               	incf	_myMain^(0+128),w
  4092  0860  0086               	movwf	6
  4093  0861  3001               	movlw	1	; select bank2/3
  4094  0862  0087               	movwf	7
  4095  0863  3F40               	moviw [0]fsr1
  4096  0864  3A96               	xorlw	150
  4097  0865  1D03               	skipz
  4098  0866  2869               	goto	u7095
  4099  0867  3F41               	moviw [1]fsr1
  4100  0868  3A00               	xorlw	0
  4101  0869                     u7095:	
  4102  0869  1D03               	skipz
  4103  086A  0008               	return
  4104                           
  4105                           ;main_B1.c: 130: {
  4106                           ;main_B1.c: 131: myMain->PowerCount = 0;
  4107  086B  0A6A               	incf	_myMain^(0+128),w
  4108  086C  0086               	movwf	6
  4109  086D  3001               	movlw	1	; select bank2/3
  4110  086E  0087               	movwf	7
  4111  086F  3000               	movlw	0
  4112  0870  3FC0               	movwi [0]fsr1
  4113  0871  3FC1               	movwi [1]fsr1
  4114                           
  4115                           ;main_B1.c: 132: myMain->PowerON = 1;
  4116  0872  086A               	movf	_myMain^(0+128),w
  4117  0873  0086               	movwf	6
  4118  0874  3001               	movlw	1	; select bank2/3
  4119  0875  0087               	movwf	7
  4120  0876  1401               	bsf	1,0
  4121                           
  4122                           ;main_B1.c: 135: ;;
  4123                           ;main_B1.c: 139: setLoad_Enable(1);
  4124  0877  3001               	movlw	1
  4125  0878  319A  2281  3188   	fcall	_setLoad_Enable
  4126                           
  4127                           ;main_B1.c: 145: setBuz(3, 50);
  4128  087B  3032               	movlw	50
  4129  087C  0020               	movlb	0	; select bank0
  4130  087D  00A6               	movwf	setBuz@time
  4131  087E  3000               	movlw	0
  4132  087F  00A7               	movwf	setBuz@time+1
  4133  0880  3003               	movlw	3
  4134  0881  3189  214F  3188   	fcall	_setBuz
  4135                           
  4136                           ;main_B1.c: 146: myMain->SelfTest = 1;
  4137  0884  0021               	movlb	1	; select bank1
  4138  0885  086A               	movf	_myMain^(0+128),w
  4139  0886  3E03               	addlw	3
  4140  0887  0086               	movwf	6
  4141  0888  3001               	movlw	1	; select bank2/3
  4142  0889  0087               	movwf	7
  4143  088A  1401               	bsf	1,0
  4144                           
  4145                           ;main_B1.c: 148: setSw_Enable(1);
  4146  088B  3001               	movlw	1
  4147  088C  319C  246B  3188   	fcall	_setSw_Enable
  4148                           
  4149                           ;main_B1.c: 151: setRF_Enable(1, 1);
  4150  088F  0020               	movlb	0	; select bank0
  4151  0890  01A2               	clrf	setRF_Enable@command
  4152  0891  0AA2               	incf	setRF_Enable@command,f
  4153  0892  3001               	movlw	1
  4154  0893  319E  2648         	fcall	_setRF_Enable
  4155                           
  4156                           ;main_B1.c: 155: }
  4157                           ;main_B1.c: 156: } else {
  4158  0895  0008               	return
  4159  0896                     l7756:	
  4160                           
  4161                           ;main_B1.c: 164: myMain->Count1++;
  4162  0896  0021               	movlb	1	; select bank1
  4163  0897  086A               	movf	_myMain^(0+128),w
  4164  0898  3E06               	addlw	6
  4165  0899  0086               	movwf	6
  4166  089A  3001               	movlw	1	; select bank2/3
  4167  089B  0087               	movwf	7
  4168  089C  3001               	movlw	1
  4169  089D  0781               	addwf	1,f
  4170  089E  3141               	addfsr 1,1
  4171  089F  1803               	skipnc
  4172  08A0  0A81               	incf	1,f
  4173                           
  4174                           ;main_B1.c: 165: if (myMain->Count1 == 100)
  4175  08A1  086A               	movf	_myMain^(0+128),w
  4176  08A2  3E06               	addlw	6
  4177  08A3  0086               	movwf	6
  4178  08A4  3001               	movlw	1	; select bank2/3
  4179  08A5  0087               	movwf	7
  4180  08A6  3F40               	moviw [0]fsr1
  4181  08A7  3A64               	xorlw	100
  4182  08A8  1D03               	skipz
  4183  08A9  28AC               	goto	u7105
  4184  08AA  3F41               	moviw [1]fsr1
  4185  08AB  3A00               	xorlw	0
  4186  08AC                     u7105:	
  4187  08AC  1D03               	skipz
  4188  08AD  0008               	return
  4189                           
  4190                           ;main_B1.c: 166: {
  4191                           ;main_B1.c: 167: myMain->Count1 = 0;
  4192  08AE  086A               	movf	_myMain^(0+128),w
  4193  08AF  3E06               	addlw	6
  4194  08B0  0086               	movwf	6
  4195  08B1  3001               	movlw	1	; select bank2/3
  4196  08B2  0087               	movwf	7
  4197  08B3  3000               	movlw	0
  4198  08B4  3FC0               	movwi [0]fsr1
  4199  08B5  3FC1               	movwi [1]fsr1
  4200                           
  4201                           ;main_B1.c: 180: if (myMain->Flag) {
  4202  08B6  086A               	movf	_myMain^(0+128),w
  4203  08B7  0086               	movwf	6
  4204  08B8  3001               	movlw	1	; select bank2/3
  4205  08B9  0087               	movwf	7
  4206  08BA  1D81               	btfss	1,3
  4207  08BB  28C2               	goto	l7764
  4208                           
  4209                           ;main_B1.c: 181: myMain->Flag = 0;
  4210  08BC  086A               	movf	_myMain^(0+128),w
  4211  08BD  0086               	movwf	6
  4212  08BE  3001               	movlw	1	; select bank2/3
  4213  08BF  0087               	movwf	7
  4214  08C0  1181               	bcf	1,3
  4215                           
  4216                           ;main_B1.c: 190: } else {
  4217  08C1  0008               	return
  4218  08C2                     l7764:	
  4219                           
  4220                           ;main_B1.c: 191: myMain->Flag = 1;
  4221  08C2  086A               	movf	_myMain^(0+128),w
  4222  08C3  0086               	movwf	6
  4223  08C4  3001               	movlw	1	; select bank2/3
  4224  08C5  0087               	movwf	7
  4225  08C6  1581               	bsf	1,3
  4226  08C7  0008               	return
  4227  08C8                     __end_of_my_Main:	
  4228                           
  4229                           	psect	text2
  4230  1A81                     __ptext2:	
  4231 ;; *************** function _setLoad_Enable *****************
  4232 ;; Defined at:
  4233 ;;		line 260 in file "../src/OverLoad_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  command         1    wreg     unsigned char 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  command         1    0[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr1l, fsr1h
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_my_Main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _setLoad_Enable
  4263  1A81                     _setLoad_Enable:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4267                           ;setLoad_Enable@command stored from wreg
  4268  1A81  0020               	movlb	0	; select bank0
  4269  1A82  00A0               	movwf	setLoad_Enable@command
  4270                           
  4271                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4272  1A83  087B               	movf	_Load,w
  4273  1A84  0086               	movwf	6
  4274  1A85  3002               	movlw	2	; select bank4/5
  4275  1A86  0087               	movwf	7
  4276  1A87  0820               	movf	setLoad_Enable@command,w
  4277  1A88  1001               	bcf	1,0
  4278  1A89  1D03               	skipz
  4279  1A8A  1401               	bsf	1,0
  4280                           
  4281                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4282  1A8B  087B               	movf	_Load,w
  4283  1A8C  0086               	movwf	6
  4284  1A8D  3002               	movlw	2	; select bank4/5
  4285  1A8E  0087               	movwf	7
  4286  1A8F  1081               	bcf	1,1
  4287  1A90  0008               	return
  4288  1A91                     __end_of_setLoad_Enable:	
  4289                           
  4290                           	psect	text3
  4291  1AEC                     __ptext3:	
  4292 ;; *************** function _myMain_Initialization *****************
  4293 ;; Defined at:
  4294 ;;		line 113 in file "../src/main_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;		None               void
  4301 ;; Registers used:
  4302 ;;		wreg, fsr1l, fsr1h
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        1 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    5
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _myMain_Initialization
  4324  1AEC                     _myMain_Initialization:	
  4325                           
  4326                           ;main_B1.c: 115: product = &_product;
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4330  1AEC  30A0               	movlw	__product& (0+255)
  4331  1AED  0020               	movlb	0	; select bank0
  4332  1AEE  00A0               	movwf	??_myMain_Initialization
  4333  1AEF  0820               	movf	??_myMain_Initialization,w
  4334  1AF0  00FD               	movwf	_product
  4335                           
  4336                           ;main_B1.c: 116: product->Data[20] = 210;
  4337  1AF1  30D2               	movlw	210
  4338  1AF2  00A0               	movwf	??_myMain_Initialization
  4339  1AF3  087D               	movf	_product,w
  4340  1AF4  3E14               	addlw	20
  4341  1AF5  0086               	movwf	6
  4342  1AF6  3001               	movlw	1	; select bank2/3
  4343  1AF7  0087               	movwf	7
  4344  1AF8  0820               	movf	??_myMain_Initialization,w
  4345  1AF9  0081               	movwf	1
  4346                           
  4347                           ;main_B1.c: 119: myMain = &_myMain;
  4348  1AFA  30C0               	movlw	__myMain& (0+255)
  4349  1AFB  00A0               	movwf	??_myMain_Initialization
  4350  1AFC  0820               	movf	??_myMain_Initialization,w
  4351  1AFD  0021               	movlb	1	; select bank1
  4352  1AFE  00EA               	movwf	_myMain^(0+128)
  4353  1AFF  0008               	return
  4354  1B00                     __end_of_myMain_Initialization:	
  4355                           
  4356                           	psect	text4
  4357  0C1A                     __ptext4:	
  4358 ;; *************** function _getLoad_AD *****************
  4359 ;; Defined at:
  4360 ;;		line 16 in file "../src/OverLoad_B1.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  channel         1    wreg     unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  channel         1    9[BANK0 ] unsigned char 
  4365 ;;  i               1   11[BANK0 ] unsigned char 
  4366 ;;  j               1   10[BANK0 ] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;		None               void
  4369 ;; Registers used:
  4370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;Total ram usage:        8 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    6
  4383 ;; This function calls:
  4384 ;;		_getAD
  4385 ;; This function is called by:
  4386 ;;		_main
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _getLoad_AD
  4392  0C1A                     _getLoad_AD:	
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4396                           ;getLoad_AD@channel stored from wreg
  4397  0C1A  0020               	movlb	0	; select bank0
  4398  0C1B  00A9               	movwf	getLoad_AD@channel
  4399                           
  4400                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4401  0C1C  01AB               	clrf	getLoad_AD@i
  4402  0C1D  01AA               	clrf	getLoad_AD@j
  4403                           
  4404                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4405  0C1E  087B               	movf	_Load,w
  4406  0C1F  0086               	movwf	6
  4407  0C20  3002               	movlw	2	; select bank4/5
  4408  0C21  0087               	movwf	7
  4409  0C22  1E01               	btfss	1,4
  4410  0C23  0008               	return
  4411                           
  4412                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4413  0C24  30C0               	movlw	192
  4414  0C25  00A4               	movwf	??_getLoad_AD
  4415  0C26  0824               	movf	??_getLoad_AD,w
  4416  0C27  00A0               	movwf	getAD@adcon1
  4417  0C28  0829               	movf	getLoad_AD@channel,w
  4418  0C29  319B  2340  318C   	fcall	_getAD
  4419  0C2C  087B               	movf	_Load,w
  4420  0C2D  3E32               	addlw	50
  4421  0C2E  0086               	movwf	6
  4422  0C2F  3002               	movlw	2	; select bank4/5
  4423  0C30  0087               	movwf	7
  4424  0C31  0020               	movlb	0	; select bank0
  4425  0C32  0820               	movf	?_getAD,w
  4426  0C33  3FC0               	movwi [0]fsr1
  4427  0C34  0821               	movf	?_getAD+1,w
  4428  0C35  3FC1               	movwi [1]fsr1
  4429                           
  4430                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4431  0C36  01AB               	clrf	getLoad_AD@i
  4432  0C37  3005               	movlw	5
  4433  0C38  022B               	subwf	getLoad_AD@i,w
  4434  0C39  1803               	btfsc	3,0
  4435  0C3A  2C74               	goto	l7580
  4436  0C3B                     l7570:	
  4437                           
  4438                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4439  0C3B  087B               	movf	_Load,w
  4440  0C3C  3E32               	addlw	50
  4441  0C3D  0086               	movwf	6
  4442  0C3E  3002               	movlw	2	; select bank4/5
  4443  0C3F  0087               	movwf	7
  4444  0C40  3F40               	moviw [0]fsr1
  4445  0C41  00A4               	movwf	??_getLoad_AD
  4446  0C42  3F41               	moviw [1]fsr1
  4447  0C43  00A5               	movwf	??_getLoad_AD+1
  4448  0C44  352B               	lslf	getLoad_AD@i,w
  4449  0C45  3E08               	addlw	8
  4450  0C46  077B               	addwf	_Load,w
  4451  0C47  00A6               	movwf	??_getLoad_AD+2
  4452  0C48  0826               	movf	??_getLoad_AD+2,w
  4453  0C49  0086               	movwf	6
  4454  0C4A  3002               	movlw	2	; select bank4/5
  4455  0C4B  0087               	movwf	7
  4456  0C4C  3F40               	moviw [0]fsr1
  4457  0C4D  00A7               	movwf	??_getLoad_AD+3
  4458  0C4E  3F41               	moviw [1]fsr1
  4459  0C4F  00A8               	movwf	??_getLoad_AD+4
  4460  0C50  0825               	movf	??_getLoad_AD+1,w
  4461  0C51  0228               	subwf	??_getLoad_AD+4,w
  4462  0C52  1D03               	skipz
  4463  0C53  2C56               	goto	u6825
  4464  0C54  0824               	movf	??_getLoad_AD,w
  4465  0C55  0227               	subwf	??_getLoad_AD+3,w
  4466  0C56                     u6825:	
  4467  0C56  1803               	skipnc
  4468  0C57  2C6C               	goto	l7576
  4469                           
  4470                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4471  0C58  087B               	movf	_Load,w
  4472  0C59  3E32               	addlw	50
  4473  0C5A  0086               	movwf	6
  4474  0C5B  3002               	movlw	2	; select bank4/5
  4475  0C5C  0087               	movwf	7
  4476  0C5D  352B               	lslf	getLoad_AD@i,w
  4477  0C5E  3E08               	addlw	8
  4478  0C5F  077B               	addwf	_Load,w
  4479  0C60  00A4               	movwf	??_getLoad_AD
  4480  0C61  0824               	movf	??_getLoad_AD,w
  4481  0C62  0084               	movwf	4
  4482  0C63  3002               	movlw	2	; select bank4/5
  4483  0C64  0085               	movwf	5
  4484  0C65  3F40               	moviw [0]fsr1
  4485  0C66  3F80               	movwi [0]fsr0
  4486  0C67  3F41               	moviw [1]fsr1
  4487  0C68  3F81               	movwi [1]fsr0
  4488                           
  4489                           ;OverLoad_B1.c: 24: j = 1;
  4490  0C69  01AA               	clrf	getLoad_AD@j
  4491  0C6A  0AAA               	incf	getLoad_AD@j,f
  4492                           
  4493                           ;OverLoad_B1.c: 25: break;
  4494  0C6B  2C74               	goto	l7580
  4495  0C6C                     l7576:	
  4496  0C6C  3001               	movlw	1
  4497  0C6D  00A4               	movwf	??_getLoad_AD
  4498  0C6E  0824               	movf	??_getLoad_AD,w
  4499  0C6F  07AB               	addwf	getLoad_AD@i,f
  4500  0C70  3005               	movlw	5
  4501  0C71  022B               	subwf	getLoad_AD@i,w
  4502  0C72  1C03               	skipc
  4503  0C73  2C3B               	goto	l7570
  4504  0C74                     l7580:	
  4505                           
  4506                           ;OverLoad_B1.c: 26: }
  4507                           ;OverLoad_B1.c: 27: }
  4508                           ;OverLoad_B1.c: 28: if (!j) {
  4509  0C74  08AA               	movf	getLoad_AD@j,f
  4510  0C75  1D03               	skipz
  4511  0C76  0008               	return
  4512                           
  4513                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4514  0C77  01AB               	clrf	getLoad_AD@i
  4515  0C78                     L1:	
  4516  0C78  3005               	movlw	5
  4517  0C79  022B               	subwf	getLoad_AD@i,w
  4518  0C7A  1803               	btfsc	3,0
  4519  0C7B  0008               	return
  4520                           
  4521                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4522  0C7C  352B               	lslf	getLoad_AD@i,w
  4523  0C7D  3E1A               	addlw	26
  4524  0C7E  077B               	addwf	_Load,w
  4525  0C7F  00A4               	movwf	??_getLoad_AD
  4526  0C80  0824               	movf	??_getLoad_AD,w
  4527  0C81  0086               	movwf	6
  4528  0C82  3002               	movlw	2	; select bank4/5
  4529  0C83  0087               	movwf	7
  4530  0C84  3F40               	moviw [0]fsr1
  4531  0C85  00A5               	movwf	??_getLoad_AD+1
  4532  0C86  3F41               	moviw [1]fsr1
  4533  0C87  00A6               	movwf	??_getLoad_AD+2
  4534  0C88  087B               	movf	_Load,w
  4535  0C89  3E32               	addlw	50
  4536  0C8A  0086               	movwf	6
  4537  0C8B  3002               	movlw	2	; select bank4/5
  4538  0C8C  0087               	movwf	7
  4539  0C8D  3F40               	moviw [0]fsr1
  4540  0C8E  00A7               	movwf	??_getLoad_AD+3
  4541  0C8F  3F41               	moviw [1]fsr1
  4542  0C90  00A8               	movwf	??_getLoad_AD+4
  4543  0C91  0826               	movf	??_getLoad_AD+2,w
  4544  0C92  0228               	subwf	??_getLoad_AD+4,w
  4545  0C93  1D03               	skipz
  4546  0C94  2C97               	goto	u6865
  4547  0C95  0825               	movf	??_getLoad_AD+1,w
  4548  0C96  0227               	subwf	??_getLoad_AD+3,w
  4549  0C97                     u6865:	
  4550  0C97  1803               	skipnc
  4551  0C98  2CAB               	goto	l7592
  4552                           
  4553                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4554  0C99  087B               	movf	_Load,w
  4555  0C9A  3E32               	addlw	50
  4556  0C9B  0086               	movwf	6
  4557  0C9C  3002               	movlw	2	; select bank4/5
  4558  0C9D  0087               	movwf	7
  4559  0C9E  352B               	lslf	getLoad_AD@i,w
  4560  0C9F  3E1A               	addlw	26
  4561  0CA0  077B               	addwf	_Load,w
  4562  0CA1  00A4               	movwf	??_getLoad_AD
  4563  0CA2  0824               	movf	??_getLoad_AD,w
  4564  0CA3  0084               	movwf	4
  4565  0CA4  3002               	movlw	2	; select bank4/5
  4566  0CA5  0085               	movwf	5
  4567  0CA6  3F40               	moviw [0]fsr1
  4568  0CA7  3F80               	movwi [0]fsr0
  4569  0CA8  3F41               	moviw [1]fsr1
  4570  0CA9  3F81               	movwi [1]fsr0
  4571                           
  4572                           ;OverLoad_B1.c: 32: break;
  4573  0CAA  0008               	return
  4574  0CAB                     l7592:	
  4575  0CAB  3001               	movlw	1
  4576  0CAC  00A4               	movwf	??_getLoad_AD
  4577  0CAD  0824               	movf	??_getLoad_AD,w
  4578  0CAE  07AB               	addwf	getLoad_AD@i,f
  4579  0CAF  2C78               	goto	L1
  4580  0CB0                     __end_of_getLoad_AD:	
  4581                           
  4582                           	psect	text5
  4583  1B40                     __ptext5:	
  4584 ;; *************** function _getAD *****************
  4585 ;; Defined at:
  4586 ;;		line 344 in file "../src/MCU_B1.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  adcon0          1    wreg     unsigned char 
  4589 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  2    0[BANK0 ] int 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;Total ram usage:        4 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    5
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_getLoad_AD
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           
  4616                           ;psect for function _getAD
  4617  1B40                     _getAD:	
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4621                           ;getAD@adcon0 stored from wreg
  4622  1B40  0020               	movlb	0	; select bank0
  4623  1B41  00A3               	movwf	getAD@adcon0
  4624                           
  4625                           ;MCU_B1.c: 345: ADCON0 = adcon0;
  4626  1B42  0823               	movf	getAD@adcon0,w
  4627  1B43  0021               	movlb	1	; select bank1
  4628  1B44  009D               	movwf	29	;volatile
  4629                           
  4630                           ;MCU_B1.c: 346: ADCON1 = adcon1;
  4631  1B45  0020               	movlb	0	; select bank0
  4632  1B46  0820               	movf	getAD@adcon1,w
  4633  1B47  0021               	movlb	1	; select bank1
  4634  1B48  009E               	movwf	30	;volatile
  4635                           
  4636                           ;MCU_B1.c: 347: GO_nDONE = 1;
  4637  1B49  149D               	bsf	29,1	;volatile
  4638  1B4A                     l1397:	
  4639                           ;MCU_B1.c: 348: while (GO_nDONE == 1);
  4640                           
  4641  1B4A  189D               	btfsc	29,1	;volatile
  4642  1B4B  2B4A               	goto	l1397
  4643                           
  4644                           ;MCU_B1.c: 349: return ((ADRESH*256)+ADRESL);
  4645  1B4C  081C               	movf	28,w	;volatile
  4646  1B4D  0020               	movlb	0	; select bank0
  4647  1B4E  01A1               	clrf	?_getAD+1
  4648  1B4F  07A1               	addwf	?_getAD+1,f
  4649  1B50  0021               	movlb	1	; select bank1
  4650  1B51  081B               	movf	27,w	;volatile
  4651  1B52  0020               	movlb	0	; select bank0
  4652  1B53  01A0               	clrf	?_getAD
  4653  1B54  07A0               	addwf	?_getAD,f
  4654  1B55  0008               	return
  4655  1B56                     __end_of_getAD:	
  4656                           
  4657                           	psect	text6
  4658  1C87                     __ptext6:	
  4659 ;; *************** function _WDT_Main *****************
  4660 ;; Defined at:
  4661 ;;		line 902 in file "../src/MCU_B1.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;Total ram usage:        1 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    6
  4682 ;; This function calls:
  4683 ;;		_WDT_Clearing
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _WDT_Main
  4691  1C87                     _WDT_Main:	
  4692                           
  4693                           ;MCU_B1.c: 903: if (WDT->Enable) {
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4697  1C87  0021               	movlb	1	; select bank1
  4698  1C88  0869               	movf	_WDT^(0+128),w
  4699  1C89  0086               	movwf	6
  4700  1C8A  0187               	clrf	7
  4701  1C8B  1C01               	btfss	1,0
  4702  1C8C  0008               	return
  4703                           
  4704                           ;MCU_B1.c: 904: if (WDT->Count-- > 0) {
  4705  1C8D  0A69               	incf	_WDT^(0+128),w
  4706  1C8E  0086               	movwf	6
  4707  1C8F  0187               	clrf	7
  4708  1C90  3001               	movlw	1
  4709  1C91  0281               	subwf	1,f
  4710  1C92  0801               	movf	1,w
  4711  1C93  3AFF               	xorlw	255
  4712  1C94  1903               	skipnz
  4713  1C95  0008               	return
  4714                           
  4715                           ;MCU_B1.c: 905: WDT->Count = 10;
  4716  1C96  300A               	movlw	10
  4717  1C97  0020               	movlb	0	; select bank0
  4718  1C98  00A0               	movwf	??_WDT_Main
  4719  1C99  0021               	movlb	1	; select bank1
  4720  1C9A  0A69               	incf	_WDT^(0+128),w
  4721  1C9B  0086               	movwf	6
  4722  1C9C  0187               	clrf	7
  4723  1C9D  0020               	movlb	0	; select bank0
  4724  1C9E  0820               	movf	??_WDT_Main,w
  4725  1C9F  0081               	movwf	1
  4726                           
  4727                           ;MCU_B1.c: 906: WDT_Clearing();
  4728  1CA0  3180  2002         	fcall	_WDT_Clearing
  4729  1CA2  0008               	return
  4730  1CA3                     __end_of_WDT_Main:	
  4731                           
  4732                           	psect	text7
  4733  0002                     __ptext7:	
  4734 ;; *************** function _WDT_Clearing *****************
  4735 ;; Defined at:
  4736 ;;		line 912 in file "../src/MCU_B1.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;		None               void
  4743 ;; Registers used:
  4744 ;;		None
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;Total ram usage:        0 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    5
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_WDT_Main
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           
  4765                           ;psect for function _WDT_Clearing
  4766  0002                     _WDT_Clearing:	
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in _WDT_Clearing: []
  4770  0002  0064               	clrwdt	;# 
  4771  0003  0008               	return
  4772  0004                     __end_of_WDT_Clearing:	
  4773                           
  4774                           	psect	text8
  4775  18FF                     __ptext8:	
  4776 ;; *************** function _Switch_Main *****************
  4777 ;; Defined at:
  4778 ;;		line 61 in file "../src/Switch_B1.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;		None
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;		None               void
  4785 ;; Registers used:
  4786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;Total ram usage:        0 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:   11
  4799 ;; This function calls:
  4800 ;;		_setSw_Main
  4801 ;; This function is called by:
  4802 ;;		_main
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _Switch_Main
  4808  18FF                     _Switch_Main:	
  4809                           
  4810                           ;Switch_B1.c: 63: setSw_Main(1);
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4814  18FF  3001               	movlw	1
  4815  1900  3184  2487  3198   	fcall	_setSw_Main
  4816                           
  4817                           ;Switch_B1.c: 67: setSw_Main(2);
  4818  1903  3002               	movlw	2
  4819  1904  3184  2487         	fcall	_setSw_Main
  4820  1906  0008               	return
  4821  1907                     __end_of_Switch_Main:	
  4822                           
  4823                           	psect	text9
  4824  0487                     __ptext9:	
  4825 ;; *************** function _setSw_Main *****************
  4826 ;; Defined at:
  4827 ;;		line 111 in file "../src/Switch_B1.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  sw              1    wreg     unsigned char 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  sw              1   73[BANK0 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;Total ram usage:        5 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:   10
  4848 ;; This function calls:
  4849 ;;		_SwPointSelect
  4850 ;;		_Sw_DimmerAdjFunc
  4851 ;;		_Sw_DimmerOffFunc
  4852 ;;		_Sw_DimmerOnFunc
  4853 ;;		_setBuz
  4854 ;;		_setRF_Learn
  4855 ;; This function is called by:
  4856 ;;		_Switch_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _setSw_Main
  4862  0487                     _setSw_Main:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4866                           ;setSw_Main@sw stored from wreg
  4867  0487  0020               	movlb	0	; select bank0
  4868  0488  00E9               	movwf	setSw_Main@sw
  4869                           
  4870                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4871  0489  087A               	movf	_Sw,w
  4872  048A  0086               	movwf	6
  4873  048B  3001               	movlw	1	; select bank2/3
  4874  048C  0087               	movwf	7
  4875  048D  1C01               	btfss	1,0
  4876  048E  0008               	return
  4877                           
  4878                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4879  048F  0869               	movf	setSw_Main@sw,w
  4880  0490  319A  22D8  3184   	fcall	_SwPointSelect
  4881                           
  4882                           ;Switch_B1.c: 125: if (sw == 1) {
  4883  0493  0020               	movlb	0	; select bank0
  4884  0494  0869               	movf	setSw_Main@sw,w
  4885  0495  3A01               	xorlw	1
  4886  0496  1D03               	skipz
  4887  0497  2CA4               	goto	l7262
  4888                           
  4889                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4890  0498  01E7               	clrf	_setSw_Main$4550
  4891  0499  0AE7               	incf	_setSw_Main$4550,f
  4892  049A  1F0C               	btfss	12,6	;volatile
  4893  049B  1A0C               	btfsc	12,4	;volatile
  4894  049C  2C9E               	goto	l7260
  4895  049D  01E7               	clrf	_setSw_Main$4550
  4896  049E                     l7260:	
  4897  049E  087A               	movf	_Sw,w
  4898  049F  0086               	movwf	6
  4899  04A0  3001               	movlw	1	; select bank2/3
  4900  04A1  0087               	movwf	7
  4901  04A2  0867               	movf	_setSw_Main$4550,w
  4902  04A3  2CB3               	goto	L2
  4903  04A4                     l7262:	
  4904                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4905                           
  4906  04A4  0869               	movf	setSw_Main@sw,w
  4907  04A5  3A02               	xorlw	2
  4908  04A6  1D03               	skipz
  4909  04A7  2CB6               	goto	l7272
  4910                           
  4911                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4912  04A8  01E8               	clrf	_setSw_Main$4551
  4913  04A9  0AE8               	incf	_setSw_Main$4551,f
  4914  04AA  1C0C               	btfss	12,0	;volatile
  4915  04AB  188D               	btfsc	13,1	;volatile
  4916  04AC  2CAE               	goto	l7270
  4917  04AD  01E8               	clrf	_setSw_Main$4551
  4918  04AE                     l7270:	
  4919  04AE  087A               	movf	_Sw,w
  4920  04AF  0086               	movwf	6
  4921  04B0  3001               	movlw	1	; select bank2/3
  4922  04B1  0087               	movwf	7
  4923  04B2  0868               	movf	_setSw_Main$4551,w
  4924  04B3                     L2:	
  4925  04B3  1081               	bcf	1,1
  4926  04B4  1D03               	skipz
  4927  04B5  1481               	bsf	1,1
  4928  04B6                     l7272:	
  4929                           
  4930                           ;Switch_B1.c: 129: }
  4931                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4932  04B6  087A               	movf	_Sw,w
  4933  04B7  0086               	movwf	6
  4934  04B8  3001               	movlw	1	; select bank2/3
  4935  04B9  0087               	movwf	7
  4936  04BA  1C81               	btfss	1,1
  4937  04BB  2D8D               	goto	l7320
  4938                           
  4939                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4940  04BC  087A               	movf	_Sw,w
  4941  04BD  0086               	movwf	6
  4942  04BE  3001               	movlw	1	; select bank2/3
  4943  04BF  0087               	movwf	7
  4944  04C0  1901               	btfsc	1,2
  4945  04C1  2CE3               	goto	l7286
  4946                           
  4947                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4948  04C2  3001               	movlw	1
  4949  04C3  00E5               	movwf	??_setSw_Main
  4950  04C4  087A               	movf	_Sw,w
  4951  04C5  3E02               	addlw	2
  4952  04C6  0086               	movwf	6
  4953  04C7  3001               	movlw	1	; select bank2/3
  4954  04C8  0087               	movwf	7
  4955  04C9  0865               	movf	??_setSw_Main,w
  4956  04CA  0781               	addwf	1,f
  4957                           
  4958                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4959  04CB  087A               	movf	_Sw,w
  4960  04CC  3E02               	addlw	2
  4961  04CD  0086               	movwf	6
  4962  04CE  3001               	movlw	1	; select bank2/3
  4963  04CF  0087               	movwf	7
  4964  04D0  3005               	movlw	5
  4965  04D1  0201               	subwf	1,w
  4966  04D2  1C03               	skipc
  4967  04D3  0008               	return
  4968                           
  4969                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4970  04D4  087A               	movf	_Sw,w
  4971  04D5  3E02               	addlw	2
  4972  04D6  0086               	movwf	6
  4973  04D7  3001               	movlw	1	; select bank2/3
  4974  04D8  0087               	movwf	7
  4975  04D9  0181               	clrf	1
  4976                           
  4977                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4978  04DA  087A               	movf	_Sw,w
  4979  04DB  0086               	movwf	6
  4980  04DC  3001               	movlw	1	; select bank2/3
  4981  04DD  0087               	movwf	7
  4982  04DE  1501               	bsf	1,2
  4983                           
  4984                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4985  04DF  0869               	movf	setSw_Main@sw,w
  4986  04E0  3197  2715         	fcall	_Sw_DimmerOnFunc
  4987                           
  4988                           ;Switch_B1.c: 148: }
  4989                           ;Switch_B1.c: 149: } else {
  4990  04E2  0008               	return
  4991  04E3                     l7286:	
  4992                           
  4993                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4994  04E3  087A               	movf	_Sw,w
  4995  04E4  0086               	movwf	6
  4996  04E5  3001               	movlw	1	; select bank2/3
  4997  04E6  0087               	movwf	7
  4998  04E7  1981               	btfsc	1,3
  4999  04E8  2D15               	goto	l7296
  5000                           
  5001                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5002  04E9  087A               	movf	_Sw,w
  5003  04EA  3E03               	addlw	3
  5004  04EB  0086               	movwf	6
  5005  04EC  3001               	movlw	1	; select bank2/3
  5006  04ED  0087               	movwf	7
  5007  04EE  3001               	movlw	1
  5008  04EF  0781               	addwf	1,f
  5009  04F0  3141               	addfsr 1,1
  5010  04F1  1803               	skipnc
  5011  04F2  0A81               	incf	1,f
  5012                           
  5013                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5014  04F3  087A               	movf	_Sw,w
  5015  04F4  3E03               	addlw	3
  5016  04F5  0086               	movwf	6
  5017  04F6  3001               	movlw	1	; select bank2/3
  5018  04F7  0087               	movwf	7
  5019  04F8  3F40               	moviw [0]fsr1
  5020  04F9  0020               	movlb	0	; select bank0
  5021  04FA  00E5               	movwf	??_setSw_Main
  5022  04FB  3F41               	moviw [1]fsr1
  5023  04FC  00E6               	movwf	??_setSw_Main+1
  5024  04FD  3000               	movlw	0
  5025  04FE  0266               	subwf	??_setSw_Main+1,w
  5026  04FF  3096               	movlw	150
  5027  0500  1903               	skipnz
  5028  0501  0265               	subwf	??_setSw_Main,w
  5029  0502  1C03               	skipc
  5030  0503  0008               	return
  5031                           
  5032                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5033  0504  087A               	movf	_Sw,w
  5034  0505  3E03               	addlw	3
  5035  0506  0086               	movwf	6
  5036  0507  3001               	movlw	1	; select bank2/3
  5037  0508  0087               	movwf	7
  5038  0509  3000               	movlw	0
  5039  050A  3FC0               	movwi [0]fsr1
  5040  050B  3FC1               	movwi [1]fsr1
  5041                           
  5042                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  5043  050C  087A               	movf	_Sw,w
  5044  050D  0086               	movwf	6
  5045  050E  3001               	movlw	1	; select bank2/3
  5046  050F  0087               	movwf	7
  5047  0510  1581               	bsf	1,3
  5048                           
  5049                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5050  0511  0869               	movf	setSw_Main@sw,w
  5051  0512  3192  2203         	fcall	_Sw_DimmerAdjFunc
  5052                           
  5053                           ;Switch_B1.c: 160: }
  5054                           ;Switch_B1.c: 161: } else {
  5055  0514  0008               	return
  5056  0515                     l7296:	
  5057                           
  5058                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  5059  0515  087A               	movf	_Sw,w
  5060  0516  0086               	movwf	6
  5061  0517  3001               	movlw	1	; select bank2/3
  5062  0518  0087               	movwf	7
  5063  0519  1A01               	btfsc	1,4
  5064  051A  2D5A               	goto	l7310
  5065                           
  5066                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5067  051B  087A               	movf	_Sw,w
  5068  051C  3E05               	addlw	5
  5069  051D  0086               	movwf	6
  5070  051E  3001               	movlw	1	; select bank2/3
  5071  051F  0087               	movwf	7
  5072  0520  3001               	movlw	1
  5073  0521  0781               	addwf	1,f
  5074  0522  3141               	addfsr 1,1
  5075  0523  1803               	skipnc
  5076  0524  0A81               	incf	1,f
  5077                           
  5078                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5079  0525  087A               	movf	_Sw,w
  5080  0526  3E05               	addlw	5
  5081  0527  0086               	movwf	6
  5082  0528  3001               	movlw	1	; select bank2/3
  5083  0529  0087               	movwf	7
  5084  052A  3F40               	moviw [0]fsr1
  5085  052B  0020               	movlb	0	; select bank0
  5086  052C  00E5               	movwf	??_setSw_Main
  5087  052D  3F41               	moviw [1]fsr1
  5088  052E  00E6               	movwf	??_setSw_Main+1
  5089  052F  3000               	movlw	0
  5090  0530  0266               	subwf	??_setSw_Main+1,w
  5091  0531  3096               	movlw	150
  5092  0532  1903               	skipnz
  5093  0533  0265               	subwf	??_setSw_Main,w
  5094  0534  1C03               	skipc
  5095  0535  0008               	return
  5096                           
  5097                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5098  0536  087A               	movf	_Sw,w
  5099  0537  3E05               	addlw	5
  5100  0538  0086               	movwf	6
  5101  0539  3001               	movlw	1	; select bank2/3
  5102  053A  0087               	movwf	7
  5103  053B  3000               	movlw	0
  5104  053C  3FC0               	movwi [0]fsr1
  5105  053D  3FC1               	movwi [1]fsr1
  5106                           
  5107                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5108  053E  087A               	movf	_Sw,w
  5109  053F  0086               	movwf	6
  5110  0540  3001               	movlw	1	; select bank2/3
  5111  0541  0087               	movwf	7
  5112  0542  1601               	bsf	1,4
  5113                           
  5114                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  5115  0543  01A2               	clrf	setRF_Learn@command
  5116  0544  0AA2               	incf	setRF_Learn@command,f
  5117  0545  3001               	movlw	1
  5118  0546  319A  2212  3184   	fcall	_setRF_Learn
  5119                           
  5120                           ;Switch_B1.c: 172: if (myMain->First) {
  5121  0549  0021               	movlb	1	; select bank1
  5122  054A  086A               	movf	_myMain^(0+128),w
  5123  054B  3E03               	addlw	3
  5124  054C  0086               	movwf	6
  5125  054D  3001               	movlw	1	; select bank2/3
  5126  054E  0087               	movwf	7
  5127  054F  1C81               	btfss	1,1
  5128  0550  0008               	return
  5129                           
  5130                           ;Switch_B1.c: 173: setBuz(2, 100);
  5131  0551  3064               	movlw	100
  5132  0552  0020               	movlb	0	; select bank0
  5133  0553  00A6               	movwf	setBuz@time
  5134  0554  3000               	movlw	0
  5135  0555  00A7               	movwf	setBuz@time+1
  5136  0556  3002               	movlw	2
  5137  0557  3189  214F         	fcall	_setBuz
  5138                           
  5139                           ;Switch_B1.c: 174: }
  5140                           ;Switch_B1.c: 176: }
  5141                           ;Switch_B1.c: 177: } else {
  5142  0559  0008               	return
  5143  055A                     l7310:	
  5144                           
  5145                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  5146  055A  087A               	movf	_Sw,w
  5147  055B  0086               	movwf	6
  5148  055C  3001               	movlw	1	; select bank2/3
  5149  055D  0087               	movwf	7
  5150  055E  1A81               	btfsc	1,5
  5151  055F  0008               	return
  5152                           
  5153                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5154  0560  087A               	movf	_Sw,w
  5155  0561  3E07               	addlw	7
  5156  0562  0086               	movwf	6
  5157  0563  3001               	movlw	1	; select bank2/3
  5158  0564  0087               	movwf	7
  5159  0565  3001               	movlw	1
  5160  0566  0781               	addwf	1,f
  5161  0567  3141               	addfsr 1,1
  5162  0568  1803               	skipnc
  5163  0569  0A81               	incf	1,f
  5164                           
  5165                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  5166  056A  087A               	movf	_Sw,w
  5167  056B  3E07               	addlw	7
  5168  056C  0086               	movwf	6
  5169  056D  3001               	movlw	1	; select bank2/3
  5170  056E  0087               	movwf	7
  5171  056F  3F40               	moviw [0]fsr1
  5172  0570  0020               	movlb	0	; select bank0
  5173  0571  00E5               	movwf	??_setSw_Main
  5174  0572  3F41               	moviw [1]fsr1
  5175  0573  00E6               	movwf	??_setSw_Main+1
  5176  0574  3001               	movlw	1
  5177  0575  0266               	subwf	??_setSw_Main+1,w
  5178  0576  302C               	movlw	44
  5179  0577  1903               	skipnz
  5180  0578  0265               	subwf	??_setSw_Main,w
  5181  0579  1C03               	skipc
  5182  057A  0008               	return
  5183                           
  5184                           ;Switch_B1.c: 181: {
  5185                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  5186  057B  087A               	movf	_Sw,w
  5187  057C  3E07               	addlw	7
  5188  057D  0086               	movwf	6
  5189  057E  3001               	movlw	1	; select bank2/3
  5190  057F  0087               	movwf	7
  5191  0580  3000               	movlw	0
  5192  0581  3FC0               	movwi [0]fsr1
  5193  0582  3FC1               	movwi [1]fsr1
  5194                           
  5195                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  5196  0583  087A               	movf	_Sw,w
  5197  0584  0086               	movwf	6
  5198  0585  3001               	movlw	1	; select bank2/3
  5199  0586  0087               	movwf	7
  5200  0587  1681               	bsf	1,5
  5201                           
  5202                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  5203  0588  01A2               	clrf	setRF_Learn@command
  5204  0589  3001               	movlw	1
  5205  058A  319A  2212         	fcall	_setRF_Learn
  5206                           
  5207                           ;Switch_B1.c: 189: }
  5208                           ;Switch_B1.c: 190: }
  5209                           ;Switch_B1.c: 191: }
  5210                           ;Switch_B1.c: 192: }
  5211                           ;Switch_B1.c: 193: }
  5212                           ;Switch_B1.c: 194: } else {
  5213  058C  0008               	return
  5214  058D                     l7320:	
  5215                           
  5216                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  5217  058D  087A               	movf	_Sw,w
  5218  058E  0086               	movwf	6
  5219  058F  3001               	movlw	1	; select bank2/3
  5220  0590  0087               	movwf	7
  5221  0591  1D01               	btfss	1,2
  5222  0592  0008               	return
  5223                           
  5224                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  5225  0593  3001               	movlw	1
  5226  0594  0020               	movlb	0	; select bank0
  5227  0595  00E5               	movwf	??_setSw_Main
  5228  0596  087A               	movf	_Sw,w
  5229  0597  3E02               	addlw	2
  5230  0598  0086               	movwf	6
  5231  0599  3001               	movlw	1	; select bank2/3
  5232  059A  0087               	movwf	7
  5233  059B  0865               	movf	??_setSw_Main,w
  5234  059C  0781               	addwf	1,f
  5235                           
  5236                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  5237  059D  087A               	movf	_Sw,w
  5238  059E  3E02               	addlw	2
  5239  059F  0086               	movwf	6
  5240  05A0  3001               	movlw	1	; select bank2/3
  5241  05A1  0087               	movwf	7
  5242  05A2  3005               	movlw	5
  5243  05A3  0201               	subwf	1,w
  5244  05A4  1C03               	skipc
  5245  05A5  0008               	return
  5246                           
  5247                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  5248  05A6  087A               	movf	_Sw,w
  5249  05A7  3E02               	addlw	2
  5250  05A8  0086               	movwf	6
  5251  05A9  3001               	movlw	1	; select bank2/3
  5252  05AA  0087               	movwf	7
  5253  05AB  0181               	clrf	1
  5254                           
  5255                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  5256  05AC  087A               	movf	_Sw,w
  5257  05AD  0086               	movwf	6
  5258  05AE  3001               	movlw	1	; select bank2/3
  5259  05AF  0087               	movwf	7
  5260  05B0  1101               	bcf	1,2
  5261                           
  5262                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  5263  05B1  087A               	movf	_Sw,w
  5264  05B2  3E03               	addlw	3
  5265  05B3  0086               	movwf	6
  5266  05B4  3001               	movlw	1	; select bank2/3
  5267  05B5  0087               	movwf	7
  5268  05B6  3000               	movlw	0
  5269  05B7  3FC0               	movwi [0]fsr1
  5270  05B8  3FC1               	movwi [1]fsr1
  5271                           
  5272                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  5273  05B9  087A               	movf	_Sw,w
  5274  05BA  0086               	movwf	6
  5275  05BB  3001               	movlw	1	; select bank2/3
  5276  05BC  0087               	movwf	7
  5277  05BD  1181               	bcf	1,3
  5278                           
  5279                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  5280  05BE  087A               	movf	_Sw,w
  5281  05BF  3E05               	addlw	5
  5282  05C0  0086               	movwf	6
  5283  05C1  3001               	movlw	1	; select bank2/3
  5284  05C2  0087               	movwf	7
  5285  05C3  3000               	movlw	0
  5286  05C4  3FC0               	movwi [0]fsr1
  5287  05C5  3FC1               	movwi [1]fsr1
  5288                           
  5289                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  5290  05C6  087A               	movf	_Sw,w
  5291  05C7  0086               	movwf	6
  5292  05C8  3001               	movlw	1	; select bank2/3
  5293  05C9  0087               	movwf	7
  5294  05CA  1201               	bcf	1,4
  5295                           
  5296                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5297  05CB  087A               	movf	_Sw,w
  5298  05CC  3E07               	addlw	7
  5299  05CD  0086               	movwf	6
  5300  05CE  3001               	movlw	1	; select bank2/3
  5301  05CF  0087               	movwf	7
  5302  05D0  3000               	movlw	0
  5303  05D1  3FC0               	movwi [0]fsr1
  5304  05D2  3FC1               	movwi [1]fsr1
  5305                           
  5306                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  5307  05D3  087A               	movf	_Sw,w
  5308  05D4  0086               	movwf	6
  5309  05D5  3001               	movlw	1	; select bank2/3
  5310  05D6  0087               	movwf	7
  5311  05D7  1281               	bcf	1,5
  5312                           
  5313                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  5314  05D8  0869               	movf	setSw_Main@sw,w
  5315  05D9  3196  26A4  3184   	fcall	_Sw_DimmerOffFunc
  5316                           
  5317                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  5318  05DC  0020               	movlb	0	; select bank0
  5319  05DD  01A2               	clrf	setRF_Learn@command
  5320  05DE  3001               	movlw	1
  5321  05DF  319A  2212         	fcall	_setRF_Learn
  5322  05E1  0008               	return
  5323  05E2                     __end_of_setSw_Main:	
  5324                           
  5325                           	psect	text10
  5326  1A12                     __ptext10:	
  5327 ;; *************** function _setRF_Learn *****************
  5328 ;; Defined at:
  5329 ;;		line 30 in file "../src/RF_Control_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  rf              1    wreg     unsigned char 
  5332 ;;  command         1    2[BANK0 ] unsigned char 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  rf              1    3[BANK0 ] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5344 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    6
  5351 ;; This function calls:
  5352 ;;		_RfPointSelect
  5353 ;; This function is called by:
  5354 ;;		_setSw_Main
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _setRF_Learn
  5360  1A12                     _setRF_Learn:	
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5364                           ;setRF_Learn@rf stored from wreg
  5365  1A12  0020               	movlb	0	; select bank0
  5366  1A13  00A3               	movwf	setRF_Learn@rf
  5367                           
  5368                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  5369  1A14  0823               	movf	setRF_Learn@rf,w
  5370  1A15  3199  2174         	fcall	_RfPointSelect
  5371                           
  5372                           ;RF_Control_B1.c: 32: RF->Learn = command;
  5373  1A17  0021               	movlb	1	; select bank1
  5374  1A18  083E               	movf	_RF^(0+128),w
  5375  1A19  0086               	movwf	6
  5376  1A1A  0187               	clrf	7
  5377  1A1B  0020               	movlb	0	; select bank0
  5378  1A1C  0822               	movf	setRF_Learn@command,w
  5379  1A1D  1301               	bcf	1,6
  5380  1A1E  1D03               	skipz
  5381  1A1F  1701               	bsf	1,6
  5382  1A20  0008               	return
  5383  1A21                     __end_of_setRF_Learn:	
  5384                           
  5385                           	psect	text11
  5386  1715                     __ptext11:	
  5387 ;; *************** function _Sw_DimmerOnFunc *****************
  5388 ;; Defined at:
  5389 ;;		line 222 in file "../src/Switch_B1.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  sw              1    wreg     unsigned char 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  sw              1   67[BANK0 ] unsigned char 
  5394 ;;  Idle            1   66[BANK0 ] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;		None               void
  5397 ;; Registers used:
  5398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;Total ram usage:        2 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    9
  5411 ;; This function calls:
  5412 ;;		_setBuz
  5413 ;;		_setDimmerLights_Switch
  5414 ;;		_setDimmerLights_Trigger
  5415 ;;		_setRFSW_Status
  5416 ;;		_setRF_DimmerLights
  5417 ;;		_setTxData
  5418 ;; This function is called by:
  5419 ;;		_setSw_Main
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           
  5424                           ;psect for function _Sw_DimmerOnFunc
  5425  1715                     _Sw_DimmerOnFunc:	
  5426                           
  5427                           ;incstack = 0
  5428                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5429                           ;Sw_DimmerOnFunc@sw stored from wreg
  5430  1715  0020               	movlb	0	; select bank0
  5431  1716  00E3               	movwf	Sw_DimmerOnFunc@sw
  5432                           
  5433                           ;Switch_B1.c: 223: char Idle = 1;
  5434  1717  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5435  1718  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5436                           
  5437                           ;Switch_B1.c: 235: if (sw == 1) {
  5438  1719  0863               	movf	Sw_DimmerOnFunc@sw,w
  5439  171A  3A01               	xorlw	1
  5440  171B  1D03               	skipz
  5441  171C  2F20               	goto	l6676
  5442                           
  5443                           ;Switch_B1.c: 236: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5444  171D  0021               	movlb	1	; select bank1
  5445  171E  083C               	movf	_DimmerLights22^(0+128),w
  5446  171F  2F26               	goto	L3
  5447  1720                     l6676:	
  5448                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5449                           
  5450  1720  0863               	movf	Sw_DimmerOnFunc@sw,w
  5451  1721  3A02               	xorlw	2
  5452  1722  1D03               	skipz
  5453  1723  2F32               	goto	l6680
  5454                           
  5455                           ;Switch_B1.c: 238: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5456  1724  0021               	movlb	1	; select bank1
  5457  1725  083B               	movf	_DimmerLights11^(0+128),w
  5458  1726                     L3:	
  5459  1726  3E09               	addlw	9
  5460  1727  0086               	movwf	6
  5461  1728  3001               	movlw	1	; select bank2/3
  5462  1729  0087               	movwf	7
  5463  172A  1003               	clrc
  5464  172B  1D01               	btfss	1,2
  5465  172C  1403               	setc
  5466  172D  3000               	movlw	0
  5467  172E  1803               	btfsc	3,0
  5468  172F  3001               	movlw	1
  5469  1730  0020               	movlb	0	; select bank0
  5470  1731  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5471  1732                     l6680:	
  5472                           
  5473                           ;Switch_B1.c: 239: }
  5474                           ;Switch_B1.c: 242: if (Idle) {
  5475  1732  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5476  1733  1903               	btfsc	3,2
  5477  1734  0008               	return
  5478                           
  5479                           ;Switch_B1.c: 243: Sw->Flag = 1;
  5480  1735  087A               	movf	_Sw,w
  5481  1736  0086               	movwf	6
  5482  1737  3001               	movlw	1	; select bank2/3
  5483  1738  0087               	movwf	7
  5484  1739  1781               	bsf	1,7
  5485                           
  5486                           ;Switch_B1.c: 244: setBuz(1, 100);
  5487  173A  3064               	movlw	100
  5488  173B  00A6               	movwf	setBuz@time
  5489  173C  3000               	movlw	0
  5490  173D  00A7               	movwf	setBuz@time+1
  5491  173E  3001               	movlw	1
  5492  173F  3189  214F  3197   	fcall	_setBuz
  5493                           
  5494                           ;Switch_B1.c: 245: if (!Sw->Status) {
  5495  1742  087A               	movf	_Sw,w
  5496  1743  0086               	movwf	6
  5497  1744  3001               	movlw	1	; select bank2/3
  5498  1745  0087               	movwf	7
  5499  1746  1B01               	btfsc	1,6
  5500  1747  2F74               	goto	l6700
  5501                           
  5502                           ;Switch_B1.c: 246: Sw->Status = 1;
  5503  1748  087A               	movf	_Sw,w
  5504  1749  0086               	movwf	6
  5505  174A  3001               	movlw	1	; select bank2/3
  5506  174B  0087               	movwf	7
  5507  174C  1701               	bsf	1,6
  5508                           
  5509                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  5510  174D  0020               	movlb	0	; select bank0
  5511  174E  01A2               	clrf	setRFSW_Status@command
  5512  174F  0AA2               	incf	setRFSW_Status@command,f
  5513  1750  0863               	movf	Sw_DimmerOnFunc@sw,w
  5514  1751  3199  21E5  3197   	fcall	_setRFSW_Status
  5515                           
  5516                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  5517  1754  0020               	movlb	0	; select bank0
  5518  1755  01A2               	clrf	setDimmerLights_Trigger@command
  5519  1756  0AA2               	incf	setDimmerLights_Trigger@command,f
  5520  1757  0863               	movf	Sw_DimmerOnFunc@sw,w
  5521  1758  319A  2241  3197   	fcall	_setDimmerLights_Trigger
  5522                           
  5523                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  5524  175B  0020               	movlb	0	; select bank0
  5525  175C  01A2               	clrf	setDimmerLights_Switch@command
  5526  175D  0AA2               	incf	setDimmerLights_Switch@command,f
  5527  175E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5528  175F  319A  2231  3197   	fcall	_setDimmerLights_Switch
  5529                           
  5530                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  5531  1762  087A               	movf	_Sw,w
  5532  1763  0086               	movwf	6
  5533  1764  3001               	movlw	1	; select bank2/3
  5534  1765  0087               	movwf	7
  5535  1766  3000               	movlw	0
  5536  1767  1B01               	btfsc	1,6
  5537  1768  3001               	movlw	1
  5538  1769  0020               	movlb	0	; select bank0
  5539  176A  00DD               	movwf	setRF_DimmerLights@on
  5540  176B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5541  176C  3195  25CB  3197   	fcall	_setRF_DimmerLights
  5542                           
  5543                           ;Switch_B1.c: 253: setTxData(1);
  5544  176F  3001               	movlw	1
  5545  1770  318D  254A         	fcall	_setTxData
  5546                           
  5547                           ;Switch_B1.c: 255: } else {
  5548  1772  0020               	movlb	0	; select bank0
  5549  1773  0008               	return
  5550  1774                     l6700:	
  5551                           
  5552                           ;Switch_B1.c: 256: Sw->Status = 0;
  5553  1774  087A               	movf	_Sw,w
  5554  1775  0086               	movwf	6
  5555  1776  3001               	movlw	1	; select bank2/3
  5556  1777  0087               	movwf	7
  5557  1778  1301               	bcf	1,6
  5558                           
  5559                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  5560  1779  087A               	movf	_Sw,w
  5561  177A  0086               	movwf	6
  5562  177B  3001               	movlw	1	; select bank2/3
  5563  177C  0087               	movwf	7
  5564  177D  3000               	movlw	0
  5565  177E  1B01               	btfsc	1,6
  5566  177F  3001               	movlw	1
  5567  1780  0020               	movlb	0	; select bank0
  5568  1781  00A2               	movwf	setRFSW_Status@command
  5569  1782  0863               	movf	Sw_DimmerOnFunc@sw,w
  5570  1783  3199  21E5         	fcall	_setRFSW_Status
  5571  1785  0020               	movlb	0	; select bank0
  5572  1786  0008               	return
  5573  1787                     __end_of_Sw_DimmerOnFunc:	
  5574                           
  5575                           	psect	text12
  5576  16A4                     __ptext12:	
  5577 ;; *************** function _Sw_DimmerOffFunc *****************
  5578 ;; Defined at:
  5579 ;;		line 263 in file "../src/Switch_B1.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  sw              1    wreg     unsigned char 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  sw              1   68[BANK0 ] unsigned char 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;		None               void
  5586 ;; Registers used:
  5587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;Total ram usage:        3 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    9
  5600 ;; This function calls:
  5601 ;;		_setDelayOff_GO
  5602 ;;		_setDimmerLights_AdjGo
  5603 ;;		_setDimmerLights_Switch
  5604 ;;		_setDimmerLights_Trigger
  5605 ;;		_setDimmerLights_TriggerAdj
  5606 ;;		_setRF_DimmerLights
  5607 ;;		_setTxData
  5608 ;; This function is called by:
  5609 ;;		_setSw_Main
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function _Sw_DimmerOffFunc
  5615  16A4                     _Sw_DimmerOffFunc:	
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5619                           ;Sw_DimmerOffFunc@sw stored from wreg
  5620  16A4  0020               	movlb	0	; select bank0
  5621  16A5  00E4               	movwf	Sw_DimmerOffFunc@sw
  5622                           
  5623                           ;Switch_B1.c: 264: if (Sw->Flag) {
  5624  16A6  087A               	movf	_Sw,w
  5625  16A7  0086               	movwf	6
  5626  16A8  3001               	movlw	1	; select bank2/3
  5627  16A9  0087               	movwf	7
  5628  16AA  1F81               	btfss	1,7
  5629  16AB  0008               	return
  5630                           
  5631                           ;Switch_B1.c: 265: Sw->Flag = 0;
  5632  16AC  087A               	movf	_Sw,w
  5633  16AD  0086               	movwf	6
  5634  16AE  3001               	movlw	1	; select bank2/3
  5635  16AF  0087               	movwf	7
  5636  16B0  1381               	bcf	1,7
  5637                           
  5638                           ;Switch_B1.c: 266: if (Sw->Status) {
  5639  16B1  087A               	movf	_Sw,w
  5640  16B2  0086               	movwf	6
  5641  16B3  3001               	movlw	1	; select bank2/3
  5642  16B4  0087               	movwf	7
  5643  16B5  1F01               	btfss	1,6
  5644  16B6  2EF0               	goto	l6744
  5645                           
  5646                           ;Switch_B1.c: 267: if (Sw->Adj) {
  5647  16B7  0A7A               	incf	_Sw,w
  5648  16B8  0086               	movwf	6
  5649  16B9  3001               	movlw	1	; select bank2/3
  5650  16BA  0087               	movwf	7
  5651  16BB  1C01               	btfss	1,0
  5652  16BC  0008               	return
  5653                           
  5654                           ;Switch_B1.c: 268: Sw->Adj = 0;
  5655  16BD  0A7A               	incf	_Sw,w
  5656  16BE  0086               	movwf	6
  5657  16BF  3001               	movlw	1	; select bank2/3
  5658  16C0  0087               	movwf	7
  5659  16C1  1001               	bcf	1,0
  5660                           
  5661                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  5662  16C2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5663  16C3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5664  16C4  0864               	movf	Sw_DimmerOffFunc@sw,w
  5665  16C5  319A  2271  3196   	fcall	_setDimmerLights_TriggerAdj
  5666                           
  5667                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  5668  16C8  0020               	movlb	0	; select bank0
  5669  16C9  01A2               	clrf	setDimmerLights_AdjGo@command
  5670  16CA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5671  16CB  319A  2261  3196   	fcall	_setDimmerLights_AdjGo
  5672                           
  5673                           ;Switch_B1.c: 272: product->Data[17]=product->Data[26 + sw];
  5674  16CE  0020               	movlb	0	; select bank0
  5675  16CF  0864               	movf	Sw_DimmerOffFunc@sw,w
  5676  16D0  3E1A               	addlw	26
  5677  16D1  077D               	addwf	_product,w
  5678  16D2  00E2               	movwf	??_Sw_DimmerOffFunc
  5679  16D3  0862               	movf	??_Sw_DimmerOffFunc,w
  5680  16D4  0086               	movwf	6
  5681  16D5  3001               	movlw	1	; select bank2/3
  5682  16D6  0087               	movwf	7
  5683  16D7  0801               	movf	1,w
  5684  16D8  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5685  16D9  087D               	movf	_product,w
  5686  16DA  3E11               	addlw	17
  5687  16DB  0086               	movwf	6
  5688  16DC  3001               	movlw	1	; select bank2/3
  5689  16DD  0087               	movwf	7
  5690  16DE  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5691  16DF  0081               	movwf	1
  5692                           
  5693                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5694  16E0  087A               	movf	_Sw,w
  5695  16E1  0086               	movwf	6
  5696  16E2  3001               	movlw	1	; select bank2/3
  5697  16E3  0087               	movwf	7
  5698  16E4  3000               	movlw	0
  5699  16E5  1B01               	btfsc	1,6
  5700  16E6  3001               	movlw	1
  5701  16E7  00DD               	movwf	setRF_DimmerLights@on
  5702  16E8  0864               	movf	Sw_DimmerOffFunc@sw,w
  5703  16E9  3195  25CB  3196   	fcall	_setRF_DimmerLights
  5704                           
  5705                           ;Switch_B1.c: 274: setTxData(1);
  5706  16EC  3001               	movlw	1
  5707  16ED  318D  254A         	fcall	_setTxData
  5708                           
  5709                           ;Switch_B1.c: 276: }
  5710                           ;Switch_B1.c: 277: } else {
  5711  16EF  0008               	return
  5712  16F0                     l6744:	
  5713                           
  5714                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  5715  16F0  0020               	movlb	0	; select bank0
  5716  16F1  01A2               	clrf	setDimmerLights_Trigger@command
  5717  16F2  0AA2               	incf	setDimmerLights_Trigger@command,f
  5718  16F3  0864               	movf	Sw_DimmerOffFunc@sw,w
  5719  16F4  319A  2241  3196   	fcall	_setDimmerLights_Trigger
  5720                           
  5721                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  5722  16F7  0020               	movlb	0	; select bank0
  5723  16F8  01A2               	clrf	setDimmerLights_Switch@command
  5724  16F9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5725  16FA  319A  2231  3196   	fcall	_setDimmerLights_Switch
  5726                           
  5727                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  5728  16FD  0020               	movlb	0	; select bank0
  5729  16FE  01A3               	clrf	setDelayOff_GO@command
  5730  16FF  01A4               	clrf	setDelayOff_GO@value
  5731  1700  0864               	movf	Sw_DimmerOffFunc@sw,w
  5732  1701  3193  2388  3196   	fcall	_setDelayOff_GO
  5733                           
  5734                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  5735  1704  087A               	movf	_Sw,w
  5736  1705  0086               	movwf	6
  5737  1706  3001               	movlw	1	; select bank2/3
  5738  1707  0087               	movwf	7
  5739  1708  3000               	movlw	0
  5740  1709  1B01               	btfsc	1,6
  5741  170A  3001               	movlw	1
  5742  170B  0020               	movlb	0	; select bank0
  5743  170C  00DD               	movwf	setRF_DimmerLights@on
  5744  170D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5745  170E  3195  25CB  3196   	fcall	_setRF_DimmerLights
  5746                           
  5747                           ;Switch_B1.c: 283: setTxData(1);
  5748  1711  3001               	movlw	1
  5749  1712  318D  254A         	fcall	_setTxData
  5750  1714  0008               	return
  5751  1715                     __end_of_Sw_DimmerOffFunc:	
  5752                           
  5753                           	psect	text13
  5754  1203                     __ptext13:	
  5755 ;; *************** function _Sw_DimmerAdjFunc *****************
  5756 ;; Defined at:
  5757 ;;		line 290 in file "../src/Switch_B1.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  sw              1    wreg     unsigned char 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  sw              1    5[BANK0 ] unsigned char 
  5762 ;;  Idle            1    4[BANK0 ] unsigned char 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;		None               void
  5765 ;; Registers used:
  5766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:        2 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    7
  5779 ;; This function calls:
  5780 ;;		_setDimmerLights_AdjGo
  5781 ;;		_setDimmerLights_TriggerAdj
  5782 ;;		_setRFSW_Status
  5783 ;; This function is called by:
  5784 ;;		_setSw_Main
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _Sw_DimmerAdjFunc
  5790  1203                     _Sw_DimmerAdjFunc:	
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5794                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5795  1203  0020               	movlb	0	; select bank0
  5796  1204  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5797                           
  5798                           ;Switch_B1.c: 291: char Idle = 1;
  5799  1205  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5800  1206  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5801                           
  5802                           ;Switch_B1.c: 303: if (sw == 1) {
  5803  1207  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5804  1208  3A01               	xorlw	1
  5805  1209  1D03               	skipz
  5806  120A  2A0E               	goto	l6710
  5807                           
  5808                           ;Switch_B1.c: 304: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5809  120B  0021               	movlb	1	; select bank1
  5810  120C  083C               	movf	_DimmerLights22^(0+128),w
  5811  120D  2A14               	goto	L4
  5812  120E                     l6710:	
  5813                           ;Switch_B1.c: 305: } else if (sw == 2) {
  5814                           
  5815  120E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5816  120F  3A02               	xorlw	2
  5817  1210  1D03               	skipz
  5818  1211  2A20               	goto	l6714
  5819                           
  5820                           ;Switch_B1.c: 306: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5821  1212  0021               	movlb	1	; select bank1
  5822  1213  083B               	movf	_DimmerLights11^(0+128),w
  5823  1214                     L4:	
  5824  1214  3E09               	addlw	9
  5825  1215  0086               	movwf	6
  5826  1216  3001               	movlw	1	; select bank2/3
  5827  1217  0087               	movwf	7
  5828  1218  1003               	clrc
  5829  1219  1D01               	btfss	1,2
  5830  121A  1403               	setc
  5831  121B  3000               	movlw	0
  5832  121C  1803               	btfsc	3,0
  5833  121D  3001               	movlw	1
  5834  121E  0020               	movlb	0	; select bank0
  5835  121F  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5836  1220                     l6714:	
  5837                           
  5838                           ;Switch_B1.c: 307: }
  5839                           ;Switch_B1.c: 310: if (Idle) {
  5840  1220  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5841  1221  1903               	btfsc	3,2
  5842  1222  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 311: if (Sw->Flag) {
  5845  1223  087A               	movf	_Sw,w
  5846  1224  0086               	movwf	6
  5847  1225  3001               	movlw	1	; select bank2/3
  5848  1226  0087               	movwf	7
  5849  1227  1F81               	btfss	1,7
  5850  1228  0008               	return
  5851                           
  5852                           ;Switch_B1.c: 312: Sw->Adj = 1;
  5853  1229  0A7A               	incf	_Sw,w
  5854  122A  0086               	movwf	6
  5855  122B  3001               	movlw	1	; select bank2/3
  5856  122C  0087               	movwf	7
  5857  122D  1401               	bsf	1,0
  5858                           
  5859                           ;Switch_B1.c: 313: Sw->Status = 1;
  5860  122E  087A               	movf	_Sw,w
  5861  122F  0086               	movwf	6
  5862  1230  3001               	movlw	1	; select bank2/3
  5863  1231  0087               	movwf	7
  5864  1232  1701               	bsf	1,6
  5865                           
  5866                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  5867  1233  01A2               	clrf	setRFSW_Status@command
  5868  1234  0AA2               	incf	setRFSW_Status@command,f
  5869  1235  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5870  1236  3199  21E5  3192   	fcall	_setRFSW_Status
  5871                           
  5872                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  5873  1239  0020               	movlb	0	; select bank0
  5874  123A  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5875  123B  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5876  123C  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5877  123D  319A  2271  3192   	fcall	_setDimmerLights_TriggerAdj
  5878                           
  5879                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  5880  1240  0020               	movlb	0	; select bank0
  5881  1241  01A2               	clrf	setDimmerLights_AdjGo@command
  5882  1242  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5883  1243  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5884  1244  319A  2261         	fcall	_setDimmerLights_AdjGo
  5885  1246  0020               	movlb	0	; select bank0
  5886  1247  0008               	return
  5887  1248                     __end_of_Sw_DimmerAdjFunc:	
  5888                           
  5889                           	psect	text14
  5890  1A71                     __ptext14:	
  5891 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5892 ;; Defined at:
  5893 ;;		line 568 in file "../src/Dimmer_B1.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  lights          1    wreg     unsigned char 
  5896 ;;  command         1    2[BANK0 ] unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  lights          1    3[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5908 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;Total ram usage:        2 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    6
  5915 ;; This function calls:
  5916 ;;		_DimmerLightsPointSelect
  5917 ;; This function is called by:
  5918 ;;		_Sw_DimmerOffFunc
  5919 ;;		_Sw_DimmerAdjFunc
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           
  5924                           ;psect for function _setDimmerLights_TriggerAdj
  5925  1A71                     _setDimmerLights_TriggerAdj:	
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5929                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5930  1A71  0020               	movlb	0	; select bank0
  5931  1A72  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5932                           
  5933                           ;Dimmer_B1.c: 569: DimmerLightsPointSelect(lights);
  5934  1A73  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5935  1A74  319A  22C5         	fcall	_DimmerLightsPointSelect
  5936                           
  5937                           ;Dimmer_B1.c: 570: DimmerLights->TriggerAdj = command;
  5938  1A76  0878               	movf	_DimmerLights,w
  5939  1A77  3E09               	addlw	9
  5940  1A78  0086               	movwf	6
  5941  1A79  3001               	movlw	1	; select bank2/3
  5942  1A7A  0087               	movwf	7
  5943  1A7B  0020               	movlb	0	; select bank0
  5944  1A7C  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5945  1A7D  1181               	bcf	1,3
  5946  1A7E  1D03               	skipz
  5947  1A7F  1581               	bsf	1,3
  5948  1A80  0008               	return
  5949  1A81                     __end_of_setDimmerLights_TriggerAdj:	
  5950                           
  5951                           	psect	text15
  5952  1A61                     __ptext15:	
  5953 ;; *************** function _setDimmerLights_AdjGo *****************
  5954 ;; Defined at:
  5955 ;;		line 558 in file "../src/Dimmer_B1.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  lights          1    wreg     unsigned char 
  5958 ;;  command         1    2[BANK0 ] unsigned char 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  lights          1    3[BANK0 ] unsigned char 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;		None               void
  5963 ;; Registers used:
  5964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;Total ram usage:        2 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    6
  5977 ;; This function calls:
  5978 ;;		_DimmerLightsPointSelect
  5979 ;; This function is called by:
  5980 ;;		_Sw_DimmerOffFunc
  5981 ;;		_Sw_DimmerAdjFunc
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           
  5986                           ;psect for function _setDimmerLights_AdjGo
  5987  1A61                     _setDimmerLights_AdjGo:	
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5991                           ;setDimmerLights_AdjGo@lights stored from wreg
  5992  1A61  0020               	movlb	0	; select bank0
  5993  1A62  00A3               	movwf	setDimmerLights_AdjGo@lights
  5994                           
  5995                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(lights);
  5996  1A63  0823               	movf	setDimmerLights_AdjGo@lights,w
  5997  1A64  319A  22C5         	fcall	_DimmerLightsPointSelect
  5998                           
  5999                           ;Dimmer_B1.c: 560: DimmerLights->AdjGo = command;
  6000  1A66  0878               	movf	_DimmerLights,w
  6001  1A67  3E09               	addlw	9
  6002  1A68  0086               	movwf	6
  6003  1A69  3001               	movlw	1	; select bank2/3
  6004  1A6A  0087               	movwf	7
  6005  1A6B  0020               	movlb	0	; select bank0
  6006  1A6C  0822               	movf	setDimmerLights_AdjGo@command,w
  6007  1A6D  1101               	bcf	1,2
  6008  1A6E  1D03               	skipz
  6009  1A6F  1501               	bsf	1,2
  6010  1A70  0008               	return
  6011  1A71                     __end_of_setDimmerLights_AdjGo:	
  6012                           
  6013                           	psect	text16
  6014  19D8                     __ptext16:	
  6015 ;; *************** function _Switch_Initialization *****************
  6016 ;; Defined at:
  6017 ;;		line 37 in file "../src/Switch_B1.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;		None
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;Total ram usage:        0 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    8
  6038 ;; This function calls:
  6039 ;;		_TouchPower
  6040 ;;		_setSw_Initialization
  6041 ;; This function is called by:
  6042 ;;		_main
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _Switch_Initialization
  6048  19D8                     _Switch_Initialization:	
  6049                           
  6050                           ;Switch_B1.c: 38: TouchPower();
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6054  19D8  3198  20BB  3199   	fcall	_TouchPower
  6055                           
  6056                           ;Switch_B1.c: 40: WPUB1 = 0;
  6057  19DB  0024               	movlb	4	; select bank4
  6058  19DC  108D               	bcf	13,1	;volatile
  6059                           
  6060                           ;Switch_B1.c: 49: setSw_Initialization(1);
  6061  19DD  3001               	movlw	1
  6062  19DE  3198  20F7  3199   	fcall	_setSw_Initialization
  6063                           
  6064                           ;Switch_B1.c: 52: setSw_Initialization(2);
  6065  19E1  3002               	movlw	2
  6066  19E2  3198  20F7         	fcall	_setSw_Initialization
  6067  19E4  0008               	return
  6068  19E5                     __end_of_Switch_Initialization:	
  6069                           
  6070                           	psect	text17
  6071  18F7                     __ptext17:	
  6072 ;; *************** function _setSw_Initialization *****************
  6073 ;; Defined at:
  6074 ;;		line 77 in file "../src/Switch_B1.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sw              1    wreg     unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  sw              1    4[BANK0 ] unsigned char 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;		None               void
  6081 ;; Registers used:
  6082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        1 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    7
  6095 ;; This function calls:
  6096 ;;		_setLED
  6097 ;; This function is called by:
  6098 ;;		_Switch_Initialization
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _setSw_Initialization
  6104  18F7                     _setSw_Initialization:	
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6108                           ;setSw_Initialization@sw stored from wreg
  6109  18F7  0020               	movlb	0	; select bank0
  6110  18F8  00A4               	movwf	setSw_Initialization@sw
  6111                           
  6112                           ;Switch_B1.c: 78: setLED(sw, 1);
  6113  18F9  01A2               	clrf	setLED@command
  6114  18FA  0AA2               	incf	setLED@command,f
  6115  18FB  0824               	movf	setSw_Initialization@sw,w
  6116  18FC  3193  23E5         	fcall	_setLED
  6117  18FE  0008               	return
  6118  18FF                     __end_of_setSw_Initialization:	
  6119                           
  6120                           	psect	text18
  6121  18BB                     __ptext18:	
  6122 ;; *************** function _TouchPower *****************
  6123 ;; Defined at:
  6124 ;;		line 10 in file "../src/Switch_B1.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;		None               void
  6131 ;; Registers used:
  6132 ;;		None
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;Total ram usage:        0 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:    5
  6145 ;; This function calls:
  6146 ;;		Nothing
  6147 ;; This function is called by:
  6148 ;;		_Switch_Initialization
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           
  6153                           ;psect for function _TouchPower
  6154  18BB                     _TouchPower:	
  6155  18BB                     l2557:	
  6156                           ;Switch_B1.c: 11: while (!RC5)
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _TouchPower: []
  6160                           
  6161  18BB  0020               	movlb	0	; select bank0
  6162  18BC  1A8E               	btfsc	14,5	;volatile
  6163  18BD  0008               	return
  6164                           
  6165                           ;Switch_B1.c: 12: RC5 = 1;
  6166  18BE  168E               	bsf	14,5	;volatile
  6167  18BF  28BB               	goto	l2557
  6168  18C0                     __end_of_TouchPower:	
  6169                           
  6170                           	psect	text19
  6171  18B7                     __ptext19:	
  6172 ;; *************** function _RF_Main *****************
  6173 ;; Defined at:
  6174 ;;		line 23 in file "../src/RF_Control_B1.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;		None               void
  6181 ;; Registers used:
  6182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:   14
  6195 ;; This function calls:
  6196 ;;		_setRF_Main
  6197 ;; This function is called by:
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _RF_Main
  6204  18B7                     _RF_Main:	
  6205                           
  6206                           ;RF_Control_B1.c: 25: setRF_Main(1);
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6210  18B7  3001               	movlw	1
  6211  18B8  318B  2386         	fcall	_setRF_Main
  6212  18BA  0008               	return
  6213  18BB                     __end_of_RF_Main:	
  6214                           
  6215                           	psect	text20
  6216  0B86                     __ptext20:	
  6217 ;; *************** function _setRF_Main *****************
  6218 ;; Defined at:
  6219 ;;		line 57 in file "../src/RF_Control_B1.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  rf              1    wreg     unsigned char 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  rf              1   74[BANK0 ] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;		None               void
  6226 ;; Registers used:
  6227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;Total ram usage:        3 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:   13
  6240 ;; This function calls:
  6241 ;;		_CC2500_RxData
  6242 ;;		_CC2500_TxData
  6243 ;;		_CC2500_WriteCommand
  6244 ;;		_RF_RxDisable
  6245 ;;		_RfPointSelect
  6246 ;;		_getRxData
  6247 ;;		_setINT_GO
  6248 ;; This function is called by:
  6249 ;;		_RF_Main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _setRF_Main
  6255  0B86                     _setRF_Main:	
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6259                           ;setRF_Main@rf stored from wreg
  6260  0B86  0020               	movlb	0	; select bank0
  6261  0B87  00EA               	movwf	setRF_Main@rf
  6262                           
  6263                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  6264  0B88  086A               	movf	setRF_Main@rf,w
  6265  0B89  3199  2174  318B   	fcall	_RfPointSelect
  6266                           
  6267                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  6268  0B8C  0021               	movlb	1	; select bank1
  6269  0B8D  083E               	movf	_RF^(0+128),w
  6270  0B8E  0086               	movwf	6
  6271  0B8F  0187               	clrf	7
  6272  0B90  1C01               	btfss	1,0
  6273  0B91  0008               	return
  6274                           
  6275                           ;RF_Control_B1.c: 67: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  6276  0B92  0020               	movlb	0	; select bank0
  6277  0B93  01EB               	clrf	_setRF_Main$3777
  6278  0B94  1F0C               	btfss	12,6	;volatile
  6279  0B95  1A0C               	btfsc	12,4	;volatile
  6280  0B96  2B9B               	goto	l7198
  6281  0B97  180C               	btfsc	12,0	;volatile
  6282  0B98  2B9B               	goto	l7198
  6283  0B99  1C8D               	btfss	13,1	;volatile
  6284  0B9A  2BA4               	goto	l7202
  6285  0B9B                     l7198:	
  6286  0B9B  0021               	movlb	1	; select bank1
  6287  0B9C  083E               	movf	_RF^(0+128),w
  6288  0B9D  0086               	movwf	6
  6289  0B9E  0187               	clrf	7
  6290  0B9F  1B01               	btfsc	1,6
  6291  0BA0  2BA4               	goto	l7202
  6292  0BA1  0020               	movlb	0	; select bank0
  6293  0BA2  01EB               	clrf	_setRF_Main$3777
  6294  0BA3  0AEB               	incf	_setRF_Main$3777,f
  6295  0BA4                     l7202:	
  6296  0BA4  0021               	movlb	1	; select bank1
  6297  0BA5  083E               	movf	_RF^(0+128),w
  6298  0BA6  0086               	movwf	6
  6299  0BA7  0187               	clrf	7
  6300  0BA8  0020               	movlb	0	; select bank0
  6301  0BA9  086B               	movf	_setRF_Main$3777,w
  6302  0BAA  1381               	bcf	1,7
  6303  0BAB  1D03               	skipz
  6304  0BAC  1781               	bsf	1,7
  6305                           
  6306                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  6307  0BAD  0021               	movlb	1	; select bank1
  6308  0BAE  083E               	movf	_RF^(0+128),w
  6309  0BAF  0086               	movwf	6
  6310  0BB0  0187               	clrf	7
  6311  0BB1  1B81               	btfsc	1,7
  6312  0BB2  2BE0               	goto	l7224
  6313                           
  6314                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  6315  0BB3  083E               	movf	_RF^(0+128),w
  6316  0BB4  0086               	movwf	6
  6317  0BB5  0187               	clrf	7
  6318  0BB6  1C81               	btfss	1,1
  6319  0BB7  2BC4               	goto	l7212
  6320                           
  6321                           ;RF_Control_B1.c: 77: {
  6322                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  6323  0BB8  083E               	movf	_RF^(0+128),w
  6324  0BB9  0086               	movwf	6
  6325  0BBA  0187               	clrf	7
  6326  0BBB  1081               	bcf	1,1
  6327                           
  6328                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6329  0BBC  3195  2502  318B   	fcall	_CC2500_RxData
  6330                           
  6331                           ;RF_Control_B1.c: 86: getRxData(1);
  6332  0BBF  3001               	movlw	1
  6333  0BC0  3188  2002  318B   	fcall	_getRxData
  6334                           
  6335                           ;RF_Control_B1.c: 89: } else {
  6336  0BC3  2BE4               	goto	l7226
  6337  0BC4                     l7212:	
  6338                           
  6339                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  6340  0BC4  0021               	movlb	1	; select bank1
  6341  0BC5  083E               	movf	_RF^(0+128),w
  6342  0BC6  0086               	movwf	6
  6343  0BC7  0187               	clrf	7
  6344  0BC8  1901               	btfsc	1,2
  6345  0BC9  2BE4               	goto	l7226
  6346                           
  6347                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  6348  0BCA  083E               	movf	_RF^(0+128),w
  6349  0BCB  0086               	movwf	6
  6350  0BCC  0187               	clrf	7
  6351  0BCD  1981               	btfsc	1,3
  6352  0BCE  2BE4               	goto	l7226
  6353                           
  6354                           ;RF_Control_B1.c: 93: {
  6355                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  6356  0BCF  083E               	movf	_RF^(0+128),w
  6357  0BD0  0086               	movwf	6
  6358  0BD1  0187               	clrf	7
  6359  0BD2  1581               	bsf	1,3
  6360                           
  6361                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  6362  0BD3  3036               	movlw	54
  6363  0BD4  319A  2221  318B   	fcall	_CC2500_WriteCommand
  6364                           
  6365                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  6366  0BD7  3034               	movlw	52
  6367  0BD8  319A  2221  318B   	fcall	_CC2500_WriteCommand
  6368                           
  6369                           ;RF_Control_B1.c: 97: setINT_GO(1);
  6370  0BDB  3001               	movlw	1
  6371  0BDC  3199  2110  318B   	fcall	_setINT_GO
  6372                           
  6373                           ;RF_Control_B1.c: 98: }
  6374                           ;RF_Control_B1.c: 100: }
  6375                           ;RF_Control_B1.c: 101: }
  6376                           ;RF_Control_B1.c: 102: } else {
  6377  0BDF  2BE4               	goto	l7226
  6378  0BE0                     l7224:	
  6379                           
  6380                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  6381  0BE0  3001               	movlw	1
  6382  0BE1  319D  25CB  318B   	fcall	_RF_RxDisable
  6383  0BE4                     l7226:	
  6384                           
  6385                           ;RF_Control_B1.c: 104: }
  6386                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  6387  0BE4  0021               	movlb	1	; select bank1
  6388  0BE5  083E               	movf	_RF^(0+128),w
  6389  0BE6  0086               	movwf	6
  6390  0BE7  0187               	clrf	7
  6391  0BE8  1D01               	btfss	1,2
  6392  0BE9  0008               	return
  6393                           
  6394                           ;RF_Control_B1.c: 106: {
  6395                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  6396  0BEA  3001               	movlw	1
  6397  0BEB  319D  25CB  318B   	fcall	_RF_RxDisable
  6398                           
  6399                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  6400  0BEE  0021               	movlb	1	; select bank1
  6401  0BEF  083E               	movf	_RF^(0+128),w
  6402  0BF0  0086               	movwf	6
  6403  0BF1  0187               	clrf	7
  6404  0BF2  1A81               	btfsc	1,5
  6405  0BF3  2C0F               	goto	l7240
  6406                           
  6407                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  6408  0BF4  3001               	movlw	1
  6409  0BF5  0020               	movlb	0	; select bank0
  6410  0BF6  00E9               	movwf	??_setRF_Main
  6411  0BF7  0021               	movlb	1	; select bank1
  6412  0BF8  0A3E               	incf	_RF^(0+128),w
  6413  0BF9  0086               	movwf	6
  6414  0BFA  0187               	clrf	7
  6415  0BFB  0020               	movlb	0	; select bank0
  6416  0BFC  0869               	movf	??_setRF_Main,w
  6417  0BFD  0781               	addwf	1,f
  6418                           
  6419                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  6420  0BFE  0021               	movlb	1	; select bank1
  6421  0BFF  0A3E               	incf	_RF^(0+128),w
  6422  0C00  0086               	movwf	6
  6423  0C01  0187               	clrf	7
  6424  0C02  0801               	movf	1,w
  6425  0C03  3A19               	xorlw	25
  6426  0C04  1D03               	skipz
  6427  0C05  0008               	return
  6428                           
  6429                           ;RF_Control_B1.c: 111: {
  6430                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  6431  0C06  0A3E               	incf	_RF^(0+128),w
  6432  0C07  0086               	movwf	6
  6433  0C08  0187               	clrf	7
  6434  0C09  0181               	clrf	1
  6435                           
  6436                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  6437  0C0A  083E               	movf	_RF^(0+128),w
  6438  0C0B  0086               	movwf	6
  6439  0C0C  0187               	clrf	7
  6440  0C0D  1681               	bsf	1,5
  6441                           
  6442                           ;RF_Control_B1.c: 114: }
  6443                           ;RF_Control_B1.c: 115: } else {
  6444  0C0E  0008               	return
  6445  0C0F                     l7240:	
  6446                           
  6447                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  6448  0C0F  083E               	movf	_RF^(0+128),w
  6449  0C10  0086               	movwf	6
  6450  0C11  0187               	clrf	7
  6451  0C12  1281               	bcf	1,5
  6452                           
  6453                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  6454  0C13  083E               	movf	_RF^(0+128),w
  6455  0C14  0086               	movwf	6
  6456  0C15  0187               	clrf	7
  6457  0C16  1101               	bcf	1,2
  6458                           
  6459                           ;RF_Control_B1.c: 118: CC2500_TxData();
  6460  0C17  3191  217A         	fcall	_CC2500_TxData
  6461  0C19  0008               	return
  6462  0C1A                     __end_of_setRF_Main:	
  6463                           
  6464                           	psect	text21
  6465  0802                     __ptext21:	
  6466 ;; *************** function _getRxData *****************
  6467 ;; Defined at:
  6468 ;;		line 202 in file "../src/RF_Control_B1.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  rf              1    wreg     unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  rf              1   72[BANK0 ] unsigned char 
  6473 ;;  i               1    0        unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;		None               void
  6476 ;; Registers used:
  6477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;Total ram usage:        1 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:   12
  6490 ;; This function calls:
  6491 ;;		_RfPointSelect
  6492 ;;		_setControl_Lights_Table
  6493 ;;		_setLog_Code
  6494 ;; This function is called by:
  6495 ;;		_setRF_Main
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _getRxData
  6501  0802                     _getRxData:	
  6502                           
  6503                           ;incstack = 0
  6504                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6505                           ;getRxData@rf stored from wreg
  6506  0802  0020               	movlb	0	; select bank0
  6507  0803  00E8               	movwf	getRxData@rf
  6508                           
  6509                           ;RF_Control_B1.c: 203: unsigned char i;
  6510                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  6511  0804  0868               	movf	getRxData@rf,w
  6512  0805  3199  2174  3188   	fcall	_RfPointSelect
  6513                           
  6514                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  6515  0808  0021               	movlb	1	; select bank1
  6516  0809  083E               	movf	_RF^(0+128),w
  6517  080A  0086               	movwf	6
  6518  080B  0187               	clrf	7
  6519  080C  1F01               	btfss	1,6
  6520  080D  2819               	goto	l6624
  6521                           
  6522                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6523  080E  08A0               	movf	_RF_Data^(0+128),f
  6524  080F  1D03               	skipz
  6525  0810  0008               	return
  6526  0811  0821               	movf	(_RF_Data^(0+128)+1),w
  6527  0812  3A64               	xorlw	100
  6528  0813  1D03               	skipz
  6529  0814  0008               	return
  6530                           
  6531                           ;RF_Control_B1.c: 207: {
  6532                           ;RF_Control_B1.c: 208: setLog_Code(1);
  6533  0815  3001               	movlw	1
  6534  0816  3192  228E         	fcall	_setLog_Code
  6535                           
  6536                           ;RF_Control_B1.c: 209: }
  6537                           ;RF_Control_B1.c: 210: } else {
  6538  0818  0008               	return
  6539  0819                     l6624:	
  6540                           
  6541                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6542  0819  0021               	movlb	1	; select bank1
  6543  081A  08A0               	movf	_RF_Data^(0+128),f
  6544  081B  1D03               	skipz
  6545  081C  0008               	return
  6546  081D  0821               	movf	(_RF_Data^(0+128)+1),w
  6547  081E  3A02               	xorlw	2
  6548  081F  1D03               	skipz
  6549  0820  0008               	return
  6550                           
  6551                           ;RF_Control_B1.c: 212: {
  6552                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6553  0821  082C               	movf	(_RF_Data^(0+128)+12),w
  6554  0822  3AFF               	xorlw	255
  6555  0823  1D03               	skipz
  6556  0824  282F               	goto	l6636
  6557  0825  082D               	movf	(_RF_Data^(0+128)+13),w
  6558  0826  3AFF               	xorlw	255
  6559  0827  1D03               	skipz
  6560  0828  282F               	goto	l6636
  6561  0829  082E               	movf	(_RF_Data^(0+128)+14),w
  6562  082A  3AFF               	xorlw	255
  6563  082B  1D03               	skipz
  6564  082C  282F               	goto	l6636
  6565                           
  6566                           ;RF_Control_B1.c: 214: __nop();
  6567  082D  0000               	nop
  6568                           
  6569                           ;RF_Control_B1.c: 215: } else {
  6570  082E  0008               	return
  6571  082F                     l6636:	
  6572                           
  6573                           ;RF_Control_B1.c: 216: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6574  082F  087D               	movf	_product,w
  6575  0830  3E0C               	addlw	12
  6576  0831  0086               	movwf	6
  6577  0832  3001               	movlw	1	; select bank2/3
  6578  0833  0087               	movwf	7
  6579  0834  0021               	movlb	1	; select bank1
  6580  0835  082C               	movf	(_RF_Data^(0+128)+12),w
  6581  0836  0601               	xorwf	1,w
  6582  0837  1D03               	skipz
  6583  0838  0008               	return
  6584  0839  087D               	movf	_product,w
  6585  083A  3E0D               	addlw	13
  6586  083B  0086               	movwf	6
  6587  083C  3001               	movlw	1	; select bank2/3
  6588  083D  0087               	movwf	7
  6589  083E  082D               	movf	(_RF_Data^(0+128)+13),w
  6590  083F  0601               	xorwf	1,w
  6591  0840  1D03               	skipz
  6592  0841  0008               	return
  6593  0842  087D               	movf	_product,w
  6594  0843  3E0E               	addlw	14
  6595  0844  0086               	movwf	6
  6596  0845  3001               	movlw	1	; select bank2/3
  6597  0846  0087               	movwf	7
  6598  0847  082E               	movf	(_RF_Data^(0+128)+14),w
  6599  0848  0601               	xorwf	1,w
  6600  0849  1D03               	skipz
  6601  084A  0008               	return
  6602                           
  6603                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  6604  084B  3001               	movlw	1
  6605  084C  318A  22F4         	fcall	_setControl_Lights_Table
  6606                           
  6607                           ;RF_Control_B1.c: 224: {
  6608                           ;RF_Control_B1.c: 225: ;
  6609                           
  6610                           ;RF_Control_B1.c: 221: {
  6611                           ;RF_Control_B1.c: 222: ;
  6612                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6613                           
  6614                           ;RF_Control_B1.c: 218: }
  6615                           ;RF_Control_B1.c: 219: }
  6616                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6617  084E  0008               	return
  6618  084F                     __end_of_getRxData:	
  6619                           
  6620                           	psect	text22
  6621  128E                     __ptext22:	
  6622 ;; *************** function _setLog_Code *****************
  6623 ;; Defined at:
  6624 ;;		line 235 in file "../src/RF_Control_B1.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  rf              1    wreg     unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  rf              1   11[BANK0 ] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;		None               void
  6631 ;; Registers used:
  6632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;Total ram usage:        2 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    7
  6645 ;; This function calls:
  6646 ;;		_RfPointSelect
  6647 ;;		_setBuz
  6648 ;; This function is called by:
  6649 ;;		_getRxData
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _setLog_Code
  6655  128E                     _setLog_Code:	
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6659                           ;setLog_Code@rf stored from wreg
  6660  128E  0020               	movlb	0	; select bank0
  6661  128F  00AB               	movwf	setLog_Code@rf
  6662                           
  6663                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  6664  1290  082B               	movf	setLog_Code@rf,w
  6665  1291  3199  2174  3192   	fcall	_RfPointSelect
  6666                           
  6667                           ;RF_Control_B1.c: 237: product->Data[12]=RF_Data[12];
  6668  1294  0021               	movlb	1	; select bank1
  6669  1295  082C               	movf	(_RF_Data^(0+128)+12),w
  6670  1296  0020               	movlb	0	; select bank0
  6671  1297  00AA               	movwf	??_setLog_Code
  6672  1298  087D               	movf	_product,w
  6673  1299  3E0C               	addlw	12
  6674  129A  0086               	movwf	6
  6675  129B  3001               	movlw	1	; select bank2/3
  6676  129C  0087               	movwf	7
  6677  129D  082A               	movf	??_setLog_Code,w
  6678  129E  0081               	movwf	1
  6679                           
  6680                           ;RF_Control_B1.c: 238: product->Data[13]=RF_Data[13];
  6681  129F  0021               	movlb	1	; select bank1
  6682  12A0  082D               	movf	(_RF_Data^(0+128)+13),w
  6683  12A1  0020               	movlb	0	; select bank0
  6684  12A2  00AA               	movwf	??_setLog_Code
  6685  12A3  087D               	movf	_product,w
  6686  12A4  3E0D               	addlw	13
  6687  12A5  0086               	movwf	6
  6688  12A6  3001               	movlw	1	; select bank2/3
  6689  12A7  0087               	movwf	7
  6690  12A8  082A               	movf	??_setLog_Code,w
  6691  12A9  0081               	movwf	1
  6692                           
  6693                           ;RF_Control_B1.c: 239: product->Data[14]=RF_Data[14];
  6694  12AA  0021               	movlb	1	; select bank1
  6695  12AB  082E               	movf	(_RF_Data^(0+128)+14),w
  6696  12AC  0020               	movlb	0	; select bank0
  6697  12AD  00AA               	movwf	??_setLog_Code
  6698  12AE  087D               	movf	_product,w
  6699  12AF  3E0E               	addlw	14
  6700  12B0  0086               	movwf	6
  6701  12B1  3001               	movlw	1	; select bank2/3
  6702  12B2  0087               	movwf	7
  6703  12B3  082A               	movf	??_setLog_Code,w
  6704  12B4  0081               	movwf	1
  6705                           
  6706                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  6707  12B5  3064               	movlw	100
  6708  12B6  00A6               	movwf	setBuz@time
  6709  12B7  3000               	movlw	0
  6710  12B8  00A7               	movwf	setBuz@time+1
  6711  12B9  3001               	movlw	1
  6712  12BA  3189  214F  3192   	fcall	_setBuz
  6713                           
  6714                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  6715  12BD  0021               	movlb	1	; select bank1
  6716  12BE  083E               	movf	_RF^(0+128),w
  6717  12BF  0086               	movwf	6
  6718  12C0  0187               	clrf	7
  6719  12C1  1301               	bcf	1,6
  6720                           
  6721                           ;RF_Control_B1.c: 242: if (myMain->First) {
  6722  12C2  086A               	movf	_myMain^(0+128),w
  6723  12C3  3E03               	addlw	3
  6724  12C4  0086               	movwf	6
  6725  12C5  3001               	movlw	1	; select bank2/3
  6726  12C6  0087               	movwf	7
  6727  12C7  1C81               	btfss	1,1
  6728  12C8  2ACF               	goto	l2163
  6729                           
  6730                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  6731  12C9  0867               	movf	_Memory^(0+128),w
  6732  12CA  3E22               	addlw	34
  6733  12CB  0086               	movwf	6
  6734  12CC  3002               	movlw	2	; select bank4/5
  6735  12CD  0087               	movwf	7
  6736  12CE  1501               	bsf	1,2
  6737  12CF                     l2163:	
  6738                           
  6739                           ;RF_Control_B1.c: 244: }
  6740                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  6741  12CF  0867               	movf	_Memory^(0+128),w
  6742  12D0  3E22               	addlw	34
  6743  12D1  0086               	movwf	6
  6744  12D2  3002               	movlw	2	; select bank4/5
  6745  12D3  0087               	movwf	7
  6746  12D4  1401               	bsf	1,0
  6747  12D5  0008               	return
  6748  12D6                     __end_of_setLog_Code:	
  6749                           
  6750                           	psect	text23
  6751  0AF4                     __ptext23:	
  6752 ;; *************** function _setControl_Lights_Table *****************
  6753 ;; Defined at:
  6754 ;;		line 249 in file "../src/RF_Control_B1.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  rf              1    wreg     unsigned char 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  rf              1   71[BANK0 ] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;		None               void
  6761 ;; Registers used:
  6762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;Total ram usage:        1 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:   11
  6775 ;; This function calls:
  6776 ;;		_RfPointSelect
  6777 ;;		_setBuz
  6778 ;;		_setDimmerLights
  6779 ;;		_setRFSW_AdjControl
  6780 ;;		_setRFSW_Control
  6781 ;;		_setRFSW_Status
  6782 ;;		_setSw_Status
  6783 ;;		_setTxData
  6784 ;; This function is called by:
  6785 ;;		_getRxData
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           
  6790                           ;psect for function _setControl_Lights_Table
  6791  0AF4                     _setControl_Lights_Table:	
  6792                           
  6793                           ;incstack = 0
  6794                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6795                           ;setControl_Lights_Table@rf stored from wreg
  6796  0AF4  0020               	movlb	0	; select bank0
  6797  0AF5  00E7               	movwf	setControl_Lights_Table@rf
  6798                           
  6799                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  6800  0AF6  0867               	movf	setControl_Lights_Table@rf,w
  6801  0AF7  3199  2174  318A   	fcall	_RfPointSelect
  6802                           
  6803                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  6804  0AFA  0021               	movlb	1	; select bank1
  6805  0AFB  08AF               	movf	(_RF_Data^(0+128)+15),f
  6806  0AFC  1D03               	skipz
  6807  0AFD  2B47               	goto	l6352
  6808                           
  6809                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  6810  0AFE  0020               	movlb	0	; select bank0
  6811  0AFF  01A4               	clrf	setDimmerLights@status
  6812  0B00  3001               	movlw	1
  6813  0B01  318C  24B0  318A   	fcall	_setDimmerLights
  6814                           
  6815                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  6816  0B04  0020               	movlb	0	; select bank0
  6817  0B05  01A2               	clrf	setRFSW_Status@command
  6818  0B06  3001               	movlw	1
  6819  0B07  3199  21E5  318A   	fcall	_setRFSW_Status
  6820                           
  6821                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  6822  0B0A  0020               	movlb	0	; select bank0
  6823  0B0B  01A2               	clrf	setSw_Status@command
  6824  0B0C  3001               	movlw	1
  6825  0B0D  3199  21F4  318A   	fcall	_setSw_Status
  6826                           
  6827                           ;RF_Control_B1.c: 258: setDimmerLights(2, 0);
  6828  0B10  0020               	movlb	0	; select bank0
  6829  0B11  01A4               	clrf	setDimmerLights@status
  6830  0B12  3002               	movlw	2
  6831  0B13  318C  24B0  318A   	fcall	_setDimmerLights
  6832                           
  6833                           ;RF_Control_B1.c: 259: setRFSW_Status(2, 0);
  6834  0B16  0020               	movlb	0	; select bank0
  6835  0B17  01A2               	clrf	setRFSW_Status@command
  6836  0B18  3002               	movlw	2
  6837  0B19  3199  21E5  318A   	fcall	_setRFSW_Status
  6838                           
  6839                           ;RF_Control_B1.c: 260: setSw_Status(2, 0);
  6840  0B1C  0020               	movlb	0	; select bank0
  6841  0B1D  01A2               	clrf	setSw_Status@command
  6842  0B1E  3002               	movlw	2
  6843  0B1F  3199  21F4  318A   	fcall	_setSw_Status
  6844                           
  6845                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6846  0B22  087D               	movf	_product,w
  6847  0B23  3E09               	addlw	9
  6848  0B24  0086               	movwf	6
  6849  0B25  3001               	movlw	1	; select bank2/3
  6850  0B26  0087               	movwf	7
  6851  0B27  0181               	clrf	1
  6852                           
  6853                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6854  0B28  087D               	movf	_product,w
  6855  0B29  3E0B               	addlw	11
  6856  0B2A  0086               	movwf	6
  6857  0B2B  3001               	movlw	1	; select bank2/3
  6858  0B2C  0087               	movwf	7
  6859  0B2D  0181               	clrf	1
  6860                           
  6861                           ;RF_Control_B1.c: 270: product->Data[15]=0;
  6862  0B2E  087D               	movf	_product,w
  6863  0B2F  3E0F               	addlw	15
  6864  0B30  0086               	movwf	6
  6865  0B31  3001               	movlw	1	; select bank2/3
  6866  0B32  0087               	movwf	7
  6867  0B33  0181               	clrf	1
  6868                           
  6869                           ;RF_Control_B1.c: 271: product->Data[17]=0;
  6870  0B34  087D               	movf	_product,w
  6871  0B35  3E11               	addlw	17
  6872  0B36  0086               	movwf	6
  6873  0B37  3001               	movlw	1	; select bank2/3
  6874  0B38  0087               	movwf	7
  6875  0B39  0181               	clrf	1
  6876                           
  6877                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  6878  0B3A  3064               	movlw	100
  6879  0B3B  0020               	movlb	0	; select bank0
  6880  0B3C  00A6               	movwf	setBuz@time
  6881  0B3D  3000               	movlw	0
  6882  0B3E  00A7               	movwf	setBuz@time+1
  6883  0B3F  3001               	movlw	1
  6884  0B40  3189  214F  318A   	fcall	_setBuz
  6885                           
  6886                           ;RF_Control_B1.c: 273: setTxData(1);
  6887  0B43  3001               	movlw	1
  6888  0B44  318D  254A         	fcall	_setTxData
  6889                           
  6890                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  6891  0B46  0008               	return
  6892  0B47                     l6352:	
  6893  0B47  0021               	movlb	1	; select bank1
  6894  0B48  082F               	movf	(_RF_Data^(0+128)+15),w
  6895  0B49  3A20               	xorlw	32
  6896  0B4A  1D03               	skipz
  6897  0B4B  2B62               	goto	l6358
  6898                           
  6899                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6900  0B4C  087D               	movf	_product,w
  6901  0B4D  3E09               	addlw	9
  6902  0B4E  0086               	movwf	6
  6903  0B4F  3001               	movlw	1	; select bank2/3
  6904  0B50  0087               	movwf	7
  6905  0B51  0181               	clrf	1
  6906                           
  6907                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6908  0B52  087D               	movf	_product,w
  6909  0B53  3E0B               	addlw	11
  6910  0B54  0086               	movwf	6
  6911  0B55  3001               	movlw	1	; select bank2/3
  6912  0B56  0087               	movwf	7
  6913  0B57  0181               	clrf	1
  6914                           
  6915                           ;RF_Control_B1.c: 277: product->Data[17]=0;
  6916  0B58  087D               	movf	_product,w
  6917  0B59  3E11               	addlw	17
  6918  0B5A  0086               	movwf	6
  6919  0B5B  3001               	movlw	1	; select bank2/3
  6920  0B5C  0087               	movwf	7
  6921  0B5D  0181               	clrf	1
  6922                           
  6923                           ;RF_Control_B1.c: 278: setTxData(1);
  6924  0B5E  3001               	movlw	1
  6925  0B5F  318D  254A         	fcall	_setTxData
  6926                           
  6927                           ;RF_Control_B1.c: 279: }
  6928  0B61  0008               	return
  6929  0B62                     l6358:	
  6930                           
  6931                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  6932  0B62  0021               	movlb	1	; select bank1
  6933  0B63  082F               	movf	(_RF_Data^(0+128)+15),w
  6934  0B64  3A01               	xorlw	1
  6935  0B65  1D03               	skipz
  6936  0B66  2B6B               	goto	l6362
  6937                           
  6938                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  6939  0B67  3001               	movlw	1
  6940  0B68  318A  2264         	fcall	_setRFSW_Control
  6941                           
  6942                           ;RF_Control_B1.c: 283: }
  6943  0B6A  0008               	return
  6944  0B6B                     l6362:	
  6945                           
  6946                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  6947  0B6B  0021               	movlb	1	; select bank1
  6948  0B6C  082F               	movf	(_RF_Data^(0+128)+15),w
  6949  0B6D  3A11               	xorlw	17
  6950  0B6E  1D03               	skipz
  6951  0B6F  2B74               	goto	l6366
  6952                           
  6953                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  6954  0B70  3001               	movlw	1
  6955  0B71  3190  2071         	fcall	_setRFSW_AdjControl
  6956                           
  6957                           ;RF_Control_B1.c: 287: }
  6958  0B73  0008               	return
  6959  0B74                     l6366:	
  6960                           
  6961                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x02) {
  6962  0B74  0021               	movlb	1	; select bank1
  6963  0B75  082F               	movf	(_RF_Data^(0+128)+15),w
  6964  0B76  3A02               	xorlw	2
  6965  0B77  1D03               	skipz
  6966  0B78  2B7D               	goto	l6370
  6967                           
  6968                           ;RF_Control_B1.c: 293: setRFSW_Control(2);
  6969  0B79  3002               	movlw	2
  6970  0B7A  318A  2264         	fcall	_setRFSW_Control
  6971                           
  6972                           ;RF_Control_B1.c: 294: }
  6973  0B7C  0008               	return
  6974  0B7D                     l6370:	
  6975                           
  6976                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x21) {
  6977  0B7D  0021               	movlb	1	; select bank1
  6978  0B7E  082F               	movf	(_RF_Data^(0+128)+15),w
  6979  0B7F  3A21               	xorlw	33
  6980  0B80  1D03               	skipz
  6981  0B81  0008               	return
  6982                           
  6983                           ;RF_Control_B1.c: 297: setRFSW_AdjControl(2);
  6984  0B82  3002               	movlw	2
  6985  0B83  3190  2071         	fcall	_setRFSW_AdjControl
  6986  0B85  0008               	return
  6987  0B86                     __end_of_setControl_Lights_Table:	
  6988                           
  6989                           	psect	text24
  6990  0A64                     __ptext24:	
  6991 ;; *************** function _setRFSW_Control *****************
  6992 ;; Defined at:
  6993 ;;		line 334 in file "../src/RF_Control_B1.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  sw              1    wreg     unsigned char 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  sw              1   67[BANK0 ] unsigned char 
  6998 ;; Return value:  Size  Location     Type
  6999 ;;		None               void
  7000 ;; Registers used:
  7001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;Total ram usage:        2 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    9
  7014 ;; This function calls:
  7015 ;;		_RfSWPointSelect
  7016 ;;		_setBuz
  7017 ;;		_setDelayOff_GO
  7018 ;;		_setDimmerLights_Switch
  7019 ;;		_setDimmerLights_Trigger
  7020 ;;		_setRF_DimmerLights
  7021 ;;		_setSw_Status
  7022 ;;		_setTxData
  7023 ;; This function is called by:
  7024 ;;		_setControl_Lights_Table
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _setRFSW_Control
  7030  0A64                     _setRFSW_Control:	
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7034                           ;setRFSW_Control@sw stored from wreg
  7035  0A64  0020               	movlb	0	; select bank0
  7036  0A65  00E3               	movwf	setRFSW_Control@sw
  7037                           
  7038                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  7039  0A66  0863               	movf	setRFSW_Control@sw,w
  7040  0A67  319B  232A  318A   	fcall	_RfSWPointSelect
  7041                           
  7042                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  7043  0A6A  0021               	movlb	1	; select bank1
  7044  0A6B  083F               	movf	_RFSW^(0+128),w
  7045  0A6C  0086               	movwf	6
  7046  0A6D  0187               	clrf	7
  7047  0A6E  1801               	btfsc	1,0
  7048  0A6F  2AA5               	goto	l6200
  7049                           
  7050                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  7051  0A70  0830               	movf	(_RF_Data^(0+128)+16),w
  7052  0A71  3A80               	xorlw	128
  7053  0A72  1D03               	skipz
  7054  0A73  2A81               	goto	l6190
  7055                           
  7056                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  7057  0A74  0020               	movlb	0	; select bank0
  7058  0A75  01A3               	clrf	setDelayOff_GO@command
  7059  0A76  0AA3               	incf	setDelayOff_GO@command,f
  7060  0A77  0021               	movlb	1	; select bank1
  7061  0A78  0831               	movf	(_RF_Data^(0+128)+17),w
  7062  0A79  0020               	movlb	0	; select bank0
  7063  0A7A  00E2               	movwf	??_setRFSW_Control
  7064  0A7B  0862               	movf	??_setRFSW_Control,w
  7065  0A7C  00A4               	movwf	setDelayOff_GO@value
  7066  0A7D  0863               	movf	setRFSW_Control@sw,w
  7067  0A7E  3193  2388  318A   	fcall	_setDelayOff_GO
  7068  0A81                     l6190:	
  7069                           
  7070                           ;RF_Control_B1.c: 339: }
  7071                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  7072  0A81  0021               	movlb	1	; select bank1
  7073  0A82  083F               	movf	_RFSW^(0+128),w
  7074  0A83  0086               	movwf	6
  7075  0A84  0187               	clrf	7
  7076  0A85  1401               	bsf	1,0
  7077                           
  7078                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  7079  0A86  0020               	movlb	0	; select bank0
  7080  0A87  01A2               	clrf	setSw_Status@command
  7081  0A88  0AA2               	incf	setSw_Status@command,f
  7082  0A89  0863               	movf	setRFSW_Control@sw,w
  7083  0A8A  3199  21F4  318A   	fcall	_setSw_Status
  7084                           
  7085                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  7086  0A8D  0020               	movlb	0	; select bank0
  7087  0A8E  01A2               	clrf	setDimmerLights_Trigger@command
  7088  0A8F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7089  0A90  0863               	movf	setRFSW_Control@sw,w
  7090  0A91  319A  2241  318A   	fcall	_setDimmerLights_Trigger
  7091                           
  7092                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  7093  0A94  0020               	movlb	0	; select bank0
  7094  0A95  01A2               	clrf	setDimmerLights_Switch@command
  7095  0A96  0AA2               	incf	setDimmerLights_Switch@command,f
  7096  0A97  0863               	movf	setRFSW_Control@sw,w
  7097  0A98  319A  2231  318A   	fcall	_setDimmerLights_Switch
  7098                           
  7099                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  7100  0A9B  0021               	movlb	1	; select bank1
  7101  0A9C  083F               	movf	_RFSW^(0+128),w
  7102  0A9D  0086               	movwf	6
  7103  0A9E  0187               	clrf	7
  7104  0A9F  3000               	movlw	0
  7105  0AA0  1801               	btfsc	1,0
  7106  0AA1  3001               	movlw	1
  7107  0AA2  0020               	movlb	0	; select bank0
  7108  0AA3  00DD               	movwf	setRF_DimmerLights@on
  7109  0AA4  2AE3               	goto	L5
  7110  0AA5                     l6200:	
  7111                           ;RF_Control_B1.c: 347: } else {
  7112                           
  7113                           
  7114                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  7115  0AA5  0021               	movlb	1	; select bank1
  7116  0AA6  0830               	movf	(_RF_Data^(0+128)+16),w
  7117  0AA7  3A80               	xorlw	128
  7118  0AA8  1D03               	skipz
  7119  0AA9  2ABB               	goto	l6206
  7120                           
  7121                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  7122  0AAA  0020               	movlb	0	; select bank0
  7123  0AAB  01A3               	clrf	setDelayOff_GO@command
  7124  0AAC  0AA3               	incf	setDelayOff_GO@command,f
  7125  0AAD  0021               	movlb	1	; select bank1
  7126  0AAE  0831               	movf	(_RF_Data^(0+128)+17),w
  7127  0AAF  0020               	movlb	0	; select bank0
  7128  0AB0  00E2               	movwf	??_setRFSW_Control
  7129  0AB1  0862               	movf	??_setRFSW_Control,w
  7130  0AB2  00A4               	movwf	setDelayOff_GO@value
  7131  0AB3  0863               	movf	setRFSW_Control@sw,w
  7132  0AB4  3193  2388  318A   	fcall	_setDelayOff_GO
  7133                           
  7134                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  7135  0AB7  0020               	movlb	0	; select bank0
  7136  0AB8  01DD               	clrf	setRF_DimmerLights@on
  7137  0AB9  0ADD               	incf	setRF_DimmerLights@on,f
  7138  0ABA  2AE3               	goto	L5
  7139  0ABB                     l6206:	
  7140                           ;RF_Control_B1.c: 351: } else {
  7141                           
  7142                           
  7143                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  7144  0ABB  0021               	movlb	1	; select bank1
  7145  0ABC  083F               	movf	_RFSW^(0+128),w
  7146  0ABD  0086               	movwf	6
  7147  0ABE  0187               	clrf	7
  7148  0ABF  1001               	bcf	1,0
  7149                           
  7150                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  7151  0AC0  0020               	movlb	0	; select bank0
  7152  0AC1  01A2               	clrf	setSw_Status@command
  7153  0AC2  0863               	movf	setRFSW_Control@sw,w
  7154  0AC3  3199  21F4  318A   	fcall	_setSw_Status
  7155                           
  7156                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  7157  0AC6  0020               	movlb	0	; select bank0
  7158  0AC7  01A2               	clrf	setDimmerLights_Trigger@command
  7159  0AC8  0AA2               	incf	setDimmerLights_Trigger@command,f
  7160  0AC9  0863               	movf	setRFSW_Control@sw,w
  7161  0ACA  319A  2241  318A   	fcall	_setDimmerLights_Trigger
  7162                           
  7163                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  7164  0ACD  0021               	movlb	1	; select bank1
  7165  0ACE  083F               	movf	_RFSW^(0+128),w
  7166  0ACF  0086               	movwf	6
  7167  0AD0  0187               	clrf	7
  7168  0AD1  3000               	movlw	0
  7169  0AD2  1801               	btfsc	1,0
  7170  0AD3  3001               	movlw	1
  7171  0AD4  0020               	movlb	0	; select bank0
  7172  0AD5  00A2               	movwf	setDimmerLights_Switch@command
  7173  0AD6  0863               	movf	setRFSW_Control@sw,w
  7174  0AD7  319A  2231  318A   	fcall	_setDimmerLights_Switch
  7175                           
  7176                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  7177  0ADA  0020               	movlb	0	; select bank0
  7178  0ADB  01A3               	clrf	setDelayOff_GO@command
  7179  0ADC  01A4               	clrf	setDelayOff_GO@value
  7180  0ADD  0863               	movf	setRFSW_Control@sw,w
  7181  0ADE  3193  2388  318A   	fcall	_setDelayOff_GO
  7182                           
  7183                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  7184  0AE1  0020               	movlb	0	; select bank0
  7185  0AE2  01DD               	clrf	setRF_DimmerLights@on
  7186  0AE3                     L5:	
  7187  0AE3  0863               	movf	setRFSW_Control@sw,w
  7188  0AE4  3195  25CB  318A   	fcall	_setRF_DimmerLights
  7189                           
  7190                           ;RF_Control_B1.c: 360: }
  7191                           ;RF_Control_B1.c: 361: }
  7192                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  7193  0AE7  3064               	movlw	100
  7194  0AE8  0020               	movlb	0	; select bank0
  7195  0AE9  00A6               	movwf	setBuz@time
  7196  0AEA  3000               	movlw	0
  7197  0AEB  00A7               	movwf	setBuz@time+1
  7198  0AEC  3001               	movlw	1
  7199  0AED  3189  214F  318A   	fcall	_setBuz
  7200                           
  7201                           ;RF_Control_B1.c: 363: setTxData(1);
  7202  0AF0  3001               	movlw	1
  7203  0AF1  318D  254A         	fcall	_setTxData
  7204  0AF3  0008               	return
  7205  0AF4                     __end_of_setRFSW_Control:	
  7206                           
  7207                           	psect	text25
  7208  1388                     __ptext25:	
  7209 ;; *************** function _setDelayOff_GO *****************
  7210 ;; Defined at:
  7211 ;;		line 85 in file "../src/DelayOff_B1.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  sw              1    wreg     unsigned char 
  7214 ;;  command         1    3[BANK0 ] unsigned char 
  7215 ;;  value           1    4[BANK0 ] unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  sw              1    7[BANK0 ] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        5 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    6
  7234 ;; This function calls:
  7235 ;;		_DelayOffPointSelect
  7236 ;;		_DelayTimejudge
  7237 ;; This function is called by:
  7238 ;;		_setRFSW_Control
  7239 ;;		_Sw_DimmerOffFunc
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _setDelayOff_GO
  7245  1388                     _setDelayOff_GO:	
  7246                           
  7247                           ;incstack = 0
  7248                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7249                           ;setDelayOff_GO@sw stored from wreg
  7250  1388  0020               	movlb	0	; select bank0
  7251  1389  00A7               	movwf	setDelayOff_GO@sw
  7252                           
  7253                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  7254  138A  0827               	movf	setDelayOff_GO@sw,w
  7255  138B  319B  2356  3193   	fcall	_DelayOffPointSelect
  7256                           
  7257                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  7258  138E  0021               	movlb	1	; select bank1
  7259  138F  0839               	movf	_DelayOff^(0+128),w
  7260  1390  0086               	movwf	6
  7261  1391  0187               	clrf	7
  7262  1392  1C01               	btfss	1,0
  7263  1393  0008               	return
  7264                           
  7265                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  7266  1394  0839               	movf	_DelayOff^(0+128),w
  7267  1395  0086               	movwf	6
  7268  1396  0187               	clrf	7
  7269  1397  0020               	movlb	0	; select bank0
  7270  1398  0823               	movf	setDelayOff_GO@command,w
  7271  1399  1081               	bcf	1,1
  7272  139A  1D03               	skipz
  7273  139B  1481               	bsf	1,1
  7274                           
  7275                           ;DelayOff_B1.c: 89: if (command == 1) {
  7276  139C  0823               	movf	setDelayOff_GO@command,w
  7277  139D  3A01               	xorlw	1
  7278  139E  1D03               	skipz
  7279  139F  2BCB               	goto	l6010
  7280                           
  7281                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  7282  13A0  0824               	movf	setDelayOff_GO@value,w
  7283  13A1  319E  2674  3193   	fcall	_DelayTimejudge
  7284  13A4  0020               	movlb	0	; select bank0
  7285  13A5  00A5               	movwf	??_setDelayOff_GO
  7286  13A6  0021               	movlb	1	; select bank1
  7287  13A7  0A39               	incf	_DelayOff^(0+128),w
  7288  13A8  0086               	movwf	6
  7289  13A9  0187               	clrf	7
  7290  13AA  0020               	movlb	0	; select bank0
  7291  13AB  0825               	movf	??_setDelayOff_GO,w
  7292  13AC  0081               	movwf	1
  7293                           
  7294                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  7295  13AD  300F               	movlw	15
  7296  13AE  0524               	andwf	setDelayOff_GO@value,w
  7297  13AF  00A5               	movwf	??_setDelayOff_GO
  7298  13B0  0825               	movf	??_setDelayOff_GO,w
  7299  13B1  3A05               	xorlw	5
  7300  13B2  1903               	skipnz
  7301  13B3  2BB8               	goto	l6004
  7302  13B4  0824               	movf	setDelayOff_GO@value,w
  7303  13B5  390F               	andlw	15
  7304  13B6  1D03               	btfss	3,2
  7305  13B7  2BBE               	goto	l6008
  7306  13B8                     l6004:	
  7307  13B8  3026               	movlw	38
  7308  13B9  0224               	subwf	setDelayOff_GO@value,w
  7309  13BA  1803               	skipnc
  7310  13BB  2BBE               	goto	l6008
  7311                           
  7312                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  7313  13BC  0824               	movf	setDelayOff_GO@value,w
  7314  13BD  2BBF               	goto	L6
  7315  13BE                     l6008:	
  7316                           ;DelayOff_B1.c: 93: } else {
  7317                           
  7318                           
  7319                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  7320  13BE  3005               	movlw	5
  7321  13BF                     L6:	
  7322  13BF  00A5               	movwf	??_setDelayOff_GO
  7323  13C0  0827               	movf	setDelayOff_GO@sw,w
  7324  13C1  3E1A               	addlw	26
  7325  13C2  077D               	addwf	_product,w
  7326  13C3  00A6               	movwf	??_setDelayOff_GO+1
  7327  13C4  0826               	movf	??_setDelayOff_GO+1,w
  7328  13C5  0086               	movwf	6
  7329  13C6  3001               	movlw	1	; select bank2/3
  7330  13C7  0087               	movwf	7
  7331  13C8  0825               	movf	??_setDelayOff_GO,w
  7332  13C9  0081               	movwf	1
  7333                           
  7334                           ;DelayOff_B1.c: 95: }
  7335                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  7336  13CA  2BD7               	goto	l6014
  7337  13CB                     l6010:	
  7338  13CB  08A3               	movf	setDelayOff_GO@command,f
  7339  13CC  1D03               	skipz
  7340  13CD  2BD7               	goto	l6014
  7341                           
  7342                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  7343  13CE  0827               	movf	setDelayOff_GO@sw,w
  7344  13CF  3E1A               	addlw	26
  7345  13D0  077D               	addwf	_product,w
  7346  13D1  00A5               	movwf	??_setDelayOff_GO
  7347  13D2  0825               	movf	??_setDelayOff_GO,w
  7348  13D3  0086               	movwf	6
  7349  13D4  3001               	movlw	1	; select bank2/3
  7350  13D5  0087               	movwf	7
  7351  13D6  0181               	clrf	1
  7352  13D7                     l6014:	
  7353                           
  7354                           ;DelayOff_B1.c: 98: }
  7355                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  7356  13D7  0021               	movlb	1	; select bank1
  7357  13D8  0839               	movf	_DelayOff^(0+128),w
  7358  13D9  3E02               	addlw	2
  7359  13DA  0086               	movwf	6
  7360  13DB  0187               	clrf	7
  7361  13DC  3000               	movlw	0
  7362  13DD  3FC0               	movwi [0]fsr1
  7363  13DE  3FC1               	movwi [1]fsr1
  7364                           
  7365                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  7366  13DF  0839               	movf	_DelayOff^(0+128),w
  7367  13E0  3E04               	addlw	4
  7368  13E1  0086               	movwf	6
  7369  13E2  0187               	clrf	7
  7370  13E3  0181               	clrf	1
  7371  13E4  0008               	return
  7372  13E5                     __end_of_setDelayOff_GO:	
  7373                           
  7374                           	psect	text26
  7375  1E74                     __ptext26:	
  7376 ;; *************** function _DelayTimejudge *****************
  7377 ;; Defined at:
  7378 ;;		line 105 in file "../src/DelayOff_B1.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  value           1    wreg     unsigned char 
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;  value           1    1[BANK0 ] unsigned char 
  7383 ;;  i               1    2[BANK0 ] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;Total ram usage:        3 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    5
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_setDelayOff_GO
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _DelayTimejudge
  7409  1E74                     _DelayTimejudge:	
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7413                           ;DelayTimejudge@value stored from wreg
  7414  1E74  0020               	movlb	0	; select bank0
  7415  1E75  00A1               	movwf	DelayTimejudge@value
  7416                           
  7417                           ;DelayOff_B1.c: 106: char i = 5;
  7418  1E76  3005               	movlw	5
  7419  1E77  00A0               	movwf	??_DelayTimejudge
  7420  1E78  0820               	movf	??_DelayTimejudge,w
  7421  1E79  00A2               	movwf	DelayTimejudge@i
  7422                           
  7423                           ;DelayOff_B1.c: 107: switch (value) {
  7424  1E7A  2E8A               	goto	l5870
  7425  1E7B                     l5856:	
  7426                           ;DelayOff_B1.c: 108: case 0x05:
  7427                           
  7428                           
  7429                           ;DelayOff_B1.c: 109: i = 5;
  7430  1E7B  3005               	movlw	5
  7431  1E7C  2E86               	goto	L11
  7432  1E7D                     l5858:	
  7433                           ;DelayOff_B1.c: 111: case 0x10:
  7434                           
  7435                           ;DelayOff_B1.c: 110: break;
  7436                           
  7437                           
  7438                           ;DelayOff_B1.c: 112: i = 10;
  7439  1E7D  300A               	movlw	10
  7440  1E7E  2E86               	goto	L11
  7441  1E7F                     l5860:	
  7442                           ;DelayOff_B1.c: 114: case 0x15:
  7443                           
  7444                           ;DelayOff_B1.c: 113: break;
  7445                           
  7446                           
  7447                           ;DelayOff_B1.c: 115: i = 15;
  7448  1E7F  300F               	movlw	15
  7449  1E80  2E86               	goto	L11
  7450  1E81                     l5862:	
  7451                           ;DelayOff_B1.c: 117: case 0x20:
  7452                           
  7453                           ;DelayOff_B1.c: 116: break;
  7454                           
  7455                           
  7456                           ;DelayOff_B1.c: 118: i = 20;
  7457  1E81  3014               	movlw	20
  7458  1E82  2E86               	goto	L11
  7459  1E83                     l5864:	
  7460                           ;DelayOff_B1.c: 120: case 0x25:
  7461                           
  7462                           ;DelayOff_B1.c: 119: break;
  7463                           
  7464                           
  7465                           ;DelayOff_B1.c: 121: i = 25;
  7466  1E83  3019               	movlw	25
  7467  1E84  2E86               	goto	L11
  7468  1E85                     l5866:	
  7469                           ;DelayOff_B1.c: 123: case 0x30:
  7470                           
  7471                           ;DelayOff_B1.c: 122: break;
  7472                           
  7473                           
  7474                           ;DelayOff_B1.c: 124: i = 30;
  7475  1E85  301E               	movlw	30
  7476  1E86                     L11:	
  7477  1E86  00A0               	movwf	??_DelayTimejudge
  7478  1E87  0820               	movf	??_DelayTimejudge,w
  7479  1E88  00A2               	movwf	DelayTimejudge@i
  7480                           
  7481                           ;DelayOff_B1.c: 126: }
  7482                           
  7483                           ;DelayOff_B1.c: 125: break;
  7484  1E89  2E9E               	goto	l5872
  7485  1E8A                     l5870:	
  7486  1E8A  0821               	movf	DelayTimejudge@value,w
  7487                           
  7488                           ; Switch size 1, requested type "space"
  7489                           ; Number of cases is 6, Range of values is 5 to 48
  7490                           ; switch strategies available:
  7491                           ; Name         Instructions Cycles
  7492                           ; simple_byte           19    10 (average)
  7493                           ; direct_byte           97     9 (fixed)
  7494                           ; jumptable            263     9 (fixed)
  7495                           ;	Chosen strategy is simple_byte
  7496  1E8B  3A05               	xorlw	5	; case 5
  7497  1E8C  1903               	skipnz
  7498  1E8D  2E7B               	goto	l5856
  7499  1E8E  3A15               	xorlw	21	; case 16
  7500  1E8F  1903               	skipnz
  7501  1E90  2E7D               	goto	l5858
  7502  1E91  3A05               	xorlw	5	; case 21
  7503  1E92  1903               	skipnz
  7504  1E93  2E7F               	goto	l5860
  7505  1E94  3A35               	xorlw	53	; case 32
  7506  1E95  1903               	skipnz
  7507  1E96  2E81               	goto	l5862
  7508  1E97  3A05               	xorlw	5	; case 37
  7509  1E98  1903               	skipnz
  7510  1E99  2E83               	goto	l5864
  7511  1E9A  3A15               	xorlw	21	; case 48
  7512  1E9B  1903               	skipnz
  7513  1E9C  2E85               	goto	l5866
  7514  1E9D  2E9E               	goto	l5872
  7515  1E9E                     l5872:	
  7516                           
  7517                           ;DelayOff_B1.c: 127: return i;
  7518  1E9E  0822               	movf	DelayTimejudge@i,w
  7519  1E9F  0008               	return
  7520  1EA0                     __end_of_DelayTimejudge:	
  7521                           
  7522                           	psect	text27
  7523  1071                     __ptext27:	
  7524 ;; *************** function _setRFSW_AdjControl *****************
  7525 ;; Defined at:
  7526 ;;		line 367 in file "../src/RF_Control_B1.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  sw              1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  sw              1   70[BANK0 ] unsigned char 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;		None               void
  7533 ;; Registers used:
  7534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;Total ram usage:        3 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:   10
  7547 ;; This function calls:
  7548 ;;		_RfSWPointSelect
  7549 ;;		_setRF_DimmerValue
  7550 ;;		_setTxData
  7551 ;; This function is called by:
  7552 ;;		_setControl_Lights_Table
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _setRFSW_AdjControl
  7558  1071                     _setRFSW_AdjControl:	
  7559                           
  7560                           ;incstack = 0
  7561                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7562                           ;setRFSW_AdjControl@sw stored from wreg
  7563  1071  0020               	movlb	0	; select bank0
  7564  1072  00E6               	movwf	setRFSW_AdjControl@sw
  7565                           
  7566                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  7567  1073  0866               	movf	setRFSW_AdjControl@sw,w
  7568  1074  319B  232A  3190   	fcall	_RfSWPointSelect
  7569                           
  7570                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  7571  1077  0021               	movlb	1	; select bank1
  7572  1078  083F               	movf	_RFSW^(0+128),w
  7573  1079  0086               	movwf	6
  7574  107A  0187               	clrf	7
  7575  107B  1C01               	btfss	1,0
  7576  107C  2889               	goto	l6230
  7577                           
  7578                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  7579  107D  0867               	movf	_Memory^(0+128),w
  7580  107E  3E22               	addlw	34
  7581  107F  0086               	movwf	6
  7582  1080  3002               	movlw	2	; select bank4/5
  7583  1081  0087               	movwf	7
  7584  1082  1401               	bsf	1,0
  7585                           
  7586                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  7587  1083  0020               	movlb	0	; select bank0
  7588  1084  0866               	movf	setRFSW_AdjControl@sw,w
  7589  1085  319F  2794  3190   	fcall	_setRF_DimmerValue
  7590                           
  7591                           ;RF_Control_B1.c: 372: } else {
  7592  1088  289B               	goto	l2195
  7593  1089                     l6230:	
  7594                           
  7595                           ;RF_Control_B1.c: 373: product->Data[9]=product->Data[20 + sw];
  7596  1089  0020               	movlb	0	; select bank0
  7597  108A  0866               	movf	setRFSW_AdjControl@sw,w
  7598  108B  3E14               	addlw	20
  7599  108C  077D               	addwf	_product,w
  7600  108D  00E4               	movwf	??_setRFSW_AdjControl
  7601  108E  0864               	movf	??_setRFSW_AdjControl,w
  7602  108F  0086               	movwf	6
  7603  1090  3001               	movlw	1	; select bank2/3
  7604  1091  0087               	movwf	7
  7605  1092  0801               	movf	1,w
  7606  1093  00E5               	movwf	??_setRFSW_AdjControl+1
  7607  1094  087D               	movf	_product,w
  7608  1095  3E09               	addlw	9
  7609  1096  0086               	movwf	6
  7610  1097  3001               	movlw	1	; select bank2/3
  7611  1098  0087               	movwf	7
  7612  1099  0865               	movf	??_setRFSW_AdjControl+1,w
  7613  109A  0081               	movwf	1
  7614  109B                     l2195:	
  7615                           
  7616                           ;RF_Control_B1.c: 374: }
  7617                           ;RF_Control_B1.c: 375: product->Data[17]=product->Data[26 + sw];
  7618  109B  0020               	movlb	0	; select bank0
  7619  109C  0866               	movf	setRFSW_AdjControl@sw,w
  7620  109D  3E1A               	addlw	26
  7621  109E  077D               	addwf	_product,w
  7622  109F  00E4               	movwf	??_setRFSW_AdjControl
  7623  10A0  0864               	movf	??_setRFSW_AdjControl,w
  7624  10A1  0086               	movwf	6
  7625  10A2  3001               	movlw	1	; select bank2/3
  7626  10A3  0087               	movwf	7
  7627  10A4  0801               	movf	1,w
  7628  10A5  00E5               	movwf	??_setRFSW_AdjControl+1
  7629  10A6  087D               	movf	_product,w
  7630  10A7  3E11               	addlw	17
  7631  10A8  0086               	movwf	6
  7632  10A9  3001               	movlw	1	; select bank2/3
  7633  10AA  0087               	movwf	7
  7634  10AB  0865               	movf	??_setRFSW_AdjControl+1,w
  7635  10AC  0081               	movwf	1
  7636                           
  7637                           ;RF_Control_B1.c: 376: setTxData(1);
  7638  10AD  3001               	movlw	1
  7639  10AE  318D  254A         	fcall	_setTxData
  7640  10B0  0008               	return
  7641  10B1                     __end_of_setRFSW_AdjControl:	
  7642                           
  7643                           	psect	text28
  7644  1F94                     __ptext28:	
  7645 ;; *************** function _setRF_DimmerValue *****************
  7646 ;; Defined at:
  7647 ;;		line 387 in file "../src/RF_Control_B1.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  lights          1    wreg     unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  lights          1   67[BANK0 ] unsigned char 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;Total ram usage:        3 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    9
  7668 ;; This function calls:
  7669 ;;		_setDimmerLights_AdjRF
  7670 ;; This function is called by:
  7671 ;;		_setRFSW_AdjControl
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           
  7676                           ;psect for function _setRF_DimmerValue
  7677  1F94                     _setRF_DimmerValue:	
  7678                           
  7679                           ;incstack = 0
  7680                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7681                           ;setRF_DimmerValue@lights stored from wreg
  7682  1F94  0020               	movlb	0	; select bank0
  7683  1F95  00E3               	movwf	setRF_DimmerValue@lights
  7684                           
  7685                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  7686  1F96  3065               	movlw	101
  7687  1F97  0021               	movlb	1	; select bank1
  7688  1F98  0229               	subwf	(_RF_Data^(0+128)+9),w
  7689  1F99  1C03               	skipc
  7690  1F9A  2FA1               	goto	l6094
  7691                           
  7692                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  7693  1F9B  3064               	movlw	100
  7694  1F9C  0020               	movlb	0	; select bank0
  7695  1F9D  00E1               	movwf	??_setRF_DimmerValue
  7696  1F9E  0861               	movf	??_setRF_DimmerValue,w
  7697  1F9F  0021               	movlb	1	; select bank1
  7698  1FA0  00A9               	movwf	(_RF_Data^(0+128)+9)
  7699  1FA1                     l6094:	
  7700                           
  7701                           ;RF_Control_B1.c: 390: }
  7702                           ;RF_Control_B1.c: 391: product->Data[9]=RF_Data[9];
  7703  1FA1  0829               	movf	(_RF_Data^(0+128)+9),w
  7704  1FA2  0020               	movlb	0	; select bank0
  7705  1FA3  00E1               	movwf	??_setRF_DimmerValue
  7706  1FA4  087D               	movf	_product,w
  7707  1FA5  3E09               	addlw	9
  7708  1FA6  0086               	movwf	6
  7709  1FA7  3001               	movlw	1	; select bank2/3
  7710  1FA8  0087               	movwf	7
  7711  1FA9  0861               	movf	??_setRF_DimmerValue,w
  7712  1FAA  0081               	movwf	1
  7713                           
  7714                           ;RF_Control_B1.c: 392: product->Data[11]=lights;
  7715  1FAB  0863               	movf	setRF_DimmerValue@lights,w
  7716  1FAC  00E1               	movwf	??_setRF_DimmerValue
  7717  1FAD  087D               	movf	_product,w
  7718  1FAE  3E0B               	addlw	11
  7719  1FAF  0086               	movwf	6
  7720  1FB0  3001               	movlw	1	; select bank2/3
  7721  1FB1  0087               	movwf	7
  7722  1FB2  0861               	movf	??_setRF_DimmerValue,w
  7723  1FB3  0081               	movwf	1
  7724                           
  7725                           ;RF_Control_B1.c: 393: product->Data[(20 + lights)]=product->Data[9];
  7726  1FB4  087D               	movf	_product,w
  7727  1FB5  3E09               	addlw	9
  7728  1FB6  0086               	movwf	6
  7729  1FB7  3001               	movlw	1	; select bank2/3
  7730  1FB8  0087               	movwf	7
  7731  1FB9  0801               	movf	1,w
  7732  1FBA  00E1               	movwf	??_setRF_DimmerValue
  7733  1FBB  0863               	movf	setRF_DimmerValue@lights,w
  7734  1FBC  3E14               	addlw	20
  7735  1FBD  077D               	addwf	_product,w
  7736  1FBE  00E2               	movwf	??_setRF_DimmerValue+1
  7737  1FBF  0862               	movf	??_setRF_DimmerValue+1,w
  7738  1FC0  0086               	movwf	6
  7739  1FC1  3001               	movlw	1	; select bank2/3
  7740  1FC2  0087               	movwf	7
  7741  1FC3  0861               	movf	??_setRF_DimmerValue,w
  7742  1FC4  0081               	movwf	1
  7743                           
  7744                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  7745  1FC5  0863               	movf	setRF_DimmerValue@lights,w
  7746  1FC6  319D  2583         	fcall	_setDimmerLights_AdjRF
  7747  1FC8  0008               	return
  7748  1FC9                     __end_of_setRF_DimmerValue:	
  7749                           
  7750                           	psect	text29
  7751  1D83                     __ptext29:	
  7752 ;; *************** function _setDimmerLights_AdjRF *****************
  7753 ;; Defined at:
  7754 ;;		line 541 in file "../src/Dimmer_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  lights          1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  lights          1   64[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    8
  7775 ;; This function calls:
  7776 ;;		_DimmerLightsPointSelect
  7777 ;;		_getPercentValue
  7778 ;; This function is called by:
  7779 ;;		_setRF_DimmerValue
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _setDimmerLights_AdjRF
  7785  1D83                     _setDimmerLights_AdjRF:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7789                           ;setDimmerLights_AdjRF@lights stored from wreg
  7790  1D83  0020               	movlb	0	; select bank0
  7791  1D84  00E0               	movwf	setDimmerLights_AdjRF@lights
  7792                           
  7793                           ;Dimmer_B1.c: 542: DimmerLightsPointSelect(lights);
  7794  1D85  0860               	movf	setDimmerLights_AdjRF@lights,w
  7795  1D86  319A  22C5  319D   	fcall	_DimmerLightsPointSelect
  7796                           
  7797                           ;Dimmer_B1.c: 543: DimmerLights->AdjRF = 1;
  7798  1D89  0878               	movf	_DimmerLights,w
  7799  1D8A  0086               	movwf	6
  7800  1D8B  3001               	movlw	1	; select bank2/3
  7801  1D8C  0087               	movwf	7
  7802  1D8D  1501               	bsf	1,2
  7803                           
  7804                           ;Dimmer_B1.c: 544: DimmerLights->Signal = 1;
  7805  1D8E  0878               	movf	_DimmerLights,w
  7806  1D8F  0086               	movwf	6
  7807  1D90  3001               	movlw	1	; select bank2/3
  7808  1D91  0087               	movwf	7
  7809  1D92  1481               	bsf	1,1
  7810                           
  7811                           ;Dimmer_B1.c: 545: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7812  1D93  087D               	movf	_product,w
  7813  1D94  3E09               	addlw	9
  7814  1D95  0086               	movwf	6
  7815  1D96  3001               	movlw	1	; select bank2/3
  7816  1D97  0087               	movwf	7
  7817  1D98  0801               	movf	1,w
  7818  1D99  3193  232D         	fcall	_getPercentValue
  7819  1D9B  0020               	movlb	0	; select bank0
  7820  1D9C  00DF               	movwf	??_setDimmerLights_AdjRF
  7821  1D9D  0878               	movf	_DimmerLights,w
  7822  1D9E  3E05               	addlw	5
  7823  1D9F  0086               	movwf	6
  7824  1DA0  3001               	movlw	1	; select bank2/3
  7825  1DA1  0087               	movwf	7
  7826  1DA2  085F               	movf	??_setDimmerLights_AdjRF,w
  7827  1DA3  0081               	movwf	1
  7828  1DA4  0008               	return
  7829  1DA5                     __end_of_setDimmerLights_AdjRF:	
  7830                           
  7831                           	psect	text30
  7832  132D                     __ptext30:	
  7833 ;; *************** function _getPercentValue *****************
  7834 ;; Defined at:
  7835 ;;		line 607 in file "../src/Dimmer_B1.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  value           1    wreg     unsigned char 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  value           1   59[BANK0 ] unsigned char 
  7840 ;;  i               3   60[BANK0 ] float 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      unsigned char 
  7843 ;; Registers used:
  7844 ;;		wreg, status,2, status,0, pclath, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;Total ram usage:        6 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    7
  7857 ;; This function calls:
  7858 ;;		___awtoft
  7859 ;;		___ftadd
  7860 ;;		___ftdiv
  7861 ;;		___ftmul
  7862 ;;		___fttol
  7863 ;; This function is called by:
  7864 ;;		_setDimmerLights_AdjRF
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function _getPercentValue
  7870  132D                     _getPercentValue:	
  7871                           
  7872                           ;incstack = 0
  7873                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7874                           ;getPercentValue@value stored from wreg
  7875  132D  0020               	movlb	0	; select bank0
  7876  132E  00DB               	movwf	getPercentValue@value
  7877                           
  7878                           ;Dimmer_B1.c: 615: float i = ((char)(65*1.5)) - ((char)(20*1.5));
  7879  132F  3000               	movlw	0
  7880  1330  00DC               	movwf	getPercentValue@i
  7881  1331  3086               	movlw	134
  7882  1332  00DD               	movwf	getPercentValue@i+1
  7883  1333  3042               	movlw	66
  7884  1334  00DE               	movwf	getPercentValue@i+2
  7885                           
  7886                           ;Dimmer_B1.c: 616: i /= 100;
  7887  1335  3000               	movlw	0
  7888  1336  00AE               	movwf	___ftdiv@f2
  7889  1337  30C8               	movlw	200
  7890  1338  00AF               	movwf	___ftdiv@f2+1
  7891  1339  3042               	movlw	66
  7892  133A  00B0               	movwf	___ftdiv@f2+2
  7893  133B  085C               	movf	getPercentValue@i,w
  7894  133C  00B1               	movwf	___ftdiv@f1
  7895  133D  085D               	movf	getPercentValue@i+1,w
  7896  133E  00B2               	movwf	___ftdiv@f1+1
  7897  133F  085E               	movf	getPercentValue@i+2,w
  7898  1340  00B3               	movwf	___ftdiv@f1+2
  7899  1341  318D  25F0  3193   	fcall	___ftdiv
  7900  1344  0020               	movlb	0	; select bank0
  7901  1345  082E               	movf	?___ftdiv,w
  7902  1346  00DC               	movwf	getPercentValue@i
  7903  1347  082F               	movf	?___ftdiv+1,w
  7904  1348  00DD               	movwf	getPercentValue@i+1
  7905  1349  0830               	movf	?___ftdiv+2,w
  7906  134A  00DE               	movwf	getPercentValue@i+2
  7907                           
  7908                           ;Dimmer_B1.c: 617: return (char) (((100 - value) * i) + ((char)(65*1.5)));
  7909  134B  085B               	movf	getPercentValue@value,w
  7910  134C  00D9               	movwf	??_getPercentValue
  7911  134D  01DA               	clrf	??_getPercentValue+1
  7912  134E  09D9               	comf	??_getPercentValue,f
  7913  134F  09DA               	comf	??_getPercentValue+1,f
  7914  1350  0AD9               	incf	??_getPercentValue,f
  7915  1351  1903               	skipnz
  7916  1352  0ADA               	incf	??_getPercentValue+1,f
  7917  1353  0859               	movf	??_getPercentValue,w
  7918  1354  3E64               	addlw	100
  7919  1355  00A8               	movwf	___awtoft@c
  7920  1356  3000               	movlw	0
  7921  1357  3D5A               	addwfc	??_getPercentValue+1,w
  7922  1358  00A9               	movwf	___awtoft@c+1
  7923  1359  319D  251D  3193   	fcall	___awtoft
  7924  135C  0020               	movlb	0	; select bank0
  7925  135D  0828               	movf	?___awtoft,w
  7926  135E  00B1               	movwf	___ftmul@f2
  7927  135F  0829               	movf	?___awtoft+1,w
  7928  1360  00B2               	movwf	___ftmul@f2+1
  7929  1361  082A               	movf	?___awtoft+2,w
  7930  1362  00B3               	movwf	___ftmul@f2+2
  7931  1363  085C               	movf	getPercentValue@i,w
  7932  1364  00AE               	movwf	___ftmul@f1
  7933  1365  085D               	movf	getPercentValue@i+1,w
  7934  1366  00AF               	movwf	___ftmul@f1+1
  7935  1367  085E               	movf	getPercentValue@i+2,w
  7936  1368  00B0               	movwf	___ftmul@f1+2
  7937  1369  318F  274C  3193   	fcall	___ftmul
  7938  136C  0020               	movlb	0	; select bank0
  7939  136D  082E               	movf	?___ftmul,w
  7940  136E  00C1               	movwf	___ftadd@f2
  7941  136F  082F               	movf	?___ftmul+1,w
  7942  1370  00C2               	movwf	___ftadd@f2+1
  7943  1371  0830               	movf	?___ftmul+2,w
  7944  1372  00C3               	movwf	___ftadd@f2+2
  7945  1373  3000               	movlw	0
  7946  1374  00BE               	movwf	___ftadd@f1
  7947  1375  30C2               	movlw	194
  7948  1376  00BF               	movwf	___ftadd@f1+1
  7949  1377  3042               	movlw	66
  7950  1378  00C0               	movwf	___ftadd@f1+2
  7951  1379  3186  26DA  3193   	fcall	___ftadd
  7952  137C  0020               	movlb	0	; select bank0
  7953  137D  083E               	movf	?___ftadd,w
  7954  137E  00CB               	movwf	___fttol@f1
  7955  137F  083F               	movf	?___ftadd+1,w
  7956  1380  00CC               	movwf	___fttol@f1+1
  7957  1381  0840               	movf	?___ftadd+2,w
  7958  1382  00CD               	movwf	___fttol@f1+2
  7959  1383  3188  20C8         	fcall	___fttol
  7960  1385  0020               	movlb	0	; select bank0
  7961  1386  084B               	movf	?___fttol,w
  7962  1387  0008               	return
  7963  1388                     __end_of_getPercentValue:	
  7964                           
  7965                           	psect	text31
  7966  0F4C                     __ptext31:	
  7967 ;; *************** function ___ftmul *****************
  7968 ;; Defined at:
  7969 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  f1              3   14[BANK0 ] float 
  7972 ;;  f2              3   17[BANK0 ] float 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7975 ;;  sign            1   29[BANK0 ] unsigned char 
  7976 ;;  cntr            1   28[BANK0 ] unsigned char 
  7977 ;;  exp             1   24[BANK0 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  3   14[BANK0 ] float 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7987 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;Total ram usage:       16 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    6
  7994 ;; This function calls:
  7995 ;;		___ftpack
  7996 ;; This function is called by:
  7997 ;;		_getPercentValue
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           
  8002                           ;psect for function ___ftmul
  8003  0F4C                     ___ftmul:	
  8004                           
  8005                           ;incstack = 0
  8006                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8007  0F4C  0020               	movlb	0	; select bank0
  8008  0F4D  082E               	movf	___ftmul@f1,w
  8009  0F4E  00B4               	movwf	??___ftmul
  8010  0F4F  082F               	movf	___ftmul@f1+1,w
  8011  0F50  00B5               	movwf	??___ftmul+1
  8012  0F51  0830               	movf	___ftmul@f1+2,w
  8013  0F52  00B6               	movwf	??___ftmul+2
  8014  0F53  1003               	clrc
  8015  0F54  0D35               	rlf	??___ftmul+1,w
  8016  0F55  0D36               	rlf	??___ftmul+2,w
  8017  0F56  00B7               	movwf	??___ftmul+3
  8018  0F57  0837               	movf	??___ftmul+3,w
  8019  0F58  00B8               	movwf	___ftmul@exp
  8020  0F59  08B8               	movf	___ftmul@exp,f
  8021  0F5A  1D03               	skipz
  8022  0F5B  2F63               	goto	l5744
  8023  0F5C  3000               	movlw	0
  8024  0F5D  00AE               	movwf	?___ftmul
  8025  0F5E  3000               	movlw	0
  8026  0F5F  00AF               	movwf	?___ftmul+1
  8027  0F60  3000               	movlw	0
  8028  0F61  00B0               	movwf	?___ftmul+2
  8029  0F62  0008               	return
  8030  0F63                     l5744:	
  8031  0F63  0831               	movf	___ftmul@f2,w
  8032  0F64  00B4               	movwf	??___ftmul
  8033  0F65  0832               	movf	___ftmul@f2+1,w
  8034  0F66  00B5               	movwf	??___ftmul+1
  8035  0F67  0833               	movf	___ftmul@f2+2,w
  8036  0F68  00B6               	movwf	??___ftmul+2
  8037  0F69  1003               	clrc
  8038  0F6A  0D35               	rlf	??___ftmul+1,w
  8039  0F6B  0D36               	rlf	??___ftmul+2,w
  8040  0F6C  00B7               	movwf	??___ftmul+3
  8041  0F6D  0837               	movf	??___ftmul+3,w
  8042  0F6E  00BD               	movwf	___ftmul@sign
  8043  0F6F  08BD               	movf	___ftmul@sign,f
  8044  0F70  1D03               	skipz
  8045  0F71  2F79               	goto	l5750
  8046  0F72  3000               	movlw	0
  8047  0F73  00AE               	movwf	?___ftmul
  8048  0F74  3000               	movlw	0
  8049  0F75  00AF               	movwf	?___ftmul+1
  8050  0F76  3000               	movlw	0
  8051  0F77  00B0               	movwf	?___ftmul+2
  8052  0F78  0008               	return
  8053  0F79                     l5750:	
  8054  0F79  083D               	movf	___ftmul@sign,w
  8055  0F7A  3E7B               	addlw	123
  8056  0F7B  00B4               	movwf	??___ftmul
  8057  0F7C  0834               	movf	??___ftmul,w
  8058  0F7D  07B8               	addwf	___ftmul@exp,f
  8059  0F7E  082E               	movf	___ftmul@f1,w
  8060  0F7F  00B4               	movwf	??___ftmul
  8061  0F80  082F               	movf	___ftmul@f1+1,w
  8062  0F81  00B5               	movwf	??___ftmul+1
  8063  0F82  0830               	movf	___ftmul@f1+2,w
  8064  0F83  00B6               	movwf	??___ftmul+2
  8065  0F84  3010               	movlw	16
  8066  0F85                     u4075:	
  8067  0F85  36B6               	lsrf	??___ftmul+2,f
  8068  0F86  0CB5               	rrf	??___ftmul+1,f
  8069  0F87  0CB4               	rrf	??___ftmul,f
  8070  0F88  0B89               	decfsz	9,f
  8071  0F89  2F85               	goto	u4075
  8072  0F8A  0834               	movf	??___ftmul,w
  8073  0F8B  00B7               	movwf	??___ftmul+3
  8074  0F8C  0837               	movf	??___ftmul+3,w
  8075  0F8D  00BD               	movwf	___ftmul@sign
  8076  0F8E  0831               	movf	___ftmul@f2,w
  8077  0F8F  00B4               	movwf	??___ftmul
  8078  0F90  0832               	movf	___ftmul@f2+1,w
  8079  0F91  00B5               	movwf	??___ftmul+1
  8080  0F92  0833               	movf	___ftmul@f2+2,w
  8081  0F93  00B6               	movwf	??___ftmul+2
  8082  0F94  3010               	movlw	16
  8083  0F95                     u4085:	
  8084  0F95  36B6               	lsrf	??___ftmul+2,f
  8085  0F96  0CB5               	rrf	??___ftmul+1,f
  8086  0F97  0CB4               	rrf	??___ftmul,f
  8087  0F98  0B89               	decfsz	9,f
  8088  0F99  2F95               	goto	u4085
  8089  0F9A  0834               	movf	??___ftmul,w
  8090  0F9B  00B7               	movwf	??___ftmul+3
  8091  0F9C  0837               	movf	??___ftmul+3,w
  8092  0F9D  06BD               	xorwf	___ftmul@sign,f
  8093  0F9E  3080               	movlw	128
  8094  0F9F  00B4               	movwf	??___ftmul
  8095  0FA0  0834               	movf	??___ftmul,w
  8096  0FA1  05BD               	andwf	___ftmul@sign,f
  8097  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8098  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8099  0FA4  30FF               	movlw	255
  8100  0FA5  05B1               	andwf	___ftmul@f2,f
  8101  0FA6  30FF               	movlw	255
  8102  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8103  0FA8  3000               	movlw	0
  8104  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8105  0FAA  3000               	movlw	0
  8106  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8107  0FAC  3000               	movlw	0
  8108  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8109  0FAE  3000               	movlw	0
  8110  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8111  0FB0  3007               	movlw	7
  8112  0FB1  00B4               	movwf	??___ftmul
  8113  0FB2  0834               	movf	??___ftmul,w
  8114  0FB3  00BC               	movwf	___ftmul@cntr
  8115  0FB4                     l5762:	
  8116  0FB4  1C2E               	btfss	___ftmul@f1,0
  8117  0FB5  2FBC               	goto	l5766
  8118  0FB6  0831               	movf	___ftmul@f2,w
  8119  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8120  0FB8  0832               	movf	___ftmul@f2+1,w
  8121  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8122  0FBA  0833               	movf	___ftmul@f2+2,w
  8123  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8124  0FBC                     l5766:	
  8125  0FBC  3001               	movlw	1
  8126  0FBD                     u4105:	
  8127  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8128  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8129  0FBF  0CAE               	rrf	___ftmul@f1,f
  8130  0FC0  0B89               	decfsz	9,f
  8131  0FC1  2FBD               	goto	u4105
  8132  0FC2  3001               	movlw	1
  8133  0FC3                     u4115:	
  8134  0FC3  35B1               	lslf	___ftmul@f2,f
  8135  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8136  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8137  0FC6  0B89               	decfsz	9,f
  8138  0FC7  2FC3               	goto	u4115
  8139  0FC8  3001               	movlw	1
  8140  0FC9  02BC               	subwf	___ftmul@cntr,f
  8141  0FCA  1D03               	btfss	3,2
  8142  0FCB  2FB4               	goto	l5762
  8143  0FCC  3009               	movlw	9
  8144  0FCD  00B4               	movwf	??___ftmul
  8145  0FCE  0834               	movf	??___ftmul,w
  8146  0FCF  00BC               	movwf	___ftmul@cntr
  8147  0FD0                     l5774:	
  8148  0FD0  1C2E               	btfss	___ftmul@f1,0
  8149  0FD1  2FD8               	goto	l5778
  8150  0FD2  0831               	movf	___ftmul@f2,w
  8151  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8152  0FD4  0832               	movf	___ftmul@f2+1,w
  8153  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8154  0FD6  0833               	movf	___ftmul@f2+2,w
  8155  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8156  0FD8                     l5778:	
  8157  0FD8  3001               	movlw	1
  8158  0FD9                     u4145:	
  8159  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8160  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8161  0FDB  0CAE               	rrf	___ftmul@f1,f
  8162  0FDC  0B89               	decfsz	9,f
  8163  0FDD  2FD9               	goto	u4145
  8164  0FDE  3001               	movlw	1
  8165  0FDF                     u4155:	
  8166  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8167  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8168  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8169  0FE2  0B89               	decfsz	9,f
  8170  0FE3  2FDF               	goto	u4155
  8171  0FE4  3001               	movlw	1
  8172  0FE5  02BC               	subwf	___ftmul@cntr,f
  8173  0FE6  1D03               	btfss	3,2
  8174  0FE7  2FD0               	goto	l5774
  8175  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8176  0FE9  00A0               	movwf	___ftpack@arg
  8177  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8178  0FEB  00A1               	movwf	___ftpack@arg+1
  8179  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8180  0FED  00A2               	movwf	___ftpack@arg+2
  8181  0FEE  0838               	movf	___ftmul@exp,w
  8182  0FEF  00B4               	movwf	??___ftmul
  8183  0FF0  0834               	movf	??___ftmul,w
  8184  0FF1  00A3               	movwf	___ftpack@exp
  8185  0FF2  083D               	movf	___ftmul@sign,w
  8186  0FF3  00B5               	movwf	??___ftmul+1
  8187  0FF4  0835               	movf	??___ftmul+1,w
  8188  0FF5  00A4               	movwf	___ftpack@sign
  8189  0FF6  3194  24A1         	fcall	___ftpack
  8190  0FF8  0020               	movlb	0	; select bank0
  8191  0FF9  0820               	movf	?___ftpack,w
  8192  0FFA  00AE               	movwf	?___ftmul
  8193  0FFB  0821               	movf	?___ftpack+1,w
  8194  0FFC  00AF               	movwf	?___ftmul+1
  8195  0FFD  0822               	movf	?___ftpack+2,w
  8196  0FFE  00B0               	movwf	?___ftmul+2
  8197  0FFF  0008               	return
  8198  1000                     __end_of___ftmul:	
  8199                           
  8200                           	psect	text32
  8201  06DA                     __ptext32:	
  8202 ;; *************** function ___ftadd *****************
  8203 ;; Defined at:
  8204 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  f1              3   30[BANK0 ] float 
  8207 ;;  f2              3   33[BANK0 ] float 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  exp1            1   42[BANK0 ] unsigned char 
  8210 ;;  exp2            1   41[BANK0 ] unsigned char 
  8211 ;;  sign            1   40[BANK0 ] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  3   30[BANK0 ] float 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0, pclath, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8221 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;Total ram usage:       13 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    6
  8228 ;; This function calls:
  8229 ;;		___ftpack
  8230 ;; This function is called by:
  8231 ;;		_getPercentValue
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function ___ftadd
  8237  06DA                     ___ftadd:	
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8241  06DA  0020               	movlb	0	; select bank0
  8242  06DB  083E               	movf	___ftadd@f1,w
  8243  06DC  00C4               	movwf	??___ftadd
  8244  06DD  083F               	movf	___ftadd@f1+1,w
  8245  06DE  00C5               	movwf	??___ftadd+1
  8246  06DF  0840               	movf	___ftadd@f1+2,w
  8247  06E0  00C6               	movwf	??___ftadd+2
  8248  06E1  1003               	clrc
  8249  06E2  0D45               	rlf	??___ftadd+1,w
  8250  06E3  0D46               	rlf	??___ftadd+2,w
  8251  06E4  00C7               	movwf	??___ftadd+3
  8252  06E5  0847               	movf	??___ftadd+3,w
  8253  06E6  00CA               	movwf	___ftadd@exp1
  8254  06E7  0841               	movf	___ftadd@f2,w
  8255  06E8  00C4               	movwf	??___ftadd
  8256  06E9  0842               	movf	___ftadd@f2+1,w
  8257  06EA  00C5               	movwf	??___ftadd+1
  8258  06EB  0843               	movf	___ftadd@f2+2,w
  8259  06EC  00C6               	movwf	??___ftadd+2
  8260  06ED  1003               	clrc
  8261  06EE  0D45               	rlf	??___ftadd+1,w
  8262  06EF  0D46               	rlf	??___ftadd+2,w
  8263  06F0  00C7               	movwf	??___ftadd+3
  8264  06F1  0847               	movf	??___ftadd+3,w
  8265  06F2  00C9               	movwf	___ftadd@exp2
  8266  06F3  084A               	movf	___ftadd@exp1,w
  8267  06F4  1903               	btfsc	3,2
  8268  06F5  2F02               	goto	l5632
  8269  06F6  0849               	movf	___ftadd@exp2,w
  8270  06F7  024A               	subwf	___ftadd@exp1,w
  8271  06F8  1803               	skipnc
  8272  06F9  2F09               	goto	l5636
  8273  06FA  034A               	decf	___ftadd@exp1,w
  8274  06FB  3AFF               	xorlw	255
  8275  06FC  0749               	addwf	___ftadd@exp2,w
  8276  06FD  00C4               	movwf	??___ftadd
  8277  06FE  3019               	movlw	25
  8278  06FF  0244               	subwf	??___ftadd,w
  8279  0700  1C03               	skipc
  8280  0701  2F09               	goto	l5636
  8281  0702                     l5632:	
  8282  0702  0841               	movf	___ftadd@f2,w
  8283  0703  00BE               	movwf	?___ftadd
  8284  0704  0842               	movf	___ftadd@f2+1,w
  8285  0705  00BF               	movwf	?___ftadd+1
  8286  0706  0843               	movf	___ftadd@f2+2,w
  8287  0707  00C0               	movwf	?___ftadd+2
  8288  0708  0008               	return
  8289  0709                     l5636:	
  8290  0709  0849               	movf	___ftadd@exp2,w
  8291  070A  1903               	btfsc	3,2
  8292  070B  0008               	return
  8293  070C  084A               	movf	___ftadd@exp1,w
  8294  070D  0249               	subwf	___ftadd@exp2,w
  8295  070E  1803               	skipnc
  8296  070F  2F18               	goto	l5642
  8297  0710  0349               	decf	___ftadd@exp2,w
  8298  0711  3AFF               	xorlw	255
  8299  0712  074A               	addwf	___ftadd@exp1,w
  8300  0713  00C4               	movwf	??___ftadd
  8301  0714  3019               	movlw	25
  8302  0715  0244               	subwf	??___ftadd,w
  8303  0716  1803               	btfsc	3,0
  8304  0717  0008               	return
  8305  0718                     l5642:	
  8306  0718  3006               	movlw	6
  8307  0719  00C4               	movwf	??___ftadd
  8308  071A  0844               	movf	??___ftadd,w
  8309  071B  00C8               	movwf	___ftadd@sign
  8310  071C  1BC0               	btfsc	___ftadd@f1+2,7
  8311  071D  17C8               	bsf	___ftadd@sign,7
  8312  071E  1BC3               	btfsc	___ftadd@f2+2,7
  8313  071F  1748               	bsf	___ftadd@sign,6
  8314  0720  17BF               	bsf	___ftadd@f1+1,7
  8315  0721  30FF               	movlw	255
  8316  0722  05BE               	andwf	___ftadd@f1,f
  8317  0723  30FF               	movlw	255
  8318  0724  05BF               	andwf	___ftadd@f1+1,f
  8319  0725  3000               	movlw	0
  8320  0726  05C0               	andwf	___ftadd@f1+2,f
  8321  0727  17C2               	bsf	___ftadd@f2+1,7
  8322  0728  30FF               	movlw	255
  8323  0729  05C1               	andwf	___ftadd@f2,f
  8324  072A  30FF               	movlw	255
  8325  072B  05C2               	andwf	___ftadd@f2+1,f
  8326  072C  3000               	movlw	0
  8327  072D  05C3               	andwf	___ftadd@f2+2,f
  8328  072E  0849               	movf	___ftadd@exp2,w
  8329  072F  024A               	subwf	___ftadd@exp1,w
  8330  0730  1803               	skipnc
  8331  0731  2F54               	goto	l5664
  8332  0732                     l5654:	
  8333  0732  3001               	movlw	1
  8334  0733                     u3835:	
  8335  0733  35C1               	lslf	___ftadd@f2,f
  8336  0734  0DC2               	rlf	___ftadd@f2+1,f
  8337  0735  0DC3               	rlf	___ftadd@f2+2,f
  8338  0736  0B89               	decfsz	9,f
  8339  0737  2F33               	goto	u3835
  8340  0738  3001               	movlw	1
  8341  0739  02C9               	subwf	___ftadd@exp2,f
  8342  073A  0849               	movf	___ftadd@exp2,w
  8343  073B  064A               	xorwf	___ftadd@exp1,w
  8344  073C  1903               	skipnz
  8345  073D  2F4F               	goto	l5662
  8346  073E  3001               	movlw	1
  8347  073F  02C8               	subwf	___ftadd@sign,f
  8348  0740  0848               	movf	___ftadd@sign,w
  8349  0741  3907               	andlw	7
  8350  0742  1903               	btfsc	3,2
  8351  0743  2F4F               	goto	l5662
  8352  0744  2F32               	goto	l5654
  8353  0745                     l5660:	
  8354  0745  3001               	movlw	1
  8355  0746                     u3865:	
  8356  0746  36C0               	lsrf	___ftadd@f1+2,f
  8357  0747  0CBF               	rrf	___ftadd@f1+1,f
  8358  0748  0CBE               	rrf	___ftadd@f1,f
  8359  0749  0B89               	decfsz	9,f
  8360  074A  2F46               	goto	u3865
  8361  074B  3001               	movlw	1
  8362  074C  00C4               	movwf	??___ftadd
  8363  074D  0844               	movf	??___ftadd,w
  8364  074E  07CA               	addwf	___ftadd@exp1,f
  8365  074F                     l5662:	
  8366  074F  084A               	movf	___ftadd@exp1,w
  8367  0750  0649               	xorwf	___ftadd@exp2,w
  8368  0751  1903               	btfsc	3,2
  8369  0752  2F79               	goto	l3105
  8370  0753  2F45               	goto	l5660
  8371  0754                     l5664:	
  8372  0754  084A               	movf	___ftadd@exp1,w
  8373  0755  0249               	subwf	___ftadd@exp2,w
  8374  0756  1803               	skipnc
  8375  0757  2F79               	goto	l3105
  8376  0758                     l5666:	
  8377  0758  3001               	movlw	1
  8378  0759                     u3895:	
  8379  0759  35BE               	lslf	___ftadd@f1,f
  8380  075A  0DBF               	rlf	___ftadd@f1+1,f
  8381  075B  0DC0               	rlf	___ftadd@f1+2,f
  8382  075C  0B89               	decfsz	9,f
  8383  075D  2F59               	goto	u3895
  8384  075E  3001               	movlw	1
  8385  075F  02CA               	subwf	___ftadd@exp1,f
  8386  0760  0849               	movf	___ftadd@exp2,w
  8387  0761  064A               	xorwf	___ftadd@exp1,w
  8388  0762  1903               	skipnz
  8389  0763  2F75               	goto	l5674
  8390  0764  3001               	movlw	1
  8391  0765  02C8               	subwf	___ftadd@sign,f
  8392  0766  0848               	movf	___ftadd@sign,w
  8393  0767  3907               	andlw	7
  8394  0768  1903               	btfsc	3,2
  8395  0769  2F75               	goto	l5674
  8396  076A  2F58               	goto	l5666
  8397  076B                     l5672:	
  8398  076B  3001               	movlw	1
  8399  076C                     u3925:	
  8400  076C  36C3               	lsrf	___ftadd@f2+2,f
  8401  076D  0CC2               	rrf	___ftadd@f2+1,f
  8402  076E  0CC1               	rrf	___ftadd@f2,f
  8403  076F  0B89               	decfsz	9,f
  8404  0770  2F6C               	goto	u3925
  8405  0771  3001               	movlw	1
  8406  0772  00C4               	movwf	??___ftadd
  8407  0773  0844               	movf	??___ftadd,w
  8408  0774  07C9               	addwf	___ftadd@exp2,f
  8409  0775                     l5674:	
  8410  0775  084A               	movf	___ftadd@exp1,w
  8411  0776  0649               	xorwf	___ftadd@exp2,w
  8412  0777  1D03               	skipz
  8413  0778  2F6B               	goto	l5672
  8414  0779                     l3105:	
  8415  0779  1FC8               	btfss	___ftadd@sign,7
  8416  077A  2F8B               	goto	l5678
  8417  077B  30FF               	movlw	255
  8418  077C  06BE               	xorwf	___ftadd@f1,f
  8419  077D  30FF               	movlw	255
  8420  077E  06BF               	xorwf	___ftadd@f1+1,f
  8421  077F  30FF               	movlw	255
  8422  0780  06C0               	xorwf	___ftadd@f1+2,f
  8423  0781  3001               	movlw	1
  8424  0782  07BE               	addwf	___ftadd@f1,f
  8425  0783  3000               	movlw	0
  8426  0784  1803               	skipnc
  8427  0785  3001               	movlw	1
  8428  0786  07BF               	addwf	___ftadd@f1+1,f
  8429  0787  3000               	movlw	0
  8430  0788  1803               	skipnc
  8431  0789  3001               	movlw	1
  8432  078A  07C0               	addwf	___ftadd@f1+2,f
  8433  078B                     l5678:	
  8434  078B  1F48               	btfss	___ftadd@sign,6
  8435  078C  2F9D               	goto	l5682
  8436  078D  30FF               	movlw	255
  8437  078E  06C1               	xorwf	___ftadd@f2,f
  8438  078F  30FF               	movlw	255
  8439  0790  06C2               	xorwf	___ftadd@f2+1,f
  8440  0791  30FF               	movlw	255
  8441  0792  06C3               	xorwf	___ftadd@f2+2,f
  8442  0793  3001               	movlw	1
  8443  0794  07C1               	addwf	___ftadd@f2,f
  8444  0795  3000               	movlw	0
  8445  0796  1803               	skipnc
  8446  0797  3001               	movlw	1
  8447  0798  07C2               	addwf	___ftadd@f2+1,f
  8448  0799  3000               	movlw	0
  8449  079A  1803               	skipnc
  8450  079B  3001               	movlw	1
  8451  079C  07C3               	addwf	___ftadd@f2+2,f
  8452  079D                     l5682:	
  8453  079D  01C8               	clrf	___ftadd@sign
  8454  079E  083E               	movf	___ftadd@f1,w
  8455  079F  07C1               	addwf	___ftadd@f2,f
  8456  07A0  083F               	movf	___ftadd@f1+1,w
  8457  07A1  3DC2               	addwfc	___ftadd@f2+1,f
  8458  07A2  0840               	movf	___ftadd@f1+2,w
  8459  07A3  3DC3               	addwfc	___ftadd@f2+2,f
  8460  07A4  1FC3               	btfss	___ftadd@f2+2,7
  8461  07A5  2FB8               	goto	l5692
  8462  07A6  30FF               	movlw	255
  8463  07A7  06C1               	xorwf	___ftadd@f2,f
  8464  07A8  30FF               	movlw	255
  8465  07A9  06C2               	xorwf	___ftadd@f2+1,f
  8466  07AA  30FF               	movlw	255
  8467  07AB  06C3               	xorwf	___ftadd@f2+2,f
  8468  07AC  3001               	movlw	1
  8469  07AD  07C1               	addwf	___ftadd@f2,f
  8470  07AE  3000               	movlw	0
  8471  07AF  1803               	skipnc
  8472  07B0  3001               	movlw	1
  8473  07B1  07C2               	addwf	___ftadd@f2+1,f
  8474  07B2  3000               	movlw	0
  8475  07B3  1803               	skipnc
  8476  07B4  3001               	movlw	1
  8477  07B5  07C3               	addwf	___ftadd@f2+2,f
  8478  07B6  01C8               	clrf	___ftadd@sign
  8479  07B7  0AC8               	incf	___ftadd@sign,f
  8480  07B8                     l5692:	
  8481  07B8  0841               	movf	___ftadd@f2,w
  8482  07B9  00A0               	movwf	___ftpack@arg
  8483  07BA  0842               	movf	___ftadd@f2+1,w
  8484  07BB  00A1               	movwf	___ftpack@arg+1
  8485  07BC  0843               	movf	___ftadd@f2+2,w
  8486  07BD  00A2               	movwf	___ftpack@arg+2
  8487  07BE  084A               	movf	___ftadd@exp1,w
  8488  07BF  00C4               	movwf	??___ftadd
  8489  07C0  0844               	movf	??___ftadd,w
  8490  07C1  00A3               	movwf	___ftpack@exp
  8491  07C2  0848               	movf	___ftadd@sign,w
  8492  07C3  00C5               	movwf	??___ftadd+1
  8493  07C4  0845               	movf	??___ftadd+1,w
  8494  07C5  00A4               	movwf	___ftpack@sign
  8495  07C6  3194  24A1         	fcall	___ftpack
  8496  07C8  0020               	movlb	0	; select bank0
  8497  07C9  0820               	movf	?___ftpack,w
  8498  07CA  00BE               	movwf	?___ftadd
  8499  07CB  0821               	movf	?___ftpack+1,w
  8500  07CC  00BF               	movwf	?___ftadd+1
  8501  07CD  0822               	movf	?___ftpack+2,w
  8502  07CE  00C0               	movwf	?___ftadd+2
  8503  07CF  0008               	return
  8504  07D0                     __end_of___ftadd:	
  8505                           
  8506                           	psect	text33
  8507  1DCB                     __ptext33:	
  8508 ;; *************** function _RF_RxDisable *****************
  8509 ;; Defined at:
  8510 ;;		line 187 in file "../src/RF_Control_B1.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;  rf              1    wreg     unsigned char 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  rf              1    4[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;		None               void
  8517 ;; Registers used:
  8518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:        1 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    7
  8531 ;; This function calls:
  8532 ;;		_CC2500_WriteCommand
  8533 ;;		_RfPointSelect
  8534 ;;		_setINT_GO
  8535 ;; This function is called by:
  8536 ;;		_setRF_Main
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function _RF_RxDisable
  8542  1DCB                     _RF_RxDisable:	
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8546                           ;RF_RxDisable@rf stored from wreg
  8547  1DCB  0020               	movlb	0	; select bank0
  8548  1DCC  00A4               	movwf	RF_RxDisable@rf
  8549                           
  8550                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  8551  1DCD  0824               	movf	RF_RxDisable@rf,w
  8552  1DCE  3199  2174  319D   	fcall	_RfPointSelect
  8553                           
  8554                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  8555  1DD1  0021               	movlb	1	; select bank1
  8556  1DD2  083E               	movf	_RF^(0+128),w
  8557  1DD3  0086               	movwf	6
  8558  1DD4  0187               	clrf	7
  8559  1DD5  1D81               	btfss	1,3
  8560  1DD6  0008               	return
  8561                           
  8562                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  8563  1DD7  083E               	movf	_RF^(0+128),w
  8564  1DD8  0086               	movwf	6
  8565  1DD9  0187               	clrf	7
  8566  1DDA  1181               	bcf	1,3
  8567                           
  8568                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  8569  1DDB  083E               	movf	_RF^(0+128),w
  8570  1DDC  0086               	movwf	6
  8571  1DDD  0187               	clrf	7
  8572  1DDE  1081               	bcf	1,1
  8573                           
  8574                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  8575  1DDF  0A3E               	incf	_RF^(0+128),w
  8576  1DE0  0086               	movwf	6
  8577  1DE1  0187               	clrf	7
  8578  1DE2  0181               	clrf	1
  8579                           
  8580                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  8581  1DE3  083E               	movf	_RF^(0+128),w
  8582  1DE4  0086               	movwf	6
  8583  1DE5  0187               	clrf	7
  8584  1DE6  1281               	bcf	1,5
  8585                           
  8586                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  8587  1DE7  3036               	movlw	54
  8588  1DE8  319A  2221  319D   	fcall	_CC2500_WriteCommand
  8589                           
  8590                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  8591  1DEB  303A               	movlw	58
  8592  1DEC  319A  2221  319D   	fcall	_CC2500_WriteCommand
  8593                           
  8594                           ;RF_Control_B1.c: 197: setINT_GO(0);
  8595  1DEF  3000               	movlw	0
  8596  1DF0  3199  2110         	fcall	_setINT_GO
  8597  1DF2  0008               	return
  8598  1DF3                     __end_of_RF_RxDisable:	
  8599                           
  8600                           	psect	text34
  8601  117A                     __ptext34:	
  8602 ;; *************** function _CC2500_TxData *****************
  8603 ;; Defined at:
  8604 ;;		line 32 in file "../src/CC2500_B1.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8609 ;; Return value:  Size  Location     Type
  8610 ;;		None               void
  8611 ;; Registers used:
  8612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;Total ram usage:        2 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    7
  8625 ;; This function calls:
  8626 ;;		_CC2500_WriteByte
  8627 ;;		_CC2500_WriteCommand
  8628 ;; This function is called by:
  8629 ;;		_setRF_Main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_TxData
  8635  117A                     _CC2500_TxData:	
  8636                           
  8637                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8638                           ;CC2500_B1.c: 35: RC4 = 0;
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8642  117A  0020               	movlb	0	; select bank0
  8643  117B  120E               	bcf	14,4	;volatile
  8644                           
  8645                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8646  117C  307F               	movlw	127
  8647  117D  00A4               	movwf	??_CC2500_TxData
  8648  117E  0824               	movf	??_CC2500_TxData,w
  8649  117F  0021               	movlb	1	; select bank1
  8650  1180  00C2               	movwf	_SPI0Buffer^(0+128)
  8651  1181                     l278:	
  8652                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8653                           
  8654  1181  0020               	movlb	0	; select bank0
  8655  1182  190E               	btfsc	14,2	;volatile
  8656  1183  2981               	goto	l278
  8657                           
  8658                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8659  1184  319B  239C  3191   	fcall	_CC2500_WriteByte
  8660                           
  8661                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8662  1187  0021               	movlb	1	; select bank1
  8663  1188  0843               	movf	_Tx_Length^(0+128),w
  8664  1189  0020               	movlb	0	; select bank0
  8665  118A  00A4               	movwf	??_CC2500_TxData
  8666  118B  0824               	movf	??_CC2500_TxData,w
  8667  118C  0021               	movlb	1	; select bank1
  8668  118D  00C2               	movwf	_SPI0Buffer^(0+128)
  8669                           
  8670                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8671  118E  319B  239C  3191   	fcall	_CC2500_WriteByte
  8672                           
  8673                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8674  1191  0020               	movlb	0	; select bank0
  8675  1192  01A5               	clrf	CC2500_TxData@loop_e
  8676  1193                     l6392:	
  8677  1193  0021               	movlb	1	; select bank1
  8678  1194  0843               	movf	_Tx_Length^(0+128),w
  8679  1195  0020               	movlb	0	; select bank0
  8680  1196  0225               	subwf	CC2500_TxData@loop_e,w
  8681  1197  1803               	btfsc	3,0
  8682  1198  29AB               	goto	l283
  8683                           
  8684                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8685  1199  0825               	movf	CC2500_TxData@loop_e,w
  8686  119A  3EA0               	addlw	_RF_Data& (0+255)
  8687  119B  0086               	movwf	6
  8688  119C  0187               	clrf	7
  8689  119D  0801               	movf	1,w
  8690  119E  00A4               	movwf	??_CC2500_TxData
  8691  119F  0824               	movf	??_CC2500_TxData,w
  8692  11A0  0021               	movlb	1	; select bank1
  8693  11A1  00C2               	movwf	_SPI0Buffer^(0+128)
  8694                           
  8695                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8696  11A2  319B  239C  3191   	fcall	_CC2500_WriteByte
  8697  11A5  3001               	movlw	1
  8698  11A6  0020               	movlb	0	; select bank0
  8699  11A7  00A4               	movwf	??_CC2500_TxData
  8700  11A8  0824               	movf	??_CC2500_TxData,w
  8701  11A9  07A5               	addwf	CC2500_TxData@loop_e,f
  8702  11AA  2993               	goto	l6392
  8703  11AB                     l283:	
  8704                           
  8705                           ;CC2500_B1.c: 44: }
  8706                           ;CC2500_B1.c: 45: RC4 = 1;
  8707  11AB  160E               	bsf	14,4	;volatile
  8708                           
  8709                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8710  11AC  3035               	movlw	53
  8711  11AD  319A  2221  3191   	fcall	_CC2500_WriteCommand
  8712  11B0                     l284:	
  8713                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8714                           
  8715  11B0  0020               	movlb	0	; select bank0
  8716  11B1  1C0D               	btfss	13,0	;volatile
  8717  11B2  29B0               	goto	l284
  8718  11B3                     l287:	
  8719                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8720                           
  8721  11B3  180D               	btfsc	13,0	;volatile
  8722  11B4  29B3               	goto	l287
  8723                           
  8724                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8725  11B5  3036               	movlw	54
  8726  11B6  319A  2221  3191   	fcall	_CC2500_WriteCommand
  8727                           
  8728                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8729  11B9  303B               	movlw	59
  8730  11BA  319A  2221         	fcall	_CC2500_WriteCommand
  8731                           
  8732                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8733  11BC  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8734  11BD  0008               	return
  8735  11BE                     __end_of_CC2500_TxData:	
  8736                           
  8737                           	psect	text35
  8738  1502                     __ptext35:	
  8739 ;; *************** function _CC2500_RxData *****************
  8740 ;; Defined at:
  8741 ;;		line 57 in file "../src/CC2500_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        2 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    7
  8762 ;; This function calls:
  8763 ;;		_CC2500_ReadByte
  8764 ;;		_CC2500_ReadStatus
  8765 ;;		_CC2500_WriteByte
  8766 ;;		_CC2500_WriteCommand
  8767 ;;		_setRF_RxStatus
  8768 ;; This function is called by:
  8769 ;;		_setRF_Main
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           
  8774                           ;psect for function _CC2500_RxData
  8775  1502                     _CC2500_RxData:	
  8776                           
  8777                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8778                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8779                           
  8780                           ;incstack = 0
  8781                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8782  1502  0020               	movlb	0	; select bank0
  8783  1503  180D               	btfsc	13,0	;volatile
  8784  1504                     l294:	
  8785                           ;CC2500_B1.c: 63: {
  8786                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8787                           
  8788  1504  180D               	btfsc	13,0	;volatile
  8789  1505  2D04               	goto	l294
  8790                           
  8791                           ;CC2500_B1.c: 65: }
  8792                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8793  1506  303B               	movlw	59
  8794  1507  319C  2450  3195   	fcall	_CC2500_ReadStatus
  8795                           
  8796                           ;CC2500_B1.c: 67: if (s_data != 0)
  8797  150A  0021               	movlb	1	; select bank1
  8798  150B  0846               	movf	_s_data^(0+128),w
  8799  150C  1903               	btfsc	3,2
  8800  150D  2D58               	goto	l6438
  8801                           
  8802                           ;CC2500_B1.c: 69: {
  8803                           ;CC2500_B1.c: 70: RC4 = 0;
  8804  150E  0020               	movlb	0	; select bank0
  8805  150F  120E               	bcf	14,4	;volatile
  8806                           
  8807                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8808  1510  30FF               	movlw	255
  8809  1511  00A4               	movwf	??_CC2500_RxData
  8810  1512  0824               	movf	??_CC2500_RxData,w
  8811  1513  0021               	movlb	1	; select bank1
  8812  1514  00C2               	movwf	_SPI0Buffer^(0+128)
  8813  1515                     l298:	
  8814                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8815                           
  8816  1515  0020               	movlb	0	; select bank0
  8817  1516  190E               	btfsc	14,2	;volatile
  8818  1517  2D15               	goto	l298
  8819                           
  8820                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8821  1518  319B  239C  3195   	fcall	_CC2500_WriteByte
  8822                           
  8823                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8824  151B  319C  24A3  3195   	fcall	_CC2500_ReadByte
  8825                           
  8826                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8827  151E  0021               	movlb	1	; select bank1
  8828  151F  0842               	movf	_SPI0Buffer^(0+128),w
  8829  1520  0020               	movlb	0	; select bank0
  8830  1521  00A4               	movwf	??_CC2500_RxData
  8831  1522  0824               	movf	??_CC2500_RxData,w
  8832  1523  0021               	movlb	1	; select bank1
  8833  1524  00C1               	movwf	_Rx_Length^(0+128)
  8834                           
  8835                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8836  1525  0020               	movlb	0	; select bank0
  8837  1526  01A5               	clrf	CC2500_RxData@loop_f
  8838  1527                     l6424:	
  8839  1527  0021               	movlb	1	; select bank1
  8840  1528  0841               	movf	_Rx_Length^(0+128),w
  8841  1529  0020               	movlb	0	; select bank0
  8842  152A  0225               	subwf	CC2500_RxData@loop_f,w
  8843  152B  1803               	btfsc	3,0
  8844  152C  2D3F               	goto	l6426
  8845                           
  8846                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8847  152D  319C  24A3  3195   	fcall	_CC2500_ReadByte
  8848                           
  8849                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8850  1530  0021               	movlb	1	; select bank1
  8851  1531  0842               	movf	_SPI0Buffer^(0+128),w
  8852  1532  0020               	movlb	0	; select bank0
  8853  1533  00A4               	movwf	??_CC2500_RxData
  8854  1534  0825               	movf	CC2500_RxData@loop_f,w
  8855  1535  3EA0               	addlw	_RF_Data& (0+255)
  8856  1536  0086               	movwf	6
  8857  1537  0187               	clrf	7
  8858  1538  0824               	movf	??_CC2500_RxData,w
  8859  1539  0081               	movwf	1
  8860  153A  3001               	movlw	1
  8861  153B  00A4               	movwf	??_CC2500_RxData
  8862  153C  0824               	movf	??_CC2500_RxData,w
  8863  153D  07A5               	addwf	CC2500_RxData@loop_f,f
  8864  153E  2D27               	goto	l6424
  8865  153F                     l6426:	
  8866                           
  8867                           ;CC2500_B1.c: 80: }
  8868                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8869  153F  319C  24A3  3195   	fcall	_CC2500_ReadByte
  8870                           
  8871                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8872  1542  0021               	movlb	1	; select bank1
  8873  1543  0842               	movf	_SPI0Buffer^(0+128),w
  8874  1544  0020               	movlb	0	; select bank0
  8875  1545  00A4               	movwf	??_CC2500_RxData
  8876  1546  0824               	movf	??_CC2500_RxData,w
  8877  1547  0021               	movlb	1	; select bank1
  8878  1548  00C0               	movwf	_RSSI^(0+128)
  8879                           
  8880                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8881  1549  319C  24A3  3195   	fcall	_CC2500_ReadByte
  8882                           
  8883                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8884  154C  0021               	movlb	1	; select bank1
  8885  154D  0842               	movf	_SPI0Buffer^(0+128),w
  8886  154E  0020               	movlb	0	; select bank0
  8887  154F  00A4               	movwf	??_CC2500_RxData
  8888  1550  0824               	movf	??_CC2500_RxData,w
  8889  1551  0021               	movlb	1	; select bank1
  8890  1552  00B8               	movwf	_CRC^(0+128)
  8891                           
  8892                           ;CC2500_B1.c: 85: RC4 = 1;
  8893  1553  0020               	movlb	0	; select bank0
  8894  1554  160E               	bsf	14,4	;volatile
  8895                           
  8896                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8897  1555  0021               	movlb	1	; select bank1
  8898  1556  1BB8               	btfsc	_CRC^(0+128),7
  8899                           
  8900                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8901  1557  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8902  1558                     l6438:	
  8903                           
  8904                           ;CC2500_B1.c: 88: }
  8905                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8906  1558  3036               	movlw	54
  8907  1559  319A  2221  3195   	fcall	_CC2500_WriteCommand
  8908                           
  8909                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8910  155C  303A               	movlw	58
  8911  155D  319A  2221  3195   	fcall	_CC2500_WriteCommand
  8912                           
  8913                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  8914  1560  0020               	movlb	0	; select bank0
  8915  1561  01A2               	clrf	setRF_RxStatus@command
  8916  1562  3001               	movlw	1
  8917  1563  319A  2203         	fcall	_setRF_RxStatus
  8918  1565  0008               	return
  8919  1566                     __end_of_CC2500_RxData:	
  8920                           
  8921                           	psect	text36
  8922  1A03                     __ptext36:	
  8923 ;; *************** function _setRF_RxStatus *****************
  8924 ;; Defined at:
  8925 ;;		line 42 in file "../src/RF_Control_B1.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  rf              1    wreg     unsigned char 
  8928 ;;  command         1    2[BANK0 ] unsigned char 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  rf              1    3[BANK0 ] unsigned char 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;		None               void
  8933 ;; Registers used:
  8934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:        2 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    6
  8947 ;; This function calls:
  8948 ;;		_RfPointSelect
  8949 ;; This function is called by:
  8950 ;;		_CC2500_RxData
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _setRF_RxStatus
  8956  1A03                     _setRF_RxStatus:	
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8960                           ;setRF_RxStatus@rf stored from wreg
  8961  1A03  0020               	movlb	0	; select bank0
  8962  1A04  00A3               	movwf	setRF_RxStatus@rf
  8963                           
  8964                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  8965  1A05  0823               	movf	setRF_RxStatus@rf,w
  8966  1A06  3199  2174         	fcall	_RfPointSelect
  8967                           
  8968                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  8969  1A08  0021               	movlb	1	; select bank1
  8970  1A09  083E               	movf	_RF^(0+128),w
  8971  1A0A  0086               	movwf	6
  8972  1A0B  0187               	clrf	7
  8973  1A0C  0020               	movlb	0	; select bank0
  8974  1A0D  0822               	movf	setRF_RxStatus@command,w
  8975  1A0E  1181               	bcf	1,3
  8976  1A0F  1D03               	skipz
  8977  1A10  1581               	bsf	1,3
  8978  1A11  0008               	return
  8979  1A12                     __end_of_setRF_RxStatus:	
  8980                           
  8981                           	psect	text37
  8982  1C50                     __ptext37:	
  8983 ;; *************** function _CC2500_ReadStatus *****************
  8984 ;; Defined at:
  8985 ;;		line 263 in file "../src/CC2500_B1.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  status_addr     1    wreg     unsigned char 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;		None               void
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0, pclath, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:        2 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    6
  9006 ;; This function calls:
  9007 ;;		_CC2500_ReadByte
  9008 ;;		_CC2500_WriteByte
  9009 ;; This function is called by:
  9010 ;;		_CC2500_RxData
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _CC2500_ReadStatus
  9016  1C50                     _CC2500_ReadStatus:	
  9017                           
  9018                           ;incstack = 0
  9019                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9020                           ;CC2500_ReadStatus@status_addr stored from wreg
  9021  1C50  0020               	movlb	0	; select bank0
  9022  1C51  00A3               	movwf	CC2500_ReadStatus@status_addr
  9023                           
  9024                           ;CC2500_B1.c: 264: RC4 = 0;
  9025  1C52  120E               	bcf	14,4	;volatile
  9026                           
  9027                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  9028  1C53  0823               	movf	CC2500_ReadStatus@status_addr,w
  9029  1C54  3EC0               	addlw	192
  9030  1C55  00A2               	movwf	??_CC2500_ReadStatus
  9031  1C56  0822               	movf	??_CC2500_ReadStatus,w
  9032  1C57  0021               	movlb	1	; select bank1
  9033  1C58  00C2               	movwf	_SPI0Buffer^(0+128)
  9034  1C59                     l374:	
  9035                           ;CC2500_B1.c: 267: while (RC2 == 1);
  9036                           
  9037  1C59  0020               	movlb	0	; select bank0
  9038  1C5A  190E               	btfsc	14,2	;volatile
  9039  1C5B  2C59               	goto	l374
  9040                           
  9041                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  9042  1C5C  319B  239C  319C   	fcall	_CC2500_WriteByte
  9043                           
  9044                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  9045  1C5F  319C  24A3         	fcall	_CC2500_ReadByte
  9046                           
  9047                           ;CC2500_B1.c: 271: RC4 = 1;
  9048  1C61  0020               	movlb	0	; select bank0
  9049  1C62  160E               	bsf	14,4	;volatile
  9050                           
  9051                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  9052  1C63  0021               	movlb	1	; select bank1
  9053  1C64  0842               	movf	_SPI0Buffer^(0+128),w
  9054  1C65  0020               	movlb	0	; select bank0
  9055  1C66  00A2               	movwf	??_CC2500_ReadStatus
  9056  1C67  0822               	movf	??_CC2500_ReadStatus,w
  9057  1C68  0021               	movlb	1	; select bank1
  9058  1C69  00C6               	movwf	_s_data^(0+128)
  9059  1C6A  0008               	return
  9060  1C6B                     __end_of_CC2500_ReadStatus:	
  9061                           
  9062                           	psect	text38
  9063  1CA3                     __ptext38:	
  9064 ;; *************** function _CC2500_ReadByte *****************
  9065 ;; Defined at:
  9066 ;;		line 207 in file "../src/CC2500_B1.c"
  9067 ;; Parameters:    Size  Location     Type
  9068 ;;		None
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;		None               void
  9073 ;; Registers used:
  9074 ;;		wreg, status,2, status,0
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;Total ram usage:        2 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    5
  9087 ;; This function calls:
  9088 ;;		Nothing
  9089 ;; This function is called by:
  9090 ;;		_CC2500_RxData
  9091 ;;		_CC2500_ReadStatus
  9092 ;;		_CC2500_ReadREG
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _CC2500_ReadByte
  9098  1CA3                     _CC2500_ReadByte:	
  9099                           
  9100                           ;CC2500_B1.c: 208: unsigned char loop_b;
  9101                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  9102                           
  9103                           ;incstack = 0
  9104                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9105  1CA3  0020               	movlb	0	; select bank0
  9106  1CA4  01A1               	clrf	CC2500_ReadByte@loop_b
  9107  1CA5                     L12:	
  9108  1CA5  3008               	movlw	8
  9109  1CA6  0221               	subwf	CC2500_ReadByte@loop_b,w
  9110  1CA7  1803               	btfsc	3,0
  9111  1CA8  0008               	return
  9112                           
  9113                           ;CC2500_B1.c: 210: RC1 = 1;
  9114  1CA9  148E               	bsf	14,1	;volatile
  9115                           
  9116                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  9117  1CAA  1003               	clrc
  9118  1CAB  0021               	movlb	1	; select bank1
  9119  1CAC  0DC2               	rlf	_SPI0Buffer^(0+128),f
  9120                           
  9121                           ;CC2500_B1.c: 212: if (RC2 == 1)
  9122  1CAD  0020               	movlb	0	; select bank0
  9123  1CAE  1D0E               	btfss	14,2	;volatile
  9124  1CAF  2CB3               	goto	l6130
  9125                           
  9126                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  9127  1CB0  0021               	movlb	1	; select bank1
  9128  1CB1  1442               	bsf	_SPI0Buffer^(0+128),0
  9129  1CB2  2CB9               	goto	l6132
  9130  1CB3                     l6130:	
  9131                           
  9132                           ;CC2500_B1.c: 214: else
  9133                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  9134  1CB3  30FE               	movlw	254
  9135  1CB4  0020               	movlb	0	; select bank0
  9136  1CB5  00A0               	movwf	??_CC2500_ReadByte
  9137  1CB6  0820               	movf	??_CC2500_ReadByte,w
  9138  1CB7  0021               	movlb	1	; select bank1
  9139  1CB8  05C2               	andwf	_SPI0Buffer^(0+128),f
  9140  1CB9                     l6132:	
  9141                           
  9142                           ;CC2500_B1.c: 216: RC1 = 0;
  9143  1CB9  0020               	movlb	0	; select bank0
  9144  1CBA  108E               	bcf	14,1	;volatile
  9145  1CBB  3001               	movlw	1
  9146  1CBC  00A0               	movwf	??_CC2500_ReadByte
  9147  1CBD  0820               	movf	??_CC2500_ReadByte,w
  9148  1CBE  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9149  1CBF  2CA5               	goto	L12
  9150  1CC0                     __end_of_CC2500_ReadByte:	
  9151                           
  9152                           	psect	text39
  9153  18B3                     __ptext39:	
  9154 ;; *************** function _RF_Initialization *****************
  9155 ;; Defined at:
  9156 ;;		line 16 in file "../src/RF_Control_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;		None               void
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0, pclath, cstack
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        0 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    6
  9177 ;; This function calls:
  9178 ;;		_setRF_Initialization
  9179 ;; This function is called by:
  9180 ;;		_main
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _RF_Initialization
  9186  18B3                     _RF_Initialization:	
  9187                           
  9188                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9192  18B3  3001               	movlw	1
  9193  18B4  3198  20E0         	fcall	_setRF_Initialization
  9194  18B6  0008               	return
  9195  18B7                     __end_of_RF_Initialization:	
  9196                           
  9197                           	psect	text40
  9198  18E0                     __ptext40:	
  9199 ;; *************** function _setRF_Initialization *****************
  9200 ;; Defined at:
  9201 ;;		line 49 in file "../src/RF_Control_B1.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  rf              1    wreg     unsigned char 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;  rf              1    0[COMMON] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:        1 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    5
  9222 ;; This function calls:
  9223 ;;		Nothing
  9224 ;; This function is called by:
  9225 ;;		_RF_Initialization
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _setRF_Initialization
  9231  18E0                     _setRF_Initialization:	
  9232                           
  9233                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _setRF_Initialization: [wreg]
  9237  18E0  3015               	movlw	21
  9238  18E1  0020               	movlb	0	; select bank0
  9239  18E2  00A0               	movwf	??_setRF_Initialization
  9240  18E3  0820               	movf	??_setRF_Initialization,w
  9241  18E4  0021               	movlb	1	; select bank1
  9242  18E5  00C3               	movwf	_Tx_Length^(0+128)
  9243  18E6  0008               	return
  9244  18E7                     __end_of_setRF_Initialization:	
  9245                           
  9246                           	psect	text41
  9247  1C35                     __ptext41:	
  9248 ;; *************** function _Mcu_Initialization *****************
  9249 ;; Defined at:
  9250 ;;		line 30 in file "../src/MCU_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        1 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    6
  9271 ;; This function calls:
  9272 ;;		_ADC_Set
  9273 ;;		_Fosc_Set
  9274 ;;		_INT_Set
  9275 ;;		_IOC_Set
  9276 ;;		_IO_Set
  9277 ;;		_TMR0_Set
  9278 ;;		_WDT_Set
  9279 ;; This function is called by:
  9280 ;;		_main
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _Mcu_Initialization
  9286  1C35                     _Mcu_Initialization:	
  9287                           
  9288                           ;MCU_B1.c: 32: Fosc_Set();
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9292  1C35  3198  20AF  319C   	fcall	_Fosc_Set
  9293                           
  9294                           ;MCU_B1.c: 34: IO_Set();
  9295  1C38  319B  23E7  319C   	fcall	_IO_Set
  9296                           
  9297                           ;MCU_B1.c: 36: TMR0_Set();
  9298  1C3B  3199  21CB  319C   	fcall	_TMR0_Set
  9299                           
  9300                           ;MCU_B1.c: 38: ;;
  9301                           ;MCU_B1.c: 40: ADC_Set();
  9302  1C3E  3198  20D9  319C   	fcall	_ADC_Set
  9303                           
  9304                           ;MCU_B1.c: 44: INT_Set();
  9305  1C41  3198  20C0  319C   	fcall	_INT_Set
  9306                           
  9307                           ;MCU_B1.c: 46: IOC_Set();
  9308  1C44  3199  21BE  319C   	fcall	_IOC_Set
  9309                           
  9310                           ;MCU_B1.c: 48: ;;
  9311                           ;MCU_B1.c: 50: ;;
  9312                           ;MCU_B1.c: 52: Memory=&VarMemory;
  9313  1C47  3020               	movlw	_VarMemory& (0+255)
  9314  1C48  0020               	movlb	0	; select bank0
  9315  1C49  00A1               	movwf	??_Mcu_Initialization
  9316  1C4A  0821               	movf	??_Mcu_Initialization,w
  9317  1C4B  0021               	movlb	1	; select bank1
  9318  1C4C  00E7               	movwf	_Memory^(0+128)
  9319                           
  9320                           ;MCU_B1.c: 54: WDT_Set();
  9321  1C4D  319B  2384         	fcall	_WDT_Set
  9322  1C4F  0008               	return
  9323  1C50                     __end_of_Mcu_Initialization:	
  9324                           
  9325                           	psect	text42
  9326  1B84                     __ptext42:	
  9327 ;; *************** function _WDT_Set *****************
  9328 ;; Defined at:
  9329 ;;		line 894 in file "../src/MCU_B1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        1 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    5
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_Mcu_Initialization
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           
  9358                           ;psect for function _WDT_Set
  9359  1B84                     _WDT_Set:	
  9360                           
  9361                           ;MCU_B1.c: 895: WDTCON = 0b00010111;;
  9362                           
  9363                           ;incstack = 0
  9364                           ; Regs used in _WDT_Set: [wregfsr1]
  9365  1B84  3017               	movlw	23
  9366  1B85  0021               	movlb	1	; select bank1
  9367  1B86  0097               	movwf	23	;volatile
  9368                           
  9369                           ;MCU_B1.c: 896: WDT = &_WDT;
  9370  1B87  30E3               	movlw	__WDT& (0+255)
  9371  1B88  0020               	movlb	0	; select bank0
  9372  1B89  00A0               	movwf	??_WDT_Set
  9373  1B8A  0820               	movf	??_WDT_Set,w
  9374  1B8B  0021               	movlb	1	; select bank1
  9375  1B8C  00E9               	movwf	_WDT^(0+128)
  9376                           
  9377                           ;MCU_B1.c: 897: WDT->Enable = 1;
  9378  1B8D  0869               	movf	_WDT^(0+128),w
  9379  1B8E  0086               	movwf	6
  9380  1B8F  0187               	clrf	7
  9381  1B90  1401               	bsf	1,0
  9382                           
  9383                           ;MCU_B1.c: 898: WDT->Count = 10;
  9384  1B91  300A               	movlw	10
  9385  1B92  0020               	movlb	0	; select bank0
  9386  1B93  00A0               	movwf	??_WDT_Set
  9387  1B94  0021               	movlb	1	; select bank1
  9388  1B95  0A69               	incf	_WDT^(0+128),w
  9389  1B96  0086               	movwf	6
  9390  1B97  0187               	clrf	7
  9391  1B98  0020               	movlb	0	; select bank0
  9392  1B99  0820               	movf	??_WDT_Set,w
  9393  1B9A  0081               	movwf	1
  9394  1B9B  0008               	return
  9395  1B9C                     __end_of_WDT_Set:	
  9396                           
  9397                           	psect	text43
  9398  19CB                     __ptext43:	
  9399 ;; *************** function _TMR0_Set *****************
  9400 ;; Defined at:
  9401 ;;		line 128 in file "../src/MCU_B1.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, status,2
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        1 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    5
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_Mcu_Initialization
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _TMR0_Set
  9431  19CB                     _TMR0_Set:	
  9432                           
  9433                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9437  19CB  305C               	movlw	_VarTimer0& (0+255)
  9438  19CC  0020               	movlb	0	; select bank0
  9439  19CD  00A0               	movwf	??_TMR0_Set
  9440  19CE  0820               	movf	??_TMR0_Set,w
  9441  19CF  0021               	movlb	1	; select bank1
  9442  19D0  00E8               	movwf	_Timer0^(0+128)
  9443                           
  9444                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9445  19D1  0195               	clrf	21	;volatile
  9446                           
  9447                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9448  19D2  30A6               	movlw	166
  9449  19D3  0020               	movlb	0	; select bank0
  9450  19D4  0095               	movwf	21	;volatile
  9451                           
  9452                           ;MCU_B1.c: 132: TMR0IE = 1;
  9453  19D5  168B               	bsf	11,5	;volatile
  9454                           
  9455                           ;MCU_B1.c: 133: GIE = 1;
  9456  19D6  178B               	bsf	11,7	;volatile
  9457  19D7  0008               	return
  9458  19D8                     __end_of_TMR0_Set:	
  9459                           
  9460                           	psect	text44
  9461  1BE7                     __ptext44:	
  9462 ;; *************** function _IO_Set *****************
  9463 ;; Defined at:
  9464 ;;		line 62 in file "../src/MCU_B1.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;		None               void
  9471 ;; Registers used:
  9472 ;;		wreg, status,2
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;Total ram usage:        0 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    5
  9485 ;; This function calls:
  9486 ;;		Nothing
  9487 ;; This function is called by:
  9488 ;;		_Mcu_Initialization
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _IO_Set
  9494  1BE7                     _IO_Set:	
  9495                           
  9496                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _IO_Set: [wreg+status,2]
  9500  1BE7  3077               	movlw	119
  9501  1BE8  0021               	movlb	1	; select bank1
  9502  1BE9  008C               	movwf	12	;volatile
  9503                           
  9504                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9505  1BEA  3007               	movlw	7
  9506  1BEB  008D               	movwf	13	;volatile
  9507                           
  9508                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9509  1BEC  300C               	movlw	12
  9510  1BED  008E               	movwf	14	;volatile
  9511                           
  9512                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9513  1BEE  0022               	movlb	2	; select bank2
  9514  1BEF  018C               	clrf	12	;volatile
  9515                           
  9516                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9517  1BF0  3002               	movlw	2
  9518  1BF1  008D               	movwf	13	;volatile
  9519                           
  9520                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9521  1BF2  018E               	clrf	14	;volatile
  9522                           
  9523                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9524  1BF3  3022               	movlw	34
  9525  1BF4  0023               	movlb	3	; select bank3
  9526  1BF5  008C               	movwf	12	;volatile
  9527                           
  9528                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9529  1BF6  018D               	clrf	13	;volatile
  9530                           
  9531                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9532  1BF7  018E               	clrf	14	;volatile
  9533                           
  9534                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9535  1BF8  3077               	movlw	119
  9536  1BF9  0020               	movlb	0	; select bank0
  9537  1BFA  008C               	movwf	12	;volatile
  9538                           
  9539                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9540  1BFB  3007               	movlw	7
  9541  1BFC  008D               	movwf	13	;volatile
  9542                           
  9543                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9544  1BFD  300C               	movlw	12
  9545  1BFE  008E               	movwf	14	;volatile
  9546  1BFF  0008               	return
  9547  1C00                     __end_of_IO_Set:	
  9548                           
  9549                           	psect	text45
  9550  19BE                     __ptext45:	
  9551 ;; *************** function _IOC_Set *****************
  9552 ;; Defined at:
  9553 ;;		line 271 in file "../src/MCU_B1.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;		None
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;		None
  9558 ;; Return value:  Size  Location     Type
  9559 ;;		None               void
  9560 ;; Registers used:
  9561 ;;		wreg, status,2
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;Total ram usage:        0 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:    5
  9574 ;; This function calls:
  9575 ;;		Nothing
  9576 ;; This function is called by:
  9577 ;;		_Mcu_Initialization
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           
  9582                           ;psect for function _IOC_Set
  9583  19BE                     _IOC_Set:	
  9584                           
  9585                           ;MCU_B1.c: 272: WPUB2 = 0;
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _IOC_Set: [wreg+status,2]
  9589  19BE  0024               	movlb	4	; select bank4
  9590  19BF  110D               	bcf	13,2	;volatile
  9591                           
  9592                           ;MCU_B1.c: 280: IOCBP = 0b00000100;
  9593  19C0  3004               	movlw	4
  9594  19C1  0027               	movlb	7	; select bank7
  9595  19C2  0094               	movwf	20	;volatile
  9596                           
  9597                           ;MCU_B1.c: 281: IOCBN = 0b00000100;
  9598  19C3  3004               	movlw	4
  9599  19C4  0095               	movwf	21	;volatile
  9600                           
  9601                           ;MCU_B1.c: 290: IOCBF = 0b00000000;
  9602  19C5  0196               	clrf	22	;volatile
  9603                           
  9604                           ;MCU_B1.c: 292: IOCIE = 1;
  9605  19C6  158B               	bsf	11,3	;volatile
  9606                           
  9607                           ;MCU_B1.c: 293: IOCIF = 0;
  9608  19C7  100B               	bcf	11,0	;volatile
  9609                           
  9610                           ;MCU_B1.c: 294: PEIE = 1;
  9611  19C8  170B               	bsf	11,6	;volatile
  9612                           
  9613                           ;MCU_B1.c: 295: GIE = 1;
  9614  19C9  178B               	bsf	11,7	;volatile
  9615  19CA  0008               	return
  9616  19CB                     __end_of_IOC_Set:	
  9617                           
  9618                           	psect	text46
  9619  18C0                     __ptext46:	
  9620 ;; *************** function _INT_Set *****************
  9621 ;; Defined at:
  9622 ;;		line 244 in file "../src/MCU_B1.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		None
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        0 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    5
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_Mcu_Initialization
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _INT_Set
  9652  18C0                     _INT_Set:	
  9653                           
  9654                           ;MCU_B1.c: 245: WPUB0 = 0;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _INT_Set: []
  9658  18C0  0024               	movlb	4	; select bank4
  9659  18C1  100D               	bcf	13,0	;volatile
  9660                           
  9661                           ;MCU_B1.c: 246: INTE = 1;
  9662  18C2  160B               	bsf	11,4	;volatile
  9663                           
  9664                           ;MCU_B1.c: 247: PEIE = 1;
  9665  18C3  170B               	bsf	11,6	;volatile
  9666                           
  9667                           ;MCU_B1.c: 248: GIE = 1;
  9668  18C4  178B               	bsf	11,7	;volatile
  9669  18C5  0008               	return
  9670  18C6                     __end_of_INT_Set:	
  9671                           
  9672                           	psect	text47
  9673  18AF                     __ptext47:	
  9674 ;; *************** function _Fosc_Set *****************
  9675 ;; Defined at:
  9676 ;;		line 58 in file "../src/MCU_B1.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;		None               void
  9683 ;; Registers used:
  9684 ;;		wreg
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;Total ram usage:        0 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    5
  9697 ;; This function calls:
  9698 ;;		Nothing
  9699 ;; This function is called by:
  9700 ;;		_Mcu_Initialization
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           
  9705                           ;psect for function _Fosc_Set
  9706  18AF                     _Fosc_Set:	
  9707                           
  9708                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9709                           
  9710                           ;incstack = 0
  9711                           ; Regs used in _Fosc_Set: [wreg]
  9712  18AF  3078               	movlw	120
  9713  18B0  0021               	movlb	1	; select bank1
  9714  18B1  0099               	movwf	25	;volatile
  9715  18B2  0008               	return
  9716  18B3                     __end_of_Fosc_Set:	
  9717                           
  9718                           	psect	text48
  9719  18D9                     __ptext48:	
  9720 ;; *************** function _ADC_Set *****************
  9721 ;; Defined at:
  9722 ;;		line 317 in file "../src/MCU_B1.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;		None
  9727 ;; Return value:  Size  Location     Type
  9728 ;;		None               void
  9729 ;; Registers used:
  9730 ;;		wreg
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;Total ram usage:        0 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    5
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_Mcu_Initialization
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _ADC_Set
  9752  18D9                     _ADC_Set:	
  9753                           
  9754                           ;MCU_B1.c: 318: ADCON1 = 0xf2;
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _ADC_Set: [wreg]
  9758  18D9  30F2               	movlw	242
  9759  18DA  0021               	movlb	1	; select bank1
  9760  18DB  009E               	movwf	30	;volatile
  9761                           
  9762                           ;MCU_B1.c: 319: FVRCON = 0xc0;
  9763  18DC  30C0               	movlw	192
  9764  18DD  0022               	movlb	2	; select bank2
  9765  18DE  0097               	movwf	23	;volatile
  9766  18DF  0008               	return
  9767  18E0                     __end_of_ADC_Set:	
  9768                           
  9769                           	psect	text49
  9770  0054                     __ptext49:	
  9771 ;; *************** function _Load_Main *****************
  9772 ;; Defined at:
  9773 ;;		line 40 in file "../src/OverLoad_B1.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;		None
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  i               1   17[BANK0 ] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;Total ram usage:        5 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:   10
  9794 ;; This function calls:
  9795 ;;		___lwdiv
  9796 ;;		___wmul
  9797 ;;		_setDimmerLights_Clear
  9798 ;;		_setLoad_AH_AL_Restore
  9799 ;;		_setLoad_Exceptions
  9800 ;; This function is called by:
  9801 ;;		_main
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _Load_Main
  9807  0054                     _Load_Main:	
  9808                           
  9809                           ;OverLoad_B1.c: 41: char i;
  9810                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9814  0054  087B               	movf	_Load,w
  9815  0055  0086               	movwf	6
  9816  0056  3002               	movlw	2	; select bank4/5
  9817  0057  0087               	movwf	7
  9818  0058  1E81               	btfss	1,5
  9819  0059  2881               	goto	l7606
  9820                           
  9821                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
  9822  005A  087B               	movf	_Load,w
  9823  005B  3E03               	addlw	3
  9824  005C  0086               	movwf	6
  9825  005D  3002               	movlw	2	; select bank4/5
  9826  005E  0087               	movwf	7
  9827  005F  3001               	movlw	1
  9828  0060  0781               	addwf	1,f
  9829  0061  3141               	addfsr 1,1
  9830  0062  1803               	skipnc
  9831  0063  0A81               	incf	1,f
  9832                           
  9833                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
  9834  0064  087B               	movf	_Load,w
  9835  0065  3E03               	addlw	3
  9836  0066  0086               	movwf	6
  9837  0067  3002               	movlw	2	; select bank4/5
  9838  0068  0087               	movwf	7
  9839  0069  3F40               	moviw [0]fsr1
  9840  006A  0020               	movlb	0	; select bank0
  9841  006B  00AD               	movwf	??_Load_Main
  9842  006C  3F41               	moviw [1]fsr1
  9843  006D  00AE               	movwf	??_Load_Main+1
  9844  006E  3003               	movlw	3
  9845  006F  022E               	subwf	??_Load_Main+1,w
  9846  0070  30E8               	movlw	232
  9847  0071  1903               	skipnz
  9848  0072  022D               	subwf	??_Load_Main,w
  9849  0073  1C03               	skipc
  9850  0074  0008               	return
  9851                           
  9852                           ;OverLoad_B1.c: 45: {
  9853                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
  9854  0075  087B               	movf	_Load,w
  9855  0076  3E03               	addlw	3
  9856  0077  0086               	movwf	6
  9857  0078  3002               	movlw	2	; select bank4/5
  9858  0079  0087               	movwf	7
  9859  007A  3000               	movlw	0
  9860  007B  3FC0               	movwi [0]fsr1
  9861  007C  3FC1               	movwi [1]fsr1
  9862                           
  9863                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
  9864  007D  3000               	movlw	0
  9865  007E  3190  20F3         	fcall	_setLoad_Exceptions
  9866                           
  9867                           ;OverLoad_B1.c: 48: }
  9868                           ;OverLoad_B1.c: 49: } else {
  9869  0080  0008               	return
  9870  0081                     l7606:	
  9871                           
  9872                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
  9873  0081  087B               	movf	_Load,w
  9874  0082  0086               	movwf	6
  9875  0083  3002               	movlw	2	; select bank4/5
  9876  0084  0087               	movwf	7
  9877  0085  1E01               	btfss	1,4
  9878  0086  2A88               	goto	l7688
  9879                           
  9880                           ;OverLoad_B1.c: 51: Load->Time++;
  9881  0087  0A7B               	incf	_Load,w
  9882  0088  0086               	movwf	6
  9883  0089  3002               	movlw	2	; select bank4/5
  9884  008A  0087               	movwf	7
  9885  008B  3001               	movlw	1
  9886  008C  0781               	addwf	1,f
  9887  008D  3141               	addfsr 1,1
  9888  008E  1803               	skipnc
  9889  008F  0A81               	incf	1,f
  9890                           
  9891                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
  9892  0090  0A7B               	incf	_Load,w
  9893  0091  0086               	movwf	6
  9894  0092  3002               	movlw	2	; select bank4/5
  9895  0093  0087               	movwf	7
  9896  0094  3F40               	moviw [0]fsr1
  9897  0095  0020               	movlb	0	; select bank0
  9898  0096  00AD               	movwf	??_Load_Main
  9899  0097  3F41               	moviw [1]fsr1
  9900  0098  00AE               	movwf	??_Load_Main+1
  9901  0099  3000               	movlw	0
  9902  009A  022E               	subwf	??_Load_Main+1,w
  9903  009B  3005               	movlw	5
  9904  009C  1903               	skipnz
  9905  009D  022D               	subwf	??_Load_Main,w
  9906  009E  1C03               	skipc
  9907  009F  0008               	return
  9908                           
  9909                           ;OverLoad_B1.c: 53: {
  9910                           ;OverLoad_B1.c: 54: Load->Time = 0;
  9911  00A0  0A7B               	incf	_Load,w
  9912  00A1  0086               	movwf	6
  9913  00A2  3002               	movlw	2	; select bank4/5
  9914  00A3  0087               	movwf	7
  9915  00A4  3000               	movlw	0
  9916  00A5  3FC0               	movwi [0]fsr1
  9917  00A6  3FC1               	movwi [1]fsr1
  9918                           
  9919                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
  9920  00A7  087B               	movf	_Load,w
  9921  00A8  0086               	movwf	6
  9922  00A9  3002               	movlw	2	; select bank4/5
  9923  00AA  0087               	movwf	7
  9924  00AB  1201               	bcf	1,4
  9925                           
  9926                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
  9927  00AC  087B               	movf	_Load,w
  9928  00AD  3E45               	addlw	69
  9929  00AE  0086               	movwf	6
  9930  00AF  3002               	movlw	2	; select bank4/5
  9931  00B0  0087               	movwf	7
  9932  00B1  087B               	movf	_Load,w
  9933  00B2  3E44               	addlw	68
  9934  00B3  0084               	movwf	4
  9935  00B4  3002               	movlw	2	; select bank4/5
  9936  00B5  0085               	movwf	5
  9937  00B6  0800               	movf	0,w
  9938  00B7  00AD               	movwf	??_Load_Main
  9939  00B8  087B               	movf	_Load,w
  9940  00B9  3E43               	addlw	67
  9941  00BA  0084               	movwf	4
  9942  00BB  3002               	movlw	2	; select bank4/5
  9943  00BC  0085               	movwf	5
  9944  00BD  0800               	movf	0,w
  9945  00BE  072D               	addwf	??_Load_Main,w
  9946  00BF  0701               	addwf	1,w
  9947  00C0  00AE               	movwf	??_Load_Main+1
  9948  00C1  087B               	movf	_Load,w
  9949  00C2  3E3E               	addlw	62
  9950  00C3  0086               	movwf	6
  9951  00C4  3002               	movlw	2	; select bank4/5
  9952  00C5  0087               	movwf	7
  9953  00C6  082E               	movf	??_Load_Main+1,w
  9954  00C7  0081               	movwf	1
  9955                           
  9956                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
  9957  00C8  01B1               	clrf	Load_Main@i
  9958  00C9  0AB1               	incf	Load_Main@i,f
  9959  00CA  3004               	movlw	4
  9960  00CB  0231               	subwf	Load_Main@i,w
  9961  00CC  1803               	btfsc	3,0
  9962  00CD  28FC               	goto	l7628
  9963  00CE                     l7622:	
  9964                           
  9965                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
  9966  00CE  3531               	lslf	Load_Main@i,w
  9967  00CF  3E08               	addlw	8
  9968  00D0  077B               	addwf	_Load,w
  9969  00D1  00AD               	movwf	??_Load_Main
  9970  00D2  082D               	movf	??_Load_Main,w
  9971  00D3  0086               	movwf	6
  9972  00D4  3002               	movlw	2	; select bank4/5
  9973  00D5  0087               	movwf	7
  9974  00D6  087B               	movf	_Load,w
  9975  00D7  3E2E               	addlw	46
  9976  00D8  0084               	movwf	4
  9977  00D9  3002               	movlw	2	; select bank4/5
  9978  00DA  0085               	movwf	5
  9979  00DB  3F40               	moviw [0]fsr1
  9980  00DC  0780               	addwf	0,f
  9981  00DD  3101               	addfsr 0,1
  9982  00DE  3F41               	moviw [1]fsr1
  9983  00DF  3D80               	addwfc	0,f
  9984  00E0  313F               	addfsr 0,-1
  9985                           
  9986                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
  9987  00E1  3531               	lslf	Load_Main@i,w
  9988  00E2  3E1A               	addlw	26
  9989  00E3  077B               	addwf	_Load,w
  9990  00E4  00AD               	movwf	??_Load_Main
  9991  00E5  082D               	movf	??_Load_Main,w
  9992  00E6  0086               	movwf	6
  9993  00E7  3002               	movlw	2	; select bank4/5
  9994  00E8  0087               	movwf	7
  9995  00E9  087B               	movf	_Load,w
  9996  00EA  3E30               	addlw	48
  9997  00EB  0084               	movwf	4
  9998  00EC  3002               	movlw	2	; select bank4/5
  9999  00ED  0085               	movwf	5
 10000  00EE  3F40               	moviw [0]fsr1
 10001  00EF  0780               	addwf	0,f
 10002  00F0  3101               	addfsr 0,1
 10003  00F1  3F41               	moviw [1]fsr1
 10004  00F2  3D80               	addwfc	0,f
 10005  00F3  313F               	addfsr 0,-1
 10006  00F4  3001               	movlw	1
 10007  00F5  00AD               	movwf	??_Load_Main
 10008  00F6  082D               	movf	??_Load_Main,w
 10009  00F7  07B1               	addwf	Load_Main@i,f
 10010  00F8  3004               	movlw	4
 10011  00F9  0231               	subwf	Load_Main@i,w
 10012  00FA  1C03               	skipc
 10013  00FB  28CE               	goto	l7622
 10014  00FC                     l7628:	
 10015                           
 10016                           ;OverLoad_B1.c: 60: }
 10017                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 10018  00FC  3003               	movlw	3
 10019  00FD  00A0               	movwf	___lwdiv@divisor
 10020  00FE  3000               	movlw	0
 10021  00FF  00A1               	movwf	___lwdiv@divisor+1
 10022  0100  087B               	movf	_Load,w
 10023  0101  3E2E               	addlw	46
 10024  0102  0086               	movwf	6
 10025  0103  3002               	movlw	2	; select bank4/5
 10026  0104  0087               	movwf	7
 10027  0105  3F40               	moviw [0]fsr1
 10028  0106  00A2               	movwf	___lwdiv@dividend
 10029  0107  3F41               	moviw [1]fsr1
 10030  0108  00A3               	movwf	___lwdiv@dividend+1
 10031  0109  319F  27C9  3180   	fcall	___lwdiv
 10032  010C  087B               	movf	_Load,w
 10033  010D  3E2E               	addlw	46
 10034  010E  0086               	movwf	6
 10035  010F  3002               	movlw	2	; select bank4/5
 10036  0110  0087               	movwf	7
 10037  0111  0020               	movlb	0	; select bank0
 10038  0112  0820               	movf	?___lwdiv,w
 10039  0113  3FC0               	movwi [0]fsr1
 10040  0114  0821               	movf	?___lwdiv+1,w
 10041  0115  3FC1               	movwi [1]fsr1
 10042                           
 10043                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 10044  0116  3003               	movlw	3
 10045  0117  00A0               	movwf	___lwdiv@divisor
 10046  0118  3000               	movlw	0
 10047  0119  00A1               	movwf	___lwdiv@divisor+1
 10048  011A  087B               	movf	_Load,w
 10049  011B  3E30               	addlw	48
 10050  011C  0086               	movwf	6
 10051  011D  3002               	movlw	2	; select bank4/5
 10052  011E  0087               	movwf	7
 10053  011F  3F40               	moviw [0]fsr1
 10054  0120  00A2               	movwf	___lwdiv@dividend
 10055  0121  3F41               	moviw [1]fsr1
 10056  0122  00A3               	movwf	___lwdiv@dividend+1
 10057  0123  319F  27C9  3180   	fcall	___lwdiv
 10058  0126  087B               	movf	_Load,w
 10059  0127  3E30               	addlw	48
 10060  0128  0086               	movwf	6
 10061  0129  3002               	movlw	2	; select bank4/5
 10062  012A  0087               	movwf	7
 10063  012B  0020               	movlb	0	; select bank0
 10064  012C  0820               	movf	?___lwdiv,w
 10065  012D  3FC0               	movwi [0]fsr1
 10066  012E  0821               	movf	?___lwdiv+1,w
 10067  012F  3FC1               	movwi [1]fsr1
 10068                           
 10069                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 10070  0130  087B               	movf	_Load,w
 10071  0131  3E2E               	addlw	46
 10072  0132  0086               	movwf	6
 10073  0133  3002               	movlw	2	; select bank4/5
 10074  0134  0087               	movwf	7
 10075  0135  3F40               	moviw [0]fsr1
 10076  0136  00AD               	movwf	??_Load_Main
 10077  0137  3F41               	moviw [1]fsr1
 10078  0138  00AE               	movwf	??_Load_Main+1
 10079  0139  087B               	movf	_Load,w
 10080  013A  3E30               	addlw	48
 10081  013B  0086               	movwf	6
 10082  013C  3002               	movlw	2	; select bank4/5
 10083  013D  0087               	movwf	7
 10084  013E  3F40               	moviw [0]fsr1
 10085  013F  00AF               	movwf	??_Load_Main+2
 10086  0140  3F41               	moviw [1]fsr1
 10087  0141  00B0               	movwf	??_Load_Main+3
 10088  0142  082E               	movf	??_Load_Main+1,w
 10089  0143  0230               	subwf	??_Load_Main+3,w
 10090  0144  1D03               	skipz
 10091  0145  2948               	goto	u6945
 10092  0146  082D               	movf	??_Load_Main,w
 10093  0147  022F               	subwf	??_Load_Main+2,w
 10094  0148                     u6945:	
 10095  0148  1803               	skipnc
 10096  0149  2A85               	goto	l7686
 10097                           
 10098                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 10099  014A  087B               	movf	_Load,w
 10100  014B  3E2E               	addlw	46
 10101  014C  0086               	movwf	6
 10102  014D  3002               	movlw	2	; select bank4/5
 10103  014E  0087               	movwf	7
 10104  014F  087B               	movf	_Load,w
 10105  0150  3E30               	addlw	48
 10106  0151  0084               	movwf	4
 10107  0152  3002               	movlw	2	; select bank4/5
 10108  0153  0085               	movwf	5
 10109  0154  3F00               	moviw [0]fsr0
 10110  0155  00AD               	movwf	??_Load_Main
 10111  0156  3F01               	moviw [1]fsr0
 10112  0157  00AE               	movwf	??_Load_Main+1
 10113  0158  09AD               	comf	??_Load_Main,f
 10114  0159  09AE               	comf	??_Load_Main+1,f
 10115  015A  0AAD               	incf	??_Load_Main,f
 10116  015B  1903               	skipnz
 10117  015C  0AAE               	incf	??_Load_Main+1,f
 10118  015D  3F40               	moviw [0]fsr1
 10119  015E  072D               	addwf	??_Load_Main,w
 10120  015F  00AF               	movwf	??_Load_Main+2
 10121  0160  3F41               	moviw [1]fsr1
 10122  0161  3D2E               	addwfc	??_Load_Main+1,w
 10123  0162  00B0               	movwf	??_Load_Main+3
 10124  0163  087B               	movf	_Load,w
 10125  0164  3E2C               	addlw	44
 10126  0165  0086               	movwf	6
 10127  0166  3002               	movlw	2	; select bank4/5
 10128  0167  0087               	movwf	7
 10129  0168  082F               	movf	??_Load_Main+2,w
 10130  0169  3FC0               	movwi [0]fsr1
 10131  016A  0830               	movf	??_Load_Main+3,w
 10132  016B  3FC1               	movwi [1]fsr1
 10133                           
 10134                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 10135  016C  087B               	movf	_Load,w
 10136  016D  3E3A               	addlw	58
 10137  016E  0086               	movwf	6
 10138  016F  3002               	movlw	2	; select bank4/5
 10139  0170  0087               	movwf	7
 10140  0171  3002               	movlw	2
 10141  0172  0201               	subwf	1,w
 10142  0173  1803               	skipnc
 10143  0174  29C5               	goto	l7650
 10144                           
 10145                           ;OverLoad_B1.c: 67: Load->Count++;
 10146  0175  3001               	movlw	1
 10147  0176  00AD               	movwf	??_Load_Main
 10148  0177  087B               	movf	_Load,w
 10149  0178  3E3A               	addlw	58
 10150  0179  0086               	movwf	6
 10151  017A  3002               	movlw	2	; select bank4/5
 10152  017B  0087               	movwf	7
 10153  017C  082D               	movf	??_Load_Main,w
 10154  017D  0781               	addwf	1,f
 10155                           
 10156                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 10157  017E  087B               	movf	_Load,w
 10158  017F  3E3A               	addlw	58
 10159  0180  0086               	movwf	6
 10160  0181  3002               	movlw	2	; select bank4/5
 10161  0182  0087               	movwf	7
 10162  0183  0801               	movf	1,w
 10163  0184  3A01               	xorlw	1
 10164  0185  1D03               	skipz
 10165  0186  2991               	goto	l7642
 10166                           
 10167                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 10168  0187  087B               	movf	_Load,w
 10169  0188  3E36               	addlw	54
 10170  0189  0086               	movwf	6
 10171  018A  3002               	movlw	2	; select bank4/5
 10172  018B  0087               	movwf	7
 10173  018C  30F4               	movlw	244
 10174  018D  3FC0               	movwi [0]fsr1
 10175  018E  3001               	movlw	1
 10176  018F  3FC1               	movwi [1]fsr1
 10177                           
 10178                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 10179  0190  29C5               	goto	l7650
 10180  0191                     l7642:	
 10181  0191  087B               	movf	_Load,w
 10182  0192  3E3A               	addlw	58
 10183  0193  0086               	movwf	6
 10184  0194  3002               	movlw	2	; select bank4/5
 10185  0195  0087               	movwf	7
 10186  0196  0801               	movf	1,w
 10187  0197  3A02               	xorlw	2
 10188  0198  1D03               	skipz
 10189  0199  29C5               	goto	l7650
 10190                           
 10191                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 10192  019A  087B               	movf	_Load,w
 10193  019B  3E3E               	addlw	62
 10194  019C  0086               	movwf	6
 10195  019D  3002               	movlw	2	; select bank4/5
 10196  019E  0087               	movwf	7
 10197  019F  0801               	movf	1,w
 10198  01A0  3A01               	xorlw	1
 10199  01A1  1D03               	skipz
 10200  01A2  29AD               	goto	l7648
 10201                           
 10202                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x32;
 10203  01A3  087B               	movf	_Load,w
 10204  01A4  3E36               	addlw	54
 10205  01A5  0086               	movwf	6
 10206  01A6  3002               	movlw	2	; select bank4/5
 10207  01A7  0087               	movwf	7
 10208  01A8  3032               	movlw	50
 10209  01A9  3FC0               	movwi [0]fsr1
 10210  01AA  3000               	movlw	0
 10211  01AB  3FC1               	movwi [1]fsr1
 10212                           
 10213                           ;OverLoad_B1.c: 73: } else {
 10214  01AC  29C5               	goto	l7650
 10215  01AD                     l7648:	
 10216                           
 10217                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x32 + Load->TotalLoad) - 0x08;
 10218  01AD  087B               	movf	_Load,w
 10219  01AE  3E06               	addlw	6
 10220  01AF  0086               	movwf	6
 10221  01B0  3002               	movlw	2	; select bank4/5
 10222  01B1  0087               	movwf	7
 10223  01B2  3F40               	moviw [0]fsr1
 10224  01B3  00AD               	movwf	??_Load_Main
 10225  01B4  3F41               	moviw [1]fsr1
 10226  01B5  00AE               	movwf	??_Load_Main+1
 10227  01B6  082D               	movf	??_Load_Main,w
 10228  01B7  3E2A               	addlw	42
 10229  01B8  00AF               	movwf	??_Load_Main+2
 10230  01B9  3000               	movlw	0
 10231  01BA  3D2E               	addwfc	??_Load_Main+1,w
 10232  01BB  00B0               	movwf	??_Load_Main+3
 10233  01BC  087B               	movf	_Load,w
 10234  01BD  3E36               	addlw	54
 10235  01BE  0086               	movwf	6
 10236  01BF  3002               	movlw	2	; select bank4/5
 10237  01C0  0087               	movwf	7
 10238  01C1  082F               	movf	??_Load_Main+2,w
 10239  01C2  3FC0               	movwi [0]fsr1
 10240  01C3  0830               	movf	??_Load_Main+3,w
 10241  01C4  3FC1               	movwi [1]fsr1
 10242  01C5                     l7650:	
 10243                           
 10244                           ;OverLoad_B1.c: 75: }
 10245                           ;OverLoad_B1.c: 76: }
 10246                           ;OverLoad_B1.c: 77: }
 10247                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 10248  01C5  087B               	movf	_Load,w
 10249  01C6  3E36               	addlw	54
 10250  01C7  0086               	movwf	6
 10251  01C8  3002               	movlw	2	; select bank4/5
 10252  01C9  0087               	movwf	7
 10253  01CA  3F40               	moviw [0]fsr1
 10254  01CB  00AD               	movwf	??_Load_Main
 10255  01CC  3F41               	moviw [1]fsr1
 10256  01CD  00AE               	movwf	??_Load_Main+1
 10257  01CE  087B               	movf	_Load,w
 10258  01CF  3E2C               	addlw	44
 10259  01D0  0086               	movwf	6
 10260  01D1  3002               	movlw	2	; select bank4/5
 10261  01D2  0087               	movwf	7
 10262  01D3  3F40               	moviw [0]fsr1
 10263  01D4  00AF               	movwf	??_Load_Main+2
 10264  01D5  3F41               	moviw [1]fsr1
 10265  01D6  00B0               	movwf	??_Load_Main+3
 10266  01D7  082E               	movf	??_Load_Main+1,w
 10267  01D8  0230               	subwf	??_Load_Main+3,w
 10268  01D9  1D03               	skipz
 10269  01DA  29DD               	goto	u6995
 10270  01DB  082D               	movf	??_Load_Main,w
 10271  01DC  022F               	subwf	??_Load_Main+2,w
 10272  01DD                     u6995:	
 10273  01DD  1C03               	skipc
 10274  01DE  29FC               	goto	l7660
 10275                           
 10276                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 10277  01DF  3001               	movlw	1
 10278  01E0  00AD               	movwf	??_Load_Main
 10279  01E1  087B               	movf	_Load,w
 10280  01E2  3E3C               	addlw	60
 10281  01E3  0086               	movwf	6
 10282  01E4  3002               	movlw	2	; select bank4/5
 10283  01E5  0087               	movwf	7
 10284  01E6  082D               	movf	??_Load_Main,w
 10285  01E7  0781               	addwf	1,f
 10286                           
 10287                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 10288  01E8  087B               	movf	_Load,w
 10289  01E9  3E3C               	addlw	60
 10290  01EA  0086               	movwf	6
 10291  01EB  3002               	movlw	2	; select bank4/5
 10292  01EC  0087               	movwf	7
 10293  01ED  3003               	movlw	3
 10294  01EE  0201               	subwf	1,w
 10295  01EF  1C03               	skipc
 10296  01F0  2A85               	goto	l7686
 10297                           
 10298                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 10299  01F1  087B               	movf	_Load,w
 10300  01F2  3E3C               	addlw	60
 10301  01F3  0086               	movwf	6
 10302  01F4  3002               	movlw	2	; select bank4/5
 10303  01F5  0087               	movwf	7
 10304  01F6  0181               	clrf	1
 10305                           
 10306                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 10307  01F7  3001               	movlw	1
 10308  01F8  3190  20F3  3180   	fcall	_setLoad_Exceptions
 10309                           
 10310                           ;OverLoad_B1.c: 92: }
 10311                           ;OverLoad_B1.c: 93: } else {
 10312  01FB  2A85               	goto	l7686
 10313  01FC                     l7660:	
 10314                           
 10315                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 10316  01FC  087B               	movf	_Load,w
 10317  01FD  3E3C               	addlw	60
 10318  01FE  0086               	movwf	6
 10319  01FF  3002               	movlw	2	; select bank4/5
 10320  0200  0087               	movwf	7
 10321  0201  0181               	clrf	1
 10322                           
 10323                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 10324  0202  087B               	movf	_Load,w
 10325  0203  3E42               	addlw	66
 10326  0204  0086               	movwf	6
 10327  0205  3002               	movlw	2	; select bank4/5
 10328  0206  0087               	movwf	7
 10329  0207  300A               	movlw	10
 10330  0208  0201               	subwf	1,w
 10331  0209  1803               	skipnc
 10332  020A  2A15               	goto	l7666
 10333                           
 10334                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 10335  020B  3001               	movlw	1
 10336  020C  0020               	movlb	0	; select bank0
 10337  020D  00AD               	movwf	??_Load_Main
 10338  020E  087B               	movf	_Load,w
 10339  020F  3E42               	addlw	66
 10340  0210  0086               	movwf	6
 10341  0211  3002               	movlw	2	; select bank4/5
 10342  0212  0087               	movwf	7
 10343  0213  082D               	movf	??_Load_Main,w
 10344  0214  0781               	addwf	1,f
 10345  0215                     l7666:	
 10346                           
 10347                           ;OverLoad_B1.c: 97: }
 10348                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 10349  0215  087B               	movf	_Load,w
 10350  0216  3E42               	addlw	66
 10351  0217  0086               	movwf	6
 10352  0218  3002               	movlw	2	; select bank4/5
 10353  0219  0087               	movwf	7
 10354  021A  300A               	movlw	10
 10355  021B  0201               	subwf	1,w
 10356  021C  1C03               	skipc
 10357  021D  2A85               	goto	l7686
 10358                           
 10359                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 10360  021E  087B               	movf	_Load,w
 10361  021F  0086               	movwf	6
 10362  0220  3002               	movlw	2	; select bank4/5
 10363  0221  0087               	movwf	7
 10364  0222  1581               	bsf	1,3
 10365                           
 10366                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 10367  0223  0020               	movlb	0	; select bank0
 10368  0224  01A2               	clrf	setDimmerLights_Clear@command
 10369  0225  0AA2               	incf	setDimmerLights_Clear@command,f
 10370  0226  3001               	movlw	1
 10371  0227  319A  2251  3180   	fcall	_setDimmerLights_Clear
 10372                           
 10373                           ;OverLoad_B1.c: 107: ;;
 10374                           ;OverLoad_B1.c: 113: setDimmerLights_Clear(2, 1);
 10375  022A  0020               	movlb	0	; select bank0
 10376  022B  01A2               	clrf	setDimmerLights_Clear@command
 10377  022C  0AA2               	incf	setDimmerLights_Clear@command,f
 10378  022D  3002               	movlw	2
 10379  022E  319A  2251  3180   	fcall	_setDimmerLights_Clear
 10380                           
 10381                           ;OverLoad_B1.c: 117: ;;
 10382                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 10383  0231  087B               	movf	_Load,w
 10384  0232  3E46               	addlw	70
 10385  0233  0086               	movwf	6
 10386  0234  3002               	movlw	2	; select bank4/5
 10387  0235  0087               	movwf	7
 10388  0236  1C01               	btfss	1,0
 10389  0237  2A4C               	goto	l7678
 10390                           
 10391                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 10392  0238  087B               	movf	_Load,w
 10393  0239  3E46               	addlw	70
 10394  023A  0086               	movwf	6
 10395  023B  3002               	movlw	2	; select bank4/5
 10396  023C  0087               	movwf	7
 10397  023D  1001               	bcf	1,0
 10398                           
 10399                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 10400  023E  087B               	movf	_Load,w
 10401  023F  3E2C               	addlw	44
 10402  0240  0086               	movwf	6
 10403  0241  3002               	movlw	2	; select bank4/5
 10404  0242  0087               	movwf	7
 10405  0243  087B               	movf	_Load,w
 10406  0244  3E06               	addlw	6
 10407  0245  0084               	movwf	4
 10408  0246  3002               	movlw	2	; select bank4/5
 10409  0247  0085               	movwf	5
 10410  0248  3F40               	moviw [0]fsr1
 10411  0249  3F80               	movwi [0]fsr0
 10412  024A  3F41               	moviw [1]fsr1
 10413  024B  3F81               	movwi [1]fsr0
 10414  024C                     l7678:	
 10415                           
 10416                           ;OverLoad_B1.c: 136: }
 10417                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 10418  024C  087B               	movf	_Load,w
 10419  024D  3E46               	addlw	70
 10420  024E  0086               	movwf	6
 10421  024F  3002               	movlw	2	; select bank4/5
 10422  0250  0087               	movwf	7
 10423  0251  1C81               	btfss	1,1
 10424  0252  2A85               	goto	l7686
 10425                           
 10426                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 10427  0253  087B               	movf	_Load,w
 10428  0254  3E46               	addlw	70
 10429  0255  0086               	movwf	6
 10430  0256  3002               	movlw	2	; select bank4/5
 10431  0257  0087               	movwf	7
 10432  0258  1081               	bcf	1,1
 10433                           
 10434                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 10435  0259  087B               	movf	_Load,w
 10436  025A  3E2C               	addlw	44
 10437  025B  0086               	movwf	6
 10438  025C  3002               	movlw	2	; select bank4/5
 10439  025D  0087               	movwf	7
 10440  025E  087B               	movf	_Load,w
 10441  025F  3E06               	addlw	6
 10442  0260  0084               	movwf	4
 10443  0261  3002               	movlw	2	; select bank4/5
 10444  0262  0085               	movwf	5
 10445  0263  3F40               	moviw [0]fsr1
 10446  0264  3F80               	movwi [0]fsr0
 10447  0265  3F41               	moviw [1]fsr1
 10448  0266  3F81               	movwi [1]fsr0
 10449                           
 10450                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x32 * Load->LightsCount;
 10451  0267  087B               	movf	_Load,w
 10452  0268  3E3E               	addlw	62
 10453  0269  0086               	movwf	6
 10454  026A  3002               	movlw	2	; select bank4/5
 10455  026B  0087               	movwf	7
 10456  026C  0801               	movf	1,w
 10457  026D  0020               	movlb	0	; select bank0
 10458  026E  00AD               	movwf	??_Load_Main
 10459  026F  01AE               	clrf	??_Load_Main+1
 10460  0270  082D               	movf	??_Load_Main,w
 10461  0271  00A0               	movwf	___wmul@multiplier
 10462  0272  082E               	movf	??_Load_Main+1,w
 10463  0273  00A1               	movwf	___wmul@multiplier+1
 10464  0274  3032               	movlw	50
 10465  0275  00A2               	movwf	___wmul@multiplicand
 10466  0276  3000               	movlw	0
 10467  0277  00A3               	movwf	___wmul@multiplicand+1
 10468  0278  319C  24C0  3180   	fcall	___wmul
 10469  027B  087B               	movf	_Load,w
 10470  027C  3E36               	addlw	54
 10471  027D  0086               	movwf	6
 10472  027E  3002               	movlw	2	; select bank4/5
 10473  027F  0087               	movwf	7
 10474  0280  0020               	movlb	0	; select bank0
 10475  0281  0820               	movf	?___wmul,w
 10476  0282  3FC0               	movwi [0]fsr1
 10477  0283  0821               	movf	?___wmul+1,w
 10478  0284  3FC1               	movwi [1]fsr1
 10479  0285                     l7686:	
 10480                           
 10481                           ;OverLoad_B1.c: 142: }
 10482                           ;OverLoad_B1.c: 143: }
 10483                           ;OverLoad_B1.c: 144: }
 10484                           ;OverLoad_B1.c: 145: }
 10485                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 10486  0285  319D  2561         	fcall	_setLoad_AH_AL_Restore
 10487                           
 10488                           ;OverLoad_B1.c: 158: }
 10489                           ;OverLoad_B1.c: 159: } else {
 10490  0287  0008               	return
 10491  0288                     l7688:	
 10492                           
 10493                           ;OverLoad_B1.c: 160: if (Load->GO) {
 10494  0288  087B               	movf	_Load,w
 10495  0289  0086               	movwf	6
 10496  028A  3002               	movlw	2	; select bank4/5
 10497  028B  0087               	movwf	7
 10498  028C  1C81               	btfss	1,1
 10499  028D  2AA4               	goto	l7694
 10500                           
 10501                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 10502  028E  087B               	movf	_Load,w
 10503  028F  0086               	movwf	6
 10504  0290  3002               	movlw	2	; select bank4/5
 10505  0291  0087               	movwf	7
 10506  0292  1901               	btfsc	1,2
 10507  0293  2A9E               	goto	l1600
 10508                           
 10509                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 10510  0294  087B               	movf	_Load,w
 10511  0295  0086               	movwf	6
 10512  0296  3002               	movlw	2	; select bank4/5
 10513  0297  0087               	movwf	7
 10514  0298  1501               	bsf	1,2
 10515                           
 10516                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 10517  0299  087B               	movf	_Load,w
 10518  029A  0086               	movwf	6
 10519  029B  3002               	movlw	2	; select bank4/5
 10520  029C  0087               	movwf	7
 10521  029D  1181               	bcf	1,3
 10522  029E                     l1600:	
 10523                           ;OverLoad_B1.c: 164: }
 10524                           ;OverLoad_B1.c: 165: if (1 && 1) {
 10525                           
 10526                           
 10527                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 10528  029E  087B               	movf	_Load,w
 10529  029F  0086               	movwf	6
 10530  02A0  3002               	movlw	2	; select bank4/5
 10531  02A1  0087               	movwf	7
 10532  02A2  1601               	bsf	1,4
 10533                           
 10534                           ;OverLoad_B1.c: 167: }
 10535                           ;OverLoad_B1.c: 168: } else {
 10536  02A3  0008               	return
 10537  02A4                     l7694:	
 10538                           
 10539                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 10540  02A4  087B               	movf	_Load,w
 10541  02A5  0086               	movwf	6
 10542  02A6  3002               	movlw	2	; select bank4/5
 10543  02A7  0087               	movwf	7
 10544  02A8  1D01               	btfss	1,2
 10545  02A9  0008               	return
 10546                           
 10547                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 10548  02AA  087B               	movf	_Load,w
 10549  02AB  0086               	movwf	6
 10550  02AC  3002               	movlw	2	; select bank4/5
 10551  02AD  0087               	movwf	7
 10552  02AE  1101               	bcf	1,2
 10553                           
 10554                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 10555  02AF  087B               	movf	_Load,w
 10556  02B0  0086               	movwf	6
 10557  02B1  3002               	movlw	2	; select bank4/5
 10558  02B2  0087               	movwf	7
 10559  02B3  1581               	bsf	1,3
 10560                           
 10561                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 10562  02B4  087B               	movf	_Load,w
 10563  02B5  3E3C               	addlw	60
 10564  02B6  0086               	movwf	6
 10565  02B7  3002               	movlw	2	; select bank4/5
 10566  02B8  0087               	movwf	7
 10567  02B9  0181               	clrf	1
 10568                           
 10569                           ;OverLoad_B1.c: 173: Load->Count = 0;
 10570  02BA  087B               	movf	_Load,w
 10571  02BB  3E3A               	addlw	58
 10572  02BC  0086               	movwf	6
 10573  02BD  3002               	movlw	2	; select bank4/5
 10574  02BE  0087               	movwf	7
 10575  02BF  0181               	clrf	1
 10576                           
 10577                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 10578  02C0  087B               	movf	_Load,w
 10579  02C1  3E06               	addlw	6
 10580  02C2  0086               	movwf	6
 10581  02C3  3002               	movlw	2	; select bank4/5
 10582  02C4  0087               	movwf	7
 10583  02C5  3000               	movlw	0
 10584  02C6  3FC0               	movwi [0]fsr1
 10585  02C7  3FC1               	movwi [1]fsr1
 10586                           
 10587                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 10588  02C8  087B               	movf	_Load,w
 10589  02C9  3E3F               	addlw	63
 10590  02CA  0086               	movwf	6
 10591  02CB  3002               	movlw	2	; select bank4/5
 10592  02CC  0087               	movwf	7
 10593  02CD  0181               	clrf	1
 10594                           
 10595                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 10596  02CE  087B               	movf	_Load,w
 10597  02CF  3E46               	addlw	70
 10598  02D0  0086               	movwf	6
 10599  02D1  3002               	movlw	2	; select bank4/5
 10600  02D2  0087               	movwf	7
 10601  02D3  1001               	bcf	1,0
 10602                           
 10603                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 10604  02D4  087B               	movf	_Load,w
 10605  02D5  3E46               	addlw	70
 10606  02D6  0086               	movwf	6
 10607  02D7  3002               	movlw	2	; select bank4/5
 10608  02D8  0087               	movwf	7
 10609  02D9  1081               	bcf	1,1
 10610                           
 10611                           ;OverLoad_B1.c: 178: Load->AD = 0;
 10612  02DA  087B               	movf	_Load,w
 10613  02DB  3E2C               	addlw	44
 10614  02DC  0086               	movwf	6
 10615  02DD  3002               	movlw	2	; select bank4/5
 10616  02DE  0087               	movwf	7
 10617  02DF  3000               	movlw	0
 10618  02E0  3FC0               	movwi [0]fsr1
 10619  02E1  3FC1               	movwi [1]fsr1
 10620                           
 10621                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 10622  02E2  319D  2561  3180   	fcall	_setLoad_AH_AL_Restore
 10623                           
 10624                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 10625  02E5  0020               	movlb	0	; select bank0
 10626  02E6  01A2               	clrf	setDimmerLights_Clear@command
 10627  02E7  0AA2               	incf	setDimmerLights_Clear@command,f
 10628  02E8  3001               	movlw	1
 10629  02E9  319A  2251  3180   	fcall	_setDimmerLights_Clear
 10630                           
 10631                           ;OverLoad_B1.c: 187: ;;
 10632                           ;OverLoad_B1.c: 193: setDimmerLights_Clear(2, 1);
 10633  02EC  0020               	movlb	0	; select bank0
 10634  02ED  01A2               	clrf	setDimmerLights_Clear@command
 10635  02EE  0AA2               	incf	setDimmerLights_Clear@command,f
 10636  02EF  3002               	movlw	2
 10637  02F0  319A  2251         	fcall	_setDimmerLights_Clear
 10638                           
 10639                           ;OverLoad_B1.c: 197: ;;
 10640  02F2  0008               	return
 10641  02F3                     __end_of_Load_Main:	
 10642                           
 10643                           	psect	text50
 10644  10F3                     __ptext50:	
 10645 ;; *************** function _setLoad_Exceptions *****************
 10646 ;; Defined at:
 10647 ;;		line 232 in file "../src/OverLoad_B1.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;  command         1    wreg     unsigned char 
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;  command         1   12[BANK0 ] unsigned char 
 10652 ;; Return value:  Size  Location     Type
 10653 ;;		None               void
 10654 ;; Registers used:
 10655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;Total ram usage:        2 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    9
 10668 ;; This function calls:
 10669 ;;		_DimmerLights_Exceptions
 10670 ;;		_setLED
 10671 ;;		_setRF_Enable
 10672 ;;		_setSw_Enable
 10673 ;; This function is called by:
 10674 ;;		_Load_Main
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function _setLoad_Exceptions
 10680  10F3                     _setLoad_Exceptions:	
 10681                           
 10682                           ;incstack = 0
 10683                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10684                           ;setLoad_Exceptions@command stored from wreg
 10685  10F3  0020               	movlb	0	; select bank0
 10686  10F4  00AC               	movwf	setLoad_Exceptions@command
 10687                           
 10688                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 10689  10F5  087B               	movf	_Load,w
 10690  10F6  0086               	movwf	6
 10691  10F7  3002               	movlw	2	; select bank4/5
 10692  10F8  0087               	movwf	7
 10693  10F9  082C               	movf	setLoad_Exceptions@command,w
 10694  10FA  1281               	bcf	1,5
 10695  10FB  1D03               	skipz
 10696  10FC  1681               	bsf	1,5
 10697                           
 10698                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 10699  10FD  092C               	comf	setLoad_Exceptions@command,w
 10700  10FE  3901               	andlw	1
 10701  10FF  00AB               	movwf	??_setLoad_Exceptions
 10702  1100  087B               	movf	_Load,w
 10703  1101  0086               	movwf	6
 10704  1102  3002               	movlw	2	; select bank4/5
 10705  1103  0087               	movwf	7
 10706  1104  0DAB               	rlf	??_setLoad_Exceptions,f
 10707  1105  0DAB               	rlf	??_setLoad_Exceptions,f
 10708  1106  0DAB               	rlf	??_setLoad_Exceptions,f
 10709  1107  0801               	movf	1,w
 10710  1108  062B               	xorwf	??_setLoad_Exceptions,w
 10711  1109  39F7               	andlw	-9
 10712  110A  062B               	xorwf	??_setLoad_Exceptions,w
 10713  110B  0081               	movwf	1
 10714                           
 10715                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 10716  110C  082C               	movf	setLoad_Exceptions@command,w
 10717  110D  00AB               	movwf	??_setLoad_Exceptions
 10718  110E  087B               	movf	_Load,w
 10719  110F  3E05               	addlw	5
 10720  1110  0086               	movwf	6
 10721  1111  3002               	movlw	2	; select bank4/5
 10722  1112  0087               	movwf	7
 10723  1113  082B               	movf	??_setLoad_Exceptions,w
 10724  1114  0081               	movwf	1
 10725                           
 10726                           ;OverLoad_B1.c: 237: if (command) {
 10727  1115  082C               	movf	setLoad_Exceptions@command,w
 10728  1116  1903               	btfsc	3,2
 10729  1117  291C               	goto	l1607
 10730                           
 10731                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 10732  1118  3002               	movlw	2
 10733  1119  3195  2566  3190   	fcall	_DimmerLights_Exceptions
 10734  111C                     l1607:	
 10735                           
 10736                           ;OverLoad_B1.c: 242: }
 10737                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 10738  111C  0020               	movlb	0	; select bank0
 10739  111D  082C               	movf	setLoad_Exceptions@command,w
 10740  111E  3E0A               	addlw	10
 10741  111F  00AB               	movwf	??_setLoad_Exceptions
 10742  1120  082B               	movf	??_setLoad_Exceptions,w
 10743  1121  00A2               	movwf	setLED@command
 10744  1122  3063               	movlw	99
 10745  1123  3193  23E5  3190   	fcall	_setLED
 10746                           
 10747                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 10748  1126  0020               	movlb	0	; select bank0
 10749  1127  092C               	comf	setLoad_Exceptions@command,w
 10750  1128  3901               	andlw	1
 10751  1129  319C  246B  3190   	fcall	_setSw_Enable
 10752                           
 10753                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 10754  112C  0020               	movlb	0	; select bank0
 10755  112D  092C               	comf	setLoad_Exceptions@command,w
 10756  112E  3901               	andlw	1
 10757  112F  00AB               	movwf	??_setLoad_Exceptions
 10758  1130  082B               	movf	??_setLoad_Exceptions,w
 10759  1131  00A2               	movwf	setRF_Enable@command
 10760  1132  3001               	movlw	1
 10761  1133  319E  2648         	fcall	_setRF_Enable
 10762  1135  0008               	return
 10763  1136                     __end_of_setLoad_Exceptions:	
 10764                           
 10765                           	psect	text51
 10766  1C6B                     __ptext51:	
 10767 ;; *************** function _setSw_Enable *****************
 10768 ;; Defined at:
 10769 ;;		line 85 in file "../src/Switch_B1.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  command         1    wreg     unsigned char 
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;  command         1    2[BANK0 ] unsigned char 
 10774 ;; Return value:  Size  Location     Type
 10775 ;;		None               void
 10776 ;; Registers used:
 10777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;Total ram usage:        1 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    6
 10790 ;; This function calls:
 10791 ;;		_SwPointSelect
 10792 ;; This function is called by:
 10793 ;;		_setLoad_Exceptions
 10794 ;;		_my_Main
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _setSw_Enable
 10800  1C6B                     _setSw_Enable:	
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10804                           ;setSw_Enable@command stored from wreg
 10805  1C6B  0020               	movlb	0	; select bank0
 10806  1C6C  00A2               	movwf	setSw_Enable@command
 10807                           
 10808                           ;Switch_B1.c: 88: SwPointSelect(1);
 10809  1C6D  3001               	movlw	1
 10810  1C6E  319A  22D8  319C   	fcall	_SwPointSelect
 10811                           
 10812                           ;Switch_B1.c: 89: Sw->Enable = command;
 10813  1C71  087A               	movf	_Sw,w
 10814  1C72  0086               	movwf	6
 10815  1C73  3001               	movlw	1	; select bank2/3
 10816  1C74  0087               	movwf	7
 10817  1C75  0020               	movlb	0	; select bank0
 10818  1C76  0822               	movf	setSw_Enable@command,w
 10819  1C77  1001               	bcf	1,0
 10820  1C78  1D03               	skipz
 10821  1C79  1401               	bsf	1,0
 10822                           
 10823                           ;Switch_B1.c: 93: SwPointSelect(2);
 10824  1C7A  3002               	movlw	2
 10825  1C7B  319A  22D8         	fcall	_SwPointSelect
 10826                           
 10827                           ;Switch_B1.c: 94: Sw->Enable = command;
 10828  1C7D  087A               	movf	_Sw,w
 10829  1C7E  0086               	movwf	6
 10830  1C7F  3001               	movlw	1	; select bank2/3
 10831  1C80  0087               	movwf	7
 10832  1C81  0020               	movlb	0	; select bank0
 10833  1C82  0822               	movf	setSw_Enable@command,w
 10834  1C83  1001               	bcf	1,0
 10835  1C84  1D03               	skipz
 10836  1C85  1401               	bsf	1,0
 10837  1C86  0008               	return
 10838  1C87                     __end_of_setSw_Enable:	
 10839                           
 10840                           	psect	text52
 10841  1E48                     __ptext52:	
 10842 ;; *************** function _setRF_Enable *****************
 10843 ;; Defined at:
 10844 ;;		line 174 in file "../src/RF_Control_B1.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  rf              1    wreg     unsigned char 
 10847 ;;  command         1    2[BANK0 ] unsigned char 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  rf              1    3[BANK0 ] unsigned char 
 10850 ;; Return value:  Size  Location     Type
 10851 ;;		None               void
 10852 ;; Registers used:
 10853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        2 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    6
 10866 ;; This function calls:
 10867 ;;		_RfPointSelect
 10868 ;;		_setINT_GO
 10869 ;; This function is called by:
 10870 ;;		_setLoad_Exceptions
 10871 ;;		_my_Main
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _setRF_Enable
 10877  1E48                     _setRF_Enable:	
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10881                           ;setRF_Enable@rf stored from wreg
 10882  1E48  0020               	movlb	0	; select bank0
 10883  1E49  00A3               	movwf	setRF_Enable@rf
 10884                           
 10885                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
 10886  1E4A  0823               	movf	setRF_Enable@rf,w
 10887  1E4B  3199  2174  319E   	fcall	_RfPointSelect
 10888                           
 10889                           ;RF_Control_B1.c: 176: RF->Enable = command;
 10890  1E4E  0021               	movlb	1	; select bank1
 10891  1E4F  083E               	movf	_RF^(0+128),w
 10892  1E50  0086               	movwf	6
 10893  1E51  0187               	clrf	7
 10894  1E52  0020               	movlb	0	; select bank0
 10895  1E53  0822               	movf	setRF_Enable@command,w
 10896  1E54  1001               	bcf	1,0
 10897  1E55  1D03               	skipz
 10898  1E56  1401               	bsf	1,0
 10899                           
 10900                           ;RF_Control_B1.c: 177: RF->Learn = 0;
 10901  1E57  0021               	movlb	1	; select bank1
 10902  1E58  083E               	movf	_RF^(0+128),w
 10903  1E59  0086               	movwf	6
 10904  1E5A  0187               	clrf	7
 10905  1E5B  1301               	bcf	1,6
 10906                           
 10907                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
 10908  1E5C  083E               	movf	_RF^(0+128),w
 10909  1E5D  0086               	movwf	6
 10910  1E5E  0187               	clrf	7
 10911  1E5F  1101               	bcf	1,2
 10912                           
 10913                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
 10914  1E60  083E               	movf	_RF^(0+128),w
 10915  1E61  0086               	movwf	6
 10916  1E62  0187               	clrf	7
 10917  1E63  1181               	bcf	1,3
 10918                           
 10919                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
 10920  1E64  083E               	movf	_RF^(0+128),w
 10921  1E65  0086               	movwf	6
 10922  1E66  0187               	clrf	7
 10923  1E67  1081               	bcf	1,1
 10924                           
 10925                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
 10926  1E68  0A3E               	incf	_RF^(0+128),w
 10927  1E69  0086               	movwf	6
 10928  1E6A  0187               	clrf	7
 10929  1E6B  0181               	clrf	1
 10930                           
 10931                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
 10932  1E6C  083E               	movf	_RF^(0+128),w
 10933  1E6D  0086               	movwf	6
 10934  1E6E  0187               	clrf	7
 10935  1E6F  1281               	bcf	1,5
 10936                           
 10937                           ;RF_Control_B1.c: 183: setINT_GO(0);
 10938  1E70  3000               	movlw	0
 10939  1E71  3199  2110         	fcall	_setINT_GO
 10940  1E73  0008               	return
 10941  1E74                     __end_of_setRF_Enable:	
 10942                           
 10943                           	psect	text53
 10944  1910                     __ptext53:	
 10945 ;; *************** function _setINT_GO *****************
 10946 ;; Defined at:
 10947 ;;		line 261 in file "../src/MCU_B1.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  command         1    wreg     unsigned char 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  command         1    0[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        1 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    5
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_setRF_Main
 10972 ;;		_setRF_Enable
 10973 ;;		_RF_RxDisable
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           
 10978                           ;psect for function _setINT_GO
 10979  1910                     _setINT_GO:	
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _setINT_GO: [wreg]
 10983                           ;setINT_GO@command stored from wreg
 10984  1910  0020               	movlb	0	; select bank0
 10985  1911  00A0               	movwf	setINT_GO@command
 10986                           
 10987                           ;MCU_B1.c: 262: INTF = 0;
 10988  1912  108B               	bcf	11,1	;volatile
 10989                           
 10990                           ;MCU_B1.c: 263: INTE = command;
 10991  1913  1C20               	btfss	setINT_GO@command,0
 10992  1914  2917               	goto	u4960
 10993  1915  160B               	bsf	11,4	;volatile
 10994  1916  0008               	return
 10995  1917                     u4960:	
 10996  1917  120B               	bcf	11,4	;volatile
 10997  1918  0008               	return
 10998  1919                     __end_of_setINT_GO:	
 10999                           
 11000                           	psect	text54
 11001  1566                     __ptext54:	
 11002 ;; *************** function _DimmerLights_Exceptions *****************
 11003 ;; Defined at:
 11004 ;;		line 378 in file "../src/Dimmer_B1.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  status          1    wreg     unsigned char 
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;  status          1   10[BANK0 ] unsigned char 
 11009 ;; Return value:  Size  Location     Type
 11010 ;;		None               void
 11011 ;; Registers used:
 11012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;Total ram usage:        1 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    8
 11025 ;; This function calls:
 11026 ;;		_getDimmerLights_StatusFlag
 11027 ;;		_setBuz
 11028 ;;		_setDimmerLights_ERROR
 11029 ;;		_setDimmerLights_TriggerERROR
 11030 ;; This function is called by:
 11031 ;;		_setLoad_Exceptions
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           
 11036                           ;psect for function _DimmerLights_Exceptions
 11037  1566                     _DimmerLights_Exceptions:	
 11038                           
 11039                           ;incstack = 0
 11040                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11041                           ;DimmerLights_Exceptions@status stored from wreg
 11042  1566  0020               	movlb	0	; select bank0
 11043  1567  00AA               	movwf	DimmerLights_Exceptions@status
 11044                           
 11045                           ;Dimmer_B1.c: 379: if (status == 1)
 11046  1568  082A               	movf	DimmerLights_Exceptions@status,w
 11047  1569  3A01               	xorlw	1
 11048  156A  1D03               	skipz
 11049  156B  2D7C               	goto	l6512
 11050                           
 11051                           ;Dimmer_B1.c: 380: {
 11052                           ;Dimmer_B1.c: 381: if (getDimmerLights_StatusFlag()) {
 11053  156C  319C  2400  3195   	fcall	_getDimmerLights_StatusFlag
 11054  156F  3A00               	xorlw	0
 11055  1570  1903               	skipnz
 11056  1571  2D94               	goto	l6518
 11057                           
 11058                           ;Dimmer_B1.c: 382: setBuz(10, 300);
 11059  1572  302C               	movlw	44
 11060  1573  0020               	movlb	0	; select bank0
 11061  1574  00A6               	movwf	setBuz@time
 11062  1575  3001               	movlw	1
 11063  1576  00A7               	movwf	setBuz@time+1
 11064  1577  300A               	movlw	10
 11065  1578  3189  214F  3195   	fcall	_setBuz
 11066  157B  2D94               	goto	l6518
 11067  157C                     l6512:	
 11068                           ;Dimmer_B1.c: 394: } else if (status == 2)
 11069                           
 11070                           ;Dimmer_B1.c: 389: setDimmerLights_ERROR(2);
 11071                           
 11072                           ;Dimmer_B1.c: 383: }
 11073                           ;Dimmer_B1.c: 386: setDimmerLights_ERROR(1);
 11074                           
 11075  157C  0020               	movlb	0	; select bank0
 11076  157D  082A               	movf	DimmerLights_Exceptions@status,w
 11077  157E  3A02               	xorlw	2
 11078  157F  1D03               	skipz
 11079  1580  2D8F               	goto	l6516
 11080                           
 11081                           ;Dimmer_B1.c: 395: {
 11082                           ;Dimmer_B1.c: 396: setBuz(5, 300);
 11083  1581  302C               	movlw	44
 11084  1582  00A6               	movwf	setBuz@time
 11085  1583  3001               	movlw	1
 11086  1584  00A7               	movwf	setBuz@time+1
 11087  1585  3005               	movlw	5
 11088  1586  3189  214F  3195   	fcall	_setBuz
 11089                           
 11090                           ;Dimmer_B1.c: 397: setDimmerLights_ERROR(Dimmer->Load);
 11091  1589  0021               	movlb	1	; select bank1
 11092  158A  0A3A               	incf	_Dimmer^(0+128),w
 11093  158B  0086               	movwf	6
 11094  158C  0187               	clrf	7
 11095  158D  0801               	movf	1,w
 11096  158E  2D99               	goto	L13
 11097  158F                     l6516:	
 11098                           ;Dimmer_B1.c: 398: } else if (status == 3)
 11099                           
 11100  158F  0020               	movlb	0	; select bank0
 11101  1590  082A               	movf	DimmerLights_Exceptions@status,w
 11102  1591  3A03               	xorlw	3
 11103  1592  1D03               	skipz
 11104  1593  2D9C               	goto	l895
 11105  1594                     l6518:	
 11106                           
 11107                           ;Dimmer_B1.c: 399: {
 11108                           ;Dimmer_B1.c: 401: setDimmerLights_ERROR(1);
 11109  1594  3001               	movlw	1
 11110  1595  3192  22D6  3195   	fcall	_setDimmerLights_ERROR
 11111                           
 11112                           ;Dimmer_B1.c: 404: setDimmerLights_ERROR(2);
 11113  1598  3002               	movlw	2
 11114  1599                     L13:	
 11115  1599  3192  22D6  3195   	fcall	_setDimmerLights_ERROR
 11116  159C                     l895:	
 11117                           
 11118                           ;Dimmer_B1.c: 409: }
 11119                           ;Dimmer_B1.c: 412: setDimmerLights_TriggerERROR(1, 0);
 11120  159C  0020               	movlb	0	; select bank0
 11121  159D  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11122  159E  3001               	movlw	1
 11123  159F  319E  261D  3195   	fcall	_setDimmerLights_TriggerERROR
 11124                           
 11125                           ;Dimmer_B1.c: 415: setDimmerLights_TriggerERROR(2, 0);
 11126  15A2  0020               	movlb	0	; select bank0
 11127  15A3  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11128  15A4  3002               	movlw	2
 11129  15A5  319E  261D  3195   	fcall	_setDimmerLights_TriggerERROR
 11130                           
 11131                           ;Dimmer_B1.c: 421: if (myMain->SelfTest == 0) {
 11132  15A8  0021               	movlb	1	; select bank1
 11133  15A9  086A               	movf	_myMain^(0+128),w
 11134  15AA  3E03               	addlw	3
 11135  15AB  0086               	movwf	6
 11136  15AC  3001               	movlw	1	; select bank2/3
 11137  15AD  0087               	movwf	7
 11138  15AE  1801               	btfsc	1,0
 11139  15AF  0008               	return
 11140                           
 11141                           ;Dimmer_B1.c: 422: myMain->i = 0;
 11142  15B0  086A               	movf	_myMain^(0+128),w
 11143  15B1  3E0F               	addlw	15
 11144  15B2  0086               	movwf	6
 11145  15B3  3001               	movlw	1	; select bank2/3
 11146  15B4  0087               	movwf	7
 11147  15B5  1001               	bcf	1,0
 11148                           
 11149                           ;Dimmer_B1.c: 423: myMain->j = 0;
 11150  15B6  086A               	movf	_myMain^(0+128),w
 11151  15B7  3E0F               	addlw	15
 11152  15B8  0086               	movwf	6
 11153  15B9  3001               	movlw	1	; select bank2/3
 11154  15BA  0087               	movwf	7
 11155  15BB  1081               	bcf	1,1
 11156                           
 11157                           ;Dimmer_B1.c: 424: myMain->k = 1;
 11158  15BC  086A               	movf	_myMain^(0+128),w
 11159  15BD  3E0F               	addlw	15
 11160  15BE  0086               	movwf	6
 11161  15BF  3001               	movlw	1	; select bank2/3
 11162  15C0  0087               	movwf	7
 11163  15C1  1501               	bsf	1,2
 11164                           
 11165                           ;Dimmer_B1.c: 425: myMain->Count2 = 0;
 11166  15C2  086A               	movf	_myMain^(0+128),w
 11167  15C3  3E08               	addlw	8
 11168  15C4  0086               	movwf	6
 11169  15C5  3001               	movlw	1	; select bank2/3
 11170  15C6  0087               	movwf	7
 11171  15C7  3000               	movlw	0
 11172  15C8  3FC0               	movwi [0]fsr1
 11173  15C9  3FC1               	movwi [1]fsr1
 11174  15CA  0008               	return
 11175  15CB                     __end_of_DimmerLights_Exceptions:	
 11176                           
 11177                           	psect	text55
 11178  1E1D                     __ptext55:	
 11179 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11180 ;; Defined at:
 11181 ;;		line 447 in file "../src/Dimmer_B1.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;  lights          1    wreg     unsigned char 
 11184 ;;  command         1    2[BANK0 ] unsigned char 
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;  lights          1    3[BANK0 ] unsigned char 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;		None               void
 11189 ;; Registers used:
 11190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11196 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;Total ram usage:        2 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    6
 11203 ;; This function calls:
 11204 ;;		_DimmerLightsPointSelect
 11205 ;; This function is called by:
 11206 ;;		_DimmerLights_Exceptions
 11207 ;; This function uses a non-reentrant model
 11208 ;;
 11209                           
 11210                           
 11211                           ;psect for function _setDimmerLights_TriggerERROR
 11212  1E1D                     _setDimmerLights_TriggerERROR:	
 11213                           
 11214                           ;incstack = 0
 11215                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11216                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11217  1E1D  0020               	movlb	0	; select bank0
 11218  1E1E  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11219                           
 11220                           ;Dimmer_B1.c: 448: DimmerLightsPointSelect(lights);
 11221  1E1F  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11222  1E20  319A  22C5         	fcall	_DimmerLightsPointSelect
 11223                           
 11224                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = command;
 11225  1E22  0878               	movf	_DimmerLights,w
 11226  1E23  3E09               	addlw	9
 11227  1E24  0086               	movwf	6
 11228  1E25  3001               	movlw	1	; select bank2/3
 11229  1E26  0087               	movwf	7
 11230  1E27  0020               	movlb	0	; select bank0
 11231  1E28  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11232  1E29  1081               	bcf	1,1
 11233  1E2A  1D03               	skipz
 11234  1E2B  1481               	bsf	1,1
 11235                           
 11236                           ;Dimmer_B1.c: 450: DimmerLights->Switch = command;
 11237  1E2C  0878               	movf	_DimmerLights,w
 11238  1E2D  3E09               	addlw	9
 11239  1E2E  0086               	movwf	6
 11240  1E2F  3001               	movlw	1	; select bank2/3
 11241  1E30  0087               	movwf	7
 11242  1E31  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11243  1E32  1001               	bcf	1,0
 11244  1E33  1D03               	skipz
 11245  1E34  1401               	bsf	1,0
 11246                           
 11247                           ;Dimmer_B1.c: 451: DimmerLights->TriggerAdj = command;
 11248  1E35  0878               	movf	_DimmerLights,w
 11249  1E36  3E09               	addlw	9
 11250  1E37  0086               	movwf	6
 11251  1E38  3001               	movlw	1	; select bank2/3
 11252  1E39  0087               	movwf	7
 11253  1E3A  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11254  1E3B  1181               	bcf	1,3
 11255  1E3C  1D03               	skipz
 11256  1E3D  1581               	bsf	1,3
 11257                           
 11258                           ;Dimmer_B1.c: 452: DimmerLights->AdjGo = command;
 11259  1E3E  0878               	movf	_DimmerLights,w
 11260  1E3F  3E09               	addlw	9
 11261  1E40  0086               	movwf	6
 11262  1E41  3001               	movlw	1	; select bank2/3
 11263  1E42  0087               	movwf	7
 11264  1E43  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11265  1E44  1101               	bcf	1,2
 11266  1E45  1D03               	skipz
 11267  1E46  1501               	bsf	1,2
 11268  1E47  0008               	return
 11269  1E48                     __end_of_setDimmerLights_TriggerERROR:	
 11270                           
 11271                           	psect	text56
 11272  12D6                     __ptext56:	
 11273 ;; *************** function _setDimmerLights_ERROR *****************
 11274 ;; Defined at:
 11275 ;;		line 430 in file "../src/Dimmer_B1.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  lights          1    wreg     unsigned char 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  lights          1    5[BANK0 ] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;		None               void
 11282 ;; Registers used:
 11283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;Total ram usage:        2 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    7
 11296 ;; This function calls:
 11297 ;;		_DimmerLightsPointSelect
 11298 ;;		_setLED
 11299 ;;		_setLoad_StatusOff
 11300 ;;		_setRFSW_Status
 11301 ;;		_setSw_Status
 11302 ;; This function is called by:
 11303 ;;		_DimmerLights_Exceptions
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _setDimmerLights_ERROR
 11309  12D6                     _setDimmerLights_ERROR:	
 11310                           
 11311                           ;incstack = 0
 11312                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11313                           ;setDimmerLights_ERROR@lights stored from wreg
 11314  12D6  0020               	movlb	0	; select bank0
 11315  12D7  00A5               	movwf	setDimmerLights_ERROR@lights
 11316                           
 11317                           ;Dimmer_B1.c: 431: DimmerLightsPointSelect(lights);
 11318  12D8  0825               	movf	setDimmerLights_ERROR@lights,w
 11319  12D9  319A  22C5  3192   	fcall	_DimmerLightsPointSelect
 11320                           
 11321                           ;Dimmer_B1.c: 432: if (DimmerLights->Status) {
 11322  12DC  0878               	movf	_DimmerLights,w
 11323  12DD  0086               	movwf	6
 11324  12DE  3001               	movlw	1	; select bank2/3
 11325  12DF  0087               	movwf	7
 11326  12E0  1E81               	btfss	1,5
 11327  12E1  0008               	return
 11328                           
 11329                           ;Dimmer_B1.c: 433: DimmerLights->Signal = 0;
 11330  12E2  0878               	movf	_DimmerLights,w
 11331  12E3  0086               	movwf	6
 11332  12E4  3001               	movlw	1	; select bank2/3
 11333  12E5  0087               	movwf	7
 11334  12E6  1081               	bcf	1,1
 11335                           
 11336                           ;Dimmer_B1.c: 434: DimmerLights->AdjFlag = 0;
 11337  12E7  0878               	movf	_DimmerLights,w
 11338  12E8  0086               	movwf	6
 11339  12E9  3001               	movlw	1	; select bank2/3
 11340  12EA  0087               	movwf	7
 11341  12EB  1181               	bcf	1,3
 11342                           
 11343                           ;Dimmer_B1.c: 435: DimmerLights->AdjStatus = 0;
 11344  12EC  0878               	movf	_DimmerLights,w
 11345  12ED  0086               	movwf	6
 11346  12EE  3001               	movlw	1	; select bank2/3
 11347  12EF  0087               	movwf	7
 11348  12F0  1201               	bcf	1,4
 11349                           
 11350                           ;Dimmer_B1.c: 436: DimmerLights->StatusFlag = 0;
 11351  12F1  0878               	movf	_DimmerLights,w
 11352  12F2  0086               	movwf	6
 11353  12F3  3001               	movlw	1	; select bank2/3
 11354  12F4  0087               	movwf	7
 11355  12F5  1301               	bcf	1,6
 11356                           
 11357                           ;Dimmer_B1.c: 437: DimmerLights->DimmingTimeValue = 3;
 11358  12F6  3003               	movlw	3
 11359  12F7  0020               	movlb	0	; select bank0
 11360  12F8  00A4               	movwf	??_setDimmerLights_ERROR
 11361  12F9  0878               	movf	_DimmerLights,w
 11362  12FA  3E02               	addlw	2
 11363  12FB  0086               	movwf	6
 11364  12FC  3001               	movlw	1	; select bank2/3
 11365  12FD  0087               	movwf	7
 11366  12FE  0824               	movf	??_setDimmerLights_ERROR,w
 11367  12FF  0081               	movwf	1
 11368                           
 11369                           ;Dimmer_B1.c: 438: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11370  1300  0878               	movf	_DimmerLights,w
 11371  1301  3E06               	addlw	6
 11372  1302  0086               	movwf	6
 11373  1303  3001               	movlw	1	; select bank2/3
 11374  1304  0087               	movwf	7
 11375  1305  0801               	movf	1,w
 11376  1306  00A4               	movwf	??_setDimmerLights_ERROR
 11377  1307  0878               	movf	_DimmerLights,w
 11378  1308  3E04               	addlw	4
 11379  1309  0086               	movwf	6
 11380  130A  3001               	movlw	1	; select bank2/3
 11381  130B  0087               	movwf	7
 11382  130C  0824               	movf	??_setDimmerLights_ERROR,w
 11383  130D  0081               	movwf	1
 11384                           
 11385                           ;Dimmer_B1.c: 439: Dimmer->Detect = 1;
 11386  130E  0021               	movlb	1	; select bank1
 11387  130F  083A               	movf	_Dimmer^(0+128),w
 11388  1310  0086               	movwf	6
 11389  1311  0187               	clrf	7
 11390  1312  1401               	bsf	1,0
 11391                           
 11392                           ;Dimmer_B1.c: 440: setLoad_StatusOff(lights, 1);
 11393  1313  0020               	movlb	0	; select bank0
 11394  1314  01A0               	clrf	setLoad_StatusOff@command
 11395  1315  0AA0               	incf	setLoad_StatusOff@command,f
 11396  1316  0825               	movf	setDimmerLights_ERROR@lights,w
 11397  1317  319E  26FD  3192   	fcall	_setLoad_StatusOff
 11398                           
 11399                           ;Dimmer_B1.c: 441: setLED(lights, 1);
 11400  131A  0020               	movlb	0	; select bank0
 11401  131B  01A2               	clrf	setLED@command
 11402  131C  0AA2               	incf	setLED@command,f
 11403  131D  0825               	movf	setDimmerLights_ERROR@lights,w
 11404  131E  3193  23E5  3192   	fcall	_setLED
 11405                           
 11406                           ;Dimmer_B1.c: 442: setSw_Status(lights, 0);
 11407  1321  0020               	movlb	0	; select bank0
 11408  1322  01A2               	clrf	setSw_Status@command
 11409  1323  0825               	movf	setDimmerLights_ERROR@lights,w
 11410  1324  3199  21F4  3192   	fcall	_setSw_Status
 11411                           
 11412                           ;Dimmer_B1.c: 443: setRFSW_Status(lights, 0);
 11413  1327  0020               	movlb	0	; select bank0
 11414  1328  01A2               	clrf	setRFSW_Status@command
 11415  1329  0825               	movf	setDimmerLights_ERROR@lights,w
 11416  132A  3199  21E5         	fcall	_setRFSW_Status
 11417  132C  0008               	return
 11418  132D                     __end_of_setDimmerLights_ERROR:	
 11419                           
 11420                           	psect	text57
 11421  1A51                     __ptext57:	
 11422 ;; *************** function _setDimmerLights_Clear *****************
 11423 ;; Defined at:
 11424 ;;		line 573 in file "../src/Dimmer_B1.c"
 11425 ;; Parameters:    Size  Location     Type
 11426 ;;  lights          1    wreg     unsigned char 
 11427 ;;  command         1    2[BANK0 ] unsigned char 
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;  lights          1    3[BANK0 ] unsigned char 
 11430 ;; Return value:  Size  Location     Type
 11431 ;;		None               void
 11432 ;; Registers used:
 11433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11439 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;Total ram usage:        2 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    6
 11446 ;; This function calls:
 11447 ;;		_DimmerLightsPointSelect
 11448 ;; This function is called by:
 11449 ;;		_Load_Main
 11450 ;; This function uses a non-reentrant model
 11451 ;;
 11452                           
 11453                           
 11454                           ;psect for function _setDimmerLights_Clear
 11455  1A51                     _setDimmerLights_Clear:	
 11456                           
 11457                           ;incstack = 0
 11458                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11459                           ;setDimmerLights_Clear@lights stored from wreg
 11460  1A51  0020               	movlb	0	; select bank0
 11461  1A52  00A3               	movwf	setDimmerLights_Clear@lights
 11462                           
 11463                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 11464  1A53  0823               	movf	setDimmerLights_Clear@lights,w
 11465  1A54  319A  22C5         	fcall	_DimmerLightsPointSelect
 11466                           
 11467                           ;Dimmer_B1.c: 575: DimmerLights->Clear = command;
 11468  1A56  0878               	movf	_DimmerLights,w
 11469  1A57  3E0C               	addlw	12
 11470  1A58  0086               	movwf	6
 11471  1A59  3001               	movlw	1	; select bank2/3
 11472  1A5A  0087               	movwf	7
 11473  1A5B  0020               	movlb	0	; select bank0
 11474  1A5C  0822               	movf	setDimmerLights_Clear@command,w
 11475  1A5D  1001               	bcf	1,0
 11476  1A5E  1D03               	skipz
 11477  1A5F  1401               	bsf	1,0
 11478  1A60  0008               	return
 11479  1A61                     __end_of_setDimmerLights_Clear:	
 11480                           
 11481                           	psect	text58
 11482  1FC9                     __ptext58:	
 11483 ;; *************** function ___lwdiv *****************
 11484 ;; Defined at:
 11485 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;  divisor         2    0[BANK0 ] unsigned int 
 11488 ;;  dividend        2    2[BANK0 ] unsigned int 
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;  quotient        2    5[BANK0 ] unsigned int 
 11491 ;;  counter         1    7[BANK0 ] unsigned char 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  2    0[BANK0 ] unsigned int 
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;Total ram usage:        8 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    5
 11508 ;; This function calls:
 11509 ;;		Nothing
 11510 ;; This function is called by:
 11511 ;;		_Load_Main
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function ___lwdiv
 11517  1FC9                     ___lwdiv:	
 11518                           
 11519                           ;incstack = 0
 11520                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11521  1FC9  0020               	movlb	0	; select bank0
 11522  1FCA  01A5               	clrf	___lwdiv@quotient
 11523  1FCB  01A6               	clrf	___lwdiv@quotient+1
 11524  1FCC  0821               	movf	___lwdiv@divisor+1,w
 11525  1FCD  0420               	iorwf	___lwdiv@divisor,w
 11526  1FCE  1903               	skipnz
 11527  1FCF  2FF9               	goto	l7368
 11528  1FD0  01A7               	clrf	___lwdiv@counter
 11529  1FD1  0AA7               	incf	___lwdiv@counter,f
 11530  1FD2                     l7356:	
 11531  1FD2  1BA1               	btfsc	___lwdiv@divisor+1,7
 11532  1FD3  2FDE               	goto	l7358
 11533  1FD4  3001               	movlw	1
 11534  1FD5                     u6505:	
 11535  1FD5  35A0               	lslf	___lwdiv@divisor,f
 11536  1FD6  0DA1               	rlf	___lwdiv@divisor+1,f
 11537  1FD7  0B89               	decfsz	9,f
 11538  1FD8  2FD5               	goto	u6505
 11539  1FD9  3001               	movlw	1
 11540  1FDA  00A4               	movwf	??___lwdiv
 11541  1FDB  0824               	movf	??___lwdiv,w
 11542  1FDC  07A7               	addwf	___lwdiv@counter,f
 11543  1FDD  2FD2               	goto	l7356
 11544  1FDE                     l7358:	
 11545  1FDE  3001               	movlw	1
 11546  1FDF                     u6525:	
 11547  1FDF  35A5               	lslf	___lwdiv@quotient,f
 11548  1FE0  0DA6               	rlf	___lwdiv@quotient+1,f
 11549  1FE1  0B89               	decfsz	9,f
 11550  1FE2  2FDF               	goto	u6525
 11551  1FE3  0821               	movf	___lwdiv@divisor+1,w
 11552  1FE4  0223               	subwf	___lwdiv@dividend+1,w
 11553  1FE5  1D03               	skipz
 11554  1FE6  2FE9               	goto	u6535
 11555  1FE7  0820               	movf	___lwdiv@divisor,w
 11556  1FE8  0222               	subwf	___lwdiv@dividend,w
 11557  1FE9                     u6535:	
 11558  1FE9  1C03               	skipc
 11559  1FEA  2FF0               	goto	l7364
 11560  1FEB  0820               	movf	___lwdiv@divisor,w
 11561  1FEC  02A2               	subwf	___lwdiv@dividend,f
 11562  1FED  0821               	movf	___lwdiv@divisor+1,w
 11563  1FEE  3BA3               	subwfb	___lwdiv@dividend+1,f
 11564  1FEF  1425               	bsf	___lwdiv@quotient,0
 11565  1FF0                     l7364:	
 11566  1FF0  3001               	movlw	1
 11567  1FF1                     u6545:	
 11568  1FF1  36A1               	lsrf	___lwdiv@divisor+1,f
 11569  1FF2  0CA0               	rrf	___lwdiv@divisor,f
 11570  1FF3  0B89               	decfsz	9,f
 11571  1FF4  2FF1               	goto	u6545
 11572  1FF5  3001               	movlw	1
 11573  1FF6  02A7               	subwf	___lwdiv@counter,f
 11574  1FF7  1D03               	btfss	3,2
 11575  1FF8  2FDE               	goto	l7358
 11576  1FF9                     l7368:	
 11577  1FF9  0826               	movf	___lwdiv@quotient+1,w
 11578  1FFA  01A1               	clrf	?___lwdiv+1
 11579  1FFB  07A1               	addwf	?___lwdiv+1,f
 11580  1FFC  0825               	movf	___lwdiv@quotient,w
 11581  1FFD  01A0               	clrf	?___lwdiv
 11582  1FFE  07A0               	addwf	?___lwdiv,f
 11583  1FFF  0008               	return
 11584  2000                     __end_of___lwdiv:	
 11585                           
 11586                           	psect	text59
 11587  19B1                     __ptext59:	
 11588 ;; *************** function _Load_Initialization *****************
 11589 ;; Defined at:
 11590 ;;		line 9 in file "../src/OverLoad_B1.c"
 11591 ;; Parameters:    Size  Location     Type
 11592 ;;		None
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;		None
 11595 ;; Return value:  Size  Location     Type
 11596 ;;		None               void
 11597 ;; Registers used:
 11598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;Total ram usage:        1 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    6
 11611 ;; This function calls:
 11612 ;;		_setLoad_AH_AL_Restore
 11613 ;; This function is called by:
 11614 ;;		_main
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           
 11619                           ;psect for function _Load_Initialization
 11620  19B1                     _Load_Initialization:	
 11621                           
 11622                           ;OverLoad_B1.c: 10: Load = &Load1;
 11623                           
 11624                           ;incstack = 0
 11625                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11626  19B1  30A0               	movlw	_Load1& (0+255)
 11627  19B2  0020               	movlb	0	; select bank0
 11628  19B3  00A2               	movwf	??_Load_Initialization
 11629  19B4  0822               	movf	??_Load_Initialization,w
 11630  19B5  00FB               	movwf	_Load
 11631                           
 11632                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 11633  19B6  087B               	movf	_Load,w
 11634  19B7  0086               	movwf	6
 11635  19B8  3002               	movlw	2	; select bank4/5
 11636  19B9  0087               	movwf	7
 11637  19BA  1581               	bsf	1,3
 11638                           
 11639                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 11640  19BB  319D  2561         	fcall	_setLoad_AH_AL_Restore
 11641  19BD  0008               	return
 11642  19BE                     __end_of_Load_Initialization:	
 11643                           
 11644                           	psect	text60
 11645  1D61                     __ptext60:	
 11646 ;; *************** function _setLoad_AH_AL_Restore *****************
 11647 ;; Defined at:
 11648 ;;		line 307 in file "../src/OverLoad_B1.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  i               1    1[BANK0 ] unsigned char 
 11653 ;; Return value:  Size  Location     Type
 11654 ;;		None               void
 11655 ;; Registers used:
 11656 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;Total ram usage:        2 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    5
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_Load_Initialization
 11673 ;;		_Load_Main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function _setLoad_AH_AL_Restore
 11679  1D61                     _setLoad_AH_AL_Restore:	
 11680                           
 11681                           ;OverLoad_B1.c: 308: char i;
 11682                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 11683                           
 11684                           ;incstack = 0
 11685                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11686  1D61  0020               	movlb	0	; select bank0
 11687  1D62  01A1               	clrf	setLoad_AH_AL_Restore@i
 11688  1D63                     L14:	
 11689  1D63  3005               	movlw	5
 11690  1D64  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11691  1D65  1803               	btfsc	3,0
 11692  1D66  0008               	return
 11693                           
 11694                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 11695  1D67  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11696  1D68  3E08               	addlw	8
 11697  1D69  077B               	addwf	_Load,w
 11698  1D6A  00A0               	movwf	??_setLoad_AH_AL_Restore
 11699  1D6B  0820               	movf	??_setLoad_AH_AL_Restore,w
 11700  1D6C  0086               	movwf	6
 11701  1D6D  3002               	movlw	2	; select bank4/5
 11702  1D6E  0087               	movwf	7
 11703  1D6F  3000               	movlw	0
 11704  1D70  3FC0               	movwi [0]fsr1
 11705  1D71  3FC1               	movwi [1]fsr1
 11706                           
 11707                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 11708  1D72  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11709  1D73  3E1A               	addlw	26
 11710  1D74  077B               	addwf	_Load,w
 11711  1D75  00A0               	movwf	??_setLoad_AH_AL_Restore
 11712  1D76  0820               	movf	??_setLoad_AH_AL_Restore,w
 11713  1D77  0086               	movwf	6
 11714  1D78  3002               	movlw	2	; select bank4/5
 11715  1D79  0087               	movwf	7
 11716  1D7A  30FF               	movlw	255
 11717  1D7B  3FC0               	movwi [0]fsr1
 11718  1D7C  30FF               	movlw	255
 11719  1D7D  3FC1               	movwi [1]fsr1
 11720  1D7E  3001               	movlw	1
 11721  1D7F  00A0               	movwf	??_setLoad_AH_AL_Restore
 11722  1D80  0820               	movf	??_setLoad_AH_AL_Restore,w
 11723  1D81  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11724  1D82  2D63               	goto	L14
 11725  1D83                     __end_of_setLoad_AH_AL_Restore:	
 11726                           
 11727                           	psect	text61
 11728  1998                     __ptext61:	
 11729 ;; *************** function _LED_Main *****************
 11730 ;; Defined at:
 11731 ;;		line 51 in file "../src/LED_B1.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;		None               void
 11738 ;; Registers used:
 11739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;Total ram usage:        0 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    7
 11752 ;; This function calls:
 11753 ;;		_setLED_Main
 11754 ;; This function is called by:
 11755 ;;		_main
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           
 11760                           ;psect for function _LED_Main
 11761  1998                     _LED_Main:	
 11762                           
 11763                           ;LED_B1.c: 54: setLED_Main(1);
 11764                           
 11765                           ;incstack = 0
 11766                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11767  1998  3001               	movlw	1
 11768  1999  3190  2031  3199   	fcall	_setLED_Main
 11769                           
 11770                           ;LED_B1.c: 57: setLED_Main(2);
 11771  199C  3002               	movlw	2
 11772  199D  3190  2031  3199   	fcall	_setLED_Main
 11773                           
 11774                           ;LED_B1.c: 63: setLED_Main(99);
 11775  19A0  3063               	movlw	99
 11776  19A1  3190  2031         	fcall	_setLED_Main
 11777  19A3  0008               	return
 11778  19A4                     __end_of_LED_Main:	
 11779                           
 11780                           	psect	text62
 11781  1031                     __ptext62:	
 11782 ;; *************** function _setLED_Main *****************
 11783 ;; Defined at:
 11784 ;;		line 214 in file "../src/LED_B1.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;  led             1    wreg     unsigned char 
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;  led             1    4[BANK0 ] unsigned char 
 11789 ;; Return value:  Size  Location     Type
 11790 ;;		None               void
 11791 ;; Registers used:
 11792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;Total ram usage:        3 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    6
 11805 ;; This function calls:
 11806 ;;		_LedPointSelect
 11807 ;; This function is called by:
 11808 ;;		_LED_Main
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           
 11813                           ;psect for function _setLED_Main
 11814  1031                     _setLED_Main:	
 11815                           
 11816                           ;incstack = 0
 11817                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11818                           ;setLED_Main@led stored from wreg
 11819  1031  0020               	movlb	0	; select bank0
 11820  1032  00A4               	movwf	setLED_Main@led
 11821                           
 11822                           ;LED_B1.c: 216: LedPointSelect(led);
 11823  1033  0824               	movf	setLED_Main@led,w
 11824  1034  319D  253F  3190   	fcall	_LedPointSelect
 11825                           
 11826                           ;LED_B1.c: 217: if(LED->GO)
 11827  1037  0021               	movlb	1	; select bank1
 11828  1038  083D               	movf	_LED^(0+128),w
 11829  1039  0086               	movwf	6
 11830  103A  0187               	clrf	7
 11831  103B  1C81               	btfss	1,1
 11832  103C  0008               	return
 11833                           
 11834                           ;LED_B1.c: 218: {
 11835                           ;LED_B1.c: 219: LED->Time++;
 11836  103D  0A3D               	incf	_LED^(0+128),w
 11837  103E  0086               	movwf	6
 11838  103F  0187               	clrf	7
 11839  1040  3001               	movlw	1
 11840  1041  0781               	addwf	1,f
 11841  1042  3141               	addfsr 1,1
 11842  1043  1803               	skipnc
 11843  1044  0A81               	incf	1,f
 11844                           
 11845                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 11846  1045  0A3D               	incf	_LED^(0+128),w
 11847  1046  0086               	movwf	6
 11848  1047  0187               	clrf	7
 11849  1048  3F40               	moviw [0]fsr1
 11850  1049  0020               	movlb	0	; select bank0
 11851  104A  00A2               	movwf	??_setLED_Main
 11852  104B  3F41               	moviw [1]fsr1
 11853  104C  00A3               	movwf	??_setLED_Main+1
 11854  104D  3000               	movlw	0
 11855  104E  0223               	subwf	??_setLED_Main+1,w
 11856  104F  3032               	movlw	50
 11857  1050  1903               	skipnz
 11858  1051  0222               	subwf	??_setLED_Main,w
 11859  1052  1C03               	skipc
 11860  1053  0008               	return
 11861                           
 11862                           ;LED_B1.c: 221: {
 11863                           ;LED_B1.c: 222: LED->Time=0;
 11864  1054  0021               	movlb	1	; select bank1
 11865  1055  0A3D               	incf	_LED^(0+128),w
 11866  1056  0086               	movwf	6
 11867  1057  0187               	clrf	7
 11868  1058  3000               	movlw	0
 11869  1059  3FC0               	movwi [0]fsr1
 11870  105A  3FC1               	movwi [1]fsr1
 11871                           
 11872                           ;LED_B1.c: 224: if(led == 1)
 11873  105B  0020               	movlb	0	; select bank0
 11874  105C  0824               	movf	setLED_Main@led,w
 11875  105D  3A01               	xorlw	1
 11876  105E  1D03               	skipz
 11877  105F  2863               	goto	l7052
 11878                           
 11879                           ;LED_B1.c: 225: {
 11880                           ;LED_B1.c: 226: RA3=~RA3;
 11881  1060  3008               	movlw	8
 11882  1061  068C               	xorwf	12,f
 11883                           
 11884                           ;LED_B1.c: 227: }
 11885  1062  0008               	return
 11886  1063                     l7052:	
 11887                           
 11888                           ;LED_B1.c: 230: else if(led == 2)
 11889  1063  0824               	movf	setLED_Main@led,w
 11890  1064  3A02               	xorlw	2
 11891  1065  1D03               	skipz
 11892  1066  286A               	goto	l7056
 11893                           
 11894                           ;LED_B1.c: 231: {
 11895                           ;LED_B1.c: 232: RC7=~RC7;
 11896  1067  3080               	movlw	128
 11897  1068  068E               	xorwf	14,f
 11898                           
 11899                           ;LED_B1.c: 233: }
 11900  1069  0008               	return
 11901  106A                     l7056:	
 11902                           
 11903                           ;LED_B1.c: 242: else if(led == 99)
 11904  106A  0824               	movf	setLED_Main@led,w
 11905  106B  3A63               	xorlw	99
 11906  106C  1D03               	skipz
 11907  106D  0008               	return
 11908                           
 11909                           ;LED_B1.c: 243: {
 11910                           ;LED_B1.c: 244: RB5=~RB5;
 11911  106E  3020               	movlw	32
 11912  106F  068D               	xorwf	13,f
 11913  1070  0008               	return
 11914  1071                     __end_of_setLED_Main:	
 11915                           
 11916                           	psect	text63
 11917  198C                     __ptext63:	
 11918 ;; *************** function _LED_Initialization *****************
 11919 ;; Defined at:
 11920 ;;		line 35 in file "../src/LED_B1.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;		None
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;		None
 11925 ;; Return value:  Size  Location     Type
 11926 ;;		None               void
 11927 ;; Registers used:
 11928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:        0 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    8
 11941 ;; This function calls:
 11942 ;;		_setLED_Initialization
 11943 ;; This function is called by:
 11944 ;;		_main
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _LED_Initialization
 11950  198C                     _LED_Initialization:	
 11951                           
 11952                           ;LED_B1.c: 38: setLED_Initialization(1);
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11956  198C  3001               	movlw	1
 11957  198D  319A  22A2  3199   	fcall	_setLED_Initialization
 11958                           
 11959                           ;LED_B1.c: 41: setLED_Initialization(2);
 11960  1990  3002               	movlw	2
 11961  1991  319A  22A2  3199   	fcall	_setLED_Initialization
 11962                           
 11963                           ;LED_B1.c: 47: setLED_Initialization(99);
 11964  1994  3063               	movlw	99
 11965  1995  319A  22A2         	fcall	_setLED_Initialization
 11966  1997  0008               	return
 11967  1998                     __end_of_LED_Initialization:	
 11968                           
 11969                           	psect	text64
 11970  1AA2                     __ptext64:	
 11971 ;; *************** function _setLED_Initialization *****************
 11972 ;; Defined at:
 11973 ;;		line 67 in file "../src/LED_B1.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  led             1    wreg     unsigned char 
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  led             1    4[BANK0 ] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;		None               void
 11980 ;; Registers used:
 11981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        1 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    7
 11994 ;; This function calls:
 11995 ;;		_LedPointSelect
 11996 ;;		_setLED
 11997 ;; This function is called by:
 11998 ;;		_LED_Initialization
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _setLED_Initialization
 12004  1AA2                     _setLED_Initialization:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12008                           ;setLED_Initialization@led stored from wreg
 12009  1AA2  0020               	movlb	0	; select bank0
 12010  1AA3  00A4               	movwf	setLED_Initialization@led
 12011                           
 12012                           ;LED_B1.c: 69: LedPointSelect(led);
 12013  1AA4  0824               	movf	setLED_Initialization@led,w
 12014  1AA5  319D  253F  319A   	fcall	_LedPointSelect
 12015                           
 12016                           ;LED_B1.c: 70: LED->Enable=1;
 12017  1AA8  0021               	movlb	1	; select bank1
 12018  1AA9  083D               	movf	_LED^(0+128),w
 12019  1AAA  0086               	movwf	6
 12020  1AAB  0187               	clrf	7
 12021  1AAC  1401               	bsf	1,0
 12022                           
 12023                           ;LED_B1.c: 71: setLED(led,0);
 12024  1AAD  0020               	movlb	0	; select bank0
 12025  1AAE  01A2               	clrf	setLED@command
 12026  1AAF  0824               	movf	setLED_Initialization@led,w
 12027  1AB0  3193  23E5         	fcall	_setLED
 12028  1AB2  0008               	return
 12029  1AB3                     __end_of_setLED_Initialization:	
 12030                           
 12031                           	psect	text65
 12032  11BE                     __ptext65:	
 12033 ;; *************** function _Flash_Memory_Main *****************
 12034 ;; Defined at:
 12035 ;;		line 796 in file "../src/MCU_B1.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;		None
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;		None
 12040 ;; Return value:  Size  Location     Type
 12041 ;;		None               void
 12042 ;; Registers used:
 12043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 0/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;Total ram usage:        0 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    8
 12056 ;; This function calls:
 12057 ;;		_Flash_Memory_Modify
 12058 ;; This function is called by:
 12059 ;;		_main
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           
 12064                           ;psect for function _Flash_Memory_Main
 12065  11BE                     _Flash_Memory_Main:	
 12066                           
 12067                           ;MCU_B1.c: 797: if (Memory->GO) {
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12071  11BE  0021               	movlb	1	; select bank1
 12072  11BF  0867               	movf	_Memory^(0+128),w
 12073  11C0  3E22               	addlw	34
 12074  11C1  0086               	movwf	6
 12075  11C2  3002               	movlw	2	; select bank4/5
 12076  11C3  0087               	movwf	7
 12077  11C4  1C81               	btfss	1,1
 12078  11C5  0008               	return
 12079                           
 12080                           ;MCU_B1.c: 798: if (Memory->Modify) {
 12081  11C6  0867               	movf	_Memory^(0+128),w
 12082  11C7  3E22               	addlw	34
 12083  11C8  0086               	movwf	6
 12084  11C9  3002               	movlw	2	; select bank4/5
 12085  11CA  0087               	movwf	7
 12086  11CB  1C01               	btfss	1,0
 12087  11CC  29FB               	goto	l7542
 12088                           
 12089                           ;MCU_B1.c: 799: Memory->Time++;
 12090  11CD  0867               	movf	_Memory^(0+128),w
 12091  11CE  3E23               	addlw	35
 12092  11CF  0086               	movwf	6
 12093  11D0  3002               	movlw	2	; select bank4/5
 12094  11D1  0087               	movwf	7
 12095  11D2  3001               	movlw	1
 12096  11D3  0781               	addwf	1,f
 12097  11D4  3141               	addfsr 1,1
 12098  11D5  1803               	skipnc
 12099  11D6  0A81               	incf	1,f
 12100                           
 12101                           ;MCU_B1.c: 800: if (Memory->Time == 25)
 12102  11D7  0867               	movf	_Memory^(0+128),w
 12103  11D8  3E23               	addlw	35
 12104  11D9  0086               	movwf	6
 12105  11DA  3002               	movlw	2	; select bank4/5
 12106  11DB  0087               	movwf	7
 12107  11DC  3F40               	moviw [0]fsr1
 12108  11DD  3A19               	xorlw	25
 12109  11DE  1D03               	skipz
 12110  11DF  29E2               	goto	u6775
 12111  11E0  3F41               	moviw [1]fsr1
 12112  11E1  3A00               	xorlw	0
 12113  11E2                     u6775:	
 12114  11E2  1D03               	skipz
 12115  11E3  0008               	return
 12116                           
 12117                           ;MCU_B1.c: 801: {
 12118                           ;MCU_B1.c: 802: Memory->Time = 0;
 12119  11E4  0867               	movf	_Memory^(0+128),w
 12120  11E5  3E23               	addlw	35
 12121  11E6  0086               	movwf	6
 12122  11E7  3002               	movlw	2	; select bank4/5
 12123  11E8  0087               	movwf	7
 12124  11E9  3000               	movlw	0
 12125  11EA  3FC0               	movwi [0]fsr1
 12126  11EB  3FC1               	movwi [1]fsr1
 12127                           
 12128                           ;MCU_B1.c: 803: Memory->Modify = 0;
 12129  11EC  0867               	movf	_Memory^(0+128),w
 12130  11ED  3E22               	addlw	34
 12131  11EE  0086               	movwf	6
 12132  11EF  3002               	movlw	2	; select bank4/5
 12133  11F0  0087               	movwf	7
 12134  11F1  1001               	bcf	1,0
 12135                           
 12136                           ;MCU_B1.c: 804: Memory->GO = 0;
 12137  11F2  0867               	movf	_Memory^(0+128),w
 12138  11F3  3E22               	addlw	34
 12139  11F4  0086               	movwf	6
 12140  11F5  3002               	movlw	2	; select bank4/5
 12141  11F6  0087               	movwf	7
 12142  11F7  1081               	bcf	1,1
 12143                           
 12144                           ;MCU_B1.c: 805: Flash_Memory_Modify();
 12145  11F8  3196  2636         	fcall	_Flash_Memory_Modify
 12146                           
 12147                           ;MCU_B1.c: 807: }
 12148                           ;MCU_B1.c: 808: } else {
 12149  11FA  0008               	return
 12150  11FB                     l7542:	
 12151                           
 12152                           ;MCU_B1.c: 809: Memory->GO = 0;
 12153  11FB  0021               	movlb	1	; select bank1
 12154  11FC  0867               	movf	_Memory^(0+128),w
 12155  11FD  3E22               	addlw	34
 12156  11FE  0086               	movwf	6
 12157  11FF  3002               	movlw	2	; select bank4/5
 12158  1200  0087               	movwf	7
 12159  1201  1081               	bcf	1,1
 12160  1202  0008               	return
 12161  1203                     __end_of_Flash_Memory_Main:	
 12162                           
 12163                           	psect	text66
 12164  1636                     __ptext66:	
 12165 ;; *************** function _Flash_Memory_Modify *****************
 12166 ;; Defined at:
 12167 ;;		line 866 in file "../src/MCU_B1.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;  i               1    6[BANK0 ] unsigned char 
 12172 ;; Return value:  Size  Location     Type
 12173 ;;		None               void
 12174 ;; Registers used:
 12175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12176 ;; Tracked objects:
 12177 ;;		On entry : 0/0
 12178 ;;		On exit  : 0/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;Total ram usage:        3 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; Hardware stack levels required when called:    7
 12188 ;; This function calls:
 12189 ;;		_Flash_Memory_Erasing
 12190 ;;		_Flash_Memory_Read
 12191 ;;		_Flash_Memory_Write
 12192 ;; This function is called by:
 12193 ;;		_Flash_Memory_Main
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197                           
 12198                           ;psect for function _Flash_Memory_Modify
 12199  1636                     _Flash_Memory_Modify:	
 12200                           
 12201                           ;MCU_B1.c: 867: char i;
 12202                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
 12203                           
 12204                           ;incstack = 0
 12205                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12206  1636  0020               	movlb	0	; select bank0
 12207  1637  01A6               	clrf	Flash_Memory_Modify@i
 12208  1638  3020               	movlw	32
 12209  1639  0226               	subwf	Flash_Memory_Modify@i,w
 12210  163A  1803               	btfsc	3,0
 12211  163B  2E55               	goto	l7144
 12212  163C                     l7138:	
 12213                           
 12214                           ;MCU_B1.c: 869: Memory->Data[i] = Flash_Memory_Read(i);
 12215  163C  0826               	movf	Flash_Memory_Modify@i,w
 12216  163D  319B  23CE  3196   	fcall	_Flash_Memory_Read
 12217  1640  0020               	movlb	0	; select bank0
 12218  1641  00A4               	movwf	??_Flash_Memory_Modify
 12219  1642  0826               	movf	Flash_Memory_Modify@i,w
 12220  1643  0021               	movlb	1	; select bank1
 12221  1644  0767               	addwf	_Memory^(0+128),w
 12222  1645  0020               	movlb	0	; select bank0
 12223  1646  00A5               	movwf	??_Flash_Memory_Modify+1
 12224  1647  0825               	movf	??_Flash_Memory_Modify+1,w
 12225  1648  0086               	movwf	6
 12226  1649  3002               	movlw	2	; select bank4/5
 12227  164A  0087               	movwf	7
 12228  164B  0824               	movf	??_Flash_Memory_Modify,w
 12229  164C  0081               	movwf	1
 12230  164D  3001               	movlw	1
 12231  164E  00A4               	movwf	??_Flash_Memory_Modify
 12232  164F  0824               	movf	??_Flash_Memory_Modify,w
 12233  1650  07A6               	addwf	Flash_Memory_Modify@i,f
 12234  1651  3020               	movlw	32
 12235  1652  0226               	subwf	Flash_Memory_Modify@i,w
 12236  1653  1C03               	skipc
 12237  1654  2E3C               	goto	l7138
 12238  1655                     l7144:	
 12239                           
 12240                           ;MCU_B1.c: 870: }
 12241                           ;MCU_B1.c: 871: Memory->Data[0]=product->Data[12];
 12242  1655  087D               	movf	_product,w
 12243  1656  3E0C               	addlw	12
 12244  1657  0086               	movwf	6
 12245  1658  3001               	movlw	1	; select bank2/3
 12246  1659  0087               	movwf	7
 12247  165A  0801               	movf	1,w
 12248  165B  00A4               	movwf	??_Flash_Memory_Modify
 12249  165C  0021               	movlb	1	; select bank1
 12250  165D  0867               	movf	_Memory^(0+128),w
 12251  165E  0086               	movwf	6
 12252  165F  3002               	movlw	2	; select bank4/5
 12253  1660  0087               	movwf	7
 12254  1661  0020               	movlb	0	; select bank0
 12255  1662  0824               	movf	??_Flash_Memory_Modify,w
 12256  1663  0081               	movwf	1
 12257                           
 12258                           ;MCU_B1.c: 872: Memory->Data[1]=product->Data[13];
 12259  1664  087D               	movf	_product,w
 12260  1665  3E0D               	addlw	13
 12261  1666  0086               	movwf	6
 12262  1667  3001               	movlw	1	; select bank2/3
 12263  1668  0087               	movwf	7
 12264  1669  0801               	movf	1,w
 12265  166A  00A4               	movwf	??_Flash_Memory_Modify
 12266  166B  0021               	movlb	1	; select bank1
 12267  166C  0A67               	incf	_Memory^(0+128),w
 12268  166D  0086               	movwf	6
 12269  166E  3002               	movlw	2	; select bank4/5
 12270  166F  0087               	movwf	7
 12271  1670  0020               	movlb	0	; select bank0
 12272  1671  0824               	movf	??_Flash_Memory_Modify,w
 12273  1672  0081               	movwf	1
 12274                           
 12275                           ;MCU_B1.c: 873: Memory->Data[2]=product->Data[14];
 12276  1673  087D               	movf	_product,w
 12277  1674  3E0E               	addlw	14
 12278  1675  0086               	movwf	6
 12279  1676  3001               	movlw	1	; select bank2/3
 12280  1677  0087               	movwf	7
 12281  1678  0801               	movf	1,w
 12282  1679  00A4               	movwf	??_Flash_Memory_Modify
 12283  167A  0021               	movlb	1	; select bank1
 12284  167B  0867               	movf	_Memory^(0+128),w
 12285  167C  3E02               	addlw	2
 12286  167D  0086               	movwf	6
 12287  167E  3002               	movlw	2	; select bank4/5
 12288  167F  0087               	movwf	7
 12289  1680  0020               	movlb	0	; select bank0
 12290  1681  0824               	movf	??_Flash_Memory_Modify,w
 12291  1682  0081               	movwf	1
 12292                           
 12293                           ;MCU_B1.c: 879: if (Memory->LoopSave) {
 12294  1683  0021               	movlb	1	; select bank1
 12295  1684  0867               	movf	_Memory^(0+128),w
 12296  1685  3E22               	addlw	34
 12297  1686  0086               	movwf	6
 12298  1687  3002               	movlw	2	; select bank4/5
 12299  1688  0087               	movwf	7
 12300  1689  1D01               	btfss	1,2
 12301  168A  2E9C               	goto	l7148
 12302                           
 12303                           ;MCU_B1.c: 880: Memory->LoopSave = 0;
 12304  168B  0867               	movf	_Memory^(0+128),w
 12305  168C  3E22               	addlw	34
 12306  168D  0086               	movwf	6
 12307  168E  3002               	movlw	2	; select bank4/5
 12308  168F  0087               	movwf	7
 12309  1690  1101               	bcf	1,2
 12310                           
 12311                           ;MCU_B1.c: 881: myMain->FirstOpen = 0;
 12312  1691  086A               	movf	_myMain^(0+128),w
 12313  1692  0086               	movwf	6
 12314  1693  3001               	movlw	1	; select bank2/3
 12315  1694  0087               	movwf	7
 12316  1695  1281               	bcf	1,5
 12317                           
 12318                           ;MCU_B1.c: 882: myMain->First = 0;
 12319  1696  086A               	movf	_myMain^(0+128),w
 12320  1697  3E03               	addlw	3
 12321  1698  0086               	movwf	6
 12322  1699  3001               	movlw	1	; select bank2/3
 12323  169A  0087               	movwf	7
 12324  169B  1081               	bcf	1,1
 12325  169C                     l7148:	
 12326                           
 12327                           ;MCU_B1.c: 884: }
 12328                           ;MCU_B1.c: 885: GIE = 0;
 12329  169C  138B               	bcf	11,7	;volatile
 12330                           
 12331                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
 12332  169D  3199  2180  3196   	fcall	_Flash_Memory_Erasing
 12333                           
 12334                           ;MCU_B1.c: 887: Flash_Memory_Write();
 12335  16A0  3190  2000         	fcall	_Flash_Memory_Write
 12336                           
 12337                           ;MCU_B1.c: 888: GIE = 1;
 12338  16A2  178B               	bsf	11,7	;volatile
 12339  16A3  0008               	return
 12340  16A4                     __end_of_Flash_Memory_Modify:	
 12341                           
 12342                           	psect	text67
 12343  1980                     __ptext67:	
 12344 ;; *************** function _Flash_Memory_Erasing *****************
 12345 ;; Defined at:
 12346 ;;		line 855 in file "../src/MCU_B1.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;		None
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;		None
 12351 ;; Return value:  Size  Location     Type
 12352 ;;		None               void
 12353 ;; Registers used:
 12354 ;;		wreg, status,2, status,0, pclath, cstack
 12355 ;; Tracked objects:
 12356 ;;		On entry : 0/0
 12357 ;;		On exit  : 0/0
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;Total ram usage:        0 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    6
 12367 ;; This function calls:
 12368 ;;		_Flash_Memory_Unlock
 12369 ;; This function is called by:
 12370 ;;		_Flash_Memory_Modify
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           
 12375                           ;psect for function _Flash_Memory_Erasing
 12376  1980                     _Flash_Memory_Erasing:	
 12377                           
 12378                           ;MCU_B1.c: 856: CFGS = 0;
 12379                           
 12380                           ;incstack = 0
 12381                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12382  1980  0023               	movlb	3	; select bank3
 12383  1981  1315               	bcf	21,6	;volatile
 12384                           
 12385                           ;MCU_B1.c: 857: PMADRH = 0x30;
 12386  1982  3030               	movlw	48
 12387  1983  0092               	movwf	18	;volatile
 12388                           
 12389                           ;MCU_B1.c: 858: PMADRL = 0x00;
 12390  1984  0191               	clrf	17	;volatile
 12391                           
 12392                           ;MCU_B1.c: 859: FREE = 1;
 12393  1985  1615               	bsf	21,4	;volatile
 12394                           
 12395                           ;MCU_B1.c: 860: WREN = 1;
 12396  1986  1515               	bsf	21,2	;volatile
 12397                           
 12398                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 12399  1987  3199  2107         	fcall	_Flash_Memory_Unlock
 12400                           
 12401                           ;MCU_B1.c: 862: WREN = 0;
 12402  1989  0023               	movlb	3	; select bank3
 12403  198A  1115               	bcf	21,2	;volatile
 12404  198B  0008               	return
 12405  198C                     __end_of_Flash_Memory_Erasing:	
 12406                           
 12407                           	psect	text68
 12408  05E2                     __ptext68:	
 12409 ;; *************** function _Flash_Memory_Initialization *****************
 12410 ;; Defined at:
 12411 ;;		line 755 in file "../src/MCU_B1.c"
 12412 ;; Parameters:    Size  Location     Type
 12413 ;;		None
 12414 ;; Auto vars:     Size  Location     Type
 12415 ;;  i               1   62[BANK0 ] unsigned char 
 12416 ;; Return value:  Size  Location     Type
 12417 ;;		None               void
 12418 ;; Registers used:
 12419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12420 ;; Tracked objects:
 12421 ;;		On entry : 0/0
 12422 ;;		On exit  : 0/0
 12423 ;;		Unchanged: 0/0
 12424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12429 ;;Total ram usage:        2 bytes
 12430 ;; Hardware stack levels used:    1
 12431 ;; Hardware stack levels required when called:    8
 12432 ;; This function calls:
 12433 ;;		_Flash_Memory_Read
 12434 ;;		_Flash_Memory_Write
 12435 ;;		_setPercentValue
 12436 ;; This function is called by:
 12437 ;;		_main
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           
 12442                           ;psect for function _Flash_Memory_Initialization
 12443  05E2                     _Flash_Memory_Initialization:	
 12444                           
 12445                           ;MCU_B1.c: 756: char i;
 12446                           ;MCU_B1.c: 757: if (Flash_Memory_Read(31) == 0xaa) {
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12450  05E2  301F               	movlw	31
 12451  05E3  319B  23CE  3185   	fcall	_Flash_Memory_Read
 12452  05E6  3AAA               	xorlw	170
 12453  05E7  1D03               	skipz
 12454  05E8  2E5B               	goto	l7498
 12455                           
 12456                           ;MCU_B1.c: 758: product->Data[12] = Flash_Memory_Read(0);
 12457  05E9  3000               	movlw	0
 12458  05EA  319B  23CE  3185   	fcall	_Flash_Memory_Read
 12459  05ED  0020               	movlb	0	; select bank0
 12460  05EE  00DD               	movwf	??_Flash_Memory_Initialization
 12461  05EF  087D               	movf	_product,w
 12462  05F0  3E0C               	addlw	12
 12463  05F1  0086               	movwf	6
 12464  05F2  3001               	movlw	1	; select bank2/3
 12465  05F3  0087               	movwf	7
 12466  05F4  085D               	movf	??_Flash_Memory_Initialization,w
 12467  05F5  0081               	movwf	1
 12468                           
 12469                           ;MCU_B1.c: 759: product->Data[13] = Flash_Memory_Read(1);
 12470  05F6  3001               	movlw	1
 12471  05F7  319B  23CE  3185   	fcall	_Flash_Memory_Read
 12472  05FA  0020               	movlb	0	; select bank0
 12473  05FB  00DD               	movwf	??_Flash_Memory_Initialization
 12474  05FC  087D               	movf	_product,w
 12475  05FD  3E0D               	addlw	13
 12476  05FE  0086               	movwf	6
 12477  05FF  3001               	movlw	1	; select bank2/3
 12478  0600  0087               	movwf	7
 12479  0601  085D               	movf	??_Flash_Memory_Initialization,w
 12480  0602  0081               	movwf	1
 12481                           
 12482                           ;MCU_B1.c: 760: product->Data[14] = Flash_Memory_Read(2);
 12483  0603  3002               	movlw	2
 12484  0604  319B  23CE  3185   	fcall	_Flash_Memory_Read
 12485  0607  0020               	movlb	0	; select bank0
 12486  0608  00DD               	movwf	??_Flash_Memory_Initialization
 12487  0609  087D               	movf	_product,w
 12488  060A  3E0E               	addlw	14
 12489  060B  0086               	movwf	6
 12490  060C  3001               	movlw	1	; select bank2/3
 12491  060D  0087               	movwf	7
 12492  060E  085D               	movf	??_Flash_Memory_Initialization,w
 12493  060F  0081               	movwf	1
 12494                           
 12495                           ;MCU_B1.c: 766: i = setPercentValue(((char)(65*1.5)));
 12496  0610  3061               	movlw	97
 12497  0611  3192  2248  3185   	fcall	_setPercentValue
 12498  0614  0020               	movlb	0	; select bank0
 12499  0615  00DD               	movwf	??_Flash_Memory_Initialization
 12500  0616  085D               	movf	??_Flash_Memory_Initialization,w
 12501  0617  00DE               	movwf	Flash_Memory_Initialization@i
 12502                           
 12503                           ;MCU_B1.c: 767: product->Data[21] = i;
 12504  0618  085E               	movf	Flash_Memory_Initialization@i,w
 12505  0619  00DD               	movwf	??_Flash_Memory_Initialization
 12506  061A  087D               	movf	_product,w
 12507  061B  3E15               	addlw	21
 12508  061C  0086               	movwf	6
 12509  061D  3001               	movlw	1	; select bank2/3
 12510  061E  0087               	movwf	7
 12511  061F  085D               	movf	??_Flash_Memory_Initialization,w
 12512  0620  0081               	movwf	1
 12513                           
 12514                           ;MCU_B1.c: 768: product->Data[22] = i;
 12515  0621  085E               	movf	Flash_Memory_Initialization@i,w
 12516  0622  00DD               	movwf	??_Flash_Memory_Initialization
 12517  0623  087D               	movf	_product,w
 12518  0624  3E16               	addlw	22
 12519  0625  0086               	movwf	6
 12520  0626  3001               	movlw	1	; select bank2/3
 12521  0627  0087               	movwf	7
 12522  0628  085D               	movf	??_Flash_Memory_Initialization,w
 12523  0629  0081               	movwf	1
 12524                           
 12525                           ;MCU_B1.c: 769: product->Data[23] = i;
 12526  062A  085E               	movf	Flash_Memory_Initialization@i,w
 12527  062B  00DD               	movwf	??_Flash_Memory_Initialization
 12528  062C  087D               	movf	_product,w
 12529  062D  3E17               	addlw	23
 12530  062E  0086               	movwf	6
 12531  062F  3001               	movlw	1	; select bank2/3
 12532  0630  0087               	movwf	7
 12533  0631  085D               	movf	??_Flash_Memory_Initialization,w
 12534  0632  0081               	movwf	1
 12535                           
 12536                           ;MCU_B1.c: 771: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12537  0633  087D               	movf	_product,w
 12538  0634  3E0C               	addlw	12
 12539  0635  0086               	movwf	6
 12540  0636  3001               	movlw	1	; select bank2/3
 12541  0637  0087               	movwf	7
 12542  0638  0801               	movf	1,w
 12543  0639  3AFF               	xorlw	255
 12544  063A  1D03               	skipz
 12545  063B  0008               	return
 12546  063C  087D               	movf	_product,w
 12547  063D  3E0D               	addlw	13
 12548  063E  0086               	movwf	6
 12549  063F  3001               	movlw	1	; select bank2/3
 12550  0640  0087               	movwf	7
 12551  0641  0801               	movf	1,w
 12552  0642  3AFF               	xorlw	255
 12553  0643  1D03               	skipz
 12554  0644  0008               	return
 12555  0645  087D               	movf	_product,w
 12556  0646  3E0E               	addlw	14
 12557  0647  0086               	movwf	6
 12558  0648  3001               	movlw	1	; select bank2/3
 12559  0649  0087               	movwf	7
 12560  064A  0801               	movf	1,w
 12561  064B  3AFF               	xorlw	255
 12562  064C  1D03               	skipz
 12563  064D  0008               	return
 12564                           
 12565                           ;MCU_B1.c: 772: myMain->FirstOpen = 1;
 12566  064E  0021               	movlb	1	; select bank1
 12567  064F  086A               	movf	_myMain^(0+128),w
 12568  0650  0086               	movwf	6
 12569  0651  3001               	movlw	1	; select bank2/3
 12570  0652  0087               	movwf	7
 12571  0653  1681               	bsf	1,5
 12572                           
 12573                           ;MCU_B1.c: 773: myMain->First = 1;
 12574  0654  086A               	movf	_myMain^(0+128),w
 12575  0655  3E03               	addlw	3
 12576  0656  0086               	movwf	6
 12577  0657  3001               	movlw	1	; select bank2/3
 12578  0658  0087               	movwf	7
 12579  0659  1481               	bsf	1,1
 12580                           
 12581                           ;MCU_B1.c: 774: }
 12582                           ;MCU_B1.c: 775: } else {
 12583  065A  0008               	return
 12584  065B                     l7498:	
 12585                           
 12586                           ;MCU_B1.c: 776: i = setPercentValue(((char)(65*1.5)));
 12587  065B  3061               	movlw	97
 12588  065C  3192  2248  3185   	fcall	_setPercentValue
 12589  065F  0020               	movlb	0	; select bank0
 12590  0660  00DD               	movwf	??_Flash_Memory_Initialization
 12591  0661  085D               	movf	??_Flash_Memory_Initialization,w
 12592  0662  00DE               	movwf	Flash_Memory_Initialization@i
 12593                           
 12594                           ;MCU_B1.c: 777: Memory->Data[0]=0xff;
 12595  0663  30FF               	movlw	255
 12596  0664  00DD               	movwf	??_Flash_Memory_Initialization
 12597  0665  0021               	movlb	1	; select bank1
 12598  0666  0867               	movf	_Memory^(0+128),w
 12599  0667  0086               	movwf	6
 12600  0668  3002               	movlw	2	; select bank4/5
 12601  0669  0087               	movwf	7
 12602  066A  0020               	movlb	0	; select bank0
 12603  066B  085D               	movf	??_Flash_Memory_Initialization,w
 12604  066C  0081               	movwf	1
 12605                           
 12606                           ;MCU_B1.c: 778: Memory->Data[1]=0xff;
 12607  066D  30FF               	movlw	255
 12608  066E  00DD               	movwf	??_Flash_Memory_Initialization
 12609  066F  0021               	movlb	1	; select bank1
 12610  0670  0A67               	incf	_Memory^(0+128),w
 12611  0671  0086               	movwf	6
 12612  0672  3002               	movlw	2	; select bank4/5
 12613  0673  0087               	movwf	7
 12614  0674  0020               	movlb	0	; select bank0
 12615  0675  085D               	movf	??_Flash_Memory_Initialization,w
 12616  0676  0081               	movwf	1
 12617                           
 12618                           ;MCU_B1.c: 779: Memory->Data[2]=0xff;
 12619  0677  30FF               	movlw	255
 12620  0678  00DD               	movwf	??_Flash_Memory_Initialization
 12621  0679  0021               	movlb	1	; select bank1
 12622  067A  0867               	movf	_Memory^(0+128),w
 12623  067B  3E02               	addlw	2
 12624  067C  0086               	movwf	6
 12625  067D  3002               	movlw	2	; select bank4/5
 12626  067E  0087               	movwf	7
 12627  067F  0020               	movlb	0	; select bank0
 12628  0680  085D               	movf	??_Flash_Memory_Initialization,w
 12629  0681  0081               	movwf	1
 12630                           
 12631                           ;MCU_B1.c: 780: Memory->Data[3]=0xff;
 12632  0682  30FF               	movlw	255
 12633  0683  00DD               	movwf	??_Flash_Memory_Initialization
 12634  0684  0021               	movlb	1	; select bank1
 12635  0685  0867               	movf	_Memory^(0+128),w
 12636  0686  3E03               	addlw	3
 12637  0687  0086               	movwf	6
 12638  0688  3002               	movlw	2	; select bank4/5
 12639  0689  0087               	movwf	7
 12640  068A  0020               	movlb	0	; select bank0
 12641  068B  085D               	movf	??_Flash_Memory_Initialization,w
 12642  068C  0081               	movwf	1
 12643                           
 12644                           ;MCU_B1.c: 781: Memory->Data[4]=0xff;
 12645  068D  30FF               	movlw	255
 12646  068E  00DD               	movwf	??_Flash_Memory_Initialization
 12647  068F  0021               	movlb	1	; select bank1
 12648  0690  0867               	movf	_Memory^(0+128),w
 12649  0691  3E04               	addlw	4
 12650  0692  0086               	movwf	6
 12651  0693  3002               	movlw	2	; select bank4/5
 12652  0694  0087               	movwf	7
 12653  0695  0020               	movlb	0	; select bank0
 12654  0696  085D               	movf	??_Flash_Memory_Initialization,w
 12655  0697  0081               	movwf	1
 12656                           
 12657                           ;MCU_B1.c: 782: Memory->Data[5]=0xff;
 12658  0698  30FF               	movlw	255
 12659  0699  00DD               	movwf	??_Flash_Memory_Initialization
 12660  069A  0021               	movlb	1	; select bank1
 12661  069B  0867               	movf	_Memory^(0+128),w
 12662  069C  3E05               	addlw	5
 12663  069D  0086               	movwf	6
 12664  069E  3002               	movlw	2	; select bank4/5
 12665  069F  0087               	movwf	7
 12666  06A0  0020               	movlb	0	; select bank0
 12667  06A1  085D               	movf	??_Flash_Memory_Initialization,w
 12668  06A2  0081               	movwf	1
 12669                           
 12670                           ;MCU_B1.c: 783: Memory->Data[31]=0xaa;
 12671  06A3  30AA               	movlw	170
 12672  06A4  00DD               	movwf	??_Flash_Memory_Initialization
 12673  06A5  0021               	movlb	1	; select bank1
 12674  06A6  0867               	movf	_Memory^(0+128),w
 12675  06A7  3E1F               	addlw	31
 12676  06A8  0086               	movwf	6
 12677  06A9  3002               	movlw	2	; select bank4/5
 12678  06AA  0087               	movwf	7
 12679  06AB  0020               	movlb	0	; select bank0
 12680  06AC  085D               	movf	??_Flash_Memory_Initialization,w
 12681  06AD  0081               	movwf	1
 12682                           
 12683                           ;MCU_B1.c: 784: product->Data[21] = i;
 12684  06AE  085E               	movf	Flash_Memory_Initialization@i,w
 12685  06AF  00DD               	movwf	??_Flash_Memory_Initialization
 12686  06B0  087D               	movf	_product,w
 12687  06B1  3E15               	addlw	21
 12688  06B2  0086               	movwf	6
 12689  06B3  3001               	movlw	1	; select bank2/3
 12690  06B4  0087               	movwf	7
 12691  06B5  085D               	movf	??_Flash_Memory_Initialization,w
 12692  06B6  0081               	movwf	1
 12693                           
 12694                           ;MCU_B1.c: 785: product->Data[22] = i;
 12695  06B7  085E               	movf	Flash_Memory_Initialization@i,w
 12696  06B8  00DD               	movwf	??_Flash_Memory_Initialization
 12697  06B9  087D               	movf	_product,w
 12698  06BA  3E16               	addlw	22
 12699  06BB  0086               	movwf	6
 12700  06BC  3001               	movlw	1	; select bank2/3
 12701  06BD  0087               	movwf	7
 12702  06BE  085D               	movf	??_Flash_Memory_Initialization,w
 12703  06BF  0081               	movwf	1
 12704                           
 12705                           ;MCU_B1.c: 786: product->Data[23] = i;
 12706  06C0  085E               	movf	Flash_Memory_Initialization@i,w
 12707  06C1  00DD               	movwf	??_Flash_Memory_Initialization
 12708  06C2  087D               	movf	_product,w
 12709  06C3  3E17               	addlw	23
 12710  06C4  0086               	movwf	6
 12711  06C5  3001               	movlw	1	; select bank2/3
 12712  06C6  0087               	movwf	7
 12713  06C7  085D               	movf	??_Flash_Memory_Initialization,w
 12714  06C8  0081               	movwf	1
 12715                           
 12716                           ;MCU_B1.c: 787: GIE = 0;
 12717  06C9  138B               	bcf	11,7	;volatile
 12718                           
 12719                           ;MCU_B1.c: 788: Flash_Memory_Write();
 12720  06CA  3190  2000         	fcall	_Flash_Memory_Write
 12721                           
 12722                           ;MCU_B1.c: 789: GIE = 1;
 12723  06CC  178B               	bsf	11,7	;volatile
 12724                           
 12725                           ;MCU_B1.c: 790: myMain->FirstOpen = 1;
 12726  06CD  0021               	movlb	1	; select bank1
 12727  06CE  086A               	movf	_myMain^(0+128),w
 12728  06CF  0086               	movwf	6
 12729  06D0  3001               	movlw	1	; select bank2/3
 12730  06D1  0087               	movwf	7
 12731  06D2  1681               	bsf	1,5
 12732                           
 12733                           ;MCU_B1.c: 791: myMain->First = 1;
 12734  06D3  086A               	movf	_myMain^(0+128),w
 12735  06D4  3E03               	addlw	3
 12736  06D5  0086               	movwf	6
 12737  06D6  3001               	movlw	1	; select bank2/3
 12738  06D7  0087               	movwf	7
 12739  06D8  1481               	bsf	1,1
 12740  06D9  0008               	return
 12741  06DA                     __end_of_Flash_Memory_Initialization:	
 12742                           
 12743                           	psect	text69
 12744  1000                     __ptext69:	
 12745 ;; *************** function _Flash_Memory_Write *****************
 12746 ;; Defined at:
 12747 ;;		line 836 in file "../src/MCU_B1.c"
 12748 ;; Parameters:    Size  Location     Type
 12749 ;;		None
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;  i               1    1[BANK0 ] unsigned char 
 12752 ;; Return value:  Size  Location     Type
 12753 ;;		None               void
 12754 ;; Registers used:
 12755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12756 ;; Tracked objects:
 12757 ;;		On entry : 0/0
 12758 ;;		On exit  : 0/0
 12759 ;;		Unchanged: 0/0
 12760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;Total ram usage:        2 bytes
 12766 ;; Hardware stack levels used:    1
 12767 ;; Hardware stack levels required when called:    6
 12768 ;; This function calls:
 12769 ;;		_Flash_Memory_Unlock
 12770 ;; This function is called by:
 12771 ;;		_Flash_Memory_Initialization
 12772 ;;		_Flash_Memory_Modify
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           
 12777                           ;psect for function _Flash_Memory_Write
 12778  1000                     _Flash_Memory_Write:	
 12779                           
 12780                           ;MCU_B1.c: 837: char i;
 12781                           ;MCU_B1.c: 838: CFGS = 0;
 12782                           
 12783                           ;incstack = 0
 12784                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12785  1000  0023               	movlb	3	; select bank3
 12786  1001  1315               	bcf	21,6	;volatile
 12787                           
 12788                           ;MCU_B1.c: 839: PMADRH = 0x30;
 12789  1002  3030               	movlw	48
 12790  1003  0092               	movwf	18	;volatile
 12791                           
 12792                           ;MCU_B1.c: 840: PMDATH = 0;
 12793  1004  0194               	clrf	20	;volatile
 12794                           
 12795                           ;MCU_B1.c: 841: FREE = 0;
 12796  1005  1215               	bcf	21,4	;volatile
 12797                           
 12798                           ;MCU_B1.c: 842: LWLO = 1;
 12799  1006  1695               	bsf	21,5	;volatile
 12800                           
 12801                           ;MCU_B1.c: 843: WREN = 1;
 12802  1007  1515               	bsf	21,2	;volatile
 12803                           
 12804                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 12805  1008  0020               	movlb	0	; select bank0
 12806  1009  01A1               	clrf	Flash_Memory_Write@i
 12807  100A  3020               	movlw	32
 12808  100B  0221               	subwf	Flash_Memory_Write@i,w
 12809  100C  1803               	btfsc	3,0
 12810  100D  282A               	goto	l1423
 12811  100E                     l6558:	
 12812                           
 12813                           ;MCU_B1.c: 845: PMADRL = i;
 12814  100E  0821               	movf	Flash_Memory_Write@i,w
 12815  100F  0023               	movlb	3	; select bank3
 12816  1010  0091               	movwf	17	;volatile
 12817                           
 12818                           ;MCU_B1.c: 846: PMDATL = Memory->Data[i];
 12819  1011  0020               	movlb	0	; select bank0
 12820  1012  0821               	movf	Flash_Memory_Write@i,w
 12821  1013  0021               	movlb	1	; select bank1
 12822  1014  0767               	addwf	_Memory^(0+128),w
 12823  1015  0020               	movlb	0	; select bank0
 12824  1016  00A0               	movwf	??_Flash_Memory_Write
 12825  1017  0820               	movf	??_Flash_Memory_Write,w
 12826  1018  0086               	movwf	6
 12827  1019  3002               	movlw	2	; select bank4/5
 12828  101A  0087               	movwf	7
 12829  101B  0801               	movf	1,w
 12830  101C  0023               	movlb	3	; select bank3
 12831  101D  0093               	movwf	19	;volatile
 12832                           
 12833                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 12834  101E  3199  2107  3190   	fcall	_Flash_Memory_Unlock
 12835  1021  3001               	movlw	1
 12836  1022  0020               	movlb	0	; select bank0
 12837  1023  00A0               	movwf	??_Flash_Memory_Write
 12838  1024  0820               	movf	??_Flash_Memory_Write,w
 12839  1025  07A1               	addwf	Flash_Memory_Write@i,f
 12840  1026  3020               	movlw	32
 12841  1027  0221               	subwf	Flash_Memory_Write@i,w
 12842  1028  1C03               	skipc
 12843  1029  280E               	goto	l6558
 12844  102A                     l1423:	
 12845                           
 12846                           ;MCU_B1.c: 848: }
 12847                           ;MCU_B1.c: 849: LWLO = 0;
 12848  102A  0023               	movlb	3	; select bank3
 12849  102B  1295               	bcf	21,5	;volatile
 12850                           
 12851                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 12852  102C  3199  2107         	fcall	_Flash_Memory_Unlock
 12853                           
 12854                           ;MCU_B1.c: 851: WREN = 0;
 12855  102E  0023               	movlb	3	; select bank3
 12856  102F  1115               	bcf	21,2	;volatile
 12857  1030  0008               	return
 12858  1031                     __end_of_Flash_Memory_Write:	
 12859                           
 12860                           	psect	text70
 12861  1907                     __ptext70:	
 12862 ;; *************** function _Flash_Memory_Unlock *****************
 12863 ;; Defined at:
 12864 ;;		line 815 in file "../src/MCU_B1.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;		None
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;		None
 12869 ;; Return value:  Size  Location     Type
 12870 ;;		None               void
 12871 ;; Registers used:
 12872 ;;		wreg
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;Total ram usage:        0 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    5
 12885 ;; This function calls:
 12886 ;;		Nothing
 12887 ;; This function is called by:
 12888 ;;		_Flash_Memory_Write
 12889 ;;		_Flash_Memory_Erasing
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           
 12894                           ;psect for function _Flash_Memory_Unlock
 12895  1907                     _Flash_Memory_Unlock:	
 12896                           
 12897                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 12898                           
 12899                           ;incstack = 0
 12900                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12901  1907  3055               	movlw	85
 12902  1908  0023               	movlb	3	; select bank3
 12903  1909  0096               	movwf	22	;volatile
 12904                           
 12905                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 12906  190A  30AA               	movlw	170
 12907  190B  0096               	movwf	22	;volatile
 12908                           
 12909                           ;MCU_B1.c: 818: WR = 1;
 12910  190C  1495               	bsf	21,1	;volatile
 12911                           
 12912                           ;MCU_B1.c: 819: __nop();
 12913  190D  0000               	nop
 12914                           
 12915                           ;MCU_B1.c: 820: __nop();
 12916  190E  0000               	nop
 12917  190F  0008               	return
 12918  1910                     __end_of_Flash_Memory_Unlock:	
 12919                           
 12920                           	psect	text71
 12921  1BCE                     __ptext71:	
 12922 ;; *************** function _Flash_Memory_Read *****************
 12923 ;; Defined at:
 12924 ;;		line 824 in file "../src/MCU_B1.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;  address         1    wreg     unsigned char 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  address         1    2[BANK0 ] unsigned char 
 12929 ;;  ret             1    3[BANK0 ] unsigned char 
 12930 ;;  i               1    1[BANK0 ] unsigned char 
 12931 ;; Return value:  Size  Location     Type
 12932 ;;                  1    wreg      unsigned char 
 12933 ;; Registers used:
 12934 ;;		wreg, status,2
 12935 ;; Tracked objects:
 12936 ;;		On entry : 0/0
 12937 ;;		On exit  : 0/0
 12938 ;;		Unchanged: 0/0
 12939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;Total ram usage:        4 bytes
 12945 ;; Hardware stack levels used:    1
 12946 ;; Hardware stack levels required when called:    5
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_Flash_Memory_Initialization
 12951 ;;		_Flash_Memory_Modify
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           
 12956                           ;psect for function _Flash_Memory_Read
 12957  1BCE                     _Flash_Memory_Read:	
 12958                           
 12959                           ;incstack = 0
 12960                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12961                           ;Flash_Memory_Read@address stored from wreg
 12962  1BCE  0020               	movlb	0	; select bank0
 12963  1BCF  00A2               	movwf	Flash_Memory_Read@address
 12964                           
 12965                           ;MCU_B1.c: 825: char i, ret = 0;
 12966  1BD0  01A3               	clrf	Flash_Memory_Read@ret
 12967                           
 12968                           ;MCU_B1.c: 826: PMADRH = 0x30;
 12969  1BD1  3030               	movlw	48
 12970  1BD2  0023               	movlb	3	; select bank3
 12971  1BD3  0092               	movwf	18	;volatile
 12972                           
 12973                           ;MCU_B1.c: 827: PMADRL = address;
 12974  1BD4  0020               	movlb	0	; select bank0
 12975  1BD5  0822               	movf	Flash_Memory_Read@address,w
 12976  1BD6  0023               	movlb	3	; select bank3
 12977  1BD7  0091               	movwf	17	;volatile
 12978                           
 12979                           ;MCU_B1.c: 828: CFGS = 0;
 12980  1BD8  1315               	bcf	21,6	;volatile
 12981                           
 12982                           ;MCU_B1.c: 829: RD = 1;
 12983  1BD9  1415               	bsf	21,0	;volatile
 12984                           
 12985                           ;MCU_B1.c: 830: i = PMDATH;
 12986  1BDA  0814               	movf	20,w	;volatile
 12987  1BDB  0020               	movlb	0	; select bank0
 12988  1BDC  00A0               	movwf	??_Flash_Memory_Read
 12989  1BDD  0820               	movf	??_Flash_Memory_Read,w
 12990  1BDE  00A1               	movwf	Flash_Memory_Read@i
 12991                           
 12992                           ;MCU_B1.c: 831: ret = PMDATL;
 12993  1BDF  0023               	movlb	3	; select bank3
 12994  1BE0  0813               	movf	19,w	;volatile
 12995  1BE1  0020               	movlb	0	; select bank0
 12996  1BE2  00A0               	movwf	??_Flash_Memory_Read
 12997  1BE3  0820               	movf	??_Flash_Memory_Read,w
 12998  1BE4  00A3               	movwf	Flash_Memory_Read@ret
 12999                           
 13000                           ;MCU_B1.c: 832: return ret;
 13001  1BE5  0823               	movf	Flash_Memory_Read@ret,w
 13002  1BE6  0008               	return
 13003  1BE7                     __end_of_Flash_Memory_Read:	
 13004                           
 13005                           	psect	text72
 13006  1945                     __ptext72:	
 13007 ;; *************** function _DimmerLights_Main *****************
 13008 ;; Defined at:
 13009 ;;		line 266 in file "../src/Dimmer_B1.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;		None
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;		None
 13014 ;; Return value:  Size  Location     Type
 13015 ;;		None               void
 13016 ;; Registers used:
 13017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        0 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; Hardware stack levels required when called:   11
 13030 ;; This function calls:
 13031 ;;		_DimmerLights_Close
 13032 ;;		_setDimmerLights_Main
 13033 ;; This function is called by:
 13034 ;;		_main
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function _DimmerLights_Main
 13040  1945                     _DimmerLights_Main:	
 13041                           
 13042                           ;Dimmer_B1.c: 268: setDimmerLights_Main(1);
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13046  1945  3001               	movlw	1
 13047  1946  3189  21D8  3199   	fcall	_setDimmerLights_Main
 13048                           
 13049                           ;Dimmer_B1.c: 272: setDimmerLights_Main(2);
 13050  1949  3002               	movlw	2
 13051  194A  3189  21D8  3199   	fcall	_setDimmerLights_Main
 13052                           
 13053                           ;Dimmer_B1.c: 279: DimmerLights_Close();
 13054  194D  319C  241A         	fcall	_DimmerLights_Close
 13055  194F  0008               	return
 13056  1950                     __end_of_DimmerLights_Main:	
 13057                           
 13058                           	psect	text73
 13059  09D8                     __ptext73:	
 13060 ;; *************** function _setDimmerLights_Main *****************
 13061 ;; Defined at:
 13062 ;;		line 283 in file "../src/Dimmer_B1.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;  lights          1    wreg     unsigned char 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;  lights          1   70[BANK0 ] unsigned char 
 13067 ;;  clear           1   69[BANK0 ] unsigned char 
 13068 ;; Return value:  Size  Location     Type
 13069 ;;		None               void
 13070 ;; Registers used:
 13071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;Total ram usage:        2 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:   10
 13084 ;; This function calls:
 13085 ;;		_DimmerLightsPointSelect
 13086 ;;		_setBuz
 13087 ;;		_setDimmerLights
 13088 ;;		_setDimmerLights_Adj
 13089 ;; This function is called by:
 13090 ;;		_DimmerLights_Main
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           
 13095                           ;psect for function _setDimmerLights_Main
 13096  09D8                     _setDimmerLights_Main:	
 13097                           
 13098                           ;incstack = 0
 13099                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13100                           ;setDimmerLights_Main@lights stored from wreg
 13101  09D8  0020               	movlb	0	; select bank0
 13102  09D9  00E6               	movwf	setDimmerLights_Main@lights
 13103                           
 13104                           ;Dimmer_B1.c: 284: char clear = 1;
 13105  09DA  01E5               	clrf	setDimmerLights_Main@clear
 13106  09DB  0AE5               	incf	setDimmerLights_Main@clear,f
 13107                           
 13108                           ;Dimmer_B1.c: 285: DimmerLightsPointSelect(lights);
 13109  09DC  0866               	movf	setDimmerLights_Main@lights,w
 13110  09DD  319A  22C5  3189   	fcall	_DimmerLightsPointSelect
 13111                           
 13112                           ;Dimmer_B1.c: 298: if (lights == 1) {
 13113  09E0  0020               	movlb	0	; select bank0
 13114  09E1  0866               	movf	setDimmerLights_Main@lights,w
 13115  09E2  3A01               	xorlw	1
 13116  09E3  1D03               	skipz
 13117  09E4  29E8               	goto	l6992
 13118                           
 13119                           ;Dimmer_B1.c: 299: clear = (!DimmerLights22->Clear) ? 0 : 1;
 13120  09E5  0021               	movlb	1	; select bank1
 13121  09E6  083C               	movf	_DimmerLights22^(0+128),w
 13122  09E7  29EE               	goto	L15
 13123  09E8                     l6992:	
 13124                           ;Dimmer_B1.c: 300: } else if (lights == 2) {
 13125                           
 13126  09E8  0866               	movf	setDimmerLights_Main@lights,w
 13127  09E9  3A02               	xorlw	2
 13128  09EA  1D03               	skipz
 13129  09EB  29F7               	goto	l6996
 13130                           
 13131                           ;Dimmer_B1.c: 301: clear = (!DimmerLights11->Clear) ? 0 : 1;
 13132  09EC  0021               	movlb	1	; select bank1
 13133  09ED  083B               	movf	_DimmerLights11^(0+128),w
 13134  09EE                     L15:	
 13135  09EE  3E0C               	addlw	12
 13136  09EF  0086               	movwf	6
 13137  09F0  3001               	movlw	1	; select bank2/3
 13138  09F1  0087               	movwf	7
 13139  09F2  3000               	movlw	0
 13140  09F3  1801               	btfsc	1,0
 13141  09F4  3001               	movlw	1
 13142  09F5  0020               	movlb	0	; select bank0
 13143  09F6  00E5               	movwf	setDimmerLights_Main@clear
 13144  09F7                     l6996:	
 13145                           
 13146                           ;Dimmer_B1.c: 302: }
 13147                           ;Dimmer_B1.c: 305: if (DimmerLights->Trigger) {
 13148  09F7  0878               	movf	_DimmerLights,w
 13149  09F8  3E09               	addlw	9
 13150  09F9  0086               	movwf	6
 13151  09FA  3001               	movlw	1	; select bank2/3
 13152  09FB  0087               	movwf	7
 13153  09FC  1C81               	btfss	1,1
 13154  09FD  2A2E               	goto	l7014
 13155                           
 13156                           ;Dimmer_B1.c: 306: if (clear) {
 13157  09FE  0865               	movf	setDimmerLights_Main@clear,w
 13158  09FF  1903               	btfsc	3,2
 13159  0A00  0008               	return
 13160                           
 13161                           ;Dimmer_B1.c: 307: if (DimmerLights->Switch) {
 13162  0A01  0878               	movf	_DimmerLights,w
 13163  0A02  3E09               	addlw	9
 13164  0A03  0086               	movwf	6
 13165  0A04  3001               	movlw	1	; select bank2/3
 13166  0A05  0087               	movwf	7
 13167  0A06  1C01               	btfss	1,0
 13168  0A07  2A1B               	goto	l7008
 13169                           
 13170                           ;Dimmer_B1.c: 308: DimmerLights->Trigger = 0;
 13171  0A08  0878               	movf	_DimmerLights,w
 13172  0A09  3E09               	addlw	9
 13173  0A0A  0086               	movwf	6
 13174  0A0B  3001               	movlw	1	; select bank2/3
 13175  0A0C  0087               	movwf	7
 13176  0A0D  1081               	bcf	1,1
 13177                           
 13178                           ;Dimmer_B1.c: 309: setDimmerLights(lights, 1);
 13179  0A0E  01A4               	clrf	setDimmerLights@status
 13180  0A0F  0AA4               	incf	setDimmerLights@status,f
 13181  0A10  0866               	movf	setDimmerLights_Main@lights,w
 13182  0A11  318C  24B0         	fcall	_setDimmerLights
 13183                           
 13184                           ;Dimmer_B1.c: 312: DimmerLights->Clear = 0;
 13185  0A13  0878               	movf	_DimmerLights,w
 13186  0A14  3E0C               	addlw	12
 13187  0A15  0086               	movwf	6
 13188  0A16  3001               	movlw	1	; select bank2/3
 13189  0A17  0087               	movwf	7
 13190  0A18  1001               	bcf	1,0
 13191                           
 13192                           ;Dimmer_B1.c: 314: } else {
 13193  0A19  0020               	movlb	0	; select bank0
 13194  0A1A  0008               	return
 13195  0A1B                     l7008:	
 13196                           
 13197                           ;Dimmer_B1.c: 315: DimmerLights->Trigger = 0;
 13198  0A1B  0878               	movf	_DimmerLights,w
 13199  0A1C  3E09               	addlw	9
 13200  0A1D  0086               	movwf	6
 13201  0A1E  3001               	movlw	1	; select bank2/3
 13202  0A1F  0087               	movwf	7
 13203  0A20  1081               	bcf	1,1
 13204                           
 13205                           ;Dimmer_B1.c: 316: setDimmerLights(lights, 0);
 13206  0A21  0020               	movlb	0	; select bank0
 13207  0A22  01A4               	clrf	setDimmerLights@status
 13208  0A23  0866               	movf	setDimmerLights_Main@lights,w
 13209  0A24  318C  24B0         	fcall	_setDimmerLights
 13210                           
 13211                           ;Dimmer_B1.c: 319: DimmerLights->Clear = 0;
 13212  0A26  0878               	movf	_DimmerLights,w
 13213  0A27  3E0C               	addlw	12
 13214  0A28  0086               	movwf	6
 13215  0A29  3001               	movlw	1	; select bank2/3
 13216  0A2A  0087               	movwf	7
 13217  0A2B  1001               	bcf	1,0
 13218  0A2C  0020               	movlb	0	; select bank0
 13219  0A2D  0008               	return
 13220  0A2E                     l7014:	
 13221                           ;Dimmer_B1.c: 321: }
 13222                           ;Dimmer_B1.c: 322: }
 13223                           ;Dimmer_B1.c: 323: } else {
 13224                           
 13225                           
 13226                           ;Dimmer_B1.c: 324: if (DimmerLights->TriggerAdj) {
 13227  0A2E  0878               	movf	_DimmerLights,w
 13228  0A2F  3E09               	addlw	9
 13229  0A30  0086               	movwf	6
 13230  0A31  3001               	movlw	1	; select bank2/3
 13231  0A32  0087               	movwf	7
 13232  0A33  1981               	btfsc	1,3
 13233  0A34  2A37               	goto	l7016
 13234  0A35  0020               	movlb	0	; select bank0
 13235  0A36  0008               	return
 13236  0A37                     l7016:	
 13237                           
 13238                           ;Dimmer_B1.c: 325: if (clear) {
 13239  0A37  0020               	movlb	0	; select bank0
 13240  0A38  0865               	movf	setDimmerLights_Main@clear,w
 13241  0A39  1903               	btfsc	3,2
 13242  0A3A  0008               	return
 13243                           
 13244                           ;Dimmer_B1.c: 326: DimmerLightsPointSelect(lights);
 13245  0A3B  0866               	movf	setDimmerLights_Main@lights,w
 13246  0A3C  319A  22C5  3189   	fcall	_DimmerLightsPointSelect
 13247                           
 13248                           ;Dimmer_B1.c: 327: DimmerLights->TriggerAdj = 0;
 13249  0A3F  0878               	movf	_DimmerLights,w
 13250  0A40  3E09               	addlw	9
 13251  0A41  0086               	movwf	6
 13252  0A42  3001               	movlw	1	; select bank2/3
 13253  0A43  0087               	movwf	7
 13254  0A44  1181               	bcf	1,3
 13255                           
 13256                           ;Dimmer_B1.c: 328: if (DimmerLights->AdjGo) {
 13257  0A45  0878               	movf	_DimmerLights,w
 13258  0A46  3E09               	addlw	9
 13259  0A47  0086               	movwf	6
 13260  0A48  3001               	movlw	1	; select bank2/3
 13261  0A49  0087               	movwf	7
 13262  0A4A  1D01               	btfss	1,2
 13263  0A4B  2A5D               	goto	l7026
 13264                           
 13265                           ;Dimmer_B1.c: 329: setDimmerLights_Adj(lights, 1);
 13266  0A4C  0020               	movlb	0	; select bank0
 13267  0A4D  01E2               	clrf	setDimmerLights_Adj@status
 13268  0A4E  0AE2               	incf	setDimmerLights_Adj@status,f
 13269  0A4F  0866               	movf	setDimmerLights_Main@lights,w
 13270  0A50  3191  2136  3189   	fcall	_setDimmerLights_Adj
 13271                           
 13272                           ;Dimmer_B1.c: 330: setBuz(1, 100);
 13273  0A53  3064               	movlw	100
 13274  0A54  0020               	movlb	0	; select bank0
 13275  0A55  00A6               	movwf	setBuz@time
 13276  0A56  3000               	movlw	0
 13277  0A57  00A7               	movwf	setBuz@time+1
 13278  0A58  3001               	movlw	1
 13279  0A59  3189  214F         	fcall	_setBuz
 13280                           
 13281                           ;Dimmer_B1.c: 331: } else {
 13282  0A5B  0020               	movlb	0	; select bank0
 13283  0A5C  0008               	return
 13284  0A5D                     l7026:	
 13285                           
 13286                           ;Dimmer_B1.c: 332: setDimmerLights_Adj(lights, 0);
 13287  0A5D  0020               	movlb	0	; select bank0
 13288  0A5E  01E2               	clrf	setDimmerLights_Adj@status
 13289  0A5F  0866               	movf	setDimmerLights_Main@lights,w
 13290  0A60  3191  2136         	fcall	_setDimmerLights_Adj
 13291  0A62  0020               	movlb	0	; select bank0
 13292  0A63  0008               	return
 13293  0A64                     __end_of_setDimmerLights_Main:	
 13294                           
 13295                           	psect	text74
 13296  1136                     __ptext74:	
 13297 ;; *************** function _setDimmerLights_Adj *****************
 13298 ;; Defined at:
 13299 ;;		line 510 in file "../src/Dimmer_B1.c"
 13300 ;; Parameters:    Size  Location     Type
 13301 ;;  lights          1    wreg     unsigned char 
 13302 ;;  status          1   66[BANK0 ] unsigned char 
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;  lights          1   68[BANK0 ] unsigned char 
 13305 ;; Return value:  Size  Location     Type
 13306 ;;		None               void
 13307 ;; Registers used:
 13308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13314 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;Total ram usage:        3 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    9
 13321 ;; This function calls:
 13322 ;;		_DimmerLightsPointSelect
 13323 ;;		_setLoad_StatusOff
 13324 ;;		_setRF_DimmerLights
 13325 ;;		_setTxData
 13326 ;; This function is called by:
 13327 ;;		_setDimmerLights_Main
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           
 13332                           ;psect for function _setDimmerLights_Adj
 13333  1136                     _setDimmerLights_Adj:	
 13334                           
 13335                           ;incstack = 0
 13336                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13337                           ;setDimmerLights_Adj@lights stored from wreg
 13338  1136  0020               	movlb	0	; select bank0
 13339  1137  00E4               	movwf	setDimmerLights_Adj@lights
 13340                           
 13341                           ;Dimmer_B1.c: 511: DimmerLightsPointSelect(lights);
 13342  1138  0864               	movf	setDimmerLights_Adj@lights,w
 13343  1139  319A  22C5  3191   	fcall	_DimmerLightsPointSelect
 13344                           
 13345                           ;Dimmer_B1.c: 512: if (status) {
 13346  113C  0020               	movlb	0	; select bank0
 13347  113D  0862               	movf	setDimmerLights_Adj@status,w
 13348  113E  1903               	btfsc	3,2
 13349  113F  294B               	goto	l6498
 13350                           
 13351                           ;Dimmer_B1.c: 513: DimmerLights->AdjFlag = 1;
 13352  1140  0878               	movf	_DimmerLights,w
 13353  1141  0086               	movwf	6
 13354  1142  3001               	movlw	1	; select bank2/3
 13355  1143  0087               	movwf	7
 13356  1144  1581               	bsf	1,3
 13357                           
 13358                           ;Dimmer_B1.c: 514: DimmerLights->Signal = 1;
 13359  1145  0878               	movf	_DimmerLights,w
 13360  1146  0086               	movwf	6
 13361  1147  3001               	movlw	1	; select bank2/3
 13362  1148  0087               	movwf	7
 13363  1149  1481               	bsf	1,1
 13364                           
 13365                           ;Dimmer_B1.c: 515: } else {
 13366  114A  0008               	return
 13367  114B                     l6498:	
 13368                           
 13369                           ;Dimmer_B1.c: 516: if (DimmerLights->AdjFlag) {
 13370  114B  0878               	movf	_DimmerLights,w
 13371  114C  0086               	movwf	6
 13372  114D  3001               	movlw	1	; select bank2/3
 13373  114E  0087               	movwf	7
 13374  114F  1D81               	btfss	1,3
 13375  1150  0008               	return
 13376                           
 13377                           ;Dimmer_B1.c: 517: DimmerLights->Signal = 0;
 13378  1151  0878               	movf	_DimmerLights,w
 13379  1152  0086               	movwf	6
 13380  1153  3001               	movlw	1	; select bank2/3
 13381  1154  0087               	movwf	7
 13382  1155  1081               	bcf	1,1
 13383                           
 13384                           ;Dimmer_B1.c: 518: DimmerLights->AdjFlag = 0;
 13385  1156  0878               	movf	_DimmerLights,w
 13386  1157  0086               	movwf	6
 13387  1158  3001               	movlw	1	; select bank2/3
 13388  1159  0087               	movwf	7
 13389  115A  1181               	bcf	1,3
 13390                           
 13391                           ;Dimmer_B1.c: 519: setLoad_StatusOff(0, 1);
 13392  115B  01A0               	clrf	setLoad_StatusOff@command
 13393  115C  0AA0               	incf	setLoad_StatusOff@command,f
 13394  115D  3000               	movlw	0
 13395  115E  319E  26FD  3191   	fcall	_setLoad_StatusOff
 13396                           
 13397                           ;Dimmer_B1.c: 520: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13398  1161  0878               	movf	_DimmerLights,w
 13399  1162  3E04               	addlw	4
 13400  1163  0086               	movwf	6
 13401  1164  3001               	movlw	1	; select bank2/3
 13402  1165  0087               	movwf	7
 13403  1166  0801               	movf	1,w
 13404  1167  0020               	movlb	0	; select bank0
 13405  1168  00E3               	movwf	??_setDimmerLights_Adj
 13406  1169  0878               	movf	_DimmerLights,w
 13407  116A  3E05               	addlw	5
 13408  116B  0086               	movwf	6
 13409  116C  3001               	movlw	1	; select bank2/3
 13410  116D  0087               	movwf	7
 13411  116E  0863               	movf	??_setDimmerLights_Adj,w
 13412  116F  0081               	movwf	1
 13413                           
 13414                           ;Dimmer_B1.c: 528: setRF_DimmerLights(lights, 1);
 13415  1170  01DD               	clrf	setRF_DimmerLights@on
 13416  1171  0ADD               	incf	setRF_DimmerLights@on,f
 13417  1172  0864               	movf	setDimmerLights_Adj@lights,w
 13418  1173  3195  25CB  3191   	fcall	_setRF_DimmerLights
 13419                           
 13420                           ;Dimmer_B1.c: 529: setTxData(1);
 13421  1176  3001               	movlw	1
 13422  1177  318D  254A         	fcall	_setTxData
 13423  1179  0008               	return
 13424  117A                     __end_of_setDimmerLights_Adj:	
 13425                           
 13426                           	psect	text75
 13427  1EFD                     __ptext75:	
 13428 ;; *************** function _setLoad_StatusOff *****************
 13429 ;; Defined at:
 13430 ;;		line 284 in file "../src/OverLoad_B1.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;  lights          1    wreg     unsigned char 
 13433 ;;  command         1    0[BANK0 ] unsigned char 
 13434 ;; Auto vars:     Size  Location     Type
 13435 ;;  lights          1    1[BANK0 ] unsigned char 
 13436 ;; Return value:  Size  Location     Type
 13437 ;;		None               void
 13438 ;; Registers used:
 13439 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13440 ;; Tracked objects:
 13441 ;;		On entry : 0/0
 13442 ;;		On exit  : 0/0
 13443 ;;		Unchanged: 0/0
 13444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13445 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;Total ram usage:        2 bytes
 13450 ;; Hardware stack levels used:    1
 13451 ;; Hardware stack levels required when called:    5
 13452 ;; This function calls:
 13453 ;;		Nothing
 13454 ;; This function is called by:
 13455 ;;		_setDimmerLights_ERROR
 13456 ;;		_setDimmerLights_Adj
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           
 13461                           ;psect for function _setLoad_StatusOff
 13462  1EFD                     _setLoad_StatusOff:	
 13463                           
 13464                           ;incstack = 0
 13465                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 13466                           ;setLoad_StatusOff@lights stored from wreg
 13467  1EFD  0020               	movlb	0	; select bank0
 13468  1EFE  00A1               	movwf	setLoad_StatusOff@lights
 13469                           
 13470                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 13471  1EFF  087B               	movf	_Load,w
 13472  1F00  3E46               	addlw	70
 13473  1F01  0086               	movwf	6
 13474  1F02  3002               	movlw	2	; select bank4/5
 13475  1F03  0087               	movwf	7
 13476  1F04  0820               	movf	setLoad_StatusOff@command,w
 13477  1F05  1081               	bcf	1,1
 13478  1F06  1D03               	skipz
 13479  1F07  1481               	bsf	1,1
 13480                           
 13481                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 13482  1F08  087B               	movf	_Load,w
 13483  1F09  3E42               	addlw	66
 13484  1F0A  0086               	movwf	6
 13485  1F0B  3002               	movlw	2	; select bank4/5
 13486  1F0C  0087               	movwf	7
 13487  1F0D  3002               	movlw	2
 13488  1F0E  0281               	subwf	1,f
 13489                           
 13490                           ;OverLoad_B1.c: 287: if (lights == 1) {
 13491  1F0F  0821               	movf	setLoad_StatusOff@lights,w
 13492  1F10  3A01               	xorlw	1
 13493  1F11  1D03               	skipz
 13494  1F12  2F19               	goto	l6148
 13495                           
 13496                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 13497  1F13  087B               	movf	_Load,w
 13498  1F14  3E43               	addlw	67
 13499  1F15  0086               	movwf	6
 13500  1F16  3002               	movlw	2	; select bank4/5
 13501  1F17  0087               	movwf	7
 13502  1F18  0181               	clrf	1
 13503  1F19                     l6148:	
 13504                           
 13505                           ;OverLoad_B1.c: 289: }
 13506                           ;OverLoad_B1.c: 290: if (lights == 2) {
 13507  1F19  0821               	movf	setLoad_StatusOff@lights,w
 13508  1F1A  3A02               	xorlw	2
 13509  1F1B  1D03               	skipz
 13510  1F1C  2F23               	goto	l6152
 13511                           
 13512                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 13513  1F1D  087B               	movf	_Load,w
 13514  1F1E  3E44               	addlw	68
 13515  1F1F  0086               	movwf	6
 13516  1F20  3002               	movlw	2	; select bank4/5
 13517  1F21  0087               	movwf	7
 13518  1F22  0181               	clrf	1
 13519  1F23                     l6152:	
 13520                           
 13521                           ;OverLoad_B1.c: 292: }
 13522                           ;OverLoad_B1.c: 293: if (lights == 3) {
 13523  1F23  0821               	movf	setLoad_StatusOff@lights,w
 13524  1F24  3A03               	xorlw	3
 13525  1F25  1D03               	skipz
 13526  1F26  0008               	return
 13527                           
 13528                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 13529  1F27  087B               	movf	_Load,w
 13530  1F28  3E45               	addlw	69
 13531  1F29  0086               	movwf	6
 13532  1F2A  3002               	movlw	2	; select bank4/5
 13533  1F2B  0087               	movwf	7
 13534  1F2C  0181               	clrf	1
 13535  1F2D  0008               	return
 13536  1F2E                     __end_of_setLoad_StatusOff:	
 13537                           
 13538                           	psect	text76
 13539  0CB0                     __ptext76:	
 13540 ;; *************** function _setDimmerLights *****************
 13541 ;; Defined at:
 13542 ;;		line 457 in file "../src/Dimmer_B1.c"
 13543 ;; Parameters:    Size  Location     Type
 13544 ;;  lights          1    wreg     unsigned char 
 13545 ;;  status          1    4[BANK0 ] unsigned char 
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;  lights          1    6[BANK0 ] unsigned char 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;		None               void
 13550 ;; Registers used:
 13551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        3 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    7
 13564 ;; This function calls:
 13565 ;;		_DimmerLightsPointSelect
 13566 ;;		_setLED
 13567 ;;		_setLoad_Count
 13568 ;;		_setLoad_StatusOn
 13569 ;; This function is called by:
 13570 ;;		_setDimmerLights_Main
 13571 ;;		_setControl_Lights_Table
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           
 13576                           ;psect for function _setDimmerLights
 13577  0CB0                     _setDimmerLights:	
 13578                           
 13579                           ;incstack = 0
 13580                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13581                           ;setDimmerLights@lights stored from wreg
 13582  0CB0  0020               	movlb	0	; select bank0
 13583  0CB1  00A6               	movwf	setDimmerLights@lights
 13584                           
 13585                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13586  0CB2  0826               	movf	setDimmerLights@lights,w
 13587  0CB3  319A  22C5  318C   	fcall	_DimmerLightsPointSelect
 13588                           
 13589                           ;Dimmer_B1.c: 459: Dimmer->Load = lights;
 13590  0CB6  0020               	movlb	0	; select bank0
 13591  0CB7  0826               	movf	setDimmerLights@lights,w
 13592  0CB8  00A5               	movwf	??_setDimmerLights
 13593  0CB9  0021               	movlb	1	; select bank1
 13594  0CBA  0A3A               	incf	_Dimmer^(0+128),w
 13595  0CBB  0086               	movwf	6
 13596  0CBC  0187               	clrf	7
 13597  0CBD  0020               	movlb	0	; select bank0
 13598  0CBE  0825               	movf	??_setDimmerLights,w
 13599  0CBF  0081               	movwf	1
 13600                           
 13601                           ;Dimmer_B1.c: 460: if (status) {
 13602  0CC0  0824               	movf	setDimmerLights@status,w
 13603  0CC1  1903               	btfsc	3,2
 13604  0CC2  2D18               	goto	l6180
 13605                           
 13606                           ;Dimmer_B1.c: 461: DimmerLights->Status = 1;
 13607  0CC3  0878               	movf	_DimmerLights,w
 13608  0CC4  0086               	movwf	6
 13609  0CC5  3001               	movlw	1	; select bank2/3
 13610  0CC6  0087               	movwf	7
 13611  0CC7  1681               	bsf	1,5
 13612                           
 13613                           ;Dimmer_B1.c: 462: setLED(lights, 0);
 13614  0CC8  01A2               	clrf	setLED@command
 13615  0CC9  0826               	movf	setDimmerLights@lights,w
 13616  0CCA  3193  23E5  318C   	fcall	_setLED
 13617                           
 13618                           ;Dimmer_B1.c: 464: setLoad_Count(0);
 13619  0CCD  3000               	movlw	0
 13620  0CCE  319B  2315  318C   	fcall	_setLoad_Count
 13621                           
 13622                           ;Dimmer_B1.c: 466: DimmerLights->Signal = 1;
 13623  0CD1  0878               	movf	_DimmerLights,w
 13624  0CD2  0086               	movwf	6
 13625  0CD3  3001               	movlw	1	; select bank2/3
 13626  0CD4  0087               	movwf	7
 13627  0CD5  1481               	bsf	1,1
 13628                           
 13629                           ;Dimmer_B1.c: 467: DimmerLights->DimmingTimeValue = 3;
 13630  0CD6  3003               	movlw	3
 13631  0CD7  0020               	movlb	0	; select bank0
 13632  0CD8  00A5               	movwf	??_setDimmerLights
 13633  0CD9  0878               	movf	_DimmerLights,w
 13634  0CDA  3E02               	addlw	2
 13635  0CDB  0086               	movwf	6
 13636  0CDC  3001               	movlw	1	; select bank2/3
 13637  0CDD  0087               	movwf	7
 13638  0CDE  0825               	movf	??_setDimmerLights,w
 13639  0CDF  0081               	movwf	1
 13640                           
 13641                           ;Dimmer_B1.c: 469: if (!DimmerLights->StatusFlag) {
 13642  0CE0  0878               	movf	_DimmerLights,w
 13643  0CE1  0086               	movwf	6
 13644  0CE2  3001               	movlw	1	; select bank2/3
 13645  0CE3  0087               	movwf	7
 13646  0CE4  1B01               	btfsc	1,6
 13647  0CE5  0008               	return
 13648                           
 13649                           ;Dimmer_B1.c: 470: DimmerLights->StatusFlag = 1;
 13650  0CE6  0878               	movf	_DimmerLights,w
 13651  0CE7  0086               	movwf	6
 13652  0CE8  3001               	movlw	1	; select bank2/3
 13653  0CE9  0087               	movwf	7
 13654  0CEA  1701               	bsf	1,6
 13655                           
 13656                           ;Dimmer_B1.c: 471: setLoad_StatusOn(lights, 1);
 13657  0CEB  01A0               	clrf	setLoad_StatusOn@command
 13658  0CEC  0AA0               	incf	setLoad_StatusOn@command,f
 13659  0CED  0826               	movf	setDimmerLights@lights,w
 13660  0CEE  319F  272E         	fcall	_setLoad_StatusOn
 13661                           
 13662                           ;Dimmer_B1.c: 472: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 13663  0CF0  0021               	movlb	1	; select bank1
 13664  0CF1  0867               	movf	_Memory^(0+128),w
 13665  0CF2  3E22               	addlw	34
 13666  0CF3  0086               	movwf	6
 13667  0CF4  3002               	movlw	2	; select bank4/5
 13668  0CF5  0087               	movwf	7
 13669  0CF6  1081               	bcf	1,1
 13670  0CF7  0867               	movf	_Memory^(0+128),w
 13671  0CF8  3E23               	addlw	35
 13672  0CF9  0086               	movwf	6
 13673  0CFA  3002               	movlw	2	; select bank4/5
 13674  0CFB  0087               	movwf	7
 13675  0CFC  3000               	movlw	0
 13676  0CFD  3FC0               	movwi [0]fsr1
 13677  0CFE  3FC1               	movwi [1]fsr1
 13678                           
 13679                           ;Dimmer_B1.c: 475: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13680  0CFF  0878               	movf	_DimmerLights,w
 13681  0D00  3E05               	addlw	5
 13682  0D01  0086               	movwf	6
 13683  0D02  3001               	movlw	1	; select bank2/3
 13684  0D03  0087               	movwf	7
 13685  0D04  0801               	movf	1,w
 13686  0D05  0020               	movlb	0	; select bank0
 13687  0D06  00A5               	movwf	??_setDimmerLights
 13688  0D07  0878               	movf	_DimmerLights,w
 13689  0D08  3E04               	addlw	4
 13690  0D09  0086               	movwf	6
 13691  0D0A  3001               	movlw	1	; select bank2/3
 13692  0D0B  0087               	movwf	7
 13693  0D0C  0825               	movf	??_setDimmerLights,w
 13694  0D0D  0081               	movwf	1
 13695                           
 13696                           ;Dimmer_B1.c: 479: DimmerLights->DimmingValue = ((char)(65*1.5));
 13697  0D0E  3061               	movlw	97
 13698  0D0F  00A5               	movwf	??_setDimmerLights
 13699  0D10  0878               	movf	_DimmerLights,w
 13700  0D11  3E04               	addlw	4
 13701  0D12  0086               	movwf	6
 13702  0D13  3001               	movlw	1	; select bank2/3
 13703  0D14  0087               	movwf	7
 13704  0D15  0825               	movf	??_setDimmerLights,w
 13705  0D16  0081               	movwf	1
 13706                           
 13707                           ;Dimmer_B1.c: 481: }
 13708                           ;Dimmer_B1.c: 482: } else {
 13709  0D17  0008               	return
 13710  0D18                     l6180:	
 13711                           
 13712                           ;Dimmer_B1.c: 483: DimmerLights->Status = 0;
 13713  0D18  0878               	movf	_DimmerLights,w
 13714  0D19  0086               	movwf	6
 13715  0D1A  3001               	movlw	1	; select bank2/3
 13716  0D1B  0087               	movwf	7
 13717  0D1C  1281               	bcf	1,5
 13718                           
 13719                           ;Dimmer_B1.c: 485: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13720  0D1D  0878               	movf	_DimmerLights,w
 13721  0D1E  3E06               	addlw	6
 13722  0D1F  0086               	movwf	6
 13723  0D20  3001               	movlw	1	; select bank2/3
 13724  0D21  0087               	movwf	7
 13725  0D22  0801               	movf	1,w
 13726  0D23  00A5               	movwf	??_setDimmerLights
 13727  0D24  0878               	movf	_DimmerLights,w
 13728  0D25  3E04               	addlw	4
 13729  0D26  0086               	movwf	6
 13730  0D27  3001               	movlw	1	; select bank2/3
 13731  0D28  0087               	movwf	7
 13732  0D29  0825               	movf	??_setDimmerLights,w
 13733  0D2A  0081               	movwf	1
 13734                           
 13735                           ;Dimmer_B1.c: 490: DimmerLights->MosfetClose = 1;
 13736  0D2B  0878               	movf	_DimmerLights,w
 13737  0D2C  3E09               	addlw	9
 13738  0D2D  0086               	movwf	6
 13739  0D2E  3001               	movlw	1	; select bank2/3
 13740  0D2F  0087               	movwf	7
 13741  0D30  1701               	bsf	1,6
 13742                           
 13743                           ;Dimmer_B1.c: 492: DimmerLights->Signal = 1;
 13744  0D31  0878               	movf	_DimmerLights,w
 13745  0D32  0086               	movwf	6
 13746  0D33  3001               	movlw	1	; select bank2/3
 13747  0D34  0087               	movwf	7
 13748  0D35  1481               	bsf	1,1
 13749                           
 13750                           ;Dimmer_B1.c: 493: DimmerLights->AdjFlag = 0;
 13751  0D36  0878               	movf	_DimmerLights,w
 13752  0D37  0086               	movwf	6
 13753  0D38  3001               	movlw	1	; select bank2/3
 13754  0D39  0087               	movwf	7
 13755  0D3A  1181               	bcf	1,3
 13756                           
 13757                           ;Dimmer_B1.c: 494: DimmerLights->AdjStatus = 0;
 13758  0D3B  0878               	movf	_DimmerLights,w
 13759  0D3C  0086               	movwf	6
 13760  0D3D  3001               	movlw	1	; select bank2/3
 13761  0D3E  0087               	movwf	7
 13762  0D3F  1201               	bcf	1,4
 13763                           
 13764                           ;Dimmer_B1.c: 495: DimmerLights->DimmingTimeValue = 3;
 13765  0D40  3003               	movlw	3
 13766  0D41  00A5               	movwf	??_setDimmerLights
 13767  0D42  0878               	movf	_DimmerLights,w
 13768  0D43  3E02               	addlw	2
 13769  0D44  0086               	movwf	6
 13770  0D45  3001               	movlw	1	; select bank2/3
 13771  0D46  0087               	movwf	7
 13772  0D47  0825               	movf	??_setDimmerLights,w
 13773  0D48  0081               	movwf	1
 13774  0D49  0008               	return
 13775  0D4A                     __end_of_setDimmerLights:	
 13776                           
 13777                           	psect	text77
 13778  1F2E                     __ptext77:	
 13779 ;; *************** function _setLoad_StatusOn *****************
 13780 ;; Defined at:
 13781 ;;		line 269 in file "../src/OverLoad_B1.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;  lights          1    wreg     unsigned char 
 13784 ;;  command         1    0[BANK0 ] unsigned char 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  lights          1    1[BANK0 ] unsigned char 
 13787 ;; Return value:  Size  Location     Type
 13788 ;;		None               void
 13789 ;; Registers used:
 13790 ;;		wreg, fsr1l, fsr1h
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13796 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;Total ram usage:        2 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    5
 13803 ;; This function calls:
 13804 ;;		Nothing
 13805 ;; This function is called by:
 13806 ;;		_setDimmerLights
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           
 13811                           ;psect for function _setLoad_StatusOn
 13812  1F2E                     _setLoad_StatusOn:	
 13813                           
 13814                           ;incstack = 0
 13815                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 13816                           ;setLoad_StatusOn@lights stored from wreg
 13817  1F2E  0020               	movlb	0	; select bank0
 13818  1F2F  00A1               	movwf	setLoad_StatusOn@lights
 13819                           
 13820                           ;OverLoad_B1.c: 270: Load->GO = 1;
 13821  1F30  087B               	movf	_Load,w
 13822  1F31  0086               	movwf	6
 13823  1F32  3002               	movlw	2	; select bank4/5
 13824  1F33  0087               	movwf	7
 13825  1F34  1481               	bsf	1,1
 13826                           
 13827                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 13828  1F35  087B               	movf	_Load,w
 13829  1F36  3E46               	addlw	70
 13830  1F37  0086               	movwf	6
 13831  1F38  3002               	movlw	2	; select bank4/5
 13832  1F39  0087               	movwf	7
 13833  1F3A  0820               	movf	setLoad_StatusOn@command,w
 13834  1F3B  1001               	bcf	1,0
 13835  1F3C  1D03               	skipz
 13836  1F3D  1401               	bsf	1,0
 13837                           
 13838                           ;OverLoad_B1.c: 273: if (lights == 1) {
 13839  1F3E  0821               	movf	setLoad_StatusOn@lights,w
 13840  1F3F  3A01               	xorlw	1
 13841  1F40  1D03               	skipz
 13842  1F41  2F49               	goto	l6076
 13843                           
 13844                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 13845  1F42  087B               	movf	_Load,w
 13846  1F43  3E43               	addlw	67
 13847  1F44  0086               	movwf	6
 13848  1F45  3002               	movlw	2	; select bank4/5
 13849  1F46  0087               	movwf	7
 13850  1F47  0181               	clrf	1
 13851  1F48  0A81               	incf	1,f
 13852  1F49                     l6076:	
 13853                           
 13854                           ;OverLoad_B1.c: 275: }
 13855                           ;OverLoad_B1.c: 276: if (lights == 2) {
 13856  1F49  0821               	movf	setLoad_StatusOn@lights,w
 13857  1F4A  3A02               	xorlw	2
 13858  1F4B  1D03               	skipz
 13859  1F4C  2F54               	goto	l6080
 13860                           
 13861                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 13862  1F4D  087B               	movf	_Load,w
 13863  1F4E  3E44               	addlw	68
 13864  1F4F  0086               	movwf	6
 13865  1F50  3002               	movlw	2	; select bank4/5
 13866  1F51  0087               	movwf	7
 13867  1F52  0181               	clrf	1
 13868  1F53  0A81               	incf	1,f
 13869  1F54                     l6080:	
 13870                           
 13871                           ;OverLoad_B1.c: 278: }
 13872                           ;OverLoad_B1.c: 279: if (lights == 3) {
 13873  1F54  0821               	movf	setLoad_StatusOn@lights,w
 13874  1F55  3A03               	xorlw	3
 13875  1F56  1D03               	skipz
 13876  1F57  0008               	return
 13877                           
 13878                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 13879  1F58  087B               	movf	_Load,w
 13880  1F59  3E45               	addlw	69
 13881  1F5A  0086               	movwf	6
 13882  1F5B  3002               	movlw	2	; select bank4/5
 13883  1F5C  0087               	movwf	7
 13884  1F5D  0181               	clrf	1
 13885  1F5E  0A81               	incf	1,f
 13886  1F5F  0008               	return
 13887  1F60                     __end_of_setLoad_StatusOn:	
 13888                           
 13889                           	psect	text78
 13890  1B15                     __ptext78:	
 13891 ;; *************** function _setLoad_Count *****************
 13892 ;; Defined at:
 13893 ;;		line 254 in file "../src/OverLoad_B1.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  command         1    wreg     unsigned char 
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  command         1    1[BANK0 ] unsigned char 
 13898 ;; Return value:  Size  Location     Type
 13899 ;;		None               void
 13900 ;; Registers used:
 13901 ;;		wreg, fsr1l, fsr1h
 13902 ;; Tracked objects:
 13903 ;;		On entry : 0/0
 13904 ;;		On exit  : 0/0
 13905 ;;		Unchanged: 0/0
 13906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;Total ram usage:        2 bytes
 13912 ;; Hardware stack levels used:    1
 13913 ;; Hardware stack levels required when called:    5
 13914 ;; This function calls:
 13915 ;;		Nothing
 13916 ;; This function is called by:
 13917 ;;		_setDimmerLights
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           
 13922                           ;psect for function _setLoad_Count
 13923  1B15                     _setLoad_Count:	
 13924                           
 13925                           ;incstack = 0
 13926                           ; Regs used in _setLoad_Count: [wregfsr1]
 13927                           ;setLoad_Count@command stored from wreg
 13928  1B15  0020               	movlb	0	; select bank0
 13929  1B16  00A1               	movwf	setLoad_Count@command
 13930                           
 13931                           ;OverLoad_B1.c: 255: Load->Count = command;
 13932  1B17  0821               	movf	setLoad_Count@command,w
 13933  1B18  00A0               	movwf	??_setLoad_Count
 13934  1B19  087B               	movf	_Load,w
 13935  1B1A  3E3A               	addlw	58
 13936  1B1B  0086               	movwf	6
 13937  1B1C  3002               	movlw	2	; select bank4/5
 13938  1B1D  0087               	movwf	7
 13939  1B1E  0820               	movf	??_setLoad_Count,w
 13940  1B1F  0081               	movwf	1
 13941                           
 13942                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 13943  1B20  0821               	movf	setLoad_Count@command,w
 13944  1B21  00A0               	movwf	??_setLoad_Count
 13945  1B22  087B               	movf	_Load,w
 13946  1B23  3E42               	addlw	66
 13947  1B24  0086               	movwf	6
 13948  1B25  3002               	movlw	2	; select bank4/5
 13949  1B26  0087               	movwf	7
 13950  1B27  0820               	movf	??_setLoad_Count,w
 13951  1B28  0081               	movwf	1
 13952  1B29  0008               	return
 13953  1B2A                     __end_of_setLoad_Count:	
 13954                           
 13955                           	psect	text79
 13956  13E5                     __ptext79:	
 13957 ;; *************** function _setLED *****************
 13958 ;; Defined at:
 13959 ;;		line 74 in file "../src/LED_B1.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;  led             1    wreg     unsigned char 
 13962 ;;  command         1    2[BANK0 ] unsigned char 
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;  led             1    3[BANK0 ] unsigned char 
 13965 ;; Return value:  Size  Location     Type
 13966 ;;		None               void
 13967 ;; Registers used:
 13968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13974 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;Total ram usage:        2 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; Hardware stack levels required when called:    6
 13981 ;; This function calls:
 13982 ;;		_LedPointSelect
 13983 ;; This function is called by:
 13984 ;;		_setDimmerLights_ERROR
 13985 ;;		_setDimmerLights
 13986 ;;		_setLED_Initialization
 13987 ;;		_setLoad_Exceptions
 13988 ;;		_setSw_Initialization
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991                           
 13992                           
 13993                           ;psect for function _setLED
 13994  13E5                     _setLED:	
 13995                           
 13996                           ;incstack = 0
 13997                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13998                           ;setLED@led stored from wreg
 13999  13E5  0020               	movlb	0	; select bank0
 14000  13E6  00A3               	movwf	setLED@led
 14001                           
 14002                           ;LED_B1.c: 76: LedPointSelect(led);
 14003  13E7  0823               	movf	setLED@led,w
 14004  13E8  319D  253F  3193   	fcall	_LedPointSelect
 14005                           
 14006                           ;LED_B1.c: 77: if(command == 0)
 14007  13EB  0020               	movlb	0	; select bank0
 14008  13EC  08A2               	movf	setLED@command,f
 14009  13ED  1D03               	skipz
 14010  13EE  2C01               	goto	l6034
 14011                           
 14012                           ;LED_B1.c: 78: {
 14013                           ;LED_B1.c: 80: if(led == 1)
 14014  13EF  0823               	movf	setLED@led,w
 14015  13F0  3A01               	xorlw	1
 14016  13F1  1D03               	skipz
 14017  13F2  2BF5               	goto	l6026
 14018                           
 14019                           ;LED_B1.c: 81: {
 14020                           ;LED_B1.c: 85: RA3=1;
 14021  13F3  158C               	bsf	12,3	;volatile
 14022                           
 14023                           ;LED_B1.c: 87: }
 14024  13F4  0008               	return
 14025  13F5                     l6026:	
 14026                           
 14027                           ;LED_B1.c: 90: else if(led == 2)
 14028  13F5  0823               	movf	setLED@led,w
 14029  13F6  3A02               	xorlw	2
 14030  13F7  1D03               	skipz
 14031  13F8  2BFB               	goto	l6030
 14032                           
 14033                           ;LED_B1.c: 91: {
 14034                           ;LED_B1.c: 95: RC7=1;
 14035  13F9  178E               	bsf	14,7	;volatile
 14036                           
 14037                           ;LED_B1.c: 97: }
 14038  13FA  0008               	return
 14039  13FB                     l6030:	
 14040                           
 14041                           ;LED_B1.c: 110: else if(led == 99)
 14042  13FB  0823               	movf	setLED@led,w
 14043  13FC  3A63               	xorlw	99
 14044  13FD  1D03               	skipz
 14045  13FE  0008               	return
 14046                           
 14047                           ;LED_B1.c: 111: {
 14048                           ;LED_B1.c: 115: RB5=1;
 14049  13FF  168D               	bsf	13,5	;volatile
 14050                           
 14051                           ;LED_B1.c: 117: }
 14052                           ;LED_B1.c: 119: }
 14053  1400  0008               	return
 14054  1401                     l6034:	
 14055                           
 14056                           ;LED_B1.c: 120: else if(command == 1)
 14057  1401  0822               	movf	setLED@command,w
 14058  1402  3A01               	xorlw	1
 14059  1403  1D03               	skipz
 14060  1404  2C17               	goto	l6048
 14061                           
 14062                           ;LED_B1.c: 121: {
 14063                           ;LED_B1.c: 123: if(led == 1)
 14064  1405  0823               	movf	setLED@led,w
 14065  1406  3A01               	xorlw	1
 14066  1407  1D03               	skipz
 14067  1408  2C0B               	goto	l6040
 14068                           
 14069                           ;LED_B1.c: 124: {
 14070                           ;LED_B1.c: 128: RA3=0;
 14071  1409  118C               	bcf	12,3	;volatile
 14072                           
 14073                           ;LED_B1.c: 130: }
 14074  140A  0008               	return
 14075  140B                     l6040:	
 14076                           
 14077                           ;LED_B1.c: 133: else if(led == 2)
 14078  140B  0823               	movf	setLED@led,w
 14079  140C  3A02               	xorlw	2
 14080  140D  1D03               	skipz
 14081  140E  2C11               	goto	l6044
 14082                           
 14083                           ;LED_B1.c: 134: {
 14084                           ;LED_B1.c: 138: RC7=0;
 14085  140F  138E               	bcf	14,7	;volatile
 14086                           
 14087                           ;LED_B1.c: 140: }
 14088  1410  0008               	return
 14089  1411                     l6044:	
 14090                           
 14091                           ;LED_B1.c: 153: else if(led == 99)
 14092  1411  0823               	movf	setLED@led,w
 14093  1412  3A63               	xorlw	99
 14094  1413  1D03               	skipz
 14095  1414  0008               	return
 14096                           
 14097                           ;LED_B1.c: 154: {
 14098                           ;LED_B1.c: 158: RB5=0;
 14099  1415  128D               	bcf	13,5	;volatile
 14100                           
 14101                           ;LED_B1.c: 160: }
 14102                           ;LED_B1.c: 162: }
 14103  1416  0008               	return
 14104  1417                     l6048:	
 14105                           
 14106                           ;LED_B1.c: 163: else if(command == 10)
 14107  1417  0822               	movf	setLED@command,w
 14108  1418  3A0A               	xorlw	10
 14109  1419  1D03               	skipz
 14110  141A  2C39               	goto	l6064
 14111                           
 14112                           ;LED_B1.c: 164: {
 14113                           ;LED_B1.c: 165: LED->GO=0;
 14114  141B  0021               	movlb	1	; select bank1
 14115  141C  083D               	movf	_LED^(0+128),w
 14116  141D  0086               	movwf	6
 14117  141E  0187               	clrf	7
 14118  141F  1081               	bcf	1,1
 14119                           
 14120                           ;LED_B1.c: 166: LED->Time=0;
 14121  1420  0A3D               	incf	_LED^(0+128),w
 14122  1421  0086               	movwf	6
 14123  1422  0187               	clrf	7
 14124  1423  3000               	movlw	0
 14125  1424  3FC0               	movwi [0]fsr1
 14126  1425  3FC1               	movwi [1]fsr1
 14127                           
 14128                           ;LED_B1.c: 168: if(led == 1)
 14129  1426  0020               	movlb	0	; select bank0
 14130  1427  0823               	movf	setLED@led,w
 14131  1428  3A01               	xorlw	1
 14132  1429  1D03               	skipz
 14133  142A  2C2D               	goto	l6056
 14134                           
 14135                           ;LED_B1.c: 169: {
 14136                           ;LED_B1.c: 173: RA3=1;
 14137  142B  158C               	bsf	12,3	;volatile
 14138                           
 14139                           ;LED_B1.c: 175: }
 14140  142C  0008               	return
 14141  142D                     l6056:	
 14142                           
 14143                           ;LED_B1.c: 178: else if(led == 2)
 14144  142D  0823               	movf	setLED@led,w
 14145  142E  3A02               	xorlw	2
 14146  142F  1D03               	skipz
 14147  1430  2C33               	goto	l6060
 14148                           
 14149                           ;LED_B1.c: 179: {
 14150                           ;LED_B1.c: 183: RC7=1;
 14151  1431  178E               	bsf	14,7	;volatile
 14152                           
 14153                           ;LED_B1.c: 185: }
 14154  1432  0008               	return
 14155  1433                     l6060:	
 14156                           
 14157                           ;LED_B1.c: 198: else if(led == 99)
 14158  1433  0823               	movf	setLED@led,w
 14159  1434  3A63               	xorlw	99
 14160  1435  1D03               	skipz
 14161  1436  0008               	return
 14162                           
 14163                           ;LED_B1.c: 199: {
 14164                           ;LED_B1.c: 203: RB5=1;
 14165  1437  168D               	bsf	13,5	;volatile
 14166                           
 14167                           ;LED_B1.c: 205: }
 14168                           ;LED_B1.c: 207: }
 14169  1438  0008               	return
 14170  1439                     l6064:	
 14171                           
 14172                           ;LED_B1.c: 208: else if(command == 11)
 14173  1439  0822               	movf	setLED@command,w
 14174  143A  3A0B               	xorlw	11
 14175  143B  1D03               	skipz
 14176  143C  0008               	return
 14177                           
 14178                           ;LED_B1.c: 209: {
 14179                           ;LED_B1.c: 210: LED->GO=1;
 14180  143D  0021               	movlb	1	; select bank1
 14181  143E  083D               	movf	_LED^(0+128),w
 14182  143F  0086               	movwf	6
 14183  1440  0187               	clrf	7
 14184  1441  1481               	bsf	1,1
 14185  1442  0008               	return
 14186  1443                     __end_of_setLED:	
 14187                           
 14188                           	psect	text80
 14189  1D3F                     __ptext80:	
 14190 ;; *************** function _LedPointSelect *****************
 14191 ;; Defined at:
 14192 ;;		line 7 in file "../src/LED_B1.c"
 14193 ;; Parameters:    Size  Location     Type
 14194 ;;  led             1    wreg     unsigned char 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;  led             1    1[BANK0 ] unsigned char 
 14197 ;; Return value:  Size  Location     Type
 14198 ;;		None               void
 14199 ;; Registers used:
 14200 ;;		wreg
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;Total ram usage:        2 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:    5
 14213 ;; This function calls:
 14214 ;;		Nothing
 14215 ;; This function is called by:
 14216 ;;		_setLED_Initialization
 14217 ;;		_setLED
 14218 ;;		_setLED_Main
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           
 14223                           ;psect for function _LedPointSelect
 14224  1D3F                     _LedPointSelect:	
 14225                           
 14226                           ;incstack = 0
 14227                           ; Regs used in _LedPointSelect: [wreg]
 14228                           ;LedPointSelect@led stored from wreg
 14229  1D3F  0020               	movlb	0	; select bank0
 14230  1D40  00A1               	movwf	LedPointSelect@led
 14231                           
 14232                           ;LED_B1.c: 10: if(led == 1)
 14233  1D41  0821               	movf	LedPointSelect@led,w
 14234  1D42  3A01               	xorlw	1
 14235  1D43  1D03               	skipz
 14236  1D44  2D4B               	goto	l5896
 14237                           
 14238                           ;LED_B1.c: 11: {
 14239                           ;LED_B1.c: 12: LED=&VarLED1;
 14240  1D45  30D5               	movlw	_VarLED1& (0+255)
 14241  1D46  00A0               	movwf	??_LedPointSelect
 14242  1D47  0820               	movf	??_LedPointSelect,w
 14243  1D48  0021               	movlb	1	; select bank1
 14244  1D49  00BD               	movwf	_LED^(0+128)
 14245                           
 14246                           ;LED_B1.c: 13: }
 14247  1D4A  0008               	return
 14248  1D4B                     l5896:	
 14249                           
 14250                           ;LED_B1.c: 16: else if(led == 2)
 14251  1D4B  0020               	movlb	0	; select bank0
 14252  1D4C  0821               	movf	LedPointSelect@led,w
 14253  1D4D  3A02               	xorlw	2
 14254  1D4E  1D03               	skipz
 14255  1D4F  2D56               	goto	l5900
 14256                           
 14257                           ;LED_B1.c: 17: {
 14258                           ;LED_B1.c: 18: LED=&VarLED2;
 14259  1D50  30D9               	movlw	_VarLED2& (0+255)
 14260  1D51  00A0               	movwf	??_LedPointSelect
 14261  1D52  0820               	movf	??_LedPointSelect,w
 14262  1D53  0021               	movlb	1	; select bank1
 14263  1D54  00BD               	movwf	_LED^(0+128)
 14264                           
 14265                           ;LED_B1.c: 19: }
 14266  1D55  0008               	return
 14267  1D56                     l5900:	
 14268                           
 14269                           ;LED_B1.c: 28: else if(led == 99)
 14270  1D56  0020               	movlb	0	; select bank0
 14271  1D57  0821               	movf	LedPointSelect@led,w
 14272  1D58  3A63               	xorlw	99
 14273  1D59  1D03               	skipz
 14274  1D5A  0008               	return
 14275                           
 14276                           ;LED_B1.c: 29: {
 14277                           ;LED_B1.c: 30: LED=&VarErrLED;
 14278  1D5B  30D1               	movlw	_VarErrLED& (0+255)
 14279  1D5C  00A0               	movwf	??_LedPointSelect
 14280  1D5D  0820               	movf	??_LedPointSelect,w
 14281  1D5E  0021               	movlb	1	; select bank1
 14282  1D5F  00BD               	movwf	_LED^(0+128)
 14283  1D60  0008               	return
 14284  1D61                     __end_of_LedPointSelect:	
 14285                           
 14286                           	psect	text81
 14287  1C1A                     __ptext81:	
 14288 ;; *************** function _DimmerLights_Close *****************
 14289 ;; Defined at:
 14290 ;;		line 255 in file "../src/Dimmer_B1.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;		None
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;		None
 14295 ;; Return value:  Size  Location     Type
 14296 ;;		None               void
 14297 ;; Registers used:
 14298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;Total ram usage:        0 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    6
 14311 ;; This function calls:
 14312 ;;		_getDimmerLights_StatusFlag
 14313 ;;		_setLoad_GO
 14314 ;; This function is called by:
 14315 ;;		_DimmerLights_Main
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           
 14320                           ;psect for function _DimmerLights_Close
 14321  1C1A                     _DimmerLights_Close:	
 14322                           
 14323                           ;Dimmer_B1.c: 256: if (Dimmer->Detect) {
 14324                           
 14325                           ;incstack = 0
 14326                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14327  1C1A  0021               	movlb	1	; select bank1
 14328  1C1B  083A               	movf	_Dimmer^(0+128),w
 14329  1C1C  0086               	movwf	6
 14330  1C1D  0187               	clrf	7
 14331  1C1E  1C01               	btfss	1,0
 14332  1C1F  0008               	return
 14333                           
 14334                           ;Dimmer_B1.c: 257: Dimmer->Detect = 0;
 14335  1C20  083A               	movf	_Dimmer^(0+128),w
 14336  1C21  0086               	movwf	6
 14337  1C22  0187               	clrf	7
 14338  1C23  1001               	bcf	1,0
 14339                           
 14340                           ;Dimmer_B1.c: 258: if (!getDimmerLights_StatusFlag()) {
 14341  1C24  319C  2400  319C   	fcall	_getDimmerLights_StatusFlag
 14342  1C27  3800               	iorlw	0
 14343  1C28  1D03               	skipz
 14344  1C29  0008               	return
 14345                           
 14346                           ;Dimmer_B1.c: 259: setLoad_GO(0);
 14347  1C2A  3000               	movlw	0
 14348  1C2B  3199  213A         	fcall	_setLoad_GO
 14349                           
 14350                           ;Dimmer_B1.c: 260: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 14351  1C2D  0021               	movlb	1	; select bank1
 14352  1C2E  0867               	movf	_Memory^(0+128),w
 14353  1C2F  3E22               	addlw	34
 14354  1C30  0086               	movwf	6
 14355  1C31  3002               	movlw	2	; select bank4/5
 14356  1C32  0087               	movwf	7
 14357  1C33  1481               	bsf	1,1
 14358  1C34  0008               	return
 14359  1C35                     __end_of_DimmerLights_Close:	
 14360                           
 14361                           	psect	text82
 14362  193A                     __ptext82:	
 14363 ;; *************** function _setLoad_GO *****************
 14364 ;; Defined at:
 14365 ;;		line 265 in file "../src/OverLoad_B1.c"
 14366 ;; Parameters:    Size  Location     Type
 14367 ;;  command         1    wreg     unsigned char 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;  command         1    0[BANK0 ] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;		None               void
 14372 ;; Registers used:
 14373 ;;		wreg, fsr1l, fsr1h
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;Total ram usage:        1 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    5
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_DimmerLights_Close
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           
 14394                           ;psect for function _setLoad_GO
 14395  193A                     _setLoad_GO:	
 14396                           
 14397                           ;incstack = 0
 14398                           ; Regs used in _setLoad_GO: [wregfsr1]
 14399                           ;setLoad_GO@command stored from wreg
 14400  193A  0020               	movlb	0	; select bank0
 14401  193B  00A0               	movwf	setLoad_GO@command
 14402                           
 14403                           ;OverLoad_B1.c: 266: Load->GO = command;
 14404  193C  087B               	movf	_Load,w
 14405  193D  0086               	movwf	6
 14406  193E  3002               	movlw	2	; select bank4/5
 14407  193F  0087               	movwf	7
 14408  1940  0820               	movf	setLoad_GO@command,w
 14409  1941  1081               	bcf	1,1
 14410  1942  1D03               	skipz
 14411  1943  1481               	bsf	1,1
 14412  1944  0008               	return
 14413  1945                     __end_of_setLoad_GO:	
 14414                           
 14415                           	psect	text83
 14416  1C00                     __ptext83:	
 14417 ;; *************** function _getDimmerLights_StatusFlag *****************
 14418 ;; Defined at:
 14419 ;;		line 340 in file "../src/Dimmer_B1.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;		None
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;  Status          1    1[BANK0 ] unsigned char 
 14424 ;; Return value:  Size  Location     Type
 14425 ;;                  1    wreg      unsigned char 
 14426 ;; Registers used:
 14427 ;;		wreg, fsr1l, fsr1h, status,2
 14428 ;; Tracked objects:
 14429 ;;		On entry : 0/0
 14430 ;;		On exit  : 0/0
 14431 ;;		Unchanged: 0/0
 14432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;Total ram usage:        3 bytes
 14438 ;; Hardware stack levels used:    1
 14439 ;; Hardware stack levels required when called:    5
 14440 ;; This function calls:
 14441 ;;		Nothing
 14442 ;; This function is called by:
 14443 ;;		_DimmerLights_Close
 14444 ;;		_DimmerLights_Exceptions
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           
 14449                           ;psect for function _getDimmerLights_StatusFlag
 14450  1C00                     _getDimmerLights_StatusFlag:	
 14451                           
 14452                           ;Dimmer_B1.c: 341: char Status = 0;
 14453                           
 14454                           ;incstack = 0
 14455                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 14456  1C00  0020               	movlb	0	; select bank0
 14457  1C01  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14458                           
 14459                           ;Dimmer_B1.c: 348: Status = (DimmerLights11->StatusFlag || DimmerLights22->StatusFlag) ?
      +                           1 : 0;
 14460  1C02  01A2               	clrf	_getDimmerLights_StatusFlag$1782
 14461  1C03  0AA2               	incf	_getDimmerLights_StatusFlag$1782,f
 14462  1C04  0021               	movlb	1	; select bank1
 14463  1C05  083B               	movf	_DimmerLights11^(0+128),w
 14464  1C06  0086               	movwf	6
 14465  1C07  3001               	movlw	1	; select bank2/3
 14466  1C08  0087               	movwf	7
 14467  1C09  1B01               	btfsc	1,6
 14468  1C0A  2C13               	goto	l6272
 14469  1C0B  083C               	movf	_DimmerLights22^(0+128),w
 14470  1C0C  0086               	movwf	6
 14471  1C0D  3001               	movlw	1	; select bank2/3
 14472  1C0E  0087               	movwf	7
 14473  1C0F  1B01               	btfsc	1,6
 14474  1C10  2C13               	goto	l6272
 14475  1C11  0020               	movlb	0	; select bank0
 14476  1C12  01A2               	clrf	_getDimmerLights_StatusFlag$1782
 14477  1C13                     l6272:	
 14478  1C13  0020               	movlb	0	; select bank0
 14479  1C14  0822               	movf	_getDimmerLights_StatusFlag$1782,w
 14480  1C15  00A0               	movwf	??_getDimmerLights_StatusFlag
 14481  1C16  0820               	movf	??_getDimmerLights_StatusFlag,w
 14482  1C17  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14483                           
 14484                           ;Dimmer_B1.c: 355: return Status;
 14485  1C18  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14486  1C19  0008               	return
 14487  1C1A                     __end_of_getDimmerLights_StatusFlag:	
 14488                           
 14489                           	psect	text84
 14490  1B6D                     __ptext84:	
 14491 ;; *************** function _DimmerLights_Initialization *****************
 14492 ;; Defined at:
 14493 ;;		line 195 in file "../src/Dimmer_B1.c"
 14494 ;; Parameters:    Size  Location     Type
 14495 ;;		None
 14496 ;; Auto vars:     Size  Location     Type
 14497 ;;		None
 14498 ;; Return value:  Size  Location     Type
 14499 ;;		None               void
 14500 ;; Registers used:
 14501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;Total ram usage:        1 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; Hardware stack levels required when called:    7
 14514 ;; This function calls:
 14515 ;;		_Dimmer_Initialization
 14516 ;;		_setDimmerLights_Initialization
 14517 ;; This function is called by:
 14518 ;;		_main
 14519 ;; This function uses a non-reentrant model
 14520 ;;
 14521                           
 14522                           
 14523                           ;psect for function _DimmerLights_Initialization
 14524  1B6D                     _DimmerLights_Initialization:	
 14525                           
 14526                           ;Dimmer_B1.c: 197: DimmerLights11 = &DimmerLights1;
 14527                           
 14528                           ;incstack = 0
 14529                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14530  1B6D  3020               	movlw	_DimmerLights1& (0+255)
 14531  1B6E  0020               	movlb	0	; select bank0
 14532  1B6F  00A4               	movwf	??_DimmerLights_Initialization
 14533  1B70  0824               	movf	??_DimmerLights_Initialization,w
 14534  1B71  0021               	movlb	1	; select bank1
 14535  1B72  00BB               	movwf	_DimmerLights11^(0+128)
 14536                           
 14537                           ;Dimmer_B1.c: 198: setDimmerLights_Initialization(1);
 14538  1B73  3001               	movlw	1
 14539  1B74  319E  26A0  319B   	fcall	_setDimmerLights_Initialization
 14540                           
 14541                           ;Dimmer_B1.c: 202: DimmerLights22 = &DimmerLights2;
 14542  1B77  302F               	movlw	_DimmerLights2& (0+255)
 14543  1B78  0020               	movlb	0	; select bank0
 14544  1B79  00A4               	movwf	??_DimmerLights_Initialization
 14545  1B7A  0824               	movf	??_DimmerLights_Initialization,w
 14546  1B7B  0021               	movlb	1	; select bank1
 14547  1B7C  00BC               	movwf	_DimmerLights22^(0+128)
 14548                           
 14549                           ;Dimmer_B1.c: 203: setDimmerLights_Initialization(2);
 14550  1B7D  3002               	movlw	2
 14551  1B7E  319E  26A0  319B   	fcall	_setDimmerLights_Initialization
 14552                           
 14553                           ;Dimmer_B1.c: 212: Dimmer_Initialization();
 14554  1B81  3198  20D2         	fcall	_Dimmer_Initialization
 14555  1B83  0008               	return
 14556  1B84                     __end_of_DimmerLights_Initialization:	
 14557                           
 14558                           	psect	text85
 14559  1EA0                     __ptext85:	
 14560 ;; *************** function _setDimmerLights_Initialization *****************
 14561 ;; Defined at:
 14562 ;;		line 217 in file "../src/Dimmer_B1.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;  lights          1    wreg     unsigned char 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  lights          1    3[BANK0 ] unsigned char 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;		None               void
 14569 ;; Registers used:
 14570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        2 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    6
 14583 ;; This function calls:
 14584 ;;		_DimmerLightsPointSelect
 14585 ;; This function is called by:
 14586 ;;		_DimmerLights_Initialization
 14587 ;; This function uses a non-reentrant model
 14588 ;;
 14589                           
 14590                           
 14591                           ;psect for function _setDimmerLights_Initialization
 14592  1EA0                     _setDimmerLights_Initialization:	
 14593                           
 14594                           ;incstack = 0
 14595                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14596                           ;setDimmerLights_Initialization@lights stored from wreg
 14597  1EA0  0020               	movlb	0	; select bank0
 14598  1EA1  00A3               	movwf	setDimmerLights_Initialization@lights
 14599                           
 14600                           ;Dimmer_B1.c: 218: DimmerLightsPointSelect(lights);
 14601  1EA2  0823               	movf	setDimmerLights_Initialization@lights,w
 14602  1EA3  319A  22C5         	fcall	_DimmerLightsPointSelect
 14603                           
 14604                           ;Dimmer_B1.c: 219: DimmerLights->Clear = 1;
 14605  1EA5  0878               	movf	_DimmerLights,w
 14606  1EA6  3E0C               	addlw	12
 14607  1EA7  0086               	movwf	6
 14608  1EA8  3001               	movlw	1	; select bank2/3
 14609  1EA9  0087               	movwf	7
 14610  1EAA  1401               	bsf	1,0
 14611                           
 14612                           ;Dimmer_B1.c: 225: DimmerLights->MaxmumValue = ((char)(65*1.5));
 14613  1EAB  3061               	movlw	97
 14614  1EAC  0020               	movlb	0	; select bank0
 14615  1EAD  00A2               	movwf	??_setDimmerLights_Initialization
 14616  1EAE  0878               	movf	_DimmerLights,w
 14617  1EAF  3E05               	addlw	5
 14618  1EB0  0086               	movwf	6
 14619  1EB1  3001               	movlw	1	; select bank2/3
 14620  1EB2  0087               	movwf	7
 14621  1EB3  0822               	movf	??_setDimmerLights_Initialization,w
 14622  1EB4  0081               	movwf	1
 14623                           
 14624                           ;Dimmer_B1.c: 226: DimmerLights->MinimumValue = ((char)(20*1.5));
 14625  1EB5  301E               	movlw	30
 14626  1EB6  00A2               	movwf	??_setDimmerLights_Initialization
 14627  1EB7  0878               	movf	_DimmerLights,w
 14628  1EB8  3E06               	addlw	6
 14629  1EB9  0086               	movwf	6
 14630  1EBA  3001               	movlw	1	; select bank2/3
 14631  1EBB  0087               	movwf	7
 14632  1EBC  0822               	movf	??_setDimmerLights_Initialization,w
 14633  1EBD  0081               	movwf	1
 14634                           
 14635                           ;Dimmer_B1.c: 240: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14636  1EBE  0878               	movf	_DimmerLights,w
 14637  1EBF  3E05               	addlw	5
 14638  1EC0  0086               	movwf	6
 14639  1EC1  3001               	movlw	1	; select bank2/3
 14640  1EC2  0087               	movwf	7
 14641  1EC3  0801               	movf	1,w
 14642  1EC4  00A2               	movwf	??_setDimmerLights_Initialization
 14643  1EC5  0878               	movf	_DimmerLights,w
 14644  1EC6  3E04               	addlw	4
 14645  1EC7  0086               	movwf	6
 14646  1EC8  3001               	movlw	1	; select bank2/3
 14647  1EC9  0087               	movwf	7
 14648  1ECA  0822               	movf	??_setDimmerLights_Initialization,w
 14649  1ECB  0081               	movwf	1
 14650  1ECC  0008               	return
 14651  1ECD                     __end_of_setDimmerLights_Initialization:	
 14652                           
 14653                           	psect	text86
 14654  18D2                     __ptext86:	
 14655 ;; *************** function _Dimmer_Initialization *****************
 14656 ;; Defined at:
 14657 ;;		line 639 in file "../src/Dimmer_B1.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;		None
 14660 ;; Auto vars:     Size  Location     Type
 14661 ;;		None
 14662 ;; Return value:  Size  Location     Type
 14663 ;;		None               void
 14664 ;; Registers used:
 14665 ;;		wreg
 14666 ;; Tracked objects:
 14667 ;;		On entry : 0/0
 14668 ;;		On exit  : 0/0
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;Total ram usage:        1 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; Hardware stack levels required when called:    5
 14678 ;; This function calls:
 14679 ;;		Nothing
 14680 ;; This function is called by:
 14681 ;;		_DimmerLights_Initialization
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685                           
 14686                           ;psect for function _Dimmer_Initialization
 14687  18D2                     _Dimmer_Initialization:	
 14688                           
 14689                           ;Dimmer_B1.c: 640: Dimmer = &Dimmer1;
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in _Dimmer_Initialization: [wreg]
 14693  18D2  30DD               	movlw	_Dimmer1& (0+255)
 14694  18D3  0020               	movlb	0	; select bank0
 14695  18D4  00A0               	movwf	??_Dimmer_Initialization
 14696  18D5  0820               	movf	??_Dimmer_Initialization,w
 14697  18D6  0021               	movlb	1	; select bank1
 14698  18D7  00BA               	movwf	_Dimmer^(0+128)
 14699  18D8  0008               	return
 14700  18D9                     __end_of_Dimmer_Initialization:	
 14701                           
 14702                           	psect	text87
 14703  18EF                     __ptext87:	
 14704 ;; *************** function _DelayOff_Main *****************
 14705 ;; Defined at:
 14706 ;;		line 41 in file "../src/DelayOff_B1.c"
 14707 ;; Parameters:    Size  Location     Type
 14708 ;;		None
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;		None
 14711 ;; Return value:  Size  Location     Type
 14712 ;;		None               void
 14713 ;; Registers used:
 14714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;Total ram usage:        0 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:   10
 14727 ;; This function calls:
 14728 ;;		_DlyOff_Main
 14729 ;; This function is called by:
 14730 ;;		_main
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           
 14735                           ;psect for function _DelayOff_Main
 14736  18EF                     _DelayOff_Main:	
 14737                           
 14738                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14739                           
 14740                           ;incstack = 0
 14741                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14742  18EF  3001               	movlw	1
 14743  18F0  3197  2787  3198   	fcall	_DlyOff_Main
 14744                           
 14745                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14746  18F3  3002               	movlw	2
 14747  18F4  3197  2787         	fcall	_DlyOff_Main
 14748  18F6  0008               	return
 14749  18F7                     __end_of_DelayOff_Main:	
 14750                           
 14751                           	psect	text88
 14752  1787                     __ptext88:	
 14753 ;; *************** function _DlyOff_Main *****************
 14754 ;; Defined at:
 14755 ;;		line 62 in file "../src/DelayOff_B1.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;  sw              1    wreg     unsigned char 
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  sw              1   68[BANK0 ] unsigned char 
 14760 ;; Return value:  Size  Location     Type
 14761 ;;		None               void
 14762 ;; Registers used:
 14763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14764 ;; Tracked objects:
 14765 ;;		On entry : 0/0
 14766 ;;		On exit  : 0/0
 14767 ;;		Unchanged: 0/0
 14768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;Total ram usage:        3 bytes
 14774 ;; Hardware stack levels used:    1
 14775 ;; Hardware stack levels required when called:    9
 14776 ;; This function calls:
 14777 ;;		_DelayOffPointSelect
 14778 ;;		_setBuz
 14779 ;;		_setDimmerLights_Switch
 14780 ;;		_setDimmerLights_Trigger
 14781 ;;		_setRFSW_Status
 14782 ;;		_setRF_DimmerLights
 14783 ;;		_setSw_Status
 14784 ;;		_setTxData
 14785 ;; This function is called by:
 14786 ;;		_DelayOff_Main
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function _DlyOff_Main
 14792  1787                     _DlyOff_Main:	
 14793                           
 14794                           ;incstack = 0
 14795                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14796                           ;DlyOff_Main@sw stored from wreg
 14797  1787  0020               	movlb	0	; select bank0
 14798  1788  00E4               	movwf	DlyOff_Main@sw
 14799                           
 14800                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14801  1789  0864               	movf	DlyOff_Main@sw,w
 14802  178A  319B  2356  3197   	fcall	_DelayOffPointSelect
 14803                           
 14804                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 14805  178D  0021               	movlb	1	; select bank1
 14806  178E  0839               	movf	_DelayOff^(0+128),w
 14807  178F  0086               	movwf	6
 14808  1790  0187               	clrf	7
 14809  1791  1C81               	btfss	1,1
 14810  1792  0008               	return
 14811                           
 14812                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14813  1793  0839               	movf	_DelayOff^(0+128),w
 14814  1794  3E02               	addlw	2
 14815  1795  0086               	movwf	6
 14816  1796  0187               	clrf	7
 14817  1797  3001               	movlw	1
 14818  1798  0781               	addwf	1,f
 14819  1799  3141               	addfsr 1,1
 14820  179A  1803               	skipnc
 14821  179B  0A81               	incf	1,f
 14822                           
 14823                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14824  179C  0839               	movf	_DelayOff^(0+128),w
 14825  179D  3E02               	addlw	2
 14826  179E  0086               	movwf	6
 14827  179F  0187               	clrf	7
 14828  17A0  3F40               	moviw [0]fsr1
 14829  17A1  0020               	movlb	0	; select bank0
 14830  17A2  00E2               	movwf	??_DlyOff_Main
 14831  17A3  3F41               	moviw [1]fsr1
 14832  17A4  00E3               	movwf	??_DlyOff_Main+1
 14833  17A5  3016               	movlw	22
 14834  17A6  0263               	subwf	??_DlyOff_Main+1,w
 14835  17A7  3012               	movlw	18
 14836  17A8  1903               	skipnz
 14837  17A9  0262               	subwf	??_DlyOff_Main,w
 14838  17AA  1C03               	skipc
 14839  17AB  0008               	return
 14840                           
 14841                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14842  17AC  0021               	movlb	1	; select bank1
 14843  17AD  0839               	movf	_DelayOff^(0+128),w
 14844  17AE  3E02               	addlw	2
 14845  17AF  0086               	movwf	6
 14846  17B0  0187               	clrf	7
 14847  17B1  3000               	movlw	0
 14848  17B2  3FC0               	movwi [0]fsr1
 14849  17B3  3FC1               	movwi [1]fsr1
 14850                           
 14851                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14852  17B4  3001               	movlw	1
 14853  17B5  0020               	movlb	0	; select bank0
 14854  17B6  00E2               	movwf	??_DlyOff_Main
 14855  17B7  0021               	movlb	1	; select bank1
 14856  17B8  0839               	movf	_DelayOff^(0+128),w
 14857  17B9  3E04               	addlw	4
 14858  17BA  0086               	movwf	6
 14859  17BB  0187               	clrf	7
 14860  17BC  0020               	movlb	0	; select bank0
 14861  17BD  0862               	movf	??_DlyOff_Main,w
 14862  17BE  0781               	addwf	1,f
 14863                           
 14864                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14865  17BF  0021               	movlb	1	; select bank1
 14866  17C0  0839               	movf	_DelayOff^(0+128),w
 14867  17C1  3E04               	addlw	4
 14868  17C2  0086               	movwf	6
 14869  17C3  0187               	clrf	7
 14870  17C4  0A39               	incf	_DelayOff^(0+128),w
 14871  17C5  0084               	movwf	4
 14872  17C6  0185               	clrf	5
 14873  17C7  0800               	movf	0,w
 14874  17C8  0201               	subwf	1,w
 14875  17C9  1C03               	skipc
 14876  17CA  0008               	return
 14877                           
 14878                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14879  17CB  0839               	movf	_DelayOff^(0+128),w
 14880  17CC  3E04               	addlw	4
 14881  17CD  0086               	movwf	6
 14882  17CE  0187               	clrf	7
 14883  17CF  0181               	clrf	1
 14884                           
 14885                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14886  17D0  0839               	movf	_DelayOff^(0+128),w
 14887  17D1  0086               	movwf	6
 14888  17D2  0187               	clrf	7
 14889  17D3  1081               	bcf	1,1
 14890                           
 14891                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 14892  17D4  0020               	movlb	0	; select bank0
 14893  17D5  01A2               	clrf	setSw_Status@command
 14894  17D6  0864               	movf	DlyOff_Main@sw,w
 14895  17D7  3199  21F4  3197   	fcall	_setSw_Status
 14896                           
 14897                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 14898  17DA  0020               	movlb	0	; select bank0
 14899  17DB  01A2               	clrf	setRFSW_Status@command
 14900  17DC  0864               	movf	DlyOff_Main@sw,w
 14901  17DD  3199  21E5  3197   	fcall	_setRFSW_Status
 14902                           
 14903                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 14904  17E0  0020               	movlb	0	; select bank0
 14905  17E1  01DD               	clrf	setRF_DimmerLights@on
 14906  17E2  0864               	movf	DlyOff_Main@sw,w
 14907  17E3  3195  25CB  3197   	fcall	_setRF_DimmerLights
 14908                           
 14909                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 14910  17E6  0020               	movlb	0	; select bank0
 14911  17E7  01A2               	clrf	setDimmerLights_Trigger@command
 14912  17E8  0AA2               	incf	setDimmerLights_Trigger@command,f
 14913  17E9  0864               	movf	DlyOff_Main@sw,w
 14914  17EA  319A  2241  3197   	fcall	_setDimmerLights_Trigger
 14915                           
 14916                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 14917  17ED  0020               	movlb	0	; select bank0
 14918  17EE  01A2               	clrf	setDimmerLights_Switch@command
 14919  17EF  0864               	movf	DlyOff_Main@sw,w
 14920  17F0  319A  2231  3197   	fcall	_setDimmerLights_Switch
 14921                           
 14922                           ;DelayOff_B1.c: 77: setTxData(1);
 14923  17F3  3001               	movlw	1
 14924  17F4  318D  254A  3197   	fcall	_setTxData
 14925                           
 14926                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 14927  17F7  3064               	movlw	100
 14928  17F8  0020               	movlb	0	; select bank0
 14929  17F9  00A6               	movwf	setBuz@time
 14930  17FA  3000               	movlw	0
 14931  17FB  00A7               	movwf	setBuz@time+1
 14932  17FC  3001               	movlw	1
 14933  17FD  3189  214F         	fcall	_setBuz
 14934  17FF  0008               	return
 14935  1800                     __end_of_DlyOff_Main:	
 14936                           
 14937                           	psect	text89
 14938  0D4A                     __ptext89:	
 14939 ;; *************** function _setTxData *****************
 14940 ;; Defined at:
 14941 ;;		line 131 in file "../src/RF_Control_B1.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  rf              1    wreg     unsigned char 
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  rf              1    3[BANK0 ] unsigned char 
 14946 ;;  i               1    0        unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;		None               void
 14949 ;; Registers used:
 14950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;Total ram usage:        2 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    6
 14963 ;; This function calls:
 14964 ;;		_RfPointSelect
 14965 ;; This function is called by:
 14966 ;;		_DlyOff_Main
 14967 ;;		_setDimmerLights_Adj
 14968 ;;		_setControl_Lights_Table
 14969 ;;		_setRFSW_Control
 14970 ;;		_setRFSW_AdjControl
 14971 ;;		_Sw_DimmerOnFunc
 14972 ;;		_Sw_DimmerOffFunc
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           
 14977                           ;psect for function _setTxData
 14978  0D4A                     _setTxData:	
 14979                           
 14980                           ;incstack = 0
 14981                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14982                           ;setTxData@rf stored from wreg
 14983  0D4A  0020               	movlb	0	; select bank0
 14984  0D4B  00A3               	movwf	setTxData@rf
 14985                           
 14986                           ;RF_Control_B1.c: 132: char i;
 14987                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 14988  0D4C  0823               	movf	setTxData@rf,w
 14989  0D4D  3199  2174  318D   	fcall	_RfPointSelect
 14990                           
 14991                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 14992  0D50  0021               	movlb	1	; select bank1
 14993  0D51  083E               	movf	_RF^(0+128),w
 14994  0D52  0086               	movwf	6
 14995  0D53  0187               	clrf	7
 14996  0D54  1C01               	btfss	1,0
 14997  0D55  0008               	return
 14998                           
 14999                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 15000  0D56  083E               	movf	_RF^(0+128),w
 15001  0D57  0086               	movwf	6
 15002  0D58  0187               	clrf	7
 15003  0D59  1901               	btfsc	1,2
 15004  0D5A  0008               	return
 15005                           
 15006                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 15007  0D5B  083E               	movf	_RF^(0+128),w
 15008  0D5C  0086               	movwf	6
 15009  0D5D  0187               	clrf	7
 15010  0D5E  1501               	bsf	1,2
 15011                           
 15012                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 15013  0D5F  3063               	movlw	99
 15014  0D60  0020               	movlb	0	; select bank0
 15015  0D61  00A2               	movwf	??_setTxData
 15016  0D62  0822               	movf	??_setTxData,w
 15017  0D63  0021               	movlb	1	; select bank1
 15018  0D64  00A0               	movwf	_RF_Data^(0+128)
 15019                           
 15020                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 15021  0D65  3002               	movlw	2
 15022  0D66  0020               	movlb	0	; select bank0
 15023  0D67  00A2               	movwf	??_setTxData
 15024  0D68  0822               	movf	??_setTxData,w
 15025  0D69  0021               	movlb	1	; select bank1
 15026  0D6A  00A1               	movwf	(_RF_Data^(0+128)+1)
 15027                           
 15028                           ;RF_Control_B1.c: 148: RF_Data[2] = product->Data[2];
 15029  0D6B  087D               	movf	_product,w
 15030  0D6C  0086               	movwf	6
 15031  0D6D  3001               	movlw	1	; select bank2/3
 15032  0D6E  0087               	movwf	7
 15033  0D6F  3001               	movlw	1	; select bank2/3
 15034  0D70  3F42               	moviw [2]fsr1
 15035  0D71  00A2               	movwf	(_RF_Data^(0+128)+2)
 15036                           
 15037                           ;RF_Control_B1.c: 149: RF_Data[3] = product->Data[3];
 15038  0D72  087D               	movf	_product,w
 15039  0D73  0086               	movwf	6
 15040  0D74  3001               	movlw	1	; select bank2/3
 15041  0D75  0087               	movwf	7
 15042  0D76  3001               	movlw	1	; select bank2/3
 15043  0D77  3F43               	moviw [3]fsr1
 15044  0D78  00A3               	movwf	(_RF_Data^(0+128)+3)
 15045                           
 15046                           ;RF_Control_B1.c: 150: RF_Data[4] = product->Data[4];
 15047  0D79  087D               	movf	_product,w
 15048  0D7A  0086               	movwf	6
 15049  0D7B  3001               	movlw	1	; select bank2/3
 15050  0D7C  0087               	movwf	7
 15051  0D7D  3001               	movlw	1	; select bank2/3
 15052  0D7E  3F44               	moviw [4]fsr1
 15053  0D7F  00A4               	movwf	(_RF_Data^(0+128)+4)
 15054                           
 15055                           ;RF_Control_B1.c: 151: RF_Data[5] = product->Data[5];
 15056  0D80  087D               	movf	_product,w
 15057  0D81  0086               	movwf	6
 15058  0D82  3001               	movlw	1	; select bank2/3
 15059  0D83  0087               	movwf	7
 15060  0D84  3001               	movlw	1	; select bank2/3
 15061  0D85  3F45               	moviw [5]fsr1
 15062  0D86  00A5               	movwf	(_RF_Data^(0+128)+5)
 15063                           
 15064                           ;RF_Control_B1.c: 152: RF_Data[6] = product->Data[6];
 15065  0D87  087D               	movf	_product,w
 15066  0D88  0086               	movwf	6
 15067  0D89  3001               	movlw	1	; select bank2/3
 15068  0D8A  0087               	movwf	7
 15069  0D8B  3001               	movlw	1	; select bank2/3
 15070  0D8C  3F46               	moviw [6]fsr1
 15071  0D8D  00A6               	movwf	(_RF_Data^(0+128)+6)
 15072                           
 15073                           ;RF_Control_B1.c: 153: RF_Data[7] = product->Data[7];
 15074  0D8E  087D               	movf	_product,w
 15075  0D8F  0086               	movwf	6
 15076  0D90  3001               	movlw	1	; select bank2/3
 15077  0D91  0087               	movwf	7
 15078  0D92  3001               	movlw	1	; select bank2/3
 15079  0D93  3F47               	moviw [7]fsr1
 15080  0D94  00A7               	movwf	(_RF_Data^(0+128)+7)
 15081                           
 15082                           ;RF_Control_B1.c: 154: RF_Data[8] = product->Data[8];
 15083  0D95  087D               	movf	_product,w
 15084  0D96  0086               	movwf	6
 15085  0D97  3001               	movlw	1	; select bank2/3
 15086  0D98  0087               	movwf	7
 15087  0D99  3001               	movlw	1	; select bank2/3
 15088  0D9A  3F48               	moviw [8]fsr1
 15089  0D9B  00A8               	movwf	(_RF_Data^(0+128)+8)
 15090                           
 15091                           ;RF_Control_B1.c: 155: RF_Data[9] = product->Data[9];
 15092  0D9C  087D               	movf	_product,w
 15093  0D9D  0086               	movwf	6
 15094  0D9E  3001               	movlw	1	; select bank2/3
 15095  0D9F  0087               	movwf	7
 15096  0DA0  3001               	movlw	1	; select bank2/3
 15097  0DA1  3F49               	moviw [9]fsr1
 15098  0DA2  00A9               	movwf	(_RF_Data^(0+128)+9)
 15099                           
 15100                           ;RF_Control_B1.c: 156: RF_Data[10] = product->Data[10];
 15101  0DA3  087D               	movf	_product,w
 15102  0DA4  0086               	movwf	6
 15103  0DA5  3001               	movlw	1	; select bank2/3
 15104  0DA6  0087               	movwf	7
 15105  0DA7  3001               	movlw	1	; select bank2/3
 15106  0DA8  3F4A               	moviw [10]fsr1
 15107  0DA9  00AA               	movwf	(_RF_Data^(0+128)+10)
 15108                           
 15109                           ;RF_Control_B1.c: 157: RF_Data[11] = product->Data[11];
 15110  0DAA  087D               	movf	_product,w
 15111  0DAB  0086               	movwf	6
 15112  0DAC  3001               	movlw	1	; select bank2/3
 15113  0DAD  0087               	movwf	7
 15114  0DAE  3001               	movlw	1	; select bank2/3
 15115  0DAF  3F4B               	moviw [11]fsr1
 15116  0DB0  00AB               	movwf	(_RF_Data^(0+128)+11)
 15117                           
 15118                           ;RF_Control_B1.c: 158: RF_Data[12] = product->Data[12];
 15119  0DB1  087D               	movf	_product,w
 15120  0DB2  0086               	movwf	6
 15121  0DB3  3001               	movlw	1	; select bank2/3
 15122  0DB4  0087               	movwf	7
 15123  0DB5  3001               	movlw	1	; select bank2/3
 15124  0DB6  3F4C               	moviw [12]fsr1
 15125  0DB7  00AC               	movwf	(_RF_Data^(0+128)+12)
 15126                           
 15127                           ;RF_Control_B1.c: 159: RF_Data[13] = product->Data[13];
 15128  0DB8  087D               	movf	_product,w
 15129  0DB9  0086               	movwf	6
 15130  0DBA  3001               	movlw	1	; select bank2/3
 15131  0DBB  0087               	movwf	7
 15132  0DBC  3001               	movlw	1	; select bank2/3
 15133  0DBD  3F4D               	moviw [13]fsr1
 15134  0DBE  00AD               	movwf	(_RF_Data^(0+128)+13)
 15135                           
 15136                           ;RF_Control_B1.c: 160: RF_Data[14] = product->Data[14];
 15137  0DBF  087D               	movf	_product,w
 15138  0DC0  0086               	movwf	6
 15139  0DC1  3001               	movlw	1	; select bank2/3
 15140  0DC2  0087               	movwf	7
 15141  0DC3  3001               	movlw	1	; select bank2/3
 15142  0DC4  3F4E               	moviw [14]fsr1
 15143  0DC5  00AE               	movwf	(_RF_Data^(0+128)+14)
 15144                           
 15145                           ;RF_Control_B1.c: 161: RF_Data[15] = product->Data[15];
 15146  0DC6  087D               	movf	_product,w
 15147  0DC7  0086               	movwf	6
 15148  0DC8  3001               	movlw	1	; select bank2/3
 15149  0DC9  0087               	movwf	7
 15150  0DCA  3001               	movlw	1	; select bank2/3
 15151  0DCB  3F4F               	moviw [15]fsr1
 15152  0DCC  00AF               	movwf	(_RF_Data^(0+128)+15)
 15153                           
 15154                           ;RF_Control_B1.c: 162: RF_Data[16] = product->Data[16];
 15155  0DCD  087D               	movf	_product,w
 15156  0DCE  0086               	movwf	6
 15157  0DCF  3001               	movlw	1	; select bank2/3
 15158  0DD0  0087               	movwf	7
 15159  0DD1  3001               	movlw	1	; select bank2/3
 15160  0DD2  3F50               	moviw [16]fsr1
 15161  0DD3  00B0               	movwf	(_RF_Data^(0+128)+16)
 15162                           
 15163                           ;RF_Control_B1.c: 163: RF_Data[17] = product->Data[17];
 15164  0DD4  087D               	movf	_product,w
 15165  0DD5  0086               	movwf	6
 15166  0DD6  3001               	movlw	1	; select bank2/3
 15167  0DD7  0087               	movwf	7
 15168  0DD8  3001               	movlw	1	; select bank2/3
 15169  0DD9  3F51               	moviw [17]fsr1
 15170  0DDA  00B1               	movwf	(_RF_Data^(0+128)+17)
 15171                           
 15172                           ;RF_Control_B1.c: 164: RF_Data[18] = product->Data[18];
 15173  0DDB  087D               	movf	_product,w
 15174  0DDC  0086               	movwf	6
 15175  0DDD  3001               	movlw	1	; select bank2/3
 15176  0DDE  0087               	movwf	7
 15177  0DDF  3001               	movlw	1	; select bank2/3
 15178  0DE0  3F52               	moviw [18]fsr1
 15179  0DE1  00B2               	movwf	(_RF_Data^(0+128)+18)
 15180                           
 15181                           ;RF_Control_B1.c: 165: RF_Data[19] = product->Data[19];
 15182  0DE2  087D               	movf	_product,w
 15183  0DE3  0086               	movwf	6
 15184  0DE4  3001               	movlw	1	; select bank2/3
 15185  0DE5  0087               	movwf	7
 15186  0DE6  3001               	movlw	1	; select bank2/3
 15187  0DE7  3F53               	moviw [19]fsr1
 15188  0DE8  00B3               	movwf	(_RF_Data^(0+128)+19)
 15189                           
 15190                           ;RF_Control_B1.c: 166: RF_Data[20] = 210;
 15191  0DE9  30D2               	movlw	210
 15192  0DEA  0020               	movlb	0	; select bank0
 15193  0DEB  00A2               	movwf	??_setTxData
 15194  0DEC  0822               	movf	??_setTxData,w
 15195  0DED  0021               	movlb	1	; select bank1
 15196  0DEE  00B4               	movwf	(_RF_Data^(0+128)+20)
 15197  0DEF  0008               	return
 15198  0DF0                     __end_of_setTxData:	
 15199                           
 15200                           	psect	text90
 15201  1974                     __ptext90:	
 15202 ;; *************** function _RfPointSelect *****************
 15203 ;; Defined at:
 15204 ;;		line 7 in file "../src/RF_Control_B1.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;  rf              1    wreg     unsigned char 
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  rf              1    1[BANK0 ] unsigned char 
 15209 ;; Return value:  Size  Location     Type
 15210 ;;		None               void
 15211 ;; Registers used:
 15212 ;;		wreg
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        2 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    5
 15225 ;; This function calls:
 15226 ;;		Nothing
 15227 ;; This function is called by:
 15228 ;;		_setRF_Learn
 15229 ;;		_setRF_RxStatus
 15230 ;;		_setRF_Main
 15231 ;;		_setTxData
 15232 ;;		_setRF_Enable
 15233 ;;		_RF_RxDisable
 15234 ;;		_getRxData
 15235 ;;		_setLog_Code
 15236 ;;		_setControl_Lights_Table
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           
 15241                           ;psect for function _RfPointSelect
 15242  1974                     _RfPointSelect:	
 15243                           
 15244                           ;incstack = 0
 15245                           ; Regs used in _RfPointSelect: [wreg]
 15246                           ;RfPointSelect@rf stored from wreg
 15247  1974  0020               	movlb	0	; select bank0
 15248  1975  00A1               	movwf	RfPointSelect@rf
 15249                           
 15250                           ;RF_Control_B1.c: 9: if (rf == 1) {
 15251  1976  0821               	movf	RfPointSelect@rf,w
 15252  1977  3A01               	xorlw	1
 15253  1978  1D03               	skipz
 15254  1979  0008               	return
 15255                           
 15256                           ;RF_Control_B1.c: 10: RF = &RF1;
 15257  197A  30E0               	movlw	_RF1& (0+255)
 15258  197B  00A0               	movwf	??_RfPointSelect
 15259  197C  0820               	movf	??_RfPointSelect,w
 15260  197D  0021               	movlb	1	; select bank1
 15261  197E  00BE               	movwf	_RF^(0+128)
 15262  197F  0008               	return
 15263  1980                     __end_of_RfPointSelect:	
 15264                           
 15265                           	psect	text91
 15266  19F4                     __ptext91:	
 15267 ;; *************** function _setSw_Status *****************
 15268 ;; Defined at:
 15269 ;;		line 105 in file "../src/Switch_B1.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;  sw              1    wreg     unsigned char 
 15272 ;;  command         1    2[BANK0 ] unsigned char 
 15273 ;; Auto vars:     Size  Location     Type
 15274 ;;  sw              1    3[BANK0 ] unsigned char 
 15275 ;; Return value:  Size  Location     Type
 15276 ;;		None               void
 15277 ;; Registers used:
 15278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15279 ;; Tracked objects:
 15280 ;;		On entry : 0/0
 15281 ;;		On exit  : 0/0
 15282 ;;		Unchanged: 0/0
 15283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15284 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;Total ram usage:        2 bytes
 15289 ;; Hardware stack levels used:    1
 15290 ;; Hardware stack levels required when called:    6
 15291 ;; This function calls:
 15292 ;;		_SwPointSelect
 15293 ;; This function is called by:
 15294 ;;		_DlyOff_Main
 15295 ;;		_setDimmerLights_ERROR
 15296 ;;		_setControl_Lights_Table
 15297 ;;		_setRFSW_Control
 15298 ;; This function uses a non-reentrant model
 15299 ;;
 15300                           
 15301                           
 15302                           ;psect for function _setSw_Status
 15303  19F4                     _setSw_Status:	
 15304                           
 15305                           ;incstack = 0
 15306                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15307                           ;setSw_Status@sw stored from wreg
 15308  19F4  0020               	movlb	0	; select bank0
 15309  19F5  00A3               	movwf	setSw_Status@sw
 15310                           
 15311                           ;Switch_B1.c: 106: SwPointSelect(sw);
 15312  19F6  0823               	movf	setSw_Status@sw,w
 15313  19F7  319A  22D8         	fcall	_SwPointSelect
 15314                           
 15315                           ;Switch_B1.c: 107: Sw->Status = command;
 15316  19F9  087A               	movf	_Sw,w
 15317  19FA  0086               	movwf	6
 15318  19FB  3001               	movlw	1	; select bank2/3
 15319  19FC  0087               	movwf	7
 15320  19FD  0020               	movlb	0	; select bank0
 15321  19FE  0822               	movf	setSw_Status@command,w
 15322  19FF  1301               	bcf	1,6
 15323  1A00  1D03               	skipz
 15324  1A01  1701               	bsf	1,6
 15325  1A02  0008               	return
 15326  1A03                     __end_of_setSw_Status:	
 15327                           
 15328                           	psect	text92
 15329  1AD8                     __ptext92:	
 15330 ;; *************** function _SwPointSelect *****************
 15331 ;; Defined at:
 15332 ;;		line 17 in file "../src/Switch_B1.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;  sw              1    wreg     unsigned char 
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  sw              1    1[BANK0 ] unsigned char 
 15337 ;; Return value:  Size  Location     Type
 15338 ;;		None               void
 15339 ;; Registers used:
 15340 ;;		wreg
 15341 ;; Tracked objects:
 15342 ;;		On entry : 0/0
 15343 ;;		On exit  : 0/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;Total ram usage:        2 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    5
 15353 ;; This function calls:
 15354 ;;		Nothing
 15355 ;; This function is called by:
 15356 ;;		_setSw_Enable
 15357 ;;		_setSw_Status
 15358 ;;		_setSw_Main
 15359 ;;		_Sw_Detect
 15360 ;; This function uses a non-reentrant model
 15361 ;;
 15362                           
 15363                           
 15364                           ;psect for function _SwPointSelect
 15365  1AD8                     _SwPointSelect:	
 15366                           
 15367                           ;incstack = 0
 15368                           ; Regs used in _SwPointSelect: [wreg]
 15369                           ;SwPointSelect@sw stored from wreg
 15370  1AD8  0020               	movlb	0	; select bank0
 15371  1AD9  00A1               	movwf	SwPointSelect@sw
 15372                           
 15373                           ;Switch_B1.c: 20: if (sw == 1) {
 15374  1ADA  0821               	movf	SwPointSelect@sw,w
 15375  1ADB  3A01               	xorlw	1
 15376  1ADC  1D03               	skipz
 15377  1ADD  2AE3               	goto	l5912
 15378                           
 15379                           ;Switch_B1.c: 21: Sw = &Sw1;
 15380  1ADE  304A               	movlw	_Sw1& (0+255)
 15381  1ADF  00A0               	movwf	??_SwPointSelect
 15382  1AE0  0820               	movf	??_SwPointSelect,w
 15383  1AE1  00FA               	movwf	_Sw
 15384                           
 15385                           ;Switch_B1.c: 22: }
 15386  1AE2  0008               	return
 15387  1AE3                     l5912:	
 15388                           
 15389                           ;Switch_B1.c: 25: else if (sw == 2) {
 15390  1AE3  0821               	movf	SwPointSelect@sw,w
 15391  1AE4  3A02               	xorlw	2
 15392  1AE5  1D03               	skipz
 15393  1AE6  0008               	return
 15394                           
 15395                           ;Switch_B1.c: 26: Sw = &Sw2;
 15396  1AE7  3053               	movlw	_Sw2& (0+255)
 15397  1AE8  00A0               	movwf	??_SwPointSelect
 15398  1AE9  0820               	movf	??_SwPointSelect,w
 15399  1AEA  00FA               	movwf	_Sw
 15400  1AEB  0008               	return
 15401  1AEC                     __end_of_SwPointSelect:	
 15402                           
 15403                           	psect	text93
 15404  15CB                     __ptext93:	
 15405 ;; *************** function _setRF_DimmerLights *****************
 15406 ;; Defined at:
 15407 ;;		line 398 in file "../src/RF_Control_B1.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;  lights          1    wreg     unsigned char 
 15410 ;;  on              1   61[BANK0 ] unsigned char 
 15411 ;; Auto vars:     Size  Location     Type
 15412 ;;  lights          1   65[BANK0 ] unsigned char 
 15413 ;;  status          1   64[BANK0 ] unsigned char 
 15414 ;; Return value:  Size  Location     Type
 15415 ;;		None               void
 15416 ;; Registers used:
 15417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15418 ;; Tracked objects:
 15419 ;;		On entry : 0/0
 15420 ;;		On exit  : 0/0
 15421 ;;		Unchanged: 0/0
 15422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;Total ram usage:        5 bytes
 15428 ;; Hardware stack levels used:    1
 15429 ;; Hardware stack levels required when called:    8
 15430 ;; This function calls:
 15431 ;;		_setPercentValue
 15432 ;; This function is called by:
 15433 ;;		_DlyOff_Main
 15434 ;;		_setDimmerLights_Adj
 15435 ;;		_setRFSW_Control
 15436 ;;		_Sw_DimmerOnFunc
 15437 ;;		_Sw_DimmerOffFunc
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           
 15442                           ;psect for function _setRF_DimmerLights
 15443  15CB                     _setRF_DimmerLights:	
 15444                           
 15445                           ;incstack = 0
 15446                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15447                           ;setRF_DimmerLights@lights stored from wreg
 15448  15CB  0020               	movlb	0	; select bank0
 15449  15CC  00E1               	movwf	setRF_DimmerLights@lights
 15450                           
 15451                           ;RF_Control_B1.c: 399: char status;
 15452                           ;RF_Control_B1.c: 400: status = 1;
 15453  15CD  01E0               	clrf	setRF_DimmerLights@status
 15454  15CE  0AE0               	incf	setRF_DimmerLights@status,f
 15455                           
 15456                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 15457  15CF  0861               	movf	setRF_DimmerLights@lights,w
 15458  15D0  3EFF               	addlw	-1
 15459  15D1  0A89               	incf	9,f
 15460  15D2  2DD5               	goto	u4450
 15461  15D3                     u4455:	
 15462  15D3  1003               	clrc
 15463  15D4  0DE0               	rlf	setRF_DimmerLights@status,f
 15464  15D5                     u4450:	
 15465  15D5  3EFF               	addlw	-1
 15466  15D6  1D03               	skipz
 15467  15D7  2DD3               	goto	u4455
 15468                           
 15469                           ;RF_Control_B1.c: 402: product->Data[11]=lights;
 15470  15D8  0861               	movf	setRF_DimmerLights@lights,w
 15471  15D9  00DE               	movwf	??_setRF_DimmerLights
 15472  15DA  087D               	movf	_product,w
 15473  15DB  3E0B               	addlw	11
 15474  15DC  0086               	movwf	6
 15475  15DD  3001               	movlw	1	; select bank2/3
 15476  15DE  0087               	movwf	7
 15477  15DF  085E               	movf	??_setRF_DimmerLights,w
 15478  15E0  0081               	movwf	1
 15479                           
 15480                           ;RF_Control_B1.c: 405: product->Data[(20 + lights)]=setPercentValue(((char)(65*1.5)));
 15481  15E1  3061               	movlw	97
 15482  15E2  3192  2248  3195   	fcall	_setPercentValue
 15483  15E5  0020               	movlb	0	; select bank0
 15484  15E6  00DE               	movwf	??_setRF_DimmerLights
 15485  15E7  0861               	movf	setRF_DimmerLights@lights,w
 15486  15E8  3E14               	addlw	20
 15487  15E9  077D               	addwf	_product,w
 15488  15EA  00DF               	movwf	??_setRF_DimmerLights+1
 15489  15EB  085F               	movf	??_setRF_DimmerLights+1,w
 15490  15EC  0086               	movwf	6
 15491  15ED  3001               	movlw	1	; select bank2/3
 15492  15EE  0087               	movwf	7
 15493  15EF  085E               	movf	??_setRF_DimmerLights,w
 15494  15F0  0081               	movwf	1
 15495                           
 15496                           ;RF_Control_B1.c: 408: product->Data[9]=product->Data[20 + lights];
 15497  15F1  0861               	movf	setRF_DimmerLights@lights,w
 15498  15F2  3E14               	addlw	20
 15499  15F3  077D               	addwf	_product,w
 15500  15F4  00DE               	movwf	??_setRF_DimmerLights
 15501  15F5  085E               	movf	??_setRF_DimmerLights,w
 15502  15F6  0086               	movwf	6
 15503  15F7  3001               	movlw	1	; select bank2/3
 15504  15F8  0087               	movwf	7
 15505  15F9  0801               	movf	1,w
 15506  15FA  00DF               	movwf	??_setRF_DimmerLights+1
 15507  15FB  087D               	movf	_product,w
 15508  15FC  3E09               	addlw	9
 15509  15FD  0086               	movwf	6
 15510  15FE  3001               	movlw	1	; select bank2/3
 15511  15FF  0087               	movwf	7
 15512  1600  085F               	movf	??_setRF_DimmerLights+1,w
 15513  1601  0081               	movwf	1
 15514                           
 15515                           ;RF_Control_B1.c: 409: product->Data[17]=product->Data[26 + lights];
 15516  1602  0861               	movf	setRF_DimmerLights@lights,w
 15517  1603  3E1A               	addlw	26
 15518  1604  077D               	addwf	_product,w
 15519  1605  00DE               	movwf	??_setRF_DimmerLights
 15520  1606  085E               	movf	??_setRF_DimmerLights,w
 15521  1607  0086               	movwf	6
 15522  1608  3001               	movlw	1	; select bank2/3
 15523  1609  0087               	movwf	7
 15524  160A  0801               	movf	1,w
 15525  160B  00DF               	movwf	??_setRF_DimmerLights+1
 15526  160C  087D               	movf	_product,w
 15527  160D  3E11               	addlw	17
 15528  160E  0086               	movwf	6
 15529  160F  3001               	movlw	1	; select bank2/3
 15530  1610  0087               	movwf	7
 15531  1611  085F               	movf	??_setRF_DimmerLights+1,w
 15532  1612  0081               	movwf	1
 15533                           
 15534                           ;RF_Control_B1.c: 410: if (on) {
 15535  1613  085D               	movf	setRF_DimmerLights@on,w
 15536  1614  1903               	btfsc	3,2
 15537  1615  2E26               	goto	l5966
 15538                           
 15539                           ;RF_Control_B1.c: 411: product->Data[15]=(product->Data[15] | status);
 15540  1616  087D               	movf	_product,w
 15541  1617  3E0F               	addlw	15
 15542  1618  0086               	movwf	6
 15543  1619  3001               	movlw	1	; select bank2/3
 15544  161A  0087               	movwf	7
 15545  161B  0801               	movf	1,w
 15546  161C  0460               	iorwf	setRF_DimmerLights@status,w
 15547  161D  00DE               	movwf	??_setRF_DimmerLights
 15548  161E  087D               	movf	_product,w
 15549  161F  3E0F               	addlw	15
 15550  1620  0086               	movwf	6
 15551  1621  3001               	movlw	1	; select bank2/3
 15552  1622  0087               	movwf	7
 15553  1623  085E               	movf	??_setRF_DimmerLights,w
 15554  1624  0081               	movwf	1
 15555                           
 15556                           ;RF_Control_B1.c: 412: } else {
 15557  1625  0008               	return
 15558  1626                     l5966:	
 15559                           
 15560                           ;RF_Control_B1.c: 413: product->Data[15]=(product->Data[15]&(~status));
 15561  1626  087D               	movf	_product,w
 15562  1627  3E0F               	addlw	15
 15563  1628  0086               	movwf	6
 15564  1629  3001               	movlw	1	; select bank2/3
 15565  162A  0087               	movwf	7
 15566  162B  0960               	comf	setRF_DimmerLights@status,w
 15567  162C  0501               	andwf	1,w
 15568  162D  00DE               	movwf	??_setRF_DimmerLights
 15569  162E  087D               	movf	_product,w
 15570  162F  3E0F               	addlw	15
 15571  1630  0086               	movwf	6
 15572  1631  3001               	movlw	1	; select bank2/3
 15573  1632  0087               	movwf	7
 15574  1633  085E               	movf	??_setRF_DimmerLights,w
 15575  1634  0081               	movwf	1
 15576  1635  0008               	return
 15577  1636                     __end_of_setRF_DimmerLights:	
 15578                           
 15579                           	psect	text94
 15580  1248                     __ptext94:	
 15581 ;; *************** function _setPercentValue *****************
 15582 ;; Defined at:
 15583 ;;		line 622 in file "../src/Dimmer_B1.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  value           1    wreg     unsigned char 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  value           1   57[BANK0 ] unsigned char 
 15588 ;;  i               3   58[BANK0 ] float 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;                  1    wreg      unsigned char 
 15591 ;; Registers used:
 15592 ;;		wreg, status,2, status,0, pclath, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;Total ram usage:        4 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    7
 15605 ;; This function calls:
 15606 ;;		___awtoft
 15607 ;;		___ftdiv
 15608 ;;		___fttol
 15609 ;; This function is called by:
 15610 ;;		_Flash_Memory_Initialization
 15611 ;;		_setRF_DimmerLights
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           
 15616                           ;psect for function _setPercentValue
 15617  1248                     _setPercentValue:	
 15618                           
 15619                           ;incstack = 0
 15620                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15621                           ;setPercentValue@value stored from wreg
 15622  1248  0020               	movlb	0	; select bank0
 15623  1249  00D9               	movwf	setPercentValue@value
 15624                           
 15625                           ;Dimmer_B1.c: 630: float i = ((char)(65*1.5)) - ((char)(20*1.5));
 15626  124A  3000               	movlw	0
 15627  124B  00DA               	movwf	setPercentValue@i
 15628  124C  3086               	movlw	134
 15629  124D  00DB               	movwf	setPercentValue@i+1
 15630  124E  3042               	movlw	66
 15631  124F  00DC               	movwf	setPercentValue@i+2
 15632                           
 15633                           ;Dimmer_B1.c: 631: i /= 100;
 15634  1250  3000               	movlw	0
 15635  1251  00AE               	movwf	___ftdiv@f2
 15636  1252  30C8               	movlw	200
 15637  1253  00AF               	movwf	___ftdiv@f2+1
 15638  1254  3042               	movlw	66
 15639  1255  00B0               	movwf	___ftdiv@f2+2
 15640  1256  085A               	movf	setPercentValue@i,w
 15641  1257  00B1               	movwf	___ftdiv@f1
 15642  1258  085B               	movf	setPercentValue@i+1,w
 15643  1259  00B2               	movwf	___ftdiv@f1+1
 15644  125A  085C               	movf	setPercentValue@i+2,w
 15645  125B  00B3               	movwf	___ftdiv@f1+2
 15646  125C  318D  25F0  3192   	fcall	___ftdiv
 15647  125F  0020               	movlb	0	; select bank0
 15648  1260  082E               	movf	?___ftdiv,w
 15649  1261  00DA               	movwf	setPercentValue@i
 15650  1262  082F               	movf	?___ftdiv+1,w
 15651  1263  00DB               	movwf	setPercentValue@i+1
 15652  1264  0830               	movf	?___ftdiv+2,w
 15653  1265  00DC               	movwf	setPercentValue@i+2
 15654                           
 15655                           ;Dimmer_B1.c: 632: return (100 - (char) ((value - ((char)(65*1.5))) / i));
 15656  1266  0859               	movf	setPercentValue@value,w
 15657  1267  3E9F               	addlw	159
 15658  1268  00A8               	movwf	___awtoft@c
 15659  1269  30FF               	movlw	255
 15660  126A  1803               	skipnc
 15661  126B  3000               	movlw	0
 15662  126C  00A9               	movwf	___awtoft@c+1
 15663  126D  319D  251D  3192   	fcall	___awtoft
 15664  1270  0020               	movlb	0	; select bank0
 15665  1271  0828               	movf	?___awtoft,w
 15666  1272  00B1               	movwf	___ftdiv@f1
 15667  1273  0829               	movf	?___awtoft+1,w
 15668  1274  00B2               	movwf	___ftdiv@f1+1
 15669  1275  082A               	movf	?___awtoft+2,w
 15670  1276  00B3               	movwf	___ftdiv@f1+2
 15671  1277  085A               	movf	setPercentValue@i,w
 15672  1278  00AE               	movwf	___ftdiv@f2
 15673  1279  085B               	movf	setPercentValue@i+1,w
 15674  127A  00AF               	movwf	___ftdiv@f2+1
 15675  127B  085C               	movf	setPercentValue@i+2,w
 15676  127C  00B0               	movwf	___ftdiv@f2+2
 15677  127D  318D  25F0  3192   	fcall	___ftdiv
 15678  1280  0020               	movlb	0	; select bank0
 15679  1281  082E               	movf	?___ftdiv,w
 15680  1282  00CB               	movwf	___fttol@f1
 15681  1283  082F               	movf	?___ftdiv+1,w
 15682  1284  00CC               	movwf	___fttol@f1+1
 15683  1285  0830               	movf	?___ftdiv+2,w
 15684  1286  00CD               	movwf	___fttol@f1+2
 15685  1287  3188  20C8         	fcall	___fttol
 15686  1289  0020               	movlb	0	; select bank0
 15687  128A  034B               	decf	?___fttol,w
 15688  128B  3AFF               	xorlw	255
 15689  128C  3E64               	addlw	100
 15690  128D  0008               	return
 15691  128E                     __end_of_setPercentValue:	
 15692                           
 15693                           	psect	text95
 15694  08C8                     __ptext95:	
 15695 ;; *************** function ___fttol *****************
 15696 ;; Defined at:
 15697 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;  f1              3   43[BANK0 ] float 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  lval            4   52[BANK0 ] unsigned long 
 15702 ;;  exp1            1   56[BANK0 ] unsigned char 
 15703 ;;  sign1           1   51[BANK0 ] unsigned char 
 15704 ;; Return value:  Size  Location     Type
 15705 ;;                  4   43[BANK0 ] long 
 15706 ;; Registers used:
 15707 ;;		wreg, status,2, status,0
 15708 ;; Tracked objects:
 15709 ;;		On entry : 0/0
 15710 ;;		On exit  : 0/0
 15711 ;;		Unchanged: 0/0
 15712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;Total ram usage:       14 bytes
 15718 ;; Hardware stack levels used:    1
 15719 ;; Hardware stack levels required when called:    5
 15720 ;; This function calls:
 15721 ;;		Nothing
 15722 ;; This function is called by:
 15723 ;;		_getPercentValue
 15724 ;;		_setPercentValue
 15725 ;; This function uses a non-reentrant model
 15726 ;;
 15727                           
 15728                           
 15729                           ;psect for function ___fttol
 15730  08C8                     ___fttol:	
 15731                           
 15732                           ;incstack = 0
 15733                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15734  08C8  0020               	movlb	0	; select bank0
 15735  08C9  084B               	movf	___fttol@f1,w
 15736  08CA  00CF               	movwf	??___fttol
 15737  08CB  084C               	movf	___fttol@f1+1,w
 15738  08CC  00D0               	movwf	??___fttol+1
 15739  08CD  084D               	movf	___fttol@f1+2,w
 15740  08CE  00D1               	movwf	??___fttol+2
 15741  08CF  1003               	clrc
 15742  08D0  0D50               	rlf	??___fttol+1,w
 15743  08D1  0D51               	rlf	??___fttol+2,w
 15744  08D2  00D2               	movwf	??___fttol+3
 15745  08D3  0852               	movf	??___fttol+3,w
 15746  08D4  00D8               	movwf	___fttol@exp1
 15747  08D5  08D8               	movf	___fttol@exp1,f
 15748  08D6  1D03               	skipz
 15749  08D7  28E1               	goto	l5794
 15750  08D8  3000               	movlw	0
 15751  08D9  00CE               	movwf	?___fttol+3
 15752  08DA  3000               	movlw	0
 15753  08DB  00CD               	movwf	?___fttol+2
 15754  08DC  3000               	movlw	0
 15755  08DD  00CC               	movwf	?___fttol+1
 15756  08DE  3000               	movlw	0
 15757  08DF  00CB               	movwf	?___fttol
 15758  08E0  0008               	return
 15759  08E1                     l5794:	
 15760  08E1  084B               	movf	___fttol@f1,w
 15761  08E2  00CF               	movwf	??___fttol
 15762  08E3  084C               	movf	___fttol@f1+1,w
 15763  08E4  00D0               	movwf	??___fttol+1
 15764  08E5  084D               	movf	___fttol@f1+2,w
 15765  08E6  00D1               	movwf	??___fttol+2
 15766  08E7  3017               	movlw	23
 15767  08E8                     u4185:	
 15768  08E8  36D1               	lsrf	??___fttol+2,f
 15769  08E9  0CD0               	rrf	??___fttol+1,f
 15770  08EA  0CCF               	rrf	??___fttol,f
 15771  08EB  0B89               	decfsz	9,f
 15772  08EC  28E8               	goto	u4185
 15773  08ED  084F               	movf	??___fttol,w
 15774  08EE  00D2               	movwf	??___fttol+3
 15775  08EF  0852               	movf	??___fttol+3,w
 15776  08F0  00D3               	movwf	___fttol@sign1
 15777  08F1  17CC               	bsf	___fttol@f1+1,7
 15778  08F2  30FF               	movlw	255
 15779  08F3  05CB               	andwf	___fttol@f1,f
 15780  08F4  30FF               	movlw	255
 15781  08F5  05CC               	andwf	___fttol@f1+1,f
 15782  08F6  3000               	movlw	0
 15783  08F7  05CD               	andwf	___fttol@f1+2,f
 15784  08F8  084B               	movf	___fttol@f1,w
 15785  08F9  00D4               	movwf	___fttol@lval
 15786  08FA  084C               	movf	___fttol@f1+1,w
 15787  08FB  00D5               	movwf	___fttol@lval+1
 15788  08FC  084D               	movf	___fttol@f1+2,w
 15789  08FD  00D6               	movwf	___fttol@lval+2
 15790  08FE  01D7               	clrf	___fttol@lval+3
 15791  08FF  308E               	movlw	142
 15792  0900  02D8               	subwf	___fttol@exp1,f
 15793  0901  1FD8               	btfss	___fttol@exp1,7
 15794  0902  291F               	goto	l5814
 15795  0903  0858               	movf	___fttol@exp1,w
 15796  0904  3A80               	xorlw	128
 15797  0905  3E8F               	addlw	143
 15798  0906  1803               	skipnc
 15799  0907  2911               	goto	l5812
 15800  0908  3000               	movlw	0
 15801  0909  00CE               	movwf	?___fttol+3
 15802  090A  3000               	movlw	0
 15803  090B  00CD               	movwf	?___fttol+2
 15804  090C  3000               	movlw	0
 15805  090D  00CC               	movwf	?___fttol+1
 15806  090E  3000               	movlw	0
 15807  090F  00CB               	movwf	?___fttol
 15808  0910  0008               	return
 15809  0911                     l5812:	
 15810  0911  3001               	movlw	1
 15811  0912                     u4215:	
 15812  0912  36D7               	lsrf	___fttol@lval+3,f
 15813  0913  0CD6               	rrf	___fttol@lval+2,f
 15814  0914  0CD5               	rrf	___fttol@lval+1,f
 15815  0915  0CD4               	rrf	___fttol@lval,f
 15816  0916  0B89               	decfsz	9,f
 15817  0917  2912               	goto	u4215
 15818  0918  3001               	movlw	1
 15819  0919  00CF               	movwf	??___fttol
 15820  091A  084F               	movf	??___fttol,w
 15821  091B  07D8               	addwf	___fttol@exp1,f
 15822  091C  1903               	btfsc	3,2
 15823  091D  2938               	goto	l5824
 15824  091E  2911               	goto	l5812
 15825  091F                     l5814:	
 15826  091F  3018               	movlw	24
 15827  0920  0258               	subwf	___fttol@exp1,w
 15828  0921  1C03               	skipc
 15829  0922  2935               	goto	l5822
 15830  0923  3000               	movlw	0
 15831  0924  00CE               	movwf	?___fttol+3
 15832  0925  3000               	movlw	0
 15833  0926  00CD               	movwf	?___fttol+2
 15834  0927  3000               	movlw	0
 15835  0928  00CC               	movwf	?___fttol+1
 15836  0929  3000               	movlw	0
 15837  092A  00CB               	movwf	?___fttol
 15838  092B  0008               	return
 15839  092C                     l5820:	
 15840  092C  3001               	movlw	1
 15841  092D                     u4245:	
 15842  092D  35D4               	lslf	___fttol@lval,f
 15843  092E  0DD5               	rlf	___fttol@lval+1,f
 15844  092F  0DD6               	rlf	___fttol@lval+2,f
 15845  0930  0DD7               	rlf	___fttol@lval+3,f
 15846  0931  0B89               	decfsz	9,f
 15847  0932  292D               	goto	u4245
 15848  0933  3001               	movlw	1
 15849  0934  02D8               	subwf	___fttol@exp1,f
 15850  0935                     l5822:	
 15851  0935  08D8               	movf	___fttol@exp1,f
 15852  0936  1D03               	skipz
 15853  0937  292C               	goto	l5820
 15854  0938                     l5824:	
 15855  0938  0853               	movf	___fttol@sign1,w
 15856  0939  1903               	btfsc	3,2
 15857  093A  2946               	goto	l5828
 15858  093B  09D4               	comf	___fttol@lval,f
 15859  093C  09D5               	comf	___fttol@lval+1,f
 15860  093D  09D6               	comf	___fttol@lval+2,f
 15861  093E  09D7               	comf	___fttol@lval+3,f
 15862  093F  0AD4               	incf	___fttol@lval,f
 15863  0940  1903               	skipnz
 15864  0941  0AD5               	incf	___fttol@lval+1,f
 15865  0942  1903               	skipnz
 15866  0943  0AD6               	incf	___fttol@lval+2,f
 15867  0944  1903               	skipnz
 15868  0945  0AD7               	incf	___fttol@lval+3,f
 15869  0946                     l5828:	
 15870  0946  0857               	movf	___fttol@lval+3,w
 15871  0947  00CE               	movwf	?___fttol+3
 15872  0948  0856               	movf	___fttol@lval+2,w
 15873  0949  00CD               	movwf	?___fttol+2
 15874  094A  0855               	movf	___fttol@lval+1,w
 15875  094B  00CC               	movwf	?___fttol+1
 15876  094C  0854               	movf	___fttol@lval,w
 15877  094D  00CB               	movwf	?___fttol
 15878  094E  0008               	return
 15879  094F                     __end_of___fttol:	
 15880                           
 15881                           	psect	text96
 15882  0DF0                     __ptext96:	
 15883 ;; *************** function ___ftdiv *****************
 15884 ;; Defined at:
 15885 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15886 ;; Parameters:    Size  Location     Type
 15887 ;;  f2              3   14[BANK0 ] float 
 15888 ;;  f1              3   17[BANK0 ] float 
 15889 ;; Auto vars:     Size  Location     Type
 15890 ;;  f3              3   25[BANK0 ] float 
 15891 ;;  sign            1   29[BANK0 ] unsigned char 
 15892 ;;  exp             1   28[BANK0 ] unsigned char 
 15893 ;;  cntr            1   24[BANK0 ] unsigned char 
 15894 ;; Return value:  Size  Location     Type
 15895 ;;                  3   14[BANK0 ] float 
 15896 ;; Registers used:
 15897 ;;		wreg, status,2, status,0, pclath, cstack
 15898 ;; Tracked objects:
 15899 ;;		On entry : 0/0
 15900 ;;		On exit  : 0/0
 15901 ;;		Unchanged: 0/0
 15902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15903 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15906 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15907 ;;Total ram usage:       16 bytes
 15908 ;; Hardware stack levels used:    1
 15909 ;; Hardware stack levels required when called:    6
 15910 ;; This function calls:
 15911 ;;		___ftpack
 15912 ;; This function is called by:
 15913 ;;		_getPercentValue
 15914 ;;		_setPercentValue
 15915 ;; This function uses a non-reentrant model
 15916 ;;
 15917                           
 15918                           
 15919                           ;psect for function ___ftdiv
 15920  0DF0                     ___ftdiv:	
 15921                           
 15922                           ;incstack = 0
 15923                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15924  0DF0  0020               	movlb	0	; select bank0
 15925  0DF1  0831               	movf	___ftdiv@f1,w
 15926  0DF2  00B4               	movwf	??___ftdiv
 15927  0DF3  0832               	movf	___ftdiv@f1+1,w
 15928  0DF4  00B5               	movwf	??___ftdiv+1
 15929  0DF5  0833               	movf	___ftdiv@f1+2,w
 15930  0DF6  00B6               	movwf	??___ftdiv+2
 15931  0DF7  1003               	clrc
 15932  0DF8  0D35               	rlf	??___ftdiv+1,w
 15933  0DF9  0D36               	rlf	??___ftdiv+2,w
 15934  0DFA  00B7               	movwf	??___ftdiv+3
 15935  0DFB  0837               	movf	??___ftdiv+3,w
 15936  0DFC  00BC               	movwf	___ftdiv@exp
 15937  0DFD  08BC               	movf	___ftdiv@exp,f
 15938  0DFE  1D03               	skipz
 15939  0DFF  2E07               	goto	l5702
 15940  0E00  3000               	movlw	0
 15941  0E01  00AE               	movwf	?___ftdiv
 15942  0E02  3000               	movlw	0
 15943  0E03  00AF               	movwf	?___ftdiv+1
 15944  0E04  3000               	movlw	0
 15945  0E05  00B0               	movwf	?___ftdiv+2
 15946  0E06  0008               	return
 15947  0E07                     l5702:	
 15948  0E07  082E               	movf	___ftdiv@f2,w
 15949  0E08  00B4               	movwf	??___ftdiv
 15950  0E09  082F               	movf	___ftdiv@f2+1,w
 15951  0E0A  00B5               	movwf	??___ftdiv+1
 15952  0E0B  0830               	movf	___ftdiv@f2+2,w
 15953  0E0C  00B6               	movwf	??___ftdiv+2
 15954  0E0D  1003               	clrc
 15955  0E0E  0D35               	rlf	??___ftdiv+1,w
 15956  0E0F  0D36               	rlf	??___ftdiv+2,w
 15957  0E10  00B7               	movwf	??___ftdiv+3
 15958  0E11  0837               	movf	??___ftdiv+3,w
 15959  0E12  00BD               	movwf	___ftdiv@sign
 15960  0E13  08BD               	movf	___ftdiv@sign,f
 15961  0E14  1D03               	skipz
 15962  0E15  2E1D               	goto	l5708
 15963  0E16  3000               	movlw	0
 15964  0E17  00AE               	movwf	?___ftdiv
 15965  0E18  3000               	movlw	0
 15966  0E19  00AF               	movwf	?___ftdiv+1
 15967  0E1A  3000               	movlw	0
 15968  0E1B  00B0               	movwf	?___ftdiv+2
 15969  0E1C  0008               	return
 15970  0E1D                     l5708:	
 15971  0E1D  3000               	movlw	0
 15972  0E1E  00B9               	movwf	___ftdiv@f3
 15973  0E1F  3000               	movlw	0
 15974  0E20  00BA               	movwf	___ftdiv@f3+1
 15975  0E21  3000               	movlw	0
 15976  0E22  00BB               	movwf	___ftdiv@f3+2
 15977  0E23  3089               	movlw	137
 15978  0E24  073D               	addwf	___ftdiv@sign,w
 15979  0E25  00B4               	movwf	??___ftdiv
 15980  0E26  0834               	movf	??___ftdiv,w
 15981  0E27  02BC               	subwf	___ftdiv@exp,f
 15982  0E28  0831               	movf	___ftdiv@f1,w
 15983  0E29  00B4               	movwf	??___ftdiv
 15984  0E2A  0832               	movf	___ftdiv@f1+1,w
 15985  0E2B  00B5               	movwf	??___ftdiv+1
 15986  0E2C  0833               	movf	___ftdiv@f1+2,w
 15987  0E2D  00B6               	movwf	??___ftdiv+2
 15988  0E2E  3010               	movlw	16
 15989  0E2F                     u3995:	
 15990  0E2F  36B6               	lsrf	??___ftdiv+2,f
 15991  0E30  0CB5               	rrf	??___ftdiv+1,f
 15992  0E31  0CB4               	rrf	??___ftdiv,f
 15993  0E32  0B89               	decfsz	9,f
 15994  0E33  2E2F               	goto	u3995
 15995  0E34  0834               	movf	??___ftdiv,w
 15996  0E35  00B7               	movwf	??___ftdiv+3
 15997  0E36  0837               	movf	??___ftdiv+3,w
 15998  0E37  00BD               	movwf	___ftdiv@sign
 15999  0E38  082E               	movf	___ftdiv@f2,w
 16000  0E39  00B4               	movwf	??___ftdiv
 16001  0E3A  082F               	movf	___ftdiv@f2+1,w
 16002  0E3B  00B5               	movwf	??___ftdiv+1
 16003  0E3C  0830               	movf	___ftdiv@f2+2,w
 16004  0E3D  00B6               	movwf	??___ftdiv+2
 16005  0E3E  3010               	movlw	16
 16006  0E3F                     u4005:	
 16007  0E3F  36B6               	lsrf	??___ftdiv+2,f
 16008  0E40  0CB5               	rrf	??___ftdiv+1,f
 16009  0E41  0CB4               	rrf	??___ftdiv,f
 16010  0E42  0B89               	decfsz	9,f
 16011  0E43  2E3F               	goto	u4005
 16012  0E44  0834               	movf	??___ftdiv,w
 16013  0E45  00B7               	movwf	??___ftdiv+3
 16014  0E46  0837               	movf	??___ftdiv+3,w
 16015  0E47  06BD               	xorwf	___ftdiv@sign,f
 16016  0E48  3080               	movlw	128
 16017  0E49  00B4               	movwf	??___ftdiv
 16018  0E4A  0834               	movf	??___ftdiv,w
 16019  0E4B  05BD               	andwf	___ftdiv@sign,f
 16020  0E4C  17B2               	bsf	___ftdiv@f1+1,7
 16021  0E4D  30FF               	movlw	255
 16022  0E4E  05B1               	andwf	___ftdiv@f1,f
 16023  0E4F  30FF               	movlw	255
 16024  0E50  05B2               	andwf	___ftdiv@f1+1,f
 16025  0E51  3000               	movlw	0
 16026  0E52  05B3               	andwf	___ftdiv@f1+2,f
 16027  0E53  17AF               	bsf	___ftdiv@f2+1,7
 16028  0E54  30FF               	movlw	255
 16029  0E55  05AE               	andwf	___ftdiv@f2,f
 16030  0E56  30FF               	movlw	255
 16031  0E57  05AF               	andwf	___ftdiv@f2+1,f
 16032  0E58  3000               	movlw	0
 16033  0E59  05B0               	andwf	___ftdiv@f2+2,f
 16034  0E5A  3018               	movlw	24
 16035  0E5B  00B4               	movwf	??___ftdiv
 16036  0E5C  0834               	movf	??___ftdiv,w
 16037  0E5D  00B8               	movwf	___ftdiv@cntr
 16038  0E5E                     l5722:	
 16039  0E5E  3001               	movlw	1
 16040  0E5F                     u4015:	
 16041  0E5F  35B9               	lslf	___ftdiv@f3,f
 16042  0E60  0DBA               	rlf	___ftdiv@f3+1,f
 16043  0E61  0DBB               	rlf	___ftdiv@f3+2,f
 16044  0E62  0B89               	decfsz	9,f
 16045  0E63  2E5F               	goto	u4015
 16046  0E64  0830               	movf	___ftdiv@f2+2,w
 16047  0E65  0233               	subwf	___ftdiv@f1+2,w
 16048  0E66  1D03               	skipz
 16049  0E67  2E6E               	goto	u4025
 16050  0E68  082F               	movf	___ftdiv@f2+1,w
 16051  0E69  0232               	subwf	___ftdiv@f1+1,w
 16052  0E6A  1D03               	skipz
 16053  0E6B  2E6E               	goto	u4025
 16054  0E6C  082E               	movf	___ftdiv@f2,w
 16055  0E6D  0231               	subwf	___ftdiv@f1,w
 16056  0E6E                     u4025:	
 16057  0E6E  1C03               	skipc
 16058  0E6F  2E77               	goto	l5730
 16059  0E70  082E               	movf	___ftdiv@f2,w
 16060  0E71  02B1               	subwf	___ftdiv@f1,f
 16061  0E72  082F               	movf	___ftdiv@f2+1,w
 16062  0E73  3BB2               	subwfb	___ftdiv@f1+1,f
 16063  0E74  0830               	movf	___ftdiv@f2+2,w
 16064  0E75  3BB3               	subwfb	___ftdiv@f1+2,f
 16065  0E76  1439               	bsf	___ftdiv@f3,0
 16066  0E77                     l5730:	
 16067  0E77  3001               	movlw	1
 16068  0E78                     u4035:	
 16069  0E78  35B1               	lslf	___ftdiv@f1,f
 16070  0E79  0DB2               	rlf	___ftdiv@f1+1,f
 16071  0E7A  0DB3               	rlf	___ftdiv@f1+2,f
 16072  0E7B  0B89               	decfsz	9,f
 16073  0E7C  2E78               	goto	u4035
 16074  0E7D  3001               	movlw	1
 16075  0E7E  02B8               	subwf	___ftdiv@cntr,f
 16076  0E7F  1D03               	btfss	3,2
 16077  0E80  2E5E               	goto	l5722
 16078  0E81  0839               	movf	___ftdiv@f3,w
 16079  0E82  00A0               	movwf	___ftpack@arg
 16080  0E83  083A               	movf	___ftdiv@f3+1,w
 16081  0E84  00A1               	movwf	___ftpack@arg+1
 16082  0E85  083B               	movf	___ftdiv@f3+2,w
 16083  0E86  00A2               	movwf	___ftpack@arg+2
 16084  0E87  083C               	movf	___ftdiv@exp,w
 16085  0E88  00B4               	movwf	??___ftdiv
 16086  0E89  0834               	movf	??___ftdiv,w
 16087  0E8A  00A3               	movwf	___ftpack@exp
 16088  0E8B  083D               	movf	___ftdiv@sign,w
 16089  0E8C  00B5               	movwf	??___ftdiv+1
 16090  0E8D  0835               	movf	??___ftdiv+1,w
 16091  0E8E  00A4               	movwf	___ftpack@sign
 16092  0E8F  3194  24A1         	fcall	___ftpack
 16093  0E91  0020               	movlb	0	; select bank0
 16094  0E92  0820               	movf	?___ftpack,w
 16095  0E93  00AE               	movwf	?___ftdiv
 16096  0E94  0821               	movf	?___ftpack+1,w
 16097  0E95  00AF               	movwf	?___ftdiv+1
 16098  0E96  0822               	movf	?___ftpack+2,w
 16099  0E97  00B0               	movwf	?___ftdiv+2
 16100  0E98  0008               	return
 16101  0E99                     __end_of___ftdiv:	
 16102                           
 16103                           	psect	text97
 16104  1D1D                     __ptext97:	
 16105 ;; *************** function ___awtoft *****************
 16106 ;; Defined at:
 16107 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16108 ;; Parameters:    Size  Location     Type
 16109 ;;  c               2    8[BANK0 ] int 
 16110 ;; Auto vars:     Size  Location     Type
 16111 ;;  sign            1   13[BANK0 ] unsigned char 
 16112 ;; Return value:  Size  Location     Type
 16113 ;;                  3    8[BANK0 ] float 
 16114 ;; Registers used:
 16115 ;;		wreg, status,2, status,0, pclath, cstack
 16116 ;; Tracked objects:
 16117 ;;		On entry : 0/0
 16118 ;;		On exit  : 0/0
 16119 ;;		Unchanged: 0/0
 16120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16121 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16124 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16125 ;;Total ram usage:        6 bytes
 16126 ;; Hardware stack levels used:    1
 16127 ;; Hardware stack levels required when called:    6
 16128 ;; This function calls:
 16129 ;;		___ftpack
 16130 ;; This function is called by:
 16131 ;;		_getPercentValue
 16132 ;;		_setPercentValue
 16133 ;; This function uses a non-reentrant model
 16134 ;;
 16135                           
 16136                           
 16137                           ;psect for function ___awtoft
 16138  1D1D                     ___awtoft:	
 16139                           
 16140                           ;incstack = 0
 16141                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16142  1D1D  0020               	movlb	0	; select bank0
 16143  1D1E  01AD               	clrf	___awtoft@sign
 16144  1D1F  1FA9               	btfss	___awtoft@c+1,7
 16145  1D20  2D28               	goto	l5620
 16146  1D21  09A8               	comf	___awtoft@c,f
 16147  1D22  09A9               	comf	___awtoft@c+1,f
 16148  1D23  0AA8               	incf	___awtoft@c,f
 16149  1D24  1903               	skipnz
 16150  1D25  0AA9               	incf	___awtoft@c+1,f
 16151  1D26  01AD               	clrf	___awtoft@sign
 16152  1D27  0AAD               	incf	___awtoft@sign,f
 16153  1D28                     l5620:	
 16154  1D28  0828               	movf	___awtoft@c,w
 16155  1D29  00A0               	movwf	___ftpack@arg
 16156  1D2A  0829               	movf	___awtoft@c+1,w
 16157  1D2B  00A1               	movwf	___ftpack@arg+1
 16158  1D2C  01A2               	clrf	___ftpack@arg+2
 16159  1D2D  308E               	movlw	142
 16160  1D2E  00AB               	movwf	??___awtoft
 16161  1D2F  082B               	movf	??___awtoft,w
 16162  1D30  00A3               	movwf	___ftpack@exp
 16163  1D31  082D               	movf	___awtoft@sign,w
 16164  1D32  00AC               	movwf	??___awtoft+1
 16165  1D33  082C               	movf	??___awtoft+1,w
 16166  1D34  00A4               	movwf	___ftpack@sign
 16167  1D35  3194  24A1         	fcall	___ftpack
 16168  1D37  0020               	movlb	0	; select bank0
 16169  1D38  0820               	movf	?___ftpack,w
 16170  1D39  00A8               	movwf	?___awtoft
 16171  1D3A  0821               	movf	?___ftpack+1,w
 16172  1D3B  00A9               	movwf	?___awtoft+1
 16173  1D3C  0822               	movf	?___ftpack+2,w
 16174  1D3D  00AA               	movwf	?___awtoft+2
 16175  1D3E  0008               	return
 16176  1D3F                     __end_of___awtoft:	
 16177                           
 16178                           	psect	text98
 16179  14A1                     __ptext98:	
 16180 ;; *************** function ___ftpack *****************
 16181 ;; Defined at:
 16182 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16183 ;; Parameters:    Size  Location     Type
 16184 ;;  arg             3    0[BANK0 ] unsigned um
 16185 ;;  exp             1    3[BANK0 ] unsigned char 
 16186 ;;  sign            1    4[BANK0 ] unsigned char 
 16187 ;; Auto vars:     Size  Location     Type
 16188 ;;		None
 16189 ;; Return value:  Size  Location     Type
 16190 ;;                  3    0[BANK0 ] float 
 16191 ;; Registers used:
 16192 ;;		wreg, status,2, status,0
 16193 ;; Tracked objects:
 16194 ;;		On entry : 0/0
 16195 ;;		On exit  : 0/0
 16196 ;;		Unchanged: 0/0
 16197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16198 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;Total ram usage:        8 bytes
 16203 ;; Hardware stack levels used:    1
 16204 ;; Hardware stack levels required when called:    5
 16205 ;; This function calls:
 16206 ;;		Nothing
 16207 ;; This function is called by:
 16208 ;;		___awtoft
 16209 ;;		___ftadd
 16210 ;;		___ftdiv
 16211 ;;		___ftmul
 16212 ;; This function uses a non-reentrant model
 16213 ;;
 16214                           
 16215                           
 16216                           ;psect for function ___ftpack
 16217  14A1                     ___ftpack:	
 16218                           
 16219                           ;incstack = 0
 16220                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16221  14A1  0020               	movlb	0	; select bank0
 16222  14A2  0823               	movf	___ftpack@exp,w
 16223  14A3  1903               	btfsc	3,2
 16224  14A4  2CAA               	goto	l5586
 16225  14A5  0822               	movf	___ftpack@arg+2,w
 16226  14A6  0421               	iorwf	___ftpack@arg+1,w
 16227  14A7  0420               	iorwf	___ftpack@arg,w
 16228  14A8  1D03               	skipz
 16229  14A9  2CBB               	goto	l5592
 16230  14AA                     l5586:	
 16231  14AA  3000               	movlw	0
 16232  14AB  00A0               	movwf	?___ftpack
 16233  14AC  3000               	movlw	0
 16234  14AD  00A1               	movwf	?___ftpack+1
 16235  14AE  3000               	movlw	0
 16236  14AF  00A2               	movwf	?___ftpack+2
 16237  14B0  0008               	return
 16238  14B1                     l5590:	
 16239  14B1  3001               	movlw	1
 16240  14B2  00A5               	movwf	??___ftpack
 16241  14B3  0825               	movf	??___ftpack,w
 16242  14B4  07A3               	addwf	___ftpack@exp,f
 16243  14B5  3001               	movlw	1
 16244  14B6                     u3645:	
 16245  14B6  36A2               	lsrf	___ftpack@arg+2,f
 16246  14B7  0CA1               	rrf	___ftpack@arg+1,f
 16247  14B8  0CA0               	rrf	___ftpack@arg,f
 16248  14B9  0B89               	decfsz	9,f
 16249  14BA  2CB6               	goto	u3645
 16250  14BB                     l5592:	
 16251  14BB  30FE               	movlw	254
 16252  14BC  0522               	andwf	___ftpack@arg+2,w
 16253  14BD  1903               	btfsc	3,2
 16254  14BE  2CD4               	goto	l3076
 16255  14BF  2CB1               	goto	l5590
 16256  14C0                     l5594:	
 16257  14C0  3001               	movlw	1
 16258  14C1  00A5               	movwf	??___ftpack
 16259  14C2  0825               	movf	??___ftpack,w
 16260  14C3  07A3               	addwf	___ftpack@exp,f
 16261  14C4  3001               	movlw	1
 16262  14C5  07A0               	addwf	___ftpack@arg,f
 16263  14C6  3000               	movlw	0
 16264  14C7  1803               	skipnc
 16265  14C8  3001               	movlw	1
 16266  14C9  07A1               	addwf	___ftpack@arg+1,f
 16267  14CA  3000               	movlw	0
 16268  14CB  1803               	skipnc
 16269  14CC  3001               	movlw	1
 16270  14CD  07A2               	addwf	___ftpack@arg+2,f
 16271  14CE  3001               	movlw	1
 16272  14CF                     u3665:	
 16273  14CF  36A2               	lsrf	___ftpack@arg+2,f
 16274  14D0  0CA1               	rrf	___ftpack@arg+1,f
 16275  14D1  0CA0               	rrf	___ftpack@arg,f
 16276  14D2  0B89               	decfsz	9,f
 16277  14D3  2CCF               	goto	u3665
 16278  14D4                     l3076:	
 16279  14D4  30FF               	movlw	255
 16280  14D5  0522               	andwf	___ftpack@arg+2,w
 16281  14D6  1903               	btfsc	3,2
 16282  14D7  2CE1               	goto	l5602
 16283  14D8  2CC0               	goto	l5594
 16284  14D9                     l5600:	
 16285  14D9  3001               	movlw	1
 16286  14DA  02A3               	subwf	___ftpack@exp,f
 16287  14DB  3001               	movlw	1
 16288  14DC                     u3685:	
 16289  14DC  35A0               	lslf	___ftpack@arg,f
 16290  14DD  0DA1               	rlf	___ftpack@arg+1,f
 16291  14DE  0DA2               	rlf	___ftpack@arg+2,f
 16292  14DF  0B89               	decfsz	9,f
 16293  14E0  2CDC               	goto	u3685
 16294  14E1                     l5602:	
 16295  14E1  1FA1               	btfss	___ftpack@arg+1,7
 16296  14E2  2CD9               	goto	l5600
 16297  14E3  1823               	btfsc	___ftpack@exp,0
 16298  14E4  2CEB               	goto	l3082
 16299  14E5  30FF               	movlw	255
 16300  14E6  05A0               	andwf	___ftpack@arg,f
 16301  14E7  307F               	movlw	127
 16302  14E8  05A1               	andwf	___ftpack@arg+1,f
 16303  14E9  30FF               	movlw	255
 16304  14EA  05A2               	andwf	___ftpack@arg+2,f
 16305  14EB                     l3082:	
 16306  14EB  1003               	clrc
 16307  14EC  0CA3               	rrf	___ftpack@exp,f
 16308  14ED  0823               	movf	___ftpack@exp,w
 16309  14EE  00A5               	movwf	??___ftpack
 16310  14EF  01A6               	clrf	??___ftpack+1
 16311  14F0  01A7               	clrf	??___ftpack+2
 16312  14F1  3010               	movlw	16
 16313  14F2                     u3715:	
 16314  14F2  35A5               	lslf	??___ftpack,f
 16315  14F3  0DA6               	rlf	??___ftpack+1,f
 16316  14F4  0DA7               	rlf	??___ftpack+2,f
 16317  14F5  0B89               	decfsz	9,f
 16318  14F6  2CF2               	goto	u3715
 16319  14F7  0825               	movf	??___ftpack,w
 16320  14F8  04A0               	iorwf	___ftpack@arg,f
 16321  14F9  0826               	movf	??___ftpack+1,w
 16322  14FA  04A1               	iorwf	___ftpack@arg+1,f
 16323  14FB  0827               	movf	??___ftpack+2,w
 16324  14FC  04A2               	iorwf	___ftpack@arg+2,f
 16325  14FD  0824               	movf	___ftpack@sign,w
 16326  14FE  1903               	btfsc	3,2
 16327  14FF  0008               	return
 16328  1500  17A2               	bsf	___ftpack@arg+2,7
 16329  1501  0008               	return
 16330  1502                     __end_of___ftpack:	
 16331                           
 16332                           	psect	text99
 16333  19E5                     __ptext99:	
 16334 ;; *************** function _setRFSW_Status *****************
 16335 ;; Defined at:
 16336 ;;		line 380 in file "../src/RF_Control_B1.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;  sw              1    wreg     unsigned char 
 16339 ;;  command         1    2[BANK0 ] unsigned char 
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;  sw              1    3[BANK0 ] unsigned char 
 16342 ;; Return value:  Size  Location     Type
 16343 ;;		None               void
 16344 ;; Registers used:
 16345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;Total ram usage:        2 bytes
 16356 ;; Hardware stack levels used:    1
 16357 ;; Hardware stack levels required when called:    6
 16358 ;; This function calls:
 16359 ;;		_RfSWPointSelect
 16360 ;; This function is called by:
 16361 ;;		_DlyOff_Main
 16362 ;;		_setDimmerLights_ERROR
 16363 ;;		_setControl_Lights_Table
 16364 ;;		_Sw_DimmerOnFunc
 16365 ;;		_Sw_DimmerAdjFunc
 16366 ;; This function uses a non-reentrant model
 16367 ;;
 16368                           
 16369                           
 16370                           ;psect for function _setRFSW_Status
 16371  19E5                     _setRFSW_Status:	
 16372                           
 16373                           ;incstack = 0
 16374                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16375                           ;setRFSW_Status@sw stored from wreg
 16376  19E5  0020               	movlb	0	; select bank0
 16377  19E6  00A3               	movwf	setRFSW_Status@sw
 16378                           
 16379                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 16380  19E7  0823               	movf	setRFSW_Status@sw,w
 16381  19E8  319B  232A         	fcall	_RfSWPointSelect
 16382                           
 16383                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 16384  19EA  0021               	movlb	1	; select bank1
 16385  19EB  083F               	movf	_RFSW^(0+128),w
 16386  19EC  0086               	movwf	6
 16387  19ED  0187               	clrf	7
 16388  19EE  0020               	movlb	0	; select bank0
 16389  19EF  0822               	movf	setRFSW_Status@command,w
 16390  19F0  1001               	bcf	1,0
 16391  19F1  1D03               	skipz
 16392  19F2  1401               	bsf	1,0
 16393  19F3  0008               	return
 16394  19F4                     __end_of_setRFSW_Status:	
 16395                           
 16396                           	psect	text100
 16397  1B2A                     __ptext100:	
 16398 ;; *************** function _RfSWPointSelect *****************
 16399 ;; Defined at:
 16400 ;;		line 315 in file "../src/RF_Control_B1.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  sw              1    wreg     unsigned char 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  sw              1    1[BANK0 ] unsigned char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;		None               void
 16407 ;; Registers used:
 16408 ;;		wreg
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;Total ram usage:        2 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; Hardware stack levels required when called:    5
 16421 ;; This function calls:
 16422 ;;		Nothing
 16423 ;; This function is called by:
 16424 ;;		_setRFSW_Control
 16425 ;;		_setRFSW_AdjControl
 16426 ;;		_setRFSW_Status
 16427 ;; This function uses a non-reentrant model
 16428 ;;
 16429                           
 16430                           
 16431                           ;psect for function _RfSWPointSelect
 16432  1B2A                     _RfSWPointSelect:	
 16433                           
 16434                           ;incstack = 0
 16435                           ; Regs used in _RfSWPointSelect: [wreg]
 16436                           ;RfSWPointSelect@sw stored from wreg
 16437  1B2A  0020               	movlb	0	; select bank0
 16438  1B2B  00A1               	movwf	RfSWPointSelect@sw
 16439                           
 16440                           ;RF_Control_B1.c: 317: if (sw == 1) {
 16441  1B2C  0821               	movf	RfSWPointSelect@sw,w
 16442  1B2D  3A01               	xorlw	1
 16443  1B2E  1D03               	skipz
 16444  1B2F  2B35               	goto	l2181
 16445                           
 16446                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 16447  1B30  30E5               	movlw	_RFSW1& (0+255)
 16448  1B31  00A0               	movwf	??_RfSWPointSelect
 16449  1B32  0820               	movf	??_RfSWPointSelect,w
 16450  1B33  0021               	movlb	1	; select bank1
 16451  1B34  00BF               	movwf	_RFSW^(0+128)
 16452  1B35                     l2181:	
 16453                           
 16454                           ;RF_Control_B1.c: 319: }
 16455                           ;RF_Control_B1.c: 322: if (sw == 2) {
 16456  1B35  0020               	movlb	0	; select bank0
 16457  1B36  0821               	movf	RfSWPointSelect@sw,w
 16458  1B37  3A02               	xorlw	2
 16459  1B38  1D03               	skipz
 16460  1B39  0008               	return
 16461                           
 16462                           ;RF_Control_B1.c: 323: RFSW = &RFSW2;
 16463  1B3A  30E6               	movlw	_RFSW2& (0+255)
 16464  1B3B  00A0               	movwf	??_RfSWPointSelect
 16465  1B3C  0820               	movf	??_RfSWPointSelect,w
 16466  1B3D  0021               	movlb	1	; select bank1
 16467  1B3E  00BF               	movwf	_RFSW^(0+128)
 16468  1B3F  0008               	return
 16469  1B40                     __end_of_RfSWPointSelect:	
 16470                           
 16471                           	psect	text101
 16472  1A41                     __ptext101:	
 16473 ;; *************** function _setDimmerLights_Trigger *****************
 16474 ;; Defined at:
 16475 ;;		line 563 in file "../src/Dimmer_B1.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;  lights          1    wreg     unsigned char 
 16478 ;;  command         1    2[BANK0 ] unsigned char 
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;  lights          1    3[BANK0 ] unsigned char 
 16481 ;; Return value:  Size  Location     Type
 16482 ;;		None               void
 16483 ;; Registers used:
 16484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16485 ;; Tracked objects:
 16486 ;;		On entry : 0/0
 16487 ;;		On exit  : 0/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16490 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;Total ram usage:        2 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; Hardware stack levels required when called:    6
 16497 ;; This function calls:
 16498 ;;		_DimmerLightsPointSelect
 16499 ;; This function is called by:
 16500 ;;		_DlyOff_Main
 16501 ;;		_setRFSW_Control
 16502 ;;		_Sw_DimmerOnFunc
 16503 ;;		_Sw_DimmerOffFunc
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           
 16508                           ;psect for function _setDimmerLights_Trigger
 16509  1A41                     _setDimmerLights_Trigger:	
 16510                           
 16511                           ;incstack = 0
 16512                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16513                           ;setDimmerLights_Trigger@lights stored from wreg
 16514  1A41  0020               	movlb	0	; select bank0
 16515  1A42  00A3               	movwf	setDimmerLights_Trigger@lights
 16516                           
 16517                           ;Dimmer_B1.c: 564: DimmerLightsPointSelect(lights);
 16518  1A43  0823               	movf	setDimmerLights_Trigger@lights,w
 16519  1A44  319A  22C5         	fcall	_DimmerLightsPointSelect
 16520                           
 16521                           ;Dimmer_B1.c: 565: DimmerLights->Trigger = command;
 16522  1A46  0878               	movf	_DimmerLights,w
 16523  1A47  3E09               	addlw	9
 16524  1A48  0086               	movwf	6
 16525  1A49  3001               	movlw	1	; select bank2/3
 16526  1A4A  0087               	movwf	7
 16527  1A4B  0020               	movlb	0	; select bank0
 16528  1A4C  0822               	movf	setDimmerLights_Trigger@command,w
 16529  1A4D  1081               	bcf	1,1
 16530  1A4E  1D03               	skipz
 16531  1A4F  1481               	bsf	1,1
 16532  1A50  0008               	return
 16533  1A51                     __end_of_setDimmerLights_Trigger:	
 16534                           
 16535                           	psect	text102
 16536  1A31                     __ptext102:	
 16537 ;; *************** function _setDimmerLights_Switch *****************
 16538 ;; Defined at:
 16539 ;;		line 553 in file "../src/Dimmer_B1.c"
 16540 ;; Parameters:    Size  Location     Type
 16541 ;;  lights          1    wreg     unsigned char 
 16542 ;;  command         1    2[BANK0 ] unsigned char 
 16543 ;; Auto vars:     Size  Location     Type
 16544 ;;  lights          1    3[BANK0 ] unsigned char 
 16545 ;; Return value:  Size  Location     Type
 16546 ;;		None               void
 16547 ;; Registers used:
 16548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16549 ;; Tracked objects:
 16550 ;;		On entry : 0/0
 16551 ;;		On exit  : 0/0
 16552 ;;		Unchanged: 0/0
 16553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16554 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;Total ram usage:        2 bytes
 16559 ;; Hardware stack levels used:    1
 16560 ;; Hardware stack levels required when called:    6
 16561 ;; This function calls:
 16562 ;;		_DimmerLightsPointSelect
 16563 ;; This function is called by:
 16564 ;;		_DlyOff_Main
 16565 ;;		_setRFSW_Control
 16566 ;;		_Sw_DimmerOnFunc
 16567 ;;		_Sw_DimmerOffFunc
 16568 ;; This function uses a non-reentrant model
 16569 ;;
 16570                           
 16571                           
 16572                           ;psect for function _setDimmerLights_Switch
 16573  1A31                     _setDimmerLights_Switch:	
 16574                           
 16575                           ;incstack = 0
 16576                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16577                           ;setDimmerLights_Switch@lights stored from wreg
 16578  1A31  0020               	movlb	0	; select bank0
 16579  1A32  00A3               	movwf	setDimmerLights_Switch@lights
 16580                           
 16581                           ;Dimmer_B1.c: 554: DimmerLightsPointSelect(lights);
 16582  1A33  0823               	movf	setDimmerLights_Switch@lights,w
 16583  1A34  319A  22C5         	fcall	_DimmerLightsPointSelect
 16584                           
 16585                           ;Dimmer_B1.c: 555: DimmerLights->Switch = command;
 16586  1A36  0878               	movf	_DimmerLights,w
 16587  1A37  3E09               	addlw	9
 16588  1A38  0086               	movwf	6
 16589  1A39  3001               	movlw	1	; select bank2/3
 16590  1A3A  0087               	movwf	7
 16591  1A3B  0020               	movlb	0	; select bank0
 16592  1A3C  0822               	movf	setDimmerLights_Switch@command,w
 16593  1A3D  1001               	bcf	1,0
 16594  1A3E  1D03               	skipz
 16595  1A3F  1401               	bsf	1,0
 16596  1A40  0008               	return
 16597  1A41                     __end_of_setDimmerLights_Switch:	
 16598                           
 16599                           	psect	text103
 16600  1AC5                     __ptext103:	
 16601 ;; *************** function _DimmerLightsPointSelect *****************
 16602 ;; Defined at:
 16603 ;;		line 165 in file "../src/Dimmer_B1.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  lights          1    wreg     unsigned char 
 16606 ;; Auto vars:     Size  Location     Type
 16607 ;;  lights          1    1[BANK0 ] unsigned char 
 16608 ;; Return value:  Size  Location     Type
 16609 ;;		None               void
 16610 ;; Registers used:
 16611 ;;		wreg
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;Total ram usage:        2 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; Hardware stack levels required when called:    5
 16624 ;; This function calls:
 16625 ;;		Nothing
 16626 ;; This function is called by:
 16627 ;;		_setDimmerLights_Initialization
 16628 ;;		_setDimmerLights_Main
 16629 ;;		_setDimmerLights_ERROR
 16630 ;;		_setDimmerLights_TriggerERROR
 16631 ;;		_setDimmerLights
 16632 ;;		_setDimmerLights_Adj
 16633 ;;		_setDimmerLights_AdjRF
 16634 ;;		_setDimmerLights_Switch
 16635 ;;		_setDimmerLights_AdjGo
 16636 ;;		_setDimmerLights_Trigger
 16637 ;;		_setDimmerLights_TriggerAdj
 16638 ;;		_setDimmerLights_Clear
 16639 ;;		_setDimmerLights_GO
 16640 ;;		_setDimmerLights_MaxmumValue
 16641 ;; This function uses a non-reentrant model
 16642 ;;
 16643                           
 16644                           
 16645                           ;psect for function _DimmerLightsPointSelect
 16646  1AC5                     _DimmerLightsPointSelect:	
 16647                           
 16648                           ;incstack = 0
 16649                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16650                           ;DimmerLightsPointSelect@lights stored from wreg
 16651  1AC5  0020               	movlb	0	; select bank0
 16652  1AC6  00A1               	movwf	DimmerLightsPointSelect@lights
 16653                           
 16654                           ;Dimmer_B1.c: 167: if (lights == 1) {
 16655  1AC7  0821               	movf	DimmerLightsPointSelect@lights,w
 16656  1AC8  3A01               	xorlw	1
 16657  1AC9  1D03               	skipz
 16658  1ACA  2ACF               	goto	l848
 16659                           
 16660                           ;Dimmer_B1.c: 168: DimmerLights = &DimmerLights1;
 16661  1ACB  3020               	movlw	_DimmerLights1& (0+255)
 16662  1ACC  00A0               	movwf	??_DimmerLightsPointSelect
 16663  1ACD  0820               	movf	??_DimmerLightsPointSelect,w
 16664  1ACE  00F8               	movwf	_DimmerLights
 16665  1ACF                     l848:	
 16666                           
 16667                           ;Dimmer_B1.c: 169: }
 16668                           ;Dimmer_B1.c: 176: if (lights == 2) {
 16669  1ACF  0821               	movf	DimmerLightsPointSelect@lights,w
 16670  1AD0  3A02               	xorlw	2
 16671  1AD1  1D03               	skipz
 16672  1AD2  0008               	return
 16673                           
 16674                           ;Dimmer_B1.c: 177: DimmerLights = &DimmerLights2;
 16675  1AD3  302F               	movlw	_DimmerLights2& (0+255)
 16676  1AD4  00A0               	movwf	??_DimmerLightsPointSelect
 16677  1AD5  0820               	movf	??_DimmerLightsPointSelect,w
 16678  1AD6  00F8               	movwf	_DimmerLights
 16679  1AD7  0008               	return
 16680  1AD8                     __end_of_DimmerLightsPointSelect:	
 16681                           
 16682                           	psect	text104
 16683  094F                     __ptext104:	
 16684 ;; *************** function _setBuz *****************
 16685 ;; Defined at:
 16686 ;;		line 30 in file "../src/Buzzer_B1.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;  count           1    wreg     unsigned char 
 16689 ;;  time            2    6[BANK0 ] int 
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  count           1    9[BANK0 ] unsigned char 
 16692 ;; Return value:  Size  Location     Type
 16693 ;;		None               void
 16694 ;; Registers used:
 16695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16696 ;; Tracked objects:
 16697 ;;		On entry : 0/0
 16698 ;;		On exit  : 0/0
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16701 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;Total ram usage:        4 bytes
 16706 ;; Hardware stack levels used:    1
 16707 ;; Hardware stack levels required when called:    6
 16708 ;; This function calls:
 16709 ;;		___wmul
 16710 ;; This function is called by:
 16711 ;;		_DlyOff_Main
 16712 ;;		_setDimmerLights_Main
 16713 ;;		_DimmerLights_Exceptions
 16714 ;;		_setLog_Code
 16715 ;;		_setControl_Lights_Table
 16716 ;;		_setRFSW_Control
 16717 ;;		_setSw_Main
 16718 ;;		_Sw_DimmerOnFunc
 16719 ;;		_my_Main
 16720 ;; This function uses a non-reentrant model
 16721 ;;
 16722                           
 16723                           
 16724                           ;psect for function _setBuz
 16725  094F                     _setBuz:	
 16726                           
 16727                           ;incstack = 0
 16728                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16729                           ;setBuz@count stored from wreg
 16730  094F  0020               	movlb	0	; select bank0
 16731  0950  00A9               	movwf	setBuz@count
 16732                           
 16733                           ;Buzzer_B1.c: 31: time *= 20;
 16734  0951  3014               	movlw	20
 16735  0952  00A0               	movwf	___wmul@multiplier
 16736  0953  3000               	movlw	0
 16737  0954  00A1               	movwf	___wmul@multiplier+1
 16738  0955  0827               	movf	setBuz@time+1,w
 16739  0956  01A3               	clrf	___wmul@multiplicand+1
 16740  0957  07A3               	addwf	___wmul@multiplicand+1,f
 16741  0958  0826               	movf	setBuz@time,w
 16742  0959  01A2               	clrf	___wmul@multiplicand
 16743  095A  07A2               	addwf	___wmul@multiplicand,f
 16744  095B  319C  24C0  3189   	fcall	___wmul
 16745  095E  0020               	movlb	0	; select bank0
 16746  095F  0821               	movf	?___wmul+1,w
 16747  0960  01A7               	clrf	setBuz@time+1
 16748  0961  07A7               	addwf	setBuz@time+1,f
 16749  0962  0820               	movf	?___wmul,w
 16750  0963  01A6               	clrf	setBuz@time
 16751  0964  07A6               	addwf	setBuz@time,f
 16752                           
 16753                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 16754  0965  0021               	movlb	1	; select bank1
 16755  0966  0837               	movf	_Buz^(0+128),w
 16756  0967  0086               	movwf	6
 16757  0968  3001               	movlw	1	; select bank2/3
 16758  0969  0087               	movwf	7
 16759  096A  1C01               	btfss	1,0
 16760  096B  0008               	return
 16761                           
 16762                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 16763  096C  0837               	movf	_Buz^(0+128),w
 16764  096D  0086               	movwf	6
 16765  096E  3001               	movlw	1	; select bank2/3
 16766  096F  0087               	movwf	7
 16767  0970  1881               	btfsc	1,1
 16768  0971  2990               	goto	l5938
 16769                           
 16770                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 16771  0972  0837               	movf	_Buz^(0+128),w
 16772  0973  0086               	movwf	6
 16773  0974  3001               	movlw	1	; select bank2/3
 16774  0975  0087               	movwf	7
 16775  0976  1481               	bsf	1,1
 16776                           
 16777                           ;Buzzer_B1.c: 35: Buz->Count = count;
 16778  0977  0020               	movlb	0	; select bank0
 16779  0978  0829               	movf	setBuz@count,w
 16780  0979  00A8               	movwf	??_setBuz
 16781  097A  0021               	movlb	1	; select bank1
 16782  097B  0837               	movf	_Buz^(0+128),w
 16783  097C  3E03               	addlw	3
 16784  097D  0086               	movwf	6
 16785  097E  3001               	movlw	1	; select bank2/3
 16786  097F  0087               	movwf	7
 16787  0980  0020               	movlb	0	; select bank0
 16788  0981  0828               	movf	??_setBuz,w
 16789  0982  0081               	movwf	1
 16790                           
 16791                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 16792  0983  0021               	movlb	1	; select bank1
 16793  0984  0837               	movf	_Buz^(0+128),w
 16794  0985  3E06               	addlw	6
 16795  0986  0086               	movwf	6
 16796  0987  3001               	movlw	1	; select bank2/3
 16797  0988  0087               	movwf	7
 16798  0989  0020               	movlb	0	; select bank0
 16799  098A  0826               	movf	setBuz@time,w
 16800  098B  3FC0               	movwi [0]fsr1
 16801  098C  0827               	movf	setBuz@time+1,w
 16802  098D  3FC1               	movwi [1]fsr1
 16803                           
 16804                           ;Buzzer_B1.c: 38: RB3 = 1;
 16805  098E  158D               	bsf	13,3	;volatile
 16806                           
 16807                           ;Buzzer_B1.c: 39: } else {
 16808  098F  0008               	return
 16809  0990                     l5938:	
 16810                           
 16811                           ;Buzzer_B1.c: 40: if (!Buz->BufferStatus1) {
 16812  0990  0021               	movlb	1	; select bank1
 16813  0991  0837               	movf	_Buz^(0+128),w
 16814  0992  0086               	movwf	6
 16815  0993  3001               	movlw	1	; select bank2/3
 16816  0994  0087               	movwf	7
 16817  0995  1981               	btfsc	1,3
 16818  0996  29B4               	goto	l5942
 16819                           
 16820                           ;Buzzer_B1.c: 41: Buz->BufferStatus1 = 1;
 16821  0997  0837               	movf	_Buz^(0+128),w
 16822  0998  0086               	movwf	6
 16823  0999  3001               	movlw	1	; select bank2/3
 16824  099A  0087               	movwf	7
 16825  099B  1581               	bsf	1,3
 16826                           
 16827                           ;Buzzer_B1.c: 42: Buz->CountBuffer1 = count;
 16828  099C  0020               	movlb	0	; select bank0
 16829  099D  0829               	movf	setBuz@count,w
 16830  099E  00A8               	movwf	??_setBuz
 16831  099F  0021               	movlb	1	; select bank1
 16832  09A0  0837               	movf	_Buz^(0+128),w
 16833  09A1  3E04               	addlw	4
 16834  09A2  0086               	movwf	6
 16835  09A3  3001               	movlw	1	; select bank2/3
 16836  09A4  0087               	movwf	7
 16837  09A5  0020               	movlb	0	; select bank0
 16838  09A6  0828               	movf	??_setBuz,w
 16839  09A7  0081               	movwf	1
 16840                           
 16841                           ;Buzzer_B1.c: 43: Buz->TimeValueBuffer1 = time;
 16842  09A8  0021               	movlb	1	; select bank1
 16843  09A9  0837               	movf	_Buz^(0+128),w
 16844  09AA  3E08               	addlw	8
 16845  09AB  0086               	movwf	6
 16846  09AC  3001               	movlw	1	; select bank2/3
 16847  09AD  0087               	movwf	7
 16848  09AE  0020               	movlb	0	; select bank0
 16849  09AF  0826               	movf	setBuz@time,w
 16850  09B0  3FC0               	movwi [0]fsr1
 16851  09B1  0827               	movf	setBuz@time+1,w
 16852  09B2  3FC1               	movwi [1]fsr1
 16853                           
 16854                           ;Buzzer_B1.c: 44: } else if (!Buz->BufferStatus2) {
 16855  09B3  0008               	return
 16856  09B4                     l5942:	
 16857  09B4  0021               	movlb	1	; select bank1
 16858  09B5  0837               	movf	_Buz^(0+128),w
 16859  09B6  0086               	movwf	6
 16860  09B7  3001               	movlw	1	; select bank2/3
 16861  09B8  0087               	movwf	7
 16862  09B9  1A01               	btfsc	1,4
 16863  09BA  0008               	return
 16864                           
 16865                           ;Buzzer_B1.c: 45: Buz->BufferStatus2 = 1;
 16866  09BB  0837               	movf	_Buz^(0+128),w
 16867  09BC  0086               	movwf	6
 16868  09BD  3001               	movlw	1	; select bank2/3
 16869  09BE  0087               	movwf	7
 16870  09BF  1601               	bsf	1,4
 16871                           
 16872                           ;Buzzer_B1.c: 46: Buz->CountBuffer2 = count;
 16873  09C0  0020               	movlb	0	; select bank0
 16874  09C1  0829               	movf	setBuz@count,w
 16875  09C2  00A8               	movwf	??_setBuz
 16876  09C3  0021               	movlb	1	; select bank1
 16877  09C4  0837               	movf	_Buz^(0+128),w
 16878  09C5  3E05               	addlw	5
 16879  09C6  0086               	movwf	6
 16880  09C7  3001               	movlw	1	; select bank2/3
 16881  09C8  0087               	movwf	7
 16882  09C9  0020               	movlb	0	; select bank0
 16883  09CA  0828               	movf	??_setBuz,w
 16884  09CB  0081               	movwf	1
 16885                           
 16886                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2 = time;
 16887  09CC  0021               	movlb	1	; select bank1
 16888  09CD  0837               	movf	_Buz^(0+128),w
 16889  09CE  3E0A               	addlw	10
 16890  09CF  0086               	movwf	6
 16891  09D0  3001               	movlw	1	; select bank2/3
 16892  09D1  0087               	movwf	7
 16893  09D2  0020               	movlb	0	; select bank0
 16894  09D3  0826               	movf	setBuz@time,w
 16895  09D4  3FC0               	movwi [0]fsr1
 16896  09D5  0827               	movf	setBuz@time+1,w
 16897  09D6  3FC1               	movwi [1]fsr1
 16898  09D7  0008               	return
 16899  09D8                     __end_of_setBuz:	
 16900                           
 16901                           	psect	text105
 16902  1CC0                     __ptext105:	
 16903 ;; *************** function ___wmul *****************
 16904 ;; Defined at:
 16905 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 16906 ;; Parameters:    Size  Location     Type
 16907 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16908 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;  product         2    4[BANK0 ] unsigned int 
 16911 ;; Return value:  Size  Location     Type
 16912 ;;                  2    0[BANK0 ] unsigned int 
 16913 ;; Registers used:
 16914 ;;		wreg, status,2, status,0
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16920 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;Total ram usage:        6 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; Hardware stack levels required when called:    5
 16927 ;; This function calls:
 16928 ;;		Nothing
 16929 ;; This function is called by:
 16930 ;;		_setBuz
 16931 ;;		_Load_Main
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           
 16936                           ;psect for function ___wmul
 16937  1CC0                     ___wmul:	
 16938                           
 16939                           ;incstack = 0
 16940                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16941  1CC0  0020               	movlb	0	; select bank0
 16942  1CC1  01A4               	clrf	___wmul@product
 16943  1CC2  01A5               	clrf	___wmul@product+1
 16944  1CC3                     l5918:	
 16945  1CC3  1C20               	btfss	___wmul@multiplier,0
 16946  1CC4  2CC9               	goto	l2915
 16947  1CC5  0822               	movf	___wmul@multiplicand,w
 16948  1CC6  07A4               	addwf	___wmul@product,f
 16949  1CC7  0823               	movf	___wmul@multiplicand+1,w
 16950  1CC8  3DA5               	addwfc	___wmul@product+1,f
 16951  1CC9                     l2915:	
 16952  1CC9  3001               	movlw	1
 16953  1CCA                     u4385:	
 16954  1CCA  35A2               	lslf	___wmul@multiplicand,f
 16955  1CCB  0DA3               	rlf	___wmul@multiplicand+1,f
 16956  1CCC  0B89               	decfsz	9,f
 16957  1CCD  2CCA               	goto	u4385
 16958  1CCE  3001               	movlw	1
 16959  1CCF                     u4395:	
 16960  1CCF  36A1               	lsrf	___wmul@multiplier+1,f
 16961  1CD0  0CA0               	rrf	___wmul@multiplier,f
 16962  1CD1  0B89               	decfsz	9,f
 16963  1CD2  2CCF               	goto	u4395
 16964  1CD3  0821               	movf	___wmul@multiplier+1,w
 16965  1CD4  0420               	iorwf	___wmul@multiplier,w
 16966  1CD5  1D03               	skipz
 16967  1CD6  2CC3               	goto	l5918
 16968  1CD7  0825               	movf	___wmul@product+1,w
 16969  1CD8  01A1               	clrf	?___wmul+1
 16970  1CD9  07A1               	addwf	?___wmul+1,f
 16971  1CDA  0824               	movf	___wmul@product,w
 16972  1CDB  01A0               	clrf	?___wmul
 16973  1CDC  07A0               	addwf	?___wmul,f
 16974  1CDD  0008               	return
 16975  1CDE                     __end_of___wmul:	
 16976                           
 16977                           	psect	text106
 16978  18E7                     __ptext106:	
 16979 ;; *************** function _DelayOff_Initialization *****************
 16980 ;; Defined at:
 16981 ;;		line 26 in file "../src/DelayOff_B1.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;		None
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;		None
 16986 ;; Return value:  Size  Location     Type
 16987 ;;		None               void
 16988 ;; Registers used:
 16989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;Total ram usage:        0 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    7
 17002 ;; This function calls:
 17003 ;;		_DlyOff_Initialization
 17004 ;; This function is called by:
 17005 ;;		_main
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           
 17010                           ;psect for function _DelayOff_Initialization
 17011  18E7                     _DelayOff_Initialization:	
 17012                           
 17013                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17014                           
 17015                           ;incstack = 0
 17016                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17017  18E7  3001               	movlw	1
 17018  18E8  3199  212F  3198   	fcall	_DlyOff_Initialization
 17019                           
 17020                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17021  18EB  3002               	movlw	2
 17022  18EC  3199  212F         	fcall	_DlyOff_Initialization
 17023  18EE  0008               	return
 17024  18EF                     __end_of_DelayOff_Initialization:	
 17025                           
 17026                           	psect	text107
 17027  192F                     __ptext107:	
 17028 ;; *************** function _DlyOff_Initialization *****************
 17029 ;; Defined at:
 17030 ;;		line 56 in file "../src/DelayOff_B1.c"
 17031 ;; Parameters:    Size  Location     Type
 17032 ;;  sw              1    wreg     unsigned char 
 17033 ;; Auto vars:     Size  Location     Type
 17034 ;;  sw              1    2[BANK0 ] unsigned char 
 17035 ;; Return value:  Size  Location     Type
 17036 ;;		None               void
 17037 ;; Registers used:
 17038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;Total ram usage:        1 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; Hardware stack levels required when called:    6
 17051 ;; This function calls:
 17052 ;;		_DelayOffPointSelect
 17053 ;; This function is called by:
 17054 ;;		_DelayOff_Initialization
 17055 ;; This function uses a non-reentrant model
 17056 ;;
 17057                           
 17058                           
 17059                           ;psect for function _DlyOff_Initialization
 17060  192F                     _DlyOff_Initialization:	
 17061                           
 17062                           ;incstack = 0
 17063                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17064                           ;DlyOff_Initialization@sw stored from wreg
 17065  192F  0020               	movlb	0	; select bank0
 17066  1930  00A2               	movwf	DlyOff_Initialization@sw
 17067                           
 17068                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17069  1931  0822               	movf	DlyOff_Initialization@sw,w
 17070  1932  319B  2356         	fcall	_DelayOffPointSelect
 17071                           
 17072                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17073  1934  0021               	movlb	1	; select bank1
 17074  1935  0839               	movf	_DelayOff^(0+128),w
 17075  1936  0086               	movwf	6
 17076  1937  0187               	clrf	7
 17077  1938  1401               	bsf	1,0
 17078  1939  0008               	return
 17079  193A                     __end_of_DlyOff_Initialization:	
 17080                           
 17081                           	psect	text108
 17082  1B56                     __ptext108:	
 17083 ;; *************** function _DelayOffPointSelect *****************
 17084 ;; Defined at:
 17085 ;;		line 7 in file "../src/DelayOff_B1.c"
 17086 ;; Parameters:    Size  Location     Type
 17087 ;;  sw              1    wreg     unsigned char 
 17088 ;; Auto vars:     Size  Location     Type
 17089 ;;  sw              1    1[BANK0 ] unsigned char 
 17090 ;; Return value:  Size  Location     Type
 17091 ;;		None               void
 17092 ;; Registers used:
 17093 ;;		wreg
 17094 ;; Tracked objects:
 17095 ;;		On entry : 0/0
 17096 ;;		On exit  : 0/0
 17097 ;;		Unchanged: 0/0
 17098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17102 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17103 ;;Total ram usage:        2 bytes
 17104 ;; Hardware stack levels used:    1
 17105 ;; Hardware stack levels required when called:    5
 17106 ;; This function calls:
 17107 ;;		Nothing
 17108 ;; This function is called by:
 17109 ;;		_DlyOff_Initialization
 17110 ;;		_DlyOff_Main
 17111 ;;		_setDelayOff_GO
 17112 ;; This function uses a non-reentrant model
 17113 ;;
 17114                           
 17115                           
 17116                           ;psect for function _DelayOffPointSelect
 17117  1B56                     _DelayOffPointSelect:	
 17118                           
 17119                           ;incstack = 0
 17120                           ; Regs used in _DelayOffPointSelect: [wreg]
 17121                           ;DelayOffPointSelect@sw stored from wreg
 17122  1B56  0020               	movlb	0	; select bank0
 17123  1B57  00A1               	movwf	DelayOffPointSelect@sw
 17124                           
 17125                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17126  1B58  0821               	movf	DelayOffPointSelect@sw,w
 17127  1B59  3A01               	xorlw	1
 17128  1B5A  1D03               	skipz
 17129  1B5B  2B62               	goto	l5850
 17130                           
 17131                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17132  1B5C  30C7               	movlw	_DlySw1& (0+255)
 17133  1B5D  00A0               	movwf	??_DelayOffPointSelect
 17134  1B5E  0820               	movf	??_DelayOffPointSelect,w
 17135  1B5F  0021               	movlb	1	; select bank1
 17136  1B60  00B9               	movwf	_DelayOff^(0+128)
 17137                           
 17138                           ;DelayOff_B1.c: 11: }
 17139  1B61  0008               	return
 17140  1B62                     l5850:	
 17141                           
 17142                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17143  1B62  0020               	movlb	0	; select bank0
 17144  1B63  0821               	movf	DelayOffPointSelect@sw,w
 17145  1B64  3A02               	xorlw	2
 17146  1B65  1D03               	skipz
 17147  1B66  0008               	return
 17148                           
 17149                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17150  1B67  30CC               	movlw	_DlySw2& (0+255)
 17151  1B68  00A0               	movwf	??_DelayOffPointSelect
 17152  1B69  0820               	movf	??_DelayOffPointSelect,w
 17153  1B6A  0021               	movlb	1	; select bank1
 17154  1B6B  00B9               	movwf	_DelayOff^(0+128)
 17155  1B6C  0008               	return
 17156  1B6D                     __end_of_DelayOffPointSelect:	
 17157                           
 17158                           	psect	text109
 17159  1B00                     __ptext109:	
 17160 ;; *************** function _CC2500_PowerOnInitial *****************
 17161 ;; Defined at:
 17162 ;;		line 97 in file "../src/CC2500_B1.c"
 17163 ;; Parameters:    Size  Location     Type
 17164 ;;		None
 17165 ;; Auto vars:     Size  Location     Type
 17166 ;;		None
 17167 ;; Return value:  Size  Location     Type
 17168 ;;		None               void
 17169 ;; Registers used:
 17170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17171 ;; Tracked objects:
 17172 ;;		On entry : 0/0
 17173 ;;		On exit  : 0/0
 17174 ;;		Unchanged: 0/0
 17175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;Total ram usage:        0 bytes
 17181 ;; Hardware stack levels used:    1
 17182 ;; Hardware stack levels required when called:    8
 17183 ;; This function calls:
 17184 ;;		_CC2500_ClearRXFIFO
 17185 ;;		_CC2500_ClearTXFIFO
 17186 ;;		_CC2500_FrequencyCabr
 17187 ;;		_CC2500_InitPATable
 17188 ;;		_CC2500_InitSetREG
 17189 ;;		_CC2500_PowerRST
 17190 ;;		_CC2500_SIDLEMode
 17191 ;; This function is called by:
 17192 ;;		_main
 17193 ;; This function uses a non-reentrant model
 17194 ;;
 17195                           
 17196                           
 17197                           ;psect for function _CC2500_PowerOnInitial
 17198  1B00                     _CC2500_PowerOnInitial:	
 17199                           
 17200                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 17201                           
 17202                           ;incstack = 0
 17203                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17204  1B00  3187  27D0  319B   	fcall	_CC2500_PowerRST
 17205                           
 17206                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 17207  1B03  319D  25F3  319B   	fcall	_CC2500_InitSetREG
 17208                           
 17209                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 17210  1B06  319C  24DE  319B   	fcall	_CC2500_InitPATable
 17211                           
 17212                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 17213  1B09  3198  20A7  319B   	fcall	_CC2500_ClearTXFIFO
 17214                           
 17215                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 17216  1B0C  3198  20A3  319B   	fcall	_CC2500_ClearRXFIFO
 17217                           
 17218                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 17219  1B0F  3199  2168  319B   	fcall	_CC2500_FrequencyCabr
 17220                           
 17221                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 17222  1B12  3198  20AB         	fcall	_CC2500_SIDLEMode
 17223  1B14  0008               	return
 17224  1B15                     __end_of_CC2500_PowerOnInitial:	
 17225                           
 17226                           	psect	text110
 17227  18AB                     __ptext110:	
 17228 ;; *************** function _CC2500_SIDLEMode *****************
 17229 ;; Defined at:
 17230 ;;		line 181 in file "../src/CC2500_B1.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;		None
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;		None
 17235 ;; Return value:  Size  Location     Type
 17236 ;;		None               void
 17237 ;; Registers used:
 17238 ;;		wreg, status,2, status,0, pclath, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;Total ram usage:        0 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    7
 17251 ;; This function calls:
 17252 ;;		_CC2500_WriteCommand
 17253 ;; This function is called by:
 17254 ;;		_CC2500_PowerOnInitial
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _CC2500_SIDLEMode
 17260  18AB                     _CC2500_SIDLEMode:	
 17261                           
 17262                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 17263                           
 17264                           ;incstack = 0
 17265                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 17266  18AB  3036               	movlw	54
 17267  18AC  319A  2221         	fcall	_CC2500_WriteCommand
 17268  18AE  0008               	return
 17269  18AF                     __end_of_CC2500_SIDLEMode:	
 17270                           
 17271                           	psect	text111
 17272  07D0                     __ptext111:	
 17273 ;; *************** function _CC2500_PowerRST *****************
 17274 ;; Defined at:
 17275 ;;		line 110 in file "../src/CC2500_B1.c"
 17276 ;; Parameters:    Size  Location     Type
 17277 ;;		None
 17278 ;; Auto vars:     Size  Location     Type
 17279 ;;		None
 17280 ;; Return value:  Size  Location     Type
 17281 ;;		None               void
 17282 ;; Registers used:
 17283 ;;		wreg, status,2, status,0, pclath, cstack
 17284 ;; Tracked objects:
 17285 ;;		On entry : 0/0
 17286 ;;		On exit  : 0/0
 17287 ;;		Unchanged: 0/0
 17288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17293 ;;Total ram usage:        1 bytes
 17294 ;; Hardware stack levels used:    1
 17295 ;; Hardware stack levels required when called:    6
 17296 ;; This function calls:
 17297 ;;		_CC2500_WriteByte
 17298 ;;		_DelayTime_1us
 17299 ;; This function is called by:
 17300 ;;		_CC2500_PowerOnInitial
 17301 ;; This function uses a non-reentrant model
 17302 ;;
 17303                           
 17304                           
 17305                           ;psect for function _CC2500_PowerRST
 17306  07D0                     _CC2500_PowerRST:	
 17307                           
 17308                           ;CC2500_B1.c: 111: RC1 = 0;
 17309                           
 17310                           ;incstack = 0
 17311                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 17312  07D0  0020               	movlb	0	; select bank0
 17313  07D1  108E               	bcf	14,1	;volatile
 17314                           
 17315                           ;CC2500_B1.c: 112: RC0 = 0;
 17316  07D2  100E               	bcf	14,0	;volatile
 17317                           
 17318                           ;CC2500_B1.c: 113: RC4 = 1;
 17319  07D3  160E               	bsf	14,4	;volatile
 17320                           
 17321                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 17322  07D4  300A               	movlw	10
 17323  07D5  00A0               	movwf	DelayTime_1us@count
 17324  07D6  3000               	movlw	0
 17325  07D7  00A1               	movwf	DelayTime_1us@count+1
 17326  07D8  319D  25A5  3187   	fcall	_DelayTime_1us
 17327                           
 17328                           ;CC2500_B1.c: 115: RC4 = 0;
 17329  07DB  0020               	movlb	0	; select bank0
 17330  07DC  120E               	bcf	14,4	;volatile
 17331                           
 17332                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 17333  07DD  300A               	movlw	10
 17334  07DE  00A0               	movwf	DelayTime_1us@count
 17335  07DF  3000               	movlw	0
 17336  07E0  00A1               	movwf	DelayTime_1us@count+1
 17337  07E1  319D  25A5  3187   	fcall	_DelayTime_1us
 17338                           
 17339                           ;CC2500_B1.c: 117: RC4 = 1;
 17340  07E4  0020               	movlb	0	; select bank0
 17341  07E5  160E               	bsf	14,4	;volatile
 17342                           
 17343                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 17344  07E6  3028               	movlw	40
 17345  07E7  00A0               	movwf	DelayTime_1us@count
 17346  07E8  3000               	movlw	0
 17347  07E9  00A1               	movwf	DelayTime_1us@count+1
 17348  07EA  319D  25A5  3187   	fcall	_DelayTime_1us
 17349                           
 17350                           ;CC2500_B1.c: 119: RC4 = 0;
 17351  07ED  0020               	movlb	0	; select bank0
 17352  07EE  120E               	bcf	14,4	;volatile
 17353                           
 17354                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 17355  07EF  3030               	movlw	48
 17356  07F0  00A6               	movwf	??_CC2500_PowerRST
 17357  07F1  0826               	movf	??_CC2500_PowerRST,w
 17358  07F2  0021               	movlb	1	; select bank1
 17359  07F3  00C2               	movwf	_SPI0Buffer^(0+128)
 17360  07F4                     l311:	
 17361                           ;CC2500_B1.c: 121: while (RC2 == 1);
 17362                           
 17363  07F4  0020               	movlb	0	; select bank0
 17364  07F5  190E               	btfsc	14,2	;volatile
 17365  07F6  2FF4               	goto	l311
 17366                           
 17367                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 17368  07F7  319B  239C  3187   	fcall	_CC2500_WriteByte
 17369  07FA                     l314:	
 17370                           ;CC2500_B1.c: 123: while (RC2 == 1);
 17371                           
 17372  07FA  0020               	movlb	0	; select bank0
 17373  07FB  190E               	btfsc	14,2	;volatile
 17374  07FC  2FFA               	goto	l314
 17375                           
 17376                           ;CC2500_B1.c: 124: RC0 = 0;
 17377  07FD  100E               	bcf	14,0	;volatile
 17378                           
 17379                           ;CC2500_B1.c: 125: RC4 = 1;
 17380  07FE  160E               	bsf	14,4	;volatile
 17381  07FF  0008               	return
 17382  0800                     __end_of_CC2500_PowerRST:	
 17383                           
 17384                           	psect	text112
 17385  1DF3                     __ptext112:	
 17386 ;; *************** function _CC2500_InitSetREG *****************
 17387 ;; Defined at:
 17388 ;;		line 131 in file "../src/CC2500_B1.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;		None
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17393 ;;  temp2           1    7[BANK0 ] unsigned char 
 17394 ;;  temp1           1    6[BANK0 ] unsigned char 
 17395 ;; Return value:  Size  Location     Type
 17396 ;;		None               void
 17397 ;; Registers used:
 17398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17399 ;; Tracked objects:
 17400 ;;		On entry : 0/0
 17401 ;;		On exit  : 0/0
 17402 ;;		Unchanged: 0/0
 17403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17408 ;;Total ram usage:        4 bytes
 17409 ;; Hardware stack levels used:    1
 17410 ;; Hardware stack levels required when called:    7
 17411 ;; This function calls:
 17412 ;;		_CC2500_WriteREG
 17413 ;; This function is called by:
 17414 ;;		_CC2500_PowerOnInitial
 17415 ;; This function uses a non-reentrant model
 17416 ;;
 17417                           
 17418                           
 17419                           ;psect for function _CC2500_InitSetREG
 17420  1DF3                     _CC2500_InitSetREG:	
 17421                           
 17422                           ;CC2500_B1.c: 132: unsigned char loop_c;
 17423                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 17424                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 17425                           
 17426                           ;incstack = 0
 17427                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17428  1DF3  0020               	movlb	0	; select bank0
 17429  1DF4  01A8               	clrf	CC2500_InitSetREG@loop_c
 17430  1DF5                     L16:	
 17431  1DF5  302F               	movlw	47
 17432  1DF6  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17433  1DF7  1803               	btfsc	3,0
 17434  1DF8  0008               	return
 17435                           
 17436                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 17437  1DF9  0828               	movf	CC2500_InitSetREG@loop_c,w
 17438  1DFA  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17439  1DFB  0084               	movwf	4
 17440  1DFC  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 17441  1DFD  1803               	skipnc
 17442  1DFE  3E01               	addlw	1
 17443  1DFF  0085               	movwf	5
 17444  1E00  0800               	movf	0,w	;code access
 17445  1E01  00A5               	movwf	??_CC2500_InitSetREG
 17446  1E02  0825               	movf	??_CC2500_InitSetREG,w
 17447  1E03  00A6               	movwf	CC2500_InitSetREG@temp1
 17448                           
 17449                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 17450  1E04  0828               	movf	CC2500_InitSetREG@loop_c,w
 17451  1E05  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17452  1E06  0084               	movwf	4
 17453  1E07  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 17454  1E08  1803               	skipnc
 17455  1E09  3E01               	addlw	1
 17456  1E0A  0085               	movwf	5
 17457  1E0B  0800               	movf	0,w	;code access
 17458  1E0C  00A5               	movwf	??_CC2500_InitSetREG
 17459  1E0D  0825               	movf	??_CC2500_InitSetREG,w
 17460  1E0E  00A7               	movwf	CC2500_InitSetREG@temp2
 17461                           
 17462                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 17463  1E0F  0827               	movf	CC2500_InitSetREG@temp2,w
 17464  1E10  00A5               	movwf	??_CC2500_InitSetREG
 17465  1E11  0825               	movf	??_CC2500_InitSetREG,w
 17466  1E12  00A2               	movwf	CC2500_WriteREG@value
 17467  1E13  0826               	movf	CC2500_InitSetREG@temp1,w
 17468  1E14  319B  23B5  319D   	fcall	_CC2500_WriteREG
 17469  1E17  3001               	movlw	1
 17470  1E18  0020               	movlb	0	; select bank0
 17471  1E19  00A5               	movwf	??_CC2500_InitSetREG
 17472  1E1A  0825               	movf	??_CC2500_InitSetREG,w
 17473  1E1B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17474  1E1C  2DF5               	goto	L16
 17475  1E1D                     __end_of_CC2500_InitSetREG:	
 17476                           
 17477                           	psect	text113
 17478  1CDE                     __ptext113:	
 17479 ;; *************** function _CC2500_InitPATable *****************
 17480 ;; Defined at:
 17481 ;;		line 146 in file "../src/CC2500_B1.c"
 17482 ;; Parameters:    Size  Location     Type
 17483 ;;		None
 17484 ;; Auto vars:     Size  Location     Type
 17485 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17486 ;;  temp            1    6[BANK0 ] unsigned char 
 17487 ;; Return value:  Size  Location     Type
 17488 ;;		None               void
 17489 ;; Registers used:
 17490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17491 ;; Tracked objects:
 17492 ;;		On entry : 0/0
 17493 ;;		On exit  : 0/0
 17494 ;;		Unchanged: 0/0
 17495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;Total ram usage:        3 bytes
 17501 ;; Hardware stack levels used:    1
 17502 ;; Hardware stack levels required when called:    7
 17503 ;; This function calls:
 17504 ;;		_CC2500_WriteREG
 17505 ;; This function is called by:
 17506 ;;		_CC2500_PowerOnInitial
 17507 ;; This function uses a non-reentrant model
 17508 ;;
 17509                           
 17510                           
 17511                           ;psect for function _CC2500_InitPATable
 17512  1CDE                     _CC2500_InitPATable:	
 17513                           
 17514                           ;CC2500_B1.c: 147: unsigned char loop_d;
 17515                           ;CC2500_B1.c: 148: unsigned char temp;
 17516                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 17517                           
 17518                           ;incstack = 0
 17519                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17520  1CDE  0020               	movlb	0	; select bank0
 17521  1CDF  01A7               	clrf	CC2500_InitPATable@loop_d
 17522  1CE0                     L17:	
 17523  1CE0  3008               	movlw	8
 17524  1CE1  0227               	subwf	CC2500_InitPATable@loop_d,w
 17525  1CE2  1803               	btfsc	3,0
 17526  1CE3  0008               	return
 17527                           
 17528                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 17529  1CE4  0827               	movf	CC2500_InitPATable@loop_d,w
 17530  1CE5  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17531  1CE6  0084               	movwf	4
 17532  1CE7  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17533  1CE8  1803               	skipnc
 17534  1CE9  3E01               	addlw	1
 17535  1CEA  0085               	movwf	5
 17536  1CEB  0800               	movf	0,w	;code access
 17537  1CEC  00A5               	movwf	??_CC2500_InitPATable
 17538  1CED  0825               	movf	??_CC2500_InitPATable,w
 17539  1CEE  00A6               	movwf	CC2500_InitPATable@temp
 17540                           
 17541                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 17542  1CEF  0826               	movf	CC2500_InitPATable@temp,w
 17543  1CF0  00A5               	movwf	??_CC2500_InitPATable
 17544  1CF1  0825               	movf	??_CC2500_InitPATable,w
 17545  1CF2  00A2               	movwf	CC2500_WriteREG@value
 17546  1CF3  303E               	movlw	62
 17547  1CF4  319B  23B5  319C   	fcall	_CC2500_WriteREG
 17548  1CF7  3001               	movlw	1
 17549  1CF8  0020               	movlb	0	; select bank0
 17550  1CF9  00A5               	movwf	??_CC2500_InitPATable
 17551  1CFA  0825               	movf	??_CC2500_InitPATable,w
 17552  1CFB  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17553  1CFC  2CE0               	goto	L17
 17554  1CFD                     __end_of_CC2500_InitPATable:	
 17555                           
 17556                           	psect	text114
 17557  1BB5                     __ptext114:	
 17558 ;; *************** function _CC2500_WriteREG *****************
 17559 ;; Defined at:
 17560 ;;		line 223 in file "../src/CC2500_B1.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  w_addr          1    wreg     unsigned char 
 17563 ;;  value           1    2[BANK0 ] unsigned char 
 17564 ;; Auto vars:     Size  Location     Type
 17565 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17566 ;; Return value:  Size  Location     Type
 17567 ;;		None               void
 17568 ;; Registers used:
 17569 ;;		wreg, status,2, status,0, pclath, cstack
 17570 ;; Tracked objects:
 17571 ;;		On entry : 0/0
 17572 ;;		On exit  : 0/0
 17573 ;;		Unchanged: 0/0
 17574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17578 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17579 ;;Total ram usage:        3 bytes
 17580 ;; Hardware stack levels used:    1
 17581 ;; Hardware stack levels required when called:    6
 17582 ;; This function calls:
 17583 ;;		_CC2500_WriteByte
 17584 ;; This function is called by:
 17585 ;;		_CC2500_InitSetREG
 17586 ;;		_CC2500_InitPATable
 17587 ;; This function uses a non-reentrant model
 17588 ;;
 17589                           
 17590                           
 17591                           ;psect for function _CC2500_WriteREG
 17592  1BB5                     _CC2500_WriteREG:	
 17593                           
 17594                           ;incstack = 0
 17595                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 17596                           ;CC2500_WriteREG@w_addr stored from wreg
 17597  1BB5  0020               	movlb	0	; select bank0
 17598  1BB6  00A4               	movwf	CC2500_WriteREG@w_addr
 17599                           
 17600                           ;CC2500_B1.c: 224: RC4 = 0;
 17601  1BB7  120E               	bcf	14,4	;volatile
 17602                           
 17603                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 17604  1BB8  0824               	movf	CC2500_WriteREG@w_addr,w
 17605  1BB9  00A3               	movwf	??_CC2500_WriteREG
 17606  1BBA  0823               	movf	??_CC2500_WriteREG,w
 17607  1BBB  0021               	movlb	1	; select bank1
 17608  1BBC  00C2               	movwf	_SPI0Buffer^(0+128)
 17609  1BBD                     l356:	
 17610                           ;CC2500_B1.c: 226: while (RC2 == 1);
 17611                           
 17612  1BBD  0020               	movlb	0	; select bank0
 17613  1BBE  190E               	btfsc	14,2	;volatile
 17614  1BBF  2BBD               	goto	l356
 17615                           
 17616                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 17617  1BC0  319B  239C  319B   	fcall	_CC2500_WriteByte
 17618                           
 17619                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 17620  1BC3  0020               	movlb	0	; select bank0
 17621  1BC4  0822               	movf	CC2500_WriteREG@value,w
 17622  1BC5  00A3               	movwf	??_CC2500_WriteREG
 17623  1BC6  0823               	movf	??_CC2500_WriteREG,w
 17624  1BC7  0021               	movlb	1	; select bank1
 17625  1BC8  00C2               	movwf	_SPI0Buffer^(0+128)
 17626                           
 17627                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 17628  1BC9  319B  239C         	fcall	_CC2500_WriteByte
 17629                           
 17630                           ;CC2500_B1.c: 230: RC4 = 1;
 17631  1BCB  0020               	movlb	0	; select bank0
 17632  1BCC  160E               	bsf	14,4	;volatile
 17633  1BCD  0008               	return
 17634  1BCE                     __end_of_CC2500_WriteREG:	
 17635                           
 17636                           	psect	text115
 17637  1968                     __ptext115:	
 17638 ;; *************** function _CC2500_FrequencyCabr *****************
 17639 ;; Defined at:
 17640 ;;		line 173 in file "../src/CC2500_B1.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;		None
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;		None
 17645 ;; Return value:  Size  Location     Type
 17646 ;;		None               void
 17647 ;; Registers used:
 17648 ;;		wreg, status,2, status,0, pclath, cstack
 17649 ;; Tracked objects:
 17650 ;;		On entry : 0/0
 17651 ;;		On exit  : 0/0
 17652 ;;		Unchanged: 0/0
 17653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;Total ram usage:        0 bytes
 17659 ;; Hardware stack levels used:    1
 17660 ;; Hardware stack levels required when called:    7
 17661 ;; This function calls:
 17662 ;;		_CC2500_WriteCommand
 17663 ;;		_DelayTime_1us
 17664 ;; This function is called by:
 17665 ;;		_CC2500_PowerOnInitial
 17666 ;; This function uses a non-reentrant model
 17667 ;;
 17668                           
 17669                           
 17670                           ;psect for function _CC2500_FrequencyCabr
 17671  1968                     _CC2500_FrequencyCabr:	
 17672                           
 17673                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 17674                           
 17675                           ;incstack = 0
 17676                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 17677  1968  3033               	movlw	51
 17678  1969  319A  2221  3199   	fcall	_CC2500_WriteCommand
 17679                           
 17680                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 17681  196C  30E8               	movlw	232
 17682  196D  0020               	movlb	0	; select bank0
 17683  196E  00A0               	movwf	DelayTime_1us@count
 17684  196F  3003               	movlw	3
 17685  1970  00A1               	movwf	DelayTime_1us@count+1
 17686  1971  319D  25A5         	fcall	_DelayTime_1us
 17687  1973  0008               	return
 17688  1974                     __end_of_CC2500_FrequencyCabr:	
 17689                           
 17690                           	psect	text116
 17691  1DA5                     __ptext116:	
 17692 ;; *************** function _DelayTime_1us *****************
 17693 ;; Defined at:
 17694 ;;		line 279 in file "../src/CC2500_B1.c"
 17695 ;; Parameters:    Size  Location     Type
 17696 ;;  count           2    0[BANK0 ] int 
 17697 ;; Auto vars:     Size  Location     Type
 17698 ;;  j               2    4[BANK0 ] unsigned int 
 17699 ;;  i               2    2[BANK0 ] unsigned int 
 17700 ;; Return value:  Size  Location     Type
 17701 ;;		None               void
 17702 ;; Registers used:
 17703 ;;		wreg, status,2
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;Total ram usage:        6 bytes
 17714 ;; Hardware stack levels used:    1
 17715 ;; Hardware stack levels required when called:    5
 17716 ;; This function calls:
 17717 ;;		Nothing
 17718 ;; This function is called by:
 17719 ;;		_CC2500_PowerRST
 17720 ;;		_CC2500_FrequencyCabr
 17721 ;; This function uses a non-reentrant model
 17722 ;;
 17723                           
 17724                           
 17725                           ;psect for function _DelayTime_1us
 17726  1DA5                     _DelayTime_1us:	
 17727                           
 17728                           ;CC2500_B1.c: 280: unsigned int i, j;
 17729                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 17730                           
 17731                           ;incstack = 0
 17732                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17733  1DA5  3001               	movlw	1
 17734  1DA6  0020               	movlb	0	; select bank0
 17735  1DA7  00A2               	movwf	DelayTime_1us@i
 17736  1DA8  3000               	movlw	0
 17737  1DA9  00A3               	movwf	DelayTime_1us@i+1
 17738  1DAA                     l380:	
 17739  1DAA  0821               	movf	DelayTime_1us@count+1,w
 17740  1DAB  0223               	subwf	DelayTime_1us@i+1,w
 17741  1DAC  1D03               	skipz
 17742  1DAD  2DB0               	goto	u5175
 17743  1DAE  0820               	movf	DelayTime_1us@count,w
 17744  1DAF  0222               	subwf	DelayTime_1us@i,w
 17745  1DB0                     u5175:	
 17746  1DB0  1803               	btfsc	3,0
 17747  1DB1  0008               	return
 17748                           
 17749                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 17750  1DB2  01A4               	clrf	DelayTime_1us@j
 17751  1DB3  01A5               	clrf	DelayTime_1us@j+1
 17752  1DB4  3000               	movlw	0
 17753  1DB5  0225               	subwf	DelayTime_1us@j+1,w
 17754  1DB6  3002               	movlw	2
 17755  1DB7  1903               	skipnz
 17756  1DB8  0224               	subwf	DelayTime_1us@j,w
 17757  1DB9  1803               	btfsc	3,0
 17758  1DBA  2DC6               	goto	l6452
 17759  1DBB                     l6450:	
 17760  1DBB  3001               	movlw	1
 17761  1DBC  07A4               	addwf	DelayTime_1us@j,f
 17762  1DBD  3000               	movlw	0
 17763  1DBE  3DA5               	addwfc	DelayTime_1us@j+1,f
 17764  1DBF  3000               	movlw	0
 17765  1DC0  0225               	subwf	DelayTime_1us@j+1,w
 17766  1DC1  3002               	movlw	2
 17767  1DC2  1903               	skipnz
 17768  1DC3  0224               	subwf	DelayTime_1us@j,w
 17769  1DC4  1C03               	skipc
 17770  1DC5  2DBB               	goto	l6450
 17771  1DC6                     l6452:	
 17772  1DC6  3001               	movlw	1
 17773  1DC7  07A2               	addwf	DelayTime_1us@i,f
 17774  1DC8  3000               	movlw	0
 17775  1DC9  3DA3               	addwfc	DelayTime_1us@i+1,f
 17776  1DCA  2DAA               	goto	l380
 17777  1DCB                     __end_of_DelayTime_1us:	
 17778                           
 17779                           	psect	text117
 17780  18A7                     __ptext117:	
 17781 ;; *************** function _CC2500_ClearTXFIFO *****************
 17782 ;; Defined at:
 17783 ;;		line 159 in file "../src/CC2500_B1.c"
 17784 ;; Parameters:    Size  Location     Type
 17785 ;;		None
 17786 ;; Auto vars:     Size  Location     Type
 17787 ;;		None
 17788 ;; Return value:  Size  Location     Type
 17789 ;;		None               void
 17790 ;; Registers used:
 17791 ;;		wreg, status,2, status,0, pclath, cstack
 17792 ;; Tracked objects:
 17793 ;;		On entry : 0/0
 17794 ;;		On exit  : 0/0
 17795 ;;		Unchanged: 0/0
 17796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;Total ram usage:        0 bytes
 17802 ;; Hardware stack levels used:    1
 17803 ;; Hardware stack levels required when called:    7
 17804 ;; This function calls:
 17805 ;;		_CC2500_WriteCommand
 17806 ;; This function is called by:
 17807 ;;		_CC2500_PowerOnInitial
 17808 ;; This function uses a non-reentrant model
 17809 ;;
 17810                           
 17811                           
 17812                           ;psect for function _CC2500_ClearTXFIFO
 17813  18A7                     _CC2500_ClearTXFIFO:	
 17814                           
 17815                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 17816                           
 17817                           ;incstack = 0
 17818                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17819  18A7  303B               	movlw	59
 17820  18A8  319A  2221         	fcall	_CC2500_WriteCommand
 17821  18AA  0008               	return
 17822  18AB                     __end_of_CC2500_ClearTXFIFO:	
 17823                           
 17824                           	psect	text118
 17825  18A3                     __ptext118:	
 17826 ;; *************** function _CC2500_ClearRXFIFO *****************
 17827 ;; Defined at:
 17828 ;;		line 166 in file "../src/CC2500_B1.c"
 17829 ;; Parameters:    Size  Location     Type
 17830 ;;		None
 17831 ;; Auto vars:     Size  Location     Type
 17832 ;;		None
 17833 ;; Return value:  Size  Location     Type
 17834 ;;		None               void
 17835 ;; Registers used:
 17836 ;;		wreg, status,2, status,0, pclath, cstack
 17837 ;; Tracked objects:
 17838 ;;		On entry : 0/0
 17839 ;;		On exit  : 0/0
 17840 ;;		Unchanged: 0/0
 17841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;Total ram usage:        0 bytes
 17847 ;; Hardware stack levels used:    1
 17848 ;; Hardware stack levels required when called:    7
 17849 ;; This function calls:
 17850 ;;		_CC2500_WriteCommand
 17851 ;; This function is called by:
 17852 ;;		_CC2500_PowerOnInitial
 17853 ;; This function uses a non-reentrant model
 17854 ;;
 17855                           
 17856                           
 17857                           ;psect for function _CC2500_ClearRXFIFO
 17858  18A3                     _CC2500_ClearRXFIFO:	
 17859                           
 17860                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 17861                           
 17862                           ;incstack = 0
 17863                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17864  18A3  303A               	movlw	58
 17865  18A4  319A  2221         	fcall	_CC2500_WriteCommand
 17866  18A6  0008               	return
 17867  18A7                     __end_of_CC2500_ClearRXFIFO:	
 17868                           
 17869                           	psect	text119
 17870  1A21                     __ptext119:	
 17871 ;; *************** function _CC2500_WriteCommand *****************
 17872 ;; Defined at:
 17873 ;;		line 249 in file "../src/CC2500_B1.c"
 17874 ;; Parameters:    Size  Location     Type
 17875 ;;  command         1    wreg     unsigned char 
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;  command         1    3[BANK0 ] unsigned char 
 17878 ;; Return value:  Size  Location     Type
 17879 ;;		None               void
 17880 ;; Registers used:
 17881 ;;		wreg, status,2, status,0, pclath, cstack
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;Total ram usage:        2 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:    6
 17894 ;; This function calls:
 17895 ;;		_CC2500_WriteByte
 17896 ;; This function is called by:
 17897 ;;		_CC2500_TxData
 17898 ;;		_CC2500_RxData
 17899 ;;		_CC2500_ClearTXFIFO
 17900 ;;		_CC2500_ClearRXFIFO
 17901 ;;		_CC2500_FrequencyCabr
 17902 ;;		_CC2500_SIDLEMode
 17903 ;;		_setRF_Main
 17904 ;;		_RF_RxDisable
 17905 ;; This function uses a non-reentrant model
 17906 ;;
 17907                           
 17908                           
 17909                           ;psect for function _CC2500_WriteCommand
 17910  1A21                     _CC2500_WriteCommand:	
 17911                           
 17912                           ;incstack = 0
 17913                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 17914                           ;CC2500_WriteCommand@command stored from wreg
 17915  1A21  0020               	movlb	0	; select bank0
 17916  1A22  00A3               	movwf	CC2500_WriteCommand@command
 17917                           
 17918                           ;CC2500_B1.c: 250: RC4 = 0;
 17919  1A23  120E               	bcf	14,4	;volatile
 17920                           
 17921                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 17922  1A24  0823               	movf	CC2500_WriteCommand@command,w
 17923  1A25  00A2               	movwf	??_CC2500_WriteCommand
 17924  1A26  0822               	movf	??_CC2500_WriteCommand,w
 17925  1A27  0021               	movlb	1	; select bank1
 17926  1A28  00C2               	movwf	_SPI0Buffer^(0+128)
 17927  1A29                     l368:	
 17928                           ;CC2500_B1.c: 253: while (RC2 == 1);
 17929                           
 17930  1A29  0020               	movlb	0	; select bank0
 17931  1A2A  190E               	btfsc	14,2	;volatile
 17932  1A2B  2A29               	goto	l368
 17933                           
 17934                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 17935  1A2C  319B  239C         	fcall	_CC2500_WriteByte
 17936                           
 17937                           ;CC2500_B1.c: 256: RC4 = 1;
 17938  1A2E  0020               	movlb	0	; select bank0
 17939  1A2F  160E               	bsf	14,4	;volatile
 17940  1A30  0008               	return
 17941  1A31                     __end_of_CC2500_WriteCommand:	
 17942                           
 17943                           	psect	text120
 17944  1B9C                     __ptext120:	
 17945 ;; *************** function _CC2500_WriteByte *****************
 17946 ;; Defined at:
 17947 ;;		line 191 in file "../src/CC2500_B1.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;		None
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17952 ;; Return value:  Size  Location     Type
 17953 ;;		None               void
 17954 ;; Registers used:
 17955 ;;		wreg, status,2, status,0
 17956 ;; Tracked objects:
 17957 ;;		On entry : 0/0
 17958 ;;		On exit  : 0/0
 17959 ;;		Unchanged: 0/0
 17960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;Total ram usage:        2 bytes
 17966 ;; Hardware stack levels used:    1
 17967 ;; Hardware stack levels required when called:    5
 17968 ;; This function calls:
 17969 ;;		Nothing
 17970 ;; This function is called by:
 17971 ;;		_CC2500_TxData
 17972 ;;		_CC2500_RxData
 17973 ;;		_CC2500_PowerRST
 17974 ;;		_CC2500_WriteREG
 17975 ;;		_CC2500_WriteCommand
 17976 ;;		_CC2500_ReadStatus
 17977 ;;		_CC2500_ReadREG
 17978 ;; This function uses a non-reentrant model
 17979 ;;
 17980                           
 17981                           
 17982                           ;psect for function _CC2500_WriteByte
 17983  1B9C                     _CC2500_WriteByte:	
 17984                           
 17985                           ;CC2500_B1.c: 192: unsigned char loop_a;
 17986                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 17987                           
 17988                           ;incstack = 0
 17989                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17990  1B9C  0020               	movlb	0	; select bank0
 17991  1B9D  01A1               	clrf	CC2500_WriteByte@loop_a
 17992  1B9E                     L18:	
 17993  1B9E  3008               	movlw	8
 17994  1B9F  0221               	subwf	CC2500_WriteByte@loop_a,w
 17995  1BA0  1803               	btfsc	3,0
 17996  1BA1  0008               	return
 17997                           
 17998                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 17999  1BA2  0021               	movlb	1	; select bank1
 18000  1BA3  1FC2               	btfss	_SPI0Buffer^(0+128),7
 18001  1BA4  2BA8               	goto	l344
 18002                           
 18003                           ;CC2500_B1.c: 195: RC0 = 1;
 18004  1BA5  0020               	movlb	0	; select bank0
 18005  1BA6  140E               	bsf	14,0	;volatile
 18006  1BA7  2BAA               	goto	l345
 18007  1BA8                     l344:	
 18008                           
 18009                           ;CC2500_B1.c: 196: else
 18010                           ;CC2500_B1.c: 197: RC0 = 0;
 18011  1BA8  0020               	movlb	0	; select bank0
 18012  1BA9  100E               	bcf	14,0	;volatile
 18013  1BAA                     l345:	
 18014                           
 18015                           ;CC2500_B1.c: 198: RC1 = 1;
 18016  1BAA  148E               	bsf	14,1	;volatile
 18017                           
 18018                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 18019  1BAB  1003               	clrc
 18020  1BAC  0021               	movlb	1	; select bank1
 18021  1BAD  0DC2               	rlf	_SPI0Buffer^(0+128),f
 18022                           
 18023                           ;CC2500_B1.c: 200: RC1 = 0;
 18024  1BAE  0020               	movlb	0	; select bank0
 18025  1BAF  108E               	bcf	14,1	;volatile
 18026  1BB0  3001               	movlw	1
 18027  1BB1  00A0               	movwf	??_CC2500_WriteByte
 18028  1BB2  0820               	movf	??_CC2500_WriteByte,w
 18029  1BB3  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18030  1BB4  2B9E               	goto	L18
 18031  1BB5                     __end_of_CC2500_WriteByte:	
 18032                           
 18033                           	psect	text121
 18034  0E99                     __ptext121:	
 18035 ;; *************** function _Buzzer_Main *****************
 18036 ;; Defined at:
 18037 ;;		line 54 in file "../src/Buzzer_B1.c"
 18038 ;; Parameters:    Size  Location     Type
 18039 ;;		None
 18040 ;; Auto vars:     Size  Location     Type
 18041 ;;		None
 18042 ;; Return value:  Size  Location     Type
 18043 ;;		None               void
 18044 ;; Registers used:
 18045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18046 ;; Tracked objects:
 18047 ;;		On entry : 0/0
 18048 ;;		On exit  : 0/0
 18049 ;;		Unchanged: 0/0
 18050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18053 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;Total ram usage:        4 bytes
 18056 ;; Hardware stack levels used:    1
 18057 ;; Hardware stack levels required when called:    5
 18058 ;; This function calls:
 18059 ;;		Nothing
 18060 ;; This function is called by:
 18061 ;;		_main
 18062 ;; This function uses a non-reentrant model
 18063 ;;
 18064                           
 18065                           
 18066                           ;psect for function _Buzzer_Main
 18067  0E99                     _Buzzer_Main:	
 18068                           
 18069                           ;Buzzer_B1.c: 55: Buz->Switch = (RB3) ? 1 : 0;
 18070                           
 18071                           ;incstack = 0
 18072                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 18073  0E99  0021               	movlb	1	; select bank1
 18074  0E9A  0837               	movf	_Buz^(0+128),w
 18075  0E9B  0086               	movwf	6
 18076  0E9C  3001               	movlw	1	; select bank2/3
 18077  0E9D  0087               	movwf	7
 18078  0E9E  1281               	bcf	1,5
 18079  0E9F  0020               	movlb	0	; select bank0
 18080  0EA0  198D               	btfsc	13,3	;volatile
 18081  0EA1  1681               	bsf	1,5
 18082                           
 18083                           ;Buzzer_B1.c: 57: if (Buz->Counter >= Buz->TimeValue) {
 18084  0EA2  0021               	movlb	1	; select bank1
 18085  0EA3  0837               	movf	_Buz^(0+128),w
 18086  0EA4  3E06               	addlw	6
 18087  0EA5  0086               	movwf	6
 18088  0EA6  3001               	movlw	1	; select bank2/3
 18089  0EA7  0087               	movwf	7
 18090  0EA8  3F40               	moviw [0]fsr1
 18091  0EA9  0020               	movlb	0	; select bank0
 18092  0EAA  00A0               	movwf	??_Buzzer_Main
 18093  0EAB  3F41               	moviw [1]fsr1
 18094  0EAC  00A1               	movwf	??_Buzzer_Main+1
 18095  0EAD  0021               	movlb	1	; select bank1
 18096  0EAE  0A37               	incf	_Buz^(0+128),w
 18097  0EAF  0086               	movwf	6
 18098  0EB0  3001               	movlw	1	; select bank2/3
 18099  0EB1  0087               	movwf	7
 18100  0EB2  3F40               	moviw [0]fsr1
 18101  0EB3  0020               	movlb	0	; select bank0
 18102  0EB4  00A2               	movwf	??_Buzzer_Main+2
 18103  0EB5  3F41               	moviw [1]fsr1
 18104  0EB6  00A3               	movwf	??_Buzzer_Main+3
 18105  0EB7  0821               	movf	??_Buzzer_Main+1,w
 18106  0EB8  0223               	subwf	??_Buzzer_Main+3,w
 18107  0EB9  1D03               	skipz
 18108  0EBA  2EBD               	goto	u6575
 18109  0EBB  0820               	movf	??_Buzzer_Main,w
 18110  0EBC  0222               	subwf	??_Buzzer_Main+2,w
 18111  0EBD                     u6575:	
 18112  0EBD  1C03               	skipc
 18113  0EBE  0008               	return
 18114                           
 18115                           ;Buzzer_B1.c: 58: Buz->Counter = 0;
 18116  0EBF  0021               	movlb	1	; select bank1
 18117  0EC0  0A37               	incf	_Buz^(0+128),w
 18118  0EC1  0086               	movwf	6
 18119  0EC2  3001               	movlw	1	; select bank2/3
 18120  0EC3  0087               	movwf	7
 18121  0EC4  3000               	movlw	0
 18122  0EC5  3FC0               	movwi [0]fsr1
 18123  0EC6  3FC1               	movwi [1]fsr1
 18124                           
 18125                           ;Buzzer_B1.c: 59: if (!Buz->Switch) {
 18126  0EC7  0837               	movf	_Buz^(0+128),w
 18127  0EC8  0086               	movwf	6
 18128  0EC9  3001               	movlw	1	; select bank2/3
 18129  0ECA  0087               	movwf	7
 18130  0ECB  1A81               	btfsc	1,5
 18131  0ECC  2F3B               	goto	l7400
 18132                           
 18133                           ;Buzzer_B1.c: 60: if (Buz->Count == 0) {
 18134  0ECD  0837               	movf	_Buz^(0+128),w
 18135  0ECE  3E03               	addlw	3
 18136  0ECF  0086               	movwf	6
 18137  0ED0  3001               	movlw	1	; select bank2/3
 18138  0ED1  0087               	movwf	7
 18139  0ED2  0881               	movf	1,f
 18140  0ED3  1D03               	skipz
 18141  0ED4  2F33               	goto	l7396
 18142                           
 18143                           ;Buzzer_B1.c: 61: if (Buz->BufferStatus1) {
 18144  0ED5  0837               	movf	_Buz^(0+128),w
 18145  0ED6  0086               	movwf	6
 18146  0ED7  3001               	movlw	1	; select bank2/3
 18147  0ED8  0087               	movwf	7
 18148  0ED9  1D81               	btfss	1,3
 18149  0EDA  2F01               	goto	l7388
 18150                           
 18151                           ;Buzzer_B1.c: 62: Buz->BufferStatus1 = 0;
 18152  0EDB  0837               	movf	_Buz^(0+128),w
 18153  0EDC  0086               	movwf	6
 18154  0EDD  3001               	movlw	1	; select bank2/3
 18155  0EDE  0087               	movwf	7
 18156  0EDF  1181               	bcf	1,3
 18157                           
 18158                           ;Buzzer_B1.c: 63: Buz->Count = Buz->CountBuffer1;
 18159  0EE0  0837               	movf	_Buz^(0+128),w
 18160  0EE1  3E04               	addlw	4
 18161  0EE2  0086               	movwf	6
 18162  0EE3  3001               	movlw	1	; select bank2/3
 18163  0EE4  0087               	movwf	7
 18164  0EE5  0801               	movf	1,w
 18165  0EE6  0020               	movlb	0	; select bank0
 18166  0EE7  00A0               	movwf	??_Buzzer_Main
 18167  0EE8  0021               	movlb	1	; select bank1
 18168  0EE9  0837               	movf	_Buz^(0+128),w
 18169  0EEA  3E03               	addlw	3
 18170  0EEB  0086               	movwf	6
 18171  0EEC  3001               	movlw	1	; select bank2/3
 18172  0EED  0087               	movwf	7
 18173  0EEE  0020               	movlb	0	; select bank0
 18174  0EEF  0820               	movf	??_Buzzer_Main,w
 18175  0EF0  0081               	movwf	1
 18176                           
 18177                           ;Buzzer_B1.c: 64: Buz->TimeValue = Buz->TimeValueBuffer1;
 18178  0EF1  0021               	movlb	1	; select bank1
 18179  0EF2  0837               	movf	_Buz^(0+128),w
 18180  0EF3  3E08               	addlw	8
 18181  0EF4  0086               	movwf	6
 18182  0EF5  3001               	movlw	1	; select bank2/3
 18183  0EF6  0087               	movwf	7
 18184  0EF7  0837               	movf	_Buz^(0+128),w
 18185  0EF8  3E06               	addlw	6
 18186  0EF9  0084               	movwf	4
 18187  0EFA  3001               	movlw	1	; select bank2/3
 18188  0EFB  0085               	movwf	5
 18189  0EFC  3F40               	moviw [0]fsr1
 18190  0EFD  3F80               	movwi [0]fsr0
 18191  0EFE  3F41               	moviw [1]fsr1
 18192  0EFF  3F81               	movwi [1]fsr0
 18193                           
 18194                           ;Buzzer_B1.c: 65: } else if (Buz->BufferStatus2) {
 18195  0F00  0008               	return
 18196  0F01                     l7388:	
 18197  0F01  0837               	movf	_Buz^(0+128),w
 18198  0F02  0086               	movwf	6
 18199  0F03  3001               	movlw	1	; select bank2/3
 18200  0F04  0087               	movwf	7
 18201  0F05  1E01               	btfss	1,4
 18202  0F06  2F2D               	goto	l7394
 18203                           
 18204                           ;Buzzer_B1.c: 66: Buz->BufferStatus2 = 0;
 18205  0F07  0837               	movf	_Buz^(0+128),w
 18206  0F08  0086               	movwf	6
 18207  0F09  3001               	movlw	1	; select bank2/3
 18208  0F0A  0087               	movwf	7
 18209  0F0B  1201               	bcf	1,4
 18210                           
 18211                           ;Buzzer_B1.c: 67: Buz->Count = Buz->CountBuffer2;
 18212  0F0C  0837               	movf	_Buz^(0+128),w
 18213  0F0D  3E05               	addlw	5
 18214  0F0E  0086               	movwf	6
 18215  0F0F  3001               	movlw	1	; select bank2/3
 18216  0F10  0087               	movwf	7
 18217  0F11  0801               	movf	1,w
 18218  0F12  0020               	movlb	0	; select bank0
 18219  0F13  00A0               	movwf	??_Buzzer_Main
 18220  0F14  0021               	movlb	1	; select bank1
 18221  0F15  0837               	movf	_Buz^(0+128),w
 18222  0F16  3E03               	addlw	3
 18223  0F17  0086               	movwf	6
 18224  0F18  3001               	movlw	1	; select bank2/3
 18225  0F19  0087               	movwf	7
 18226  0F1A  0020               	movlb	0	; select bank0
 18227  0F1B  0820               	movf	??_Buzzer_Main,w
 18228  0F1C  0081               	movwf	1
 18229                           
 18230                           ;Buzzer_B1.c: 68: Buz->TimeValue = Buz->TimeValueBuffer2;
 18231  0F1D  0021               	movlb	1	; select bank1
 18232  0F1E  0837               	movf	_Buz^(0+128),w
 18233  0F1F  3E0A               	addlw	10
 18234  0F20  0086               	movwf	6
 18235  0F21  3001               	movlw	1	; select bank2/3
 18236  0F22  0087               	movwf	7
 18237  0F23  0837               	movf	_Buz^(0+128),w
 18238  0F24  3E06               	addlw	6
 18239  0F25  0084               	movwf	4
 18240  0F26  3001               	movlw	1	; select bank2/3
 18241  0F27  0085               	movwf	5
 18242  0F28  3F40               	moviw [0]fsr1
 18243  0F29  3F80               	movwi [0]fsr0
 18244  0F2A  3F41               	moviw [1]fsr1
 18245  0F2B  3F81               	movwi [1]fsr0
 18246                           
 18247                           ;Buzzer_B1.c: 69: } else {
 18248  0F2C  0008               	return
 18249  0F2D                     l7394:	
 18250                           
 18251                           ;Buzzer_B1.c: 70: Buz->GO = 0;
 18252  0F2D  0837               	movf	_Buz^(0+128),w
 18253  0F2E  0086               	movwf	6
 18254  0F2F  3001               	movlw	1	; select bank2/3
 18255  0F30  0087               	movwf	7
 18256  0F31  1081               	bcf	1,1
 18257                           
 18258                           ;Buzzer_B1.c: 71: }
 18259                           ;Buzzer_B1.c: 72: } else {
 18260  0F32  0008               	return
 18261  0F33                     l7396:	
 18262                           
 18263                           ;Buzzer_B1.c: 73: Buz->Switch = 1;
 18264  0F33  0837               	movf	_Buz^(0+128),w
 18265  0F34  0086               	movwf	6
 18266  0F35  3001               	movlw	1	; select bank2/3
 18267  0F36  0087               	movwf	7
 18268  0F37  1681               	bsf	1,5
 18269                           
 18270                           ;Buzzer_B1.c: 75: RB3 = 1;
 18271  0F38  0020               	movlb	0	; select bank0
 18272  0F39  158D               	bsf	13,3	;volatile
 18273                           
 18274                           ;Buzzer_B1.c: 76: }
 18275                           ;Buzzer_B1.c: 77: } else {
 18276  0F3A  0008               	return
 18277  0F3B                     l7400:	
 18278                           
 18279                           ;Buzzer_B1.c: 78: Buz->Switch = 0;
 18280  0F3B  0021               	movlb	1	; select bank1
 18281  0F3C  0837               	movf	_Buz^(0+128),w
 18282  0F3D  0086               	movwf	6
 18283  0F3E  3001               	movlw	1	; select bank2/3
 18284  0F3F  0087               	movwf	7
 18285  0F40  1281               	bcf	1,5
 18286                           
 18287                           ;Buzzer_B1.c: 80: RB3 = 0;
 18288  0F41  0020               	movlb	0	; select bank0
 18289  0F42  118D               	bcf	13,3	;volatile
 18290                           
 18291                           ;Buzzer_B1.c: 82: Buz->Count--;
 18292  0F43  0021               	movlb	1	; select bank1
 18293  0F44  0837               	movf	_Buz^(0+128),w
 18294  0F45  3E03               	addlw	3
 18295  0F46  0086               	movwf	6
 18296  0F47  3001               	movlw	1	; select bank2/3
 18297  0F48  0087               	movwf	7
 18298  0F49  3001               	movlw	1
 18299  0F4A  0281               	subwf	1,f
 18300  0F4B  0008               	return
 18301  0F4C                     __end_of_Buzzer_Main:	
 18302                           
 18303                           	psect	text122
 18304  195C                     __ptext122:	
 18305 ;; *************** function _Buzzer_Initialization *****************
 18306 ;; Defined at:
 18307 ;;		line 11 in file "../src/Buzzer_B1.c"
 18308 ;; Parameters:    Size  Location     Type
 18309 ;;		None
 18310 ;; Auto vars:     Size  Location     Type
 18311 ;;		None
 18312 ;; Return value:  Size  Location     Type
 18313 ;;		None               void
 18314 ;; Registers used:
 18315 ;;		wreg, fsr1l, fsr1h
 18316 ;; Tracked objects:
 18317 ;;		On entry : 0/0
 18318 ;;		On exit  : 0/0
 18319 ;;		Unchanged: 0/0
 18320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;Total ram usage:        1 bytes
 18326 ;; Hardware stack levels used:    1
 18327 ;; Hardware stack levels required when called:    5
 18328 ;; This function calls:
 18329 ;;		Nothing
 18330 ;; This function is called by:
 18331 ;;		_main
 18332 ;; This function uses a non-reentrant model
 18333 ;;
 18334                           
 18335                           
 18336                           ;psect for function _Buzzer_Initialization
 18337  195C                     _Buzzer_Initialization:	
 18338                           
 18339                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 18340                           
 18341                           ;incstack = 0
 18342                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 18343  195C  303E               	movlw	_Buz1& (0+255)
 18344  195D  0020               	movlb	0	; select bank0
 18345  195E  00A0               	movwf	??_Buzzer_Initialization
 18346  195F  0820               	movf	??_Buzzer_Initialization,w
 18347  1960  0021               	movlb	1	; select bank1
 18348  1961  00B7               	movwf	_Buz^(0+128)
 18349                           
 18350                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 18351  1962  0837               	movf	_Buz^(0+128),w
 18352  1963  0086               	movwf	6
 18353  1964  3001               	movlw	1	; select bank2/3
 18354  1965  0087               	movwf	7
 18355  1966  1401               	bsf	1,0
 18356  1967  0008               	return
 18357  1968                     __end_of_Buzzer_Initialization:	
 18358                           
 18359                           	psect	intentry
 18360  0004                     __pintentry:	
 18361 ;; *************** function _ISR *****************
 18362 ;; Defined at:
 18363 ;;		line 109 in file "../src/MCU_B1.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;		None
 18366 ;; Auto vars:     Size  Location     Type
 18367 ;;		None
 18368 ;; Return value:  Size  Location     Type
 18369 ;;		None               void
 18370 ;; Registers used:
 18371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;Total ram usage:        1 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    4
 18384 ;; This function calls:
 18385 ;;		_INT_ISR
 18386 ;;		_IOC_ISR
 18387 ;;		_TMR0_ISR
 18388 ;; This function is called by:
 18389 ;;		Interrupt level 1
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393  0004                     _ISR:	
 18394                           
 18395                           ;incstack = 0
 18396                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18397  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18398  0005  3180               	pagesel	$
 18399  0006  0020               	movlb	0	; select bank0
 18400  0007  087F               	movf	127,w
 18401  0008  00F7               	movwf	??_ISR
 18402                           
 18403                           ;MCU_B1.c: 111: IOC_ISR();
 18404  0009  319A  2291  3180   	fcall	_IOC_ISR
 18405                           
 18406                           ;MCU_B1.c: 113: TMR0_ISR();
 18407  000C  3190  20B1  3180   	fcall	_TMR0_ISR
 18408                           
 18409                           ;MCU_B1.c: 115: ;;
 18410                           ;MCU_B1.c: 119: INT_ISR();
 18411  000F  3199  2150         	fcall	_INT_ISR
 18412  0011  0877               	movf	??_ISR,w
 18413  0012  0020               	movlb	0	; select bank0
 18414  0013  00FF               	movwf	127
 18415  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 18416  0015  0009               	retfie
 18417  0016                     __end_of_ISR:	
 18418                           
 18419                           	psect	text124
 18420  10B1                     __ptext124:	
 18421 ;; *************** function _TMR0_ISR *****************
 18422 ;; Defined at:
 18423 ;;		line 137 in file "../src/MCU_B1.c"
 18424 ;; Parameters:    Size  Location     Type
 18425 ;;		None
 18426 ;; Auto vars:     Size  Location     Type
 18427 ;;		None
 18428 ;; Return value:  Size  Location     Type
 18429 ;;		None               void
 18430 ;; Registers used:
 18431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18432 ;; Tracked objects:
 18433 ;;		On entry : 0/0
 18434 ;;		On exit  : 0/0
 18435 ;;		Unchanged: 0/0
 18436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;Total ram usage:        0 bytes
 18442 ;; Hardware stack levels used:    1
 18443 ;; Hardware stack levels required when called:    2
 18444 ;; This function calls:
 18445 ;;		_setDimmerLights_IntrControl
 18446 ;; This function is called by:
 18447 ;;		_ISR
 18448 ;; This function uses a non-reentrant model
 18449 ;;
 18450                           
 18451                           
 18452                           ;psect for function _TMR0_ISR
 18453  10B1                     _TMR0_ISR:	
 18454                           
 18455                           ;MCU_B1.c: 138: if (TMR0IE && TMR0IF) {
 18456                           
 18457                           ;incstack = 0
 18458                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18459  10B1  1E8B               	btfss	11,5	;volatile
 18460  10B2  0008               	return
 18461  10B3  1D0B               	btfss	11,2	;volatile
 18462  10B4  0008               	return
 18463                           
 18464                           ;MCU_B1.c: 139: TMR0 = (256-90);
 18465  10B5  30A6               	movlw	166
 18466  10B6  0020               	movlb	0	; select bank0
 18467  10B7  0095               	movwf	21	;volatile
 18468                           
 18469                           ;MCU_B1.c: 140: TMR0IF = 0;
 18470  10B8  110B               	bcf	11,2	;volatile
 18471                           
 18472                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 18473  10B9  3001               	movlw	1
 18474  10BA  3182  22F3  3190   	fcall	_setDimmerLights_IntrControl
 18475                           
 18476                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 18477  10BD  3002               	movlw	2
 18478  10BE  3182  22F3  3190   	fcall	_setDimmerLights_IntrControl
 18479                           
 18480                           ;MCU_B1.c: 161: Timer0->Count++;
 18481  10C1  0021               	movlb	1	; select bank1
 18482  10C2  0A68               	incf	_Timer0^(0+128),w
 18483  10C3  0086               	movwf	6
 18484  10C4  3001               	movlw	1	; select bank2/3
 18485  10C5  0087               	movwf	7
 18486  10C6  3001               	movlw	1
 18487  10C7  0781               	addwf	1,f
 18488  10C8  3141               	addfsr 1,1
 18489  10C9  1803               	skipnc
 18490  10CA  0A81               	incf	1,f
 18491                           
 18492                           ;MCU_B1.c: 162: if (Timer0->Count == 200) {
 18493  10CB  0A68               	incf	_Timer0^(0+128),w
 18494  10CC  0086               	movwf	6
 18495  10CD  3001               	movlw	1	; select bank2/3
 18496  10CE  0087               	movwf	7
 18497  10CF  3F40               	moviw [0]fsr1
 18498  10D0  3AC8               	xorlw	200
 18499  10D1  1D03               	skipz
 18500  10D2  28D5               	goto	u667_25
 18501  10D3  3F41               	moviw [1]fsr1
 18502  10D4  3A00               	xorlw	0
 18503  10D5                     u667_25:	
 18504  10D5  1D03               	skipz
 18505  10D6  0008               	return
 18506                           
 18507                           ;MCU_B1.c: 163: Timer0->Count = 0;
 18508  10D7  0A68               	incf	_Timer0^(0+128),w
 18509  10D8  0086               	movwf	6
 18510  10D9  3001               	movlw	1	; select bank2/3
 18511  10DA  0087               	movwf	7
 18512  10DB  3000               	movlw	0
 18513  10DC  3FC0               	movwi [0]fsr1
 18514  10DD  3FC1               	movwi [1]fsr1
 18515                           
 18516                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 18517  10DE  086A               	movf	_myMain^(0+128),w
 18518  10DF  0086               	movwf	6
 18519  10E0  3001               	movlw	1	; select bank2/3
 18520  10E1  0087               	movwf	7
 18521  10E2  1481               	bsf	1,1
 18522                           
 18523                           ;MCU_B1.c: 166: if (Buz->GO) {
 18524  10E3  0837               	movf	_Buz^(0+128),w
 18525  10E4  0086               	movwf	6
 18526  10E5  3001               	movlw	1	; select bank2/3
 18527  10E6  0087               	movwf	7
 18528  10E7  1C81               	btfss	1,1
 18529  10E8  0008               	return
 18530                           
 18531                           ;MCU_B1.c: 167: Buz->Counter++;
 18532  10E9  0A37               	incf	_Buz^(0+128),w
 18533  10EA  0086               	movwf	6
 18534  10EB  3001               	movlw	1	; select bank2/3
 18535  10EC  0087               	movwf	7
 18536  10ED  3001               	movlw	1
 18537  10EE  0781               	addwf	1,f
 18538  10EF  3141               	addfsr 1,1
 18539  10F0  1803               	skipnc
 18540  10F1  0A81               	incf	1,f
 18541  10F2  0008               	return
 18542  10F3                     __end_of_TMR0_ISR:	
 18543                           
 18544                           	psect	text125
 18545  02F3                     __ptext125:	
 18546 ;; *************** function _setDimmerLights_IntrControl *****************
 18547 ;; Defined at:
 18548 ;;		line 29 in file "../src/Dimmer_B1.c"
 18549 ;; Parameters:    Size  Location     Type
 18550 ;;  lights          1    wreg     unsigned char 
 18551 ;; Auto vars:     Size  Location     Type
 18552 ;;  lights          1    6[COMMON] unsigned char 
 18553 ;; Return value:  Size  Location     Type
 18554 ;;		None               void
 18555 ;; Registers used:
 18556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18557 ;; Tracked objects:
 18558 ;;		On entry : 0/0
 18559 ;;		On exit  : 0/0
 18560 ;;		Unchanged: 0/0
 18561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18564 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18565 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;Total ram usage:        5 bytes
 18567 ;; Hardware stack levels used:    1
 18568 ;; Hardware stack levels required when called:    1
 18569 ;; This function calls:
 18570 ;;		_DimmerIntrPointSelect
 18571 ;;		i1_setLoad_StatusOff
 18572 ;; This function is called by:
 18573 ;;		_TMR0_ISR
 18574 ;; This function uses a non-reentrant model
 18575 ;;
 18576                           
 18577                           
 18578                           ;psect for function _setDimmerLights_IntrControl
 18579  02F3                     _setDimmerLights_IntrControl:	
 18580                           
 18581                           ;incstack = 0
 18582                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18583                           ;setDimmerLights_IntrControl@lights stored from wreg
 18584  02F3  00F6               	movwf	setDimmerLights_IntrControl@lights
 18585                           
 18586                           ;Dimmer_B1.c: 30: DimmerIntrPointSelect(lights);
 18587  02F4  0876               	movf	setDimmerLights_IntrControl@lights,w
 18588  02F5  319A  22B3  3182   	fcall	_DimmerIntrPointSelect
 18589                           
 18590                           ;Dimmer_B1.c: 31: if (DimmerLightsIntr->MosfetSignal == 1) {
 18591  02F8  0879               	movf	_DimmerLightsIntr,w
 18592  02F9  3E0C               	addlw	12
 18593  02FA  0086               	movwf	6
 18594  02FB  3001               	movlw	1	; select bank2/3
 18595  02FC  0087               	movwf	7
 18596  02FD  1C81               	btfss	1,1
 18597  02FE  2B1F               	goto	i1l6872
 18598                           
 18599                           ;Dimmer_B1.c: 32: DimmerLightsIntr->MosfetSignalCount++;
 18600  02FF  3001               	movlw	1
 18601  0300  00F2               	movwf	??_setDimmerLights_IntrControl
 18602  0301  0879               	movf	_DimmerLightsIntr,w
 18603  0302  3E0D               	addlw	13
 18604  0303  0086               	movwf	6
 18605  0304  3001               	movlw	1	; select bank2/3
 18606  0305  0087               	movwf	7
 18607  0306  0872               	movf	??_setDimmerLights_IntrControl,w
 18608  0307  0781               	addwf	1,f
 18609                           
 18610                           ;Dimmer_B1.c: 33: if (DimmerLightsIntr->MosfetSignalCount == 100) {
 18611  0308  0879               	movf	_DimmerLightsIntr,w
 18612  0309  3E0D               	addlw	13
 18613  030A  0086               	movwf	6
 18614  030B  3001               	movlw	1	; select bank2/3
 18615  030C  0087               	movwf	7
 18616  030D  0801               	movf	1,w
 18617  030E  3A64               	xorlw	100
 18618  030F  1D03               	skipz
 18619  0310  2B1F               	goto	i1l6872
 18620                           
 18621                           ;Dimmer_B1.c: 34: DimmerLightsIntr->MosfetSignalCount = 0;
 18622  0311  0879               	movf	_DimmerLightsIntr,w
 18623  0312  3E0D               	addlw	13
 18624  0313  0086               	movwf	6
 18625  0314  3001               	movlw	1	; select bank2/3
 18626  0315  0087               	movwf	7
 18627  0316  0181               	clrf	1
 18628                           
 18629                           ;Dimmer_B1.c: 35: DimmerLightsIntr->MosfetSignal = 0;
 18630  0317  0879               	movf	_DimmerLightsIntr,w
 18631  0318  3E0C               	addlw	12
 18632  0319  0086               	movwf	6
 18633  031A  3001               	movlw	1	; select bank2/3
 18634  031B  0087               	movwf	7
 18635  031C  1081               	bcf	1,1
 18636                           
 18637                           ;Dimmer_B1.c: 36: RB5 = 0;
 18638  031D  0020               	movlb	0	; select bank0
 18639  031E  128D               	bcf	13,5	;volatile
 18640  031F                     i1l6872:	
 18641                           
 18642                           ;Dimmer_B1.c: 37: }
 18643                           ;Dimmer_B1.c: 38: }
 18644                           ;Dimmer_B1.c: 39: if (DimmerLightsIntr->GO == 1) {
 18645  031F  0879               	movf	_DimmerLightsIntr,w
 18646  0320  0086               	movwf	6
 18647  0321  3001               	movlw	1	; select bank2/3
 18648  0322  0087               	movwf	7
 18649  0323  1C01               	btfss	1,0
 18650  0324  2BA7               	goto	i1l6908
 18651                           
 18652                           ;Dimmer_B1.c: 40: DimmerLightsIntr->Count++;
 18653  0325  3001               	movlw	1
 18654  0326  00F2               	movwf	??_setDimmerLights_IntrControl
 18655  0327  0879               	movf	_DimmerLightsIntr,w
 18656  0328  3E03               	addlw	3
 18657  0329  0086               	movwf	6
 18658  032A  3001               	movlw	1	; select bank2/3
 18659  032B  0087               	movwf	7
 18660  032C  0872               	movf	??_setDimmerLights_IntrControl,w
 18661  032D  0781               	addwf	1,f
 18662                           
 18663                           ;Dimmer_B1.c: 41: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 18664  032E  0021               	movlb	1	; select bank1
 18665  032F  083A               	movf	_Dimmer^(0+128),w
 18666  0330  3E02               	addlw	2
 18667  0331  0086               	movwf	6
 18668  0332  0187               	clrf	7
 18669  0333  0801               	movf	1,w
 18670  0334  00F2               	movwf	??_setDimmerLights_IntrControl
 18671  0335  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18672  0336  09F2               	comf	??_setDimmerLights_IntrControl,f
 18673  0337  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18674  0338  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18675  0339  1903               	skipnz
 18676  033A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18677  033B  0879               	movf	_DimmerLightsIntr,w
 18678  033C  3E04               	addlw	4
 18679  033D  0086               	movwf	6
 18680  033E  3001               	movlw	1	; select bank2/3
 18681  033F  0087               	movwf	7
 18682  0340  0801               	movf	1,w
 18683  0341  0772               	addwf	??_setDimmerLights_IntrControl,w
 18684  0342  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18685  0343  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18686  0344  1803               	skipnc
 18687  0345  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18688  0346  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18689  0347  0879               	movf	_DimmerLightsIntr,w
 18690  0348  3E03               	addlw	3
 18691  0349  0086               	movwf	6
 18692  034A  3001               	movlw	1	; select bank2/3
 18693  034B  0087               	movwf	7
 18694  034C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18695  034D  3A80               	xorlw	128
 18696  034E  3C80               	sublw	128
 18697  034F  1D03               	skipz
 18698  0350  2B53               	goto	u574_25
 18699  0351  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18700  0352  0201               	subwf	1,w
 18701  0353                     u574_25:	
 18702  0353  1C03               	skipc
 18703  0354  0008               	return
 18704                           
 18705                           ;Dimmer_B1.c: 42: DimmerLightsIntr->Count = 0;
 18706  0355  0879               	movf	_DimmerLightsIntr,w
 18707  0356  3E03               	addlw	3
 18708  0357  0086               	movwf	6
 18709  0358  3001               	movlw	1	; select bank2/3
 18710  0359  0087               	movwf	7
 18711  035A  0181               	clrf	1
 18712                           
 18713                           ;Dimmer_B1.c: 43: DimmerLightsIntr->GO = 0;
 18714  035B  0879               	movf	_DimmerLightsIntr,w
 18715  035C  0086               	movwf	6
 18716  035D  3001               	movlw	1	; select bank2/3
 18717  035E  0087               	movwf	7
 18718  035F  1001               	bcf	1,0
 18719                           
 18720                           ;Dimmer_B1.c: 44: DimmerLightsIntr->Flag = 1;
 18721  0360  0879               	movf	_DimmerLightsIntr,w
 18722  0361  3E07               	addlw	7
 18723  0362  0086               	movwf	6
 18724  0363  3001               	movlw	1	; select bank2/3
 18725  0364  0087               	movwf	7
 18726  0365  1401               	bsf	1,0
 18727                           
 18728                           ;Dimmer_B1.c: 45: if (DimmerLightsIntr->StatusFlag) {
 18729  0366  0879               	movf	_DimmerLightsIntr,w
 18730  0367  0086               	movwf	6
 18731  0368  3001               	movlw	1	; select bank2/3
 18732  0369  0087               	movwf	7
 18733  036A  1F01               	btfss	1,6
 18734  036B  0008               	return
 18735                           
 18736                           ;Dimmer_B1.c: 47: if (lights == 1) {
 18737  036C  0876               	movf	setDimmerLights_IntrControl@lights,w
 18738  036D  3A01               	xorlw	1
 18739  036E  1D03               	skipz
 18740  036F  2B72               	goto	i1l6888
 18741                           
 18742                           ;Dimmer_B1.c: 48: RA7 = 0;
 18743  0370  0020               	movlb	0	; select bank0
 18744  0371  138C               	bcf	12,7	;volatile
 18745  0372                     i1l6888:	
 18746                           ;Dimmer_B1.c: 49: ;;
 18747                           
 18748                           
 18749                           ;Dimmer_B1.c: 50: }
 18750                           ;Dimmer_B1.c: 53: if (lights == 2) {
 18751  0372  0876               	movf	setDimmerLights_IntrControl@lights,w
 18752  0373  3A02               	xorlw	2
 18753  0374  1D03               	skipz
 18754  0375  2B78               	goto	i1l6892
 18755                           
 18756                           ;Dimmer_B1.c: 54: RB4 = 0;
 18757  0376  0020               	movlb	0	; select bank0
 18758  0377  120D               	bcf	13,4	;volatile
 18759  0378                     i1l6892:	
 18760                           
 18761                           ;Dimmer_B1.c: 55: }
 18762                           ;Dimmer_B1.c: 58: if (DimmerLightsIntr->MosfetClose) {
 18763  0378  0879               	movf	_DimmerLightsIntr,w
 18764  0379  3E09               	addlw	9
 18765  037A  0086               	movwf	6
 18766  037B  3001               	movlw	1	; select bank2/3
 18767  037C  0087               	movwf	7
 18768  037D  1F01               	btfss	1,6
 18769  037E  0008               	return
 18770                           
 18771                           ;Dimmer_B1.c: 59: DimmerLightsIntr->MosfetClose = 0;
 18772  037F  0879               	movf	_DimmerLightsIntr,w
 18773  0380  3E09               	addlw	9
 18774  0381  0086               	movwf	6
 18775  0382  3001               	movlw	1	; select bank2/3
 18776  0383  0087               	movwf	7
 18777  0384  1301               	bcf	1,6
 18778                           
 18779                           ;Dimmer_B1.c: 60: DimmerLightsIntr->StatusFlag = 0;
 18780  0385  0879               	movf	_DimmerLightsIntr,w
 18781  0386  0086               	movwf	6
 18782  0387  3001               	movlw	1	; select bank2/3
 18783  0388  0087               	movwf	7
 18784  0389  1301               	bcf	1,6
 18785                           
 18786                           ;Dimmer_B1.c: 61: DimmerLightsIntr->Clear = 1;
 18787  038A  0879               	movf	_DimmerLightsIntr,w
 18788  038B  3E0C               	addlw	12
 18789  038C  0086               	movwf	6
 18790  038D  3001               	movlw	1	; select bank2/3
 18791  038E  0087               	movwf	7
 18792  038F  1401               	bsf	1,0
 18793                           
 18794                           ;Dimmer_B1.c: 63: if (lights == 1) {
 18795  0390  0876               	movf	setDimmerLights_IntrControl@lights,w
 18796  0391  3A01               	xorlw	1
 18797  0392  1D03               	skipz
 18798  0393  2B96               	goto	i1l6900
 18799                           
 18800                           ;Dimmer_B1.c: 64: RA3 = 0;
 18801  0394  0020               	movlb	0	; select bank0
 18802  0395  118C               	bcf	12,3	;volatile
 18803  0396                     i1l6900:	
 18804                           
 18805                           ;Dimmer_B1.c: 66: }
 18806                           ;Dimmer_B1.c: 69: if (lights == 2) {
 18807  0396  0876               	movf	setDimmerLights_IntrControl@lights,w
 18808  0397  3A02               	xorlw	2
 18809  0398  1D03               	skipz
 18810  0399  2B9C               	goto	i1l6904
 18811                           
 18812                           ;Dimmer_B1.c: 70: RC7 = 0;
 18813  039A  0020               	movlb	0	; select bank0
 18814  039B  138E               	bcf	14,7	;volatile
 18815  039C                     i1l6904:	
 18816                           
 18817                           ;Dimmer_B1.c: 71: }
 18818                           ;Dimmer_B1.c: 74: Dimmer->Detect = 1;
 18819  039C  0021               	movlb	1	; select bank1
 18820  039D  083A               	movf	_Dimmer^(0+128),w
 18821  039E  0086               	movwf	6
 18822  039F  0187               	clrf	7
 18823  03A0  1401               	bsf	1,0
 18824                           
 18825                           ;Dimmer_B1.c: 75: setLoad_StatusOff(lights, 1);
 18826  03A1  01F0               	clrf	i1setLoad_StatusOff@command
 18827  03A2  0AF0               	incf	i1setLoad_StatusOff@command,f
 18828  03A3  0876               	movf	setDimmerLights_IntrControl@lights,w
 18829  03A4  319E  26CD         	fcall	i1_setLoad_StatusOff
 18830                           
 18831                           ;Dimmer_B1.c: 76: }
 18832                           ;Dimmer_B1.c: 77: }
 18833                           ;Dimmer_B1.c: 78: }
 18834                           ;Dimmer_B1.c: 79: } else {
 18835  03A6  0008               	return
 18836  03A7                     i1l6908:	
 18837                           
 18838                           ;Dimmer_B1.c: 80: if (DimmerLightsIntr->MosfetOpen) {
 18839  03A7  0879               	movf	_DimmerLightsIntr,w
 18840  03A8  3E09               	addlw	9
 18841  03A9  0086               	movwf	6
 18842  03AA  3001               	movlw	1	; select bank2/3
 18843  03AB  0087               	movwf	7
 18844  03AC  1E81               	btfss	1,5
 18845  03AD  2BCC               	goto	i1l6918
 18846                           
 18847                           ;Dimmer_B1.c: 81: DimmerLightsIntr->Count++;
 18848  03AE  3001               	movlw	1
 18849  03AF  00F2               	movwf	??_setDimmerLights_IntrControl
 18850  03B0  0879               	movf	_DimmerLightsIntr,w
 18851  03B1  3E03               	addlw	3
 18852  03B2  0086               	movwf	6
 18853  03B3  3001               	movlw	1	; select bank2/3
 18854  03B4  0087               	movwf	7
 18855  03B5  0872               	movf	??_setDimmerLights_IntrControl,w
 18856  03B6  0781               	addwf	1,f
 18857                           
 18858                           ;Dimmer_B1.c: 82: if (DimmerLightsIntr->Count >= 10) {
 18859  03B7  0879               	movf	_DimmerLightsIntr,w
 18860  03B8  3E03               	addlw	3
 18861  03B9  0086               	movwf	6
 18862  03BA  3001               	movlw	1	; select bank2/3
 18863  03BB  0087               	movwf	7
 18864  03BC  300A               	movlw	10
 18865  03BD  0201               	subwf	1,w
 18866  03BE  1C03               	skipc
 18867  03BF  2BCC               	goto	i1l6918
 18868                           
 18869                           ;Dimmer_B1.c: 83: DimmerLightsIntr->Count = 0;
 18870  03C0  0879               	movf	_DimmerLightsIntr,w
 18871  03C1  3E03               	addlw	3
 18872  03C2  0086               	movwf	6
 18873  03C3  3001               	movlw	1	; select bank2/3
 18874  03C4  0087               	movwf	7
 18875  03C5  0181               	clrf	1
 18876                           
 18877                           ;Dimmer_B1.c: 84: DimmerLightsIntr->MosfetOpen = 0;
 18878  03C6  0879               	movf	_DimmerLightsIntr,w
 18879  03C7  3E09               	addlw	9
 18880  03C8  0086               	movwf	6
 18881  03C9  3001               	movlw	1	; select bank2/3
 18882  03CA  0087               	movwf	7
 18883  03CB  1281               	bcf	1,5
 18884  03CC                     i1l6918:	
 18885                           
 18886                           ;Dimmer_B1.c: 85: }
 18887                           ;Dimmer_B1.c: 86: }
 18888                           ;Dimmer_B1.c: 87: if (DimmerLightsIntr->Flag) {
 18889  03CC  0879               	movf	_DimmerLightsIntr,w
 18890  03CD  3E07               	addlw	7
 18891  03CE  0086               	movwf	6
 18892  03CF  3001               	movlw	1	; select bank2/3
 18893  03D0  0087               	movwf	7
 18894  03D1  1C01               	btfss	1,0
 18895  03D2  0008               	return
 18896                           
 18897                           ;Dimmer_B1.c: 88: DimmerLightsIntr->Flag = 0;
 18898  03D3  0879               	movf	_DimmerLightsIntr,w
 18899  03D4  3E07               	addlw	7
 18900  03D5  0086               	movwf	6
 18901  03D6  3001               	movlw	1	; select bank2/3
 18902  03D7  0087               	movwf	7
 18903  03D8  1001               	bcf	1,0
 18904                           
 18905                           ;Dimmer_B1.c: 89: if (DimmerLightsIntr->Signal) {
 18906  03D9  0879               	movf	_DimmerLightsIntr,w
 18907  03DA  0086               	movwf	6
 18908  03DB  3001               	movlw	1	; select bank2/3
 18909  03DC  0087               	movwf	7
 18910  03DD  1C81               	btfss	1,1
 18911  03DE  0008               	return
 18912                           
 18913                           ;Dimmer_B1.c: 90: DimmerLightsIntr->DimmingTime++;
 18914  03DF  3001               	movlw	1
 18915  03E0  00F2               	movwf	??_setDimmerLights_IntrControl
 18916  03E1  0A79               	incf	_DimmerLightsIntr,w
 18917  03E2  0086               	movwf	6
 18918  03E3  3001               	movlw	1	; select bank2/3
 18919  03E4  0087               	movwf	7
 18920  03E5  0872               	movf	??_setDimmerLights_IntrControl,w
 18921  03E6  0781               	addwf	1,f
 18922                           
 18923                           ;Dimmer_B1.c: 91: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeValu
      +                          e) {
 18924  03E7  0A79               	incf	_DimmerLightsIntr,w
 18925  03E8  0086               	movwf	6
 18926  03E9  3001               	movlw	1	; select bank2/3
 18927  03EA  0087               	movwf	7
 18928  03EB  0879               	movf	_DimmerLightsIntr,w
 18929  03EC  3E02               	addlw	2
 18930  03ED  0084               	movwf	4
 18931  03EE  3001               	movlw	1	; select bank2/3
 18932  03EF  0085               	movwf	5
 18933  03F0  0800               	movf	0,w
 18934  03F1  0201               	subwf	1,w
 18935  03F2  1C03               	skipc
 18936  03F3  0008               	return
 18937                           
 18938                           ;Dimmer_B1.c: 92: DimmerLightsIntr->DimmingTime = 0;
 18939  03F4  0A79               	incf	_DimmerLightsIntr,w
 18940  03F5  0086               	movwf	6
 18941  03F6  3001               	movlw	1	; select bank2/3
 18942  03F7  0087               	movwf	7
 18943  03F8  0181               	clrf	1
 18944                           
 18945                           ;Dimmer_B1.c: 93: if (DimmerLightsIntr->AdjFlag) {
 18946  03F9  0879               	movf	_DimmerLightsIntr,w
 18947  03FA  0086               	movwf	6
 18948  03FB  3001               	movlw	1	; select bank2/3
 18949  03FC  0087               	movwf	7
 18950  03FD  1D81               	btfss	1,3
 18951  03FE  2C35               	goto	i1l6944
 18952                           
 18953                           ;Dimmer_B1.c: 94: if (DimmerLightsIntr->AdjStatus == 0) {
 18954  03FF  0879               	movf	_DimmerLightsIntr,w
 18955  0400  0086               	movwf	6
 18956  0401  3001               	movlw	1	; select bank2/3
 18957  0402  0087               	movwf	7
 18958  0403  1A01               	btfsc	1,4
 18959  0404  2C1E               	goto	i1l6938
 18960                           
 18961                           ;Dimmer_B1.c: 95: if (DimmerLightsIntr->DimmingValue < ((char)(65*1.5))) {
 18962  0405  0879               	movf	_DimmerLightsIntr,w
 18963  0406  3E04               	addlw	4
 18964  0407  0086               	movwf	6
 18965  0408  3001               	movlw	1	; select bank2/3
 18966  0409  0087               	movwf	7
 18967  040A  3061               	movlw	97
 18968  040B  0201               	subwf	1,w
 18969  040C  1803               	skipnc
 18970  040D  2C18               	goto	i1l6936
 18971                           
 18972                           ;Dimmer_B1.c: 96: DimmerLightsIntr->DimmingValue++;
 18973  040E  3001               	movlw	1
 18974  040F  00F2               	movwf	??_setDimmerLights_IntrControl
 18975  0410  0879               	movf	_DimmerLightsIntr,w
 18976  0411  3E04               	addlw	4
 18977  0412  0086               	movwf	6
 18978  0413  3001               	movlw	1	; select bank2/3
 18979  0414  0087               	movwf	7
 18980  0415  0872               	movf	??_setDimmerLights_IntrControl,w
 18981  0416  0781               	addwf	1,f
 18982                           
 18983                           ;Dimmer_B1.c: 97: } else {
 18984  0417  0008               	return
 18985  0418                     i1l6936:	
 18986                           
 18987                           ;Dimmer_B1.c: 98: DimmerLightsIntr->AdjStatus = 1;
 18988  0418  0879               	movf	_DimmerLightsIntr,w
 18989  0419  0086               	movwf	6
 18990  041A  3001               	movlw	1	; select bank2/3
 18991  041B  0087               	movwf	7
 18992  041C  1601               	bsf	1,4
 18993                           
 18994                           ;Dimmer_B1.c: 99: }
 18995                           ;Dimmer_B1.c: 100: } else {
 18996  041D  0008               	return
 18997  041E                     i1l6938:	
 18998                           
 18999                           ;Dimmer_B1.c: 101: if (DimmerLightsIntr->DimmingValue > ((char)(20*1.5))) {
 19000  041E  0879               	movf	_DimmerLightsIntr,w
 19001  041F  3E04               	addlw	4
 19002  0420  0086               	movwf	6
 19003  0421  3001               	movlw	1	; select bank2/3
 19004  0422  0087               	movwf	7
 19005  0423  301F               	movlw	31
 19006  0424  0201               	subwf	1,w
 19007  0425  1C03               	skipc
 19008  0426  2C2F               	goto	i1l6942
 19009                           
 19010                           ;Dimmer_B1.c: 102: DimmerLightsIntr->DimmingValue--;
 19011  0427  0879               	movf	_DimmerLightsIntr,w
 19012  0428  3E04               	addlw	4
 19013  0429  0086               	movwf	6
 19014  042A  3001               	movlw	1	; select bank2/3
 19015  042B  0087               	movwf	7
 19016  042C  3001               	movlw	1
 19017  042D  0281               	subwf	1,f
 19018                           
 19019                           ;Dimmer_B1.c: 103: } else {
 19020  042E  0008               	return
 19021  042F                     i1l6942:	
 19022                           
 19023                           ;Dimmer_B1.c: 104: DimmerLightsIntr->AdjStatus = 0;
 19024  042F  0879               	movf	_DimmerLightsIntr,w
 19025  0430  0086               	movwf	6
 19026  0431  3001               	movlw	1	; select bank2/3
 19027  0432  0087               	movwf	7
 19028  0433  1201               	bcf	1,4
 19029                           
 19030                           ;Dimmer_B1.c: 105: }
 19031                           ;Dimmer_B1.c: 106: }
 19032                           ;Dimmer_B1.c: 107: } else if (DimmerLightsIntr->AdjRF) {
 19033  0434  0008               	return
 19034  0435                     i1l6944:	
 19035  0435  0879               	movf	_DimmerLightsIntr,w
 19036  0436  0086               	movwf	6
 19037  0437  3001               	movlw	1	; select bank2/3
 19038  0438  0087               	movwf	7
 19039  0439  1D01               	btfss	1,2
 19040  043A  2C81               	goto	i1l6958
 19041                           
 19042                           ;Dimmer_B1.c: 108: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19043  043B  0879               	movf	_DimmerLightsIntr,w
 19044  043C  3E04               	addlw	4
 19045  043D  0086               	movwf	6
 19046  043E  3001               	movlw	1	; select bank2/3
 19047  043F  0087               	movwf	7
 19048  0440  0879               	movf	_DimmerLightsIntr,w
 19049  0441  3E05               	addlw	5
 19050  0442  0084               	movwf	4
 19051  0443  3001               	movlw	1	; select bank2/3
 19052  0444  0085               	movwf	5
 19053  0445  0800               	movf	0,w
 19054  0446  0201               	subwf	1,w
 19055  0447  1803               	skipnc
 19056  0448  2C53               	goto	i1l6950
 19057                           
 19058                           ;Dimmer_B1.c: 109: DimmerLightsIntr->DimmingValue++;
 19059  0449  3001               	movlw	1
 19060  044A  00F2               	movwf	??_setDimmerLights_IntrControl
 19061  044B  0879               	movf	_DimmerLightsIntr,w
 19062  044C  3E04               	addlw	4
 19063  044D  0086               	movwf	6
 19064  044E  3001               	movlw	1	; select bank2/3
 19065  044F  0087               	movwf	7
 19066  0450  0872               	movf	??_setDimmerLights_IntrControl,w
 19067  0451  0781               	addwf	1,f
 19068                           
 19069                           ;Dimmer_B1.c: 110: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19070  0452  2C68               	goto	i1l6954
 19071  0453                     i1l6950:	
 19072  0453  0879               	movf	_DimmerLightsIntr,w
 19073  0454  3E05               	addlw	5
 19074  0455  0086               	movwf	6
 19075  0456  3001               	movlw	1	; select bank2/3
 19076  0457  0087               	movwf	7
 19077  0458  0879               	movf	_DimmerLightsIntr,w
 19078  0459  3E04               	addlw	4
 19079  045A  0084               	movwf	4
 19080  045B  3001               	movlw	1	; select bank2/3
 19081  045C  0085               	movwf	5
 19082  045D  0800               	movf	0,w
 19083  045E  0201               	subwf	1,w
 19084  045F  1803               	skipnc
 19085  0460  2C68               	goto	i1l6954
 19086                           
 19087                           ;Dimmer_B1.c: 111: DimmerLightsIntr->DimmingValue--;
 19088  0461  0879               	movf	_DimmerLightsIntr,w
 19089  0462  3E04               	addlw	4
 19090  0463  0086               	movwf	6
 19091  0464  3001               	movlw	1	; select bank2/3
 19092  0465  0087               	movwf	7
 19093  0466  3001               	movlw	1
 19094  0467  0281               	subwf	1,f
 19095  0468                     i1l6954:	
 19096                           
 19097                           ;Dimmer_B1.c: 112: }
 19098                           ;Dimmer_B1.c: 113: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19099  0468  0879               	movf	_DimmerLightsIntr,w
 19100  0469  3E05               	addlw	5
 19101  046A  0086               	movwf	6
 19102  046B  3001               	movlw	1	; select bank2/3
 19103  046C  0087               	movwf	7
 19104  046D  0879               	movf	_DimmerLightsIntr,w
 19105  046E  3E04               	addlw	4
 19106  046F  0084               	movwf	4
 19107  0470  3001               	movlw	1	; select bank2/3
 19108  0471  0085               	movwf	5
 19109  0472  0800               	movf	0,w
 19110  0473  0601               	xorwf	1,w
 19111  0474  1D03               	skipz
 19112  0475  0008               	return
 19113                           
 19114                           ;Dimmer_B1.c: 114: DimmerLightsIntr->AdjRF = 0;
 19115  0476  0879               	movf	_DimmerLightsIntr,w
 19116  0477  0086               	movwf	6
 19117  0478  3001               	movlw	1	; select bank2/3
 19118  0479  0087               	movwf	7
 19119  047A  1101               	bcf	1,2
 19120                           
 19121                           ;Dimmer_B1.c: 115: DimmerLightsIntr->Signal = 0;
 19122  047B  0879               	movf	_DimmerLightsIntr,w
 19123  047C  0086               	movwf	6
 19124  047D  3001               	movlw	1	; select bank2/3
 19125  047E  0087               	movwf	7
 19126  047F  1081               	bcf	1,1
 19127                           
 19128                           ;Dimmer_B1.c: 116: }
 19129                           ;Dimmer_B1.c: 117: } else {
 19130  0480  0008               	return
 19131  0481                     i1l6958:	
 19132                           
 19133                           ;Dimmer_B1.c: 118: DimmerLightsIntr->Signal = 0;
 19134  0481  0879               	movf	_DimmerLightsIntr,w
 19135  0482  0086               	movwf	6
 19136  0483  3001               	movlw	1	; select bank2/3
 19137  0484  0087               	movwf	7
 19138  0485  1081               	bcf	1,1
 19139  0486  0008               	return
 19140  0487                     __end_of_setDimmerLights_IntrControl:	
 19141                           
 19142                           	psect	text126
 19143  1ECD                     __ptext126:	
 19144 ;; *************** function i1_setLoad_StatusOff *****************
 19145 ;; Defined at:
 19146 ;;		line 284 in file "../src/OverLoad_B1.c"
 19147 ;; Parameters:    Size  Location     Type
 19148 ;;  lights          1    wreg     unsigned char 
 19149 ;;  command         1    0[COMMON] unsigned char 
 19150 ;; Auto vars:     Size  Location     Type
 19151 ;;  lights          1    1[COMMON] unsigned char 
 19152 ;; Return value:  Size  Location     Type
 19153 ;;		None               void
 19154 ;; Registers used:
 19155 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19156 ;; Tracked objects:
 19157 ;;		On entry : 0/0
 19158 ;;		On exit  : 0/0
 19159 ;;		Unchanged: 0/0
 19160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;Total ram usage:        2 bytes
 19166 ;; Hardware stack levels used:    1
 19167 ;; This function calls:
 19168 ;;		Nothing
 19169 ;; This function is called by:
 19170 ;;		_setDimmerLights_IntrControl
 19171 ;; This function uses a non-reentrant model
 19172 ;;
 19173                           
 19174                           
 19175                           ;psect for function i1_setLoad_StatusOff
 19176  1ECD                     i1_setLoad_StatusOff:	
 19177                           
 19178                           ;incstack = 0
 19179                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 19180                           ;i1setLoad_StatusOff@lights stored from wreg
 19181  1ECD  00F1               	movwf	i1setLoad_StatusOff@lights
 19182                           
 19183                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 19184  1ECE  087B               	movf	_Load,w
 19185  1ECF  3E46               	addlw	70
 19186  1ED0  0086               	movwf	6
 19187  1ED1  3002               	movlw	2	; select bank4/5
 19188  1ED2  0087               	movwf	7
 19189  1ED3  0870               	movf	i1setLoad_StatusOff@command,w
 19190  1ED4  1081               	bcf	1,1
 19191  1ED5  1D03               	skipz
 19192  1ED6  1481               	bsf	1,1
 19193                           
 19194                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 19195  1ED7  087B               	movf	_Load,w
 19196  1ED8  3E42               	addlw	66
 19197  1ED9  0086               	movwf	6
 19198  1EDA  3002               	movlw	2	; select bank4/5
 19199  1EDB  0087               	movwf	7
 19200  1EDC  3002               	movlw	2
 19201  1EDD  0281               	subwf	1,f
 19202                           
 19203                           ;OverLoad_B1.c: 287: if (lights == 1) {
 19204  1EDE  0871               	movf	i1setLoad_StatusOff@lights,w
 19205  1EDF  3A01               	xorlw	1
 19206  1EE0  1D03               	skipz
 19207  1EE1  2EE8               	goto	i1l6760
 19208                           
 19209                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 19210  1EE2  087B               	movf	_Load,w
 19211  1EE3  3E43               	addlw	67
 19212  1EE4  0086               	movwf	6
 19213  1EE5  3002               	movlw	2	; select bank4/5
 19214  1EE6  0087               	movwf	7
 19215  1EE7  0181               	clrf	1
 19216  1EE8                     i1l6760:	
 19217                           
 19218                           ;OverLoad_B1.c: 289: }
 19219                           ;OverLoad_B1.c: 290: if (lights == 2) {
 19220  1EE8  0871               	movf	i1setLoad_StatusOff@lights,w
 19221  1EE9  3A02               	xorlw	2
 19222  1EEA  1D03               	skipz
 19223  1EEB  2EF2               	goto	i1l6764
 19224                           
 19225                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 19226  1EEC  087B               	movf	_Load,w
 19227  1EED  3E44               	addlw	68
 19228  1EEE  0086               	movwf	6
 19229  1EEF  3002               	movlw	2	; select bank4/5
 19230  1EF0  0087               	movwf	7
 19231  1EF1  0181               	clrf	1
 19232  1EF2                     i1l6764:	
 19233                           
 19234                           ;OverLoad_B1.c: 292: }
 19235                           ;OverLoad_B1.c: 293: if (lights == 3) {
 19236  1EF2  0871               	movf	i1setLoad_StatusOff@lights,w
 19237  1EF3  3A03               	xorlw	3
 19238  1EF4  1D03               	skipz
 19239  1EF5  0008               	return
 19240                           
 19241                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 19242  1EF6  087B               	movf	_Load,w
 19243  1EF7  3E45               	addlw	69
 19244  1EF8  0086               	movwf	6
 19245  1EF9  3002               	movlw	2	; select bank4/5
 19246  1EFA  0087               	movwf	7
 19247  1EFB  0181               	clrf	1
 19248  1EFC  0008               	return
 19249  1EFD                     __end_ofi1_setLoad_StatusOff:	
 19250                           
 19251                           	psect	text127
 19252  1A91                     __ptext127:	
 19253 ;; *************** function _IOC_ISR *****************
 19254 ;; Defined at:
 19255 ;;		line 299 in file "../src/MCU_B1.c"
 19256 ;; Parameters:    Size  Location     Type
 19257 ;;		None
 19258 ;; Auto vars:     Size  Location     Type
 19259 ;;		None
 19260 ;; Return value:  Size  Location     Type
 19261 ;;		None               void
 19262 ;; Registers used:
 19263 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19264 ;; Tracked objects:
 19265 ;;		On entry : 0/0
 19266 ;;		On exit  : 0/0
 19267 ;;		Unchanged: 0/0
 19268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;Total ram usage:        0 bytes
 19274 ;; Hardware stack levels used:    1
 19275 ;; Hardware stack levels required when called:    3
 19276 ;; This function calls:
 19277 ;;		_setDimmerReClock
 19278 ;; This function is called by:
 19279 ;;		_ISR
 19280 ;; This function uses a non-reentrant model
 19281 ;;
 19282                           
 19283                           
 19284                           ;psect for function _IOC_ISR
 19285  1A91                     _IOC_ISR:	
 19286                           
 19287                           ;MCU_B1.c: 300: if (IOCIE && IOCBF2) {
 19288                           
 19289                           ;incstack = 0
 19290                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19291  1A91  1D8B               	btfss	11,3	;volatile
 19292  1A92  0008               	return
 19293  1A93  0027               	movlb	7	; select bank7
 19294  1A94  1D16               	btfss	22,2	;volatile
 19295  1A95  0008               	return
 19296                           
 19297                           ;MCU_B1.c: 301: IOCBF2 = 0;
 19298  1A96  1116               	bcf	22,2	;volatile
 19299                           
 19300                           ;MCU_B1.c: 302: IOCIF = 0;
 19301  1A97  100B               	bcf	11,0	;volatile
 19302                           
 19303                           ;MCU_B1.c: 303: if (myMain->PowerON) {
 19304  1A98  0021               	movlb	1	; select bank1
 19305  1A99  086A               	movf	_myMain^(0+128),w
 19306  1A9A  0086               	movwf	6
 19307  1A9B  3001               	movlw	1	; select bank2/3
 19308  1A9C  0087               	movwf	7
 19309  1A9D  1C01               	btfss	1,0
 19310  1A9E  0008               	return
 19311                           
 19312                           ;MCU_B1.c: 305: setDimmerReClock();
 19313  1A9F  3199  2124         	fcall	_setDimmerReClock
 19314  1AA1  0008               	return
 19315  1AA2                     __end_of_IOC_ISR:	
 19316                           
 19317                           	psect	text128
 19318  1924                     __ptext128:	
 19319 ;; *************** function _setDimmerReClock *****************
 19320 ;; Defined at:
 19321 ;;		line 179 in file "../src/MCU_B1.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;		None
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;		None
 19326 ;; Return value:  Size  Location     Type
 19327 ;;		None               void
 19328 ;; Registers used:
 19329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;Total ram usage:        0 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    2
 19342 ;; This function calls:
 19343 ;;		_setDimmerLights_IntrGO
 19344 ;; This function is called by:
 19345 ;;		_IOC_ISR
 19346 ;; This function uses a non-reentrant model
 19347 ;;
 19348                           
 19349                           
 19350                           ;psect for function _setDimmerReClock
 19351  1924                     _setDimmerReClock:	
 19352                           
 19353                           ;MCU_B1.c: 180: TMR0 = 255;
 19354                           
 19355                           ;incstack = 0
 19356                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19357  1924  30FF               	movlw	255
 19358  1925  0020               	movlb	0	; select bank0
 19359  1926  0095               	movwf	21	;volatile
 19360                           
 19361                           ;MCU_B1.c: 185: setDimmerLights_IntrGO(1);
 19362  1927  3001               	movlw	1
 19363  1928  319F  2760  3199   	fcall	_setDimmerLights_IntrGO
 19364                           
 19365                           ;MCU_B1.c: 189: setDimmerLights_IntrGO(2);
 19366  192B  3002               	movlw	2
 19367  192C  319F  2760         	fcall	_setDimmerLights_IntrGO
 19368  192E  0008               	return
 19369  192F                     __end_of_setDimmerReClock:	
 19370                           
 19371                           	psect	text129
 19372  1F60                     __ptext129:	
 19373 ;; *************** function _setDimmerLights_IntrGO *****************
 19374 ;; Defined at:
 19375 ;;		line 127 in file "../src/Dimmer_B1.c"
 19376 ;; Parameters:    Size  Location     Type
 19377 ;;  lights          1    wreg     unsigned char 
 19378 ;; Auto vars:     Size  Location     Type
 19379 ;;  lights          1    2[COMMON] unsigned char 
 19380 ;; Return value:  Size  Location     Type
 19381 ;;		None               void
 19382 ;; Registers used:
 19383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19384 ;; Tracked objects:
 19385 ;;		On entry : 0/0
 19386 ;;		On exit  : 0/0
 19387 ;;		Unchanged: 0/0
 19388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19393 ;;Total ram usage:        1 bytes
 19394 ;; Hardware stack levels used:    1
 19395 ;; Hardware stack levels required when called:    1
 19396 ;; This function calls:
 19397 ;;		_DimmerIntrPointSelect
 19398 ;; This function is called by:
 19399 ;;		_setDimmerReClock
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           
 19404                           ;psect for function _setDimmerLights_IntrGO
 19405  1F60                     _setDimmerLights_IntrGO:	
 19406                           
 19407                           ;incstack = 0
 19408                           ; Regs used in _setDimmerLights_IntrGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19409                           ;setDimmerLights_IntrGO@lights stored from wreg
 19410  1F60  00F2               	movwf	setDimmerLights_IntrGO@lights
 19411                           
 19412                           ;Dimmer_B1.c: 128: DimmerIntrPointSelect(lights);
 19413  1F61  0872               	movf	setDimmerLights_IntrGO@lights,w
 19414  1F62  319A  22B3  319F   	fcall	_DimmerIntrPointSelect
 19415                           
 19416                           ;Dimmer_B1.c: 135: if (RB2 == 0) {
 19417  1F65  0020               	movlb	0	; select bank0
 19418  1F66  190D               	btfsc	13,2	;volatile
 19419  1F67  2F72               	goto	i1l6476
 19420                           
 19421                           ;Dimmer_B1.c: 136: DimmerLightsIntr->MosfetSignal = 1;
 19422  1F68  0879               	movf	_DimmerLightsIntr,w
 19423  1F69  3E0C               	addlw	12
 19424  1F6A  0086               	movwf	6
 19425  1F6B  3001               	movlw	1	; select bank2/3
 19426  1F6C  0087               	movwf	7
 19427  1F6D  1481               	bsf	1,1
 19428                           
 19429                           ;Dimmer_B1.c: 137: if (lights == 1) {
 19430  1F6E  0872               	movf	setDimmerLights_IntrGO@lights,w
 19431  1F6F  3A01               	xorlw	1
 19432  1F70  1903               	btfsc	3,2
 19433                           
 19434                           ;Dimmer_B1.c: 138: RB5 = 1;
 19435  1F71  168D               	bsf	13,5	;volatile
 19436  1F72                     i1l6476:	
 19437                           
 19438                           ;Dimmer_B1.c: 139: }
 19439                           ;Dimmer_B1.c: 140: }
 19440                           ;Dimmer_B1.c: 142: if (!DimmerLightsIntr->GO && !DimmerLightsIntr->MosfetOpen) {
 19441  1F72  0879               	movf	_DimmerLightsIntr,w
 19442  1F73  0086               	movwf	6
 19443  1F74  3001               	movlw	1	; select bank2/3
 19444  1F75  0087               	movwf	7
 19445  1F76  1801               	btfsc	1,0
 19446  1F77  0008               	return
 19447  1F78  0879               	movf	_DimmerLightsIntr,w
 19448  1F79  3E09               	addlw	9
 19449  1F7A  0086               	movwf	6
 19450  1F7B  3001               	movlw	1	; select bank2/3
 19451  1F7C  0087               	movwf	7
 19452  1F7D  1A81               	btfsc	1,5
 19453  1F7E  0008               	return
 19454                           
 19455                           ;Dimmer_B1.c: 143: DimmerLightsIntr->GO = 1;
 19456  1F7F  0879               	movf	_DimmerLightsIntr,w
 19457  1F80  0086               	movwf	6
 19458  1F81  3001               	movlw	1	; select bank2/3
 19459  1F82  0087               	movwf	7
 19460  1F83  1401               	bsf	1,0
 19461                           
 19462                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->StatusFlag) {
 19463  1F84  0879               	movf	_DimmerLightsIntr,w
 19464  1F85  0086               	movwf	6
 19465  1F86  3001               	movlw	1	; select bank2/3
 19466  1F87  0087               	movwf	7
 19467  1F88  1F01               	btfss	1,6
 19468  1F89  0008               	return
 19469                           
 19470                           ;Dimmer_B1.c: 146: if (lights == 1) {
 19471  1F8A  0872               	movf	setDimmerLights_IntrGO@lights,w
 19472  1F8B  3A01               	xorlw	1
 19473  1F8C  1903               	btfsc	3,2
 19474                           
 19475                           ;Dimmer_B1.c: 147: RA7 = 1;
 19476  1F8D  178C               	bsf	12,7	;volatile
 19477                           
 19478                           ;Dimmer_B1.c: 149: }
 19479                           ;Dimmer_B1.c: 153: if (lights == 2) {
 19480                           
 19481                           ;Dimmer_B1.c: 148: ;;
 19482  1F8E  0872               	movf	setDimmerLights_IntrGO@lights,w
 19483  1F8F  3A02               	xorlw	2
 19484  1F90  1D03               	skipz
 19485  1F91  0008               	return
 19486                           
 19487                           ;Dimmer_B1.c: 154: RB4 = 1;
 19488  1F92  160D               	bsf	13,4	;volatile
 19489  1F93  0008               	return
 19490  1F94                     __end_of_setDimmerLights_IntrGO:	
 19491                           
 19492                           	psect	text130
 19493  1AB3                     __ptext130:	
 19494 ;; *************** function _DimmerIntrPointSelect *****************
 19495 ;; Defined at:
 19496 ;;		line 7 in file "../src/Dimmer_B1.c"
 19497 ;; Parameters:    Size  Location     Type
 19498 ;;  lights          1    wreg     unsigned char 
 19499 ;; Auto vars:     Size  Location     Type
 19500 ;;  lights          1    1[COMMON] unsigned char 
 19501 ;; Return value:  Size  Location     Type
 19502 ;;		None               void
 19503 ;; Registers used:
 19504 ;;		wreg
 19505 ;; Tracked objects:
 19506 ;;		On entry : 0/0
 19507 ;;		On exit  : 0/0
 19508 ;;		Unchanged: 0/0
 19509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;Total ram usage:        2 bytes
 19515 ;; Hardware stack levels used:    1
 19516 ;; This function calls:
 19517 ;;		Nothing
 19518 ;; This function is called by:
 19519 ;;		_setDimmerLights_IntrControl
 19520 ;;		_setDimmerLights_IntrGO
 19521 ;; This function uses a non-reentrant model
 19522 ;;
 19523                           
 19524                           
 19525                           ;psect for function _DimmerIntrPointSelect
 19526  1AB3                     _DimmerIntrPointSelect:	
 19527                           
 19528                           ;incstack = 0
 19529                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19530                           ;DimmerIntrPointSelect@lights stored from wreg
 19531  1AB3  00F1               	movwf	DimmerIntrPointSelect@lights
 19532                           
 19533                           ;Dimmer_B1.c: 9: if (lights == 1) {
 19534  1AB4  0871               	movf	DimmerIntrPointSelect@lights,w
 19535  1AB5  3A01               	xorlw	1
 19536  1AB6  1D03               	skipz
 19537  1AB7  2ABC               	goto	i1l801
 19538                           
 19539                           ;Dimmer_B1.c: 10: DimmerLightsIntr = &DimmerLights1;
 19540  1AB8  3020               	movlw	_DimmerLights1& (0+255)
 19541  1AB9  00F0               	movwf	??_DimmerIntrPointSelect
 19542  1ABA  0870               	movf	??_DimmerIntrPointSelect,w
 19543  1ABB  00F9               	movwf	_DimmerLightsIntr
 19544  1ABC                     i1l801:	
 19545                           
 19546                           ;Dimmer_B1.c: 11: }
 19547                           ;Dimmer_B1.c: 14: if (lights == 2) {
 19548  1ABC  0871               	movf	DimmerIntrPointSelect@lights,w
 19549  1ABD  3A02               	xorlw	2
 19550  1ABE  1D03               	skipz
 19551  1ABF  0008               	return
 19552                           
 19553                           ;Dimmer_B1.c: 15: DimmerLightsIntr = &DimmerLights2;
 19554  1AC0  302F               	movlw	_DimmerLights2& (0+255)
 19555  1AC1  00F0               	movwf	??_DimmerIntrPointSelect
 19556  1AC2  0870               	movf	??_DimmerIntrPointSelect,w
 19557  1AC3  00F9               	movwf	_DimmerLightsIntr
 19558  1AC4  0008               	return
 19559  1AC5                     __end_of_DimmerIntrPointSelect:	
 19560                           
 19561                           	psect	text131
 19562  1950                     __ptext131:	
 19563 ;; *************** function _INT_ISR *****************
 19564 ;; Defined at:
 19565 ;;		line 252 in file "../src/MCU_B1.c"
 19566 ;; Parameters:    Size  Location     Type
 19567 ;;		None
 19568 ;; Auto vars:     Size  Location     Type
 19569 ;;		None
 19570 ;; Return value:  Size  Location     Type
 19571 ;;		None               void
 19572 ;; Registers used:
 19573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19574 ;; Tracked objects:
 19575 ;;		On entry : 0/0
 19576 ;;		On exit  : 0/0
 19577 ;;		Unchanged: 0/0
 19578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19583 ;;Total ram usage:        0 bytes
 19584 ;; Hardware stack levels used:    1
 19585 ;; Hardware stack levels required when called:    2
 19586 ;; This function calls:
 19587 ;;		_setRF_ReceiveGO
 19588 ;; This function is called by:
 19589 ;;		_ISR
 19590 ;; This function uses a non-reentrant model
 19591 ;;
 19592                           
 19593                           
 19594                           ;psect for function _INT_ISR
 19595  1950                     _INT_ISR:	
 19596                           
 19597                           ;MCU_B1.c: 253: if (INTE && INTF) {
 19598                           
 19599                           ;incstack = 0
 19600                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19601  1950  1E0B               	btfss	11,4	;volatile
 19602  1951  0008               	return
 19603  1952  1C8B               	btfss	11,1	;volatile
 19604  1953  0008               	return
 19605                           
 19606                           ;MCU_B1.c: 254: INTF = 0;
 19607  1954  108B               	bcf	11,1	;volatile
 19608                           
 19609                           ;MCU_B1.c: 255: INTE = 0;
 19610  1955  120B               	bcf	11,4	;volatile
 19611                           
 19612                           ;MCU_B1.c: 256: setRF_ReceiveGO(1, 1);
 19613  1956  01F2               	clrf	setRF_ReceiveGO@command
 19614  1957  0AF2               	incf	setRF_ReceiveGO@command,f
 19615  1958  3001               	movlw	1
 19616  1959  3199  21A4         	fcall	_setRF_ReceiveGO
 19617  195B  0008               	return
 19618  195C                     __end_of_INT_ISR:	
 19619                           
 19620                           	psect	text132
 19621  19A4                     __ptext132:	
 19622 ;; *************** function _setRF_ReceiveGO *****************
 19623 ;; Defined at:
 19624 ;;		line 36 in file "../src/RF_Control_B1.c"
 19625 ;; Parameters:    Size  Location     Type
 19626 ;;  rf              1    wreg     unsigned char 
 19627 ;;  command         1    2[COMMON] unsigned char 
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;  rf              1    3[COMMON] unsigned char 
 19630 ;; Return value:  Size  Location     Type
 19631 ;;		None               void
 19632 ;; Registers used:
 19633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19634 ;; Tracked objects:
 19635 ;;		On entry : 0/0
 19636 ;;		On exit  : 0/0
 19637 ;;		Unchanged: 0/0
 19638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19639 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19640 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19643 ;;Total ram usage:        2 bytes
 19644 ;; Hardware stack levels used:    1
 19645 ;; Hardware stack levels required when called:    1
 19646 ;; This function calls:
 19647 ;;		i1_RfPointSelect
 19648 ;; This function is called by:
 19649 ;;		_INT_ISR
 19650 ;; This function uses a non-reentrant model
 19651 ;;
 19652                           
 19653                           
 19654                           ;psect for function _setRF_ReceiveGO
 19655  19A4                     _setRF_ReceiveGO:	
 19656                           
 19657                           ;incstack = 0
 19658                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19659                           ;setRF_ReceiveGO@rf stored from wreg
 19660  19A4  00F3               	movwf	setRF_ReceiveGO@rf
 19661                           
 19662                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 19663  19A5  0873               	movf	setRF_ReceiveGO@rf,w
 19664  19A6  3199  2119         	fcall	i1_RfPointSelect
 19665                           
 19666                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 19667  19A8  0021               	movlb	1	; select bank1
 19668  19A9  083E               	movf	_RF^(0+128),w
 19669  19AA  0086               	movwf	6
 19670  19AB  0187               	clrf	7
 19671  19AC  0872               	movf	setRF_ReceiveGO@command,w
 19672  19AD  1081               	bcf	1,1
 19673  19AE  1D03               	skipz
 19674  19AF  1481               	bsf	1,1
 19675  19B0  0008               	return
 19676  19B1                     __end_of_setRF_ReceiveGO:	
 19677                           
 19678                           	psect	text133
 19679  1919                     __ptext133:	
 19680 ;; *************** function i1_RfPointSelect *****************
 19681 ;; Defined at:
 19682 ;;		line 7 in file "../src/RF_Control_B1.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;  rf              1    wreg     unsigned char 
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;  rf              1    1[COMMON] unsigned char 
 19687 ;; Return value:  Size  Location     Type
 19688 ;;		None               void
 19689 ;; Registers used:
 19690 ;;		wreg
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19700 ;;Total ram usage:        2 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; This function calls:
 19703 ;;		Nothing
 19704 ;; This function is called by:
 19705 ;;		_setRF_ReceiveGO
 19706 ;; This function uses a non-reentrant model
 19707 ;;
 19708                           
 19709                           
 19710                           ;psect for function i1_RfPointSelect
 19711  1919                     i1_RfPointSelect:	
 19712                           
 19713                           ;incstack = 0
 19714                           ; Regs used in i1_RfPointSelect: [wreg]
 19715                           ;i1RfPointSelect@rf stored from wreg
 19716  1919  00F1               	movwf	i1RfPointSelect@rf
 19717                           
 19718                           ;RF_Control_B1.c: 9: if (rf == 1) {
 19719  191A  0871               	movf	i1RfPointSelect@rf,w
 19720  191B  3A01               	xorlw	1
 19721  191C  1D03               	skipz
 19722  191D  0008               	return
 19723                           
 19724                           ;RF_Control_B1.c: 10: RF = &RF1;
 19725  191E  30E0               	movlw	_RF1& (0+255)
 19726  191F  00F0               	movwf	??i1_RfPointSelect
 19727  1920  0870               	movf	??i1_RfPointSelect,w
 19728  1921  0021               	movlb	1	; select bank1
 19729  1922  00BE               	movwf	_RF^(0+128)
 19730  1923  0008               	return
 19731  1924                     __end_ofi1_RfPointSelect:	
 19732  007E                     btemp	set	126	;btemp
 19733  007E                     pic14e$flags	set	126
 19734  007E                     wtemp	set	126
 19735  007E                     wtemp0	set	126
 19736  0080                     wtemp1	set	128
 19737  0082                     wtemp2	set	130
 19738  0084                     wtemp3	set	132
 19739  0086                     wtemp4	set	134
 19740  0088                     wtemp5	set	136
 19741  007F                     wtemp6	set	127
 19742  007E                     ttemp	set	126
 19743  007E                     ttemp0	set	126
 19744  0081                     ttemp1	set	129
 19745  0084                     ttemp2	set	132
 19746  0087                     ttemp3	set	135
 19747  007F                     ttemp4	set	127
 19748  007E                     ltemp	set	126
 19749  007E                     ltemp0	set	126
 19750  0082                     ltemp1	set	130
 19751  0086                     ltemp2	set	134
 19752  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         269
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      75
    BANK2            80      0      69
    BANK3            80      0      49
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK3[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrGO
    _setDimmerLights_IntrGO->_DimmerIntrPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   82969
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
                         _getLoad_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1469
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     335
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20019
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20019
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8835
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     716
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     716
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26820
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   26820
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   25918
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1187
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24687
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9793
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     450
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     130
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    6091
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    4801
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     216
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_Exceptions                              1     1      0    3649
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerERROR                         2     1      1     282
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_ERROR                                2     2      0    2110
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     344
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     804
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     804
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9433
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9363
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6653
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1300
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     694
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      70
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9304
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9304
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1143
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     552
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     290
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     290
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     132
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     132
             _setDimmerLights_IntrGO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrGO                              1     1      0     132
                                              2 COMMON     1     1      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrGO
         _DimmerIntrPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 06 17:12:22 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BE  
                __end_of_CC2500_WriteREG 1BCE                                       _WR 0CA9  
                                     _Sw 007A       __end_of_getDimmerLights_StatusFlag 1C1A  
             _getDimmerLights_StatusFlag 1C00                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 13E5                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1F2E                     _setDimmerLights_Main 09D8  
                           ___ftadd@sign 0048                                      l311 07F4  
                                    l314 07FA                                      l344 1BA8  
                                    l345 1BAA                                      l283 11AB  
                                    l380 1DAA                                      l356 1BBD  
                                    l284 11B0                                      l374 1C59  
                                    l294 1504                                      l278 1181  
                                    l287 11B3                                      l368 1A29  
                                    l298 1515                                      l848 1ACF  
                                    l895 159C                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BD  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E0                                      _ISR 0004  
                                    _WDT 00E9                                      _Sw1 014A  
                                    _Sw2 0153                                      _Buz 00B7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1BB5  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 195C  
                        __end_of_ADC_Set 18E0                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CB0                    _setDimmerLights_ERROR 12D6  
                  _setDimmerLights_AdjRF 1D83                    _setDimmerLights_AdjGo 1A61  
                  _setDimmerLights_Clear 1A51                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1AA2  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l1423 102A                                     l1600 029E  
                                   l3105 0779                 ?_DimmerLightsPointSelect 0070  
                                   l2163 12CF                                     l2181 1B35  
                                   l1607 111C                                     l3082 14EB  
                                   l2195 109B                                     l3076 14D4  
                        __end_of_IOC_Set 19CB                                     l1397 1B4A  
                                   l6010 13CB                                     l6004 13B8  
                                   l2557 18BB                                     l6030 13FB  
                                   l6014 13D7                                     l6040 140B  
                                   l6008 13BE                                     l6200 0AA5  
                                   l6026 13F5                                     l6034 1401  
                                   l6130 1CB3                                     l2915 1CC9  
                                   l6060 1433                                     l6044 1411  
                                   l6132 1CB9                                     l7014 0A2E  
                                   l6230 1089                                     l6206 0ABB  
                                   l5600 14D9                                     l6056 142D  
                                   l6064 1439                                     l6048 1417  
                                   l6080 1F54                                     l6152 1F23  
                                   l7016 0A37                                     l7008 0A1B  
                                   l5602 14E1                                     l7026 0A5D  
                                   l7202 0BA4                                     l5620 1D28  
                                   l6076 1F49                                     l6180 0D18  
                                   l6148 1F19                                     l7052 1063  
                                   l7212 0BC4                                     l5702 0E07  
                                   l6094 1FA1                                     l6190 0A81  
                                   l7310 055A                                     l7400 0F3B  
                                   l6272 1C13                                     l7144 1655  
                                   l7056 106A                                     l6512 157C  
                                   l6424 1527                                     l5632 0702  
                                   l6352 0B47                                     l7240 0C0F  
                                   l7224 0BE0                                     l7320 058D  
                                   l6450 1DBB                                     l5730 0E77  
                                   l5722 0E5E                                     l7138 163C  
                                   l6426 153F                                     l5642 0718  
                                   l6370 0B7D                                     l6362 0B6B  
                                   l7226 0BE4                                     l6452 1DC6  
                                   l5708 0E1D                                     l5820 092C  
                                   l5812 0911                                     l5900 1D56  
                                   l7148 169C                                     l6516 158F  
                                   l5660 0745                                     l5636 0709  
                                   l6700 1774                                     l7260 049E  
                                   l5590 14B1                                     l5822 0935  
                                   l5814 091F                                     l6518 1594  
                                   l6438 1558                                     l5662 074F  
                                   l5654 0732                                     l5750 0F79  
                                   l6366 0B74                                     l6358 0B62  
                                   l6710 120E                                     l7270 04AE  
                                   l7262 04A4                                     l5592 14BB  
                                   l5824 0938                                     l5912 1AE3  
                                   l6392 1193                                     l5672 076B  
                                   l5664 0754                                     l5744 0F63  
                                   l6624 0819                                     l7272 04B6  
                                   l5850 1B62                                     l5594 14C0  
                                   l5586 14AA                                     l5682 079D  
                                   l5674 0775                                     l5666 0758  
                                   l5762 0FB4                                     l6714 1220  
                                   l5828 0946                                     l7364 1FF0  
                                   l7356 1FD2                                     l5692 07B8  
                                   l5860 1E7F                                     l6636 082F  
                                   l5918 1CC3                                     l5942 09B4  
                                   l6558 100E                                     l7542 11FB  
                                   l7358 1FDE                                     l7622 00CE  
                                   l7606 0081                                     l5678 078B  
                                   l5774 0FD0                                     l5766 0FBC  
                                   l5862 1E81                                     l5870 1E8A  
                                   l7198 0B9B                                     l7286 04E3  
                                   l7368 1FF9                                     l5864 1E83  
                                   l5872 1E9E                                     l5856 1E7B  
                                   l6744 16F0                                     l6680 1732  
                                   l7296 0515                                     l7394 0F2D  
                                   l5938 0990                                     l5794 08E1  
                                   l6498 114B                                     l7642 0191  
                                   l7650 01C5                                     l5778 0FD8  
                                   l5866 1E85                                     l5858 1E7D  
                                   l7570 0C3B                                     l7388 0F01  
                                   l7396 0F33                                     l7660 01FC  
                                   l7628 00FC                                     l6676 1720  
                                   l7580 0C74                                     l5966 1626  
                                   l5896 1D4B                                     l7648 01AD  
                                   l7592 0CAB                                     l7576 0C6C  
                                   l7832 1464                                     l7498 065B  
                                   l7666 0215                                     l7764 08C2  
                                   l7756 0896                                     l7836 1472  
                  _myMain_Initialization 1AEC                                     l7694 02A4  
                                   l7678 024C                                     l7686 0285  
                                   l6992 09E8                                     l7688 0288  
                                   l6996 09F7                                     _CFGS 0CAE  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 195C  
                                   _LATC 010E                                     u4005 0E3F  
                                   u4015 0E5F                                     u4025 0E6E  
                                   u4105 0FBD                                     u4035 0E78  
                                   u4115 0FC3                                     u4215 0912  
                                   u4145 0FD9                                     u4155 0FDF  
                                   u4075 0F85                                     u4245 092D  
                                   u4085 0F95                                     u4185 08E8  
                                   u4450 15D5                                     u3715 14F2  
                                   _PEIE 005E                                     u3645 14B6  
                                   _INTE 005C                                     _INTF 0059  
                                   u5175 1DB0                                     u4455 15D3  
                                   u4385 1CCA                                     u3665 14CF  
                                   u7105 08AC                                     u4395 1CCF  
                                   u3835 0733                                     u3685 14DC  
                                   u3925 076C                                     u6505 1FD5  
                                   u3865 0746                                     u6525 1FDF  
                                   u6535 1FE9                                     u3895 0759  
                                   u7095 0869                                     u4960 1917  
                                   u6545 1FF1                                     u3995 0E2F  
                                   u6575 0EBD                                     u6825 0C56  
                                   u6775 11E2                                     u6945 0148  
                                   u6865 0C97                                     u6995 01DD  
                                   _LWLO 0CAD                                     _RFSW 00BF  
                                   _TMR0 0015                          __end_of_INT_Set 18C6  
                                   _RSSI 00C0                                     _WREN 0CAA  
                                   _Buz1 013E                                     __WDT 00E3  
                                   _Load 007B                                     _main 1443  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 1800  
                        __end_of_RF_Main 18BB                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1B9C                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1924  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1974               __end_of_setRFSW_AdjControl 10B1  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 19A4            __end_of_DimmerIntrPointSelect 1AC5  
                 _setDimmerLights_IntrGO 1F60                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 1B2A  
                                  ?_main 006C                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 07D0                          __end_of___ftdiv 0E99  
                        __end_of___ftmul 1000                          __end_of___fttol 094F  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 2000                                    i1l801 1ABC  
                 _setDimmerLights_Switch 1A31            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E5                                    _RFSW2 00E6  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0030                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                                    _Load1 02A0  
                          __CFG_WRT$HALF 0000                         __end_of_TMR0_ISR 10F3  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 19D8  
                                  _getAD 1B40                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 15CB            DimmerLights_Exceptions@status 002A  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 08C8                           _setLoad_Enable 1A81  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CA3              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1AB3                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 15CB  
            __size_of_Flash_Memory_Write 0031                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 132D  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 14A1  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 18B3  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D4A                     _setSw_Initialization 18F7  
             __size_of_setLoad_StatusOff 0031                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0AF4                   ?_Buzzer_Initialization 0070  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1AD8  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1A91                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 1787                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1D3F                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1502                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1A41                                   i1l6476 1F72  
                                 i1l6900 0396                                   i1l6760 1EE8  
                                 i1l6904 039C                                   i1l6764 1EF2  
                                 i1l6908 03A7                                   i1l6950 0453  
                                 i1l6942 042F                                   i1l6918 03CC  
                                 i1l6936 0418                                   i1l6944 0435  
                                 i1l6872 031F                                   i1l6954 0468  
                                 i1l6938 041E                                   i1l6892 0378  
                                 i1l6958 0481                                   i1l6888 0372  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 029F  
                                 u574_25 0353                                   u667_25 10D5  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1BE7                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 18D2  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1B15  
                                 _Dimmer 00BA                                   _DlySw1 00C7  
                                 _DlySw2 00CC              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 1C50                      __end_of_Buzzer_Main 0F4C  
                                 _Memory 00E7                                   _Timer0 00E8  
     __end_of_setDimmerLights_TriggerAdj 1A81               _setDimmerLights_TriggerAdj 1A71  
          setDimmerLights_Switch@command 0022                                   ___wmul 1CC0  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
                        i1_RfPointSelect 1919              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 13E5  
                                 _myMain 00EA                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 094F              __end_of_Load_Initialization 19BE  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002A      __end_of_setDimmerLights_IntrControl 0487  
            _setDimmerLights_IntrControl 02F3                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 1AEC                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1B2A  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 18BB                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1388         __end_of_CC2500_registers_address 182F  
                __end_of__initialization 0050                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 1CFD  
                          __end_of_getAD 1B56                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 198C  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0065  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02F3  
               __end_of_setDimmerReClock 192F                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                         _DimmerLights22 00BC                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01C0                               __pbssBANK4 0220  
                             __pbssBANK5 02A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0E99                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 18E7                               __pnvCOMMON 007D  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
           setDimmerLights_IntrGO@lights 0072                             _DimmerLights 0078  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1924  
                    i1_setLoad_StatusOff 1ECD                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 0029                               __pmaintext 1443  
                    _CC2500_WriteCommand 1A21         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                ?_setDimmerLights_IntrGO 0070                                  ?___wmul 0020  
                             ??_TMR0_ISR 0077                               ??_TMR0_Set 0020  
                             _getLoad_AD 0C1A                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A6                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 18D9  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 18E7                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1071                  __end_of_RfSWPointSelect 1B40  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0070  
                                _IOC_ISR 1A91                                  _IOC_Set 19BE  
                   __size_of_setLog_Code 0048                                  _INT_ISR 1950  
                                _INT_Set 18C0                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 11BE                        _Flash_Memory_Read 1BCE  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 18B7                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1B84  
        __end_of_setControl_Lights_Table 0B86                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 1715  
                        _setPercentValue 1248                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0070  
                                _Dimmer1 00DD             __end_of_CC2500_FrequencyCabr 1974  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D5  
                                _VarLED2 00D9                        __end_of_getRxData 084F  
               _CC2500_registers_address 1800           __end_of_setDimmerLights_IntrGO 1F94  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1A51  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1A41  
                                ___ftadd 06DA                           ??_setSw_Enable 0022  
                                ___ftdiv 0DF0                          __size_of___wmul 001E  
                                ___ftmul 0F4C                                  ___fttol 08C8  
                    __end_of_Switch_Main 1907                                  ___lwdiv 1FC9  
                ??_Buzzer_Initialization 0020                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0089  
                         ??_setSw_Status 0023                                  __ptext1 084F  
                                __ptext2 1A81                                  __ptext3 1AEC  
                                __ptext4 0C1A                                  __ptext5 1B40  
                                __ptext6 1C87                                  __ptext7 0002  
                                __ptext8 18FF                                  __ptext9 0487  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1AB3                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1203                __end_of_Flash_Memory_Read 1BE7  
                             _setRF_Main 0B86                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 18EF                        _DimmerLights_Main 1945  
                                _my_Main 084F                        __end_of_setINT_GO 1919  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 193A                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 18A7               __end_of_CC2500_ClearTXFIFO 18AB  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 1D3F                      _DelayOffPointSelect 1B56  
                                clrloop0 18CD           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 19E5                     end_of_initialization 0050  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 193A  
                      _CC2500_InitSetREG 1DF3                            _DelayTime_1us 1DA5  
                      __end_of_setTxData 0DF0               __end_of_Flash_Memory_Write 1031  
                                init_ram 18C6                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 18C7                               _setSw_Main 0487  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1C50  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 1AA2                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 1502  
                          _CC2500_TxData 117A                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1E74              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1636                  _DimmerLights_Exceptions 1566  
                            ?_getLoad_AD 0070                             __pstringtext 1800  
                    _Flash_Memory_Unlock 1907                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070                         _setLoad_StatusOn 1F2E  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1950                       _Mcu_Initialization 1C35  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4550 0067                          _setSw_Main$4551 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1D61  
                __end_of_Sw_DimmerOnFunc 1787                  __end_of_setPercentValue 128E  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1E1D  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006B                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1136                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1C6B                            ?_RF_RxDisable 0070  
             __end_of_setLoad_Exceptions 1136                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1C00                     _setRF_Initialization 18E0  
                            _Switch_Main 18FF              setDimmerLights_Clear@lights 0023  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1AC5  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1B00  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0045                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 1CDE                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0042                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 008C  
                         __end_of_setLED 1443                           __end_of_setBuz 09D8  
                          _setLoad_Count 1B15          _getDimmerLights_StatusFlag$1782 0022  
                   _CC2500_FrequencyCabr 1968                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0A64                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 1F94                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1C35                                _Load_Main 0054  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1CFD                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1C87  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D1                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1A03                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1980  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015C  
              ??_DimmerLights_Exceptions 002A                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C1                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C3  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 0028  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 18AB  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1FC9  
                  ?_CC2500_FrequencyCabr 0070                         setINT_GO@command 0020  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$3777 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 009A  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1D83                  __size_of_setRF_RxStatus 000F  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00E7  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 0094                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 06DA              _Flash_Memory_Initialization 05E2  
                              __ptext100 1B2A                                __ptext101 1A41  
                              __ptext110 18AB                                __ptext102 1A31  
                              __ptext111 07D0                                __ptext103 1AC5  
                              __ptext120 1B9C                                __ptext112 1DF3  
                              __ptext104 094F                                __ptext121 0E99  
                              __ptext113 1CDE                                __ptext105 1CC0  
                              __ptext130 1AB3                                __ptext122 195C  
                              __ptext114 1BB5                                __ptext106 18E7  
                              __ptext131 1950                                __ptext115 1968  
                              __ptext107 192F                                __ptext132 19A4  
                              __ptext124 10B1                                __ptext116 1DA5  
                              __ptext108 1B56                                __ptext133 1919  
                              __ptext125 02F3                                __ptext117 18A7  
                              __ptext109 1B00                                 ?___ftadd 003E  
                              __ptext126 1ECD                                __ptext118 18A3  
                              __ptext127 1A91                                __ptext119 1A21  
                              __ptext128 1924                                __ptext129 1F60  
                              _getRxData 0802                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0AF4  
                        _setRF_ReceiveGO 19A4                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 1968                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 18C0       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0022                      __size_of_setSw_Main 015B  
          __end_of_setDimmerLights_ERROR 132D             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1DA5            __end_of_setDimmerLights_AdjGo 1A71  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
                               ?_my_Main 0070            __end_of_setDimmerLights_Clear 1A61  
                              _r_address 00C4           __size_of_myMain_Initialization 0014  
           __end_of_CC2500_patable_vaule 1866            __end_of_myMain_Initialization 1B00  
                         __size_of_getAD 0016                             _setRF_Enable 1E48  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 1AD8                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 1910                      __end_of_setLED_Main 1071  
               __end_of_setLoad_StatusOn 1F60                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 1998                          SwPointSelect@sw 0021  
                              clear_ram0 18CC                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0D4A      __end_of_DimmerLights_Initialization 1B84  
            _DimmerLights_Initialization 1B6D                       _CC2500_ClearRXFIFO 18A3  
                     _CC2500_ClearTXFIFO 18A7           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A21                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1000  
                             ?_getRxData 0070                                 _TMR0_ISR 10B1  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1EFD  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 19CB  
                       _Sw_DimmerAdjFunc 1203                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1DF3              __end_of_CC2500_WriteCommand 1A31  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C87  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 16A4  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 001C  
                               _DelayOff 00B9                             setSw_Main@sw 0069  
                            ??_Load_Main 002D                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 198C                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 12D6                    _DlyOff_Initialization 192F  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                               _Fosc_Set 18AF                         __size_of_WDT_Set 0018  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0CB0  
                  _Switch_Initialization 19D8                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 19E5  
                   __size_of_Buzzer_Main 00B3                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 1B9C  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 19B1                        setRFSW_Control@sw 0063  
                    _Load_Initialization 19B1                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1E48    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1E1D                  ??_DimmerIntrPointSelect 0070  
                     _setLoad_Exceptions 10F3                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1C6B                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000B                                 ___awtoft 1D1D  
                       ??_LedPointSelect 0020                                 ___ftpack 14A1  
                           _setSw_Status 19F4                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1031  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 1636                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                       __size_of_my_Main 0079                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1A12  
                               __ptext11 1715                                 __ptext20 0B86  
                               __ptext12 16A4                                 __ptext21 0802  
                               __ptext13 1203                                 __ptext30 132D  
                               __ptext22 128E                                 __ptext14 1A71  
                               __ptext31 0F4C                                 __ptext23 0AF4  
                               __ptext15 1A61                                 __ptext40 18E0  
                               __ptext32 06DA                                 __ptext24 0A64  
                               __ptext16 19D8                                 __ptext41 1C35  
                               __ptext33 1DCB                                 __ptext25 1388  
                               __ptext17 18F7                                 __ptext50 10F3  
                               __ptext42 1B84                                 __ptext34 117A  
                               __ptext26 1E74                                 __ptext18 18BB  
                               __ptext51 1C6B                                 __ptext43 19CB  
                               __ptext35 1502                                 __ptext27 1071  
                               __ptext19 18B7                                 __ptext60 1D61  
                               __ptext52 1E48                                 __ptext44 1BE7  
                               __ptext36 1A03                                 __ptext28 1F94  
                               __ptext61 1998                                 __ptext53 1910  
                               __ptext45 19BE                                 __ptext37 1C50  
                               __ptext29 1D83                                 __ptext70 1907  
                               __ptext62 1031                                 __ptext54 1566  
                               __ptext46 18C0                                 __ptext38 1CA3  
                               __ptext71 1BCE                                 __ptext63 198C  
                               __ptext55 1E1D                                 __ptext47 18AF  
                               __ptext39 18B3                                 __ptext80 1D3F  
                               __ptext72 1945                                 __ptext64 1AA2  
                               __ptext56 12D6                                 __ptext48 18D9  
                               __ptext81 1C1A                                 __ptext73 09D8  
                               __ptext65 11BE                                 __ptext57 1A51  
                               __ptext49 0054                                 __ptext90 1974  
                               __ptext82 193A                                 __ptext74 1136  
                               __ptext66 1636                                 __ptext58 1FC9  
                               __ptext91 19F4                                 __ptext83 1C00  
                               __ptext75 1EFD                                 __ptext67 1980  
                               __ptext59 19B1                                 __ptext92 1AD8  
                               __ptext84 1B6D                                 __ptext76 0CB0  
                               __ptext68 05E2                                 __ptext93 15CB  
                               __ptext85 1EA0                                 __ptext77 1F2E  
                               __ptext69 1000                                 __ptext94 1248  
                               __ptext86 18D2                                 __ptext78 1B15  
                               __ptext95 08C8                                 __ptext87 18EF  
                               __ptext79 13E5                                 __ptext96 0DF0  
                               __ptext88 1787                                 __ptext97 1D1D  
                               __ptext89 0D4A                                 __ptext98 14A1  
                               __ptext99 19E5                                 __product 01A0  
          ??_setDimmerLights_IntrControl 0072                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 19F4  
          __end_of_Dimmer_Initialization 18D9             __end_of_setDimmerLights_Main 0A64  
               ??_setDimmerLights_IntrGO 0072              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 005E                              _setRF_Learn 1A12  
               __end_of_CC2500_SIDLEMode 18AF                           _setRF_RxStatus 1A03  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1B6D  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1C1A  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000B  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 1CA3  
                     _CC2500_InitPATable 1CDE      __size_of_getDimmerLights_StatusFlag 001A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0C1A  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 07D0  
                     __end_of_setLoad_GO 1945              __end_of_Flash_Memory_Modify 16A4  
                      ??_getPercentValue 0059                              _setLog_Code 128E  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 1910  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1BB5  
                     __end_of_setSw_Main 05E2                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E1  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1E74                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1A12                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1ECD  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1EA0  
            __end_of_setDimmerLights_Adj 117A                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0028                        _RF_Initialization 18B3  
   __size_of_setDimmerLights_IntrControl 0194                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                     _Flash_Memory_Erasing 1980  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 18EF                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 18F7  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 1388         __size_of_setControl_Lights_Table 0092  
                      _setLoad_StatusOff 1EFD                   __end_of_DelayTimejudge 1EA0  
                 __size_of_RfPointSelect 000C                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1DCB  
               __end_of_Sw_DimmerAdjFunc 1248                  __end_of_CC2500_ReadByte 1CC0  
           __end_of_setSw_Initialization 18FF                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 1DCB  
             __end_of_LED_Initialization 1998         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020                 __size_of_Sw_DimmerOnFunc 0072  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
        __size_of_setDimmerLights_IntrGO 0034                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 18B7  
               __end_of_Sw_DimmerOffFunc 1715                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1566  
                  __end_of_CC2500_TxData 11BE                    _setLoad_AH_AL_Restore 1D61  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 0800  
