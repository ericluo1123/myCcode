

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 07 16:53:28 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	intentry,global,class=CODE,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020D                     	;# 
   322  0210                     	;# 
   323  0211                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0214                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0090                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0291                     	;# 
   450  0291                     	;# 
   451  0292                     	;# 
   452  0293                     	;# 
   453  0298                     	;# 
   454  0298                     	;# 
   455  0299                     	;# 
   456  029A                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0010                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  0199                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020D                     	;# 
   544  0210                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0298                     	;# 
   565  0298                     	;# 
   566  0299                     	;# 
   567  029A                     	;# 
   568  0394                     	;# 
   569  0395                     	;# 
   570  0396                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009B                     	;# 
   622  009C                     	;# 
   623  009D                     	;# 
   624  009E                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  0394                     	;# 
   680  0395                     	;# 
   681  0396                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0016                     	;# 
   714  0017                     	;# 
   715  0018                     	;# 
   716  0019                     	;# 
   717  001A                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  008C                     	;# 
   721  008D                     	;# 
   722  008E                     	;# 
   723  0090                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020D                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  0394                     	;# 
   791  0395                     	;# 
   792  0396                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  0010                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  010C                     	;# 
   848  010D                     	;# 
   849  010E                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  011D                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  018E                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0090                     	;# 
   946  0091                     	;# 
   947  0092                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0298                     	;# 
  1009  0298                     	;# 
  1010  0299                     	;# 
  1011  029A                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0090                     	;# 
  1057  0091                     	;# 
  1058  0092                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  0210                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008D                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020D                     	;# 
  1210  0210                     	;# 
  1211  0211                     	;# 
  1212  0211                     	;# 
  1213  0212                     	;# 
  1214  0212                     	;# 
  1215  0213                     	;# 
  1216  0213                     	;# 
  1217  0214                     	;# 
  1218  0214                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0216                     	;# 
  1223  0216                     	;# 
  1224  0217                     	;# 
  1225  0217                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0298                     	;# 
  1231  0298                     	;# 
  1232  0299                     	;# 
  1233  029A                     	;# 
  1234  0394                     	;# 
  1235  0395                     	;# 
  1236  0396                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0015                     	;# 
  1267  0016                     	;# 
  1268  0016                     	;# 
  1269  0017                     	;# 
  1270  0018                     	;# 
  1271  0019                     	;# 
  1272  001A                     	;# 
  1273  001B                     	;# 
  1274  001C                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0095                     	;# 
  1282  0096                     	;# 
  1283  0097                     	;# 
  1284  0099                     	;# 
  1285  009A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  011D                     	;# 
  1297  018C                     	;# 
  1298  018D                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019C                     	;# 
  1316  019C                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  0394                     	;# 
  1346  0395                     	;# 
  1347  0396                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0010                     	;# 
  1375  0011                     	;# 
  1376  0012                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0090                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  011D                     	;# 
  1408  018C                     	;# 
  1409  018D                     	;# 
  1410  018E                     	;# 
  1411  0191                     	;# 
  1412  0191                     	;# 
  1413  0192                     	;# 
  1414  0193                     	;# 
  1415  0193                     	;# 
  1416  0194                     	;# 
  1417  0195                     	;# 
  1418  0196                     	;# 
  1419  0197                     	;# 
  1420  0199                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019E                     	;# 
  1430  019F                     	;# 
  1431  020D                     	;# 
  1432  0210                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0216                     	;# 
  1445  0216                     	;# 
  1446  0217                     	;# 
  1447  0217                     	;# 
  1448  0291                     	;# 
  1449  0291                     	;# 
  1450  0292                     	;# 
  1451  0293                     	;# 
  1452  0298                     	;# 
  1453  0298                     	;# 
  1454  0299                     	;# 
  1455  029A                     	;# 
  1456  0394                     	;# 
  1457  0395                     	;# 
  1458  0396                     	;# 
  1459  0FE4                     	;# 
  1460  0FE5                     	;# 
  1461  0FE6                     	;# 
  1462  0FE7                     	;# 
  1463  0FE8                     	;# 
  1464  0FE9                     	;# 
  1465  0FEA                     	;# 
  1466  0FEB                     	;# 
  1467  0FED                     	;# 
  1468  0FEE                     	;# 
  1469  0FEF                     	;# 
  1470  0000                     	;# 
  1471  0001                     	;# 
  1472  0002                     	;# 
  1473  0003                     	;# 
  1474  0004                     	;# 
  1475  0005                     	;# 
  1476  0006                     	;# 
  1477  0007                     	;# 
  1478  0008                     	;# 
  1479  0009                     	;# 
  1480  000A                     	;# 
  1481  000B                     	;# 
  1482  000C                     	;# 
  1483  000D                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0016                     	;# 
  1491  0017                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0298                     	;# 
  1564  0298                     	;# 
  1565  0299                     	;# 
  1566  029A                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0010                     	;# 
  1597  0011                     	;# 
  1598  0012                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  008C                     	;# 
  1609  008D                     	;# 
  1610  008E                     	;# 
  1611  0090                     	;# 
  1612  0091                     	;# 
  1613  0092                     	;# 
  1614  0095                     	;# 
  1615  0096                     	;# 
  1616  0097                     	;# 
  1617  0099                     	;# 
  1618  009A                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  010C                     	;# 
  1625  010D                     	;# 
  1626  010E                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  011D                     	;# 
  1630  018C                     	;# 
  1631  018D                     	;# 
  1632  018E                     	;# 
  1633  0191                     	;# 
  1634  0191                     	;# 
  1635  0192                     	;# 
  1636  0193                     	;# 
  1637  0193                     	;# 
  1638  0194                     	;# 
  1639  0195                     	;# 
  1640  0196                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020D                     	;# 
  1654  0210                     	;# 
  1655  0211                     	;# 
  1656  0211                     	;# 
  1657  0212                     	;# 
  1658  0212                     	;# 
  1659  0213                     	;# 
  1660  0213                     	;# 
  1661  0214                     	;# 
  1662  0214                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0217                     	;# 
  1670  0291                     	;# 
  1671  0291                     	;# 
  1672  0292                     	;# 
  1673  0293                     	;# 
  1674  0298                     	;# 
  1675  0298                     	;# 
  1676  0299                     	;# 
  1677  029A                     	;# 
  1678  0394                     	;# 
  1679  0395                     	;# 
  1680  0396                     	;# 
  1681  0FE4                     	;# 
  1682  0FE5                     	;# 
  1683  0FE6                     	;# 
  1684  0FE7                     	;# 
  1685  0FE8                     	;# 
  1686  0FE9                     	;# 
  1687  0FEA                     	;# 
  1688  0FEB                     	;# 
  1689  0FED                     	;# 
  1690  0FEE                     	;# 
  1691  0FEF                     	;# 
  1692  0000                     	;# 
  1693  0001                     	;# 
  1694  0002                     	;# 
  1695  0003                     	;# 
  1696  0004                     	;# 
  1697  0005                     	;# 
  1698  0006                     	;# 
  1699  0007                     	;# 
  1700  0008                     	;# 
  1701  0009                     	;# 
  1702  000A                     	;# 
  1703  000B                     	;# 
  1704  000C                     	;# 
  1705  000D                     	;# 
  1706  000E                     	;# 
  1707  0010                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0090                     	;# 
  1723  0091                     	;# 
  1724  0092                     	;# 
  1725  0095                     	;# 
  1726  0096                     	;# 
  1727  0097                     	;# 
  1728  0099                     	;# 
  1729  009A                     	;# 
  1730  009B                     	;# 
  1731  009B                     	;# 
  1732  009C                     	;# 
  1733  009D                     	;# 
  1734  009E                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020D                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0291                     	;# 
  1782  0291                     	;# 
  1783  0292                     	;# 
  1784  0293                     	;# 
  1785  0298                     	;# 
  1786  0298                     	;# 
  1787  0299                     	;# 
  1788  029A                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0FE4                     	;# 
  1793  0FE5                     	;# 
  1794  0FE6                     	;# 
  1795  0FE7                     	;# 
  1796  0FE8                     	;# 
  1797  0FE9                     	;# 
  1798  0FEA                     	;# 
  1799  0FEB                     	;# 
  1800  0FED                     	;# 
  1801  0FEE                     	;# 
  1802  0FEF                     	;# 
  1803  0000                     	;# 
  1804  0001                     	;# 
  1805  0002                     	;# 
  1806  0003                     	;# 
  1807  0004                     	;# 
  1808  0005                     	;# 
  1809  0006                     	;# 
  1810  0007                     	;# 
  1811  0008                     	;# 
  1812  0009                     	;# 
  1813  000A                     	;# 
  1814  000B                     	;# 
  1815  000C                     	;# 
  1816  000D                     	;# 
  1817  000E                     	;# 
  1818  0010                     	;# 
  1819  0011                     	;# 
  1820  0012                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  001A                     	;# 
  1828  001B                     	;# 
  1829  001C                     	;# 
  1830  008C                     	;# 
  1831  008D                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0095                     	;# 
  1837  0096                     	;# 
  1838  0097                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  011D                     	;# 
  1852  018C                     	;# 
  1853  018D                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020D                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0298                     	;# 
  1897  0298                     	;# 
  1898  0299                     	;# 
  1899  029A                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0FE4                     	;# 
  1904  0FE5                     	;# 
  1905  0FE6                     	;# 
  1906  0FE7                     	;# 
  1907  0FE8                     	;# 
  1908  0FE9                     	;# 
  1909  0FEA                     	;# 
  1910  0FEB                     	;# 
  1911  0FED                     	;# 
  1912  0FEE                     	;# 
  1913  0FEF                     	;# 
  1914  0000                     	;# 
  1915  0001                     	;# 
  1916  0002                     	;# 
  1917  0003                     	;# 
  1918  0004                     	;# 
  1919  0005                     	;# 
  1920  0006                     	;# 
  1921  0007                     	;# 
  1922  0008                     	;# 
  1923  0009                     	;# 
  1924  000A                     	;# 
  1925  000B                     	;# 
  1926  000C                     	;# 
  1927  000D                     	;# 
  1928  000E                     	;# 
  1929  0010                     	;# 
  1930  0011                     	;# 
  1931  0012                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  008C                     	;# 
  1942  008D                     	;# 
  1943  008E                     	;# 
  1944  0090                     	;# 
  1945  0091                     	;# 
  1946  0092                     	;# 
  1947  0095                     	;# 
  1948  0096                     	;# 
  1949  0097                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  011D                     	;# 
  1963  018C                     	;# 
  1964  018D                     	;# 
  1965  018E                     	;# 
  1966  0191                     	;# 
  1967  0191                     	;# 
  1968  0192                     	;# 
  1969  0193                     	;# 
  1970  0193                     	;# 
  1971  0194                     	;# 
  1972  0195                     	;# 
  1973  0196                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019C                     	;# 
  1982  019C                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019F                     	;# 
  1986  020D                     	;# 
  1987  0210                     	;# 
  1988  0211                     	;# 
  1989  0211                     	;# 
  1990  0212                     	;# 
  1991  0212                     	;# 
  1992  0213                     	;# 
  1993  0213                     	;# 
  1994  0214                     	;# 
  1995  0214                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0216                     	;# 
  2001  0217                     	;# 
  2002  0217                     	;# 
  2003  0291                     	;# 
  2004  0291                     	;# 
  2005  0292                     	;# 
  2006  0293                     	;# 
  2007  0298                     	;# 
  2008  0298                     	;# 
  2009  0299                     	;# 
  2010  029A                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025                           
  2026                           	psect	idataBANK3
  2027  126E                     __pidataBANK3:	
  2028                           
  2029                           ;initializer for __product
  2030  126E  3463               	retlw	99
  2031  126F  3402               	retlw	2
  2032  1270  3400               	retlw	0
  2033  1271  3400               	retlw	0
  2034  1272  3400               	retlw	0
  2035  1273  3400               	retlw	0
  2036  1274  3400               	retlw	0
  2037  1275  3400               	retlw	0
  2038  1276  3400               	retlw	0
  2039  1277  3400               	retlw	0
  2040  1278  3400               	retlw	0
  2041  1279  3400               	retlw	0
  2042  127A  34FF               	retlw	255
  2043  127B  34FF               	retlw	255
  2044  127C  34FF               	retlw	255
  2045  127D  3400               	retlw	0
  2046  127E  3400               	retlw	0
  2047  127F  3400               	retlw	0
  2048  1280  3400               	retlw	0
  2049  1281  3400               	retlw	0
  2050  1282  3400               	retlw	0
  2051  1283  3400               	retlw	0
  2052  1284  3400               	retlw	0
  2053  1285  3400               	retlw	0
  2054  1286  3400               	retlw	0
  2055  1287  3400               	retlw	0
  2056  1288  3400               	retlw	0
  2057  1289  3400               	retlw	0
  2058  128A  3400               	retlw	0
  2059  128B  3400               	retlw	0
  2060  128C  3400               	retlw	0
  2061  128D  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext
  2064  1000                     __pstringtext:	
  2065  1000                     _CC2500_registers_address:	
  2066  1000  3403               	retlw	3
  2067  1001  3416               	retlw	22
  2068  1002  3417               	retlw	23
  2069  1003  341E               	retlw	30
  2070  1004  341F               	retlw	31
  2071  1005  3420               	retlw	32
  2072  1006  342A               	retlw	42
  2073  1007  342B               	retlw	43
  2074  1008  340B               	retlw	11
  2075  1009  340C               	retlw	12
  2076  100A  340D               	retlw	13
  2077  100B  340E               	retlw	14
  2078  100C  340F               	retlw	15
  2079  100D  3410               	retlw	16
  2080  100E  3411               	retlw	17
  2081  100F  3412               	retlw	18
  2082  1010  3413               	retlw	19
  2083  1011  3414               	retlw	20
  2084  1012  340A               	retlw	10
  2085  1013  3415               	retlw	21
  2086  1014  3421               	retlw	33
  2087  1015  3422               	retlw	34
  2088  1016  3418               	retlw	24
  2089  1017  3419               	retlw	25
  2090  1018  341A               	retlw	26
  2091  1019  341B               	retlw	27
  2092  101A  341C               	retlw	28
  2093  101B  341D               	retlw	29
  2094  101C  3423               	retlw	35
  2095  101D  3424               	retlw	36
  2096  101E  3425               	retlw	37
  2097  101F  3426               	retlw	38
  2098  1020  3429               	retlw	41
  2099  1021  342C               	retlw	44
  2100  1022  342D               	retlw	45
  2101  1023  342E               	retlw	46
  2102  1024  3400               	retlw	0
  2103  1025  3401               	retlw	1
  2104  1026  3402               	retlw	2
  2105  1027  3407               	retlw	7
  2106  1028  3408               	retlw	8
  2107  1029  3409               	retlw	9
  2108  102A  3406               	retlw	6
  2109  102B  3404               	retlw	4
  2110  102C  3405               	retlw	5
  2111  102D  3427               	retlw	39
  2112  102E  3428               	retlw	40
  2113  102F                     __end_of_CC2500_registers_address:	
  2114  102F                     _CC2500_rfSettings:	
  2115  102F  3407               	retlw	7
  2116  1030  3407               	retlw	7
  2117  1031  3430               	retlw	48
  2118  1032  3487               	retlw	135
  2119  1033  346B               	retlw	107
  2120  1034  34F8               	retlw	248
  2121  1035  347F               	retlw	127
  2122  1036  343F               	retlw	63
  2123  1037  3409               	retlw	9
  2124  1038  3400               	retlw	0
  2125  1039  345C               	retlw	92
  2126  103A  34A7               	retlw	167
  2127  103B  3462               	retlw	98
  2128  103C  3486               	retlw	134
  2129  103D  3483               	retlw	131
  2130  103E  3403               	retlw	3
  2131  103F  3422               	retlw	34
  2132  1040  34F8               	retlw	248
  2133  1041  3400               	retlw	0
  2134  1042  3444               	retlw	68
  2135  1043  34B6               	retlw	182
  2136  1044  3410               	retlw	16
  2137  1045  3418               	retlw	24
  2138  1046  341D               	retlw	29
  2139  1047  341C               	retlw	28
  2140  1048  34C7               	retlw	199
  2141  1049  3400               	retlw	0
  2142  104A  34B2               	retlw	178
  2143  104B  34EA               	retlw	234
  2144  104C  340A               	retlw	10
  2145  104D  3400               	retlw	0
  2146  104E  3411               	retlw	17
  2147  104F  3459               	retlw	89
  2148  1050  3488               	retlw	136
  2149  1051  3431               	retlw	49
  2150  1052  340B               	retlw	11
  2151  1053  342F               	retlw	47
  2152  1054  342E               	retlw	46
  2153  1055  3406               	retlw	6
  2154  1056  3404               	retlw	4
  2155  1057  3405               	retlw	5
  2156  1058  3400               	retlw	0
  2157  1059  3430               	retlw	48
  2158  105A  34D3               	retlw	211
  2159  105B  3491               	retlw	145
  2160  105C  3441               	retlw	65
  2161  105D  3400               	retlw	0
  2162  105E                     __end_of_CC2500_rfSettings:	
  2163  105E                     _CC2500_patable_vaule:	
  2164  105E  34FE               	retlw	254
  2165  105F  34FE               	retlw	254
  2166  1060  34FE               	retlw	254
  2167  1061  34FE               	retlw	254
  2168  1062  34FE               	retlw	254
  2169  1063  34FE               	retlw	254
  2170  1064  34FE               	retlw	254
  2171  1065  34FE               	retlw	254
  2172  1066                     __end_of_CC2500_patable_vaule:	
  2173                           
  2174                           	psect	nvCOMMON
  2175  007D                     __pnvCOMMON:	
  2176  007D                     _product:	
  2177  007D                     	ds	1
  2178                           
  2179                           	psect	nvBANK1
  2180  00E7                     __pnvBANK1:	
  2181  00E7                     _Memory:	
  2182  00E7                     	ds	1
  2183  00E8                     _Timer0:	
  2184  00E8                     	ds	1
  2185  00E9                     _WDT:	
  2186  00E9                     	ds	1
  2187  00EA                     _myMain:	
  2188  00EA                     	ds	1
  2189  000C                     _PORTA	set	12
  2190  000D                     _PORTB	set	13
  2191  000E                     _PORTC	set	14
  2192  0015                     _TMR0	set	21
  2193  005F                     _GIE	set	95
  2194  005C                     _INTE	set	92
  2195  0059                     _INTF	set	89
  2196  005B                     _IOCIE	set	91
  2197  0058                     _IOCIF	set	88
  2198  005E                     _PEIE	set	94
  2199  0060                     _RA0	set	96
  2200  0063                     _RA3	set	99
  2201  0064                     _RA4	set	100
  2202  0066                     _RA6	set	102
  2203  0067                     _RA7	set	103
  2204  0068                     _RB0	set	104
  2205  0069                     _RB1	set	105
  2206  006B                     _RB3	set	107
  2207  006C                     _RB4	set	108
  2208  006D                     _RB5	set	109
  2209  0070                     _RC0	set	112
  2210  0071                     _RC1	set	113
  2211  0072                     _RC2	set	114
  2212  0074                     _RC4	set	116
  2213  0075                     _RC5	set	117
  2214  0077                     _RC7	set	119
  2215  005D                     _TMR0IE	set	93
  2216  005A                     _TMR0IF	set	90
  2217  009D                     _ADCON0	set	157
  2218  009E                     _ADCON1	set	158
  2219  009C                     _ADRESH	set	156
  2220  009B                     _ADRESL	set	155
  2221  0095                     _OPTION_REG	set	149
  2222  0099                     _OSCCON	set	153
  2223  008C                     _TRISA	set	140
  2224  008D                     _TRISB	set	141
  2225  008E                     _TRISC	set	142
  2226  0097                     _WDTCON	set	151
  2227  04E9                     _GO_nDONE	set	1257
  2228  0117                     _FVRCON	set	279
  2229  010C                     _LATA	set	268
  2230  010D                     _LATB	set	269
  2231  010E                     _LATC	set	270
  2232  018C                     _ANSELA	set	396
  2233  018D                     _ANSELB	set	397
  2234  018E                     _ANSELC	set	398
  2235  0192                     _PMADRH	set	402
  2236  0191                     _PMADRL	set	401
  2237  0196                     _PMCON2	set	406
  2238  0194                     _PMDATH	set	404
  2239  0193                     _PMDATL	set	403
  2240  0CAE                     _CFGS	set	3246
  2241  0CAC                     _FREE	set	3244
  2242  0CAD                     _LWLO	set	3245
  2243  0CA8                     _RD	set	3240
  2244  0CA9                     _WR	set	3241
  2245  0CAA                     _WREN	set	3242
  2246  1068                     _WPUB0	set	4200
  2247  1069                     _WPUB1	set	4201
  2248  106A                     _WPUB2	set	4202
  2249  0396                     _IOCBF	set	918
  2250  0395                     _IOCBN	set	917
  2251  0394                     _IOCBP	set	916
  2252  1CB2                     _IOCBF2	set	7346
  2253                           
  2254                           ; #config settings
  2255  0000                     
  2256                           	psect	cinit
  2257  0018                     start_initialization:	
  2258  0018                     __initialization:	
  2259                           
  2260                           ; Clear objects allocated to BITCOMMON
  2261  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2262                           
  2263                           ; Clear objects allocated to COMMON
  2264  0019  01F9               	clrf	__pbssCOMMON& (0+127)
  2265  001A  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2266  001B  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to BANK1
  2269  001C  30A0               	movlw	low __pbssBANK1
  2270  001D  0084               	movwf	4
  2271  001E  3000               	movlw	high __pbssBANK1
  2272  001F  0085               	movwf	5
  2273  0020  3047               	movlw	71
  2274  0021  319E  264A  3180   	fcall	clear_ram0
  2275                           
  2276                           ; Clear objects allocated to BANK2
  2277  0024  3020               	movlw	low __pbssBANK2
  2278  0025  0084               	movwf	4
  2279  0026  3001               	movlw	high __pbssBANK2
  2280  0027  0085               	movwf	5
  2281  0028  3047               	movlw	71
  2282  0029  319E  264A  3180   	fcall	clear_ram0
  2283                           
  2284                           ; Clear objects allocated to BANK3
  2285  002C  30C0               	movlw	low __pbssBANK3
  2286  002D  0084               	movwf	4
  2287  002E  3001               	movlw	high __pbssBANK3
  2288  002F  0085               	movwf	5
  2289  0030  3011               	movlw	17
  2290  0031  319E  264A  3180   	fcall	clear_ram0
  2291                           
  2292                           ; Clear objects allocated to BANK4
  2293  0034  3020               	movlw	low __pbssBANK4
  2294  0035  0084               	movwf	4
  2295  0036  3002               	movlw	high __pbssBANK4
  2296  0037  0085               	movwf	5
  2297  0038  3025               	movlw	37
  2298  0039  319E  264A  3180   	fcall	clear_ram0
  2299                           
  2300                           ; Initialize objects allocated to BANK3
  2301  003C  306E               	movlw	low __pidataBANK3
  2302  003D  0084               	movwf	4
  2303  003E  3092               	movlw	(high __pidataBANK3)| (0+128)
  2304  003F  0085               	movwf	5
  2305  0040  30A0               	movlw	low __pdataBANK3
  2306  0041  0086               	movwf	6
  2307  0042  3001               	movlw	high __pdataBANK3
  2308  0043  0087               	movwf	7
  2309  0044  3020               	movlw	32
  2310  0045  319E  2644         	fcall	init_ram
  2311  0047                     end_of_initialization:	
  2312                           ;End of C runtime variable initialization code
  2313                           
  2314  0047                     __end_of__initialization:	
  2315  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2316  0048  0020               	movlb	0
  2317  0049  3196  2EF4         	ljmp	_main	;jump to C main() function
  2318                           
  2319                           	psect	bitbssCOMMON
  2320  03E0                     __pbitbssCOMMON:	
  2321  03E0                     _Receive_OK:	
  2322  03E0                     	ds	1
  2323  03E1                     _Transceive_OK:	
  2324  03E1                     	ds	1
  2325                           
  2326                           	psect	bssCOMMON
  2327  0079                     __pbssCOMMON:	
  2328  0079                     _DimmerLights:	
  2329  0079                     	ds	1
  2330  007A                     _DimmerLightsIntr:	
  2331  007A                     	ds	1
  2332  007B                     _Sw:	
  2333  007B                     	ds	1
  2334                           
  2335                           	psect	bssBANK1
  2336  00A0                     __pbssBANK1:	
  2337  00A0                     _RF_Data:	
  2338  00A0                     	ds	21
  2339  00B5                     _RF_Count:	
  2340  00B5                     	ds	2
  2341  00B7                     _Buz:	
  2342  00B7                     	ds	1
  2343  00B8                     _CRC:	
  2344  00B8                     	ds	1
  2345  00B9                     _DelayOff:	
  2346  00B9                     	ds	1
  2347  00BA                     _Dimmer:	
  2348  00BA                     	ds	1
  2349  00BB                     _DimmerLights11:	
  2350  00BB                     	ds	1
  2351  00BC                     _DimmerLights22:	
  2352  00BC                     	ds	1
  2353  00BD                     _LED:	
  2354  00BD                     	ds	1
  2355  00BE                     _RF:	
  2356  00BE                     	ds	1
  2357  00BF                     _RFSW:	
  2358  00BF                     	ds	1
  2359  00C0                     _RSSI:	
  2360  00C0                     	ds	1
  2361  00C1                     _Rx_Length:	
  2362  00C1                     	ds	1
  2363  00C2                     _SPI0Buffer:	
  2364  00C2                     	ds	1
  2365  00C3                     _Tx_Length:	
  2366  00C3                     	ds	1
  2367  00C4                     _r_address:	
  2368  00C4                     	ds	1
  2369  00C5                     _r_data:	
  2370  00C5                     	ds	1
  2371  00C6                     _s_data:	
  2372  00C6                     	ds	1
  2373  00C7                     _DlySw1:	
  2374  00C7                     	ds	5
  2375  00CC                     _DlySw2:	
  2376  00CC                     	ds	5
  2377  00D1                     _VarErrLED:	
  2378  00D1                     	ds	4
  2379  00D5                     _VarLED1:	
  2380  00D5                     	ds	4
  2381  00D9                     _VarLED2:	
  2382  00D9                     	ds	4
  2383  00DD                     _Dimmer1:	
  2384  00DD                     	ds	3
  2385  00E0                     _RF1:	
  2386  00E0                     	ds	3
  2387  00E3                     __WDT:	
  2388  00E3                     	ds	2
  2389  00E5                     _RFSW1:	
  2390  00E5                     	ds	1
  2391  00E6                     _RFSW2:	
  2392  00E6                     	ds	1
  2393                           
  2394                           	psect	bssBANK2
  2395  0120                     __pbssBANK2:	
  2396  0120                     _DimmerLights1:	
  2397  0120                     	ds	16
  2398  0130                     _DimmerLights2:	
  2399  0130                     	ds	16
  2400  0140                     _Buz1:	
  2401  0140                     	ds	12
  2402  014C                     _Sw1:	
  2403  014C                     	ds	9
  2404  0155                     _Sw2:	
  2405  0155                     	ds	9
  2406  015E                     _VarTimer0:	
  2407  015E                     	ds	9
  2408                           
  2409                           	psect	bssBANK3
  2410  01C0                     __pbssBANK3:	
  2411  01C0                     __myMain:	
  2412  01C0                     	ds	17
  2413                           
  2414                           	psect	dataBANK3
  2415  01A0                     __pdataBANK3:	
  2416  01A0                     __product:	
  2417  01A0                     	ds	32
  2418                           
  2419                           	psect	bssBANK4
  2420  0220                     __pbssBANK4:	
  2421  0220                     _VarMemory:	
  2422  0220                     	ds	37
  2423                           
  2424                           	psect	clrtext
  2425  1E4A                     clear_ram0:	
  2426                           ;	Called with FSR0 containing the base address, and
  2427                           ;	WREG with the size to clear
  2428                           
  2429  1E4A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2430  1E4B                     clrloop0:	
  2431  1E4B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2432  1E4C  3101               	addfsr 0,1
  2433  1E4D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2434  1E4E  2E4B               	goto	clrloop0	;have we reached the end yet?
  2435  1E4F  3400               	retlw	0	;all done for this memory range, return
  2436                           
  2437                           	psect	inittext
  2438  1E44                     init_ram:	
  2439  1E44  00FE               	movwf	126
  2440  1E45                     initloop:	
  2441  1E45  0012               	moviw fsr0++
  2442  1E46  001E               	movwi fsr1++
  2443  1E47  0BFE               	decfsz	126,f
  2444  1E48  2E45               	goto	initloop
  2445  1E49  3400               	retlw	0
  2446                           
  2447                           	psect	cstackCOMMON
  2448  0070                     __pcstackCOMMON:	
  2449  0070                     ?_CC2500_WriteByte:	
  2450  0070                     ?_CC2500_WriteCommand:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_CC2500_ReadStatus:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ReadByte:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_PowerRST:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_InitSetREG:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_InitPATable:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_ClearTXFIFO:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_ClearRXFIFO:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_FrequencyCabr:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_SIDLEMode:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_DlyOff_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_DlyOff_Main:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_setTxData:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setDimmerLights_Initialization:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_Dimmer_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setDimmerLights_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setLED_Initialization:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setLED_Main:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_Fosc_Set:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_IO_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_TMR0_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_ADC_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_INT_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_IOC_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_WDT_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_IOC_ISR:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_TMR0_ISR:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_INT_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_Flash_Memory_Write:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Flash_Memory_Modify:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_WDT_Clearing:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setRF_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setRF_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_getRxData:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_RF_RxDisable:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setLog_Code:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setControl_Lights_Table:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRFSW_Control:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRFSW_AdjControl:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_DimmerValue:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setSw_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setSw_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Sw_DimmerOnFunc:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Sw_DimmerAdjFunc:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_Sw_DimmerOffFunc:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_myMain_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_my_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_Buzzer_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_Buz_Counter:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ??_Buz_Counter:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_Buzzer_Main:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_TxData:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_RxData:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_PowerOnInitial:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DelayOffPointSelect:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_DelayOff_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_DelayOff_Main:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DimmerIntrPointSelect:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ??_DimmerIntrPointSelect:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_IntrControl:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_IntrGO:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DimmerLightsPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerLights_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DimmerLights_Close:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerLights_Main:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_AdjRF:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_LedPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_LED_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_LED_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Mcu_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_ISR:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setDimmerReClock:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setINT_GO:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_Flash_Memory_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Flash_Memory_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Flash_Memory_Unlock:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Erasing:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_WDT_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_RfPointSelect:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_RF_Initialization:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_RF_Main:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_RfSWPointSelect:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_TouchPower:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_SwPointSelect:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Switch_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setSw_Enable:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?i1_RfPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ??i1_RfPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_DelayTimejudge:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_getDimmerLights_StatusFlag:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_getPercentValue:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?_Flash_Memory_Read:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_setPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     setRF_Initialization@rf:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x0
  2737  0070                     	ds	1
  2738  0071                     DimmerIntrPointSelect@lights:	
  2739  0071                     i1RfPointSelect@rf:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0071                     	ds	1
  2745  0072                     ?_setRF_ReceiveGO:	
  2746  0072                     ??_setDimmerLights_IntrControl:	
  2747                           ; 0 bytes @ 0x2
  2748                           
  2749  0072                     ??_setDimmerLights_IntrGO:	
  2750                           ; 0 bytes @ 0x2
  2751                           
  2752  0072                     setDimmerLights_IntrGO@lights:	
  2753                           ; 0 bytes @ 0x2
  2754                           
  2755  0072                     setRF_ReceiveGO@command:	
  2756                           ; 1 bytes @ 0x2
  2757                           
  2758                           
  2759                           ; 1 bytes @ 0x2
  2760  0072                     	ds	1
  2761  0073                     ??_IOC_ISR:	
  2762  0073                     ??_setRF_ReceiveGO:	
  2763                           ; 0 bytes @ 0x3
  2764                           
  2765  0073                     ??_setDimmerReClock:	
  2766                           ; 0 bytes @ 0x3
  2767                           
  2768  0073                     setRF_ReceiveGO@rf:	
  2769                           ; 0 bytes @ 0x3
  2770                           
  2771                           
  2772                           ; 1 bytes @ 0x3
  2773  0073                     	ds	1
  2774  0074                     ??_INT_ISR:	
  2775                           
  2776                           ; 0 bytes @ 0x4
  2777  0074                     	ds	2
  2778  0076                     setDimmerLights_IntrControl@lights:	
  2779                           
  2780                           ; 1 bytes @ 0x6
  2781  0076                     	ds	1
  2782  0077                     ??_TMR0_ISR:	
  2783                           
  2784                           ; 0 bytes @ 0x7
  2785  0077                     	ds	1
  2786  0078                     ??_ISR:	
  2787                           
  2788                           ; 0 bytes @ 0x8
  2789  0078                     	ds	1
  2790                           
  2791                           	psect	cstackBANK0
  2792  0020                     __pcstackBANK0:	
  2793  0020                     ??_CC2500_WriteByte:	
  2794  0020                     ??_CC2500_ReadByte:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ?_DelayTime_1us:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_DelayTimejudge:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_Dimmer_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_getDimmerLights_StatusFlag:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Fosc_Set:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_IO_Set:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_TMR0_Set:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_ADC_Set:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_INT_Set:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_IOC_Set:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_WDT_Set:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_Flash_Memory_Read:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_Flash_Memory_Write:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_WDT_Clearing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setRF_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_myMain_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_Buzzer_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ?_setBuz:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Buzzer_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_DelayOffPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_DimmerLightsPointSelect:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_LedPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_setINT_GO:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_WDT_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_RfPointSelect:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_RfSWPointSelect:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_TouchPower:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_SwPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?___ftpack:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     setINT_GO@command:	
  2891                           ; 3 bytes @ 0x0
  2892                           
  2893  0020                     setBuz@time:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0020                     DelayTime_1us@count:	
  2897                           ; 2 bytes @ 0x0
  2898                           
  2899  0020                     ___ftpack@arg:	
  2900                           ; 2 bytes @ 0x0
  2901                           
  2902                           
  2903                           ; 3 bytes @ 0x0
  2904  0020                     	ds	1
  2905  0021                     ??_Mcu_Initialization:	
  2906  0021                     ??_RF_Initialization:	
  2907                           ; 0 bytes @ 0x1
  2908                           
  2909  0021                     CC2500_WriteByte@loop_a:	
  2910                           ; 0 bytes @ 0x1
  2911                           
  2912  0021                     CC2500_ReadByte@loop_b:	
  2913                           ; 1 bytes @ 0x1
  2914                           
  2915  0021                     DelayOffPointSelect@sw:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918  0021                     DelayTimejudge@value:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921  0021                     DimmerLightsPointSelect@lights:	
  2922                           ; 1 bytes @ 0x1
  2923                           
  2924  0021                     getDimmerLights_StatusFlag@Status:	
  2925                           ; 1 bytes @ 0x1
  2926                           
  2927  0021                     LedPointSelect@led:	
  2928                           ; 1 bytes @ 0x1
  2929                           
  2930  0021                     Flash_Memory_Read@i:	
  2931                           ; 1 bytes @ 0x1
  2932                           
  2933  0021                     Flash_Memory_Write@i:	
  2934                           ; 1 bytes @ 0x1
  2935                           
  2936  0021                     RfPointSelect@rf:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939  0021                     RfSWPointSelect@sw:	
  2940                           ; 1 bytes @ 0x1
  2941                           
  2942  0021                     SwPointSelect@sw:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x1
  2947  0021                     	ds	1
  2948  0022                     ??_CC2500_WriteCommand:	
  2949  0022                     ??_CC2500_ReadStatus:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0022                     ?_setRF_RxStatus:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955  0022                     ??_DelayTime_1us:	
  2956                           ; 0 bytes @ 0x2
  2957                           
  2958  0022                     ?_CC2500_WriteREG:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0022                     ??_DlyOff_Initialization:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0022                     ?_setSw_Status:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0022                     ?_setRFSW_Status:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0022                     ?_setDimmerLights_Trigger:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0022                     ?_setDimmerLights_Switch:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0022                     ??_setTxData:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0022                     ??_setDimmerLights_Initialization:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0022                     ?_setLED:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0022                     ??_setLED_Main:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0022                     ??_setBuz:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0022                     ?_setDimmerLights_AdjGo:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0022                     ?_setDimmerLights_TriggerAdj:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0022                     ?_setRF_Learn:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0022                     ?_setRF_Enable:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0022                     ??_setSw_Enable:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0022                     CC2500_WriteREG@value:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0022                     DlyOff_Initialization@sw:	
  3010                           ; 1 bytes @ 0x2
  3011                           
  3012  0022                     DelayTimejudge@i:	
  3013                           ; 1 bytes @ 0x2
  3014                           
  3015  0022                     _getDimmerLights_StatusFlag$1566:	
  3016                           ; 1 bytes @ 0x2
  3017                           
  3018  0022                     setDimmerLights_Switch@command:	
  3019                           ; 1 bytes @ 0x2
  3020                           
  3021  0022                     setDimmerLights_AdjGo@command:	
  3022                           ; 1 bytes @ 0x2
  3023                           
  3024  0022                     setDimmerLights_Trigger@command:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027  0022                     setDimmerLights_TriggerAdj@command:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     setLED@command:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     Flash_Memory_Read@address:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     setRF_Learn@command:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     setRF_RxStatus@command:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     setRF_Enable@command:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     setRFSW_Status@command:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     setSw_Enable@command:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     setSw_Status@command:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0022                     DelayTime_1us@i:	
  3055                           ; 1 bytes @ 0x2
  3056                           
  3057                           
  3058                           ; 2 bytes @ 0x2
  3059  0022                     	ds	1
  3060  0023                     ??_setRF_RxStatus:	
  3061  0023                     ??_CC2500_WriteREG:	
  3062                           ; 0 bytes @ 0x3
  3063                           
  3064  0023                     ??_setSw_Status:	
  3065                           ; 0 bytes @ 0x3
  3066                           
  3067  0023                     ??_setRFSW_Status:	
  3068                           ; 0 bytes @ 0x3
  3069                           
  3070  0023                     ??_setDimmerLights_Trigger:	
  3071                           ; 0 bytes @ 0x3
  3072                           
  3073  0023                     ??_setDimmerLights_Switch:	
  3074                           ; 0 bytes @ 0x3
  3075                           
  3076  0023                     ??_setLED:	
  3077                           ; 0 bytes @ 0x3
  3078                           
  3079  0023                     ??_DelayOff_Initialization:	
  3080                           ; 0 bytes @ 0x3
  3081                           
  3082  0023                     ?_setDelayOff_GO:	
  3083                           ; 0 bytes @ 0x3
  3084                           
  3085  0023                     ??_DimmerLights_Close:	
  3086                           ; 0 bytes @ 0x3
  3087                           
  3088  0023                     ??_setDimmerLights_AdjGo:	
  3089                           ; 0 bytes @ 0x3
  3090                           
  3091  0023                     ??_setDimmerLights_TriggerAdj:	
  3092                           ; 0 bytes @ 0x3
  3093                           
  3094  0023                     ??_setRF_Learn:	
  3095                           ; 0 bytes @ 0x3
  3096                           
  3097  0023                     ??_setRF_Enable:	
  3098                           ; 0 bytes @ 0x3
  3099                           
  3100  0023                     setBuz@count:	
  3101                           ; 0 bytes @ 0x3
  3102                           
  3103  0023                     CC2500_WriteCommand@command:	
  3104                           ; 1 bytes @ 0x3
  3105                           
  3106  0023                     CC2500_ReadStatus@status_addr:	
  3107                           ; 1 bytes @ 0x3
  3108                           
  3109  0023                     setDelayOff_GO@command:	
  3110                           ; 1 bytes @ 0x3
  3111                           
  3112  0023                     setDimmerLights_Initialization@lights:	
  3113                           ; 1 bytes @ 0x3
  3114                           
  3115  0023                     setDimmerLights_Switch@lights:	
  3116                           ; 1 bytes @ 0x3
  3117                           
  3118  0023                     setDimmerLights_AdjGo@lights:	
  3119                           ; 1 bytes @ 0x3
  3120                           
  3121  0023                     setDimmerLights_Trigger@lights:	
  3122                           ; 1 bytes @ 0x3
  3123                           
  3124  0023                     setDimmerLights_TriggerAdj@lights:	
  3125                           ; 1 bytes @ 0x3
  3126                           
  3127  0023                     setLED@led:	
  3128                           ; 1 bytes @ 0x3
  3129                           
  3130  0023                     Flash_Memory_Read@ret:	
  3131                           ; 1 bytes @ 0x3
  3132                           
  3133  0023                     setRF_Learn@rf:	
  3134                           ; 1 bytes @ 0x3
  3135                           
  3136  0023                     setRF_RxStatus@rf:	
  3137                           ; 1 bytes @ 0x3
  3138                           
  3139  0023                     setTxData@rf:	
  3140                           ; 1 bytes @ 0x3
  3141                           
  3142  0023                     setRF_Enable@rf:	
  3143                           ; 1 bytes @ 0x3
  3144                           
  3145  0023                     setRFSW_Status@sw:	
  3146                           ; 1 bytes @ 0x3
  3147                           
  3148  0023                     setSw_Status@sw:	
  3149                           ; 1 bytes @ 0x3
  3150                           
  3151  0023                     ___ftpack@exp:	
  3152                           ; 1 bytes @ 0x3
  3153                           
  3154                           
  3155                           ; 1 bytes @ 0x3
  3156  0023                     	ds	1
  3157  0024                     ??_CC2500_ClearTXFIFO:	
  3158  0024                     ??_CC2500_ClearRXFIFO:	
  3159                           ; 0 bytes @ 0x4
  3160                           
  3161  0024                     ??_CC2500_SIDLEMode:	
  3162                           ; 0 bytes @ 0x4
  3163                           
  3164  0024                     ?_setDimmerLights:	
  3165                           ; 0 bytes @ 0x4
  3166                           
  3167  0024                     ??_setLED_Initialization:	
  3168                           ; 0 bytes @ 0x4
  3169                           
  3170  0024                     ??_Flash_Memory_Modify:	
  3171                           ; 0 bytes @ 0x4
  3172                           
  3173  0024                     ??_RF_RxDisable:	
  3174                           ; 0 bytes @ 0x4
  3175                           
  3176  0024                     ??_setLog_Code:	
  3177                           ; 0 bytes @ 0x4
  3178                           
  3179  0024                     ??_setSw_Initialization:	
  3180                           ; 0 bytes @ 0x4
  3181                           
  3182  0024                     ??_Sw_DimmerAdjFunc:	
  3183                           ; 0 bytes @ 0x4
  3184                           
  3185  0024                     ??_my_Main:	
  3186                           ; 0 bytes @ 0x4
  3187                           
  3188  0024                     ??_CC2500_TxData:	
  3189                           ; 0 bytes @ 0x4
  3190                           
  3191  0024                     ??_CC2500_RxData:	
  3192                           ; 0 bytes @ 0x4
  3193                           
  3194  0024                     ??_DimmerLights_Initialization:	
  3195                           ; 0 bytes @ 0x4
  3196                           
  3197  0024                     CC2500_WriteREG@w_addr:	
  3198                           ; 0 bytes @ 0x4
  3199                           
  3200  0024                     setDelayOff_GO@value:	
  3201                           ; 1 bytes @ 0x4
  3202                           
  3203  0024                     setDimmerLights@status:	
  3204                           ; 1 bytes @ 0x4
  3205                           
  3206  0024                     setLED_Initialization@led:	
  3207                           ; 1 bytes @ 0x4
  3208                           
  3209  0024                     setLED_Main@led:	
  3210                           ; 1 bytes @ 0x4
  3211                           
  3212  0024                     RF_RxDisable@rf:	
  3213                           ; 1 bytes @ 0x4
  3214                           
  3215  0024                     setSw_Initialization@sw:	
  3216                           ; 1 bytes @ 0x4
  3217                           
  3218  0024                     Sw_DimmerAdjFunc@Idle:	
  3219                           ; 1 bytes @ 0x4
  3220                           
  3221  0024                     ___ftpack@sign:	
  3222                           ; 1 bytes @ 0x4
  3223                           
  3224  0024                     DelayTime_1us@j:	
  3225                           ; 1 bytes @ 0x4
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0x4
  3229  0024                     	ds	1
  3230  0025                     ??_CC2500_InitSetREG:	
  3231  0025                     ??_CC2500_InitPATable:	
  3232                           ; 0 bytes @ 0x5
  3233                           
  3234  0025                     ??_setDimmerLights:	
  3235                           ; 0 bytes @ 0x5
  3236                           
  3237  0025                     ??___ftpack:	
  3238                           ; 0 bytes @ 0x5
  3239                           
  3240  0025                     ??_setDelayOff_GO:	
  3241                           ; 0 bytes @ 0x5
  3242                           
  3243  0025                     ??_LED_Initialization:	
  3244                           ; 0 bytes @ 0x5
  3245                           
  3246  0025                     ??_LED_Main:	
  3247                           ; 0 bytes @ 0x5
  3248                           
  3249  0025                     ??_Switch_Initialization:	
  3250                           ; 0 bytes @ 0x5
  3251                           
  3252  0025                     CC2500_TxData@loop_e:	
  3253                           ; 0 bytes @ 0x5
  3254                           
  3255  0025                     CC2500_RxData@loop_f:	
  3256                           ; 1 bytes @ 0x5
  3257                           
  3258  0025                     setLog_Code@rf:	
  3259                           ; 1 bytes @ 0x5
  3260                           
  3261  0025                     Sw_DimmerAdjFunc@sw:	
  3262                           ; 1 bytes @ 0x5
  3263                           
  3264                           
  3265                           ; 1 bytes @ 0x5
  3266  0025                     	ds	1
  3267  0026                     ??_CC2500_PowerRST:	
  3268  0026                     ??_CC2500_FrequencyCabr:	
  3269                           ; 0 bytes @ 0x6
  3270                           
  3271  0026                     CC2500_InitSetREG@temp1:	
  3272                           ; 0 bytes @ 0x6
  3273                           
  3274  0026                     CC2500_InitPATable@temp:	
  3275                           ; 1 bytes @ 0x6
  3276                           
  3277  0026                     setDimmerLights@lights:	
  3278                           ; 1 bytes @ 0x6
  3279                           
  3280  0026                     Flash_Memory_Modify@i:	
  3281                           ; 1 bytes @ 0x6
  3282                           
  3283                           
  3284                           ; 1 bytes @ 0x6
  3285  0026                     	ds	1
  3286  0027                     ??_Flash_Memory_Main:	
  3287  0027                     CC2500_InitSetREG@temp2:	
  3288                           ; 0 bytes @ 0x7
  3289                           
  3290  0027                     CC2500_InitPATable@loop_d:	
  3291                           ; 1 bytes @ 0x7
  3292                           
  3293  0027                     setDelayOff_GO@sw:	
  3294                           ; 1 bytes @ 0x7
  3295                           
  3296                           
  3297                           ; 1 bytes @ 0x7
  3298  0027                     	ds	1
  3299  0028                     ?___awtoft:	
  3300  0028                     CC2500_InitSetREG@loop_c:	
  3301                           ; 3 bytes @ 0x8
  3302                           
  3303  0028                     ___awtoft@c:	
  3304                           ; 1 bytes @ 0x8
  3305                           
  3306                           
  3307                           ; 2 bytes @ 0x8
  3308  0028                     	ds	1
  3309  0029                     ??_CC2500_PowerOnInitial:	
  3310                           
  3311                           ; 0 bytes @ 0x9
  3312  0029                     	ds	2
  3313  002B                     ??___awtoft:	
  3314                           
  3315                           ; 0 bytes @ 0xB
  3316  002B                     	ds	2
  3317  002D                     ___awtoft@sign:	
  3318                           
  3319                           ; 1 bytes @ 0xD
  3320  002D                     	ds	1
  3321  002E                     ?___ftdiv:	
  3322  002E                     ?___ftmul:	
  3323                           ; 3 bytes @ 0xE
  3324                           
  3325  002E                     ___ftdiv@f2:	
  3326                           ; 3 bytes @ 0xE
  3327                           
  3328  002E                     ___ftmul@f1:	
  3329                           ; 3 bytes @ 0xE
  3330                           
  3331                           
  3332                           ; 3 bytes @ 0xE
  3333  002E                     	ds	3
  3334  0031                     ___ftdiv@f1:	
  3335  0031                     ___ftmul@f2:	
  3336                           ; 3 bytes @ 0x11
  3337                           
  3338                           
  3339                           ; 3 bytes @ 0x11
  3340  0031                     	ds	3
  3341  0034                     ??___ftdiv:	
  3342  0034                     ??___ftmul:	
  3343                           ; 0 bytes @ 0x14
  3344                           
  3345                           
  3346                           ; 0 bytes @ 0x14
  3347  0034                     	ds	4
  3348  0038                     ___ftdiv@cntr:	
  3349  0038                     ___ftmul@exp:	
  3350                           ; 1 bytes @ 0x18
  3351                           
  3352                           
  3353                           ; 1 bytes @ 0x18
  3354  0038                     	ds	1
  3355  0039                     ___ftdiv@f3:	
  3356  0039                     ___ftmul@f3_as_product:	
  3357                           ; 3 bytes @ 0x19
  3358                           
  3359                           
  3360                           ; 3 bytes @ 0x19
  3361  0039                     	ds	3
  3362  003C                     ___ftdiv@exp:	
  3363  003C                     ___ftmul@cntr:	
  3364                           ; 1 bytes @ 0x1C
  3365                           
  3366                           
  3367                           ; 1 bytes @ 0x1C
  3368  003C                     	ds	1
  3369  003D                     ___ftdiv@sign:	
  3370  003D                     ___ftmul@sign:	
  3371                           ; 1 bytes @ 0x1D
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x1D
  3375  003D                     	ds	1
  3376  003E                     ?___ftadd:	
  3377  003E                     ___ftadd@f1:	
  3378                           ; 3 bytes @ 0x1E
  3379                           
  3380                           
  3381                           ; 3 bytes @ 0x1E
  3382  003E                     	ds	3
  3383  0041                     ___ftadd@f2:	
  3384                           
  3385                           ; 3 bytes @ 0x21
  3386  0041                     	ds	3
  3387  0044                     ??___ftadd:	
  3388                           
  3389                           ; 0 bytes @ 0x24
  3390  0044                     	ds	4
  3391  0048                     ___ftadd@sign:	
  3392                           
  3393                           ; 1 bytes @ 0x28
  3394  0048                     	ds	1
  3395  0049                     ___ftadd@exp2:	
  3396                           
  3397                           ; 1 bytes @ 0x29
  3398  0049                     	ds	1
  3399  004A                     ___ftadd@exp1:	
  3400                           
  3401                           ; 1 bytes @ 0x2A
  3402  004A                     	ds	1
  3403  004B                     ?___fttol:	
  3404  004B                     ___fttol@f1:	
  3405                           ; 4 bytes @ 0x2B
  3406                           
  3407                           
  3408                           ; 3 bytes @ 0x2B
  3409  004B                     	ds	4
  3410  004F                     ??___fttol:	
  3411                           
  3412                           ; 0 bytes @ 0x2F
  3413  004F                     	ds	4
  3414  0053                     ___fttol@sign1:	
  3415                           
  3416                           ; 1 bytes @ 0x33
  3417  0053                     	ds	1
  3418  0054                     ___fttol@lval:	
  3419                           
  3420                           ; 4 bytes @ 0x34
  3421  0054                     	ds	4
  3422  0058                     ___fttol@exp1:	
  3423                           
  3424                           ; 1 bytes @ 0x38
  3425  0058                     	ds	1
  3426  0059                     ??_getPercentValue:	
  3427  0059                     ??_setPercentValue:	
  3428                           ; 0 bytes @ 0x39
  3429                           
  3430  0059                     setPercentValue@value:	
  3431                           ; 0 bytes @ 0x39
  3432                           
  3433                           
  3434                           ; 1 bytes @ 0x39
  3435  0059                     	ds	1
  3436  005A                     setPercentValue@i:	
  3437                           
  3438                           ; 3 bytes @ 0x3A
  3439  005A                     	ds	1
  3440  005B                     getPercentValue@value:	
  3441                           
  3442                           ; 1 bytes @ 0x3B
  3443  005B                     	ds	1
  3444  005C                     getPercentValue@i:	
  3445                           
  3446                           ; 3 bytes @ 0x3C
  3447  005C                     	ds	1
  3448  005D                     ?_setRF_DimmerLights:	
  3449  005D                     ??_Flash_Memory_Initialization:	
  3450                           ; 0 bytes @ 0x3D
  3451                           
  3452  005D                     setRF_DimmerLights@on:	
  3453                           ; 0 bytes @ 0x3D
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x3D
  3457  005D                     	ds	1
  3458  005E                     ??_setRF_DimmerLights:	
  3459  005E                     Flash_Memory_Initialization@i:	
  3460                           ; 0 bytes @ 0x3E
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x3E
  3464  005E                     	ds	1
  3465  005F                     ??_setDimmerLights_AdjRF:	
  3466                           
  3467                           ; 0 bytes @ 0x3F
  3468  005F                     	ds	1
  3469  0060                     setDimmerLights_AdjRF@lights:	
  3470  0060                     setRF_DimmerLights@status:	
  3471                           ; 1 bytes @ 0x40
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x40
  3475  0060                     	ds	1
  3476  0061                     ??_setRF_DimmerValue:	
  3477  0061                     setRF_DimmerLights@lights:	
  3478                           ; 0 bytes @ 0x41
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x41
  3482  0061                     	ds	1
  3483  0062                     ??_DlyOff_Main:	
  3484  0062                     ?_setDimmerLights_Adj:	
  3485                           ; 0 bytes @ 0x42
  3486                           
  3487  0062                     ??_setRFSW_Control:	
  3488                           ; 0 bytes @ 0x42
  3489                           
  3490  0062                     ??_Sw_DimmerOnFunc:	
  3491                           ; 0 bytes @ 0x42
  3492                           
  3493  0062                     ??_Sw_DimmerOffFunc:	
  3494                           ; 0 bytes @ 0x42
  3495                           
  3496  0062                     setDimmerLights_Adj@status:	
  3497                           ; 0 bytes @ 0x42
  3498                           
  3499  0062                     Sw_DimmerOnFunc@Idle:	
  3500                           ; 1 bytes @ 0x42
  3501                           
  3502                           
  3503                           ; 1 bytes @ 0x42
  3504  0062                     	ds	1
  3505  0063                     ??_setDimmerLights_Adj:	
  3506  0063                     setRFSW_Control@sw:	
  3507                           ; 0 bytes @ 0x43
  3508                           
  3509  0063                     setRF_DimmerValue@lights:	
  3510                           ; 1 bytes @ 0x43
  3511                           
  3512  0063                     Sw_DimmerOnFunc@sw:	
  3513                           ; 1 bytes @ 0x43
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x43
  3517  0063                     	ds	1
  3518  0064                     ??_setRFSW_AdjControl:	
  3519  0064                     DlyOff_Main@sw:	
  3520                           ; 0 bytes @ 0x44
  3521                           
  3522  0064                     setDimmerLights_Adj@lights:	
  3523                           ; 1 bytes @ 0x44
  3524                           
  3525  0064                     Sw_DimmerOffFunc@sw:	
  3526                           ; 1 bytes @ 0x44
  3527                           
  3528                           
  3529                           ; 1 bytes @ 0x44
  3530  0064                     	ds	1
  3531  0065                     ??_setDimmerLights_Main:	
  3532  0065                     ??_setSw_Main:	
  3533                           ; 0 bytes @ 0x45
  3534                           
  3535  0065                     ??_DelayOff_Main:	
  3536                           ; 0 bytes @ 0x45
  3537                           
  3538  0065                     setDimmerLights_Main@clear:	
  3539                           ; 0 bytes @ 0x45
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x45
  3543  0065                     	ds	1
  3544  0066                     setDimmerLights_Main@lights:	
  3545  0066                     setRFSW_AdjControl@sw:	
  3546                           ; 1 bytes @ 0x46
  3547                           
  3548                           
  3549                           ; 1 bytes @ 0x46
  3550  0066                     	ds	1
  3551  0067                     ??_setControl_Lights_Table:	
  3552  0067                     ??_DimmerLights_Main:	
  3553                           ; 0 bytes @ 0x47
  3554                           
  3555  0067                     setControl_Lights_Table@rf:	
  3556                           ; 0 bytes @ 0x47
  3557                           
  3558  0067                     _setSw_Main$3916:	
  3559                           ; 1 bytes @ 0x47
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x47
  3563  0067                     	ds	1
  3564  0068                     ??_getRxData:	
  3565  0068                     getRxData@rf:	
  3566                           ; 0 bytes @ 0x48
  3567                           
  3568  0068                     _setSw_Main$3917:	
  3569                           ; 1 bytes @ 0x48
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x48
  3573  0068                     	ds	1
  3574  0069                     ??_setRF_Main:	
  3575  0069                     setSw_Main@sw:	
  3576                           ; 0 bytes @ 0x49
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x49
  3580  0069                     	ds	1
  3581  006A                     ??_Switch_Main:	
  3582  006A                     setRF_Main@rf:	
  3583                           ; 0 bytes @ 0x4A
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0x4A
  3587  006A                     	ds	1
  3588  006B                     _setRF_Main$3246:	
  3589                           
  3590                           ; 1 bytes @ 0x4B
  3591  006B                     	ds	1
  3592  006C                     ??_RF_Main:	
  3593  006C                     ?_main:	
  3594                           ; 0 bytes @ 0x4C
  3595                           
  3596  006C                     main@argc:	
  3597                           ; 2 bytes @ 0x4C
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x4C
  3601  006C                     	ds	2
  3602  006E                     main@argv:	
  3603                           
  3604                           ; 2 bytes @ 0x4E
  3605  006E                     	ds	2
  3606  0070                     ??_main:	
  3607                           
  3608                           	psect	maintext
  3609  16F4                     __pmaintext:	
  3610                           ; 0 bytes @ 0x50
  3611 ;;
  3612 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3613 ;;
  3614 ;; *************** function _main *****************
  3615 ;; Defined at:
  3616 ;;		line 7 in file "../src/main_B1.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  argc            2   76[BANK0 ] int 
  3619 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;		None
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  2   76[BANK0 ] int 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 17F/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;Total ram usage:        4 bytes
  3636 ;; Hardware stack levels required when called:   15
  3637 ;; This function calls:
  3638 ;;		_Buzzer_Initialization
  3639 ;;		_Buzzer_Main
  3640 ;;		_CC2500_PowerOnInitial
  3641 ;;		_DelayOff_Initialization
  3642 ;;		_DelayOff_Main
  3643 ;;		_DimmerLights_Initialization
  3644 ;;		_DimmerLights_Main
  3645 ;;		_Flash_Memory_Initialization
  3646 ;;		_Flash_Memory_Main
  3647 ;;		_LED_Initialization
  3648 ;;		_LED_Main
  3649 ;;		_Mcu_Initialization
  3650 ;;		_RF_Initialization
  3651 ;;		_RF_Main
  3652 ;;		_Switch_Initialization
  3653 ;;		_Switch_Main
  3654 ;;		_WDT_Main
  3655 ;;		_myMain_Initialization
  3656 ;;		_my_Main
  3657 ;; This function is called by:
  3658 ;;		Startup code after reset
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function _main
  3664  16F4                     _main:	
  3665                           
  3666                           ;main_B1.c: 9: myMain_Initialization();
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3670  16F4  3190  20A9  3196   	fcall	_myMain_Initialization
  3671                           
  3672                           ;main_B1.c: 10: Mcu_Initialization();
  3673  16F7  3191  21C4  3196   	fcall	_Mcu_Initialization
  3674                           
  3675                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3676  16FA  3182  22E9  3196   	fcall	_Flash_Memory_Initialization
  3677                           
  3678                           ;main_B1.c: 12: LED_Initialization();
  3679  16FD  319E  26F6  3196   	fcall	_LED_Initialization
  3680                           
  3681                           ;main_B1.c: 13: Buzzer_Initialization();
  3682  1700  319E  26C6  3196   	fcall	_Buzzer_Initialization
  3683                           
  3684                           ;main_B1.c: 15: ;;
  3685                           ;main_B1.c: 16: ;;
  3686                           ;main_B1.c: 17: ;;
  3687                           ;main_B1.c: 18: ;;
  3688                           ;main_B1.c: 19: DelayOff_Initialization();
  3689  1703  319E  2665  3196   	fcall	_DelayOff_Initialization
  3690                           
  3691                           ;main_B1.c: 21: DimmerLights_Initialization();
  3692  1706  3190  20FF  3196   	fcall	_DimmerLights_Initialization
  3693                           
  3694                           ;main_B1.c: 22: ;;
  3695                           ;main_B1.c: 23: ;;
  3696                           ;main_B1.c: 24: ;;
  3697                           ;main_B1.c: 26: Switch_Initialization();
  3698  1709  319F  2734  3196   	fcall	_Switch_Initialization
  3699                           
  3700                           ;main_B1.c: 27: RF_Initialization();
  3701  170C  319E  2631  3196   	fcall	_RF_Initialization
  3702                           
  3703                           ;main_B1.c: 28: CC2500_PowerOnInitial();
  3704  170F  3190  20BD  3196   	fcall	_CC2500_PowerOnInitial
  3705  1712                     l7074:	
  3706                           ;main_B1.c: 29: ;;
  3707                           ;main_B1.c: 32: while (1) {
  3708                           
  3709                           
  3710                           ;main_B1.c: 33: if (myMain->PowerON) {
  3711  1712  0021               	movlb	1	; select bank1
  3712  1713  086A               	movf	_myMain^(0+128),w
  3713  1714  0086               	movwf	6
  3714  1715  3001               	movlw	1	; select bank2/3
  3715  1716  0087               	movwf	7
  3716  1717  1C01               	btfss	1,0
  3717  1718  2F1C               	goto	l7078
  3718                           
  3719                           ;main_B1.c: 35: ;;
  3720                           ;main_B1.c: 39: ;;
  3721                           ;main_B1.c: 43: ;;
  3722                           ;main_B1.c: 47: ;;
  3723                           ;main_B1.c: 59: Buzzer_Main();
  3724  1719  3185  258B  3196   	fcall	_Buzzer_Main
  3725  171C                     l7078:	
  3726                           
  3727                           ;main_B1.c: 61: }
  3728                           ;main_B1.c: 64: if (myMain->T0_Timerout) {
  3729  171C  0021               	movlb	1	; select bank1
  3730  171D  086A               	movf	_myMain^(0+128),w
  3731  171E  0086               	movwf	6
  3732  171F  3001               	movlw	1	; select bank2/3
  3733  1720  0087               	movwf	7
  3734  1721  1C81               	btfss	1,1
  3735  1722  2F12               	goto	l7074
  3736                           
  3737                           ;main_B1.c: 65: myMain->T0_Timerout = 0;
  3738  1723  086A               	movf	_myMain^(0+128),w
  3739  1724  0086               	movwf	6
  3740  1725  3001               	movlw	1	; select bank2/3
  3741  1726  0087               	movwf	7
  3742  1727  1081               	bcf	1,1
  3743                           
  3744                           ;main_B1.c: 66: my_Main();
  3745  1728  318B  231E  3196   	fcall	_my_Main
  3746                           
  3747                           ;main_B1.c: 67: WDT_Main();
  3748  172B  3191  21FA  3196   	fcall	_WDT_Main
  3749                           
  3750                           ;main_B1.c: 68: ;;
  3751                           ;main_B1.c: 69: ;;
  3752                           ;main_B1.c: 70: if (myMain->PowerON) {
  3753  172E  0021               	movlb	1	; select bank1
  3754  172F  086A               	movf	_myMain^(0+128),w
  3755  1730  0086               	movwf	6
  3756  1731  3001               	movlw	1	; select bank2/3
  3757  1732  0087               	movwf	7
  3758  1733  1C01               	btfss	1,0
  3759  1734  2F12               	goto	l7074
  3760                           
  3761                           ;main_B1.c: 71: Flash_Memory_Main();
  3762  1735  3195  258F  3196   	fcall	_Flash_Memory_Main
  3763                           
  3764                           ;main_B1.c: 73: LED_Main();
  3765  1738  319F  2702  3196   	fcall	_LED_Main
  3766                           
  3767                           ;main_B1.c: 75: ;;
  3768                           ;main_B1.c: 76: ;;
  3769                           ;main_B1.c: 77: ;;
  3770                           ;main_B1.c: 78: ;;
  3771                           ;main_B1.c: 80: ;;
  3772                           ;main_B1.c: 81: DimmerLights_Main();
  3773  173B  319E  26AF  3196   	fcall	_DimmerLights_Main
  3774                           
  3775                           ;main_B1.c: 82: Switch_Main();
  3776  173E  319E  267D  3196   	fcall	_Switch_Main
  3777                           
  3778                           ;main_B1.c: 83: ;;
  3779                           ;main_B1.c: 84: ;;
  3780                           ;main_B1.c: 86: RF_Main();
  3781  1741  319E  2635  3196   	fcall	_RF_Main
  3782                           
  3783                           ;main_B1.c: 87: DelayOff_Main();
  3784  1744  319E  266D  3196   	fcall	_DelayOff_Main
  3785                           
  3786                           ;main_B1.c: 88: ;;
  3787  1747  2F12               	goto	l7074
  3788  1748                     __end_of_main:	
  3789                           
  3790                           	psect	text1
  3791  0B1E                     __ptext1:	
  3792 ;; *************** function _my_Main *****************
  3793 ;; Defined at:
  3794 ;;		line 125 in file "../src/main_B1.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    7
  3815 ;; This function calls:
  3816 ;;		_setBuz
  3817 ;;		_setRF_Enable
  3818 ;;		_setSw_Enable
  3819 ;; This function is called by:
  3820 ;;		_main
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _my_Main
  3826  0B1E                     _my_Main:	
  3827                           
  3828                           ;main_B1.c: 127: if (myMain->PowerON == 0) {
  3829                           
  3830                           ;incstack = 0
  3831                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3832  0B1E  0021               	movlb	1	; select bank1
  3833  0B1F  086A               	movf	_myMain^(0+128),w
  3834  0B20  0086               	movwf	6
  3835  0B21  3001               	movlw	1	; select bank2/3
  3836  0B22  0087               	movwf	7
  3837  0B23  1801               	btfsc	1,0
  3838  0B24  2B61               	goto	l6960
  3839                           
  3840                           ;main_B1.c: 128: myMain->PowerCount++;
  3841  0B25  0A6A               	incf	_myMain^(0+128),w
  3842  0B26  0086               	movwf	6
  3843  0B27  3001               	movlw	1	; select bank2/3
  3844  0B28  0087               	movwf	7
  3845  0B29  3001               	movlw	1
  3846  0B2A  0781               	addwf	1,f
  3847  0B2B  3141               	addfsr 1,1
  3848  0B2C  1803               	skipnc
  3849  0B2D  0A81               	incf	1,f
  3850                           
  3851                           ;main_B1.c: 129: if (myMain->PowerCount == 150)
  3852  0B2E  0A6A               	incf	_myMain^(0+128),w
  3853  0B2F  0086               	movwf	6
  3854  0B30  3001               	movlw	1	; select bank2/3
  3855  0B31  0087               	movwf	7
  3856  0B32  3F40               	moviw [0]fsr1
  3857  0B33  3A96               	xorlw	150
  3858  0B34  1D03               	skipz
  3859  0B35  2B38               	goto	u6045
  3860  0B36  3F41               	moviw [1]fsr1
  3861  0B37  3A00               	xorlw	0
  3862  0B38                     u6045:	
  3863  0B38  1D03               	skipz
  3864  0B39  0008               	return
  3865                           
  3866                           ;main_B1.c: 130: {
  3867                           ;main_B1.c: 131: myMain->PowerCount = 0;
  3868  0B3A  0A6A               	incf	_myMain^(0+128),w
  3869  0B3B  0086               	movwf	6
  3870  0B3C  3001               	movlw	1	; select bank2/3
  3871  0B3D  0087               	movwf	7
  3872  0B3E  3000               	movlw	0
  3873  0B3F  3FC0               	movwi [0]fsr1
  3874  0B40  3FC1               	movwi [1]fsr1
  3875                           
  3876                           ;main_B1.c: 132: myMain->PowerON = 1;
  3877  0B41  086A               	movf	_myMain^(0+128),w
  3878  0B42  0086               	movwf	6
  3879  0B43  3001               	movlw	1	; select bank2/3
  3880  0B44  0087               	movwf	7
  3881  0B45  1401               	bsf	1,0
  3882                           
  3883                           ;main_B1.c: 135: ;;
  3884                           ;main_B1.c: 139: ;;
  3885                           ;main_B1.c: 145: setBuz(3, 50);
  3886  0B46  3032               	movlw	50
  3887  0B47  0020               	movlb	0	; select bank0
  3888  0B48  00A0               	movwf	setBuz@time
  3889  0B49  3000               	movlw	0
  3890  0B4A  00A1               	movwf	setBuz@time+1
  3891  0B4B  3003               	movlw	3
  3892  0B4C  318A  22A9  318B   	fcall	_setBuz
  3893                           
  3894                           ;main_B1.c: 146: myMain->SelfTest = 1;
  3895  0B4F  0021               	movlb	1	; select bank1
  3896  0B50  086A               	movf	_myMain^(0+128),w
  3897  0B51  3E03               	addlw	3
  3898  0B52  0086               	movwf	6
  3899  0B53  3001               	movlw	1	; select bank2/3
  3900  0B54  0087               	movwf	7
  3901  0B55  1401               	bsf	1,0
  3902                           
  3903                           ;main_B1.c: 148: setSw_Enable(1);
  3904  0B56  3001               	movlw	1
  3905  0B57  3192  2216  318B   	fcall	_setSw_Enable
  3906                           
  3907                           ;main_B1.c: 151: setRF_Enable(1, 1);
  3908  0B5A  0020               	movlb	0	; select bank0
  3909  0B5B  01A2               	clrf	setRF_Enable@command
  3910  0B5C  0AA2               	incf	setRF_Enable@command,f
  3911  0B5D  3001               	movlw	1
  3912  0B5E  3193  2398         	fcall	_setRF_Enable
  3913                           
  3914                           ;main_B1.c: 155: }
  3915                           ;main_B1.c: 156: } else {
  3916  0B60  0008               	return
  3917  0B61                     l6960:	
  3918                           
  3919                           ;main_B1.c: 164: myMain->Count1++;
  3920  0B61  0021               	movlb	1	; select bank1
  3921  0B62  086A               	movf	_myMain^(0+128),w
  3922  0B63  3E06               	addlw	6
  3923  0B64  0086               	movwf	6
  3924  0B65  3001               	movlw	1	; select bank2/3
  3925  0B66  0087               	movwf	7
  3926  0B67  3001               	movlw	1
  3927  0B68  0781               	addwf	1,f
  3928  0B69  3141               	addfsr 1,1
  3929  0B6A  1803               	skipnc
  3930  0B6B  0A81               	incf	1,f
  3931                           
  3932                           ;main_B1.c: 165: if (myMain->Count1 == 100)
  3933  0B6C  086A               	movf	_myMain^(0+128),w
  3934  0B6D  3E06               	addlw	6
  3935  0B6E  0086               	movwf	6
  3936  0B6F  3001               	movlw	1	; select bank2/3
  3937  0B70  0087               	movwf	7
  3938  0B71  3F40               	moviw [0]fsr1
  3939  0B72  3A64               	xorlw	100
  3940  0B73  1D03               	skipz
  3941  0B74  2B77               	goto	u6055
  3942  0B75  3F41               	moviw [1]fsr1
  3943  0B76  3A00               	xorlw	0
  3944  0B77                     u6055:	
  3945  0B77  1D03               	skipz
  3946  0B78  0008               	return
  3947                           
  3948                           ;main_B1.c: 166: {
  3949                           ;main_B1.c: 167: myMain->Count1 = 0;
  3950  0B79  086A               	movf	_myMain^(0+128),w
  3951  0B7A  3E06               	addlw	6
  3952  0B7B  0086               	movwf	6
  3953  0B7C  3001               	movlw	1	; select bank2/3
  3954  0B7D  0087               	movwf	7
  3955  0B7E  3000               	movlw	0
  3956  0B7F  3FC0               	movwi [0]fsr1
  3957  0B80  3FC1               	movwi [1]fsr1
  3958                           
  3959                           ;main_B1.c: 180: if (myMain->Flag) {
  3960  0B81  086A               	movf	_myMain^(0+128),w
  3961  0B82  0086               	movwf	6
  3962  0B83  3001               	movlw	1	; select bank2/3
  3963  0B84  0087               	movwf	7
  3964  0B85  1D81               	btfss	1,3
  3965  0B86  2B8D               	goto	l6968
  3966                           
  3967                           ;main_B1.c: 181: myMain->Flag = 0;
  3968  0B87  086A               	movf	_myMain^(0+128),w
  3969  0B88  0086               	movwf	6
  3970  0B89  3001               	movlw	1	; select bank2/3
  3971  0B8A  0087               	movwf	7
  3972  0B8B  1181               	bcf	1,3
  3973                           
  3974                           ;main_B1.c: 190: } else {
  3975  0B8C  0008               	return
  3976  0B8D                     l6968:	
  3977                           
  3978                           ;main_B1.c: 191: myMain->Flag = 1;
  3979  0B8D  086A               	movf	_myMain^(0+128),w
  3980  0B8E  0086               	movwf	6
  3981  0B8F  3001               	movlw	1	; select bank2/3
  3982  0B90  0087               	movwf	7
  3983  0B91  1581               	bsf	1,3
  3984  0B92  0008               	return
  3985  0B93                     __end_of_my_Main:	
  3986                           
  3987                           	psect	text2
  3988  1216                     __ptext2:	
  3989 ;; *************** function _setSw_Enable *****************
  3990 ;; Defined at:
  3991 ;;		line 85 in file "../src/Switch_B1.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  command         1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  command         1    2[BANK0 ] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;		None               void
  3998 ;; Registers used:
  3999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;Total ram usage:        1 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    6
  4012 ;; This function calls:
  4013 ;;		_SwPointSelect
  4014 ;; This function is called by:
  4015 ;;		_my_Main
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _setSw_Enable
  4021  1216                     _setSw_Enable:	
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4025                           ;setSw_Enable@command stored from wreg
  4026  1216  0020               	movlb	0	; select bank0
  4027  1217  00A2               	movwf	setSw_Enable@command
  4028                           
  4029                           ;Switch_B1.c: 88: SwPointSelect(1);
  4030  1218  3001               	movlw	1
  4031  1219  3190  2095  3192   	fcall	_SwPointSelect
  4032                           
  4033                           ;Switch_B1.c: 89: Sw->Enable = command;
  4034  121C  087B               	movf	_Sw,w
  4035  121D  0086               	movwf	6
  4036  121E  3001               	movlw	1	; select bank2/3
  4037  121F  0087               	movwf	7
  4038  1220  0020               	movlb	0	; select bank0
  4039  1221  0822               	movf	setSw_Enable@command,w
  4040  1222  1001               	bcf	1,0
  4041  1223  1D03               	skipz
  4042  1224  1401               	bsf	1,0
  4043                           
  4044                           ;Switch_B1.c: 93: SwPointSelect(2);
  4045  1225  3002               	movlw	2
  4046  1226  3190  2095         	fcall	_SwPointSelect
  4047                           
  4048                           ;Switch_B1.c: 94: Sw->Enable = command;
  4049  1228  087B               	movf	_Sw,w
  4050  1229  0086               	movwf	6
  4051  122A  3001               	movlw	1	; select bank2/3
  4052  122B  0087               	movwf	7
  4053  122C  0020               	movlb	0	; select bank0
  4054  122D  0822               	movf	setSw_Enable@command,w
  4055  122E  1001               	bcf	1,0
  4056  122F  1D03               	skipz
  4057  1230  1401               	bsf	1,0
  4058  1231  0008               	return
  4059  1232                     __end_of_setSw_Enable:	
  4060                           
  4061                           	psect	text3
  4062  1398                     __ptext3:	
  4063 ;; *************** function _setRF_Enable *****************
  4064 ;; Defined at:
  4065 ;;		line 174 in file "../src/RF_Control_B1.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  rf              1    wreg     unsigned char 
  4068 ;;  command         1    2[BANK0 ] unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  rf              1    3[BANK0 ] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;		None               void
  4073 ;; Registers used:
  4074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4080 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;Total ram usage:        2 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    6
  4087 ;; This function calls:
  4088 ;;		_RfPointSelect
  4089 ;;		_setINT_GO
  4090 ;; This function is called by:
  4091 ;;		_my_Main
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           
  4096                           ;psect for function _setRF_Enable
  4097  1398                     _setRF_Enable:	
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4101                           ;setRF_Enable@rf stored from wreg
  4102  1398  0020               	movlb	0	; select bank0
  4103  1399  00A3               	movwf	setRF_Enable@rf
  4104                           
  4105                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
  4106  139A  0823               	movf	setRF_Enable@rf,w
  4107  139B  319E  26DE  3193   	fcall	_RfPointSelect
  4108                           
  4109                           ;RF_Control_B1.c: 176: RF->Enable = command;
  4110  139E  0021               	movlb	1	; select bank1
  4111  139F  083E               	movf	_RF^(0+128),w
  4112  13A0  0086               	movwf	6
  4113  13A1  0187               	clrf	7
  4114  13A2  0020               	movlb	0	; select bank0
  4115  13A3  0822               	movf	setRF_Enable@command,w
  4116  13A4  1001               	bcf	1,0
  4117  13A5  1D03               	skipz
  4118  13A6  1401               	bsf	1,0
  4119                           
  4120                           ;RF_Control_B1.c: 177: RF->Learn = 0;
  4121  13A7  0021               	movlb	1	; select bank1
  4122  13A8  083E               	movf	_RF^(0+128),w
  4123  13A9  0086               	movwf	6
  4124  13AA  0187               	clrf	7
  4125  13AB  1301               	bcf	1,6
  4126                           
  4127                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
  4128  13AC  083E               	movf	_RF^(0+128),w
  4129  13AD  0086               	movwf	6
  4130  13AE  0187               	clrf	7
  4131  13AF  1101               	bcf	1,2
  4132                           
  4133                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
  4134  13B0  083E               	movf	_RF^(0+128),w
  4135  13B1  0086               	movwf	6
  4136  13B2  0187               	clrf	7
  4137  13B3  1181               	bcf	1,3
  4138                           
  4139                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
  4140  13B4  083E               	movf	_RF^(0+128),w
  4141  13B5  0086               	movwf	6
  4142  13B6  0187               	clrf	7
  4143  13B7  1081               	bcf	1,1
  4144                           
  4145                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
  4146  13B8  0A3E               	incf	_RF^(0+128),w
  4147  13B9  0086               	movwf	6
  4148  13BA  0187               	clrf	7
  4149  13BB  0181               	clrf	1
  4150                           
  4151                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
  4152  13BC  083E               	movf	_RF^(0+128),w
  4153  13BD  0086               	movwf	6
  4154  13BE  0187               	clrf	7
  4155  13BF  1281               	bcf	1,5
  4156                           
  4157                           ;RF_Control_B1.c: 183: setINT_GO(0);
  4158  13C0  3000               	movlw	0
  4159  13C1  3190  2067         	fcall	_setINT_GO
  4160  13C3  0008               	return
  4161  13C4                     __end_of_setRF_Enable:	
  4162                           
  4163                           	psect	text4
  4164  10A9                     __ptext4:	
  4165 ;; *************** function _myMain_Initialization *****************
  4166 ;; Defined at:
  4167 ;;		line 113 in file "../src/main_B1.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;		None               void
  4174 ;; Registers used:
  4175 ;;		wreg, fsr1l, fsr1h
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    5
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _myMain_Initialization
  4197  10A9                     _myMain_Initialization:	
  4198                           
  4199                           ;main_B1.c: 115: product = &_product;
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4203  10A9  30A0               	movlw	__product& (0+255)
  4204  10AA  0020               	movlb	0	; select bank0
  4205  10AB  00A0               	movwf	??_myMain_Initialization
  4206  10AC  0820               	movf	??_myMain_Initialization,w
  4207  10AD  00FD               	movwf	_product
  4208                           
  4209                           ;main_B1.c: 116: product->Data[20] = 210;
  4210  10AE  30D2               	movlw	210
  4211  10AF  00A0               	movwf	??_myMain_Initialization
  4212  10B0  087D               	movf	_product,w
  4213  10B1  3E14               	addlw	20
  4214  10B2  0086               	movwf	6
  4215  10B3  3001               	movlw	1	; select bank2/3
  4216  10B4  0087               	movwf	7
  4217  10B5  0820               	movf	??_myMain_Initialization,w
  4218  10B6  0081               	movwf	1
  4219                           
  4220                           ;main_B1.c: 119: myMain = &_myMain;
  4221  10B7  30C0               	movlw	__myMain& (0+255)
  4222  10B8  00A0               	movwf	??_myMain_Initialization
  4223  10B9  0820               	movf	??_myMain_Initialization,w
  4224  10BA  0021               	movlb	1	; select bank1
  4225  10BB  00EA               	movwf	_myMain^(0+128)
  4226  10BC  0008               	return
  4227  10BD                     __end_of_myMain_Initialization:	
  4228                           
  4229                           	psect	text5
  4230  11FA                     __ptext5:	
  4231 ;; *************** function _WDT_Main *****************
  4232 ;; Defined at:
  4233 ;;		line 937 in file "../src/MCU_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    6
  4254 ;; This function calls:
  4255 ;;		_WDT_Clearing
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _WDT_Main
  4263  11FA                     _WDT_Main:	
  4264                           
  4265                           ;MCU_B1.c: 938: if (WDT->Enable) {
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4269  11FA  0021               	movlb	1	; select bank1
  4270  11FB  0869               	movf	_WDT^(0+128),w
  4271  11FC  0086               	movwf	6
  4272  11FD  0187               	clrf	7
  4273  11FE  1C01               	btfss	1,0
  4274  11FF  0008               	return
  4275                           
  4276                           ;MCU_B1.c: 939: if (WDT->Count-- > 0) {
  4277  1200  0A69               	incf	_WDT^(0+128),w
  4278  1201  0086               	movwf	6
  4279  1202  0187               	clrf	7
  4280  1203  3001               	movlw	1
  4281  1204  0281               	subwf	1,f
  4282  1205  0801               	movf	1,w
  4283  1206  3AFF               	xorlw	255
  4284  1207  1903               	skipnz
  4285  1208  0008               	return
  4286                           
  4287                           ;MCU_B1.c: 940: WDT->Count = 10;
  4288  1209  300A               	movlw	10
  4289  120A  0020               	movlb	0	; select bank0
  4290  120B  00A0               	movwf	??_WDT_Main
  4291  120C  0021               	movlb	1	; select bank1
  4292  120D  0A69               	incf	_WDT^(0+128),w
  4293  120E  0086               	movwf	6
  4294  120F  0187               	clrf	7
  4295  1210  0020               	movlb	0	; select bank0
  4296  1211  0820               	movf	??_WDT_Main,w
  4297  1212  0081               	movwf	1
  4298                           
  4299                           ;MCU_B1.c: 941: WDT_Clearing();
  4300  1213  3180  2002         	fcall	_WDT_Clearing
  4301  1215  0008               	return
  4302  1216                     __end_of_WDT_Main:	
  4303                           
  4304                           	psect	text6
  4305  0002                     __ptext6:	
  4306 ;; *************** function _WDT_Clearing *****************
  4307 ;; Defined at:
  4308 ;;		line 947 in file "../src/MCU_B1.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;		None               void
  4315 ;; Registers used:
  4316 ;;		None
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    5
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_WDT_Main
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _WDT_Clearing
  4338  0002                     _WDT_Clearing:	
  4339                           
  4340                           ;incstack = 0
  4341                           ; Regs used in _WDT_Clearing: []
  4342  0002  0064               	clrwdt	;# 
  4343  0003  0008               	return
  4344  0004                     __end_of_WDT_Clearing:	
  4345                           
  4346                           	psect	text7
  4347  1E7D                     __ptext7:	
  4348 ;; *************** function _Switch_Main *****************
  4349 ;; Defined at:
  4350 ;;		line 61 in file "../src/Switch_B1.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;		None               void
  4357 ;; Registers used:
  4358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:   11
  4371 ;; This function calls:
  4372 ;;		_setSw_Main
  4373 ;; This function is called by:
  4374 ;;		_main
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _Switch_Main
  4380  1E7D                     _Switch_Main:	
  4381                           
  4382                           ;Switch_B1.c: 63: setSw_Main(1);
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4386  1E7D  3001               	movlw	1
  4387  1E7E  3180  204B  319E   	fcall	_setSw_Main
  4388                           
  4389                           ;Switch_B1.c: 67: setSw_Main(2);
  4390  1E81  3002               	movlw	2
  4391  1E82  3180  204B         	fcall	_setSw_Main
  4392  1E84  0008               	return
  4393  1E85                     __end_of_Switch_Main:	
  4394                           
  4395                           	psect	text8
  4396  004B                     __ptext8:	
  4397 ;; *************** function _setSw_Main *****************
  4398 ;; Defined at:
  4399 ;;		line 111 in file "../src/Switch_B1.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  sw              1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  sw              1   73[BANK0 ] unsigned char 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;Total ram usage:        5 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:   10
  4420 ;; This function calls:
  4421 ;;		_SwPointSelect
  4422 ;;		_Sw_DimmerAdjFunc
  4423 ;;		_Sw_DimmerOffFunc
  4424 ;;		_Sw_DimmerOnFunc
  4425 ;;		_setBuz
  4426 ;;		_setRF_Learn
  4427 ;; This function is called by:
  4428 ;;		_Switch_Main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _setSw_Main
  4434  004B                     _setSw_Main:	
  4435                           
  4436                           ;incstack = 0
  4437                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4438                           ;setSw_Main@sw stored from wreg
  4439  004B  0020               	movlb	0	; select bank0
  4440  004C  00E9               	movwf	setSw_Main@sw
  4441                           
  4442                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4443  004D  087B               	movf	_Sw,w
  4444  004E  0086               	movwf	6
  4445  004F  3001               	movlw	1	; select bank2/3
  4446  0050  0087               	movwf	7
  4447  0051  1C01               	btfss	1,0
  4448  0052  0008               	return
  4449                           
  4450                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4451  0053  0869               	movf	setSw_Main@sw,w
  4452  0054  3190  2095  3180   	fcall	_SwPointSelect
  4453                           
  4454                           ;Switch_B1.c: 125: if (sw == 1) {
  4455  0057  0020               	movlb	0	; select bank0
  4456  0058  0869               	movf	setSw_Main@sw,w
  4457  0059  3A01               	xorlw	1
  4458  005A  1D03               	skipz
  4459  005B  2868               	goto	l6622
  4460                           
  4461                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4462  005C  01E7               	clrf	_setSw_Main$3916
  4463  005D  0AE7               	incf	_setSw_Main$3916,f
  4464  005E  1F0C               	btfss	12,6	;volatile
  4465  005F  1A0C               	btfsc	12,4	;volatile
  4466  0060  2862               	goto	l6620
  4467  0061  01E7               	clrf	_setSw_Main$3916
  4468  0062                     l6620:	
  4469  0062  087B               	movf	_Sw,w
  4470  0063  0086               	movwf	6
  4471  0064  3001               	movlw	1	; select bank2/3
  4472  0065  0087               	movwf	7
  4473  0066  0867               	movf	_setSw_Main$3916,w
  4474  0067  2877               	goto	L1
  4475  0068                     l6622:	
  4476                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4477                           
  4478  0068  0869               	movf	setSw_Main@sw,w
  4479  0069  3A02               	xorlw	2
  4480  006A  1D03               	skipz
  4481  006B  287A               	goto	l6632
  4482                           
  4483                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4484  006C  01E8               	clrf	_setSw_Main$3917
  4485  006D  0AE8               	incf	_setSw_Main$3917,f
  4486  006E  1C0C               	btfss	12,0	;volatile
  4487  006F  188D               	btfsc	13,1	;volatile
  4488  0070  2872               	goto	l6630
  4489  0071  01E8               	clrf	_setSw_Main$3917
  4490  0072                     l6630:	
  4491  0072  087B               	movf	_Sw,w
  4492  0073  0086               	movwf	6
  4493  0074  3001               	movlw	1	; select bank2/3
  4494  0075  0087               	movwf	7
  4495  0076  0868               	movf	_setSw_Main$3917,w
  4496  0077                     L1:	
  4497  0077  1081               	bcf	1,1
  4498  0078  1D03               	skipz
  4499  0079  1481               	bsf	1,1
  4500  007A                     l6632:	
  4501                           
  4502                           ;Switch_B1.c: 129: }
  4503                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4504  007A  087B               	movf	_Sw,w
  4505  007B  0086               	movwf	6
  4506  007C  3001               	movlw	1	; select bank2/3
  4507  007D  0087               	movwf	7
  4508  007E  1C81               	btfss	1,1
  4509  007F  2951               	goto	l6680
  4510                           
  4511                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4512  0080  087B               	movf	_Sw,w
  4513  0081  0086               	movwf	6
  4514  0082  3001               	movlw	1	; select bank2/3
  4515  0083  0087               	movwf	7
  4516  0084  1901               	btfsc	1,2
  4517  0085  28A7               	goto	l6646
  4518                           
  4519                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4520  0086  3001               	movlw	1
  4521  0087  00E5               	movwf	??_setSw_Main
  4522  0088  087B               	movf	_Sw,w
  4523  0089  3E02               	addlw	2
  4524  008A  0086               	movwf	6
  4525  008B  3001               	movlw	1	; select bank2/3
  4526  008C  0087               	movwf	7
  4527  008D  0865               	movf	??_setSw_Main,w
  4528  008E  0781               	addwf	1,f
  4529                           
  4530                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4531  008F  087B               	movf	_Sw,w
  4532  0090  3E02               	addlw	2
  4533  0091  0086               	movwf	6
  4534  0092  3001               	movlw	1	; select bank2/3
  4535  0093  0087               	movwf	7
  4536  0094  3005               	movlw	5
  4537  0095  0201               	subwf	1,w
  4538  0096  1C03               	skipc
  4539  0097  0008               	return
  4540                           
  4541                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4542  0098  087B               	movf	_Sw,w
  4543  0099  3E02               	addlw	2
  4544  009A  0086               	movwf	6
  4545  009B  3001               	movlw	1	; select bank2/3
  4546  009C  0087               	movwf	7
  4547  009D  0181               	clrf	1
  4548                           
  4549                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4550  009E  087B               	movf	_Sw,w
  4551  009F  0086               	movwf	6
  4552  00A0  3001               	movlw	1	; select bank2/3
  4553  00A1  0087               	movwf	7
  4554  00A2  1501               	bsf	1,2
  4555                           
  4556                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4557  00A3  0869               	movf	setSw_Main@sw,w
  4558  00A4  318A  2237         	fcall	_Sw_DimmerOnFunc
  4559                           
  4560                           ;Switch_B1.c: 148: }
  4561                           ;Switch_B1.c: 149: } else {
  4562  00A6  0008               	return
  4563  00A7                     l6646:	
  4564                           
  4565                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4566  00A7  087B               	movf	_Sw,w
  4567  00A8  0086               	movwf	6
  4568  00A9  3001               	movlw	1	; select bank2/3
  4569  00AA  0087               	movwf	7
  4570  00AB  1981               	btfsc	1,3
  4571  00AC  28D9               	goto	l6656
  4572                           
  4573                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  4574  00AD  087B               	movf	_Sw,w
  4575  00AE  3E03               	addlw	3
  4576  00AF  0086               	movwf	6
  4577  00B0  3001               	movlw	1	; select bank2/3
  4578  00B1  0087               	movwf	7
  4579  00B2  3001               	movlw	1
  4580  00B3  0781               	addwf	1,f
  4581  00B4  3141               	addfsr 1,1
  4582  00B5  1803               	skipnc
  4583  00B6  0A81               	incf	1,f
  4584                           
  4585                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  4586  00B7  087B               	movf	_Sw,w
  4587  00B8  3E03               	addlw	3
  4588  00B9  0086               	movwf	6
  4589  00BA  3001               	movlw	1	; select bank2/3
  4590  00BB  0087               	movwf	7
  4591  00BC  3F40               	moviw [0]fsr1
  4592  00BD  0020               	movlb	0	; select bank0
  4593  00BE  00E5               	movwf	??_setSw_Main
  4594  00BF  3F41               	moviw [1]fsr1
  4595  00C0  00E6               	movwf	??_setSw_Main+1
  4596  00C1  3000               	movlw	0
  4597  00C2  0266               	subwf	??_setSw_Main+1,w
  4598  00C3  3096               	movlw	150
  4599  00C4  1903               	skipnz
  4600  00C5  0265               	subwf	??_setSw_Main,w
  4601  00C6  1C03               	skipc
  4602  00C7  0008               	return
  4603                           
  4604                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  4605  00C8  087B               	movf	_Sw,w
  4606  00C9  3E03               	addlw	3
  4607  00CA  0086               	movwf	6
  4608  00CB  3001               	movlw	1	; select bank2/3
  4609  00CC  0087               	movwf	7
  4610  00CD  3000               	movlw	0
  4611  00CE  3FC0               	movwi [0]fsr1
  4612  00CF  3FC1               	movwi [1]fsr1
  4613                           
  4614                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  4615  00D0  087B               	movf	_Sw,w
  4616  00D1  0086               	movwf	6
  4617  00D2  3001               	movlw	1	; select bank2/3
  4618  00D3  0087               	movwf	7
  4619  00D4  1581               	bsf	1,3
  4620                           
  4621                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4622  00D5  0869               	movf	setSw_Main@sw,w
  4623  00D6  3195  25D4         	fcall	_Sw_DimmerAdjFunc
  4624                           
  4625                           ;Switch_B1.c: 160: }
  4626                           ;Switch_B1.c: 161: } else {
  4627  00D8  0008               	return
  4628  00D9                     l6656:	
  4629                           
  4630                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  4631  00D9  087B               	movf	_Sw,w
  4632  00DA  0086               	movwf	6
  4633  00DB  3001               	movlw	1	; select bank2/3
  4634  00DC  0087               	movwf	7
  4635  00DD  1A01               	btfsc	1,4
  4636  00DE  291E               	goto	l6670
  4637                           
  4638                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4639  00DF  087B               	movf	_Sw,w
  4640  00E0  3E05               	addlw	5
  4641  00E1  0086               	movwf	6
  4642  00E2  3001               	movlw	1	; select bank2/3
  4643  00E3  0087               	movwf	7
  4644  00E4  3001               	movlw	1
  4645  00E5  0781               	addwf	1,f
  4646  00E6  3141               	addfsr 1,1
  4647  00E7  1803               	skipnc
  4648  00E8  0A81               	incf	1,f
  4649                           
  4650                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4651  00E9  087B               	movf	_Sw,w
  4652  00EA  3E05               	addlw	5
  4653  00EB  0086               	movwf	6
  4654  00EC  3001               	movlw	1	; select bank2/3
  4655  00ED  0087               	movwf	7
  4656  00EE  3F40               	moviw [0]fsr1
  4657  00EF  0020               	movlb	0	; select bank0
  4658  00F0  00E5               	movwf	??_setSw_Main
  4659  00F1  3F41               	moviw [1]fsr1
  4660  00F2  00E6               	movwf	??_setSw_Main+1
  4661  00F3  3000               	movlw	0
  4662  00F4  0266               	subwf	??_setSw_Main+1,w
  4663  00F5  3096               	movlw	150
  4664  00F6  1903               	skipnz
  4665  00F7  0265               	subwf	??_setSw_Main,w
  4666  00F8  1C03               	skipc
  4667  00F9  0008               	return
  4668                           
  4669                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4670  00FA  087B               	movf	_Sw,w
  4671  00FB  3E05               	addlw	5
  4672  00FC  0086               	movwf	6
  4673  00FD  3001               	movlw	1	; select bank2/3
  4674  00FE  0087               	movwf	7
  4675  00FF  3000               	movlw	0
  4676  0100  3FC0               	movwi [0]fsr1
  4677  0101  3FC1               	movwi [1]fsr1
  4678                           
  4679                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4680  0102  087B               	movf	_Sw,w
  4681  0103  0086               	movwf	6
  4682  0104  3001               	movlw	1	; select bank2/3
  4683  0105  0087               	movwf	7
  4684  0106  1601               	bsf	1,4
  4685                           
  4686                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  4687  0107  01A2               	clrf	setRF_Learn@command
  4688  0108  0AA2               	incf	setRF_Learn@command,f
  4689  0109  3001               	movlw	1
  4690  010A  319F  276E  3180   	fcall	_setRF_Learn
  4691                           
  4692                           ;Switch_B1.c: 172: if (myMain->First) {
  4693  010D  0021               	movlb	1	; select bank1
  4694  010E  086A               	movf	_myMain^(0+128),w
  4695  010F  3E03               	addlw	3
  4696  0110  0086               	movwf	6
  4697  0111  3001               	movlw	1	; select bank2/3
  4698  0112  0087               	movwf	7
  4699  0113  1C81               	btfss	1,1
  4700  0114  0008               	return
  4701                           
  4702                           ;Switch_B1.c: 173: setBuz(2, 100);
  4703  0115  3064               	movlw	100
  4704  0116  0020               	movlb	0	; select bank0
  4705  0117  00A0               	movwf	setBuz@time
  4706  0118  3000               	movlw	0
  4707  0119  00A1               	movwf	setBuz@time+1
  4708  011A  3002               	movlw	2
  4709  011B  318A  22A9         	fcall	_setBuz
  4710                           
  4711                           ;Switch_B1.c: 174: }
  4712                           ;Switch_B1.c: 176: }
  4713                           ;Switch_B1.c: 177: } else {
  4714  011D  0008               	return
  4715  011E                     l6670:	
  4716                           
  4717                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  4718  011E  087B               	movf	_Sw,w
  4719  011F  0086               	movwf	6
  4720  0120  3001               	movlw	1	; select bank2/3
  4721  0121  0087               	movwf	7
  4722  0122  1A81               	btfsc	1,5
  4723  0123  0008               	return
  4724                           
  4725                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  4726  0124  087B               	movf	_Sw,w
  4727  0125  3E07               	addlw	7
  4728  0126  0086               	movwf	6
  4729  0127  3001               	movlw	1	; select bank2/3
  4730  0128  0087               	movwf	7
  4731  0129  3001               	movlw	1
  4732  012A  0781               	addwf	1,f
  4733  012B  3141               	addfsr 1,1
  4734  012C  1803               	skipnc
  4735  012D  0A81               	incf	1,f
  4736                           
  4737                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  4738  012E  087B               	movf	_Sw,w
  4739  012F  3E07               	addlw	7
  4740  0130  0086               	movwf	6
  4741  0131  3001               	movlw	1	; select bank2/3
  4742  0132  0087               	movwf	7
  4743  0133  3F40               	moviw [0]fsr1
  4744  0134  0020               	movlb	0	; select bank0
  4745  0135  00E5               	movwf	??_setSw_Main
  4746  0136  3F41               	moviw [1]fsr1
  4747  0137  00E6               	movwf	??_setSw_Main+1
  4748  0138  3001               	movlw	1
  4749  0139  0266               	subwf	??_setSw_Main+1,w
  4750  013A  302C               	movlw	44
  4751  013B  1903               	skipnz
  4752  013C  0265               	subwf	??_setSw_Main,w
  4753  013D  1C03               	skipc
  4754  013E  0008               	return
  4755                           
  4756                           ;Switch_B1.c: 181: {
  4757                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  4758  013F  087B               	movf	_Sw,w
  4759  0140  3E07               	addlw	7
  4760  0141  0086               	movwf	6
  4761  0142  3001               	movlw	1	; select bank2/3
  4762  0143  0087               	movwf	7
  4763  0144  3000               	movlw	0
  4764  0145  3FC0               	movwi [0]fsr1
  4765  0146  3FC1               	movwi [1]fsr1
  4766                           
  4767                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  4768  0147  087B               	movf	_Sw,w
  4769  0148  0086               	movwf	6
  4770  0149  3001               	movlw	1	; select bank2/3
  4771  014A  0087               	movwf	7
  4772  014B  1681               	bsf	1,5
  4773                           
  4774                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  4775  014C  01A2               	clrf	setRF_Learn@command
  4776  014D  3001               	movlw	1
  4777  014E  319F  276E         	fcall	_setRF_Learn
  4778                           
  4779                           ;Switch_B1.c: 189: }
  4780                           ;Switch_B1.c: 190: }
  4781                           ;Switch_B1.c: 191: }
  4782                           ;Switch_B1.c: 192: }
  4783                           ;Switch_B1.c: 193: }
  4784                           ;Switch_B1.c: 194: } else {
  4785  0150  0008               	return
  4786  0151                     l6680:	
  4787                           
  4788                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  4789  0151  087B               	movf	_Sw,w
  4790  0152  0086               	movwf	6
  4791  0153  3001               	movlw	1	; select bank2/3
  4792  0154  0087               	movwf	7
  4793  0155  1D01               	btfss	1,2
  4794  0156  0008               	return
  4795                           
  4796                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  4797  0157  3001               	movlw	1
  4798  0158  0020               	movlb	0	; select bank0
  4799  0159  00E5               	movwf	??_setSw_Main
  4800  015A  087B               	movf	_Sw,w
  4801  015B  3E02               	addlw	2
  4802  015C  0086               	movwf	6
  4803  015D  3001               	movlw	1	; select bank2/3
  4804  015E  0087               	movwf	7
  4805  015F  0865               	movf	??_setSw_Main,w
  4806  0160  0781               	addwf	1,f
  4807                           
  4808                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  4809  0161  087B               	movf	_Sw,w
  4810  0162  3E02               	addlw	2
  4811  0163  0086               	movwf	6
  4812  0164  3001               	movlw	1	; select bank2/3
  4813  0165  0087               	movwf	7
  4814  0166  3005               	movlw	5
  4815  0167  0201               	subwf	1,w
  4816  0168  1C03               	skipc
  4817  0169  0008               	return
  4818                           
  4819                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  4820  016A  087B               	movf	_Sw,w
  4821  016B  3E02               	addlw	2
  4822  016C  0086               	movwf	6
  4823  016D  3001               	movlw	1	; select bank2/3
  4824  016E  0087               	movwf	7
  4825  016F  0181               	clrf	1
  4826                           
  4827                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  4828  0170  087B               	movf	_Sw,w
  4829  0171  0086               	movwf	6
  4830  0172  3001               	movlw	1	; select bank2/3
  4831  0173  0087               	movwf	7
  4832  0174  1101               	bcf	1,2
  4833                           
  4834                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  4835  0175  087B               	movf	_Sw,w
  4836  0176  3E03               	addlw	3
  4837  0177  0086               	movwf	6
  4838  0178  3001               	movlw	1	; select bank2/3
  4839  0179  0087               	movwf	7
  4840  017A  3000               	movlw	0
  4841  017B  3FC0               	movwi [0]fsr1
  4842  017C  3FC1               	movwi [1]fsr1
  4843                           
  4844                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  4845  017D  087B               	movf	_Sw,w
  4846  017E  0086               	movwf	6
  4847  017F  3001               	movlw	1	; select bank2/3
  4848  0180  0087               	movwf	7
  4849  0181  1181               	bcf	1,3
  4850                           
  4851                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  4852  0182  087B               	movf	_Sw,w
  4853  0183  3E05               	addlw	5
  4854  0184  0086               	movwf	6
  4855  0185  3001               	movlw	1	; select bank2/3
  4856  0186  0087               	movwf	7
  4857  0187  3000               	movlw	0
  4858  0188  3FC0               	movwi [0]fsr1
  4859  0189  3FC1               	movwi [1]fsr1
  4860                           
  4861                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  4862  018A  087B               	movf	_Sw,w
  4863  018B  0086               	movwf	6
  4864  018C  3001               	movlw	1	; select bank2/3
  4865  018D  0087               	movwf	7
  4866  018E  1201               	bcf	1,4
  4867                           
  4868                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4869  018F  087B               	movf	_Sw,w
  4870  0190  3E07               	addlw	7
  4871  0191  0086               	movwf	6
  4872  0192  3001               	movlw	1	; select bank2/3
  4873  0193  0087               	movwf	7
  4874  0194  3000               	movlw	0
  4875  0195  3FC0               	movwi [0]fsr1
  4876  0196  3FC1               	movwi [1]fsr1
  4877                           
  4878                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  4879  0197  087B               	movf	_Sw,w
  4880  0198  0086               	movwf	6
  4881  0199  3001               	movlw	1	; select bank2/3
  4882  019A  0087               	movwf	7
  4883  019B  1281               	bcf	1,5
  4884                           
  4885                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  4886  019C  0869               	movf	setSw_Main@sw,w
  4887  019D  3189  21C6  3180   	fcall	_Sw_DimmerOffFunc
  4888                           
  4889                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  4890  01A0  0020               	movlb	0	; select bank0
  4891  01A1  01A2               	clrf	setRF_Learn@command
  4892  01A2  3001               	movlw	1
  4893  01A3  319F  276E         	fcall	_setRF_Learn
  4894  01A5  0008               	return
  4895  01A6                     __end_of_setSw_Main:	
  4896                           
  4897                           	psect	text9
  4898  1F6E                     __ptext9:	
  4899 ;; *************** function _setRF_Learn *****************
  4900 ;; Defined at:
  4901 ;;		line 30 in file "../src/RF_Control_B1.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  rf              1    wreg     unsigned char 
  4904 ;;  command         1    2[BANK0 ] unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  rf              1    3[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:        2 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    6
  4923 ;; This function calls:
  4924 ;;		_RfPointSelect
  4925 ;; This function is called by:
  4926 ;;		_setSw_Main
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _setRF_Learn
  4932  1F6E                     _setRF_Learn:	
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4936                           ;setRF_Learn@rf stored from wreg
  4937  1F6E  0020               	movlb	0	; select bank0
  4938  1F6F  00A3               	movwf	setRF_Learn@rf
  4939                           
  4940                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  4941  1F70  0823               	movf	setRF_Learn@rf,w
  4942  1F71  319E  26DE         	fcall	_RfPointSelect
  4943                           
  4944                           ;RF_Control_B1.c: 32: RF->Learn = command;
  4945  1F73  0021               	movlb	1	; select bank1
  4946  1F74  083E               	movf	_RF^(0+128),w
  4947  1F75  0086               	movwf	6
  4948  1F76  0187               	clrf	7
  4949  1F77  0020               	movlb	0	; select bank0
  4950  1F78  0822               	movf	setRF_Learn@command,w
  4951  1F79  1301               	bcf	1,6
  4952  1F7A  1D03               	skipz
  4953  1F7B  1701               	bsf	1,6
  4954  1F7C  0008               	return
  4955  1F7D                     __end_of_setRF_Learn:	
  4956                           
  4957                           	psect	text10
  4958  0A37                     __ptext10:	
  4959 ;; *************** function _Sw_DimmerOnFunc *****************
  4960 ;; Defined at:
  4961 ;;		line 222 in file "../src/Switch_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  sw              1    wreg     unsigned char 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  sw              1   67[BANK0 ] unsigned char 
  4966 ;;  Idle            1   66[BANK0 ] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;		None               void
  4969 ;; Registers used:
  4970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;Total ram usage:        2 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    9
  4983 ;; This function calls:
  4984 ;;		_setBuz
  4985 ;;		_setDimmerLights_Switch
  4986 ;;		_setDimmerLights_Trigger
  4987 ;;		_setRFSW_Status
  4988 ;;		_setRF_DimmerLights
  4989 ;;		_setTxData
  4990 ;; This function is called by:
  4991 ;;		_setSw_Main
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function _Sw_DimmerOnFunc
  4997  0A37                     _Sw_DimmerOnFunc:	
  4998                           
  4999                           ;incstack = 0
  5000                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5001                           ;Sw_DimmerOnFunc@sw stored from wreg
  5002  0A37  0020               	movlb	0	; select bank0
  5003  0A38  00E3               	movwf	Sw_DimmerOnFunc@sw
  5004                           
  5005                           ;Switch_B1.c: 223: char Idle = 1;
  5006  0A39  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5007  0A3A  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5008                           
  5009                           ;Switch_B1.c: 235: if (sw == 1) {
  5010  0A3B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5011  0A3C  3A01               	xorlw	1
  5012  0A3D  1D03               	skipz
  5013  0A3E  2A42               	goto	l6094
  5014                           
  5015                           ;Switch_B1.c: 236: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5016  0A3F  0021               	movlb	1	; select bank1
  5017  0A40  083C               	movf	_DimmerLights22^(0+128),w
  5018  0A41  2A48               	goto	L2
  5019  0A42                     l6094:	
  5020                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5021                           
  5022  0A42  0863               	movf	Sw_DimmerOnFunc@sw,w
  5023  0A43  3A02               	xorlw	2
  5024  0A44  1D03               	skipz
  5025  0A45  2A54               	goto	l6098
  5026                           
  5027                           ;Switch_B1.c: 238: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5028  0A46  0021               	movlb	1	; select bank1
  5029  0A47  083B               	movf	_DimmerLights11^(0+128),w
  5030  0A48                     L2:	
  5031  0A48  3E09               	addlw	9
  5032  0A49  0086               	movwf	6
  5033  0A4A  3001               	movlw	1	; select bank2/3
  5034  0A4B  0087               	movwf	7
  5035  0A4C  1003               	clrc
  5036  0A4D  1D01               	btfss	1,2
  5037  0A4E  1403               	setc
  5038  0A4F  3000               	movlw	0
  5039  0A50  1803               	btfsc	3,0
  5040  0A51  3001               	movlw	1
  5041  0A52  0020               	movlb	0	; select bank0
  5042  0A53  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5043  0A54                     l6098:	
  5044                           
  5045                           ;Switch_B1.c: 239: }
  5046                           ;Switch_B1.c: 242: if (Idle) {
  5047  0A54  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5048  0A55  1903               	btfsc	3,2
  5049  0A56  0008               	return
  5050                           
  5051                           ;Switch_B1.c: 243: Sw->Flag = 1;
  5052  0A57  087B               	movf	_Sw,w
  5053  0A58  0086               	movwf	6
  5054  0A59  3001               	movlw	1	; select bank2/3
  5055  0A5A  0087               	movwf	7
  5056  0A5B  1781               	bsf	1,7
  5057                           
  5058                           ;Switch_B1.c: 244: setBuz(1, 100);
  5059  0A5C  3064               	movlw	100
  5060  0A5D  00A0               	movwf	setBuz@time
  5061  0A5E  3000               	movlw	0
  5062  0A5F  00A1               	movwf	setBuz@time+1
  5063  0A60  3001               	movlw	1
  5064  0A61  318A  22A9  318A   	fcall	_setBuz
  5065                           
  5066                           ;Switch_B1.c: 245: if (!Sw->Status) {
  5067  0A64  087B               	movf	_Sw,w
  5068  0A65  0086               	movwf	6
  5069  0A66  3001               	movlw	1	; select bank2/3
  5070  0A67  0087               	movwf	7
  5071  0A68  1B01               	btfsc	1,6
  5072  0A69  2A96               	goto	l6118
  5073                           
  5074                           ;Switch_B1.c: 246: Sw->Status = 1;
  5075  0A6A  087B               	movf	_Sw,w
  5076  0A6B  0086               	movwf	6
  5077  0A6C  3001               	movlw	1	; select bank2/3
  5078  0A6D  0087               	movwf	7
  5079  0A6E  1701               	bsf	1,6
  5080                           
  5081                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  5082  0A6F  0020               	movlb	0	; select bank0
  5083  0A70  01A2               	clrf	setRFSW_Status@command
  5084  0A71  0AA2               	incf	setRFSW_Status@command,f
  5085  0A72  0863               	movf	Sw_DimmerOnFunc@sw,w
  5086  0A73  319F  2741  318A   	fcall	_setRFSW_Status
  5087                           
  5088                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  5089  0A76  0020               	movlb	0	; select bank0
  5090  0A77  01A2               	clrf	setDimmerLights_Trigger@command
  5091  0A78  0AA2               	incf	setDimmerLights_Trigger@command,f
  5092  0A79  0863               	movf	Sw_DimmerOnFunc@sw,w
  5093  0A7A  319F  279D  318A   	fcall	_setDimmerLights_Trigger
  5094                           
  5095                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  5096  0A7D  0020               	movlb	0	; select bank0
  5097  0A7E  01A2               	clrf	setDimmerLights_Switch@command
  5098  0A7F  0AA2               	incf	setDimmerLights_Switch@command,f
  5099  0A80  0863               	movf	Sw_DimmerOnFunc@sw,w
  5100  0A81  319F  278D  318A   	fcall	_setDimmerLights_Switch
  5101                           
  5102                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  5103  0A84  087B               	movf	_Sw,w
  5104  0A85  0086               	movwf	6
  5105  0A86  3001               	movlw	1	; select bank2/3
  5106  0A87  0087               	movwf	7
  5107  0A88  3000               	movlw	0
  5108  0A89  1B01               	btfsc	1,6
  5109  0A8A  3001               	movlw	1
  5110  0A8B  0020               	movlb	0	; select bank0
  5111  0A8C  00DD               	movwf	setRF_DimmerLights@on
  5112  0A8D  0863               	movf	Sw_DimmerOnFunc@sw,w
  5113  0A8E  3187  2794  318A   	fcall	_setRF_DimmerLights
  5114                           
  5115                           ;Switch_B1.c: 253: setTxData(1);
  5116  0A91  3001               	movlw	1
  5117  0A92  318F  275A         	fcall	_setTxData
  5118                           
  5119                           ;Switch_B1.c: 255: } else {
  5120  0A94  0020               	movlb	0	; select bank0
  5121  0A95  0008               	return
  5122  0A96                     l6118:	
  5123                           
  5124                           ;Switch_B1.c: 256: Sw->Status = 0;
  5125  0A96  087B               	movf	_Sw,w
  5126  0A97  0086               	movwf	6
  5127  0A98  3001               	movlw	1	; select bank2/3
  5128  0A99  0087               	movwf	7
  5129  0A9A  1301               	bcf	1,6
  5130                           
  5131                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  5132  0A9B  087B               	movf	_Sw,w
  5133  0A9C  0086               	movwf	6
  5134  0A9D  3001               	movlw	1	; select bank2/3
  5135  0A9E  0087               	movwf	7
  5136  0A9F  3000               	movlw	0
  5137  0AA0  1B01               	btfsc	1,6
  5138  0AA1  3001               	movlw	1
  5139  0AA2  0020               	movlb	0	; select bank0
  5140  0AA3  00A2               	movwf	setRFSW_Status@command
  5141  0AA4  0863               	movf	Sw_DimmerOnFunc@sw,w
  5142  0AA5  319F  2741         	fcall	_setRFSW_Status
  5143  0AA7  0020               	movlb	0	; select bank0
  5144  0AA8  0008               	return
  5145  0AA9                     __end_of_Sw_DimmerOnFunc:	
  5146                           
  5147                           	psect	text11
  5148  09C6                     __ptext11:	
  5149 ;; *************** function _Sw_DimmerOffFunc *****************
  5150 ;; Defined at:
  5151 ;;		line 263 in file "../src/Switch_B1.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  sw              1    wreg     unsigned char 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  sw              1   68[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;		None               void
  5158 ;; Registers used:
  5159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;Total ram usage:        3 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    9
  5172 ;; This function calls:
  5173 ;;		_setDelayOff_GO
  5174 ;;		_setDimmerLights_AdjGo
  5175 ;;		_setDimmerLights_Switch
  5176 ;;		_setDimmerLights_Trigger
  5177 ;;		_setDimmerLights_TriggerAdj
  5178 ;;		_setRF_DimmerLights
  5179 ;;		_setTxData
  5180 ;; This function is called by:
  5181 ;;		_setSw_Main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _Sw_DimmerOffFunc
  5187  09C6                     _Sw_DimmerOffFunc:	
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5191                           ;Sw_DimmerOffFunc@sw stored from wreg
  5192  09C6  0020               	movlb	0	; select bank0
  5193  09C7  00E4               	movwf	Sw_DimmerOffFunc@sw
  5194                           
  5195                           ;Switch_B1.c: 264: if (Sw->Flag) {
  5196  09C8  087B               	movf	_Sw,w
  5197  09C9  0086               	movwf	6
  5198  09CA  3001               	movlw	1	; select bank2/3
  5199  09CB  0087               	movwf	7
  5200  09CC  1F81               	btfss	1,7
  5201  09CD  0008               	return
  5202                           
  5203                           ;Switch_B1.c: 265: Sw->Flag = 0;
  5204  09CE  087B               	movf	_Sw,w
  5205  09CF  0086               	movwf	6
  5206  09D0  3001               	movlw	1	; select bank2/3
  5207  09D1  0087               	movwf	7
  5208  09D2  1381               	bcf	1,7
  5209                           
  5210                           ;Switch_B1.c: 266: if (Sw->Status) {
  5211  09D3  087B               	movf	_Sw,w
  5212  09D4  0086               	movwf	6
  5213  09D5  3001               	movlw	1	; select bank2/3
  5214  09D6  0087               	movwf	7
  5215  09D7  1F01               	btfss	1,6
  5216  09D8  2A12               	goto	l6162
  5217                           
  5218                           ;Switch_B1.c: 267: if (Sw->Adj) {
  5219  09D9  0A7B               	incf	_Sw,w
  5220  09DA  0086               	movwf	6
  5221  09DB  3001               	movlw	1	; select bank2/3
  5222  09DC  0087               	movwf	7
  5223  09DD  1C01               	btfss	1,0
  5224  09DE  0008               	return
  5225                           
  5226                           ;Switch_B1.c: 268: Sw->Adj = 0;
  5227  09DF  0A7B               	incf	_Sw,w
  5228  09E0  0086               	movwf	6
  5229  09E1  3001               	movlw	1	; select bank2/3
  5230  09E2  0087               	movwf	7
  5231  09E3  1001               	bcf	1,0
  5232                           
  5233                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  5234  09E4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5235  09E5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5236  09E6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5237  09E7  319F  27BD  3189   	fcall	_setDimmerLights_TriggerAdj
  5238                           
  5239                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  5240  09EA  0020               	movlb	0	; select bank0
  5241  09EB  01A2               	clrf	setDimmerLights_AdjGo@command
  5242  09EC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5243  09ED  319F  27AD  3189   	fcall	_setDimmerLights_AdjGo
  5244                           
  5245                           ;Switch_B1.c: 272: product->Data[17]=product->Data[26 + sw];
  5246  09F0  0020               	movlb	0	; select bank0
  5247  09F1  0864               	movf	Sw_DimmerOffFunc@sw,w
  5248  09F2  3E1A               	addlw	26
  5249  09F3  077D               	addwf	_product,w
  5250  09F4  00E2               	movwf	??_Sw_DimmerOffFunc
  5251  09F5  0862               	movf	??_Sw_DimmerOffFunc,w
  5252  09F6  0086               	movwf	6
  5253  09F7  3001               	movlw	1	; select bank2/3
  5254  09F8  0087               	movwf	7
  5255  09F9  0801               	movf	1,w
  5256  09FA  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5257  09FB  087D               	movf	_product,w
  5258  09FC  3E11               	addlw	17
  5259  09FD  0086               	movwf	6
  5260  09FE  3001               	movlw	1	; select bank2/3
  5261  09FF  0087               	movwf	7
  5262  0A00  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5263  0A01  0081               	movwf	1
  5264                           
  5265                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5266  0A02  087B               	movf	_Sw,w
  5267  0A03  0086               	movwf	6
  5268  0A04  3001               	movlw	1	; select bank2/3
  5269  0A05  0087               	movwf	7
  5270  0A06  3000               	movlw	0
  5271  0A07  1B01               	btfsc	1,6
  5272  0A08  3001               	movlw	1
  5273  0A09  00DD               	movwf	setRF_DimmerLights@on
  5274  0A0A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5275  0A0B  3187  2794  3189   	fcall	_setRF_DimmerLights
  5276                           
  5277                           ;Switch_B1.c: 274: setTxData(1);
  5278  0A0E  3001               	movlw	1
  5279  0A0F  318F  275A         	fcall	_setTxData
  5280                           
  5281                           ;Switch_B1.c: 276: }
  5282                           ;Switch_B1.c: 277: } else {
  5283  0A11  0008               	return
  5284  0A12                     l6162:	
  5285                           
  5286                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  5287  0A12  0020               	movlb	0	; select bank0
  5288  0A13  01A2               	clrf	setDimmerLights_Trigger@command
  5289  0A14  0AA2               	incf	setDimmerLights_Trigger@command,f
  5290  0A15  0864               	movf	Sw_DimmerOffFunc@sw,w
  5291  0A16  319F  279D  3189   	fcall	_setDimmerLights_Trigger
  5292                           
  5293                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  5294  0A19  0020               	movlb	0	; select bank0
  5295  0A1A  01A2               	clrf	setDimmerLights_Switch@command
  5296  0A1B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5297  0A1C  319F  278D  3189   	fcall	_setDimmerLights_Switch
  5298                           
  5299                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  5300  0A1F  0020               	movlb	0	; select bank0
  5301  0A20  01A3               	clrf	setDelayOff_GO@command
  5302  0A21  01A4               	clrf	setDelayOff_GO@value
  5303  0A22  0864               	movf	Sw_DimmerOffFunc@sw,w
  5304  0A23  3197  27A3  3189   	fcall	_setDelayOff_GO
  5305                           
  5306                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  5307  0A26  087B               	movf	_Sw,w
  5308  0A27  0086               	movwf	6
  5309  0A28  3001               	movlw	1	; select bank2/3
  5310  0A29  0087               	movwf	7
  5311  0A2A  3000               	movlw	0
  5312  0A2B  1B01               	btfsc	1,6
  5313  0A2C  3001               	movlw	1
  5314  0A2D  0020               	movlb	0	; select bank0
  5315  0A2E  00DD               	movwf	setRF_DimmerLights@on
  5316  0A2F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5317  0A30  3187  2794  3189   	fcall	_setRF_DimmerLights
  5318                           
  5319                           ;Switch_B1.c: 283: setTxData(1);
  5320  0A33  3001               	movlw	1
  5321  0A34  318F  275A         	fcall	_setTxData
  5322  0A36  0008               	return
  5323  0A37                     __end_of_Sw_DimmerOffFunc:	
  5324                           
  5325                           	psect	text12
  5326  15D4                     __ptext12:	
  5327 ;; *************** function _Sw_DimmerAdjFunc *****************
  5328 ;; Defined at:
  5329 ;;		line 290 in file "../src/Switch_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  sw              1    wreg     unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  sw              1    5[BANK0 ] unsigned char 
  5334 ;;  Idle            1    4[BANK0 ] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    7
  5351 ;; This function calls:
  5352 ;;		_setDimmerLights_AdjGo
  5353 ;;		_setDimmerLights_TriggerAdj
  5354 ;;		_setRFSW_Status
  5355 ;; This function is called by:
  5356 ;;		_setSw_Main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _Sw_DimmerAdjFunc
  5362  15D4                     _Sw_DimmerAdjFunc:	
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5366                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5367  15D4  0020               	movlb	0	; select bank0
  5368  15D5  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5369                           
  5370                           ;Switch_B1.c: 291: char Idle = 1;
  5371  15D6  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5372  15D7  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5373                           
  5374                           ;Switch_B1.c: 303: if (sw == 1) {
  5375  15D8  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5376  15D9  3A01               	xorlw	1
  5377  15DA  1D03               	skipz
  5378  15DB  2DDF               	goto	l6128
  5379                           
  5380                           ;Switch_B1.c: 304: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5381  15DC  0021               	movlb	1	; select bank1
  5382  15DD  083C               	movf	_DimmerLights22^(0+128),w
  5383  15DE  2DE5               	goto	L3
  5384  15DF                     l6128:	
  5385                           ;Switch_B1.c: 305: } else if (sw == 2) {
  5386                           
  5387  15DF  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5388  15E0  3A02               	xorlw	2
  5389  15E1  1D03               	skipz
  5390  15E2  2DF1               	goto	l6132
  5391                           
  5392                           ;Switch_B1.c: 306: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5393  15E3  0021               	movlb	1	; select bank1
  5394  15E4  083B               	movf	_DimmerLights11^(0+128),w
  5395  15E5                     L3:	
  5396  15E5  3E09               	addlw	9
  5397  15E6  0086               	movwf	6
  5398  15E7  3001               	movlw	1	; select bank2/3
  5399  15E8  0087               	movwf	7
  5400  15E9  1003               	clrc
  5401  15EA  1D01               	btfss	1,2
  5402  15EB  1403               	setc
  5403  15EC  3000               	movlw	0
  5404  15ED  1803               	btfsc	3,0
  5405  15EE  3001               	movlw	1
  5406  15EF  0020               	movlb	0	; select bank0
  5407  15F0  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5408  15F1                     l6132:	
  5409                           
  5410                           ;Switch_B1.c: 307: }
  5411                           ;Switch_B1.c: 310: if (Idle) {
  5412  15F1  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5413  15F2  1903               	btfsc	3,2
  5414  15F3  0008               	return
  5415                           
  5416                           ;Switch_B1.c: 311: if (Sw->Flag) {
  5417  15F4  087B               	movf	_Sw,w
  5418  15F5  0086               	movwf	6
  5419  15F6  3001               	movlw	1	; select bank2/3
  5420  15F7  0087               	movwf	7
  5421  15F8  1F81               	btfss	1,7
  5422  15F9  0008               	return
  5423                           
  5424                           ;Switch_B1.c: 312: Sw->Adj = 1;
  5425  15FA  0A7B               	incf	_Sw,w
  5426  15FB  0086               	movwf	6
  5427  15FC  3001               	movlw	1	; select bank2/3
  5428  15FD  0087               	movwf	7
  5429  15FE  1401               	bsf	1,0
  5430                           
  5431                           ;Switch_B1.c: 313: Sw->Status = 1;
  5432  15FF  087B               	movf	_Sw,w
  5433  1600  0086               	movwf	6
  5434  1601  3001               	movlw	1	; select bank2/3
  5435  1602  0087               	movwf	7
  5436  1603  1701               	bsf	1,6
  5437                           
  5438                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  5439  1604  01A2               	clrf	setRFSW_Status@command
  5440  1605  0AA2               	incf	setRFSW_Status@command,f
  5441  1606  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5442  1607  319F  2741  3195   	fcall	_setRFSW_Status
  5443                           
  5444                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  5445  160A  0020               	movlb	0	; select bank0
  5446  160B  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5447  160C  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5448  160D  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5449  160E  319F  27BD  3195   	fcall	_setDimmerLights_TriggerAdj
  5450                           
  5451                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  5452  1611  0020               	movlb	0	; select bank0
  5453  1612  01A2               	clrf	setDimmerLights_AdjGo@command
  5454  1613  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5455  1614  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5456  1615  319F  27AD         	fcall	_setDimmerLights_AdjGo
  5457  1617  0020               	movlb	0	; select bank0
  5458  1618  0008               	return
  5459  1619                     __end_of_Sw_DimmerAdjFunc:	
  5460                           
  5461                           	psect	text13
  5462  1FBD                     __ptext13:	
  5463 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5464 ;; Defined at:
  5465 ;;		line 553 in file "../src/Dimmer_B1.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  lights          1    wreg     unsigned char 
  5468 ;;  command         1    2[BANK0 ] unsigned char 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  lights          1    3[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    6
  5487 ;; This function calls:
  5488 ;;		_DimmerLightsPointSelect
  5489 ;; This function is called by:
  5490 ;;		_Sw_DimmerOffFunc
  5491 ;;		_Sw_DimmerAdjFunc
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _setDimmerLights_TriggerAdj
  5497  1FBD                     _setDimmerLights_TriggerAdj:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5501                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5502  1FBD  0020               	movlb	0	; select bank0
  5503  1FBE  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5504                           
  5505                           ;Dimmer_B1.c: 554: DimmerLightsPointSelect(lights);
  5506  1FBF  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5507  1FC0  3190  2082         	fcall	_DimmerLightsPointSelect
  5508                           
  5509                           ;Dimmer_B1.c: 555: DimmerLights->TriggerAdj = command;
  5510  1FC2  0879               	movf	_DimmerLights,w
  5511  1FC3  3E09               	addlw	9
  5512  1FC4  0086               	movwf	6
  5513  1FC5  3001               	movlw	1	; select bank2/3
  5514  1FC6  0087               	movwf	7
  5515  1FC7  0020               	movlb	0	; select bank0
  5516  1FC8  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5517  1FC9  1181               	bcf	1,3
  5518  1FCA  1D03               	skipz
  5519  1FCB  1581               	bsf	1,3
  5520  1FCC  0008               	return
  5521  1FCD                     __end_of_setDimmerLights_TriggerAdj:	
  5522                           
  5523                           	psect	text14
  5524  1FAD                     __ptext14:	
  5525 ;; *************** function _setDimmerLights_AdjGo *****************
  5526 ;; Defined at:
  5527 ;;		line 543 in file "../src/Dimmer_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  lights          1    wreg     unsigned char 
  5530 ;;  command         1    2[BANK0 ] unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  lights          1    3[BANK0 ] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    6
  5549 ;; This function calls:
  5550 ;;		_DimmerLightsPointSelect
  5551 ;; This function is called by:
  5552 ;;		_Sw_DimmerOffFunc
  5553 ;;		_Sw_DimmerAdjFunc
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setDimmerLights_AdjGo
  5559  1FAD                     _setDimmerLights_AdjGo:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5563                           ;setDimmerLights_AdjGo@lights stored from wreg
  5564  1FAD  0020               	movlb	0	; select bank0
  5565  1FAE  00A3               	movwf	setDimmerLights_AdjGo@lights
  5566                           
  5567                           ;Dimmer_B1.c: 544: DimmerLightsPointSelect(lights);
  5568  1FAF  0823               	movf	setDimmerLights_AdjGo@lights,w
  5569  1FB0  3190  2082         	fcall	_DimmerLightsPointSelect
  5570                           
  5571                           ;Dimmer_B1.c: 545: DimmerLights->AdjGo = command;
  5572  1FB2  0879               	movf	_DimmerLights,w
  5573  1FB3  3E09               	addlw	9
  5574  1FB4  0086               	movwf	6
  5575  1FB5  3001               	movlw	1	; select bank2/3
  5576  1FB6  0087               	movwf	7
  5577  1FB7  0020               	movlb	0	; select bank0
  5578  1FB8  0822               	movf	setDimmerLights_AdjGo@command,w
  5579  1FB9  1101               	bcf	1,2
  5580  1FBA  1D03               	skipz
  5581  1FBB  1501               	bsf	1,2
  5582  1FBC  0008               	return
  5583  1FBD                     __end_of_setDimmerLights_AdjGo:	
  5584                           
  5585                           	psect	text15
  5586  1F34                     __ptext15:	
  5587 ;; *************** function _Switch_Initialization *****************
  5588 ;; Defined at:
  5589 ;;		line 37 in file "../src/Switch_B1.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    8
  5610 ;; This function calls:
  5611 ;;		_TouchPower
  5612 ;;		_setSw_Initialization
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Switch_Initialization
  5620  1F34                     _Switch_Initialization:	
  5621                           
  5622                           ;Switch_B1.c: 38: TouchPower();
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5626  1F34  319E  2639  319F   	fcall	_TouchPower
  5627                           
  5628                           ;Switch_B1.c: 40: WPUB1 = 0;
  5629  1F37  0024               	movlb	4	; select bank4
  5630  1F38  108D               	bcf	13,1	;volatile
  5631                           
  5632                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5633  1F39  3001               	movlw	1
  5634  1F3A  319E  2675  319F   	fcall	_setSw_Initialization
  5635                           
  5636                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5637  1F3D  3002               	movlw	2
  5638  1F3E  319E  2675         	fcall	_setSw_Initialization
  5639  1F40  0008               	return
  5640  1F41                     __end_of_Switch_Initialization:	
  5641                           
  5642                           	psect	text16
  5643  1E75                     __ptext16:	
  5644 ;; *************** function _setSw_Initialization *****************
  5645 ;; Defined at:
  5646 ;;		line 77 in file "../src/Switch_B1.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  sw              1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  sw              1    4[BANK0 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;		None               void
  5653 ;; Registers used:
  5654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        1 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    7
  5667 ;; This function calls:
  5668 ;;		_setLED
  5669 ;; This function is called by:
  5670 ;;		_Switch_Initialization
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           
  5675                           ;psect for function _setSw_Initialization
  5676  1E75                     _setSw_Initialization:	
  5677                           
  5678                           ;incstack = 0
  5679                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5680                           ;setSw_Initialization@sw stored from wreg
  5681  1E75  0020               	movlb	0	; select bank0
  5682  1E76  00A4               	movwf	setSw_Initialization@sw
  5683                           
  5684                           ;Switch_B1.c: 78: setLED(sw, 1);
  5685  1E77  01A2               	clrf	setLED@command
  5686  1E78  0AA2               	incf	setLED@command,f
  5687  1E79  0824               	movf	setSw_Initialization@sw,w
  5688  1E7A  3188  2035         	fcall	_setLED
  5689  1E7C  0008               	return
  5690  1E7D                     __end_of_setSw_Initialization:	
  5691                           
  5692                           	psect	text17
  5693  1E39                     __ptext17:	
  5694 ;; *************** function _TouchPower *****************
  5695 ;; Defined at:
  5696 ;;		line 10 in file "../src/Switch_B1.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		None
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        0 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    5
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_Switch_Initialization
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           
  5725                           ;psect for function _TouchPower
  5726  1E39                     _TouchPower:	
  5727  1E39                     l2401:	
  5728                           ;Switch_B1.c: 11: while (!RC5)
  5729                           
  5730                           ;incstack = 0
  5731                           ; Regs used in _TouchPower: []
  5732                           
  5733  1E39  0020               	movlb	0	; select bank0
  5734  1E3A  1A8E               	btfsc	14,5	;volatile
  5735  1E3B  0008               	return
  5736                           
  5737                           ;Switch_B1.c: 12: RC5 = 1;
  5738  1E3C  168E               	bsf	14,5	;volatile
  5739  1E3D  2E39               	goto	l2401
  5740  1E3E                     __end_of_TouchPower:	
  5741                           
  5742                           	psect	text18
  5743  1E35                     __ptext18:	
  5744 ;; *************** function _RF_Main *****************
  5745 ;; Defined at:
  5746 ;;		line 23 in file "../src/RF_Control_B1.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;		None               void
  5753 ;; Registers used:
  5754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:   14
  5767 ;; This function calls:
  5768 ;;		_setRF_Main
  5769 ;; This function is called by:
  5770 ;;		_main
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _RF_Main
  5776  1E35                     _RF_Main:	
  5777                           
  5778                           ;RF_Control_B1.c: 25: setRF_Main(1);
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5782  1E35  3001               	movlw	1
  5783  1E36  318E  26C6         	fcall	_setRF_Main
  5784  1E38  0008               	return
  5785  1E39                     __end_of_RF_Main:	
  5786                           
  5787                           	psect	text19
  5788  0EC6                     __ptext19:	
  5789 ;; *************** function _setRF_Main *****************
  5790 ;; Defined at:
  5791 ;;		line 57 in file "../src/RF_Control_B1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  rf              1    wreg     unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  rf              1   74[BANK0 ] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;		None               void
  5798 ;; Registers used:
  5799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        3 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:   13
  5812 ;; This function calls:
  5813 ;;		_CC2500_RxData
  5814 ;;		_CC2500_TxData
  5815 ;;		_CC2500_WriteCommand
  5816 ;;		_RF_RxDisable
  5817 ;;		_RfPointSelect
  5818 ;;		_getRxData
  5819 ;;		_setINT_GO
  5820 ;; This function is called by:
  5821 ;;		_RF_Main
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _setRF_Main
  5827  0EC6                     _setRF_Main:	
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5831                           ;setRF_Main@rf stored from wreg
  5832  0EC6  0020               	movlb	0	; select bank0
  5833  0EC7  00EA               	movwf	setRF_Main@rf
  5834                           
  5835                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  5836  0EC8  086A               	movf	setRF_Main@rf,w
  5837  0EC9  319E  26DE  318E   	fcall	_RfPointSelect
  5838                           
  5839                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  5840  0ECC  0021               	movlb	1	; select bank1
  5841  0ECD  083E               	movf	_RF^(0+128),w
  5842  0ECE  0086               	movwf	6
  5843  0ECF  0187               	clrf	7
  5844  0ED0  1C01               	btfss	1,0
  5845  0ED1  0008               	return
  5846                           
  5847                           ;RF_Control_B1.c: 67: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  5848  0ED2  0020               	movlb	0	; select bank0
  5849  0ED3  01EB               	clrf	_setRF_Main$3246
  5850  0ED4  1F0C               	btfss	12,6	;volatile
  5851  0ED5  1A0C               	btfsc	12,4	;volatile
  5852  0ED6  2EDB               	goto	l6540
  5853  0ED7  180C               	btfsc	12,0	;volatile
  5854  0ED8  2EDB               	goto	l6540
  5855  0ED9  1C8D               	btfss	13,1	;volatile
  5856  0EDA  2EE4               	goto	l6544
  5857  0EDB                     l6540:	
  5858  0EDB  0021               	movlb	1	; select bank1
  5859  0EDC  083E               	movf	_RF^(0+128),w
  5860  0EDD  0086               	movwf	6
  5861  0EDE  0187               	clrf	7
  5862  0EDF  1B01               	btfsc	1,6
  5863  0EE0  2EE4               	goto	l6544
  5864  0EE1  0020               	movlb	0	; select bank0
  5865  0EE2  01EB               	clrf	_setRF_Main$3246
  5866  0EE3  0AEB               	incf	_setRF_Main$3246,f
  5867  0EE4                     l6544:	
  5868  0EE4  0021               	movlb	1	; select bank1
  5869  0EE5  083E               	movf	_RF^(0+128),w
  5870  0EE6  0086               	movwf	6
  5871  0EE7  0187               	clrf	7
  5872  0EE8  0020               	movlb	0	; select bank0
  5873  0EE9  086B               	movf	_setRF_Main$3246,w
  5874  0EEA  1381               	bcf	1,7
  5875  0EEB  1D03               	skipz
  5876  0EEC  1781               	bsf	1,7
  5877                           
  5878                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  5879  0EED  0021               	movlb	1	; select bank1
  5880  0EEE  083E               	movf	_RF^(0+128),w
  5881  0EEF  0086               	movwf	6
  5882  0EF0  0187               	clrf	7
  5883  0EF1  1B81               	btfsc	1,7
  5884  0EF2  2F20               	goto	l6566
  5885                           
  5886                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  5887  0EF3  083E               	movf	_RF^(0+128),w
  5888  0EF4  0086               	movwf	6
  5889  0EF5  0187               	clrf	7
  5890  0EF6  1C81               	btfss	1,1
  5891  0EF7  2F04               	goto	l6554
  5892                           
  5893                           ;RF_Control_B1.c: 77: {
  5894                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  5895  0EF8  083E               	movf	_RF^(0+128),w
  5896  0EF9  0086               	movwf	6
  5897  0EFA  0187               	clrf	7
  5898  0EFB  1081               	bcf	1,1
  5899                           
  5900                           ;RF_Control_B1.c: 79: CC2500_RxData();
  5901  0EFC  3188  20F4  318E   	fcall	_CC2500_RxData
  5902                           
  5903                           ;RF_Control_B1.c: 86: getRxData(1);
  5904  0EFF  3001               	movlw	1
  5905  0F00  3196  26A7  318E   	fcall	_getRxData
  5906                           
  5907                           ;RF_Control_B1.c: 89: } else {
  5908  0F03  2F24               	goto	l6568
  5909  0F04                     l6554:	
  5910                           
  5911                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  5912  0F04  0021               	movlb	1	; select bank1
  5913  0F05  083E               	movf	_RF^(0+128),w
  5914  0F06  0086               	movwf	6
  5915  0F07  0187               	clrf	7
  5916  0F08  1901               	btfsc	1,2
  5917  0F09  2F24               	goto	l6568
  5918                           
  5919                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  5920  0F0A  083E               	movf	_RF^(0+128),w
  5921  0F0B  0086               	movwf	6
  5922  0F0C  0187               	clrf	7
  5923  0F0D  1981               	btfsc	1,3
  5924  0F0E  2F24               	goto	l6568
  5925                           
  5926                           ;RF_Control_B1.c: 93: {
  5927                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  5928  0F0F  083E               	movf	_RF^(0+128),w
  5929  0F10  0086               	movwf	6
  5930  0F11  0187               	clrf	7
  5931  0F12  1581               	bsf	1,3
  5932                           
  5933                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  5934  0F13  3036               	movlw	54
  5935  0F14  319F  277D  318E   	fcall	_CC2500_WriteCommand
  5936                           
  5937                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  5938  0F17  3034               	movlw	52
  5939  0F18  319F  277D  318E   	fcall	_CC2500_WriteCommand
  5940                           
  5941                           ;RF_Control_B1.c: 97: setINT_GO(1);
  5942  0F1B  3001               	movlw	1
  5943  0F1C  3190  2067  318E   	fcall	_setINT_GO
  5944                           
  5945                           ;RF_Control_B1.c: 98: }
  5946                           ;RF_Control_B1.c: 100: }
  5947                           ;RF_Control_B1.c: 101: }
  5948                           ;RF_Control_B1.c: 102: } else {
  5949  0F1F  2F24               	goto	l6568
  5950  0F20                     l6566:	
  5951                           
  5952                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  5953  0F20  3001               	movlw	1
  5954  0F21  3193  231A  318E   	fcall	_RF_RxDisable
  5955  0F24                     l6568:	
  5956                           
  5957                           ;RF_Control_B1.c: 104: }
  5958                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  5959  0F24  0021               	movlb	1	; select bank1
  5960  0F25  083E               	movf	_RF^(0+128),w
  5961  0F26  0086               	movwf	6
  5962  0F27  0187               	clrf	7
  5963  0F28  1D01               	btfss	1,2
  5964  0F29  0008               	return
  5965                           
  5966                           ;RF_Control_B1.c: 106: {
  5967                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  5968  0F2A  3001               	movlw	1
  5969  0F2B  3193  231A  318E   	fcall	_RF_RxDisable
  5970                           
  5971                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  5972  0F2E  0021               	movlb	1	; select bank1
  5973  0F2F  083E               	movf	_RF^(0+128),w
  5974  0F30  0086               	movwf	6
  5975  0F31  0187               	clrf	7
  5976  0F32  1A81               	btfsc	1,5
  5977  0F33  2F4F               	goto	l6582
  5978                           
  5979                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  5980  0F34  3001               	movlw	1
  5981  0F35  0020               	movlb	0	; select bank0
  5982  0F36  00E9               	movwf	??_setRF_Main
  5983  0F37  0021               	movlb	1	; select bank1
  5984  0F38  0A3E               	incf	_RF^(0+128),w
  5985  0F39  0086               	movwf	6
  5986  0F3A  0187               	clrf	7
  5987  0F3B  0020               	movlb	0	; select bank0
  5988  0F3C  0869               	movf	??_setRF_Main,w
  5989  0F3D  0781               	addwf	1,f
  5990                           
  5991                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  5992  0F3E  0021               	movlb	1	; select bank1
  5993  0F3F  0A3E               	incf	_RF^(0+128),w
  5994  0F40  0086               	movwf	6
  5995  0F41  0187               	clrf	7
  5996  0F42  0801               	movf	1,w
  5997  0F43  3A19               	xorlw	25
  5998  0F44  1D03               	skipz
  5999  0F45  0008               	return
  6000                           
  6001                           ;RF_Control_B1.c: 111: {
  6002                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  6003  0F46  0A3E               	incf	_RF^(0+128),w
  6004  0F47  0086               	movwf	6
  6005  0F48  0187               	clrf	7
  6006  0F49  0181               	clrf	1
  6007                           
  6008                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  6009  0F4A  083E               	movf	_RF^(0+128),w
  6010  0F4B  0086               	movwf	6
  6011  0F4C  0187               	clrf	7
  6012  0F4D  1681               	bsf	1,5
  6013                           
  6014                           ;RF_Control_B1.c: 114: }
  6015                           ;RF_Control_B1.c: 115: } else {
  6016  0F4E  0008               	return
  6017  0F4F                     l6582:	
  6018                           
  6019                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  6020  0F4F  083E               	movf	_RF^(0+128),w
  6021  0F50  0086               	movwf	6
  6022  0F51  0187               	clrf	7
  6023  0F52  1281               	bcf	1,5
  6024                           
  6025                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  6026  0F53  083E               	movf	_RF^(0+128),w
  6027  0F54  0086               	movwf	6
  6028  0F55  0187               	clrf	7
  6029  0F56  1101               	bcf	1,2
  6030                           
  6031                           ;RF_Control_B1.c: 118: CC2500_TxData();
  6032  0F57  3195  254B         	fcall	_CC2500_TxData
  6033  0F59  0008               	return
  6034  0F5A                     __end_of_setRF_Main:	
  6035                           
  6036                           	psect	text20
  6037  16A7                     __ptext20:	
  6038 ;; *************** function _getRxData *****************
  6039 ;; Defined at:
  6040 ;;		line 202 in file "../src/RF_Control_B1.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  rf              1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  rf              1   72[BANK0 ] unsigned char 
  6045 ;;  i               1    0        unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        1 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:   12
  6062 ;; This function calls:
  6063 ;;		_RfPointSelect
  6064 ;;		_setControl_Lights_Table
  6065 ;;		_setLog_Code
  6066 ;; This function is called by:
  6067 ;;		_setRF_Main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _getRxData
  6073  16A7                     _getRxData:	
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6077                           ;getRxData@rf stored from wreg
  6078  16A7  0020               	movlb	0	; select bank0
  6079  16A8  00E8               	movwf	getRxData@rf
  6080                           
  6081                           ;RF_Control_B1.c: 203: unsigned char i;
  6082                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  6083  16A9  0868               	movf	getRxData@rf,w
  6084  16AA  319E  26DE  3196   	fcall	_RfPointSelect
  6085                           
  6086                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  6087  16AD  0021               	movlb	1	; select bank1
  6088  16AE  083E               	movf	_RF^(0+128),w
  6089  16AF  0086               	movwf	6
  6090  16B0  0187               	clrf	7
  6091  16B1  1F01               	btfss	1,6
  6092  16B2  2EBE               	goto	l6042
  6093                           
  6094                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6095  16B3  08A0               	movf	_RF_Data^(0+128),f
  6096  16B4  1D03               	skipz
  6097  16B5  0008               	return
  6098  16B6  0821               	movf	(_RF_Data^(0+128)+1),w
  6099  16B7  3A64               	xorlw	100
  6100  16B8  1D03               	skipz
  6101  16B9  0008               	return
  6102                           
  6103                           ;RF_Control_B1.c: 207: {
  6104                           ;RF_Control_B1.c: 208: setLog_Code(1);
  6105  16BA  3001               	movlw	1
  6106  16BB  3196  265F         	fcall	_setLog_Code
  6107                           
  6108                           ;RF_Control_B1.c: 209: }
  6109                           ;RF_Control_B1.c: 210: } else {
  6110  16BD  0008               	return
  6111  16BE                     l6042:	
  6112                           
  6113                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6114  16BE  0021               	movlb	1	; select bank1
  6115  16BF  08A0               	movf	_RF_Data^(0+128),f
  6116  16C0  1D03               	skipz
  6117  16C1  0008               	return
  6118  16C2  0821               	movf	(_RF_Data^(0+128)+1),w
  6119  16C3  3A02               	xorlw	2
  6120  16C4  1D03               	skipz
  6121  16C5  0008               	return
  6122                           
  6123                           ;RF_Control_B1.c: 212: {
  6124                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6125  16C6  082C               	movf	(_RF_Data^(0+128)+12),w
  6126  16C7  3AFF               	xorlw	255
  6127  16C8  1D03               	skipz
  6128  16C9  2ED4               	goto	l6054
  6129  16CA  082D               	movf	(_RF_Data^(0+128)+13),w
  6130  16CB  3AFF               	xorlw	255
  6131  16CC  1D03               	skipz
  6132  16CD  2ED4               	goto	l6054
  6133  16CE  082E               	movf	(_RF_Data^(0+128)+14),w
  6134  16CF  3AFF               	xorlw	255
  6135  16D0  1D03               	skipz
  6136  16D1  2ED4               	goto	l6054
  6137                           
  6138                           ;RF_Control_B1.c: 214: __nop();
  6139  16D2  0000               	nop
  6140                           
  6141                           ;RF_Control_B1.c: 215: } else {
  6142  16D3  0008               	return
  6143  16D4                     l6054:	
  6144                           
  6145                           ;RF_Control_B1.c: 216: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6146  16D4  087D               	movf	_product,w
  6147  16D5  3E0C               	addlw	12
  6148  16D6  0086               	movwf	6
  6149  16D7  3001               	movlw	1	; select bank2/3
  6150  16D8  0087               	movwf	7
  6151  16D9  0021               	movlb	1	; select bank1
  6152  16DA  082C               	movf	(_RF_Data^(0+128)+12),w
  6153  16DB  0601               	xorwf	1,w
  6154  16DC  1D03               	skipz
  6155  16DD  0008               	return
  6156  16DE  087D               	movf	_product,w
  6157  16DF  3E0D               	addlw	13
  6158  16E0  0086               	movwf	6
  6159  16E1  3001               	movlw	1	; select bank2/3
  6160  16E2  0087               	movwf	7
  6161  16E3  082D               	movf	(_RF_Data^(0+128)+13),w
  6162  16E4  0601               	xorwf	1,w
  6163  16E5  1D03               	skipz
  6164  16E6  0008               	return
  6165  16E7  087D               	movf	_product,w
  6166  16E8  3E0E               	addlw	14
  6167  16E9  0086               	movwf	6
  6168  16EA  3001               	movlw	1	; select bank2/3
  6169  16EB  0087               	movwf	7
  6170  16EC  082E               	movf	(_RF_Data^(0+128)+14),w
  6171  16ED  0601               	xorwf	1,w
  6172  16EE  1D03               	skipz
  6173  16EF  0008               	return
  6174                           
  6175                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  6176  16F0  3001               	movlw	1
  6177  16F1  318E  2634         	fcall	_setControl_Lights_Table
  6178                           
  6179                           ;RF_Control_B1.c: 224: {
  6180                           ;RF_Control_B1.c: 225: ;
  6181                           
  6182                           ;RF_Control_B1.c: 221: {
  6183                           ;RF_Control_B1.c: 222: ;
  6184                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6185                           
  6186                           ;RF_Control_B1.c: 218: }
  6187                           ;RF_Control_B1.c: 219: }
  6188                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6189  16F3  0008               	return
  6190  16F4                     __end_of_getRxData:	
  6191                           
  6192                           	psect	text21
  6193  165F                     __ptext21:	
  6194 ;; *************** function _setLog_Code *****************
  6195 ;; Defined at:
  6196 ;;		line 235 in file "../src/RF_Control_B1.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  rf              1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  rf              1    5[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        2 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    6
  6217 ;; This function calls:
  6218 ;;		_RfPointSelect
  6219 ;;		_setBuz
  6220 ;; This function is called by:
  6221 ;;		_getRxData
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _setLog_Code
  6227  165F                     _setLog_Code:	
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6231                           ;setLog_Code@rf stored from wreg
  6232  165F  0020               	movlb	0	; select bank0
  6233  1660  00A5               	movwf	setLog_Code@rf
  6234                           
  6235                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  6236  1661  0825               	movf	setLog_Code@rf,w
  6237  1662  319E  26DE  3196   	fcall	_RfPointSelect
  6238                           
  6239                           ;RF_Control_B1.c: 237: product->Data[12]=RF_Data[12];
  6240  1665  0021               	movlb	1	; select bank1
  6241  1666  082C               	movf	(_RF_Data^(0+128)+12),w
  6242  1667  0020               	movlb	0	; select bank0
  6243  1668  00A4               	movwf	??_setLog_Code
  6244  1669  087D               	movf	_product,w
  6245  166A  3E0C               	addlw	12
  6246  166B  0086               	movwf	6
  6247  166C  3001               	movlw	1	; select bank2/3
  6248  166D  0087               	movwf	7
  6249  166E  0824               	movf	??_setLog_Code,w
  6250  166F  0081               	movwf	1
  6251                           
  6252                           ;RF_Control_B1.c: 238: product->Data[13]=RF_Data[13];
  6253  1670  0021               	movlb	1	; select bank1
  6254  1671  082D               	movf	(_RF_Data^(0+128)+13),w
  6255  1672  0020               	movlb	0	; select bank0
  6256  1673  00A4               	movwf	??_setLog_Code
  6257  1674  087D               	movf	_product,w
  6258  1675  3E0D               	addlw	13
  6259  1676  0086               	movwf	6
  6260  1677  3001               	movlw	1	; select bank2/3
  6261  1678  0087               	movwf	7
  6262  1679  0824               	movf	??_setLog_Code,w
  6263  167A  0081               	movwf	1
  6264                           
  6265                           ;RF_Control_B1.c: 239: product->Data[14]=RF_Data[14];
  6266  167B  0021               	movlb	1	; select bank1
  6267  167C  082E               	movf	(_RF_Data^(0+128)+14),w
  6268  167D  0020               	movlb	0	; select bank0
  6269  167E  00A4               	movwf	??_setLog_Code
  6270  167F  087D               	movf	_product,w
  6271  1680  3E0E               	addlw	14
  6272  1681  0086               	movwf	6
  6273  1682  3001               	movlw	1	; select bank2/3
  6274  1683  0087               	movwf	7
  6275  1684  0824               	movf	??_setLog_Code,w
  6276  1685  0081               	movwf	1
  6277                           
  6278                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  6279  1686  3064               	movlw	100
  6280  1687  00A0               	movwf	setBuz@time
  6281  1688  3000               	movlw	0
  6282  1689  00A1               	movwf	setBuz@time+1
  6283  168A  3001               	movlw	1
  6284  168B  318A  22A9  3196   	fcall	_setBuz
  6285                           
  6286                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  6287  168E  0021               	movlb	1	; select bank1
  6288  168F  083E               	movf	_RF^(0+128),w
  6289  1690  0086               	movwf	6
  6290  1691  0187               	clrf	7
  6291  1692  1301               	bcf	1,6
  6292                           
  6293                           ;RF_Control_B1.c: 242: if (myMain->First) {
  6294  1693  086A               	movf	_myMain^(0+128),w
  6295  1694  3E03               	addlw	3
  6296  1695  0086               	movwf	6
  6297  1696  3001               	movlw	1	; select bank2/3
  6298  1697  0087               	movwf	7
  6299  1698  1C81               	btfss	1,1
  6300  1699  2EA0               	goto	l2021
  6301                           
  6302                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  6303  169A  0867               	movf	_Memory^(0+128),w
  6304  169B  3E22               	addlw	34
  6305  169C  0086               	movwf	6
  6306  169D  3002               	movlw	2	; select bank4/5
  6307  169E  0087               	movwf	7
  6308  169F  1501               	bsf	1,2
  6309  16A0                     l2021:	
  6310                           
  6311                           ;RF_Control_B1.c: 244: }
  6312                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  6313  16A0  0867               	movf	_Memory^(0+128),w
  6314  16A1  3E22               	addlw	34
  6315  16A2  0086               	movwf	6
  6316  16A3  3002               	movlw	2	; select bank4/5
  6317  16A4  0087               	movwf	7
  6318  16A5  1401               	bsf	1,0
  6319  16A6  0008               	return
  6320  16A7                     __end_of_setLog_Code:	
  6321                           
  6322                           	psect	text22
  6323  0E34                     __ptext22:	
  6324 ;; *************** function _setControl_Lights_Table *****************
  6325 ;; Defined at:
  6326 ;;		line 249 in file "../src/RF_Control_B1.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  rf              1    wreg     unsigned char 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  rf              1   71[BANK0 ] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        1 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:   11
  6347 ;; This function calls:
  6348 ;;		_RfPointSelect
  6349 ;;		_setBuz
  6350 ;;		_setDimmerLights
  6351 ;;		_setRFSW_AdjControl
  6352 ;;		_setRFSW_Control
  6353 ;;		_setRFSW_Status
  6354 ;;		_setSw_Status
  6355 ;;		_setTxData
  6356 ;; This function is called by:
  6357 ;;		_getRxData
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _setControl_Lights_Table
  6363  0E34                     _setControl_Lights_Table:	
  6364                           
  6365                           ;incstack = 0
  6366                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6367                           ;setControl_Lights_Table@rf stored from wreg
  6368  0E34  0020               	movlb	0	; select bank0
  6369  0E35  00E7               	movwf	setControl_Lights_Table@rf
  6370                           
  6371                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  6372  0E36  0867               	movf	setControl_Lights_Table@rf,w
  6373  0E37  319E  26DE  318E   	fcall	_RfPointSelect
  6374                           
  6375                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  6376  0E3A  0021               	movlb	1	; select bank1
  6377  0E3B  08AF               	movf	(_RF_Data^(0+128)+15),f
  6378  0E3C  1D03               	skipz
  6379  0E3D  2E87               	goto	l5802
  6380                           
  6381                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  6382  0E3E  0020               	movlb	0	; select bank0
  6383  0E3F  01A4               	clrf	setDimmerLights@status
  6384  0E40  3001               	movlw	1
  6385  0E41  318D  25A3  318E   	fcall	_setDimmerLights
  6386                           
  6387                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  6388  0E44  0020               	movlb	0	; select bank0
  6389  0E45  01A2               	clrf	setRFSW_Status@command
  6390  0E46  3001               	movlw	1
  6391  0E47  319F  2741  318E   	fcall	_setRFSW_Status
  6392                           
  6393                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  6394  0E4A  0020               	movlb	0	; select bank0
  6395  0E4B  01A2               	clrf	setSw_Status@command
  6396  0E4C  3001               	movlw	1
  6397  0E4D  319F  2750  318E   	fcall	_setSw_Status
  6398                           
  6399                           ;RF_Control_B1.c: 258: setDimmerLights(2, 0);
  6400  0E50  0020               	movlb	0	; select bank0
  6401  0E51  01A4               	clrf	setDimmerLights@status
  6402  0E52  3002               	movlw	2
  6403  0E53  318D  25A3  318E   	fcall	_setDimmerLights
  6404                           
  6405                           ;RF_Control_B1.c: 259: setRFSW_Status(2, 0);
  6406  0E56  0020               	movlb	0	; select bank0
  6407  0E57  01A2               	clrf	setRFSW_Status@command
  6408  0E58  3002               	movlw	2
  6409  0E59  319F  2741  318E   	fcall	_setRFSW_Status
  6410                           
  6411                           ;RF_Control_B1.c: 260: setSw_Status(2, 0);
  6412  0E5C  0020               	movlb	0	; select bank0
  6413  0E5D  01A2               	clrf	setSw_Status@command
  6414  0E5E  3002               	movlw	2
  6415  0E5F  319F  2750  318E   	fcall	_setSw_Status
  6416                           
  6417                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6418  0E62  087D               	movf	_product,w
  6419  0E63  3E09               	addlw	9
  6420  0E64  0086               	movwf	6
  6421  0E65  3001               	movlw	1	; select bank2/3
  6422  0E66  0087               	movwf	7
  6423  0E67  0181               	clrf	1
  6424                           
  6425                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6426  0E68  087D               	movf	_product,w
  6427  0E69  3E0B               	addlw	11
  6428  0E6A  0086               	movwf	6
  6429  0E6B  3001               	movlw	1	; select bank2/3
  6430  0E6C  0087               	movwf	7
  6431  0E6D  0181               	clrf	1
  6432                           
  6433                           ;RF_Control_B1.c: 270: product->Data[15]=0;
  6434  0E6E  087D               	movf	_product,w
  6435  0E6F  3E0F               	addlw	15
  6436  0E70  0086               	movwf	6
  6437  0E71  3001               	movlw	1	; select bank2/3
  6438  0E72  0087               	movwf	7
  6439  0E73  0181               	clrf	1
  6440                           
  6441                           ;RF_Control_B1.c: 271: product->Data[17]=0;
  6442  0E74  087D               	movf	_product,w
  6443  0E75  3E11               	addlw	17
  6444  0E76  0086               	movwf	6
  6445  0E77  3001               	movlw	1	; select bank2/3
  6446  0E78  0087               	movwf	7
  6447  0E79  0181               	clrf	1
  6448                           
  6449                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  6450  0E7A  3064               	movlw	100
  6451  0E7B  0020               	movlb	0	; select bank0
  6452  0E7C  00A0               	movwf	setBuz@time
  6453  0E7D  3000               	movlw	0
  6454  0E7E  00A1               	movwf	setBuz@time+1
  6455  0E7F  3001               	movlw	1
  6456  0E80  318A  22A9  318E   	fcall	_setBuz
  6457                           
  6458                           ;RF_Control_B1.c: 273: setTxData(1);
  6459  0E83  3001               	movlw	1
  6460  0E84  318F  275A         	fcall	_setTxData
  6461                           
  6462                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  6463  0E86  0008               	return
  6464  0E87                     l5802:	
  6465  0E87  0021               	movlb	1	; select bank1
  6466  0E88  082F               	movf	(_RF_Data^(0+128)+15),w
  6467  0E89  3A20               	xorlw	32
  6468  0E8A  1D03               	skipz
  6469  0E8B  2EA2               	goto	l5808
  6470                           
  6471                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6472  0E8C  087D               	movf	_product,w
  6473  0E8D  3E09               	addlw	9
  6474  0E8E  0086               	movwf	6
  6475  0E8F  3001               	movlw	1	; select bank2/3
  6476  0E90  0087               	movwf	7
  6477  0E91  0181               	clrf	1
  6478                           
  6479                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6480  0E92  087D               	movf	_product,w
  6481  0E93  3E0B               	addlw	11
  6482  0E94  0086               	movwf	6
  6483  0E95  3001               	movlw	1	; select bank2/3
  6484  0E96  0087               	movwf	7
  6485  0E97  0181               	clrf	1
  6486                           
  6487                           ;RF_Control_B1.c: 277: product->Data[17]=0;
  6488  0E98  087D               	movf	_product,w
  6489  0E99  3E11               	addlw	17
  6490  0E9A  0086               	movwf	6
  6491  0E9B  3001               	movlw	1	; select bank2/3
  6492  0E9C  0087               	movwf	7
  6493  0E9D  0181               	clrf	1
  6494                           
  6495                           ;RF_Control_B1.c: 278: setTxData(1);
  6496  0E9E  3001               	movlw	1
  6497  0E9F  318F  275A         	fcall	_setTxData
  6498                           
  6499                           ;RF_Control_B1.c: 279: }
  6500  0EA1  0008               	return
  6501  0EA2                     l5808:	
  6502                           
  6503                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  6504  0EA2  0021               	movlb	1	; select bank1
  6505  0EA3  082F               	movf	(_RF_Data^(0+128)+15),w
  6506  0EA4  3A01               	xorlw	1
  6507  0EA5  1D03               	skipz
  6508  0EA6  2EAB               	goto	l5812
  6509                           
  6510                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  6511  0EA7  3001               	movlw	1
  6512  0EA8  318D  2513         	fcall	_setRFSW_Control
  6513                           
  6514                           ;RF_Control_B1.c: 283: }
  6515  0EAA  0008               	return
  6516  0EAB                     l5812:	
  6517                           
  6518                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  6519  0EAB  0021               	movlb	1	; select bank1
  6520  0EAC  082F               	movf	(_RF_Data^(0+128)+15),w
  6521  0EAD  3A11               	xorlw	17
  6522  0EAE  1D03               	skipz
  6523  0EAF  2EB4               	goto	l5816
  6524                           
  6525                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  6526  0EB0  3001               	movlw	1
  6527  0EB1  3195  250B         	fcall	_setRFSW_AdjControl
  6528                           
  6529                           ;RF_Control_B1.c: 287: }
  6530  0EB3  0008               	return
  6531  0EB4                     l5816:	
  6532                           
  6533                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x02) {
  6534  0EB4  0021               	movlb	1	; select bank1
  6535  0EB5  082F               	movf	(_RF_Data^(0+128)+15),w
  6536  0EB6  3A02               	xorlw	2
  6537  0EB7  1D03               	skipz
  6538  0EB8  2EBD               	goto	l5820
  6539                           
  6540                           ;RF_Control_B1.c: 293: setRFSW_Control(2);
  6541  0EB9  3002               	movlw	2
  6542  0EBA  318D  2513         	fcall	_setRFSW_Control
  6543                           
  6544                           ;RF_Control_B1.c: 294: }
  6545  0EBC  0008               	return
  6546  0EBD                     l5820:	
  6547                           
  6548                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x21) {
  6549  0EBD  0021               	movlb	1	; select bank1
  6550  0EBE  082F               	movf	(_RF_Data^(0+128)+15),w
  6551  0EBF  3A21               	xorlw	33
  6552  0EC0  1D03               	skipz
  6553  0EC1  0008               	return
  6554                           
  6555                           ;RF_Control_B1.c: 297: setRFSW_AdjControl(2);
  6556  0EC2  3002               	movlw	2
  6557  0EC3  3195  250B         	fcall	_setRFSW_AdjControl
  6558  0EC5  0008               	return
  6559  0EC6                     __end_of_setControl_Lights_Table:	
  6560                           
  6561                           	psect	text23
  6562  0D13                     __ptext23:	
  6563 ;; *************** function _setRFSW_Control *****************
  6564 ;; Defined at:
  6565 ;;		line 334 in file "../src/RF_Control_B1.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  sw              1    wreg     unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  sw              1   67[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        2 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    9
  6586 ;; This function calls:
  6587 ;;		_RfSWPointSelect
  6588 ;;		_setBuz
  6589 ;;		_setDelayOff_GO
  6590 ;;		_setDimmerLights_Switch
  6591 ;;		_setDimmerLights_Trigger
  6592 ;;		_setRF_DimmerLights
  6593 ;;		_setSw_Status
  6594 ;;		_setTxData
  6595 ;; This function is called by:
  6596 ;;		_setControl_Lights_Table
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           
  6601                           ;psect for function _setRFSW_Control
  6602  0D13                     _setRFSW_Control:	
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6606                           ;setRFSW_Control@sw stored from wreg
  6607  0D13  0020               	movlb	0	; select bank0
  6608  0D14  00E3               	movwf	setRFSW_Control@sw
  6609                           
  6610                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  6611  0D15  0863               	movf	setRFSW_Control@sw,w
  6612  0D16  3190  20D2  318D   	fcall	_RfSWPointSelect
  6613                           
  6614                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  6615  0D19  0021               	movlb	1	; select bank1
  6616  0D1A  083F               	movf	_RFSW^(0+128),w
  6617  0D1B  0086               	movwf	6
  6618  0D1C  0187               	clrf	7
  6619  0D1D  1801               	btfsc	1,0
  6620  0D1E  2D54               	goto	l5690
  6621                           
  6622                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  6623  0D1F  0830               	movf	(_RF_Data^(0+128)+16),w
  6624  0D20  3A80               	xorlw	128
  6625  0D21  1D03               	skipz
  6626  0D22  2D30               	goto	l5680
  6627                           
  6628                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  6629  0D23  0020               	movlb	0	; select bank0
  6630  0D24  01A3               	clrf	setDelayOff_GO@command
  6631  0D25  0AA3               	incf	setDelayOff_GO@command,f
  6632  0D26  0021               	movlb	1	; select bank1
  6633  0D27  0831               	movf	(_RF_Data^(0+128)+17),w
  6634  0D28  0020               	movlb	0	; select bank0
  6635  0D29  00E2               	movwf	??_setRFSW_Control
  6636  0D2A  0862               	movf	??_setRFSW_Control,w
  6637  0D2B  00A4               	movwf	setDelayOff_GO@value
  6638  0D2C  0863               	movf	setRFSW_Control@sw,w
  6639  0D2D  3197  27A3  318D   	fcall	_setDelayOff_GO
  6640  0D30                     l5680:	
  6641                           
  6642                           ;RF_Control_B1.c: 339: }
  6643                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  6644  0D30  0021               	movlb	1	; select bank1
  6645  0D31  083F               	movf	_RFSW^(0+128),w
  6646  0D32  0086               	movwf	6
  6647  0D33  0187               	clrf	7
  6648  0D34  1401               	bsf	1,0
  6649                           
  6650                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  6651  0D35  0020               	movlb	0	; select bank0
  6652  0D36  01A2               	clrf	setSw_Status@command
  6653  0D37  0AA2               	incf	setSw_Status@command,f
  6654  0D38  0863               	movf	setRFSW_Control@sw,w
  6655  0D39  319F  2750  318D   	fcall	_setSw_Status
  6656                           
  6657                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  6658  0D3C  0020               	movlb	0	; select bank0
  6659  0D3D  01A2               	clrf	setDimmerLights_Trigger@command
  6660  0D3E  0AA2               	incf	setDimmerLights_Trigger@command,f
  6661  0D3F  0863               	movf	setRFSW_Control@sw,w
  6662  0D40  319F  279D  318D   	fcall	_setDimmerLights_Trigger
  6663                           
  6664                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  6665  0D43  0020               	movlb	0	; select bank0
  6666  0D44  01A2               	clrf	setDimmerLights_Switch@command
  6667  0D45  0AA2               	incf	setDimmerLights_Switch@command,f
  6668  0D46  0863               	movf	setRFSW_Control@sw,w
  6669  0D47  319F  278D  318D   	fcall	_setDimmerLights_Switch
  6670                           
  6671                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  6672  0D4A  0021               	movlb	1	; select bank1
  6673  0D4B  083F               	movf	_RFSW^(0+128),w
  6674  0D4C  0086               	movwf	6
  6675  0D4D  0187               	clrf	7
  6676  0D4E  3000               	movlw	0
  6677  0D4F  1801               	btfsc	1,0
  6678  0D50  3001               	movlw	1
  6679  0D51  0020               	movlb	0	; select bank0
  6680  0D52  00DD               	movwf	setRF_DimmerLights@on
  6681  0D53  2D92               	goto	L4
  6682  0D54                     l5690:	
  6683                           ;RF_Control_B1.c: 347: } else {
  6684                           
  6685                           
  6686                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  6687  0D54  0021               	movlb	1	; select bank1
  6688  0D55  0830               	movf	(_RF_Data^(0+128)+16),w
  6689  0D56  3A80               	xorlw	128
  6690  0D57  1D03               	skipz
  6691  0D58  2D6A               	goto	l5696
  6692                           
  6693                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  6694  0D59  0020               	movlb	0	; select bank0
  6695  0D5A  01A3               	clrf	setDelayOff_GO@command
  6696  0D5B  0AA3               	incf	setDelayOff_GO@command,f
  6697  0D5C  0021               	movlb	1	; select bank1
  6698  0D5D  0831               	movf	(_RF_Data^(0+128)+17),w
  6699  0D5E  0020               	movlb	0	; select bank0
  6700  0D5F  00E2               	movwf	??_setRFSW_Control
  6701  0D60  0862               	movf	??_setRFSW_Control,w
  6702  0D61  00A4               	movwf	setDelayOff_GO@value
  6703  0D62  0863               	movf	setRFSW_Control@sw,w
  6704  0D63  3197  27A3  318D   	fcall	_setDelayOff_GO
  6705                           
  6706                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  6707  0D66  0020               	movlb	0	; select bank0
  6708  0D67  01DD               	clrf	setRF_DimmerLights@on
  6709  0D68  0ADD               	incf	setRF_DimmerLights@on,f
  6710  0D69  2D92               	goto	L4
  6711  0D6A                     l5696:	
  6712                           ;RF_Control_B1.c: 351: } else {
  6713                           
  6714                           
  6715                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  6716  0D6A  0021               	movlb	1	; select bank1
  6717  0D6B  083F               	movf	_RFSW^(0+128),w
  6718  0D6C  0086               	movwf	6
  6719  0D6D  0187               	clrf	7
  6720  0D6E  1001               	bcf	1,0
  6721                           
  6722                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  6723  0D6F  0020               	movlb	0	; select bank0
  6724  0D70  01A2               	clrf	setSw_Status@command
  6725  0D71  0863               	movf	setRFSW_Control@sw,w
  6726  0D72  319F  2750  318D   	fcall	_setSw_Status
  6727                           
  6728                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  6729  0D75  0020               	movlb	0	; select bank0
  6730  0D76  01A2               	clrf	setDimmerLights_Trigger@command
  6731  0D77  0AA2               	incf	setDimmerLights_Trigger@command,f
  6732  0D78  0863               	movf	setRFSW_Control@sw,w
  6733  0D79  319F  279D  318D   	fcall	_setDimmerLights_Trigger
  6734                           
  6735                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  6736  0D7C  0021               	movlb	1	; select bank1
  6737  0D7D  083F               	movf	_RFSW^(0+128),w
  6738  0D7E  0086               	movwf	6
  6739  0D7F  0187               	clrf	7
  6740  0D80  3000               	movlw	0
  6741  0D81  1801               	btfsc	1,0
  6742  0D82  3001               	movlw	1
  6743  0D83  0020               	movlb	0	; select bank0
  6744  0D84  00A2               	movwf	setDimmerLights_Switch@command
  6745  0D85  0863               	movf	setRFSW_Control@sw,w
  6746  0D86  319F  278D  318D   	fcall	_setDimmerLights_Switch
  6747                           
  6748                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  6749  0D89  0020               	movlb	0	; select bank0
  6750  0D8A  01A3               	clrf	setDelayOff_GO@command
  6751  0D8B  01A4               	clrf	setDelayOff_GO@value
  6752  0D8C  0863               	movf	setRFSW_Control@sw,w
  6753  0D8D  3197  27A3  318D   	fcall	_setDelayOff_GO
  6754                           
  6755                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  6756  0D90  0020               	movlb	0	; select bank0
  6757  0D91  01DD               	clrf	setRF_DimmerLights@on
  6758  0D92                     L4:	
  6759  0D92  0863               	movf	setRFSW_Control@sw,w
  6760  0D93  3187  2794  318D   	fcall	_setRF_DimmerLights
  6761                           
  6762                           ;RF_Control_B1.c: 360: }
  6763                           ;RF_Control_B1.c: 361: }
  6764                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  6765  0D96  3064               	movlw	100
  6766  0D97  0020               	movlb	0	; select bank0
  6767  0D98  00A0               	movwf	setBuz@time
  6768  0D99  3000               	movlw	0
  6769  0D9A  00A1               	movwf	setBuz@time+1
  6770  0D9B  3001               	movlw	1
  6771  0D9C  318A  22A9  318D   	fcall	_setBuz
  6772                           
  6773                           ;RF_Control_B1.c: 363: setTxData(1);
  6774  0D9F  3001               	movlw	1
  6775  0DA0  318F  275A         	fcall	_setTxData
  6776  0DA2  0008               	return
  6777  0DA3                     __end_of_setRFSW_Control:	
  6778                           
  6779                           	psect	text24
  6780  17A3                     __ptext24:	
  6781 ;; *************** function _setDelayOff_GO *****************
  6782 ;; Defined at:
  6783 ;;		line 85 in file "../src/DelayOff_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  sw              1    wreg     unsigned char 
  6786 ;;  command         1    3[BANK0 ] unsigned char 
  6787 ;;  value           1    4[BANK0 ] unsigned char 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  sw              1    7[BANK0 ] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;Total ram usage:        5 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    6
  6806 ;; This function calls:
  6807 ;;		_DelayOffPointSelect
  6808 ;;		_DelayTimejudge
  6809 ;; This function is called by:
  6810 ;;		_setRFSW_Control
  6811 ;;		_Sw_DimmerOffFunc
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _setDelayOff_GO
  6817  17A3                     _setDelayOff_GO:	
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6821                           ;setDelayOff_GO@sw stored from wreg
  6822  17A3  0020               	movlb	0	; select bank0
  6823  17A4  00A7               	movwf	setDelayOff_GO@sw
  6824                           
  6825                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6826  17A5  0827               	movf	setDelayOff_GO@sw,w
  6827  17A6  3190  20E8  3197   	fcall	_DelayOffPointSelect
  6828                           
  6829                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6830  17A9  0021               	movlb	1	; select bank1
  6831  17AA  0839               	movf	_DelayOff^(0+128),w
  6832  17AB  0086               	movwf	6
  6833  17AC  0187               	clrf	7
  6834  17AD  1C01               	btfss	1,0
  6835  17AE  0008               	return
  6836                           
  6837                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6838  17AF  0839               	movf	_DelayOff^(0+128),w
  6839  17B0  0086               	movwf	6
  6840  17B1  0187               	clrf	7
  6841  17B2  0020               	movlb	0	; select bank0
  6842  17B3  0823               	movf	setDelayOff_GO@command,w
  6843  17B4  1081               	bcf	1,1
  6844  17B5  1D03               	skipz
  6845  17B6  1481               	bsf	1,1
  6846                           
  6847                           ;DelayOff_B1.c: 89: if (command == 1) {
  6848  17B7  0823               	movf	setDelayOff_GO@command,w
  6849  17B8  3A01               	xorlw	1
  6850  17B9  1D03               	skipz
  6851  17BA  2FE6               	goto	l5538
  6852                           
  6853                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6854  17BB  0824               	movf	setDelayOff_GO@value,w
  6855  17BC  3193  236C  3197   	fcall	_DelayTimejudge
  6856  17BF  0020               	movlb	0	; select bank0
  6857  17C0  00A5               	movwf	??_setDelayOff_GO
  6858  17C1  0021               	movlb	1	; select bank1
  6859  17C2  0A39               	incf	_DelayOff^(0+128),w
  6860  17C3  0086               	movwf	6
  6861  17C4  0187               	clrf	7
  6862  17C5  0020               	movlb	0	; select bank0
  6863  17C6  0825               	movf	??_setDelayOff_GO,w
  6864  17C7  0081               	movwf	1
  6865                           
  6866                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6867  17C8  300F               	movlw	15
  6868  17C9  0524               	andwf	setDelayOff_GO@value,w
  6869  17CA  00A5               	movwf	??_setDelayOff_GO
  6870  17CB  0825               	movf	??_setDelayOff_GO,w
  6871  17CC  3A05               	xorlw	5
  6872  17CD  1903               	skipnz
  6873  17CE  2FD3               	goto	l5532
  6874  17CF  0824               	movf	setDelayOff_GO@value,w
  6875  17D0  390F               	andlw	15
  6876  17D1  1D03               	btfss	3,2
  6877  17D2  2FD9               	goto	l5536
  6878  17D3                     l5532:	
  6879  17D3  3026               	movlw	38
  6880  17D4  0224               	subwf	setDelayOff_GO@value,w
  6881  17D5  1803               	skipnc
  6882  17D6  2FD9               	goto	l5536
  6883                           
  6884                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6885  17D7  0824               	movf	setDelayOff_GO@value,w
  6886  17D8  2FDA               	goto	L5
  6887  17D9                     l5536:	
  6888                           ;DelayOff_B1.c: 93: } else {
  6889                           
  6890                           
  6891                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6892  17D9  3005               	movlw	5
  6893  17DA                     L5:	
  6894  17DA  00A5               	movwf	??_setDelayOff_GO
  6895  17DB  0827               	movf	setDelayOff_GO@sw,w
  6896  17DC  3E1A               	addlw	26
  6897  17DD  077D               	addwf	_product,w
  6898  17DE  00A6               	movwf	??_setDelayOff_GO+1
  6899  17DF  0826               	movf	??_setDelayOff_GO+1,w
  6900  17E0  0086               	movwf	6
  6901  17E1  3001               	movlw	1	; select bank2/3
  6902  17E2  0087               	movwf	7
  6903  17E3  0825               	movf	??_setDelayOff_GO,w
  6904  17E4  0081               	movwf	1
  6905                           
  6906                           ;DelayOff_B1.c: 95: }
  6907                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6908  17E5  2FF2               	goto	l5542
  6909  17E6                     l5538:	
  6910  17E6  08A3               	movf	setDelayOff_GO@command,f
  6911  17E7  1D03               	skipz
  6912  17E8  2FF2               	goto	l5542
  6913                           
  6914                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6915  17E9  0827               	movf	setDelayOff_GO@sw,w
  6916  17EA  3E1A               	addlw	26
  6917  17EB  077D               	addwf	_product,w
  6918  17EC  00A5               	movwf	??_setDelayOff_GO
  6919  17ED  0825               	movf	??_setDelayOff_GO,w
  6920  17EE  0086               	movwf	6
  6921  17EF  3001               	movlw	1	; select bank2/3
  6922  17F0  0087               	movwf	7
  6923  17F1  0181               	clrf	1
  6924  17F2                     l5542:	
  6925                           
  6926                           ;DelayOff_B1.c: 98: }
  6927                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6928  17F2  0021               	movlb	1	; select bank1
  6929  17F3  0839               	movf	_DelayOff^(0+128),w
  6930  17F4  3E02               	addlw	2
  6931  17F5  0086               	movwf	6
  6932  17F6  0187               	clrf	7
  6933  17F7  3000               	movlw	0
  6934  17F8  3FC0               	movwi [0]fsr1
  6935  17F9  3FC1               	movwi [1]fsr1
  6936                           
  6937                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6938  17FA  0839               	movf	_DelayOff^(0+128),w
  6939  17FB  3E04               	addlw	4
  6940  17FC  0086               	movwf	6
  6941  17FD  0187               	clrf	7
  6942  17FE  0181               	clrf	1
  6943  17FF  0008               	return
  6944  1800                     __end_of_setDelayOff_GO:	
  6945                           
  6946                           	psect	text25
  6947  136C                     __ptext25:	
  6948 ;; *************** function _DelayTimejudge *****************
  6949 ;; Defined at:
  6950 ;;		line 105 in file "../src/DelayOff_B1.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  value           1    wreg     unsigned char 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  value           1    1[BANK0 ] unsigned char 
  6955 ;;  i               1    2[BANK0 ] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      unsigned char 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;Total ram usage:        3 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_setDelayOff_GO
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _DelayTimejudge
  6981  136C                     _DelayTimejudge:	
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  6985                           ;DelayTimejudge@value stored from wreg
  6986  136C  0020               	movlb	0	; select bank0
  6987  136D  00A1               	movwf	DelayTimejudge@value
  6988                           
  6989                           ;DelayOff_B1.c: 106: char i = 5;
  6990  136E  3005               	movlw	5
  6991  136F  00A0               	movwf	??_DelayTimejudge
  6992  1370  0820               	movf	??_DelayTimejudge,w
  6993  1371  00A2               	movwf	DelayTimejudge@i
  6994                           
  6995                           ;DelayOff_B1.c: 107: switch (value) {
  6996  1372  2B82               	goto	l5412
  6997  1373                     l5398:	
  6998                           ;DelayOff_B1.c: 108: case 0x05:
  6999                           
  7000                           
  7001                           ;DelayOff_B1.c: 109: i = 5;
  7002  1373  3005               	movlw	5
  7003  1374  2B7E               	goto	L10
  7004  1375                     l5400:	
  7005                           ;DelayOff_B1.c: 111: case 0x10:
  7006                           
  7007                           ;DelayOff_B1.c: 110: break;
  7008                           
  7009                           
  7010                           ;DelayOff_B1.c: 112: i = 10;
  7011  1375  300A               	movlw	10
  7012  1376  2B7E               	goto	L10
  7013  1377                     l5402:	
  7014                           ;DelayOff_B1.c: 114: case 0x15:
  7015                           
  7016                           ;DelayOff_B1.c: 113: break;
  7017                           
  7018                           
  7019                           ;DelayOff_B1.c: 115: i = 15;
  7020  1377  300F               	movlw	15
  7021  1378  2B7E               	goto	L10
  7022  1379                     l5404:	
  7023                           ;DelayOff_B1.c: 117: case 0x20:
  7024                           
  7025                           ;DelayOff_B1.c: 116: break;
  7026                           
  7027                           
  7028                           ;DelayOff_B1.c: 118: i = 20;
  7029  1379  3014               	movlw	20
  7030  137A  2B7E               	goto	L10
  7031  137B                     l5406:	
  7032                           ;DelayOff_B1.c: 120: case 0x25:
  7033                           
  7034                           ;DelayOff_B1.c: 119: break;
  7035                           
  7036                           
  7037                           ;DelayOff_B1.c: 121: i = 25;
  7038  137B  3019               	movlw	25
  7039  137C  2B7E               	goto	L10
  7040  137D                     l5408:	
  7041                           ;DelayOff_B1.c: 123: case 0x30:
  7042                           
  7043                           ;DelayOff_B1.c: 122: break;
  7044                           
  7045                           
  7046                           ;DelayOff_B1.c: 124: i = 30;
  7047  137D  301E               	movlw	30
  7048  137E                     L10:	
  7049  137E  00A0               	movwf	??_DelayTimejudge
  7050  137F  0820               	movf	??_DelayTimejudge,w
  7051  1380  00A2               	movwf	DelayTimejudge@i
  7052                           
  7053                           ;DelayOff_B1.c: 126: }
  7054                           
  7055                           ;DelayOff_B1.c: 125: break;
  7056  1381  2B96               	goto	l5414
  7057  1382                     l5412:	
  7058  1382  0821               	movf	DelayTimejudge@value,w
  7059                           
  7060                           ; Switch size 1, requested type "space"
  7061                           ; Number of cases is 6, Range of values is 5 to 48
  7062                           ; switch strategies available:
  7063                           ; Name         Instructions Cycles
  7064                           ; simple_byte           19    10 (average)
  7065                           ; direct_byte           97     9 (fixed)
  7066                           ; jumptable            263     9 (fixed)
  7067                           ;	Chosen strategy is simple_byte
  7068  1383  3A05               	xorlw	5	; case 5
  7069  1384  1903               	skipnz
  7070  1385  2B73               	goto	l5398
  7071  1386  3A15               	xorlw	21	; case 16
  7072  1387  1903               	skipnz
  7073  1388  2B75               	goto	l5400
  7074  1389  3A05               	xorlw	5	; case 21
  7075  138A  1903               	skipnz
  7076  138B  2B77               	goto	l5402
  7077  138C  3A35               	xorlw	53	; case 32
  7078  138D  1903               	skipnz
  7079  138E  2B79               	goto	l5404
  7080  138F  3A05               	xorlw	5	; case 37
  7081  1390  1903               	skipnz
  7082  1391  2B7B               	goto	l5406
  7083  1392  3A15               	xorlw	21	; case 48
  7084  1393  1903               	skipnz
  7085  1394  2B7D               	goto	l5408
  7086  1395  2B96               	goto	l5414
  7087  1396                     l5414:	
  7088                           
  7089                           ;DelayOff_B1.c: 127: return i;
  7090  1396  0822               	movf	DelayTimejudge@i,w
  7091  1397  0008               	return
  7092  1398                     __end_of_DelayTimejudge:	
  7093                           
  7094                           	psect	text26
  7095  150B                     __ptext26:	
  7096 ;; *************** function _setRFSW_AdjControl *****************
  7097 ;; Defined at:
  7098 ;;		line 367 in file "../src/RF_Control_B1.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  sw              1    wreg     unsigned char 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  sw              1   70[BANK0 ] unsigned char 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;		None               void
  7105 ;; Registers used:
  7106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        3 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:   10
  7119 ;; This function calls:
  7120 ;;		_RfSWPointSelect
  7121 ;;		_setRF_DimmerValue
  7122 ;;		_setTxData
  7123 ;; This function is called by:
  7124 ;;		_setControl_Lights_Table
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _setRFSW_AdjControl
  7130  150B                     _setRFSW_AdjControl:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7134                           ;setRFSW_AdjControl@sw stored from wreg
  7135  150B  0020               	movlb	0	; select bank0
  7136  150C  00E6               	movwf	setRFSW_AdjControl@sw
  7137                           
  7138                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  7139  150D  0866               	movf	setRFSW_AdjControl@sw,w
  7140  150E  3190  20D2  3195   	fcall	_RfSWPointSelect
  7141                           
  7142                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  7143  1511  0021               	movlb	1	; select bank1
  7144  1512  083F               	movf	_RFSW^(0+128),w
  7145  1513  0086               	movwf	6
  7146  1514  0187               	clrf	7
  7147  1515  1C01               	btfss	1,0
  7148  1516  2D23               	goto	l5720
  7149                           
  7150                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  7151  1517  0867               	movf	_Memory^(0+128),w
  7152  1518  3E22               	addlw	34
  7153  1519  0086               	movwf	6
  7154  151A  3002               	movlw	2	; select bank4/5
  7155  151B  0087               	movwf	7
  7156  151C  1401               	bsf	1,0
  7157                           
  7158                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  7159  151D  0020               	movlb	0	; select bank0
  7160  151E  0866               	movf	setRFSW_AdjControl@sw,w
  7161  151F  3188  2000  3195   	fcall	_setRF_DimmerValue
  7162                           
  7163                           ;RF_Control_B1.c: 372: } else {
  7164  1522  2D35               	goto	l2053
  7165  1523                     l5720:	
  7166                           
  7167                           ;RF_Control_B1.c: 373: product->Data[9]=product->Data[20 + sw];
  7168  1523  0020               	movlb	0	; select bank0
  7169  1524  0866               	movf	setRFSW_AdjControl@sw,w
  7170  1525  3E14               	addlw	20
  7171  1526  077D               	addwf	_product,w
  7172  1527  00E4               	movwf	??_setRFSW_AdjControl
  7173  1528  0864               	movf	??_setRFSW_AdjControl,w
  7174  1529  0086               	movwf	6
  7175  152A  3001               	movlw	1	; select bank2/3
  7176  152B  0087               	movwf	7
  7177  152C  0801               	movf	1,w
  7178  152D  00E5               	movwf	??_setRFSW_AdjControl+1
  7179  152E  087D               	movf	_product,w
  7180  152F  3E09               	addlw	9
  7181  1530  0086               	movwf	6
  7182  1531  3001               	movlw	1	; select bank2/3
  7183  1532  0087               	movwf	7
  7184  1533  0865               	movf	??_setRFSW_AdjControl+1,w
  7185  1534  0081               	movwf	1
  7186  1535                     l2053:	
  7187                           
  7188                           ;RF_Control_B1.c: 374: }
  7189                           ;RF_Control_B1.c: 375: product->Data[17]=product->Data[26 + sw];
  7190  1535  0020               	movlb	0	; select bank0
  7191  1536  0866               	movf	setRFSW_AdjControl@sw,w
  7192  1537  3E1A               	addlw	26
  7193  1538  077D               	addwf	_product,w
  7194  1539  00E4               	movwf	??_setRFSW_AdjControl
  7195  153A  0864               	movf	??_setRFSW_AdjControl,w
  7196  153B  0086               	movwf	6
  7197  153C  3001               	movlw	1	; select bank2/3
  7198  153D  0087               	movwf	7
  7199  153E  0801               	movf	1,w
  7200  153F  00E5               	movwf	??_setRFSW_AdjControl+1
  7201  1540  087D               	movf	_product,w
  7202  1541  3E11               	addlw	17
  7203  1542  0086               	movwf	6
  7204  1543  3001               	movlw	1	; select bank2/3
  7205  1544  0087               	movwf	7
  7206  1545  0865               	movf	??_setRFSW_AdjControl+1,w
  7207  1546  0081               	movwf	1
  7208                           
  7209                           ;RF_Control_B1.c: 376: setTxData(1);
  7210  1547  3001               	movlw	1
  7211  1548  318F  275A         	fcall	_setTxData
  7212  154A  0008               	return
  7213  154B                     __end_of_setRFSW_AdjControl:	
  7214                           
  7215                           	psect	text27
  7216  0800                     __ptext27:	
  7217 ;; *************** function _setRF_DimmerValue *****************
  7218 ;; Defined at:
  7219 ;;		line 387 in file "../src/RF_Control_B1.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  lights          1    wreg     unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  lights          1   67[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        3 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    9
  7240 ;; This function calls:
  7241 ;;		_setDimmerLights_AdjRF
  7242 ;; This function is called by:
  7243 ;;		_setRFSW_AdjControl
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setRF_DimmerValue
  7249  0800                     _setRF_DimmerValue:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7253                           ;setRF_DimmerValue@lights stored from wreg
  7254  0800  0020               	movlb	0	; select bank0
  7255  0801  00E3               	movwf	setRF_DimmerValue@lights
  7256                           
  7257                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  7258  0802  3065               	movlw	101
  7259  0803  0021               	movlb	1	; select bank1
  7260  0804  0229               	subwf	(_RF_Data^(0+128)+9),w
  7261  0805  1C03               	skipc
  7262  0806  280D               	goto	l5606
  7263                           
  7264                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  7265  0807  3064               	movlw	100
  7266  0808  0020               	movlb	0	; select bank0
  7267  0809  00E1               	movwf	??_setRF_DimmerValue
  7268  080A  0861               	movf	??_setRF_DimmerValue,w
  7269  080B  0021               	movlb	1	; select bank1
  7270  080C  00A9               	movwf	(_RF_Data^(0+128)+9)
  7271  080D                     l5606:	
  7272                           
  7273                           ;RF_Control_B1.c: 390: }
  7274                           ;RF_Control_B1.c: 391: product->Data[9]=RF_Data[9];
  7275  080D  0829               	movf	(_RF_Data^(0+128)+9),w
  7276  080E  0020               	movlb	0	; select bank0
  7277  080F  00E1               	movwf	??_setRF_DimmerValue
  7278  0810  087D               	movf	_product,w
  7279  0811  3E09               	addlw	9
  7280  0812  0086               	movwf	6
  7281  0813  3001               	movlw	1	; select bank2/3
  7282  0814  0087               	movwf	7
  7283  0815  0861               	movf	??_setRF_DimmerValue,w
  7284  0816  0081               	movwf	1
  7285                           
  7286                           ;RF_Control_B1.c: 392: product->Data[11]=lights;
  7287  0817  0863               	movf	setRF_DimmerValue@lights,w
  7288  0818  00E1               	movwf	??_setRF_DimmerValue
  7289  0819  087D               	movf	_product,w
  7290  081A  3E0B               	addlw	11
  7291  081B  0086               	movwf	6
  7292  081C  3001               	movlw	1	; select bank2/3
  7293  081D  0087               	movwf	7
  7294  081E  0861               	movf	??_setRF_DimmerValue,w
  7295  081F  0081               	movwf	1
  7296                           
  7297                           ;RF_Control_B1.c: 393: product->Data[(20 + lights)]=product->Data[9];
  7298  0820  087D               	movf	_product,w
  7299  0821  3E09               	addlw	9
  7300  0822  0086               	movwf	6
  7301  0823  3001               	movlw	1	; select bank2/3
  7302  0824  0087               	movwf	7
  7303  0825  0801               	movf	1,w
  7304  0826  00E1               	movwf	??_setRF_DimmerValue
  7305  0827  0863               	movf	setRF_DimmerValue@lights,w
  7306  0828  3E14               	addlw	20
  7307  0829  077D               	addwf	_product,w
  7308  082A  00E2               	movwf	??_setRF_DimmerValue+1
  7309  082B  0862               	movf	??_setRF_DimmerValue+1,w
  7310  082C  0086               	movwf	6
  7311  082D  3001               	movlw	1	; select bank2/3
  7312  082E  0087               	movwf	7
  7313  082F  0861               	movf	??_setRF_DimmerValue,w
  7314  0830  0081               	movwf	1
  7315                           
  7316                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  7317  0831  0863               	movf	setRF_DimmerValue@lights,w
  7318  0832  3192  22D2         	fcall	_setDimmerLights_AdjRF
  7319  0834  0008               	return
  7320  0835                     __end_of_setRF_DimmerValue:	
  7321                           
  7322                           	psect	text28
  7323  12D2                     __ptext28:	
  7324 ;; *************** function _setDimmerLights_AdjRF *****************
  7325 ;; Defined at:
  7326 ;;		line 526 in file "../src/Dimmer_B1.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  lights          1    wreg     unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  lights          1   64[BANK0 ] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;Total ram usage:        2 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    8
  7347 ;; This function calls:
  7348 ;;		_DimmerLightsPointSelect
  7349 ;;		_getPercentValue
  7350 ;; This function is called by:
  7351 ;;		_setRF_DimmerValue
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _setDimmerLights_AdjRF
  7357  12D2                     _setDimmerLights_AdjRF:	
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7361                           ;setDimmerLights_AdjRF@lights stored from wreg
  7362  12D2  0020               	movlb	0	; select bank0
  7363  12D3  00E0               	movwf	setDimmerLights_AdjRF@lights
  7364                           
  7365                           ;Dimmer_B1.c: 527: DimmerLightsPointSelect(lights);
  7366  12D4  0860               	movf	setDimmerLights_AdjRF@lights,w
  7367  12D5  3190  2082  3192   	fcall	_DimmerLightsPointSelect
  7368                           
  7369                           ;Dimmer_B1.c: 528: DimmerLights->AdjRF = 1;
  7370  12D8  0879               	movf	_DimmerLights,w
  7371  12D9  0086               	movwf	6
  7372  12DA  3001               	movlw	1	; select bank2/3
  7373  12DB  0087               	movwf	7
  7374  12DC  1501               	bsf	1,2
  7375                           
  7376                           ;Dimmer_B1.c: 529: DimmerLights->Signal = 1;
  7377  12DD  0879               	movf	_DimmerLights,w
  7378  12DE  0086               	movwf	6
  7379  12DF  3001               	movlw	1	; select bank2/3
  7380  12E0  0087               	movwf	7
  7381  12E1  1481               	bsf	1,1
  7382                           
  7383                           ;Dimmer_B1.c: 530: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7384  12E2  087D               	movf	_product,w
  7385  12E3  3E09               	addlw	9
  7386  12E4  0086               	movwf	6
  7387  12E5  3001               	movlw	1	; select bank2/3
  7388  12E6  0087               	movwf	7
  7389  12E7  0801               	movf	1,w
  7390  12E8  3197  2748         	fcall	_getPercentValue
  7391  12EA  0020               	movlb	0	; select bank0
  7392  12EB  00DF               	movwf	??_setDimmerLights_AdjRF
  7393  12EC  0879               	movf	_DimmerLights,w
  7394  12ED  3E05               	addlw	5
  7395  12EE  0086               	movwf	6
  7396  12EF  3001               	movlw	1	; select bank2/3
  7397  12F0  0087               	movwf	7
  7398  12F1  085F               	movf	??_setDimmerLights_AdjRF,w
  7399  12F2  0081               	movwf	1
  7400  12F3  0008               	return
  7401  12F4                     __end_of_setDimmerLights_AdjRF:	
  7402                           
  7403                           	psect	text29
  7404  1748                     __ptext29:	
  7405 ;; *************** function _getPercentValue *****************
  7406 ;; Defined at:
  7407 ;;		line 592 in file "../src/Dimmer_B1.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  value           1    wreg     unsigned char 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  value           1   59[BANK0 ] unsigned char 
  7412 ;;  i               3   60[BANK0 ] float 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      unsigned char 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2, status,0, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;Total ram usage:        6 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    7
  7429 ;; This function calls:
  7430 ;;		___awtoft
  7431 ;;		___ftadd
  7432 ;;		___ftdiv
  7433 ;;		___ftmul
  7434 ;;		___fttol
  7435 ;; This function is called by:
  7436 ;;		_setDimmerLights_AdjRF
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function _getPercentValue
  7442  1748                     _getPercentValue:	
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7446                           ;getPercentValue@value stored from wreg
  7447  1748  0020               	movlb	0	; select bank0
  7448  1749  00DB               	movwf	getPercentValue@value
  7449                           
  7450                           ;Dimmer_B1.c: 600: float i = ((char)(65*1.5)) - ((char)(20*1.5));
  7451  174A  3000               	movlw	0
  7452  174B  00DC               	movwf	getPercentValue@i
  7453  174C  3086               	movlw	134
  7454  174D  00DD               	movwf	getPercentValue@i+1
  7455  174E  3042               	movlw	66
  7456  174F  00DE               	movwf	getPercentValue@i+2
  7457                           
  7458                           ;Dimmer_B1.c: 601: i /= 100;
  7459  1750  3000               	movlw	0
  7460  1751  00AE               	movwf	___ftdiv@f2
  7461  1752  30C8               	movlw	200
  7462  1753  00AF               	movwf	___ftdiv@f2+1
  7463  1754  3042               	movlw	66
  7464  1755  00B0               	movwf	___ftdiv@f2+2
  7465  1756  085C               	movf	getPercentValue@i,w
  7466  1757  00B1               	movwf	___ftdiv@f1
  7467  1758  085D               	movf	getPercentValue@i+1,w
  7468  1759  00B2               	movwf	___ftdiv@f1+1
  7469  175A  085E               	movf	getPercentValue@i+2,w
  7470  175B  00B3               	movwf	___ftdiv@f1+2
  7471  175C  3186  26EB  3197   	fcall	___ftdiv
  7472  175F  0020               	movlb	0	; select bank0
  7473  1760  082E               	movf	?___ftdiv,w
  7474  1761  00DC               	movwf	getPercentValue@i
  7475  1762  082F               	movf	?___ftdiv+1,w
  7476  1763  00DD               	movwf	getPercentValue@i+1
  7477  1764  0830               	movf	?___ftdiv+2,w
  7478  1765  00DE               	movwf	getPercentValue@i+2
  7479                           
  7480                           ;Dimmer_B1.c: 602: return (char) (((100 - value) * i) + ((char)(65*1.5)));
  7481  1766  085B               	movf	getPercentValue@value,w
  7482  1767  00D9               	movwf	??_getPercentValue
  7483  1768  01DA               	clrf	??_getPercentValue+1
  7484  1769  09D9               	comf	??_getPercentValue,f
  7485  176A  09DA               	comf	??_getPercentValue+1,f
  7486  176B  0AD9               	incf	??_getPercentValue,f
  7487  176C  1903               	skipnz
  7488  176D  0ADA               	incf	??_getPercentValue+1,f
  7489  176E  0859               	movf	??_getPercentValue,w
  7490  176F  3E64               	addlw	100
  7491  1770  00A8               	movwf	___awtoft@c
  7492  1771  3000               	movlw	0
  7493  1772  3D5A               	addwfc	??_getPercentValue+1,w
  7494  1773  00A9               	movwf	___awtoft@c+1
  7495  1774  3192  228E  3197   	fcall	___awtoft
  7496  1777  0020               	movlb	0	; select bank0
  7497  1778  0828               	movf	?___awtoft,w
  7498  1779  00B1               	movwf	___ftmul@f2
  7499  177A  0829               	movf	?___awtoft+1,w
  7500  177B  00B2               	movwf	___ftmul@f2+1
  7501  177C  082A               	movf	?___awtoft+2,w
  7502  177D  00B3               	movwf	___ftmul@f2+2
  7503  177E  085C               	movf	getPercentValue@i,w
  7504  177F  00AE               	movwf	___ftmul@f1
  7505  1780  085D               	movf	getPercentValue@i+1,w
  7506  1781  00AF               	movwf	___ftmul@f1+1
  7507  1782  085E               	movf	getPercentValue@i+2,w
  7508  1783  00B0               	movwf	___ftmul@f1+2
  7509  1784  3184  24D7  3197   	fcall	___ftmul
  7510  1787  0020               	movlb	0	; select bank0
  7511  1788  082E               	movf	?___ftmul,w
  7512  1789  00C1               	movwf	___ftadd@f2
  7513  178A  082F               	movf	?___ftmul+1,w
  7514  178B  00C2               	movwf	___ftadd@f2+1
  7515  178C  0830               	movf	?___ftmul+2,w
  7516  178D  00C3               	movwf	___ftadd@f2+2
  7517  178E  3000               	movlw	0
  7518  178F  00BE               	movwf	___ftadd@f1
  7519  1790  30C2               	movlw	194
  7520  1791  00BF               	movwf	___ftadd@f1+1
  7521  1792  3042               	movlw	66
  7522  1793  00C0               	movwf	___ftadd@f1+2
  7523  1794  3183  23E1  3197   	fcall	___ftadd
  7524  1797  0020               	movlb	0	; select bank0
  7525  1798  083E               	movf	?___ftadd,w
  7526  1799  00CB               	movwf	___fttol@f1
  7527  179A  083F               	movf	?___ftadd+1,w
  7528  179B  00CC               	movwf	___fttol@f1+1
  7529  179C  0840               	movf	?___ftadd+2,w
  7530  179D  00CD               	movwf	___fttol@f1+2
  7531  179E  318C  248C         	fcall	___fttol
  7532  17A0  0020               	movlb	0	; select bank0
  7533  17A1  084B               	movf	?___fttol,w
  7534  17A2  0008               	return
  7535  17A3                     __end_of_getPercentValue:	
  7536                           
  7537                           	psect	text30
  7538  04D7                     __ptext30:	
  7539 ;; *************** function ___ftmul *****************
  7540 ;; Defined at:
  7541 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  f1              3   14[BANK0 ] float 
  7544 ;;  f2              3   17[BANK0 ] float 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7547 ;;  sign            1   29[BANK0 ] unsigned char 
  7548 ;;  cntr            1   28[BANK0 ] unsigned char 
  7549 ;;  exp             1   24[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  3   14[BANK0 ] float 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0, pclath, cstack
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7559 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;Total ram usage:       16 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    6
  7566 ;; This function calls:
  7567 ;;		___ftpack
  7568 ;; This function is called by:
  7569 ;;		_getPercentValue
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           
  7574                           ;psect for function ___ftmul
  7575  04D7                     ___ftmul:	
  7576                           
  7577                           ;incstack = 0
  7578                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7579  04D7  0020               	movlb	0	; select bank0
  7580  04D8  082E               	movf	___ftmul@f1,w
  7581  04D9  00B4               	movwf	??___ftmul
  7582  04DA  082F               	movf	___ftmul@f1+1,w
  7583  04DB  00B5               	movwf	??___ftmul+1
  7584  04DC  0830               	movf	___ftmul@f1+2,w
  7585  04DD  00B6               	movwf	??___ftmul+2
  7586  04DE  1003               	clrc
  7587  04DF  0D35               	rlf	??___ftmul+1,w
  7588  04E0  0D36               	rlf	??___ftmul+2,w
  7589  04E1  00B7               	movwf	??___ftmul+3
  7590  04E2  0837               	movf	??___ftmul+3,w
  7591  04E3  00B8               	movwf	___ftmul@exp
  7592  04E4  08B8               	movf	___ftmul@exp,f
  7593  04E5  1D03               	skipz
  7594  04E6  2CEE               	goto	l5286
  7595  04E7  3000               	movlw	0
  7596  04E8  00AE               	movwf	?___ftmul
  7597  04E9  3000               	movlw	0
  7598  04EA  00AF               	movwf	?___ftmul+1
  7599  04EB  3000               	movlw	0
  7600  04EC  00B0               	movwf	?___ftmul+2
  7601  04ED  0008               	return
  7602  04EE                     l5286:	
  7603  04EE  0831               	movf	___ftmul@f2,w
  7604  04EF  00B4               	movwf	??___ftmul
  7605  04F0  0832               	movf	___ftmul@f2+1,w
  7606  04F1  00B5               	movwf	??___ftmul+1
  7607  04F2  0833               	movf	___ftmul@f2+2,w
  7608  04F3  00B6               	movwf	??___ftmul+2
  7609  04F4  1003               	clrc
  7610  04F5  0D35               	rlf	??___ftmul+1,w
  7611  04F6  0D36               	rlf	??___ftmul+2,w
  7612  04F7  00B7               	movwf	??___ftmul+3
  7613  04F8  0837               	movf	??___ftmul+3,w
  7614  04F9  00BD               	movwf	___ftmul@sign
  7615  04FA  08BD               	movf	___ftmul@sign,f
  7616  04FB  1D03               	skipz
  7617  04FC  2D04               	goto	l5292
  7618  04FD  3000               	movlw	0
  7619  04FE  00AE               	movwf	?___ftmul
  7620  04FF  3000               	movlw	0
  7621  0500  00AF               	movwf	?___ftmul+1
  7622  0501  3000               	movlw	0
  7623  0502  00B0               	movwf	?___ftmul+2
  7624  0503  0008               	return
  7625  0504                     l5292:	
  7626  0504  083D               	movf	___ftmul@sign,w
  7627  0505  3E7B               	addlw	123
  7628  0506  00B4               	movwf	??___ftmul
  7629  0507  0834               	movf	??___ftmul,w
  7630  0508  07B8               	addwf	___ftmul@exp,f
  7631  0509  082E               	movf	___ftmul@f1,w
  7632  050A  00B4               	movwf	??___ftmul
  7633  050B  082F               	movf	___ftmul@f1+1,w
  7634  050C  00B5               	movwf	??___ftmul+1
  7635  050D  0830               	movf	___ftmul@f1+2,w
  7636  050E  00B6               	movwf	??___ftmul+2
  7637  050F  3010               	movlw	16
  7638  0510                     u3575:	
  7639  0510  36B6               	lsrf	??___ftmul+2,f
  7640  0511  0CB5               	rrf	??___ftmul+1,f
  7641  0512  0CB4               	rrf	??___ftmul,f
  7642  0513  0B89               	decfsz	9,f
  7643  0514  2D10               	goto	u3575
  7644  0515  0834               	movf	??___ftmul,w
  7645  0516  00B7               	movwf	??___ftmul+3
  7646  0517  0837               	movf	??___ftmul+3,w
  7647  0518  00BD               	movwf	___ftmul@sign
  7648  0519  0831               	movf	___ftmul@f2,w
  7649  051A  00B4               	movwf	??___ftmul
  7650  051B  0832               	movf	___ftmul@f2+1,w
  7651  051C  00B5               	movwf	??___ftmul+1
  7652  051D  0833               	movf	___ftmul@f2+2,w
  7653  051E  00B6               	movwf	??___ftmul+2
  7654  051F  3010               	movlw	16
  7655  0520                     u3585:	
  7656  0520  36B6               	lsrf	??___ftmul+2,f
  7657  0521  0CB5               	rrf	??___ftmul+1,f
  7658  0522  0CB4               	rrf	??___ftmul,f
  7659  0523  0B89               	decfsz	9,f
  7660  0524  2D20               	goto	u3585
  7661  0525  0834               	movf	??___ftmul,w
  7662  0526  00B7               	movwf	??___ftmul+3
  7663  0527  0837               	movf	??___ftmul+3,w
  7664  0528  06BD               	xorwf	___ftmul@sign,f
  7665  0529  3080               	movlw	128
  7666  052A  00B4               	movwf	??___ftmul
  7667  052B  0834               	movf	??___ftmul,w
  7668  052C  05BD               	andwf	___ftmul@sign,f
  7669  052D  17AF               	bsf	___ftmul@f1+1,7
  7670  052E  17B2               	bsf	___ftmul@f2+1,7
  7671  052F  30FF               	movlw	255
  7672  0530  05B1               	andwf	___ftmul@f2,f
  7673  0531  30FF               	movlw	255
  7674  0532  05B2               	andwf	___ftmul@f2+1,f
  7675  0533  3000               	movlw	0
  7676  0534  05B3               	andwf	___ftmul@f2+2,f
  7677  0535  3000               	movlw	0
  7678  0536  00B9               	movwf	___ftmul@f3_as_product
  7679  0537  3000               	movlw	0
  7680  0538  00BA               	movwf	___ftmul@f3_as_product+1
  7681  0539  3000               	movlw	0
  7682  053A  00BB               	movwf	___ftmul@f3_as_product+2
  7683  053B  3007               	movlw	7
  7684  053C  00B4               	movwf	??___ftmul
  7685  053D  0834               	movf	??___ftmul,w
  7686  053E  00BC               	movwf	___ftmul@cntr
  7687  053F                     l5304:	
  7688  053F  1C2E               	btfss	___ftmul@f1,0
  7689  0540  2D47               	goto	l5308
  7690  0541  0831               	movf	___ftmul@f2,w
  7691  0542  07B9               	addwf	___ftmul@f3_as_product,f
  7692  0543  0832               	movf	___ftmul@f2+1,w
  7693  0544  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7694  0545  0833               	movf	___ftmul@f2+2,w
  7695  0546  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7696  0547                     l5308:	
  7697  0547  3001               	movlw	1
  7698  0548                     u3605:	
  7699  0548  36B0               	lsrf	___ftmul@f1+2,f
  7700  0549  0CAF               	rrf	___ftmul@f1+1,f
  7701  054A  0CAE               	rrf	___ftmul@f1,f
  7702  054B  0B89               	decfsz	9,f
  7703  054C  2D48               	goto	u3605
  7704  054D  3001               	movlw	1
  7705  054E                     u3615:	
  7706  054E  35B1               	lslf	___ftmul@f2,f
  7707  054F  0DB2               	rlf	___ftmul@f2+1,f
  7708  0550  0DB3               	rlf	___ftmul@f2+2,f
  7709  0551  0B89               	decfsz	9,f
  7710  0552  2D4E               	goto	u3615
  7711  0553  3001               	movlw	1
  7712  0554  02BC               	subwf	___ftmul@cntr,f
  7713  0555  1D03               	btfss	3,2
  7714  0556  2D3F               	goto	l5304
  7715  0557  3009               	movlw	9
  7716  0558  00B4               	movwf	??___ftmul
  7717  0559  0834               	movf	??___ftmul,w
  7718  055A  00BC               	movwf	___ftmul@cntr
  7719  055B                     l5316:	
  7720  055B  1C2E               	btfss	___ftmul@f1,0
  7721  055C  2D63               	goto	l5320
  7722  055D  0831               	movf	___ftmul@f2,w
  7723  055E  07B9               	addwf	___ftmul@f3_as_product,f
  7724  055F  0832               	movf	___ftmul@f2+1,w
  7725  0560  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7726  0561  0833               	movf	___ftmul@f2+2,w
  7727  0562  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7728  0563                     l5320:	
  7729  0563  3001               	movlw	1
  7730  0564                     u3645:	
  7731  0564  36B0               	lsrf	___ftmul@f1+2,f
  7732  0565  0CAF               	rrf	___ftmul@f1+1,f
  7733  0566  0CAE               	rrf	___ftmul@f1,f
  7734  0567  0B89               	decfsz	9,f
  7735  0568  2D64               	goto	u3645
  7736  0569  3001               	movlw	1
  7737  056A                     u3655:	
  7738  056A  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7739  056B  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7740  056C  0CB9               	rrf	___ftmul@f3_as_product,f
  7741  056D  0B89               	decfsz	9,f
  7742  056E  2D6A               	goto	u3655
  7743  056F  3001               	movlw	1
  7744  0570  02BC               	subwf	___ftmul@cntr,f
  7745  0571  1D03               	btfss	3,2
  7746  0572  2D5B               	goto	l5316
  7747  0573  0839               	movf	___ftmul@f3_as_product,w
  7748  0574  00A0               	movwf	___ftpack@arg
  7749  0575  083A               	movf	___ftmul@f3_as_product+1,w
  7750  0576  00A1               	movwf	___ftpack@arg+1
  7751  0577  083B               	movf	___ftmul@f3_as_product+2,w
  7752  0578  00A2               	movwf	___ftpack@arg+2
  7753  0579  0838               	movf	___ftmul@exp,w
  7754  057A  00B4               	movwf	??___ftmul
  7755  057B  0834               	movf	??___ftmul,w
  7756  057C  00A3               	movwf	___ftpack@exp
  7757  057D  083D               	movf	___ftmul@sign,w
  7758  057E  00B5               	movwf	??___ftmul+1
  7759  057F  0835               	movf	??___ftmul+1,w
  7760  0580  00A4               	movwf	___ftpack@sign
  7761  0581  3188  2093         	fcall	___ftpack
  7762  0583  0020               	movlb	0	; select bank0
  7763  0584  0820               	movf	?___ftpack,w
  7764  0585  00AE               	movwf	?___ftmul
  7765  0586  0821               	movf	?___ftpack+1,w
  7766  0587  00AF               	movwf	?___ftmul+1
  7767  0588  0822               	movf	?___ftpack+2,w
  7768  0589  00B0               	movwf	?___ftmul+2
  7769  058A  0008               	return
  7770  058B                     __end_of___ftmul:	
  7771                           
  7772                           	psect	text31
  7773  03E1                     __ptext31:	
  7774 ;; *************** function ___ftadd *****************
  7775 ;; Defined at:
  7776 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  f1              3   30[BANK0 ] float 
  7779 ;;  f2              3   33[BANK0 ] float 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  exp1            1   42[BANK0 ] unsigned char 
  7782 ;;  exp2            1   41[BANK0 ] unsigned char 
  7783 ;;  sign            1   40[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  3   30[BANK0 ] float 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, pclath, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:       13 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    6
  7800 ;; This function calls:
  7801 ;;		___ftpack
  7802 ;; This function is called by:
  7803 ;;		_getPercentValue
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function ___ftadd
  7809  03E1                     ___ftadd:	
  7810                           
  7811                           ;incstack = 0
  7812                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7813  03E1  0020               	movlb	0	; select bank0
  7814  03E2  083E               	movf	___ftadd@f1,w
  7815  03E3  00C4               	movwf	??___ftadd
  7816  03E4  083F               	movf	___ftadd@f1+1,w
  7817  03E5  00C5               	movwf	??___ftadd+1
  7818  03E6  0840               	movf	___ftadd@f1+2,w
  7819  03E7  00C6               	movwf	??___ftadd+2
  7820  03E8  1003               	clrc
  7821  03E9  0D45               	rlf	??___ftadd+1,w
  7822  03EA  0D46               	rlf	??___ftadd+2,w
  7823  03EB  00C7               	movwf	??___ftadd+3
  7824  03EC  0847               	movf	??___ftadd+3,w
  7825  03ED  00CA               	movwf	___ftadd@exp1
  7826  03EE  0841               	movf	___ftadd@f2,w
  7827  03EF  00C4               	movwf	??___ftadd
  7828  03F0  0842               	movf	___ftadd@f2+1,w
  7829  03F1  00C5               	movwf	??___ftadd+1
  7830  03F2  0843               	movf	___ftadd@f2+2,w
  7831  03F3  00C6               	movwf	??___ftadd+2
  7832  03F4  1003               	clrc
  7833  03F5  0D45               	rlf	??___ftadd+1,w
  7834  03F6  0D46               	rlf	??___ftadd+2,w
  7835  03F7  00C7               	movwf	??___ftadd+3
  7836  03F8  0847               	movf	??___ftadd+3,w
  7837  03F9  00C9               	movwf	___ftadd@exp2
  7838  03FA  084A               	movf	___ftadd@exp1,w
  7839  03FB  1903               	btfsc	3,2
  7840  03FC  2C09               	goto	l5174
  7841  03FD  0849               	movf	___ftadd@exp2,w
  7842  03FE  024A               	subwf	___ftadd@exp1,w
  7843  03FF  1803               	skipnc
  7844  0400  2C10               	goto	l5178
  7845  0401  034A               	decf	___ftadd@exp1,w
  7846  0402  3AFF               	xorlw	255
  7847  0403  0749               	addwf	___ftadd@exp2,w
  7848  0404  00C4               	movwf	??___ftadd
  7849  0405  3019               	movlw	25
  7850  0406  0244               	subwf	??___ftadd,w
  7851  0407  1C03               	skipc
  7852  0408  2C10               	goto	l5178
  7853  0409                     l5174:	
  7854  0409  0841               	movf	___ftadd@f2,w
  7855  040A  00BE               	movwf	?___ftadd
  7856  040B  0842               	movf	___ftadd@f2+1,w
  7857  040C  00BF               	movwf	?___ftadd+1
  7858  040D  0843               	movf	___ftadd@f2+2,w
  7859  040E  00C0               	movwf	?___ftadd+2
  7860  040F  0008               	return
  7861  0410                     l5178:	
  7862  0410  0849               	movf	___ftadd@exp2,w
  7863  0411  1903               	btfsc	3,2
  7864  0412  0008               	return
  7865  0413  084A               	movf	___ftadd@exp1,w
  7866  0414  0249               	subwf	___ftadd@exp2,w
  7867  0415  1803               	skipnc
  7868  0416  2C1F               	goto	l5184
  7869  0417  0349               	decf	___ftadd@exp2,w
  7870  0418  3AFF               	xorlw	255
  7871  0419  074A               	addwf	___ftadd@exp1,w
  7872  041A  00C4               	movwf	??___ftadd
  7873  041B  3019               	movlw	25
  7874  041C  0244               	subwf	??___ftadd,w
  7875  041D  1803               	btfsc	3,0
  7876  041E  0008               	return
  7877  041F                     l5184:	
  7878  041F  3006               	movlw	6
  7879  0420  00C4               	movwf	??___ftadd
  7880  0421  0844               	movf	??___ftadd,w
  7881  0422  00C8               	movwf	___ftadd@sign
  7882  0423  1BC0               	btfsc	___ftadd@f1+2,7
  7883  0424  17C8               	bsf	___ftadd@sign,7
  7884  0425  1BC3               	btfsc	___ftadd@f2+2,7
  7885  0426  1748               	bsf	___ftadd@sign,6
  7886  0427  17BF               	bsf	___ftadd@f1+1,7
  7887  0428  30FF               	movlw	255
  7888  0429  05BE               	andwf	___ftadd@f1,f
  7889  042A  30FF               	movlw	255
  7890  042B  05BF               	andwf	___ftadd@f1+1,f
  7891  042C  3000               	movlw	0
  7892  042D  05C0               	andwf	___ftadd@f1+2,f
  7893  042E  17C2               	bsf	___ftadd@f2+1,7
  7894  042F  30FF               	movlw	255
  7895  0430  05C1               	andwf	___ftadd@f2,f
  7896  0431  30FF               	movlw	255
  7897  0432  05C2               	andwf	___ftadd@f2+1,f
  7898  0433  3000               	movlw	0
  7899  0434  05C3               	andwf	___ftadd@f2+2,f
  7900  0435  0849               	movf	___ftadd@exp2,w
  7901  0436  024A               	subwf	___ftadd@exp1,w
  7902  0437  1803               	skipnc
  7903  0438  2C5B               	goto	l5206
  7904  0439                     l5196:	
  7905  0439  3001               	movlw	1
  7906  043A                     u3335:	
  7907  043A  35C1               	lslf	___ftadd@f2,f
  7908  043B  0DC2               	rlf	___ftadd@f2+1,f
  7909  043C  0DC3               	rlf	___ftadd@f2+2,f
  7910  043D  0B89               	decfsz	9,f
  7911  043E  2C3A               	goto	u3335
  7912  043F  3001               	movlw	1
  7913  0440  02C9               	subwf	___ftadd@exp2,f
  7914  0441  0849               	movf	___ftadd@exp2,w
  7915  0442  064A               	xorwf	___ftadd@exp1,w
  7916  0443  1903               	skipnz
  7917  0444  2C56               	goto	l5204
  7918  0445  3001               	movlw	1
  7919  0446  02C8               	subwf	___ftadd@sign,f
  7920  0447  0848               	movf	___ftadd@sign,w
  7921  0448  3907               	andlw	7
  7922  0449  1903               	btfsc	3,2
  7923  044A  2C56               	goto	l5204
  7924  044B  2C39               	goto	l5196
  7925  044C                     l5202:	
  7926  044C  3001               	movlw	1
  7927  044D                     u3365:	
  7928  044D  36C0               	lsrf	___ftadd@f1+2,f
  7929  044E  0CBF               	rrf	___ftadd@f1+1,f
  7930  044F  0CBE               	rrf	___ftadd@f1,f
  7931  0450  0B89               	decfsz	9,f
  7932  0451  2C4D               	goto	u3365
  7933  0452  3001               	movlw	1
  7934  0453  00C4               	movwf	??___ftadd
  7935  0454  0844               	movf	??___ftadd,w
  7936  0455  07CA               	addwf	___ftadd@exp1,f
  7937  0456                     l5204:	
  7938  0456  084A               	movf	___ftadd@exp1,w
  7939  0457  0649               	xorwf	___ftadd@exp2,w
  7940  0458  1903               	btfsc	3,2
  7941  0459  2C80               	goto	l2933
  7942  045A  2C4C               	goto	l5202
  7943  045B                     l5206:	
  7944  045B  084A               	movf	___ftadd@exp1,w
  7945  045C  0249               	subwf	___ftadd@exp2,w
  7946  045D  1803               	skipnc
  7947  045E  2C80               	goto	l2933
  7948  045F                     l5208:	
  7949  045F  3001               	movlw	1
  7950  0460                     u3395:	
  7951  0460  35BE               	lslf	___ftadd@f1,f
  7952  0461  0DBF               	rlf	___ftadd@f1+1,f
  7953  0462  0DC0               	rlf	___ftadd@f1+2,f
  7954  0463  0B89               	decfsz	9,f
  7955  0464  2C60               	goto	u3395
  7956  0465  3001               	movlw	1
  7957  0466  02CA               	subwf	___ftadd@exp1,f
  7958  0467  0849               	movf	___ftadd@exp2,w
  7959  0468  064A               	xorwf	___ftadd@exp1,w
  7960  0469  1903               	skipnz
  7961  046A  2C7C               	goto	l5216
  7962  046B  3001               	movlw	1
  7963  046C  02C8               	subwf	___ftadd@sign,f
  7964  046D  0848               	movf	___ftadd@sign,w
  7965  046E  3907               	andlw	7
  7966  046F  1903               	btfsc	3,2
  7967  0470  2C7C               	goto	l5216
  7968  0471  2C5F               	goto	l5208
  7969  0472                     l5214:	
  7970  0472  3001               	movlw	1
  7971  0473                     u3425:	
  7972  0473  36C3               	lsrf	___ftadd@f2+2,f
  7973  0474  0CC2               	rrf	___ftadd@f2+1,f
  7974  0475  0CC1               	rrf	___ftadd@f2,f
  7975  0476  0B89               	decfsz	9,f
  7976  0477  2C73               	goto	u3425
  7977  0478  3001               	movlw	1
  7978  0479  00C4               	movwf	??___ftadd
  7979  047A  0844               	movf	??___ftadd,w
  7980  047B  07C9               	addwf	___ftadd@exp2,f
  7981  047C                     l5216:	
  7982  047C  084A               	movf	___ftadd@exp1,w
  7983  047D  0649               	xorwf	___ftadd@exp2,w
  7984  047E  1D03               	skipz
  7985  047F  2C72               	goto	l5214
  7986  0480                     l2933:	
  7987  0480  1FC8               	btfss	___ftadd@sign,7
  7988  0481  2C92               	goto	l5220
  7989  0482  30FF               	movlw	255
  7990  0483  06BE               	xorwf	___ftadd@f1,f
  7991  0484  30FF               	movlw	255
  7992  0485  06BF               	xorwf	___ftadd@f1+1,f
  7993  0486  30FF               	movlw	255
  7994  0487  06C0               	xorwf	___ftadd@f1+2,f
  7995  0488  3001               	movlw	1
  7996  0489  07BE               	addwf	___ftadd@f1,f
  7997  048A  3000               	movlw	0
  7998  048B  1803               	skipnc
  7999  048C  3001               	movlw	1
  8000  048D  07BF               	addwf	___ftadd@f1+1,f
  8001  048E  3000               	movlw	0
  8002  048F  1803               	skipnc
  8003  0490  3001               	movlw	1
  8004  0491  07C0               	addwf	___ftadd@f1+2,f
  8005  0492                     l5220:	
  8006  0492  1F48               	btfss	___ftadd@sign,6
  8007  0493  2CA4               	goto	l5224
  8008  0494  30FF               	movlw	255
  8009  0495  06C1               	xorwf	___ftadd@f2,f
  8010  0496  30FF               	movlw	255
  8011  0497  06C2               	xorwf	___ftadd@f2+1,f
  8012  0498  30FF               	movlw	255
  8013  0499  06C3               	xorwf	___ftadd@f2+2,f
  8014  049A  3001               	movlw	1
  8015  049B  07C1               	addwf	___ftadd@f2,f
  8016  049C  3000               	movlw	0
  8017  049D  1803               	skipnc
  8018  049E  3001               	movlw	1
  8019  049F  07C2               	addwf	___ftadd@f2+1,f
  8020  04A0  3000               	movlw	0
  8021  04A1  1803               	skipnc
  8022  04A2  3001               	movlw	1
  8023  04A3  07C3               	addwf	___ftadd@f2+2,f
  8024  04A4                     l5224:	
  8025  04A4  01C8               	clrf	___ftadd@sign
  8026  04A5  083E               	movf	___ftadd@f1,w
  8027  04A6  07C1               	addwf	___ftadd@f2,f
  8028  04A7  083F               	movf	___ftadd@f1+1,w
  8029  04A8  3DC2               	addwfc	___ftadd@f2+1,f
  8030  04A9  0840               	movf	___ftadd@f1+2,w
  8031  04AA  3DC3               	addwfc	___ftadd@f2+2,f
  8032  04AB  1FC3               	btfss	___ftadd@f2+2,7
  8033  04AC  2CBF               	goto	l5234
  8034  04AD  30FF               	movlw	255
  8035  04AE  06C1               	xorwf	___ftadd@f2,f
  8036  04AF  30FF               	movlw	255
  8037  04B0  06C2               	xorwf	___ftadd@f2+1,f
  8038  04B1  30FF               	movlw	255
  8039  04B2  06C3               	xorwf	___ftadd@f2+2,f
  8040  04B3  3001               	movlw	1
  8041  04B4  07C1               	addwf	___ftadd@f2,f
  8042  04B5  3000               	movlw	0
  8043  04B6  1803               	skipnc
  8044  04B7  3001               	movlw	1
  8045  04B8  07C2               	addwf	___ftadd@f2+1,f
  8046  04B9  3000               	movlw	0
  8047  04BA  1803               	skipnc
  8048  04BB  3001               	movlw	1
  8049  04BC  07C3               	addwf	___ftadd@f2+2,f
  8050  04BD  01C8               	clrf	___ftadd@sign
  8051  04BE  0AC8               	incf	___ftadd@sign,f
  8052  04BF                     l5234:	
  8053  04BF  0841               	movf	___ftadd@f2,w
  8054  04C0  00A0               	movwf	___ftpack@arg
  8055  04C1  0842               	movf	___ftadd@f2+1,w
  8056  04C2  00A1               	movwf	___ftpack@arg+1
  8057  04C3  0843               	movf	___ftadd@f2+2,w
  8058  04C4  00A2               	movwf	___ftpack@arg+2
  8059  04C5  084A               	movf	___ftadd@exp1,w
  8060  04C6  00C4               	movwf	??___ftadd
  8061  04C7  0844               	movf	??___ftadd,w
  8062  04C8  00A3               	movwf	___ftpack@exp
  8063  04C9  0848               	movf	___ftadd@sign,w
  8064  04CA  00C5               	movwf	??___ftadd+1
  8065  04CB  0845               	movf	??___ftadd+1,w
  8066  04CC  00A4               	movwf	___ftpack@sign
  8067  04CD  3188  2093         	fcall	___ftpack
  8068  04CF  0020               	movlb	0	; select bank0
  8069  04D0  0820               	movf	?___ftpack,w
  8070  04D1  00BE               	movwf	?___ftadd
  8071  04D2  0821               	movf	?___ftpack+1,w
  8072  04D3  00BF               	movwf	?___ftadd+1
  8073  04D4  0822               	movf	?___ftpack+2,w
  8074  04D5  00C0               	movwf	?___ftadd+2
  8075  04D6  0008               	return
  8076  04D7                     __end_of___ftadd:	
  8077                           
  8078                           	psect	text32
  8079  131A                     __ptext32:	
  8080 ;; *************** function _RF_RxDisable *****************
  8081 ;; Defined at:
  8082 ;;		line 187 in file "../src/RF_Control_B1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  rf              1    wreg     unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  rf              1    4[BANK0 ] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        1 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    7
  8103 ;; This function calls:
  8104 ;;		_CC2500_WriteCommand
  8105 ;;		_RfPointSelect
  8106 ;;		_setINT_GO
  8107 ;; This function is called by:
  8108 ;;		_setRF_Main
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _RF_RxDisable
  8114  131A                     _RF_RxDisable:	
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8118                           ;RF_RxDisable@rf stored from wreg
  8119  131A  0020               	movlb	0	; select bank0
  8120  131B  00A4               	movwf	RF_RxDisable@rf
  8121                           
  8122                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  8123  131C  0824               	movf	RF_RxDisable@rf,w
  8124  131D  319E  26DE  3193   	fcall	_RfPointSelect
  8125                           
  8126                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  8127  1320  0021               	movlb	1	; select bank1
  8128  1321  083E               	movf	_RF^(0+128),w
  8129  1322  0086               	movwf	6
  8130  1323  0187               	clrf	7
  8131  1324  1D81               	btfss	1,3
  8132  1325  0008               	return
  8133                           
  8134                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  8135  1326  083E               	movf	_RF^(0+128),w
  8136  1327  0086               	movwf	6
  8137  1328  0187               	clrf	7
  8138  1329  1181               	bcf	1,3
  8139                           
  8140                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  8141  132A  083E               	movf	_RF^(0+128),w
  8142  132B  0086               	movwf	6
  8143  132C  0187               	clrf	7
  8144  132D  1081               	bcf	1,1
  8145                           
  8146                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  8147  132E  0A3E               	incf	_RF^(0+128),w
  8148  132F  0086               	movwf	6
  8149  1330  0187               	clrf	7
  8150  1331  0181               	clrf	1
  8151                           
  8152                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  8153  1332  083E               	movf	_RF^(0+128),w
  8154  1333  0086               	movwf	6
  8155  1334  0187               	clrf	7
  8156  1335  1281               	bcf	1,5
  8157                           
  8158                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  8159  1336  3036               	movlw	54
  8160  1337  319F  277D  3193   	fcall	_CC2500_WriteCommand
  8161                           
  8162                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  8163  133A  303A               	movlw	58
  8164  133B  319F  277D  3193   	fcall	_CC2500_WriteCommand
  8165                           
  8166                           ;RF_Control_B1.c: 197: setINT_GO(0);
  8167  133E  3000               	movlw	0
  8168  133F  3190  2067         	fcall	_setINT_GO
  8169  1341  0008               	return
  8170  1342                     __end_of_RF_RxDisable:	
  8171                           
  8172                           	psect	text33
  8173  1067                     __ptext33:	
  8174 ;; *************** function _setINT_GO *****************
  8175 ;; Defined at:
  8176 ;;		line 296 in file "../src/MCU_B1.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;  command         1    wreg     unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  command         1    0[BANK0 ] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:        1 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    5
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		_setRF_Main
  8201 ;;		_setRF_Enable
  8202 ;;		_RF_RxDisable
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           
  8207                           ;psect for function _setINT_GO
  8208  1067                     _setINT_GO:	
  8209                           
  8210                           ;incstack = 0
  8211                           ; Regs used in _setINT_GO: [wreg]
  8212                           ;setINT_GO@command stored from wreg
  8213  1067  0020               	movlb	0	; select bank0
  8214  1068  00A0               	movwf	setINT_GO@command
  8215                           
  8216                           ;MCU_B1.c: 297: INTF = 0;
  8217  1069  108B               	bcf	11,1	;volatile
  8218                           
  8219                           ;MCU_B1.c: 298: INTE = command;
  8220  106A  1C20               	btfss	setINT_GO@command,0
  8221  106B  286E               	goto	u4330
  8222  106C  160B               	bsf	11,4	;volatile
  8223  106D  0008               	return
  8224  106E                     u4330:	
  8225  106E  120B               	bcf	11,4	;volatile
  8226  106F  0008               	return
  8227  1070                     __end_of_setINT_GO:	
  8228                           
  8229                           	psect	text34
  8230  154B                     __ptext34:	
  8231 ;; *************** function _CC2500_TxData *****************
  8232 ;; Defined at:
  8233 ;;		line 32 in file "../src/CC2500_B1.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;		None               void
  8240 ;; Registers used:
  8241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        2 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    7
  8254 ;; This function calls:
  8255 ;;		_CC2500_WriteByte
  8256 ;;		_CC2500_WriteCommand
  8257 ;; This function is called by:
  8258 ;;		_setRF_Main
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _CC2500_TxData
  8264  154B                     _CC2500_TxData:	
  8265                           
  8266                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8267                           ;CC2500_B1.c: 35: RC4 = 0;
  8268                           
  8269                           ;incstack = 0
  8270                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8271  154B  0020               	movlb	0	; select bank0
  8272  154C  120E               	bcf	14,4	;volatile
  8273                           
  8274                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8275  154D  307F               	movlw	127
  8276  154E  00A4               	movwf	??_CC2500_TxData
  8277  154F  0824               	movf	??_CC2500_TxData,w
  8278  1550  0021               	movlb	1	; select bank1
  8279  1551  00C2               	movwf	_SPI0Buffer^(0+128)
  8280  1552                     l270:	
  8281                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8282                           
  8283  1552  0020               	movlb	0	; select bank0
  8284  1553  190E               	btfsc	14,2	;volatile
  8285  1554  2D52               	goto	l270
  8286                           
  8287                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8288  1555  3191  2146  3195   	fcall	_CC2500_WriteByte
  8289                           
  8290                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8291  1558  0021               	movlb	1	; select bank1
  8292  1559  0843               	movf	_Tx_Length^(0+128),w
  8293  155A  0020               	movlb	0	; select bank0
  8294  155B  00A4               	movwf	??_CC2500_TxData
  8295  155C  0824               	movf	??_CC2500_TxData,w
  8296  155D  0021               	movlb	1	; select bank1
  8297  155E  00C2               	movwf	_SPI0Buffer^(0+128)
  8298                           
  8299                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8300  155F  3191  2146  3195   	fcall	_CC2500_WriteByte
  8301                           
  8302                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8303  1562  0020               	movlb	0	; select bank0
  8304  1563  01A5               	clrf	CC2500_TxData@loop_e
  8305  1564                     l5842:	
  8306  1564  0021               	movlb	1	; select bank1
  8307  1565  0843               	movf	_Tx_Length^(0+128),w
  8308  1566  0020               	movlb	0	; select bank0
  8309  1567  0225               	subwf	CC2500_TxData@loop_e,w
  8310  1568  1803               	btfsc	3,0
  8311  1569  2D7C               	goto	l275
  8312                           
  8313                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8314  156A  0825               	movf	CC2500_TxData@loop_e,w
  8315  156B  3EA0               	addlw	_RF_Data& (0+255)
  8316  156C  0086               	movwf	6
  8317  156D  0187               	clrf	7
  8318  156E  0801               	movf	1,w
  8319  156F  00A4               	movwf	??_CC2500_TxData
  8320  1570  0824               	movf	??_CC2500_TxData,w
  8321  1571  0021               	movlb	1	; select bank1
  8322  1572  00C2               	movwf	_SPI0Buffer^(0+128)
  8323                           
  8324                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8325  1573  3191  2146  3195   	fcall	_CC2500_WriteByte
  8326  1576  3001               	movlw	1
  8327  1577  0020               	movlb	0	; select bank0
  8328  1578  00A4               	movwf	??_CC2500_TxData
  8329  1579  0824               	movf	??_CC2500_TxData,w
  8330  157A  07A5               	addwf	CC2500_TxData@loop_e,f
  8331  157B  2D64               	goto	l5842
  8332  157C                     l275:	
  8333                           
  8334                           ;CC2500_B1.c: 44: }
  8335                           ;CC2500_B1.c: 45: RC4 = 1;
  8336  157C  160E               	bsf	14,4	;volatile
  8337                           
  8338                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8339  157D  3035               	movlw	53
  8340  157E  319F  277D  3195   	fcall	_CC2500_WriteCommand
  8341  1581                     l276:	
  8342                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8343                           
  8344  1581  0020               	movlb	0	; select bank0
  8345  1582  1C0D               	btfss	13,0	;volatile
  8346  1583  2D81               	goto	l276
  8347  1584                     l279:	
  8348                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8349                           
  8350  1584  180D               	btfsc	13,0	;volatile
  8351  1585  2D84               	goto	l279
  8352                           
  8353                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8354  1586  3036               	movlw	54
  8355  1587  319F  277D  3195   	fcall	_CC2500_WriteCommand
  8356                           
  8357                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8358  158A  303B               	movlw	59
  8359  158B  319F  277D         	fcall	_CC2500_WriteCommand
  8360                           
  8361                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8362  158D  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8363  158E  0008               	return
  8364  158F                     __end_of_CC2500_TxData:	
  8365                           
  8366                           	psect	text35
  8367  08F4                     __ptext35:	
  8368 ;; *************** function _CC2500_RxData *****************
  8369 ;; Defined at:
  8370 ;;		line 57 in file "../src/CC2500_B1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        2 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    7
  8391 ;; This function calls:
  8392 ;;		_CC2500_ReadByte
  8393 ;;		_CC2500_ReadStatus
  8394 ;;		_CC2500_WriteByte
  8395 ;;		_CC2500_WriteCommand
  8396 ;;		_setRF_RxStatus
  8397 ;; This function is called by:
  8398 ;;		_setRF_Main
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _CC2500_RxData
  8404  08F4                     _CC2500_RxData:	
  8405                           
  8406                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8407                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8411  08F4  0020               	movlb	0	; select bank0
  8412  08F5  180D               	btfsc	13,0	;volatile
  8413  08F6                     l286:	
  8414                           ;CC2500_B1.c: 63: {
  8415                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8416                           
  8417  08F6  180D               	btfsc	13,0	;volatile
  8418  08F7  28F6               	goto	l286
  8419                           
  8420                           ;CC2500_B1.c: 65: }
  8421                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8422  08F8  303B               	movlw	59
  8423  08F9  3191  21DF  3188   	fcall	_CC2500_ReadStatus
  8424                           
  8425                           ;CC2500_B1.c: 67: if (s_data != 0)
  8426  08FC  0021               	movlb	1	; select bank1
  8427  08FD  0846               	movf	_s_data^(0+128),w
  8428  08FE  1903               	btfsc	3,2
  8429  08FF  294A               	goto	l5888
  8430                           
  8431                           ;CC2500_B1.c: 69: {
  8432                           ;CC2500_B1.c: 70: RC4 = 0;
  8433  0900  0020               	movlb	0	; select bank0
  8434  0901  120E               	bcf	14,4	;volatile
  8435                           
  8436                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8437  0902  30FF               	movlw	255
  8438  0903  00A4               	movwf	??_CC2500_RxData
  8439  0904  0824               	movf	??_CC2500_RxData,w
  8440  0905  0021               	movlb	1	; select bank1
  8441  0906  00C2               	movwf	_SPI0Buffer^(0+128)
  8442  0907                     l290:	
  8443                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8444                           
  8445  0907  0020               	movlb	0	; select bank0
  8446  0908  190E               	btfsc	14,2	;volatile
  8447  0909  2907               	goto	l290
  8448                           
  8449                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8450  090A  3191  2146  3188   	fcall	_CC2500_WriteByte
  8451                           
  8452                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8453  090D  3192  2232  3188   	fcall	_CC2500_ReadByte
  8454                           
  8455                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8456  0910  0021               	movlb	1	; select bank1
  8457  0911  0842               	movf	_SPI0Buffer^(0+128),w
  8458  0912  0020               	movlb	0	; select bank0
  8459  0913  00A4               	movwf	??_CC2500_RxData
  8460  0914  0824               	movf	??_CC2500_RxData,w
  8461  0915  0021               	movlb	1	; select bank1
  8462  0916  00C1               	movwf	_Rx_Length^(0+128)
  8463                           
  8464                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8465  0917  0020               	movlb	0	; select bank0
  8466  0918  01A5               	clrf	CC2500_RxData@loop_f
  8467  0919                     l5874:	
  8468  0919  0021               	movlb	1	; select bank1
  8469  091A  0841               	movf	_Rx_Length^(0+128),w
  8470  091B  0020               	movlb	0	; select bank0
  8471  091C  0225               	subwf	CC2500_RxData@loop_f,w
  8472  091D  1803               	btfsc	3,0
  8473  091E  2931               	goto	l5876
  8474                           
  8475                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8476  091F  3192  2232  3188   	fcall	_CC2500_ReadByte
  8477                           
  8478                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8479  0922  0021               	movlb	1	; select bank1
  8480  0923  0842               	movf	_SPI0Buffer^(0+128),w
  8481  0924  0020               	movlb	0	; select bank0
  8482  0925  00A4               	movwf	??_CC2500_RxData
  8483  0926  0825               	movf	CC2500_RxData@loop_f,w
  8484  0927  3EA0               	addlw	_RF_Data& (0+255)
  8485  0928  0086               	movwf	6
  8486  0929  0187               	clrf	7
  8487  092A  0824               	movf	??_CC2500_RxData,w
  8488  092B  0081               	movwf	1
  8489  092C  3001               	movlw	1
  8490  092D  00A4               	movwf	??_CC2500_RxData
  8491  092E  0824               	movf	??_CC2500_RxData,w
  8492  092F  07A5               	addwf	CC2500_RxData@loop_f,f
  8493  0930  2919               	goto	l5874
  8494  0931                     l5876:	
  8495                           
  8496                           ;CC2500_B1.c: 80: }
  8497                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8498  0931  3192  2232  3188   	fcall	_CC2500_ReadByte
  8499                           
  8500                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8501  0934  0021               	movlb	1	; select bank1
  8502  0935  0842               	movf	_SPI0Buffer^(0+128),w
  8503  0936  0020               	movlb	0	; select bank0
  8504  0937  00A4               	movwf	??_CC2500_RxData
  8505  0938  0824               	movf	??_CC2500_RxData,w
  8506  0939  0021               	movlb	1	; select bank1
  8507  093A  00C0               	movwf	_RSSI^(0+128)
  8508                           
  8509                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8510  093B  3192  2232  3188   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8513  093E  0021               	movlb	1	; select bank1
  8514  093F  0842               	movf	_SPI0Buffer^(0+128),w
  8515  0940  0020               	movlb	0	; select bank0
  8516  0941  00A4               	movwf	??_CC2500_RxData
  8517  0942  0824               	movf	??_CC2500_RxData,w
  8518  0943  0021               	movlb	1	; select bank1
  8519  0944  00B8               	movwf	_CRC^(0+128)
  8520                           
  8521                           ;CC2500_B1.c: 85: RC4 = 1;
  8522  0945  0020               	movlb	0	; select bank0
  8523  0946  160E               	bsf	14,4	;volatile
  8524                           
  8525                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8526  0947  0021               	movlb	1	; select bank1
  8527  0948  1BB8               	btfsc	_CRC^(0+128),7
  8528                           
  8529                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8530  0949  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8531  094A                     l5888:	
  8532                           
  8533                           ;CC2500_B1.c: 88: }
  8534                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8535  094A  3036               	movlw	54
  8536  094B  319F  277D  3188   	fcall	_CC2500_WriteCommand
  8537                           
  8538                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8539  094E  303A               	movlw	58
  8540  094F  319F  277D  3188   	fcall	_CC2500_WriteCommand
  8541                           
  8542                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  8543  0952  0020               	movlb	0	; select bank0
  8544  0953  01A2               	clrf	setRF_RxStatus@command
  8545  0954  3001               	movlw	1
  8546  0955  319F  275F         	fcall	_setRF_RxStatus
  8547  0957  0008               	return
  8548  0958                     __end_of_CC2500_RxData:	
  8549                           
  8550                           	psect	text36
  8551  1F5F                     __ptext36:	
  8552 ;; *************** function _setRF_RxStatus *****************
  8553 ;; Defined at:
  8554 ;;		line 42 in file "../src/RF_Control_B1.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  rf              1    wreg     unsigned char 
  8557 ;;  command         1    2[BANK0 ] unsigned char 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  rf              1    3[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;		None               void
  8562 ;; Registers used:
  8563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    6
  8576 ;; This function calls:
  8577 ;;		_RfPointSelect
  8578 ;; This function is called by:
  8579 ;;		_CC2500_RxData
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _setRF_RxStatus
  8585  1F5F                     _setRF_RxStatus:	
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8589                           ;setRF_RxStatus@rf stored from wreg
  8590  1F5F  0020               	movlb	0	; select bank0
  8591  1F60  00A3               	movwf	setRF_RxStatus@rf
  8592                           
  8593                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  8594  1F61  0823               	movf	setRF_RxStatus@rf,w
  8595  1F62  319E  26DE         	fcall	_RfPointSelect
  8596                           
  8597                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  8598  1F64  0021               	movlb	1	; select bank1
  8599  1F65  083E               	movf	_RF^(0+128),w
  8600  1F66  0086               	movwf	6
  8601  1F67  0187               	clrf	7
  8602  1F68  0020               	movlb	0	; select bank0
  8603  1F69  0822               	movf	setRF_RxStatus@command,w
  8604  1F6A  1181               	bcf	1,3
  8605  1F6B  1D03               	skipz
  8606  1F6C  1581               	bsf	1,3
  8607  1F6D  0008               	return
  8608  1F6E                     __end_of_setRF_RxStatus:	
  8609                           
  8610                           	psect	text37
  8611  11DF                     __ptext37:	
  8612 ;; *************** function _CC2500_ReadStatus *****************
  8613 ;; Defined at:
  8614 ;;		line 263 in file "../src/CC2500_B1.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  status_addr     1    wreg     unsigned char 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;		None               void
  8621 ;; Registers used:
  8622 ;;		wreg, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        2 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    6
  8635 ;; This function calls:
  8636 ;;		_CC2500_ReadByte
  8637 ;;		_CC2500_WriteByte
  8638 ;; This function is called by:
  8639 ;;		_CC2500_RxData
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _CC2500_ReadStatus
  8645  11DF                     _CC2500_ReadStatus:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8649                           ;CC2500_ReadStatus@status_addr stored from wreg
  8650  11DF  0020               	movlb	0	; select bank0
  8651  11E0  00A3               	movwf	CC2500_ReadStatus@status_addr
  8652                           
  8653                           ;CC2500_B1.c: 264: RC4 = 0;
  8654  11E1  120E               	bcf	14,4	;volatile
  8655                           
  8656                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  8657  11E2  0823               	movf	CC2500_ReadStatus@status_addr,w
  8658  11E3  3EC0               	addlw	192
  8659  11E4  00A2               	movwf	??_CC2500_ReadStatus
  8660  11E5  0822               	movf	??_CC2500_ReadStatus,w
  8661  11E6  0021               	movlb	1	; select bank1
  8662  11E7  00C2               	movwf	_SPI0Buffer^(0+128)
  8663  11E8                     l366:	
  8664                           ;CC2500_B1.c: 267: while (RC2 == 1);
  8665                           
  8666  11E8  0020               	movlb	0	; select bank0
  8667  11E9  190E               	btfsc	14,2	;volatile
  8668  11EA  29E8               	goto	l366
  8669                           
  8670                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  8671  11EB  3191  2146  3191   	fcall	_CC2500_WriteByte
  8672                           
  8673                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  8674  11EE  3192  2232         	fcall	_CC2500_ReadByte
  8675                           
  8676                           ;CC2500_B1.c: 271: RC4 = 1;
  8677  11F0  0020               	movlb	0	; select bank0
  8678  11F1  160E               	bsf	14,4	;volatile
  8679                           
  8680                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  8681  11F2  0021               	movlb	1	; select bank1
  8682  11F3  0842               	movf	_SPI0Buffer^(0+128),w
  8683  11F4  0020               	movlb	0	; select bank0
  8684  11F5  00A2               	movwf	??_CC2500_ReadStatus
  8685  11F6  0822               	movf	??_CC2500_ReadStatus,w
  8686  11F7  0021               	movlb	1	; select bank1
  8687  11F8  00C6               	movwf	_s_data^(0+128)
  8688  11F9  0008               	return
  8689  11FA                     __end_of_CC2500_ReadStatus:	
  8690                           
  8691                           	psect	text38
  8692  1232                     __ptext38:	
  8693 ;; *************** function _CC2500_ReadByte *****************
  8694 ;; Defined at:
  8695 ;;		line 207 in file "../src/CC2500_B1.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        2 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    5
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_CC2500_RxData
  8720 ;;		_CC2500_ReadStatus
  8721 ;;		_CC2500_ReadREG
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _CC2500_ReadByte
  8727  1232                     _CC2500_ReadByte:	
  8728                           
  8729                           ;CC2500_B1.c: 208: unsigned char loop_b;
  8730                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8734  1232  0020               	movlb	0	; select bank0
  8735  1233  01A1               	clrf	CC2500_ReadByte@loop_b
  8736  1234                     L11:	
  8737  1234  3008               	movlw	8
  8738  1235  0221               	subwf	CC2500_ReadByte@loop_b,w
  8739  1236  1803               	btfsc	3,0
  8740  1237  0008               	return
  8741                           
  8742                           ;CC2500_B1.c: 210: RC1 = 1;
  8743  1238  148E               	bsf	14,1	;volatile
  8744                           
  8745                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  8746  1239  1003               	clrc
  8747  123A  0021               	movlb	1	; select bank1
  8748  123B  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8749                           
  8750                           ;CC2500_B1.c: 212: if (RC2 == 1)
  8751  123C  0020               	movlb	0	; select bank0
  8752  123D  1D0E               	btfss	14,2	;volatile
  8753  123E  2A42               	goto	l5642
  8754                           
  8755                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  8756  123F  0021               	movlb	1	; select bank1
  8757  1240  1442               	bsf	_SPI0Buffer^(0+128),0
  8758  1241  2A48               	goto	l5644
  8759  1242                     l5642:	
  8760                           
  8761                           ;CC2500_B1.c: 214: else
  8762                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  8763  1242  30FE               	movlw	254
  8764  1243  0020               	movlb	0	; select bank0
  8765  1244  00A0               	movwf	??_CC2500_ReadByte
  8766  1245  0820               	movf	??_CC2500_ReadByte,w
  8767  1246  0021               	movlb	1	; select bank1
  8768  1247  05C2               	andwf	_SPI0Buffer^(0+128),f
  8769  1248                     l5644:	
  8770                           
  8771                           ;CC2500_B1.c: 216: RC1 = 0;
  8772  1248  0020               	movlb	0	; select bank0
  8773  1249  108E               	bcf	14,1	;volatile
  8774  124A  3001               	movlw	1
  8775  124B  00A0               	movwf	??_CC2500_ReadByte
  8776  124C  0820               	movf	??_CC2500_ReadByte,w
  8777  124D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8778  124E  2A34               	goto	L11
  8779  124F                     __end_of_CC2500_ReadByte:	
  8780                           
  8781                           	psect	text39
  8782  1E31                     __ptext39:	
  8783 ;; *************** function _RF_Initialization *****************
  8784 ;; Defined at:
  8785 ;;		line 16 in file "../src/RF_Control_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;		None
  8790 ;; Return value:  Size  Location     Type
  8791 ;;		None               void
  8792 ;; Registers used:
  8793 ;;		wreg, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        0 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    6
  8806 ;; This function calls:
  8807 ;;		_setRF_Initialization
  8808 ;; This function is called by:
  8809 ;;		_main
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _RF_Initialization
  8815  1E31                     _RF_Initialization:	
  8816                           
  8817                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8821  1E31  3001               	movlw	1
  8822  1E32  319E  265E         	fcall	_setRF_Initialization
  8823  1E34  0008               	return
  8824  1E35                     __end_of_RF_Initialization:	
  8825                           
  8826                           	psect	text40
  8827  1E5E                     __ptext40:	
  8828 ;; *************** function _setRF_Initialization *****************
  8829 ;; Defined at:
  8830 ;;		line 49 in file "../src/RF_Control_B1.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  rf              1    wreg     unsigned char 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  rf              1    0[COMMON] unsigned char 
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;Total ram usage:        1 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    5
  8851 ;; This function calls:
  8852 ;;		Nothing
  8853 ;; This function is called by:
  8854 ;;		_RF_Initialization
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _setRF_Initialization
  8860  1E5E                     _setRF_Initialization:	
  8861                           
  8862                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _setRF_Initialization: [wreg]
  8866  1E5E  3015               	movlw	21
  8867  1E5F  0020               	movlb	0	; select bank0
  8868  1E60  00A0               	movwf	??_setRF_Initialization
  8869  1E61  0820               	movf	??_setRF_Initialization,w
  8870  1E62  0021               	movlb	1	; select bank1
  8871  1E63  00C3               	movwf	_Tx_Length^(0+128)
  8872  1E64  0008               	return
  8873  1E65                     __end_of_setRF_Initialization:	
  8874                           
  8875                           	psect	text41
  8876  11C4                     __ptext41:	
  8877 ;; *************** function _Mcu_Initialization *****************
  8878 ;; Defined at:
  8879 ;;		line 30 in file "../src/MCU_B1.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;		None
  8884 ;; Return value:  Size  Location     Type
  8885 ;;		None               void
  8886 ;; Registers used:
  8887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;Total ram usage:        1 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    6
  8900 ;; This function calls:
  8901 ;;		_ADC_Set
  8902 ;;		_Fosc_Set
  8903 ;;		_INT_Set
  8904 ;;		_IOC_Set
  8905 ;;		_IO_Set
  8906 ;;		_TMR0_Set
  8907 ;;		_WDT_Set
  8908 ;; This function is called by:
  8909 ;;		_main
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           
  8914                           ;psect for function _Mcu_Initialization
  8915  11C4                     _Mcu_Initialization:	
  8916                           
  8917                           ;MCU_B1.c: 32: Fosc_Set();
  8918                           
  8919                           ;incstack = 0
  8920                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8921  11C4  319E  262D  3191   	fcall	_Fosc_Set
  8922                           
  8923                           ;MCU_B1.c: 34: IO_Set();
  8924  11C7  3191  2191  3191   	fcall	_IO_Set
  8925                           
  8926                           ;MCU_B1.c: 36: TMR0_Set();
  8927  11CA  319F  2727  3191   	fcall	_TMR0_Set
  8928                           
  8929                           ;MCU_B1.c: 38: ;;
  8930                           ;MCU_B1.c: 40: ADC_Set();
  8931  11CD  319E  2657  3191   	fcall	_ADC_Set
  8932                           
  8933                           ;MCU_B1.c: 44: INT_Set();
  8934  11D0  319E  263E  3191   	fcall	_INT_Set
  8935                           
  8936                           ;MCU_B1.c: 46: IOC_Set();
  8937  11D3  319F  270E  3191   	fcall	_IOC_Set
  8938                           
  8939                           ;MCU_B1.c: 48: ;;
  8940                           ;MCU_B1.c: 50: ;;
  8941                           ;MCU_B1.c: 52: Memory=&VarMemory;
  8942  11D6  3020               	movlw	_VarMemory& (0+255)
  8943  11D7  0020               	movlb	0	; select bank0
  8944  11D8  00A1               	movwf	??_Mcu_Initialization
  8945  11D9  0821               	movf	??_Mcu_Initialization,w
  8946  11DA  0021               	movlb	1	; select bank1
  8947  11DB  00E7               	movwf	_Memory^(0+128)
  8948                           
  8949                           ;MCU_B1.c: 54: WDT_Set();
  8950  11DC  3191  212E         	fcall	_WDT_Set
  8951  11DE  0008               	return
  8952  11DF                     __end_of_Mcu_Initialization:	
  8953                           
  8954                           	psect	text42
  8955  112E                     __ptext42:	
  8956 ;; *************** function _WDT_Set *****************
  8957 ;; Defined at:
  8958 ;;		line 929 in file "../src/MCU_B1.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;		None
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;		None
  8963 ;; Return value:  Size  Location     Type
  8964 ;;		None               void
  8965 ;; Registers used:
  8966 ;;		wreg, fsr1l, fsr1h
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;Total ram usage:        1 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    5
  8979 ;; This function calls:
  8980 ;;		Nothing
  8981 ;; This function is called by:
  8982 ;;		_Mcu_Initialization
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _WDT_Set
  8988  112E                     _WDT_Set:	
  8989                           
  8990                           ;MCU_B1.c: 930: WDTCON = 0b00010111;;
  8991                           
  8992                           ;incstack = 0
  8993                           ; Regs used in _WDT_Set: [wregfsr1]
  8994  112E  3017               	movlw	23
  8995  112F  0021               	movlb	1	; select bank1
  8996  1130  0097               	movwf	23	;volatile
  8997                           
  8998                           ;MCU_B1.c: 931: WDT = &_WDT;
  8999  1131  30E3               	movlw	__WDT& (0+255)
  9000  1132  0020               	movlb	0	; select bank0
  9001  1133  00A0               	movwf	??_WDT_Set
  9002  1134  0820               	movf	??_WDT_Set,w
  9003  1135  0021               	movlb	1	; select bank1
  9004  1136  00E9               	movwf	_WDT^(0+128)
  9005                           
  9006                           ;MCU_B1.c: 932: WDT->Enable = 1;
  9007  1137  0869               	movf	_WDT^(0+128),w
  9008  1138  0086               	movwf	6
  9009  1139  0187               	clrf	7
  9010  113A  1401               	bsf	1,0
  9011                           
  9012                           ;MCU_B1.c: 933: WDT->Count = 10;
  9013  113B  300A               	movlw	10
  9014  113C  0020               	movlb	0	; select bank0
  9015  113D  00A0               	movwf	??_WDT_Set
  9016  113E  0021               	movlb	1	; select bank1
  9017  113F  0A69               	incf	_WDT^(0+128),w
  9018  1140  0086               	movwf	6
  9019  1141  0187               	clrf	7
  9020  1142  0020               	movlb	0	; select bank0
  9021  1143  0820               	movf	??_WDT_Set,w
  9022  1144  0081               	movwf	1
  9023  1145  0008               	return
  9024  1146                     __end_of_WDT_Set:	
  9025                           
  9026                           	psect	text43
  9027  1F27                     __ptext43:	
  9028 ;; *************** function _TMR0_Set *****************
  9029 ;; Defined at:
  9030 ;;		line 128 in file "../src/MCU_B1.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;		None               void
  9037 ;; Registers used:
  9038 ;;		wreg, status,2
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;Total ram usage:        1 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    5
  9051 ;; This function calls:
  9052 ;;		Nothing
  9053 ;; This function is called by:
  9054 ;;		_Mcu_Initialization
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _TMR0_Set
  9060  1F27                     _TMR0_Set:	
  9061                           
  9062                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9063                           
  9064                           ;incstack = 0
  9065                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9066  1F27  305E               	movlw	_VarTimer0& (0+255)
  9067  1F28  0020               	movlb	0	; select bank0
  9068  1F29  00A0               	movwf	??_TMR0_Set
  9069  1F2A  0820               	movf	??_TMR0_Set,w
  9070  1F2B  0021               	movlb	1	; select bank1
  9071  1F2C  00E8               	movwf	_Timer0^(0+128)
  9072                           
  9073                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9074  1F2D  0195               	clrf	21	;volatile
  9075                           
  9076                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9077  1F2E  30A6               	movlw	166
  9078  1F2F  0020               	movlb	0	; select bank0
  9079  1F30  0095               	movwf	21	;volatile
  9080                           
  9081                           ;MCU_B1.c: 132: TMR0IE = 1;
  9082  1F31  168B               	bsf	11,5	;volatile
  9083                           
  9084                           ;MCU_B1.c: 133: GIE = 1;
  9085  1F32  178B               	bsf	11,7	;volatile
  9086  1F33  0008               	return
  9087  1F34                     __end_of_TMR0_Set:	
  9088                           
  9089                           	psect	text44
  9090  1191                     __ptext44:	
  9091 ;; *************** function _IO_Set *****************
  9092 ;; Defined at:
  9093 ;;		line 62 in file "../src/MCU_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		wreg, status,2
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    5
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_Mcu_Initialization
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _IO_Set
  9123  1191                     _IO_Set:	
  9124                           
  9125                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _IO_Set: [wreg+status,2]
  9129  1191  3077               	movlw	119
  9130  1192  0021               	movlb	1	; select bank1
  9131  1193  008C               	movwf	12	;volatile
  9132                           
  9133                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9134  1194  3007               	movlw	7
  9135  1195  008D               	movwf	13	;volatile
  9136                           
  9137                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9138  1196  300C               	movlw	12
  9139  1197  008E               	movwf	14	;volatile
  9140                           
  9141                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9142  1198  0022               	movlb	2	; select bank2
  9143  1199  018C               	clrf	12	;volatile
  9144                           
  9145                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9146  119A  3002               	movlw	2
  9147  119B  008D               	movwf	13	;volatile
  9148                           
  9149                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9150  119C  018E               	clrf	14	;volatile
  9151                           
  9152                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9153  119D  3022               	movlw	34
  9154  119E  0023               	movlb	3	; select bank3
  9155  119F  008C               	movwf	12	;volatile
  9156                           
  9157                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9158  11A0  018D               	clrf	13	;volatile
  9159                           
  9160                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9161  11A1  018E               	clrf	14	;volatile
  9162                           
  9163                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9164  11A2  3077               	movlw	119
  9165  11A3  0020               	movlb	0	; select bank0
  9166  11A4  008C               	movwf	12	;volatile
  9167                           
  9168                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9169  11A5  3007               	movlw	7
  9170  11A6  008D               	movwf	13	;volatile
  9171                           
  9172                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9173  11A7  300C               	movlw	12
  9174  11A8  008E               	movwf	14	;volatile
  9175  11A9  0008               	return
  9176  11AA                     __end_of_IO_Set:	
  9177                           
  9178                           	psect	text45
  9179  1F0E                     __ptext45:	
  9180 ;; *************** function _IOC_Set *****************
  9181 ;; Defined at:
  9182 ;;		line 306 in file "../src/MCU_B1.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		wreg, status,2
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        0 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    5
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_Mcu_Initialization
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function _IOC_Set
  9212  1F0E                     _IOC_Set:	
  9213                           
  9214                           ;MCU_B1.c: 307: WPUB2 = 0;
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _IOC_Set: [wreg+status,2]
  9218  1F0E  0024               	movlb	4	; select bank4
  9219  1F0F  110D               	bcf	13,2	;volatile
  9220                           
  9221                           ;MCU_B1.c: 315: IOCBP = 0b00000000;
  9222  1F10  0027               	movlb	7	; select bank7
  9223  1F11  0194               	clrf	20	;volatile
  9224                           
  9225                           ;MCU_B1.c: 316: IOCBN = 0b00000100;
  9226  1F12  3004               	movlw	4
  9227  1F13  0095               	movwf	21	;volatile
  9228                           
  9229                           ;MCU_B1.c: 325: IOCBF = 0b00000000;
  9230  1F14  0196               	clrf	22	;volatile
  9231                           
  9232                           ;MCU_B1.c: 327: IOCIE = 1;
  9233  1F15  158B               	bsf	11,3	;volatile
  9234                           
  9235                           ;MCU_B1.c: 328: IOCIF = 0;
  9236  1F16  100B               	bcf	11,0	;volatile
  9237                           
  9238                           ;MCU_B1.c: 329: PEIE = 1;
  9239  1F17  170B               	bsf	11,6	;volatile
  9240                           
  9241                           ;MCU_B1.c: 330: GIE = 1;
  9242  1F18  178B               	bsf	11,7	;volatile
  9243  1F19  0008               	return
  9244  1F1A                     __end_of_IOC_Set:	
  9245                           
  9246                           	psect	text46
  9247  1E3E                     __ptext46:	
  9248 ;; *************** function _INT_Set *****************
  9249 ;; Defined at:
  9250 ;;		line 279 in file "../src/MCU_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		None
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    5
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_Mcu_Initialization
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _INT_Set
  9280  1E3E                     _INT_Set:	
  9281                           
  9282                           ;MCU_B1.c: 280: WPUB0 = 0;
  9283                           
  9284                           ;incstack = 0
  9285                           ; Regs used in _INT_Set: []
  9286  1E3E  0024               	movlb	4	; select bank4
  9287  1E3F  100D               	bcf	13,0	;volatile
  9288                           
  9289                           ;MCU_B1.c: 281: INTE = 1;
  9290  1E40  160B               	bsf	11,4	;volatile
  9291                           
  9292                           ;MCU_B1.c: 282: PEIE = 1;
  9293  1E41  170B               	bsf	11,6	;volatile
  9294                           
  9295                           ;MCU_B1.c: 283: GIE = 1;
  9296  1E42  178B               	bsf	11,7	;volatile
  9297  1E43  0008               	return
  9298  1E44                     __end_of_INT_Set:	
  9299                           
  9300                           	psect	text47
  9301  1E2D                     __ptext47:	
  9302 ;; *************** function _Fosc_Set *****************
  9303 ;; Defined at:
  9304 ;;		line 58 in file "../src/MCU_B1.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;		None
  9309 ;; Return value:  Size  Location     Type
  9310 ;;		None               void
  9311 ;; Registers used:
  9312 ;;		wreg
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;Total ram usage:        0 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    5
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_Mcu_Initialization
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _Fosc_Set
  9334  1E2D                     _Fosc_Set:	
  9335                           
  9336                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in _Fosc_Set: [wreg]
  9340  1E2D  3078               	movlw	120
  9341  1E2E  0021               	movlb	1	; select bank1
  9342  1E2F  0099               	movwf	25	;volatile
  9343  1E30  0008               	return
  9344  1E31                     __end_of_Fosc_Set:	
  9345                           
  9346                           	psect	text48
  9347  1E57                     __ptext48:	
  9348 ;; *************** function _ADC_Set *****************
  9349 ;; Defined at:
  9350 ;;		line 352 in file "../src/MCU_B1.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;		None
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;		None
  9355 ;; Return value:  Size  Location     Type
  9356 ;;		None               void
  9357 ;; Registers used:
  9358 ;;		wreg
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        0 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    5
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_Mcu_Initialization
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           
  9379                           ;psect for function _ADC_Set
  9380  1E57                     _ADC_Set:	
  9381                           
  9382                           ;MCU_B1.c: 353: ADCON1 = 0xf2;
  9383                           
  9384                           ;incstack = 0
  9385                           ; Regs used in _ADC_Set: [wreg]
  9386  1E57  30F2               	movlw	242
  9387  1E58  0021               	movlb	1	; select bank1
  9388  1E59  009E               	movwf	30	;volatile
  9389                           
  9390                           ;MCU_B1.c: 354: FVRCON = 0xc0;
  9391  1E5A  30C0               	movlw	192
  9392  1E5B  0022               	movlb	2	; select bank2
  9393  1E5C  0097               	movwf	23	;volatile
  9394  1E5D  0008               	return
  9395  1E5E                     __end_of_ADC_Set:	
  9396                           
  9397                           	psect	text49
  9398  1F02                     __ptext49:	
  9399 ;; *************** function _LED_Main *****************
  9400 ;; Defined at:
  9401 ;;		line 51 in file "../src/LED_B1.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    7
  9422 ;; This function calls:
  9423 ;;		_setLED_Main
  9424 ;; This function is called by:
  9425 ;;		_main
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _LED_Main
  9431  1F02                     _LED_Main:	
  9432                           
  9433                           ;LED_B1.c: 54: setLED_Main(1);
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9437  1F02  3001               	movlw	1
  9438  1F03  3194  24CB  319F   	fcall	_setLED_Main
  9439                           
  9440                           ;LED_B1.c: 57: setLED_Main(2);
  9441  1F06  3002               	movlw	2
  9442  1F07  3194  24CB  319F   	fcall	_setLED_Main
  9443                           
  9444                           ;LED_B1.c: 63: setLED_Main(99);
  9445  1F0A  3063               	movlw	99
  9446  1F0B  3194  24CB         	fcall	_setLED_Main
  9447  1F0D  0008               	return
  9448  1F0E                     __end_of_LED_Main:	
  9449                           
  9450                           	psect	text50
  9451  14CB                     __ptext50:	
  9452 ;; *************** function _setLED_Main *****************
  9453 ;; Defined at:
  9454 ;;		line 214 in file "../src/LED_B1.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;  led             1    wreg     unsigned char 
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;  led             1    4[BANK0 ] unsigned char 
  9459 ;; Return value:  Size  Location     Type
  9460 ;;		None               void
  9461 ;; Registers used:
  9462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;Total ram usage:        3 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    6
  9475 ;; This function calls:
  9476 ;;		_LedPointSelect
  9477 ;; This function is called by:
  9478 ;;		_LED_Main
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           
  9483                           ;psect for function _setLED_Main
  9484  14CB                     _setLED_Main:	
  9485                           
  9486                           ;incstack = 0
  9487                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9488                           ;setLED_Main@led stored from wreg
  9489  14CB  0020               	movlb	0	; select bank0
  9490  14CC  00A4               	movwf	setLED_Main@led
  9491                           
  9492                           ;LED_B1.c: 216: LedPointSelect(led);
  9493  14CD  0824               	movf	setLED_Main@led,w
  9494  14CE  3192  22B0  3194   	fcall	_LedPointSelect
  9495                           
  9496                           ;LED_B1.c: 217: if(LED->GO)
  9497  14D1  0021               	movlb	1	; select bank1
  9498  14D2  083D               	movf	_LED^(0+128),w
  9499  14D3  0086               	movwf	6
  9500  14D4  0187               	clrf	7
  9501  14D5  1C81               	btfss	1,1
  9502  14D6  0008               	return
  9503                           
  9504                           ;LED_B1.c: 218: {
  9505                           ;LED_B1.c: 219: LED->Time++;
  9506  14D7  0A3D               	incf	_LED^(0+128),w
  9507  14D8  0086               	movwf	6
  9508  14D9  0187               	clrf	7
  9509  14DA  3001               	movlw	1
  9510  14DB  0781               	addwf	1,f
  9511  14DC  3141               	addfsr 1,1
  9512  14DD  1803               	skipnc
  9513  14DE  0A81               	incf	1,f
  9514                           
  9515                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
  9516  14DF  0A3D               	incf	_LED^(0+128),w
  9517  14E0  0086               	movwf	6
  9518  14E1  0187               	clrf	7
  9519  14E2  3F40               	moviw [0]fsr1
  9520  14E3  0020               	movlb	0	; select bank0
  9521  14E4  00A2               	movwf	??_setLED_Main
  9522  14E5  3F41               	moviw [1]fsr1
  9523  14E6  00A3               	movwf	??_setLED_Main+1
  9524  14E7  3000               	movlw	0
  9525  14E8  0223               	subwf	??_setLED_Main+1,w
  9526  14E9  3032               	movlw	50
  9527  14EA  1903               	skipnz
  9528  14EB  0222               	subwf	??_setLED_Main,w
  9529  14EC  1C03               	skipc
  9530  14ED  0008               	return
  9531                           
  9532                           ;LED_B1.c: 221: {
  9533                           ;LED_B1.c: 222: LED->Time=0;
  9534  14EE  0021               	movlb	1	; select bank1
  9535  14EF  0A3D               	incf	_LED^(0+128),w
  9536  14F0  0086               	movwf	6
  9537  14F1  0187               	clrf	7
  9538  14F2  3000               	movlw	0
  9539  14F3  3FC0               	movwi [0]fsr1
  9540  14F4  3FC1               	movwi [1]fsr1
  9541                           
  9542                           ;LED_B1.c: 224: if(led == 1)
  9543  14F5  0020               	movlb	0	; select bank0
  9544  14F6  0824               	movf	setLED_Main@led,w
  9545  14F7  3A01               	xorlw	1
  9546  14F8  1D03               	skipz
  9547  14F9  2CFD               	goto	l6424
  9548                           
  9549                           ;LED_B1.c: 225: {
  9550                           ;LED_B1.c: 226: RA3=~RA3;
  9551  14FA  3008               	movlw	8
  9552  14FB  068C               	xorwf	12,f
  9553                           
  9554                           ;LED_B1.c: 227: }
  9555  14FC  0008               	return
  9556  14FD                     l6424:	
  9557                           
  9558                           ;LED_B1.c: 230: else if(led == 2)
  9559  14FD  0824               	movf	setLED_Main@led,w
  9560  14FE  3A02               	xorlw	2
  9561  14FF  1D03               	skipz
  9562  1500  2D04               	goto	l6428
  9563                           
  9564                           ;LED_B1.c: 231: {
  9565                           ;LED_B1.c: 232: RC7=~RC7;
  9566  1501  3080               	movlw	128
  9567  1502  068E               	xorwf	14,f
  9568                           
  9569                           ;LED_B1.c: 233: }
  9570  1503  0008               	return
  9571  1504                     l6428:	
  9572                           
  9573                           ;LED_B1.c: 242: else if(led == 99)
  9574  1504  0824               	movf	setLED_Main@led,w
  9575  1505  3A63               	xorlw	99
  9576  1506  1D03               	skipz
  9577  1507  0008               	return
  9578                           
  9579                           ;LED_B1.c: 243: {
  9580                           ;LED_B1.c: 244: RB5=~RB5;
  9581  1508  3020               	movlw	32
  9582  1509  068D               	xorwf	13,f
  9583  150A  0008               	return
  9584  150B                     __end_of_setLED_Main:	
  9585                           
  9586                           	psect	text51
  9587  1EF6                     __ptext51:	
  9588 ;; *************** function _LED_Initialization *****************
  9589 ;; Defined at:
  9590 ;;		line 35 in file "../src/LED_B1.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;		None               void
  9597 ;; Registers used:
  9598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;Total ram usage:        0 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    8
  9611 ;; This function calls:
  9612 ;;		_setLED_Initialization
  9613 ;; This function is called by:
  9614 ;;		_main
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _LED_Initialization
  9620  1EF6                     _LED_Initialization:	
  9621                           
  9622                           ;LED_B1.c: 38: setLED_Initialization(1);
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9626  1EF6  3001               	movlw	1
  9627  1EF7  319F  27EF  319E   	fcall	_setLED_Initialization
  9628                           
  9629                           ;LED_B1.c: 41: setLED_Initialization(2);
  9630  1EFA  3002               	movlw	2
  9631  1EFB  319F  27EF  319E   	fcall	_setLED_Initialization
  9632                           
  9633                           ;LED_B1.c: 47: setLED_Initialization(99);
  9634  1EFE  3063               	movlw	99
  9635  1EFF  319F  27EF         	fcall	_setLED_Initialization
  9636  1F01  0008               	return
  9637  1F02                     __end_of_LED_Initialization:	
  9638                           
  9639                           	psect	text52
  9640  1FEF                     __ptext52:	
  9641 ;; *************** function _setLED_Initialization *****************
  9642 ;; Defined at:
  9643 ;;		line 67 in file "../src/LED_B1.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  led             1    wreg     unsigned char 
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;  led             1    4[BANK0 ] unsigned char 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;		None               void
  9650 ;; Registers used:
  9651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;Total ram usage:        1 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    7
  9664 ;; This function calls:
  9665 ;;		_LedPointSelect
  9666 ;;		_setLED
  9667 ;; This function is called by:
  9668 ;;		_LED_Initialization
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function _setLED_Initialization
  9674  1FEF                     _setLED_Initialization:	
  9675                           
  9676                           ;incstack = 0
  9677                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9678                           ;setLED_Initialization@led stored from wreg
  9679  1FEF  0020               	movlb	0	; select bank0
  9680  1FF0  00A4               	movwf	setLED_Initialization@led
  9681                           
  9682                           ;LED_B1.c: 69: LedPointSelect(led);
  9683  1FF1  0824               	movf	setLED_Initialization@led,w
  9684  1FF2  3192  22B0  319F   	fcall	_LedPointSelect
  9685                           
  9686                           ;LED_B1.c: 70: LED->Enable=1;
  9687  1FF5  0021               	movlb	1	; select bank1
  9688  1FF6  083D               	movf	_LED^(0+128),w
  9689  1FF7  0086               	movwf	6
  9690  1FF8  0187               	clrf	7
  9691  1FF9  1401               	bsf	1,0
  9692                           
  9693                           ;LED_B1.c: 71: setLED(led,0);
  9694  1FFA  0020               	movlb	0	; select bank0
  9695  1FFB  01A2               	clrf	setLED@command
  9696  1FFC  0824               	movf	setLED_Initialization@led,w
  9697  1FFD  3188  2035         	fcall	_setLED
  9698  1FFF  0008               	return
  9699  2000                     __end_of_setLED_Initialization:	
  9700                           
  9701                           	psect	text53
  9702  158F                     __ptext53:	
  9703 ;; *************** function _Flash_Memory_Main *****************
  9704 ;; Defined at:
  9705 ;;		line 831 in file "../src/MCU_B1.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;		None
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;		None
  9710 ;; Return value:  Size  Location     Type
  9711 ;;		None               void
  9712 ;; Registers used:
  9713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;Total ram usage:        0 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    8
  9726 ;; This function calls:
  9727 ;;		_Flash_Memory_Modify
  9728 ;; This function is called by:
  9729 ;;		_main
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           
  9734                           ;psect for function _Flash_Memory_Main
  9735  158F                     _Flash_Memory_Main:	
  9736                           
  9737                           ;MCU_B1.c: 832: if (Memory->GO) {
  9738                           
  9739                           ;incstack = 0
  9740                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9741  158F  0021               	movlb	1	; select bank1
  9742  1590  0867               	movf	_Memory^(0+128),w
  9743  1591  3E22               	addlw	34
  9744  1592  0086               	movwf	6
  9745  1593  3002               	movlw	2	; select bank4/5
  9746  1594  0087               	movwf	7
  9747  1595  1C81               	btfss	1,1
  9748  1596  0008               	return
  9749                           
  9750                           ;MCU_B1.c: 833: if (Memory->Modify) {
  9751  1597  0867               	movf	_Memory^(0+128),w
  9752  1598  3E22               	addlw	34
  9753  1599  0086               	movwf	6
  9754  159A  3002               	movlw	2	; select bank4/5
  9755  159B  0087               	movwf	7
  9756  159C  1C01               	btfss	1,0
  9757  159D  2DCC               	goto	l6918
  9758                           
  9759                           ;MCU_B1.c: 834: Memory->Time++;
  9760  159E  0867               	movf	_Memory^(0+128),w
  9761  159F  3E23               	addlw	35
  9762  15A0  0086               	movwf	6
  9763  15A1  3002               	movlw	2	; select bank4/5
  9764  15A2  0087               	movwf	7
  9765  15A3  3001               	movlw	1
  9766  15A4  0781               	addwf	1,f
  9767  15A5  3141               	addfsr 1,1
  9768  15A6  1803               	skipnc
  9769  15A7  0A81               	incf	1,f
  9770                           
  9771                           ;MCU_B1.c: 835: if (Memory->Time == 25)
  9772  15A8  0867               	movf	_Memory^(0+128),w
  9773  15A9  3E23               	addlw	35
  9774  15AA  0086               	movwf	6
  9775  15AB  3002               	movlw	2	; select bank4/5
  9776  15AC  0087               	movwf	7
  9777  15AD  3F40               	moviw [0]fsr1
  9778  15AE  3A19               	xorlw	25
  9779  15AF  1D03               	skipz
  9780  15B0  2DB3               	goto	u6005
  9781  15B1  3F41               	moviw [1]fsr1
  9782  15B2  3A00               	xorlw	0
  9783  15B3                     u6005:	
  9784  15B3  1D03               	skipz
  9785  15B4  0008               	return
  9786                           
  9787                           ;MCU_B1.c: 836: {
  9788                           ;MCU_B1.c: 837: Memory->Time = 0;
  9789  15B5  0867               	movf	_Memory^(0+128),w
  9790  15B6  3E23               	addlw	35
  9791  15B7  0086               	movwf	6
  9792  15B8  3002               	movlw	2	; select bank4/5
  9793  15B9  0087               	movwf	7
  9794  15BA  3000               	movlw	0
  9795  15BB  3FC0               	movwi [0]fsr1
  9796  15BC  3FC1               	movwi [1]fsr1
  9797                           
  9798                           ;MCU_B1.c: 838: Memory->Modify = 0;
  9799  15BD  0867               	movf	_Memory^(0+128),w
  9800  15BE  3E22               	addlw	34
  9801  15BF  0086               	movwf	6
  9802  15C0  3002               	movlw	2	; select bank4/5
  9803  15C1  0087               	movwf	7
  9804  15C2  1001               	bcf	1,0
  9805                           
  9806                           ;MCU_B1.c: 839: Memory->GO = 0;
  9807  15C3  0867               	movf	_Memory^(0+128),w
  9808  15C4  3E22               	addlw	34
  9809  15C5  0086               	movwf	6
  9810  15C6  3002               	movlw	2	; select bank4/5
  9811  15C7  0087               	movwf	7
  9812  15C8  1081               	bcf	1,1
  9813                           
  9814                           ;MCU_B1.c: 840: Flash_Memory_Modify();
  9815  15C9  3189  2158         	fcall	_Flash_Memory_Modify
  9816                           
  9817                           ;MCU_B1.c: 842: }
  9818                           ;MCU_B1.c: 843: } else {
  9819  15CB  0008               	return
  9820  15CC                     l6918:	
  9821                           
  9822                           ;MCU_B1.c: 844: Memory->GO = 0;
  9823  15CC  0021               	movlb	1	; select bank1
  9824  15CD  0867               	movf	_Memory^(0+128),w
  9825  15CE  3E22               	addlw	34
  9826  15CF  0086               	movwf	6
  9827  15D0  3002               	movlw	2	; select bank4/5
  9828  15D1  0087               	movwf	7
  9829  15D2  1081               	bcf	1,1
  9830  15D3  0008               	return
  9831  15D4                     __end_of_Flash_Memory_Main:	
  9832                           
  9833                           	psect	text54
  9834  0958                     __ptext54:	
  9835 ;; *************** function _Flash_Memory_Modify *****************
  9836 ;; Defined at:
  9837 ;;		line 901 in file "../src/MCU_B1.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;  i               1    6[BANK0 ] unsigned char 
  9842 ;; Return value:  Size  Location     Type
  9843 ;;		None               void
  9844 ;; Registers used:
  9845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;Total ram usage:        3 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    7
  9858 ;; This function calls:
  9859 ;;		_Flash_Memory_Erasing
  9860 ;;		_Flash_Memory_Read
  9861 ;;		_Flash_Memory_Write
  9862 ;; This function is called by:
  9863 ;;		_Flash_Memory_Main
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _Flash_Memory_Modify
  9869  0958                     _Flash_Memory_Modify:	
  9870                           
  9871                           ;MCU_B1.c: 902: char i;
  9872                           ;MCU_B1.c: 903: for (i = 0; i < 32; i++) {
  9873                           
  9874                           ;incstack = 0
  9875                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9876  0958  0020               	movlb	0	; select bank0
  9877  0959  01A6               	clrf	Flash_Memory_Modify@i
  9878  095A  3020               	movlw	32
  9879  095B  0226               	subwf	Flash_Memory_Modify@i,w
  9880  095C  1803               	btfsc	3,0
  9881  095D  2977               	goto	l6510
  9882  095E                     l6504:	
  9883                           
  9884                           ;MCU_B1.c: 904: Memory->Data[i] = Flash_Memory_Read(i);
  9885  095E  0826               	movf	Flash_Memory_Modify@i,w
  9886  095F  3191  2178  3189   	fcall	_Flash_Memory_Read
  9887  0962  0020               	movlb	0	; select bank0
  9888  0963  00A4               	movwf	??_Flash_Memory_Modify
  9889  0964  0826               	movf	Flash_Memory_Modify@i,w
  9890  0965  0021               	movlb	1	; select bank1
  9891  0966  0767               	addwf	_Memory^(0+128),w
  9892  0967  0020               	movlb	0	; select bank0
  9893  0968  00A5               	movwf	??_Flash_Memory_Modify+1
  9894  0969  0825               	movf	??_Flash_Memory_Modify+1,w
  9895  096A  0086               	movwf	6
  9896  096B  3002               	movlw	2	; select bank4/5
  9897  096C  0087               	movwf	7
  9898  096D  0824               	movf	??_Flash_Memory_Modify,w
  9899  096E  0081               	movwf	1
  9900  096F  3001               	movlw	1
  9901  0970  00A4               	movwf	??_Flash_Memory_Modify
  9902  0971  0824               	movf	??_Flash_Memory_Modify,w
  9903  0972  07A6               	addwf	Flash_Memory_Modify@i,f
  9904  0973  3020               	movlw	32
  9905  0974  0226               	subwf	Flash_Memory_Modify@i,w
  9906  0975  1C03               	skipc
  9907  0976  295E               	goto	l6504
  9908  0977                     l6510:	
  9909                           
  9910                           ;MCU_B1.c: 905: }
  9911                           ;MCU_B1.c: 906: Memory->Data[0]=product->Data[12];
  9912  0977  087D               	movf	_product,w
  9913  0978  3E0C               	addlw	12
  9914  0979  0086               	movwf	6
  9915  097A  3001               	movlw	1	; select bank2/3
  9916  097B  0087               	movwf	7
  9917  097C  0801               	movf	1,w
  9918  097D  00A4               	movwf	??_Flash_Memory_Modify
  9919  097E  0021               	movlb	1	; select bank1
  9920  097F  0867               	movf	_Memory^(0+128),w
  9921  0980  0086               	movwf	6
  9922  0981  3002               	movlw	2	; select bank4/5
  9923  0982  0087               	movwf	7
  9924  0983  0020               	movlb	0	; select bank0
  9925  0984  0824               	movf	??_Flash_Memory_Modify,w
  9926  0985  0081               	movwf	1
  9927                           
  9928                           ;MCU_B1.c: 907: Memory->Data[1]=product->Data[13];
  9929  0986  087D               	movf	_product,w
  9930  0987  3E0D               	addlw	13
  9931  0988  0086               	movwf	6
  9932  0989  3001               	movlw	1	; select bank2/3
  9933  098A  0087               	movwf	7
  9934  098B  0801               	movf	1,w
  9935  098C  00A4               	movwf	??_Flash_Memory_Modify
  9936  098D  0021               	movlb	1	; select bank1
  9937  098E  0A67               	incf	_Memory^(0+128),w
  9938  098F  0086               	movwf	6
  9939  0990  3002               	movlw	2	; select bank4/5
  9940  0991  0087               	movwf	7
  9941  0992  0020               	movlb	0	; select bank0
  9942  0993  0824               	movf	??_Flash_Memory_Modify,w
  9943  0994  0081               	movwf	1
  9944                           
  9945                           ;MCU_B1.c: 908: Memory->Data[2]=product->Data[14];
  9946  0995  087D               	movf	_product,w
  9947  0996  3E0E               	addlw	14
  9948  0997  0086               	movwf	6
  9949  0998  3001               	movlw	1	; select bank2/3
  9950  0999  0087               	movwf	7
  9951  099A  0801               	movf	1,w
  9952  099B  00A4               	movwf	??_Flash_Memory_Modify
  9953  099C  0021               	movlb	1	; select bank1
  9954  099D  0867               	movf	_Memory^(0+128),w
  9955  099E  3E02               	addlw	2
  9956  099F  0086               	movwf	6
  9957  09A0  3002               	movlw	2	; select bank4/5
  9958  09A1  0087               	movwf	7
  9959  09A2  0020               	movlb	0	; select bank0
  9960  09A3  0824               	movf	??_Flash_Memory_Modify,w
  9961  09A4  0081               	movwf	1
  9962                           
  9963                           ;MCU_B1.c: 914: if (Memory->LoopSave) {
  9964  09A5  0021               	movlb	1	; select bank1
  9965  09A6  0867               	movf	_Memory^(0+128),w
  9966  09A7  3E22               	addlw	34
  9967  09A8  0086               	movwf	6
  9968  09A9  3002               	movlw	2	; select bank4/5
  9969  09AA  0087               	movwf	7
  9970  09AB  1D01               	btfss	1,2
  9971  09AC  29BE               	goto	l6514
  9972                           
  9973                           ;MCU_B1.c: 915: Memory->LoopSave = 0;
  9974  09AD  0867               	movf	_Memory^(0+128),w
  9975  09AE  3E22               	addlw	34
  9976  09AF  0086               	movwf	6
  9977  09B0  3002               	movlw	2	; select bank4/5
  9978  09B1  0087               	movwf	7
  9979  09B2  1101               	bcf	1,2
  9980                           
  9981                           ;MCU_B1.c: 916: myMain->FirstOpen = 0;
  9982  09B3  086A               	movf	_myMain^(0+128),w
  9983  09B4  0086               	movwf	6
  9984  09B5  3001               	movlw	1	; select bank2/3
  9985  09B6  0087               	movwf	7
  9986  09B7  1281               	bcf	1,5
  9987                           
  9988                           ;MCU_B1.c: 917: myMain->First = 0;
  9989  09B8  086A               	movf	_myMain^(0+128),w
  9990  09B9  3E03               	addlw	3
  9991  09BA  0086               	movwf	6
  9992  09BB  3001               	movlw	1	; select bank2/3
  9993  09BC  0087               	movwf	7
  9994  09BD  1081               	bcf	1,1
  9995  09BE                     l6514:	
  9996                           
  9997                           ;MCU_B1.c: 919: }
  9998                           ;MCU_B1.c: 920: GIE = 0;
  9999  09BE  138B               	bcf	11,7	;volatile
 10000                           
 10001                           ;MCU_B1.c: 921: Flash_Memory_Erasing();
 10002  09BF  319E  26EA  3189   	fcall	_Flash_Memory_Erasing
 10003                           
 10004                           ;MCU_B1.c: 922: Flash_Memory_Write();
 10005  09C2  3194  2421         	fcall	_Flash_Memory_Write
 10006                           
 10007                           ;MCU_B1.c: 923: GIE = 1;
 10008  09C4  178B               	bsf	11,7	;volatile
 10009  09C5  0008               	return
 10010  09C6                     __end_of_Flash_Memory_Modify:	
 10011                           
 10012                           	psect	text55
 10013  1EEA                     __ptext55:	
 10014 ;; *************** function _Flash_Memory_Erasing *****************
 10015 ;; Defined at:
 10016 ;;		line 890 in file "../src/MCU_B1.c"
 10017 ;; Parameters:    Size  Location     Type
 10018 ;;		None
 10019 ;; Auto vars:     Size  Location     Type
 10020 ;;		None
 10021 ;; Return value:  Size  Location     Type
 10022 ;;		None               void
 10023 ;; Registers used:
 10024 ;;		wreg, status,2, status,0, pclath, cstack
 10025 ;; Tracked objects:
 10026 ;;		On entry : 0/0
 10027 ;;		On exit  : 0/0
 10028 ;;		Unchanged: 0/0
 10029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;Total ram usage:        0 bytes
 10035 ;; Hardware stack levels used:    1
 10036 ;; Hardware stack levels required when called:    6
 10037 ;; This function calls:
 10038 ;;		_Flash_Memory_Unlock
 10039 ;; This function is called by:
 10040 ;;		_Flash_Memory_Modify
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           
 10045                           ;psect for function _Flash_Memory_Erasing
 10046  1EEA                     _Flash_Memory_Erasing:	
 10047                           
 10048                           ;MCU_B1.c: 891: CFGS = 0;
 10049                           
 10050                           ;incstack = 0
 10051                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10052  1EEA  0023               	movlb	3	; select bank3
 10053  1EEB  1315               	bcf	21,6	;volatile
 10054                           
 10055                           ;MCU_B1.c: 892: PMADRH = 0x30;
 10056  1EEC  3030               	movlw	48
 10057  1EED  0092               	movwf	18	;volatile
 10058                           
 10059                           ;MCU_B1.c: 893: PMADRL = 0x00;
 10060  1EEE  0191               	clrf	17	;volatile
 10061                           
 10062                           ;MCU_B1.c: 894: FREE = 1;
 10063  1EEF  1615               	bsf	21,4	;volatile
 10064                           
 10065                           ;MCU_B1.c: 895: WREN = 1;
 10066  1EF0  1515               	bsf	21,2	;volatile
 10067                           
 10068                           ;MCU_B1.c: 896: Flash_Memory_Unlock();
 10069  1EF1  319E  2685         	fcall	_Flash_Memory_Unlock
 10070                           
 10071                           ;MCU_B1.c: 897: WREN = 0;
 10072  1EF3  0023               	movlb	3	; select bank3
 10073  1EF4  1115               	bcf	21,2	;volatile
 10074  1EF5  0008               	return
 10075  1EF6                     __end_of_Flash_Memory_Erasing:	
 10076                           
 10077                           	psect	text56
 10078  02E9                     __ptext56:	
 10079 ;; *************** function _Flash_Memory_Initialization *****************
 10080 ;; Defined at:
 10081 ;;		line 790 in file "../src/MCU_B1.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;		None
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  i               1   62[BANK0 ] unsigned char 
 10086 ;; Return value:  Size  Location     Type
 10087 ;;		None               void
 10088 ;; Registers used:
 10089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;Total ram usage:        2 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    8
 10102 ;; This function calls:
 10103 ;;		_Flash_Memory_Read
 10104 ;;		_Flash_Memory_Write
 10105 ;;		_setPercentValue
 10106 ;; This function is called by:
 10107 ;;		_main
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           
 10112                           ;psect for function _Flash_Memory_Initialization
 10113  02E9                     _Flash_Memory_Initialization:	
 10114                           
 10115                           ;MCU_B1.c: 791: char i;
 10116                           ;MCU_B1.c: 792: if (Flash_Memory_Read(31) == 0xaa) {
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10120  02E9  301F               	movlw	31
 10121  02EA  3191  2178  3182   	fcall	_Flash_Memory_Read
 10122  02ED  3AAA               	xorlw	170
 10123  02EE  1D03               	skipz
 10124  02EF  2B62               	goto	l6874
 10125                           
 10126                           ;MCU_B1.c: 793: product->Data[12] = Flash_Memory_Read(0);
 10127  02F0  3000               	movlw	0
 10128  02F1  3191  2178  3182   	fcall	_Flash_Memory_Read
 10129  02F4  0020               	movlb	0	; select bank0
 10130  02F5  00DD               	movwf	??_Flash_Memory_Initialization
 10131  02F6  087D               	movf	_product,w
 10132  02F7  3E0C               	addlw	12
 10133  02F8  0086               	movwf	6
 10134  02F9  3001               	movlw	1	; select bank2/3
 10135  02FA  0087               	movwf	7
 10136  02FB  085D               	movf	??_Flash_Memory_Initialization,w
 10137  02FC  0081               	movwf	1
 10138                           
 10139                           ;MCU_B1.c: 794: product->Data[13] = Flash_Memory_Read(1);
 10140  02FD  3001               	movlw	1
 10141  02FE  3191  2178  3182   	fcall	_Flash_Memory_Read
 10142  0301  0020               	movlb	0	; select bank0
 10143  0302  00DD               	movwf	??_Flash_Memory_Initialization
 10144  0303  087D               	movf	_product,w
 10145  0304  3E0D               	addlw	13
 10146  0305  0086               	movwf	6
 10147  0306  3001               	movlw	1	; select bank2/3
 10148  0307  0087               	movwf	7
 10149  0308  085D               	movf	??_Flash_Memory_Initialization,w
 10150  0309  0081               	movwf	1
 10151                           
 10152                           ;MCU_B1.c: 795: product->Data[14] = Flash_Memory_Read(2);
 10153  030A  3002               	movlw	2
 10154  030B  3191  2178  3182   	fcall	_Flash_Memory_Read
 10155  030E  0020               	movlb	0	; select bank0
 10156  030F  00DD               	movwf	??_Flash_Memory_Initialization
 10157  0310  087D               	movf	_product,w
 10158  0311  3E0E               	addlw	14
 10159  0312  0086               	movwf	6
 10160  0313  3001               	movlw	1	; select bank2/3
 10161  0314  0087               	movwf	7
 10162  0315  085D               	movf	??_Flash_Memory_Initialization,w
 10163  0316  0081               	movwf	1
 10164                           
 10165                           ;MCU_B1.c: 801: i = setPercentValue(((char)(65*1.5)));
 10166  0317  3061               	movlw	97
 10167  0318  3196  2619  3182   	fcall	_setPercentValue
 10168  031B  0020               	movlb	0	; select bank0
 10169  031C  00DD               	movwf	??_Flash_Memory_Initialization
 10170  031D  085D               	movf	??_Flash_Memory_Initialization,w
 10171  031E  00DE               	movwf	Flash_Memory_Initialization@i
 10172                           
 10173                           ;MCU_B1.c: 802: product->Data[21] = i;
 10174  031F  085E               	movf	Flash_Memory_Initialization@i,w
 10175  0320  00DD               	movwf	??_Flash_Memory_Initialization
 10176  0321  087D               	movf	_product,w
 10177  0322  3E15               	addlw	21
 10178  0323  0086               	movwf	6
 10179  0324  3001               	movlw	1	; select bank2/3
 10180  0325  0087               	movwf	7
 10181  0326  085D               	movf	??_Flash_Memory_Initialization,w
 10182  0327  0081               	movwf	1
 10183                           
 10184                           ;MCU_B1.c: 803: product->Data[22] = i;
 10185  0328  085E               	movf	Flash_Memory_Initialization@i,w
 10186  0329  00DD               	movwf	??_Flash_Memory_Initialization
 10187  032A  087D               	movf	_product,w
 10188  032B  3E16               	addlw	22
 10189  032C  0086               	movwf	6
 10190  032D  3001               	movlw	1	; select bank2/3
 10191  032E  0087               	movwf	7
 10192  032F  085D               	movf	??_Flash_Memory_Initialization,w
 10193  0330  0081               	movwf	1
 10194                           
 10195                           ;MCU_B1.c: 804: product->Data[23] = i;
 10196  0331  085E               	movf	Flash_Memory_Initialization@i,w
 10197  0332  00DD               	movwf	??_Flash_Memory_Initialization
 10198  0333  087D               	movf	_product,w
 10199  0334  3E17               	addlw	23
 10200  0335  0086               	movwf	6
 10201  0336  3001               	movlw	1	; select bank2/3
 10202  0337  0087               	movwf	7
 10203  0338  085D               	movf	??_Flash_Memory_Initialization,w
 10204  0339  0081               	movwf	1
 10205                           
 10206                           ;MCU_B1.c: 806: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10207  033A  087D               	movf	_product,w
 10208  033B  3E0C               	addlw	12
 10209  033C  0086               	movwf	6
 10210  033D  3001               	movlw	1	; select bank2/3
 10211  033E  0087               	movwf	7
 10212  033F  0801               	movf	1,w
 10213  0340  3AFF               	xorlw	255
 10214  0341  1D03               	skipz
 10215  0342  0008               	return
 10216  0343  087D               	movf	_product,w
 10217  0344  3E0D               	addlw	13
 10218  0345  0086               	movwf	6
 10219  0346  3001               	movlw	1	; select bank2/3
 10220  0347  0087               	movwf	7
 10221  0348  0801               	movf	1,w
 10222  0349  3AFF               	xorlw	255
 10223  034A  1D03               	skipz
 10224  034B  0008               	return
 10225  034C  087D               	movf	_product,w
 10226  034D  3E0E               	addlw	14
 10227  034E  0086               	movwf	6
 10228  034F  3001               	movlw	1	; select bank2/3
 10229  0350  0087               	movwf	7
 10230  0351  0801               	movf	1,w
 10231  0352  3AFF               	xorlw	255
 10232  0353  1D03               	skipz
 10233  0354  0008               	return
 10234                           
 10235                           ;MCU_B1.c: 807: myMain->FirstOpen = 1;
 10236  0355  0021               	movlb	1	; select bank1
 10237  0356  086A               	movf	_myMain^(0+128),w
 10238  0357  0086               	movwf	6
 10239  0358  3001               	movlw	1	; select bank2/3
 10240  0359  0087               	movwf	7
 10241  035A  1681               	bsf	1,5
 10242                           
 10243                           ;MCU_B1.c: 808: myMain->First = 1;
 10244  035B  086A               	movf	_myMain^(0+128),w
 10245  035C  3E03               	addlw	3
 10246  035D  0086               	movwf	6
 10247  035E  3001               	movlw	1	; select bank2/3
 10248  035F  0087               	movwf	7
 10249  0360  1481               	bsf	1,1
 10250                           
 10251                           ;MCU_B1.c: 809: }
 10252                           ;MCU_B1.c: 810: } else {
 10253  0361  0008               	return
 10254  0362                     l6874:	
 10255                           
 10256                           ;MCU_B1.c: 811: i = setPercentValue(((char)(65*1.5)));
 10257  0362  3061               	movlw	97
 10258  0363  3196  2619  3182   	fcall	_setPercentValue
 10259  0366  0020               	movlb	0	; select bank0
 10260  0367  00DD               	movwf	??_Flash_Memory_Initialization
 10261  0368  085D               	movf	??_Flash_Memory_Initialization,w
 10262  0369  00DE               	movwf	Flash_Memory_Initialization@i
 10263                           
 10264                           ;MCU_B1.c: 812: Memory->Data[0]=0xff;
 10265  036A  30FF               	movlw	255
 10266  036B  00DD               	movwf	??_Flash_Memory_Initialization
 10267  036C  0021               	movlb	1	; select bank1
 10268  036D  0867               	movf	_Memory^(0+128),w
 10269  036E  0086               	movwf	6
 10270  036F  3002               	movlw	2	; select bank4/5
 10271  0370  0087               	movwf	7
 10272  0371  0020               	movlb	0	; select bank0
 10273  0372  085D               	movf	??_Flash_Memory_Initialization,w
 10274  0373  0081               	movwf	1
 10275                           
 10276                           ;MCU_B1.c: 813: Memory->Data[1]=0xff;
 10277  0374  30FF               	movlw	255
 10278  0375  00DD               	movwf	??_Flash_Memory_Initialization
 10279  0376  0021               	movlb	1	; select bank1
 10280  0377  0A67               	incf	_Memory^(0+128),w
 10281  0378  0086               	movwf	6
 10282  0379  3002               	movlw	2	; select bank4/5
 10283  037A  0087               	movwf	7
 10284  037B  0020               	movlb	0	; select bank0
 10285  037C  085D               	movf	??_Flash_Memory_Initialization,w
 10286  037D  0081               	movwf	1
 10287                           
 10288                           ;MCU_B1.c: 814: Memory->Data[2]=0xff;
 10289  037E  30FF               	movlw	255
 10290  037F  00DD               	movwf	??_Flash_Memory_Initialization
 10291  0380  0021               	movlb	1	; select bank1
 10292  0381  0867               	movf	_Memory^(0+128),w
 10293  0382  3E02               	addlw	2
 10294  0383  0086               	movwf	6
 10295  0384  3002               	movlw	2	; select bank4/5
 10296  0385  0087               	movwf	7
 10297  0386  0020               	movlb	0	; select bank0
 10298  0387  085D               	movf	??_Flash_Memory_Initialization,w
 10299  0388  0081               	movwf	1
 10300                           
 10301                           ;MCU_B1.c: 815: Memory->Data[3]=0xff;
 10302  0389  30FF               	movlw	255
 10303  038A  00DD               	movwf	??_Flash_Memory_Initialization
 10304  038B  0021               	movlb	1	; select bank1
 10305  038C  0867               	movf	_Memory^(0+128),w
 10306  038D  3E03               	addlw	3
 10307  038E  0086               	movwf	6
 10308  038F  3002               	movlw	2	; select bank4/5
 10309  0390  0087               	movwf	7
 10310  0391  0020               	movlb	0	; select bank0
 10311  0392  085D               	movf	??_Flash_Memory_Initialization,w
 10312  0393  0081               	movwf	1
 10313                           
 10314                           ;MCU_B1.c: 816: Memory->Data[4]=0xff;
 10315  0394  30FF               	movlw	255
 10316  0395  00DD               	movwf	??_Flash_Memory_Initialization
 10317  0396  0021               	movlb	1	; select bank1
 10318  0397  0867               	movf	_Memory^(0+128),w
 10319  0398  3E04               	addlw	4
 10320  0399  0086               	movwf	6
 10321  039A  3002               	movlw	2	; select bank4/5
 10322  039B  0087               	movwf	7
 10323  039C  0020               	movlb	0	; select bank0
 10324  039D  085D               	movf	??_Flash_Memory_Initialization,w
 10325  039E  0081               	movwf	1
 10326                           
 10327                           ;MCU_B1.c: 817: Memory->Data[5]=0xff;
 10328  039F  30FF               	movlw	255
 10329  03A0  00DD               	movwf	??_Flash_Memory_Initialization
 10330  03A1  0021               	movlb	1	; select bank1
 10331  03A2  0867               	movf	_Memory^(0+128),w
 10332  03A3  3E05               	addlw	5
 10333  03A4  0086               	movwf	6
 10334  03A5  3002               	movlw	2	; select bank4/5
 10335  03A6  0087               	movwf	7
 10336  03A7  0020               	movlb	0	; select bank0
 10337  03A8  085D               	movf	??_Flash_Memory_Initialization,w
 10338  03A9  0081               	movwf	1
 10339                           
 10340                           ;MCU_B1.c: 818: Memory->Data[31]=0xaa;
 10341  03AA  30AA               	movlw	170
 10342  03AB  00DD               	movwf	??_Flash_Memory_Initialization
 10343  03AC  0021               	movlb	1	; select bank1
 10344  03AD  0867               	movf	_Memory^(0+128),w
 10345  03AE  3E1F               	addlw	31
 10346  03AF  0086               	movwf	6
 10347  03B0  3002               	movlw	2	; select bank4/5
 10348  03B1  0087               	movwf	7
 10349  03B2  0020               	movlb	0	; select bank0
 10350  03B3  085D               	movf	??_Flash_Memory_Initialization,w
 10351  03B4  0081               	movwf	1
 10352                           
 10353                           ;MCU_B1.c: 819: product->Data[21] = i;
 10354  03B5  085E               	movf	Flash_Memory_Initialization@i,w
 10355  03B6  00DD               	movwf	??_Flash_Memory_Initialization
 10356  03B7  087D               	movf	_product,w
 10357  03B8  3E15               	addlw	21
 10358  03B9  0086               	movwf	6
 10359  03BA  3001               	movlw	1	; select bank2/3
 10360  03BB  0087               	movwf	7
 10361  03BC  085D               	movf	??_Flash_Memory_Initialization,w
 10362  03BD  0081               	movwf	1
 10363                           
 10364                           ;MCU_B1.c: 820: product->Data[22] = i;
 10365  03BE  085E               	movf	Flash_Memory_Initialization@i,w
 10366  03BF  00DD               	movwf	??_Flash_Memory_Initialization
 10367  03C0  087D               	movf	_product,w
 10368  03C1  3E16               	addlw	22
 10369  03C2  0086               	movwf	6
 10370  03C3  3001               	movlw	1	; select bank2/3
 10371  03C4  0087               	movwf	7
 10372  03C5  085D               	movf	??_Flash_Memory_Initialization,w
 10373  03C6  0081               	movwf	1
 10374                           
 10375                           ;MCU_B1.c: 821: product->Data[23] = i;
 10376  03C7  085E               	movf	Flash_Memory_Initialization@i,w
 10377  03C8  00DD               	movwf	??_Flash_Memory_Initialization
 10378  03C9  087D               	movf	_product,w
 10379  03CA  3E17               	addlw	23
 10380  03CB  0086               	movwf	6
 10381  03CC  3001               	movlw	1	; select bank2/3
 10382  03CD  0087               	movwf	7
 10383  03CE  085D               	movf	??_Flash_Memory_Initialization,w
 10384  03CF  0081               	movwf	1
 10385                           
 10386                           ;MCU_B1.c: 822: GIE = 0;
 10387  03D0  138B               	bcf	11,7	;volatile
 10388                           
 10389                           ;MCU_B1.c: 823: Flash_Memory_Write();
 10390  03D1  3194  2421         	fcall	_Flash_Memory_Write
 10391                           
 10392                           ;MCU_B1.c: 824: GIE = 1;
 10393  03D3  178B               	bsf	11,7	;volatile
 10394                           
 10395                           ;MCU_B1.c: 825: myMain->FirstOpen = 1;
 10396  03D4  0021               	movlb	1	; select bank1
 10397  03D5  086A               	movf	_myMain^(0+128),w
 10398  03D6  0086               	movwf	6
 10399  03D7  3001               	movlw	1	; select bank2/3
 10400  03D8  0087               	movwf	7
 10401  03D9  1681               	bsf	1,5
 10402                           
 10403                           ;MCU_B1.c: 826: myMain->First = 1;
 10404  03DA  086A               	movf	_myMain^(0+128),w
 10405  03DB  3E03               	addlw	3
 10406  03DC  0086               	movwf	6
 10407  03DD  3001               	movlw	1	; select bank2/3
 10408  03DE  0087               	movwf	7
 10409  03DF  1481               	bsf	1,1
 10410  03E0  0008               	return
 10411  03E1                     __end_of_Flash_Memory_Initialization:	
 10412                           
 10413                           	psect	text57
 10414  1421                     __ptext57:	
 10415 ;; *************** function _Flash_Memory_Write *****************
 10416 ;; Defined at:
 10417 ;;		line 871 in file "../src/MCU_B1.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;		None
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  i               1    1[BANK0 ] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;		None               void
 10424 ;; Registers used:
 10425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        2 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    6
 10438 ;; This function calls:
 10439 ;;		_Flash_Memory_Unlock
 10440 ;; This function is called by:
 10441 ;;		_Flash_Memory_Initialization
 10442 ;;		_Flash_Memory_Modify
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function _Flash_Memory_Write
 10448  1421                     _Flash_Memory_Write:	
 10449                           
 10450                           ;MCU_B1.c: 872: char i;
 10451                           ;MCU_B1.c: 873: CFGS = 0;
 10452                           
 10453                           ;incstack = 0
 10454                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10455  1421  0023               	movlb	3	; select bank3
 10456  1422  1315               	bcf	21,6	;volatile
 10457                           
 10458                           ;MCU_B1.c: 874: PMADRH = 0x30;
 10459  1423  3030               	movlw	48
 10460  1424  0092               	movwf	18	;volatile
 10461                           
 10462                           ;MCU_B1.c: 875: PMDATH = 0;
 10463  1425  0194               	clrf	20	;volatile
 10464                           
 10465                           ;MCU_B1.c: 876: FREE = 0;
 10466  1426  1215               	bcf	21,4	;volatile
 10467                           
 10468                           ;MCU_B1.c: 877: LWLO = 1;
 10469  1427  1695               	bsf	21,5	;volatile
 10470                           
 10471                           ;MCU_B1.c: 878: WREN = 1;
 10472  1428  1515               	bsf	21,2	;volatile
 10473                           
 10474                           ;MCU_B1.c: 879: for (i = 0; i < 32; i++) {
 10475  1429  0020               	movlb	0	; select bank0
 10476  142A  01A1               	clrf	Flash_Memory_Write@i
 10477  142B  3020               	movlw	32
 10478  142C  0221               	subwf	Flash_Memory_Write@i,w
 10479  142D  1803               	btfsc	3,0
 10480  142E  2C4B               	goto	l1397
 10481  142F                     l6000:	
 10482                           
 10483                           ;MCU_B1.c: 880: PMADRL = i;
 10484  142F  0821               	movf	Flash_Memory_Write@i,w
 10485  1430  0023               	movlb	3	; select bank3
 10486  1431  0091               	movwf	17	;volatile
 10487                           
 10488                           ;MCU_B1.c: 881: PMDATL = Memory->Data[i];
 10489  1432  0020               	movlb	0	; select bank0
 10490  1433  0821               	movf	Flash_Memory_Write@i,w
 10491  1434  0021               	movlb	1	; select bank1
 10492  1435  0767               	addwf	_Memory^(0+128),w
 10493  1436  0020               	movlb	0	; select bank0
 10494  1437  00A0               	movwf	??_Flash_Memory_Write
 10495  1438  0820               	movf	??_Flash_Memory_Write,w
 10496  1439  0086               	movwf	6
 10497  143A  3002               	movlw	2	; select bank4/5
 10498  143B  0087               	movwf	7
 10499  143C  0801               	movf	1,w
 10500  143D  0023               	movlb	3	; select bank3
 10501  143E  0093               	movwf	19	;volatile
 10502                           
 10503                           ;MCU_B1.c: 882: Flash_Memory_Unlock();
 10504  143F  319E  2685  3194   	fcall	_Flash_Memory_Unlock
 10505  1442  3001               	movlw	1
 10506  1443  0020               	movlb	0	; select bank0
 10507  1444  00A0               	movwf	??_Flash_Memory_Write
 10508  1445  0820               	movf	??_Flash_Memory_Write,w
 10509  1446  07A1               	addwf	Flash_Memory_Write@i,f
 10510  1447  3020               	movlw	32
 10511  1448  0221               	subwf	Flash_Memory_Write@i,w
 10512  1449  1C03               	skipc
 10513  144A  2C2F               	goto	l6000
 10514  144B                     l1397:	
 10515                           
 10516                           ;MCU_B1.c: 883: }
 10517                           ;MCU_B1.c: 884: LWLO = 0;
 10518  144B  0023               	movlb	3	; select bank3
 10519  144C  1295               	bcf	21,5	;volatile
 10520                           
 10521                           ;MCU_B1.c: 885: Flash_Memory_Unlock();
 10522  144D  319E  2685         	fcall	_Flash_Memory_Unlock
 10523                           
 10524                           ;MCU_B1.c: 886: WREN = 0;
 10525  144F  0023               	movlb	3	; select bank3
 10526  1450  1115               	bcf	21,2	;volatile
 10527  1451  0008               	return
 10528  1452                     __end_of_Flash_Memory_Write:	
 10529                           
 10530                           	psect	text58
 10531  1E85                     __ptext58:	
 10532 ;; *************** function _Flash_Memory_Unlock *****************
 10533 ;; Defined at:
 10534 ;;		line 850 in file "../src/MCU_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        0 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Flash_Memory_Write
 10559 ;;		_Flash_Memory_Erasing
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _Flash_Memory_Unlock
 10565  1E85                     _Flash_Memory_Unlock:	
 10566                           
 10567                           ;MCU_B1.c: 851: PMCON2 = 0x55;
 10568                           
 10569                           ;incstack = 0
 10570                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10571  1E85  3055               	movlw	85
 10572  1E86  0023               	movlb	3	; select bank3
 10573  1E87  0096               	movwf	22	;volatile
 10574                           
 10575                           ;MCU_B1.c: 852: PMCON2 = 0xaa;
 10576  1E88  30AA               	movlw	170
 10577  1E89  0096               	movwf	22	;volatile
 10578                           
 10579                           ;MCU_B1.c: 853: WR = 1;
 10580  1E8A  1495               	bsf	21,1	;volatile
 10581                           
 10582                           ;MCU_B1.c: 854: __nop();
 10583  1E8B  0000               	nop
 10584                           
 10585                           ;MCU_B1.c: 855: __nop();
 10586  1E8C  0000               	nop
 10587  1E8D  0008               	return
 10588  1E8E                     __end_of_Flash_Memory_Unlock:	
 10589                           
 10590                           	psect	text59
 10591  1178                     __ptext59:	
 10592 ;; *************** function _Flash_Memory_Read *****************
 10593 ;; Defined at:
 10594 ;;		line 859 in file "../src/MCU_B1.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;  address         1    wreg     unsigned char 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  address         1    2[BANK0 ] unsigned char 
 10599 ;;  ret             1    3[BANK0 ] unsigned char 
 10600 ;;  i               1    1[BANK0 ] unsigned char 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      unsigned char 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        4 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    5
 10617 ;; This function calls:
 10618 ;;		Nothing
 10619 ;; This function is called by:
 10620 ;;		_Flash_Memory_Initialization
 10621 ;;		_Flash_Memory_Modify
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _Flash_Memory_Read
 10627  1178                     _Flash_Memory_Read:	
 10628                           
 10629                           ;incstack = 0
 10630                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10631                           ;Flash_Memory_Read@address stored from wreg
 10632  1178  0020               	movlb	0	; select bank0
 10633  1179  00A2               	movwf	Flash_Memory_Read@address
 10634                           
 10635                           ;MCU_B1.c: 860: char i, ret = 0;
 10636  117A  01A3               	clrf	Flash_Memory_Read@ret
 10637                           
 10638                           ;MCU_B1.c: 861: PMADRH = 0x30;
 10639  117B  3030               	movlw	48
 10640  117C  0023               	movlb	3	; select bank3
 10641  117D  0092               	movwf	18	;volatile
 10642                           
 10643                           ;MCU_B1.c: 862: PMADRL = address;
 10644  117E  0020               	movlb	0	; select bank0
 10645  117F  0822               	movf	Flash_Memory_Read@address,w
 10646  1180  0023               	movlb	3	; select bank3
 10647  1181  0091               	movwf	17	;volatile
 10648                           
 10649                           ;MCU_B1.c: 863: CFGS = 0;
 10650  1182  1315               	bcf	21,6	;volatile
 10651                           
 10652                           ;MCU_B1.c: 864: RD = 1;
 10653  1183  1415               	bsf	21,0	;volatile
 10654                           
 10655                           ;MCU_B1.c: 865: i = PMDATH;
 10656  1184  0814               	movf	20,w	;volatile
 10657  1185  0020               	movlb	0	; select bank0
 10658  1186  00A0               	movwf	??_Flash_Memory_Read
 10659  1187  0820               	movf	??_Flash_Memory_Read,w
 10660  1188  00A1               	movwf	Flash_Memory_Read@i
 10661                           
 10662                           ;MCU_B1.c: 866: ret = PMDATL;
 10663  1189  0023               	movlb	3	; select bank3
 10664  118A  0813               	movf	19,w	;volatile
 10665  118B  0020               	movlb	0	; select bank0
 10666  118C  00A0               	movwf	??_Flash_Memory_Read
 10667  118D  0820               	movf	??_Flash_Memory_Read,w
 10668  118E  00A3               	movwf	Flash_Memory_Read@ret
 10669                           
 10670                           ;MCU_B1.c: 867: return ret;
 10671  118F  0823               	movf	Flash_Memory_Read@ret,w
 10672  1190  0008               	return
 10673  1191                     __end_of_Flash_Memory_Read:	
 10674                           
 10675                           	psect	text60
 10676  1EAF                     __ptext60:	
 10677 ;; *************** function _DimmerLights_Main *****************
 10678 ;; Defined at:
 10679 ;;		line 251 in file "../src/Dimmer_B1.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;		None
 10682 ;; Auto vars:     Size  Location     Type
 10683 ;;		None
 10684 ;; Return value:  Size  Location     Type
 10685 ;;		None               void
 10686 ;; Registers used:
 10687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10688 ;; Tracked objects:
 10689 ;;		On entry : 0/0
 10690 ;;		On exit  : 0/0
 10691 ;;		Unchanged: 0/0
 10692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;Total ram usage:        0 bytes
 10698 ;; Hardware stack levels used:    1
 10699 ;; Hardware stack levels required when called:   11
 10700 ;; This function calls:
 10701 ;;		_DimmerLights_Close
 10702 ;;		_setDimmerLights_Main
 10703 ;; This function is called by:
 10704 ;;		_main
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           
 10709                           ;psect for function _DimmerLights_Main
 10710  1EAF                     _DimmerLights_Main:	
 10711                           
 10712                           ;Dimmer_B1.c: 253: setDimmerLights_Main(1);
 10713                           
 10714                           ;incstack = 0
 10715                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10716  1EAF  3001               	movlw	1
 10717  1EB0  318C  240C  319E   	fcall	_setDimmerLights_Main
 10718                           
 10719                           ;Dimmer_B1.c: 257: setDimmerLights_Main(2);
 10720  1EB3  3002               	movlw	2
 10721  1EB4  318C  240C  319E   	fcall	_setDimmerLights_Main
 10722                           
 10723                           ;Dimmer_B1.c: 264: DimmerLights_Close();
 10724  1EB7  3191  2116         	fcall	_DimmerLights_Close
 10725  1EB9  0008               	return
 10726  1EBA                     __end_of_DimmerLights_Main:	
 10727                           
 10728                           	psect	text61
 10729  0C0C                     __ptext61:	
 10730 ;; *************** function _setDimmerLights_Main *****************
 10731 ;; Defined at:
 10732 ;;		line 268 in file "../src/Dimmer_B1.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;  lights          1    wreg     unsigned char 
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  lights          1   70[BANK0 ] unsigned char 
 10737 ;;  clear           1   69[BANK0 ] unsigned char 
 10738 ;; Return value:  Size  Location     Type
 10739 ;;		None               void
 10740 ;; Registers used:
 10741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;Total ram usage:        2 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:   10
 10754 ;; This function calls:
 10755 ;;		_DimmerLightsPointSelect
 10756 ;;		_setBuz
 10757 ;;		_setDimmerLights
 10758 ;;		_setDimmerLights_Adj
 10759 ;; This function is called by:
 10760 ;;		_DimmerLights_Main
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function _setDimmerLights_Main
 10766  0C0C                     _setDimmerLights_Main:	
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10770                           ;setDimmerLights_Main@lights stored from wreg
 10771  0C0C  0020               	movlb	0	; select bank0
 10772  0C0D  00E6               	movwf	setDimmerLights_Main@lights
 10773                           
 10774                           ;Dimmer_B1.c: 269: char clear = 1;
 10775  0C0E  01E5               	clrf	setDimmerLights_Main@clear
 10776  0C0F  0AE5               	incf	setDimmerLights_Main@clear,f
 10777                           
 10778                           ;Dimmer_B1.c: 270: DimmerLightsPointSelect(lights);
 10779  0C10  0866               	movf	setDimmerLights_Main@lights,w
 10780  0C11  3190  2082  318C   	fcall	_DimmerLightsPointSelect
 10781                           
 10782                           ;Dimmer_B1.c: 283: if (lights == 1) {
 10783  0C14  0020               	movlb	0	; select bank0
 10784  0C15  0866               	movf	setDimmerLights_Main@lights,w
 10785  0C16  3A01               	xorlw	1
 10786  0C17  1D03               	skipz
 10787  0C18  2C1C               	goto	l6372
 10788                           
 10789                           ;Dimmer_B1.c: 284: clear = (!DimmerLights22->Clear) ? 0 : 1;
 10790  0C19  0021               	movlb	1	; select bank1
 10791  0C1A  083C               	movf	_DimmerLights22^(0+128),w
 10792  0C1B  2C22               	goto	L12
 10793  0C1C                     l6372:	
 10794                           ;Dimmer_B1.c: 285: } else if (lights == 2) {
 10795                           
 10796  0C1C  0866               	movf	setDimmerLights_Main@lights,w
 10797  0C1D  3A02               	xorlw	2
 10798  0C1E  1D03               	skipz
 10799  0C1F  2C2B               	goto	l6376
 10800                           
 10801                           ;Dimmer_B1.c: 286: clear = (!DimmerLights11->Clear) ? 0 : 1;
 10802  0C20  0021               	movlb	1	; select bank1
 10803  0C21  083B               	movf	_DimmerLights11^(0+128),w
 10804  0C22                     L12:	
 10805  0C22  3E0C               	addlw	12
 10806  0C23  0086               	movwf	6
 10807  0C24  3001               	movlw	1	; select bank2/3
 10808  0C25  0087               	movwf	7
 10809  0C26  3000               	movlw	0
 10810  0C27  1801               	btfsc	1,0
 10811  0C28  3001               	movlw	1
 10812  0C29  0020               	movlb	0	; select bank0
 10813  0C2A  00E5               	movwf	setDimmerLights_Main@clear
 10814  0C2B                     l6376:	
 10815                           
 10816                           ;Dimmer_B1.c: 287: }
 10817                           ;Dimmer_B1.c: 290: if (DimmerLights->Trigger) {
 10818  0C2B  0879               	movf	_DimmerLights,w
 10819  0C2C  3E09               	addlw	9
 10820  0C2D  0086               	movwf	6
 10821  0C2E  3001               	movlw	1	; select bank2/3
 10822  0C2F  0087               	movwf	7
 10823  0C30  1C81               	btfss	1,1
 10824  0C31  2C56               	goto	l6390
 10825                           
 10826                           ;Dimmer_B1.c: 291: if (clear) {
 10827  0C32  0865               	movf	setDimmerLights_Main@clear,w
 10828  0C33  1903               	btfsc	3,2
 10829  0C34  0008               	return
 10830                           
 10831                           ;Dimmer_B1.c: 292: if (DimmerLights->Switch) {
 10832  0C35  0879               	movf	_DimmerLights,w
 10833  0C36  3E09               	addlw	9
 10834  0C37  0086               	movwf	6
 10835  0C38  3001               	movlw	1	; select bank2/3
 10836  0C39  0087               	movwf	7
 10837  0C3A  1C01               	btfss	1,0
 10838  0C3B  2C49               	goto	l6386
 10839                           
 10840                           ;Dimmer_B1.c: 293: DimmerLights->Trigger = 0;
 10841  0C3C  0879               	movf	_DimmerLights,w
 10842  0C3D  3E09               	addlw	9
 10843  0C3E  0086               	movwf	6
 10844  0C3F  3001               	movlw	1	; select bank2/3
 10845  0C40  0087               	movwf	7
 10846  0C41  1081               	bcf	1,1
 10847                           
 10848                           ;Dimmer_B1.c: 294: setDimmerLights(lights, 1);
 10849  0C42  01A4               	clrf	setDimmerLights@status
 10850  0C43  0AA4               	incf	setDimmerLights@status,f
 10851  0C44  0866               	movf	setDimmerLights_Main@lights,w
 10852  0C45  318D  25A3         	fcall	_setDimmerLights
 10853                           
 10854                           ;Dimmer_B1.c: 299: } else {
 10855  0C47  0020               	movlb	0	; select bank0
 10856  0C48  0008               	return
 10857  0C49                     l6386:	
 10858                           
 10859                           ;Dimmer_B1.c: 300: DimmerLights->Trigger = 0;
 10860  0C49  0879               	movf	_DimmerLights,w
 10861  0C4A  3E09               	addlw	9
 10862  0C4B  0086               	movwf	6
 10863  0C4C  3001               	movlw	1	; select bank2/3
 10864  0C4D  0087               	movwf	7
 10865  0C4E  1081               	bcf	1,1
 10866                           
 10867                           ;Dimmer_B1.c: 301: setDimmerLights(lights, 0);
 10868  0C4F  0020               	movlb	0	; select bank0
 10869  0C50  01A4               	clrf	setDimmerLights@status
 10870  0C51  0866               	movf	setDimmerLights_Main@lights,w
 10871  0C52  318D  25A3         	fcall	_setDimmerLights
 10872  0C54  0020               	movlb	0	; select bank0
 10873  0C55  0008               	return
 10874  0C56                     l6390:	
 10875                           ;Dimmer_B1.c: 306: }
 10876                           ;Dimmer_B1.c: 307: }
 10877                           ;Dimmer_B1.c: 308: } else {
 10878                           
 10879                           
 10880                           ;Dimmer_B1.c: 309: if (DimmerLights->TriggerAdj) {
 10881  0C56  0879               	movf	_DimmerLights,w
 10882  0C57  3E09               	addlw	9
 10883  0C58  0086               	movwf	6
 10884  0C59  3001               	movlw	1	; select bank2/3
 10885  0C5A  0087               	movwf	7
 10886  0C5B  1981               	btfsc	1,3
 10887  0C5C  2C5F               	goto	l6392
 10888  0C5D  0020               	movlb	0	; select bank0
 10889  0C5E  0008               	return
 10890  0C5F                     l6392:	
 10891                           
 10892                           ;Dimmer_B1.c: 310: if (clear) {
 10893  0C5F  0020               	movlb	0	; select bank0
 10894  0C60  0865               	movf	setDimmerLights_Main@clear,w
 10895  0C61  1903               	btfsc	3,2
 10896  0C62  0008               	return
 10897                           
 10898                           ;Dimmer_B1.c: 311: DimmerLightsPointSelect(lights);
 10899  0C63  0866               	movf	setDimmerLights_Main@lights,w
 10900  0C64  3190  2082  318C   	fcall	_DimmerLightsPointSelect
 10901                           
 10902                           ;Dimmer_B1.c: 312: DimmerLights->TriggerAdj = 0;
 10903  0C67  0879               	movf	_DimmerLights,w
 10904  0C68  3E09               	addlw	9
 10905  0C69  0086               	movwf	6
 10906  0C6A  3001               	movlw	1	; select bank2/3
 10907  0C6B  0087               	movwf	7
 10908  0C6C  1181               	bcf	1,3
 10909                           
 10910                           ;Dimmer_B1.c: 313: if (DimmerLights->AdjGo) {
 10911  0C6D  0879               	movf	_DimmerLights,w
 10912  0C6E  3E09               	addlw	9
 10913  0C6F  0086               	movwf	6
 10914  0C70  3001               	movlw	1	; select bank2/3
 10915  0C71  0087               	movwf	7
 10916  0C72  1D01               	btfss	1,2
 10917  0C73  2C85               	goto	l6402
 10918                           
 10919                           ;Dimmer_B1.c: 314: setDimmerLights_Adj(lights, 1);
 10920  0C74  0020               	movlb	0	; select bank0
 10921  0C75  01E2               	clrf	setDimmerLights_Adj@status
 10922  0C76  0AE2               	incf	setDimmerLights_Adj@status,f
 10923  0C77  0866               	movf	setDimmerLights_Main@lights,w
 10924  0C78  3194  248E  318C   	fcall	_setDimmerLights_Adj
 10925                           
 10926                           ;Dimmer_B1.c: 315: setBuz(1, 100);
 10927  0C7B  3064               	movlw	100
 10928  0C7C  0020               	movlb	0	; select bank0
 10929  0C7D  00A0               	movwf	setBuz@time
 10930  0C7E  3000               	movlw	0
 10931  0C7F  00A1               	movwf	setBuz@time+1
 10932  0C80  3001               	movlw	1
 10933  0C81  318A  22A9         	fcall	_setBuz
 10934                           
 10935                           ;Dimmer_B1.c: 316: } else {
 10936  0C83  0020               	movlb	0	; select bank0
 10937  0C84  0008               	return
 10938  0C85                     l6402:	
 10939                           
 10940                           ;Dimmer_B1.c: 317: setDimmerLights_Adj(lights, 0);
 10941  0C85  0020               	movlb	0	; select bank0
 10942  0C86  01E2               	clrf	setDimmerLights_Adj@status
 10943  0C87  0866               	movf	setDimmerLights_Main@lights,w
 10944  0C88  3194  248E         	fcall	_setDimmerLights_Adj
 10945  0C8A  0020               	movlb	0	; select bank0
 10946  0C8B  0008               	return
 10947  0C8C                     __end_of_setDimmerLights_Main:	
 10948                           
 10949                           	psect	text62
 10950  148E                     __ptext62:	
 10951 ;; *************** function _setDimmerLights_Adj *****************
 10952 ;; Defined at:
 10953 ;;		line 495 in file "../src/Dimmer_B1.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  lights          1    wreg     unsigned char 
 10956 ;;  status          1   66[BANK0 ] unsigned char 
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  lights          1   68[BANK0 ] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;		None               void
 10961 ;; Registers used:
 10962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10968 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;Total ram usage:        3 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    9
 10975 ;; This function calls:
 10976 ;;		_DimmerLightsPointSelect
 10977 ;;		_setRF_DimmerLights
 10978 ;;		_setTxData
 10979 ;; This function is called by:
 10980 ;;		_setDimmerLights_Main
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           
 10985                           ;psect for function _setDimmerLights_Adj
 10986  148E                     _setDimmerLights_Adj:	
 10987                           
 10988                           ;incstack = 0
 10989                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10990                           ;setDimmerLights_Adj@lights stored from wreg
 10991  148E  0020               	movlb	0	; select bank0
 10992  148F  00E4               	movwf	setDimmerLights_Adj@lights
 10993                           
 10994                           ;Dimmer_B1.c: 496: DimmerLightsPointSelect(lights);
 10995  1490  0864               	movf	setDimmerLights_Adj@lights,w
 10996  1491  3190  2082  3194   	fcall	_DimmerLightsPointSelect
 10997                           
 10998                           ;Dimmer_B1.c: 497: if (status) {
 10999  1494  0020               	movlb	0	; select bank0
 11000  1495  0862               	movf	setDimmerLights_Adj@status,w
 11001  1496  1903               	btfsc	3,2
 11002  1497  2CA3               	goto	l5958
 11003                           
 11004                           ;Dimmer_B1.c: 498: DimmerLights->AdjFlag = 1;
 11005  1498  0879               	movf	_DimmerLights,w
 11006  1499  0086               	movwf	6
 11007  149A  3001               	movlw	1	; select bank2/3
 11008  149B  0087               	movwf	7
 11009  149C  1581               	bsf	1,3
 11010                           
 11011                           ;Dimmer_B1.c: 499: DimmerLights->Signal = 1;
 11012  149D  0879               	movf	_DimmerLights,w
 11013  149E  0086               	movwf	6
 11014  149F  3001               	movlw	1	; select bank2/3
 11015  14A0  0087               	movwf	7
 11016  14A1  1481               	bsf	1,1
 11017                           
 11018                           ;Dimmer_B1.c: 500: } else {
 11019  14A2  0008               	return
 11020  14A3                     l5958:	
 11021                           
 11022                           ;Dimmer_B1.c: 501: if (DimmerLights->AdjFlag) {
 11023  14A3  0879               	movf	_DimmerLights,w
 11024  14A4  0086               	movwf	6
 11025  14A5  3001               	movlw	1	; select bank2/3
 11026  14A6  0087               	movwf	7
 11027  14A7  1D81               	btfss	1,3
 11028  14A8  0008               	return
 11029                           
 11030                           ;Dimmer_B1.c: 502: DimmerLights->Signal = 0;
 11031  14A9  0879               	movf	_DimmerLights,w
 11032  14AA  0086               	movwf	6
 11033  14AB  3001               	movlw	1	; select bank2/3
 11034  14AC  0087               	movwf	7
 11035  14AD  1081               	bcf	1,1
 11036                           
 11037                           ;Dimmer_B1.c: 503: DimmerLights->AdjFlag = 0;
 11038  14AE  0879               	movf	_DimmerLights,w
 11039  14AF  0086               	movwf	6
 11040  14B0  3001               	movlw	1	; select bank2/3
 11041  14B1  0087               	movwf	7
 11042  14B2  1181               	bcf	1,3
 11043                           
 11044                           ;Dimmer_B1.c: 504: ;;
 11045                           ;Dimmer_B1.c: 505: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11046  14B3  0879               	movf	_DimmerLights,w
 11047  14B4  3E04               	addlw	4
 11048  14B5  0086               	movwf	6
 11049  14B6  3001               	movlw	1	; select bank2/3
 11050  14B7  0087               	movwf	7
 11051  14B8  0801               	movf	1,w
 11052  14B9  00E3               	movwf	??_setDimmerLights_Adj
 11053  14BA  0879               	movf	_DimmerLights,w
 11054  14BB  3E05               	addlw	5
 11055  14BC  0086               	movwf	6
 11056  14BD  3001               	movlw	1	; select bank2/3
 11057  14BE  0087               	movwf	7
 11058  14BF  0863               	movf	??_setDimmerLights_Adj,w
 11059  14C0  0081               	movwf	1
 11060                           
 11061                           ;Dimmer_B1.c: 513: setRF_DimmerLights(lights, 1);
 11062  14C1  01DD               	clrf	setRF_DimmerLights@on
 11063  14C2  0ADD               	incf	setRF_DimmerLights@on,f
 11064  14C3  0864               	movf	setDimmerLights_Adj@lights,w
 11065  14C4  3187  2794  3194   	fcall	_setRF_DimmerLights
 11066                           
 11067                           ;Dimmer_B1.c: 514: setTxData(1);
 11068  14C7  3001               	movlw	1
 11069  14C8  318F  275A         	fcall	_setTxData
 11070  14CA  0008               	return
 11071  14CB                     __end_of_setDimmerLights_Adj:	
 11072                           
 11073                           	psect	text63
 11074  0DA3                     __ptext63:	
 11075 ;; *************** function _setDimmerLights *****************
 11076 ;; Defined at:
 11077 ;;		line 442 in file "../src/Dimmer_B1.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  lights          1    wreg     unsigned char 
 11080 ;;  status          1    4[BANK0 ] unsigned char 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  lights          1    6[BANK0 ] unsigned char 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;		None               void
 11085 ;; Registers used:
 11086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        3 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    7
 11099 ;; This function calls:
 11100 ;;		_DimmerLightsPointSelect
 11101 ;;		_setLED
 11102 ;; This function is called by:
 11103 ;;		_setDimmerLights_Main
 11104 ;;		_setControl_Lights_Table
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _setDimmerLights
 11110  0DA3                     _setDimmerLights:	
 11111                           
 11112                           ;incstack = 0
 11113                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11114                           ;setDimmerLights@lights stored from wreg
 11115  0DA3  0020               	movlb	0	; select bank0
 11116  0DA4  00A6               	movwf	setDimmerLights@lights
 11117                           
 11118                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
 11119  0DA5  0826               	movf	setDimmerLights@lights,w
 11120  0DA6  3190  2082  318D   	fcall	_DimmerLightsPointSelect
 11121                           
 11122                           ;Dimmer_B1.c: 444: Dimmer->Load = lights;
 11123  0DA9  0020               	movlb	0	; select bank0
 11124  0DAA  0826               	movf	setDimmerLights@lights,w
 11125  0DAB  00A5               	movwf	??_setDimmerLights
 11126  0DAC  0021               	movlb	1	; select bank1
 11127  0DAD  0A3A               	incf	_Dimmer^(0+128),w
 11128  0DAE  0086               	movwf	6
 11129  0DAF  0187               	clrf	7
 11130  0DB0  0020               	movlb	0	; select bank0
 11131  0DB1  0825               	movf	??_setDimmerLights,w
 11132  0DB2  0081               	movwf	1
 11133                           
 11134                           ;Dimmer_B1.c: 445: if (status) {
 11135  0DB3  0824               	movf	setDimmerLights@status,w
 11136  0DB4  1903               	btfsc	3,2
 11137  0DB5  2E02               	goto	l5670
 11138                           
 11139                           ;Dimmer_B1.c: 446: DimmerLights->Status = 1;
 11140  0DB6  0879               	movf	_DimmerLights,w
 11141  0DB7  0086               	movwf	6
 11142  0DB8  3001               	movlw	1	; select bank2/3
 11143  0DB9  0087               	movwf	7
 11144  0DBA  1681               	bsf	1,5
 11145                           
 11146                           ;Dimmer_B1.c: 447: setLED(lights, 0);
 11147  0DBB  01A2               	clrf	setLED@command
 11148  0DBC  0826               	movf	setDimmerLights@lights,w
 11149  0DBD  3188  2035  318D   	fcall	_setLED
 11150                           
 11151                           ;Dimmer_B1.c: 449: ;;
 11152                           ;Dimmer_B1.c: 451: DimmerLights->Signal = 1;
 11153  0DC0  0879               	movf	_DimmerLights,w
 11154  0DC1  0086               	movwf	6
 11155  0DC2  3001               	movlw	1	; select bank2/3
 11156  0DC3  0087               	movwf	7
 11157  0DC4  1481               	bsf	1,1
 11158                           
 11159                           ;Dimmer_B1.c: 452: DimmerLights->DimmingTimeValue = 3;
 11160  0DC5  3003               	movlw	3
 11161  0DC6  0020               	movlb	0	; select bank0
 11162  0DC7  00A5               	movwf	??_setDimmerLights
 11163  0DC8  0879               	movf	_DimmerLights,w
 11164  0DC9  3E02               	addlw	2
 11165  0DCA  0086               	movwf	6
 11166  0DCB  3001               	movlw	1	; select bank2/3
 11167  0DCC  0087               	movwf	7
 11168  0DCD  0825               	movf	??_setDimmerLights,w
 11169  0DCE  0081               	movwf	1
 11170                           
 11171                           ;Dimmer_B1.c: 454: if (!DimmerLights->StatusFlag) {
 11172  0DCF  0879               	movf	_DimmerLights,w
 11173  0DD0  0086               	movwf	6
 11174  0DD1  3001               	movlw	1	; select bank2/3
 11175  0DD2  0087               	movwf	7
 11176  0DD3  1B01               	btfsc	1,6
 11177  0DD4  0008               	return
 11178                           
 11179                           ;Dimmer_B1.c: 455: DimmerLights->StatusFlag = 1;
 11180  0DD5  0879               	movf	_DimmerLights,w
 11181  0DD6  0086               	movwf	6
 11182  0DD7  3001               	movlw	1	; select bank2/3
 11183  0DD8  0087               	movwf	7
 11184  0DD9  1701               	bsf	1,6
 11185                           
 11186                           ;Dimmer_B1.c: 456: ;;
 11187                           ;Dimmer_B1.c: 457: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 11188  0DDA  0021               	movlb	1	; select bank1
 11189  0DDB  0867               	movf	_Memory^(0+128),w
 11190  0DDC  3E22               	addlw	34
 11191  0DDD  0086               	movwf	6
 11192  0DDE  3002               	movlw	2	; select bank4/5
 11193  0DDF  0087               	movwf	7
 11194  0DE0  1081               	bcf	1,1
 11195  0DE1  0867               	movf	_Memory^(0+128),w
 11196  0DE2  3E23               	addlw	35
 11197  0DE3  0086               	movwf	6
 11198  0DE4  3002               	movlw	2	; select bank4/5
 11199  0DE5  0087               	movwf	7
 11200  0DE6  3000               	movlw	0
 11201  0DE7  3FC0               	movwi [0]fsr1
 11202  0DE8  3FC1               	movwi [1]fsr1
 11203                           
 11204                           ;Dimmer_B1.c: 460: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11205  0DE9  0879               	movf	_DimmerLights,w
 11206  0DEA  3E05               	addlw	5
 11207  0DEB  0086               	movwf	6
 11208  0DEC  3001               	movlw	1	; select bank2/3
 11209  0DED  0087               	movwf	7
 11210  0DEE  0801               	movf	1,w
 11211  0DEF  0020               	movlb	0	; select bank0
 11212  0DF0  00A5               	movwf	??_setDimmerLights
 11213  0DF1  0879               	movf	_DimmerLights,w
 11214  0DF2  3E04               	addlw	4
 11215  0DF3  0086               	movwf	6
 11216  0DF4  3001               	movlw	1	; select bank2/3
 11217  0DF5  0087               	movwf	7
 11218  0DF6  0825               	movf	??_setDimmerLights,w
 11219  0DF7  0081               	movwf	1
 11220                           
 11221                           ;Dimmer_B1.c: 464: DimmerLights->DimmingValue = ((char)(65*1.5));
 11222  0DF8  3061               	movlw	97
 11223  0DF9  00A5               	movwf	??_setDimmerLights
 11224  0DFA  0879               	movf	_DimmerLights,w
 11225  0DFB  3E04               	addlw	4
 11226  0DFC  0086               	movwf	6
 11227  0DFD  3001               	movlw	1	; select bank2/3
 11228  0DFE  0087               	movwf	7
 11229  0DFF  0825               	movf	??_setDimmerLights,w
 11230  0E00  0081               	movwf	1
 11231                           
 11232                           ;Dimmer_B1.c: 466: }
 11233                           ;Dimmer_B1.c: 467: } else {
 11234  0E01  0008               	return
 11235  0E02                     l5670:	
 11236                           
 11237                           ;Dimmer_B1.c: 468: DimmerLights->Status = 0;
 11238  0E02  0879               	movf	_DimmerLights,w
 11239  0E03  0086               	movwf	6
 11240  0E04  3001               	movlw	1	; select bank2/3
 11241  0E05  0087               	movwf	7
 11242  0E06  1281               	bcf	1,5
 11243                           
 11244                           ;Dimmer_B1.c: 470: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11245  0E07  0879               	movf	_DimmerLights,w
 11246  0E08  3E06               	addlw	6
 11247  0E09  0086               	movwf	6
 11248  0E0A  3001               	movlw	1	; select bank2/3
 11249  0E0B  0087               	movwf	7
 11250  0E0C  0801               	movf	1,w
 11251  0E0D  00A5               	movwf	??_setDimmerLights
 11252  0E0E  0879               	movf	_DimmerLights,w
 11253  0E0F  3E04               	addlw	4
 11254  0E10  0086               	movwf	6
 11255  0E11  3001               	movlw	1	; select bank2/3
 11256  0E12  0087               	movwf	7
 11257  0E13  0825               	movf	??_setDimmerLights,w
 11258  0E14  0081               	movwf	1
 11259                           
 11260                           ;Dimmer_B1.c: 475: DimmerLights->MosfetClose = 1;
 11261  0E15  0879               	movf	_DimmerLights,w
 11262  0E16  3E09               	addlw	9
 11263  0E17  0086               	movwf	6
 11264  0E18  3001               	movlw	1	; select bank2/3
 11265  0E19  0087               	movwf	7
 11266  0E1A  1701               	bsf	1,6
 11267                           
 11268                           ;Dimmer_B1.c: 477: DimmerLights->Signal = 1;
 11269  0E1B  0879               	movf	_DimmerLights,w
 11270  0E1C  0086               	movwf	6
 11271  0E1D  3001               	movlw	1	; select bank2/3
 11272  0E1E  0087               	movwf	7
 11273  0E1F  1481               	bsf	1,1
 11274                           
 11275                           ;Dimmer_B1.c: 478: DimmerLights->AdjFlag = 0;
 11276  0E20  0879               	movf	_DimmerLights,w
 11277  0E21  0086               	movwf	6
 11278  0E22  3001               	movlw	1	; select bank2/3
 11279  0E23  0087               	movwf	7
 11280  0E24  1181               	bcf	1,3
 11281                           
 11282                           ;Dimmer_B1.c: 479: DimmerLights->AdjStatus = 0;
 11283  0E25  0879               	movf	_DimmerLights,w
 11284  0E26  0086               	movwf	6
 11285  0E27  3001               	movlw	1	; select bank2/3
 11286  0E28  0087               	movwf	7
 11287  0E29  1201               	bcf	1,4
 11288                           
 11289                           ;Dimmer_B1.c: 480: DimmerLights->DimmingTimeValue = 3;
 11290  0E2A  3003               	movlw	3
 11291  0E2B  00A5               	movwf	??_setDimmerLights
 11292  0E2C  0879               	movf	_DimmerLights,w
 11293  0E2D  3E02               	addlw	2
 11294  0E2E  0086               	movwf	6
 11295  0E2F  3001               	movlw	1	; select bank2/3
 11296  0E30  0087               	movwf	7
 11297  0E31  0825               	movf	??_setDimmerLights,w
 11298  0E32  0081               	movwf	1
 11299  0E33  0008               	return
 11300  0E34                     __end_of_setDimmerLights:	
 11301                           
 11302                           	psect	text64
 11303  0835                     __ptext64:	
 11304 ;; *************** function _setLED *****************
 11305 ;; Defined at:
 11306 ;;		line 74 in file "../src/LED_B1.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  led             1    wreg     unsigned char 
 11309 ;;  command         1    2[BANK0 ] unsigned char 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  led             1    3[BANK0 ] unsigned char 
 11312 ;; Return value:  Size  Location     Type
 11313 ;;		None               void
 11314 ;; Registers used:
 11315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;Total ram usage:        2 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    6
 11328 ;; This function calls:
 11329 ;;		_LedPointSelect
 11330 ;; This function is called by:
 11331 ;;		_setDimmerLights
 11332 ;;		_setLED_Initialization
 11333 ;;		_setSw_Initialization
 11334 ;;		_setDimmerLights_ERROR
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           
 11339                           ;psect for function _setLED
 11340  0835                     _setLED:	
 11341                           
 11342                           ;incstack = 0
 11343                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11344                           ;setLED@led stored from wreg
 11345  0835  0020               	movlb	0	; select bank0
 11346  0836  00A3               	movwf	setLED@led
 11347                           
 11348                           ;LED_B1.c: 76: LedPointSelect(led);
 11349  0837  0823               	movf	setLED@led,w
 11350  0838  3192  22B0  3188   	fcall	_LedPointSelect
 11351                           
 11352                           ;LED_B1.c: 77: if(command == 0)
 11353  083B  0020               	movlb	0	; select bank0
 11354  083C  08A2               	movf	setLED@command,f
 11355  083D  1D03               	skipz
 11356  083E  2851               	goto	l5562
 11357                           
 11358                           ;LED_B1.c: 78: {
 11359                           ;LED_B1.c: 80: if(led == 1)
 11360  083F  0823               	movf	setLED@led,w
 11361  0840  3A01               	xorlw	1
 11362  0841  1D03               	skipz
 11363  0842  2845               	goto	l5554
 11364                           
 11365                           ;LED_B1.c: 81: {
 11366                           ;LED_B1.c: 85: RA3=1;
 11367  0843  158C               	bsf	12,3	;volatile
 11368                           
 11369                           ;LED_B1.c: 87: }
 11370  0844  0008               	return
 11371  0845                     l5554:	
 11372                           
 11373                           ;LED_B1.c: 90: else if(led == 2)
 11374  0845  0823               	movf	setLED@led,w
 11375  0846  3A02               	xorlw	2
 11376  0847  1D03               	skipz
 11377  0848  284B               	goto	l5558
 11378                           
 11379                           ;LED_B1.c: 91: {
 11380                           ;LED_B1.c: 95: RC7=1;
 11381  0849  178E               	bsf	14,7	;volatile
 11382                           
 11383                           ;LED_B1.c: 97: }
 11384  084A  0008               	return
 11385  084B                     l5558:	
 11386                           
 11387                           ;LED_B1.c: 110: else if(led == 99)
 11388  084B  0823               	movf	setLED@led,w
 11389  084C  3A63               	xorlw	99
 11390  084D  1D03               	skipz
 11391  084E  0008               	return
 11392                           
 11393                           ;LED_B1.c: 111: {
 11394                           ;LED_B1.c: 115: RB5=1;
 11395  084F  168D               	bsf	13,5	;volatile
 11396                           
 11397                           ;LED_B1.c: 117: }
 11398                           ;LED_B1.c: 119: }
 11399  0850  0008               	return
 11400  0851                     l5562:	
 11401                           
 11402                           ;LED_B1.c: 120: else if(command == 1)
 11403  0851  0822               	movf	setLED@command,w
 11404  0852  3A01               	xorlw	1
 11405  0853  1D03               	skipz
 11406  0854  2867               	goto	l5576
 11407                           
 11408                           ;LED_B1.c: 121: {
 11409                           ;LED_B1.c: 123: if(led == 1)
 11410  0855  0823               	movf	setLED@led,w
 11411  0856  3A01               	xorlw	1
 11412  0857  1D03               	skipz
 11413  0858  285B               	goto	l5568
 11414                           
 11415                           ;LED_B1.c: 124: {
 11416                           ;LED_B1.c: 128: RA3=0;
 11417  0859  118C               	bcf	12,3	;volatile
 11418                           
 11419                           ;LED_B1.c: 130: }
 11420  085A  0008               	return
 11421  085B                     l5568:	
 11422                           
 11423                           ;LED_B1.c: 133: else if(led == 2)
 11424  085B  0823               	movf	setLED@led,w
 11425  085C  3A02               	xorlw	2
 11426  085D  1D03               	skipz
 11427  085E  2861               	goto	l5572
 11428                           
 11429                           ;LED_B1.c: 134: {
 11430                           ;LED_B1.c: 138: RC7=0;
 11431  085F  138E               	bcf	14,7	;volatile
 11432                           
 11433                           ;LED_B1.c: 140: }
 11434  0860  0008               	return
 11435  0861                     l5572:	
 11436                           
 11437                           ;LED_B1.c: 153: else if(led == 99)
 11438  0861  0823               	movf	setLED@led,w
 11439  0862  3A63               	xorlw	99
 11440  0863  1D03               	skipz
 11441  0864  0008               	return
 11442                           
 11443                           ;LED_B1.c: 154: {
 11444                           ;LED_B1.c: 158: RB5=0;
 11445  0865  128D               	bcf	13,5	;volatile
 11446                           
 11447                           ;LED_B1.c: 160: }
 11448                           ;LED_B1.c: 162: }
 11449  0866  0008               	return
 11450  0867                     l5576:	
 11451                           
 11452                           ;LED_B1.c: 163: else if(command == 10)
 11453  0867  0822               	movf	setLED@command,w
 11454  0868  3A0A               	xorlw	10
 11455  0869  1D03               	skipz
 11456  086A  2889               	goto	l5592
 11457                           
 11458                           ;LED_B1.c: 164: {
 11459                           ;LED_B1.c: 165: LED->GO=0;
 11460  086B  0021               	movlb	1	; select bank1
 11461  086C  083D               	movf	_LED^(0+128),w
 11462  086D  0086               	movwf	6
 11463  086E  0187               	clrf	7
 11464  086F  1081               	bcf	1,1
 11465                           
 11466                           ;LED_B1.c: 166: LED->Time=0;
 11467  0870  0A3D               	incf	_LED^(0+128),w
 11468  0871  0086               	movwf	6
 11469  0872  0187               	clrf	7
 11470  0873  3000               	movlw	0
 11471  0874  3FC0               	movwi [0]fsr1
 11472  0875  3FC1               	movwi [1]fsr1
 11473                           
 11474                           ;LED_B1.c: 168: if(led == 1)
 11475  0876  0020               	movlb	0	; select bank0
 11476  0877  0823               	movf	setLED@led,w
 11477  0878  3A01               	xorlw	1
 11478  0879  1D03               	skipz
 11479  087A  287D               	goto	l5584
 11480                           
 11481                           ;LED_B1.c: 169: {
 11482                           ;LED_B1.c: 173: RA3=1;
 11483  087B  158C               	bsf	12,3	;volatile
 11484                           
 11485                           ;LED_B1.c: 175: }
 11486  087C  0008               	return
 11487  087D                     l5584:	
 11488                           
 11489                           ;LED_B1.c: 178: else if(led == 2)
 11490  087D  0823               	movf	setLED@led,w
 11491  087E  3A02               	xorlw	2
 11492  087F  1D03               	skipz
 11493  0880  2883               	goto	l5588
 11494                           
 11495                           ;LED_B1.c: 179: {
 11496                           ;LED_B1.c: 183: RC7=1;
 11497  0881  178E               	bsf	14,7	;volatile
 11498                           
 11499                           ;LED_B1.c: 185: }
 11500  0882  0008               	return
 11501  0883                     l5588:	
 11502                           
 11503                           ;LED_B1.c: 198: else if(led == 99)
 11504  0883  0823               	movf	setLED@led,w
 11505  0884  3A63               	xorlw	99
 11506  0885  1D03               	skipz
 11507  0886  0008               	return
 11508                           
 11509                           ;LED_B1.c: 199: {
 11510                           ;LED_B1.c: 203: RB5=1;
 11511  0887  168D               	bsf	13,5	;volatile
 11512                           
 11513                           ;LED_B1.c: 205: }
 11514                           ;LED_B1.c: 207: }
 11515  0888  0008               	return
 11516  0889                     l5592:	
 11517                           
 11518                           ;LED_B1.c: 208: else if(command == 11)
 11519  0889  0822               	movf	setLED@command,w
 11520  088A  3A0B               	xorlw	11
 11521  088B  1D03               	skipz
 11522  088C  0008               	return
 11523                           
 11524                           ;LED_B1.c: 209: {
 11525                           ;LED_B1.c: 210: LED->GO=1;
 11526  088D  0021               	movlb	1	; select bank1
 11527  088E  083D               	movf	_LED^(0+128),w
 11528  088F  0086               	movwf	6
 11529  0890  0187               	clrf	7
 11530  0891  1481               	bsf	1,1
 11531  0892  0008               	return
 11532  0893                     __end_of_setLED:	
 11533                           
 11534                           	psect	text65
 11535  12B0                     __ptext65:	
 11536 ;; *************** function _LedPointSelect *****************
 11537 ;; Defined at:
 11538 ;;		line 7 in file "../src/LED_B1.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  led             1    wreg     unsigned char 
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  led             1    1[BANK0 ] unsigned char 
 11543 ;; Return value:  Size  Location     Type
 11544 ;;		None               void
 11545 ;; Registers used:
 11546 ;;		wreg
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 0/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;Total ram usage:        2 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; Hardware stack levels required when called:    5
 11559 ;; This function calls:
 11560 ;;		Nothing
 11561 ;; This function is called by:
 11562 ;;		_setLED_Initialization
 11563 ;;		_setLED
 11564 ;;		_setLED_Main
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           
 11569                           ;psect for function _LedPointSelect
 11570  12B0                     _LedPointSelect:	
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _LedPointSelect: [wreg]
 11574                           ;LedPointSelect@led stored from wreg
 11575  12B0  0020               	movlb	0	; select bank0
 11576  12B1  00A1               	movwf	LedPointSelect@led
 11577                           
 11578                           ;LED_B1.c: 10: if(led == 1)
 11579  12B2  0821               	movf	LedPointSelect@led,w
 11580  12B3  3A01               	xorlw	1
 11581  12B4  1D03               	skipz
 11582  12B5  2ABC               	goto	l5438
 11583                           
 11584                           ;LED_B1.c: 11: {
 11585                           ;LED_B1.c: 12: LED=&VarLED1;
 11586  12B6  30D5               	movlw	_VarLED1& (0+255)
 11587  12B7  00A0               	movwf	??_LedPointSelect
 11588  12B8  0820               	movf	??_LedPointSelect,w
 11589  12B9  0021               	movlb	1	; select bank1
 11590  12BA  00BD               	movwf	_LED^(0+128)
 11591                           
 11592                           ;LED_B1.c: 13: }
 11593  12BB  0008               	return
 11594  12BC                     l5438:	
 11595                           
 11596                           ;LED_B1.c: 16: else if(led == 2)
 11597  12BC  0020               	movlb	0	; select bank0
 11598  12BD  0821               	movf	LedPointSelect@led,w
 11599  12BE  3A02               	xorlw	2
 11600  12BF  1D03               	skipz
 11601  12C0  2AC7               	goto	l5442
 11602                           
 11603                           ;LED_B1.c: 17: {
 11604                           ;LED_B1.c: 18: LED=&VarLED2;
 11605  12C1  30D9               	movlw	_VarLED2& (0+255)
 11606  12C2  00A0               	movwf	??_LedPointSelect
 11607  12C3  0820               	movf	??_LedPointSelect,w
 11608  12C4  0021               	movlb	1	; select bank1
 11609  12C5  00BD               	movwf	_LED^(0+128)
 11610                           
 11611                           ;LED_B1.c: 19: }
 11612  12C6  0008               	return
 11613  12C7                     l5442:	
 11614                           
 11615                           ;LED_B1.c: 28: else if(led == 99)
 11616  12C7  0020               	movlb	0	; select bank0
 11617  12C8  0821               	movf	LedPointSelect@led,w
 11618  12C9  3A63               	xorlw	99
 11619  12CA  1D03               	skipz
 11620  12CB  0008               	return
 11621                           
 11622                           ;LED_B1.c: 29: {
 11623                           ;LED_B1.c: 30: LED=&VarErrLED;
 11624  12CC  30D1               	movlw	_VarErrLED& (0+255)
 11625  12CD  00A0               	movwf	??_LedPointSelect
 11626  12CE  0820               	movf	??_LedPointSelect,w
 11627  12CF  0021               	movlb	1	; select bank1
 11628  12D0  00BD               	movwf	_LED^(0+128)
 11629  12D1  0008               	return
 11630  12D2                     __end_of_LedPointSelect:	
 11631                           
 11632                           	psect	text66
 11633  1116                     __ptext66:	
 11634 ;; *************** function _DimmerLights_Close *****************
 11635 ;; Defined at:
 11636 ;;		line 240 in file "../src/Dimmer_B1.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;		None               void
 11643 ;; Registers used:
 11644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    6
 11657 ;; This function calls:
 11658 ;;		_getDimmerLights_StatusFlag
 11659 ;; This function is called by:
 11660 ;;		_DimmerLights_Main
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           
 11665                           ;psect for function _DimmerLights_Close
 11666  1116                     _DimmerLights_Close:	
 11667                           
 11668                           ;Dimmer_B1.c: 241: if (Dimmer->Detect) {
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11672  1116  0021               	movlb	1	; select bank1
 11673  1117  083A               	movf	_Dimmer^(0+128),w
 11674  1118  0086               	movwf	6
 11675  1119  0187               	clrf	7
 11676  111A  1C01               	btfss	1,0
 11677  111B  0008               	return
 11678                           
 11679                           ;Dimmer_B1.c: 242: Dimmer->Detect = 0;
 11680  111C  083A               	movf	_Dimmer^(0+128),w
 11681  111D  0086               	movwf	6
 11682  111E  0187               	clrf	7
 11683  111F  1001               	bcf	1,0
 11684                           
 11685                           ;Dimmer_B1.c: 243: if (!getDimmerLights_StatusFlag()) {
 11686  1120  3191  21AA  3191   	fcall	_getDimmerLights_StatusFlag
 11687  1123  3800               	iorlw	0
 11688  1124  1D03               	skipz
 11689  1125  0008               	return
 11690                           
 11691                           ;Dimmer_B1.c: 244: ;;
 11692                           ;Dimmer_B1.c: 245: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 11693  1126  0021               	movlb	1	; select bank1
 11694  1127  0867               	movf	_Memory^(0+128),w
 11695  1128  3E22               	addlw	34
 11696  1129  0086               	movwf	6
 11697  112A  3002               	movlw	2	; select bank4/5
 11698  112B  0087               	movwf	7
 11699  112C  1481               	bsf	1,1
 11700  112D  0008               	return
 11701  112E                     __end_of_DimmerLights_Close:	
 11702                           
 11703                           	psect	text67
 11704  11AA                     __ptext67:	
 11705 ;; *************** function _getDimmerLights_StatusFlag *****************
 11706 ;; Defined at:
 11707 ;;		line 325 in file "../src/Dimmer_B1.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  Status          1    1[BANK0 ] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg, fsr1l, fsr1h, status,2
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        3 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    5
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_DimmerLights_Close
 11732 ;;		_DimmerLights_Exceptions
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           
 11737                           ;psect for function _getDimmerLights_StatusFlag
 11738  11AA                     _getDimmerLights_StatusFlag:	
 11739                           
 11740                           ;Dimmer_B1.c: 326: char Status = 0;
 11741                           
 11742                           ;incstack = 0
 11743                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 11744  11AA  0020               	movlb	0	; select bank0
 11745  11AB  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11746                           
 11747                           ;Dimmer_B1.c: 333: Status = (DimmerLights11->StatusFlag || DimmerLights22->StatusFlag) ?
      +                           1 : 0;
 11748  11AC  01A2               	clrf	_getDimmerLights_StatusFlag$1566
 11749  11AD  0AA2               	incf	_getDimmerLights_StatusFlag$1566,f
 11750  11AE  0021               	movlb	1	; select bank1
 11751  11AF  083B               	movf	_DimmerLights11^(0+128),w
 11752  11B0  0086               	movwf	6
 11753  11B1  3001               	movlw	1	; select bank2/3
 11754  11B2  0087               	movwf	7
 11755  11B3  1B01               	btfsc	1,6
 11756  11B4  29BD               	goto	l5946
 11757  11B5  083C               	movf	_DimmerLights22^(0+128),w
 11758  11B6  0086               	movwf	6
 11759  11B7  3001               	movlw	1	; select bank2/3
 11760  11B8  0087               	movwf	7
 11761  11B9  1B01               	btfsc	1,6
 11762  11BA  29BD               	goto	l5946
 11763  11BB  0020               	movlb	0	; select bank0
 11764  11BC  01A2               	clrf	_getDimmerLights_StatusFlag$1566
 11765  11BD                     l5946:	
 11766  11BD  0020               	movlb	0	; select bank0
 11767  11BE  0822               	movf	_getDimmerLights_StatusFlag$1566,w
 11768  11BF  00A0               	movwf	??_getDimmerLights_StatusFlag
 11769  11C0  0820               	movf	??_getDimmerLights_StatusFlag,w
 11770  11C1  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11771                           
 11772                           ;Dimmer_B1.c: 340: return Status;
 11773  11C2  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11774  11C3  0008               	return
 11775  11C4                     __end_of_getDimmerLights_StatusFlag:	
 11776                           
 11777                           	psect	text68
 11778  10FF                     __ptext68:	
 11779 ;; *************** function _DimmerLights_Initialization *****************
 11780 ;; Defined at:
 11781 ;;		line 180 in file "../src/Dimmer_B1.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;		None               void
 11788 ;; Registers used:
 11789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;Total ram usage:        1 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    7
 11802 ;; This function calls:
 11803 ;;		_Dimmer_Initialization
 11804 ;;		_setDimmerLights_Initialization
 11805 ;; This function is called by:
 11806 ;;		_main
 11807 ;; This function uses a non-reentrant model
 11808 ;;
 11809                           
 11810                           
 11811                           ;psect for function _DimmerLights_Initialization
 11812  10FF                     _DimmerLights_Initialization:	
 11813                           
 11814                           ;Dimmer_B1.c: 182: DimmerLights11 = &DimmerLights1;
 11815                           
 11816                           ;incstack = 0
 11817                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11818  10FF  3020               	movlw	_DimmerLights1& (0+255)
 11819  1100  0020               	movlb	0	; select bank0
 11820  1101  00A4               	movwf	??_DimmerLights_Initialization
 11821  1102  0824               	movf	??_DimmerLights_Initialization,w
 11822  1103  0021               	movlb	1	; select bank1
 11823  1104  00BB               	movwf	_DimmerLights11^(0+128)
 11824                           
 11825                           ;Dimmer_B1.c: 183: setDimmerLights_Initialization(1);
 11826  1105  3001               	movlw	1
 11827  1106  3193  23C4  3190   	fcall	_setDimmerLights_Initialization
 11828                           
 11829                           ;Dimmer_B1.c: 187: DimmerLights22 = &DimmerLights2;
 11830  1109  3030               	movlw	_DimmerLights2& (0+255)
 11831  110A  0020               	movlb	0	; select bank0
 11832  110B  00A4               	movwf	??_DimmerLights_Initialization
 11833  110C  0824               	movf	??_DimmerLights_Initialization,w
 11834  110D  0021               	movlb	1	; select bank1
 11835  110E  00BC               	movwf	_DimmerLights22^(0+128)
 11836                           
 11837                           ;Dimmer_B1.c: 188: setDimmerLights_Initialization(2);
 11838  110F  3002               	movlw	2
 11839  1110  3193  23C4  3190   	fcall	_setDimmerLights_Initialization
 11840                           
 11841                           ;Dimmer_B1.c: 197: Dimmer_Initialization();
 11842  1113  319E  2650         	fcall	_Dimmer_Initialization
 11843  1115  0008               	return
 11844  1116                     __end_of_DimmerLights_Initialization:	
 11845                           
 11846                           	psect	text69
 11847  13C4                     __ptext69:	
 11848 ;; *************** function _setDimmerLights_Initialization *****************
 11849 ;; Defined at:
 11850 ;;		line 202 in file "../src/Dimmer_B1.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;  lights          1    wreg     unsigned char 
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;  lights          1    3[BANK0 ] unsigned char 
 11855 ;; Return value:  Size  Location     Type
 11856 ;;		None               void
 11857 ;; Registers used:
 11858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;Total ram usage:        2 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:    6
 11871 ;; This function calls:
 11872 ;;		_DimmerLightsPointSelect
 11873 ;; This function is called by:
 11874 ;;		_DimmerLights_Initialization
 11875 ;; This function uses a non-reentrant model
 11876 ;;
 11877                           
 11878                           
 11879                           ;psect for function _setDimmerLights_Initialization
 11880  13C4                     _setDimmerLights_Initialization:	
 11881                           
 11882                           ;incstack = 0
 11883                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11884                           ;setDimmerLights_Initialization@lights stored from wreg
 11885  13C4  0020               	movlb	0	; select bank0
 11886  13C5  00A3               	movwf	setDimmerLights_Initialization@lights
 11887                           
 11888                           ;Dimmer_B1.c: 203: DimmerLightsPointSelect(lights);
 11889  13C6  0823               	movf	setDimmerLights_Initialization@lights,w
 11890  13C7  3190  2082         	fcall	_DimmerLightsPointSelect
 11891                           
 11892                           ;Dimmer_B1.c: 204: DimmerLights->Clear = 1;
 11893  13C9  0879               	movf	_DimmerLights,w
 11894  13CA  3E0C               	addlw	12
 11895  13CB  0086               	movwf	6
 11896  13CC  3001               	movlw	1	; select bank2/3
 11897  13CD  0087               	movwf	7
 11898  13CE  1401               	bsf	1,0
 11899                           
 11900                           ;Dimmer_B1.c: 210: DimmerLights->MaxmumValue = ((char)(65*1.5));
 11901  13CF  3061               	movlw	97
 11902  13D0  0020               	movlb	0	; select bank0
 11903  13D1  00A2               	movwf	??_setDimmerLights_Initialization
 11904  13D2  0879               	movf	_DimmerLights,w
 11905  13D3  3E05               	addlw	5
 11906  13D4  0086               	movwf	6
 11907  13D5  3001               	movlw	1	; select bank2/3
 11908  13D6  0087               	movwf	7
 11909  13D7  0822               	movf	??_setDimmerLights_Initialization,w
 11910  13D8  0081               	movwf	1
 11911                           
 11912                           ;Dimmer_B1.c: 211: DimmerLights->MinimumValue = ((char)(20*1.5));
 11913  13D9  301E               	movlw	30
 11914  13DA  00A2               	movwf	??_setDimmerLights_Initialization
 11915  13DB  0879               	movf	_DimmerLights,w
 11916  13DC  3E06               	addlw	6
 11917  13DD  0086               	movwf	6
 11918  13DE  3001               	movlw	1	; select bank2/3
 11919  13DF  0087               	movwf	7
 11920  13E0  0822               	movf	??_setDimmerLights_Initialization,w
 11921  13E1  0081               	movwf	1
 11922                           
 11923                           ;Dimmer_B1.c: 225: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11924  13E2  0879               	movf	_DimmerLights,w
 11925  13E3  3E05               	addlw	5
 11926  13E4  0086               	movwf	6
 11927  13E5  3001               	movlw	1	; select bank2/3
 11928  13E6  0087               	movwf	7
 11929  13E7  0801               	movf	1,w
 11930  13E8  00A2               	movwf	??_setDimmerLights_Initialization
 11931  13E9  0879               	movf	_DimmerLights,w
 11932  13EA  3E04               	addlw	4
 11933  13EB  0086               	movwf	6
 11934  13EC  3001               	movlw	1	; select bank2/3
 11935  13ED  0087               	movwf	7
 11936  13EE  0822               	movf	??_setDimmerLights_Initialization,w
 11937  13EF  0081               	movwf	1
 11938  13F0  0008               	return
 11939  13F1                     __end_of_setDimmerLights_Initialization:	
 11940                           
 11941                           	psect	text70
 11942  1E50                     __ptext70:	
 11943 ;; *************** function _Dimmer_Initialization *****************
 11944 ;; Defined at:
 11945 ;;		line 624 in file "../src/Dimmer_B1.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;		None
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;		None
 11950 ;; Return value:  Size  Location     Type
 11951 ;;		None               void
 11952 ;; Registers used:
 11953 ;;		wreg
 11954 ;; Tracked objects:
 11955 ;;		On entry : 0/0
 11956 ;;		On exit  : 0/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;Total ram usage:        1 bytes
 11964 ;; Hardware stack levels used:    1
 11965 ;; Hardware stack levels required when called:    5
 11966 ;; This function calls:
 11967 ;;		Nothing
 11968 ;; This function is called by:
 11969 ;;		_DimmerLights_Initialization
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973                           
 11974                           ;psect for function _Dimmer_Initialization
 11975  1E50                     _Dimmer_Initialization:	
 11976                           
 11977                           ;Dimmer_B1.c: 625: Dimmer = &Dimmer1;
 11978                           
 11979                           ;incstack = 0
 11980                           ; Regs used in _Dimmer_Initialization: [wreg]
 11981  1E50  30DD               	movlw	_Dimmer1& (0+255)
 11982  1E51  0020               	movlb	0	; select bank0
 11983  1E52  00A0               	movwf	??_Dimmer_Initialization
 11984  1E53  0820               	movf	??_Dimmer_Initialization,w
 11985  1E54  0021               	movlb	1	; select bank1
 11986  1E55  00BA               	movwf	_Dimmer^(0+128)
 11987  1E56  0008               	return
 11988  1E57                     __end_of_Dimmer_Initialization:	
 11989                           
 11990                           	psect	text71
 11991  1E6D                     __ptext71:	
 11992 ;; *************** function _DelayOff_Main *****************
 11993 ;; Defined at:
 11994 ;;		line 41 in file "../src/DelayOff_B1.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;		None
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;		None
 11999 ;; Return value:  Size  Location     Type
 12000 ;;		None               void
 12001 ;; Registers used:
 12002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;Total ram usage:        0 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:   10
 12015 ;; This function calls:
 12016 ;;		_DlyOff_Main
 12017 ;; This function is called by:
 12018 ;;		_main
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _DelayOff_Main
 12024  1E6D                     _DelayOff_Main:	
 12025                           
 12026                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12030  1E6D  3001               	movlw	1
 12031  1E6E  318B  2393  319E   	fcall	_DlyOff_Main
 12032                           
 12033                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12034  1E71  3002               	movlw	2
 12035  1E72  318B  2393         	fcall	_DlyOff_Main
 12036  1E74  0008               	return
 12037  1E75                     __end_of_DelayOff_Main:	
 12038                           
 12039                           	psect	text72
 12040  0B93                     __ptext72:	
 12041 ;; *************** function _DlyOff_Main *****************
 12042 ;; Defined at:
 12043 ;;		line 62 in file "../src/DelayOff_B1.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  sw              1    wreg     unsigned char 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  sw              1   68[BANK0 ] unsigned char 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;		None               void
 12050 ;; Registers used:
 12051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        3 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    9
 12064 ;; This function calls:
 12065 ;;		_DelayOffPointSelect
 12066 ;;		_setBuz
 12067 ;;		_setDimmerLights_Switch
 12068 ;;		_setDimmerLights_Trigger
 12069 ;;		_setRFSW_Status
 12070 ;;		_setRF_DimmerLights
 12071 ;;		_setSw_Status
 12072 ;;		_setTxData
 12073 ;; This function is called by:
 12074 ;;		_DelayOff_Main
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           
 12079                           ;psect for function _DlyOff_Main
 12080  0B93                     _DlyOff_Main:	
 12081                           
 12082                           ;incstack = 0
 12083                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12084                           ;DlyOff_Main@sw stored from wreg
 12085  0B93  0020               	movlb	0	; select bank0
 12086  0B94  00E4               	movwf	DlyOff_Main@sw
 12087                           
 12088                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12089  0B95  0864               	movf	DlyOff_Main@sw,w
 12090  0B96  3190  20E8  318B   	fcall	_DelayOffPointSelect
 12091                           
 12092                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 12093  0B99  0021               	movlb	1	; select bank1
 12094  0B9A  0839               	movf	_DelayOff^(0+128),w
 12095  0B9B  0086               	movwf	6
 12096  0B9C  0187               	clrf	7
 12097  0B9D  1C81               	btfss	1,1
 12098  0B9E  0008               	return
 12099                           
 12100                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12101  0B9F  0839               	movf	_DelayOff^(0+128),w
 12102  0BA0  3E02               	addlw	2
 12103  0BA1  0086               	movwf	6
 12104  0BA2  0187               	clrf	7
 12105  0BA3  3001               	movlw	1
 12106  0BA4  0781               	addwf	1,f
 12107  0BA5  3141               	addfsr 1,1
 12108  0BA6  1803               	skipnc
 12109  0BA7  0A81               	incf	1,f
 12110                           
 12111                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12112  0BA8  0839               	movf	_DelayOff^(0+128),w
 12113  0BA9  3E02               	addlw	2
 12114  0BAA  0086               	movwf	6
 12115  0BAB  0187               	clrf	7
 12116  0BAC  3F40               	moviw [0]fsr1
 12117  0BAD  0020               	movlb	0	; select bank0
 12118  0BAE  00E2               	movwf	??_DlyOff_Main
 12119  0BAF  3F41               	moviw [1]fsr1
 12120  0BB0  00E3               	movwf	??_DlyOff_Main+1
 12121  0BB1  3016               	movlw	22
 12122  0BB2  0263               	subwf	??_DlyOff_Main+1,w
 12123  0BB3  3012               	movlw	18
 12124  0BB4  1903               	skipnz
 12125  0BB5  0262               	subwf	??_DlyOff_Main,w
 12126  0BB6  1C03               	skipc
 12127  0BB7  0008               	return
 12128                           
 12129                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12130  0BB8  0021               	movlb	1	; select bank1
 12131  0BB9  0839               	movf	_DelayOff^(0+128),w
 12132  0BBA  3E02               	addlw	2
 12133  0BBB  0086               	movwf	6
 12134  0BBC  0187               	clrf	7
 12135  0BBD  3000               	movlw	0
 12136  0BBE  3FC0               	movwi [0]fsr1
 12137  0BBF  3FC1               	movwi [1]fsr1
 12138                           
 12139                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12140  0BC0  3001               	movlw	1
 12141  0BC1  0020               	movlb	0	; select bank0
 12142  0BC2  00E2               	movwf	??_DlyOff_Main
 12143  0BC3  0021               	movlb	1	; select bank1
 12144  0BC4  0839               	movf	_DelayOff^(0+128),w
 12145  0BC5  3E04               	addlw	4
 12146  0BC6  0086               	movwf	6
 12147  0BC7  0187               	clrf	7
 12148  0BC8  0020               	movlb	0	; select bank0
 12149  0BC9  0862               	movf	??_DlyOff_Main,w
 12150  0BCA  0781               	addwf	1,f
 12151                           
 12152                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12153  0BCB  0021               	movlb	1	; select bank1
 12154  0BCC  0839               	movf	_DelayOff^(0+128),w
 12155  0BCD  3E04               	addlw	4
 12156  0BCE  0086               	movwf	6
 12157  0BCF  0187               	clrf	7
 12158  0BD0  0A39               	incf	_DelayOff^(0+128),w
 12159  0BD1  0084               	movwf	4
 12160  0BD2  0185               	clrf	5
 12161  0BD3  0800               	movf	0,w
 12162  0BD4  0201               	subwf	1,w
 12163  0BD5  1C03               	skipc
 12164  0BD6  0008               	return
 12165                           
 12166                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12167  0BD7  0839               	movf	_DelayOff^(0+128),w
 12168  0BD8  3E04               	addlw	4
 12169  0BD9  0086               	movwf	6
 12170  0BDA  0187               	clrf	7
 12171  0BDB  0181               	clrf	1
 12172                           
 12173                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12174  0BDC  0839               	movf	_DelayOff^(0+128),w
 12175  0BDD  0086               	movwf	6
 12176  0BDE  0187               	clrf	7
 12177  0BDF  1081               	bcf	1,1
 12178                           
 12179                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 12180  0BE0  0020               	movlb	0	; select bank0
 12181  0BE1  01A2               	clrf	setSw_Status@command
 12182  0BE2  0864               	movf	DlyOff_Main@sw,w
 12183  0BE3  319F  2750  318B   	fcall	_setSw_Status
 12184                           
 12185                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 12186  0BE6  0020               	movlb	0	; select bank0
 12187  0BE7  01A2               	clrf	setRFSW_Status@command
 12188  0BE8  0864               	movf	DlyOff_Main@sw,w
 12189  0BE9  319F  2741  318B   	fcall	_setRFSW_Status
 12190                           
 12191                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 12192  0BEC  0020               	movlb	0	; select bank0
 12193  0BED  01DD               	clrf	setRF_DimmerLights@on
 12194  0BEE  0864               	movf	DlyOff_Main@sw,w
 12195  0BEF  3187  2794  318B   	fcall	_setRF_DimmerLights
 12196                           
 12197                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 12198  0BF2  0020               	movlb	0	; select bank0
 12199  0BF3  01A2               	clrf	setDimmerLights_Trigger@command
 12200  0BF4  0AA2               	incf	setDimmerLights_Trigger@command,f
 12201  0BF5  0864               	movf	DlyOff_Main@sw,w
 12202  0BF6  319F  279D  318B   	fcall	_setDimmerLights_Trigger
 12203                           
 12204                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 12205  0BF9  0020               	movlb	0	; select bank0
 12206  0BFA  01A2               	clrf	setDimmerLights_Switch@command
 12207  0BFB  0864               	movf	DlyOff_Main@sw,w
 12208  0BFC  319F  278D  318B   	fcall	_setDimmerLights_Switch
 12209                           
 12210                           ;DelayOff_B1.c: 77: setTxData(1);
 12211  0BFF  3001               	movlw	1
 12212  0C00  318F  275A  318B   	fcall	_setTxData
 12213                           
 12214                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 12215  0C03  3064               	movlw	100
 12216  0C04  0020               	movlb	0	; select bank0
 12217  0C05  00A0               	movwf	setBuz@time
 12218  0C06  3000               	movlw	0
 12219  0C07  00A1               	movwf	setBuz@time+1
 12220  0C08  3001               	movlw	1
 12221  0C09  318A  22A9         	fcall	_setBuz
 12222  0C0B  0008               	return
 12223  0C0C                     __end_of_DlyOff_Main:	
 12224                           
 12225                           	psect	text73
 12226  0F5A                     __ptext73:	
 12227 ;; *************** function _setTxData *****************
 12228 ;; Defined at:
 12229 ;;		line 131 in file "../src/RF_Control_B1.c"
 12230 ;; Parameters:    Size  Location     Type
 12231 ;;  rf              1    wreg     unsigned char 
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;  rf              1    3[BANK0 ] unsigned char 
 12234 ;;  i               1    0        unsigned char 
 12235 ;; Return value:  Size  Location     Type
 12236 ;;		None               void
 12237 ;; Registers used:
 12238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12239 ;; Tracked objects:
 12240 ;;		On entry : 0/0
 12241 ;;		On exit  : 0/0
 12242 ;;		Unchanged: 0/0
 12243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;Total ram usage:        2 bytes
 12249 ;; Hardware stack levels used:    1
 12250 ;; Hardware stack levels required when called:    6
 12251 ;; This function calls:
 12252 ;;		_RfPointSelect
 12253 ;; This function is called by:
 12254 ;;		_DlyOff_Main
 12255 ;;		_setDimmerLights_Adj
 12256 ;;		_setControl_Lights_Table
 12257 ;;		_setRFSW_Control
 12258 ;;		_setRFSW_AdjControl
 12259 ;;		_Sw_DimmerOnFunc
 12260 ;;		_Sw_DimmerOffFunc
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           
 12265                           ;psect for function _setTxData
 12266  0F5A                     _setTxData:	
 12267                           
 12268                           ;incstack = 0
 12269                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12270                           ;setTxData@rf stored from wreg
 12271  0F5A  0020               	movlb	0	; select bank0
 12272  0F5B  00A3               	movwf	setTxData@rf
 12273                           
 12274                           ;RF_Control_B1.c: 132: char i;
 12275                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 12276  0F5C  0823               	movf	setTxData@rf,w
 12277  0F5D  319E  26DE  318F   	fcall	_RfPointSelect
 12278                           
 12279                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 12280  0F60  0021               	movlb	1	; select bank1
 12281  0F61  083E               	movf	_RF^(0+128),w
 12282  0F62  0086               	movwf	6
 12283  0F63  0187               	clrf	7
 12284  0F64  1C01               	btfss	1,0
 12285  0F65  0008               	return
 12286                           
 12287                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 12288  0F66  083E               	movf	_RF^(0+128),w
 12289  0F67  0086               	movwf	6
 12290  0F68  0187               	clrf	7
 12291  0F69  1901               	btfsc	1,2
 12292  0F6A  0008               	return
 12293                           
 12294                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 12295  0F6B  083E               	movf	_RF^(0+128),w
 12296  0F6C  0086               	movwf	6
 12297  0F6D  0187               	clrf	7
 12298  0F6E  1501               	bsf	1,2
 12299                           
 12300                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 12301  0F6F  3063               	movlw	99
 12302  0F70  0020               	movlb	0	; select bank0
 12303  0F71  00A2               	movwf	??_setTxData
 12304  0F72  0822               	movf	??_setTxData,w
 12305  0F73  0021               	movlb	1	; select bank1
 12306  0F74  00A0               	movwf	_RF_Data^(0+128)
 12307                           
 12308                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 12309  0F75  3002               	movlw	2
 12310  0F76  0020               	movlb	0	; select bank0
 12311  0F77  00A2               	movwf	??_setTxData
 12312  0F78  0822               	movf	??_setTxData,w
 12313  0F79  0021               	movlb	1	; select bank1
 12314  0F7A  00A1               	movwf	(_RF_Data^(0+128)+1)
 12315                           
 12316                           ;RF_Control_B1.c: 148: RF_Data[2] = product->Data[2];
 12317  0F7B  087D               	movf	_product,w
 12318  0F7C  0086               	movwf	6
 12319  0F7D  3001               	movlw	1	; select bank2/3
 12320  0F7E  0087               	movwf	7
 12321  0F7F  3001               	movlw	1	; select bank2/3
 12322  0F80  3F42               	moviw [2]fsr1
 12323  0F81  00A2               	movwf	(_RF_Data^(0+128)+2)
 12324                           
 12325                           ;RF_Control_B1.c: 149: RF_Data[3] = product->Data[3];
 12326  0F82  087D               	movf	_product,w
 12327  0F83  0086               	movwf	6
 12328  0F84  3001               	movlw	1	; select bank2/3
 12329  0F85  0087               	movwf	7
 12330  0F86  3001               	movlw	1	; select bank2/3
 12331  0F87  3F43               	moviw [3]fsr1
 12332  0F88  00A3               	movwf	(_RF_Data^(0+128)+3)
 12333                           
 12334                           ;RF_Control_B1.c: 150: RF_Data[4] = product->Data[4];
 12335  0F89  087D               	movf	_product,w
 12336  0F8A  0086               	movwf	6
 12337  0F8B  3001               	movlw	1	; select bank2/3
 12338  0F8C  0087               	movwf	7
 12339  0F8D  3001               	movlw	1	; select bank2/3
 12340  0F8E  3F44               	moviw [4]fsr1
 12341  0F8F  00A4               	movwf	(_RF_Data^(0+128)+4)
 12342                           
 12343                           ;RF_Control_B1.c: 151: RF_Data[5] = product->Data[5];
 12344  0F90  087D               	movf	_product,w
 12345  0F91  0086               	movwf	6
 12346  0F92  3001               	movlw	1	; select bank2/3
 12347  0F93  0087               	movwf	7
 12348  0F94  3001               	movlw	1	; select bank2/3
 12349  0F95  3F45               	moviw [5]fsr1
 12350  0F96  00A5               	movwf	(_RF_Data^(0+128)+5)
 12351                           
 12352                           ;RF_Control_B1.c: 152: RF_Data[6] = product->Data[6];
 12353  0F97  087D               	movf	_product,w
 12354  0F98  0086               	movwf	6
 12355  0F99  3001               	movlw	1	; select bank2/3
 12356  0F9A  0087               	movwf	7
 12357  0F9B  3001               	movlw	1	; select bank2/3
 12358  0F9C  3F46               	moviw [6]fsr1
 12359  0F9D  00A6               	movwf	(_RF_Data^(0+128)+6)
 12360                           
 12361                           ;RF_Control_B1.c: 153: RF_Data[7] = product->Data[7];
 12362  0F9E  087D               	movf	_product,w
 12363  0F9F  0086               	movwf	6
 12364  0FA0  3001               	movlw	1	; select bank2/3
 12365  0FA1  0087               	movwf	7
 12366  0FA2  3001               	movlw	1	; select bank2/3
 12367  0FA3  3F47               	moviw [7]fsr1
 12368  0FA4  00A7               	movwf	(_RF_Data^(0+128)+7)
 12369                           
 12370                           ;RF_Control_B1.c: 154: RF_Data[8] = product->Data[8];
 12371  0FA5  087D               	movf	_product,w
 12372  0FA6  0086               	movwf	6
 12373  0FA7  3001               	movlw	1	; select bank2/3
 12374  0FA8  0087               	movwf	7
 12375  0FA9  3001               	movlw	1	; select bank2/3
 12376  0FAA  3F48               	moviw [8]fsr1
 12377  0FAB  00A8               	movwf	(_RF_Data^(0+128)+8)
 12378                           
 12379                           ;RF_Control_B1.c: 155: RF_Data[9] = product->Data[9];
 12380  0FAC  087D               	movf	_product,w
 12381  0FAD  0086               	movwf	6
 12382  0FAE  3001               	movlw	1	; select bank2/3
 12383  0FAF  0087               	movwf	7
 12384  0FB0  3001               	movlw	1	; select bank2/3
 12385  0FB1  3F49               	moviw [9]fsr1
 12386  0FB2  00A9               	movwf	(_RF_Data^(0+128)+9)
 12387                           
 12388                           ;RF_Control_B1.c: 156: RF_Data[10] = product->Data[10];
 12389  0FB3  087D               	movf	_product,w
 12390  0FB4  0086               	movwf	6
 12391  0FB5  3001               	movlw	1	; select bank2/3
 12392  0FB6  0087               	movwf	7
 12393  0FB7  3001               	movlw	1	; select bank2/3
 12394  0FB8  3F4A               	moviw [10]fsr1
 12395  0FB9  00AA               	movwf	(_RF_Data^(0+128)+10)
 12396                           
 12397                           ;RF_Control_B1.c: 157: RF_Data[11] = product->Data[11];
 12398  0FBA  087D               	movf	_product,w
 12399  0FBB  0086               	movwf	6
 12400  0FBC  3001               	movlw	1	; select bank2/3
 12401  0FBD  0087               	movwf	7
 12402  0FBE  3001               	movlw	1	; select bank2/3
 12403  0FBF  3F4B               	moviw [11]fsr1
 12404  0FC0  00AB               	movwf	(_RF_Data^(0+128)+11)
 12405                           
 12406                           ;RF_Control_B1.c: 158: RF_Data[12] = product->Data[12];
 12407  0FC1  087D               	movf	_product,w
 12408  0FC2  0086               	movwf	6
 12409  0FC3  3001               	movlw	1	; select bank2/3
 12410  0FC4  0087               	movwf	7
 12411  0FC5  3001               	movlw	1	; select bank2/3
 12412  0FC6  3F4C               	moviw [12]fsr1
 12413  0FC7  00AC               	movwf	(_RF_Data^(0+128)+12)
 12414                           
 12415                           ;RF_Control_B1.c: 159: RF_Data[13] = product->Data[13];
 12416  0FC8  087D               	movf	_product,w
 12417  0FC9  0086               	movwf	6
 12418  0FCA  3001               	movlw	1	; select bank2/3
 12419  0FCB  0087               	movwf	7
 12420  0FCC  3001               	movlw	1	; select bank2/3
 12421  0FCD  3F4D               	moviw [13]fsr1
 12422  0FCE  00AD               	movwf	(_RF_Data^(0+128)+13)
 12423                           
 12424                           ;RF_Control_B1.c: 160: RF_Data[14] = product->Data[14];
 12425  0FCF  087D               	movf	_product,w
 12426  0FD0  0086               	movwf	6
 12427  0FD1  3001               	movlw	1	; select bank2/3
 12428  0FD2  0087               	movwf	7
 12429  0FD3  3001               	movlw	1	; select bank2/3
 12430  0FD4  3F4E               	moviw [14]fsr1
 12431  0FD5  00AE               	movwf	(_RF_Data^(0+128)+14)
 12432                           
 12433                           ;RF_Control_B1.c: 161: RF_Data[15] = product->Data[15];
 12434  0FD6  087D               	movf	_product,w
 12435  0FD7  0086               	movwf	6
 12436  0FD8  3001               	movlw	1	; select bank2/3
 12437  0FD9  0087               	movwf	7
 12438  0FDA  3001               	movlw	1	; select bank2/3
 12439  0FDB  3F4F               	moviw [15]fsr1
 12440  0FDC  00AF               	movwf	(_RF_Data^(0+128)+15)
 12441                           
 12442                           ;RF_Control_B1.c: 162: RF_Data[16] = product->Data[16];
 12443  0FDD  087D               	movf	_product,w
 12444  0FDE  0086               	movwf	6
 12445  0FDF  3001               	movlw	1	; select bank2/3
 12446  0FE0  0087               	movwf	7
 12447  0FE1  3001               	movlw	1	; select bank2/3
 12448  0FE2  3F50               	moviw [16]fsr1
 12449  0FE3  00B0               	movwf	(_RF_Data^(0+128)+16)
 12450                           
 12451                           ;RF_Control_B1.c: 163: RF_Data[17] = product->Data[17];
 12452  0FE4  087D               	movf	_product,w
 12453  0FE5  0086               	movwf	6
 12454  0FE6  3001               	movlw	1	; select bank2/3
 12455  0FE7  0087               	movwf	7
 12456  0FE8  3001               	movlw	1	; select bank2/3
 12457  0FE9  3F51               	moviw [17]fsr1
 12458  0FEA  00B1               	movwf	(_RF_Data^(0+128)+17)
 12459                           
 12460                           ;RF_Control_B1.c: 164: RF_Data[18] = product->Data[18];
 12461  0FEB  087D               	movf	_product,w
 12462  0FEC  0086               	movwf	6
 12463  0FED  3001               	movlw	1	; select bank2/3
 12464  0FEE  0087               	movwf	7
 12465  0FEF  3001               	movlw	1	; select bank2/3
 12466  0FF0  3F52               	moviw [18]fsr1
 12467  0FF1  00B2               	movwf	(_RF_Data^(0+128)+18)
 12468                           
 12469                           ;RF_Control_B1.c: 165: RF_Data[19] = product->Data[19];
 12470  0FF2  087D               	movf	_product,w
 12471  0FF3  0086               	movwf	6
 12472  0FF4  3001               	movlw	1	; select bank2/3
 12473  0FF5  0087               	movwf	7
 12474  0FF6  3001               	movlw	1	; select bank2/3
 12475  0FF7  3F53               	moviw [19]fsr1
 12476  0FF8  00B3               	movwf	(_RF_Data^(0+128)+19)
 12477                           
 12478                           ;RF_Control_B1.c: 166: RF_Data[20] = 210;
 12479  0FF9  30D2               	movlw	210
 12480  0FFA  0020               	movlb	0	; select bank0
 12481  0FFB  00A2               	movwf	??_setTxData
 12482  0FFC  0822               	movf	??_setTxData,w
 12483  0FFD  0021               	movlb	1	; select bank1
 12484  0FFE  00B4               	movwf	(_RF_Data^(0+128)+20)
 12485  0FFF  0008               	return
 12486  1000                     __end_of_setTxData:	
 12487                           
 12488                           	psect	text74
 12489  1EDE                     __ptext74:	
 12490 ;; *************** function _RfPointSelect *****************
 12491 ;; Defined at:
 12492 ;;		line 7 in file "../src/RF_Control_B1.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;  rf              1    wreg     unsigned char 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  rf              1    1[BANK0 ] unsigned char 
 12497 ;; Return value:  Size  Location     Type
 12498 ;;		None               void
 12499 ;; Registers used:
 12500 ;;		wreg
 12501 ;; Tracked objects:
 12502 ;;		On entry : 0/0
 12503 ;;		On exit  : 0/0
 12504 ;;		Unchanged: 0/0
 12505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;Total ram usage:        2 bytes
 12511 ;; Hardware stack levels used:    1
 12512 ;; Hardware stack levels required when called:    5
 12513 ;; This function calls:
 12514 ;;		Nothing
 12515 ;; This function is called by:
 12516 ;;		_setRF_Learn
 12517 ;;		_setRF_RxStatus
 12518 ;;		_setRF_Main
 12519 ;;		_setTxData
 12520 ;;		_setRF_Enable
 12521 ;;		_RF_RxDisable
 12522 ;;		_getRxData
 12523 ;;		_setLog_Code
 12524 ;;		_setControl_Lights_Table
 12525 ;; This function uses a non-reentrant model
 12526 ;;
 12527                           
 12528                           
 12529                           ;psect for function _RfPointSelect
 12530  1EDE                     _RfPointSelect:	
 12531                           
 12532                           ;incstack = 0
 12533                           ; Regs used in _RfPointSelect: [wreg]
 12534                           ;RfPointSelect@rf stored from wreg
 12535  1EDE  0020               	movlb	0	; select bank0
 12536  1EDF  00A1               	movwf	RfPointSelect@rf
 12537                           
 12538                           ;RF_Control_B1.c: 9: if (rf == 1) {
 12539  1EE0  0821               	movf	RfPointSelect@rf,w
 12540  1EE1  3A01               	xorlw	1
 12541  1EE2  1D03               	skipz
 12542  1EE3  0008               	return
 12543                           
 12544                           ;RF_Control_B1.c: 10: RF = &RF1;
 12545  1EE4  30E0               	movlw	_RF1& (0+255)
 12546  1EE5  00A0               	movwf	??_RfPointSelect
 12547  1EE6  0820               	movf	??_RfPointSelect,w
 12548  1EE7  0021               	movlb	1	; select bank1
 12549  1EE8  00BE               	movwf	_RF^(0+128)
 12550  1EE9  0008               	return
 12551  1EEA                     __end_of_RfPointSelect:	
 12552                           
 12553                           	psect	text75
 12554  1F50                     __ptext75:	
 12555 ;; *************** function _setSw_Status *****************
 12556 ;; Defined at:
 12557 ;;		line 105 in file "../src/Switch_B1.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;  sw              1    wreg     unsigned char 
 12560 ;;  command         1    2[BANK0 ] unsigned char 
 12561 ;; Auto vars:     Size  Location     Type
 12562 ;;  sw              1    3[BANK0 ] unsigned char 
 12563 ;; Return value:  Size  Location     Type
 12564 ;;		None               void
 12565 ;; Registers used:
 12566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12572 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;Total ram usage:        2 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:    6
 12579 ;; This function calls:
 12580 ;;		_SwPointSelect
 12581 ;; This function is called by:
 12582 ;;		_DlyOff_Main
 12583 ;;		_setControl_Lights_Table
 12584 ;;		_setRFSW_Control
 12585 ;;		_setDimmerLights_ERROR
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           
 12590                           ;psect for function _setSw_Status
 12591  1F50                     _setSw_Status:	
 12592                           
 12593                           ;incstack = 0
 12594                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12595                           ;setSw_Status@sw stored from wreg
 12596  1F50  0020               	movlb	0	; select bank0
 12597  1F51  00A3               	movwf	setSw_Status@sw
 12598                           
 12599                           ;Switch_B1.c: 106: SwPointSelect(sw);
 12600  1F52  0823               	movf	setSw_Status@sw,w
 12601  1F53  3190  2095         	fcall	_SwPointSelect
 12602                           
 12603                           ;Switch_B1.c: 107: Sw->Status = command;
 12604  1F55  087B               	movf	_Sw,w
 12605  1F56  0086               	movwf	6
 12606  1F57  3001               	movlw	1	; select bank2/3
 12607  1F58  0087               	movwf	7
 12608  1F59  0020               	movlb	0	; select bank0
 12609  1F5A  0822               	movf	setSw_Status@command,w
 12610  1F5B  1301               	bcf	1,6
 12611  1F5C  1D03               	skipz
 12612  1F5D  1701               	bsf	1,6
 12613  1F5E  0008               	return
 12614  1F5F                     __end_of_setSw_Status:	
 12615                           
 12616                           	psect	text76
 12617  1095                     __ptext76:	
 12618 ;; *************** function _SwPointSelect *****************
 12619 ;; Defined at:
 12620 ;;		line 17 in file "../src/Switch_B1.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  sw              1    wreg     unsigned char 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  sw              1    1[BANK0 ] unsigned char 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;		None               void
 12627 ;; Registers used:
 12628 ;;		wreg
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;Total ram usage:        2 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    5
 12641 ;; This function calls:
 12642 ;;		Nothing
 12643 ;; This function is called by:
 12644 ;;		_setSw_Enable
 12645 ;;		_setSw_Status
 12646 ;;		_setSw_Main
 12647 ;;		_Sw_Detect
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           
 12652                           ;psect for function _SwPointSelect
 12653  1095                     _SwPointSelect:	
 12654                           
 12655                           ;incstack = 0
 12656                           ; Regs used in _SwPointSelect: [wreg]
 12657                           ;SwPointSelect@sw stored from wreg
 12658  1095  0020               	movlb	0	; select bank0
 12659  1096  00A1               	movwf	SwPointSelect@sw
 12660                           
 12661                           ;Switch_B1.c: 20: if (sw == 1) {
 12662  1097  0821               	movf	SwPointSelect@sw,w
 12663  1098  3A01               	xorlw	1
 12664  1099  1D03               	skipz
 12665  109A  28A0               	goto	l5454
 12666                           
 12667                           ;Switch_B1.c: 21: Sw = &Sw1;
 12668  109B  304C               	movlw	_Sw1& (0+255)
 12669  109C  00A0               	movwf	??_SwPointSelect
 12670  109D  0820               	movf	??_SwPointSelect,w
 12671  109E  00FB               	movwf	_Sw
 12672                           
 12673                           ;Switch_B1.c: 22: }
 12674  109F  0008               	return
 12675  10A0                     l5454:	
 12676                           
 12677                           ;Switch_B1.c: 25: else if (sw == 2) {
 12678  10A0  0821               	movf	SwPointSelect@sw,w
 12679  10A1  3A02               	xorlw	2
 12680  10A2  1D03               	skipz
 12681  10A3  0008               	return
 12682                           
 12683                           ;Switch_B1.c: 26: Sw = &Sw2;
 12684  10A4  3055               	movlw	_Sw2& (0+255)
 12685  10A5  00A0               	movwf	??_SwPointSelect
 12686  10A6  0820               	movf	??_SwPointSelect,w
 12687  10A7  00FB               	movwf	_Sw
 12688  10A8  0008               	return
 12689  10A9                     __end_of_SwPointSelect:	
 12690                           
 12691                           	psect	text77
 12692  0794                     __ptext77:	
 12693 ;; *************** function _setRF_DimmerLights *****************
 12694 ;; Defined at:
 12695 ;;		line 398 in file "../src/RF_Control_B1.c"
 12696 ;; Parameters:    Size  Location     Type
 12697 ;;  lights          1    wreg     unsigned char 
 12698 ;;  on              1   61[BANK0 ] unsigned char 
 12699 ;; Auto vars:     Size  Location     Type
 12700 ;;  lights          1   65[BANK0 ] unsigned char 
 12701 ;;  status          1   64[BANK0 ] unsigned char 
 12702 ;; Return value:  Size  Location     Type
 12703 ;;		None               void
 12704 ;; Registers used:
 12705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12711 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;Total ram usage:        5 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    8
 12718 ;; This function calls:
 12719 ;;		_setPercentValue
 12720 ;; This function is called by:
 12721 ;;		_DlyOff_Main
 12722 ;;		_setDimmerLights_Adj
 12723 ;;		_setRFSW_Control
 12724 ;;		_Sw_DimmerOnFunc
 12725 ;;		_Sw_DimmerOffFunc
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           
 12730                           ;psect for function _setRF_DimmerLights
 12731  0794                     _setRF_DimmerLights:	
 12732                           
 12733                           ;incstack = 0
 12734                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12735                           ;setRF_DimmerLights@lights stored from wreg
 12736  0794  0020               	movlb	0	; select bank0
 12737  0795  00E1               	movwf	setRF_DimmerLights@lights
 12738                           
 12739                           ;RF_Control_B1.c: 399: char status;
 12740                           ;RF_Control_B1.c: 400: status = 1;
 12741  0796  01E0               	clrf	setRF_DimmerLights@status
 12742  0797  0AE0               	incf	setRF_DimmerLights@status,f
 12743                           
 12744                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 12745  0798  0861               	movf	setRF_DimmerLights@lights,w
 12746  0799  3EFF               	addlw	-1
 12747  079A  0A89               	incf	9,f
 12748  079B  2F9E               	goto	u3910
 12749  079C                     u3915:	
 12750  079C  1003               	clrc
 12751  079D  0DE0               	rlf	setRF_DimmerLights@status,f
 12752  079E                     u3910:	
 12753  079E  3EFF               	addlw	-1
 12754  079F  1D03               	skipz
 12755  07A0  2F9C               	goto	u3915
 12756                           
 12757                           ;RF_Control_B1.c: 402: product->Data[11]=lights;
 12758  07A1  0861               	movf	setRF_DimmerLights@lights,w
 12759  07A2  00DE               	movwf	??_setRF_DimmerLights
 12760  07A3  087D               	movf	_product,w
 12761  07A4  3E0B               	addlw	11
 12762  07A5  0086               	movwf	6
 12763  07A6  3001               	movlw	1	; select bank2/3
 12764  07A7  0087               	movwf	7
 12765  07A8  085E               	movf	??_setRF_DimmerLights,w
 12766  07A9  0081               	movwf	1
 12767                           
 12768                           ;RF_Control_B1.c: 405: product->Data[(20 + lights)]=setPercentValue(((char)(65*1.5)));
 12769  07AA  3061               	movlw	97
 12770  07AB  3196  2619  3187   	fcall	_setPercentValue
 12771  07AE  0020               	movlb	0	; select bank0
 12772  07AF  00DE               	movwf	??_setRF_DimmerLights
 12773  07B0  0861               	movf	setRF_DimmerLights@lights,w
 12774  07B1  3E14               	addlw	20
 12775  07B2  077D               	addwf	_product,w
 12776  07B3  00DF               	movwf	??_setRF_DimmerLights+1
 12777  07B4  085F               	movf	??_setRF_DimmerLights+1,w
 12778  07B5  0086               	movwf	6
 12779  07B6  3001               	movlw	1	; select bank2/3
 12780  07B7  0087               	movwf	7
 12781  07B8  085E               	movf	??_setRF_DimmerLights,w
 12782  07B9  0081               	movwf	1
 12783                           
 12784                           ;RF_Control_B1.c: 408: product->Data[9]=product->Data[20 + lights];
 12785  07BA  0861               	movf	setRF_DimmerLights@lights,w
 12786  07BB  3E14               	addlw	20
 12787  07BC  077D               	addwf	_product,w
 12788  07BD  00DE               	movwf	??_setRF_DimmerLights
 12789  07BE  085E               	movf	??_setRF_DimmerLights,w
 12790  07BF  0086               	movwf	6
 12791  07C0  3001               	movlw	1	; select bank2/3
 12792  07C1  0087               	movwf	7
 12793  07C2  0801               	movf	1,w
 12794  07C3  00DF               	movwf	??_setRF_DimmerLights+1
 12795  07C4  087D               	movf	_product,w
 12796  07C5  3E09               	addlw	9
 12797  07C6  0086               	movwf	6
 12798  07C7  3001               	movlw	1	; select bank2/3
 12799  07C8  0087               	movwf	7
 12800  07C9  085F               	movf	??_setRF_DimmerLights+1,w
 12801  07CA  0081               	movwf	1
 12802                           
 12803                           ;RF_Control_B1.c: 409: product->Data[17]=product->Data[26 + lights];
 12804  07CB  0861               	movf	setRF_DimmerLights@lights,w
 12805  07CC  3E1A               	addlw	26
 12806  07CD  077D               	addwf	_product,w
 12807  07CE  00DE               	movwf	??_setRF_DimmerLights
 12808  07CF  085E               	movf	??_setRF_DimmerLights,w
 12809  07D0  0086               	movwf	6
 12810  07D1  3001               	movlw	1	; select bank2/3
 12811  07D2  0087               	movwf	7
 12812  07D3  0801               	movf	1,w
 12813  07D4  00DF               	movwf	??_setRF_DimmerLights+1
 12814  07D5  087D               	movf	_product,w
 12815  07D6  3E11               	addlw	17
 12816  07D7  0086               	movwf	6
 12817  07D8  3001               	movlw	1	; select bank2/3
 12818  07D9  0087               	movwf	7
 12819  07DA  085F               	movf	??_setRF_DimmerLights+1,w
 12820  07DB  0081               	movwf	1
 12821                           
 12822                           ;RF_Control_B1.c: 410: if (on) {
 12823  07DC  085D               	movf	setRF_DimmerLights@on,w
 12824  07DD  1903               	btfsc	3,2
 12825  07DE  2FEF               	goto	l5494
 12826                           
 12827                           ;RF_Control_B1.c: 411: product->Data[15]=(product->Data[15] | status);
 12828  07DF  087D               	movf	_product,w
 12829  07E0  3E0F               	addlw	15
 12830  07E1  0086               	movwf	6
 12831  07E2  3001               	movlw	1	; select bank2/3
 12832  07E3  0087               	movwf	7
 12833  07E4  0801               	movf	1,w
 12834  07E5  0460               	iorwf	setRF_DimmerLights@status,w
 12835  07E6  00DE               	movwf	??_setRF_DimmerLights
 12836  07E7  087D               	movf	_product,w
 12837  07E8  3E0F               	addlw	15
 12838  07E9  0086               	movwf	6
 12839  07EA  3001               	movlw	1	; select bank2/3
 12840  07EB  0087               	movwf	7
 12841  07EC  085E               	movf	??_setRF_DimmerLights,w
 12842  07ED  0081               	movwf	1
 12843                           
 12844                           ;RF_Control_B1.c: 412: } else {
 12845  07EE  0008               	return
 12846  07EF                     l5494:	
 12847                           
 12848                           ;RF_Control_B1.c: 413: product->Data[15]=(product->Data[15]&(~status));
 12849  07EF  087D               	movf	_product,w
 12850  07F0  3E0F               	addlw	15
 12851  07F1  0086               	movwf	6
 12852  07F2  3001               	movlw	1	; select bank2/3
 12853  07F3  0087               	movwf	7
 12854  07F4  0960               	comf	setRF_DimmerLights@status,w
 12855  07F5  0501               	andwf	1,w
 12856  07F6  00DE               	movwf	??_setRF_DimmerLights
 12857  07F7  087D               	movf	_product,w
 12858  07F8  3E0F               	addlw	15
 12859  07F9  0086               	movwf	6
 12860  07FA  3001               	movlw	1	; select bank2/3
 12861  07FB  0087               	movwf	7
 12862  07FC  085E               	movf	??_setRF_DimmerLights,w
 12863  07FD  0081               	movwf	1
 12864  07FE  0008               	return
 12865  07FF                     __end_of_setRF_DimmerLights:	
 12866                           
 12867                           	psect	text78
 12868  1619                     __ptext78:	
 12869 ;; *************** function _setPercentValue *****************
 12870 ;; Defined at:
 12871 ;;		line 607 in file "../src/Dimmer_B1.c"
 12872 ;; Parameters:    Size  Location     Type
 12873 ;;  value           1    wreg     unsigned char 
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;  value           1   57[BANK0 ] unsigned char 
 12876 ;;  i               3   58[BANK0 ] float 
 12877 ;; Return value:  Size  Location     Type
 12878 ;;                  1    wreg      unsigned char 
 12879 ;; Registers used:
 12880 ;;		wreg, status,2, status,0, pclath, cstack
 12881 ;; Tracked objects:
 12882 ;;		On entry : 0/0
 12883 ;;		On exit  : 0/0
 12884 ;;		Unchanged: 0/0
 12885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;Total ram usage:        4 bytes
 12891 ;; Hardware stack levels used:    1
 12892 ;; Hardware stack levels required when called:    7
 12893 ;; This function calls:
 12894 ;;		___awtoft
 12895 ;;		___ftdiv
 12896 ;;		___fttol
 12897 ;; This function is called by:
 12898 ;;		_Flash_Memory_Initialization
 12899 ;;		_setRF_DimmerLights
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           
 12904                           ;psect for function _setPercentValue
 12905  1619                     _setPercentValue:	
 12906                           
 12907                           ;incstack = 0
 12908                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12909                           ;setPercentValue@value stored from wreg
 12910  1619  0020               	movlb	0	; select bank0
 12911  161A  00D9               	movwf	setPercentValue@value
 12912                           
 12913                           ;Dimmer_B1.c: 615: float i = ((char)(65*1.5)) - ((char)(20*1.5));
 12914  161B  3000               	movlw	0
 12915  161C  00DA               	movwf	setPercentValue@i
 12916  161D  3086               	movlw	134
 12917  161E  00DB               	movwf	setPercentValue@i+1
 12918  161F  3042               	movlw	66
 12919  1620  00DC               	movwf	setPercentValue@i+2
 12920                           
 12921                           ;Dimmer_B1.c: 616: i /= 100;
 12922  1621  3000               	movlw	0
 12923  1622  00AE               	movwf	___ftdiv@f2
 12924  1623  30C8               	movlw	200
 12925  1624  00AF               	movwf	___ftdiv@f2+1
 12926  1625  3042               	movlw	66
 12927  1626  00B0               	movwf	___ftdiv@f2+2
 12928  1627  085A               	movf	setPercentValue@i,w
 12929  1628  00B1               	movwf	___ftdiv@f1
 12930  1629  085B               	movf	setPercentValue@i+1,w
 12931  162A  00B2               	movwf	___ftdiv@f1+1
 12932  162B  085C               	movf	setPercentValue@i+2,w
 12933  162C  00B3               	movwf	___ftdiv@f1+2
 12934  162D  3186  26EB  3196   	fcall	___ftdiv
 12935  1630  0020               	movlb	0	; select bank0
 12936  1631  082E               	movf	?___ftdiv,w
 12937  1632  00DA               	movwf	setPercentValue@i
 12938  1633  082F               	movf	?___ftdiv+1,w
 12939  1634  00DB               	movwf	setPercentValue@i+1
 12940  1635  0830               	movf	?___ftdiv+2,w
 12941  1636  00DC               	movwf	setPercentValue@i+2
 12942                           
 12943                           ;Dimmer_B1.c: 617: return (100 - (char) ((value - ((char)(65*1.5))) / i));
 12944  1637  0859               	movf	setPercentValue@value,w
 12945  1638  3E9F               	addlw	159
 12946  1639  00A8               	movwf	___awtoft@c
 12947  163A  30FF               	movlw	255
 12948  163B  1803               	skipnc
 12949  163C  3000               	movlw	0
 12950  163D  00A9               	movwf	___awtoft@c+1
 12951  163E  3192  228E  3196   	fcall	___awtoft
 12952  1641  0020               	movlb	0	; select bank0
 12953  1642  0828               	movf	?___awtoft,w
 12954  1643  00B1               	movwf	___ftdiv@f1
 12955  1644  0829               	movf	?___awtoft+1,w
 12956  1645  00B2               	movwf	___ftdiv@f1+1
 12957  1646  082A               	movf	?___awtoft+2,w
 12958  1647  00B3               	movwf	___ftdiv@f1+2
 12959  1648  085A               	movf	setPercentValue@i,w
 12960  1649  00AE               	movwf	___ftdiv@f2
 12961  164A  085B               	movf	setPercentValue@i+1,w
 12962  164B  00AF               	movwf	___ftdiv@f2+1
 12963  164C  085C               	movf	setPercentValue@i+2,w
 12964  164D  00B0               	movwf	___ftdiv@f2+2
 12965  164E  3186  26EB  3196   	fcall	___ftdiv
 12966  1651  0020               	movlb	0	; select bank0
 12967  1652  082E               	movf	?___ftdiv,w
 12968  1653  00CB               	movwf	___fttol@f1
 12969  1654  082F               	movf	?___ftdiv+1,w
 12970  1655  00CC               	movwf	___fttol@f1+1
 12971  1656  0830               	movf	?___ftdiv+2,w
 12972  1657  00CD               	movwf	___fttol@f1+2
 12973  1658  318C  248C         	fcall	___fttol
 12974  165A  0020               	movlb	0	; select bank0
 12975  165B  034B               	decf	?___fttol,w
 12976  165C  3AFF               	xorlw	255
 12977  165D  3E64               	addlw	100
 12978  165E  0008               	return
 12979  165F                     __end_of_setPercentValue:	
 12980                           
 12981                           	psect	text79
 12982  0C8C                     __ptext79:	
 12983 ;; *************** function ___fttol *****************
 12984 ;; Defined at:
 12985 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  f1              3   43[BANK0 ] float 
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;  lval            4   52[BANK0 ] unsigned long 
 12990 ;;  exp1            1   56[BANK0 ] unsigned char 
 12991 ;;  sign1           1   51[BANK0 ] unsigned char 
 12992 ;; Return value:  Size  Location     Type
 12993 ;;                  4   43[BANK0 ] long 
 12994 ;; Registers used:
 12995 ;;		wreg, status,2, status,0
 12996 ;; Tracked objects:
 12997 ;;		On entry : 0/0
 12998 ;;		On exit  : 0/0
 12999 ;;		Unchanged: 0/0
 13000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;Total ram usage:       14 bytes
 13006 ;; Hardware stack levels used:    1
 13007 ;; Hardware stack levels required when called:    5
 13008 ;; This function calls:
 13009 ;;		Nothing
 13010 ;; This function is called by:
 13011 ;;		_getPercentValue
 13012 ;;		_setPercentValue
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           
 13017                           ;psect for function ___fttol
 13018  0C8C                     ___fttol:	
 13019                           
 13020                           ;incstack = 0
 13021                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13022  0C8C  0020               	movlb	0	; select bank0
 13023  0C8D  084B               	movf	___fttol@f1,w
 13024  0C8E  00CF               	movwf	??___fttol
 13025  0C8F  084C               	movf	___fttol@f1+1,w
 13026  0C90  00D0               	movwf	??___fttol+1
 13027  0C91  084D               	movf	___fttol@f1+2,w
 13028  0C92  00D1               	movwf	??___fttol+2
 13029  0C93  1003               	clrc
 13030  0C94  0D50               	rlf	??___fttol+1,w
 13031  0C95  0D51               	rlf	??___fttol+2,w
 13032  0C96  00D2               	movwf	??___fttol+3
 13033  0C97  0852               	movf	??___fttol+3,w
 13034  0C98  00D8               	movwf	___fttol@exp1
 13035  0C99  08D8               	movf	___fttol@exp1,f
 13036  0C9A  1D03               	skipz
 13037  0C9B  2CA5               	goto	l5336
 13038  0C9C  3000               	movlw	0
 13039  0C9D  00CE               	movwf	?___fttol+3
 13040  0C9E  3000               	movlw	0
 13041  0C9F  00CD               	movwf	?___fttol+2
 13042  0CA0  3000               	movlw	0
 13043  0CA1  00CC               	movwf	?___fttol+1
 13044  0CA2  3000               	movlw	0
 13045  0CA3  00CB               	movwf	?___fttol
 13046  0CA4  0008               	return
 13047  0CA5                     l5336:	
 13048  0CA5  084B               	movf	___fttol@f1,w
 13049  0CA6  00CF               	movwf	??___fttol
 13050  0CA7  084C               	movf	___fttol@f1+1,w
 13051  0CA8  00D0               	movwf	??___fttol+1
 13052  0CA9  084D               	movf	___fttol@f1+2,w
 13053  0CAA  00D1               	movwf	??___fttol+2
 13054  0CAB  3017               	movlw	23
 13055  0CAC                     u3685:	
 13056  0CAC  36D1               	lsrf	??___fttol+2,f
 13057  0CAD  0CD0               	rrf	??___fttol+1,f
 13058  0CAE  0CCF               	rrf	??___fttol,f
 13059  0CAF  0B89               	decfsz	9,f
 13060  0CB0  2CAC               	goto	u3685
 13061  0CB1  084F               	movf	??___fttol,w
 13062  0CB2  00D2               	movwf	??___fttol+3
 13063  0CB3  0852               	movf	??___fttol+3,w
 13064  0CB4  00D3               	movwf	___fttol@sign1
 13065  0CB5  17CC               	bsf	___fttol@f1+1,7
 13066  0CB6  30FF               	movlw	255
 13067  0CB7  05CB               	andwf	___fttol@f1,f
 13068  0CB8  30FF               	movlw	255
 13069  0CB9  05CC               	andwf	___fttol@f1+1,f
 13070  0CBA  3000               	movlw	0
 13071  0CBB  05CD               	andwf	___fttol@f1+2,f
 13072  0CBC  084B               	movf	___fttol@f1,w
 13073  0CBD  00D4               	movwf	___fttol@lval
 13074  0CBE  084C               	movf	___fttol@f1+1,w
 13075  0CBF  00D5               	movwf	___fttol@lval+1
 13076  0CC0  084D               	movf	___fttol@f1+2,w
 13077  0CC1  00D6               	movwf	___fttol@lval+2
 13078  0CC2  01D7               	clrf	___fttol@lval+3
 13079  0CC3  308E               	movlw	142
 13080  0CC4  02D8               	subwf	___fttol@exp1,f
 13081  0CC5  1FD8               	btfss	___fttol@exp1,7
 13082  0CC6  2CE3               	goto	l5356
 13083  0CC7  0858               	movf	___fttol@exp1,w
 13084  0CC8  3A80               	xorlw	128
 13085  0CC9  3E8F               	addlw	143
 13086  0CCA  1803               	skipnc
 13087  0CCB  2CD5               	goto	l5354
 13088  0CCC  3000               	movlw	0
 13089  0CCD  00CE               	movwf	?___fttol+3
 13090  0CCE  3000               	movlw	0
 13091  0CCF  00CD               	movwf	?___fttol+2
 13092  0CD0  3000               	movlw	0
 13093  0CD1  00CC               	movwf	?___fttol+1
 13094  0CD2  3000               	movlw	0
 13095  0CD3  00CB               	movwf	?___fttol
 13096  0CD4  0008               	return
 13097  0CD5                     l5354:	
 13098  0CD5  3001               	movlw	1
 13099  0CD6                     u3715:	
 13100  0CD6  36D7               	lsrf	___fttol@lval+3,f
 13101  0CD7  0CD6               	rrf	___fttol@lval+2,f
 13102  0CD8  0CD5               	rrf	___fttol@lval+1,f
 13103  0CD9  0CD4               	rrf	___fttol@lval,f
 13104  0CDA  0B89               	decfsz	9,f
 13105  0CDB  2CD6               	goto	u3715
 13106  0CDC  3001               	movlw	1
 13107  0CDD  00CF               	movwf	??___fttol
 13108  0CDE  084F               	movf	??___fttol,w
 13109  0CDF  07D8               	addwf	___fttol@exp1,f
 13110  0CE0  1903               	btfsc	3,2
 13111  0CE1  2CFC               	goto	l5366
 13112  0CE2  2CD5               	goto	l5354
 13113  0CE3                     l5356:	
 13114  0CE3  3018               	movlw	24
 13115  0CE4  0258               	subwf	___fttol@exp1,w
 13116  0CE5  1C03               	skipc
 13117  0CE6  2CF9               	goto	l5364
 13118  0CE7  3000               	movlw	0
 13119  0CE8  00CE               	movwf	?___fttol+3
 13120  0CE9  3000               	movlw	0
 13121  0CEA  00CD               	movwf	?___fttol+2
 13122  0CEB  3000               	movlw	0
 13123  0CEC  00CC               	movwf	?___fttol+1
 13124  0CED  3000               	movlw	0
 13125  0CEE  00CB               	movwf	?___fttol
 13126  0CEF  0008               	return
 13127  0CF0                     l5362:	
 13128  0CF0  3001               	movlw	1
 13129  0CF1                     u3745:	
 13130  0CF1  35D4               	lslf	___fttol@lval,f
 13131  0CF2  0DD5               	rlf	___fttol@lval+1,f
 13132  0CF3  0DD6               	rlf	___fttol@lval+2,f
 13133  0CF4  0DD7               	rlf	___fttol@lval+3,f
 13134  0CF5  0B89               	decfsz	9,f
 13135  0CF6  2CF1               	goto	u3745
 13136  0CF7  3001               	movlw	1
 13137  0CF8  02D8               	subwf	___fttol@exp1,f
 13138  0CF9                     l5364:	
 13139  0CF9  08D8               	movf	___fttol@exp1,f
 13140  0CFA  1D03               	skipz
 13141  0CFB  2CF0               	goto	l5362
 13142  0CFC                     l5366:	
 13143  0CFC  0853               	movf	___fttol@sign1,w
 13144  0CFD  1903               	btfsc	3,2
 13145  0CFE  2D0A               	goto	l5370
 13146  0CFF  09D4               	comf	___fttol@lval,f
 13147  0D00  09D5               	comf	___fttol@lval+1,f
 13148  0D01  09D6               	comf	___fttol@lval+2,f
 13149  0D02  09D7               	comf	___fttol@lval+3,f
 13150  0D03  0AD4               	incf	___fttol@lval,f
 13151  0D04  1903               	skipnz
 13152  0D05  0AD5               	incf	___fttol@lval+1,f
 13153  0D06  1903               	skipnz
 13154  0D07  0AD6               	incf	___fttol@lval+2,f
 13155  0D08  1903               	skipnz
 13156  0D09  0AD7               	incf	___fttol@lval+3,f
 13157  0D0A                     l5370:	
 13158  0D0A  0857               	movf	___fttol@lval+3,w
 13159  0D0B  00CE               	movwf	?___fttol+3
 13160  0D0C  0856               	movf	___fttol@lval+2,w
 13161  0D0D  00CD               	movwf	?___fttol+2
 13162  0D0E  0855               	movf	___fttol@lval+1,w
 13163  0D0F  00CC               	movwf	?___fttol+1
 13164  0D10  0854               	movf	___fttol@lval,w
 13165  0D11  00CB               	movwf	?___fttol
 13166  0D12  0008               	return
 13167  0D13                     __end_of___fttol:	
 13168                           
 13169                           	psect	text80
 13170  06EB                     __ptext80:	
 13171 ;; *************** function ___ftdiv *****************
 13172 ;; Defined at:
 13173 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;  f2              3   14[BANK0 ] float 
 13176 ;;  f1              3   17[BANK0 ] float 
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;  f3              3   25[BANK0 ] float 
 13179 ;;  sign            1   29[BANK0 ] unsigned char 
 13180 ;;  exp             1   28[BANK0 ] unsigned char 
 13181 ;;  cntr            1   24[BANK0 ] unsigned char 
 13182 ;; Return value:  Size  Location     Type
 13183 ;;                  3   14[BANK0 ] float 
 13184 ;; Registers used:
 13185 ;;		wreg, status,2, status,0, pclath, cstack
 13186 ;; Tracked objects:
 13187 ;;		On entry : 0/0
 13188 ;;		On exit  : 0/0
 13189 ;;		Unchanged: 0/0
 13190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13191 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;Total ram usage:       16 bytes
 13196 ;; Hardware stack levels used:    1
 13197 ;; Hardware stack levels required when called:    6
 13198 ;; This function calls:
 13199 ;;		___ftpack
 13200 ;; This function is called by:
 13201 ;;		_getPercentValue
 13202 ;;		_setPercentValue
 13203 ;; This function uses a non-reentrant model
 13204 ;;
 13205                           
 13206                           
 13207                           ;psect for function ___ftdiv
 13208  06EB                     ___ftdiv:	
 13209                           
 13210                           ;incstack = 0
 13211                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13212  06EB  0020               	movlb	0	; select bank0
 13213  06EC  0831               	movf	___ftdiv@f1,w
 13214  06ED  00B4               	movwf	??___ftdiv
 13215  06EE  0832               	movf	___ftdiv@f1+1,w
 13216  06EF  00B5               	movwf	??___ftdiv+1
 13217  06F0  0833               	movf	___ftdiv@f1+2,w
 13218  06F1  00B6               	movwf	??___ftdiv+2
 13219  06F2  1003               	clrc
 13220  06F3  0D35               	rlf	??___ftdiv+1,w
 13221  06F4  0D36               	rlf	??___ftdiv+2,w
 13222  06F5  00B7               	movwf	??___ftdiv+3
 13223  06F6  0837               	movf	??___ftdiv+3,w
 13224  06F7  00BC               	movwf	___ftdiv@exp
 13225  06F8  08BC               	movf	___ftdiv@exp,f
 13226  06F9  1D03               	skipz
 13227  06FA  2F02               	goto	l5244
 13228  06FB  3000               	movlw	0
 13229  06FC  00AE               	movwf	?___ftdiv
 13230  06FD  3000               	movlw	0
 13231  06FE  00AF               	movwf	?___ftdiv+1
 13232  06FF  3000               	movlw	0
 13233  0700  00B0               	movwf	?___ftdiv+2
 13234  0701  0008               	return
 13235  0702                     l5244:	
 13236  0702  082E               	movf	___ftdiv@f2,w
 13237  0703  00B4               	movwf	??___ftdiv
 13238  0704  082F               	movf	___ftdiv@f2+1,w
 13239  0705  00B5               	movwf	??___ftdiv+1
 13240  0706  0830               	movf	___ftdiv@f2+2,w
 13241  0707  00B6               	movwf	??___ftdiv+2
 13242  0708  1003               	clrc
 13243  0709  0D35               	rlf	??___ftdiv+1,w
 13244  070A  0D36               	rlf	??___ftdiv+2,w
 13245  070B  00B7               	movwf	??___ftdiv+3
 13246  070C  0837               	movf	??___ftdiv+3,w
 13247  070D  00BD               	movwf	___ftdiv@sign
 13248  070E  08BD               	movf	___ftdiv@sign,f
 13249  070F  1D03               	skipz
 13250  0710  2F18               	goto	l5250
 13251  0711  3000               	movlw	0
 13252  0712  00AE               	movwf	?___ftdiv
 13253  0713  3000               	movlw	0
 13254  0714  00AF               	movwf	?___ftdiv+1
 13255  0715  3000               	movlw	0
 13256  0716  00B0               	movwf	?___ftdiv+2
 13257  0717  0008               	return
 13258  0718                     l5250:	
 13259  0718  3000               	movlw	0
 13260  0719  00B9               	movwf	___ftdiv@f3
 13261  071A  3000               	movlw	0
 13262  071B  00BA               	movwf	___ftdiv@f3+1
 13263  071C  3000               	movlw	0
 13264  071D  00BB               	movwf	___ftdiv@f3+2
 13265  071E  3089               	movlw	137
 13266  071F  073D               	addwf	___ftdiv@sign,w
 13267  0720  00B4               	movwf	??___ftdiv
 13268  0721  0834               	movf	??___ftdiv,w
 13269  0722  02BC               	subwf	___ftdiv@exp,f
 13270  0723  0831               	movf	___ftdiv@f1,w
 13271  0724  00B4               	movwf	??___ftdiv
 13272  0725  0832               	movf	___ftdiv@f1+1,w
 13273  0726  00B5               	movwf	??___ftdiv+1
 13274  0727  0833               	movf	___ftdiv@f1+2,w
 13275  0728  00B6               	movwf	??___ftdiv+2
 13276  0729  3010               	movlw	16
 13277  072A                     u3495:	
 13278  072A  36B6               	lsrf	??___ftdiv+2,f
 13279  072B  0CB5               	rrf	??___ftdiv+1,f
 13280  072C  0CB4               	rrf	??___ftdiv,f
 13281  072D  0B89               	decfsz	9,f
 13282  072E  2F2A               	goto	u3495
 13283  072F  0834               	movf	??___ftdiv,w
 13284  0730  00B7               	movwf	??___ftdiv+3
 13285  0731  0837               	movf	??___ftdiv+3,w
 13286  0732  00BD               	movwf	___ftdiv@sign
 13287  0733  082E               	movf	___ftdiv@f2,w
 13288  0734  00B4               	movwf	??___ftdiv
 13289  0735  082F               	movf	___ftdiv@f2+1,w
 13290  0736  00B5               	movwf	??___ftdiv+1
 13291  0737  0830               	movf	___ftdiv@f2+2,w
 13292  0738  00B6               	movwf	??___ftdiv+2
 13293  0739  3010               	movlw	16
 13294  073A                     u3505:	
 13295  073A  36B6               	lsrf	??___ftdiv+2,f
 13296  073B  0CB5               	rrf	??___ftdiv+1,f
 13297  073C  0CB4               	rrf	??___ftdiv,f
 13298  073D  0B89               	decfsz	9,f
 13299  073E  2F3A               	goto	u3505
 13300  073F  0834               	movf	??___ftdiv,w
 13301  0740  00B7               	movwf	??___ftdiv+3
 13302  0741  0837               	movf	??___ftdiv+3,w
 13303  0742  06BD               	xorwf	___ftdiv@sign,f
 13304  0743  3080               	movlw	128
 13305  0744  00B4               	movwf	??___ftdiv
 13306  0745  0834               	movf	??___ftdiv,w
 13307  0746  05BD               	andwf	___ftdiv@sign,f
 13308  0747  17B2               	bsf	___ftdiv@f1+1,7
 13309  0748  30FF               	movlw	255
 13310  0749  05B1               	andwf	___ftdiv@f1,f
 13311  074A  30FF               	movlw	255
 13312  074B  05B2               	andwf	___ftdiv@f1+1,f
 13313  074C  3000               	movlw	0
 13314  074D  05B3               	andwf	___ftdiv@f1+2,f
 13315  074E  17AF               	bsf	___ftdiv@f2+1,7
 13316  074F  30FF               	movlw	255
 13317  0750  05AE               	andwf	___ftdiv@f2,f
 13318  0751  30FF               	movlw	255
 13319  0752  05AF               	andwf	___ftdiv@f2+1,f
 13320  0753  3000               	movlw	0
 13321  0754  05B0               	andwf	___ftdiv@f2+2,f
 13322  0755  3018               	movlw	24
 13323  0756  00B4               	movwf	??___ftdiv
 13324  0757  0834               	movf	??___ftdiv,w
 13325  0758  00B8               	movwf	___ftdiv@cntr
 13326  0759                     l5264:	
 13327  0759  3001               	movlw	1
 13328  075A                     u3515:	
 13329  075A  35B9               	lslf	___ftdiv@f3,f
 13330  075B  0DBA               	rlf	___ftdiv@f3+1,f
 13331  075C  0DBB               	rlf	___ftdiv@f3+2,f
 13332  075D  0B89               	decfsz	9,f
 13333  075E  2F5A               	goto	u3515
 13334  075F  0830               	movf	___ftdiv@f2+2,w
 13335  0760  0233               	subwf	___ftdiv@f1+2,w
 13336  0761  1D03               	skipz
 13337  0762  2F69               	goto	u3525
 13338  0763  082F               	movf	___ftdiv@f2+1,w
 13339  0764  0232               	subwf	___ftdiv@f1+1,w
 13340  0765  1D03               	skipz
 13341  0766  2F69               	goto	u3525
 13342  0767  082E               	movf	___ftdiv@f2,w
 13343  0768  0231               	subwf	___ftdiv@f1,w
 13344  0769                     u3525:	
 13345  0769  1C03               	skipc
 13346  076A  2F72               	goto	l5272
 13347  076B  082E               	movf	___ftdiv@f2,w
 13348  076C  02B1               	subwf	___ftdiv@f1,f
 13349  076D  082F               	movf	___ftdiv@f2+1,w
 13350  076E  3BB2               	subwfb	___ftdiv@f1+1,f
 13351  076F  0830               	movf	___ftdiv@f2+2,w
 13352  0770  3BB3               	subwfb	___ftdiv@f1+2,f
 13353  0771  1439               	bsf	___ftdiv@f3,0
 13354  0772                     l5272:	
 13355  0772  3001               	movlw	1
 13356  0773                     u3535:	
 13357  0773  35B1               	lslf	___ftdiv@f1,f
 13358  0774  0DB2               	rlf	___ftdiv@f1+1,f
 13359  0775  0DB3               	rlf	___ftdiv@f1+2,f
 13360  0776  0B89               	decfsz	9,f
 13361  0777  2F73               	goto	u3535
 13362  0778  3001               	movlw	1
 13363  0779  02B8               	subwf	___ftdiv@cntr,f
 13364  077A  1D03               	btfss	3,2
 13365  077B  2F59               	goto	l5264
 13366  077C  0839               	movf	___ftdiv@f3,w
 13367  077D  00A0               	movwf	___ftpack@arg
 13368  077E  083A               	movf	___ftdiv@f3+1,w
 13369  077F  00A1               	movwf	___ftpack@arg+1
 13370  0780  083B               	movf	___ftdiv@f3+2,w
 13371  0781  00A2               	movwf	___ftpack@arg+2
 13372  0782  083C               	movf	___ftdiv@exp,w
 13373  0783  00B4               	movwf	??___ftdiv
 13374  0784  0834               	movf	??___ftdiv,w
 13375  0785  00A3               	movwf	___ftpack@exp
 13376  0786  083D               	movf	___ftdiv@sign,w
 13377  0787  00B5               	movwf	??___ftdiv+1
 13378  0788  0835               	movf	??___ftdiv+1,w
 13379  0789  00A4               	movwf	___ftpack@sign
 13380  078A  3188  2093         	fcall	___ftpack
 13381  078C  0020               	movlb	0	; select bank0
 13382  078D  0820               	movf	?___ftpack,w
 13383  078E  00AE               	movwf	?___ftdiv
 13384  078F  0821               	movf	?___ftpack+1,w
 13385  0790  00AF               	movwf	?___ftdiv+1
 13386  0791  0822               	movf	?___ftpack+2,w
 13387  0792  00B0               	movwf	?___ftdiv+2
 13388  0793  0008               	return
 13389  0794                     __end_of___ftdiv:	
 13390                           
 13391                           	psect	text81
 13392  128E                     __ptext81:	
 13393 ;; *************** function ___awtoft *****************
 13394 ;; Defined at:
 13395 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;  c               2    8[BANK0 ] int 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  sign            1   13[BANK0 ] unsigned char 
 13400 ;; Return value:  Size  Location     Type
 13401 ;;                  3    8[BANK0 ] float 
 13402 ;; Registers used:
 13403 ;;		wreg, status,2, status,0, pclath, cstack
 13404 ;; Tracked objects:
 13405 ;;		On entry : 0/0
 13406 ;;		On exit  : 0/0
 13407 ;;		Unchanged: 0/0
 13408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13409 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;Total ram usage:        6 bytes
 13414 ;; Hardware stack levels used:    1
 13415 ;; Hardware stack levels required when called:    6
 13416 ;; This function calls:
 13417 ;;		___ftpack
 13418 ;; This function is called by:
 13419 ;;		_getPercentValue
 13420 ;;		_setPercentValue
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function ___awtoft
 13426  128E                     ___awtoft:	
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13430  128E  0020               	movlb	0	; select bank0
 13431  128F  01AD               	clrf	___awtoft@sign
 13432  1290  1FA9               	btfss	___awtoft@c+1,7
 13433  1291  2A99               	goto	l5162
 13434  1292  09A8               	comf	___awtoft@c,f
 13435  1293  09A9               	comf	___awtoft@c+1,f
 13436  1294  0AA8               	incf	___awtoft@c,f
 13437  1295  1903               	skipnz
 13438  1296  0AA9               	incf	___awtoft@c+1,f
 13439  1297  01AD               	clrf	___awtoft@sign
 13440  1298  0AAD               	incf	___awtoft@sign,f
 13441  1299                     l5162:	
 13442  1299  0828               	movf	___awtoft@c,w
 13443  129A  00A0               	movwf	___ftpack@arg
 13444  129B  0829               	movf	___awtoft@c+1,w
 13445  129C  00A1               	movwf	___ftpack@arg+1
 13446  129D  01A2               	clrf	___ftpack@arg+2
 13447  129E  308E               	movlw	142
 13448  129F  00AB               	movwf	??___awtoft
 13449  12A0  082B               	movf	??___awtoft,w
 13450  12A1  00A3               	movwf	___ftpack@exp
 13451  12A2  082D               	movf	___awtoft@sign,w
 13452  12A3  00AC               	movwf	??___awtoft+1
 13453  12A4  082C               	movf	??___awtoft+1,w
 13454  12A5  00A4               	movwf	___ftpack@sign
 13455  12A6  3188  2093         	fcall	___ftpack
 13456  12A8  0020               	movlb	0	; select bank0
 13457  12A9  0820               	movf	?___ftpack,w
 13458  12AA  00A8               	movwf	?___awtoft
 13459  12AB  0821               	movf	?___ftpack+1,w
 13460  12AC  00A9               	movwf	?___awtoft+1
 13461  12AD  0822               	movf	?___ftpack+2,w
 13462  12AE  00AA               	movwf	?___awtoft+2
 13463  12AF  0008               	return
 13464  12B0                     __end_of___awtoft:	
 13465                           
 13466                           	psect	text82
 13467  0893                     __ptext82:	
 13468 ;; *************** function ___ftpack *****************
 13469 ;; Defined at:
 13470 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  arg             3    0[BANK0 ] unsigned um
 13473 ;;  exp             1    3[BANK0 ] unsigned char 
 13474 ;;  sign            1    4[BANK0 ] unsigned char 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;		None
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  3    0[BANK0 ] float 
 13479 ;; Registers used:
 13480 ;;		wreg, status,2, status,0
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13486 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;Total ram usage:        8 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; Hardware stack levels required when called:    5
 13493 ;; This function calls:
 13494 ;;		Nothing
 13495 ;; This function is called by:
 13496 ;;		___awtoft
 13497 ;;		___ftadd
 13498 ;;		___ftdiv
 13499 ;;		___ftmul
 13500 ;; This function uses a non-reentrant model
 13501 ;;
 13502                           
 13503                           
 13504                           ;psect for function ___ftpack
 13505  0893                     ___ftpack:	
 13506                           
 13507                           ;incstack = 0
 13508                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13509  0893  0020               	movlb	0	; select bank0
 13510  0894  0823               	movf	___ftpack@exp,w
 13511  0895  1903               	btfsc	3,2
 13512  0896  289C               	goto	l5128
 13513  0897  0822               	movf	___ftpack@arg+2,w
 13514  0898  0421               	iorwf	___ftpack@arg+1,w
 13515  0899  0420               	iorwf	___ftpack@arg,w
 13516  089A  1D03               	skipz
 13517  089B  28AD               	goto	l5134
 13518  089C                     l5128:	
 13519  089C  3000               	movlw	0
 13520  089D  00A0               	movwf	?___ftpack
 13521  089E  3000               	movlw	0
 13522  089F  00A1               	movwf	?___ftpack+1
 13523  08A0  3000               	movlw	0
 13524  08A1  00A2               	movwf	?___ftpack+2
 13525  08A2  0008               	return
 13526  08A3                     l5132:	
 13527  08A3  3001               	movlw	1
 13528  08A4  00A5               	movwf	??___ftpack
 13529  08A5  0825               	movf	??___ftpack,w
 13530  08A6  07A3               	addwf	___ftpack@exp,f
 13531  08A7  3001               	movlw	1
 13532  08A8                     u3145:	
 13533  08A8  36A2               	lsrf	___ftpack@arg+2,f
 13534  08A9  0CA1               	rrf	___ftpack@arg+1,f
 13535  08AA  0CA0               	rrf	___ftpack@arg,f
 13536  08AB  0B89               	decfsz	9,f
 13537  08AC  28A8               	goto	u3145
 13538  08AD                     l5134:	
 13539  08AD  30FE               	movlw	254
 13540  08AE  0522               	andwf	___ftpack@arg+2,w
 13541  08AF  1903               	btfsc	3,2
 13542  08B0  28C6               	goto	l2904
 13543  08B1  28A3               	goto	l5132
 13544  08B2                     l5136:	
 13545  08B2  3001               	movlw	1
 13546  08B3  00A5               	movwf	??___ftpack
 13547  08B4  0825               	movf	??___ftpack,w
 13548  08B5  07A3               	addwf	___ftpack@exp,f
 13549  08B6  3001               	movlw	1
 13550  08B7  07A0               	addwf	___ftpack@arg,f
 13551  08B8  3000               	movlw	0
 13552  08B9  1803               	skipnc
 13553  08BA  3001               	movlw	1
 13554  08BB  07A1               	addwf	___ftpack@arg+1,f
 13555  08BC  3000               	movlw	0
 13556  08BD  1803               	skipnc
 13557  08BE  3001               	movlw	1
 13558  08BF  07A2               	addwf	___ftpack@arg+2,f
 13559  08C0  3001               	movlw	1
 13560  08C1                     u3165:	
 13561  08C1  36A2               	lsrf	___ftpack@arg+2,f
 13562  08C2  0CA1               	rrf	___ftpack@arg+1,f
 13563  08C3  0CA0               	rrf	___ftpack@arg,f
 13564  08C4  0B89               	decfsz	9,f
 13565  08C5  28C1               	goto	u3165
 13566  08C6                     l2904:	
 13567  08C6  30FF               	movlw	255
 13568  08C7  0522               	andwf	___ftpack@arg+2,w
 13569  08C8  1903               	btfsc	3,2
 13570  08C9  28D3               	goto	l5144
 13571  08CA  28B2               	goto	l5136
 13572  08CB                     l5142:	
 13573  08CB  3001               	movlw	1
 13574  08CC  02A3               	subwf	___ftpack@exp,f
 13575  08CD  3001               	movlw	1
 13576  08CE                     u3185:	
 13577  08CE  35A0               	lslf	___ftpack@arg,f
 13578  08CF  0DA1               	rlf	___ftpack@arg+1,f
 13579  08D0  0DA2               	rlf	___ftpack@arg+2,f
 13580  08D1  0B89               	decfsz	9,f
 13581  08D2  28CE               	goto	u3185
 13582  08D3                     l5144:	
 13583  08D3  1FA1               	btfss	___ftpack@arg+1,7
 13584  08D4  28CB               	goto	l5142
 13585  08D5  1823               	btfsc	___ftpack@exp,0
 13586  08D6  28DD               	goto	l2910
 13587  08D7  30FF               	movlw	255
 13588  08D8  05A0               	andwf	___ftpack@arg,f
 13589  08D9  307F               	movlw	127
 13590  08DA  05A1               	andwf	___ftpack@arg+1,f
 13591  08DB  30FF               	movlw	255
 13592  08DC  05A2               	andwf	___ftpack@arg+2,f
 13593  08DD                     l2910:	
 13594  08DD  1003               	clrc
 13595  08DE  0CA3               	rrf	___ftpack@exp,f
 13596  08DF  0823               	movf	___ftpack@exp,w
 13597  08E0  00A5               	movwf	??___ftpack
 13598  08E1  01A6               	clrf	??___ftpack+1
 13599  08E2  01A7               	clrf	??___ftpack+2
 13600  08E3  3010               	movlw	16
 13601  08E4                     u3215:	
 13602  08E4  35A5               	lslf	??___ftpack,f
 13603  08E5  0DA6               	rlf	??___ftpack+1,f
 13604  08E6  0DA7               	rlf	??___ftpack+2,f
 13605  08E7  0B89               	decfsz	9,f
 13606  08E8  28E4               	goto	u3215
 13607  08E9  0825               	movf	??___ftpack,w
 13608  08EA  04A0               	iorwf	___ftpack@arg,f
 13609  08EB  0826               	movf	??___ftpack+1,w
 13610  08EC  04A1               	iorwf	___ftpack@arg+1,f
 13611  08ED  0827               	movf	??___ftpack+2,w
 13612  08EE  04A2               	iorwf	___ftpack@arg+2,f
 13613  08EF  0824               	movf	___ftpack@sign,w
 13614  08F0  1903               	btfsc	3,2
 13615  08F1  0008               	return
 13616  08F2  17A2               	bsf	___ftpack@arg+2,7
 13617  08F3  0008               	return
 13618  08F4                     __end_of___ftpack:	
 13619                           
 13620                           	psect	text83
 13621  1F41                     __ptext83:	
 13622 ;; *************** function _setRFSW_Status *****************
 13623 ;; Defined at:
 13624 ;;		line 380 in file "../src/RF_Control_B1.c"
 13625 ;; Parameters:    Size  Location     Type
 13626 ;;  sw              1    wreg     unsigned char 
 13627 ;;  command         1    2[BANK0 ] unsigned char 
 13628 ;; Auto vars:     Size  Location     Type
 13629 ;;  sw              1    3[BANK0 ] unsigned char 
 13630 ;; Return value:  Size  Location     Type
 13631 ;;		None               void
 13632 ;; Registers used:
 13633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13639 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;Total ram usage:        2 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; Hardware stack levels required when called:    6
 13646 ;; This function calls:
 13647 ;;		_RfSWPointSelect
 13648 ;; This function is called by:
 13649 ;;		_DlyOff_Main
 13650 ;;		_setControl_Lights_Table
 13651 ;;		_Sw_DimmerOnFunc
 13652 ;;		_Sw_DimmerAdjFunc
 13653 ;;		_setDimmerLights_ERROR
 13654 ;; This function uses a non-reentrant model
 13655 ;;
 13656                           
 13657                           
 13658                           ;psect for function _setRFSW_Status
 13659  1F41                     _setRFSW_Status:	
 13660                           
 13661                           ;incstack = 0
 13662                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13663                           ;setRFSW_Status@sw stored from wreg
 13664  1F41  0020               	movlb	0	; select bank0
 13665  1F42  00A3               	movwf	setRFSW_Status@sw
 13666                           
 13667                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 13668  1F43  0823               	movf	setRFSW_Status@sw,w
 13669  1F44  3190  20D2         	fcall	_RfSWPointSelect
 13670                           
 13671                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 13672  1F46  0021               	movlb	1	; select bank1
 13673  1F47  083F               	movf	_RFSW^(0+128),w
 13674  1F48  0086               	movwf	6
 13675  1F49  0187               	clrf	7
 13676  1F4A  0020               	movlb	0	; select bank0
 13677  1F4B  0822               	movf	setRFSW_Status@command,w
 13678  1F4C  1001               	bcf	1,0
 13679  1F4D  1D03               	skipz
 13680  1F4E  1401               	bsf	1,0
 13681  1F4F  0008               	return
 13682  1F50                     __end_of_setRFSW_Status:	
 13683                           
 13684                           	psect	text84
 13685  10D2                     __ptext84:	
 13686 ;; *************** function _RfSWPointSelect *****************
 13687 ;; Defined at:
 13688 ;;		line 315 in file "../src/RF_Control_B1.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  sw              1    wreg     unsigned char 
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;  sw              1    1[BANK0 ] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;		None               void
 13695 ;; Registers used:
 13696 ;;		wreg
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;Total ram usage:        2 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    5
 13709 ;; This function calls:
 13710 ;;		Nothing
 13711 ;; This function is called by:
 13712 ;;		_setRFSW_Control
 13713 ;;		_setRFSW_AdjControl
 13714 ;;		_setRFSW_Status
 13715 ;; This function uses a non-reentrant model
 13716 ;;
 13717                           
 13718                           
 13719                           ;psect for function _RfSWPointSelect
 13720  10D2                     _RfSWPointSelect:	
 13721                           
 13722                           ;incstack = 0
 13723                           ; Regs used in _RfSWPointSelect: [wreg]
 13724                           ;RfSWPointSelect@sw stored from wreg
 13725  10D2  0020               	movlb	0	; select bank0
 13726  10D3  00A1               	movwf	RfSWPointSelect@sw
 13727                           
 13728                           ;RF_Control_B1.c: 317: if (sw == 1) {
 13729  10D4  0821               	movf	RfSWPointSelect@sw,w
 13730  10D5  3A01               	xorlw	1
 13731  10D6  1D03               	skipz
 13732  10D7  28DD               	goto	l2039
 13733                           
 13734                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 13735  10D8  30E5               	movlw	_RFSW1& (0+255)
 13736  10D9  00A0               	movwf	??_RfSWPointSelect
 13737  10DA  0820               	movf	??_RfSWPointSelect,w
 13738  10DB  0021               	movlb	1	; select bank1
 13739  10DC  00BF               	movwf	_RFSW^(0+128)
 13740  10DD                     l2039:	
 13741                           
 13742                           ;RF_Control_B1.c: 319: }
 13743                           ;RF_Control_B1.c: 322: if (sw == 2) {
 13744  10DD  0020               	movlb	0	; select bank0
 13745  10DE  0821               	movf	RfSWPointSelect@sw,w
 13746  10DF  3A02               	xorlw	2
 13747  10E0  1D03               	skipz
 13748  10E1  0008               	return
 13749                           
 13750                           ;RF_Control_B1.c: 323: RFSW = &RFSW2;
 13751  10E2  30E6               	movlw	_RFSW2& (0+255)
 13752  10E3  00A0               	movwf	??_RfSWPointSelect
 13753  10E4  0820               	movf	??_RfSWPointSelect,w
 13754  10E5  0021               	movlb	1	; select bank1
 13755  10E6  00BF               	movwf	_RFSW^(0+128)
 13756  10E7  0008               	return
 13757  10E8                     __end_of_RfSWPointSelect:	
 13758                           
 13759                           	psect	text85
 13760  1F9D                     __ptext85:	
 13761 ;; *************** function _setDimmerLights_Trigger *****************
 13762 ;; Defined at:
 13763 ;;		line 548 in file "../src/Dimmer_B1.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;  lights          1    wreg     unsigned char 
 13766 ;;  command         1    2[BANK0 ] unsigned char 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  lights          1    3[BANK0 ] unsigned char 
 13769 ;; Return value:  Size  Location     Type
 13770 ;;		None               void
 13771 ;; Registers used:
 13772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        2 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; Hardware stack levels required when called:    6
 13785 ;; This function calls:
 13786 ;;		_DimmerLightsPointSelect
 13787 ;; This function is called by:
 13788 ;;		_DlyOff_Main
 13789 ;;		_setRFSW_Control
 13790 ;;		_Sw_DimmerOnFunc
 13791 ;;		_Sw_DimmerOffFunc
 13792 ;; This function uses a non-reentrant model
 13793 ;;
 13794                           
 13795                           
 13796                           ;psect for function _setDimmerLights_Trigger
 13797  1F9D                     _setDimmerLights_Trigger:	
 13798                           
 13799                           ;incstack = 0
 13800                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13801                           ;setDimmerLights_Trigger@lights stored from wreg
 13802  1F9D  0020               	movlb	0	; select bank0
 13803  1F9E  00A3               	movwf	setDimmerLights_Trigger@lights
 13804                           
 13805                           ;Dimmer_B1.c: 549: DimmerLightsPointSelect(lights);
 13806  1F9F  0823               	movf	setDimmerLights_Trigger@lights,w
 13807  1FA0  3190  2082         	fcall	_DimmerLightsPointSelect
 13808                           
 13809                           ;Dimmer_B1.c: 550: DimmerLights->Trigger = command;
 13810  1FA2  0879               	movf	_DimmerLights,w
 13811  1FA3  3E09               	addlw	9
 13812  1FA4  0086               	movwf	6
 13813  1FA5  3001               	movlw	1	; select bank2/3
 13814  1FA6  0087               	movwf	7
 13815  1FA7  0020               	movlb	0	; select bank0
 13816  1FA8  0822               	movf	setDimmerLights_Trigger@command,w
 13817  1FA9  1081               	bcf	1,1
 13818  1FAA  1D03               	skipz
 13819  1FAB  1481               	bsf	1,1
 13820  1FAC  0008               	return
 13821  1FAD                     __end_of_setDimmerLights_Trigger:	
 13822                           
 13823                           	psect	text86
 13824  1F8D                     __ptext86:	
 13825 ;; *************** function _setDimmerLights_Switch *****************
 13826 ;; Defined at:
 13827 ;;		line 538 in file "../src/Dimmer_B1.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;  lights          1    wreg     unsigned char 
 13830 ;;  command         1    2[BANK0 ] unsigned char 
 13831 ;; Auto vars:     Size  Location     Type
 13832 ;;  lights          1    3[BANK0 ] unsigned char 
 13833 ;; Return value:  Size  Location     Type
 13834 ;;		None               void
 13835 ;; Registers used:
 13836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13837 ;; Tracked objects:
 13838 ;;		On entry : 0/0
 13839 ;;		On exit  : 0/0
 13840 ;;		Unchanged: 0/0
 13841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13842 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;Total ram usage:        2 bytes
 13847 ;; Hardware stack levels used:    1
 13848 ;; Hardware stack levels required when called:    6
 13849 ;; This function calls:
 13850 ;;		_DimmerLightsPointSelect
 13851 ;; This function is called by:
 13852 ;;		_DlyOff_Main
 13853 ;;		_setRFSW_Control
 13854 ;;		_Sw_DimmerOnFunc
 13855 ;;		_Sw_DimmerOffFunc
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           
 13860                           ;psect for function _setDimmerLights_Switch
 13861  1F8D                     _setDimmerLights_Switch:	
 13862                           
 13863                           ;incstack = 0
 13864                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13865                           ;setDimmerLights_Switch@lights stored from wreg
 13866  1F8D  0020               	movlb	0	; select bank0
 13867  1F8E  00A3               	movwf	setDimmerLights_Switch@lights
 13868                           
 13869                           ;Dimmer_B1.c: 539: DimmerLightsPointSelect(lights);
 13870  1F8F  0823               	movf	setDimmerLights_Switch@lights,w
 13871  1F90  3190  2082         	fcall	_DimmerLightsPointSelect
 13872                           
 13873                           ;Dimmer_B1.c: 540: DimmerLights->Switch = command;
 13874  1F92  0879               	movf	_DimmerLights,w
 13875  1F93  3E09               	addlw	9
 13876  1F94  0086               	movwf	6
 13877  1F95  3001               	movlw	1	; select bank2/3
 13878  1F96  0087               	movwf	7
 13879  1F97  0020               	movlb	0	; select bank0
 13880  1F98  0822               	movf	setDimmerLights_Switch@command,w
 13881  1F99  1001               	bcf	1,0
 13882  1F9A  1D03               	skipz
 13883  1F9B  1401               	bsf	1,0
 13884  1F9C  0008               	return
 13885  1F9D                     __end_of_setDimmerLights_Switch:	
 13886                           
 13887                           	psect	text87
 13888  1082                     __ptext87:	
 13889 ;; *************** function _DimmerLightsPointSelect *****************
 13890 ;; Defined at:
 13891 ;;		line 150 in file "../src/Dimmer_B1.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  lights          1    wreg     unsigned char 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  lights          1    1[BANK0 ] unsigned char 
 13896 ;; Return value:  Size  Location     Type
 13897 ;;		None               void
 13898 ;; Registers used:
 13899 ;;		wreg
 13900 ;; Tracked objects:
 13901 ;;		On entry : 0/0
 13902 ;;		On exit  : 0/0
 13903 ;;		Unchanged: 0/0
 13904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;Total ram usage:        2 bytes
 13910 ;; Hardware stack levels used:    1
 13911 ;; Hardware stack levels required when called:    5
 13912 ;; This function calls:
 13913 ;;		Nothing
 13914 ;; This function is called by:
 13915 ;;		_setDimmerLights_Initialization
 13916 ;;		_setDimmerLights_Main
 13917 ;;		_setDimmerLights
 13918 ;;		_setDimmerLights_Adj
 13919 ;;		_setDimmerLights_AdjRF
 13920 ;;		_setDimmerLights_Switch
 13921 ;;		_setDimmerLights_AdjGo
 13922 ;;		_setDimmerLights_Trigger
 13923 ;;		_setDimmerLights_TriggerAdj
 13924 ;;		_setDimmerLights_ERROR
 13925 ;;		_setDimmerLights_TriggerERROR
 13926 ;;		_setDimmerLights_GO
 13927 ;;		_setDimmerLights_MaxmumValue
 13928 ;;		_setDimmerLights_Clear
 13929 ;; This function uses a non-reentrant model
 13930 ;;
 13931                           
 13932                           
 13933                           ;psect for function _DimmerLightsPointSelect
 13934  1082                     _DimmerLightsPointSelect:	
 13935                           
 13936                           ;incstack = 0
 13937                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13938                           ;DimmerLightsPointSelect@lights stored from wreg
 13939  1082  0020               	movlb	0	; select bank0
 13940  1083  00A1               	movwf	DimmerLightsPointSelect@lights
 13941                           
 13942                           ;Dimmer_B1.c: 152: if (lights == 1) {
 13943  1084  0821               	movf	DimmerLightsPointSelect@lights,w
 13944  1085  3A01               	xorlw	1
 13945  1086  1D03               	skipz
 13946  1087  288C               	goto	l813
 13947                           
 13948                           ;Dimmer_B1.c: 153: DimmerLights = &DimmerLights1;
 13949  1088  3020               	movlw	_DimmerLights1& (0+255)
 13950  1089  00A0               	movwf	??_DimmerLightsPointSelect
 13951  108A  0820               	movf	??_DimmerLightsPointSelect,w
 13952  108B  00F9               	movwf	_DimmerLights
 13953  108C                     l813:	
 13954                           
 13955                           ;Dimmer_B1.c: 154: }
 13956                           ;Dimmer_B1.c: 161: if (lights == 2) {
 13957  108C  0821               	movf	DimmerLightsPointSelect@lights,w
 13958  108D  3A02               	xorlw	2
 13959  108E  1D03               	skipz
 13960  108F  0008               	return
 13961                           
 13962                           ;Dimmer_B1.c: 162: DimmerLights = &DimmerLights2;
 13963  1090  3030               	movlw	_DimmerLights2& (0+255)
 13964  1091  00A0               	movwf	??_DimmerLightsPointSelect
 13965  1092  0820               	movf	??_DimmerLightsPointSelect,w
 13966  1093  00F9               	movwf	_DimmerLights
 13967  1094  0008               	return
 13968  1095                     __end_of_DimmerLightsPointSelect:	
 13969                           
 13970                           	psect	text88
 13971  0AA9                     __ptext88:	
 13972 ;; *************** function _setBuz *****************
 13973 ;; Defined at:
 13974 ;;		line 30 in file "../src/Buzzer_B1.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;  count           1    wreg     unsigned char 
 13977 ;;  time            2    0[BANK0 ] int 
 13978 ;; Auto vars:     Size  Location     Type
 13979 ;;  count           1    3[BANK0 ] unsigned char 
 13980 ;; Return value:  Size  Location     Type
 13981 ;;		None               void
 13982 ;; Registers used:
 13983 ;;		wreg, fsr1l, fsr1h
 13984 ;; Tracked objects:
 13985 ;;		On entry : 0/0
 13986 ;;		On exit  : 0/0
 13987 ;;		Unchanged: 0/0
 13988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13989 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;Total ram usage:        4 bytes
 13994 ;; Hardware stack levels used:    1
 13995 ;; Hardware stack levels required when called:    5
 13996 ;; This function calls:
 13997 ;;		Nothing
 13998 ;; This function is called by:
 13999 ;;		_DlyOff_Main
 14000 ;;		_setDimmerLights_Main
 14001 ;;		_setLog_Code
 14002 ;;		_setControl_Lights_Table
 14003 ;;		_setRFSW_Control
 14004 ;;		_setSw_Main
 14005 ;;		_Sw_DimmerOnFunc
 14006 ;;		_my_Main
 14007 ;;		_DimmerLights_Exceptions
 14008 ;; This function uses a non-reentrant model
 14009 ;;
 14010                           
 14011                           
 14012                           ;psect for function _setBuz
 14013  0AA9                     _setBuz:	
 14014                           
 14015                           ;incstack = 0
 14016                           ; Regs used in _setBuz: [wregfsr1]
 14017                           ;setBuz@count stored from wreg
 14018  0AA9  0020               	movlb	0	; select bank0
 14019  0AAA  00A3               	movwf	setBuz@count
 14020                           
 14021                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 14022  0AAB  0021               	movlb	1	; select bank1
 14023  0AAC  0837               	movf	_Buz^(0+128),w
 14024  0AAD  0086               	movwf	6
 14025  0AAE  3001               	movlw	1	; select bank2/3
 14026  0AAF  0087               	movwf	7
 14027  0AB0  1C01               	btfss	1,0
 14028  0AB1  0008               	return
 14029                           
 14030                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 14031  0AB2  0837               	movf	_Buz^(0+128),w
 14032  0AB3  0086               	movwf	6
 14033  0AB4  3001               	movlw	1	; select bank2/3
 14034  0AB5  0087               	movwf	7
 14035  0AB6  1881               	btfsc	1,1
 14036  0AB7  2AD6               	goto	l5466
 14037                           
 14038                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 14039  0AB8  0837               	movf	_Buz^(0+128),w
 14040  0AB9  0086               	movwf	6
 14041  0ABA  3001               	movlw	1	; select bank2/3
 14042  0ABB  0087               	movwf	7
 14043  0ABC  1481               	bsf	1,1
 14044                           
 14045                           ;Buzzer_B1.c: 35: Buz->Count = count;
 14046  0ABD  0020               	movlb	0	; select bank0
 14047  0ABE  0823               	movf	setBuz@count,w
 14048  0ABF  00A2               	movwf	??_setBuz
 14049  0AC0  0021               	movlb	1	; select bank1
 14050  0AC1  0837               	movf	_Buz^(0+128),w
 14051  0AC2  3E03               	addlw	3
 14052  0AC3  0086               	movwf	6
 14053  0AC4  3001               	movlw	1	; select bank2/3
 14054  0AC5  0087               	movwf	7
 14055  0AC6  0020               	movlb	0	; select bank0
 14056  0AC7  0822               	movf	??_setBuz,w
 14057  0AC8  0081               	movwf	1
 14058                           
 14059                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 14060  0AC9  0021               	movlb	1	; select bank1
 14061  0ACA  0837               	movf	_Buz^(0+128),w
 14062  0ACB  3E06               	addlw	6
 14063  0ACC  0086               	movwf	6
 14064  0ACD  3001               	movlw	1	; select bank2/3
 14065  0ACE  0087               	movwf	7
 14066  0ACF  0020               	movlb	0	; select bank0
 14067  0AD0  0820               	movf	setBuz@time,w
 14068  0AD1  3FC0               	movwi [0]fsr1
 14069  0AD2  0821               	movf	setBuz@time+1,w
 14070  0AD3  3FC1               	movwi [1]fsr1
 14071                           
 14072                           ;Buzzer_B1.c: 37: RB3 = 1;
 14073  0AD4  158D               	bsf	13,3	;volatile
 14074                           
 14075                           ;Buzzer_B1.c: 38: } else {
 14076  0AD5  0008               	return
 14077  0AD6                     l5466:	
 14078                           
 14079                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 14080  0AD6  0021               	movlb	1	; select bank1
 14081  0AD7  0837               	movf	_Buz^(0+128),w
 14082  0AD8  0086               	movwf	6
 14083  0AD9  3001               	movlw	1	; select bank2/3
 14084  0ADA  0087               	movwf	7
 14085  0ADB  1981               	btfsc	1,3
 14086  0ADC  2AFA               	goto	l5470
 14087                           
 14088                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 14089  0ADD  0837               	movf	_Buz^(0+128),w
 14090  0ADE  0086               	movwf	6
 14091  0ADF  3001               	movlw	1	; select bank2/3
 14092  0AE0  0087               	movwf	7
 14093  0AE1  1581               	bsf	1,3
 14094                           
 14095                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 14096  0AE2  0020               	movlb	0	; select bank0
 14097  0AE3  0823               	movf	setBuz@count,w
 14098  0AE4  00A2               	movwf	??_setBuz
 14099  0AE5  0021               	movlb	1	; select bank1
 14100  0AE6  0837               	movf	_Buz^(0+128),w
 14101  0AE7  3E04               	addlw	4
 14102  0AE8  0086               	movwf	6
 14103  0AE9  3001               	movlw	1	; select bank2/3
 14104  0AEA  0087               	movwf	7
 14105  0AEB  0020               	movlb	0	; select bank0
 14106  0AEC  0822               	movf	??_setBuz,w
 14107  0AED  0081               	movwf	1
 14108                           
 14109                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 14110  0AEE  0021               	movlb	1	; select bank1
 14111  0AEF  0837               	movf	_Buz^(0+128),w
 14112  0AF0  3E08               	addlw	8
 14113  0AF1  0086               	movwf	6
 14114  0AF2  3001               	movlw	1	; select bank2/3
 14115  0AF3  0087               	movwf	7
 14116  0AF4  0020               	movlb	0	; select bank0
 14117  0AF5  0820               	movf	setBuz@time,w
 14118  0AF6  3FC0               	movwi [0]fsr1
 14119  0AF7  0821               	movf	setBuz@time+1,w
 14120  0AF8  3FC1               	movwi [1]fsr1
 14121                           
 14122                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 14123  0AF9  0008               	return
 14124  0AFA                     l5470:	
 14125  0AFA  0021               	movlb	1	; select bank1
 14126  0AFB  0837               	movf	_Buz^(0+128),w
 14127  0AFC  0086               	movwf	6
 14128  0AFD  3001               	movlw	1	; select bank2/3
 14129  0AFE  0087               	movwf	7
 14130  0AFF  1A01               	btfsc	1,4
 14131  0B00  0008               	return
 14132                           
 14133                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 14134  0B01  0837               	movf	_Buz^(0+128),w
 14135  0B02  0086               	movwf	6
 14136  0B03  3001               	movlw	1	; select bank2/3
 14137  0B04  0087               	movwf	7
 14138  0B05  1601               	bsf	1,4
 14139                           
 14140                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 14141  0B06  0020               	movlb	0	; select bank0
 14142  0B07  0823               	movf	setBuz@count,w
 14143  0B08  00A2               	movwf	??_setBuz
 14144  0B09  0021               	movlb	1	; select bank1
 14145  0B0A  0837               	movf	_Buz^(0+128),w
 14146  0B0B  3E05               	addlw	5
 14147  0B0C  0086               	movwf	6
 14148  0B0D  3001               	movlw	1	; select bank2/3
 14149  0B0E  0087               	movwf	7
 14150  0B0F  0020               	movlb	0	; select bank0
 14151  0B10  0822               	movf	??_setBuz,w
 14152  0B11  0081               	movwf	1
 14153                           
 14154                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 14155  0B12  0021               	movlb	1	; select bank1
 14156  0B13  0837               	movf	_Buz^(0+128),w
 14157  0B14  3E0A               	addlw	10
 14158  0B15  0086               	movwf	6
 14159  0B16  3001               	movlw	1	; select bank2/3
 14160  0B17  0087               	movwf	7
 14161  0B18  0020               	movlb	0	; select bank0
 14162  0B19  0820               	movf	setBuz@time,w
 14163  0B1A  3FC0               	movwi [0]fsr1
 14164  0B1B  0821               	movf	setBuz@time+1,w
 14165  0B1C  3FC1               	movwi [1]fsr1
 14166  0B1D  0008               	return
 14167  0B1E                     __end_of_setBuz:	
 14168                           
 14169                           	psect	text89
 14170  1E65                     __ptext89:	
 14171 ;; *************** function _DelayOff_Initialization *****************
 14172 ;; Defined at:
 14173 ;;		line 26 in file "../src/DelayOff_B1.c"
 14174 ;; Parameters:    Size  Location     Type
 14175 ;;		None
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;		None
 14178 ;; Return value:  Size  Location     Type
 14179 ;;		None               void
 14180 ;; Registers used:
 14181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/0
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;Total ram usage:        0 bytes
 14192 ;; Hardware stack levels used:    1
 14193 ;; Hardware stack levels required when called:    7
 14194 ;; This function calls:
 14195 ;;		_DlyOff_Initialization
 14196 ;; This function is called by:
 14197 ;;		_main
 14198 ;; This function uses a non-reentrant model
 14199 ;;
 14200                           
 14201                           
 14202                           ;psect for function _DelayOff_Initialization
 14203  1E65                     _DelayOff_Initialization:	
 14204                           
 14205                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14206                           
 14207                           ;incstack = 0
 14208                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14209  1E65  3001               	movlw	1
 14210  1E66  319E  26A4  319E   	fcall	_DlyOff_Initialization
 14211                           
 14212                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14213  1E69  3002               	movlw	2
 14214  1E6A  319E  26A4         	fcall	_DlyOff_Initialization
 14215  1E6C  0008               	return
 14216  1E6D                     __end_of_DelayOff_Initialization:	
 14217                           
 14218                           	psect	text90
 14219  1EA4                     __ptext90:	
 14220 ;; *************** function _DlyOff_Initialization *****************
 14221 ;; Defined at:
 14222 ;;		line 56 in file "../src/DelayOff_B1.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;  sw              1    wreg     unsigned char 
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;  sw              1    2[BANK0 ] unsigned char 
 14227 ;; Return value:  Size  Location     Type
 14228 ;;		None               void
 14229 ;; Registers used:
 14230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;Total ram usage:        1 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    6
 14243 ;; This function calls:
 14244 ;;		_DelayOffPointSelect
 14245 ;; This function is called by:
 14246 ;;		_DelayOff_Initialization
 14247 ;; This function uses a non-reentrant model
 14248 ;;
 14249                           
 14250                           
 14251                           ;psect for function _DlyOff_Initialization
 14252  1EA4                     _DlyOff_Initialization:	
 14253                           
 14254                           ;incstack = 0
 14255                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14256                           ;DlyOff_Initialization@sw stored from wreg
 14257  1EA4  0020               	movlb	0	; select bank0
 14258  1EA5  00A2               	movwf	DlyOff_Initialization@sw
 14259                           
 14260                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14261  1EA6  0822               	movf	DlyOff_Initialization@sw,w
 14262  1EA7  3190  20E8         	fcall	_DelayOffPointSelect
 14263                           
 14264                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14265  1EA9  0021               	movlb	1	; select bank1
 14266  1EAA  0839               	movf	_DelayOff^(0+128),w
 14267  1EAB  0086               	movwf	6
 14268  1EAC  0187               	clrf	7
 14269  1EAD  1401               	bsf	1,0
 14270  1EAE  0008               	return
 14271  1EAF                     __end_of_DlyOff_Initialization:	
 14272                           
 14273                           	psect	text91
 14274  10E8                     __ptext91:	
 14275 ;; *************** function _DelayOffPointSelect *****************
 14276 ;; Defined at:
 14277 ;;		line 7 in file "../src/DelayOff_B1.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;  sw              1    wreg     unsigned char 
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;  sw              1    1[BANK0 ] unsigned char 
 14282 ;; Return value:  Size  Location     Type
 14283 ;;		None               void
 14284 ;; Registers used:
 14285 ;;		wreg
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;Total ram usage:        2 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    5
 14298 ;; This function calls:
 14299 ;;		Nothing
 14300 ;; This function is called by:
 14301 ;;		_DlyOff_Initialization
 14302 ;;		_DlyOff_Main
 14303 ;;		_setDelayOff_GO
 14304 ;; This function uses a non-reentrant model
 14305 ;;
 14306                           
 14307                           
 14308                           ;psect for function _DelayOffPointSelect
 14309  10E8                     _DelayOffPointSelect:	
 14310                           
 14311                           ;incstack = 0
 14312                           ; Regs used in _DelayOffPointSelect: [wreg]
 14313                           ;DelayOffPointSelect@sw stored from wreg
 14314  10E8  0020               	movlb	0	; select bank0
 14315  10E9  00A1               	movwf	DelayOffPointSelect@sw
 14316                           
 14317                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14318  10EA  0821               	movf	DelayOffPointSelect@sw,w
 14319  10EB  3A01               	xorlw	1
 14320  10EC  1D03               	skipz
 14321  10ED  28F4               	goto	l5392
 14322                           
 14323                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14324  10EE  30C7               	movlw	_DlySw1& (0+255)
 14325  10EF  00A0               	movwf	??_DelayOffPointSelect
 14326  10F0  0820               	movf	??_DelayOffPointSelect,w
 14327  10F1  0021               	movlb	1	; select bank1
 14328  10F2  00B9               	movwf	_DelayOff^(0+128)
 14329                           
 14330                           ;DelayOff_B1.c: 11: }
 14331  10F3  0008               	return
 14332  10F4                     l5392:	
 14333                           
 14334                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14335  10F4  0020               	movlb	0	; select bank0
 14336  10F5  0821               	movf	DelayOffPointSelect@sw,w
 14337  10F6  3A02               	xorlw	2
 14338  10F7  1D03               	skipz
 14339  10F8  0008               	return
 14340                           
 14341                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14342  10F9  30CC               	movlw	_DlySw2& (0+255)
 14343  10FA  00A0               	movwf	??_DelayOffPointSelect
 14344  10FB  0820               	movf	??_DelayOffPointSelect,w
 14345  10FC  0021               	movlb	1	; select bank1
 14346  10FD  00B9               	movwf	_DelayOff^(0+128)
 14347  10FE  0008               	return
 14348  10FF                     __end_of_DelayOffPointSelect:	
 14349                           
 14350                           	psect	text92
 14351  10BD                     __ptext92:	
 14352 ;; *************** function _CC2500_PowerOnInitial *****************
 14353 ;; Defined at:
 14354 ;;		line 97 in file "../src/CC2500_B1.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;		None
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;		None
 14359 ;; Return value:  Size  Location     Type
 14360 ;;		None               void
 14361 ;; Registers used:
 14362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;Total ram usage:        0 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    8
 14375 ;; This function calls:
 14376 ;;		_CC2500_ClearRXFIFO
 14377 ;;		_CC2500_ClearTXFIFO
 14378 ;;		_CC2500_FrequencyCabr
 14379 ;;		_CC2500_InitPATable
 14380 ;;		_CC2500_InitSetREG
 14381 ;;		_CC2500_PowerRST
 14382 ;;		_CC2500_SIDLEMode
 14383 ;; This function is called by:
 14384 ;;		_main
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           
 14389                           ;psect for function _CC2500_PowerOnInitial
 14390  10BD                     _CC2500_PowerOnInitial:	
 14391                           
 14392                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 14393                           
 14394                           ;incstack = 0
 14395                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14396  10BD  3193  23F1  3190   	fcall	_CC2500_PowerRST
 14397                           
 14398                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 14399  10C0  3193  2342  3190   	fcall	_CC2500_InitSetREG
 14400                           
 14401                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 14402  10C3  3192  224F  3190   	fcall	_CC2500_InitPATable
 14403                           
 14404                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 14405  10C6  319E  2625  3190   	fcall	_CC2500_ClearTXFIFO
 14406                           
 14407                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 14408  10C9  319E  2621  3190   	fcall	_CC2500_ClearRXFIFO
 14409                           
 14410                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 14411  10CC  319E  26D2  3190   	fcall	_CC2500_FrequencyCabr
 14412                           
 14413                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 14414  10CF  319E  2629         	fcall	_CC2500_SIDLEMode
 14415  10D1  0008               	return
 14416  10D2                     __end_of_CC2500_PowerOnInitial:	
 14417                           
 14418                           	psect	text93
 14419  1E29                     __ptext93:	
 14420 ;; *************** function _CC2500_SIDLEMode *****************
 14421 ;; Defined at:
 14422 ;;		line 181 in file "../src/CC2500_B1.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;		None
 14425 ;; Auto vars:     Size  Location     Type
 14426 ;;		None
 14427 ;; Return value:  Size  Location     Type
 14428 ;;		None               void
 14429 ;; Registers used:
 14430 ;;		wreg, status,2, status,0, pclath, cstack
 14431 ;; Tracked objects:
 14432 ;;		On entry : 0/0
 14433 ;;		On exit  : 0/0
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used:    1
 14442 ;; Hardware stack levels required when called:    7
 14443 ;; This function calls:
 14444 ;;		_CC2500_WriteCommand
 14445 ;; This function is called by:
 14446 ;;		_CC2500_PowerOnInitial
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           
 14451                           ;psect for function _CC2500_SIDLEMode
 14452  1E29                     _CC2500_SIDLEMode:	
 14453                           
 14454                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 14455                           
 14456                           ;incstack = 0
 14457                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14458  1E29  3036               	movlw	54
 14459  1E2A  319F  277D         	fcall	_CC2500_WriteCommand
 14460  1E2C  0008               	return
 14461  1E2D                     __end_of_CC2500_SIDLEMode:	
 14462                           
 14463                           	psect	text94
 14464  13F1                     __ptext94:	
 14465 ;; *************** function _CC2500_PowerRST *****************
 14466 ;; Defined at:
 14467 ;;		line 110 in file "../src/CC2500_B1.c"
 14468 ;; Parameters:    Size  Location     Type
 14469 ;;		None
 14470 ;; Auto vars:     Size  Location     Type
 14471 ;;		None
 14472 ;; Return value:  Size  Location     Type
 14473 ;;		None               void
 14474 ;; Registers used:
 14475 ;;		wreg, status,2, status,0, pclath, cstack
 14476 ;; Tracked objects:
 14477 ;;		On entry : 0/0
 14478 ;;		On exit  : 0/0
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;Total ram usage:        1 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; Hardware stack levels required when called:    6
 14488 ;; This function calls:
 14489 ;;		_CC2500_WriteByte
 14490 ;;		_DelayTime_1us
 14491 ;; This function is called by:
 14492 ;;		_CC2500_PowerOnInitial
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function _CC2500_PowerRST
 14498  13F1                     _CC2500_PowerRST:	
 14499                           
 14500                           ;CC2500_B1.c: 111: RC1 = 0;
 14501                           
 14502                           ;incstack = 0
 14503                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14504  13F1  0020               	movlb	0	; select bank0
 14505  13F2  108E               	bcf	14,1	;volatile
 14506                           
 14507                           ;CC2500_B1.c: 112: RC0 = 0;
 14508  13F3  100E               	bcf	14,0	;volatile
 14509                           
 14510                           ;CC2500_B1.c: 113: RC4 = 1;
 14511  13F4  160E               	bsf	14,4	;volatile
 14512                           
 14513                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 14514  13F5  300A               	movlw	10
 14515  13F6  00A0               	movwf	DelayTime_1us@count
 14516  13F7  3000               	movlw	0
 14517  13F8  00A1               	movwf	DelayTime_1us@count+1
 14518  13F9  3192  22F4  3193   	fcall	_DelayTime_1us
 14519                           
 14520                           ;CC2500_B1.c: 115: RC4 = 0;
 14521  13FC  0020               	movlb	0	; select bank0
 14522  13FD  120E               	bcf	14,4	;volatile
 14523                           
 14524                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 14525  13FE  300A               	movlw	10
 14526  13FF  00A0               	movwf	DelayTime_1us@count
 14527  1400  3000               	movlw	0
 14528  1401  00A1               	movwf	DelayTime_1us@count+1
 14529  1402  3192  22F4  3193   	fcall	_DelayTime_1us
 14530                           
 14531                           ;CC2500_B1.c: 117: RC4 = 1;
 14532  1405  0020               	movlb	0	; select bank0
 14533  1406  160E               	bsf	14,4	;volatile
 14534                           
 14535                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 14536  1407  3028               	movlw	40
 14537  1408  00A0               	movwf	DelayTime_1us@count
 14538  1409  3000               	movlw	0
 14539  140A  00A1               	movwf	DelayTime_1us@count+1
 14540  140B  3192  22F4  3193   	fcall	_DelayTime_1us
 14541                           
 14542                           ;CC2500_B1.c: 119: RC4 = 0;
 14543  140E  0020               	movlb	0	; select bank0
 14544  140F  120E               	bcf	14,4	;volatile
 14545                           
 14546                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 14547  1410  3030               	movlw	48
 14548  1411  00A6               	movwf	??_CC2500_PowerRST
 14549  1412  0826               	movf	??_CC2500_PowerRST,w
 14550  1413  0021               	movlb	1	; select bank1
 14551  1414  00C2               	movwf	_SPI0Buffer^(0+128)
 14552  1415                     l303:	
 14553                           ;CC2500_B1.c: 121: while (RC2 == 1);
 14554                           
 14555  1415  0020               	movlb	0	; select bank0
 14556  1416  190E               	btfsc	14,2	;volatile
 14557  1417  2C15               	goto	l303
 14558                           
 14559                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 14560  1418  3191  2146  3193   	fcall	_CC2500_WriteByte
 14561  141B                     l306:	
 14562                           ;CC2500_B1.c: 123: while (RC2 == 1);
 14563                           
 14564  141B  0020               	movlb	0	; select bank0
 14565  141C  190E               	btfsc	14,2	;volatile
 14566  141D  2C1B               	goto	l306
 14567                           
 14568                           ;CC2500_B1.c: 124: RC0 = 0;
 14569  141E  100E               	bcf	14,0	;volatile
 14570                           
 14571                           ;CC2500_B1.c: 125: RC4 = 1;
 14572  141F  160E               	bsf	14,4	;volatile
 14573  1420  0008               	return
 14574  1421                     __end_of_CC2500_PowerRST:	
 14575                           
 14576                           	psect	text95
 14577  1342                     __ptext95:	
 14578 ;; *************** function _CC2500_InitSetREG *****************
 14579 ;; Defined at:
 14580 ;;		line 131 in file "../src/CC2500_B1.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;		None
 14583 ;; Auto vars:     Size  Location     Type
 14584 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14585 ;;  temp2           1    7[BANK0 ] unsigned char 
 14586 ;;  temp1           1    6[BANK0 ] unsigned char 
 14587 ;; Return value:  Size  Location     Type
 14588 ;;		None               void
 14589 ;; Registers used:
 14590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14591 ;; Tracked objects:
 14592 ;;		On entry : 0/0
 14593 ;;		On exit  : 0/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;Total ram usage:        4 bytes
 14601 ;; Hardware stack levels used:    1
 14602 ;; Hardware stack levels required when called:    7
 14603 ;; This function calls:
 14604 ;;		_CC2500_WriteREG
 14605 ;; This function is called by:
 14606 ;;		_CC2500_PowerOnInitial
 14607 ;; This function uses a non-reentrant model
 14608 ;;
 14609                           
 14610                           
 14611                           ;psect for function _CC2500_InitSetREG
 14612  1342                     _CC2500_InitSetREG:	
 14613                           
 14614                           ;CC2500_B1.c: 132: unsigned char loop_c;
 14615                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 14616                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 14617                           
 14618                           ;incstack = 0
 14619                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14620  1342  0020               	movlb	0	; select bank0
 14621  1343  01A8               	clrf	CC2500_InitSetREG@loop_c
 14622  1344                     L13:	
 14623  1344  302F               	movlw	47
 14624  1345  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14625  1346  1803               	btfsc	3,0
 14626  1347  0008               	return
 14627                           
 14628                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 14629  1348  0828               	movf	CC2500_InitSetREG@loop_c,w
 14630  1349  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14631  134A  0084               	movwf	4
 14632  134B  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14633  134C  1803               	skipnc
 14634  134D  3E01               	addlw	1
 14635  134E  0085               	movwf	5
 14636  134F  0800               	movf	0,w	;code access
 14637  1350  00A5               	movwf	??_CC2500_InitSetREG
 14638  1351  0825               	movf	??_CC2500_InitSetREG,w
 14639  1352  00A6               	movwf	CC2500_InitSetREG@temp1
 14640                           
 14641                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 14642  1353  0828               	movf	CC2500_InitSetREG@loop_c,w
 14643  1354  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14644  1355  0084               	movwf	4
 14645  1356  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14646  1357  1803               	skipnc
 14647  1358  3E01               	addlw	1
 14648  1359  0085               	movwf	5
 14649  135A  0800               	movf	0,w	;code access
 14650  135B  00A5               	movwf	??_CC2500_InitSetREG
 14651  135C  0825               	movf	??_CC2500_InitSetREG,w
 14652  135D  00A7               	movwf	CC2500_InitSetREG@temp2
 14653                           
 14654                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 14655  135E  0827               	movf	CC2500_InitSetREG@temp2,w
 14656  135F  00A5               	movwf	??_CC2500_InitSetREG
 14657  1360  0825               	movf	??_CC2500_InitSetREG,w
 14658  1361  00A2               	movwf	CC2500_WriteREG@value
 14659  1362  0826               	movf	CC2500_InitSetREG@temp1,w
 14660  1363  3191  215F  3193   	fcall	_CC2500_WriteREG
 14661  1366  3001               	movlw	1
 14662  1367  0020               	movlb	0	; select bank0
 14663  1368  00A5               	movwf	??_CC2500_InitSetREG
 14664  1369  0825               	movf	??_CC2500_InitSetREG,w
 14665  136A  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14666  136B  2B44               	goto	L13
 14667  136C                     __end_of_CC2500_InitSetREG:	
 14668                           
 14669                           	psect	text96
 14670  124F                     __ptext96:	
 14671 ;; *************** function _CC2500_InitPATable *****************
 14672 ;; Defined at:
 14673 ;;		line 146 in file "../src/CC2500_B1.c"
 14674 ;; Parameters:    Size  Location     Type
 14675 ;;		None
 14676 ;; Auto vars:     Size  Location     Type
 14677 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14678 ;;  temp            1    6[BANK0 ] unsigned char 
 14679 ;; Return value:  Size  Location     Type
 14680 ;;		None               void
 14681 ;; Registers used:
 14682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;Total ram usage:        3 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:    7
 14695 ;; This function calls:
 14696 ;;		_CC2500_WriteREG
 14697 ;; This function is called by:
 14698 ;;		_CC2500_PowerOnInitial
 14699 ;; This function uses a non-reentrant model
 14700 ;;
 14701                           
 14702                           
 14703                           ;psect for function _CC2500_InitPATable
 14704  124F                     _CC2500_InitPATable:	
 14705                           
 14706                           ;CC2500_B1.c: 147: unsigned char loop_d;
 14707                           ;CC2500_B1.c: 148: unsigned char temp;
 14708                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 14709                           
 14710                           ;incstack = 0
 14711                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14712  124F  0020               	movlb	0	; select bank0
 14713  1250  01A7               	clrf	CC2500_InitPATable@loop_d
 14714  1251                     L14:	
 14715  1251  3008               	movlw	8
 14716  1252  0227               	subwf	CC2500_InitPATable@loop_d,w
 14717  1253  1803               	btfsc	3,0
 14718  1254  0008               	return
 14719                           
 14720                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 14721  1255  0827               	movf	CC2500_InitPATable@loop_d,w
 14722  1256  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14723  1257  0084               	movwf	4
 14724  1258  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14725  1259  1803               	skipnc
 14726  125A  3E01               	addlw	1
 14727  125B  0085               	movwf	5
 14728  125C  0800               	movf	0,w	;code access
 14729  125D  00A5               	movwf	??_CC2500_InitPATable
 14730  125E  0825               	movf	??_CC2500_InitPATable,w
 14731  125F  00A6               	movwf	CC2500_InitPATable@temp
 14732                           
 14733                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 14734  1260  0826               	movf	CC2500_InitPATable@temp,w
 14735  1261  00A5               	movwf	??_CC2500_InitPATable
 14736  1262  0825               	movf	??_CC2500_InitPATable,w
 14737  1263  00A2               	movwf	CC2500_WriteREG@value
 14738  1264  303E               	movlw	62
 14739  1265  3191  215F  3192   	fcall	_CC2500_WriteREG
 14740  1268  3001               	movlw	1
 14741  1269  0020               	movlb	0	; select bank0
 14742  126A  00A5               	movwf	??_CC2500_InitPATable
 14743  126B  0825               	movf	??_CC2500_InitPATable,w
 14744  126C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14745  126D  2A51               	goto	L14
 14746  126E                     __end_of_CC2500_InitPATable:	
 14747                           
 14748                           	psect	text97
 14749  115F                     __ptext97:	
 14750 ;; *************** function _CC2500_WriteREG *****************
 14751 ;; Defined at:
 14752 ;;		line 223 in file "../src/CC2500_B1.c"
 14753 ;; Parameters:    Size  Location     Type
 14754 ;;  w_addr          1    wreg     unsigned char 
 14755 ;;  value           1    2[BANK0 ] unsigned char 
 14756 ;; Auto vars:     Size  Location     Type
 14757 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14758 ;; Return value:  Size  Location     Type
 14759 ;;		None               void
 14760 ;; Registers used:
 14761 ;;		wreg, status,2, status,0, pclath, cstack
 14762 ;; Tracked objects:
 14763 ;;		On entry : 0/0
 14764 ;;		On exit  : 0/0
 14765 ;;		Unchanged: 0/0
 14766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14767 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;Total ram usage:        3 bytes
 14772 ;; Hardware stack levels used:    1
 14773 ;; Hardware stack levels required when called:    6
 14774 ;; This function calls:
 14775 ;;		_CC2500_WriteByte
 14776 ;; This function is called by:
 14777 ;;		_CC2500_InitSetREG
 14778 ;;		_CC2500_InitPATable
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           
 14783                           ;psect for function _CC2500_WriteREG
 14784  115F                     _CC2500_WriteREG:	
 14785                           
 14786                           ;incstack = 0
 14787                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14788                           ;CC2500_WriteREG@w_addr stored from wreg
 14789  115F  0020               	movlb	0	; select bank0
 14790  1160  00A4               	movwf	CC2500_WriteREG@w_addr
 14791                           
 14792                           ;CC2500_B1.c: 224: RC4 = 0;
 14793  1161  120E               	bcf	14,4	;volatile
 14794                           
 14795                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 14796  1162  0824               	movf	CC2500_WriteREG@w_addr,w
 14797  1163  00A3               	movwf	??_CC2500_WriteREG
 14798  1164  0823               	movf	??_CC2500_WriteREG,w
 14799  1165  0021               	movlb	1	; select bank1
 14800  1166  00C2               	movwf	_SPI0Buffer^(0+128)
 14801  1167                     l348:	
 14802                           ;CC2500_B1.c: 226: while (RC2 == 1);
 14803                           
 14804  1167  0020               	movlb	0	; select bank0
 14805  1168  190E               	btfsc	14,2	;volatile
 14806  1169  2967               	goto	l348
 14807                           
 14808                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 14809  116A  3191  2146  3191   	fcall	_CC2500_WriteByte
 14810                           
 14811                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 14812  116D  0020               	movlb	0	; select bank0
 14813  116E  0822               	movf	CC2500_WriteREG@value,w
 14814  116F  00A3               	movwf	??_CC2500_WriteREG
 14815  1170  0823               	movf	??_CC2500_WriteREG,w
 14816  1171  0021               	movlb	1	; select bank1
 14817  1172  00C2               	movwf	_SPI0Buffer^(0+128)
 14818                           
 14819                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 14820  1173  3191  2146         	fcall	_CC2500_WriteByte
 14821                           
 14822                           ;CC2500_B1.c: 230: RC4 = 1;
 14823  1175  0020               	movlb	0	; select bank0
 14824  1176  160E               	bsf	14,4	;volatile
 14825  1177  0008               	return
 14826  1178                     __end_of_CC2500_WriteREG:	
 14827                           
 14828                           	psect	text98
 14829  1ED2                     __ptext98:	
 14830 ;; *************** function _CC2500_FrequencyCabr *****************
 14831 ;; Defined at:
 14832 ;;		line 173 in file "../src/CC2500_B1.c"
 14833 ;; Parameters:    Size  Location     Type
 14834 ;;		None
 14835 ;; Auto vars:     Size  Location     Type
 14836 ;;		None
 14837 ;; Return value:  Size  Location     Type
 14838 ;;		None               void
 14839 ;; Registers used:
 14840 ;;		wreg, status,2, status,0, pclath, cstack
 14841 ;; Tracked objects:
 14842 ;;		On entry : 0/0
 14843 ;;		On exit  : 0/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14850 ;;Total ram usage:        0 bytes
 14851 ;; Hardware stack levels used:    1
 14852 ;; Hardware stack levels required when called:    7
 14853 ;; This function calls:
 14854 ;;		_CC2500_WriteCommand
 14855 ;;		_DelayTime_1us
 14856 ;; This function is called by:
 14857 ;;		_CC2500_PowerOnInitial
 14858 ;; This function uses a non-reentrant model
 14859 ;;
 14860                           
 14861                           
 14862                           ;psect for function _CC2500_FrequencyCabr
 14863  1ED2                     _CC2500_FrequencyCabr:	
 14864                           
 14865                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 14866                           
 14867                           ;incstack = 0
 14868                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 14869  1ED2  3033               	movlw	51
 14870  1ED3  319F  277D  319E   	fcall	_CC2500_WriteCommand
 14871                           
 14872                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 14873  1ED6  30E8               	movlw	232
 14874  1ED7  0020               	movlb	0	; select bank0
 14875  1ED8  00A0               	movwf	DelayTime_1us@count
 14876  1ED9  3003               	movlw	3
 14877  1EDA  00A1               	movwf	DelayTime_1us@count+1
 14878  1EDB  3192  22F4         	fcall	_DelayTime_1us
 14879  1EDD  0008               	return
 14880  1EDE                     __end_of_CC2500_FrequencyCabr:	
 14881                           
 14882                           	psect	text99
 14883  12F4                     __ptext99:	
 14884 ;; *************** function _DelayTime_1us *****************
 14885 ;; Defined at:
 14886 ;;		line 279 in file "../src/CC2500_B1.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;  count           2    0[BANK0 ] int 
 14889 ;; Auto vars:     Size  Location     Type
 14890 ;;  j               2    4[BANK0 ] unsigned int 
 14891 ;;  i               2    2[BANK0 ] unsigned int 
 14892 ;; Return value:  Size  Location     Type
 14893 ;;		None               void
 14894 ;; Registers used:
 14895 ;;		wreg, status,2
 14896 ;; Tracked objects:
 14897 ;;		On entry : 0/0
 14898 ;;		On exit  : 0/0
 14899 ;;		Unchanged: 0/0
 14900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14905 ;;Total ram usage:        6 bytes
 14906 ;; Hardware stack levels used:    1
 14907 ;; Hardware stack levels required when called:    5
 14908 ;; This function calls:
 14909 ;;		Nothing
 14910 ;; This function is called by:
 14911 ;;		_CC2500_PowerRST
 14912 ;;		_CC2500_FrequencyCabr
 14913 ;; This function uses a non-reentrant model
 14914 ;;
 14915                           
 14916                           
 14917                           ;psect for function _DelayTime_1us
 14918  12F4                     _DelayTime_1us:	
 14919                           
 14920                           ;CC2500_B1.c: 280: unsigned int i, j;
 14921                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 14922                           
 14923                           ;incstack = 0
 14924                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14925  12F4  3001               	movlw	1
 14926  12F5  0020               	movlb	0	; select bank0
 14927  12F6  00A2               	movwf	DelayTime_1us@i
 14928  12F7  3000               	movlw	0
 14929  12F8  00A3               	movwf	DelayTime_1us@i+1
 14930  12F9                     l372:	
 14931  12F9  0821               	movf	DelayTime_1us@count+1,w
 14932  12FA  0223               	subwf	DelayTime_1us@i+1,w
 14933  12FB  1D03               	skipz
 14934  12FC  2AFF               	goto	u4545
 14935  12FD  0820               	movf	DelayTime_1us@count,w
 14936  12FE  0222               	subwf	DelayTime_1us@i,w
 14937  12FF                     u4545:	
 14938  12FF  1803               	btfsc	3,0
 14939  1300  0008               	return
 14940                           
 14941                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 14942  1301  01A4               	clrf	DelayTime_1us@j
 14943  1302  01A5               	clrf	DelayTime_1us@j+1
 14944  1303  3000               	movlw	0
 14945  1304  0225               	subwf	DelayTime_1us@j+1,w
 14946  1305  3002               	movlw	2
 14947  1306  1903               	skipnz
 14948  1307  0224               	subwf	DelayTime_1us@j,w
 14949  1308  1803               	btfsc	3,0
 14950  1309  2B15               	goto	l5902
 14951  130A                     l5900:	
 14952  130A  3001               	movlw	1
 14953  130B  07A4               	addwf	DelayTime_1us@j,f
 14954  130C  3000               	movlw	0
 14955  130D  3DA5               	addwfc	DelayTime_1us@j+1,f
 14956  130E  3000               	movlw	0
 14957  130F  0225               	subwf	DelayTime_1us@j+1,w
 14958  1310  3002               	movlw	2
 14959  1311  1903               	skipnz
 14960  1312  0224               	subwf	DelayTime_1us@j,w
 14961  1313  1C03               	skipc
 14962  1314  2B0A               	goto	l5900
 14963  1315                     l5902:	
 14964  1315  3001               	movlw	1
 14965  1316  07A2               	addwf	DelayTime_1us@i,f
 14966  1317  3000               	movlw	0
 14967  1318  3DA3               	addwfc	DelayTime_1us@i+1,f
 14968  1319  2AF9               	goto	l372
 14969  131A                     __end_of_DelayTime_1us:	
 14970                           
 14971                           	psect	text100
 14972  1E25                     __ptext100:	
 14973 ;; *************** function _CC2500_ClearTXFIFO *****************
 14974 ;; Defined at:
 14975 ;;		line 159 in file "../src/CC2500_B1.c"
 14976 ;; Parameters:    Size  Location     Type
 14977 ;;		None
 14978 ;; Auto vars:     Size  Location     Type
 14979 ;;		None
 14980 ;; Return value:  Size  Location     Type
 14981 ;;		None               void
 14982 ;; Registers used:
 14983 ;;		wreg, status,2, status,0, pclath, cstack
 14984 ;; Tracked objects:
 14985 ;;		On entry : 0/0
 14986 ;;		On exit  : 0/0
 14987 ;;		Unchanged: 0/0
 14988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;Total ram usage:        0 bytes
 14994 ;; Hardware stack levels used:    1
 14995 ;; Hardware stack levels required when called:    7
 14996 ;; This function calls:
 14997 ;;		_CC2500_WriteCommand
 14998 ;; This function is called by:
 14999 ;;		_CC2500_PowerOnInitial
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           
 15004                           ;psect for function _CC2500_ClearTXFIFO
 15005  1E25                     _CC2500_ClearTXFIFO:	
 15006                           
 15007                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 15008                           
 15009                           ;incstack = 0
 15010                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15011  1E25  303B               	movlw	59
 15012  1E26  319F  277D         	fcall	_CC2500_WriteCommand
 15013  1E28  0008               	return
 15014  1E29                     __end_of_CC2500_ClearTXFIFO:	
 15015                           
 15016                           	psect	text101
 15017  1E21                     __ptext101:	
 15018 ;; *************** function _CC2500_ClearRXFIFO *****************
 15019 ;; Defined at:
 15020 ;;		line 166 in file "../src/CC2500_B1.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;		None
 15023 ;; Auto vars:     Size  Location     Type
 15024 ;;		None
 15025 ;; Return value:  Size  Location     Type
 15026 ;;		None               void
 15027 ;; Registers used:
 15028 ;;		wreg, status,2, status,0, pclath, cstack
 15029 ;; Tracked objects:
 15030 ;;		On entry : 0/0
 15031 ;;		On exit  : 0/0
 15032 ;;		Unchanged: 0/0
 15033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;Total ram usage:        0 bytes
 15039 ;; Hardware stack levels used:    1
 15040 ;; Hardware stack levels required when called:    7
 15041 ;; This function calls:
 15042 ;;		_CC2500_WriteCommand
 15043 ;; This function is called by:
 15044 ;;		_CC2500_PowerOnInitial
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           
 15049                           ;psect for function _CC2500_ClearRXFIFO
 15050  1E21                     _CC2500_ClearRXFIFO:	
 15051                           
 15052                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 15053                           
 15054                           ;incstack = 0
 15055                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15056  1E21  303A               	movlw	58
 15057  1E22  319F  277D         	fcall	_CC2500_WriteCommand
 15058  1E24  0008               	return
 15059  1E25                     __end_of_CC2500_ClearRXFIFO:	
 15060                           
 15061                           	psect	text102
 15062  1F7D                     __ptext102:	
 15063 ;; *************** function _CC2500_WriteCommand *****************
 15064 ;; Defined at:
 15065 ;;		line 249 in file "../src/CC2500_B1.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  command         1    wreg     unsigned char 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;  command         1    3[BANK0 ] unsigned char 
 15070 ;; Return value:  Size  Location     Type
 15071 ;;		None               void
 15072 ;; Registers used:
 15073 ;;		wreg, status,2, status,0, pclath, cstack
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;Total ram usage:        2 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    6
 15086 ;; This function calls:
 15087 ;;		_CC2500_WriteByte
 15088 ;; This function is called by:
 15089 ;;		_CC2500_TxData
 15090 ;;		_CC2500_RxData
 15091 ;;		_CC2500_ClearTXFIFO
 15092 ;;		_CC2500_ClearRXFIFO
 15093 ;;		_CC2500_FrequencyCabr
 15094 ;;		_CC2500_SIDLEMode
 15095 ;;		_setRF_Main
 15096 ;;		_RF_RxDisable
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function _CC2500_WriteCommand
 15102  1F7D                     _CC2500_WriteCommand:	
 15103                           
 15104                           ;incstack = 0
 15105                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 15106                           ;CC2500_WriteCommand@command stored from wreg
 15107  1F7D  0020               	movlb	0	; select bank0
 15108  1F7E  00A3               	movwf	CC2500_WriteCommand@command
 15109                           
 15110                           ;CC2500_B1.c: 250: RC4 = 0;
 15111  1F7F  120E               	bcf	14,4	;volatile
 15112                           
 15113                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 15114  1F80  0823               	movf	CC2500_WriteCommand@command,w
 15115  1F81  00A2               	movwf	??_CC2500_WriteCommand
 15116  1F82  0822               	movf	??_CC2500_WriteCommand,w
 15117  1F83  0021               	movlb	1	; select bank1
 15118  1F84  00C2               	movwf	_SPI0Buffer^(0+128)
 15119  1F85                     l360:	
 15120                           ;CC2500_B1.c: 253: while (RC2 == 1);
 15121                           
 15122  1F85  0020               	movlb	0	; select bank0
 15123  1F86  190E               	btfsc	14,2	;volatile
 15124  1F87  2F85               	goto	l360
 15125                           
 15126                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 15127  1F88  3191  2146         	fcall	_CC2500_WriteByte
 15128                           
 15129                           ;CC2500_B1.c: 256: RC4 = 1;
 15130  1F8A  0020               	movlb	0	; select bank0
 15131  1F8B  160E               	bsf	14,4	;volatile
 15132  1F8C  0008               	return
 15133  1F8D                     __end_of_CC2500_WriteCommand:	
 15134                           
 15135                           	psect	text103
 15136  1146                     __ptext103:	
 15137 ;; *************** function _CC2500_WriteByte *****************
 15138 ;; Defined at:
 15139 ;;		line 191 in file "../src/CC2500_B1.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;		None
 15142 ;; Auto vars:     Size  Location     Type
 15143 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15144 ;; Return value:  Size  Location     Type
 15145 ;;		None               void
 15146 ;; Registers used:
 15147 ;;		wreg, status,2, status,0
 15148 ;; Tracked objects:
 15149 ;;		On entry : 0/0
 15150 ;;		On exit  : 0/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;Total ram usage:        2 bytes
 15158 ;; Hardware stack levels used:    1
 15159 ;; Hardware stack levels required when called:    5
 15160 ;; This function calls:
 15161 ;;		Nothing
 15162 ;; This function is called by:
 15163 ;;		_CC2500_TxData
 15164 ;;		_CC2500_RxData
 15165 ;;		_CC2500_PowerRST
 15166 ;;		_CC2500_WriteREG
 15167 ;;		_CC2500_WriteCommand
 15168 ;;		_CC2500_ReadStatus
 15169 ;;		_CC2500_ReadREG
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           
 15174                           ;psect for function _CC2500_WriteByte
 15175  1146                     _CC2500_WriteByte:	
 15176                           
 15177                           ;CC2500_B1.c: 192: unsigned char loop_a;
 15178                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 15179                           
 15180                           ;incstack = 0
 15181                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15182  1146  0020               	movlb	0	; select bank0
 15183  1147  01A1               	clrf	CC2500_WriteByte@loop_a
 15184  1148                     L15:	
 15185  1148  3008               	movlw	8
 15186  1149  0221               	subwf	CC2500_WriteByte@loop_a,w
 15187  114A  1803               	btfsc	3,0
 15188  114B  0008               	return
 15189                           
 15190                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 15191  114C  0021               	movlb	1	; select bank1
 15192  114D  1FC2               	btfss	_SPI0Buffer^(0+128),7
 15193  114E  2952               	goto	l336
 15194                           
 15195                           ;CC2500_B1.c: 195: RC0 = 1;
 15196  114F  0020               	movlb	0	; select bank0
 15197  1150  140E               	bsf	14,0	;volatile
 15198  1151  2954               	goto	l337
 15199  1152                     l336:	
 15200                           
 15201                           ;CC2500_B1.c: 196: else
 15202                           ;CC2500_B1.c: 197: RC0 = 0;
 15203  1152  0020               	movlb	0	; select bank0
 15204  1153  100E               	bcf	14,0	;volatile
 15205  1154                     l337:	
 15206                           
 15207                           ;CC2500_B1.c: 198: RC1 = 1;
 15208  1154  148E               	bsf	14,1	;volatile
 15209                           
 15210                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 15211  1155  1003               	clrc
 15212  1156  0021               	movlb	1	; select bank1
 15213  1157  0DC2               	rlf	_SPI0Buffer^(0+128),f
 15214                           
 15215                           ;CC2500_B1.c: 200: RC1 = 0;
 15216  1158  0020               	movlb	0	; select bank0
 15217  1159  108E               	bcf	14,1	;volatile
 15218  115A  3001               	movlw	1
 15219  115B  00A0               	movwf	??_CC2500_WriteByte
 15220  115C  0820               	movf	??_CC2500_WriteByte,w
 15221  115D  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15222  115E  2948               	goto	L15
 15223  115F                     __end_of_CC2500_WriteByte:	
 15224                           
 15225                           	psect	text104
 15226  058B                     __ptext104:	
 15227 ;; *************** function _Buzzer_Main *****************
 15228 ;; Defined at:
 15229 ;;		line 53 in file "../src/Buzzer_B1.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;		None
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;		None
 15234 ;; Return value:  Size  Location     Type
 15235 ;;		None               void
 15236 ;; Registers used:
 15237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15238 ;; Tracked objects:
 15239 ;;		On entry : 0/0
 15240 ;;		On exit  : 0/0
 15241 ;;		Unchanged: 0/0
 15242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;Total ram usage:        4 bytes
 15248 ;; Hardware stack levels used:    1
 15249 ;; Hardware stack levels required when called:    5
 15250 ;; This function calls:
 15251 ;;		Nothing
 15252 ;; This function is called by:
 15253 ;;		_main
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           
 15258                           ;psect for function _Buzzer_Main
 15259  058B                     _Buzzer_Main:	
 15260                           
 15261                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 15262                           
 15263                           ;incstack = 0
 15264                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15265  058B  0021               	movlb	1	; select bank1
 15266  058C  0837               	movf	_Buz^(0+128),w
 15267  058D  0086               	movwf	6
 15268  058E  3001               	movlw	1	; select bank2/3
 15269  058F  0087               	movwf	7
 15270  0590  1281               	bcf	1,5
 15271  0591  0020               	movlb	0	; select bank0
 15272  0592  198D               	btfsc	13,3	;volatile
 15273  0593  1681               	bsf	1,5
 15274                           
 15275                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 15276  0594  0021               	movlb	1	; select bank1
 15277  0595  0837               	movf	_Buz^(0+128),w
 15278  0596  3E06               	addlw	6
 15279  0597  0086               	movwf	6
 15280  0598  3001               	movlw	1	; select bank2/3
 15281  0599  0087               	movwf	7
 15282  059A  3F40               	moviw [0]fsr1
 15283  059B  0020               	movlb	0	; select bank0
 15284  059C  00A0               	movwf	??_Buzzer_Main
 15285  059D  3F41               	moviw [1]fsr1
 15286  059E  00A1               	movwf	??_Buzzer_Main+1
 15287  059F  0021               	movlb	1	; select bank1
 15288  05A0  0A37               	incf	_Buz^(0+128),w
 15289  05A1  0086               	movwf	6
 15290  05A2  3001               	movlw	1	; select bank2/3
 15291  05A3  0087               	movwf	7
 15292  05A4  3F40               	moviw [0]fsr1
 15293  05A5  0020               	movlb	0	; select bank0
 15294  05A6  00A2               	movwf	??_Buzzer_Main+2
 15295  05A7  3F41               	moviw [1]fsr1
 15296  05A8  00A3               	movwf	??_Buzzer_Main+3
 15297  05A9  0821               	movf	??_Buzzer_Main+1,w
 15298  05AA  0223               	subwf	??_Buzzer_Main+3,w
 15299  05AB  1D03               	skipz
 15300  05AC  2DAF               	goto	u5735
 15301  05AD  0820               	movf	??_Buzzer_Main,w
 15302  05AE  0222               	subwf	??_Buzzer_Main+2,w
 15303  05AF                     u5735:	
 15304  05AF  1C03               	skipc
 15305  05B0  0008               	return
 15306                           
 15307                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 15308  05B1  0021               	movlb	1	; select bank1
 15309  05B2  0A37               	incf	_Buz^(0+128),w
 15310  05B3  0086               	movwf	6
 15311  05B4  3001               	movlw	1	; select bank2/3
 15312  05B5  0087               	movwf	7
 15313  05B6  3000               	movlw	0
 15314  05B7  3FC0               	movwi [0]fsr1
 15315  05B8  3FC1               	movwi [1]fsr1
 15316                           
 15317                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 15318  05B9  0837               	movf	_Buz^(0+128),w
 15319  05BA  0086               	movwf	6
 15320  05BB  3001               	movlw	1	; select bank2/3
 15321  05BC  0087               	movwf	7
 15322  05BD  1A81               	btfsc	1,5
 15323  05BE  2E2D               	goto	l6740
 15324                           
 15325                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 15326  05BF  0837               	movf	_Buz^(0+128),w
 15327  05C0  3E03               	addlw	3
 15328  05C1  0086               	movwf	6
 15329  05C2  3001               	movlw	1	; select bank2/3
 15330  05C3  0087               	movwf	7
 15331  05C4  0881               	movf	1,f
 15332  05C5  1D03               	skipz
 15333  05C6  2E25               	goto	l6736
 15334                           
 15335                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 15336  05C7  0837               	movf	_Buz^(0+128),w
 15337  05C8  0086               	movwf	6
 15338  05C9  3001               	movlw	1	; select bank2/3
 15339  05CA  0087               	movwf	7
 15340  05CB  1D81               	btfss	1,3
 15341  05CC  2DF3               	goto	l6728
 15342                           
 15343                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 15344  05CD  0837               	movf	_Buz^(0+128),w
 15345  05CE  0086               	movwf	6
 15346  05CF  3001               	movlw	1	; select bank2/3
 15347  05D0  0087               	movwf	7
 15348  05D1  1181               	bcf	1,3
 15349                           
 15350                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 15351  05D2  0837               	movf	_Buz^(0+128),w
 15352  05D3  3E04               	addlw	4
 15353  05D4  0086               	movwf	6
 15354  05D5  3001               	movlw	1	; select bank2/3
 15355  05D6  0087               	movwf	7
 15356  05D7  0801               	movf	1,w
 15357  05D8  0020               	movlb	0	; select bank0
 15358  05D9  00A0               	movwf	??_Buzzer_Main
 15359  05DA  0021               	movlb	1	; select bank1
 15360  05DB  0837               	movf	_Buz^(0+128),w
 15361  05DC  3E03               	addlw	3
 15362  05DD  0086               	movwf	6
 15363  05DE  3001               	movlw	1	; select bank2/3
 15364  05DF  0087               	movwf	7
 15365  05E0  0020               	movlb	0	; select bank0
 15366  05E1  0820               	movf	??_Buzzer_Main,w
 15367  05E2  0081               	movwf	1
 15368                           
 15369                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 15370  05E3  0021               	movlb	1	; select bank1
 15371  05E4  0837               	movf	_Buz^(0+128),w
 15372  05E5  3E08               	addlw	8
 15373  05E6  0086               	movwf	6
 15374  05E7  3001               	movlw	1	; select bank2/3
 15375  05E8  0087               	movwf	7
 15376  05E9  0837               	movf	_Buz^(0+128),w
 15377  05EA  3E06               	addlw	6
 15378  05EB  0084               	movwf	4
 15379  05EC  3001               	movlw	1	; select bank2/3
 15380  05ED  0085               	movwf	5
 15381  05EE  3F40               	moviw [0]fsr1
 15382  05EF  3F80               	movwi [0]fsr0
 15383  05F0  3F41               	moviw [1]fsr1
 15384  05F1  3F81               	movwi [1]fsr0
 15385                           
 15386                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15387  05F2  0008               	return
 15388  05F3                     l6728:	
 15389  05F3  0837               	movf	_Buz^(0+128),w
 15390  05F4  0086               	movwf	6
 15391  05F5  3001               	movlw	1	; select bank2/3
 15392  05F6  0087               	movwf	7
 15393  05F7  1E01               	btfss	1,4
 15394  05F8  2E1F               	goto	l6734
 15395                           
 15396                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15397  05F9  0837               	movf	_Buz^(0+128),w
 15398  05FA  0086               	movwf	6
 15399  05FB  3001               	movlw	1	; select bank2/3
 15400  05FC  0087               	movwf	7
 15401  05FD  1201               	bcf	1,4
 15402                           
 15403                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15404  05FE  0837               	movf	_Buz^(0+128),w
 15405  05FF  3E05               	addlw	5
 15406  0600  0086               	movwf	6
 15407  0601  3001               	movlw	1	; select bank2/3
 15408  0602  0087               	movwf	7
 15409  0603  0801               	movf	1,w
 15410  0604  0020               	movlb	0	; select bank0
 15411  0605  00A0               	movwf	??_Buzzer_Main
 15412  0606  0021               	movlb	1	; select bank1
 15413  0607  0837               	movf	_Buz^(0+128),w
 15414  0608  3E03               	addlw	3
 15415  0609  0086               	movwf	6
 15416  060A  3001               	movlw	1	; select bank2/3
 15417  060B  0087               	movwf	7
 15418  060C  0020               	movlb	0	; select bank0
 15419  060D  0820               	movf	??_Buzzer_Main,w
 15420  060E  0081               	movwf	1
 15421                           
 15422                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15423  060F  0021               	movlb	1	; select bank1
 15424  0610  0837               	movf	_Buz^(0+128),w
 15425  0611  3E0A               	addlw	10
 15426  0612  0086               	movwf	6
 15427  0613  3001               	movlw	1	; select bank2/3
 15428  0614  0087               	movwf	7
 15429  0615  0837               	movf	_Buz^(0+128),w
 15430  0616  3E06               	addlw	6
 15431  0617  0084               	movwf	4
 15432  0618  3001               	movlw	1	; select bank2/3
 15433  0619  0085               	movwf	5
 15434  061A  3F40               	moviw [0]fsr1
 15435  061B  3F80               	movwi [0]fsr0
 15436  061C  3F41               	moviw [1]fsr1
 15437  061D  3F81               	movwi [1]fsr0
 15438                           
 15439                           ;Buzzer_B1.c: 68: } else {
 15440  061E  0008               	return
 15441  061F                     l6734:	
 15442                           
 15443                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15444  061F  0837               	movf	_Buz^(0+128),w
 15445  0620  0086               	movwf	6
 15446  0621  3001               	movlw	1	; select bank2/3
 15447  0622  0087               	movwf	7
 15448  0623  1081               	bcf	1,1
 15449                           
 15450                           ;Buzzer_B1.c: 70: }
 15451                           ;Buzzer_B1.c: 71: } else {
 15452  0624  0008               	return
 15453  0625                     l6736:	
 15454                           
 15455                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15456  0625  0837               	movf	_Buz^(0+128),w
 15457  0626  0086               	movwf	6
 15458  0627  3001               	movlw	1	; select bank2/3
 15459  0628  0087               	movwf	7
 15460  0629  1681               	bsf	1,5
 15461                           
 15462                           ;Buzzer_B1.c: 74: RB3 = 1;
 15463  062A  0020               	movlb	0	; select bank0
 15464  062B  158D               	bsf	13,3	;volatile
 15465                           
 15466                           ;Buzzer_B1.c: 75: }
 15467                           ;Buzzer_B1.c: 76: } else {
 15468  062C  0008               	return
 15469  062D                     l6740:	
 15470                           
 15471                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15472  062D  0021               	movlb	1	; select bank1
 15473  062E  0837               	movf	_Buz^(0+128),w
 15474  062F  0086               	movwf	6
 15475  0630  3001               	movlw	1	; select bank2/3
 15476  0631  0087               	movwf	7
 15477  0632  1281               	bcf	1,5
 15478                           
 15479                           ;Buzzer_B1.c: 79: RB3 = 0;
 15480  0633  0020               	movlb	0	; select bank0
 15481  0634  118D               	bcf	13,3	;volatile
 15482                           
 15483                           ;Buzzer_B1.c: 81: Buz->Count--;
 15484  0635  0021               	movlb	1	; select bank1
 15485  0636  0837               	movf	_Buz^(0+128),w
 15486  0637  3E03               	addlw	3
 15487  0638  0086               	movwf	6
 15488  0639  3001               	movlw	1	; select bank2/3
 15489  063A  0087               	movwf	7
 15490  063B  3001               	movlw	1
 15491  063C  0281               	subwf	1,f
 15492  063D  0008               	return
 15493  063E                     __end_of_Buzzer_Main:	
 15494                           
 15495                           	psect	text105
 15496  1EC6                     __ptext105:	
 15497 ;; *************** function _Buzzer_Initialization *****************
 15498 ;; Defined at:
 15499 ;;		line 11 in file "../src/Buzzer_B1.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;		None
 15502 ;; Auto vars:     Size  Location     Type
 15503 ;;		None
 15504 ;; Return value:  Size  Location     Type
 15505 ;;		None               void
 15506 ;; Registers used:
 15507 ;;		wreg, fsr1l, fsr1h
 15508 ;; Tracked objects:
 15509 ;;		On entry : 0/0
 15510 ;;		On exit  : 0/0
 15511 ;;		Unchanged: 0/0
 15512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;Total ram usage:        1 bytes
 15518 ;; Hardware stack levels used:    1
 15519 ;; Hardware stack levels required when called:    5
 15520 ;; This function calls:
 15521 ;;		Nothing
 15522 ;; This function is called by:
 15523 ;;		_main
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           
 15528                           ;psect for function _Buzzer_Initialization
 15529  1EC6                     _Buzzer_Initialization:	
 15530                           
 15531                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15532                           
 15533                           ;incstack = 0
 15534                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15535  1EC6  3040               	movlw	_Buz1& (0+255)
 15536  1EC7  0020               	movlb	0	; select bank0
 15537  1EC8  00A0               	movwf	??_Buzzer_Initialization
 15538  1EC9  0820               	movf	??_Buzzer_Initialization,w
 15539  1ECA  0021               	movlb	1	; select bank1
 15540  1ECB  00B7               	movwf	_Buz^(0+128)
 15541                           
 15542                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15543  1ECC  0837               	movf	_Buz^(0+128),w
 15544  1ECD  0086               	movwf	6
 15545  1ECE  3001               	movlw	1	; select bank2/3
 15546  1ECF  0087               	movwf	7
 15547  1ED0  1401               	bsf	1,0
 15548  1ED1  0008               	return
 15549  1ED2                     __end_of_Buzzer_Initialization:	
 15550                           
 15551                           	psect	intentry
 15552  0004                     __pintentry:	
 15553 ;; *************** function _ISR *****************
 15554 ;; Defined at:
 15555 ;;		line 109 in file "../src/MCU_B1.c"
 15556 ;; Parameters:    Size  Location     Type
 15557 ;;		None
 15558 ;; Auto vars:     Size  Location     Type
 15559 ;;		None
 15560 ;; Return value:  Size  Location     Type
 15561 ;;		None               void
 15562 ;; Registers used:
 15563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15564 ;; Tracked objects:
 15565 ;;		On entry : 0/0
 15566 ;;		On exit  : 0/0
 15567 ;;		Unchanged: 0/0
 15568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;Total ram usage:        1 bytes
 15574 ;; Hardware stack levels used:    1
 15575 ;; Hardware stack levels required when called:    4
 15576 ;; This function calls:
 15577 ;;		_INT_ISR
 15578 ;;		_IOC_ISR
 15579 ;;		_TMR0_ISR
 15580 ;; This function is called by:
 15581 ;;		Interrupt level 1
 15582 ;; This function uses a non-reentrant model
 15583 ;;
 15584                           
 15585  0004                     _ISR:	
 15586                           
 15587                           ;incstack = 0
 15588                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15589  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15590  0005  3180               	pagesel	$
 15591  0006  0020               	movlb	0	; select bank0
 15592  0007  087F               	movf	127,w
 15593  0008  00F8               	movwf	??_ISR
 15594                           
 15595                           ;MCU_B1.c: 111: IOC_ISR();
 15596  0009  319F  27CD  3180   	fcall	_IOC_ISR
 15597                           
 15598                           ;MCU_B1.c: 113: TMR0_ISR();
 15599  000C  3186  263E  3180   	fcall	_TMR0_ISR
 15600                           
 15601                           ;MCU_B1.c: 115: ;;
 15602                           ;MCU_B1.c: 119: INT_ISR();
 15603  000F  319E  26BA         	fcall	_INT_ISR
 15604  0011  0878               	movf	??_ISR,w
 15605  0012  0020               	movlb	0	; select bank0
 15606  0013  00FF               	movwf	127
 15607  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15608  0015  0009               	retfie
 15609  0016                     __end_of_ISR:	
 15610                           
 15611                           	psect	text107
 15612  063E                     __ptext107:	
 15613 ;; *************** function _TMR0_ISR *****************
 15614 ;; Defined at:
 15615 ;;		line 137 in file "../src/MCU_B1.c"
 15616 ;; Parameters:    Size  Location     Type
 15617 ;;		None
 15618 ;; Auto vars:     Size  Location     Type
 15619 ;;		None
 15620 ;; Return value:  Size  Location     Type
 15621 ;;		None               void
 15622 ;; Registers used:
 15623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15624 ;; Tracked objects:
 15625 ;;		On entry : 0/0
 15626 ;;		On exit  : 0/0
 15627 ;;		Unchanged: 0/0
 15628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;Total ram usage:        1 bytes
 15634 ;; Hardware stack levels used:    1
 15635 ;; Hardware stack levels required when called:    2
 15636 ;; This function calls:
 15637 ;;		_Buz_Counter
 15638 ;;		_DimmerIntrPointSelect
 15639 ;;		_setDimmerLights_IntrControl
 15640 ;; This function is called by:
 15641 ;;		_ISR
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           
 15646                           ;psect for function _TMR0_ISR
 15647  063E                     _TMR0_ISR:	
 15648                           
 15649                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15650                           
 15651                           ;incstack = 0
 15652                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15653  063E  1E8B               	btfss	11,5	;volatile
 15654  063F  0008               	return
 15655  0640  1D0B               	btfss	11,2	;volatile
 15656  0641  0008               	return
 15657                           
 15658                           ;MCU_B1.c: 139: TMR0 = (256-90);
 15659  0642  30A6               	movlw	166
 15660  0643  0020               	movlb	0	; select bank0
 15661  0644  0095               	movwf	21	;volatile
 15662                           
 15663                           ;MCU_B1.c: 140: TMR0IF = 0;
 15664  0645  110B               	bcf	11,2	;volatile
 15665                           
 15666                           ;MCU_B1.c: 144: DimmerIntrPointSelect(1);
 15667  0646  3001               	movlw	1
 15668  0647  3190  2070  3186   	fcall	_DimmerIntrPointSelect
 15669                           
 15670                           ;MCU_B1.c: 145: if (DimmerLights->MosfetOK == 1) {
 15671  064A  0879               	movf	_DimmerLights,w
 15672  064B  3E0C               	addlw	12
 15673  064C  0086               	movwf	6
 15674  064D  3001               	movlw	1	; select bank2/3
 15675  064E  0087               	movwf	7
 15676  064F  1D01               	btfss	1,2
 15677  0650  2E6F               	goto	i1l6810
 15678                           
 15679                           ;MCU_B1.c: 146: DimmerLights->MosfetOK_Count++;
 15680  0651  3001               	movlw	1
 15681  0652  00F7               	movwf	??_TMR0_ISR
 15682  0653  0879               	movf	_DimmerLights,w
 15683  0654  3E0F               	addlw	15
 15684  0655  0086               	movwf	6
 15685  0656  3001               	movlw	1	; select bank2/3
 15686  0657  0087               	movwf	7
 15687  0658  0877               	movf	??_TMR0_ISR,w
 15688  0659  0781               	addwf	1,f
 15689                           
 15690                           ;MCU_B1.c: 147: if (DimmerLights->MosfetOK_Count == 220) {
 15691  065A  0879               	movf	_DimmerLights,w
 15692  065B  3E0F               	addlw	15
 15693  065C  0086               	movwf	6
 15694  065D  3001               	movlw	1	; select bank2/3
 15695  065E  0087               	movwf	7
 15696  065F  0801               	movf	1,w
 15697  0660  3ADC               	xorlw	220
 15698  0661  1D03               	skipz
 15699  0662  2E6F               	goto	i1l6810
 15700                           
 15701                           ;MCU_B1.c: 148: DimmerLights->MosfetOK_Count = 0;
 15702  0663  0879               	movf	_DimmerLights,w
 15703  0664  3E0F               	addlw	15
 15704  0665  0086               	movwf	6
 15705  0666  3001               	movlw	1	; select bank2/3
 15706  0667  0087               	movwf	7
 15707  0668  0181               	clrf	1
 15708                           
 15709                           ;MCU_B1.c: 149: DimmerLights->MosfetOK = 0;
 15710  0669  0879               	movf	_DimmerLights,w
 15711  066A  3E0C               	addlw	12
 15712  066B  0086               	movwf	6
 15713  066C  3001               	movlw	1	; select bank2/3
 15714  066D  0087               	movwf	7
 15715  066E  1101               	bcf	1,2
 15716  066F                     i1l6810:	
 15717                           
 15718                           ;MCU_B1.c: 150: }
 15719                           ;MCU_B1.c: 151: }
 15720                           ;MCU_B1.c: 152: if (DimmerLightsIntr->MosfetSignal == 1) {
 15721  066F  087A               	movf	_DimmerLightsIntr,w
 15722  0670  3E0C               	addlw	12
 15723  0671  0086               	movwf	6
 15724  0672  3001               	movlw	1	; select bank2/3
 15725  0673  0087               	movwf	7
 15726  0674  1C81               	btfss	1,1
 15727  0675  2EBE               	goto	i1l6836
 15728                           
 15729                           ;MCU_B1.c: 153: DimmerLightsIntr->MosfetSignalCount++;
 15730  0676  3001               	movlw	1
 15731  0677  00F7               	movwf	??_TMR0_ISR
 15732  0678  087A               	movf	_DimmerLightsIntr,w
 15733  0679  3E0D               	addlw	13
 15734  067A  0086               	movwf	6
 15735  067B  3001               	movlw	1	; select bank2/3
 15736  067C  0087               	movwf	7
 15737  067D  0877               	movf	??_TMR0_ISR,w
 15738  067E  0781               	addwf	1,f
 15739                           
 15740                           ;MCU_B1.c: 154: if (DimmerLightsIntr->MosfetSignalCount == 130) {
 15741  067F  087A               	movf	_DimmerLightsIntr,w
 15742  0680  3E0D               	addlw	13
 15743  0681  0086               	movwf	6
 15744  0682  3001               	movlw	1	; select bank2/3
 15745  0683  0087               	movwf	7
 15746  0684  0801               	movf	1,w
 15747  0685  3A82               	xorlw	130
 15748  0686  1D03               	skipz
 15749  0687  2EBE               	goto	i1l6836
 15750                           
 15751                           ;MCU_B1.c: 155: DimmerLightsIntr->MosfetSignalCount = 0;
 15752  0688  087A               	movf	_DimmerLightsIntr,w
 15753  0689  3E0D               	addlw	13
 15754  068A  0086               	movwf	6
 15755  068B  3001               	movlw	1	; select bank2/3
 15756  068C  0087               	movwf	7
 15757  068D  0181               	clrf	1
 15758                           
 15759                           ;MCU_B1.c: 156: DimmerLightsIntr->MosfetSignal = 0;
 15760  068E  087A               	movf	_DimmerLightsIntr,w
 15761  068F  3E0C               	addlw	12
 15762  0690  0086               	movwf	6
 15763  0691  3001               	movlw	1	; select bank2/3
 15764  0692  0087               	movwf	7
 15765  0693  1081               	bcf	1,1
 15766                           
 15767                           ;MCU_B1.c: 157: RB5 = 0;
 15768  0694  0020               	movlb	0	; select bank0
 15769  0695  128D               	bcf	13,5	;volatile
 15770                           
 15771                           ;MCU_B1.c: 158: if (DimmerLightsIntr->GO == 0) {
 15772  0696  087A               	movf	_DimmerLightsIntr,w
 15773  0697  0086               	movwf	6
 15774  0698  3001               	movlw	1	; select bank2/3
 15775  0699  0087               	movwf	7
 15776  069A  1801               	btfsc	1,0
 15777  069B  2EA7               	goto	i1l6828
 15778                           
 15779                           ;MCU_B1.c: 160: DimmerLightsIntr->GO = 1;
 15780  069C  087A               	movf	_DimmerLightsIntr,w
 15781  069D  0086               	movwf	6
 15782  069E  3001               	movlw	1	; select bank2/3
 15783  069F  0087               	movwf	7
 15784  06A0  1401               	bsf	1,0
 15785                           
 15786                           ;MCU_B1.c: 162: if (DimmerLightsIntr->StatusFlag == 1) {
 15787  06A1  087A               	movf	_DimmerLightsIntr,w
 15788  06A2  0086               	movwf	6
 15789  06A3  3001               	movlw	1	; select bank2/3
 15790  06A4  0087               	movwf	7
 15791  06A5  1B01               	btfsc	1,6
 15792                           
 15793                           ;MCU_B1.c: 164: RA7 = 1;
 15794  06A6  178C               	bsf	12,7	;volatile
 15795  06A7                     i1l6828:	
 15796                           ;MCU_B1.c: 165: ;;
 15797                           
 15798                           
 15799                           ;MCU_B1.c: 167: }
 15800                           ;MCU_B1.c: 168: }
 15801                           ;MCU_B1.c: 169: DimmerIntrPointSelect(2);
 15802  06A7  3002               	movlw	2
 15803  06A8  3190  2070  3186   	fcall	_DimmerIntrPointSelect
 15804                           
 15805                           ;MCU_B1.c: 170: if (DimmerLightsIntr->GO == 0) {
 15806  06AB  087A               	movf	_DimmerLightsIntr,w
 15807  06AC  0086               	movwf	6
 15808  06AD  3001               	movlw	1	; select bank2/3
 15809  06AE  0087               	movwf	7
 15810  06AF  1801               	btfsc	1,0
 15811  06B0  2EBE               	goto	i1l6836
 15812                           
 15813                           ;MCU_B1.c: 172: DimmerLightsIntr->GO = 1;
 15814  06B1  087A               	movf	_DimmerLightsIntr,w
 15815  06B2  0086               	movwf	6
 15816  06B3  3001               	movlw	1	; select bank2/3
 15817  06B4  0087               	movwf	7
 15818  06B5  1401               	bsf	1,0
 15819                           
 15820                           ;MCU_B1.c: 174: if (DimmerLightsIntr->StatusFlag == 1) {
 15821  06B6  087A               	movf	_DimmerLightsIntr,w
 15822  06B7  0086               	movwf	6
 15823  06B8  3001               	movlw	1	; select bank2/3
 15824  06B9  0087               	movwf	7
 15825  06BA  1F01               	btfss	1,6
 15826  06BB  2EBE               	goto	i1l6836
 15827                           
 15828                           ;MCU_B1.c: 176: RB4 = 1;
 15829  06BC  0020               	movlb	0	; select bank0
 15830  06BD  160D               	bsf	13,4	;volatile
 15831  06BE                     i1l6836:	
 15832                           
 15833                           ;MCU_B1.c: 178: }
 15834                           ;MCU_B1.c: 179: }
 15835                           ;MCU_B1.c: 180: }
 15836                           ;MCU_B1.c: 181: }
 15837                           ;MCU_B1.c: 184: setDimmerLights_IntrControl(1);
 15838  06BE  3001               	movlw	1
 15839  06BF  3181  21A6  3186   	fcall	_setDimmerLights_IntrControl
 15840                           
 15841                           ;MCU_B1.c: 189: setDimmerLights_IntrControl(2);
 15842  06C2  3002               	movlw	2
 15843  06C3  3181  21A6  3186   	fcall	_setDimmerLights_IntrControl
 15844                           
 15845                           ;MCU_B1.c: 200: Timer0->Count++;
 15846  06C6  0021               	movlb	1	; select bank1
 15847  06C7  0A68               	incf	_Timer0^(0+128),w
 15848  06C8  0086               	movwf	6
 15849  06C9  3001               	movlw	1	; select bank2/3
 15850  06CA  0087               	movwf	7
 15851  06CB  3001               	movlw	1
 15852  06CC  0781               	addwf	1,f
 15853  06CD  3141               	addfsr 1,1
 15854  06CE  1803               	skipnc
 15855  06CF  0A81               	incf	1,f
 15856                           
 15857                           ;MCU_B1.c: 201: if (Timer0->Count == 200) {
 15858  06D0  0A68               	incf	_Timer0^(0+128),w
 15859  06D1  0086               	movwf	6
 15860  06D2  3001               	movlw	1	; select bank2/3
 15861  06D3  0087               	movwf	7
 15862  06D4  3F40               	moviw [0]fsr1
 15863  06D5  3AC8               	xorlw	200
 15864  06D6  1D03               	skipz
 15865  06D7  2EDA               	goto	u591_25
 15866  06D8  3F41               	moviw [1]fsr1
 15867  06D9  3A00               	xorlw	0
 15868  06DA                     u591_25:	
 15869  06DA  1D03               	skipz
 15870  06DB  0008               	return
 15871                           
 15872                           ;MCU_B1.c: 202: Timer0->Count = 0;
 15873  06DC  0A68               	incf	_Timer0^(0+128),w
 15874  06DD  0086               	movwf	6
 15875  06DE  3001               	movlw	1	; select bank2/3
 15876  06DF  0087               	movwf	7
 15877  06E0  3000               	movlw	0
 15878  06E1  3FC0               	movwi [0]fsr1
 15879  06E2  3FC1               	movwi [1]fsr1
 15880                           
 15881                           ;MCU_B1.c: 203: myMain->T0_Timerout = 1;
 15882  06E3  086A               	movf	_myMain^(0+128),w
 15883  06E4  0086               	movwf	6
 15884  06E5  3001               	movlw	1	; select bank2/3
 15885  06E6  0087               	movwf	7
 15886  06E7  1481               	bsf	1,1
 15887                           
 15888                           ;MCU_B1.c: 206: Buz_Counter();
 15889  06E8  319F  27DE         	fcall	_Buz_Counter
 15890  06EA  0008               	return
 15891  06EB                     __end_of_TMR0_ISR:	
 15892                           
 15893                           	psect	text108
 15894  01A6                     __ptext108:	
 15895 ;; *************** function _setDimmerLights_IntrControl *****************
 15896 ;; Defined at:
 15897 ;;		line 28 in file "../src/Dimmer_B1.c"
 15898 ;; Parameters:    Size  Location     Type
 15899 ;;  lights          1    wreg     unsigned char 
 15900 ;; Auto vars:     Size  Location     Type
 15901 ;;  lights          1    6[COMMON] unsigned char 
 15902 ;; Return value:  Size  Location     Type
 15903 ;;		None               void
 15904 ;; Registers used:
 15905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15906 ;; Tracked objects:
 15907 ;;		On entry : 0/0
 15908 ;;		On exit  : 0/0
 15909 ;;		Unchanged: 0/0
 15910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;Total ram usage:        5 bytes
 15916 ;; Hardware stack levels used:    1
 15917 ;; Hardware stack levels required when called:    1
 15918 ;; This function calls:
 15919 ;;		_DimmerIntrPointSelect
 15920 ;; This function is called by:
 15921 ;;		_TMR0_ISR
 15922 ;; This function uses a non-reentrant model
 15923 ;;
 15924                           
 15925                           
 15926                           ;psect for function _setDimmerLights_IntrControl
 15927  01A6                     _setDimmerLights_IntrControl:	
 15928                           
 15929                           ;incstack = 0
 15930                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15931                           ;setDimmerLights_IntrControl@lights stored from wreg
 15932  01A6  00F6               	movwf	setDimmerLights_IntrControl@lights
 15933                           
 15934                           ;Dimmer_B1.c: 30: DimmerIntrPointSelect(lights);
 15935  01A7  0876               	movf	setDimmerLights_IntrControl@lights,w
 15936  01A8  3190  2070  3181   	fcall	_DimmerIntrPointSelect
 15937                           
 15938                           ;Dimmer_B1.c: 32: if (DimmerLightsIntr->GO == 1) {
 15939  01AB  087A               	movf	_DimmerLightsIntr,w
 15940  01AC  0086               	movwf	6
 15941  01AD  3001               	movlw	1	; select bank2/3
 15942  01AE  0087               	movwf	7
 15943  01AF  1C01               	btfss	1,0
 15944  01B0  2A2E               	goto	i1l6300
 15945                           
 15946                           ;Dimmer_B1.c: 33: DimmerLightsIntr->Count++;
 15947  01B1  3001               	movlw	1
 15948  01B2  00F2               	movwf	??_setDimmerLights_IntrControl
 15949  01B3  087A               	movf	_DimmerLightsIntr,w
 15950  01B4  3E03               	addlw	3
 15951  01B5  0086               	movwf	6
 15952  01B6  3001               	movlw	1	; select bank2/3
 15953  01B7  0087               	movwf	7
 15954  01B8  0872               	movf	??_setDimmerLights_IntrControl,w
 15955  01B9  0781               	addwf	1,f
 15956                           
 15957                           ;Dimmer_B1.c: 34: if (DimmerLightsIntr->Count
 15958                           ;Dimmer_B1.c: 35: >= (DimmerLightsIntr->DimmingValue - Dimmer->Correction)) {
 15959  01BA  0021               	movlb	1	; select bank1
 15960  01BB  083A               	movf	_Dimmer^(0+128),w
 15961  01BC  3E02               	addlw	2
 15962  01BD  0086               	movwf	6
 15963  01BE  0187               	clrf	7
 15964  01BF  0801               	movf	1,w
 15965  01C0  00F2               	movwf	??_setDimmerLights_IntrControl
 15966  01C1  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15967  01C2  09F2               	comf	??_setDimmerLights_IntrControl,f
 15968  01C3  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15969  01C4  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15970  01C5  1903               	skipnz
 15971  01C6  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15972  01C7  087A               	movf	_DimmerLightsIntr,w
 15973  01C8  3E04               	addlw	4
 15974  01C9  0086               	movwf	6
 15975  01CA  3001               	movlw	1	; select bank2/3
 15976  01CB  0087               	movwf	7
 15977  01CC  0801               	movf	1,w
 15978  01CD  0772               	addwf	??_setDimmerLights_IntrControl,w
 15979  01CE  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15980  01CF  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15981  01D0  1803               	skipnc
 15982  01D1  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15983  01D2  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15984  01D3  087A               	movf	_DimmerLightsIntr,w
 15985  01D4  3E03               	addlw	3
 15986  01D5  0086               	movwf	6
 15987  01D6  3001               	movlw	1	; select bank2/3
 15988  01D7  0087               	movwf	7
 15989  01D8  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15990  01D9  3A80               	xorlw	128
 15991  01DA  3C80               	sublw	128
 15992  01DB  1D03               	skipz
 15993  01DC  29DF               	goto	u503_25
 15994  01DD  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15995  01DE  0201               	subwf	1,w
 15996  01DF                     u503_25:	
 15997  01DF  1C03               	skipc
 15998  01E0  0008               	return
 15999                           
 16000                           ;Dimmer_B1.c: 36: DimmerLightsIntr->Count = 0;
 16001  01E1  087A               	movf	_DimmerLightsIntr,w
 16002  01E2  3E03               	addlw	3
 16003  01E3  0086               	movwf	6
 16004  01E4  3001               	movlw	1	; select bank2/3
 16005  01E5  0087               	movwf	7
 16006  01E6  0181               	clrf	1
 16007                           
 16008                           ;Dimmer_B1.c: 37: DimmerLightsIntr->GO = 0;
 16009  01E7  087A               	movf	_DimmerLightsIntr,w
 16010  01E8  0086               	movwf	6
 16011  01E9  3001               	movlw	1	; select bank2/3
 16012  01EA  0087               	movwf	7
 16013  01EB  1001               	bcf	1,0
 16014                           
 16015                           ;Dimmer_B1.c: 38: DimmerLightsIntr->Flag = 1;
 16016  01EC  087A               	movf	_DimmerLightsIntr,w
 16017  01ED  3E07               	addlw	7
 16018  01EE  0086               	movwf	6
 16019  01EF  3001               	movlw	1	; select bank2/3
 16020  01F0  0087               	movwf	7
 16021  01F1  1401               	bsf	1,0
 16022                           
 16023                           ;Dimmer_B1.c: 39: if (DimmerLightsIntr->StatusFlag) {
 16024  01F2  087A               	movf	_DimmerLightsIntr,w
 16025  01F3  0086               	movwf	6
 16026  01F4  3001               	movlw	1	; select bank2/3
 16027  01F5  0087               	movwf	7
 16028  01F6  1F01               	btfss	1,6
 16029  01F7  0008               	return
 16030                           
 16031                           ;Dimmer_B1.c: 41: if (lights == 1) {
 16032  01F8  0876               	movf	setDimmerLights_IntrControl@lights,w
 16033  01F9  3A01               	xorlw	1
 16034  01FA  1D03               	skipz
 16035  01FB  29FE               	goto	i1l6282
 16036                           
 16037                           ;Dimmer_B1.c: 42: RA7 = 0;
 16038  01FC  0020               	movlb	0	; select bank0
 16039  01FD  138C               	bcf	12,7	;volatile
 16040  01FE                     i1l6282:	
 16041                           ;Dimmer_B1.c: 43: ;;
 16042                           
 16043                           
 16044                           ;Dimmer_B1.c: 44: }
 16045                           ;Dimmer_B1.c: 47: if (lights == 2) {
 16046  01FE  0876               	movf	setDimmerLights_IntrControl@lights,w
 16047  01FF  3A02               	xorlw	2
 16048  0200  1D03               	skipz
 16049  0201  2A04               	goto	i1l6286
 16050                           
 16051                           ;Dimmer_B1.c: 48: RB4 = 0;
 16052  0202  0020               	movlb	0	; select bank0
 16053  0203  120D               	bcf	13,4	;volatile
 16054  0204                     i1l6286:	
 16055                           
 16056                           ;Dimmer_B1.c: 49: }
 16057                           ;Dimmer_B1.c: 51: if (DimmerLightsIntr->MosfetClose) {
 16058  0204  087A               	movf	_DimmerLightsIntr,w
 16059  0205  3E09               	addlw	9
 16060  0206  0086               	movwf	6
 16061  0207  3001               	movlw	1	; select bank2/3
 16062  0208  0087               	movwf	7
 16063  0209  1F01               	btfss	1,6
 16064  020A  0008               	return
 16065                           
 16066                           ;Dimmer_B1.c: 52: DimmerLightsIntr->MosfetClose = 0;
 16067  020B  087A               	movf	_DimmerLightsIntr,w
 16068  020C  3E09               	addlw	9
 16069  020D  0086               	movwf	6
 16070  020E  3001               	movlw	1	; select bank2/3
 16071  020F  0087               	movwf	7
 16072  0210  1301               	bcf	1,6
 16073                           
 16074                           ;Dimmer_B1.c: 53: DimmerLightsIntr->StatusFlag = 0;
 16075  0211  087A               	movf	_DimmerLightsIntr,w
 16076  0212  0086               	movwf	6
 16077  0213  3001               	movlw	1	; select bank2/3
 16078  0214  0087               	movwf	7
 16079  0215  1301               	bcf	1,6
 16080                           
 16081                           ;Dimmer_B1.c: 54: DimmerLightsIntr->Clear = 1;
 16082  0216  087A               	movf	_DimmerLightsIntr,w
 16083  0217  3E0C               	addlw	12
 16084  0218  0086               	movwf	6
 16085  0219  3001               	movlw	1	; select bank2/3
 16086  021A  0087               	movwf	7
 16087  021B  1401               	bsf	1,0
 16088                           
 16089                           ;Dimmer_B1.c: 56: if (lights == 1) {
 16090  021C  0876               	movf	setDimmerLights_IntrControl@lights,w
 16091  021D  3A01               	xorlw	1
 16092  021E  1D03               	skipz
 16093  021F  2A22               	goto	i1l6294
 16094                           
 16095                           ;Dimmer_B1.c: 57: RA3 = 0;
 16096  0220  0020               	movlb	0	; select bank0
 16097  0221  118C               	bcf	12,3	;volatile
 16098  0222                     i1l6294:	
 16099                           
 16100                           ;Dimmer_B1.c: 59: }
 16101                           ;Dimmer_B1.c: 62: if (lights == 2) {
 16102  0222  0876               	movf	setDimmerLights_IntrControl@lights,w
 16103  0223  3A02               	xorlw	2
 16104  0224  1D03               	skipz
 16105  0225  2A28               	goto	i1l6298
 16106                           
 16107                           ;Dimmer_B1.c: 63: RC7 = 0;
 16108  0226  0020               	movlb	0	; select bank0
 16109  0227  138E               	bcf	14,7	;volatile
 16110  0228                     i1l6298:	
 16111                           
 16112                           ;Dimmer_B1.c: 64: }
 16113                           ;Dimmer_B1.c: 66: Dimmer->Detect = 1;
 16114  0228  0021               	movlb	1	; select bank1
 16115  0229  083A               	movf	_Dimmer^(0+128),w
 16116  022A  0086               	movwf	6
 16117  022B  0187               	clrf	7
 16118  022C  1401               	bsf	1,0
 16119                           
 16120                           ;Dimmer_B1.c: 68: }
 16121                           ;Dimmer_B1.c: 69: }
 16122                           ;Dimmer_B1.c: 70: }
 16123                           ;Dimmer_B1.c: 71: } else {
 16124                           
 16125                           ;Dimmer_B1.c: 67: ;;
 16126  022D  0008               	return
 16127  022E                     i1l6300:	
 16128                           
 16129                           ;Dimmer_B1.c: 72: if (DimmerLightsIntr->Flag) {
 16130  022E  087A               	movf	_DimmerLightsIntr,w
 16131  022F  3E07               	addlw	7
 16132  0230  0086               	movwf	6
 16133  0231  3001               	movlw	1	; select bank2/3
 16134  0232  0087               	movwf	7
 16135  0233  1C01               	btfss	1,0
 16136  0234  0008               	return
 16137                           
 16138                           ;Dimmer_B1.c: 73: DimmerLightsIntr->Flag = 0;
 16139  0235  087A               	movf	_DimmerLightsIntr,w
 16140  0236  3E07               	addlw	7
 16141  0237  0086               	movwf	6
 16142  0238  3001               	movlw	1	; select bank2/3
 16143  0239  0087               	movwf	7
 16144  023A  1001               	bcf	1,0
 16145                           
 16146                           ;Dimmer_B1.c: 74: if (DimmerLightsIntr->Signal) {
 16147  023B  087A               	movf	_DimmerLightsIntr,w
 16148  023C  0086               	movwf	6
 16149  023D  3001               	movlw	1	; select bank2/3
 16150  023E  0087               	movwf	7
 16151  023F  1C81               	btfss	1,1
 16152  0240  0008               	return
 16153                           
 16154                           ;Dimmer_B1.c: 75: DimmerLightsIntr->DimmingTime++;
 16155  0241  3001               	movlw	1
 16156  0242  00F2               	movwf	??_setDimmerLights_IntrControl
 16157  0243  0A7A               	incf	_DimmerLightsIntr,w
 16158  0244  0086               	movwf	6
 16159  0245  3001               	movlw	1	; select bank2/3
 16160  0246  0087               	movwf	7
 16161  0247  0872               	movf	??_setDimmerLights_IntrControl,w
 16162  0248  0781               	addwf	1,f
 16163                           
 16164                           ;Dimmer_B1.c: 76: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeValu
      +                          e) {
 16165  0249  0A7A               	incf	_DimmerLightsIntr,w
 16166  024A  0086               	movwf	6
 16167  024B  3001               	movlw	1	; select bank2/3
 16168  024C  0087               	movwf	7
 16169  024D  087A               	movf	_DimmerLightsIntr,w
 16170  024E  3E02               	addlw	2
 16171  024F  0084               	movwf	4
 16172  0250  3001               	movlw	1	; select bank2/3
 16173  0251  0085               	movwf	5
 16174  0252  0800               	movf	0,w
 16175  0253  0201               	subwf	1,w
 16176  0254  1C03               	skipc
 16177  0255  0008               	return
 16178                           
 16179                           ;Dimmer_B1.c: 77: DimmerLightsIntr->DimmingTime = 0;
 16180  0256  0A7A               	incf	_DimmerLightsIntr,w
 16181  0257  0086               	movwf	6
 16182  0258  3001               	movlw	1	; select bank2/3
 16183  0259  0087               	movwf	7
 16184  025A  0181               	clrf	1
 16185                           
 16186                           ;Dimmer_B1.c: 78: if (DimmerLightsIntr->AdjFlag) {
 16187  025B  087A               	movf	_DimmerLightsIntr,w
 16188  025C  0086               	movwf	6
 16189  025D  3001               	movlw	1	; select bank2/3
 16190  025E  0087               	movwf	7
 16191  025F  1D81               	btfss	1,3
 16192  0260  2A97               	goto	i1l6326
 16193                           
 16194                           ;Dimmer_B1.c: 79: if (DimmerLightsIntr->AdjStatus == 0) {
 16195  0261  087A               	movf	_DimmerLightsIntr,w
 16196  0262  0086               	movwf	6
 16197  0263  3001               	movlw	1	; select bank2/3
 16198  0264  0087               	movwf	7
 16199  0265  1A01               	btfsc	1,4
 16200  0266  2A80               	goto	i1l6320
 16201                           
 16202                           ;Dimmer_B1.c: 80: if (DimmerLightsIntr->DimmingValue < ((char)(65*1.5))) {
 16203  0267  087A               	movf	_DimmerLightsIntr,w
 16204  0268  3E04               	addlw	4
 16205  0269  0086               	movwf	6
 16206  026A  3001               	movlw	1	; select bank2/3
 16207  026B  0087               	movwf	7
 16208  026C  3061               	movlw	97
 16209  026D  0201               	subwf	1,w
 16210  026E  1803               	skipnc
 16211  026F  2A7A               	goto	i1l6318
 16212                           
 16213                           ;Dimmer_B1.c: 81: DimmerLightsIntr->DimmingValue++;
 16214  0270  3001               	movlw	1
 16215  0271  00F2               	movwf	??_setDimmerLights_IntrControl
 16216  0272  087A               	movf	_DimmerLightsIntr,w
 16217  0273  3E04               	addlw	4
 16218  0274  0086               	movwf	6
 16219  0275  3001               	movlw	1	; select bank2/3
 16220  0276  0087               	movwf	7
 16221  0277  0872               	movf	??_setDimmerLights_IntrControl,w
 16222  0278  0781               	addwf	1,f
 16223                           
 16224                           ;Dimmer_B1.c: 82: } else {
 16225  0279  0008               	return
 16226  027A                     i1l6318:	
 16227                           
 16228                           ;Dimmer_B1.c: 83: DimmerLightsIntr->AdjStatus = 1;
 16229  027A  087A               	movf	_DimmerLightsIntr,w
 16230  027B  0086               	movwf	6
 16231  027C  3001               	movlw	1	; select bank2/3
 16232  027D  0087               	movwf	7
 16233  027E  1601               	bsf	1,4
 16234                           
 16235                           ;Dimmer_B1.c: 84: }
 16236                           ;Dimmer_B1.c: 85: } else {
 16237  027F  0008               	return
 16238  0280                     i1l6320:	
 16239                           
 16240                           ;Dimmer_B1.c: 86: if (DimmerLightsIntr->DimmingValue > ((char)(20*1.5))) {
 16241  0280  087A               	movf	_DimmerLightsIntr,w
 16242  0281  3E04               	addlw	4
 16243  0282  0086               	movwf	6
 16244  0283  3001               	movlw	1	; select bank2/3
 16245  0284  0087               	movwf	7
 16246  0285  301F               	movlw	31
 16247  0286  0201               	subwf	1,w
 16248  0287  1C03               	skipc
 16249  0288  2A91               	goto	i1l6324
 16250                           
 16251                           ;Dimmer_B1.c: 87: DimmerLightsIntr->DimmingValue--;
 16252  0289  087A               	movf	_DimmerLightsIntr,w
 16253  028A  3E04               	addlw	4
 16254  028B  0086               	movwf	6
 16255  028C  3001               	movlw	1	; select bank2/3
 16256  028D  0087               	movwf	7
 16257  028E  3001               	movlw	1
 16258  028F  0281               	subwf	1,f
 16259                           
 16260                           ;Dimmer_B1.c: 88: } else {
 16261  0290  0008               	return
 16262  0291                     i1l6324:	
 16263                           
 16264                           ;Dimmer_B1.c: 89: DimmerLightsIntr->AdjStatus = 0;
 16265  0291  087A               	movf	_DimmerLightsIntr,w
 16266  0292  0086               	movwf	6
 16267  0293  3001               	movlw	1	; select bank2/3
 16268  0294  0087               	movwf	7
 16269  0295  1201               	bcf	1,4
 16270                           
 16271                           ;Dimmer_B1.c: 90: }
 16272                           ;Dimmer_B1.c: 91: }
 16273                           ;Dimmer_B1.c: 92: } else if (DimmerLightsIntr->AdjRF) {
 16274  0296  0008               	return
 16275  0297                     i1l6326:	
 16276  0297  087A               	movf	_DimmerLightsIntr,w
 16277  0298  0086               	movwf	6
 16278  0299  3001               	movlw	1	; select bank2/3
 16279  029A  0087               	movwf	7
 16280  029B  1D01               	btfss	1,2
 16281  029C  2AE3               	goto	i1l6340
 16282                           
 16283                           ;Dimmer_B1.c: 93: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16284  029D  087A               	movf	_DimmerLightsIntr,w
 16285  029E  3E04               	addlw	4
 16286  029F  0086               	movwf	6
 16287  02A0  3001               	movlw	1	; select bank2/3
 16288  02A1  0087               	movwf	7
 16289  02A2  087A               	movf	_DimmerLightsIntr,w
 16290  02A3  3E05               	addlw	5
 16291  02A4  0084               	movwf	4
 16292  02A5  3001               	movlw	1	; select bank2/3
 16293  02A6  0085               	movwf	5
 16294  02A7  0800               	movf	0,w
 16295  02A8  0201               	subwf	1,w
 16296  02A9  1803               	skipnc
 16297  02AA  2AB5               	goto	i1l6332
 16298                           
 16299                           ;Dimmer_B1.c: 94: DimmerLightsIntr->DimmingValue++;
 16300  02AB  3001               	movlw	1
 16301  02AC  00F2               	movwf	??_setDimmerLights_IntrControl
 16302  02AD  087A               	movf	_DimmerLightsIntr,w
 16303  02AE  3E04               	addlw	4
 16304  02AF  0086               	movwf	6
 16305  02B0  3001               	movlw	1	; select bank2/3
 16306  02B1  0087               	movwf	7
 16307  02B2  0872               	movf	??_setDimmerLights_IntrControl,w
 16308  02B3  0781               	addwf	1,f
 16309                           
 16310                           ;Dimmer_B1.c: 95: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumVa
      +                          lue) {
 16311  02B4  2ACA               	goto	i1l6336
 16312  02B5                     i1l6332:	
 16313  02B5  087A               	movf	_DimmerLightsIntr,w
 16314  02B6  3E05               	addlw	5
 16315  02B7  0086               	movwf	6
 16316  02B8  3001               	movlw	1	; select bank2/3
 16317  02B9  0087               	movwf	7
 16318  02BA  087A               	movf	_DimmerLightsIntr,w
 16319  02BB  3E04               	addlw	4
 16320  02BC  0084               	movwf	4
 16321  02BD  3001               	movlw	1	; select bank2/3
 16322  02BE  0085               	movwf	5
 16323  02BF  0800               	movf	0,w
 16324  02C0  0201               	subwf	1,w
 16325  02C1  1803               	skipnc
 16326  02C2  2ACA               	goto	i1l6336
 16327                           
 16328                           ;Dimmer_B1.c: 96: DimmerLightsIntr->DimmingValue--;
 16329  02C3  087A               	movf	_DimmerLightsIntr,w
 16330  02C4  3E04               	addlw	4
 16331  02C5  0086               	movwf	6
 16332  02C6  3001               	movlw	1	; select bank2/3
 16333  02C7  0087               	movwf	7
 16334  02C8  3001               	movlw	1
 16335  02C9  0281               	subwf	1,f
 16336  02CA                     i1l6336:	
 16337                           
 16338                           ;Dimmer_B1.c: 97: }
 16339                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) {
 16340  02CA  087A               	movf	_DimmerLightsIntr,w
 16341  02CB  3E05               	addlw	5
 16342  02CC  0086               	movwf	6
 16343  02CD  3001               	movlw	1	; select bank2/3
 16344  02CE  0087               	movwf	7
 16345  02CF  087A               	movf	_DimmerLightsIntr,w
 16346  02D0  3E04               	addlw	4
 16347  02D1  0084               	movwf	4
 16348  02D2  3001               	movlw	1	; select bank2/3
 16349  02D3  0085               	movwf	5
 16350  02D4  0800               	movf	0,w
 16351  02D5  0601               	xorwf	1,w
 16352  02D6  1D03               	skipz
 16353  02D7  0008               	return
 16354                           
 16355                           ;Dimmer_B1.c: 99: DimmerLightsIntr->AdjRF = 0;
 16356  02D8  087A               	movf	_DimmerLightsIntr,w
 16357  02D9  0086               	movwf	6
 16358  02DA  3001               	movlw	1	; select bank2/3
 16359  02DB  0087               	movwf	7
 16360  02DC  1101               	bcf	1,2
 16361                           
 16362                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Signal = 0;
 16363  02DD  087A               	movf	_DimmerLightsIntr,w
 16364  02DE  0086               	movwf	6
 16365  02DF  3001               	movlw	1	; select bank2/3
 16366  02E0  0087               	movwf	7
 16367  02E1  1081               	bcf	1,1
 16368                           
 16369                           ;Dimmer_B1.c: 101: }
 16370                           ;Dimmer_B1.c: 102: } else {
 16371  02E2  0008               	return
 16372  02E3                     i1l6340:	
 16373                           
 16374                           ;Dimmer_B1.c: 103: DimmerLightsIntr->Signal = 0;
 16375  02E3  087A               	movf	_DimmerLightsIntr,w
 16376  02E4  0086               	movwf	6
 16377  02E5  3001               	movlw	1	; select bank2/3
 16378  02E6  0087               	movwf	7
 16379  02E7  1081               	bcf	1,1
 16380  02E8  0008               	return
 16381  02E9                     __end_of_setDimmerLights_IntrControl:	
 16382                           
 16383                           	psect	text109
 16384  1FDE                     __ptext109:	
 16385 ;; *************** function _Buz_Counter *****************
 16386 ;; Defined at:
 16387 ;;		line 23 in file "../src/Buzzer_B1.c"
 16388 ;; Parameters:    Size  Location     Type
 16389 ;;		None
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;		None
 16392 ;; Return value:  Size  Location     Type
 16393 ;;		None               void
 16394 ;; Registers used:
 16395 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;Total ram usage:        0 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; This function calls:
 16408 ;;		Nothing
 16409 ;; This function is called by:
 16410 ;;		_TMR0_ISR
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           
 16415                           ;psect for function _Buz_Counter
 16416  1FDE                     _Buz_Counter:	
 16417                           
 16418                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16422  1FDE  0021               	movlb	1	; select bank1
 16423  1FDF  0837               	movf	_Buz^(0+128),w
 16424  1FE0  0086               	movwf	6
 16425  1FE1  3001               	movlw	1	; select bank2/3
 16426  1FE2  0087               	movwf	7
 16427  1FE3  1C81               	btfss	1,1
 16428  1FE4  0008               	return
 16429                           
 16430                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16431  1FE5  0A37               	incf	_Buz^(0+128),w
 16432  1FE6  0086               	movwf	6
 16433  1FE7  3001               	movlw	1	; select bank2/3
 16434  1FE8  0087               	movwf	7
 16435  1FE9  3001               	movlw	1
 16436  1FEA  0781               	addwf	1,f
 16437  1FEB  3141               	addfsr 1,1
 16438  1FEC  1803               	skipnc
 16439  1FED  0A81               	incf	1,f
 16440  1FEE  0008               	return
 16441  1FEF                     __end_of_Buz_Counter:	
 16442                           
 16443                           	psect	text110
 16444  1FCD                     __ptext110:	
 16445 ;; *************** function _IOC_ISR *****************
 16446 ;; Defined at:
 16447 ;;		line 334 in file "../src/MCU_B1.c"
 16448 ;; Parameters:    Size  Location     Type
 16449 ;;		None
 16450 ;; Auto vars:     Size  Location     Type
 16451 ;;		None
 16452 ;; Return value:  Size  Location     Type
 16453 ;;		None               void
 16454 ;; Registers used:
 16455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16456 ;; Tracked objects:
 16457 ;;		On entry : 0/0
 16458 ;;		On exit  : 0/0
 16459 ;;		Unchanged: 0/0
 16460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16465 ;;Total ram usage:        0 bytes
 16466 ;; Hardware stack levels used:    1
 16467 ;; Hardware stack levels required when called:    3
 16468 ;; This function calls:
 16469 ;;		_setDimmerReClock
 16470 ;; This function is called by:
 16471 ;;		_ISR
 16472 ;; This function uses a non-reentrant model
 16473 ;;
 16474                           
 16475                           
 16476                           ;psect for function _IOC_ISR
 16477  1FCD                     _IOC_ISR:	
 16478                           
 16479                           ;MCU_B1.c: 335: if (IOCIE == 1 && IOCBF2 == 1) {
 16480                           
 16481                           ;incstack = 0
 16482                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16483  1FCD  1D8B               	btfss	11,3	;volatile
 16484  1FCE  0008               	return
 16485  1FCF  0027               	movlb	7	; select bank7
 16486  1FD0  1D16               	btfss	22,2	;volatile
 16487  1FD1  0008               	return
 16488                           
 16489                           ;MCU_B1.c: 336: IOCBF2 = 0;
 16490  1FD2  1116               	bcf	22,2	;volatile
 16491                           
 16492                           ;MCU_B1.c: 337: IOCIF = 0;
 16493  1FD3  100B               	bcf	11,0	;volatile
 16494                           
 16495                           ;MCU_B1.c: 338: if (myMain->PowerON == 1) {
 16496  1FD4  0021               	movlb	1	; select bank1
 16497  1FD5  086A               	movf	_myMain^(0+128),w
 16498  1FD6  0086               	movwf	6
 16499  1FD7  3001               	movlw	1	; select bank2/3
 16500  1FD8  0087               	movwf	7
 16501  1FD9  1C01               	btfss	1,0
 16502  1FDA  0008               	return
 16503                           
 16504                           ;MCU_B1.c: 340: setDimmerReClock();
 16505  1FDB  319E  2699         	fcall	_setDimmerReClock
 16506  1FDD  0008               	return
 16507  1FDE                     __end_of_IOC_ISR:	
 16508                           
 16509                           	psect	text111
 16510  1E99                     __ptext111:	
 16511 ;; *************** function _setDimmerReClock *****************
 16512 ;; Defined at:
 16513 ;;		line 214 in file "../src/MCU_B1.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;		None
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;		None
 16518 ;; Return value:  Size  Location     Type
 16519 ;;		None               void
 16520 ;; Registers used:
 16521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16522 ;; Tracked objects:
 16523 ;;		On entry : 0/0
 16524 ;;		On exit  : 0/0
 16525 ;;		Unchanged: 0/0
 16526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16531 ;;Total ram usage:        0 bytes
 16532 ;; Hardware stack levels used:    1
 16533 ;; Hardware stack levels required when called:    2
 16534 ;; This function calls:
 16535 ;;		_setDimmerLights_IntrGO
 16536 ;; This function is called by:
 16537 ;;		_IOC_ISR
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           
 16542                           ;psect for function _setDimmerReClock
 16543  1E99                     _setDimmerReClock:	
 16544                           
 16545                           ;MCU_B1.c: 215: TMR0 = 255;
 16546                           
 16547                           ;incstack = 0
 16548                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16549  1E99  30FF               	movlw	255
 16550  1E9A  0020               	movlb	0	; select bank0
 16551  1E9B  0095               	movwf	21	;volatile
 16552                           
 16553                           ;MCU_B1.c: 220: setDimmerLights_IntrGO(1);
 16554  1E9C  3001               	movlw	1
 16555  1E9D  3194  2452  319E   	fcall	_setDimmerLights_IntrGO
 16556                           
 16557                           ;MCU_B1.c: 224: setDimmerLights_IntrGO(2);
 16558  1EA0  3002               	movlw	2
 16559  1EA1  3194  2452         	fcall	_setDimmerLights_IntrGO
 16560  1EA3  0008               	return
 16561  1EA4                     __end_of_setDimmerReClock:	
 16562                           
 16563                           	psect	text112
 16564  1452                     __ptext112:	
 16565 ;; *************** function _setDimmerLights_IntrGO *****************
 16566 ;; Defined at:
 16567 ;;		line 112 in file "../src/Dimmer_B1.c"
 16568 ;; Parameters:    Size  Location     Type
 16569 ;;  lights          1    wreg     unsigned char 
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;  lights          1    2[COMMON] unsigned char 
 16572 ;; Return value:  Size  Location     Type
 16573 ;;		None               void
 16574 ;; Registers used:
 16575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;Total ram usage:        1 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; Hardware stack levels required when called:    1
 16588 ;; This function calls:
 16589 ;;		_DimmerIntrPointSelect
 16590 ;; This function is called by:
 16591 ;;		_setDimmerReClock
 16592 ;; This function uses a non-reentrant model
 16593 ;;
 16594                           
 16595                           
 16596                           ;psect for function _setDimmerLights_IntrGO
 16597  1452                     _setDimmerLights_IntrGO:	
 16598                           
 16599                           ;incstack = 0
 16600                           ; Regs used in _setDimmerLights_IntrGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16601                           ;setDimmerLights_IntrGO@lights stored from wreg
 16602  1452  00F2               	movwf	setDimmerLights_IntrGO@lights
 16603                           
 16604                           ;Dimmer_B1.c: 113: DimmerIntrPointSelect(lights);
 16605  1453  0872               	movf	setDimmerLights_IntrGO@lights,w
 16606  1454  3190  2070  3194   	fcall	_DimmerIntrPointSelect
 16607                           
 16608                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->GO == 0
 16609                           ;Dimmer_B1.c: 123: && DimmerLights->MosfetOK == 0) {
 16610  1457  087A               	movf	_DimmerLightsIntr,w
 16611  1458  0086               	movwf	6
 16612  1459  3001               	movlw	1	; select bank2/3
 16613  145A  0087               	movwf	7
 16614  145B  1801               	btfsc	1,0
 16615  145C  0008               	return
 16616  145D  0879               	movf	_DimmerLights,w
 16617  145E  3E0C               	addlw	12
 16618  145F  0086               	movwf	6
 16619  1460  3001               	movlw	1	; select bank2/3
 16620  1461  0087               	movwf	7
 16621  1462  1901               	btfsc	1,2
 16622  1463  0008               	return
 16623                           
 16624                           ;Dimmer_B1.c: 125: if (lights == 1) {
 16625  1464  0872               	movf	setDimmerLights_IntrGO@lights,w
 16626  1465  3A01               	xorlw	1
 16627  1466  1D03               	skipz
 16628  1467  2C76               	goto	i1l806
 16629                           
 16630                           ;Dimmer_B1.c: 126: DimmerLightsIntr->MosfetSignal = 1;
 16631  1468  087A               	movf	_DimmerLightsIntr,w
 16632  1469  3E0C               	addlw	12
 16633  146A  0086               	movwf	6
 16634  146B  3001               	movlw	1	; select bank2/3
 16635  146C  0087               	movwf	7
 16636  146D  1481               	bsf	1,1
 16637                           
 16638                           ;Dimmer_B1.c: 127: DimmerLights->MosfetOK = 1;
 16639  146E  0879               	movf	_DimmerLights,w
 16640  146F  3E0C               	addlw	12
 16641  1470  0086               	movwf	6
 16642  1471  3001               	movlw	1	; select bank2/3
 16643  1472  0087               	movwf	7
 16644  1473  1501               	bsf	1,2
 16645                           
 16646                           ;Dimmer_B1.c: 128: RB5 = 1;
 16647  1474  0020               	movlb	0	; select bank0
 16648  1475  168D               	bsf	13,5	;volatile
 16649  1476                     i1l806:	
 16650                           
 16651                           ;Dimmer_B1.c: 129: }
 16652                           ;Dimmer_B1.c: 131: DimmerLightsIntr->GO = 1;
 16653  1476  087A               	movf	_DimmerLightsIntr,w
 16654  1477  0086               	movwf	6
 16655  1478  3001               	movlw	1	; select bank2/3
 16656  1479  0087               	movwf	7
 16657  147A  1401               	bsf	1,0
 16658                           
 16659                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->StatusFlag == 1) {
 16660  147B  087A               	movf	_DimmerLightsIntr,w
 16661  147C  0086               	movwf	6
 16662  147D  3001               	movlw	1	; select bank2/3
 16663  147E  0087               	movwf	7
 16664  147F  1F01               	btfss	1,6
 16665  1480  0008               	return
 16666                           
 16667                           ;Dimmer_B1.c: 134: if (lights == 1) {
 16668  1481  0872               	movf	setDimmerLights_IntrGO@lights,w
 16669  1482  3A01               	xorlw	1
 16670  1483  1D03               	skipz
 16671  1484  2C87               	goto	i1l5932
 16672                           
 16673                           ;Dimmer_B1.c: 135: RA7 = 1;
 16674  1485  0020               	movlb	0	; select bank0
 16675  1486  178C               	bsf	12,7	;volatile
 16676  1487                     i1l5932:	
 16677                           ;Dimmer_B1.c: 136: ;;
 16678                           
 16679                           
 16680                           ;Dimmer_B1.c: 137: }
 16681                           ;Dimmer_B1.c: 140: if (lights == 2) {
 16682  1487  0872               	movf	setDimmerLights_IntrGO@lights,w
 16683  1488  3A02               	xorlw	2
 16684  1489  1D03               	skipz
 16685  148A  0008               	return
 16686                           
 16687                           ;Dimmer_B1.c: 141: RB4 = 1;
 16688  148B  0020               	movlb	0	; select bank0
 16689  148C  160D               	bsf	13,4	;volatile
 16690  148D  0008               	return
 16691  148E                     __end_of_setDimmerLights_IntrGO:	
 16692                           
 16693                           	psect	text113
 16694  1070                     __ptext113:	
 16695 ;; *************** function _DimmerIntrPointSelect *****************
 16696 ;; Defined at:
 16697 ;;		line 7 in file "../src/Dimmer_B1.c"
 16698 ;; Parameters:    Size  Location     Type
 16699 ;;  lights          1    wreg     unsigned char 
 16700 ;; Auto vars:     Size  Location     Type
 16701 ;;  lights          1    1[COMMON] unsigned char 
 16702 ;; Return value:  Size  Location     Type
 16703 ;;		None               void
 16704 ;; Registers used:
 16705 ;;		wreg
 16706 ;; Tracked objects:
 16707 ;;		On entry : 0/0
 16708 ;;		On exit  : 0/0
 16709 ;;		Unchanged: 0/0
 16710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;Total ram usage:        2 bytes
 16716 ;; Hardware stack levels used:    1
 16717 ;; This function calls:
 16718 ;;		Nothing
 16719 ;; This function is called by:
 16720 ;;		_setDimmerLights_IntrControl
 16721 ;;		_setDimmerLights_IntrGO
 16722 ;;		_TMR0_ISR
 16723 ;; This function uses a non-reentrant model
 16724 ;;
 16725                           
 16726                           
 16727                           ;psect for function _DimmerIntrPointSelect
 16728  1070                     _DimmerIntrPointSelect:	
 16729                           
 16730                           ;incstack = 0
 16731                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16732                           ;DimmerIntrPointSelect@lights stored from wreg
 16733  1070  00F1               	movwf	DimmerIntrPointSelect@lights
 16734                           
 16735                           ;Dimmer_B1.c: 9: if (lights == 1) {
 16736  1071  0871               	movf	DimmerIntrPointSelect@lights,w
 16737  1072  3A01               	xorlw	1
 16738  1073  1D03               	skipz
 16739  1074  2879               	goto	i1l771
 16740                           
 16741                           ;Dimmer_B1.c: 10: DimmerLightsIntr = &DimmerLights1;
 16742  1075  3020               	movlw	_DimmerLights1& (0+255)
 16743  1076  00F0               	movwf	??_DimmerIntrPointSelect
 16744  1077  0870               	movf	??_DimmerIntrPointSelect,w
 16745  1078  00FA               	movwf	_DimmerLightsIntr
 16746  1079                     i1l771:	
 16747                           
 16748                           ;Dimmer_B1.c: 11: }
 16749                           ;Dimmer_B1.c: 14: if (lights == 2) {
 16750  1079  0871               	movf	DimmerIntrPointSelect@lights,w
 16751  107A  3A02               	xorlw	2
 16752  107B  1D03               	skipz
 16753  107C  0008               	return
 16754                           
 16755                           ;Dimmer_B1.c: 15: DimmerLightsIntr = &DimmerLights2;
 16756  107D  3030               	movlw	_DimmerLights2& (0+255)
 16757  107E  00F0               	movwf	??_DimmerIntrPointSelect
 16758  107F  0870               	movf	??_DimmerIntrPointSelect,w
 16759  1080  00FA               	movwf	_DimmerLightsIntr
 16760  1081  0008               	return
 16761  1082                     __end_of_DimmerIntrPointSelect:	
 16762                           
 16763                           	psect	text114
 16764  1EBA                     __ptext114:	
 16765 ;; *************** function _INT_ISR *****************
 16766 ;; Defined at:
 16767 ;;		line 287 in file "../src/MCU_B1.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;		None
 16770 ;; Auto vars:     Size  Location     Type
 16771 ;;		None
 16772 ;; Return value:  Size  Location     Type
 16773 ;;		None               void
 16774 ;; Registers used:
 16775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16776 ;; Tracked objects:
 16777 ;;		On entry : 0/0
 16778 ;;		On exit  : 0/0
 16779 ;;		Unchanged: 0/0
 16780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;Total ram usage:        0 bytes
 16786 ;; Hardware stack levels used:    1
 16787 ;; Hardware stack levels required when called:    2
 16788 ;; This function calls:
 16789 ;;		_setRF_ReceiveGO
 16790 ;; This function is called by:
 16791 ;;		_ISR
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           
 16796                           ;psect for function _INT_ISR
 16797  1EBA                     _INT_ISR:	
 16798                           
 16799                           ;MCU_B1.c: 288: if (INTE && INTF) {
 16800                           
 16801                           ;incstack = 0
 16802                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16803  1EBA  1E0B               	btfss	11,4	;volatile
 16804  1EBB  0008               	return
 16805  1EBC  1C8B               	btfss	11,1	;volatile
 16806  1EBD  0008               	return
 16807                           
 16808                           ;MCU_B1.c: 289: INTF = 0;
 16809  1EBE  108B               	bcf	11,1	;volatile
 16810                           
 16811                           ;MCU_B1.c: 290: INTE = 0;
 16812  1EBF  120B               	bcf	11,4	;volatile
 16813                           
 16814                           ;MCU_B1.c: 291: setRF_ReceiveGO(1, 1);
 16815  1EC0  01F2               	clrf	setRF_ReceiveGO@command
 16816  1EC1  0AF2               	incf	setRF_ReceiveGO@command,f
 16817  1EC2  3001               	movlw	1
 16818  1EC3  319F  271A         	fcall	_setRF_ReceiveGO
 16819  1EC5  0008               	return
 16820  1EC6                     __end_of_INT_ISR:	
 16821                           
 16822                           	psect	text115
 16823  1F1A                     __ptext115:	
 16824 ;; *************** function _setRF_ReceiveGO *****************
 16825 ;; Defined at:
 16826 ;;		line 36 in file "../src/RF_Control_B1.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;  rf              1    wreg     unsigned char 
 16829 ;;  command         1    2[COMMON] unsigned char 
 16830 ;; Auto vars:     Size  Location     Type
 16831 ;;  rf              1    3[COMMON] unsigned char 
 16832 ;; Return value:  Size  Location     Type
 16833 ;;		None               void
 16834 ;; Registers used:
 16835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16836 ;; Tracked objects:
 16837 ;;		On entry : 0/0
 16838 ;;		On exit  : 0/0
 16839 ;;		Unchanged: 0/0
 16840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16841 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16845 ;;Total ram usage:        2 bytes
 16846 ;; Hardware stack levels used:    1
 16847 ;; Hardware stack levels required when called:    1
 16848 ;; This function calls:
 16849 ;;		i1_RfPointSelect
 16850 ;; This function is called by:
 16851 ;;		_INT_ISR
 16852 ;; This function uses a non-reentrant model
 16853 ;;
 16854                           
 16855                           
 16856                           ;psect for function _setRF_ReceiveGO
 16857  1F1A                     _setRF_ReceiveGO:	
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16861                           ;setRF_ReceiveGO@rf stored from wreg
 16862  1F1A  00F3               	movwf	setRF_ReceiveGO@rf
 16863                           
 16864                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 16865  1F1B  0873               	movf	setRF_ReceiveGO@rf,w
 16866  1F1C  319E  268E         	fcall	i1_RfPointSelect
 16867                           
 16868                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 16869  1F1E  0021               	movlb	1	; select bank1
 16870  1F1F  083E               	movf	_RF^(0+128),w
 16871  1F20  0086               	movwf	6
 16872  1F21  0187               	clrf	7
 16873  1F22  0872               	movf	setRF_ReceiveGO@command,w
 16874  1F23  1081               	bcf	1,1
 16875  1F24  1D03               	skipz
 16876  1F25  1481               	bsf	1,1
 16877  1F26  0008               	return
 16878  1F27                     __end_of_setRF_ReceiveGO:	
 16879                           
 16880                           	psect	text116
 16881  1E8E                     __ptext116:	
 16882 ;; *************** function i1_RfPointSelect *****************
 16883 ;; Defined at:
 16884 ;;		line 7 in file "../src/RF_Control_B1.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;  rf              1    wreg     unsigned char 
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;  rf              1    1[COMMON] unsigned char 
 16889 ;; Return value:  Size  Location     Type
 16890 ;;		None               void
 16891 ;; Registers used:
 16892 ;;		wreg
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;Total ram usage:        2 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; This function calls:
 16905 ;;		Nothing
 16906 ;; This function is called by:
 16907 ;;		_setRF_ReceiveGO
 16908 ;; This function uses a non-reentrant model
 16909 ;;
 16910                           
 16911                           
 16912                           ;psect for function i1_RfPointSelect
 16913  1E8E                     i1_RfPointSelect:	
 16914                           
 16915                           ;incstack = 0
 16916                           ; Regs used in i1_RfPointSelect: [wreg]
 16917                           ;i1RfPointSelect@rf stored from wreg
 16918  1E8E  00F1               	movwf	i1RfPointSelect@rf
 16919                           
 16920                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16921  1E8F  0871               	movf	i1RfPointSelect@rf,w
 16922  1E90  3A01               	xorlw	1
 16923  1E91  1D03               	skipz
 16924  1E92  0008               	return
 16925                           
 16926                           ;RF_Control_B1.c: 10: RF = &RF1;
 16927  1E93  30E0               	movlw	_RF1& (0+255)
 16928  1E94  00F0               	movwf	??i1_RfPointSelect
 16929  1E95  0870               	movf	??i1_RfPointSelect,w
 16930  1E96  0021               	movlb	1	; select bank1
 16931  1E97  00BE               	movwf	_RF^(0+128)
 16932  1E98  0008               	return
 16933  1E99                     __end_ofi1_RfPointSelect:	
 16934  007E                     btemp	set	126	;btemp
 16935  007E                     pic14e$flags	set	126
 16936  007E                     wtemp	set	126
 16937  007E                     wtemp0	set	126
 16938  0080                     wtemp1	set	128
 16939  0082                     wtemp2	set	130
 16940  0084                     wtemp3	set	132
 16941  0086                     wtemp4	set	134
 16942  0088                     wtemp5	set	136
 16943  007F                     wtemp6	set	127
 16944  007E                     ttemp	set	126
 16945  007E                     ttemp0	set	126
 16946  0081                     ttemp1	set	129
 16947  0084                     ttemp2	set	132
 16948  0087                     ttemp3	set	135
 16949  007F                     ttemp4	set	127
 16950  007E                     ltemp	set	126
 16951  007E                     ltemp0	set	126
 16952  0082                     ltemp1	set	130
 16953  0086                     ltemp2	set	134
 16954  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         199
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     80      80
    BANK1            80      0      75
    BANK2            80      0      71
    BANK3            80      0      49
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK3[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 16
		 -> NULL(NULL[0]), DimmerLights2(BANK2[16]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 16
		 -> NULL(NULL[0]), DimmerLights1(BANK2[16]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 16
		 -> NULL(NULL[0]), DimmerLights2(BANK2[16]), DimmerLights1(BANK2[16]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 16
		 -> NULL(NULL[0]), DimmerLights2(BANK2[16]), DimmerLights1(BANK2[16]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrGO
    _setDimmerLights_IntrGO->_DimmerIntrPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _my_Main->_setRF_Enable
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   72431
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1012
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     152
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19277
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   19277
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8464
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     652
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     652
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   25425
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   25425
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   24523
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0     816
                                              4 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   23663
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9422
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     450
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     130
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     740
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     740
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    8504
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8456
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6399
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1018
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     630
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      48
         _getDimmerLights_StatusFlag
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    8933
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    8933
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2     772
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     460
                                              8 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0     198
                                              7 COMMON     1     1      0
                        _Buz_Counter
              _DimmerIntrPointSelect
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     154
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     132
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     132
             _setDimmerLights_IntrGO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrGO                              1     1      0     132
                                              2 COMMON     1     1      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrGO
         _DimmerIntrPointSelect
   _TMR0_ISR
     _Buz_Counter
     _DimmerIntrPointSelect
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      47       9       88.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     146      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     146      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 07 16:53:28 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BE  
                __end_of_CC2500_WriteREG 1178                                       _WR 0CA9  
                                     _Sw 007B       __end_of_getDimmerLights_StatusFlag 11C4  
             _getDimmerLights_StatusFlag 11AA                   __end_of_setDelayOff_GO 1800  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0C0C  
                           ___ftadd@sign 0048                                      l303 1415  
                                    l306 141B                                      l270 1552  
                                    l336 1152                                      l360 1F85  
                                    l337 1154                                      l290 0907  
                                    l275 157C                                      l372 12F9  
                                    l348 1167                                      l276 1581  
                                    l366 11E8                                      l286 08F6  
                                    l279 1584                                      l813 108C  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BD  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E0                                      _ISR 0004  
                                    _WDT 00E9                                      _Sw1 014C  
                                    _Sw2 0155                                      _Buz 00B7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 115F  
                          ??_Buz_Counter 0070                    _Buzzer_Initialization 1EC6  
                        __end_of_ADC_Set 1E5E                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0DA3                    _setDimmerLights_AdjRF 12D2  
                  _setDimmerLights_AdjGo 1FAD                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1FDE  
                           ___ftdiv@sign 003D                                     l2021 16A0  
                                   l2053 1535                                     l2039 10DD  
                                   l2401 1E39                 ?_DimmerLightsPointSelect 0070  
                                   l1397 144B                          __end_of_IOC_Set 1F1A  
                                   l6000 142F                                     l5202 044C  
                                   l5132 08A3                                     l5220 0492  
                                   l5204 0456                                     l2910 08DD  
                                   l5142 08CB                                     l5134 08AD  
                                   l5214 0472                                     l5206 045B  
                                   l5144 08D3                                     l5136 08B2  
                                   l2904 08C6                                     l5128 089C  
                                   l5224 04A4                                     l5216 047C  
                                   l5208 045F                                     l5320 0563  
                                   l5304 053F                                     l5400 1375  
                                   l5162 1299                                     l5250 0718  
                                   l5234 04BF                                     l5402 1377  
                                   l6042 16BE                                     l5244 0702  
                                   l5316 055B                                     l5308 0547  
                                   l5404 1379                                     l5412 1382  
                                   l6132 15F1                                     l2933 0480  
                                   l5174 0409                                     l5406 137B  
                                   l5414 1396                                     l6054 16D4  
                                   l6118 0A96                                     l5272 0772  
                                   l5264 0759                                     l5336 0CA5  
                                   l5184 041F                                     l5408 137D  
                                   l6128 15DF                                     l5370 0D0A  
                                   l5362 0CF0                                     l5354 0CD5  
                                   l5442 12C7                                     l6402 0C85  
                                   l5178 0410                                     l6162 0A12  
                                   l5364 0CF9                                     l5356 0CE3  
                                   l5196 0439                                     l5292 0504  
                                   l5532 17D3                                     l5470 0AFA  
                                   l5366 0CFC                                     l5454 10A0  
                                   l5438 12BC                                     l6510 0977  
                                   l5286 04EE                                     l5606 080D  
                                   l5542 17F2                                     l6094 0A42  
                                   l5392 10F4                                     l6504 095E  
                                   l6424 14FD                                     l5720 1523  
                                   l5536 17D9                                     l5466 0AD6  
                                   l5554 0845                                     l5562 0851  
                                   l6514 09BE                                     l5642 1242  
                                   l5538 17E6                                     l5802 0E87  
                                   l6098 0A54                                     l7074 1712  
                                   l5900 130A                                     l5572 0861  
                                   l6372 0C1C                                     l6428 1504  
                                   l5644 1248                                     l5820 0EBD  
                                   l5812 0EAB                                     l6540 0EDB  
                                   l6620 0062                                     l5902 1315  
                                   l5494 07EF                                     l5558 084B  
                                   l5670 0E02                                     l6390 0C56  
                                   l5398 1373                                     l6630 0072  
                                   l6622 0068                                     l7078 171C  
                                   l5584 087D                                     l5592 0889  
                                   l5568 085B                                     l5576 0867  
                                   l6392 0C5F                                     l6376 0C2B  
                                   l5680 0D30                                     l5816 0EB4  
                                   l5808 0EA2                                     l6544 0EE4  
                                   l6632 007A                                     l6386 0C49  
                                   l5842 1564                                     l5690 0D54  
                                   l6554 0F04                                     l6740 062D  
                                   l5588 0883                                     l6734 061F  
                                   l6582 0F4F                                     l6566 0F20  
                                   l6670 011E                                     l6646 00A7  
                                   l6728 05F3                                     l6736 0625  
                                   l5696 0D6A                                     l6568 0F24  
                                   l6656 00D9                                     l6680 0151  
                                   l5946 11BD                                     l5874 0919  
                                   l5876 0931                                     l5958 14A3  
                                   l6918 15CC                                     l5888 094A  
                                   l6960 0B61                                     l6874 0362  
                  _myMain_Initialization 10A9                                     l6968 0B8D  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1EC6                                     _LATC 010E  
                                   u3215 08E4                                     u3145 08A8  
                                   u3165 08C1                                     u3335 043A  
                                   u3185 08CE                                     u3505 073A  
                                   u3425 0473                                     u4330 106E  
                                   u3515 075A                                     u3525 0769  
                                   u6005 15B3                                     u3365 044D  
                                   u3605 0548                                     u3535 0773  
                                   u3615 054E                                     u3715 0CD6  
                                   u3395 0460                                     _PEIE 005E  
                                   u3645 0564                                     u6045 0B38  
                                   _INTE 005C                                     u3910 079E  
                                   _INTF 0059                                     u3495 072A  
                                   u3655 056A                                     u3575 0510  
                                   u6055 0B77                                     u4545 12FF  
                                   u3745 0CF1                                     u3585 0520  
                                   u3915 079C                                     u3685 0CAC  
                                   u5735 05AF                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1E44                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 0140  
                                   __WDT 00E3                                     _main 16F4  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0C0C  
                        __end_of_RF_Main 1E39                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1146                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1E99  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1EDE               __end_of_setRFSW_AdjControl 154B  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0078                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1F0E            __end_of_DimmerIntrPointSelect 1082  
                 _setDimmerLights_IntrGO 1452                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 04D7  
                        __end_of___ftdiv 0794                          __end_of___ftmul 058B  
                        __end_of___fttol 0D13             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l806 1476  
                                  i1l771 1079                   _setDimmerLights_Switch 1F8D  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E5  
                                  _RFSW2 00E6                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 06EB             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1F34                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0B93              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1216  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                    __end_of_Buz_Counter 1FEF                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 2000                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0794  
            __size_of_Flash_Memory_Write 0031                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0008  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 1748                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 1748                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1E31                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E34  
                   _setSw_Initialization 1E75                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0E34                   ?_Buzzer_Initialization 0070  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1095                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                            _DlyOff_Main 0B93                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 12B0  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 08F4  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F9D  
                                 i1l6300 022E                                   i1l6320 0280  
                                 i1l6332 02B5                                   i1l6340 02E3  
                                 i1l6324 0291                                   i1l6318 027A  
                                 i1l6326 0297                                   i1l6336 02CA  
                                 i1l6282 01FE                                   i1l6294 0222  
                                 i1l6286 0204                                   i1l6298 0228  
                                 i1l6810 066F                                   i1l5932 1487  
                                 i1l6828 06A7                                   i1l6836 06BE  
                                 _FVRCON 0117                                   u503_25 01DF  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u591_25 06DA                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1191  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1E50           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 10D2                                   _Dimmer 00BA  
                                 _DlySw1 00C7                                   _DlySw2 00CC  
             __end_of_Mcu_Initialization 11DF                      __end_of_Buzzer_Main 063E  
                                 _Memory 00E7                                   _Timer0 00E8  
     __end_of_setDimmerLights_TriggerAdj 1FCD               _setDimmerLights_TriggerAdj 1FBD  
          setDimmerLights_Switch@command 0022                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1E8E              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 0835  
                                 _myMain 00EA                         _DimmerLightsIntr 007A  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 0AA9         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 0024  
    __end_of_setDimmerLights_IntrControl 02E9              _setDimmerLights_IntrControl 01A6  
               Flash_Memory_Read@address 0022                              _Buz_Counter 1FDE  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 10A9                            ?_setRF_Enable 0022  
                        _RfSWPointSelect 10D2             __size_of_Flash_Memory_Modify 006E  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0018  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1E39  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 17A3  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0047  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 126E                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1EF6                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1EA4                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                         _DimmerLights22 00BC                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 058B                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1E65                               __pnvCOMMON 007D  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
           setDimmerLights_IntrGO@lights 0072                             _DimmerLights 0079  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1E99  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000F                              setBuz@count 0023  
                             __pmaintext 16F4                      _CC2500_WriteCommand 1F7D  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                  ?_setDimmerLights_IntrGO 0070  
                             ??_TMR0_ISR 0077                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A6  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E57                                  ?_setBuz 0020  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1E65  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 150B  
                __end_of_RfSWPointSelect 10E8                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 1FCD                                  _IOC_Set 1F0E  
                   __size_of_setLog_Code 0048                                  _INT_ISR 1EBA  
                                _INT_Set 1E3E                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 158F                        _Flash_Memory_Read 1178  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 1E35  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 112E          __end_of_setControl_Lights_Table 0EC6  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0A37                          _setPercentValue 1619  
                          setLog_Code@rf 0025                         ?_getPercentValue 0070  
                                _Dimmer1 00DD             __end_of_CC2500_FrequencyCabr 1EDE  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D5  
                                _VarLED2 00D9                        __end_of_getRxData 16F4  
               _CC2500_registers_address 1000           __end_of_setDimmerLights_IntrGO 148E  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1FAD  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1F9D  
                                ___ftadd 03E1                           ??_setSw_Enable 0022  
                                ___ftdiv 06EB                                  ___ftmul 04D7  
                                ___fttol 0C8C                      __end_of_Switch_Main 1E85  
                ??_Buzzer_Initialization 0020                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0075                           ??_setSw_Status 0023  
                                __ptext1 0B1E                                  __ptext2 1216  
                                __ptext3 1398                                  __ptext4 10A9  
                                __ptext5 11FA                                  __ptext6 0002  
                                __ptext7 1E7D                                  __ptext8 004B  
                                __ptext9 1F6E                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 1070  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 15D4  
              __end_of_Flash_Memory_Read 1191                               _setRF_Main 0EC6  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1E6D  
                      _DimmerLights_Main 1EAF                                  _my_Main 0B1E  
                      __end_of_setINT_GO 1070           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1EAF  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 1E25  
             __end_of_CC2500_ClearTXFIFO 1E29            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 12B0  
                    _DelayOffPointSelect 10E8                                  clrloop0 1E4B  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1F41  
                   end_of_initialization 0047                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1342                            _DelayTime_1us 12F4  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 1452  
                                init_ram 1E44                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1E45                               _setSw_Main 004B  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 11DF  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1FEF  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 08F4                            _CC2500_TxData 154B  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 13C4  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 0958  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E85  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1EBA  
                     _Mcu_Initialization 11C4                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$3916 0067                          _setSw_Main$3917 0068  
                       __CFG_FOSC$INTOSC 0000                             ?_Buz_Counter 0070  
                 __end_of_LedPointSelect 12D2                  __end_of_Sw_DimmerOnFunc 0AA9  
                __end_of_setPercentValue 165F                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 136C                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 148E  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 11FA  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 11AA                     _setRF_Initialization 1E5E  
                            _Switch_Main 1E7D                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1082                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 10BD                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0045  
                   setRF_DimmerLights@on 005D                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 00AD                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0080  
                         __end_of_setLED 0893                           __end_of_setBuz 0B1E  
        _getDimmerLights_StatusFlag$1566 0022                     _CC2500_FrequencyCabr 1ED2  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0D13                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 0800                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 112E                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 126E  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1232  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D1  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1F5F  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1EEA  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015E  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C3  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 0022  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E29               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 0835                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$3246 006B  
                            __pbssCOMMON 0079                                 ?_IOC_Set 0070  
                              ___latbits 0003                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0091  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 0130                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0024  
                __size_of_setRF_RxStatus 000F                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00E7              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 0094  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0020  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 03E1              _Flash_Memory_Initialization 02E9  
                              __ptext100 1E25                                __ptext101 1E21  
                              __ptext110 1FCD                                __ptext102 1F7D  
                              __ptext111 1E99                                __ptext103 1146  
                              __ptext112 1452                                __ptext104 058B  
                              __ptext113 1070                                __ptext105 1EC6  
                              __ptext114 1EBA                                __ptext115 1F1A  
                              __ptext107 063E                                __ptext116 1E8E  
                              __ptext108 01A6                                __ptext109 1FDE  
                               ?___ftadd 003E                                _getRxData 16A7  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 0DA3  
                        _setRF_ReceiveGO 1F1A            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000C            __end_of_Buzzer_Initialization 1ED2  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 0024                       __end_of_TouchPower 1E3E  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 015B             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12F4            __end_of_setDimmerLights_AdjGo 1FBD  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00C4           __size_of_myMain_Initialization 0014  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 10BD  
                           _setRF_Enable 1398                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 1095                     __size_of_Buz_Counter 0011  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 1067  
                    __end_of_setLED_Main 150B                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F02  
                        SwPointSelect@sw 0021                                clear_ram0 1E4A  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0F5A  
    __end_of_DimmerLights_Initialization 1116              _DimmerLights_Initialization 10FF  
                     _CC2500_ClearRXFIFO 1E21                       _CC2500_ClearTXFIFO 1E25  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1F7D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1421                               ?_getRxData 0070  
                               _TMR0_ISR 063E                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1F27                         _Sw_DimmerAdjFunc 15D4  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1342              __end_of_CC2500_WriteCommand 1F8D  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 11FA  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 09C6                  __size_of_setDelayOff_GO 005D  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B9  
                           setSw_Main@sw 0069                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1EF6                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 16A7                    _DlyOff_Initialization 1EA4  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1E2D                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1F34                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1F41  
                   __size_of_Buzzer_Main 00B3                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 1146  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 1F27  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1216                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 128E                         ??_LedPointSelect 0020  
                               ___ftpack 0893                             _setSw_Status 1F50  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 14CB                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 07FF                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0075  
                               __ptext10 0A37                                 __ptext11 09C6  
                               __ptext20 16A7                                 __ptext12 15D4  
                               __ptext21 165F                                 __ptext13 1FBD  
                               __ptext30 04D7                                 __ptext22 0E34  
                               __ptext14 1FAD                                 __ptext31 03E1  
                               __ptext23 0D13                                 __ptext15 1F34  
                               __ptext40 1E5E                                 __ptext32 131A  
                               __ptext24 17A3                                 __ptext16 1E75  
                               __ptext41 11C4                                 __ptext33 1067  
                               __ptext25 136C                                 __ptext17 1E39  
                               __ptext50 14CB                                 __ptext42 112E  
                               __ptext34 154B                                 __ptext26 150B  
                               __ptext18 1E35                                 __ptext51 1EF6  
                               __ptext43 1F27                                 __ptext35 08F4  
                               __ptext27 0800                                 __ptext19 0EC6  
                               __ptext60 1EAF                                 __ptext52 1FEF  
                               __ptext44 1191                                 __ptext36 1F5F  
                               __ptext28 12D2                                 __ptext61 0C0C  
                               __ptext53 158F                                 __ptext45 1F0E  
                               __ptext37 11DF                                 __ptext29 1748  
                               __ptext70 1E50                                 __ptext62 148E  
                               __ptext54 0958                                 __ptext46 1E3E  
                               __ptext38 1232                                 __ptext71 1E6D  
                               __ptext63 0DA3                                 __ptext55 1EEA  
                               __ptext47 1E2D                                 __ptext39 1E31  
                               __ptext80 06EB                                 __ptext72 0B93  
                               __ptext64 0835                                 __ptext56 02E9  
                               __ptext48 1E57                                 __ptext81 128E  
                               __ptext73 0F5A                                 __ptext65 12B0  
                               __ptext57 1421                                 __ptext49 1F02  
                               __ptext90 1EA4                                 __ptext82 0893  
                               __ptext74 1EDE                                 __ptext66 1116  
                               __ptext58 1E85                                 __ptext91 10E8  
                               __ptext83 1F41                                 __ptext75 1F50  
                               __ptext67 11AA                                 __ptext59 1178  
                               __ptext92 10BD                                 __ptext84 10D2  
                               __ptext76 1095                                 __ptext68 10FF  
                               __ptext93 1E29                                 __ptext85 1F9D  
                               __ptext77 0794                                 __ptext69 13C4  
                               __ptext94 13F1                                 __ptext86 1F8D  
                               __ptext78 1619                                 __ptext95 1342  
                               __ptext87 1082                                 __ptext79 0C8C  
                               __ptext96 124F                                 __ptext88 0AA9  
                               __ptext97 115F                                 __ptext89 1E65  
                               __ptext98 1ED2                                 __ptext99 12F4  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1F50  
          __end_of_Dimmer_Initialization 1E57             __end_of_setDimmerLights_Main 0C8C  
               ??_setDimmerLights_IntrGO 0072                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0054  
                            _setRF_Learn 1F6E                 __end_of_CC2500_SIDLEMode 1E2D  
                         _setRF_RxStatus 1F5F               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 10FF               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1116                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                          _CC2500_ReadByte 1232  
                     _CC2500_InitPATable 124F      __size_of_getDimmerLights_StatusFlag 001A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0F5A  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 13F1              __end_of_Flash_Memory_Modify 09C6  
                      ??_getPercentValue 0059                              _setLog_Code 165F  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 1E8E  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 115F  
                     __end_of_setSw_Main 01A6                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 136C  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1F6E                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13F1  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13C4  
            __end_of_setDimmerLights_Adj 14CB                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0028                        _RF_Initialization 1E31  
   __size_of_setDimmerLights_IntrControl 0143                     _Flash_Memory_Erasing 1EEA  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 1E6D                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E75  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 17A3         __size_of_setControl_Lights_Table 0092  
                 __end_of_DelayTimejudge 1398                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 131A  
               __end_of_Sw_DimmerAdjFunc 1619                  __end_of_CC2500_ReadByte 124F  
           __end_of_setSw_Initialization 1E7D                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 131A  
             __end_of_LED_Initialization 1F02         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072          __size_of_setDimmerLights_IntrGO 003C  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E35                 __end_of_Sw_DimmerOffFunc 0A37  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 0958  
                  __end_of_CC2500_TxData 158F                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1421  
