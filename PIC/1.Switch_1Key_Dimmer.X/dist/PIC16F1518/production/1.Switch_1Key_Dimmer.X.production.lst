

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Oct 05 19:34:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	intentry,global,class=CODE,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055                           
  2056                           	psect	idataBANK3
  2057  19F2                     __pidataBANK3:	
  2058                           
  2059                           ;initializer for __product
  2060  19F2  3463               	retlw	99
  2061  19F3  3402               	retlw	2
  2062  19F4  3400               	retlw	0
  2063  19F5  3400               	retlw	0
  2064  19F6  3400               	retlw	0
  2065  19F7  3400               	retlw	0
  2066  19F8  3400               	retlw	0
  2067  19F9  3400               	retlw	0
  2068  19FA  3400               	retlw	0
  2069  19FB  3400               	retlw	0
  2070  19FC  3400               	retlw	0
  2071  19FD  3400               	retlw	0
  2072  19FE  34FF               	retlw	255
  2073  19FF  34FF               	retlw	255
  2074  1A00  34FF               	retlw	255
  2075  1A01  3400               	retlw	0
  2076  1A02  3400               	retlw	0
  2077  1A03  3400               	retlw	0
  2078  1A04  3400               	retlw	0
  2079  1A05  3400               	retlw	0
  2080  1A06  3400               	retlw	0
  2081  1A07  3400               	retlw	0
  2082  1A08  3400               	retlw	0
  2083  1A09  3400               	retlw	0
  2084  1A0A  3400               	retlw	0
  2085  1A0B  3400               	retlw	0
  2086  1A0C  3400               	retlw	0
  2087  1A0D  3400               	retlw	0
  2088  1A0E  3400               	retlw	0
  2089  1A0F  3400               	retlw	0
  2090  1A10  3400               	retlw	0
  2091  1A11  3400               	retlw	0
  2092                           
  2093                           	psect	stringtext
  2094  1800                     __pstringtext:	
  2095  1800                     _CC2500_registers_address:	
  2096  1800  3403               	retlw	3
  2097  1801  3416               	retlw	22
  2098  1802  3417               	retlw	23
  2099  1803  341E               	retlw	30
  2100  1804  341F               	retlw	31
  2101  1805  3420               	retlw	32
  2102  1806  342A               	retlw	42
  2103  1807  342B               	retlw	43
  2104  1808  340B               	retlw	11
  2105  1809  340C               	retlw	12
  2106  180A  340D               	retlw	13
  2107  180B  340E               	retlw	14
  2108  180C  340F               	retlw	15
  2109  180D  3410               	retlw	16
  2110  180E  3411               	retlw	17
  2111  180F  3412               	retlw	18
  2112  1810  3413               	retlw	19
  2113  1811  3414               	retlw	20
  2114  1812  340A               	retlw	10
  2115  1813  3415               	retlw	21
  2116  1814  3421               	retlw	33
  2117  1815  3422               	retlw	34
  2118  1816  3418               	retlw	24
  2119  1817  3419               	retlw	25
  2120  1818  341A               	retlw	26
  2121  1819  341B               	retlw	27
  2122  181A  341C               	retlw	28
  2123  181B  341D               	retlw	29
  2124  181C  3423               	retlw	35
  2125  181D  3424               	retlw	36
  2126  181E  3425               	retlw	37
  2127  181F  3426               	retlw	38
  2128  1820  3429               	retlw	41
  2129  1821  342C               	retlw	44
  2130  1822  342D               	retlw	45
  2131  1823  342E               	retlw	46
  2132  1824  3400               	retlw	0
  2133  1825  3401               	retlw	1
  2134  1826  3402               	retlw	2
  2135  1827  3407               	retlw	7
  2136  1828  3408               	retlw	8
  2137  1829  3409               	retlw	9
  2138  182A  3406               	retlw	6
  2139  182B  3404               	retlw	4
  2140  182C  3405               	retlw	5
  2141  182D  3427               	retlw	39
  2142  182E  3428               	retlw	40
  2143  182F                     __end_of_CC2500_registers_address:	
  2144  182F                     _CC2500_rfSettings:	
  2145  182F  3407               	retlw	7
  2146  1830  3407               	retlw	7
  2147  1831  3430               	retlw	48
  2148  1832  3487               	retlw	135
  2149  1833  346B               	retlw	107
  2150  1834  34F8               	retlw	248
  2151  1835  347F               	retlw	127
  2152  1836  343F               	retlw	63
  2153  1837  3409               	retlw	9
  2154  1838  3400               	retlw	0
  2155  1839  345C               	retlw	92
  2156  183A  34A7               	retlw	167
  2157  183B  3462               	retlw	98
  2158  183C  3486               	retlw	134
  2159  183D  3483               	retlw	131
  2160  183E  3403               	retlw	3
  2161  183F  3422               	retlw	34
  2162  1840  34F8               	retlw	248
  2163  1841  3400               	retlw	0
  2164  1842  3444               	retlw	68
  2165  1843  34B6               	retlw	182
  2166  1844  3410               	retlw	16
  2167  1845  3418               	retlw	24
  2168  1846  341D               	retlw	29
  2169  1847  341C               	retlw	28
  2170  1848  34C7               	retlw	199
  2171  1849  3400               	retlw	0
  2172  184A  34B2               	retlw	178
  2173  184B  34EA               	retlw	234
  2174  184C  340A               	retlw	10
  2175  184D  3400               	retlw	0
  2176  184E  3411               	retlw	17
  2177  184F  3459               	retlw	89
  2178  1850  3488               	retlw	136
  2179  1851  3431               	retlw	49
  2180  1852  340B               	retlw	11
  2181  1853  342F               	retlw	47
  2182  1854  342E               	retlw	46
  2183  1855  3406               	retlw	6
  2184  1856  3404               	retlw	4
  2185  1857  3405               	retlw	5
  2186  1858  3400               	retlw	0
  2187  1859  3430               	retlw	48
  2188  185A  34D3               	retlw	211
  2189  185B  3491               	retlw	145
  2190  185C  3441               	retlw	65
  2191  185D  3400               	retlw	0
  2192  185E                     __end_of_CC2500_rfSettings:	
  2193  185E                     _CC2500_patable_vaule:	
  2194  185E  34FE               	retlw	254
  2195  185F  34FE               	retlw	254
  2196  1860  34FE               	retlw	254
  2197  1861  34FE               	retlw	254
  2198  1862  34FE               	retlw	254
  2199  1863  34FE               	retlw	254
  2200  1864  34FE               	retlw	254
  2201  1865  34FE               	retlw	254
  2202  1866                     __end_of_CC2500_patable_vaule:	
  2203                           
  2204                           	psect	nvCOMMON
  2205  007D                     __pnvCOMMON:	
  2206  007D                     _product:	
  2207  007D                     	ds	1
  2208                           
  2209                           	psect	nvBANK1
  2210  00EA                     __pnvBANK1:	
  2211  00EA                     _Memory:	
  2212  00EA                     	ds	1
  2213  00EB                     _Timer0:	
  2214  00EB                     	ds	1
  2215  00EC                     _WDT:	
  2216  00EC                     	ds	1
  2217  00ED                     _myMain:	
  2218  00ED                     	ds	1
  2219  000C                     _PORTA	set	12
  2220  000D                     _PORTB	set	13
  2221  000E                     _PORTC	set	14
  2222  0015                     _TMR0	set	21
  2223  005F                     _GIE	set	95
  2224  005C                     _INTE	set	92
  2225  0059                     _INTF	set	89
  2226  005B                     _IOCIE	set	91
  2227  0058                     _IOCIF	set	88
  2228  005E                     _PEIE	set	94
  2229  0060                     _RA0	set	96
  2230  0063                     _RA3	set	99
  2231  0064                     _RA4	set	100
  2232  0066                     _RA6	set	102
  2233  0067                     _RA7	set	103
  2234  0068                     _RB0	set	104
  2235  0069                     _RB1	set	105
  2236  006A                     _RB2	set	106
  2237  006B                     _RB3	set	107
  2238  006C                     _RB4	set	108
  2239  006D                     _RB5	set	109
  2240  0070                     _RC0	set	112
  2241  0071                     _RC1	set	113
  2242  0072                     _RC2	set	114
  2243  0074                     _RC4	set	116
  2244  0075                     _RC5	set	117
  2245  0077                     _RC7	set	119
  2246  005D                     _TMR0IE	set	93
  2247  005A                     _TMR0IF	set	90
  2248  009D                     _ADCON0	set	157
  2249  009E                     _ADCON1	set	158
  2250  009C                     _ADRESH	set	156
  2251  009B                     _ADRESL	set	155
  2252  0095                     _OPTION_REG	set	149
  2253  0099                     _OSCCON	set	153
  2254  008C                     _TRISA	set	140
  2255  008D                     _TRISB	set	141
  2256  008E                     _TRISC	set	142
  2257  0097                     _WDTCON	set	151
  2258  04E9                     _GO_nDONE	set	1257
  2259  0117                     _FVRCON	set	279
  2260  010C                     _LATA	set	268
  2261  010D                     _LATB	set	269
  2262  010E                     _LATC	set	270
  2263  018C                     _ANSELA	set	396
  2264  018D                     _ANSELB	set	397
  2265  018E                     _ANSELC	set	398
  2266  0192                     _PMADRH	set	402
  2267  0191                     _PMADRL	set	401
  2268  0196                     _PMCON2	set	406
  2269  0194                     _PMDATH	set	404
  2270  0193                     _PMDATL	set	403
  2271  0CAE                     _CFGS	set	3246
  2272  0CAC                     _FREE	set	3244
  2273  0CAD                     _LWLO	set	3245
  2274  0CA8                     _RD	set	3240
  2275  0CA9                     _WR	set	3241
  2276  0CAA                     _WREN	set	3242
  2277  1068                     _WPUB0	set	4200
  2278  1069                     _WPUB1	set	4201
  2279  106A                     _WPUB2	set	4202
  2280  0396                     _IOCBF	set	918
  2281  0395                     _IOCBN	set	917
  2282  0394                     _IOCBP	set	916
  2283  1CB2                     _IOCBF2	set	7346
  2284                           
  2285                           ; #config settings
  2286  0000                     
  2287                           	psect	cinit
  2288  0018                     start_initialization:	
  2289  0018                     __initialization:	
  2290                           
  2291                           ; Clear objects allocated to BITCOMMON
  2292  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2293                           
  2294                           ; Clear objects allocated to COMMON
  2295  0019  01F7               	clrf	__pbssCOMMON& (0+127)
  2296  001A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2297  001B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  2298  001C  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  2299  001D  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  2300                           
  2301                           ; Clear objects allocated to BANK1
  2302  001E  30A0               	movlw	low __pbssBANK1
  2303  001F  0084               	movwf	4
  2304  0020  3000               	movlw	high __pbssBANK1
  2305  0021  0085               	movwf	5
  2306  0022  304A               	movlw	74
  2307  0023  31A5  25B4  3180   	fcall	clear_ram0
  2308                           
  2309                           ; Clear objects allocated to BANK2
  2310  0026  3020               	movlw	low __pbssBANK2
  2311  0027  0084               	movwf	4
  2312  0028  3001               	movlw	high __pbssBANK2
  2313  0029  0085               	movwf	5
  2314  002A  304B               	movlw	75
  2315  002B  31A5  25B4  3180   	fcall	clear_ram0
  2316                           
  2317                           ; Clear objects allocated to BANK3
  2318  002E  30A0               	movlw	low __pbssBANK3
  2319  002F  0084               	movwf	4
  2320  0030  3001               	movlw	high __pbssBANK3
  2321  0031  0085               	movwf	5
  2322  0032  3025               	movlw	37
  2323  0033  31A5  25B4  3180   	fcall	clear_ram0
  2324                           
  2325                           ; Clear objects allocated to BANK4
  2326  0036  3020               	movlw	low __pbssBANK4
  2327  0037  0084               	movwf	4
  2328  0038  3002               	movlw	high __pbssBANK4
  2329  0039  0085               	movwf	5
  2330  003A  3047               	movlw	71
  2331  003B  31A5  25B4  3180   	fcall	clear_ram0
  2332                           
  2333                           ; Initialize objects allocated to BANK3
  2334  003E  30F2               	movlw	low __pidataBANK3
  2335  003F  0084               	movwf	4
  2336  0040  3099               	movlw	(high __pidataBANK3)| (0+128)
  2337  0041  0085               	movwf	5
  2338  0042  30C5               	movlw	low __pdataBANK3
  2339  0043  0086               	movwf	6
  2340  0044  3001               	movlw	high __pdataBANK3
  2341  0045  0087               	movwf	7
  2342  0046  3020               	movlw	32
  2343  0047  31A5  25AE         	fcall	init_ram
  2344  0049                     end_of_initialization:	
  2345                           ;End of C runtime variable initialization code
  2346                           
  2347  0049                     __end_of__initialization:	
  2348  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2349  004A  0020               	movlb	0
  2350  004B  3195  2D9B         	ljmp	_main	;jump to C main() function
  2351                           
  2352                           	psect	bitbssCOMMON
  2353  03E0                     __pbitbssCOMMON:	
  2354  03E0                     _Receive_OK:	
  2355  03E0                     	ds	1
  2356  03E1                     _Transceive_OK:	
  2357  03E1                     	ds	1
  2358                           
  2359                           	psect	bssCOMMON
  2360  0077                     __pbssCOMMON:	
  2361  0077                     _DimmerLights:	
  2362  0077                     	ds	1
  2363  0078                     _DimmerLights11:	
  2364  0078                     	ds	1
  2365  0079                     _Sw:	
  2366  0079                     	ds	1
  2367  007A                     _Temp:	
  2368  007A                     	ds	1
  2369  007B                     _Load:	
  2370  007B                     	ds	1
  2371                           
  2372                           	psect	bssBANK1
  2373  00A0                     __pbssBANK1:	
  2374  00A0                     _RF_Data:	
  2375  00A0                     	ds	21
  2376  00B5                     _RF_Count:	
  2377  00B5                     	ds	2
  2378  00B7                     _Buz:	
  2379  00B7                     	ds	1
  2380  00B8                     _CRC:	
  2381  00B8                     	ds	1
  2382  00B9                     _DelayOff:	
  2383  00B9                     	ds	1
  2384  00BA                     _Dimmer:	
  2385  00BA                     	ds	1
  2386  00BB                     _DimmerLightsIntr:	
  2387  00BB                     	ds	1
  2388  00BC                     _LED:	
  2389  00BC                     	ds	1
  2390  00BD                     _PF:	
  2391  00BD                     	ds	1
  2392  00BE                     _RF:	
  2393  00BE                     	ds	1
  2394  00BF                     _RFSW:	
  2395  00BF                     	ds	1
  2396  00C0                     _RSSI:	
  2397  00C0                     	ds	1
  2398  00C1                     _Rx_Length:	
  2399  00C1                     	ds	1
  2400  00C2                     _SPI0Buffer:	
  2401  00C2                     	ds	1
  2402  00C3                     _Tx_Length:	
  2403  00C3                     	ds	1
  2404  00C4                     _r_address:	
  2405  00C4                     	ds	1
  2406  00C5                     _r_data:	
  2407  00C5                     	ds	1
  2408  00C6                     _s_data:	
  2409  00C6                     	ds	1
  2410  00C7                     _VarTimer0:	
  2411  00C7                     	ds	9
  2412  00D0                     _DlySw1:	
  2413  00D0                     	ds	5
  2414  00D5                     _VarErrLED:	
  2415  00D5                     	ds	4
  2416  00D9                     _VarLED1:	
  2417  00D9                     	ds	4
  2418  00DD                     _VarLED2:	
  2419  00DD                     	ds	4
  2420  00E1                     _Dimmer1:	
  2421  00E1                     	ds	3
  2422  00E4                     _RF1:	
  2423  00E4                     	ds	3
  2424  00E7                     __WDT:	
  2425  00E7                     	ds	2
  2426  00E9                     _RFSW1:	
  2427  00E9                     	ds	1
  2428                           
  2429                           	psect	bssBANK2
  2430  0120                     __pbssBANK2:	
  2431  0120                     __myMain:	
  2432  0120                     	ds	17
  2433  0131                     _DimmerLights1:	
  2434  0131                     	ds	15
  2435  0140                     _Temp1:	
  2436  0140                     	ds	14
  2437  014E                     _Buz1:	
  2438  014E                     	ds	12
  2439  015A                     _Sw1:	
  2440  015A                     	ds	9
  2441  0163                     _PF1:	
  2442  0163                     	ds	8
  2443                           
  2444                           	psect	bssBANK3
  2445  01A0                     __pbssBANK3:	
  2446  01A0                     _VarMemory:	
  2447  01A0                     	ds	37
  2448                           
  2449                           	psect	dataBANK3
  2450  01C5                     __pdataBANK3:	
  2451  01C5                     __product:	
  2452  01C5                     	ds	32
  2453                           
  2454                           	psect	bssBANK4
  2455  0220                     __pbssBANK4:	
  2456  0220                     _Load1:	
  2457  0220                     	ds	71
  2458                           
  2459                           	psect	clrtext
  2460  25B4                     clear_ram0:	
  2461                           ;	Called with FSR0 containing the base address, and
  2462                           ;	WREG with the size to clear
  2463                           
  2464  25B4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2465  25B5                     clrloop0:	
  2466  25B5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2467  25B6  3101               	addfsr 0,1
  2468  25B7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2469  25B8  2DB5               	goto	clrloop0	;have we reached the end yet?
  2470  25B9  3400               	retlw	0	;all done for this memory range, return
  2471                           
  2472                           	psect	inittext
  2473  25AE                     init_ram:	
  2474  25AE  00FE               	movwf	126
  2475  25AF                     initloop:	
  2476  25AF  0012               	moviw fsr0++
  2477  25B0  001E               	movwi fsr1++
  2478  25B1  0BFE               	decfsz	126,f
  2479  25B2  2DAF               	goto	initloop
  2480  25B3  3400               	retlw	0
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0070                     __pcstackCOMMON:	
  2484  0070                     ?_CC2500_WriteByte:	
  2485  0070                     ?_CC2500_WriteCommand:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ReadStatus:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ReadByte:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_PowerRST:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_InitSetREG:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_InitPATable:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_ClearTXFIFO:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_ClearRXFIFO:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_FrequencyCabr:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_SIDLEMode:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_DlyOff_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_DlyOff_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setTxData:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setDimmerLights_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_Dimmer_Initialization:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setLoad_GO:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setDimmerLights_Main:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_ERROR:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setLoad_Count:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setLED_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Fosc_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_IO_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_TMR0_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_ADC_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_INT_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_IOC_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Set:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ??_IOC_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_TMR0_ISR:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_INT_ISR:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Flash_Memory_Write:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_Flash_Memory_Modify:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_WDT_Clearing:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setLoad_AH_AL_Restore:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setLoad_Exceptions:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setSw_Enable:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setTemp_Initialization:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setTemp_Main:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setOverTemp_Exceptions:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setPowerFault_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setPowerFault_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setPowerFault_Exceptions:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setRF_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setRF_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_getRxData:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_RF_RxDisable:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setLog_Code:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setControl_Lights_Table:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setRFSW_Control:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setRFSW_AdjControl:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setRF_DimmerValue:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setSw_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setSw_Main:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_Sw_DimmerOnFunc:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Sw_DimmerAdjFunc:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Sw_DimmerOffFunc:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_myMain_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_my_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Buzzer_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Buzzer_Main:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_CC2500_TxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_CC2500_RxData:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_CC2500_PowerOnInitial:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DelayOffPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DelayOff_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_DelayOff_Main:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerLightsPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DimmerLights_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_DimmerLights_Close:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerLights_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_DimmerLights_Exceptions:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setDimmerLights_AdjRF:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_LedPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_LED_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_LED_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Mcu_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_ISR:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setDimmerReClock:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ??_setDimmerReClock:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setINT_GO:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Flash_Memory_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Unlock:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Erasing:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_WDT_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Load_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_getLoad_AD:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Load_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setLoad_Enable:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Temp_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setTemp_Enable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getTemp_AD:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Temp_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_PowerFault_Initialization:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_PowerFault_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_getPowerFault_AD:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_RfPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_RF_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_RF_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_RfSWPointSelect:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_TouchPower:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_SwPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_Switch_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_Switch_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?i1_setLoad_StatusOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?i1_RfPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ??i1_RfPointSelect:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayTimejudge:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_getDimmerLights_StatusFlag:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ?_getPercentValue:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0070                     ?_Flash_Memory_Read:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824  0070                     ?_getTemp_Safe:	
  2825                           ; 1 bytes @ 0x0
  2826                           
  2827  0070                     ?_getPF_Safe:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830  0070                     ?_setPercentValue:	
  2831                           ; 1 bytes @ 0x0
  2832                           
  2833  0070                     ?_getLoad_Safe:	
  2834                           ; 1 bytes @ 0x0
  2835                           
  2836  0070                     setRF_Initialization@rf:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0070                     i1setLoad_StatusOff@command:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x0
  2844  0070                     	ds	1
  2845  0071                     ??i1_setLoad_StatusOff:	
  2846  0071                     i1setLoad_StatusOff@lights:	
  2847                           ; 0 bytes @ 0x1
  2848                           
  2849  0071                     i1RfPointSelect@rf:	
  2850                           ; 1 bytes @ 0x1
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x1
  2854  0071                     	ds	1
  2855  0072                     ??_TMR0_ISR:	
  2856  0072                     ?_setRF_ReceiveGO:	
  2857                           ; 0 bytes @ 0x2
  2858                           
  2859  0072                     setRF_ReceiveGO@command:	
  2860                           ; 0 bytes @ 0x2
  2861                           
  2862                           
  2863                           ; 1 bytes @ 0x2
  2864  0072                     	ds	1
  2865  0073                     ??_setRF_ReceiveGO:	
  2866  0073                     setRF_ReceiveGO@rf:	
  2867                           ; 0 bytes @ 0x3
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x3
  2871  0073                     	ds	1
  2872  0074                     ??_INT_ISR:	
  2873                           
  2874                           ; 0 bytes @ 0x4
  2875  0074                     	ds	2
  2876  0076                     ??_ISR:	
  2877                           
  2878                           ; 0 bytes @ 0x6
  2879  0076                     	ds	1
  2880                           
  2881                           	psect	cstackBANK0
  2882  0020                     __pcstackBANK0:	
  2883  0020                     ??_CC2500_WriteByte:	
  2884  0020                     ??_CC2500_ReadByte:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?_DelayTime_1us:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_DelayTimejudge:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Dimmer_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_getDimmerLights_StatusFlag:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_setLoad_GO:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ?_setLoad_StatusOff:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_setLoad_Count:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ?_setLoad_StatusOn:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Fosc_Set:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_IO_Set:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_TMR0_Set:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_ADC_Set:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_INT_Set:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_IOC_Set:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_WDT_Set:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_Flash_Memory_Read:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_Flash_Memory_Write:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_WDT_Clearing:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_setLoad_AH_AL_Restore:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_getTemp_Safe:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_getPF_Safe:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_setTemp_Initialization:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_setPowerFault_Initialization:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_setRF_Initialization:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_myMain_Initialization:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_Buzzer_Initialization:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_Buzzer_Main:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_DelayOffPointSelect:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_DimmerLightsPointSelect:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_LedPointSelect:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setINT_GO:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_Flash_Memory_Unlock:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_Flash_Memory_Erasing:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_WDT_Main:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_setLoad_Enable:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_getLoad_Safe:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_setTemp_Enable:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_RfPointSelect:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_RfSWPointSelect:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_TouchPower:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_SwPointSelect:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ?_getAD:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ?___wmul:	
  3014                           ; 2 bytes @ 0x0
  3015                           
  3016  0020                     ?___lwdiv:	
  3017                           ; 2 bytes @ 0x0
  3018                           
  3019  0020                     ?___ftpack:	
  3020                           ; 2 bytes @ 0x0
  3021                           
  3022  0020                     getDimmerLights_StatusFlag@Status:	
  3023                           ; 3 bytes @ 0x0
  3024                           
  3025  0020                     setINT_GO@command:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0020                     getAD@adcon1:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0020                     setLoad_Enable@command:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0020                     setLoad_GO@command:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0020                     setLoad_StatusOn@command:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040  0020                     setLoad_StatusOff@command:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043  0020                     setTemp_Enable@command:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046  0020                     DelayTime_1us@count:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0020                     ___wmul@multiplier:	
  3050                           ; 2 bytes @ 0x0
  3051                           
  3052  0020                     ___lwdiv@divisor:	
  3053                           ; 2 bytes @ 0x0
  3054                           
  3055  0020                     ___ftpack@arg:	
  3056                           ; 2 bytes @ 0x0
  3057                           
  3058                           
  3059                           ; 3 bytes @ 0x0
  3060  0020                     	ds	1
  3061  0021                     ??_setLoad_StatusOff:	
  3062  0021                     ??_setLoad_StatusOn:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     ??_DimmerLights_Close:	
  3066                           ; 0 bytes @ 0x1
  3067                           
  3068  0021                     ??_Mcu_Initialization:	
  3069                           ; 0 bytes @ 0x1
  3070                           
  3071  0021                     ??_Temp_Initialization:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0021                     ??_PowerFault_Initialization:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0021                     ??_RF_Initialization:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0021                     CC2500_WriteByte@loop_a:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0021                     CC2500_ReadByte@loop_b:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0021                     DelayOffPointSelect@sw:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0021                     DelayTimejudge@value:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0021                     DimmerLightsPointSelect@lights:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0021                     LedPointSelect@led:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0021                     Flash_Memory_Read@i:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0021                     Flash_Memory_Write@i:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0021                     setLoad_Count@command:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0021                     setLoad_StatusOn@lights:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0021                     setLoad_StatusOff@lights:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0021                     setLoad_AH_AL_Restore@i:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116  0021                     RfPointSelect@rf:	
  3117                           ; 1 bytes @ 0x1
  3118                           
  3119  0021                     RfSWPointSelect@sw:	
  3120                           ; 1 bytes @ 0x1
  3121                           
  3122  0021                     SwPointSelect@sw:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125                           
  3126                           ; 1 bytes @ 0x1
  3127  0021                     	ds	1
  3128  0022                     ??_CC2500_WriteCommand:	
  3129  0022                     ??_CC2500_ReadStatus:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0022                     ?_setRF_RxStatus:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0022                     ??_DelayTime_1us:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0022                     ?_CC2500_WriteREG:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0022                     ??_DlyOff_Initialization:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0022                     ?_setSw_Status:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0022                     ?_setRFSW_Status:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0022                     ?_setDimmerLights_Trigger:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0022                     ?_setDimmerLights_Switch:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0022                     ??_setTxData:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0022                     ??_setDimmerLights_Initialization:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0022                     ?_setDimmerLights_TriggerERROR:	
  3163                           ; 0 bytes @ 0x2
  3164                           
  3165  0022                     ?_setLED:	
  3166                           ; 0 bytes @ 0x2
  3167                           
  3168  0022                     ??_setLED_Main:	
  3169                           ; 0 bytes @ 0x2
  3170                           
  3171  0022                     ??_setSw_Enable:	
  3172                           ; 0 bytes @ 0x2
  3173                           
  3174  0022                     ?_setRF_Enable:	
  3175                           ; 0 bytes @ 0x2
  3176                           
  3177  0022                     ?_setDimmerLights_AdjGo:	
  3178                           ; 0 bytes @ 0x2
  3179                           
  3180  0022                     ?_setDimmerLights_TriggerAdj:	
  3181                           ; 0 bytes @ 0x2
  3182                           
  3183  0022                     ?_setDimmerLights_Clear:	
  3184                           ; 0 bytes @ 0x2
  3185                           
  3186  0022                     ??_Load_Initialization:	
  3187                           ; 0 bytes @ 0x2
  3188                           
  3189  0022                     ?_setRF_Learn:	
  3190                           ; 0 bytes @ 0x2
  3191                           
  3192  0022                     CC2500_WriteREG@value:	
  3193                           ; 0 bytes @ 0x2
  3194                           
  3195  0022                     DlyOff_Initialization@sw:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0022                     DelayTimejudge@i:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0022                     setDimmerLights_TriggerERROR@command:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0022                     setDimmerLights_Switch@command:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0022                     setDimmerLights_AdjGo@command:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0022                     setDimmerLights_Trigger@command:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0022                     setDimmerLights_TriggerAdj@command:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0022                     setDimmerLights_Clear@command:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0022                     setLED@command:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0022                     Flash_Memory_Read@address:	
  3223                           ; 1 bytes @ 0x2
  3224                           
  3225  0022                     setRF_Learn@command:	
  3226                           ; 1 bytes @ 0x2
  3227                           
  3228  0022                     setRF_RxStatus@command:	
  3229                           ; 1 bytes @ 0x2
  3230                           
  3231  0022                     setRF_Enable@command:	
  3232                           ; 1 bytes @ 0x2
  3233                           
  3234  0022                     setRFSW_Status@command:	
  3235                           ; 1 bytes @ 0x2
  3236                           
  3237  0022                     setSw_Enable@command:	
  3238                           ; 1 bytes @ 0x2
  3239                           
  3240  0022                     setSw_Status@command:	
  3241                           ; 1 bytes @ 0x2
  3242                           
  3243  0022                     DelayTime_1us@i:	
  3244                           ; 1 bytes @ 0x2
  3245                           
  3246  0022                     ___wmul@multiplicand:	
  3247                           ; 2 bytes @ 0x2
  3248                           
  3249  0022                     ___lwdiv@dividend:	
  3250                           ; 2 bytes @ 0x2
  3251                           
  3252                           
  3253                           ; 2 bytes @ 0x2
  3254  0022                     	ds	1
  3255  0023                     ??_setRF_RxStatus:	
  3256  0023                     ??_CC2500_WriteREG:	
  3257                           ; 0 bytes @ 0x3
  3258                           
  3259  0023                     ??_setSw_Status:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0023                     ??_setRFSW_Status:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0023                     ??_setDimmerLights_Trigger:	
  3266                           ; 0 bytes @ 0x3
  3267                           
  3268  0023                     ??_setDimmerLights_Switch:	
  3269                           ; 0 bytes @ 0x3
  3270                           
  3271  0023                     ??_setDimmerLights_TriggerERROR:	
  3272                           ; 0 bytes @ 0x3
  3273                           
  3274  0023                     ??_setLED:	
  3275                           ; 0 bytes @ 0x3
  3276                           
  3277  0023                     ??_setRF_Enable:	
  3278                           ; 0 bytes @ 0x3
  3279                           
  3280  0023                     ??_DelayOff_Initialization:	
  3281                           ; 0 bytes @ 0x3
  3282                           
  3283  0023                     ?_setDelayOff_GO:	
  3284                           ; 0 bytes @ 0x3
  3285                           
  3286  0023                     ??_setDimmerLights_AdjGo:	
  3287                           ; 0 bytes @ 0x3
  3288                           
  3289  0023                     ??_setDimmerLights_TriggerAdj:	
  3290                           ; 0 bytes @ 0x3
  3291                           
  3292  0023                     ??_setDimmerLights_Clear:	
  3293                           ; 0 bytes @ 0x3
  3294                           
  3295  0023                     ??_getAD:	
  3296                           ; 0 bytes @ 0x3
  3297                           
  3298  0023                     ??_setRF_Learn:	
  3299                           ; 0 bytes @ 0x3
  3300                           
  3301  0023                     CC2500_WriteCommand@command:	
  3302                           ; 0 bytes @ 0x3
  3303                           
  3304  0023                     CC2500_ReadStatus@status_addr:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0023                     setDelayOff_GO@command:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0023                     setDimmerLights_Initialization@lights:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0023                     setDimmerLights_TriggerERROR@lights:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0023                     setDimmerLights_Switch@lights:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0023                     setDimmerLights_AdjGo@lights:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0023                     setDimmerLights_Trigger@lights:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0023                     setDimmerLights_TriggerAdj@lights:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0023                     setDimmerLights_Clear@lights:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0023                     setLED@led:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     getAD@adcon0:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     Flash_Memory_Read@ret:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     setRF_Learn@rf:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     setRF_RxStatus@rf:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     setTxData@rf:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     setRF_Enable@rf:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     setRFSW_Status@sw:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setSw_Status@sw:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     ___ftpack@exp:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0x3
  3363  0023                     	ds	1
  3364  0024                     ??_CC2500_ClearTXFIFO:	
  3365  0024                     ??_CC2500_ClearRXFIFO:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0024                     ??_CC2500_SIDLEMode:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0024                     ?_setDimmerLights:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_setDimmerLights_ERROR:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_setLED_Initialization:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_Flash_Memory_Modify:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_RF_RxDisable:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_setSw_Initialization:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_Sw_DimmerAdjFunc:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??_CC2500_TxData:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??_CC2500_RxData:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     ??_DimmerLights_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_getLoad_AD:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_getTemp_AD:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_getPowerFault_AD:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??___wmul:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??___lwdiv:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     CC2500_WriteREG@w_addr:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     setDelayOff_GO@value:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     setDimmerLights@status:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0024                     setLED_Initialization@led:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0024                     setLED_Main@led:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0024                     RF_RxDisable@rf:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     setSw_Initialization@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0024                     Sw_DimmerAdjFunc@Idle:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0024                     ___ftpack@sign:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0024                     DelayTime_1us@j:	
  3444                           ; 1 bytes @ 0x4
  3445                           
  3446  0024                     ___wmul@product:	
  3447                           ; 2 bytes @ 0x4
  3448                           
  3449                           
  3450                           ; 2 bytes @ 0x4
  3451  0024                     	ds	1
  3452  0025                     ??_CC2500_InitSetREG:	
  3453  0025                     ??_CC2500_InitPATable:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0025                     ??_setDimmerLights:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0025                     ??___ftpack:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0025                     ??_setDelayOff_GO:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0025                     ??_LED_Initialization:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0025                     ??_LED_Main:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0025                     ??_Switch_Initialization:	
  3472                           ; 0 bytes @ 0x5
  3473                           
  3474  0025                     CC2500_TxData@loop_e:	
  3475                           ; 0 bytes @ 0x5
  3476                           
  3477  0025                     CC2500_RxData@loop_f:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0025                     setDimmerLights_ERROR@lights:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0025                     Sw_DimmerAdjFunc@sw:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0025                     ___lwdiv@quotient:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489                           
  3490                           ; 2 bytes @ 0x5
  3491  0025                     	ds	1
  3492  0026                     ??_CC2500_PowerRST:	
  3493  0026                     ??_CC2500_FrequencyCabr:	
  3494                           ; 0 bytes @ 0x6
  3495                           
  3496  0026                     ?_setBuz:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0026                     CC2500_InitSetREG@temp1:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0026                     CC2500_InitPATable@temp:	
  3503                           ; 1 bytes @ 0x6
  3504                           
  3505  0026                     setDimmerLights@lights:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0026                     Flash_Memory_Modify@i:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0026                     setBuz@time:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514                           
  3515                           ; 2 bytes @ 0x6
  3516  0026                     	ds	1
  3517  0027                     ??_Flash_Memory_Main:	
  3518  0027                     CC2500_InitSetREG@temp2:	
  3519                           ; 0 bytes @ 0x7
  3520                           
  3521  0027                     CC2500_InitPATable@loop_d:	
  3522                           ; 1 bytes @ 0x7
  3523                           
  3524  0027                     setDelayOff_GO@sw:	
  3525                           ; 1 bytes @ 0x7
  3526                           
  3527  0027                     ___lwdiv@counter:	
  3528                           ; 1 bytes @ 0x7
  3529                           
  3530                           
  3531                           ; 1 bytes @ 0x7
  3532  0027                     	ds	1
  3533  0028                     ??_setBuz:	
  3534  0028                     ?___awtoft:	
  3535                           ; 0 bytes @ 0x8
  3536                           
  3537  0028                     CC2500_InitSetREG@loop_c:	
  3538                           ; 3 bytes @ 0x8
  3539                           
  3540  0028                     getTemp_AD@channel:	
  3541                           ; 1 bytes @ 0x8
  3542                           
  3543  0028                     getPowerFault_AD@channel:	
  3544                           ; 1 bytes @ 0x8
  3545                           
  3546  0028                     ___awtoft@c:	
  3547                           ; 1 bytes @ 0x8
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0x8
  3551  0028                     	ds	1
  3552  0029                     ??_CC2500_PowerOnInitial:	
  3553  0029                     setBuz@count:	
  3554                           ; 0 bytes @ 0x9
  3555                           
  3556  0029                     getLoad_AD@channel:	
  3557                           ; 1 bytes @ 0x9
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0x9
  3561  0029                     	ds	1
  3562  002A                     ??_setLog_Code:	
  3563  002A                     ??_my_Main:	
  3564                           ; 0 bytes @ 0xA
  3565                           
  3566  002A                     ??_DimmerLights_Exceptions:	
  3567                           ; 0 bytes @ 0xA
  3568                           
  3569  002A                     DimmerLights_Exceptions@status:	
  3570                           ; 0 bytes @ 0xA
  3571                           
  3572  002A                     getLoad_AD@j:	
  3573                           ; 1 bytes @ 0xA
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0xA
  3577  002A                     	ds	1
  3578  002B                     ??_setLoad_Exceptions:	
  3579  002B                     ??_setOverTemp_Exceptions:	
  3580                           ; 0 bytes @ 0xB
  3581                           
  3582  002B                     ??_setPowerFault_Exceptions:	
  3583                           ; 0 bytes @ 0xB
  3584                           
  3585  002B                     ??___awtoft:	
  3586                           ; 0 bytes @ 0xB
  3587                           
  3588  002B                     getLoad_AD@i:	
  3589                           ; 0 bytes @ 0xB
  3590                           
  3591  002B                     setLog_Code@rf:	
  3592                           ; 1 bytes @ 0xB
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0xB
  3596  002B                     	ds	1
  3597  002C                     setLoad_Exceptions@command:	
  3598  002C                     setOverTemp_Exceptions@command:	
  3599                           ; 1 bytes @ 0xC
  3600                           
  3601  002C                     setPowerFault_Exceptions@command:	
  3602                           ; 1 bytes @ 0xC
  3603                           
  3604                           
  3605                           ; 1 bytes @ 0xC
  3606  002C                     	ds	1
  3607  002D                     ??_setTemp_Main:	
  3608  002D                     ??_setPowerFault_Main:	
  3609                           ; 0 bytes @ 0xD
  3610                           
  3611  002D                     ??_Load_Main:	
  3612                           ; 0 bytes @ 0xD
  3613                           
  3614  002D                     ___awtoft@sign:	
  3615                           ; 0 bytes @ 0xD
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0xD
  3619  002D                     	ds	1
  3620  002E                     ?___ftdiv:	
  3621  002E                     ?___ftmul:	
  3622                           ; 3 bytes @ 0xE
  3623                           
  3624  002E                     ___ftdiv@f2:	
  3625                           ; 3 bytes @ 0xE
  3626                           
  3627  002E                     ___ftmul@f1:	
  3628                           ; 3 bytes @ 0xE
  3629                           
  3630                           
  3631                           ; 3 bytes @ 0xE
  3632  002E                     	ds	1
  3633  002F                     ??_PowerFault_Main:	
  3634                           
  3635                           ; 0 bytes @ 0xF
  3636  002F                     	ds	1
  3637  0030                     ??_Temp_Main:	
  3638                           
  3639                           ; 0 bytes @ 0x10
  3640  0030                     	ds	1
  3641  0031                     Load_Main@i:	
  3642  0031                     ___ftdiv@f1:	
  3643                           ; 1 bytes @ 0x11
  3644                           
  3645  0031                     ___ftmul@f2:	
  3646                           ; 3 bytes @ 0x11
  3647                           
  3648                           
  3649                           ; 3 bytes @ 0x11
  3650  0031                     	ds	3
  3651  0034                     ??___ftdiv:	
  3652  0034                     ??___ftmul:	
  3653                           ; 0 bytes @ 0x14
  3654                           
  3655                           
  3656                           ; 0 bytes @ 0x14
  3657  0034                     	ds	4
  3658  0038                     ___ftdiv@cntr:	
  3659  0038                     ___ftmul@exp:	
  3660                           ; 1 bytes @ 0x18
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x18
  3664  0038                     	ds	1
  3665  0039                     ___ftdiv@f3:	
  3666  0039                     ___ftmul@f3_as_product:	
  3667                           ; 3 bytes @ 0x19
  3668                           
  3669                           
  3670                           ; 3 bytes @ 0x19
  3671  0039                     	ds	3
  3672  003C                     ___ftdiv@exp:	
  3673  003C                     ___ftmul@cntr:	
  3674                           ; 1 bytes @ 0x1C
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0x1C
  3678  003C                     	ds	1
  3679  003D                     ___ftdiv@sign:	
  3680  003D                     ___ftmul@sign:	
  3681                           ; 1 bytes @ 0x1D
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x1D
  3685  003D                     	ds	1
  3686  003E                     ?___ftadd:	
  3687  003E                     ___ftadd@f1:	
  3688                           ; 3 bytes @ 0x1E
  3689                           
  3690                           
  3691                           ; 3 bytes @ 0x1E
  3692  003E                     	ds	3
  3693  0041                     ___ftadd@f2:	
  3694                           
  3695                           ; 3 bytes @ 0x21
  3696  0041                     	ds	3
  3697  0044                     ??___ftadd:	
  3698                           
  3699                           ; 0 bytes @ 0x24
  3700  0044                     	ds	4
  3701  0048                     ___ftadd@sign:	
  3702                           
  3703                           ; 1 bytes @ 0x28
  3704  0048                     	ds	1
  3705  0049                     ___ftadd@exp2:	
  3706                           
  3707                           ; 1 bytes @ 0x29
  3708  0049                     	ds	1
  3709  004A                     ___ftadd@exp1:	
  3710                           
  3711                           ; 1 bytes @ 0x2A
  3712  004A                     	ds	1
  3713  004B                     ?___fttol:	
  3714  004B                     ___fttol@f1:	
  3715                           ; 4 bytes @ 0x2B
  3716                           
  3717                           
  3718                           ; 3 bytes @ 0x2B
  3719  004B                     	ds	4
  3720  004F                     ??___fttol:	
  3721                           
  3722                           ; 0 bytes @ 0x2F
  3723  004F                     	ds	4
  3724  0053                     ___fttol@sign1:	
  3725                           
  3726                           ; 1 bytes @ 0x33
  3727  0053                     	ds	1
  3728  0054                     ___fttol@lval:	
  3729                           
  3730                           ; 4 bytes @ 0x34
  3731  0054                     	ds	4
  3732  0058                     ___fttol@exp1:	
  3733                           
  3734                           ; 1 bytes @ 0x38
  3735  0058                     	ds	1
  3736  0059                     ??_getPercentValue:	
  3737  0059                     ??_setPercentValue:	
  3738                           ; 0 bytes @ 0x39
  3739                           
  3740  0059                     setPercentValue@value:	
  3741                           ; 0 bytes @ 0x39
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x39
  3745  0059                     	ds	1
  3746  005A                     setPercentValue@i:	
  3747                           
  3748                           ; 3 bytes @ 0x3A
  3749  005A                     	ds	1
  3750  005B                     getPercentValue@value:	
  3751                           
  3752                           ; 1 bytes @ 0x3B
  3753  005B                     	ds	1
  3754  005C                     getPercentValue@i:	
  3755                           
  3756                           ; 3 bytes @ 0x3C
  3757  005C                     	ds	1
  3758  005D                     ?_setRF_DimmerLights:	
  3759  005D                     ??_Flash_Memory_Initialization:	
  3760                           ; 0 bytes @ 0x3D
  3761                           
  3762  005D                     setRF_DimmerLights@on:	
  3763                           ; 0 bytes @ 0x3D
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x3D
  3767  005D                     	ds	1
  3768  005E                     ??_setRF_DimmerLights:	
  3769  005E                     Flash_Memory_Initialization@i:	
  3770                           ; 0 bytes @ 0x3E
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0x3E
  3774  005E                     	ds	1
  3775  005F                     ??_setDimmerLights_AdjRF:	
  3776                           
  3777                           ; 0 bytes @ 0x3F
  3778  005F                     	ds	1
  3779  0060                     setDimmerLights_AdjRF@lights:	
  3780  0060                     setRF_DimmerLights@status:	
  3781                           ; 1 bytes @ 0x40
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x40
  3785  0060                     	ds	1
  3786  0061                     ??_setRF_DimmerValue:	
  3787  0061                     setRF_DimmerLights@lights:	
  3788                           ; 0 bytes @ 0x41
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0x41
  3792  0061                     	ds	1
  3793  0062                     ??_DlyOff_Main:	
  3794  0062                     ?_setDimmerLights_Adj:	
  3795                           ; 0 bytes @ 0x42
  3796                           
  3797  0062                     ??_setRFSW_Control:	
  3798                           ; 0 bytes @ 0x42
  3799                           
  3800  0062                     ??_Sw_DimmerOnFunc:	
  3801                           ; 0 bytes @ 0x42
  3802                           
  3803  0062                     ??_Sw_DimmerOffFunc:	
  3804                           ; 0 bytes @ 0x42
  3805                           
  3806  0062                     setDimmerLights_Adj@status:	
  3807                           ; 0 bytes @ 0x42
  3808                           
  3809  0062                     Sw_DimmerOnFunc@Idle:	
  3810                           ; 1 bytes @ 0x42
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x42
  3814  0062                     	ds	1
  3815  0063                     ??_setDimmerLights_Adj:	
  3816  0063                     setRFSW_Control@sw:	
  3817                           ; 0 bytes @ 0x43
  3818                           
  3819  0063                     setRF_DimmerValue@lights:	
  3820                           ; 1 bytes @ 0x43
  3821                           
  3822  0063                     Sw_DimmerOnFunc@sw:	
  3823                           ; 1 bytes @ 0x43
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0x43
  3827  0063                     	ds	1
  3828  0064                     ??_setRFSW_AdjControl:	
  3829  0064                     DlyOff_Main@sw:	
  3830                           ; 0 bytes @ 0x44
  3831                           
  3832  0064                     setDimmerLights_Adj@lights:	
  3833                           ; 1 bytes @ 0x44
  3834                           
  3835  0064                     Sw_DimmerOffFunc@sw:	
  3836                           ; 1 bytes @ 0x44
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x44
  3840  0064                     	ds	1
  3841  0065                     ??_setDimmerLights_Main:	
  3842  0065                     ??_setSw_Main:	
  3843                           ; 0 bytes @ 0x45
  3844                           
  3845  0065                     ??_DelayOff_Main:	
  3846                           ; 0 bytes @ 0x45
  3847                           
  3848  0065                     setDimmerLights_Main@clear:	
  3849                           ; 0 bytes @ 0x45
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x45
  3853  0065                     	ds	1
  3854  0066                     setDimmerLights_Main@lights:	
  3855  0066                     setRFSW_AdjControl@sw:	
  3856                           ; 1 bytes @ 0x46
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x46
  3860  0066                     	ds	1
  3861  0067                     ??_setControl_Lights_Table:	
  3862  0067                     ??_DimmerLights_Main:	
  3863                           ; 0 bytes @ 0x47
  3864                           
  3865  0067                     setControl_Lights_Table@rf:	
  3866                           ; 0 bytes @ 0x47
  3867                           
  3868  0067                     _setSw_Main$4800:	
  3869                           ; 1 bytes @ 0x47
  3870                           
  3871                           
  3872                           ; 1 bytes @ 0x47
  3873  0067                     	ds	1
  3874  0068                     ??_getRxData:	
  3875  0068                     getRxData@rf:	
  3876                           ; 0 bytes @ 0x48
  3877                           
  3878  0068                     setSw_Main@sw:	
  3879                           ; 1 bytes @ 0x48
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x48
  3883  0068                     	ds	1
  3884  0069                     ??_setRF_Main:	
  3885  0069                     ??_Switch_Main:	
  3886                           ; 0 bytes @ 0x49
  3887                           
  3888                           
  3889                           ; 0 bytes @ 0x49
  3890  0069                     	ds	1
  3891  006A                     setRF_Main@rf:	
  3892                           
  3893                           ; 1 bytes @ 0x4A
  3894  006A                     	ds	1
  3895  006B                     _setRF_Main$3971:	
  3896                           
  3897                           ; 1 bytes @ 0x4B
  3898  006B                     	ds	1
  3899  006C                     ??_RF_Main:	
  3900  006C                     ?_main:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  006C                     main@argc:	
  3904                           ; 2 bytes @ 0x4C
  3905                           
  3906                           
  3907                           ; 2 bytes @ 0x4C
  3908  006C                     	ds	2
  3909  006E                     main@argv:	
  3910                           
  3911                           ; 2 bytes @ 0x4E
  3912  006E                     	ds	2
  3913  0070                     ??_main:	
  3914                           
  3915                           	psect	maintext
  3916  159B                     __pmaintext:	
  3917                           ; 0 bytes @ 0x50
  3918 ;;
  3919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3920 ;;
  3921 ;; *************** function _main *****************
  3922 ;; Defined at:
  3923 ;;		line 7 in file "../src/main_B1.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  argc            2   76[BANK0 ] int 
  3926 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2   76[BANK0 ] int 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 17F/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3942 ;;Total ram usage:        4 bytes
  3943 ;; Hardware stack levels required when called:   14
  3944 ;; This function calls:
  3945 ;;		_Buzzer_Initialization
  3946 ;;		_Buzzer_Main
  3947 ;;		_CC2500_PowerOnInitial
  3948 ;;		_DelayOff_Initialization
  3949 ;;		_DelayOff_Main
  3950 ;;		_DimmerLights_Initialization
  3951 ;;		_DimmerLights_Main
  3952 ;;		_Flash_Memory_Initialization
  3953 ;;		_Flash_Memory_Main
  3954 ;;		_LED_Initialization
  3955 ;;		_LED_Main
  3956 ;;		_Load_Initialization
  3957 ;;		_Load_Main
  3958 ;;		_Mcu_Initialization
  3959 ;;		_PowerFault_Initialization
  3960 ;;		_PowerFault_Main
  3961 ;;		_RF_Initialization
  3962 ;;		_RF_Main
  3963 ;;		_Switch_Initialization
  3964 ;;		_Switch_Main
  3965 ;;		_Temp_Initialization
  3966 ;;		_Temp_Main
  3967 ;;		_WDT_Main
  3968 ;;		_getLoad_AD
  3969 ;;		_getPowerFault_AD
  3970 ;;		_getTemp_AD
  3971 ;;		_myMain_Initialization
  3972 ;;		_my_Main
  3973 ;; This function is called by:
  3974 ;;		Startup code after reset
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _main
  3980  159B                     _main:	
  3981                           
  3982                           ;main_B1.c: 9: myMain_Initialization();
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3986  159B  3198  2074  3195   	fcall	_myMain_Initialization
  3987                           
  3988                           ;main_B1.c: 10: Mcu_Initialization();
  3989  159E  3199  2146  3195   	fcall	_Mcu_Initialization
  3990                           
  3991                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3992  15A1  318D  25EB  3195   	fcall	_Flash_Memory_Initialization
  3993                           
  3994                           ;main_B1.c: 12: LED_Initialization();
  3995  15A4  31A6  26C5  3195   	fcall	_LED_Initialization
  3996                           
  3997                           ;main_B1.c: 13: Buzzer_Initialization();
  3998  15A7  31A6  2665  3195   	fcall	_Buzzer_Initialization
  3999                           
  4000                           ;main_B1.c: 15: ;;
  4001                           ;main_B1.c: 16: Temp_Initialization();
  4002  15AA  31A5  2579  3195   	fcall	_Temp_Initialization
  4003                           
  4004                           ;main_B1.c: 17: Load_Initialization();
  4005  15AD  31A6  26EA  3195   	fcall	_Load_Initialization
  4006                           
  4007                           ;main_B1.c: 18: PowerFault_Initialization();
  4008  15B0  31A5  2573  3195   	fcall	_PowerFault_Initialization
  4009                           
  4010                           ;main_B1.c: 19: DelayOff_Initialization();
  4011  15B3  31A5  258B  3195   	fcall	_DelayOff_Initialization
  4012                           
  4013                           ;main_B1.c: 21: DimmerLights_Initialization();
  4014  15B6  31A6  26A1  3195   	fcall	_DimmerLights_Initialization
  4015                           
  4016                           ;main_B1.c: 22: ;;
  4017                           ;main_B1.c: 23: ;;
  4018                           ;main_B1.c: 24: ;;
  4019                           ;main_B1.c: 26: Switch_Initialization();
  4020  15B9  31A5  25F8  3195   	fcall	_Switch_Initialization
  4021                           
  4022                           ;main_B1.c: 27: RF_Initialization();
  4023  15BC  31A5  2597  3195   	fcall	_RF_Initialization
  4024                           
  4025                           ;main_B1.c: 28: CC2500_PowerOnInitial();
  4026  15BF  3198  2088  3195   	fcall	_CC2500_PowerOnInitial
  4027  15C2                     l9520:	
  4028                           ;main_B1.c: 29: ;;
  4029                           ;main_B1.c: 32: while (1) {
  4030                           
  4031                           
  4032                           ;main_B1.c: 33: if (myMain->PowerON) {
  4033  15C2  0021               	movlb	1	; select bank1
  4034  15C3  086D               	movf	_myMain^(0+128),w
  4035  15C4  0086               	movwf	6
  4036  15C5  3001               	movlw	1	; select bank2/3
  4037  15C6  0087               	movwf	7
  4038  15C7  1C01               	btfss	1,0
  4039  15C8  2DD8               	goto	l9524
  4040                           
  4041                           ;main_B1.c: 35: ;;
  4042                           ;main_B1.c: 39: getLoad_AD(0x05);
  4043  15C9  3005               	movlw	5
  4044  15CA  318A  225C  3195   	fcall	_getLoad_AD
  4045                           
  4046                           ;main_B1.c: 43: getTemp_AD(0x09);
  4047  15CD  3009               	movlw	9
  4048  15CE  3193  23E2  3195   	fcall	_getTemp_AD
  4049                           
  4050                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  4051  15D1  3011               	movlw	17
  4052  15D2  319F  27B5  3195   	fcall	_getPowerFault_AD
  4053                           
  4054                           ;main_B1.c: 59: Buzzer_Main();
  4055  15D5  3187  271B  3195   	fcall	_Buzzer_Main
  4056  15D8                     l9524:	
  4057                           
  4058                           ;main_B1.c: 61: }
  4059                           ;main_B1.c: 64: if (myMain->T0_Timerout) {
  4060  15D8  0021               	movlb	1	; select bank1
  4061  15D9  086D               	movf	_myMain^(0+128),w
  4062  15DA  0086               	movwf	6
  4063  15DB  3001               	movlw	1	; select bank2/3
  4064  15DC  0087               	movwf	7
  4065  15DD  1C81               	btfss	1,1
  4066  15DE  2DC2               	goto	l9520
  4067                           
  4068                           ;main_B1.c: 65: myMain->T0_Timerout = 0;
  4069  15DF  086D               	movf	_myMain^(0+128),w
  4070  15E0  0086               	movwf	6
  4071  15E1  3001               	movlw	1	; select bank2/3
  4072  15E2  0087               	movwf	7
  4073  15E3  1081               	bcf	1,1
  4074                           
  4075                           ;main_B1.c: 66: my_Main();
  4076  15E4  3196  26FC  3195   	fcall	_my_Main
  4077                           
  4078                           ;main_B1.c: 67: WDT_Main();
  4079  15E7  3199  217C  3195   	fcall	_WDT_Main
  4080                           
  4081                           ;main_B1.c: 68: ;;
  4082                           ;main_B1.c: 69: ;;
  4083                           ;main_B1.c: 70: if (myMain->PowerON) {
  4084  15EA  0021               	movlb	1	; select bank1
  4085  15EB  086D               	movf	_myMain^(0+128),w
  4086  15EC  0086               	movwf	6
  4087  15ED  3001               	movlw	1	; select bank2/3
  4088  15EE  0087               	movwf	7
  4089  15EF  1C01               	btfss	1,0
  4090  15F0  2DC2               	goto	l9520
  4091                           
  4092                           ;main_B1.c: 71: Flash_Memory_Main();
  4093  15F1  319E  264F  3195   	fcall	_Flash_Memory_Main
  4094                           
  4095                           ;main_B1.c: 73: LED_Main();
  4096  15F4  31A6  26D1  3195   	fcall	_LED_Main
  4097                           
  4098                           ;main_B1.c: 75: ;;
  4099                           ;main_B1.c: 76: Temp_Main();
  4100  15F7  31A5  257C  3195   	fcall	_Temp_Main
  4101                           
  4102                           ;main_B1.c: 77: Load_Main();
  4103  15FA  3180  204D  3195   	fcall	_Load_Main
  4104                           
  4105                           ;main_B1.c: 78: PowerFault_Main();
  4106  15FD  31A5  2576  3195   	fcall	_PowerFault_Main
  4107                           
  4108                           ;main_B1.c: 80: ;;
  4109                           ;main_B1.c: 81: DimmerLights_Main();
  4110  1600  31A5  25C1  3195   	fcall	_DimmerLights_Main
  4111                           
  4112                           ;main_B1.c: 82: Switch_Main();
  4113  1603  31A5  259F  3195   	fcall	_Switch_Main
  4114                           
  4115                           ;main_B1.c: 83: ;;
  4116                           ;main_B1.c: 84: ;;
  4117                           ;main_B1.c: 86: RF_Main();
  4118  1606  31A5  259B  3195   	fcall	_RF_Main
  4119                           
  4120                           ;main_B1.c: 87: DelayOff_Main();
  4121  1609  31A5  258F  3195   	fcall	_DelayOff_Main
  4122                           
  4123                           ;main_B1.c: 88: ;;
  4124  160C  2DC2               	goto	l9520
  4125  160D                     __end_of_main:	
  4126                           
  4127                           	psect	text1
  4128  16FC                     __ptext1:	
  4129 ;; *************** function _my_Main *****************
  4130 ;; Defined at:
  4131 ;;		line 124 in file "../src/main_B1.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;		None               void
  4138 ;; Registers used:
  4139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    6
  4152 ;; This function calls:
  4153 ;;		_setBuz
  4154 ;;		_setLoad_Enable
  4155 ;;		_setRF_Enable
  4156 ;;		_setSw_Enable
  4157 ;;		_setTemp_Enable
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _my_Main
  4165  16FC                     _my_Main:	
  4166                           
  4167                           ;main_B1.c: 126: if (myMain->PowerON == 0) {
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4171  16FC  0021               	movlb	1	; select bank1
  4172  16FD  086D               	movf	_myMain^(0+128),w
  4173  16FE  0086               	movwf	6
  4174  16FF  3001               	movlw	1	; select bank2/3
  4175  1700  0087               	movwf	7
  4176  1701  1801               	btfsc	1,0
  4177  1702  2F47               	goto	l9504
  4178                           
  4179                           ;main_B1.c: 127: myMain->PowerCount++;
  4180  1703  0A6D               	incf	_myMain^(0+128),w
  4181  1704  0086               	movwf	6
  4182  1705  3001               	movlw	1	; select bank2/3
  4183  1706  0087               	movwf	7
  4184  1707  3001               	movlw	1
  4185  1708  0781               	addwf	1,f
  4186  1709  3141               	addfsr 1,1
  4187  170A  1803               	skipnc
  4188  170B  0A81               	incf	1,f
  4189                           
  4190                           ;main_B1.c: 128: if (myMain->PowerCount == 150)
  4191  170C  0A6D               	incf	_myMain^(0+128),w
  4192  170D  0086               	movwf	6
  4193  170E  3001               	movlw	1	; select bank2/3
  4194  170F  0087               	movwf	7
  4195  1710  3F40               	moviw [0]fsr1
  4196  1711  3A96               	xorlw	150
  4197  1712  1D03               	skipz
  4198  1713  2F16               	goto	u9385
  4199  1714  3F41               	moviw [1]fsr1
  4200  1715  3A00               	xorlw	0
  4201  1716                     u9385:	
  4202  1716  1D03               	skipz
  4203  1717  0008               	return
  4204                           
  4205                           ;main_B1.c: 129: {
  4206                           ;main_B1.c: 130: myMain->PowerCount = 0;
  4207  1718  0A6D               	incf	_myMain^(0+128),w
  4208  1719  0086               	movwf	6
  4209  171A  3001               	movlw	1	; select bank2/3
  4210  171B  0087               	movwf	7
  4211  171C  3000               	movlw	0
  4212  171D  3FC0               	movwi [0]fsr1
  4213  171E  3FC1               	movwi [1]fsr1
  4214                           
  4215                           ;main_B1.c: 131: myMain->PowerON = 1;
  4216  171F  086D               	movf	_myMain^(0+128),w
  4217  1720  0086               	movwf	6
  4218  1721  3001               	movlw	1	; select bank2/3
  4219  1722  0087               	movwf	7
  4220  1723  1401               	bsf	1,0
  4221                           
  4222                           ;main_B1.c: 134: setTemp_Enable(1);
  4223  1724  3001               	movlw	1
  4224  1725  31A6  264E  3196   	fcall	_setTemp_Enable
  4225                           
  4226                           ;main_B1.c: 138: setLoad_Enable(1);
  4227  1728  3001               	movlw	1
  4228  1729  31A7  27CE  3196   	fcall	_setLoad_Enable
  4229                           
  4230                           ;main_B1.c: 144: setBuz(3, 50);
  4231  172C  3032               	movlw	50
  4232  172D  0020               	movlb	0	; select bank0
  4233  172E  00A6               	movwf	setBuz@time
  4234  172F  3000               	movlw	0
  4235  1730  00A7               	movwf	setBuz@time+1
  4236  1731  3003               	movlw	3
  4237  1732  3188  2019  3196   	fcall	_setBuz
  4238                           
  4239                           ;main_B1.c: 145: myMain->SelfTest = 1;
  4240  1735  0021               	movlb	1	; select bank1
  4241  1736  086D               	movf	_myMain^(0+128),w
  4242  1737  3E03               	addlw	3
  4243  1738  0086               	movwf	6
  4244  1739  3001               	movlw	1	; select bank2/3
  4245  173A  0087               	movwf	7
  4246  173B  1401               	bsf	1,0
  4247                           
  4248                           ;main_B1.c: 147: setSw_Enable(1);
  4249  173C  3001               	movlw	1
  4250  173D  31A7  2731  3196   	fcall	_setSw_Enable
  4251                           
  4252                           ;main_B1.c: 150: setRF_Enable(1, 1);
  4253  1740  0020               	movlb	0	; select bank0
  4254  1741  01A2               	clrf	setRF_Enable@command
  4255  1742  0AA2               	incf	setRF_Enable@command,f
  4256  1743  3001               	movlw	1
  4257  1744  319B  2362         	fcall	_setRF_Enable
  4258                           
  4259                           ;main_B1.c: 154: }
  4260                           ;main_B1.c: 155: } else {
  4261  1746  0008               	return
  4262  1747                     l9504:	
  4263                           
  4264                           ;main_B1.c: 163: myMain->Count1++;
  4265  1747  0021               	movlb	1	; select bank1
  4266  1748  086D               	movf	_myMain^(0+128),w
  4267  1749  3E06               	addlw	6
  4268  174A  0086               	movwf	6
  4269  174B  3001               	movlw	1	; select bank2/3
  4270  174C  0087               	movwf	7
  4271  174D  3001               	movlw	1
  4272  174E  0781               	addwf	1,f
  4273  174F  3141               	addfsr 1,1
  4274  1750  1803               	skipnc
  4275  1751  0A81               	incf	1,f
  4276                           
  4277                           ;main_B1.c: 164: if (myMain->Count1 == 100)
  4278  1752  086D               	movf	_myMain^(0+128),w
  4279  1753  3E06               	addlw	6
  4280  1754  0086               	movwf	6
  4281  1755  3001               	movlw	1	; select bank2/3
  4282  1756  0087               	movwf	7
  4283  1757  3F40               	moviw [0]fsr1
  4284  1758  3A64               	xorlw	100
  4285  1759  1D03               	skipz
  4286  175A  2F5D               	goto	u9395
  4287  175B  3F41               	moviw [1]fsr1
  4288  175C  3A00               	xorlw	0
  4289  175D                     u9395:	
  4290  175D  1D03               	skipz
  4291  175E  0008               	return
  4292                           
  4293                           ;main_B1.c: 165: {
  4294                           ;main_B1.c: 166: myMain->Count1 = 0;
  4295  175F  086D               	movf	_myMain^(0+128),w
  4296  1760  3E06               	addlw	6
  4297  1761  0086               	movwf	6
  4298  1762  3001               	movlw	1	; select bank2/3
  4299  1763  0087               	movwf	7
  4300  1764  3000               	movlw	0
  4301  1765  3FC0               	movwi [0]fsr1
  4302  1766  3FC1               	movwi [1]fsr1
  4303                           
  4304                           ;main_B1.c: 179: if (myMain->Flag) {
  4305  1767  086D               	movf	_myMain^(0+128),w
  4306  1768  0086               	movwf	6
  4307  1769  3001               	movlw	1	; select bank2/3
  4308  176A  0087               	movwf	7
  4309  176B  1D81               	btfss	1,3
  4310  176C  2F73               	goto	l9512
  4311                           
  4312                           ;main_B1.c: 180: myMain->Flag = 0;
  4313  176D  086D               	movf	_myMain^(0+128),w
  4314  176E  0086               	movwf	6
  4315  176F  3001               	movlw	1	; select bank2/3
  4316  1770  0087               	movwf	7
  4317  1771  1181               	bcf	1,3
  4318                           
  4319                           ;main_B1.c: 189: } else {
  4320  1772  0008               	return
  4321  1773                     l9512:	
  4322                           
  4323                           ;main_B1.c: 190: myMain->Flag = 1;
  4324  1773  086D               	movf	_myMain^(0+128),w
  4325  1774  0086               	movwf	6
  4326  1775  3001               	movlw	1	; select bank2/3
  4327  1776  0087               	movwf	7
  4328  1777  1581               	bsf	1,3
  4329  1778  0008               	return
  4330  1779                     __end_of_my_Main:	
  4331                           
  4332                           	psect	text2
  4333  264E                     __ptext2:	
  4334 ;; *************** function _setTemp_Enable *****************
  4335 ;; Defined at:
  4336 ;;		line 22 in file "../src/OverTemperature_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  command         1    wreg     unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  command         1    0[BANK0 ] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    4
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_my_Main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _setTemp_Enable
  4366  264E                     _setTemp_Enable:	
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _setTemp_Enable: [wregfsr1]
  4370                           ;setTemp_Enable@command stored from wreg
  4371  264E  0020               	movlb	0	; select bank0
  4372  264F  00A0               	movwf	setTemp_Enable@command
  4373                           
  4374                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
  4375  2650  087A               	movf	_Temp,w
  4376  2651  0086               	movwf	6
  4377  2652  3001               	movlw	1	; select bank2/3
  4378  2653  0087               	movwf	7
  4379  2654  0820               	movf	setTemp_Enable@command,w
  4380  2655  1001               	bcf	1,0
  4381  2656  1D03               	skipz
  4382  2657  1401               	bsf	1,0
  4383  2658  0008               	return
  4384  2659                     __end_of_setTemp_Enable:	
  4385                           
  4386                           	psect	text3
  4387  27CE                     __ptext3:	
  4388 ;; *************** function _setLoad_Enable *****************
  4389 ;; Defined at:
  4390 ;;		line 260 in file "../src/OverLoad_B1.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  command         1    wreg     unsigned char 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  command         1    0[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;		None               void
  4397 ;; Registers used:
  4398 ;;		wreg, fsr1l, fsr1h
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;Total ram usage:        1 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    4
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_my_Main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           
  4419                           ;psect for function _setLoad_Enable
  4420  27CE                     _setLoad_Enable:	
  4421                           
  4422                           ;incstack = 0
  4423                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4424                           ;setLoad_Enable@command stored from wreg
  4425  27CE  0020               	movlb	0	; select bank0
  4426  27CF  00A0               	movwf	setLoad_Enable@command
  4427                           
  4428                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4429  27D0  087B               	movf	_Load,w
  4430  27D1  0086               	movwf	6
  4431  27D2  3002               	movlw	2	; select bank4/5
  4432  27D3  0087               	movwf	7
  4433  27D4  0820               	movf	setLoad_Enable@command,w
  4434  27D5  1001               	bcf	1,0
  4435  27D6  1D03               	skipz
  4436  27D7  1401               	bsf	1,0
  4437                           
  4438                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4439  27D8  087B               	movf	_Load,w
  4440  27D9  0086               	movwf	6
  4441  27DA  3002               	movlw	2	; select bank4/5
  4442  27DB  0087               	movwf	7
  4443  27DC  1081               	bcf	1,1
  4444  27DD  0008               	return
  4445  27DE                     __end_of_setLoad_Enable:	
  4446                           
  4447                           	psect	text4
  4448  1874                     __ptext4:	
  4449 ;; *************** function _myMain_Initialization *****************
  4450 ;; Defined at:
  4451 ;;		line 112 in file "../src/main_B1.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;Total ram usage:        1 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _myMain_Initialization
  4481  1874                     _myMain_Initialization:	
  4482                           
  4483                           ;main_B1.c: 114: product = &_product;
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4487  1874  30C5               	movlw	__product& (0+255)
  4488  1875  0020               	movlb	0	; select bank0
  4489  1876  00A0               	movwf	??_myMain_Initialization
  4490  1877  0820               	movf	??_myMain_Initialization,w
  4491  1878  00FD               	movwf	_product
  4492                           
  4493                           ;main_B1.c: 115: product->Data[20] = 209;
  4494  1879  30D1               	movlw	209
  4495  187A  00A0               	movwf	??_myMain_Initialization
  4496  187B  087D               	movf	_product,w
  4497  187C  3E14               	addlw	20
  4498  187D  0086               	movwf	6
  4499  187E  3001               	movlw	1	; select bank2/3
  4500  187F  0087               	movwf	7
  4501  1880  0820               	movf	??_myMain_Initialization,w
  4502  1881  0081               	movwf	1
  4503                           
  4504                           ;main_B1.c: 118: myMain = &_myMain;
  4505  1882  3020               	movlw	__myMain& (0+255)
  4506  1883  00A0               	movwf	??_myMain_Initialization
  4507  1884  0820               	movf	??_myMain_Initialization,w
  4508  1885  0021               	movlb	1	; select bank1
  4509  1886  00ED               	movwf	_myMain^(0+128)
  4510  1887  0008               	return
  4511  1888                     __end_of_myMain_Initialization:	
  4512                           
  4513                           	psect	text5
  4514  13E2                     __ptext5:	
  4515 ;; *************** function _getTemp_AD *****************
  4516 ;; Defined at:
  4517 ;;		line 35 in file "../src/OverTemperature_B1.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  channel         1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  channel         1    8[BANK0 ] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;Total ram usage:        5 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    5
  4538 ;; This function calls:
  4539 ;;		_getAD
  4540 ;; This function is called by:
  4541 ;;		_main
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _getTemp_AD
  4547  13E2                     _getTemp_AD:	
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4551                           ;getTemp_AD@channel stored from wreg
  4552  13E2  0020               	movlb	0	; select bank0
  4553  13E3  00A8               	movwf	getTemp_AD@channel
  4554                           
  4555                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4556  13E4  087A               	movf	_Temp,w
  4557  13E5  0086               	movwf	6
  4558  13E6  3001               	movlw	1	; select bank2/3
  4559  13E7  0087               	movwf	7
  4560  13E8  1D01               	btfss	1,2
  4561  13E9  0008               	return
  4562                           
  4563                           ;OverTemperature_B1.c: 38: {
  4564                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4565  13EA  30F0               	movlw	240
  4566  13EB  00A4               	movwf	??_getTemp_AD
  4567  13EC  0824               	movf	??_getTemp_AD,w
  4568  13ED  00A0               	movwf	getAD@adcon1
  4569  13EE  0828               	movf	getTemp_AD@channel,w
  4570  13EF  3198  20B2  3193   	fcall	_getAD
  4571  13F2  087A               	movf	_Temp,w
  4572  13F3  3E0C               	addlw	12
  4573  13F4  0086               	movwf	6
  4574  13F5  3001               	movlw	1	; select bank2/3
  4575  13F6  0087               	movwf	7
  4576  13F7  0020               	movlb	0	; select bank0
  4577  13F8  0820               	movf	?_getAD,w
  4578  13F9  3FC0               	movwi [0]fsr1
  4579  13FA  0821               	movf	?_getAD+1,w
  4580  13FB  3FC1               	movwi [1]fsr1
  4581                           
  4582                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4583  13FC  087A               	movf	_Temp,w
  4584  13FD  3E0C               	addlw	12
  4585  13FE  0086               	movwf	6
  4586  13FF  3001               	movlw	1	; select bank2/3
  4587  1400  0087               	movwf	7
  4588  1401  3F40               	moviw [0]fsr1
  4589  1402  00A4               	movwf	??_getTemp_AD
  4590  1403  3F41               	moviw [1]fsr1
  4591  1404  00A5               	movwf	??_getTemp_AD+1
  4592  1405  087A               	movf	_Temp,w
  4593  1406  3E08               	addlw	8
  4594  1407  0086               	movwf	6
  4595  1408  3001               	movlw	1	; select bank2/3
  4596  1409  0087               	movwf	7
  4597  140A  3F40               	moviw [0]fsr1
  4598  140B  00A6               	movwf	??_getTemp_AD+2
  4599  140C  3F41               	moviw [1]fsr1
  4600  140D  00A7               	movwf	??_getTemp_AD+3
  4601  140E  0825               	movf	??_getTemp_AD+1,w
  4602  140F  0227               	subwf	??_getTemp_AD+3,w
  4603  1410  1D03               	skipz
  4604  1411  2C14               	goto	u9335
  4605  1412  0824               	movf	??_getTemp_AD,w
  4606  1413  0226               	subwf	??_getTemp_AD+2,w
  4607  1414                     u9335:	
  4608  1414  1803               	skipnc
  4609  1415  2C25               	goto	l9458
  4610                           
  4611                           ;OverTemperature_B1.c: 41: {
  4612                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4613  1416  087A               	movf	_Temp,w
  4614  1417  3E0C               	addlw	12
  4615  1418  0086               	movwf	6
  4616  1419  3001               	movlw	1	; select bank2/3
  4617  141A  0087               	movwf	7
  4618  141B  087A               	movf	_Temp,w
  4619  141C  3E08               	addlw	8
  4620  141D  0084               	movwf	4
  4621  141E  3001               	movlw	1	; select bank2/3
  4622  141F  0085               	movwf	5
  4623  1420  3F40               	moviw [0]fsr1
  4624  1421  3F80               	movwi [0]fsr0
  4625  1422  3F41               	moviw [1]fsr1
  4626  1423  3F81               	movwi [1]fsr0
  4627                           
  4628                           ;OverTemperature_B1.c: 43: }
  4629  1424  0008               	return
  4630  1425                     l9458:	
  4631                           
  4632                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4633  1425  087A               	movf	_Temp,w
  4634  1426  3E0C               	addlw	12
  4635  1427  0086               	movwf	6
  4636  1428  3001               	movlw	1	; select bank2/3
  4637  1429  0087               	movwf	7
  4638  142A  3F40               	moviw [0]fsr1
  4639  142B  00A4               	movwf	??_getTemp_AD
  4640  142C  3F41               	moviw [1]fsr1
  4641  142D  00A5               	movwf	??_getTemp_AD+1
  4642  142E  087A               	movf	_Temp,w
  4643  142F  3E0A               	addlw	10
  4644  1430  0086               	movwf	6
  4645  1431  3001               	movlw	1	; select bank2/3
  4646  1432  0087               	movwf	7
  4647  1433  3F40               	moviw [0]fsr1
  4648  1434  00A6               	movwf	??_getTemp_AD+2
  4649  1435  3F41               	moviw [1]fsr1
  4650  1436  00A7               	movwf	??_getTemp_AD+3
  4651  1437  0825               	movf	??_getTemp_AD+1,w
  4652  1438  0227               	subwf	??_getTemp_AD+3,w
  4653  1439  1D03               	skipz
  4654  143A  2C3D               	goto	u9345
  4655  143B  0824               	movf	??_getTemp_AD,w
  4656  143C  0226               	subwf	??_getTemp_AD+2,w
  4657  143D                     u9345:	
  4658  143D  1803               	skipnc
  4659  143E  0008               	return
  4660                           
  4661                           ;OverTemperature_B1.c: 45: {
  4662                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4663  143F  087A               	movf	_Temp,w
  4664  1440  3E0C               	addlw	12
  4665  1441  0086               	movwf	6
  4666  1442  3001               	movlw	1	; select bank2/3
  4667  1443  0087               	movwf	7
  4668  1444  087A               	movf	_Temp,w
  4669  1445  3E0A               	addlw	10
  4670  1446  0084               	movwf	4
  4671  1447  3001               	movlw	1	; select bank2/3
  4672  1448  0085               	movwf	5
  4673  1449  3F40               	moviw [0]fsr1
  4674  144A  3F80               	movwi [0]fsr0
  4675  144B  3F41               	moviw [1]fsr1
  4676  144C  3F81               	movwi [1]fsr0
  4677  144D  0008               	return
  4678  144E                     __end_of_getTemp_AD:	
  4679                           
  4680                           	psect	text6
  4681  1FB5                     __ptext6:	
  4682 ;; *************** function _getPowerFault_AD *****************
  4683 ;; Defined at:
  4684 ;;		line 49 in file "../src/PowerFault_B1.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  channel         1    wreg     unsigned char 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  channel         1    8[BANK0 ] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;Total ram usage:        5 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    5
  4705 ;; This function calls:
  4706 ;;		_getAD
  4707 ;; This function is called by:
  4708 ;;		_main
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _getPowerFault_AD
  4714  1FB5                     _getPowerFault_AD:	
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4718                           ;getPowerFault_AD@channel stored from wreg
  4719  1FB5  0020               	movlb	0	; select bank0
  4720  1FB6  00A8               	movwf	getPowerFault_AD@channel
  4721                           
  4722                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4723  1FB7  0021               	movlb	1	; select bank1
  4724  1FB8  083D               	movf	_PF^(0+128),w
  4725  1FB9  0086               	movwf	6
  4726  1FBA  3001               	movlw	1	; select bank2/3
  4727  1FBB  0087               	movwf	7
  4728  1FBC  1D81               	btfss	1,3
  4729  1FBD  0008               	return
  4730                           
  4731                           ;PowerFault_B1.c: 52: {
  4732                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4733  1FBE  30F0               	movlw	240
  4734  1FBF  0020               	movlb	0	; select bank0
  4735  1FC0  00A4               	movwf	??_getPowerFault_AD
  4736  1FC1  0824               	movf	??_getPowerFault_AD,w
  4737  1FC2  00A0               	movwf	getAD@adcon1
  4738  1FC3  0828               	movf	getPowerFault_AD@channel,w
  4739  1FC4  3198  20B2  319F   	fcall	_getAD
  4740  1FC7  0021               	movlb	1	; select bank1
  4741  1FC8  083D               	movf	_PF^(0+128),w
  4742  1FC9  3E06               	addlw	6
  4743  1FCA  0086               	movwf	6
  4744  1FCB  3001               	movlw	1	; select bank2/3
  4745  1FCC  0087               	movwf	7
  4746  1FCD  0020               	movlb	0	; select bank0
  4747  1FCE  0820               	movf	?_getAD,w
  4748  1FCF  3FC0               	movwi [0]fsr1
  4749  1FD0  0821               	movf	?_getAD+1,w
  4750  1FD1  3FC1               	movwi [1]fsr1
  4751                           
  4752                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4753  1FD2  0021               	movlb	1	; select bank1
  4754  1FD3  083D               	movf	_PF^(0+128),w
  4755  1FD4  3E06               	addlw	6
  4756  1FD5  0086               	movwf	6
  4757  1FD6  3001               	movlw	1	; select bank2/3
  4758  1FD7  0087               	movwf	7
  4759  1FD8  3F40               	moviw [0]fsr1
  4760  1FD9  0020               	movlb	0	; select bank0
  4761  1FDA  00A4               	movwf	??_getPowerFault_AD
  4762  1FDB  3F41               	moviw [1]fsr1
  4763  1FDC  00A5               	movwf	??_getPowerFault_AD+1
  4764  1FDD  0021               	movlb	1	; select bank1
  4765  1FDE  083D               	movf	_PF^(0+128),w
  4766  1FDF  3E04               	addlw	4
  4767  1FE0  0086               	movwf	6
  4768  1FE1  3001               	movlw	1	; select bank2/3
  4769  1FE2  0087               	movwf	7
  4770  1FE3  3F40               	moviw [0]fsr1
  4771  1FE4  0020               	movlb	0	; select bank0
  4772  1FE5  00A6               	movwf	??_getPowerFault_AD+2
  4773  1FE6  3F41               	moviw [1]fsr1
  4774  1FE7  00A7               	movwf	??_getPowerFault_AD+3
  4775  1FE8  0825               	movf	??_getPowerFault_AD+1,w
  4776  1FE9  0227               	subwf	??_getPowerFault_AD+3,w
  4777  1FEA  1D03               	skipz
  4778  1FEB  2FEE               	goto	u9365
  4779  1FEC  0824               	movf	??_getPowerFault_AD,w
  4780  1FED  0226               	subwf	??_getPowerFault_AD+2,w
  4781  1FEE                     u9365:	
  4782  1FEE  1803               	skipnc
  4783  1FEF  0008               	return
  4784                           
  4785                           ;PowerFault_B1.c: 55: {
  4786                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4787  1FF0  0021               	movlb	1	; select bank1
  4788  1FF1  083D               	movf	_PF^(0+128),w
  4789  1FF2  3E06               	addlw	6
  4790  1FF3  0086               	movwf	6
  4791  1FF4  3001               	movlw	1	; select bank2/3
  4792  1FF5  0087               	movwf	7
  4793  1FF6  083D               	movf	_PF^(0+128),w
  4794  1FF7  3E04               	addlw	4
  4795  1FF8  0084               	movwf	4
  4796  1FF9  3001               	movlw	1	; select bank2/3
  4797  1FFA  0085               	movwf	5
  4798  1FFB  3F40               	moviw [0]fsr1
  4799  1FFC  3F80               	movwi [0]fsr0
  4800  1FFD  3F41               	moviw [1]fsr1
  4801  1FFE  3F81               	movwi [1]fsr0
  4802  1FFF  0008               	return
  4803  2000                     __end_of_getPowerFault_AD:	
  4804                           
  4805                           	psect	text7
  4806  0A5C                     __ptext7:	
  4807 ;; *************** function _getLoad_AD *****************
  4808 ;; Defined at:
  4809 ;;		line 16 in file "../src/OverLoad_B1.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  channel         1    wreg     unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  channel         1    9[BANK0 ] unsigned char 
  4814 ;;  i               1   11[BANK0 ] unsigned char 
  4815 ;;  j               1   10[BANK0 ] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;Total ram usage:        8 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    5
  4832 ;; This function calls:
  4833 ;;		_getAD
  4834 ;; This function is called by:
  4835 ;;		_main
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _getLoad_AD
  4841  0A5C                     _getLoad_AD:	
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4845                           ;getLoad_AD@channel stored from wreg
  4846  0A5C  0020               	movlb	0	; select bank0
  4847  0A5D  00A9               	movwf	getLoad_AD@channel
  4848                           
  4849                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4850  0A5E  01AB               	clrf	getLoad_AD@i
  4851  0A5F  01AA               	clrf	getLoad_AD@j
  4852                           
  4853                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4854  0A60  087B               	movf	_Load,w
  4855  0A61  0086               	movwf	6
  4856  0A62  3002               	movlw	2	; select bank4/5
  4857  0A63  0087               	movwf	7
  4858  0A64  1E01               	btfss	1,4
  4859  0A65  0008               	return
  4860                           
  4861                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4862  0A66  30C0               	movlw	192
  4863  0A67  00A4               	movwf	??_getLoad_AD
  4864  0A68  0824               	movf	??_getLoad_AD,w
  4865  0A69  00A0               	movwf	getAD@adcon1
  4866  0A6A  0829               	movf	getLoad_AD@channel,w
  4867  0A6B  3198  20B2  318A   	fcall	_getAD
  4868  0A6E  087B               	movf	_Load,w
  4869  0A6F  3E32               	addlw	50
  4870  0A70  0086               	movwf	6
  4871  0A71  3002               	movlw	2	; select bank4/5
  4872  0A72  0087               	movwf	7
  4873  0A73  0020               	movlb	0	; select bank0
  4874  0A74  0820               	movf	?_getAD,w
  4875  0A75  3FC0               	movwi [0]fsr1
  4876  0A76  0821               	movf	?_getAD+1,w
  4877  0A77  3FC1               	movwi [1]fsr1
  4878                           
  4879                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4880  0A78  01AB               	clrf	getLoad_AD@i
  4881  0A79  3005               	movlw	5
  4882  0A7A  022B               	subwf	getLoad_AD@i,w
  4883  0A7B  1803               	btfsc	3,0
  4884  0A7C  2AB6               	goto	l9308
  4885  0A7D                     l9298:	
  4886                           
  4887                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4888  0A7D  087B               	movf	_Load,w
  4889  0A7E  3E32               	addlw	50
  4890  0A7F  0086               	movwf	6
  4891  0A80  3002               	movlw	2	; select bank4/5
  4892  0A81  0087               	movwf	7
  4893  0A82  3F40               	moviw [0]fsr1
  4894  0A83  00A4               	movwf	??_getLoad_AD
  4895  0A84  3F41               	moviw [1]fsr1
  4896  0A85  00A5               	movwf	??_getLoad_AD+1
  4897  0A86  352B               	lslf	getLoad_AD@i,w
  4898  0A87  3E08               	addlw	8
  4899  0A88  077B               	addwf	_Load,w
  4900  0A89  00A6               	movwf	??_getLoad_AD+2
  4901  0A8A  0826               	movf	??_getLoad_AD+2,w
  4902  0A8B  0086               	movwf	6
  4903  0A8C  3002               	movlw	2	; select bank4/5
  4904  0A8D  0087               	movwf	7
  4905  0A8E  3F40               	moviw [0]fsr1
  4906  0A8F  00A7               	movwf	??_getLoad_AD+3
  4907  0A90  3F41               	moviw [1]fsr1
  4908  0A91  00A8               	movwf	??_getLoad_AD+4
  4909  0A92  0825               	movf	??_getLoad_AD+1,w
  4910  0A93  0228               	subwf	??_getLoad_AD+4,w
  4911  0A94  1D03               	skipz
  4912  0A95  2A98               	goto	u9045
  4913  0A96  0824               	movf	??_getLoad_AD,w
  4914  0A97  0227               	subwf	??_getLoad_AD+3,w
  4915  0A98                     u9045:	
  4916  0A98  1803               	skipnc
  4917  0A99  2AAE               	goto	l9304
  4918                           
  4919                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4920  0A9A  087B               	movf	_Load,w
  4921  0A9B  3E32               	addlw	50
  4922  0A9C  0086               	movwf	6
  4923  0A9D  3002               	movlw	2	; select bank4/5
  4924  0A9E  0087               	movwf	7
  4925  0A9F  352B               	lslf	getLoad_AD@i,w
  4926  0AA0  3E08               	addlw	8
  4927  0AA1  077B               	addwf	_Load,w
  4928  0AA2  00A4               	movwf	??_getLoad_AD
  4929  0AA3  0824               	movf	??_getLoad_AD,w
  4930  0AA4  0084               	movwf	4
  4931  0AA5  3002               	movlw	2	; select bank4/5
  4932  0AA6  0085               	movwf	5
  4933  0AA7  3F40               	moviw [0]fsr1
  4934  0AA8  3F80               	movwi [0]fsr0
  4935  0AA9  3F41               	moviw [1]fsr1
  4936  0AAA  3F81               	movwi [1]fsr0
  4937                           
  4938                           ;OverLoad_B1.c: 24: j = 1;
  4939  0AAB  01AA               	clrf	getLoad_AD@j
  4940  0AAC  0AAA               	incf	getLoad_AD@j,f
  4941                           
  4942                           ;OverLoad_B1.c: 25: break;
  4943  0AAD  2AB6               	goto	l9308
  4944  0AAE                     l9304:	
  4945  0AAE  3001               	movlw	1
  4946  0AAF  00A4               	movwf	??_getLoad_AD
  4947  0AB0  0824               	movf	??_getLoad_AD,w
  4948  0AB1  07AB               	addwf	getLoad_AD@i,f
  4949  0AB2  3005               	movlw	5
  4950  0AB3  022B               	subwf	getLoad_AD@i,w
  4951  0AB4  1C03               	skipc
  4952  0AB5  2A7D               	goto	l9298
  4953  0AB6                     l9308:	
  4954                           
  4955                           ;OverLoad_B1.c: 26: }
  4956                           ;OverLoad_B1.c: 27: }
  4957                           ;OverLoad_B1.c: 28: if (!j) {
  4958  0AB6  08AA               	movf	getLoad_AD@j,f
  4959  0AB7  1D03               	skipz
  4960  0AB8  0008               	return
  4961                           
  4962                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4963  0AB9  01AB               	clrf	getLoad_AD@i
  4964  0ABA                     L1:	
  4965  0ABA  3005               	movlw	5
  4966  0ABB  022B               	subwf	getLoad_AD@i,w
  4967  0ABC  1803               	btfsc	3,0
  4968  0ABD  0008               	return
  4969                           
  4970                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4971  0ABE  352B               	lslf	getLoad_AD@i,w
  4972  0ABF  3E1A               	addlw	26
  4973  0AC0  077B               	addwf	_Load,w
  4974  0AC1  00A4               	movwf	??_getLoad_AD
  4975  0AC2  0824               	movf	??_getLoad_AD,w
  4976  0AC3  0086               	movwf	6
  4977  0AC4  3002               	movlw	2	; select bank4/5
  4978  0AC5  0087               	movwf	7
  4979  0AC6  3F40               	moviw [0]fsr1
  4980  0AC7  00A5               	movwf	??_getLoad_AD+1
  4981  0AC8  3F41               	moviw [1]fsr1
  4982  0AC9  00A6               	movwf	??_getLoad_AD+2
  4983  0ACA  087B               	movf	_Load,w
  4984  0ACB  3E32               	addlw	50
  4985  0ACC  0086               	movwf	6
  4986  0ACD  3002               	movlw	2	; select bank4/5
  4987  0ACE  0087               	movwf	7
  4988  0ACF  3F40               	moviw [0]fsr1
  4989  0AD0  00A7               	movwf	??_getLoad_AD+3
  4990  0AD1  3F41               	moviw [1]fsr1
  4991  0AD2  00A8               	movwf	??_getLoad_AD+4
  4992  0AD3  0826               	movf	??_getLoad_AD+2,w
  4993  0AD4  0228               	subwf	??_getLoad_AD+4,w
  4994  0AD5  1D03               	skipz
  4995  0AD6  2AD9               	goto	u9085
  4996  0AD7  0825               	movf	??_getLoad_AD+1,w
  4997  0AD8  0227               	subwf	??_getLoad_AD+3,w
  4998  0AD9                     u9085:	
  4999  0AD9  1803               	skipnc
  5000  0ADA  2AED               	goto	l9320
  5001                           
  5002                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  5003  0ADB  087B               	movf	_Load,w
  5004  0ADC  3E32               	addlw	50
  5005  0ADD  0086               	movwf	6
  5006  0ADE  3002               	movlw	2	; select bank4/5
  5007  0ADF  0087               	movwf	7
  5008  0AE0  352B               	lslf	getLoad_AD@i,w
  5009  0AE1  3E1A               	addlw	26
  5010  0AE2  077B               	addwf	_Load,w
  5011  0AE3  00A4               	movwf	??_getLoad_AD
  5012  0AE4  0824               	movf	??_getLoad_AD,w
  5013  0AE5  0084               	movwf	4
  5014  0AE6  3002               	movlw	2	; select bank4/5
  5015  0AE7  0085               	movwf	5
  5016  0AE8  3F40               	moviw [0]fsr1
  5017  0AE9  3F80               	movwi [0]fsr0
  5018  0AEA  3F41               	moviw [1]fsr1
  5019  0AEB  3F81               	movwi [1]fsr0
  5020                           
  5021                           ;OverLoad_B1.c: 32: break;
  5022  0AEC  0008               	return
  5023  0AED                     l9320:	
  5024  0AED  3001               	movlw	1
  5025  0AEE  00A4               	movwf	??_getLoad_AD
  5026  0AEF  0824               	movf	??_getLoad_AD,w
  5027  0AF0  07AB               	addwf	getLoad_AD@i,f
  5028  0AF1  2ABA               	goto	L1
  5029  0AF2                     __end_of_getLoad_AD:	
  5030                           
  5031                           	psect	text8
  5032  18B2                     __ptext8:	
  5033 ;; *************** function _getAD *****************
  5034 ;; Defined at:
  5035 ;;		line 415 in file "../src/MCU_B1.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  adcon0          1    wreg     unsigned char 
  5038 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  2    0[BANK0 ] int 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5050 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;Total ram usage:        4 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    4
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_getLoad_AD
  5061 ;;		_getTemp_AD
  5062 ;;		_getPowerFault_AD
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _getAD
  5068  18B2                     _getAD:	
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _getAD: [wreg+status,2+status,0]
  5072                           ;getAD@adcon0 stored from wreg
  5073  18B2  0020               	movlb	0	; select bank0
  5074  18B3  00A3               	movwf	getAD@adcon0
  5075                           
  5076                           ;MCU_B1.c: 416: ADCON0 = adcon0;
  5077  18B4  0823               	movf	getAD@adcon0,w
  5078  18B5  0021               	movlb	1	; select bank1
  5079  18B6  009D               	movwf	29	;volatile
  5080                           
  5081                           ;MCU_B1.c: 417: ADCON1 = adcon1;
  5082  18B7  0020               	movlb	0	; select bank0
  5083  18B8  0820               	movf	getAD@adcon1,w
  5084  18B9  0021               	movlb	1	; select bank1
  5085  18BA  009E               	movwf	30	;volatile
  5086                           
  5087                           ;MCU_B1.c: 418: GO_nDONE = 1;
  5088  18BB  149D               	bsf	29,1	;volatile
  5089  18BC                     l1351:	
  5090                           ;MCU_B1.c: 419: while (GO_nDONE == 1);
  5091                           
  5092  18BC  189D               	btfsc	29,1	;volatile
  5093  18BD  28BC               	goto	l1351
  5094                           
  5095                           ;MCU_B1.c: 420: return ((ADRESH*256)+ADRESL);
  5096  18BE  081C               	movf	28,w	;volatile
  5097  18BF  0020               	movlb	0	; select bank0
  5098  18C0  01A1               	clrf	?_getAD+1
  5099  18C1  07A1               	addwf	?_getAD+1,f
  5100  18C2  0021               	movlb	1	; select bank1
  5101  18C3  081B               	movf	27,w	;volatile
  5102  18C4  0020               	movlb	0	; select bank0
  5103  18C5  01A0               	clrf	?_getAD
  5104  18C6  07A0               	addwf	?_getAD,f
  5105  18C7  0008               	return
  5106  18C8                     __end_of_getAD:	
  5107                           
  5108                           	psect	text9
  5109  197C                     __ptext9:	
  5110 ;; *************** function _WDT_Main *****************
  5111 ;; Defined at:
  5112 ;;		line 973 in file "../src/MCU_B1.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;		None               void
  5119 ;; Registers used:
  5120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;Total ram usage:        1 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    5
  5133 ;; This function calls:
  5134 ;;		_WDT_Clearing
  5135 ;; This function is called by:
  5136 ;;		_main
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _WDT_Main
  5142  197C                     _WDT_Main:	
  5143                           
  5144                           ;MCU_B1.c: 974: if (WDT->Enable) {
  5145                           
  5146                           ;incstack = 0
  5147                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5148  197C  0021               	movlb	1	; select bank1
  5149  197D  086C               	movf	_WDT^(0+128),w
  5150  197E  0086               	movwf	6
  5151  197F  0187               	clrf	7
  5152  1980  1C01               	btfss	1,0
  5153  1981  0008               	return
  5154                           
  5155                           ;MCU_B1.c: 975: if (WDT->Count-- > 0) {
  5156  1982  0A6C               	incf	_WDT^(0+128),w
  5157  1983  0086               	movwf	6
  5158  1984  0187               	clrf	7
  5159  1985  3001               	movlw	1
  5160  1986  0281               	subwf	1,f
  5161  1987  0801               	movf	1,w
  5162  1988  3AFF               	xorlw	255
  5163  1989  1903               	skipnz
  5164  198A  0008               	return
  5165                           
  5166                           ;MCU_B1.c: 976: WDT->Count = 10;
  5167  198B  300A               	movlw	10
  5168  198C  0020               	movlb	0	; select bank0
  5169  198D  00A0               	movwf	??_WDT_Main
  5170  198E  0021               	movlb	1	; select bank1
  5171  198F  0A6C               	incf	_WDT^(0+128),w
  5172  1990  0086               	movwf	6
  5173  1991  0187               	clrf	7
  5174  1992  0020               	movlb	0	; select bank0
  5175  1993  0820               	movf	??_WDT_Main,w
  5176  1994  0081               	movwf	1
  5177                           
  5178                           ;MCU_B1.c: 977: WDT_Clearing();
  5179  1995  3180  2002         	fcall	_WDT_Clearing
  5180  1997  0008               	return
  5181  1998                     __end_of_WDT_Main:	
  5182                           
  5183                           	psect	text10
  5184  0002                     __ptext10:	
  5185 ;; *************** function _WDT_Clearing *****************
  5186 ;; Defined at:
  5187 ;;		line 983 in file "../src/MCU_B1.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;		None               void
  5194 ;; Registers used:
  5195 ;;		None
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    4
  5208 ;; This function calls:
  5209 ;;		Nothing
  5210 ;; This function is called by:
  5211 ;;		_WDT_Main
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _WDT_Clearing
  5217  0002                     _WDT_Clearing:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _WDT_Clearing: []
  5221  0002  0064               	clrwdt	;# 
  5222  0003  0008               	return
  5223  0004                     __end_of_WDT_Clearing:	
  5224                           
  5225                           	psect	text11
  5226  257C                     __ptext11:	
  5227 ;; *************** function _Temp_Main *****************
  5228 ;; Defined at:
  5229 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;		None               void
  5236 ;; Registers used:
  5237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;Total ram usage:        0 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:   10
  5250 ;; This function calls:
  5251 ;;		_setTemp_Main
  5252 ;; This function is called by:
  5253 ;;		_main
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _Temp_Main
  5259  257C                     _Temp_Main:	
  5260                           
  5261                           ;OverTemperature_B1.c: 60: setTemp_Main();
  5262                           
  5263                           ;incstack = 0
  5264                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5265  257C  3185  25F8         	fcall	_setTemp_Main
  5266  257E  0008               	return
  5267  257F                     __end_of_Temp_Main:	
  5268                           
  5269                           	psect	text12
  5270  05F8                     __ptext12:	
  5271 ;; *************** function _setTemp_Main *****************
  5272 ;; Defined at:
  5273 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;		None
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;Total ram usage:        3 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    9
  5294 ;; This function calls:
  5295 ;;		_getLoad_Safe
  5296 ;;		_getPF_Safe
  5297 ;;		_setOverTemp_Exceptions
  5298 ;; This function is called by:
  5299 ;;		_Temp_Main
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function _setTemp_Main
  5305  05F8                     _setTemp_Main:	
  5306                           
  5307                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5311  05F8  087A               	movf	_Temp,w
  5312  05F9  0086               	movwf	6
  5313  05FA  3001               	movlw	1	; select bank2/3
  5314  05FB  0087               	movwf	7
  5315  05FC  1C01               	btfss	1,0
  5316  05FD  0008               	return
  5317                           
  5318                           ;OverTemperature_B1.c: 67: {
  5319                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  5320  05FE  087A               	movf	_Temp,w
  5321  05FF  0086               	movwf	6
  5322  0600  3001               	movlw	1	; select bank2/3
  5323  0601  0087               	movwf	7
  5324  0602  1901               	btfsc	1,2
  5325  0603  2E44               	goto	l8930
  5326                           
  5327                           ;OverTemperature_B1.c: 69: {
  5328                           ;OverTemperature_B1.c: 70: Temp->Time++;
  5329  0604  0A7A               	incf	_Temp,w
  5330  0605  0086               	movwf	6
  5331  0606  3001               	movlw	1	; select bank2/3
  5332  0607  0087               	movwf	7
  5333  0608  3001               	movlw	1
  5334  0609  0781               	addwf	1,f
  5335  060A  3141               	addfsr 1,1
  5336  060B  1803               	skipnc
  5337  060C  0A81               	incf	1,f
  5338                           
  5339                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  5340  060D  0A7A               	incf	_Temp,w
  5341  060E  0086               	movwf	6
  5342  060F  3001               	movlw	1	; select bank2/3
  5343  0610  0087               	movwf	7
  5344  0611  3F40               	moviw [0]fsr1
  5345  0612  0020               	movlb	0	; select bank0
  5346  0613  00AD               	movwf	??_setTemp_Main
  5347  0614  3F41               	moviw [1]fsr1
  5348  0615  00AE               	movwf	??_setTemp_Main+1
  5349  0616  3001               	movlw	1
  5350  0617  022E               	subwf	??_setTemp_Main+1,w
  5351  0618  30F4               	movlw	244
  5352  0619  1903               	skipnz
  5353  061A  022D               	subwf	??_setTemp_Main,w
  5354  061B  1C03               	skipc
  5355  061C  0008               	return
  5356                           
  5357                           ;OverTemperature_B1.c: 72: {
  5358                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  5359  061D  31A6  2638  3185   	fcall	_getLoad_Safe
  5360  0620  3A00               	xorlw	0
  5361  0621  1903               	skipnz
  5362  0622  2E3B               	goto	l8928
  5363  0623  31A5  25E6  3185   	fcall	_getPF_Safe
  5364  0626  3A00               	xorlw	0
  5365  0627  1903               	skipnz
  5366  0628  2E3B               	goto	l8928
  5367                           
  5368                           ;OverTemperature_B1.c: 74: {
  5369                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  5370  0629  0A7A               	incf	_Temp,w
  5371  062A  0086               	movwf	6
  5372  062B  3001               	movlw	1	; select bank2/3
  5373  062C  0087               	movwf	7
  5374  062D  3000               	movlw	0
  5375  062E  3FC0               	movwi [0]fsr1
  5376  062F  3FC1               	movwi [1]fsr1
  5377                           
  5378                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  5379  0630  087A               	movf	_Temp,w
  5380  0631  0086               	movwf	6
  5381  0632  3001               	movlw	1	; select bank2/3
  5382  0633  0087               	movwf	7
  5383  0634  1501               	bsf	1,2
  5384                           
  5385                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  5386  0635  087A               	movf	_Temp,w
  5387  0636  0086               	movwf	6
  5388  0637  3001               	movlw	1	; select bank2/3
  5389  0638  0087               	movwf	7
  5390  0639  1201               	bcf	1,4
  5391                           
  5392                           ;OverTemperature_B1.c: 78: }
  5393  063A  0008               	return
  5394  063B                     l8928:	
  5395                           
  5396                           ;OverTemperature_B1.c: 79: else
  5397                           ;OverTemperature_B1.c: 80: {
  5398                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  5399  063B  0A7A               	incf	_Temp,w
  5400  063C  0086               	movwf	6
  5401  063D  3001               	movlw	1	; select bank2/3
  5402  063E  0087               	movwf	7
  5403  063F  30E8               	movlw	232
  5404  0640  3FC0               	movwi [0]fsr1
  5405  0641  3003               	movlw	3
  5406  0642  3FC1               	movwi [1]fsr1
  5407                           
  5408                           ;OverTemperature_B1.c: 82: }
  5409                           ;OverTemperature_B1.c: 83: }
  5410                           ;OverTemperature_B1.c: 84: }
  5411  0643  0008               	return
  5412  0644                     l8930:	
  5413                           
  5414                           ;OverTemperature_B1.c: 85: else
  5415                           ;OverTemperature_B1.c: 86: {
  5416                           ;OverTemperature_B1.c: 87: Temp->Time++;
  5417  0644  0A7A               	incf	_Temp,w
  5418  0645  0086               	movwf	6
  5419  0646  3001               	movlw	1	; select bank2/3
  5420  0647  0087               	movwf	7
  5421  0648  3001               	movlw	1
  5422  0649  0781               	addwf	1,f
  5423  064A  3141               	addfsr 1,1
  5424  064B  1803               	skipnc
  5425  064C  0A81               	incf	1,f
  5426                           
  5427                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  5428  064D  0A7A               	incf	_Temp,w
  5429  064E  0086               	movwf	6
  5430  064F  3001               	movlw	1	; select bank2/3
  5431  0650  0087               	movwf	7
  5432  0651  3F40               	moviw [0]fsr1
  5433  0652  0020               	movlb	0	; select bank0
  5434  0653  00AD               	movwf	??_setTemp_Main
  5435  0654  3F41               	moviw [1]fsr1
  5436  0655  00AE               	movwf	??_setTemp_Main+1
  5437  0656  3000               	movlw	0
  5438  0657  022E               	subwf	??_setTemp_Main+1,w
  5439  0658  3004               	movlw	4
  5440  0659  1903               	skipnz
  5441  065A  022D               	subwf	??_setTemp_Main,w
  5442  065B  1C03               	skipc
  5443  065C  0008               	return
  5444                           
  5445                           ;OverTemperature_B1.c: 89: {
  5446                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  5447  065D  0A7A               	incf	_Temp,w
  5448  065E  0086               	movwf	6
  5449  065F  3001               	movlw	1	; select bank2/3
  5450  0660  0087               	movwf	7
  5451  0661  3000               	movlw	0
  5452  0662  3FC0               	movwi [0]fsr1
  5453  0663  3FC1               	movwi [1]fsr1
  5454                           
  5455                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  5456  0664  087A               	movf	_Temp,w
  5457  0665  0086               	movwf	6
  5458  0666  3001               	movlw	1	; select bank2/3
  5459  0667  0087               	movwf	7
  5460  0668  1101               	bcf	1,2
  5461                           
  5462                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  5463  0669  087A               	movf	_Temp,w
  5464  066A  3E0A               	addlw	10
  5465  066B  0086               	movwf	6
  5466  066C  3001               	movlw	1	; select bank2/3
  5467  066D  0087               	movwf	7
  5468  066E  087A               	movf	_Temp,w
  5469  066F  3E06               	addlw	6
  5470  0670  0084               	movwf	4
  5471  0671  3001               	movlw	1	; select bank2/3
  5472  0672  0085               	movwf	5
  5473  0673  3F40               	moviw [0]fsr1
  5474  0674  3F80               	movwi [0]fsr0
  5475  0675  3F41               	moviw [1]fsr1
  5476  0676  3F81               	movwi [1]fsr0
  5477                           
  5478                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  5479  0677  087A               	movf	_Temp,w
  5480  0678  0086               	movwf	6
  5481  0679  3001               	movlw	1	; select bank2/3
  5482  067A  0087               	movwf	7
  5483  067B  1C81               	btfss	1,1
  5484  067C  2EAA               	goto	l8952
  5485                           
  5486                           ;OverTemperature_B1.c: 94: {
  5487                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  5488  067D  087A               	movf	_Temp,w
  5489  067E  3E06               	addlw	6
  5490  067F  0086               	movwf	6
  5491  0680  3001               	movlw	1	; select bank2/3
  5492  0681  0087               	movwf	7
  5493  0682  3F40               	moviw [0]fsr1
  5494  0683  00AD               	movwf	??_setTemp_Main
  5495  0684  3F41               	moviw [1]fsr1
  5496  0685  00AE               	movwf	??_setTemp_Main+1
  5497  0686  3002               	movlw	2
  5498  0687  022E               	subwf	??_setTemp_Main+1,w
  5499  0688  3058               	movlw	88
  5500  0689  1903               	skipnz
  5501  068A  022D               	subwf	??_setTemp_Main,w
  5502  068B  1C03               	skipc
  5503  068C  2ED8               	goto	l8962
  5504                           
  5505                           ;OverTemperature_B1.c: 96: {
  5506                           ;OverTemperature_B1.c: 97: Temp->Count++;
  5507  068D  3001               	movlw	1
  5508  068E  00AD               	movwf	??_setTemp_Main
  5509  068F  087A               	movf	_Temp,w
  5510  0690  3E03               	addlw	3
  5511  0691  0086               	movwf	6
  5512  0692  3001               	movlw	1	; select bank2/3
  5513  0693  0087               	movwf	7
  5514  0694  082D               	movf	??_setTemp_Main,w
  5515  0695  0781               	addwf	1,f
  5516                           
  5517                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5518  0696  087A               	movf	_Temp,w
  5519  0697  3E03               	addlw	3
  5520  0698  0086               	movwf	6
  5521  0699  3001               	movlw	1	; select bank2/3
  5522  069A  0087               	movwf	7
  5523  069B  3003               	movlw	3
  5524  069C  0201               	subwf	1,w
  5525  069D  1C03               	skipc
  5526  069E  2EDE               	goto	l8964
  5527                           
  5528                           ;OverTemperature_B1.c: 99: {
  5529                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5530  069F  087A               	movf	_Temp,w
  5531  06A0  3E03               	addlw	3
  5532  06A1  0086               	movwf	6
  5533  06A2  3001               	movlw	1	; select bank2/3
  5534  06A3  0087               	movwf	7
  5535  06A4  0181               	clrf	1
  5536                           
  5537                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5538  06A5  3000               	movlw	0
  5539  06A6  319F  2722  3185   	fcall	_setOverTemp_Exceptions
  5540                           
  5541                           ;OverTemperature_B1.c: 102: }
  5542                           ;OverTemperature_B1.c: 103: }
  5543  06A9  2EDE               	goto	l8964
  5544  06AA                     l8952:	
  5545                           ;OverTemperature_B1.c: 107: }
  5546                           ;OverTemperature_B1.c: 108: }
  5547                           
  5548                           ;OverTemperature_B1.c: 104: else
  5549                           ;OverTemperature_B1.c: 105: {
  5550                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5551                           
  5552                           
  5553                           ;OverTemperature_B1.c: 109: else
  5554                           ;OverTemperature_B1.c: 110: {
  5555                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5556  06AA  087A               	movf	_Temp,w
  5557  06AB  3E06               	addlw	6
  5558  06AC  0086               	movwf	6
  5559  06AD  3001               	movlw	1	; select bank2/3
  5560  06AE  0087               	movwf	7
  5561  06AF  3F40               	moviw [0]fsr1
  5562  06B0  0020               	movlb	0	; select bank0
  5563  06B1  00AD               	movwf	??_setTemp_Main
  5564  06B2  3F41               	moviw [1]fsr1
  5565  06B3  00AE               	movwf	??_setTemp_Main+1
  5566  06B4  3002               	movlw	2
  5567  06B5  022E               	subwf	??_setTemp_Main+1,w
  5568  06B6  3027               	movlw	39
  5569  06B7  1903               	skipnz
  5570  06B8  022D               	subwf	??_setTemp_Main,w
  5571  06B9  1803               	skipnc
  5572  06BA  2ED8               	goto	l8962
  5573                           
  5574                           ;OverTemperature_B1.c: 112: {
  5575                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5576  06BB  3001               	movlw	1
  5577  06BC  00AD               	movwf	??_setTemp_Main
  5578  06BD  087A               	movf	_Temp,w
  5579  06BE  3E03               	addlw	3
  5580  06BF  0086               	movwf	6
  5581  06C0  3001               	movlw	1	; select bank2/3
  5582  06C1  0087               	movwf	7
  5583  06C2  082D               	movf	??_setTemp_Main,w
  5584  06C3  0781               	addwf	1,f
  5585                           
  5586                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5587  06C4  087A               	movf	_Temp,w
  5588  06C5  3E03               	addlw	3
  5589  06C6  0086               	movwf	6
  5590  06C7  3001               	movlw	1	; select bank2/3
  5591  06C8  0087               	movwf	7
  5592  06C9  3003               	movlw	3
  5593  06CA  0201               	subwf	1,w
  5594  06CB  1C03               	skipc
  5595  06CC  2EDE               	goto	l8964
  5596                           
  5597                           ;OverTemperature_B1.c: 115: {
  5598                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5599  06CD  087A               	movf	_Temp,w
  5600  06CE  3E03               	addlw	3
  5601  06CF  0086               	movwf	6
  5602  06D0  3001               	movlw	1	; select bank2/3
  5603  06D1  0087               	movwf	7
  5604  06D2  0181               	clrf	1
  5605                           
  5606                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5607  06D3  3001               	movlw	1
  5608  06D4  319F  2722  3185   	fcall	_setOverTemp_Exceptions
  5609                           
  5610                           ;OverTemperature_B1.c: 118: }
  5611                           ;OverTemperature_B1.c: 119: }
  5612  06D7  2EDE               	goto	l8964
  5613  06D8                     l8962:	
  5614                           
  5615                           ;OverTemperature_B1.c: 120: else
  5616                           ;OverTemperature_B1.c: 121: {
  5617                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5618  06D8  087A               	movf	_Temp,w
  5619  06D9  3E03               	addlw	3
  5620  06DA  0086               	movwf	6
  5621  06DB  3001               	movlw	1	; select bank2/3
  5622  06DC  0087               	movwf	7
  5623  06DD  0181               	clrf	1
  5624  06DE                     l8964:	
  5625                           
  5626                           ;OverTemperature_B1.c: 123: }
  5627                           ;OverTemperature_B1.c: 124: }
  5628                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5629  06DE  087A               	movf	_Temp,w
  5630  06DF  0086               	movwf	6
  5631  06E0  3001               	movlw	1	; select bank2/3
  5632  06E1  0087               	movwf	7
  5633  06E2  1881               	btfsc	1,1
  5634  06E3  2EE9               	goto	l8968
  5635                           
  5636                           ;OverTemperature_B1.c: 126: {
  5637                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5638  06E4  087A               	movf	_Temp,w
  5639  06E5  0086               	movwf	6
  5640  06E6  3001               	movlw	1	; select bank2/3
  5641  06E7  0087               	movwf	7
  5642  06E8  1601               	bsf	1,4
  5643  06E9                     l8968:	
  5644                           
  5645                           ;OverTemperature_B1.c: 128: }
  5646                           ;OverTemperature_B1.c: 129: product->Data[24]=Temp->AD >> 8;
  5647  06E9  087A               	movf	_Temp,w
  5648  06EA  3E06               	addlw	6
  5649  06EB  0086               	movwf	6
  5650  06EC  3001               	movlw	1	; select bank2/3
  5651  06ED  0087               	movwf	7
  5652  06EE  3F40               	moviw [0]fsr1
  5653  06EF  0020               	movlb	0	; select bank0
  5654  06F0  00AD               	movwf	??_setTemp_Main
  5655  06F1  3F41               	moviw [1]fsr1
  5656  06F2  00AE               	movwf	??_setTemp_Main+1
  5657  06F3  082E               	movf	??_setTemp_Main+1,w
  5658  06F4  00AF               	movwf	??_setTemp_Main+2
  5659  06F5  087D               	movf	_product,w
  5660  06F6  3E18               	addlw	24
  5661  06F7  0086               	movwf	6
  5662  06F8  3001               	movlw	1	; select bank2/3
  5663  06F9  0087               	movwf	7
  5664  06FA  082F               	movf	??_setTemp_Main+2,w
  5665  06FB  0081               	movwf	1
  5666                           
  5667                           ;OverTemperature_B1.c: 130: product->Data[25]=Temp->AD;
  5668  06FC  087A               	movf	_Temp,w
  5669  06FD  3E06               	addlw	6
  5670  06FE  0086               	movwf	6
  5671  06FF  3001               	movlw	1	; select bank2/3
  5672  0700  0087               	movwf	7
  5673  0701  0801               	movf	1,w
  5674  0702  00AD               	movwf	??_setTemp_Main
  5675  0703  087D               	movf	_product,w
  5676  0704  3E19               	addlw	25
  5677  0705  0086               	movwf	6
  5678  0706  3001               	movlw	1	; select bank2/3
  5679  0707  0087               	movwf	7
  5680  0708  082D               	movf	??_setTemp_Main,w
  5681  0709  0081               	movwf	1
  5682                           
  5683                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5684  070A  087A               	movf	_Temp,w
  5685  070B  3E08               	addlw	8
  5686  070C  0086               	movwf	6
  5687  070D  3001               	movlw	1	; select bank2/3
  5688  070E  0087               	movwf	7
  5689  070F  3000               	movlw	0
  5690  0710  3FC0               	movwi [0]fsr1
  5691  0711  3FC1               	movwi [1]fsr1
  5692                           
  5693                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5694  0712  087A               	movf	_Temp,w
  5695  0713  3E0A               	addlw	10
  5696  0714  0086               	movwf	6
  5697  0715  3001               	movlw	1	; select bank2/3
  5698  0716  0087               	movwf	7
  5699  0717  3000               	movlw	0
  5700  0718  3FC0               	movwi [0]fsr1
  5701  0719  3FC1               	movwi [1]fsr1
  5702  071A  0008               	return
  5703  071B                     __end_of_setTemp_Main:	
  5704                           
  5705                           	psect	text13
  5706  1F22                     __ptext13:	
  5707 ;; *************** function _setOverTemp_Exceptions *****************
  5708 ;; Defined at:
  5709 ;;		line 138 in file "../src/OverTemperature_B1.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  command         1    wreg     unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  command         1   12[BANK0 ] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        2 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    8
  5730 ;; This function calls:
  5731 ;;		_DimmerLights_Exceptions
  5732 ;;		_setBuz
  5733 ;;		_setLED
  5734 ;;		_setRF_Enable
  5735 ;;		_setSw_Enable
  5736 ;; This function is called by:
  5737 ;;		_setTemp_Main
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           
  5742                           ;psect for function _setOverTemp_Exceptions
  5743  1F22                     _setOverTemp_Exceptions:	
  5744                           
  5745                           ;incstack = 0
  5746                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5747                           ;setOverTemp_Exceptions@command stored from wreg
  5748  1F22  0020               	movlb	0	; select bank0
  5749  1F23  00AC               	movwf	setOverTemp_Exceptions@command
  5750                           
  5751                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5752  1F24  087A               	movf	_Temp,w
  5753  1F25  0086               	movwf	6
  5754  1F26  3001               	movlw	1	; select bank2/3
  5755  1F27  0087               	movwf	7
  5756  1F28  082C               	movf	setOverTemp_Exceptions@command,w
  5757  1F29  1081               	bcf	1,1
  5758  1F2A  1D03               	skipz
  5759  1F2B  1481               	bsf	1,1
  5760                           
  5761                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5762  1F2C  092C               	comf	setOverTemp_Exceptions@command,w
  5763  1F2D  3901               	andlw	1
  5764  1F2E  00AB               	movwf	??_setOverTemp_Exceptions
  5765  1F2F  087A               	movf	_Temp,w
  5766  1F30  0086               	movwf	6
  5767  1F31  3001               	movlw	1	; select bank2/3
  5768  1F32  0087               	movwf	7
  5769  1F33  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5770  1F34  0801               	movf	1,w
  5771  1F35  062B               	xorwf	??_setOverTemp_Exceptions,w
  5772  1F36  39EF               	andlw	-17
  5773  1F37  062B               	xorwf	??_setOverTemp_Exceptions,w
  5774  1F38  0081               	movwf	1
  5775                           
  5776                           ;OverTemperature_B1.c: 142: if(command)
  5777  1F39  082C               	movf	setOverTemp_Exceptions@command,w
  5778  1F3A  1903               	btfsc	3,2
  5779  1F3B  2F48               	goto	l8580
  5780                           
  5781                           ;OverTemperature_B1.c: 143: {
  5782                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5783  1F3C  3001               	movlw	1
  5784  1F3D  3191  2142  319F   	fcall	_DimmerLights_Exceptions
  5785                           
  5786                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5787  1F40  0020               	movlb	0	; select bank0
  5788  1F41  01A2               	clrf	setLED@command
  5789  1F42  0AA2               	incf	setLED@command,f
  5790  1F43  3002               	movlw	2
  5791  1F44  3192  2254  319F   	fcall	_setLED
  5792                           
  5793                           ;OverTemperature_B1.c: 148: }
  5794  1F47  2F51               	goto	l1764
  5795  1F48                     l8580:	
  5796                           
  5797                           ;OverTemperature_B1.c: 149: else
  5798                           ;OverTemperature_B1.c: 150: {
  5799                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5800  1F48  3064               	movlw	100
  5801  1F49  0020               	movlb	0	; select bank0
  5802  1F4A  00A6               	movwf	setBuz@time
  5803  1F4B  3000               	movlw	0
  5804  1F4C  00A7               	movwf	setBuz@time+1
  5805  1F4D  3002               	movlw	2
  5806  1F4E  3188  2019  319F   	fcall	_setBuz
  5807  1F51                     l1764:	
  5808                           
  5809                           ;OverTemperature_B1.c: 152: }
  5810                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5811  1F51  0020               	movlb	0	; select bank0
  5812  1F52  082C               	movf	setOverTemp_Exceptions@command,w
  5813  1F53  3E0A               	addlw	10
  5814  1F54  00AB               	movwf	??_setOverTemp_Exceptions
  5815  1F55  082B               	movf	??_setOverTemp_Exceptions,w
  5816  1F56  00A2               	movwf	setLED@command
  5817  1F57  3063               	movlw	99
  5818  1F58  3192  2254  319F   	fcall	_setLED
  5819                           
  5820                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5821  1F5B  0020               	movlb	0	; select bank0
  5822  1F5C  092C               	comf	setOverTemp_Exceptions@command,w
  5823  1F5D  3901               	andlw	1
  5824  1F5E  31A7  2731  319F   	fcall	_setSw_Enable
  5825                           
  5826                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5827  1F61  0020               	movlb	0	; select bank0
  5828  1F62  092C               	comf	setOverTemp_Exceptions@command,w
  5829  1F63  3901               	andlw	1
  5830  1F64  00AB               	movwf	??_setOverTemp_Exceptions
  5831  1F65  082B               	movf	??_setOverTemp_Exceptions,w
  5832  1F66  00A2               	movwf	setRF_Enable@command
  5833  1F67  3001               	movlw	1
  5834  1F68  319B  2362         	fcall	_setRF_Enable
  5835  1F6A  0008               	return
  5836  1F6B                     __end_of_setOverTemp_Exceptions:	
  5837                           
  5838                           	psect	text14
  5839  2579                     __ptext14:	
  5840 ;; *************** function _Temp_Initialization *****************
  5841 ;; Defined at:
  5842 ;;		line 15 in file "../src/OverTemperature_B1.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		_setTemp_Initialization
  5865 ;; This function is called by:
  5866 ;;		_main
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function _Temp_Initialization
  5872  2579                     _Temp_Initialization:	
  5873                           
  5874                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5878  2579  31A6  2643         	fcall	_setTemp_Initialization
  5879  257B  0008               	return
  5880  257C                     __end_of_Temp_Initialization:	
  5881                           
  5882                           	psect	text15
  5883  2643                     __ptext15:	
  5884 ;; *************** function _setTemp_Initialization *****************
  5885 ;; Defined at:
  5886 ;;		line 51 in file "../src/OverTemperature_B1.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;		None               void
  5893 ;; Registers used:
  5894 ;;		wreg, fsr1l, fsr1h
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    4
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_Temp_Initialization
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _setTemp_Initialization
  5916  2643                     _setTemp_Initialization:	
  5917                           
  5918                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5922  2643  3040               	movlw	_Temp1& (0+255)
  5923  2644  0020               	movlb	0	; select bank0
  5924  2645  00A0               	movwf	??_setTemp_Initialization
  5925  2646  0820               	movf	??_setTemp_Initialization,w
  5926  2647  00FA               	movwf	_Temp
  5927                           
  5928                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5929  2648  087A               	movf	_Temp,w
  5930  2649  0086               	movwf	6
  5931  264A  3001               	movlw	1	; select bank2/3
  5932  264B  0087               	movwf	7
  5933  264C  1601               	bsf	1,4
  5934  264D  0008               	return
  5935  264E                     __end_of_setTemp_Initialization:	
  5936                           
  5937                           	psect	text16
  5938  259F                     __ptext16:	
  5939 ;; *************** function _Switch_Main *****************
  5940 ;; Defined at:
  5941 ;;		line 61 in file "../src/Switch_B1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:   10
  5962 ;; This function calls:
  5963 ;;		_setSw_Main
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _Switch_Main
  5971  259F                     _Switch_Main:	
  5972                           
  5973                           ;Switch_B1.c: 63: setSw_Main(1);
  5974                           
  5975                           ;incstack = 0
  5976                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5977  259F  3001               	movlw	1
  5978  25A0  3184  24AE         	fcall	_setSw_Main
  5979  25A2  0008               	return
  5980  25A3                     __end_of_Switch_Main:	
  5981                           
  5982                           	psect	text17
  5983  04AE                     __ptext17:	
  5984 ;; *************** function _setSw_Main *****************
  5985 ;; Defined at:
  5986 ;;		line 111 in file "../src/Switch_B1.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  sw              1    wreg     unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  sw              1   72[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;		None               void
  5993 ;; Registers used:
  5994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;Total ram usage:        4 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    9
  6007 ;; This function calls:
  6008 ;;		_SwPointSelect
  6009 ;;		_Sw_DimmerAdjFunc
  6010 ;;		_Sw_DimmerOffFunc
  6011 ;;		_Sw_DimmerOnFunc
  6012 ;;		_setBuz
  6013 ;;		_setRF_Learn
  6014 ;; This function is called by:
  6015 ;;		_Switch_Main
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           
  6020                           ;psect for function _setSw_Main
  6021  04AE                     _setSw_Main:	
  6022                           
  6023                           ;incstack = 0
  6024                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6025                           ;setSw_Main@sw stored from wreg
  6026  04AE  0020               	movlb	0	; select bank0
  6027  04AF  00E8               	movwf	setSw_Main@sw
  6028                           
  6029                           ;Switch_B1.c: 112: if (Sw->Enable) {
  6030  04B0  0879               	movf	_Sw,w
  6031  04B1  0086               	movwf	6
  6032  04B2  3001               	movlw	1	; select bank2/3
  6033  04B3  0087               	movwf	7
  6034  04B4  1C01               	btfss	1,0
  6035  04B5  0008               	return
  6036                           
  6037                           ;Switch_B1.c: 113: SwPointSelect(sw);
  6038  04B6  0868               	movf	setSw_Main@sw,w
  6039  04B7  31A6  2622  3184   	fcall	_SwPointSelect
  6040                           
  6041                           ;Switch_B1.c: 133: Sw->Touch = (RA6 || RA4 || RA0 || RB1) ? 1 : 0;
  6042  04BA  0020               	movlb	0	; select bank0
  6043  04BB  01E7               	clrf	_setSw_Main$4800
  6044  04BC  0AE7               	incf	_setSw_Main$4800,f
  6045  04BD  1F0C               	btfss	12,6	;volatile
  6046  04BE  1A0C               	btfsc	12,4	;volatile
  6047  04BF  2CC4               	goto	l9110
  6048  04C0  1C0C               	btfss	12,0	;volatile
  6049  04C1  188D               	btfsc	13,1	;volatile
  6050  04C2  2CC4               	goto	l9110
  6051  04C3  01E7               	clrf	_setSw_Main$4800
  6052  04C4                     l9110:	
  6053  04C4  0879               	movf	_Sw,w
  6054  04C5  0086               	movwf	6
  6055  04C6  3001               	movlw	1	; select bank2/3
  6056  04C7  0087               	movwf	7
  6057  04C8  0867               	movf	_setSw_Main$4800,w
  6058  04C9  1081               	bcf	1,1
  6059  04CA  1D03               	skipz
  6060  04CB  1481               	bsf	1,1
  6061                           
  6062                           ;Switch_B1.c: 137: if (Sw->Touch) {
  6063  04CC  0879               	movf	_Sw,w
  6064  04CD  0086               	movwf	6
  6065  04CE  3001               	movlw	1	; select bank2/3
  6066  04CF  0087               	movwf	7
  6067  04D0  1C81               	btfss	1,1
  6068  04D1  2DA3               	goto	l9160
  6069                           
  6070                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  6071  04D2  0879               	movf	_Sw,w
  6072  04D3  0086               	movwf	6
  6073  04D4  3001               	movlw	1	; select bank2/3
  6074  04D5  0087               	movwf	7
  6075  04D6  1901               	btfsc	1,2
  6076  04D7  2CF9               	goto	l9126
  6077                           
  6078                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  6079  04D8  3001               	movlw	1
  6080  04D9  00E5               	movwf	??_setSw_Main
  6081  04DA  0879               	movf	_Sw,w
  6082  04DB  3E02               	addlw	2
  6083  04DC  0086               	movwf	6
  6084  04DD  3001               	movlw	1	; select bank2/3
  6085  04DE  0087               	movwf	7
  6086  04DF  0865               	movf	??_setSw_Main,w
  6087  04E0  0781               	addwf	1,f
  6088                           
  6089                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  6090  04E1  0879               	movf	_Sw,w
  6091  04E2  3E02               	addlw	2
  6092  04E3  0086               	movwf	6
  6093  04E4  3001               	movlw	1	; select bank2/3
  6094  04E5  0087               	movwf	7
  6095  04E6  3005               	movlw	5
  6096  04E7  0201               	subwf	1,w
  6097  04E8  1C03               	skipc
  6098  04E9  0008               	return
  6099                           
  6100                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  6101  04EA  0879               	movf	_Sw,w
  6102  04EB  3E02               	addlw	2
  6103  04EC  0086               	movwf	6
  6104  04ED  3001               	movlw	1	; select bank2/3
  6105  04EE  0087               	movwf	7
  6106  04EF  0181               	clrf	1
  6107                           
  6108                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  6109  04F0  0879               	movf	_Sw,w
  6110  04F1  0086               	movwf	6
  6111  04F2  3001               	movlw	1	; select bank2/3
  6112  04F3  0087               	movwf	7
  6113  04F4  1501               	bsf	1,2
  6114                           
  6115                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  6116  04F5  0868               	movf	setSw_Main@sw,w
  6117  04F6  3190  20E9         	fcall	_Sw_DimmerOnFunc
  6118                           
  6119                           ;Switch_B1.c: 148: }
  6120                           ;Switch_B1.c: 149: } else {
  6121  04F8  0008               	return
  6122  04F9                     l9126:	
  6123                           
  6124                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  6125  04F9  0879               	movf	_Sw,w
  6126  04FA  0086               	movwf	6
  6127  04FB  3001               	movlw	1	; select bank2/3
  6128  04FC  0087               	movwf	7
  6129  04FD  1981               	btfsc	1,3
  6130  04FE  2D2B               	goto	l9136
  6131                           
  6132                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  6133  04FF  0879               	movf	_Sw,w
  6134  0500  3E03               	addlw	3
  6135  0501  0086               	movwf	6
  6136  0502  3001               	movlw	1	; select bank2/3
  6137  0503  0087               	movwf	7
  6138  0504  3001               	movlw	1
  6139  0505  0781               	addwf	1,f
  6140  0506  3141               	addfsr 1,1
  6141  0507  1803               	skipnc
  6142  0508  0A81               	incf	1,f
  6143                           
  6144                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  6145  0509  0879               	movf	_Sw,w
  6146  050A  3E03               	addlw	3
  6147  050B  0086               	movwf	6
  6148  050C  3001               	movlw	1	; select bank2/3
  6149  050D  0087               	movwf	7
  6150  050E  3F40               	moviw [0]fsr1
  6151  050F  0020               	movlb	0	; select bank0
  6152  0510  00E5               	movwf	??_setSw_Main
  6153  0511  3F41               	moviw [1]fsr1
  6154  0512  00E6               	movwf	??_setSw_Main+1
  6155  0513  3000               	movlw	0
  6156  0514  0266               	subwf	??_setSw_Main+1,w
  6157  0515  3096               	movlw	150
  6158  0516  1903               	skipnz
  6159  0517  0265               	subwf	??_setSw_Main,w
  6160  0518  1C03               	skipc
  6161  0519  0008               	return
  6162                           
  6163                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  6164  051A  0879               	movf	_Sw,w
  6165  051B  3E03               	addlw	3
  6166  051C  0086               	movwf	6
  6167  051D  3001               	movlw	1	; select bank2/3
  6168  051E  0087               	movwf	7
  6169  051F  3000               	movlw	0
  6170  0520  3FC0               	movwi [0]fsr1
  6171  0521  3FC1               	movwi [1]fsr1
  6172                           
  6173                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  6174  0522  0879               	movf	_Sw,w
  6175  0523  0086               	movwf	6
  6176  0524  3001               	movlw	1	; select bank2/3
  6177  0525  0087               	movwf	7
  6178  0526  1581               	bsf	1,3
  6179                           
  6180                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  6181  0527  0868               	movf	setSw_Main@sw,w
  6182  0528  3187  27D4         	fcall	_Sw_DimmerAdjFunc
  6183                           
  6184                           ;Switch_B1.c: 160: }
  6185                           ;Switch_B1.c: 161: } else {
  6186  052A  0008               	return
  6187  052B                     l9136:	
  6188                           
  6189                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  6190  052B  0879               	movf	_Sw,w
  6191  052C  0086               	movwf	6
  6192  052D  3001               	movlw	1	; select bank2/3
  6193  052E  0087               	movwf	7
  6194  052F  1A01               	btfsc	1,4
  6195  0530  2D70               	goto	l9150
  6196                           
  6197                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  6198  0531  0879               	movf	_Sw,w
  6199  0532  3E05               	addlw	5
  6200  0533  0086               	movwf	6
  6201  0534  3001               	movlw	1	; select bank2/3
  6202  0535  0087               	movwf	7
  6203  0536  3001               	movlw	1
  6204  0537  0781               	addwf	1,f
  6205  0538  3141               	addfsr 1,1
  6206  0539  1803               	skipnc
  6207  053A  0A81               	incf	1,f
  6208                           
  6209                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  6210  053B  0879               	movf	_Sw,w
  6211  053C  3E05               	addlw	5
  6212  053D  0086               	movwf	6
  6213  053E  3001               	movlw	1	; select bank2/3
  6214  053F  0087               	movwf	7
  6215  0540  3F40               	moviw [0]fsr1
  6216  0541  0020               	movlb	0	; select bank0
  6217  0542  00E5               	movwf	??_setSw_Main
  6218  0543  3F41               	moviw [1]fsr1
  6219  0544  00E6               	movwf	??_setSw_Main+1
  6220  0545  3000               	movlw	0
  6221  0546  0266               	subwf	??_setSw_Main+1,w
  6222  0547  3096               	movlw	150
  6223  0548  1903               	skipnz
  6224  0549  0265               	subwf	??_setSw_Main,w
  6225  054A  1C03               	skipc
  6226  054B  0008               	return
  6227                           
  6228                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  6229  054C  0879               	movf	_Sw,w
  6230  054D  3E05               	addlw	5
  6231  054E  0086               	movwf	6
  6232  054F  3001               	movlw	1	; select bank2/3
  6233  0550  0087               	movwf	7
  6234  0551  3000               	movlw	0
  6235  0552  3FC0               	movwi [0]fsr1
  6236  0553  3FC1               	movwi [1]fsr1
  6237                           
  6238                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  6239  0554  0879               	movf	_Sw,w
  6240  0555  0086               	movwf	6
  6241  0556  3001               	movlw	1	; select bank2/3
  6242  0557  0087               	movwf	7
  6243  0558  1601               	bsf	1,4
  6244                           
  6245                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  6246  0559  01A2               	clrf	setRF_Learn@command
  6247  055A  0AA2               	incf	setRF_Learn@command,f
  6248  055B  3001               	movlw	1
  6249  055C  31A7  274F  3184   	fcall	_setRF_Learn
  6250                           
  6251                           ;Switch_B1.c: 172: if (myMain->First) {
  6252  055F  0021               	movlb	1	; select bank1
  6253  0560  086D               	movf	_myMain^(0+128),w
  6254  0561  3E03               	addlw	3
  6255  0562  0086               	movwf	6
  6256  0563  3001               	movlw	1	; select bank2/3
  6257  0564  0087               	movwf	7
  6258  0565  1C81               	btfss	1,1
  6259  0566  0008               	return
  6260                           
  6261                           ;Switch_B1.c: 173: setBuz(2, 100);
  6262  0567  3064               	movlw	100
  6263  0568  0020               	movlb	0	; select bank0
  6264  0569  00A6               	movwf	setBuz@time
  6265  056A  3000               	movlw	0
  6266  056B  00A7               	movwf	setBuz@time+1
  6267  056C  3002               	movlw	2
  6268  056D  3188  2019         	fcall	_setBuz
  6269                           
  6270                           ;Switch_B1.c: 174: }
  6271                           ;Switch_B1.c: 176: }
  6272                           ;Switch_B1.c: 177: } else {
  6273  056F  0008               	return
  6274  0570                     l9150:	
  6275                           
  6276                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  6277  0570  0879               	movf	_Sw,w
  6278  0571  0086               	movwf	6
  6279  0572  3001               	movlw	1	; select bank2/3
  6280  0573  0087               	movwf	7
  6281  0574  1A81               	btfsc	1,5
  6282  0575  0008               	return
  6283                           
  6284                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  6285  0576  0879               	movf	_Sw,w
  6286  0577  3E07               	addlw	7
  6287  0578  0086               	movwf	6
  6288  0579  3001               	movlw	1	; select bank2/3
  6289  057A  0087               	movwf	7
  6290  057B  3001               	movlw	1
  6291  057C  0781               	addwf	1,f
  6292  057D  3141               	addfsr 1,1
  6293  057E  1803               	skipnc
  6294  057F  0A81               	incf	1,f
  6295                           
  6296                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  6297  0580  0879               	movf	_Sw,w
  6298  0581  3E07               	addlw	7
  6299  0582  0086               	movwf	6
  6300  0583  3001               	movlw	1	; select bank2/3
  6301  0584  0087               	movwf	7
  6302  0585  3F40               	moviw [0]fsr1
  6303  0586  0020               	movlb	0	; select bank0
  6304  0587  00E5               	movwf	??_setSw_Main
  6305  0588  3F41               	moviw [1]fsr1
  6306  0589  00E6               	movwf	??_setSw_Main+1
  6307  058A  3001               	movlw	1
  6308  058B  0266               	subwf	??_setSw_Main+1,w
  6309  058C  302C               	movlw	44
  6310  058D  1903               	skipnz
  6311  058E  0265               	subwf	??_setSw_Main,w
  6312  058F  1C03               	skipc
  6313  0590  0008               	return
  6314                           
  6315                           ;Switch_B1.c: 181: {
  6316                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  6317  0591  0879               	movf	_Sw,w
  6318  0592  3E07               	addlw	7
  6319  0593  0086               	movwf	6
  6320  0594  3001               	movlw	1	; select bank2/3
  6321  0595  0087               	movwf	7
  6322  0596  3000               	movlw	0
  6323  0597  3FC0               	movwi [0]fsr1
  6324  0598  3FC1               	movwi [1]fsr1
  6325                           
  6326                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  6327  0599  0879               	movf	_Sw,w
  6328  059A  0086               	movwf	6
  6329  059B  3001               	movlw	1	; select bank2/3
  6330  059C  0087               	movwf	7
  6331  059D  1681               	bsf	1,5
  6332                           
  6333                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  6334  059E  01A2               	clrf	setRF_Learn@command
  6335  059F  3001               	movlw	1
  6336  05A0  31A7  274F         	fcall	_setRF_Learn
  6337                           
  6338                           ;Switch_B1.c: 189: }
  6339                           ;Switch_B1.c: 190: }
  6340                           ;Switch_B1.c: 191: }
  6341                           ;Switch_B1.c: 192: }
  6342                           ;Switch_B1.c: 193: }
  6343                           ;Switch_B1.c: 194: } else {
  6344  05A2  0008               	return
  6345  05A3                     l9160:	
  6346                           
  6347                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  6348  05A3  0879               	movf	_Sw,w
  6349  05A4  0086               	movwf	6
  6350  05A5  3001               	movlw	1	; select bank2/3
  6351  05A6  0087               	movwf	7
  6352  05A7  1D01               	btfss	1,2
  6353  05A8  0008               	return
  6354                           
  6355                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  6356  05A9  3001               	movlw	1
  6357  05AA  0020               	movlb	0	; select bank0
  6358  05AB  00E5               	movwf	??_setSw_Main
  6359  05AC  0879               	movf	_Sw,w
  6360  05AD  3E02               	addlw	2
  6361  05AE  0086               	movwf	6
  6362  05AF  3001               	movlw	1	; select bank2/3
  6363  05B0  0087               	movwf	7
  6364  05B1  0865               	movf	??_setSw_Main,w
  6365  05B2  0781               	addwf	1,f
  6366                           
  6367                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  6368  05B3  0879               	movf	_Sw,w
  6369  05B4  3E02               	addlw	2
  6370  05B5  0086               	movwf	6
  6371  05B6  3001               	movlw	1	; select bank2/3
  6372  05B7  0087               	movwf	7
  6373  05B8  3005               	movlw	5
  6374  05B9  0201               	subwf	1,w
  6375  05BA  1C03               	skipc
  6376  05BB  0008               	return
  6377                           
  6378                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  6379  05BC  0879               	movf	_Sw,w
  6380  05BD  3E02               	addlw	2
  6381  05BE  0086               	movwf	6
  6382  05BF  3001               	movlw	1	; select bank2/3
  6383  05C0  0087               	movwf	7
  6384  05C1  0181               	clrf	1
  6385                           
  6386                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  6387  05C2  0879               	movf	_Sw,w
  6388  05C3  0086               	movwf	6
  6389  05C4  3001               	movlw	1	; select bank2/3
  6390  05C5  0087               	movwf	7
  6391  05C6  1101               	bcf	1,2
  6392                           
  6393                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  6394  05C7  0879               	movf	_Sw,w
  6395  05C8  3E03               	addlw	3
  6396  05C9  0086               	movwf	6
  6397  05CA  3001               	movlw	1	; select bank2/3
  6398  05CB  0087               	movwf	7
  6399  05CC  3000               	movlw	0
  6400  05CD  3FC0               	movwi [0]fsr1
  6401  05CE  3FC1               	movwi [1]fsr1
  6402                           
  6403                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  6404  05CF  0879               	movf	_Sw,w
  6405  05D0  0086               	movwf	6
  6406  05D1  3001               	movlw	1	; select bank2/3
  6407  05D2  0087               	movwf	7
  6408  05D3  1181               	bcf	1,3
  6409                           
  6410                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  6411  05D4  0879               	movf	_Sw,w
  6412  05D5  3E05               	addlw	5
  6413  05D6  0086               	movwf	6
  6414  05D7  3001               	movlw	1	; select bank2/3
  6415  05D8  0087               	movwf	7
  6416  05D9  3000               	movlw	0
  6417  05DA  3FC0               	movwi [0]fsr1
  6418  05DB  3FC1               	movwi [1]fsr1
  6419                           
  6420                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  6421  05DC  0879               	movf	_Sw,w
  6422  05DD  0086               	movwf	6
  6423  05DE  3001               	movlw	1	; select bank2/3
  6424  05DF  0087               	movwf	7
  6425  05E0  1201               	bcf	1,4
  6426                           
  6427                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  6428  05E1  0879               	movf	_Sw,w
  6429  05E2  3E07               	addlw	7
  6430  05E3  0086               	movwf	6
  6431  05E4  3001               	movlw	1	; select bank2/3
  6432  05E5  0087               	movwf	7
  6433  05E6  3000               	movlw	0
  6434  05E7  3FC0               	movwi [0]fsr1
  6435  05E8  3FC1               	movwi [1]fsr1
  6436                           
  6437                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  6438  05E9  0879               	movf	_Sw,w
  6439  05EA  0086               	movwf	6
  6440  05EB  3001               	movlw	1	; select bank2/3
  6441  05EC  0087               	movwf	7
  6442  05ED  1281               	bcf	1,5
  6443                           
  6444                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  6445  05EE  0868               	movf	setSw_Main@sw,w
  6446  05EF  3195  252A  3184   	fcall	_Sw_DimmerOffFunc
  6447                           
  6448                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  6449  05F2  0020               	movlb	0	; select bank0
  6450  05F3  01A2               	clrf	setRF_Learn@command
  6451  05F4  3001               	movlw	1
  6452  05F5  31A7  274F         	fcall	_setRF_Learn
  6453  05F7  0008               	return
  6454  05F8                     __end_of_setSw_Main:	
  6455                           
  6456                           	psect	text18
  6457  274F                     __ptext18:	
  6458 ;; *************** function _setRF_Learn *****************
  6459 ;; Defined at:
  6460 ;;		line 30 in file "../src/RF_Control_B1.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  rf              1    wreg     unsigned char 
  6463 ;;  command         1    2[BANK0 ] unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  rf              1    3[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    5
  6482 ;; This function calls:
  6483 ;;		_RfPointSelect
  6484 ;; This function is called by:
  6485 ;;		_setSw_Main
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _setRF_Learn
  6491  274F                     _setRF_Learn:	
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6495                           ;setRF_Learn@rf stored from wreg
  6496  274F  0020               	movlb	0	; select bank0
  6497  2750  00A3               	movwf	setRF_Learn@rf
  6498                           
  6499                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  6500  2751  0823               	movf	setRF_Learn@rf,w
  6501  2752  31A6  2695         	fcall	_RfPointSelect
  6502                           
  6503                           ;RF_Control_B1.c: 32: RF->Learn = command;
  6504  2754  0021               	movlb	1	; select bank1
  6505  2755  083E               	movf	_RF^(0+128),w
  6506  2756  0086               	movwf	6
  6507  2757  0187               	clrf	7
  6508  2758  0020               	movlb	0	; select bank0
  6509  2759  0822               	movf	setRF_Learn@command,w
  6510  275A  1301               	bcf	1,6
  6511  275B  1D03               	skipz
  6512  275C  1701               	bsf	1,6
  6513  275D  0008               	return
  6514  275E                     __end_of_setRF_Learn:	
  6515                           
  6516                           	psect	text19
  6517  10E9                     __ptext19:	
  6518 ;; *************** function _Sw_DimmerOnFunc *****************
  6519 ;; Defined at:
  6520 ;;		line 222 in file "../src/Switch_B1.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;  sw              1    wreg     unsigned char 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  sw              1   67[BANK0 ] unsigned char 
  6525 ;;  Idle            1   66[BANK0 ] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    8
  6542 ;; This function calls:
  6543 ;;		_setBuz
  6544 ;;		_setDimmerLights_Switch
  6545 ;;		_setDimmerLights_Trigger
  6546 ;;		_setRFSW_Status
  6547 ;;		_setRF_DimmerLights
  6548 ;;		_setTxData
  6549 ;; This function is called by:
  6550 ;;		_setSw_Main
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function _Sw_DimmerOnFunc
  6556  10E9                     _Sw_DimmerOnFunc:	
  6557                           
  6558                           ;incstack = 0
  6559                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6560                           ;Sw_DimmerOnFunc@sw stored from wreg
  6561  10E9  0020               	movlb	0	; select bank0
  6562  10EA  00E3               	movwf	Sw_DimmerOnFunc@sw
  6563                           
  6564                           ;Switch_B1.c: 223: char Idle = 1;
  6565  10EB  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6566  10EC  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6567                           
  6568                           ;Switch_B1.c: 242: if (Idle) {
  6569  10ED  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6570  10EE  1903               	btfsc	3,2
  6571  10EF  0008               	return
  6572                           
  6573                           ;Switch_B1.c: 243: Sw->Flag = 1;
  6574  10F0  0879               	movf	_Sw,w
  6575  10F1  0086               	movwf	6
  6576  10F2  3001               	movlw	1	; select bank2/3
  6577  10F3  0087               	movwf	7
  6578  10F4  1781               	bsf	1,7
  6579                           
  6580                           ;Switch_B1.c: 244: setBuz(1, 100);
  6581  10F5  3064               	movlw	100
  6582  10F6  00A6               	movwf	setBuz@time
  6583  10F7  3000               	movlw	0
  6584  10F8  00A7               	movwf	setBuz@time+1
  6585  10F9  3001               	movlw	1
  6586  10FA  3188  2019  3190   	fcall	_setBuz
  6587                           
  6588                           ;Switch_B1.c: 245: if (!Sw->Status) {
  6589  10FD  0879               	movf	_Sw,w
  6590  10FE  0086               	movwf	6
  6591  10FF  3001               	movlw	1	; select bank2/3
  6592  1100  0087               	movwf	7
  6593  1101  1B01               	btfsc	1,6
  6594  1102  292F               	goto	l8670
  6595                           
  6596                           ;Switch_B1.c: 246: Sw->Status = 1;
  6597  1103  0879               	movf	_Sw,w
  6598  1104  0086               	movwf	6
  6599  1105  3001               	movlw	1	; select bank2/3
  6600  1106  0087               	movwf	7
  6601  1107  1701               	bsf	1,6
  6602                           
  6603                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  6604  1108  0020               	movlb	0	; select bank0
  6605  1109  01A2               	clrf	setRFSW_Status@command
  6606  110A  0AA2               	incf	setRFSW_Status@command,f
  6607  110B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6608  110C  31A7  2713  3190   	fcall	_setRFSW_Status
  6609                           
  6610                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  6611  110F  0020               	movlb	0	; select bank0
  6612  1110  01A2               	clrf	setDimmerLights_Trigger@command
  6613  1111  0AA2               	incf	setDimmerLights_Trigger@command,f
  6614  1112  0863               	movf	Sw_DimmerOnFunc@sw,w
  6615  1113  31A7  277E  3190   	fcall	_setDimmerLights_Trigger
  6616                           
  6617                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  6618  1116  0020               	movlb	0	; select bank0
  6619  1117  01A2               	clrf	setDimmerLights_Switch@command
  6620  1118  0AA2               	incf	setDimmerLights_Switch@command,f
  6621  1119  0863               	movf	Sw_DimmerOnFunc@sw,w
  6622  111A  31A7  276E  3190   	fcall	_setDimmerLights_Switch
  6623                           
  6624                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  6625  111D  0879               	movf	_Sw,w
  6626  111E  0086               	movwf	6
  6627  111F  3001               	movlw	1	; select bank2/3
  6628  1120  0087               	movwf	7
  6629  1121  3000               	movlw	0
  6630  1122  1B01               	btfsc	1,6
  6631  1123  3001               	movlw	1
  6632  1124  0020               	movlb	0	; select bank0
  6633  1125  00DD               	movwf	setRF_DimmerLights@on
  6634  1126  0863               	movf	Sw_DimmerOnFunc@sw,w
  6635  1127  3193  2377  3190   	fcall	_setRF_DimmerLights
  6636                           
  6637                           ;Switch_B1.c: 253: setTxData(1);
  6638  112A  3001               	movlw	1
  6639  112B  318A  22F2         	fcall	_setTxData
  6640                           
  6641                           ;Switch_B1.c: 255: } else {
  6642  112D  0020               	movlb	0	; select bank0
  6643  112E  0008               	return
  6644  112F                     l8670:	
  6645                           
  6646                           ;Switch_B1.c: 256: Sw->Status = 0;
  6647  112F  0879               	movf	_Sw,w
  6648  1130  0086               	movwf	6
  6649  1131  3001               	movlw	1	; select bank2/3
  6650  1132  0087               	movwf	7
  6651  1133  1301               	bcf	1,6
  6652                           
  6653                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  6654  1134  0879               	movf	_Sw,w
  6655  1135  0086               	movwf	6
  6656  1136  3001               	movlw	1	; select bank2/3
  6657  1137  0087               	movwf	7
  6658  1138  3000               	movlw	0
  6659  1139  1B01               	btfsc	1,6
  6660  113A  3001               	movlw	1
  6661  113B  0020               	movlb	0	; select bank0
  6662  113C  00A2               	movwf	setRFSW_Status@command
  6663  113D  0863               	movf	Sw_DimmerOnFunc@sw,w
  6664  113E  31A7  2713         	fcall	_setRFSW_Status
  6665  1140  0020               	movlb	0	; select bank0
  6666  1141  0008               	return
  6667  1142                     __end_of_Sw_DimmerOnFunc:	
  6668                           
  6669                           	psect	text20
  6670  152A                     __ptext20:	
  6671 ;; *************** function _Sw_DimmerOffFunc *****************
  6672 ;; Defined at:
  6673 ;;		line 263 in file "../src/Switch_B1.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  sw              1    wreg     unsigned char 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  sw              1   68[BANK0 ] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        3 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    8
  6694 ;; This function calls:
  6695 ;;		_setDelayOff_GO
  6696 ;;		_setDimmerLights_AdjGo
  6697 ;;		_setDimmerLights_Switch
  6698 ;;		_setDimmerLights_Trigger
  6699 ;;		_setDimmerLights_TriggerAdj
  6700 ;;		_setRF_DimmerLights
  6701 ;;		_setTxData
  6702 ;; This function is called by:
  6703 ;;		_setSw_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _Sw_DimmerOffFunc
  6709  152A                     _Sw_DimmerOffFunc:	
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6713                           ;Sw_DimmerOffFunc@sw stored from wreg
  6714  152A  0020               	movlb	0	; select bank0
  6715  152B  00E4               	movwf	Sw_DimmerOffFunc@sw
  6716                           
  6717                           ;Switch_B1.c: 264: if (Sw->Flag) {
  6718  152C  0879               	movf	_Sw,w
  6719  152D  0086               	movwf	6
  6720  152E  3001               	movlw	1	; select bank2/3
  6721  152F  0087               	movwf	7
  6722  1530  1F81               	btfss	1,7
  6723  1531  0008               	return
  6724                           
  6725                           ;Switch_B1.c: 265: Sw->Flag = 0;
  6726  1532  0879               	movf	_Sw,w
  6727  1533  0086               	movwf	6
  6728  1534  3001               	movlw	1	; select bank2/3
  6729  1535  0087               	movwf	7
  6730  1536  1381               	bcf	1,7
  6731                           
  6732                           ;Switch_B1.c: 266: if (Sw->Status) {
  6733  1537  0879               	movf	_Sw,w
  6734  1538  0086               	movwf	6
  6735  1539  3001               	movlw	1	; select bank2/3
  6736  153A  0087               	movwf	7
  6737  153B  1F01               	btfss	1,6
  6738  153C  2D76               	goto	l8704
  6739                           
  6740                           ;Switch_B1.c: 267: if (Sw->Adj) {
  6741  153D  0A79               	incf	_Sw,w
  6742  153E  0086               	movwf	6
  6743  153F  3001               	movlw	1	; select bank2/3
  6744  1540  0087               	movwf	7
  6745  1541  1C01               	btfss	1,0
  6746  1542  0008               	return
  6747                           
  6748                           ;Switch_B1.c: 268: Sw->Adj = 0;
  6749  1543  0A79               	incf	_Sw,w
  6750  1544  0086               	movwf	6
  6751  1545  3001               	movlw	1	; select bank2/3
  6752  1546  0087               	movwf	7
  6753  1547  1001               	bcf	1,0
  6754                           
  6755                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  6756  1548  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6757  1549  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6758  154A  0864               	movf	Sw_DimmerOffFunc@sw,w
  6759  154B  31A7  27BE  3195   	fcall	_setDimmerLights_TriggerAdj
  6760                           
  6761                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  6762  154E  0020               	movlb	0	; select bank0
  6763  154F  01A2               	clrf	setDimmerLights_AdjGo@command
  6764  1550  0864               	movf	Sw_DimmerOffFunc@sw,w
  6765  1551  31A7  27AE  3195   	fcall	_setDimmerLights_AdjGo
  6766                           
  6767                           ;Switch_B1.c: 272: product->Data[17]=product->Data[26 + sw];
  6768  1554  0020               	movlb	0	; select bank0
  6769  1555  0864               	movf	Sw_DimmerOffFunc@sw,w
  6770  1556  3E1A               	addlw	26
  6771  1557  077D               	addwf	_product,w
  6772  1558  00E2               	movwf	??_Sw_DimmerOffFunc
  6773  1559  0862               	movf	??_Sw_DimmerOffFunc,w
  6774  155A  0086               	movwf	6
  6775  155B  3001               	movlw	1	; select bank2/3
  6776  155C  0087               	movwf	7
  6777  155D  0801               	movf	1,w
  6778  155E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6779  155F  087D               	movf	_product,w
  6780  1560  3E11               	addlw	17
  6781  1561  0086               	movwf	6
  6782  1562  3001               	movlw	1	; select bank2/3
  6783  1563  0087               	movwf	7
  6784  1564  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6785  1565  0081               	movwf	1
  6786                           
  6787                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6788  1566  0879               	movf	_Sw,w
  6789  1567  0086               	movwf	6
  6790  1568  3001               	movlw	1	; select bank2/3
  6791  1569  0087               	movwf	7
  6792  156A  3000               	movlw	0
  6793  156B  1B01               	btfsc	1,6
  6794  156C  3001               	movlw	1
  6795  156D  00DD               	movwf	setRF_DimmerLights@on
  6796  156E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6797  156F  3193  2377  3195   	fcall	_setRF_DimmerLights
  6798                           
  6799                           ;Switch_B1.c: 274: setTxData(1);
  6800  1572  3001               	movlw	1
  6801  1573  318A  22F2         	fcall	_setTxData
  6802                           
  6803                           ;Switch_B1.c: 276: }
  6804                           ;Switch_B1.c: 277: } else {
  6805  1575  0008               	return
  6806  1576                     l8704:	
  6807                           
  6808                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  6809  1576  0020               	movlb	0	; select bank0
  6810  1577  01A2               	clrf	setDimmerLights_Trigger@command
  6811  1578  0AA2               	incf	setDimmerLights_Trigger@command,f
  6812  1579  0864               	movf	Sw_DimmerOffFunc@sw,w
  6813  157A  31A7  277E  3195   	fcall	_setDimmerLights_Trigger
  6814                           
  6815                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  6816  157D  0020               	movlb	0	; select bank0
  6817  157E  01A2               	clrf	setDimmerLights_Switch@command
  6818  157F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6819  1580  31A7  276E  3195   	fcall	_setDimmerLights_Switch
  6820                           
  6821                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  6822  1583  0020               	movlb	0	; select bank0
  6823  1584  01A3               	clrf	setDelayOff_GO@command
  6824  1585  01A4               	clrf	setDelayOff_GO@value
  6825  1586  0864               	movf	Sw_DimmerOffFunc@sw,w
  6826  1587  3191  21F8  3195   	fcall	_setDelayOff_GO
  6827                           
  6828                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  6829  158A  0879               	movf	_Sw,w
  6830  158B  0086               	movwf	6
  6831  158C  3001               	movlw	1	; select bank2/3
  6832  158D  0087               	movwf	7
  6833  158E  3000               	movlw	0
  6834  158F  1B01               	btfsc	1,6
  6835  1590  3001               	movlw	1
  6836  1591  0020               	movlb	0	; select bank0
  6837  1592  00DD               	movwf	setRF_DimmerLights@on
  6838  1593  0864               	movf	Sw_DimmerOffFunc@sw,w
  6839  1594  3193  2377  3195   	fcall	_setRF_DimmerLights
  6840                           
  6841                           ;Switch_B1.c: 283: setTxData(1);
  6842  1597  3001               	movlw	1
  6843  1598  318A  22F2         	fcall	_setTxData
  6844  159A  0008               	return
  6845  159B                     __end_of_Sw_DimmerOffFunc:	
  6846                           
  6847                           	psect	text21
  6848  07D4                     __ptext21:	
  6849 ;; *************** function _Sw_DimmerAdjFunc *****************
  6850 ;; Defined at:
  6851 ;;		line 290 in file "../src/Switch_B1.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  sw              1    wreg     unsigned char 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  sw              1    5[BANK0 ] unsigned char 
  6856 ;;  Idle            1    4[BANK0 ] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;		None               void
  6859 ;; Registers used:
  6860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        2 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    6
  6873 ;; This function calls:
  6874 ;;		_setDimmerLights_AdjGo
  6875 ;;		_setDimmerLights_TriggerAdj
  6876 ;;		_setRFSW_Status
  6877 ;; This function is called by:
  6878 ;;		_setSw_Main
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _Sw_DimmerAdjFunc
  6884  07D4                     _Sw_DimmerAdjFunc:	
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6888                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6889  07D4  0020               	movlb	0	; select bank0
  6890  07D5  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6891                           
  6892                           ;Switch_B1.c: 291: char Idle = 1;
  6893  07D6  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6894  07D7  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6895                           
  6896                           ;Switch_B1.c: 310: if (Idle) {
  6897  07D8  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6898  07D9  1903               	btfsc	3,2
  6899  07DA  0008               	return
  6900                           
  6901                           ;Switch_B1.c: 311: if (Sw->Flag) {
  6902  07DB  0879               	movf	_Sw,w
  6903  07DC  0086               	movwf	6
  6904  07DD  3001               	movlw	1	; select bank2/3
  6905  07DE  0087               	movwf	7
  6906  07DF  1F81               	btfss	1,7
  6907  07E0  0008               	return
  6908                           
  6909                           ;Switch_B1.c: 312: Sw->Adj = 1;
  6910  07E1  0A79               	incf	_Sw,w
  6911  07E2  0086               	movwf	6
  6912  07E3  3001               	movlw	1	; select bank2/3
  6913  07E4  0087               	movwf	7
  6914  07E5  1401               	bsf	1,0
  6915                           
  6916                           ;Switch_B1.c: 313: Sw->Status = 1;
  6917  07E6  0879               	movf	_Sw,w
  6918  07E7  0086               	movwf	6
  6919  07E8  3001               	movlw	1	; select bank2/3
  6920  07E9  0087               	movwf	7
  6921  07EA  1701               	bsf	1,6
  6922                           
  6923                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  6924  07EB  01A2               	clrf	setRFSW_Status@command
  6925  07EC  0AA2               	incf	setRFSW_Status@command,f
  6926  07ED  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6927  07EE  31A7  2713  3187   	fcall	_setRFSW_Status
  6928                           
  6929                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  6930  07F1  0020               	movlb	0	; select bank0
  6931  07F2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6932  07F3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6933  07F4  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6934  07F5  31A7  27BE  3187   	fcall	_setDimmerLights_TriggerAdj
  6935                           
  6936                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  6937  07F8  0020               	movlb	0	; select bank0
  6938  07F9  01A2               	clrf	setDimmerLights_AdjGo@command
  6939  07FA  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6940  07FB  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6941  07FC  31A7  27AE         	fcall	_setDimmerLights_AdjGo
  6942  07FE  0020               	movlb	0	; select bank0
  6943  07FF  0008               	return
  6944  0800                     __end_of_Sw_DimmerAdjFunc:	
  6945                           
  6946                           	psect	text22
  6947  27BE                     __ptext22:	
  6948 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6949 ;; Defined at:
  6950 ;;		line 450 in file "../src/Dimmer_B1.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  lights          1    wreg     unsigned char 
  6953 ;;  command         1    2[BANK0 ] unsigned char 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  lights          1    3[BANK0 ] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6965 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;Total ram usage:        2 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		_DimmerLightsPointSelect
  6974 ;; This function is called by:
  6975 ;;		_Sw_DimmerOffFunc
  6976 ;;		_Sw_DimmerAdjFunc
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _setDimmerLights_TriggerAdj
  6982  27BE                     _setDimmerLights_TriggerAdj:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6986                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6987  27BE  0020               	movlb	0	; select bank0
  6988  27BF  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6989                           
  6990                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6991  27C0  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6992  27C1  31A6  2617         	fcall	_DimmerLightsPointSelect
  6993                           
  6994                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6995  27C3  0877               	movf	_DimmerLights,w
  6996  27C4  3E09               	addlw	9
  6997  27C5  0086               	movwf	6
  6998  27C6  3001               	movlw	1	; select bank2/3
  6999  27C7  0087               	movwf	7
  7000  27C8  0020               	movlb	0	; select bank0
  7001  27C9  0822               	movf	setDimmerLights_TriggerAdj@command,w
  7002  27CA  1181               	bcf	1,3
  7003  27CB  1D03               	skipz
  7004  27CC  1581               	bsf	1,3
  7005  27CD  0008               	return
  7006  27CE                     __end_of_setDimmerLights_TriggerAdj:	
  7007                           
  7008                           	psect	text23
  7009  27AE                     __ptext23:	
  7010 ;; *************** function _setDimmerLights_AdjGo *****************
  7011 ;; Defined at:
  7012 ;;		line 440 in file "../src/Dimmer_B1.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  lights          1    wreg     unsigned char 
  7015 ;;  command         1    2[BANK0 ] unsigned char 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  lights          1    3[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7027 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;Total ram usage:        2 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    5
  7034 ;; This function calls:
  7035 ;;		_DimmerLightsPointSelect
  7036 ;; This function is called by:
  7037 ;;		_Sw_DimmerOffFunc
  7038 ;;		_Sw_DimmerAdjFunc
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           
  7043                           ;psect for function _setDimmerLights_AdjGo
  7044  27AE                     _setDimmerLights_AdjGo:	
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7048                           ;setDimmerLights_AdjGo@lights stored from wreg
  7049  27AE  0020               	movlb	0	; select bank0
  7050  27AF  00A3               	movwf	setDimmerLights_AdjGo@lights
  7051                           
  7052                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  7053  27B0  0823               	movf	setDimmerLights_AdjGo@lights,w
  7054  27B1  31A6  2617         	fcall	_DimmerLightsPointSelect
  7055                           
  7056                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  7057  27B3  0877               	movf	_DimmerLights,w
  7058  27B4  3E09               	addlw	9
  7059  27B5  0086               	movwf	6
  7060  27B6  3001               	movlw	1	; select bank2/3
  7061  27B7  0087               	movwf	7
  7062  27B8  0020               	movlb	0	; select bank0
  7063  27B9  0822               	movf	setDimmerLights_AdjGo@command,w
  7064  27BA  1101               	bcf	1,2
  7065  27BB  1D03               	skipz
  7066  27BC  1501               	bsf	1,2
  7067  27BD  0008               	return
  7068  27BE                     __end_of_setDimmerLights_AdjGo:	
  7069                           
  7070                           	psect	text24
  7071  25F8                     __ptext24:	
  7072 ;; *************** function _Switch_Initialization *****************
  7073 ;; Defined at:
  7074 ;;		line 37 in file "../src/Switch_B1.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    7
  7095 ;; This function calls:
  7096 ;;		_TouchPower
  7097 ;;		_setSw_Initialization
  7098 ;; This function is called by:
  7099 ;;		_main
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _Switch_Initialization
  7105  25F8                     _Switch_Initialization:	
  7106                           
  7107                           ;Switch_B1.c: 38: TouchPower();
  7108                           
  7109                           ;incstack = 0
  7110                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7111  25F8  31A5  25A3  31A5   	fcall	_TouchPower
  7112                           
  7113                           ;Switch_B1.c: 40: WPUB1 = 0;
  7114  25FB  0024               	movlb	4	; select bank4
  7115  25FC  108D               	bcf	13,1	;volatile
  7116                           
  7117                           ;Switch_B1.c: 49: setSw_Initialization(1);
  7118  25FD  3001               	movlw	1
  7119  25FE  31A7  279E         	fcall	_setSw_Initialization
  7120  2600  0008               	return
  7121  2601                     __end_of_Switch_Initialization:	
  7122                           
  7123                           	psect	text25
  7124  279E                     __ptext25:	
  7125 ;; *************** function _setSw_Initialization *****************
  7126 ;; Defined at:
  7127 ;;		line 77 in file "../src/Switch_B1.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  sw              1    wreg     unsigned char 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  sw              1    4[BANK0 ] unsigned char 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;		None               void
  7134 ;; Registers used:
  7135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;Total ram usage:        1 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    6
  7148 ;; This function calls:
  7149 ;;		_setLED
  7150 ;; This function is called by:
  7151 ;;		_Switch_Initialization
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _setSw_Initialization
  7157  279E                     _setSw_Initialization:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7161                           ;setSw_Initialization@sw stored from wreg
  7162  279E  0020               	movlb	0	; select bank0
  7163  279F  00A4               	movwf	setSw_Initialization@sw
  7164                           
  7165                           ;Switch_B1.c: 78: setLED(sw, 1);
  7166  27A0  01A2               	clrf	setLED@command
  7167  27A1  0AA2               	incf	setLED@command,f
  7168  27A2  0824               	movf	setSw_Initialization@sw,w
  7169  27A3  3192  2254  31A7   	fcall	_setLED
  7170                           
  7171                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  7172  27A6  0020               	movlb	0	; select bank0
  7173  27A7  01A2               	clrf	setLED@command
  7174  27A8  0AA2               	incf	setLED@command,f
  7175  27A9  0824               	movf	setSw_Initialization@sw,w
  7176  27AA  3E01               	addlw	1
  7177  27AB  3192  2254         	fcall	_setLED
  7178  27AD  0008               	return
  7179  27AE                     __end_of_setSw_Initialization:	
  7180                           
  7181                           	psect	text26
  7182  25A3                     __ptext26:	
  7183 ;; *************** function _TouchPower *****************
  7184 ;; Defined at:
  7185 ;;		line 10 in file "../src/Switch_B1.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;		None
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;		None
  7190 ;; Return value:  Size  Location     Type
  7191 ;;		None               void
  7192 ;; Registers used:
  7193 ;;		None
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;Total ram usage:        0 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    4
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_Switch_Initialization
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _TouchPower
  7215  25A3                     _TouchPower:	
  7216  25A3                     l2637:	
  7217                           ;Switch_B1.c: 11: while (!RC5)
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _TouchPower: []
  7221                           
  7222  25A3  0020               	movlb	0	; select bank0
  7223  25A4  1A8E               	btfsc	14,5	;volatile
  7224  25A5  0008               	return
  7225                           
  7226                           ;Switch_B1.c: 12: RC5 = 1;
  7227  25A6  168E               	bsf	14,5	;volatile
  7228  25A7  2DA3               	goto	l2637
  7229  25A8                     __end_of_TouchPower:	
  7230                           
  7231                           	psect	text27
  7232  259B                     __ptext27:	
  7233 ;; *************** function _RF_Main *****************
  7234 ;; Defined at:
  7235 ;;		line 23 in file "../src/RF_Control_B1.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;		None               void
  7242 ;; Registers used:
  7243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;Total ram usage:        0 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:   13
  7256 ;; This function calls:
  7257 ;;		_setRF_Main
  7258 ;; This function is called by:
  7259 ;;		_main
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _RF_Main
  7265  259B                     _RF_Main:	
  7266                           
  7267                           ;RF_Control_B1.c: 25: setRF_Main(1);
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7271  259B  3001               	movlw	1
  7272  259C  3189  2132         	fcall	_setRF_Main
  7273  259E  0008               	return
  7274  259F                     __end_of_RF_Main:	
  7275                           
  7276                           	psect	text28
  7277  0932                     __ptext28:	
  7278 ;; *************** function _setRF_Main *****************
  7279 ;; Defined at:
  7280 ;;		line 57 in file "../src/RF_Control_B1.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  rf              1    wreg     unsigned char 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  rf              1   74[BANK0 ] unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;		None               void
  7287 ;; Registers used:
  7288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;Total ram usage:        3 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:   12
  7301 ;; This function calls:
  7302 ;;		_CC2500_RxData
  7303 ;;		_CC2500_TxData
  7304 ;;		_CC2500_WriteCommand
  7305 ;;		_RF_RxDisable
  7306 ;;		_RfPointSelect
  7307 ;;		_getRxData
  7308 ;;		_setINT_GO
  7309 ;; This function is called by:
  7310 ;;		_RF_Main
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           
  7315                           ;psect for function _setRF_Main
  7316  0932                     _setRF_Main:	
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7320                           ;setRF_Main@rf stored from wreg
  7321  0932  0020               	movlb	0	; select bank0
  7322  0933  00EA               	movwf	setRF_Main@rf
  7323                           
  7324                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  7325  0934  086A               	movf	setRF_Main@rf,w
  7326  0935  31A6  2695  3189   	fcall	_RfPointSelect
  7327                           
  7328                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  7329  0938  0021               	movlb	1	; select bank1
  7330  0939  083E               	movf	_RF^(0+128),w
  7331  093A  0086               	movwf	6
  7332  093B  0187               	clrf	7
  7333  093C  1C01               	btfss	1,0
  7334  093D  0008               	return
  7335                           
  7336                           ;RF_Control_B1.c: 71: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  7337  093E  0020               	movlb	0	; select bank0
  7338  093F  01EB               	clrf	_setRF_Main$3971
  7339  0940  1F0C               	btfss	12,6	;volatile
  7340  0941  1A0C               	btfsc	12,4	;volatile
  7341  0942  2947               	goto	l9044
  7342  0943  180C               	btfsc	12,0	;volatile
  7343  0944  2947               	goto	l9044
  7344  0945  1C8D               	btfss	13,1	;volatile
  7345  0946  2950               	goto	l9048
  7346  0947                     l9044:	
  7347  0947  0021               	movlb	1	; select bank1
  7348  0948  083E               	movf	_RF^(0+128),w
  7349  0949  0086               	movwf	6
  7350  094A  0187               	clrf	7
  7351  094B  1B01               	btfsc	1,6
  7352  094C  2950               	goto	l9048
  7353  094D  0020               	movlb	0	; select bank0
  7354  094E  01EB               	clrf	_setRF_Main$3971
  7355  094F  0AEB               	incf	_setRF_Main$3971,f
  7356  0950                     l9048:	
  7357  0950  0021               	movlb	1	; select bank1
  7358  0951  083E               	movf	_RF^(0+128),w
  7359  0952  0086               	movwf	6
  7360  0953  0187               	clrf	7
  7361  0954  0020               	movlb	0	; select bank0
  7362  0955  086B               	movf	_setRF_Main$3971,w
  7363  0956  1381               	bcf	1,7
  7364  0957  1D03               	skipz
  7365  0958  1781               	bsf	1,7
  7366                           
  7367                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  7368  0959  0021               	movlb	1	; select bank1
  7369  095A  083E               	movf	_RF^(0+128),w
  7370  095B  0086               	movwf	6
  7371  095C  0187               	clrf	7
  7372  095D  1B81               	btfsc	1,7
  7373  095E  298C               	goto	l9070
  7374                           
  7375                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  7376  095F  083E               	movf	_RF^(0+128),w
  7377  0960  0086               	movwf	6
  7378  0961  0187               	clrf	7
  7379  0962  1C81               	btfss	1,1
  7380  0963  2970               	goto	l9058
  7381                           
  7382                           ;RF_Control_B1.c: 77: {
  7383                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  7384  0964  083E               	movf	_RF^(0+128),w
  7385  0965  0086               	movwf	6
  7386  0966  0187               	clrf	7
  7387  0967  1081               	bcf	1,1
  7388                           
  7389                           ;RF_Control_B1.c: 79: CC2500_RxData();
  7390  0968  3193  2313  3189   	fcall	_CC2500_RxData
  7391                           
  7392                           ;RF_Control_B1.c: 86: getRxData(1);
  7393  096B  3001               	movlw	1
  7394  096C  3190  2045  3189   	fcall	_getRxData
  7395                           
  7396                           ;RF_Control_B1.c: 89: } else {
  7397  096F  2990               	goto	l9072
  7398  0970                     l9058:	
  7399                           
  7400                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  7401  0970  0021               	movlb	1	; select bank1
  7402  0971  083E               	movf	_RF^(0+128),w
  7403  0972  0086               	movwf	6
  7404  0973  0187               	clrf	7
  7405  0974  1901               	btfsc	1,2
  7406  0975  2990               	goto	l9072
  7407                           
  7408                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  7409  0976  083E               	movf	_RF^(0+128),w
  7410  0977  0086               	movwf	6
  7411  0978  0187               	clrf	7
  7412  0979  1981               	btfsc	1,3
  7413  097A  2990               	goto	l9072
  7414                           
  7415                           ;RF_Control_B1.c: 93: {
  7416                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  7417  097B  083E               	movf	_RF^(0+128),w
  7418  097C  0086               	movwf	6
  7419  097D  0187               	clrf	7
  7420  097E  1581               	bsf	1,3
  7421                           
  7422                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  7423  097F  3036               	movlw	54
  7424  0980  31A7  275E  3189   	fcall	_CC2500_WriteCommand
  7425                           
  7426                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  7427  0983  3034               	movlw	52
  7428  0984  31A7  275E  3189   	fcall	_CC2500_WriteCommand
  7429                           
  7430                           ;RF_Control_B1.c: 97: setINT_GO(1);
  7431  0987  3001               	movlw	1
  7432  0988  31A5  25EF  3189   	fcall	_setINT_GO
  7433                           
  7434                           ;RF_Control_B1.c: 98: }
  7435                           ;RF_Control_B1.c: 100: }
  7436                           ;RF_Control_B1.c: 101: }
  7437                           ;RF_Control_B1.c: 102: } else {
  7438  098B  2990               	goto	l9072
  7439  098C                     l9070:	
  7440                           
  7441                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  7442  098C  3001               	movlw	1
  7443  098D  319A  22E5  3189   	fcall	_RF_RxDisable
  7444  0990                     l9072:	
  7445                           
  7446                           ;RF_Control_B1.c: 104: }
  7447                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  7448  0990  0021               	movlb	1	; select bank1
  7449  0991  083E               	movf	_RF^(0+128),w
  7450  0992  0086               	movwf	6
  7451  0993  0187               	clrf	7
  7452  0994  1D01               	btfss	1,2
  7453  0995  0008               	return
  7454                           
  7455                           ;RF_Control_B1.c: 106: {
  7456                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  7457  0996  3001               	movlw	1
  7458  0997  319A  22E5  3189   	fcall	_RF_RxDisable
  7459                           
  7460                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  7461  099A  0021               	movlb	1	; select bank1
  7462  099B  083E               	movf	_RF^(0+128),w
  7463  099C  0086               	movwf	6
  7464  099D  0187               	clrf	7
  7465  099E  1A81               	btfsc	1,5
  7466  099F  29BB               	goto	l9086
  7467                           
  7468                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  7469  09A0  3001               	movlw	1
  7470  09A1  0020               	movlb	0	; select bank0
  7471  09A2  00E9               	movwf	??_setRF_Main
  7472  09A3  0021               	movlb	1	; select bank1
  7473  09A4  0A3E               	incf	_RF^(0+128),w
  7474  09A5  0086               	movwf	6
  7475  09A6  0187               	clrf	7
  7476  09A7  0020               	movlb	0	; select bank0
  7477  09A8  0869               	movf	??_setRF_Main,w
  7478  09A9  0781               	addwf	1,f
  7479                           
  7480                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  7481  09AA  0021               	movlb	1	; select bank1
  7482  09AB  0A3E               	incf	_RF^(0+128),w
  7483  09AC  0086               	movwf	6
  7484  09AD  0187               	clrf	7
  7485  09AE  0801               	movf	1,w
  7486  09AF  3A19               	xorlw	25
  7487  09B0  1D03               	skipz
  7488  09B1  0008               	return
  7489                           
  7490                           ;RF_Control_B1.c: 111: {
  7491                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  7492  09B2  0A3E               	incf	_RF^(0+128),w
  7493  09B3  0086               	movwf	6
  7494  09B4  0187               	clrf	7
  7495  09B5  0181               	clrf	1
  7496                           
  7497                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  7498  09B6  083E               	movf	_RF^(0+128),w
  7499  09B7  0086               	movwf	6
  7500  09B8  0187               	clrf	7
  7501  09B9  1681               	bsf	1,5
  7502                           
  7503                           ;RF_Control_B1.c: 114: }
  7504                           ;RF_Control_B1.c: 115: } else {
  7505  09BA  0008               	return
  7506  09BB                     l9086:	
  7507                           
  7508                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  7509  09BB  083E               	movf	_RF^(0+128),w
  7510  09BC  0086               	movwf	6
  7511  09BD  0187               	clrf	7
  7512  09BE  1281               	bcf	1,5
  7513                           
  7514                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  7515  09BF  083E               	movf	_RF^(0+128),w
  7516  09C0  0086               	movwf	6
  7517  09C1  0187               	clrf	7
  7518  09C2  1101               	bcf	1,2
  7519                           
  7520                           ;RF_Control_B1.c: 118: CC2500_TxData();
  7521  09C3  319E  260B         	fcall	_CC2500_TxData
  7522  09C5  0008               	return
  7523  09C6                     __end_of_setRF_Main:	
  7524                           
  7525                           	psect	text29
  7526  1045                     __ptext29:	
  7527 ;; *************** function _getRxData *****************
  7528 ;; Defined at:
  7529 ;;		line 202 in file "../src/RF_Control_B1.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  rf              1    wreg     unsigned char 
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;  rf              1   72[BANK0 ] unsigned char 
  7534 ;;  i               1    0        unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:        1 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:   11
  7551 ;; This function calls:
  7552 ;;		_RfPointSelect
  7553 ;;		_setControl_Lights_Table
  7554 ;;		_setLog_Code
  7555 ;; This function is called by:
  7556 ;;		_setRF_Main
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _getRxData
  7562  1045                     _getRxData:	
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7566                           ;getRxData@rf stored from wreg
  7567  1045  0020               	movlb	0	; select bank0
  7568  1046  00E8               	movwf	getRxData@rf
  7569                           
  7570                           ;RF_Control_B1.c: 203: unsigned char i;
  7571                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  7572  1047  0868               	movf	getRxData@rf,w
  7573  1048  31A6  2695  3190   	fcall	_RfPointSelect
  7574                           
  7575                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  7576  104B  0021               	movlb	1	; select bank1
  7577  104C  083E               	movf	_RF^(0+128),w
  7578  104D  0086               	movwf	6
  7579  104E  0187               	clrf	7
  7580  104F  1F01               	btfss	1,6
  7581  1050  285C               	goto	l8604
  7582                           
  7583                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7584  1051  08A0               	movf	_RF_Data^(0+128),f
  7585  1052  1D03               	skipz
  7586  1053  0008               	return
  7587  1054  0821               	movf	(_RF_Data^(0+128)+1),w
  7588  1055  3A64               	xorlw	100
  7589  1056  1D03               	skipz
  7590  1057  0008               	return
  7591                           
  7592                           ;RF_Control_B1.c: 207: {
  7593                           ;RF_Control_B1.c: 208: setLog_Code(1);
  7594  1058  3001               	movlw	1
  7595  1059  319E  26DA         	fcall	_setLog_Code
  7596                           
  7597                           ;RF_Control_B1.c: 209: }
  7598                           ;RF_Control_B1.c: 210: } else {
  7599  105B  0008               	return
  7600  105C                     l8604:	
  7601                           
  7602                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7603  105C  0021               	movlb	1	; select bank1
  7604  105D  08A0               	movf	_RF_Data^(0+128),f
  7605  105E  1D03               	skipz
  7606  105F  0008               	return
  7607  1060  0821               	movf	(_RF_Data^(0+128)+1),w
  7608  1061  3A02               	xorlw	2
  7609  1062  1D03               	skipz
  7610  1063  0008               	return
  7611                           
  7612                           ;RF_Control_B1.c: 212: {
  7613                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7614  1064  082C               	movf	(_RF_Data^(0+128)+12),w
  7615  1065  3AFF               	xorlw	255
  7616  1066  1D03               	skipz
  7617  1067  2872               	goto	l8616
  7618  1068  082D               	movf	(_RF_Data^(0+128)+13),w
  7619  1069  3AFF               	xorlw	255
  7620  106A  1D03               	skipz
  7621  106B  2872               	goto	l8616
  7622  106C  082E               	movf	(_RF_Data^(0+128)+14),w
  7623  106D  3AFF               	xorlw	255
  7624  106E  1D03               	skipz
  7625  106F  2872               	goto	l8616
  7626                           
  7627                           ;RF_Control_B1.c: 214: __nop();
  7628  1070  0000               	nop
  7629                           
  7630                           ;RF_Control_B1.c: 215: } else {
  7631  1071  0008               	return
  7632  1072                     l8616:	
  7633                           
  7634                           ;RF_Control_B1.c: 216: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7635  1072  087D               	movf	_product,w
  7636  1073  3E0C               	addlw	12
  7637  1074  0086               	movwf	6
  7638  1075  3001               	movlw	1	; select bank2/3
  7639  1076  0087               	movwf	7
  7640  1077  0021               	movlb	1	; select bank1
  7641  1078  082C               	movf	(_RF_Data^(0+128)+12),w
  7642  1079  0601               	xorwf	1,w
  7643  107A  1D03               	skipz
  7644  107B  0008               	return
  7645  107C  087D               	movf	_product,w
  7646  107D  3E0D               	addlw	13
  7647  107E  0086               	movwf	6
  7648  107F  3001               	movlw	1	; select bank2/3
  7649  1080  0087               	movwf	7
  7650  1081  082D               	movf	(_RF_Data^(0+128)+13),w
  7651  1082  0601               	xorwf	1,w
  7652  1083  1D03               	skipz
  7653  1084  0008               	return
  7654  1085  087D               	movf	_product,w
  7655  1086  3E0E               	addlw	14
  7656  1087  0086               	movwf	6
  7657  1088  3001               	movlw	1	; select bank2/3
  7658  1089  0087               	movwf	7
  7659  108A  082E               	movf	(_RF_Data^(0+128)+14),w
  7660  108B  0601               	xorwf	1,w
  7661  108C  1D03               	skipz
  7662  108D  0008               	return
  7663                           
  7664                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  7665  108E  3001               	movlw	1
  7666  108F  3194  24BC         	fcall	_setControl_Lights_Table
  7667                           
  7668                           ;RF_Control_B1.c: 224: {
  7669                           ;RF_Control_B1.c: 225: ;
  7670                           
  7671                           ;RF_Control_B1.c: 221: {
  7672                           ;RF_Control_B1.c: 222: ;
  7673                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7674                           
  7675                           ;RF_Control_B1.c: 218: }
  7676                           ;RF_Control_B1.c: 219: }
  7677                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7678  1091  0008               	return
  7679  1092                     __end_of_getRxData:	
  7680                           
  7681                           	psect	text30
  7682  1EDA                     __ptext30:	
  7683 ;; *************** function _setLog_Code *****************
  7684 ;; Defined at:
  7685 ;;		line 235 in file "../src/RF_Control_B1.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  rf              1    wreg     unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  rf              1   11[BANK0 ] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;		None               void
  7692 ;; Registers used:
  7693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;Total ram usage:        2 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    6
  7706 ;; This function calls:
  7707 ;;		_RfPointSelect
  7708 ;;		_setBuz
  7709 ;; This function is called by:
  7710 ;;		_getRxData
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _setLog_Code
  7716  1EDA                     _setLog_Code:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7720                           ;setLog_Code@rf stored from wreg
  7721  1EDA  0020               	movlb	0	; select bank0
  7722  1EDB  00AB               	movwf	setLog_Code@rf
  7723                           
  7724                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  7725  1EDC  082B               	movf	setLog_Code@rf,w
  7726  1EDD  31A6  2695  319E   	fcall	_RfPointSelect
  7727                           
  7728                           ;RF_Control_B1.c: 237: product->Data[12]=RF_Data[12];
  7729  1EE0  0021               	movlb	1	; select bank1
  7730  1EE1  082C               	movf	(_RF_Data^(0+128)+12),w
  7731  1EE2  0020               	movlb	0	; select bank0
  7732  1EE3  00AA               	movwf	??_setLog_Code
  7733  1EE4  087D               	movf	_product,w
  7734  1EE5  3E0C               	addlw	12
  7735  1EE6  0086               	movwf	6
  7736  1EE7  3001               	movlw	1	; select bank2/3
  7737  1EE8  0087               	movwf	7
  7738  1EE9  082A               	movf	??_setLog_Code,w
  7739  1EEA  0081               	movwf	1
  7740                           
  7741                           ;RF_Control_B1.c: 238: product->Data[13]=RF_Data[13];
  7742  1EEB  0021               	movlb	1	; select bank1
  7743  1EEC  082D               	movf	(_RF_Data^(0+128)+13),w
  7744  1EED  0020               	movlb	0	; select bank0
  7745  1EEE  00AA               	movwf	??_setLog_Code
  7746  1EEF  087D               	movf	_product,w
  7747  1EF0  3E0D               	addlw	13
  7748  1EF1  0086               	movwf	6
  7749  1EF2  3001               	movlw	1	; select bank2/3
  7750  1EF3  0087               	movwf	7
  7751  1EF4  082A               	movf	??_setLog_Code,w
  7752  1EF5  0081               	movwf	1
  7753                           
  7754                           ;RF_Control_B1.c: 239: product->Data[14]=RF_Data[14];
  7755  1EF6  0021               	movlb	1	; select bank1
  7756  1EF7  082E               	movf	(_RF_Data^(0+128)+14),w
  7757  1EF8  0020               	movlb	0	; select bank0
  7758  1EF9  00AA               	movwf	??_setLog_Code
  7759  1EFA  087D               	movf	_product,w
  7760  1EFB  3E0E               	addlw	14
  7761  1EFC  0086               	movwf	6
  7762  1EFD  3001               	movlw	1	; select bank2/3
  7763  1EFE  0087               	movwf	7
  7764  1EFF  082A               	movf	??_setLog_Code,w
  7765  1F00  0081               	movwf	1
  7766                           
  7767                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  7768  1F01  3064               	movlw	100
  7769  1F02  00A6               	movwf	setBuz@time
  7770  1F03  3000               	movlw	0
  7771  1F04  00A7               	movwf	setBuz@time+1
  7772  1F05  3001               	movlw	1
  7773  1F06  3188  2019  319E   	fcall	_setBuz
  7774                           
  7775                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  7776  1F09  0021               	movlb	1	; select bank1
  7777  1F0A  083E               	movf	_RF^(0+128),w
  7778  1F0B  0086               	movwf	6
  7779  1F0C  0187               	clrf	7
  7780  1F0D  1301               	bcf	1,6
  7781                           
  7782                           ;RF_Control_B1.c: 242: if (myMain->First) {
  7783  1F0E  086D               	movf	_myMain^(0+128),w
  7784  1F0F  3E03               	addlw	3
  7785  1F10  0086               	movwf	6
  7786  1F11  3001               	movlw	1	; select bank2/3
  7787  1F12  0087               	movwf	7
  7788  1F13  1C81               	btfss	1,1
  7789  1F14  2F1B               	goto	l2250
  7790                           
  7791                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  7792  1F15  086A               	movf	_Memory^(0+128),w
  7793  1F16  3E22               	addlw	34
  7794  1F17  0086               	movwf	6
  7795  1F18  3001               	movlw	1	; select bank2/3
  7796  1F19  0087               	movwf	7
  7797  1F1A  1501               	bsf	1,2
  7798  1F1B                     l2250:	
  7799                           
  7800                           ;RF_Control_B1.c: 244: }
  7801                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  7802  1F1B  086A               	movf	_Memory^(0+128),w
  7803  1F1C  3E22               	addlw	34
  7804  1F1D  0086               	movwf	6
  7805  1F1E  3001               	movlw	1	; select bank2/3
  7806  1F1F  0087               	movwf	7
  7807  1F20  1401               	bsf	1,0
  7808  1F21  0008               	return
  7809  1F22                     __end_of_setLog_Code:	
  7810                           
  7811                           	psect	text31
  7812  14BC                     __ptext31:	
  7813 ;; *************** function _setControl_Lights_Table *****************
  7814 ;; Defined at:
  7815 ;;		line 249 in file "../src/RF_Control_B1.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  rf              1    wreg     unsigned char 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  rf              1   71[BANK0 ] unsigned char 
  7820 ;; Return value:  Size  Location     Type
  7821 ;;		None               void
  7822 ;; Registers used:
  7823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;Total ram usage:        1 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:   10
  7836 ;; This function calls:
  7837 ;;		_RfPointSelect
  7838 ;;		_setBuz
  7839 ;;		_setDimmerLights
  7840 ;;		_setRFSW_AdjControl
  7841 ;;		_setRFSW_Control
  7842 ;;		_setRFSW_Status
  7843 ;;		_setSw_Status
  7844 ;;		_setTxData
  7845 ;; This function is called by:
  7846 ;;		_getRxData
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _setControl_Lights_Table
  7852  14BC                     _setControl_Lights_Table:	
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7856                           ;setControl_Lights_Table@rf stored from wreg
  7857  14BC  0020               	movlb	0	; select bank0
  7858  14BD  00E7               	movwf	setControl_Lights_Table@rf
  7859                           
  7860                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  7861  14BE  0867               	movf	setControl_Lights_Table@rf,w
  7862  14BF  31A6  2695  3194   	fcall	_RfPointSelect
  7863                           
  7864                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  7865  14C2  0021               	movlb	1	; select bank1
  7866  14C3  08AF               	movf	(_RF_Data^(0+128)+15),f
  7867  14C4  1D03               	skipz
  7868  14C5  2CFD               	goto	l8436
  7869                           
  7870                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  7871  14C6  0020               	movlb	0	; select bank0
  7872  14C7  01A4               	clrf	setDimmerLights@status
  7873  14C8  3001               	movlw	1
  7874  14C9  3189  21C6  3194   	fcall	_setDimmerLights
  7875                           
  7876                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  7877  14CC  0020               	movlb	0	; select bank0
  7878  14CD  01A2               	clrf	setRFSW_Status@command
  7879  14CE  3001               	movlw	1
  7880  14CF  31A7  2713  3194   	fcall	_setRFSW_Status
  7881                           
  7882                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  7883  14D2  0020               	movlb	0	; select bank0
  7884  14D3  01A2               	clrf	setSw_Status@command
  7885  14D4  3001               	movlw	1
  7886  14D5  31A7  2722  3194   	fcall	_setSw_Status
  7887                           
  7888                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  7889  14D8  087D               	movf	_product,w
  7890  14D9  3E09               	addlw	9
  7891  14DA  0086               	movwf	6
  7892  14DB  3001               	movlw	1	; select bank2/3
  7893  14DC  0087               	movwf	7
  7894  14DD  0181               	clrf	1
  7895                           
  7896                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  7897  14DE  087D               	movf	_product,w
  7898  14DF  3E0B               	addlw	11
  7899  14E0  0086               	movwf	6
  7900  14E1  3001               	movlw	1	; select bank2/3
  7901  14E2  0087               	movwf	7
  7902  14E3  0181               	clrf	1
  7903                           
  7904                           ;RF_Control_B1.c: 270: product->Data[15]=0;
  7905  14E4  087D               	movf	_product,w
  7906  14E5  3E0F               	addlw	15
  7907  14E6  0086               	movwf	6
  7908  14E7  3001               	movlw	1	; select bank2/3
  7909  14E8  0087               	movwf	7
  7910  14E9  0181               	clrf	1
  7911                           
  7912                           ;RF_Control_B1.c: 271: product->Data[17]=0;
  7913  14EA  087D               	movf	_product,w
  7914  14EB  3E11               	addlw	17
  7915  14EC  0086               	movwf	6
  7916  14ED  3001               	movlw	1	; select bank2/3
  7917  14EE  0087               	movwf	7
  7918  14EF  0181               	clrf	1
  7919                           
  7920                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  7921  14F0  3064               	movlw	100
  7922  14F1  0020               	movlb	0	; select bank0
  7923  14F2  00A6               	movwf	setBuz@time
  7924  14F3  3000               	movlw	0
  7925  14F4  00A7               	movwf	setBuz@time+1
  7926  14F5  3001               	movlw	1
  7927  14F6  3188  2019  3194   	fcall	_setBuz
  7928                           
  7929                           ;RF_Control_B1.c: 273: setTxData(1);
  7930  14F9  3001               	movlw	1
  7931  14FA  318A  22F2         	fcall	_setTxData
  7932                           
  7933                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  7934  14FC  0008               	return
  7935  14FD                     l8436:	
  7936  14FD  0021               	movlb	1	; select bank1
  7937  14FE  082F               	movf	(_RF_Data^(0+128)+15),w
  7938  14FF  3A20               	xorlw	32
  7939  1500  1D03               	skipz
  7940  1501  2D18               	goto	l8442
  7941                           
  7942                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  7943  1502  087D               	movf	_product,w
  7944  1503  3E09               	addlw	9
  7945  1504  0086               	movwf	6
  7946  1505  3001               	movlw	1	; select bank2/3
  7947  1506  0087               	movwf	7
  7948  1507  0181               	clrf	1
  7949                           
  7950                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  7951  1508  087D               	movf	_product,w
  7952  1509  3E0B               	addlw	11
  7953  150A  0086               	movwf	6
  7954  150B  3001               	movlw	1	; select bank2/3
  7955  150C  0087               	movwf	7
  7956  150D  0181               	clrf	1
  7957                           
  7958                           ;RF_Control_B1.c: 277: product->Data[17]=0;
  7959  150E  087D               	movf	_product,w
  7960  150F  3E11               	addlw	17
  7961  1510  0086               	movwf	6
  7962  1511  3001               	movlw	1	; select bank2/3
  7963  1512  0087               	movwf	7
  7964  1513  0181               	clrf	1
  7965                           
  7966                           ;RF_Control_B1.c: 278: setTxData(1);
  7967  1514  3001               	movlw	1
  7968  1515  318A  22F2         	fcall	_setTxData
  7969                           
  7970                           ;RF_Control_B1.c: 279: }
  7971  1517  0008               	return
  7972  1518                     l8442:	
  7973                           
  7974                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  7975  1518  0021               	movlb	1	; select bank1
  7976  1519  082F               	movf	(_RF_Data^(0+128)+15),w
  7977  151A  3A01               	xorlw	1
  7978  151B  1D03               	skipz
  7979  151C  2D21               	goto	l8446
  7980                           
  7981                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  7982  151D  3001               	movlw	1
  7983  151E  3188  20A2         	fcall	_setRFSW_Control
  7984                           
  7985                           ;RF_Control_B1.c: 283: }
  7986  1520  0008               	return
  7987  1521                     l8446:	
  7988                           
  7989                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  7990  1521  0021               	movlb	1	; select bank1
  7991  1522  082F               	movf	(_RF_Data^(0+128)+15),w
  7992  1523  3A11               	xorlw	17
  7993  1524  1D03               	skipz
  7994  1525  0008               	return
  7995                           
  7996                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  7997  1526  3001               	movlw	1
  7998  1527  319D  2587         	fcall	_setRFSW_AdjControl
  7999  1529  0008               	return
  8000  152A                     __end_of_setControl_Lights_Table:	
  8001                           
  8002                           	psect	text32
  8003  08A2                     __ptext32:	
  8004 ;; *************** function _setRFSW_Control *****************
  8005 ;; Defined at:
  8006 ;;		line 334 in file "../src/RF_Control_B1.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  sw              1    wreg     unsigned char 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  sw              1   67[BANK0 ] unsigned char 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;		None               void
  8013 ;; Registers used:
  8014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;Total ram usage:        2 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    8
  8027 ;; This function calls:
  8028 ;;		_RfSWPointSelect
  8029 ;;		_setBuz
  8030 ;;		_setDelayOff_GO
  8031 ;;		_setDimmerLights_Switch
  8032 ;;		_setDimmerLights_Trigger
  8033 ;;		_setRF_DimmerLights
  8034 ;;		_setSw_Status
  8035 ;;		_setTxData
  8036 ;; This function is called by:
  8037 ;;		_setControl_Lights_Table
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _setRFSW_Control
  8043  08A2                     _setRFSW_Control:	
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8047                           ;setRFSW_Control@sw stored from wreg
  8048  08A2  0020               	movlb	0	; select bank0
  8049  08A3  00E3               	movwf	setRFSW_Control@sw
  8050                           
  8051                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  8052  08A4  0863               	movf	setRFSW_Control@sw,w
  8053  08A5  31A6  2689  3188   	fcall	_RfSWPointSelect
  8054                           
  8055                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  8056  08A8  0021               	movlb	1	; select bank1
  8057  08A9  083F               	movf	_RFSW^(0+128),w
  8058  08AA  0086               	movwf	6
  8059  08AB  0187               	clrf	7
  8060  08AC  1801               	btfsc	1,0
  8061  08AD  28E3               	goto	l8324
  8062                           
  8063                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  8064  08AE  0830               	movf	(_RF_Data^(0+128)+16),w
  8065  08AF  3A80               	xorlw	128
  8066  08B0  1D03               	skipz
  8067  08B1  28BF               	goto	l8314
  8068                           
  8069                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  8070  08B2  0020               	movlb	0	; select bank0
  8071  08B3  01A3               	clrf	setDelayOff_GO@command
  8072  08B4  0AA3               	incf	setDelayOff_GO@command,f
  8073  08B5  0021               	movlb	1	; select bank1
  8074  08B6  0831               	movf	(_RF_Data^(0+128)+17),w
  8075  08B7  0020               	movlb	0	; select bank0
  8076  08B8  00E2               	movwf	??_setRFSW_Control
  8077  08B9  0862               	movf	??_setRFSW_Control,w
  8078  08BA  00A4               	movwf	setDelayOff_GO@value
  8079  08BB  0863               	movf	setRFSW_Control@sw,w
  8080  08BC  3191  21F8  3188   	fcall	_setDelayOff_GO
  8081  08BF                     l8314:	
  8082                           
  8083                           ;RF_Control_B1.c: 339: }
  8084                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  8085  08BF  0021               	movlb	1	; select bank1
  8086  08C0  083F               	movf	_RFSW^(0+128),w
  8087  08C1  0086               	movwf	6
  8088  08C2  0187               	clrf	7
  8089  08C3  1401               	bsf	1,0
  8090                           
  8091                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  8092  08C4  0020               	movlb	0	; select bank0
  8093  08C5  01A2               	clrf	setSw_Status@command
  8094  08C6  0AA2               	incf	setSw_Status@command,f
  8095  08C7  0863               	movf	setRFSW_Control@sw,w
  8096  08C8  31A7  2722  3188   	fcall	_setSw_Status
  8097                           
  8098                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  8099  08CB  0020               	movlb	0	; select bank0
  8100  08CC  01A2               	clrf	setDimmerLights_Trigger@command
  8101  08CD  0AA2               	incf	setDimmerLights_Trigger@command,f
  8102  08CE  0863               	movf	setRFSW_Control@sw,w
  8103  08CF  31A7  277E  3188   	fcall	_setDimmerLights_Trigger
  8104                           
  8105                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  8106  08D2  0020               	movlb	0	; select bank0
  8107  08D3  01A2               	clrf	setDimmerLights_Switch@command
  8108  08D4  0AA2               	incf	setDimmerLights_Switch@command,f
  8109  08D5  0863               	movf	setRFSW_Control@sw,w
  8110  08D6  31A7  276E  3188   	fcall	_setDimmerLights_Switch
  8111                           
  8112                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  8113  08D9  0021               	movlb	1	; select bank1
  8114  08DA  083F               	movf	_RFSW^(0+128),w
  8115  08DB  0086               	movwf	6
  8116  08DC  0187               	clrf	7
  8117  08DD  3000               	movlw	0
  8118  08DE  1801               	btfsc	1,0
  8119  08DF  3001               	movlw	1
  8120  08E0  0020               	movlb	0	; select bank0
  8121  08E1  00DD               	movwf	setRF_DimmerLights@on
  8122  08E2  2921               	goto	L2
  8123  08E3                     l8324:	
  8124                           ;RF_Control_B1.c: 347: } else {
  8125                           
  8126                           
  8127                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  8128  08E3  0021               	movlb	1	; select bank1
  8129  08E4  0830               	movf	(_RF_Data^(0+128)+16),w
  8130  08E5  3A80               	xorlw	128
  8131  08E6  1D03               	skipz
  8132  08E7  28F9               	goto	l8330
  8133                           
  8134                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  8135  08E8  0020               	movlb	0	; select bank0
  8136  08E9  01A3               	clrf	setDelayOff_GO@command
  8137  08EA  0AA3               	incf	setDelayOff_GO@command,f
  8138  08EB  0021               	movlb	1	; select bank1
  8139  08EC  0831               	movf	(_RF_Data^(0+128)+17),w
  8140  08ED  0020               	movlb	0	; select bank0
  8141  08EE  00E2               	movwf	??_setRFSW_Control
  8142  08EF  0862               	movf	??_setRFSW_Control,w
  8143  08F0  00A4               	movwf	setDelayOff_GO@value
  8144  08F1  0863               	movf	setRFSW_Control@sw,w
  8145  08F2  3191  21F8  3188   	fcall	_setDelayOff_GO
  8146                           
  8147                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  8148  08F5  0020               	movlb	0	; select bank0
  8149  08F6  01DD               	clrf	setRF_DimmerLights@on
  8150  08F7  0ADD               	incf	setRF_DimmerLights@on,f
  8151  08F8  2921               	goto	L2
  8152  08F9                     l8330:	
  8153                           ;RF_Control_B1.c: 351: } else {
  8154                           
  8155                           
  8156                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  8157  08F9  0021               	movlb	1	; select bank1
  8158  08FA  083F               	movf	_RFSW^(0+128),w
  8159  08FB  0086               	movwf	6
  8160  08FC  0187               	clrf	7
  8161  08FD  1001               	bcf	1,0
  8162                           
  8163                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  8164  08FE  0020               	movlb	0	; select bank0
  8165  08FF  01A2               	clrf	setSw_Status@command
  8166  0900  0863               	movf	setRFSW_Control@sw,w
  8167  0901  31A7  2722  3188   	fcall	_setSw_Status
  8168                           
  8169                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  8170  0904  0020               	movlb	0	; select bank0
  8171  0905  01A2               	clrf	setDimmerLights_Trigger@command
  8172  0906  0AA2               	incf	setDimmerLights_Trigger@command,f
  8173  0907  0863               	movf	setRFSW_Control@sw,w
  8174  0908  31A7  277E  3188   	fcall	_setDimmerLights_Trigger
  8175                           
  8176                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  8177  090B  0021               	movlb	1	; select bank1
  8178  090C  083F               	movf	_RFSW^(0+128),w
  8179  090D  0086               	movwf	6
  8180  090E  0187               	clrf	7
  8181  090F  3000               	movlw	0
  8182  0910  1801               	btfsc	1,0
  8183  0911  3001               	movlw	1
  8184  0912  0020               	movlb	0	; select bank0
  8185  0913  00A2               	movwf	setDimmerLights_Switch@command
  8186  0914  0863               	movf	setRFSW_Control@sw,w
  8187  0915  31A7  276E  3188   	fcall	_setDimmerLights_Switch
  8188                           
  8189                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  8190  0918  0020               	movlb	0	; select bank0
  8191  0919  01A3               	clrf	setDelayOff_GO@command
  8192  091A  01A4               	clrf	setDelayOff_GO@value
  8193  091B  0863               	movf	setRFSW_Control@sw,w
  8194  091C  3191  21F8  3188   	fcall	_setDelayOff_GO
  8195                           
  8196                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  8197  091F  0020               	movlb	0	; select bank0
  8198  0920  01DD               	clrf	setRF_DimmerLights@on
  8199  0921                     L2:	
  8200  0921  0863               	movf	setRFSW_Control@sw,w
  8201  0922  3193  2377  3188   	fcall	_setRF_DimmerLights
  8202                           
  8203                           ;RF_Control_B1.c: 360: }
  8204                           ;RF_Control_B1.c: 361: }
  8205                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  8206  0925  3064               	movlw	100
  8207  0926  0020               	movlb	0	; select bank0
  8208  0927  00A6               	movwf	setBuz@time
  8209  0928  3000               	movlw	0
  8210  0929  00A7               	movwf	setBuz@time+1
  8211  092A  3001               	movlw	1
  8212  092B  3188  2019  3188   	fcall	_setBuz
  8213                           
  8214                           ;RF_Control_B1.c: 363: setTxData(1);
  8215  092E  3001               	movlw	1
  8216  092F  318A  22F2         	fcall	_setTxData
  8217  0931  0008               	return
  8218  0932                     __end_of_setRFSW_Control:	
  8219                           
  8220                           	psect	text33
  8221  11F8                     __ptext33:	
  8222 ;; *************** function _setDelayOff_GO *****************
  8223 ;; Defined at:
  8224 ;;		line 85 in file "../src/DelayOff_B1.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  sw              1    wreg     unsigned char 
  8227 ;;  command         1    3[BANK0 ] unsigned char 
  8228 ;;  value           1    4[BANK0 ] unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  sw              1    7[BANK0 ] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;		None               void
  8233 ;; Registers used:
  8234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;Total ram usage:        5 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; Hardware stack levels required when called:    5
  8247 ;; This function calls:
  8248 ;;		_DelayOffPointSelect
  8249 ;;		_DelayTimejudge
  8250 ;; This function is called by:
  8251 ;;		_setRFSW_Control
  8252 ;;		_Sw_DimmerOffFunc
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _setDelayOff_GO
  8258  11F8                     _setDelayOff_GO:	
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8262                           ;setDelayOff_GO@sw stored from wreg
  8263  11F8  0020               	movlb	0	; select bank0
  8264  11F9  00A7               	movwf	setDelayOff_GO@sw
  8265                           
  8266                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  8267  11FA  0827               	movf	setDelayOff_GO@sw,w
  8268  11FB  31A6  267D  3191   	fcall	_DelayOffPointSelect
  8269                           
  8270                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  8271  11FE  0021               	movlb	1	; select bank1
  8272  11FF  0839               	movf	_DelayOff^(0+128),w
  8273  1200  0086               	movwf	6
  8274  1201  0187               	clrf	7
  8275  1202  1C01               	btfss	1,0
  8276  1203  0008               	return
  8277                           
  8278                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  8279  1204  0839               	movf	_DelayOff^(0+128),w
  8280  1205  0086               	movwf	6
  8281  1206  0187               	clrf	7
  8282  1207  0020               	movlb	0	; select bank0
  8283  1208  0823               	movf	setDelayOff_GO@command,w
  8284  1209  1081               	bcf	1,1
  8285  120A  1D03               	skipz
  8286  120B  1481               	bsf	1,1
  8287                           
  8288                           ;DelayOff_B1.c: 89: if (command) {
  8289  120C  0823               	movf	setDelayOff_GO@command,w
  8290  120D  1903               	btfsc	3,2
  8291  120E  2A3A               	goto	l6164
  8292                           
  8293                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  8294  120F  0824               	movf	setDelayOff_GO@value,w
  8295  1210  319B  238E  3191   	fcall	_DelayTimejudge
  8296  1213  0020               	movlb	0	; select bank0
  8297  1214  00A5               	movwf	??_setDelayOff_GO
  8298  1215  0021               	movlb	1	; select bank1
  8299  1216  0A39               	incf	_DelayOff^(0+128),w
  8300  1217  0086               	movwf	6
  8301  1218  0187               	clrf	7
  8302  1219  0020               	movlb	0	; select bank0
  8303  121A  0825               	movf	??_setDelayOff_GO,w
  8304  121B  0081               	movwf	1
  8305                           
  8306                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  8307  121C  300F               	movlw	15
  8308  121D  0524               	andwf	setDelayOff_GO@value,w
  8309  121E  00A5               	movwf	??_setDelayOff_GO
  8310  121F  0825               	movf	??_setDelayOff_GO,w
  8311  1220  3A05               	xorlw	5
  8312  1221  1903               	skipnz
  8313  1222  2A27               	goto	l6158
  8314  1223  0824               	movf	setDelayOff_GO@value,w
  8315  1224  390F               	andlw	15
  8316  1225  1D03               	btfss	3,2
  8317  1226  2A2D               	goto	l6162
  8318  1227                     l6158:	
  8319  1227  3026               	movlw	38
  8320  1228  0224               	subwf	setDelayOff_GO@value,w
  8321  1229  1803               	skipnc
  8322  122A  2A2D               	goto	l6162
  8323                           
  8324                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  8325  122B  0824               	movf	setDelayOff_GO@value,w
  8326  122C  2A2E               	goto	L3
  8327  122D                     l6162:	
  8328                           ;DelayOff_B1.c: 93: } else {
  8329                           
  8330                           
  8331                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  8332  122D  3005               	movlw	5
  8333  122E                     L3:	
  8334  122E  00A5               	movwf	??_setDelayOff_GO
  8335  122F  0827               	movf	setDelayOff_GO@sw,w
  8336  1230  3E1A               	addlw	26
  8337  1231  077D               	addwf	_product,w
  8338  1232  00A6               	movwf	??_setDelayOff_GO+1
  8339  1233  0826               	movf	??_setDelayOff_GO+1,w
  8340  1234  0086               	movwf	6
  8341  1235  3001               	movlw	1	; select bank2/3
  8342  1236  0087               	movwf	7
  8343  1237  0825               	movf	??_setDelayOff_GO,w
  8344  1238  0081               	movwf	1
  8345                           
  8346                           ;DelayOff_B1.c: 95: }
  8347                           ;DelayOff_B1.c: 96: } else if (!command) {
  8348  1239  2A46               	goto	l6168
  8349  123A                     l6164:	
  8350  123A  08A3               	movf	setDelayOff_GO@command,f
  8351  123B  1D03               	skipz
  8352  123C  2A46               	goto	l6168
  8353                           
  8354                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  8355  123D  0827               	movf	setDelayOff_GO@sw,w
  8356  123E  3E1A               	addlw	26
  8357  123F  077D               	addwf	_product,w
  8358  1240  00A5               	movwf	??_setDelayOff_GO
  8359  1241  0825               	movf	??_setDelayOff_GO,w
  8360  1242  0086               	movwf	6
  8361  1243  3001               	movlw	1	; select bank2/3
  8362  1244  0087               	movwf	7
  8363  1245  0181               	clrf	1
  8364  1246                     l6168:	
  8365                           
  8366                           ;DelayOff_B1.c: 98: }
  8367                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  8368  1246  0021               	movlb	1	; select bank1
  8369  1247  0839               	movf	_DelayOff^(0+128),w
  8370  1248  3E02               	addlw	2
  8371  1249  0086               	movwf	6
  8372  124A  0187               	clrf	7
  8373  124B  3000               	movlw	0
  8374  124C  3FC0               	movwi [0]fsr1
  8375  124D  3FC1               	movwi [1]fsr1
  8376                           
  8377                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  8378  124E  0839               	movf	_DelayOff^(0+128),w
  8379  124F  3E04               	addlw	4
  8380  1250  0086               	movwf	6
  8381  1251  0187               	clrf	7
  8382  1252  0181               	clrf	1
  8383  1253  0008               	return
  8384  1254                     __end_of_setDelayOff_GO:	
  8385                           
  8386                           	psect	text34
  8387  1B8E                     __ptext34:	
  8388 ;; *************** function _DelayTimejudge *****************
  8389 ;; Defined at:
  8390 ;;		line 105 in file "../src/DelayOff_B1.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  value           1    wreg     unsigned char 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  value           1    1[BANK0 ] unsigned char 
  8395 ;;  i               1    2[BANK0 ] unsigned char 
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      unsigned char 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;Total ram usage:        3 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    4
  8412 ;; This function calls:
  8413 ;;		Nothing
  8414 ;; This function is called by:
  8415 ;;		_setDelayOff_GO
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function _DelayTimejudge
  8421  1B8E                     _DelayTimejudge:	
  8422                           
  8423                           ;incstack = 0
  8424                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  8425                           ;DelayTimejudge@value stored from wreg
  8426  1B8E  0020               	movlb	0	; select bank0
  8427  1B8F  00A1               	movwf	DelayTimejudge@value
  8428                           
  8429                           ;DelayOff_B1.c: 106: char i = 5;
  8430  1B90  3005               	movlw	5
  8431  1B91  00A0               	movwf	??_DelayTimejudge
  8432  1B92  0820               	movf	??_DelayTimejudge,w
  8433  1B93  00A2               	movwf	DelayTimejudge@i
  8434                           
  8435                           ;DelayOff_B1.c: 107: switch (value) {
  8436  1B94  2BA4               	goto	l6020
  8437  1B95                     l6006:	
  8438                           ;DelayOff_B1.c: 108: case 0x05:
  8439                           
  8440                           
  8441                           ;DelayOff_B1.c: 109: i = 5;
  8442  1B95  3005               	movlw	5
  8443  1B96  2BA0               	goto	L8
  8444  1B97                     l6008:	
  8445                           ;DelayOff_B1.c: 111: case 0x10:
  8446                           
  8447                           ;DelayOff_B1.c: 110: break;
  8448                           
  8449                           
  8450                           ;DelayOff_B1.c: 112: i = 10;
  8451  1B97  300A               	movlw	10
  8452  1B98  2BA0               	goto	L8
  8453  1B99                     l6010:	
  8454                           ;DelayOff_B1.c: 114: case 0x15:
  8455                           
  8456                           ;DelayOff_B1.c: 113: break;
  8457                           
  8458                           
  8459                           ;DelayOff_B1.c: 115: i = 15;
  8460  1B99  300F               	movlw	15
  8461  1B9A  2BA0               	goto	L8
  8462  1B9B                     l6012:	
  8463                           ;DelayOff_B1.c: 117: case 0x20:
  8464                           
  8465                           ;DelayOff_B1.c: 116: break;
  8466                           
  8467                           
  8468                           ;DelayOff_B1.c: 118: i = 20;
  8469  1B9B  3014               	movlw	20
  8470  1B9C  2BA0               	goto	L8
  8471  1B9D                     l6014:	
  8472                           ;DelayOff_B1.c: 120: case 0x25:
  8473                           
  8474                           ;DelayOff_B1.c: 119: break;
  8475                           
  8476                           
  8477                           ;DelayOff_B1.c: 121: i = 25;
  8478  1B9D  3019               	movlw	25
  8479  1B9E  2BA0               	goto	L8
  8480  1B9F                     l6016:	
  8481                           ;DelayOff_B1.c: 123: case 0x30:
  8482                           
  8483                           ;DelayOff_B1.c: 122: break;
  8484                           
  8485                           
  8486                           ;DelayOff_B1.c: 124: i = 30;
  8487  1B9F  301E               	movlw	30
  8488  1BA0                     L8:	
  8489  1BA0  00A0               	movwf	??_DelayTimejudge
  8490  1BA1  0820               	movf	??_DelayTimejudge,w
  8491  1BA2  00A2               	movwf	DelayTimejudge@i
  8492                           
  8493                           ;DelayOff_B1.c: 126: }
  8494                           
  8495                           ;DelayOff_B1.c: 125: break;
  8496  1BA3  2BB8               	goto	l6022
  8497  1BA4                     l6020:	
  8498  1BA4  0821               	movf	DelayTimejudge@value,w
  8499                           
  8500                           ; Switch size 1, requested type "space"
  8501                           ; Number of cases is 6, Range of values is 5 to 48
  8502                           ; switch strategies available:
  8503                           ; Name         Instructions Cycles
  8504                           ; simple_byte           19    10 (average)
  8505                           ; direct_byte           97     9 (fixed)
  8506                           ; jumptable            263     9 (fixed)
  8507                           ;	Chosen strategy is simple_byte
  8508  1BA5  3A05               	xorlw	5	; case 5
  8509  1BA6  1903               	skipnz
  8510  1BA7  2B95               	goto	l6006
  8511  1BA8  3A15               	xorlw	21	; case 16
  8512  1BA9  1903               	skipnz
  8513  1BAA  2B97               	goto	l6008
  8514  1BAB  3A05               	xorlw	5	; case 21
  8515  1BAC  1903               	skipnz
  8516  1BAD  2B99               	goto	l6010
  8517  1BAE  3A35               	xorlw	53	; case 32
  8518  1BAF  1903               	skipnz
  8519  1BB0  2B9B               	goto	l6012
  8520  1BB1  3A05               	xorlw	5	; case 37
  8521  1BB2  1903               	skipnz
  8522  1BB3  2B9D               	goto	l6014
  8523  1BB4  3A15               	xorlw	21	; case 48
  8524  1BB5  1903               	skipnz
  8525  1BB6  2B9F               	goto	l6016
  8526  1BB7  2BB8               	goto	l6022
  8527  1BB8                     l6022:	
  8528                           
  8529                           ;DelayOff_B1.c: 127: return i;
  8530  1BB8  0822               	movf	DelayTimejudge@i,w
  8531  1BB9  0008               	return
  8532  1BBA                     __end_of_DelayTimejudge:	
  8533                           
  8534                           	psect	text35
  8535  1D87                     __ptext35:	
  8536 ;; *************** function _setRFSW_AdjControl *****************
  8537 ;; Defined at:
  8538 ;;		line 367 in file "../src/RF_Control_B1.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  sw              1    wreg     unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  sw              1   70[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;		None               void
  8545 ;; Registers used:
  8546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        3 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    9
  8559 ;; This function calls:
  8560 ;;		_RfSWPointSelect
  8561 ;;		_setRF_DimmerValue
  8562 ;;		_setTxData
  8563 ;; This function is called by:
  8564 ;;		_setControl_Lights_Table
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           
  8569                           ;psect for function _setRFSW_AdjControl
  8570  1D87                     _setRFSW_AdjControl:	
  8571                           
  8572                           ;incstack = 0
  8573                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8574                           ;setRFSW_AdjControl@sw stored from wreg
  8575  1D87  0020               	movlb	0	; select bank0
  8576  1D88  00E6               	movwf	setRFSW_AdjControl@sw
  8577                           
  8578                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  8579  1D89  0866               	movf	setRFSW_AdjControl@sw,w
  8580  1D8A  31A6  2689  319D   	fcall	_RfSWPointSelect
  8581                           
  8582                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  8583  1D8D  0021               	movlb	1	; select bank1
  8584  1D8E  083F               	movf	_RFSW^(0+128),w
  8585  1D8F  0086               	movwf	6
  8586  1D90  0187               	clrf	7
  8587  1D91  1C01               	btfss	1,0
  8588  1D92  2D9F               	goto	l6412
  8589                           
  8590                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  8591  1D93  086A               	movf	_Memory^(0+128),w
  8592  1D94  3E22               	addlw	34
  8593  1D95  0086               	movwf	6
  8594  1D96  3001               	movlw	1	; select bank2/3
  8595  1D97  0087               	movwf	7
  8596  1D98  1401               	bsf	1,0
  8597                           
  8598                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  8599  1D99  0020               	movlb	0	; select bank0
  8600  1D9A  0866               	movf	setRFSW_AdjControl@sw,w
  8601  1D9B  319C  24DB  319D   	fcall	_setRF_DimmerValue
  8602                           
  8603                           ;RF_Control_B1.c: 372: } else {
  8604  1D9E  2DB1               	goto	l2277
  8605  1D9F                     l6412:	
  8606                           
  8607                           ;RF_Control_B1.c: 373: product->Data[9]=product->Data[20 + sw];
  8608  1D9F  0020               	movlb	0	; select bank0
  8609  1DA0  0866               	movf	setRFSW_AdjControl@sw,w
  8610  1DA1  3E14               	addlw	20
  8611  1DA2  077D               	addwf	_product,w
  8612  1DA3  00E4               	movwf	??_setRFSW_AdjControl
  8613  1DA4  0864               	movf	??_setRFSW_AdjControl,w
  8614  1DA5  0086               	movwf	6
  8615  1DA6  3001               	movlw	1	; select bank2/3
  8616  1DA7  0087               	movwf	7
  8617  1DA8  0801               	movf	1,w
  8618  1DA9  00E5               	movwf	??_setRFSW_AdjControl+1
  8619  1DAA  087D               	movf	_product,w
  8620  1DAB  3E09               	addlw	9
  8621  1DAC  0086               	movwf	6
  8622  1DAD  3001               	movlw	1	; select bank2/3
  8623  1DAE  0087               	movwf	7
  8624  1DAF  0865               	movf	??_setRFSW_AdjControl+1,w
  8625  1DB0  0081               	movwf	1
  8626  1DB1                     l2277:	
  8627                           
  8628                           ;RF_Control_B1.c: 374: }
  8629                           ;RF_Control_B1.c: 375: product->Data[17]=product->Data[26 + sw];
  8630  1DB1  0020               	movlb	0	; select bank0
  8631  1DB2  0866               	movf	setRFSW_AdjControl@sw,w
  8632  1DB3  3E1A               	addlw	26
  8633  1DB4  077D               	addwf	_product,w
  8634  1DB5  00E4               	movwf	??_setRFSW_AdjControl
  8635  1DB6  0864               	movf	??_setRFSW_AdjControl,w
  8636  1DB7  0086               	movwf	6
  8637  1DB8  3001               	movlw	1	; select bank2/3
  8638  1DB9  0087               	movwf	7
  8639  1DBA  0801               	movf	1,w
  8640  1DBB  00E5               	movwf	??_setRFSW_AdjControl+1
  8641  1DBC  087D               	movf	_product,w
  8642  1DBD  3E11               	addlw	17
  8643  1DBE  0086               	movwf	6
  8644  1DBF  3001               	movlw	1	; select bank2/3
  8645  1DC0  0087               	movwf	7
  8646  1DC1  0865               	movf	??_setRFSW_AdjControl+1,w
  8647  1DC2  0081               	movwf	1
  8648                           
  8649                           ;RF_Control_B1.c: 376: setTxData(1);
  8650  1DC3  3001               	movlw	1
  8651  1DC4  318A  22F2         	fcall	_setTxData
  8652  1DC6  0008               	return
  8653  1DC7                     __end_of_setRFSW_AdjControl:	
  8654                           
  8655                           	psect	text36
  8656  1CDB                     __ptext36:	
  8657 ;; *************** function _setRF_DimmerValue *****************
  8658 ;; Defined at:
  8659 ;;		line 387 in file "../src/RF_Control_B1.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  lights          1    wreg     unsigned char 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  lights          1   67[BANK0 ] unsigned char 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;		None               void
  8666 ;; Registers used:
  8667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;Total ram usage:        3 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    8
  8680 ;; This function calls:
  8681 ;;		_setDimmerLights_AdjRF
  8682 ;; This function is called by:
  8683 ;;		_setRFSW_AdjControl
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function _setRF_DimmerValue
  8689  1CDB                     _setRF_DimmerValue:	
  8690                           
  8691                           ;incstack = 0
  8692                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8693                           ;setRF_DimmerValue@lights stored from wreg
  8694  1CDB  0020               	movlb	0	; select bank0
  8695  1CDC  00E3               	movwf	setRF_DimmerValue@lights
  8696                           
  8697                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  8698  1CDD  3065               	movlw	101
  8699  1CDE  0021               	movlb	1	; select bank1
  8700  1CDF  0229               	subwf	(_RF_Data^(0+128)+9),w
  8701  1CE0  1C03               	skipc
  8702  1CE1  2CE8               	goto	l6258
  8703                           
  8704                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  8705  1CE2  3064               	movlw	100
  8706  1CE3  0020               	movlb	0	; select bank0
  8707  1CE4  00E1               	movwf	??_setRF_DimmerValue
  8708  1CE5  0861               	movf	??_setRF_DimmerValue,w
  8709  1CE6  0021               	movlb	1	; select bank1
  8710  1CE7  00A9               	movwf	(_RF_Data^(0+128)+9)
  8711  1CE8                     l6258:	
  8712                           
  8713                           ;RF_Control_B1.c: 390: }
  8714                           ;RF_Control_B1.c: 391: product->Data[9]=RF_Data[9];
  8715  1CE8  0829               	movf	(_RF_Data^(0+128)+9),w
  8716  1CE9  0020               	movlb	0	; select bank0
  8717  1CEA  00E1               	movwf	??_setRF_DimmerValue
  8718  1CEB  087D               	movf	_product,w
  8719  1CEC  3E09               	addlw	9
  8720  1CED  0086               	movwf	6
  8721  1CEE  3001               	movlw	1	; select bank2/3
  8722  1CEF  0087               	movwf	7
  8723  1CF0  0861               	movf	??_setRF_DimmerValue,w
  8724  1CF1  0081               	movwf	1
  8725                           
  8726                           ;RF_Control_B1.c: 392: product->Data[11]=lights;
  8727  1CF2  0863               	movf	setRF_DimmerValue@lights,w
  8728  1CF3  00E1               	movwf	??_setRF_DimmerValue
  8729  1CF4  087D               	movf	_product,w
  8730  1CF5  3E0B               	addlw	11
  8731  1CF6  0086               	movwf	6
  8732  1CF7  3001               	movlw	1	; select bank2/3
  8733  1CF8  0087               	movwf	7
  8734  1CF9  0861               	movf	??_setRF_DimmerValue,w
  8735  1CFA  0081               	movwf	1
  8736                           
  8737                           ;RF_Control_B1.c: 393: product->Data[(20 + lights)]=product->Data[9];
  8738  1CFB  087D               	movf	_product,w
  8739  1CFC  3E09               	addlw	9
  8740  1CFD  0086               	movwf	6
  8741  1CFE  3001               	movlw	1	; select bank2/3
  8742  1CFF  0087               	movwf	7
  8743  1D00  0801               	movf	1,w
  8744  1D01  00E1               	movwf	??_setRF_DimmerValue
  8745  1D02  0863               	movf	setRF_DimmerValue@lights,w
  8746  1D03  3E14               	addlw	20
  8747  1D04  077D               	addwf	_product,w
  8748  1D05  00E2               	movwf	??_setRF_DimmerValue+1
  8749  1D06  0862               	movf	??_setRF_DimmerValue+1,w
  8750  1D07  0086               	movwf	6
  8751  1D08  3001               	movlw	1	; select bank2/3
  8752  1D09  0087               	movwf	7
  8753  1D0A  0861               	movf	??_setRF_DimmerValue,w
  8754  1D0B  0081               	movwf	1
  8755                           
  8756                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  8757  1D0C  0863               	movf	setRF_DimmerValue@lights,w
  8758  1D0D  319A  2278         	fcall	_setDimmerLights_AdjRF
  8759  1D0F  0008               	return
  8760  1D10                     __end_of_setRF_DimmerValue:	
  8761                           
  8762                           	psect	text37
  8763  1A78                     __ptext37:	
  8764 ;; *************** function _setDimmerLights_AdjRF *****************
  8765 ;; Defined at:
  8766 ;;		line 423 in file "../src/Dimmer_B1.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  lights          1    wreg     unsigned char 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  lights          1   64[BANK0 ] unsigned char 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;Total ram usage:        2 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    7
  8787 ;; This function calls:
  8788 ;;		_DimmerLightsPointSelect
  8789 ;;		_getPercentValue
  8790 ;; This function is called by:
  8791 ;;		_setRF_DimmerValue
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           
  8796                           ;psect for function _setDimmerLights_AdjRF
  8797  1A78                     _setDimmerLights_AdjRF:	
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8801                           ;setDimmerLights_AdjRF@lights stored from wreg
  8802  1A78  0020               	movlb	0	; select bank0
  8803  1A79  00E0               	movwf	setDimmerLights_AdjRF@lights
  8804                           
  8805                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8806  1A7A  0860               	movf	setDimmerLights_AdjRF@lights,w
  8807  1A7B  31A6  2617  319A   	fcall	_DimmerLightsPointSelect
  8808                           
  8809                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8810  1A7E  0877               	movf	_DimmerLights,w
  8811  1A7F  0086               	movwf	6
  8812  1A80  3001               	movlw	1	; select bank2/3
  8813  1A81  0087               	movwf	7
  8814  1A82  1501               	bsf	1,2
  8815                           
  8816                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8817  1A83  0877               	movf	_DimmerLights,w
  8818  1A84  0086               	movwf	6
  8819  1A85  3001               	movlw	1	; select bank2/3
  8820  1A86  0087               	movwf	7
  8821  1A87  1481               	bsf	1,1
  8822                           
  8823                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(product->Data[9]);
  8824  1A88  087D               	movf	_product,w
  8825  1A89  3E09               	addlw	9
  8826  1A8A  0086               	movwf	6
  8827  1A8B  3001               	movlw	1	; select bank2/3
  8828  1A8C  0087               	movwf	7
  8829  1A8D  0801               	movf	1,w
  8830  1A8E  3191  219D         	fcall	_getPercentValue
  8831  1A90  0020               	movlb	0	; select bank0
  8832  1A91  00DF               	movwf	??_setDimmerLights_AdjRF
  8833  1A92  0877               	movf	_DimmerLights,w
  8834  1A93  3E05               	addlw	5
  8835  1A94  0086               	movwf	6
  8836  1A95  3001               	movlw	1	; select bank2/3
  8837  1A96  0087               	movwf	7
  8838  1A97  085F               	movf	??_setDimmerLights_AdjRF,w
  8839  1A98  0081               	movwf	1
  8840  1A99  0008               	return
  8841  1A9A                     __end_of_setDimmerLights_AdjRF:	
  8842                           
  8843                           	psect	text38
  8844  119D                     __ptext38:	
  8845 ;; *************** function _getPercentValue *****************
  8846 ;; Defined at:
  8847 ;;		line 490 in file "../src/Dimmer_B1.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;  value           1    wreg     unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  value           1   59[BANK0 ] unsigned char 
  8852 ;;  i               3   60[BANK0 ] float 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      unsigned char 
  8855 ;; Registers used:
  8856 ;;		wreg, status,2, status,0, pclath, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;Total ram usage:        6 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    6
  8869 ;; This function calls:
  8870 ;;		___awtoft
  8871 ;;		___ftadd
  8872 ;;		___ftdiv
  8873 ;;		___ftmul
  8874 ;;		___fttol
  8875 ;; This function is called by:
  8876 ;;		_setDimmerLights_AdjRF
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _getPercentValue
  8882  119D                     _getPercentValue:	
  8883                           
  8884                           ;incstack = 0
  8885                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8886                           ;getPercentValue@value stored from wreg
  8887  119D  0020               	movlb	0	; select bank0
  8888  119E  00DB               	movwf	getPercentValue@value
  8889                           
  8890                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8891  119F  3000               	movlw	0
  8892  11A0  00DC               	movwf	getPercentValue@i
  8893  11A1  3054               	movlw	84
  8894  11A2  00DD               	movwf	getPercentValue@i+1
  8895  11A3  3042               	movlw	66
  8896  11A4  00DE               	movwf	getPercentValue@i+2
  8897                           
  8898                           ;Dimmer_B1.c: 494: i/=100;
  8899  11A5  3000               	movlw	0
  8900  11A6  00AE               	movwf	___ftdiv@f2
  8901  11A7  30C8               	movlw	200
  8902  11A8  00AF               	movwf	___ftdiv@f2+1
  8903  11A9  3042               	movlw	66
  8904  11AA  00B0               	movwf	___ftdiv@f2+2
  8905  11AB  085C               	movf	getPercentValue@i,w
  8906  11AC  00B1               	movwf	___ftdiv@f1
  8907  11AD  085D               	movf	getPercentValue@i+1,w
  8908  11AE  00B2               	movwf	___ftdiv@f1+1
  8909  11AF  085E               	movf	getPercentValue@i+2,w
  8910  11B0  00B3               	movwf	___ftdiv@f1+2
  8911  11B1  318B  2398  3191   	fcall	___ftdiv
  8912  11B4  0020               	movlb	0	; select bank0
  8913  11B5  082E               	movf	?___ftdiv,w
  8914  11B6  00DC               	movwf	getPercentValue@i
  8915  11B7  082F               	movf	?___ftdiv+1,w
  8916  11B8  00DD               	movwf	getPercentValue@i+1
  8917  11B9  0830               	movf	?___ftdiv+2,w
  8918  11BA  00DE               	movwf	getPercentValue@i+2
  8919                           
  8920                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8921  11BB  085B               	movf	getPercentValue@value,w
  8922  11BC  00D9               	movwf	??_getPercentValue
  8923  11BD  01DA               	clrf	??_getPercentValue+1
  8924  11BE  09D9               	comf	??_getPercentValue,f
  8925  11BF  09DA               	comf	??_getPercentValue+1,f
  8926  11C0  0AD9               	incf	??_getPercentValue,f
  8927  11C1  1903               	skipnz
  8928  11C2  0ADA               	incf	??_getPercentValue+1,f
  8929  11C3  0859               	movf	??_getPercentValue,w
  8930  11C4  3E64               	addlw	100
  8931  11C5  00A8               	movwf	___awtoft@c
  8932  11C6  3000               	movlw	0
  8933  11C7  3D5A               	addwfc	??_getPercentValue+1,w
  8934  11C8  00A9               	movwf	___awtoft@c+1
  8935  11C9  319A  2212  3191   	fcall	___awtoft
  8936  11CC  0020               	movlb	0	; select bank0
  8937  11CD  0828               	movf	?___awtoft,w
  8938  11CE  00B1               	movwf	___ftmul@f2
  8939  11CF  0829               	movf	?___awtoft+1,w
  8940  11D0  00B2               	movwf	___ftmul@f2+1
  8941  11D1  082A               	movf	?___awtoft+2,w
  8942  11D2  00B3               	movwf	___ftmul@f2+2
  8943  11D3  085C               	movf	getPercentValue@i,w
  8944  11D4  00AE               	movwf	___ftmul@f1
  8945  11D5  085D               	movf	getPercentValue@i+1,w
  8946  11D6  00AF               	movwf	___ftmul@f1+1
  8947  11D7  085E               	movf	getPercentValue@i+2,w
  8948  11D8  00B0               	movwf	___ftmul@f1+2
  8949  11D9  318C  2441  3191   	fcall	___ftmul
  8950  11DC  0020               	movlb	0	; select bank0
  8951  11DD  082E               	movf	?___ftmul,w
  8952  11DE  00C1               	movwf	___ftadd@f2
  8953  11DF  082F               	movf	?___ftmul+1,w
  8954  11E0  00C2               	movwf	___ftadd@f2+1
  8955  11E1  0830               	movf	?___ftmul+2,w
  8956  11E2  00C3               	movwf	___ftadd@f2+2
  8957  11E3  3000               	movlw	0
  8958  11E4  00BE               	movwf	___ftadd@f1
  8959  11E5  3086               	movlw	134
  8960  11E6  00BF               	movwf	___ftadd@f1+1
  8961  11E7  3042               	movlw	66
  8962  11E8  00C0               	movwf	___ftadd@f1+2
  8963  11E9  318C  24F5  3191   	fcall	___ftadd
  8964  11EC  0020               	movlb	0	; select bank0
  8965  11ED  083E               	movf	?___ftadd,w
  8966  11EE  00CB               	movwf	___fttol@f1
  8967  11EF  083F               	movf	?___ftadd+1,w
  8968  11F0  00CC               	movwf	___fttol@f1+1
  8969  11F1  0840               	movf	?___ftadd+2,w
  8970  11F2  00CD               	movwf	___fttol@f1+2
  8971  11F3  3197  2779         	fcall	___fttol
  8972  11F5  0020               	movlb	0	; select bank0
  8973  11F6  084B               	movf	?___fttol,w
  8974  11F7  0008               	return
  8975  11F8                     __end_of_getPercentValue:	
  8976                           
  8977                           	psect	text39
  8978  0C41                     __ptext39:	
  8979 ;; *************** function ___ftmul *****************
  8980 ;; Defined at:
  8981 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  f1              3   14[BANK0 ] float 
  8984 ;;  f2              3   17[BANK0 ] float 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8987 ;;  sign            1   29[BANK0 ] unsigned char 
  8988 ;;  cntr            1   28[BANK0 ] unsigned char 
  8989 ;;  exp             1   24[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  3   14[BANK0 ] float 
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0, pclath, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:       16 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    5
  9006 ;; This function calls:
  9007 ;;		___ftpack
  9008 ;; This function is called by:
  9009 ;;		_getPercentValue
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function ___ftmul
  9015  0C41                     ___ftmul:	
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9019  0C41  0020               	movlb	0	; select bank0
  9020  0C42  082E               	movf	___ftmul@f1,w
  9021  0C43  00B4               	movwf	??___ftmul
  9022  0C44  082F               	movf	___ftmul@f1+1,w
  9023  0C45  00B5               	movwf	??___ftmul+1
  9024  0C46  0830               	movf	___ftmul@f1+2,w
  9025  0C47  00B6               	movwf	??___ftmul+2
  9026  0C48  1003               	clrc
  9027  0C49  0D35               	rlf	??___ftmul+1,w
  9028  0C4A  0D36               	rlf	??___ftmul+2,w
  9029  0C4B  00B7               	movwf	??___ftmul+3
  9030  0C4C  0837               	movf	??___ftmul+3,w
  9031  0C4D  00B8               	movwf	___ftmul@exp
  9032  0C4E  08B8               	movf	___ftmul@exp,f
  9033  0C4F  1D03               	skipz
  9034  0C50  2C58               	goto	l5900
  9035  0C51  3000               	movlw	0
  9036  0C52  00AE               	movwf	?___ftmul
  9037  0C53  3000               	movlw	0
  9038  0C54  00AF               	movwf	?___ftmul+1
  9039  0C55  3000               	movlw	0
  9040  0C56  00B0               	movwf	?___ftmul+2
  9041  0C57  0008               	return
  9042  0C58                     l5900:	
  9043  0C58  0831               	movf	___ftmul@f2,w
  9044  0C59  00B4               	movwf	??___ftmul
  9045  0C5A  0832               	movf	___ftmul@f2+1,w
  9046  0C5B  00B5               	movwf	??___ftmul+1
  9047  0C5C  0833               	movf	___ftmul@f2+2,w
  9048  0C5D  00B6               	movwf	??___ftmul+2
  9049  0C5E  1003               	clrc
  9050  0C5F  0D35               	rlf	??___ftmul+1,w
  9051  0C60  0D36               	rlf	??___ftmul+2,w
  9052  0C61  00B7               	movwf	??___ftmul+3
  9053  0C62  0837               	movf	??___ftmul+3,w
  9054  0C63  00BD               	movwf	___ftmul@sign
  9055  0C64  08BD               	movf	___ftmul@sign,f
  9056  0C65  1D03               	skipz
  9057  0C66  2C6E               	goto	l5906
  9058  0C67  3000               	movlw	0
  9059  0C68  00AE               	movwf	?___ftmul
  9060  0C69  3000               	movlw	0
  9061  0C6A  00AF               	movwf	?___ftmul+1
  9062  0C6B  3000               	movlw	0
  9063  0C6C  00B0               	movwf	?___ftmul+2
  9064  0C6D  0008               	return
  9065  0C6E                     l5906:	
  9066  0C6E  083D               	movf	___ftmul@sign,w
  9067  0C6F  3E7B               	addlw	123
  9068  0C70  00B4               	movwf	??___ftmul
  9069  0C71  0834               	movf	??___ftmul,w
  9070  0C72  07B8               	addwf	___ftmul@exp,f
  9071  0C73  082E               	movf	___ftmul@f1,w
  9072  0C74  00B4               	movwf	??___ftmul
  9073  0C75  082F               	movf	___ftmul@f1+1,w
  9074  0C76  00B5               	movwf	??___ftmul+1
  9075  0C77  0830               	movf	___ftmul@f1+2,w
  9076  0C78  00B6               	movwf	??___ftmul+2
  9077  0C79  3010               	movlw	16
  9078  0C7A                     u4145:	
  9079  0C7A  36B6               	lsrf	??___ftmul+2,f
  9080  0C7B  0CB5               	rrf	??___ftmul+1,f
  9081  0C7C  0CB4               	rrf	??___ftmul,f
  9082  0C7D  0B89               	decfsz	9,f
  9083  0C7E  2C7A               	goto	u4145
  9084  0C7F  0834               	movf	??___ftmul,w
  9085  0C80  00B7               	movwf	??___ftmul+3
  9086  0C81  0837               	movf	??___ftmul+3,w
  9087  0C82  00BD               	movwf	___ftmul@sign
  9088  0C83  0831               	movf	___ftmul@f2,w
  9089  0C84  00B4               	movwf	??___ftmul
  9090  0C85  0832               	movf	___ftmul@f2+1,w
  9091  0C86  00B5               	movwf	??___ftmul+1
  9092  0C87  0833               	movf	___ftmul@f2+2,w
  9093  0C88  00B6               	movwf	??___ftmul+2
  9094  0C89  3010               	movlw	16
  9095  0C8A                     u4155:	
  9096  0C8A  36B6               	lsrf	??___ftmul+2,f
  9097  0C8B  0CB5               	rrf	??___ftmul+1,f
  9098  0C8C  0CB4               	rrf	??___ftmul,f
  9099  0C8D  0B89               	decfsz	9,f
  9100  0C8E  2C8A               	goto	u4155
  9101  0C8F  0834               	movf	??___ftmul,w
  9102  0C90  00B7               	movwf	??___ftmul+3
  9103  0C91  0837               	movf	??___ftmul+3,w
  9104  0C92  06BD               	xorwf	___ftmul@sign,f
  9105  0C93  3080               	movlw	128
  9106  0C94  00B4               	movwf	??___ftmul
  9107  0C95  0834               	movf	??___ftmul,w
  9108  0C96  05BD               	andwf	___ftmul@sign,f
  9109  0C97  17AF               	bsf	___ftmul@f1+1,7
  9110  0C98  17B2               	bsf	___ftmul@f2+1,7
  9111  0C99  30FF               	movlw	255
  9112  0C9A  05B1               	andwf	___ftmul@f2,f
  9113  0C9B  30FF               	movlw	255
  9114  0C9C  05B2               	andwf	___ftmul@f2+1,f
  9115  0C9D  3000               	movlw	0
  9116  0C9E  05B3               	andwf	___ftmul@f2+2,f
  9117  0C9F  3000               	movlw	0
  9118  0CA0  00B9               	movwf	___ftmul@f3_as_product
  9119  0CA1  3000               	movlw	0
  9120  0CA2  00BA               	movwf	___ftmul@f3_as_product+1
  9121  0CA3  3000               	movlw	0
  9122  0CA4  00BB               	movwf	___ftmul@f3_as_product+2
  9123  0CA5  3007               	movlw	7
  9124  0CA6  00B4               	movwf	??___ftmul
  9125  0CA7  0834               	movf	??___ftmul,w
  9126  0CA8  00BC               	movwf	___ftmul@cntr
  9127  0CA9                     l5918:	
  9128  0CA9  1C2E               	btfss	___ftmul@f1,0
  9129  0CAA  2CB1               	goto	l5922
  9130  0CAB  0831               	movf	___ftmul@f2,w
  9131  0CAC  07B9               	addwf	___ftmul@f3_as_product,f
  9132  0CAD  0832               	movf	___ftmul@f2+1,w
  9133  0CAE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9134  0CAF  0833               	movf	___ftmul@f2+2,w
  9135  0CB0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9136  0CB1                     l5922:	
  9137  0CB1  3001               	movlw	1
  9138  0CB2                     u4175:	
  9139  0CB2  36B0               	lsrf	___ftmul@f1+2,f
  9140  0CB3  0CAF               	rrf	___ftmul@f1+1,f
  9141  0CB4  0CAE               	rrf	___ftmul@f1,f
  9142  0CB5  0B89               	decfsz	9,f
  9143  0CB6  2CB2               	goto	u4175
  9144  0CB7  3001               	movlw	1
  9145  0CB8                     u4185:	
  9146  0CB8  35B1               	lslf	___ftmul@f2,f
  9147  0CB9  0DB2               	rlf	___ftmul@f2+1,f
  9148  0CBA  0DB3               	rlf	___ftmul@f2+2,f
  9149  0CBB  0B89               	decfsz	9,f
  9150  0CBC  2CB8               	goto	u4185
  9151  0CBD  3001               	movlw	1
  9152  0CBE  02BC               	subwf	___ftmul@cntr,f
  9153  0CBF  1D03               	btfss	3,2
  9154  0CC0  2CA9               	goto	l5918
  9155  0CC1  3009               	movlw	9
  9156  0CC2  00B4               	movwf	??___ftmul
  9157  0CC3  0834               	movf	??___ftmul,w
  9158  0CC4  00BC               	movwf	___ftmul@cntr
  9159  0CC5                     l5930:	
  9160  0CC5  1C2E               	btfss	___ftmul@f1,0
  9161  0CC6  2CCD               	goto	l5934
  9162  0CC7  0831               	movf	___ftmul@f2,w
  9163  0CC8  07B9               	addwf	___ftmul@f3_as_product,f
  9164  0CC9  0832               	movf	___ftmul@f2+1,w
  9165  0CCA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9166  0CCB  0833               	movf	___ftmul@f2+2,w
  9167  0CCC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9168  0CCD                     l5934:	
  9169  0CCD  3001               	movlw	1
  9170  0CCE                     u4215:	
  9171  0CCE  36B0               	lsrf	___ftmul@f1+2,f
  9172  0CCF  0CAF               	rrf	___ftmul@f1+1,f
  9173  0CD0  0CAE               	rrf	___ftmul@f1,f
  9174  0CD1  0B89               	decfsz	9,f
  9175  0CD2  2CCE               	goto	u4215
  9176  0CD3  3001               	movlw	1
  9177  0CD4                     u4225:	
  9178  0CD4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9179  0CD5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9180  0CD6  0CB9               	rrf	___ftmul@f3_as_product,f
  9181  0CD7  0B89               	decfsz	9,f
  9182  0CD8  2CD4               	goto	u4225
  9183  0CD9  3001               	movlw	1
  9184  0CDA  02BC               	subwf	___ftmul@cntr,f
  9185  0CDB  1D03               	btfss	3,2
  9186  0CDC  2CC5               	goto	l5930
  9187  0CDD  0839               	movf	___ftmul@f3_as_product,w
  9188  0CDE  00A0               	movwf	___ftpack@arg
  9189  0CDF  083A               	movf	___ftmul@f3_as_product+1,w
  9190  0CE0  00A1               	movwf	___ftpack@arg+1
  9191  0CE1  083B               	movf	___ftmul@f3_as_product+2,w
  9192  0CE2  00A2               	movwf	___ftpack@arg+2
  9193  0CE3  0838               	movf	___ftmul@exp,w
  9194  0CE4  00B4               	movwf	??___ftmul
  9195  0CE5  0834               	movf	??___ftmul,w
  9196  0CE6  00A3               	movwf	___ftpack@exp
  9197  0CE7  083D               	movf	___ftmul@sign,w
  9198  0CE8  00B5               	movwf	??___ftmul+1
  9199  0CE9  0835               	movf	??___ftmul+1,w
  9200  0CEA  00A4               	movwf	___ftpack@sign
  9201  0CEB  3192  22B2         	fcall	___ftpack
  9202  0CED  0020               	movlb	0	; select bank0
  9203  0CEE  0820               	movf	?___ftpack,w
  9204  0CEF  00AE               	movwf	?___ftmul
  9205  0CF0  0821               	movf	?___ftpack+1,w
  9206  0CF1  00AF               	movwf	?___ftmul+1
  9207  0CF2  0822               	movf	?___ftpack+2,w
  9208  0CF3  00B0               	movwf	?___ftmul+2
  9209  0CF4  0008               	return
  9210  0CF5                     __end_of___ftmul:	
  9211                           
  9212                           	psect	text40
  9213  0CF5                     __ptext40:	
  9214 ;; *************** function ___ftadd *****************
  9215 ;; Defined at:
  9216 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  f1              3   30[BANK0 ] float 
  9219 ;;  f2              3   33[BANK0 ] float 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  exp1            1   42[BANK0 ] unsigned char 
  9222 ;;  exp2            1   41[BANK0 ] unsigned char 
  9223 ;;  sign            1   40[BANK0 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  3   30[BANK0 ] float 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, pclath, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9233 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;Total ram usage:       13 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    5
  9240 ;; This function calls:
  9241 ;;		___ftpack
  9242 ;; This function is called by:
  9243 ;;		_getPercentValue
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function ___ftadd
  9249  0CF5                     ___ftadd:	
  9250                           
  9251                           ;incstack = 0
  9252                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9253  0CF5  0020               	movlb	0	; select bank0
  9254  0CF6  083E               	movf	___ftadd@f1,w
  9255  0CF7  00C4               	movwf	??___ftadd
  9256  0CF8  083F               	movf	___ftadd@f1+1,w
  9257  0CF9  00C5               	movwf	??___ftadd+1
  9258  0CFA  0840               	movf	___ftadd@f1+2,w
  9259  0CFB  00C6               	movwf	??___ftadd+2
  9260  0CFC  1003               	clrc
  9261  0CFD  0D45               	rlf	??___ftadd+1,w
  9262  0CFE  0D46               	rlf	??___ftadd+2,w
  9263  0CFF  00C7               	movwf	??___ftadd+3
  9264  0D00  0847               	movf	??___ftadd+3,w
  9265  0D01  00CA               	movwf	___ftadd@exp1
  9266  0D02  0841               	movf	___ftadd@f2,w
  9267  0D03  00C4               	movwf	??___ftadd
  9268  0D04  0842               	movf	___ftadd@f2+1,w
  9269  0D05  00C5               	movwf	??___ftadd+1
  9270  0D06  0843               	movf	___ftadd@f2+2,w
  9271  0D07  00C6               	movwf	??___ftadd+2
  9272  0D08  1003               	clrc
  9273  0D09  0D45               	rlf	??___ftadd+1,w
  9274  0D0A  0D46               	rlf	??___ftadd+2,w
  9275  0D0B  00C7               	movwf	??___ftadd+3
  9276  0D0C  0847               	movf	??___ftadd+3,w
  9277  0D0D  00C9               	movwf	___ftadd@exp2
  9278  0D0E  084A               	movf	___ftadd@exp1,w
  9279  0D0F  1903               	btfsc	3,2
  9280  0D10  2D1D               	goto	l5788
  9281  0D11  0849               	movf	___ftadd@exp2,w
  9282  0D12  024A               	subwf	___ftadd@exp1,w
  9283  0D13  1803               	skipnc
  9284  0D14  2D24               	goto	l5792
  9285  0D15  034A               	decf	___ftadd@exp1,w
  9286  0D16  3AFF               	xorlw	255
  9287  0D17  0749               	addwf	___ftadd@exp2,w
  9288  0D18  00C4               	movwf	??___ftadd
  9289  0D19  3019               	movlw	25
  9290  0D1A  0244               	subwf	??___ftadd,w
  9291  0D1B  1C03               	skipc
  9292  0D1C  2D24               	goto	l5792
  9293  0D1D                     l5788:	
  9294  0D1D  0841               	movf	___ftadd@f2,w
  9295  0D1E  00BE               	movwf	?___ftadd
  9296  0D1F  0842               	movf	___ftadd@f2+1,w
  9297  0D20  00BF               	movwf	?___ftadd+1
  9298  0D21  0843               	movf	___ftadd@f2+2,w
  9299  0D22  00C0               	movwf	?___ftadd+2
  9300  0D23  0008               	return
  9301  0D24                     l5792:	
  9302  0D24  0849               	movf	___ftadd@exp2,w
  9303  0D25  1903               	btfsc	3,2
  9304  0D26  0008               	return
  9305  0D27  084A               	movf	___ftadd@exp1,w
  9306  0D28  0249               	subwf	___ftadd@exp2,w
  9307  0D29  1803               	skipnc
  9308  0D2A  2D33               	goto	l5798
  9309  0D2B  0349               	decf	___ftadd@exp2,w
  9310  0D2C  3AFF               	xorlw	255
  9311  0D2D  074A               	addwf	___ftadd@exp1,w
  9312  0D2E  00C4               	movwf	??___ftadd
  9313  0D2F  3019               	movlw	25
  9314  0D30  0244               	subwf	??___ftadd,w
  9315  0D31  1803               	btfsc	3,0
  9316  0D32  0008               	return
  9317  0D33                     l5798:	
  9318  0D33  3006               	movlw	6
  9319  0D34  00C4               	movwf	??___ftadd
  9320  0D35  0844               	movf	??___ftadd,w
  9321  0D36  00C8               	movwf	___ftadd@sign
  9322  0D37  1BC0               	btfsc	___ftadd@f1+2,7
  9323  0D38  17C8               	bsf	___ftadd@sign,7
  9324  0D39  1BC3               	btfsc	___ftadd@f2+2,7
  9325  0D3A  1748               	bsf	___ftadd@sign,6
  9326  0D3B  17BF               	bsf	___ftadd@f1+1,7
  9327  0D3C  30FF               	movlw	255
  9328  0D3D  05BE               	andwf	___ftadd@f1,f
  9329  0D3E  30FF               	movlw	255
  9330  0D3F  05BF               	andwf	___ftadd@f1+1,f
  9331  0D40  3000               	movlw	0
  9332  0D41  05C0               	andwf	___ftadd@f1+2,f
  9333  0D42  17C2               	bsf	___ftadd@f2+1,7
  9334  0D43  30FF               	movlw	255
  9335  0D44  05C1               	andwf	___ftadd@f2,f
  9336  0D45  30FF               	movlw	255
  9337  0D46  05C2               	andwf	___ftadd@f2+1,f
  9338  0D47  3000               	movlw	0
  9339  0D48  05C3               	andwf	___ftadd@f2+2,f
  9340  0D49  0849               	movf	___ftadd@exp2,w
  9341  0D4A  024A               	subwf	___ftadd@exp1,w
  9342  0D4B  1803               	skipnc
  9343  0D4C  2D6F               	goto	l5820
  9344  0D4D                     l5810:	
  9345  0D4D  3001               	movlw	1
  9346  0D4E                     u3905:	
  9347  0D4E  35C1               	lslf	___ftadd@f2,f
  9348  0D4F  0DC2               	rlf	___ftadd@f2+1,f
  9349  0D50  0DC3               	rlf	___ftadd@f2+2,f
  9350  0D51  0B89               	decfsz	9,f
  9351  0D52  2D4E               	goto	u3905
  9352  0D53  3001               	movlw	1
  9353  0D54  02C9               	subwf	___ftadd@exp2,f
  9354  0D55  0849               	movf	___ftadd@exp2,w
  9355  0D56  064A               	xorwf	___ftadd@exp1,w
  9356  0D57  1903               	skipnz
  9357  0D58  2D6A               	goto	l5818
  9358  0D59  3001               	movlw	1
  9359  0D5A  02C8               	subwf	___ftadd@sign,f
  9360  0D5B  0848               	movf	___ftadd@sign,w
  9361  0D5C  3907               	andlw	7
  9362  0D5D  1903               	btfsc	3,2
  9363  0D5E  2D6A               	goto	l5818
  9364  0D5F  2D4D               	goto	l5810
  9365  0D60                     l5816:	
  9366  0D60  3001               	movlw	1
  9367  0D61                     u3935:	
  9368  0D61  36C0               	lsrf	___ftadd@f1+2,f
  9369  0D62  0CBF               	rrf	___ftadd@f1+1,f
  9370  0D63  0CBE               	rrf	___ftadd@f1,f
  9371  0D64  0B89               	decfsz	9,f
  9372  0D65  2D61               	goto	u3935
  9373  0D66  3001               	movlw	1
  9374  0D67  00C4               	movwf	??___ftadd
  9375  0D68  0844               	movf	??___ftadd,w
  9376  0D69  07CA               	addwf	___ftadd@exp1,f
  9377  0D6A                     l5818:	
  9378  0D6A  084A               	movf	___ftadd@exp1,w
  9379  0D6B  0649               	xorwf	___ftadd@exp2,w
  9380  0D6C  1903               	btfsc	3,2
  9381  0D6D  2D94               	goto	l3181
  9382  0D6E  2D60               	goto	l5816
  9383  0D6F                     l5820:	
  9384  0D6F  084A               	movf	___ftadd@exp1,w
  9385  0D70  0249               	subwf	___ftadd@exp2,w
  9386  0D71  1803               	skipnc
  9387  0D72  2D94               	goto	l3181
  9388  0D73                     l5822:	
  9389  0D73  3001               	movlw	1
  9390  0D74                     u3965:	
  9391  0D74  35BE               	lslf	___ftadd@f1,f
  9392  0D75  0DBF               	rlf	___ftadd@f1+1,f
  9393  0D76  0DC0               	rlf	___ftadd@f1+2,f
  9394  0D77  0B89               	decfsz	9,f
  9395  0D78  2D74               	goto	u3965
  9396  0D79  3001               	movlw	1
  9397  0D7A  02CA               	subwf	___ftadd@exp1,f
  9398  0D7B  0849               	movf	___ftadd@exp2,w
  9399  0D7C  064A               	xorwf	___ftadd@exp1,w
  9400  0D7D  1903               	skipnz
  9401  0D7E  2D90               	goto	l5830
  9402  0D7F  3001               	movlw	1
  9403  0D80  02C8               	subwf	___ftadd@sign,f
  9404  0D81  0848               	movf	___ftadd@sign,w
  9405  0D82  3907               	andlw	7
  9406  0D83  1903               	btfsc	3,2
  9407  0D84  2D90               	goto	l5830
  9408  0D85  2D73               	goto	l5822
  9409  0D86                     l5828:	
  9410  0D86  3001               	movlw	1
  9411  0D87                     u3995:	
  9412  0D87  36C3               	lsrf	___ftadd@f2+2,f
  9413  0D88  0CC2               	rrf	___ftadd@f2+1,f
  9414  0D89  0CC1               	rrf	___ftadd@f2,f
  9415  0D8A  0B89               	decfsz	9,f
  9416  0D8B  2D87               	goto	u3995
  9417  0D8C  3001               	movlw	1
  9418  0D8D  00C4               	movwf	??___ftadd
  9419  0D8E  0844               	movf	??___ftadd,w
  9420  0D8F  07C9               	addwf	___ftadd@exp2,f
  9421  0D90                     l5830:	
  9422  0D90  084A               	movf	___ftadd@exp1,w
  9423  0D91  0649               	xorwf	___ftadd@exp2,w
  9424  0D92  1D03               	skipz
  9425  0D93  2D86               	goto	l5828
  9426  0D94                     l3181:	
  9427  0D94  1FC8               	btfss	___ftadd@sign,7
  9428  0D95  2DA6               	goto	l5834
  9429  0D96  30FF               	movlw	255
  9430  0D97  06BE               	xorwf	___ftadd@f1,f
  9431  0D98  30FF               	movlw	255
  9432  0D99  06BF               	xorwf	___ftadd@f1+1,f
  9433  0D9A  30FF               	movlw	255
  9434  0D9B  06C0               	xorwf	___ftadd@f1+2,f
  9435  0D9C  3001               	movlw	1
  9436  0D9D  07BE               	addwf	___ftadd@f1,f
  9437  0D9E  3000               	movlw	0
  9438  0D9F  1803               	skipnc
  9439  0DA0  3001               	movlw	1
  9440  0DA1  07BF               	addwf	___ftadd@f1+1,f
  9441  0DA2  3000               	movlw	0
  9442  0DA3  1803               	skipnc
  9443  0DA4  3001               	movlw	1
  9444  0DA5  07C0               	addwf	___ftadd@f1+2,f
  9445  0DA6                     l5834:	
  9446  0DA6  1F48               	btfss	___ftadd@sign,6
  9447  0DA7  2DB8               	goto	l5838
  9448  0DA8  30FF               	movlw	255
  9449  0DA9  06C1               	xorwf	___ftadd@f2,f
  9450  0DAA  30FF               	movlw	255
  9451  0DAB  06C2               	xorwf	___ftadd@f2+1,f
  9452  0DAC  30FF               	movlw	255
  9453  0DAD  06C3               	xorwf	___ftadd@f2+2,f
  9454  0DAE  3001               	movlw	1
  9455  0DAF  07C1               	addwf	___ftadd@f2,f
  9456  0DB0  3000               	movlw	0
  9457  0DB1  1803               	skipnc
  9458  0DB2  3001               	movlw	1
  9459  0DB3  07C2               	addwf	___ftadd@f2+1,f
  9460  0DB4  3000               	movlw	0
  9461  0DB5  1803               	skipnc
  9462  0DB6  3001               	movlw	1
  9463  0DB7  07C3               	addwf	___ftadd@f2+2,f
  9464  0DB8                     l5838:	
  9465  0DB8  01C8               	clrf	___ftadd@sign
  9466  0DB9  083E               	movf	___ftadd@f1,w
  9467  0DBA  07C1               	addwf	___ftadd@f2,f
  9468  0DBB  083F               	movf	___ftadd@f1+1,w
  9469  0DBC  3DC2               	addwfc	___ftadd@f2+1,f
  9470  0DBD  0840               	movf	___ftadd@f1+2,w
  9471  0DBE  3DC3               	addwfc	___ftadd@f2+2,f
  9472  0DBF  1FC3               	btfss	___ftadd@f2+2,7
  9473  0DC0  2DD3               	goto	l5848
  9474  0DC1  30FF               	movlw	255
  9475  0DC2  06C1               	xorwf	___ftadd@f2,f
  9476  0DC3  30FF               	movlw	255
  9477  0DC4  06C2               	xorwf	___ftadd@f2+1,f
  9478  0DC5  30FF               	movlw	255
  9479  0DC6  06C3               	xorwf	___ftadd@f2+2,f
  9480  0DC7  3001               	movlw	1
  9481  0DC8  07C1               	addwf	___ftadd@f2,f
  9482  0DC9  3000               	movlw	0
  9483  0DCA  1803               	skipnc
  9484  0DCB  3001               	movlw	1
  9485  0DCC  07C2               	addwf	___ftadd@f2+1,f
  9486  0DCD  3000               	movlw	0
  9487  0DCE  1803               	skipnc
  9488  0DCF  3001               	movlw	1
  9489  0DD0  07C3               	addwf	___ftadd@f2+2,f
  9490  0DD1  01C8               	clrf	___ftadd@sign
  9491  0DD2  0AC8               	incf	___ftadd@sign,f
  9492  0DD3                     l5848:	
  9493  0DD3  0841               	movf	___ftadd@f2,w
  9494  0DD4  00A0               	movwf	___ftpack@arg
  9495  0DD5  0842               	movf	___ftadd@f2+1,w
  9496  0DD6  00A1               	movwf	___ftpack@arg+1
  9497  0DD7  0843               	movf	___ftadd@f2+2,w
  9498  0DD8  00A2               	movwf	___ftpack@arg+2
  9499  0DD9  084A               	movf	___ftadd@exp1,w
  9500  0DDA  00C4               	movwf	??___ftadd
  9501  0DDB  0844               	movf	??___ftadd,w
  9502  0DDC  00A3               	movwf	___ftpack@exp
  9503  0DDD  0848               	movf	___ftadd@sign,w
  9504  0DDE  00C5               	movwf	??___ftadd+1
  9505  0DDF  0845               	movf	??___ftadd+1,w
  9506  0DE0  00A4               	movwf	___ftpack@sign
  9507  0DE1  3192  22B2         	fcall	___ftpack
  9508  0DE3  0020               	movlb	0	; select bank0
  9509  0DE4  0820               	movf	?___ftpack,w
  9510  0DE5  00BE               	movwf	?___ftadd
  9511  0DE6  0821               	movf	?___ftpack+1,w
  9512  0DE7  00BF               	movwf	?___ftadd+1
  9513  0DE8  0822               	movf	?___ftpack+2,w
  9514  0DE9  00C0               	movwf	?___ftadd+2
  9515  0DEA  0008               	return
  9516  0DEB                     __end_of___ftadd:	
  9517                           
  9518                           	psect	text41
  9519  1AE5                     __ptext41:	
  9520 ;; *************** function _RF_RxDisable *****************
  9521 ;; Defined at:
  9522 ;;		line 187 in file "../src/RF_Control_B1.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  rf              1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  rf              1    4[BANK0 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;Total ram usage:        1 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    6
  9543 ;; This function calls:
  9544 ;;		_CC2500_WriteCommand
  9545 ;;		_RfPointSelect
  9546 ;;		_setINT_GO
  9547 ;; This function is called by:
  9548 ;;		_setRF_Main
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           
  9553                           ;psect for function _RF_RxDisable
  9554  1AE5                     _RF_RxDisable:	
  9555                           
  9556                           ;incstack = 0
  9557                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9558                           ;RF_RxDisable@rf stored from wreg
  9559  1AE5  0020               	movlb	0	; select bank0
  9560  1AE6  00A4               	movwf	RF_RxDisable@rf
  9561                           
  9562                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  9563  1AE7  0824               	movf	RF_RxDisable@rf,w
  9564  1AE8  31A6  2695  319A   	fcall	_RfPointSelect
  9565                           
  9566                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  9567  1AEB  0021               	movlb	1	; select bank1
  9568  1AEC  083E               	movf	_RF^(0+128),w
  9569  1AED  0086               	movwf	6
  9570  1AEE  0187               	clrf	7
  9571  1AEF  1D81               	btfss	1,3
  9572  1AF0  0008               	return
  9573                           
  9574                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  9575  1AF1  083E               	movf	_RF^(0+128),w
  9576  1AF2  0086               	movwf	6
  9577  1AF3  0187               	clrf	7
  9578  1AF4  1181               	bcf	1,3
  9579                           
  9580                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  9581  1AF5  083E               	movf	_RF^(0+128),w
  9582  1AF6  0086               	movwf	6
  9583  1AF7  0187               	clrf	7
  9584  1AF8  1081               	bcf	1,1
  9585                           
  9586                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  9587  1AF9  0A3E               	incf	_RF^(0+128),w
  9588  1AFA  0086               	movwf	6
  9589  1AFB  0187               	clrf	7
  9590  1AFC  0181               	clrf	1
  9591                           
  9592                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  9593  1AFD  083E               	movf	_RF^(0+128),w
  9594  1AFE  0086               	movwf	6
  9595  1AFF  0187               	clrf	7
  9596  1B00  1281               	bcf	1,5
  9597                           
  9598                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  9599  1B01  3036               	movlw	54
  9600  1B02  31A7  275E  319A   	fcall	_CC2500_WriteCommand
  9601                           
  9602                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  9603  1B05  303A               	movlw	58
  9604  1B06  31A7  275E  319A   	fcall	_CC2500_WriteCommand
  9605                           
  9606                           ;RF_Control_B1.c: 197: setINT_GO(0);
  9607  1B09  3000               	movlw	0
  9608  1B0A  31A5  25EF         	fcall	_setINT_GO
  9609  1B0C  0008               	return
  9610  1B0D                     __end_of_RF_RxDisable:	
  9611                           
  9612                           	psect	text42
  9613  1E0B                     __ptext42:	
  9614 ;; *************** function _CC2500_TxData *****************
  9615 ;; Defined at:
  9616 ;;		line 32 in file "../src/CC2500_B1.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;		None               void
  9623 ;; Registers used:
  9624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        2 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    6
  9637 ;; This function calls:
  9638 ;;		_CC2500_WriteByte
  9639 ;;		_CC2500_WriteCommand
  9640 ;; This function is called by:
  9641 ;;		_setRF_Main
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           
  9646                           ;psect for function _CC2500_TxData
  9647  1E0B                     _CC2500_TxData:	
  9648                           
  9649                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9650                           ;CC2500_B1.c: 35: RC4 = 0;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9654  1E0B  0020               	movlb	0	; select bank0
  9655  1E0C  120E               	bcf	14,4	;volatile
  9656                           
  9657                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9658  1E0D  307F               	movlw	127
  9659  1E0E  00A4               	movwf	??_CC2500_TxData
  9660  1E0F  0824               	movf	??_CC2500_TxData,w
  9661  1E10  0021               	movlb	1	; select bank1
  9662  1E11  00C2               	movwf	_SPI0Buffer^(0+128)
  9663  1E12                     l271:	
  9664                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9665                           
  9666  1E12  0020               	movlb	0	; select bank0
  9667  1E13  190E               	btfsc	14,2	;volatile
  9668  1E14  2E12               	goto	l271
  9669                           
  9670                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9671  1E15  3198  20E0  319E   	fcall	_CC2500_WriteByte
  9672                           
  9673                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9674  1E18  0021               	movlb	1	; select bank1
  9675  1E19  0843               	movf	_Tx_Length^(0+128),w
  9676  1E1A  0020               	movlb	0	; select bank0
  9677  1E1B  00A4               	movwf	??_CC2500_TxData
  9678  1E1C  0824               	movf	??_CC2500_TxData,w
  9679  1E1D  0021               	movlb	1	; select bank1
  9680  1E1E  00C2               	movwf	_SPI0Buffer^(0+128)
  9681                           
  9682                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9683  1E1F  3198  20E0  319E   	fcall	_CC2500_WriteByte
  9684                           
  9685                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9686  1E22  0020               	movlb	0	; select bank0
  9687  1E23  01A5               	clrf	CC2500_TxData@loop_e
  9688  1E24                     l6556:	
  9689  1E24  0021               	movlb	1	; select bank1
  9690  1E25  0843               	movf	_Tx_Length^(0+128),w
  9691  1E26  0020               	movlb	0	; select bank0
  9692  1E27  0225               	subwf	CC2500_TxData@loop_e,w
  9693  1E28  1803               	btfsc	3,0
  9694  1E29  2E3C               	goto	l276
  9695                           
  9696                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9697  1E2A  0825               	movf	CC2500_TxData@loop_e,w
  9698  1E2B  3EA0               	addlw	_RF_Data& (0+255)
  9699  1E2C  0086               	movwf	6
  9700  1E2D  0187               	clrf	7
  9701  1E2E  0801               	movf	1,w
  9702  1E2F  00A4               	movwf	??_CC2500_TxData
  9703  1E30  0824               	movf	??_CC2500_TxData,w
  9704  1E31  0021               	movlb	1	; select bank1
  9705  1E32  00C2               	movwf	_SPI0Buffer^(0+128)
  9706                           
  9707                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9708  1E33  3198  20E0  319E   	fcall	_CC2500_WriteByte
  9709  1E36  3001               	movlw	1
  9710  1E37  0020               	movlb	0	; select bank0
  9711  1E38  00A4               	movwf	??_CC2500_TxData
  9712  1E39  0824               	movf	??_CC2500_TxData,w
  9713  1E3A  07A5               	addwf	CC2500_TxData@loop_e,f
  9714  1E3B  2E24               	goto	l6556
  9715  1E3C                     l276:	
  9716                           
  9717                           ;CC2500_B1.c: 44: }
  9718                           ;CC2500_B1.c: 45: RC4 = 1;
  9719  1E3C  160E               	bsf	14,4	;volatile
  9720                           
  9721                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9722  1E3D  3035               	movlw	53
  9723  1E3E  31A7  275E  319E   	fcall	_CC2500_WriteCommand
  9724  1E41                     l277:	
  9725                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9726                           
  9727  1E41  0020               	movlb	0	; select bank0
  9728  1E42  1C0D               	btfss	13,0	;volatile
  9729  1E43  2E41               	goto	l277
  9730  1E44                     l280:	
  9731                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9732                           
  9733  1E44  180D               	btfsc	13,0	;volatile
  9734  1E45  2E44               	goto	l280
  9735                           
  9736                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9737  1E46  3036               	movlw	54
  9738  1E47  31A7  275E  319E   	fcall	_CC2500_WriteCommand
  9739                           
  9740                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9741  1E4A  303B               	movlw	59
  9742  1E4B  31A7  275E         	fcall	_CC2500_WriteCommand
  9743                           
  9744                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9745  1E4D  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9746  1E4E  0008               	return
  9747  1E4F                     __end_of_CC2500_TxData:	
  9748                           
  9749                           	psect	text43
  9750  1313                     __ptext43:	
  9751 ;; *************** function _CC2500_RxData *****************
  9752 ;; Defined at:
  9753 ;;		line 57 in file "../src/CC2500_B1.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;Total ram usage:        2 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    6
  9774 ;; This function calls:
  9775 ;;		_CC2500_ReadByte
  9776 ;;		_CC2500_ReadStatus
  9777 ;;		_CC2500_WriteByte
  9778 ;;		_CC2500_WriteCommand
  9779 ;;		_setRF_RxStatus
  9780 ;; This function is called by:
  9781 ;;		_setRF_Main
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _CC2500_RxData
  9787  1313                     _CC2500_RxData:	
  9788                           
  9789                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9790                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9791                           
  9792                           ;incstack = 0
  9793                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9794  1313  0020               	movlb	0	; select bank0
  9795  1314  180D               	btfsc	13,0	;volatile
  9796  1315                     l287:	
  9797                           ;CC2500_B1.c: 63: {
  9798                           ;CC2500_B1.c: 64: while (RB0 == 1);
  9799                           
  9800  1315  180D               	btfsc	13,0	;volatile
  9801  1316  2B15               	goto	l287
  9802                           
  9803                           ;CC2500_B1.c: 65: }
  9804                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9805  1317  303B               	movlw	59
  9806  1318  3199  2161  3193   	fcall	_CC2500_ReadStatus
  9807                           
  9808                           ;CC2500_B1.c: 67: if (s_data != 0)
  9809  131B  0021               	movlb	1	; select bank1
  9810  131C  0846               	movf	_s_data^(0+128),w
  9811  131D  1903               	btfsc	3,2
  9812  131E  2B69               	goto	l8488
  9813                           
  9814                           ;CC2500_B1.c: 69: {
  9815                           ;CC2500_B1.c: 70: RC4 = 0;
  9816  131F  0020               	movlb	0	; select bank0
  9817  1320  120E               	bcf	14,4	;volatile
  9818                           
  9819                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  9820  1321  30FF               	movlw	255
  9821  1322  00A4               	movwf	??_CC2500_RxData
  9822  1323  0824               	movf	??_CC2500_RxData,w
  9823  1324  0021               	movlb	1	; select bank1
  9824  1325  00C2               	movwf	_SPI0Buffer^(0+128)
  9825  1326                     l291:	
  9826                           ;CC2500_B1.c: 72: while (RC2 == 1);
  9827                           
  9828  1326  0020               	movlb	0	; select bank0
  9829  1327  190E               	btfsc	14,2	;volatile
  9830  1328  2B26               	goto	l291
  9831                           
  9832                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9833  1329  3198  20E0  3193   	fcall	_CC2500_WriteByte
  9834                           
  9835                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9836  132C  3199  2198  3193   	fcall	_CC2500_ReadByte
  9837                           
  9838                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  9839  132F  0021               	movlb	1	; select bank1
  9840  1330  0842               	movf	_SPI0Buffer^(0+128),w
  9841  1331  0020               	movlb	0	; select bank0
  9842  1332  00A4               	movwf	??_CC2500_RxData
  9843  1333  0824               	movf	??_CC2500_RxData,w
  9844  1334  0021               	movlb	1	; select bank1
  9845  1335  00C1               	movwf	_Rx_Length^(0+128)
  9846                           
  9847                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9848  1336  0020               	movlb	0	; select bank0
  9849  1337  01A5               	clrf	CC2500_RxData@loop_f
  9850  1338                     l8474:	
  9851  1338  0021               	movlb	1	; select bank1
  9852  1339  0841               	movf	_Rx_Length^(0+128),w
  9853  133A  0020               	movlb	0	; select bank0
  9854  133B  0225               	subwf	CC2500_RxData@loop_f,w
  9855  133C  1803               	btfsc	3,0
  9856  133D  2B50               	goto	l8476
  9857                           
  9858                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  9859  133E  3199  2198  3193   	fcall	_CC2500_ReadByte
  9860                           
  9861                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  9862  1341  0021               	movlb	1	; select bank1
  9863  1342  0842               	movf	_SPI0Buffer^(0+128),w
  9864  1343  0020               	movlb	0	; select bank0
  9865  1344  00A4               	movwf	??_CC2500_RxData
  9866  1345  0825               	movf	CC2500_RxData@loop_f,w
  9867  1346  3EA0               	addlw	_RF_Data& (0+255)
  9868  1347  0086               	movwf	6
  9869  1348  0187               	clrf	7
  9870  1349  0824               	movf	??_CC2500_RxData,w
  9871  134A  0081               	movwf	1
  9872  134B  3001               	movlw	1
  9873  134C  00A4               	movwf	??_CC2500_RxData
  9874  134D  0824               	movf	??_CC2500_RxData,w
  9875  134E  07A5               	addwf	CC2500_RxData@loop_f,f
  9876  134F  2B38               	goto	l8474
  9877  1350                     l8476:	
  9878                           
  9879                           ;CC2500_B1.c: 80: }
  9880                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  9881  1350  3199  2198  3193   	fcall	_CC2500_ReadByte
  9882                           
  9883                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  9884  1353  0021               	movlb	1	; select bank1
  9885  1354  0842               	movf	_SPI0Buffer^(0+128),w
  9886  1355  0020               	movlb	0	; select bank0
  9887  1356  00A4               	movwf	??_CC2500_RxData
  9888  1357  0824               	movf	??_CC2500_RxData,w
  9889  1358  0021               	movlb	1	; select bank1
  9890  1359  00C0               	movwf	_RSSI^(0+128)
  9891                           
  9892                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  9893  135A  3199  2198  3193   	fcall	_CC2500_ReadByte
  9894                           
  9895                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  9896  135D  0021               	movlb	1	; select bank1
  9897  135E  0842               	movf	_SPI0Buffer^(0+128),w
  9898  135F  0020               	movlb	0	; select bank0
  9899  1360  00A4               	movwf	??_CC2500_RxData
  9900  1361  0824               	movf	??_CC2500_RxData,w
  9901  1362  0021               	movlb	1	; select bank1
  9902  1363  00B8               	movwf	_CRC^(0+128)
  9903                           
  9904                           ;CC2500_B1.c: 85: RC4 = 1;
  9905  1364  0020               	movlb	0	; select bank0
  9906  1365  160E               	bsf	14,4	;volatile
  9907                           
  9908                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  9909  1366  0021               	movlb	1	; select bank1
  9910  1367  1BB8               	btfsc	_CRC^(0+128),7
  9911                           
  9912                           ;CC2500_B1.c: 87: Receive_OK = 1;
  9913  1368  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9914  1369                     l8488:	
  9915                           
  9916                           ;CC2500_B1.c: 88: }
  9917                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  9918  1369  3036               	movlw	54
  9919  136A  31A7  275E  3193   	fcall	_CC2500_WriteCommand
  9920                           
  9921                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  9922  136D  303A               	movlw	58
  9923  136E  31A7  275E  3193   	fcall	_CC2500_WriteCommand
  9924                           
  9925                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  9926  1371  0020               	movlb	0	; select bank0
  9927  1372  01A2               	clrf	setRF_RxStatus@command
  9928  1373  3001               	movlw	1
  9929  1374  31A7  2740         	fcall	_setRF_RxStatus
  9930  1376  0008               	return
  9931  1377                     __end_of_CC2500_RxData:	
  9932                           
  9933                           	psect	text44
  9934  2740                     __ptext44:	
  9935 ;; *************** function _setRF_RxStatus *****************
  9936 ;; Defined at:
  9937 ;;		line 42 in file "../src/RF_Control_B1.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  rf              1    wreg     unsigned char 
  9940 ;;  command         1    2[BANK0 ] unsigned char 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;  rf              1    3[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    5
  9959 ;; This function calls:
  9960 ;;		_RfPointSelect
  9961 ;; This function is called by:
  9962 ;;		_CC2500_RxData
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _setRF_RxStatus
  9968  2740                     _setRF_RxStatus:	
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9972                           ;setRF_RxStatus@rf stored from wreg
  9973  2740  0020               	movlb	0	; select bank0
  9974  2741  00A3               	movwf	setRF_RxStatus@rf
  9975                           
  9976                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  9977  2742  0823               	movf	setRF_RxStatus@rf,w
  9978  2743  31A6  2695         	fcall	_RfPointSelect
  9979                           
  9980                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  9981  2745  0021               	movlb	1	; select bank1
  9982  2746  083E               	movf	_RF^(0+128),w
  9983  2747  0086               	movwf	6
  9984  2748  0187               	clrf	7
  9985  2749  0020               	movlb	0	; select bank0
  9986  274A  0822               	movf	setRF_RxStatus@command,w
  9987  274B  1181               	bcf	1,3
  9988  274C  1D03               	skipz
  9989  274D  1581               	bsf	1,3
  9990  274E  0008               	return
  9991  274F                     __end_of_setRF_RxStatus:	
  9992                           
  9993                           	psect	text45
  9994  1961                     __ptext45:	
  9995 ;; *************** function _CC2500_ReadStatus *****************
  9996 ;; Defined at:
  9997 ;;		line 263 in file "../src/CC2500_B1.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  status_addr     1    wreg     unsigned char 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  status_addr     1    3[BANK0 ] unsigned char 
 10002 ;; Return value:  Size  Location     Type
 10003 ;;		None               void
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0, pclath, cstack
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;Total ram usage:        2 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    5
 10018 ;; This function calls:
 10019 ;;		_CC2500_ReadByte
 10020 ;;		_CC2500_WriteByte
 10021 ;; This function is called by:
 10022 ;;		_CC2500_RxData
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function _CC2500_ReadStatus
 10028  1961                     _CC2500_ReadStatus:	
 10029                           
 10030                           ;incstack = 0
 10031                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
 10032                           ;CC2500_ReadStatus@status_addr stored from wreg
 10033  1961  0020               	movlb	0	; select bank0
 10034  1962  00A3               	movwf	CC2500_ReadStatus@status_addr
 10035                           
 10036                           ;CC2500_B1.c: 264: RC4 = 0;
 10037  1963  120E               	bcf	14,4	;volatile
 10038                           
 10039                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
 10040  1964  0823               	movf	CC2500_ReadStatus@status_addr,w
 10041  1965  3EC0               	addlw	192
 10042  1966  00A2               	movwf	??_CC2500_ReadStatus
 10043  1967  0822               	movf	??_CC2500_ReadStatus,w
 10044  1968  0021               	movlb	1	; select bank1
 10045  1969  00C2               	movwf	_SPI0Buffer^(0+128)
 10046  196A                     l367:	
 10047                           ;CC2500_B1.c: 267: while (RC2 == 1);
 10048                           
 10049  196A  0020               	movlb	0	; select bank0
 10050  196B  190E               	btfsc	14,2	;volatile
 10051  196C  296A               	goto	l367
 10052                           
 10053                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 10054  196D  3198  20E0  3199   	fcall	_CC2500_WriteByte
 10055                           
 10056                           ;CC2500_B1.c: 270: CC2500_ReadByte();
 10057  1970  3199  2198         	fcall	_CC2500_ReadByte
 10058                           
 10059                           ;CC2500_B1.c: 271: RC4 = 1;
 10060  1972  0020               	movlb	0	; select bank0
 10061  1973  160E               	bsf	14,4	;volatile
 10062                           
 10063                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
 10064  1974  0021               	movlb	1	; select bank1
 10065  1975  0842               	movf	_SPI0Buffer^(0+128),w
 10066  1976  0020               	movlb	0	; select bank0
 10067  1977  00A2               	movwf	??_CC2500_ReadStatus
 10068  1978  0822               	movf	??_CC2500_ReadStatus,w
 10069  1979  0021               	movlb	1	; select bank1
 10070  197A  00C6               	movwf	_s_data^(0+128)
 10071  197B  0008               	return
 10072  197C                     __end_of_CC2500_ReadStatus:	
 10073                           
 10074                           	psect	text46
 10075  1998                     __ptext46:	
 10076 ;; *************** function _CC2500_ReadByte *****************
 10077 ;; Defined at:
 10078 ;;		line 207 in file "../src/CC2500_B1.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10083 ;; Return value:  Size  Location     Type
 10084 ;;		None               void
 10085 ;; Registers used:
 10086 ;;		wreg, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;Total ram usage:        2 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    4
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_CC2500_RxData
 10103 ;;		_CC2500_ReadStatus
 10104 ;;		_CC2500_ReadREG
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _CC2500_ReadByte
 10110  1998                     _CC2500_ReadByte:	
 10111                           
 10112                           ;CC2500_B1.c: 208: unsigned char loop_b;
 10113                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10117  1998  0020               	movlb	0	; select bank0
 10118  1999  01A1               	clrf	CC2500_ReadByte@loop_b
 10119  199A                     L9:	
 10120  199A  3008               	movlw	8
 10121  199B  0221               	subwf	CC2500_ReadByte@loop_b,w
 10122  199C  1803               	btfsc	3,0
 10123  199D  0008               	return
 10124                           
 10125                           ;CC2500_B1.c: 210: RC1 = 1;
 10126  199E  148E               	bsf	14,1	;volatile
 10127                           
 10128                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
 10129  199F  1003               	clrc
 10130  19A0  0021               	movlb	1	; select bank1
 10131  19A1  0DC2               	rlf	_SPI0Buffer^(0+128),f
 10132                           
 10133                           ;CC2500_B1.c: 212: if (RC2 == 1)
 10134  19A2  0020               	movlb	0	; select bank0
 10135  19A3  1D0E               	btfss	14,2	;volatile
 10136  19A4  29A8               	goto	l6294
 10137                           
 10138                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
 10139  19A5  0021               	movlb	1	; select bank1
 10140  19A6  1442               	bsf	_SPI0Buffer^(0+128),0
 10141  19A7  29AE               	goto	l6296
 10142  19A8                     l6294:	
 10143                           
 10144                           ;CC2500_B1.c: 214: else
 10145                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
 10146  19A8  30FE               	movlw	254
 10147  19A9  0020               	movlb	0	; select bank0
 10148  19AA  00A0               	movwf	??_CC2500_ReadByte
 10149  19AB  0820               	movf	??_CC2500_ReadByte,w
 10150  19AC  0021               	movlb	1	; select bank1
 10151  19AD  05C2               	andwf	_SPI0Buffer^(0+128),f
 10152  19AE                     l6296:	
 10153                           
 10154                           ;CC2500_B1.c: 216: RC1 = 0;
 10155  19AE  0020               	movlb	0	; select bank0
 10156  19AF  108E               	bcf	14,1	;volatile
 10157  19B0  3001               	movlw	1
 10158  19B1  00A0               	movwf	??_CC2500_ReadByte
 10159  19B2  0820               	movf	??_CC2500_ReadByte,w
 10160  19B3  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10161  19B4  299A               	goto	L9
 10162  19B5                     __end_of_CC2500_ReadByte:	
 10163                           
 10164                           	psect	text47
 10165  2597                     __ptext47:	
 10166 ;; *************** function _RF_Initialization *****************
 10167 ;; Defined at:
 10168 ;;		line 16 in file "../src/RF_Control_B1.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;		None
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0, pclath, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;Total ram usage:        0 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    5
 10189 ;; This function calls:
 10190 ;;		_setRF_Initialization
 10191 ;; This function is called by:
 10192 ;;		_main
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           
 10197                           ;psect for function _RF_Initialization
 10198  2597                     _RF_Initialization:	
 10199                           
 10200                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
 10201                           
 10202                           ;incstack = 0
 10203                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10204  2597  3001               	movlw	1
 10205  2598  31A5  25D6         	fcall	_setRF_Initialization
 10206  259A  0008               	return
 10207  259B                     __end_of_RF_Initialization:	
 10208                           
 10209                           	psect	text48
 10210  25D6                     __ptext48:	
 10211 ;; *************** function _setRF_Initialization *****************
 10212 ;; Defined at:
 10213 ;;		line 49 in file "../src/RF_Control_B1.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;  rf              1    wreg     unsigned char 
 10216 ;; Auto vars:     Size  Location     Type
 10217 ;;  rf              1    0[COMMON] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;		None               void
 10220 ;; Registers used:
 10221 ;;		wreg
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;Total ram usage:        1 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    4
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_RF_Initialization
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           
 10242                           ;psect for function _setRF_Initialization
 10243  25D6                     _setRF_Initialization:	
 10244                           
 10245                           ;RF_Control_B1.c: 52: Tx_Length = 21;
 10246                           
 10247                           ;incstack = 0
 10248                           ; Regs used in _setRF_Initialization: [wreg]
 10249  25D6  3015               	movlw	21
 10250  25D7  0020               	movlb	0	; select bank0
 10251  25D8  00A0               	movwf	??_setRF_Initialization
 10252  25D9  0820               	movf	??_setRF_Initialization,w
 10253  25DA  0021               	movlb	1	; select bank1
 10254  25DB  00C3               	movwf	_Tx_Length^(0+128)
 10255  25DC  0008               	return
 10256  25DD                     __end_of_setRF_Initialization:	
 10257                           
 10258                           	psect	text49
 10259  2576                     __ptext49:	
 10260 ;; *************** function _PowerFault_Main *****************
 10261 ;; Defined at:
 10262 ;;		line 22 in file "../src/PowerFault_B1.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;		None               void
 10269 ;; Registers used:
 10270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:   10
 10283 ;; This function calls:
 10284 ;;		_setPowerFault_Main
 10285 ;; This function is called by:
 10286 ;;		_main
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _PowerFault_Main
 10292  2576                     _PowerFault_Main:	
 10293                           
 10294                           ;PowerFault_B1.c: 25: setPowerFault_Main();
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10298  2576  318E  26E3         	fcall	_setPowerFault_Main
 10299  2578  0008               	return
 10300  2579                     __end_of_PowerFault_Main:	
 10301                           
 10302                           	psect	text50
 10303  0EE3                     __ptext50:	
 10304 ;; *************** function _setPowerFault_Main *****************
 10305 ;; Defined at:
 10306 ;;		line 61 in file "../src/PowerFault_B1.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;		None               void
 10313 ;; Registers used:
 10314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        2 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    9
 10327 ;; This function calls:
 10328 ;;		_getLoad_Safe
 10329 ;;		_getTemp_Safe
 10330 ;;		_setPowerFault_Exceptions
 10331 ;; This function is called by:
 10332 ;;		_PowerFault_Main
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function _setPowerFault_Main
 10338  0EE3                     _setPowerFault_Main:	
 10339                           
 10340                           ;PowerFault_B1.c: 63: if(PF->Enable)
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10344  0EE3  0021               	movlb	1	; select bank1
 10345  0EE4  083D               	movf	_PF^(0+128),w
 10346  0EE5  0086               	movwf	6
 10347  0EE6  3001               	movlw	1	; select bank2/3
 10348  0EE7  0087               	movwf	7
 10349  0EE8  1C01               	btfss	1,0
 10350  0EE9  0008               	return
 10351                           
 10352                           ;PowerFault_B1.c: 64: {
 10353                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
 10354  0EEA  083D               	movf	_PF^(0+128),w
 10355  0EEB  0086               	movwf	6
 10356  0EEC  3001               	movlw	1	; select bank2/3
 10357  0EED  0087               	movwf	7
 10358  0EEE  1981               	btfsc	1,3
 10359  0EEF  2F36               	goto	l8992
 10360                           
 10361                           ;PowerFault_B1.c: 66: {
 10362                           ;PowerFault_B1.c: 67: PF->Time++;
 10363  0EF0  083D               	movf	_PF^(0+128),w
 10364  0EF1  3E02               	addlw	2
 10365  0EF2  0086               	movwf	6
 10366  0EF3  3001               	movlw	1	; select bank2/3
 10367  0EF4  0087               	movwf	7
 10368  0EF5  3001               	movlw	1
 10369  0EF6  0781               	addwf	1,f
 10370  0EF7  3141               	addfsr 1,1
 10371  0EF8  1803               	skipnc
 10372  0EF9  0A81               	incf	1,f
 10373                           
 10374                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
 10375  0EFA  083D               	movf	_PF^(0+128),w
 10376  0EFB  3E02               	addlw	2
 10377  0EFC  0086               	movwf	6
 10378  0EFD  3001               	movlw	1	; select bank2/3
 10379  0EFE  0087               	movwf	7
 10380  0EFF  3F40               	moviw [0]fsr1
 10381  0F00  0020               	movlb	0	; select bank0
 10382  0F01  00AD               	movwf	??_setPowerFault_Main
 10383  0F02  3F41               	moviw [1]fsr1
 10384  0F03  00AE               	movwf	??_setPowerFault_Main+1
 10385  0F04  3002               	movlw	2
 10386  0F05  022E               	subwf	??_setPowerFault_Main+1,w
 10387  0F06  30BC               	movlw	188
 10388  0F07  1903               	skipnz
 10389  0F08  022D               	subwf	??_setPowerFault_Main,w
 10390  0F09  1C03               	skipc
 10391  0F0A  0008               	return
 10392                           
 10393                           ;PowerFault_B1.c: 69: {
 10394                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
 10395  0F0B  31A6  2638  318E   	fcall	_getLoad_Safe
 10396  0F0E  3A00               	xorlw	0
 10397  0F0F  1903               	skipnz
 10398  0F10  2F2B               	goto	l8990
 10399  0F11  31A5  25C8  318E   	fcall	_getTemp_Safe
 10400  0F14  3A00               	xorlw	0
 10401  0F15  1903               	skipnz
 10402  0F16  2F2B               	goto	l8990
 10403                           
 10404                           ;PowerFault_B1.c: 71: {
 10405                           ;PowerFault_B1.c: 72: PF->Time=0;
 10406  0F17  0021               	movlb	1	; select bank1
 10407  0F18  083D               	movf	_PF^(0+128),w
 10408  0F19  3E02               	addlw	2
 10409  0F1A  0086               	movwf	6
 10410  0F1B  3001               	movlw	1	; select bank2/3
 10411  0F1C  0087               	movwf	7
 10412  0F1D  3000               	movlw	0
 10413  0F1E  3FC0               	movwi [0]fsr1
 10414  0F1F  3FC1               	movwi [1]fsr1
 10415                           
 10416                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
 10417  0F20  083D               	movf	_PF^(0+128),w
 10418  0F21  0086               	movwf	6
 10419  0F22  3001               	movlw	1	; select bank2/3
 10420  0F23  0087               	movwf	7
 10421  0F24  1581               	bsf	1,3
 10422                           
 10423                           ;PowerFault_B1.c: 74: PF->Safe=0;
 10424  0F25  083D               	movf	_PF^(0+128),w
 10425  0F26  0086               	movwf	6
 10426  0F27  3001               	movlw	1	; select bank2/3
 10427  0F28  0087               	movwf	7
 10428  0F29  1101               	bcf	1,2
 10429                           
 10430                           ;PowerFault_B1.c: 75: }
 10431  0F2A  0008               	return
 10432  0F2B                     l8990:	
 10433                           
 10434                           ;PowerFault_B1.c: 76: else
 10435                           ;PowerFault_B1.c: 77: {
 10436                           ;PowerFault_B1.c: 78: PF->Time=700;
 10437  0F2B  0021               	movlb	1	; select bank1
 10438  0F2C  083D               	movf	_PF^(0+128),w
 10439  0F2D  3E02               	addlw	2
 10440  0F2E  0086               	movwf	6
 10441  0F2F  3001               	movlw	1	; select bank2/3
 10442  0F30  0087               	movwf	7
 10443  0F31  30BC               	movlw	188
 10444  0F32  3FC0               	movwi [0]fsr1
 10445  0F33  3002               	movlw	2
 10446  0F34  3FC1               	movwi [1]fsr1
 10447                           
 10448                           ;PowerFault_B1.c: 79: }
 10449                           ;PowerFault_B1.c: 80: }
 10450                           ;PowerFault_B1.c: 81: }
 10451  0F35  0008               	return
 10452  0F36                     l8992:	
 10453                           
 10454                           ;PowerFault_B1.c: 82: else
 10455                           ;PowerFault_B1.c: 83: {
 10456                           ;PowerFault_B1.c: 84: PF->Time++;
 10457  0F36  083D               	movf	_PF^(0+128),w
 10458  0F37  3E02               	addlw	2
 10459  0F38  0086               	movwf	6
 10460  0F39  3001               	movlw	1	; select bank2/3
 10461  0F3A  0087               	movwf	7
 10462  0F3B  3001               	movlw	1
 10463  0F3C  0781               	addwf	1,f
 10464  0F3D  3141               	addfsr 1,1
 10465  0F3E  1803               	skipnc
 10466  0F3F  0A81               	incf	1,f
 10467                           
 10468                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10469  0F40  083D               	movf	_PF^(0+128),w
 10470  0F41  3E02               	addlw	2
 10471  0F42  0086               	movwf	6
 10472  0F43  3001               	movlw	1	; select bank2/3
 10473  0F44  0087               	movwf	7
 10474  0F45  3F40               	moviw [0]fsr1
 10475  0F46  0020               	movlb	0	; select bank0
 10476  0F47  00AD               	movwf	??_setPowerFault_Main
 10477  0F48  3F41               	moviw [1]fsr1
 10478  0F49  00AE               	movwf	??_setPowerFault_Main+1
 10479  0F4A  3000               	movlw	0
 10480  0F4B  022E               	subwf	??_setPowerFault_Main+1,w
 10481  0F4C  3002               	movlw	2
 10482  0F4D  1903               	skipnz
 10483  0F4E  022D               	subwf	??_setPowerFault_Main,w
 10484  0F4F  1C03               	skipc
 10485  0F50  0008               	return
 10486                           
 10487                           ;PowerFault_B1.c: 86: {
 10488                           ;PowerFault_B1.c: 87: PF->Time=0;
 10489  0F51  0021               	movlb	1	; select bank1
 10490  0F52  083D               	movf	_PF^(0+128),w
 10491  0F53  3E02               	addlw	2
 10492  0F54  0086               	movwf	6
 10493  0F55  3001               	movlw	1	; select bank2/3
 10494  0F56  0087               	movwf	7
 10495  0F57  3000               	movlw	0
 10496  0F58  3FC0               	movwi [0]fsr1
 10497  0F59  3FC1               	movwi [1]fsr1
 10498                           
 10499                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10500  0F5A  083D               	movf	_PF^(0+128),w
 10501  0F5B  0086               	movwf	6
 10502  0F5C  3001               	movlw	1	; select bank2/3
 10503  0F5D  0087               	movwf	7
 10504  0F5E  1181               	bcf	1,3
 10505                           
 10506                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10507  0F5F  083D               	movf	_PF^(0+128),w
 10508  0F60  0086               	movwf	6
 10509  0F61  3001               	movlw	1	; select bank2/3
 10510  0F62  0087               	movwf	7
 10511  0F63  1C81               	btfss	1,1
 10512  0F64  2FA5               	goto	l9012
 10513                           
 10514                           ;PowerFault_B1.c: 91: {
 10515                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10516  0F65  083D               	movf	_PF^(0+128),w
 10517  0F66  3E04               	addlw	4
 10518  0F67  0086               	movwf	6
 10519  0F68  3001               	movlw	1	; select bank2/3
 10520  0F69  0087               	movwf	7
 10521  0F6A  3F40               	moviw [0]fsr1
 10522  0F6B  0020               	movlb	0	; select bank0
 10523  0F6C  00AD               	movwf	??_setPowerFault_Main
 10524  0F6D  3F41               	moviw [1]fsr1
 10525  0F6E  00AE               	movwf	??_setPowerFault_Main+1
 10526  0F6F  3001               	movlw	1
 10527  0F70  022E               	subwf	??_setPowerFault_Main+1,w
 10528  0F71  3091               	movlw	145
 10529  0F72  1903               	skipnz
 10530  0F73  022D               	subwf	??_setPowerFault_Main,w
 10531  0F74  1803               	skipnc
 10532  0F75  2FE5               	goto	l9024
 10533  0F76  0021               	movlb	1	; select bank1
 10534  0F77  083D               	movf	_PF^(0+128),w
 10535  0F78  3E04               	addlw	4
 10536  0F79  0086               	movwf	6
 10537  0F7A  3001               	movlw	1	; select bank2/3
 10538  0F7B  0087               	movwf	7
 10539  0F7C  3F40               	moviw [0]fsr1
 10540  0F7D  0020               	movlb	0	; select bank0
 10541  0F7E  00AD               	movwf	??_setPowerFault_Main
 10542  0F7F  3F41               	moviw [1]fsr1
 10543  0F80  00AE               	movwf	??_setPowerFault_Main+1
 10544  0F81  3000               	movlw	0
 10545  0F82  022E               	subwf	??_setPowerFault_Main+1,w
 10546  0F83  30C8               	movlw	200
 10547  0F84  1903               	skipnz
 10548  0F85  022D               	subwf	??_setPowerFault_Main,w
 10549  0F86  1C03               	skipc
 10550  0F87  2FE5               	goto	l9024
 10551                           
 10552                           ;PowerFault_B1.c: 93: {
 10553                           ;PowerFault_B1.c: 94: PF->Count++;
 10554  0F88  3001               	movlw	1
 10555  0F89  00AD               	movwf	??_setPowerFault_Main
 10556  0F8A  0021               	movlb	1	; select bank1
 10557  0F8B  0A3D               	incf	_PF^(0+128),w
 10558  0F8C  0086               	movwf	6
 10559  0F8D  3001               	movlw	1	; select bank2/3
 10560  0F8E  0087               	movwf	7
 10561  0F8F  0020               	movlb	0	; select bank0
 10562  0F90  082D               	movf	??_setPowerFault_Main,w
 10563  0F91  0781               	addwf	1,f
 10564                           
 10565                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10566  0F92  0021               	movlb	1	; select bank1
 10567  0F93  0A3D               	incf	_PF^(0+128),w
 10568  0F94  0086               	movwf	6
 10569  0F95  3001               	movlw	1	; select bank2/3
 10570  0F96  0087               	movwf	7
 10571  0F97  3002               	movlw	2
 10572  0F98  0201               	subwf	1,w
 10573  0F99  1C03               	skipc
 10574  0F9A  2FEB               	goto	l9026
 10575                           
 10576                           ;PowerFault_B1.c: 96: {
 10577                           ;PowerFault_B1.c: 97: PF->Count=0;
 10578  0F9B  0A3D               	incf	_PF^(0+128),w
 10579  0F9C  0086               	movwf	6
 10580  0F9D  3001               	movlw	1	; select bank2/3
 10581  0F9E  0087               	movwf	7
 10582  0F9F  0181               	clrf	1
 10583                           
 10584                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10585  0FA0  3000               	movlw	0
 10586  0FA1  3190  2000  318E   	fcall	_setPowerFault_Exceptions
 10587                           
 10588                           ;PowerFault_B1.c: 99: }
 10589                           ;PowerFault_B1.c: 100: }
 10590  0FA4  2FEB               	goto	l9026
 10591  0FA5                     l9012:	
 10592                           ;PowerFault_B1.c: 104: }
 10593                           ;PowerFault_B1.c: 105: }
 10594                           
 10595                           ;PowerFault_B1.c: 101: else
 10596                           ;PowerFault_B1.c: 102: {
 10597                           ;PowerFault_B1.c: 103: PF->Count=0;
 10598                           
 10599                           
 10600                           ;PowerFault_B1.c: 106: else
 10601                           ;PowerFault_B1.c: 107: {
 10602                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10603  0FA5  083D               	movf	_PF^(0+128),w
 10604  0FA6  3E04               	addlw	4
 10605  0FA7  0086               	movwf	6
 10606  0FA8  3001               	movlw	1	; select bank2/3
 10607  0FA9  0087               	movwf	7
 10608  0FAA  3F40               	moviw [0]fsr1
 10609  0FAB  0020               	movlb	0	; select bank0
 10610  0FAC  00AD               	movwf	??_setPowerFault_Main
 10611  0FAD  3F41               	moviw [1]fsr1
 10612  0FAE  00AE               	movwf	??_setPowerFault_Main+1
 10613  0FAF  3001               	movlw	1
 10614  0FB0  022E               	subwf	??_setPowerFault_Main+1,w
 10615  0FB1  3090               	movlw	144
 10616  0FB2  1903               	skipnz
 10617  0FB3  022D               	subwf	??_setPowerFault_Main,w
 10618  0FB4  1803               	skipnc
 10619  0FB5  2FC8               	goto	l9016
 10620  0FB6  0021               	movlb	1	; select bank1
 10621  0FB7  083D               	movf	_PF^(0+128),w
 10622  0FB8  3E04               	addlw	4
 10623  0FB9  0086               	movwf	6
 10624  0FBA  3001               	movlw	1	; select bank2/3
 10625  0FBB  0087               	movwf	7
 10626  0FBC  3F40               	moviw [0]fsr1
 10627  0FBD  0020               	movlb	0	; select bank0
 10628  0FBE  00AD               	movwf	??_setPowerFault_Main
 10629  0FBF  3F41               	moviw [1]fsr1
 10630  0FC0  00AE               	movwf	??_setPowerFault_Main+1
 10631  0FC1  3000               	movlw	0
 10632  0FC2  022E               	subwf	??_setPowerFault_Main+1,w
 10633  0FC3  30D3               	movlw	211
 10634  0FC4  1903               	skipnz
 10635  0FC5  022D               	subwf	??_setPowerFault_Main,w
 10636  0FC6  1803               	skipnc
 10637  0FC7  2FE5               	goto	l9024
 10638  0FC8                     l9016:	
 10639                           
 10640                           ;PowerFault_B1.c: 109: {
 10641                           ;PowerFault_B1.c: 110: PF->Count++;
 10642  0FC8  3001               	movlw	1
 10643  0FC9  00AD               	movwf	??_setPowerFault_Main
 10644  0FCA  0021               	movlb	1	; select bank1
 10645  0FCB  0A3D               	incf	_PF^(0+128),w
 10646  0FCC  0086               	movwf	6
 10647  0FCD  3001               	movlw	1	; select bank2/3
 10648  0FCE  0087               	movwf	7
 10649  0FCF  0020               	movlb	0	; select bank0
 10650  0FD0  082D               	movf	??_setPowerFault_Main,w
 10651  0FD1  0781               	addwf	1,f
 10652                           
 10653                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10654  0FD2  0021               	movlb	1	; select bank1
 10655  0FD3  0A3D               	incf	_PF^(0+128),w
 10656  0FD4  0086               	movwf	6
 10657  0FD5  3001               	movlw	1	; select bank2/3
 10658  0FD6  0087               	movwf	7
 10659  0FD7  3002               	movlw	2
 10660  0FD8  0201               	subwf	1,w
 10661  0FD9  1C03               	skipc
 10662  0FDA  2FEB               	goto	l9026
 10663                           
 10664                           ;PowerFault_B1.c: 112: {
 10665                           ;PowerFault_B1.c: 113: PF->Count=0;
 10666  0FDB  0A3D               	incf	_PF^(0+128),w
 10667  0FDC  0086               	movwf	6
 10668  0FDD  3001               	movlw	1	; select bank2/3
 10669  0FDE  0087               	movwf	7
 10670  0FDF  0181               	clrf	1
 10671                           
 10672                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10673  0FE0  3001               	movlw	1
 10674  0FE1  3190  2000  318E   	fcall	_setPowerFault_Exceptions
 10675                           
 10676                           ;PowerFault_B1.c: 115: }
 10677                           ;PowerFault_B1.c: 116: }
 10678  0FE4  2FEB               	goto	l9026
 10679  0FE5                     l9024:	
 10680                           
 10681                           ;PowerFault_B1.c: 117: else
 10682                           ;PowerFault_B1.c: 118: {
 10683                           ;PowerFault_B1.c: 119: PF->Count=0;
 10684  0FE5  0021               	movlb	1	; select bank1
 10685  0FE6  0A3D               	incf	_PF^(0+128),w
 10686  0FE7  0086               	movwf	6
 10687  0FE8  3001               	movlw	1	; select bank2/3
 10688  0FE9  0087               	movwf	7
 10689  0FEA  0181               	clrf	1
 10690  0FEB                     l9026:	
 10691                           
 10692                           ;PowerFault_B1.c: 120: }
 10693                           ;PowerFault_B1.c: 122: }
 10694                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10695  0FEB  0021               	movlb	1	; select bank1
 10696  0FEC  083D               	movf	_PF^(0+128),w
 10697  0FED  0086               	movwf	6
 10698  0FEE  3001               	movlw	1	; select bank2/3
 10699  0FEF  0087               	movwf	7
 10700  0FF0  1881               	btfsc	1,1
 10701  0FF1  2FF7               	goto	l2024
 10702                           
 10703                           ;PowerFault_B1.c: 124: {
 10704                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10705  0FF2  083D               	movf	_PF^(0+128),w
 10706  0FF3  0086               	movwf	6
 10707  0FF4  3001               	movlw	1	; select bank2/3
 10708  0FF5  0087               	movwf	7
 10709  0FF6  1501               	bsf	1,2
 10710  0FF7                     l2024:	
 10711                           
 10712                           ;PowerFault_B1.c: 126: }
 10713                           ;PowerFault_B1.c: 127: PF->AD=0;
 10714  0FF7  083D               	movf	_PF^(0+128),w
 10715  0FF8  3E04               	addlw	4
 10716  0FF9  0086               	movwf	6
 10717  0FFA  3001               	movlw	1	; select bank2/3
 10718  0FFB  0087               	movwf	7
 10719  0FFC  3000               	movlw	0
 10720  0FFD  3FC0               	movwi [0]fsr1
 10721  0FFE  3FC1               	movwi [1]fsr1
 10722  0FFF  0008               	return
 10723  1000                     __end_of_setPowerFault_Main:	
 10724                           
 10725                           	psect	text51
 10726  1000                     __ptext51:	
 10727 ;; *************** function _setPowerFault_Exceptions *****************
 10728 ;; Defined at:
 10729 ;;		line 133 in file "../src/PowerFault_B1.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  command         1    wreg     unsigned char 
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;  command         1   12[BANK0 ] unsigned char 
 10734 ;; Return value:  Size  Location     Type
 10735 ;;		None               void
 10736 ;; Registers used:
 10737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;Total ram usage:        2 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:    8
 10750 ;; This function calls:
 10751 ;;		_DimmerLights_Exceptions
 10752 ;;		_setLED
 10753 ;;		_setRF_Enable
 10754 ;;		_setSw_Enable
 10755 ;; This function is called by:
 10756 ;;		_setPowerFault_Main
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _setPowerFault_Exceptions
 10762  1000                     _setPowerFault_Exceptions:	
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10766                           ;setPowerFault_Exceptions@command stored from wreg
 10767  1000  0020               	movlb	0	; select bank0
 10768  1001  00AC               	movwf	setPowerFault_Exceptions@command
 10769                           
 10770                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10771  1002  0021               	movlb	1	; select bank1
 10772  1003  083D               	movf	_PF^(0+128),w
 10773  1004  0086               	movwf	6
 10774  1005  3001               	movlw	1	; select bank2/3
 10775  1006  0087               	movwf	7
 10776  1007  0020               	movlb	0	; select bank0
 10777  1008  082C               	movf	setPowerFault_Exceptions@command,w
 10778  1009  1081               	bcf	1,1
 10779  100A  1D03               	skipz
 10780  100B  1481               	bsf	1,1
 10781                           
 10782                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10783  100C  092C               	comf	setPowerFault_Exceptions@command,w
 10784  100D  3901               	andlw	1
 10785  100E  00AB               	movwf	??_setPowerFault_Exceptions
 10786  100F  0021               	movlb	1	; select bank1
 10787  1010  083D               	movf	_PF^(0+128),w
 10788  1011  0086               	movwf	6
 10789  1012  3001               	movlw	1	; select bank2/3
 10790  1013  0087               	movwf	7
 10791  1014  0020               	movlb	0	; select bank0
 10792  1015  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10793  1016  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10794  1017  0801               	movf	1,w
 10795  1018  062B               	xorwf	??_setPowerFault_Exceptions,w
 10796  1019  39FB               	andlw	-5
 10797  101A  062B               	xorwf	??_setPowerFault_Exceptions,w
 10798  101B  0081               	movwf	1
 10799                           
 10800                           ;PowerFault_B1.c: 137: if(command == 1)
 10801  101C  082C               	movf	setPowerFault_Exceptions@command,w
 10802  101D  3A01               	xorlw	1
 10803  101E  1D03               	skipz
 10804  101F  282B               	goto	l2028
 10805                           
 10806                           ;PowerFault_B1.c: 138: {
 10807                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10808  1020  3003               	movlw	3
 10809  1021  3191  2142  3190   	fcall	_DimmerLights_Exceptions
 10810                           
 10811                           ;PowerFault_B1.c: 141: setLED(2,1);
 10812  1024  0020               	movlb	0	; select bank0
 10813  1025  01A2               	clrf	setLED@command
 10814  1026  0AA2               	incf	setLED@command,f
 10815  1027  3002               	movlw	2
 10816  1028  3192  2254  3190   	fcall	_setLED
 10817  102B                     l2028:	
 10818                           
 10819                           ;PowerFault_B1.c: 143: }
 10820                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10821  102B  0020               	movlb	0	; select bank0
 10822  102C  082C               	movf	setPowerFault_Exceptions@command,w
 10823  102D  3E0A               	addlw	10
 10824  102E  00AB               	movwf	??_setPowerFault_Exceptions
 10825  102F  082B               	movf	??_setPowerFault_Exceptions,w
 10826  1030  00A2               	movwf	setLED@command
 10827  1031  3063               	movlw	99
 10828  1032  3192  2254  3190   	fcall	_setLED
 10829                           
 10830                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10831  1035  0020               	movlb	0	; select bank0
 10832  1036  092C               	comf	setPowerFault_Exceptions@command,w
 10833  1037  3901               	andlw	1
 10834  1038  31A7  2731  3190   	fcall	_setSw_Enable
 10835                           
 10836                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10837  103B  0020               	movlb	0	; select bank0
 10838  103C  092C               	comf	setPowerFault_Exceptions@command,w
 10839  103D  3901               	andlw	1
 10840  103E  00AB               	movwf	??_setPowerFault_Exceptions
 10841  103F  082B               	movf	??_setPowerFault_Exceptions,w
 10842  1040  00A2               	movwf	setRF_Enable@command
 10843  1041  3001               	movlw	1
 10844  1042  319B  2362         	fcall	_setRF_Enable
 10845  1044  0008               	return
 10846  1045                     __end_of_setPowerFault_Exceptions:	
 10847                           
 10848                           	psect	text52
 10849  2638                     __ptext52:	
 10850 ;; *************** function _getLoad_Safe *****************
 10851 ;; Defined at:
 10852 ;;		line 298 in file "../src/OverLoad_B1.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;Total ram usage:        1 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    4
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_setTemp_Main
 10877 ;;		_setPowerFault_Main
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _getLoad_Safe
 10883  2638                     _getLoad_Safe:	
 10884                           
 10885                           ;OverLoad_B1.c: 299: return Load->Safe;
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10889  2638  087B               	movf	_Load,w
 10890  2639  0086               	movwf	6
 10891  263A  3002               	movlw	2	; select bank4/5
 10892  263B  0087               	movwf	7
 10893  263C  0C01               	rrf	1,w
 10894  263D  0020               	movlb	0	; select bank0
 10895  263E  00A0               	movwf	??_getLoad_Safe
 10896  263F  0CA0               	rrf	??_getLoad_Safe,f
 10897  2640  0C20               	rrf	??_getLoad_Safe,w
 10898  2641  3901               	andlw	1
 10899  2642  0008               	return
 10900  2643                     __end_of_getLoad_Safe:	
 10901                           
 10902                           	psect	text53
 10903  2573                     __ptext53:	
 10904 ;; *************** function _PowerFault_Initialization *****************
 10905 ;; Defined at:
 10906 ;;		line 15 in file "../src/PowerFault_B1.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;		None
 10911 ;; Return value:  Size  Location     Type
 10912 ;;		None               void
 10913 ;; Registers used:
 10914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;Total ram usage:        0 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    5
 10927 ;; This function calls:
 10928 ;;		_setPowerFault_Initialization
 10929 ;; This function is called by:
 10930 ;;		_main
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _PowerFault_Initialization
 10936  2573                     _PowerFault_Initialization:	
 10937                           
 10938                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10939                           
 10940                           ;incstack = 0
 10941                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10942  2573  31A7  27EF         	fcall	_setPowerFault_Initialization
 10943  2575  0008               	return
 10944  2576                     __end_of_PowerFault_Initialization:	
 10945                           
 10946                           	psect	text54
 10947  27EF                     __ptext54:	
 10948 ;; *************** function _setPowerFault_Initialization *****************
 10949 ;; Defined at:
 10950 ;;		line 29 in file "../src/PowerFault_B1.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;		None
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;		None
 10955 ;; Return value:  Size  Location     Type
 10956 ;;		None               void
 10957 ;; Registers used:
 10958 ;;		wreg, fsr1l, fsr1h
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;Total ram usage:        1 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    4
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_PowerFault_Initialization
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           
 10979                           ;psect for function _setPowerFault_Initialization
 10980  27EF                     _setPowerFault_Initialization:	
 10981                           
 10982                           ;PowerFault_B1.c: 31: PF=&PF1;
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10986  27EF  3063               	movlw	_PF1& (0+255)
 10987  27F0  0020               	movlb	0	; select bank0
 10988  27F1  00A0               	movwf	??_setPowerFault_Initialization
 10989  27F2  0820               	movf	??_setPowerFault_Initialization,w
 10990  27F3  0021               	movlb	1	; select bank1
 10991  27F4  00BD               	movwf	_PF^(0+128)
 10992                           
 10993                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10994  27F5  083D               	movf	_PF^(0+128),w
 10995  27F6  0086               	movwf	6
 10996  27F7  3001               	movlw	1	; select bank2/3
 10997  27F8  0087               	movwf	7
 10998  27F9  1401               	bsf	1,0
 10999                           
 11000                           ;PowerFault_B1.c: 33: PF->Safe=1;
 11001  27FA  083D               	movf	_PF^(0+128),w
 11002  27FB  0086               	movwf	6
 11003  27FC  3001               	movlw	1	; select bank2/3
 11004  27FD  0087               	movwf	7
 11005  27FE  1501               	bsf	1,2
 11006  27FF  0008               	return
 11007  2800                     __end_of_setPowerFault_Initialization:	
 11008                           
 11009                           	psect	text55
 11010  1946                     __ptext55:	
 11011 ;; *************** function _Mcu_Initialization *****************
 11012 ;; Defined at:
 11013 ;;		line 30 in file "../src/MCU_B1.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;		None
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;		None
 11018 ;; Return value:  Size  Location     Type
 11019 ;;		None               void
 11020 ;; Registers used:
 11021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;Total ram usage:        1 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    5
 11034 ;; This function calls:
 11035 ;;		_ADC_Set
 11036 ;;		_Fosc_Set
 11037 ;;		_INT_Set
 11038 ;;		_IOC_Set
 11039 ;;		_IO_Set
 11040 ;;		_TMR0_Set
 11041 ;;		_WDT_Set
 11042 ;; This function is called by:
 11043 ;;		_main
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           
 11048                           ;psect for function _Mcu_Initialization
 11049  1946                     _Mcu_Initialization:	
 11050                           
 11051                           ;MCU_B1.c: 32: Fosc_Set();
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11055  1946  31A5  2593  3199   	fcall	_Fosc_Set
 11056                           
 11057                           ;MCU_B1.c: 34: IO_Set();
 11058  1949  3188  2000  3199   	fcall	_IO_Set
 11059                           
 11060                           ;MCU_B1.c: 36: TMR0_Set();
 11061  194C  3198  2067  3199   	fcall	_TMR0_Set
 11062                           
 11063                           ;MCU_B1.c: 38: ;;
 11064                           ;MCU_B1.c: 40: ADC_Set();
 11065  194F  31A5  25CF  3199   	fcall	_ADC_Set
 11066                           
 11067                           ;MCU_B1.c: 44: INT_Set();
 11068  1952  31A5  25A8  3199   	fcall	_INT_Set
 11069                           
 11070                           ;MCU_B1.c: 46: IOC_Set();
 11071  1955  31A6  26F7  3199   	fcall	_IOC_Set
 11072                           
 11073                           ;MCU_B1.c: 48: ;;
 11074                           ;MCU_B1.c: 50: ;;
 11075                           ;MCU_B1.c: 52: Memory=&VarMemory;
 11076  1958  30A0               	movlw	_VarMemory& (0+255)
 11077  1959  0020               	movlb	0	; select bank0
 11078  195A  00A1               	movwf	??_Mcu_Initialization
 11079  195B  0821               	movf	??_Mcu_Initialization,w
 11080  195C  0021               	movlb	1	; select bank1
 11081  195D  00EA               	movwf	_Memory^(0+128)
 11082                           
 11083                           ;MCU_B1.c: 54: WDT_Set();
 11084  195E  3198  20C8         	fcall	_WDT_Set
 11085  1960  0008               	return
 11086  1961                     __end_of_Mcu_Initialization:	
 11087                           
 11088                           	psect	text56
 11089  18C8                     __ptext56:	
 11090 ;; *************** function _WDT_Set *****************
 11091 ;; Defined at:
 11092 ;;		line 965 in file "../src/MCU_B1.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;		None
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;		None
 11097 ;; Return value:  Size  Location     Type
 11098 ;;		None               void
 11099 ;; Registers used:
 11100 ;;		wreg, fsr1l, fsr1h
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;Total ram usage:        1 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    4
 11113 ;; This function calls:
 11114 ;;		Nothing
 11115 ;; This function is called by:
 11116 ;;		_Mcu_Initialization
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function _WDT_Set
 11122  18C8                     _WDT_Set:	
 11123                           
 11124                           ;MCU_B1.c: 966: WDTCON = 0b00010111;;
 11125                           
 11126                           ;incstack = 0
 11127                           ; Regs used in _WDT_Set: [wregfsr1]
 11128  18C8  3017               	movlw	23
 11129  18C9  0021               	movlb	1	; select bank1
 11130  18CA  0097               	movwf	23	;volatile
 11131                           
 11132                           ;MCU_B1.c: 967: WDT = &_WDT;
 11133  18CB  30E7               	movlw	__WDT& (0+255)
 11134  18CC  0020               	movlb	0	; select bank0
 11135  18CD  00A0               	movwf	??_WDT_Set
 11136  18CE  0820               	movf	??_WDT_Set,w
 11137  18CF  0021               	movlb	1	; select bank1
 11138  18D0  00EC               	movwf	_WDT^(0+128)
 11139                           
 11140                           ;MCU_B1.c: 968: WDT->Enable = 1;
 11141  18D1  086C               	movf	_WDT^(0+128),w
 11142  18D2  0086               	movwf	6
 11143  18D3  0187               	clrf	7
 11144  18D4  1401               	bsf	1,0
 11145                           
 11146                           ;MCU_B1.c: 969: WDT->Count = 10;
 11147  18D5  300A               	movlw	10
 11148  18D6  0020               	movlb	0	; select bank0
 11149  18D7  00A0               	movwf	??_WDT_Set
 11150  18D8  0021               	movlb	1	; select bank1
 11151  18D9  0A6C               	incf	_WDT^(0+128),w
 11152  18DA  0086               	movwf	6
 11153  18DB  0187               	clrf	7
 11154  18DC  0020               	movlb	0	; select bank0
 11155  18DD  0820               	movf	??_WDT_Set,w
 11156  18DE  0081               	movwf	1
 11157  18DF  0008               	return
 11158  18E0                     __end_of_WDT_Set:	
 11159                           
 11160                           	psect	text57
 11161  1867                     __ptext57:	
 11162 ;; *************** function _TMR0_Set *****************
 11163 ;; Defined at:
 11164 ;;		line 128 in file "../src/MCU_B1.c"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;		None
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;		None               void
 11171 ;; Registers used:
 11172 ;;		wreg, status,2
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;Total ram usage:        1 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    4
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_Mcu_Initialization
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           
 11193                           ;psect for function _TMR0_Set
 11194  1867                     _TMR0_Set:	
 11195                           
 11196                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 11197                           
 11198                           ;incstack = 0
 11199                           ; Regs used in _TMR0_Set: [wreg+status,2]
 11200  1867  30C7               	movlw	_VarTimer0& (0+255)
 11201  1868  0020               	movlb	0	; select bank0
 11202  1869  00A0               	movwf	??_TMR0_Set
 11203  186A  0820               	movf	??_TMR0_Set,w
 11204  186B  0021               	movlb	1	; select bank1
 11205  186C  00EB               	movwf	_Timer0^(0+128)
 11206                           
 11207                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 11208  186D  0195               	clrf	21	;volatile
 11209                           
 11210                           ;MCU_B1.c: 131: TMR0 = (256-90);
 11211  186E  30A6               	movlw	166
 11212  186F  0020               	movlb	0	; select bank0
 11213  1870  0095               	movwf	21	;volatile
 11214                           
 11215                           ;MCU_B1.c: 132: TMR0IE = 1;
 11216  1871  168B               	bsf	11,5	;volatile
 11217                           
 11218                           ;MCU_B1.c: 133: GIE = 1;
 11219  1872  178B               	bsf	11,7	;volatile
 11220  1873  0008               	return
 11221  1874                     __end_of_TMR0_Set:	
 11222                           
 11223                           	psect	text58
 11224  0800                     __ptext58:	
 11225 ;; *************** function _IO_Set *****************
 11226 ;; Defined at:
 11227 ;;		line 62 in file "../src/MCU_B1.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;		None
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;		None
 11232 ;; Return value:  Size  Location     Type
 11233 ;;		None               void
 11234 ;; Registers used:
 11235 ;;		wreg, status,2
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;Total ram usage:        0 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    4
 11248 ;; This function calls:
 11249 ;;		Nothing
 11250 ;; This function is called by:
 11251 ;;		_Mcu_Initialization
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           
 11256                           ;psect for function _IO_Set
 11257  0800                     _IO_Set:	
 11258                           
 11259                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 11260                           
 11261                           ;incstack = 0
 11262                           ; Regs used in _IO_Set: [wreg+status,2]
 11263  0800  3077               	movlw	119
 11264  0801  0021               	movlb	1	; select bank1
 11265  0802  008C               	movwf	12	;volatile
 11266                           
 11267                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 11268  0803  3007               	movlw	7
 11269  0804  008D               	movwf	13	;volatile
 11270                           
 11271                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 11272  0805  300C               	movlw	12
 11273  0806  008E               	movwf	14	;volatile
 11274                           
 11275                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 11276  0807  0022               	movlb	2	; select bank2
 11277  0808  018C               	clrf	12	;volatile
 11278                           
 11279                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 11280  0809  3002               	movlw	2
 11281  080A  008D               	movwf	13	;volatile
 11282                           
 11283                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 11284  080B  018E               	clrf	14	;volatile
 11285                           
 11286                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 11287  080C  3022               	movlw	34
 11288  080D  0023               	movlb	3	; select bank3
 11289  080E  008C               	movwf	12	;volatile
 11290                           
 11291                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 11292  080F  018D               	clrf	13	;volatile
 11293                           
 11294                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 11295  0810  018E               	clrf	14	;volatile
 11296                           
 11297                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 11298  0811  3077               	movlw	119
 11299  0812  0020               	movlb	0	; select bank0
 11300  0813  008C               	movwf	12	;volatile
 11301                           
 11302                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 11303  0814  3007               	movlw	7
 11304  0815  008D               	movwf	13	;volatile
 11305                           
 11306                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 11307  0816  300C               	movlw	12
 11308  0817  008E               	movwf	14	;volatile
 11309  0818  0008               	return
 11310  0819                     __end_of_IO_Set:	
 11311                           
 11312                           	psect	text59
 11313  26F7                     __ptext59:	
 11314 ;; *************** function _IOC_Set *****************
 11315 ;; Defined at:
 11316 ;;		line 329 in file "../src/MCU_B1.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;		None
 11321 ;; Return value:  Size  Location     Type
 11322 ;;		None               void
 11323 ;; Registers used:
 11324 ;;		wreg, status,2
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;Total ram usage:        0 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    4
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_Mcu_Initialization
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _IOC_Set
 11346  26F7                     _IOC_Set:	
 11347                           
 11348                           ;MCU_B1.c: 330: WPUB2 = 0;
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _IOC_Set: [wreg+status,2]
 11352  26F7  0024               	movlb	4	; select bank4
 11353  26F8  110D               	bcf	13,2	;volatile
 11354                           
 11355                           ;MCU_B1.c: 332: IOCBP = 0b00000100;
 11356  26F9  3004               	movlw	4
 11357  26FA  0027               	movlb	7	; select bank7
 11358  26FB  0094               	movwf	20	;volatile
 11359                           
 11360                           ;MCU_B1.c: 333: IOCBN = 0b00000100;
 11361  26FC  3004               	movlw	4
 11362  26FD  0095               	movwf	21	;volatile
 11363                           
 11364                           ;MCU_B1.c: 348: IOCBF = 0b00000000;
 11365  26FE  0196               	clrf	22	;volatile
 11366                           
 11367                           ;MCU_B1.c: 350: IOCIE = 1;
 11368  26FF  158B               	bsf	11,3	;volatile
 11369                           
 11370                           ;MCU_B1.c: 351: IOCIF = 0;
 11371  2700  100B               	bcf	11,0	;volatile
 11372                           
 11373                           ;MCU_B1.c: 352: PEIE = 1;
 11374  2701  170B               	bsf	11,6	;volatile
 11375                           
 11376                           ;MCU_B1.c: 353: GIE = 1;
 11377  2702  178B               	bsf	11,7	;volatile
 11378  2703  0008               	return
 11379  2704                     __end_of_IOC_Set:	
 11380                           
 11381                           	psect	text60
 11382  25A8                     __ptext60:	
 11383 ;; *************** function _INT_Set *****************
 11384 ;; Defined at:
 11385 ;;		line 302 in file "../src/MCU_B1.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;		None
 11390 ;; Return value:  Size  Location     Type
 11391 ;;		None               void
 11392 ;; Registers used:
 11393 ;;		None
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;Total ram usage:        0 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    4
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		_Mcu_Initialization
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _INT_Set
 11415  25A8                     _INT_Set:	
 11416                           
 11417                           ;MCU_B1.c: 303: WPUB0 = 0;
 11418                           
 11419                           ;incstack = 0
 11420                           ; Regs used in _INT_Set: []
 11421  25A8  0024               	movlb	4	; select bank4
 11422  25A9  100D               	bcf	13,0	;volatile
 11423                           
 11424                           ;MCU_B1.c: 304: INTE = 1;
 11425  25AA  160B               	bsf	11,4	;volatile
 11426                           
 11427                           ;MCU_B1.c: 305: PEIE = 1;
 11428  25AB  170B               	bsf	11,6	;volatile
 11429                           
 11430                           ;MCU_B1.c: 306: GIE = 1;
 11431  25AC  178B               	bsf	11,7	;volatile
 11432  25AD  0008               	return
 11433  25AE                     __end_of_INT_Set:	
 11434                           
 11435                           	psect	text61
 11436  2593                     __ptext61:	
 11437 ;; *************** function _Fosc_Set *****************
 11438 ;; Defined at:
 11439 ;;		line 58 in file "../src/MCU_B1.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;		None
 11444 ;; Return value:  Size  Location     Type
 11445 ;;		None               void
 11446 ;; Registers used:
 11447 ;;		wreg
 11448 ;; Tracked objects:
 11449 ;;		On entry : 0/0
 11450 ;;		On exit  : 0/0
 11451 ;;		Unchanged: 0/0
 11452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;Total ram usage:        0 bytes
 11458 ;; Hardware stack levels used:    1
 11459 ;; Hardware stack levels required when called:    4
 11460 ;; This function calls:
 11461 ;;		Nothing
 11462 ;; This function is called by:
 11463 ;;		_Mcu_Initialization
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           
 11468                           ;psect for function _Fosc_Set
 11469  2593                     _Fosc_Set:	
 11470                           
 11471                           ;MCU_B1.c: 59: OSCCON = 0x78;
 11472                           
 11473                           ;incstack = 0
 11474                           ; Regs used in _Fosc_Set: [wreg]
 11475  2593  3078               	movlw	120
 11476  2594  0021               	movlb	1	; select bank1
 11477  2595  0099               	movwf	25	;volatile
 11478  2596  0008               	return
 11479  2597                     __end_of_Fosc_Set:	
 11480                           
 11481                           	psect	text62
 11482  25CF                     __ptext62:	
 11483 ;; *************** function _ADC_Set *****************
 11484 ;; Defined at:
 11485 ;;		line 388 in file "../src/MCU_B1.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;		None
 11490 ;; Return value:  Size  Location     Type
 11491 ;;		None               void
 11492 ;; Registers used:
 11493 ;;		wreg
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;Total ram usage:        0 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    4
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_Mcu_Initialization
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _ADC_Set
 11515  25CF                     _ADC_Set:	
 11516                           
 11517                           ;MCU_B1.c: 389: ADCON1 = 0xf2;
 11518                           
 11519                           ;incstack = 0
 11520                           ; Regs used in _ADC_Set: [wreg]
 11521  25CF  30F2               	movlw	242
 11522  25D0  0021               	movlb	1	; select bank1
 11523  25D1  009E               	movwf	30	;volatile
 11524                           
 11525                           ;MCU_B1.c: 390: FVRCON = 0xc0;
 11526  25D2  30C0               	movlw	192
 11527  25D3  0022               	movlb	2	; select bank2
 11528  25D4  0097               	movwf	23	;volatile
 11529  25D5  0008               	return
 11530  25D6                     __end_of_ADC_Set:	
 11531                           
 11532                           	psect	text63
 11533  004D                     __ptext63:	
 11534 ;; *************** function _Load_Main *****************
 11535 ;; Defined at:
 11536 ;;		line 40 in file "../src/OverLoad_B1.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  i               1   17[BANK0 ] unsigned char 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;		None               void
 11543 ;; Registers used:
 11544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        5 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    9
 11557 ;; This function calls:
 11558 ;;		___lwdiv
 11559 ;;		___wmul
 11560 ;;		_getPF_Safe
 11561 ;;		_getTemp_Safe
 11562 ;;		_setDimmerLights_Clear
 11563 ;;		_setLoad_AH_AL_Restore
 11564 ;;		_setLoad_Exceptions
 11565 ;; This function is called by:
 11566 ;;		_main
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           
 11571                           ;psect for function _Load_Main
 11572  004D                     _Load_Main:	
 11573                           
 11574                           ;OverLoad_B1.c: 41: char i;
 11575                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 11576                           
 11577                           ;incstack = 0
 11578                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11579  004D  087B               	movf	_Load,w
 11580  004E  0086               	movwf	6
 11581  004F  3002               	movlw	2	; select bank4/5
 11582  0050  0087               	movwf	7
 11583  0051  1E81               	btfss	1,5
 11584  0052  287A               	goto	l9334
 11585                           
 11586                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 11587  0053  087B               	movf	_Load,w
 11588  0054  3E03               	addlw	3
 11589  0055  0086               	movwf	6
 11590  0056  3002               	movlw	2	; select bank4/5
 11591  0057  0087               	movwf	7
 11592  0058  3001               	movlw	1
 11593  0059  0781               	addwf	1,f
 11594  005A  3141               	addfsr 1,1
 11595  005B  1803               	skipnc
 11596  005C  0A81               	incf	1,f
 11597                           
 11598                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 11599  005D  087B               	movf	_Load,w
 11600  005E  3E03               	addlw	3
 11601  005F  0086               	movwf	6
 11602  0060  3002               	movlw	2	; select bank4/5
 11603  0061  0087               	movwf	7
 11604  0062  3F40               	moviw [0]fsr1
 11605  0063  0020               	movlb	0	; select bank0
 11606  0064  00AD               	movwf	??_Load_Main
 11607  0065  3F41               	moviw [1]fsr1
 11608  0066  00AE               	movwf	??_Load_Main+1
 11609  0067  3003               	movlw	3
 11610  0068  022E               	subwf	??_Load_Main+1,w
 11611  0069  30E8               	movlw	232
 11612  006A  1903               	skipnz
 11613  006B  022D               	subwf	??_Load_Main,w
 11614  006C  1C03               	skipc
 11615  006D  0008               	return
 11616                           
 11617                           ;OverLoad_B1.c: 45: {
 11618                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 11619  006E  087B               	movf	_Load,w
 11620  006F  3E03               	addlw	3
 11621  0070  0086               	movwf	6
 11622  0071  3002               	movlw	2	; select bank4/5
 11623  0072  0087               	movwf	7
 11624  0073  3000               	movlw	0
 11625  0074  3FC0               	movwi [0]fsr1
 11626  0075  3FC1               	movwi [1]fsr1
 11627                           
 11628                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11629  0076  3000               	movlw	0
 11630  0077  319F  276B         	fcall	_setLoad_Exceptions
 11631                           
 11632                           ;OverLoad_B1.c: 48: }
 11633                           ;OverLoad_B1.c: 49: } else {
 11634  0079  0008               	return
 11635  007A                     l9334:	
 11636                           
 11637                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11638  007A  087B               	movf	_Load,w
 11639  007B  0086               	movwf	6
 11640  007C  3002               	movlw	2	; select bank4/5
 11641  007D  0087               	movwf	7
 11642  007E  1E01               	btfss	1,4
 11643  007F  2A7A               	goto	l9416
 11644                           
 11645                           ;OverLoad_B1.c: 51: Load->Time++;
 11646  0080  0A7B               	incf	_Load,w
 11647  0081  0086               	movwf	6
 11648  0082  3002               	movlw	2	; select bank4/5
 11649  0083  0087               	movwf	7
 11650  0084  3001               	movlw	1
 11651  0085  0781               	addwf	1,f
 11652  0086  3141               	addfsr 1,1
 11653  0087  1803               	skipnc
 11654  0088  0A81               	incf	1,f
 11655                           
 11656                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11657  0089  0A7B               	incf	_Load,w
 11658  008A  0086               	movwf	6
 11659  008B  3002               	movlw	2	; select bank4/5
 11660  008C  0087               	movwf	7
 11661  008D  3F40               	moviw [0]fsr1
 11662  008E  0020               	movlb	0	; select bank0
 11663  008F  00AD               	movwf	??_Load_Main
 11664  0090  3F41               	moviw [1]fsr1
 11665  0091  00AE               	movwf	??_Load_Main+1
 11666  0092  3000               	movlw	0
 11667  0093  022E               	subwf	??_Load_Main+1,w
 11668  0094  3005               	movlw	5
 11669  0095  1903               	skipnz
 11670  0096  022D               	subwf	??_Load_Main,w
 11671  0097  1C03               	skipc
 11672  0098  0008               	return
 11673                           
 11674                           ;OverLoad_B1.c: 53: {
 11675                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11676  0099  0A7B               	incf	_Load,w
 11677  009A  0086               	movwf	6
 11678  009B  3002               	movlw	2	; select bank4/5
 11679  009C  0087               	movwf	7
 11680  009D  3000               	movlw	0
 11681  009E  3FC0               	movwi [0]fsr1
 11682  009F  3FC1               	movwi [1]fsr1
 11683                           
 11684                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11685  00A0  087B               	movf	_Load,w
 11686  00A1  0086               	movwf	6
 11687  00A2  3002               	movlw	2	; select bank4/5
 11688  00A3  0087               	movwf	7
 11689  00A4  1201               	bcf	1,4
 11690                           
 11691                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11692  00A5  087B               	movf	_Load,w
 11693  00A6  3E45               	addlw	69
 11694  00A7  0086               	movwf	6
 11695  00A8  3002               	movlw	2	; select bank4/5
 11696  00A9  0087               	movwf	7
 11697  00AA  087B               	movf	_Load,w
 11698  00AB  3E44               	addlw	68
 11699  00AC  0084               	movwf	4
 11700  00AD  3002               	movlw	2	; select bank4/5
 11701  00AE  0085               	movwf	5
 11702  00AF  0800               	movf	0,w
 11703  00B0  00AD               	movwf	??_Load_Main
 11704  00B1  087B               	movf	_Load,w
 11705  00B2  3E43               	addlw	67
 11706  00B3  0084               	movwf	4
 11707  00B4  3002               	movlw	2	; select bank4/5
 11708  00B5  0085               	movwf	5
 11709  00B6  0800               	movf	0,w
 11710  00B7  072D               	addwf	??_Load_Main,w
 11711  00B8  0701               	addwf	1,w
 11712  00B9  00AE               	movwf	??_Load_Main+1
 11713  00BA  087B               	movf	_Load,w
 11714  00BB  3E3E               	addlw	62
 11715  00BC  0086               	movwf	6
 11716  00BD  3002               	movlw	2	; select bank4/5
 11717  00BE  0087               	movwf	7
 11718  00BF  082E               	movf	??_Load_Main+1,w
 11719  00C0  0081               	movwf	1
 11720                           
 11721                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11722  00C1  01B1               	clrf	Load_Main@i
 11723  00C2  0AB1               	incf	Load_Main@i,f
 11724  00C3  3004               	movlw	4
 11725  00C4  0231               	subwf	Load_Main@i,w
 11726  00C5  1803               	btfsc	3,0
 11727  00C6  28F5               	goto	l9356
 11728  00C7                     l9350:	
 11729                           
 11730                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11731  00C7  3531               	lslf	Load_Main@i,w
 11732  00C8  3E08               	addlw	8
 11733  00C9  077B               	addwf	_Load,w
 11734  00CA  00AD               	movwf	??_Load_Main
 11735  00CB  082D               	movf	??_Load_Main,w
 11736  00CC  0086               	movwf	6
 11737  00CD  3002               	movlw	2	; select bank4/5
 11738  00CE  0087               	movwf	7
 11739  00CF  087B               	movf	_Load,w
 11740  00D0  3E2E               	addlw	46
 11741  00D1  0084               	movwf	4
 11742  00D2  3002               	movlw	2	; select bank4/5
 11743  00D3  0085               	movwf	5
 11744  00D4  3F40               	moviw [0]fsr1
 11745  00D5  0780               	addwf	0,f
 11746  00D6  3101               	addfsr 0,1
 11747  00D7  3F41               	moviw [1]fsr1
 11748  00D8  3D80               	addwfc	0,f
 11749  00D9  313F               	addfsr 0,-1
 11750                           
 11751                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11752  00DA  3531               	lslf	Load_Main@i,w
 11753  00DB  3E1A               	addlw	26
 11754  00DC  077B               	addwf	_Load,w
 11755  00DD  00AD               	movwf	??_Load_Main
 11756  00DE  082D               	movf	??_Load_Main,w
 11757  00DF  0086               	movwf	6
 11758  00E0  3002               	movlw	2	; select bank4/5
 11759  00E1  0087               	movwf	7
 11760  00E2  087B               	movf	_Load,w
 11761  00E3  3E30               	addlw	48
 11762  00E4  0084               	movwf	4
 11763  00E5  3002               	movlw	2	; select bank4/5
 11764  00E6  0085               	movwf	5
 11765  00E7  3F40               	moviw [0]fsr1
 11766  00E8  0780               	addwf	0,f
 11767  00E9  3101               	addfsr 0,1
 11768  00EA  3F41               	moviw [1]fsr1
 11769  00EB  3D80               	addwfc	0,f
 11770  00EC  313F               	addfsr 0,-1
 11771  00ED  3001               	movlw	1
 11772  00EE  00AD               	movwf	??_Load_Main
 11773  00EF  082D               	movf	??_Load_Main,w
 11774  00F0  07B1               	addwf	Load_Main@i,f
 11775  00F1  3004               	movlw	4
 11776  00F2  0231               	subwf	Load_Main@i,w
 11777  00F3  1C03               	skipc
 11778  00F4  28C7               	goto	l9350
 11779  00F5                     l9356:	
 11780                           
 11781                           ;OverLoad_B1.c: 60: }
 11782                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11783  00F5  3003               	movlw	3
 11784  00F6  00A0               	movwf	___lwdiv@divisor
 11785  00F7  3000               	movlw	0
 11786  00F8  00A1               	movwf	___lwdiv@divisor+1
 11787  00F9  087B               	movf	_Load,w
 11788  00FA  3E2E               	addlw	46
 11789  00FB  0086               	movwf	6
 11790  00FC  3002               	movlw	2	; select bank4/5
 11791  00FD  0087               	movwf	7
 11792  00FE  3F40               	moviw [0]fsr1
 11793  00FF  00A2               	movwf	___lwdiv@dividend
 11794  0100  3F41               	moviw [1]fsr1
 11795  0101  00A3               	movwf	___lwdiv@dividend+1
 11796  0102  319D  2510  3180   	fcall	___lwdiv
 11797  0105  087B               	movf	_Load,w
 11798  0106  3E2E               	addlw	46
 11799  0107  0086               	movwf	6
 11800  0108  3002               	movlw	2	; select bank4/5
 11801  0109  0087               	movwf	7
 11802  010A  0020               	movlb	0	; select bank0
 11803  010B  0820               	movf	?___lwdiv,w
 11804  010C  3FC0               	movwi [0]fsr1
 11805  010D  0821               	movf	?___lwdiv+1,w
 11806  010E  3FC1               	movwi [1]fsr1
 11807                           
 11808                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11809  010F  3003               	movlw	3
 11810  0110  00A0               	movwf	___lwdiv@divisor
 11811  0111  3000               	movlw	0
 11812  0112  00A1               	movwf	___lwdiv@divisor+1
 11813  0113  087B               	movf	_Load,w
 11814  0114  3E30               	addlw	48
 11815  0115  0086               	movwf	6
 11816  0116  3002               	movlw	2	; select bank4/5
 11817  0117  0087               	movwf	7
 11818  0118  3F40               	moviw [0]fsr1
 11819  0119  00A2               	movwf	___lwdiv@dividend
 11820  011A  3F41               	moviw [1]fsr1
 11821  011B  00A3               	movwf	___lwdiv@dividend+1
 11822  011C  319D  2510  3180   	fcall	___lwdiv
 11823  011F  087B               	movf	_Load,w
 11824  0120  3E30               	addlw	48
 11825  0121  0086               	movwf	6
 11826  0122  3002               	movlw	2	; select bank4/5
 11827  0123  0087               	movwf	7
 11828  0124  0020               	movlb	0	; select bank0
 11829  0125  0820               	movf	?___lwdiv,w
 11830  0126  3FC0               	movwi [0]fsr1
 11831  0127  0821               	movf	?___lwdiv+1,w
 11832  0128  3FC1               	movwi [1]fsr1
 11833                           
 11834                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11835  0129  087B               	movf	_Load,w
 11836  012A  3E2E               	addlw	46
 11837  012B  0086               	movwf	6
 11838  012C  3002               	movlw	2	; select bank4/5
 11839  012D  0087               	movwf	7
 11840  012E  3F40               	moviw [0]fsr1
 11841  012F  00AD               	movwf	??_Load_Main
 11842  0130  3F41               	moviw [1]fsr1
 11843  0131  00AE               	movwf	??_Load_Main+1
 11844  0132  087B               	movf	_Load,w
 11845  0133  3E30               	addlw	48
 11846  0134  0086               	movwf	6
 11847  0135  3002               	movlw	2	; select bank4/5
 11848  0136  0087               	movwf	7
 11849  0137  3F40               	moviw [0]fsr1
 11850  0138  00AF               	movwf	??_Load_Main+2
 11851  0139  3F41               	moviw [1]fsr1
 11852  013A  00B0               	movwf	??_Load_Main+3
 11853  013B  082E               	movf	??_Load_Main+1,w
 11854  013C  0230               	subwf	??_Load_Main+3,w
 11855  013D  1D03               	skipz
 11856  013E  2941               	goto	u9165
 11857  013F  082D               	movf	??_Load_Main,w
 11858  0140  022F               	subwf	??_Load_Main+2,w
 11859  0141                     u9165:	
 11860  0141  1803               	skipnc
 11861  0142  2A77               	goto	l9414
 11862                           
 11863                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11864  0143  087B               	movf	_Load,w
 11865  0144  3E2E               	addlw	46
 11866  0145  0086               	movwf	6
 11867  0146  3002               	movlw	2	; select bank4/5
 11868  0147  0087               	movwf	7
 11869  0148  087B               	movf	_Load,w
 11870  0149  3E30               	addlw	48
 11871  014A  0084               	movwf	4
 11872  014B  3002               	movlw	2	; select bank4/5
 11873  014C  0085               	movwf	5
 11874  014D  3F00               	moviw [0]fsr0
 11875  014E  00AD               	movwf	??_Load_Main
 11876  014F  3F01               	moviw [1]fsr0
 11877  0150  00AE               	movwf	??_Load_Main+1
 11878  0151  09AD               	comf	??_Load_Main,f
 11879  0152  09AE               	comf	??_Load_Main+1,f
 11880  0153  0AAD               	incf	??_Load_Main,f
 11881  0154  1903               	skipnz
 11882  0155  0AAE               	incf	??_Load_Main+1,f
 11883  0156  3F40               	moviw [0]fsr1
 11884  0157  072D               	addwf	??_Load_Main,w
 11885  0158  00AF               	movwf	??_Load_Main+2
 11886  0159  3F41               	moviw [1]fsr1
 11887  015A  3D2E               	addwfc	??_Load_Main+1,w
 11888  015B  00B0               	movwf	??_Load_Main+3
 11889  015C  087B               	movf	_Load,w
 11890  015D  3E2C               	addlw	44
 11891  015E  0086               	movwf	6
 11892  015F  3002               	movlw	2	; select bank4/5
 11893  0160  0087               	movwf	7
 11894  0161  082F               	movf	??_Load_Main+2,w
 11895  0162  3FC0               	movwi [0]fsr1
 11896  0163  0830               	movf	??_Load_Main+3,w
 11897  0164  3FC1               	movwi [1]fsr1
 11898                           
 11899                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11900  0165  087B               	movf	_Load,w
 11901  0166  3E3A               	addlw	58
 11902  0167  0086               	movwf	6
 11903  0168  3002               	movlw	2	; select bank4/5
 11904  0169  0087               	movwf	7
 11905  016A  3002               	movlw	2
 11906  016B  0201               	subwf	1,w
 11907  016C  1803               	skipnc
 11908  016D  29BE               	goto	l9378
 11909                           
 11910                           ;OverLoad_B1.c: 67: Load->Count++;
 11911  016E  3001               	movlw	1
 11912  016F  00AD               	movwf	??_Load_Main
 11913  0170  087B               	movf	_Load,w
 11914  0171  3E3A               	addlw	58
 11915  0172  0086               	movwf	6
 11916  0173  3002               	movlw	2	; select bank4/5
 11917  0174  0087               	movwf	7
 11918  0175  082D               	movf	??_Load_Main,w
 11919  0176  0781               	addwf	1,f
 11920                           
 11921                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11922  0177  087B               	movf	_Load,w
 11923  0178  3E3A               	addlw	58
 11924  0179  0086               	movwf	6
 11925  017A  3002               	movlw	2	; select bank4/5
 11926  017B  0087               	movwf	7
 11927  017C  0801               	movf	1,w
 11928  017D  3A01               	xorlw	1
 11929  017E  1D03               	skipz
 11930  017F  298A               	goto	l9370
 11931                           
 11932                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11933  0180  087B               	movf	_Load,w
 11934  0181  3E36               	addlw	54
 11935  0182  0086               	movwf	6
 11936  0183  3002               	movlw	2	; select bank4/5
 11937  0184  0087               	movwf	7
 11938  0185  30F4               	movlw	244
 11939  0186  3FC0               	movwi [0]fsr1
 11940  0187  3001               	movlw	1
 11941  0188  3FC1               	movwi [1]fsr1
 11942                           
 11943                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11944  0189  29BE               	goto	l9378
 11945  018A                     l9370:	
 11946  018A  087B               	movf	_Load,w
 11947  018B  3E3A               	addlw	58
 11948  018C  0086               	movwf	6
 11949  018D  3002               	movlw	2	; select bank4/5
 11950  018E  0087               	movwf	7
 11951  018F  0801               	movf	1,w
 11952  0190  3A02               	xorlw	2
 11953  0191  1D03               	skipz
 11954  0192  29BE               	goto	l9378
 11955                           
 11956                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11957  0193  087B               	movf	_Load,w
 11958  0194  3E3E               	addlw	62
 11959  0195  0086               	movwf	6
 11960  0196  3002               	movlw	2	; select bank4/5
 11961  0197  0087               	movwf	7
 11962  0198  0801               	movf	1,w
 11963  0199  3A01               	xorlw	1
 11964  019A  1D03               	skipz
 11965  019B  29A6               	goto	l9376
 11966                           
 11967                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x42;
 11968  019C  087B               	movf	_Load,w
 11969  019D  3E36               	addlw	54
 11970  019E  0086               	movwf	6
 11971  019F  3002               	movlw	2	; select bank4/5
 11972  01A0  0087               	movwf	7
 11973  01A1  3042               	movlw	66
 11974  01A2  3FC0               	movwi [0]fsr1
 11975  01A3  3000               	movlw	0
 11976  01A4  3FC1               	movwi [1]fsr1
 11977                           
 11978                           ;OverLoad_B1.c: 73: } else {
 11979  01A5  29BE               	goto	l9378
 11980  01A6                     l9376:	
 11981                           
 11982                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x42 + Load->TotalLoad) - 0x08;
 11983  01A6  087B               	movf	_Load,w
 11984  01A7  3E06               	addlw	6
 11985  01A8  0086               	movwf	6
 11986  01A9  3002               	movlw	2	; select bank4/5
 11987  01AA  0087               	movwf	7
 11988  01AB  3F40               	moviw [0]fsr1
 11989  01AC  00AD               	movwf	??_Load_Main
 11990  01AD  3F41               	moviw [1]fsr1
 11991  01AE  00AE               	movwf	??_Load_Main+1
 11992  01AF  082D               	movf	??_Load_Main,w
 11993  01B0  3E3A               	addlw	58
 11994  01B1  00AF               	movwf	??_Load_Main+2
 11995  01B2  3000               	movlw	0
 11996  01B3  3D2E               	addwfc	??_Load_Main+1,w
 11997  01B4  00B0               	movwf	??_Load_Main+3
 11998  01B5  087B               	movf	_Load,w
 11999  01B6  3E36               	addlw	54
 12000  01B7  0086               	movwf	6
 12001  01B8  3002               	movlw	2	; select bank4/5
 12002  01B9  0087               	movwf	7
 12003  01BA  082F               	movf	??_Load_Main+2,w
 12004  01BB  3FC0               	movwi [0]fsr1
 12005  01BC  0830               	movf	??_Load_Main+3,w
 12006  01BD  3FC1               	movwi [1]fsr1
 12007  01BE                     l9378:	
 12008                           
 12009                           ;OverLoad_B1.c: 75: }
 12010                           ;OverLoad_B1.c: 76: }
 12011                           ;OverLoad_B1.c: 77: }
 12012                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 12013  01BE  087B               	movf	_Load,w
 12014  01BF  3E36               	addlw	54
 12015  01C0  0086               	movwf	6
 12016  01C1  3002               	movlw	2	; select bank4/5
 12017  01C2  0087               	movwf	7
 12018  01C3  3F40               	moviw [0]fsr1
 12019  01C4  00AD               	movwf	??_Load_Main
 12020  01C5  3F41               	moviw [1]fsr1
 12021  01C6  00AE               	movwf	??_Load_Main+1
 12022  01C7  087B               	movf	_Load,w
 12023  01C8  3E2C               	addlw	44
 12024  01C9  0086               	movwf	6
 12025  01CA  3002               	movlw	2	; select bank4/5
 12026  01CB  0087               	movwf	7
 12027  01CC  3F40               	moviw [0]fsr1
 12028  01CD  00AF               	movwf	??_Load_Main+2
 12029  01CE  3F41               	moviw [1]fsr1
 12030  01CF  00B0               	movwf	??_Load_Main+3
 12031  01D0  082E               	movf	??_Load_Main+1,w
 12032  01D1  0230               	subwf	??_Load_Main+3,w
 12033  01D2  1D03               	skipz
 12034  01D3  29D6               	goto	u9215
 12035  01D4  082D               	movf	??_Load_Main,w
 12036  01D5  022F               	subwf	??_Load_Main+2,w
 12037  01D6                     u9215:	
 12038  01D6  1C03               	skipc
 12039  01D7  29F5               	goto	l9388
 12040                           
 12041                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 12042  01D8  3001               	movlw	1
 12043  01D9  00AD               	movwf	??_Load_Main
 12044  01DA  087B               	movf	_Load,w
 12045  01DB  3E3C               	addlw	60
 12046  01DC  0086               	movwf	6
 12047  01DD  3002               	movlw	2	; select bank4/5
 12048  01DE  0087               	movwf	7
 12049  01DF  082D               	movf	??_Load_Main,w
 12050  01E0  0781               	addwf	1,f
 12051                           
 12052                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 12053  01E1  087B               	movf	_Load,w
 12054  01E2  3E3C               	addlw	60
 12055  01E3  0086               	movwf	6
 12056  01E4  3002               	movlw	2	; select bank4/5
 12057  01E5  0087               	movwf	7
 12058  01E6  3003               	movlw	3
 12059  01E7  0201               	subwf	1,w
 12060  01E8  1C03               	skipc
 12061  01E9  2A77               	goto	l9414
 12062                           
 12063                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 12064  01EA  087B               	movf	_Load,w
 12065  01EB  3E3C               	addlw	60
 12066  01EC  0086               	movwf	6
 12067  01ED  3002               	movlw	2	; select bank4/5
 12068  01EE  0087               	movwf	7
 12069  01EF  0181               	clrf	1
 12070                           
 12071                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 12072  01F0  3001               	movlw	1
 12073  01F1  319F  276B  3180   	fcall	_setLoad_Exceptions
 12074                           
 12075                           ;OverLoad_B1.c: 92: }
 12076                           ;OverLoad_B1.c: 93: } else {
 12077  01F4  2A77               	goto	l9414
 12078  01F5                     l9388:	
 12079                           
 12080                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 12081  01F5  087B               	movf	_Load,w
 12082  01F6  3E3C               	addlw	60
 12083  01F7  0086               	movwf	6
 12084  01F8  3002               	movlw	2	; select bank4/5
 12085  01F9  0087               	movwf	7
 12086  01FA  0181               	clrf	1
 12087                           
 12088                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 12089  01FB  087B               	movf	_Load,w
 12090  01FC  3E42               	addlw	66
 12091  01FD  0086               	movwf	6
 12092  01FE  3002               	movlw	2	; select bank4/5
 12093  01FF  0087               	movwf	7
 12094  0200  300A               	movlw	10
 12095  0201  0201               	subwf	1,w
 12096  0202  1803               	skipnc
 12097  0203  2A0E               	goto	l9394
 12098                           
 12099                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 12100  0204  3001               	movlw	1
 12101  0205  0020               	movlb	0	; select bank0
 12102  0206  00AD               	movwf	??_Load_Main
 12103  0207  087B               	movf	_Load,w
 12104  0208  3E42               	addlw	66
 12105  0209  0086               	movwf	6
 12106  020A  3002               	movlw	2	; select bank4/5
 12107  020B  0087               	movwf	7
 12108  020C  082D               	movf	??_Load_Main,w
 12109  020D  0781               	addwf	1,f
 12110  020E                     l9394:	
 12111                           
 12112                           ;OverLoad_B1.c: 97: }
 12113                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 12114  020E  087B               	movf	_Load,w
 12115  020F  3E42               	addlw	66
 12116  0210  0086               	movwf	6
 12117  0211  3002               	movlw	2	; select bank4/5
 12118  0212  0087               	movwf	7
 12119  0213  300A               	movlw	10
 12120  0214  0201               	subwf	1,w
 12121  0215  1C03               	skipc
 12122  0216  2A77               	goto	l9414
 12123                           
 12124                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 12125  0217  087B               	movf	_Load,w
 12126  0218  0086               	movwf	6
 12127  0219  3002               	movlw	2	; select bank4/5
 12128  021A  0087               	movwf	7
 12129  021B  1581               	bsf	1,3
 12130                           
 12131                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 12132  021C  0020               	movlb	0	; select bank0
 12133  021D  01A2               	clrf	setDimmerLights_Clear@command
 12134  021E  0AA2               	incf	setDimmerLights_Clear@command,f
 12135  021F  3001               	movlw	1
 12136  0220  31A7  278E  3180   	fcall	_setDimmerLights_Clear
 12137                           
 12138                           ;OverLoad_B1.c: 107: ;;
 12139                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 12140  0223  087B               	movf	_Load,w
 12141  0224  3E46               	addlw	70
 12142  0225  0086               	movwf	6
 12143  0226  3002               	movlw	2	; select bank4/5
 12144  0227  0087               	movwf	7
 12145  0228  1C01               	btfss	1,0
 12146  0229  2A3E               	goto	l9406
 12147                           
 12148                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 12149  022A  087B               	movf	_Load,w
 12150  022B  3E46               	addlw	70
 12151  022C  0086               	movwf	6
 12152  022D  3002               	movlw	2	; select bank4/5
 12153  022E  0087               	movwf	7
 12154  022F  1001               	bcf	1,0
 12155                           
 12156                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 12157  0230  087B               	movf	_Load,w
 12158  0231  3E2C               	addlw	44
 12159  0232  0086               	movwf	6
 12160  0233  3002               	movlw	2	; select bank4/5
 12161  0234  0087               	movwf	7
 12162  0235  087B               	movf	_Load,w
 12163  0236  3E06               	addlw	6
 12164  0237  0084               	movwf	4
 12165  0238  3002               	movlw	2	; select bank4/5
 12166  0239  0085               	movwf	5
 12167  023A  3F40               	moviw [0]fsr1
 12168  023B  3F80               	movwi [0]fsr0
 12169  023C  3F41               	moviw [1]fsr1
 12170  023D  3F81               	movwi [1]fsr0
 12171  023E                     l9406:	
 12172                           
 12173                           ;OverLoad_B1.c: 136: }
 12174                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 12175  023E  087B               	movf	_Load,w
 12176  023F  3E46               	addlw	70
 12177  0240  0086               	movwf	6
 12178  0241  3002               	movlw	2	; select bank4/5
 12179  0242  0087               	movwf	7
 12180  0243  1C81               	btfss	1,1
 12181  0244  2A77               	goto	l9414
 12182                           
 12183                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 12184  0245  087B               	movf	_Load,w
 12185  0246  3E46               	addlw	70
 12186  0247  0086               	movwf	6
 12187  0248  3002               	movlw	2	; select bank4/5
 12188  0249  0087               	movwf	7
 12189  024A  1081               	bcf	1,1
 12190                           
 12191                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 12192  024B  087B               	movf	_Load,w
 12193  024C  3E2C               	addlw	44
 12194  024D  0086               	movwf	6
 12195  024E  3002               	movlw	2	; select bank4/5
 12196  024F  0087               	movwf	7
 12197  0250  087B               	movf	_Load,w
 12198  0251  3E06               	addlw	6
 12199  0252  0084               	movwf	4
 12200  0253  3002               	movlw	2	; select bank4/5
 12201  0254  0085               	movwf	5
 12202  0255  3F40               	moviw [0]fsr1
 12203  0256  3F80               	movwi [0]fsr0
 12204  0257  3F41               	moviw [1]fsr1
 12205  0258  3F81               	movwi [1]fsr0
 12206                           
 12207                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x42 * Load->LightsCount;
 12208  0259  087B               	movf	_Load,w
 12209  025A  3E3E               	addlw	62
 12210  025B  0086               	movwf	6
 12211  025C  3002               	movlw	2	; select bank4/5
 12212  025D  0087               	movwf	7
 12213  025E  0801               	movf	1,w
 12214  025F  0020               	movlb	0	; select bank0
 12215  0260  00AD               	movwf	??_Load_Main
 12216  0261  01AE               	clrf	??_Load_Main+1
 12217  0262  082D               	movf	??_Load_Main,w
 12218  0263  00A0               	movwf	___wmul@multiplier
 12219  0264  082E               	movf	??_Load_Main+1,w
 12220  0265  00A1               	movwf	___wmul@multiplier+1
 12221  0266  3042               	movlw	66
 12222  0267  00A2               	movwf	___wmul@multiplicand
 12223  0268  3000               	movlw	0
 12224  0269  00A3               	movwf	___wmul@multiplicand+1
 12225  026A  3199  21B5  3180   	fcall	___wmul
 12226  026D  087B               	movf	_Load,w
 12227  026E  3E36               	addlw	54
 12228  026F  0086               	movwf	6
 12229  0270  3002               	movlw	2	; select bank4/5
 12230  0271  0087               	movwf	7
 12231  0272  0020               	movlb	0	; select bank0
 12232  0273  0820               	movf	?___wmul,w
 12233  0274  3FC0               	movwi [0]fsr1
 12234  0275  0821               	movf	?___wmul+1,w
 12235  0276  3FC1               	movwi [1]fsr1
 12236  0277                     l9414:	
 12237                           
 12238                           ;OverLoad_B1.c: 142: }
 12239                           ;OverLoad_B1.c: 143: }
 12240                           ;OverLoad_B1.c: 144: }
 12241                           ;OverLoad_B1.c: 145: }
 12242                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 12243  0277  319A  2256         	fcall	_setLoad_AH_AL_Restore
 12244                           
 12245                           ;OverLoad_B1.c: 158: }
 12246                           ;OverLoad_B1.c: 159: } else {
 12247  0279  0008               	return
 12248  027A                     l9416:	
 12249                           
 12250                           ;OverLoad_B1.c: 160: if (Load->GO) {
 12251  027A  087B               	movf	_Load,w
 12252  027B  0086               	movwf	6
 12253  027C  3002               	movlw	2	; select bank4/5
 12254  027D  0087               	movwf	7
 12255  027E  1C81               	btfss	1,1
 12256  027F  2AA2               	goto	l9428
 12257                           
 12258                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 12259  0280  087B               	movf	_Load,w
 12260  0281  0086               	movwf	6
 12261  0282  3002               	movlw	2	; select bank4/5
 12262  0283  0087               	movwf	7
 12263  0284  1901               	btfsc	1,2
 12264  0285  2A90               	goto	l9422
 12265                           
 12266                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 12267  0286  087B               	movf	_Load,w
 12268  0287  0086               	movwf	6
 12269  0288  3002               	movlw	2	; select bank4/5
 12270  0289  0087               	movwf	7
 12271  028A  1501               	bsf	1,2
 12272                           
 12273                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 12274  028B  087B               	movf	_Load,w
 12275  028C  0086               	movwf	6
 12276  028D  3002               	movlw	2	; select bank4/5
 12277  028E  0087               	movwf	7
 12278  028F  1181               	bcf	1,3
 12279  0290                     l9422:	
 12280                           
 12281                           ;OverLoad_B1.c: 164: }
 12282                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && getPF_Safe()) {
 12283  0290  31A5  25C8  3180   	fcall	_getTemp_Safe
 12284  0293  3A00               	xorlw	0
 12285  0294  1903               	skipnz
 12286  0295  0008               	return
 12287  0296  31A5  25E6  3180   	fcall	_getPF_Safe
 12288  0299  3A00               	xorlw	0
 12289  029A  1903               	skipnz
 12290  029B  0008               	return
 12291                           
 12292                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 12293  029C  087B               	movf	_Load,w
 12294  029D  0086               	movwf	6
 12295  029E  3002               	movlw	2	; select bank4/5
 12296  029F  0087               	movwf	7
 12297  02A0  1601               	bsf	1,4
 12298                           
 12299                           ;OverLoad_B1.c: 167: }
 12300                           ;OverLoad_B1.c: 168: } else {
 12301  02A1  0008               	return
 12302  02A2                     l9428:	
 12303                           
 12304                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 12305  02A2  087B               	movf	_Load,w
 12306  02A3  0086               	movwf	6
 12307  02A4  3002               	movlw	2	; select bank4/5
 12308  02A5  0087               	movwf	7
 12309  02A6  1D01               	btfss	1,2
 12310  02A7  0008               	return
 12311                           
 12312                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 12313  02A8  087B               	movf	_Load,w
 12314  02A9  0086               	movwf	6
 12315  02AA  3002               	movlw	2	; select bank4/5
 12316  02AB  0087               	movwf	7
 12317  02AC  1101               	bcf	1,2
 12318                           
 12319                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 12320  02AD  087B               	movf	_Load,w
 12321  02AE  0086               	movwf	6
 12322  02AF  3002               	movlw	2	; select bank4/5
 12323  02B0  0087               	movwf	7
 12324  02B1  1581               	bsf	1,3
 12325                           
 12326                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 12327  02B2  087B               	movf	_Load,w
 12328  02B3  3E3C               	addlw	60
 12329  02B4  0086               	movwf	6
 12330  02B5  3002               	movlw	2	; select bank4/5
 12331  02B6  0087               	movwf	7
 12332  02B7  0181               	clrf	1
 12333                           
 12334                           ;OverLoad_B1.c: 173: Load->Count = 0;
 12335  02B8  087B               	movf	_Load,w
 12336  02B9  3E3A               	addlw	58
 12337  02BA  0086               	movwf	6
 12338  02BB  3002               	movlw	2	; select bank4/5
 12339  02BC  0087               	movwf	7
 12340  02BD  0181               	clrf	1
 12341                           
 12342                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 12343  02BE  087B               	movf	_Load,w
 12344  02BF  3E06               	addlw	6
 12345  02C0  0086               	movwf	6
 12346  02C1  3002               	movlw	2	; select bank4/5
 12347  02C2  0087               	movwf	7
 12348  02C3  3000               	movlw	0
 12349  02C4  3FC0               	movwi [0]fsr1
 12350  02C5  3FC1               	movwi [1]fsr1
 12351                           
 12352                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 12353  02C6  087B               	movf	_Load,w
 12354  02C7  3E3F               	addlw	63
 12355  02C8  0086               	movwf	6
 12356  02C9  3002               	movlw	2	; select bank4/5
 12357  02CA  0087               	movwf	7
 12358  02CB  0181               	clrf	1
 12359                           
 12360                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 12361  02CC  087B               	movf	_Load,w
 12362  02CD  3E46               	addlw	70
 12363  02CE  0086               	movwf	6
 12364  02CF  3002               	movlw	2	; select bank4/5
 12365  02D0  0087               	movwf	7
 12366  02D1  1001               	bcf	1,0
 12367                           
 12368                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 12369  02D2  087B               	movf	_Load,w
 12370  02D3  3E46               	addlw	70
 12371  02D4  0086               	movwf	6
 12372  02D5  3002               	movlw	2	; select bank4/5
 12373  02D6  0087               	movwf	7
 12374  02D7  1081               	bcf	1,1
 12375                           
 12376                           ;OverLoad_B1.c: 178: Load->AD = 0;
 12377  02D8  087B               	movf	_Load,w
 12378  02D9  3E2C               	addlw	44
 12379  02DA  0086               	movwf	6
 12380  02DB  3002               	movlw	2	; select bank4/5
 12381  02DC  0087               	movwf	7
 12382  02DD  3000               	movlw	0
 12383  02DE  3FC0               	movwi [0]fsr1
 12384  02DF  3FC1               	movwi [1]fsr1
 12385                           
 12386                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 12387  02E0  319A  2256  3180   	fcall	_setLoad_AH_AL_Restore
 12388                           
 12389                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 12390  02E3  0020               	movlb	0	; select bank0
 12391  02E4  01A2               	clrf	setDimmerLights_Clear@command
 12392  02E5  0AA2               	incf	setDimmerLights_Clear@command,f
 12393  02E6  3001               	movlw	1
 12394  02E7  31A7  278E         	fcall	_setDimmerLights_Clear
 12395                           
 12396                           ;OverLoad_B1.c: 187: ;;
 12397  02E9  0008               	return
 12398  02EA                     __end_of_Load_Main:	
 12399                           
 12400                           	psect	text64
 12401  1F6B                     __ptext64:	
 12402 ;; *************** function _setLoad_Exceptions *****************
 12403 ;; Defined at:
 12404 ;;		line 232 in file "../src/OverLoad_B1.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  command         1    wreg     unsigned char 
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  command         1   12[BANK0 ] unsigned char 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;		None               void
 12411 ;; Registers used:
 12412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;Total ram usage:        2 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    8
 12425 ;; This function calls:
 12426 ;;		_DimmerLights_Exceptions
 12427 ;;		_setLED
 12428 ;;		_setRF_Enable
 12429 ;;		_setSw_Enable
 12430 ;; This function is called by:
 12431 ;;		_Load_Main
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function _setLoad_Exceptions
 12437  1F6B                     _setLoad_Exceptions:	
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12441                           ;setLoad_Exceptions@command stored from wreg
 12442  1F6B  0020               	movlb	0	; select bank0
 12443  1F6C  00AC               	movwf	setLoad_Exceptions@command
 12444                           
 12445                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 12446  1F6D  087B               	movf	_Load,w
 12447  1F6E  0086               	movwf	6
 12448  1F6F  3002               	movlw	2	; select bank4/5
 12449  1F70  0087               	movwf	7
 12450  1F71  082C               	movf	setLoad_Exceptions@command,w
 12451  1F72  1281               	bcf	1,5
 12452  1F73  1D03               	skipz
 12453  1F74  1681               	bsf	1,5
 12454                           
 12455                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 12456  1F75  092C               	comf	setLoad_Exceptions@command,w
 12457  1F76  3901               	andlw	1
 12458  1F77  00AB               	movwf	??_setLoad_Exceptions
 12459  1F78  087B               	movf	_Load,w
 12460  1F79  0086               	movwf	6
 12461  1F7A  3002               	movlw	2	; select bank4/5
 12462  1F7B  0087               	movwf	7
 12463  1F7C  0DAB               	rlf	??_setLoad_Exceptions,f
 12464  1F7D  0DAB               	rlf	??_setLoad_Exceptions,f
 12465  1F7E  0DAB               	rlf	??_setLoad_Exceptions,f
 12466  1F7F  0801               	movf	1,w
 12467  1F80  062B               	xorwf	??_setLoad_Exceptions,w
 12468  1F81  39F7               	andlw	-9
 12469  1F82  062B               	xorwf	??_setLoad_Exceptions,w
 12470  1F83  0081               	movwf	1
 12471                           
 12472                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 12473  1F84  082C               	movf	setLoad_Exceptions@command,w
 12474  1F85  00AB               	movwf	??_setLoad_Exceptions
 12475  1F86  087B               	movf	_Load,w
 12476  1F87  3E05               	addlw	5
 12477  1F88  0086               	movwf	6
 12478  1F89  3002               	movlw	2	; select bank4/5
 12479  1F8A  0087               	movwf	7
 12480  1F8B  082B               	movf	??_setLoad_Exceptions,w
 12481  1F8C  0081               	movwf	1
 12482                           
 12483                           ;OverLoad_B1.c: 237: if (command) {
 12484  1F8D  082C               	movf	setLoad_Exceptions@command,w
 12485  1F8E  1903               	btfsc	3,2
 12486  1F8F  2F9B               	goto	l1563
 12487                           
 12488                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 12489  1F90  3002               	movlw	2
 12490  1F91  3191  2142  319F   	fcall	_DimmerLights_Exceptions
 12491                           
 12492                           ;OverLoad_B1.c: 240: setLED(2, 1);
 12493  1F94  0020               	movlb	0	; select bank0
 12494  1F95  01A2               	clrf	setLED@command
 12495  1F96  0AA2               	incf	setLED@command,f
 12496  1F97  3002               	movlw	2
 12497  1F98  3192  2254  319F   	fcall	_setLED
 12498  1F9B                     l1563:	
 12499                           
 12500                           ;OverLoad_B1.c: 242: }
 12501                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 12502  1F9B  0020               	movlb	0	; select bank0
 12503  1F9C  082C               	movf	setLoad_Exceptions@command,w
 12504  1F9D  3E0A               	addlw	10
 12505  1F9E  00AB               	movwf	??_setLoad_Exceptions
 12506  1F9F  082B               	movf	??_setLoad_Exceptions,w
 12507  1FA0  00A2               	movwf	setLED@command
 12508  1FA1  3063               	movlw	99
 12509  1FA2  3192  2254  319F   	fcall	_setLED
 12510                           
 12511                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 12512  1FA5  0020               	movlb	0	; select bank0
 12513  1FA6  092C               	comf	setLoad_Exceptions@command,w
 12514  1FA7  3901               	andlw	1
 12515  1FA8  31A7  2731  319F   	fcall	_setSw_Enable
 12516                           
 12517                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 12518  1FAB  0020               	movlb	0	; select bank0
 12519  1FAC  092C               	comf	setLoad_Exceptions@command,w
 12520  1FAD  3901               	andlw	1
 12521  1FAE  00AB               	movwf	??_setLoad_Exceptions
 12522  1FAF  082B               	movf	??_setLoad_Exceptions,w
 12523  1FB0  00A2               	movwf	setRF_Enable@command
 12524  1FB1  3001               	movlw	1
 12525  1FB2  319B  2362         	fcall	_setRF_Enable
 12526  1FB4  0008               	return
 12527  1FB5                     __end_of_setLoad_Exceptions:	
 12528                           
 12529                           	psect	text65
 12530  2731                     __ptext65:	
 12531 ;; *************** function _setSw_Enable *****************
 12532 ;; Defined at:
 12533 ;;		line 85 in file "../src/Switch_B1.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;  command         1    wreg     unsigned char 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  command         1    2[BANK0 ] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;		None               void
 12540 ;; Registers used:
 12541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;Total ram usage:        1 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    5
 12554 ;; This function calls:
 12555 ;;		_SwPointSelect
 12556 ;; This function is called by:
 12557 ;;		_setLoad_Exceptions
 12558 ;;		_setOverTemp_Exceptions
 12559 ;;		_setPowerFault_Exceptions
 12560 ;;		_my_Main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           
 12565                           ;psect for function _setSw_Enable
 12566  2731                     _setSw_Enable:	
 12567                           
 12568                           ;incstack = 0
 12569                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12570                           ;setSw_Enable@command stored from wreg
 12571  2731  0020               	movlb	0	; select bank0
 12572  2732  00A2               	movwf	setSw_Enable@command
 12573                           
 12574                           ;Switch_B1.c: 88: SwPointSelect(1);
 12575  2733  3001               	movlw	1
 12576  2734  31A6  2622         	fcall	_SwPointSelect
 12577                           
 12578                           ;Switch_B1.c: 89: Sw->Enable = command;
 12579  2736  0879               	movf	_Sw,w
 12580  2737  0086               	movwf	6
 12581  2738  3001               	movlw	1	; select bank2/3
 12582  2739  0087               	movwf	7
 12583  273A  0020               	movlb	0	; select bank0
 12584  273B  0822               	movf	setSw_Enable@command,w
 12585  273C  1001               	bcf	1,0
 12586  273D  1D03               	skipz
 12587  273E  1401               	bsf	1,0
 12588  273F  0008               	return
 12589  2740                     __end_of_setSw_Enable:	
 12590                           
 12591                           	psect	text66
 12592  1B62                     __ptext66:	
 12593 ;; *************** function _setRF_Enable *****************
 12594 ;; Defined at:
 12595 ;;		line 174 in file "../src/RF_Control_B1.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;  rf              1    wreg     unsigned char 
 12598 ;;  command         1    2[BANK0 ] unsigned char 
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;  rf              1    3[BANK0 ] unsigned char 
 12601 ;; Return value:  Size  Location     Type
 12602 ;;		None               void
 12603 ;; Registers used:
 12604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12610 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;Total ram usage:        2 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; Hardware stack levels required when called:    5
 12617 ;; This function calls:
 12618 ;;		_RfPointSelect
 12619 ;;		_setINT_GO
 12620 ;; This function is called by:
 12621 ;;		_setLoad_Exceptions
 12622 ;;		_setOverTemp_Exceptions
 12623 ;;		_setPowerFault_Exceptions
 12624 ;;		_my_Main
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           
 12629                           ;psect for function _setRF_Enable
 12630  1B62                     _setRF_Enable:	
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12634                           ;setRF_Enable@rf stored from wreg
 12635  1B62  0020               	movlb	0	; select bank0
 12636  1B63  00A3               	movwf	setRF_Enable@rf
 12637                           
 12638                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
 12639  1B64  0823               	movf	setRF_Enable@rf,w
 12640  1B65  31A6  2695  319B   	fcall	_RfPointSelect
 12641                           
 12642                           ;RF_Control_B1.c: 176: RF->Enable = command;
 12643  1B68  0021               	movlb	1	; select bank1
 12644  1B69  083E               	movf	_RF^(0+128),w
 12645  1B6A  0086               	movwf	6
 12646  1B6B  0187               	clrf	7
 12647  1B6C  0020               	movlb	0	; select bank0
 12648  1B6D  0822               	movf	setRF_Enable@command,w
 12649  1B6E  1001               	bcf	1,0
 12650  1B6F  1D03               	skipz
 12651  1B70  1401               	bsf	1,0
 12652                           
 12653                           ;RF_Control_B1.c: 177: RF->Learn = 0;
 12654  1B71  0021               	movlb	1	; select bank1
 12655  1B72  083E               	movf	_RF^(0+128),w
 12656  1B73  0086               	movwf	6
 12657  1B74  0187               	clrf	7
 12658  1B75  1301               	bcf	1,6
 12659                           
 12660                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
 12661  1B76  083E               	movf	_RF^(0+128),w
 12662  1B77  0086               	movwf	6
 12663  1B78  0187               	clrf	7
 12664  1B79  1101               	bcf	1,2
 12665                           
 12666                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
 12667  1B7A  083E               	movf	_RF^(0+128),w
 12668  1B7B  0086               	movwf	6
 12669  1B7C  0187               	clrf	7
 12670  1B7D  1181               	bcf	1,3
 12671                           
 12672                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
 12673  1B7E  083E               	movf	_RF^(0+128),w
 12674  1B7F  0086               	movwf	6
 12675  1B80  0187               	clrf	7
 12676  1B81  1081               	bcf	1,1
 12677                           
 12678                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
 12679  1B82  0A3E               	incf	_RF^(0+128),w
 12680  1B83  0086               	movwf	6
 12681  1B84  0187               	clrf	7
 12682  1B85  0181               	clrf	1
 12683                           
 12684                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
 12685  1B86  083E               	movf	_RF^(0+128),w
 12686  1B87  0086               	movwf	6
 12687  1B88  0187               	clrf	7
 12688  1B89  1281               	bcf	1,5
 12689                           
 12690                           ;RF_Control_B1.c: 183: setINT_GO(0);
 12691  1B8A  3000               	movlw	0
 12692  1B8B  31A5  25EF         	fcall	_setINT_GO
 12693  1B8D  0008               	return
 12694  1B8E                     __end_of_setRF_Enable:	
 12695                           
 12696                           	psect	text67
 12697  25EF                     __ptext67:	
 12698 ;; *************** function _setINT_GO *****************
 12699 ;; Defined at:
 12700 ;;		line 319 in file "../src/MCU_B1.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  command         1    wreg     unsigned char 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  command         1    0[BANK0 ] unsigned char 
 12705 ;; Return value:  Size  Location     Type
 12706 ;;		None               void
 12707 ;; Registers used:
 12708 ;;		wreg
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;Total ram usage:        1 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; Hardware stack levels required when called:    4
 12721 ;; This function calls:
 12722 ;;		Nothing
 12723 ;; This function is called by:
 12724 ;;		_setRF_Main
 12725 ;;		_setRF_Enable
 12726 ;;		_RF_RxDisable
 12727 ;; This function uses a non-reentrant model
 12728 ;;
 12729                           
 12730                           
 12731                           ;psect for function _setINT_GO
 12732  25EF                     _setINT_GO:	
 12733                           
 12734                           ;incstack = 0
 12735                           ; Regs used in _setINT_GO: [wreg]
 12736                           ;setINT_GO@command stored from wreg
 12737  25EF  0020               	movlb	0	; select bank0
 12738  25F0  00A0               	movwf	setINT_GO@command
 12739                           
 12740                           ;MCU_B1.c: 320: INTF = 0;
 12741  25F1  108B               	bcf	11,1	;volatile
 12742                           
 12743                           ;MCU_B1.c: 321: INTE = command;
 12744  25F2  1C20               	btfss	setINT_GO@command,0
 12745  25F3  2DF6               	goto	u7690
 12746  25F4  160B               	bsf	11,4	;volatile
 12747  25F5  0008               	return
 12748  25F6                     u7690:	
 12749  25F6  120B               	bcf	11,4	;volatile
 12750  25F7  0008               	return
 12751  25F8                     __end_of_setINT_GO:	
 12752                           
 12753                           	psect	text68
 12754  1142                     __ptext68:	
 12755 ;; *************** function _DimmerLights_Exceptions *****************
 12756 ;; Defined at:
 12757 ;;		line 246 in file "../src/Dimmer_B1.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;  status          1    wreg     unsigned char 
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;  status          1   10[BANK0 ] unsigned char 
 12762 ;; Return value:  Size  Location     Type
 12763 ;;		None               void
 12764 ;; Registers used:
 12765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;Total ram usage:        1 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:    7
 12778 ;; This function calls:
 12779 ;;		_getDimmerLights_StatusFlag
 12780 ;;		_setBuz
 12781 ;;		_setDimmerLights_ERROR
 12782 ;;		_setDimmerLights_TriggerERROR
 12783 ;; This function is called by:
 12784 ;;		_setLoad_Exceptions
 12785 ;;		_setOverTemp_Exceptions
 12786 ;;		_setPowerFault_Exceptions
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _DimmerLights_Exceptions
 12792  1142                     _DimmerLights_Exceptions:	
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12796                           ;DimmerLights_Exceptions@status stored from wreg
 12797  1142  0020               	movlb	0	; select bank0
 12798  1143  00AA               	movwf	DimmerLights_Exceptions@status
 12799                           
 12800                           ;Dimmer_B1.c: 248: if(status == 1)
 12801  1144  082A               	movf	DimmerLights_Exceptions@status,w
 12802  1145  3A01               	xorlw	1
 12803  1146  1D03               	skipz
 12804  1147  2958               	goto	l8356
 12805                           
 12806                           ;Dimmer_B1.c: 249: {
 12807                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 12808  1148  31A6  26AD  3191   	fcall	_getDimmerLights_StatusFlag
 12809  114B  3A00               	xorlw	0
 12810  114C  1903               	skipnz
 12811  114D  2970               	goto	l8362
 12812                           
 12813                           ;Dimmer_B1.c: 251: {
 12814                           ;Dimmer_B1.c: 252: setBuz(10,300);
 12815  114E  302C               	movlw	44
 12816  114F  0020               	movlb	0	; select bank0
 12817  1150  00A6               	movwf	setBuz@time
 12818  1151  3001               	movlw	1
 12819  1152  00A7               	movwf	setBuz@time+1
 12820  1153  300A               	movlw	10
 12821  1154  3188  2019  3191   	fcall	_setBuz
 12822  1157  2970               	goto	l8362
 12823  1158                     l8356:	
 12824                           ;Dimmer_B1.c: 264: }
 12825                           
 12826                           ;Dimmer_B1.c: 253: }
 12827                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 12828                           
 12829                           
 12830                           ;Dimmer_B1.c: 265: else if(status == 2)
 12831  1158  0020               	movlb	0	; select bank0
 12832  1159  082A               	movf	DimmerLights_Exceptions@status,w
 12833  115A  3A02               	xorlw	2
 12834  115B  1D03               	skipz
 12835  115C  296B               	goto	l8360
 12836                           
 12837                           ;Dimmer_B1.c: 266: {
 12838                           ;Dimmer_B1.c: 267: setBuz(5,300);
 12839  115D  302C               	movlw	44
 12840  115E  00A6               	movwf	setBuz@time
 12841  115F  3001               	movlw	1
 12842  1160  00A7               	movwf	setBuz@time+1
 12843  1161  3005               	movlw	5
 12844  1162  3188  2019  3191   	fcall	_setBuz
 12845                           
 12846                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 12847  1165  0021               	movlb	1	; select bank1
 12848  1166  0A3A               	incf	_Dimmer^(0+128),w
 12849  1167  0086               	movwf	6
 12850  1168  0187               	clrf	7
 12851  1169  0801               	movf	1,w
 12852  116A  2971               	goto	L10
 12853  116B                     l8360:	
 12854                           ;Dimmer_B1.c: 269: }
 12855                           
 12856                           
 12857                           ;Dimmer_B1.c: 270: else if(status == 3)
 12858  116B  0020               	movlb	0	; select bank0
 12859  116C  082A               	movf	DimmerLights_Exceptions@status,w
 12860  116D  3A03               	xorlw	3
 12861  116E  1D03               	skipz
 12862  116F  2974               	goto	l815
 12863  1170                     l8362:	
 12864                           
 12865                           ;Dimmer_B1.c: 271: {
 12866                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 12867  1170  3001               	movlw	1
 12868  1171                     L10:	
 12869  1171  3190  2092  3191   	fcall	_setDimmerLights_ERROR
 12870  1174                     l815:	
 12871                           
 12872                           ;Dimmer_B1.c: 281: }
 12873                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 12874  1174  0020               	movlb	0	; select bank0
 12875  1175  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12876  1176  3001               	movlw	1
 12877  1177  319B  2337  3191   	fcall	_setDimmerLights_TriggerERROR
 12878                           
 12879                           ;Dimmer_B1.c: 293: if(myMain->SelfTest == 0)
 12880  117A  0021               	movlb	1	; select bank1
 12881  117B  086D               	movf	_myMain^(0+128),w
 12882  117C  3E03               	addlw	3
 12883  117D  0086               	movwf	6
 12884  117E  3001               	movlw	1	; select bank2/3
 12885  117F  0087               	movwf	7
 12886  1180  1801               	btfsc	1,0
 12887  1181  0008               	return
 12888                           
 12889                           ;Dimmer_B1.c: 294: {
 12890                           ;Dimmer_B1.c: 295: myMain->i=0;
 12891  1182  086D               	movf	_myMain^(0+128),w
 12892  1183  3E0F               	addlw	15
 12893  1184  0086               	movwf	6
 12894  1185  3001               	movlw	1	; select bank2/3
 12895  1186  0087               	movwf	7
 12896  1187  1001               	bcf	1,0
 12897                           
 12898                           ;Dimmer_B1.c: 296: myMain->j=0;
 12899  1188  086D               	movf	_myMain^(0+128),w
 12900  1189  3E0F               	addlw	15
 12901  118A  0086               	movwf	6
 12902  118B  3001               	movlw	1	; select bank2/3
 12903  118C  0087               	movwf	7
 12904  118D  1081               	bcf	1,1
 12905                           
 12906                           ;Dimmer_B1.c: 297: myMain->k=1;
 12907  118E  086D               	movf	_myMain^(0+128),w
 12908  118F  3E0F               	addlw	15
 12909  1190  0086               	movwf	6
 12910  1191  3001               	movlw	1	; select bank2/3
 12911  1192  0087               	movwf	7
 12912  1193  1501               	bsf	1,2
 12913                           
 12914                           ;Dimmer_B1.c: 298: myMain->Count2=0;
 12915  1194  086D               	movf	_myMain^(0+128),w
 12916  1195  3E08               	addlw	8
 12917  1196  0086               	movwf	6
 12918  1197  3001               	movlw	1	; select bank2/3
 12919  1198  0087               	movwf	7
 12920  1199  3000               	movlw	0
 12921  119A  3FC0               	movwi [0]fsr1
 12922  119B  3FC1               	movwi [1]fsr1
 12923  119C  0008               	return
 12924  119D                     __end_of_DimmerLights_Exceptions:	
 12925                           
 12926                           	psect	text69
 12927  1B37                     __ptext69:	
 12928 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12929 ;; Defined at:
 12930 ;;		line 320 in file "../src/Dimmer_B1.c"
 12931 ;; Parameters:    Size  Location     Type
 12932 ;;  lights          1    wreg     unsigned char 
 12933 ;;  command         1    2[BANK0 ] unsigned char 
 12934 ;; Auto vars:     Size  Location     Type
 12935 ;;  lights          1    3[BANK0 ] unsigned char 
 12936 ;; Return value:  Size  Location     Type
 12937 ;;		None               void
 12938 ;; Registers used:
 12939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12940 ;; Tracked objects:
 12941 ;;		On entry : 0/0
 12942 ;;		On exit  : 0/0
 12943 ;;		Unchanged: 0/0
 12944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12945 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12949 ;;Total ram usage:        2 bytes
 12950 ;; Hardware stack levels used:    1
 12951 ;; Hardware stack levels required when called:    5
 12952 ;; This function calls:
 12953 ;;		_DimmerLightsPointSelect
 12954 ;; This function is called by:
 12955 ;;		_DimmerLights_Exceptions
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           
 12960                           ;psect for function _setDimmerLights_TriggerERROR
 12961  1B37                     _setDimmerLights_TriggerERROR:	
 12962                           
 12963                           ;incstack = 0
 12964                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12965                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12966  1B37  0020               	movlb	0	; select bank0
 12967  1B38  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12968                           
 12969                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 12970  1B39  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12971  1B3A  31A6  2617         	fcall	_DimmerLightsPointSelect
 12972                           
 12973                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 12974  1B3C  0877               	movf	_DimmerLights,w
 12975  1B3D  3E09               	addlw	9
 12976  1B3E  0086               	movwf	6
 12977  1B3F  3001               	movlw	1	; select bank2/3
 12978  1B40  0087               	movwf	7
 12979  1B41  0020               	movlb	0	; select bank0
 12980  1B42  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12981  1B43  1081               	bcf	1,1
 12982  1B44  1D03               	skipz
 12983  1B45  1481               	bsf	1,1
 12984                           
 12985                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 12986  1B46  0877               	movf	_DimmerLights,w
 12987  1B47  3E09               	addlw	9
 12988  1B48  0086               	movwf	6
 12989  1B49  3001               	movlw	1	; select bank2/3
 12990  1B4A  0087               	movwf	7
 12991  1B4B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12992  1B4C  1001               	bcf	1,0
 12993  1B4D  1D03               	skipz
 12994  1B4E  1401               	bsf	1,0
 12995                           
 12996                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 12997  1B4F  0877               	movf	_DimmerLights,w
 12998  1B50  3E09               	addlw	9
 12999  1B51  0086               	movwf	6
 13000  1B52  3001               	movlw	1	; select bank2/3
 13001  1B53  0087               	movwf	7
 13002  1B54  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13003  1B55  1181               	bcf	1,3
 13004  1B56  1D03               	skipz
 13005  1B57  1581               	bsf	1,3
 13006                           
 13007                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13008  1B58  0877               	movf	_DimmerLights,w
 13009  1B59  3E09               	addlw	9
 13010  1B5A  0086               	movwf	6
 13011  1B5B  3001               	movlw	1	; select bank2/3
 13012  1B5C  0087               	movwf	7
 13013  1B5D  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13014  1B5E  1101               	bcf	1,2
 13015  1B5F  1D03               	skipz
 13016  1B60  1501               	bsf	1,2
 13017  1B61  0008               	return
 13018  1B62                     __end_of_setDimmerLights_TriggerERROR:	
 13019                           
 13020                           	psect	text70
 13021  1092                     __ptext70:	
 13022 ;; *************** function _setDimmerLights_ERROR *****************
 13023 ;; Defined at:
 13024 ;;		line 302 in file "../src/Dimmer_B1.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;  lights          1    wreg     unsigned char 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  lights          1    5[BANK0 ] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;		None               void
 13031 ;; Registers used:
 13032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        2 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    6
 13045 ;; This function calls:
 13046 ;;		_DimmerLightsPointSelect
 13047 ;;		_setLED
 13048 ;;		_setLoad_StatusOff
 13049 ;;		_setRFSW_Status
 13050 ;;		_setSw_Status
 13051 ;; This function is called by:
 13052 ;;		_DimmerLights_Exceptions
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _setDimmerLights_ERROR
 13058  1092                     _setDimmerLights_ERROR:	
 13059                           
 13060                           ;incstack = 0
 13061                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13062                           ;setDimmerLights_ERROR@lights stored from wreg
 13063  1092  0020               	movlb	0	; select bank0
 13064  1093  00A5               	movwf	setDimmerLights_ERROR@lights
 13065                           
 13066                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13067  1094  0825               	movf	setDimmerLights_ERROR@lights,w
 13068  1095  31A6  2617  3190   	fcall	_DimmerLightsPointSelect
 13069                           
 13070                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13071  1098  0877               	movf	_DimmerLights,w
 13072  1099  0086               	movwf	6
 13073  109A  3001               	movlw	1	; select bank2/3
 13074  109B  0087               	movwf	7
 13075  109C  1E81               	btfss	1,5
 13076  109D  0008               	return
 13077                           
 13078                           ;Dimmer_B1.c: 306: {
 13079                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13080  109E  0877               	movf	_DimmerLights,w
 13081  109F  0086               	movwf	6
 13082  10A0  3001               	movlw	1	; select bank2/3
 13083  10A1  0087               	movwf	7
 13084  10A2  1081               	bcf	1,1
 13085                           
 13086                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13087  10A3  0877               	movf	_DimmerLights,w
 13088  10A4  0086               	movwf	6
 13089  10A5  3001               	movlw	1	; select bank2/3
 13090  10A6  0087               	movwf	7
 13091  10A7  1181               	bcf	1,3
 13092                           
 13093                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13094  10A8  0877               	movf	_DimmerLights,w
 13095  10A9  0086               	movwf	6
 13096  10AA  3001               	movlw	1	; select bank2/3
 13097  10AB  0087               	movwf	7
 13098  10AC  1201               	bcf	1,4
 13099                           
 13100                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13101  10AD  0877               	movf	_DimmerLights,w
 13102  10AE  0086               	movwf	6
 13103  10AF  3001               	movlw	1	; select bank2/3
 13104  10B0  0087               	movwf	7
 13105  10B1  1301               	bcf	1,6
 13106                           
 13107                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13108  10B2  3003               	movlw	3
 13109  10B3  0020               	movlb	0	; select bank0
 13110  10B4  00A4               	movwf	??_setDimmerLights_ERROR
 13111  10B5  0877               	movf	_DimmerLights,w
 13112  10B6  3E02               	addlw	2
 13113  10B7  0086               	movwf	6
 13114  10B8  3001               	movlw	1	; select bank2/3
 13115  10B9  0087               	movwf	7
 13116  10BA  0824               	movf	??_setDimmerLights_ERROR,w
 13117  10BB  0081               	movwf	1
 13118                           
 13119                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13120  10BC  0877               	movf	_DimmerLights,w
 13121  10BD  3E06               	addlw	6
 13122  10BE  0086               	movwf	6
 13123  10BF  3001               	movlw	1	; select bank2/3
 13124  10C0  0087               	movwf	7
 13125  10C1  0801               	movf	1,w
 13126  10C2  00A4               	movwf	??_setDimmerLights_ERROR
 13127  10C3  0877               	movf	_DimmerLights,w
 13128  10C4  3E04               	addlw	4
 13129  10C5  0086               	movwf	6
 13130  10C6  3001               	movlw	1	; select bank2/3
 13131  10C7  0087               	movwf	7
 13132  10C8  0824               	movf	??_setDimmerLights_ERROR,w
 13133  10C9  0081               	movwf	1
 13134                           
 13135                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13136  10CA  0021               	movlb	1	; select bank1
 13137  10CB  083A               	movf	_Dimmer^(0+128),w
 13138  10CC  0086               	movwf	6
 13139  10CD  0187               	clrf	7
 13140  10CE  1401               	bsf	1,0
 13141                           
 13142                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13143  10CF  0020               	movlb	0	; select bank0
 13144  10D0  01A0               	clrf	setLoad_StatusOff@command
 13145  10D1  0AA0               	incf	setLoad_StatusOff@command,f
 13146  10D2  0825               	movf	setDimmerLights_ERROR@lights,w
 13147  10D3  319C  2447  3190   	fcall	_setLoad_StatusOff
 13148                           
 13149                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13150  10D6  0020               	movlb	0	; select bank0
 13151  10D7  01A2               	clrf	setLED@command
 13152  10D8  0AA2               	incf	setLED@command,f
 13153  10D9  0825               	movf	setDimmerLights_ERROR@lights,w
 13154  10DA  3192  2254  3190   	fcall	_setLED
 13155                           
 13156                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13157  10DD  0020               	movlb	0	; select bank0
 13158  10DE  01A2               	clrf	setSw_Status@command
 13159  10DF  0825               	movf	setDimmerLights_ERROR@lights,w
 13160  10E0  31A7  2722  3190   	fcall	_setSw_Status
 13161                           
 13162                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13163  10E3  0020               	movlb	0	; select bank0
 13164  10E4  01A2               	clrf	setRFSW_Status@command
 13165  10E5  0825               	movf	setDimmerLights_ERROR@lights,w
 13166  10E6  31A7  2713         	fcall	_setRFSW_Status
 13167  10E8  0008               	return
 13168  10E9                     __end_of_setDimmerLights_ERROR:	
 13169                           
 13170                           	psect	text71
 13171  278E                     __ptext71:	
 13172 ;; *************** function _setDimmerLights_Clear *****************
 13173 ;; Defined at:
 13174 ;;		line 456 in file "../src/Dimmer_B1.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  lights          1    wreg     unsigned char 
 13177 ;;  command         1    2[BANK0 ] unsigned char 
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;  lights          1    3[BANK0 ] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;		None               void
 13182 ;; Registers used:
 13183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13189 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;Total ram usage:        2 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    5
 13196 ;; This function calls:
 13197 ;;		_DimmerLightsPointSelect
 13198 ;; This function is called by:
 13199 ;;		_Load_Main
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function _setDimmerLights_Clear
 13205  278E                     _setDimmerLights_Clear:	
 13206                           
 13207                           ;incstack = 0
 13208                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13209                           ;setDimmerLights_Clear@lights stored from wreg
 13210  278E  0020               	movlb	0	; select bank0
 13211  278F  00A3               	movwf	setDimmerLights_Clear@lights
 13212                           
 13213                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13214  2790  0823               	movf	setDimmerLights_Clear@lights,w
 13215  2791  31A6  2617         	fcall	_DimmerLightsPointSelect
 13216                           
 13217                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13218  2793  0877               	movf	_DimmerLights,w
 13219  2794  3E0C               	addlw	12
 13220  2795  0086               	movwf	6
 13221  2796  3001               	movlw	1	; select bank2/3
 13222  2797  0087               	movwf	7
 13223  2798  0020               	movlb	0	; select bank0
 13224  2799  0822               	movf	setDimmerLights_Clear@command,w
 13225  279A  1001               	bcf	1,0
 13226  279B  1D03               	skipz
 13227  279C  1401               	bsf	1,0
 13228  279D  0008               	return
 13229  279E                     __end_of_setDimmerLights_Clear:	
 13230                           
 13231                           	psect	text72
 13232  25C8                     __ptext72:	
 13233 ;; *************** function _getTemp_Safe *****************
 13234 ;; Defined at:
 13235 ;;		line 26 in file "../src/OverTemperature_B1.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      unsigned char 
 13242 ;; Registers used:
 13243 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        0 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    4
 13256 ;; This function calls:
 13257 ;;		Nothing
 13258 ;; This function is called by:
 13259 ;;		_Load_Main
 13260 ;;		_setPowerFault_Main
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _getTemp_Safe
 13266  25C8                     _getTemp_Safe:	
 13267                           
 13268                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13272  25C8  087A               	movf	_Temp,w
 13273  25C9  0086               	movwf	6
 13274  25CA  3001               	movlw	1	; select bank2/3
 13275  25CB  0087               	movwf	7
 13276  25CC  0E01               	swapf	1,w
 13277  25CD  3901               	andlw	1
 13278  25CE  0008               	return
 13279  25CF                     __end_of_getTemp_Safe:	
 13280                           
 13281                           	psect	text73
 13282  25E6                     __ptext73:	
 13283 ;; *************** function _getPF_Safe *****************
 13284 ;; Defined at:
 13285 ;;		line 40 in file "../src/PowerFault_B1.c"
 13286 ;; Parameters:    Size  Location     Type
 13287 ;;		None
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;		None
 13290 ;; Return value:  Size  Location     Type
 13291 ;;                  1    wreg      unsigned char 
 13292 ;; Registers used:
 13293 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13294 ;; Tracked objects:
 13295 ;;		On entry : 0/0
 13296 ;;		On exit  : 0/0
 13297 ;;		Unchanged: 0/0
 13298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;Total ram usage:        0 bytes
 13304 ;; Hardware stack levels used:    1
 13305 ;; Hardware stack levels required when called:    4
 13306 ;; This function calls:
 13307 ;;		Nothing
 13308 ;; This function is called by:
 13309 ;;		_Load_Main
 13310 ;;		_setTemp_Main
 13311 ;; This function uses a non-reentrant model
 13312 ;;
 13313                           
 13314                           
 13315                           ;psect for function _getPF_Safe
 13316  25E6                     _getPF_Safe:	
 13317                           
 13318                           ;PowerFault_B1.c: 42: return PF->Safe;
 13319                           
 13320                           ;incstack = 0
 13321                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13322  25E6  0021               	movlb	1	; select bank1
 13323  25E7  083D               	movf	_PF^(0+128),w
 13324  25E8  0086               	movwf	6
 13325  25E9  3001               	movlw	1	; select bank2/3
 13326  25EA  0087               	movwf	7
 13327  25EB  0C01               	rrf	1,w
 13328  25EC  0C89               	rrf	9,f
 13329  25ED  3901               	andlw	1
 13330  25EE  0008               	return
 13331  25EF                     __end_of_getPF_Safe:	
 13332                           
 13333                           	psect	text74
 13334  1D10                     __ptext74:	
 13335 ;; *************** function ___lwdiv *****************
 13336 ;; Defined at:
 13337 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
 13338 ;; Parameters:    Size  Location     Type
 13339 ;;  divisor         2    0[BANK0 ] unsigned int 
 13340 ;;  dividend        2    2[BANK0 ] unsigned int 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  quotient        2    5[BANK0 ] unsigned int 
 13343 ;;  counter         1    7[BANK0 ] unsigned char 
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  2    0[BANK0 ] unsigned int 
 13346 ;; Registers used:
 13347 ;;		wreg, status,2, status,0
 13348 ;; Tracked objects:
 13349 ;;		On entry : 0/0
 13350 ;;		On exit  : 0/0
 13351 ;;		Unchanged: 0/0
 13352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;Total ram usage:        8 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    4
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_Load_Main
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function ___lwdiv
 13369  1D10                     ___lwdiv:	
 13370                           
 13371                           ;incstack = 0
 13372                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13373  1D10  0020               	movlb	0	; select bank0
 13374  1D11  01A5               	clrf	___lwdiv@quotient
 13375  1D12  01A6               	clrf	___lwdiv@quotient+1
 13376  1D13  0821               	movf	___lwdiv@divisor+1,w
 13377  1D14  0420               	iorwf	___lwdiv@divisor,w
 13378  1D15  1903               	skipnz
 13379  1D16  2D40               	goto	l7472
 13380  1D17  01A7               	clrf	___lwdiv@counter
 13381  1D18  0AA7               	incf	___lwdiv@counter,f
 13382  1D19                     l7460:	
 13383  1D19  1BA1               	btfsc	___lwdiv@divisor+1,7
 13384  1D1A  2D25               	goto	l7462
 13385  1D1B  3001               	movlw	1
 13386  1D1C                     u6355:	
 13387  1D1C  35A0               	lslf	___lwdiv@divisor,f
 13388  1D1D  0DA1               	rlf	___lwdiv@divisor+1,f
 13389  1D1E  0B89               	decfsz	9,f
 13390  1D1F  2D1C               	goto	u6355
 13391  1D20  3001               	movlw	1
 13392  1D21  00A4               	movwf	??___lwdiv
 13393  1D22  0824               	movf	??___lwdiv,w
 13394  1D23  07A7               	addwf	___lwdiv@counter,f
 13395  1D24  2D19               	goto	l7460
 13396  1D25                     l7462:	
 13397  1D25  3001               	movlw	1
 13398  1D26                     u6375:	
 13399  1D26  35A5               	lslf	___lwdiv@quotient,f
 13400  1D27  0DA6               	rlf	___lwdiv@quotient+1,f
 13401  1D28  0B89               	decfsz	9,f
 13402  1D29  2D26               	goto	u6375
 13403  1D2A  0821               	movf	___lwdiv@divisor+1,w
 13404  1D2B  0223               	subwf	___lwdiv@dividend+1,w
 13405  1D2C  1D03               	skipz
 13406  1D2D  2D30               	goto	u6385
 13407  1D2E  0820               	movf	___lwdiv@divisor,w
 13408  1D2F  0222               	subwf	___lwdiv@dividend,w
 13409  1D30                     u6385:	
 13410  1D30  1C03               	skipc
 13411  1D31  2D37               	goto	l7468
 13412  1D32  0820               	movf	___lwdiv@divisor,w
 13413  1D33  02A2               	subwf	___lwdiv@dividend,f
 13414  1D34  0821               	movf	___lwdiv@divisor+1,w
 13415  1D35  3BA3               	subwfb	___lwdiv@dividend+1,f
 13416  1D36  1425               	bsf	___lwdiv@quotient,0
 13417  1D37                     l7468:	
 13418  1D37  3001               	movlw	1
 13419  1D38                     u6395:	
 13420  1D38  36A1               	lsrf	___lwdiv@divisor+1,f
 13421  1D39  0CA0               	rrf	___lwdiv@divisor,f
 13422  1D3A  0B89               	decfsz	9,f
 13423  1D3B  2D38               	goto	u6395
 13424  1D3C  3001               	movlw	1
 13425  1D3D  02A7               	subwf	___lwdiv@counter,f
 13426  1D3E  1D03               	btfss	3,2
 13427  1D3F  2D25               	goto	l7462
 13428  1D40                     l7472:	
 13429  1D40  0826               	movf	___lwdiv@quotient+1,w
 13430  1D41  01A1               	clrf	?___lwdiv+1
 13431  1D42  07A1               	addwf	?___lwdiv+1,f
 13432  1D43  0825               	movf	___lwdiv@quotient,w
 13433  1D44  01A0               	clrf	?___lwdiv
 13434  1D45  07A0               	addwf	?___lwdiv,f
 13435  1D46  0008               	return
 13436  1D47                     __end_of___lwdiv:	
 13437                           
 13438                           	psect	text75
 13439  26EA                     __ptext75:	
 13440 ;; *************** function _Load_Initialization *****************
 13441 ;; Defined at:
 13442 ;;		line 9 in file "../src/OverLoad_B1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;		None
 13447 ;; Return value:  Size  Location     Type
 13448 ;;		None               void
 13449 ;; Registers used:
 13450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        1 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    5
 13463 ;; This function calls:
 13464 ;;		_setLoad_AH_AL_Restore
 13465 ;; This function is called by:
 13466 ;;		_main
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           
 13471                           ;psect for function _Load_Initialization
 13472  26EA                     _Load_Initialization:	
 13473                           
 13474                           ;OverLoad_B1.c: 10: Load = &Load1;
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13478  26EA  3020               	movlw	_Load1& (0+255)
 13479  26EB  0020               	movlb	0	; select bank0
 13480  26EC  00A2               	movwf	??_Load_Initialization
 13481  26ED  0822               	movf	??_Load_Initialization,w
 13482  26EE  00FB               	movwf	_Load
 13483                           
 13484                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 13485  26EF  087B               	movf	_Load,w
 13486  26F0  0086               	movwf	6
 13487  26F1  3002               	movlw	2	; select bank4/5
 13488  26F2  0087               	movwf	7
 13489  26F3  1581               	bsf	1,3
 13490                           
 13491                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13492  26F4  319A  2256         	fcall	_setLoad_AH_AL_Restore
 13493  26F6  0008               	return
 13494  26F7                     __end_of_Load_Initialization:	
 13495                           
 13496                           	psect	text76
 13497  1A56                     __ptext76:	
 13498 ;; *************** function _setLoad_AH_AL_Restore *****************
 13499 ;; Defined at:
 13500 ;;		line 307 in file "../src/OverLoad_B1.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;		None
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  i               1    1[BANK0 ] unsigned char 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;		None               void
 13507 ;; Registers used:
 13508 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;Total ram usage:        2 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    4
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		_Load_Initialization
 13525 ;;		_Load_Main
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _setLoad_AH_AL_Restore
 13531  1A56                     _setLoad_AH_AL_Restore:	
 13532                           
 13533                           ;OverLoad_B1.c: 308: char i;
 13534                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 13535                           
 13536                           ;incstack = 0
 13537                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13538  1A56  0020               	movlb	0	; select bank0
 13539  1A57  01A1               	clrf	setLoad_AH_AL_Restore@i
 13540  1A58                     L11:	
 13541  1A58  3005               	movlw	5
 13542  1A59  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13543  1A5A  1803               	btfsc	3,0
 13544  1A5B  0008               	return
 13545                           
 13546                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 13547  1A5C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13548  1A5D  3E08               	addlw	8
 13549  1A5E  077B               	addwf	_Load,w
 13550  1A5F  00A0               	movwf	??_setLoad_AH_AL_Restore
 13551  1A60  0820               	movf	??_setLoad_AH_AL_Restore,w
 13552  1A61  0086               	movwf	6
 13553  1A62  3002               	movlw	2	; select bank4/5
 13554  1A63  0087               	movwf	7
 13555  1A64  3000               	movlw	0
 13556  1A65  3FC0               	movwi [0]fsr1
 13557  1A66  3FC1               	movwi [1]fsr1
 13558                           
 13559                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 13560  1A67  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13561  1A68  3E1A               	addlw	26
 13562  1A69  077B               	addwf	_Load,w
 13563  1A6A  00A0               	movwf	??_setLoad_AH_AL_Restore
 13564  1A6B  0820               	movf	??_setLoad_AH_AL_Restore,w
 13565  1A6C  0086               	movwf	6
 13566  1A6D  3002               	movlw	2	; select bank4/5
 13567  1A6E  0087               	movwf	7
 13568  1A6F  30FF               	movlw	255
 13569  1A70  3FC0               	movwi [0]fsr1
 13570  1A71  30FF               	movlw	255
 13571  1A72  3FC1               	movwi [1]fsr1
 13572  1A73  3001               	movlw	1
 13573  1A74  00A0               	movwf	??_setLoad_AH_AL_Restore
 13574  1A75  0820               	movf	??_setLoad_AH_AL_Restore,w
 13575  1A76  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13576  1A77  2A58               	goto	L11
 13577  1A78                     __end_of_setLoad_AH_AL_Restore:	
 13578                           
 13579                           	psect	text77
 13580  26D1                     __ptext77:	
 13581 ;; *************** function _LED_Main *****************
 13582 ;; Defined at:
 13583 ;;		line 51 in file "../src/LED_B1.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;		None
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;		None
 13588 ;; Return value:  Size  Location     Type
 13589 ;;		None               void
 13590 ;; Registers used:
 13591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;Total ram usage:        0 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    6
 13604 ;; This function calls:
 13605 ;;		_setLED_Main
 13606 ;; This function is called by:
 13607 ;;		_main
 13608 ;; This function uses a non-reentrant model
 13609 ;;
 13610                           
 13611                           
 13612                           ;psect for function _LED_Main
 13613  26D1                     _LED_Main:	
 13614                           
 13615                           ;LED_B1.c: 54: setLED_Main(1);
 13616                           
 13617                           ;incstack = 0
 13618                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13619  26D1  3001               	movlw	1
 13620  26D2  319D  2547  31A6   	fcall	_setLED_Main
 13621                           
 13622                           ;LED_B1.c: 57: setLED_Main(2);
 13623  26D5  3002               	movlw	2
 13624  26D6  319D  2547  31A6   	fcall	_setLED_Main
 13625                           
 13626                           ;LED_B1.c: 63: setLED_Main(99);
 13627  26D9  3063               	movlw	99
 13628  26DA  319D  2547         	fcall	_setLED_Main
 13629  26DC  0008               	return
 13630  26DD                     __end_of_LED_Main:	
 13631                           
 13632                           	psect	text78
 13633  1D47                     __ptext78:	
 13634 ;; *************** function _setLED_Main *****************
 13635 ;; Defined at:
 13636 ;;		line 214 in file "../src/LED_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  led             1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  led             1    4[BANK0 ] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        3 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    5
 13657 ;; This function calls:
 13658 ;;		_LedPointSelect
 13659 ;; This function is called by:
 13660 ;;		_LED_Main
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           
 13665                           ;psect for function _setLED_Main
 13666  1D47                     _setLED_Main:	
 13667                           
 13668                           ;incstack = 0
 13669                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13670                           ;setLED_Main@led stored from wreg
 13671  1D47  0020               	movlb	0	; select bank0
 13672  1D48  00A4               	movwf	setLED_Main@led
 13673                           
 13674                           ;LED_B1.c: 216: LedPointSelect(led);
 13675  1D49  0824               	movf	setLED_Main@led,w
 13676  1D4A  319A  2234  319D   	fcall	_LedPointSelect
 13677                           
 13678                           ;LED_B1.c: 217: if(LED->GO)
 13679  1D4D  0021               	movlb	1	; select bank1
 13680  1D4E  083C               	movf	_LED^(0+128),w
 13681  1D4F  0086               	movwf	6
 13682  1D50  0187               	clrf	7
 13683  1D51  1C81               	btfss	1,1
 13684  1D52  0008               	return
 13685                           
 13686                           ;LED_B1.c: 218: {
 13687                           ;LED_B1.c: 219: LED->Time++;
 13688  1D53  0A3C               	incf	_LED^(0+128),w
 13689  1D54  0086               	movwf	6
 13690  1D55  0187               	clrf	7
 13691  1D56  3001               	movlw	1
 13692  1D57  0781               	addwf	1,f
 13693  1D58  3141               	addfsr 1,1
 13694  1D59  1803               	skipnc
 13695  1D5A  0A81               	incf	1,f
 13696                           
 13697                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13698  1D5B  0A3C               	incf	_LED^(0+128),w
 13699  1D5C  0086               	movwf	6
 13700  1D5D  0187               	clrf	7
 13701  1D5E  3F40               	moviw [0]fsr1
 13702  1D5F  0020               	movlb	0	; select bank0
 13703  1D60  00A2               	movwf	??_setLED_Main
 13704  1D61  3F41               	moviw [1]fsr1
 13705  1D62  00A3               	movwf	??_setLED_Main+1
 13706  1D63  3000               	movlw	0
 13707  1D64  0223               	subwf	??_setLED_Main+1,w
 13708  1D65  3032               	movlw	50
 13709  1D66  1903               	skipnz
 13710  1D67  0222               	subwf	??_setLED_Main,w
 13711  1D68  1C03               	skipc
 13712  1D69  0008               	return
 13713                           
 13714                           ;LED_B1.c: 221: {
 13715                           ;LED_B1.c: 222: LED->Time=0;
 13716  1D6A  0021               	movlb	1	; select bank1
 13717  1D6B  0A3C               	incf	_LED^(0+128),w
 13718  1D6C  0086               	movwf	6
 13719  1D6D  0187               	clrf	7
 13720  1D6E  3000               	movlw	0
 13721  1D6F  3FC0               	movwi [0]fsr1
 13722  1D70  3FC1               	movwi [1]fsr1
 13723                           
 13724                           ;LED_B1.c: 224: if(led == 1)
 13725  1D71  0020               	movlb	0	; select bank0
 13726  1D72  0824               	movf	setLED_Main@led,w
 13727  1D73  3A01               	xorlw	1
 13728  1D74  1D03               	skipz
 13729  1D75  2D79               	goto	l7034
 13730                           
 13731                           ;LED_B1.c: 225: {
 13732                           ;LED_B1.c: 226: RA3=~RA3;
 13733  1D76  3008               	movlw	8
 13734  1D77  068C               	xorwf	12,f
 13735                           
 13736                           ;LED_B1.c: 227: }
 13737  1D78  0008               	return
 13738  1D79                     l7034:	
 13739                           
 13740                           ;LED_B1.c: 230: else if(led == 2)
 13741  1D79  0824               	movf	setLED_Main@led,w
 13742  1D7A  3A02               	xorlw	2
 13743  1D7B  1D03               	skipz
 13744  1D7C  2D80               	goto	l7038
 13745                           
 13746                           ;LED_B1.c: 231: {
 13747                           ;LED_B1.c: 232: RC7=~RC7;
 13748  1D7D  3080               	movlw	128
 13749  1D7E  068E               	xorwf	14,f
 13750                           
 13751                           ;LED_B1.c: 233: }
 13752  1D7F  0008               	return
 13753  1D80                     l7038:	
 13754                           
 13755                           ;LED_B1.c: 242: else if(led == 99)
 13756  1D80  0824               	movf	setLED_Main@led,w
 13757  1D81  3A63               	xorlw	99
 13758  1D82  1D03               	skipz
 13759  1D83  0008               	return
 13760                           
 13761                           ;LED_B1.c: 243: {
 13762                           ;LED_B1.c: 244: RB5=~RB5;
 13763  1D84  3020               	movlw	32
 13764  1D85  068D               	xorwf	13,f
 13765  1D86  0008               	return
 13766  1D87                     __end_of_setLED_Main:	
 13767                           
 13768                           	psect	text79
 13769  26C5                     __ptext79:	
 13770 ;; *************** function _LED_Initialization *****************
 13771 ;; Defined at:
 13772 ;;		line 35 in file "../src/LED_B1.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;		None
 13777 ;; Return value:  Size  Location     Type
 13778 ;;		None               void
 13779 ;; Registers used:
 13780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;Total ram usage:        0 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    7
 13793 ;; This function calls:
 13794 ;;		_setLED_Initialization
 13795 ;; This function is called by:
 13796 ;;		_main
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           
 13801                           ;psect for function _LED_Initialization
 13802  26C5                     _LED_Initialization:	
 13803                           
 13804                           ;LED_B1.c: 38: setLED_Initialization(1);
 13805                           
 13806                           ;incstack = 0
 13807                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13808  26C5  3001               	movlw	1
 13809  26C6  31A7  27DE  31A6   	fcall	_setLED_Initialization
 13810                           
 13811                           ;LED_B1.c: 41: setLED_Initialization(2);
 13812  26C9  3002               	movlw	2
 13813  26CA  31A7  27DE  31A6   	fcall	_setLED_Initialization
 13814                           
 13815                           ;LED_B1.c: 47: setLED_Initialization(99);
 13816  26CD  3063               	movlw	99
 13817  26CE  31A7  27DE         	fcall	_setLED_Initialization
 13818  26D0  0008               	return
 13819  26D1                     __end_of_LED_Initialization:	
 13820                           
 13821                           	psect	text80
 13822  27DE                     __ptext80:	
 13823 ;; *************** function _setLED_Initialization *****************
 13824 ;; Defined at:
 13825 ;;		line 67 in file "../src/LED_B1.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  led             1    wreg     unsigned char 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;  led             1    4[BANK0 ] unsigned char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;		None               void
 13832 ;; Registers used:
 13833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;Total ram usage:        1 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    6
 13846 ;; This function calls:
 13847 ;;		_LedPointSelect
 13848 ;;		_setLED
 13849 ;; This function is called by:
 13850 ;;		_LED_Initialization
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function _setLED_Initialization
 13856  27DE                     _setLED_Initialization:	
 13857                           
 13858                           ;incstack = 0
 13859                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13860                           ;setLED_Initialization@led stored from wreg
 13861  27DE  0020               	movlb	0	; select bank0
 13862  27DF  00A4               	movwf	setLED_Initialization@led
 13863                           
 13864                           ;LED_B1.c: 69: LedPointSelect(led);
 13865  27E0  0824               	movf	setLED_Initialization@led,w
 13866  27E1  319A  2234  31A7   	fcall	_LedPointSelect
 13867                           
 13868                           ;LED_B1.c: 70: LED->Enable=1;
 13869  27E4  0021               	movlb	1	; select bank1
 13870  27E5  083C               	movf	_LED^(0+128),w
 13871  27E6  0086               	movwf	6
 13872  27E7  0187               	clrf	7
 13873  27E8  1401               	bsf	1,0
 13874                           
 13875                           ;LED_B1.c: 71: setLED(led,0);
 13876  27E9  0020               	movlb	0	; select bank0
 13877  27EA  01A2               	clrf	setLED@command
 13878  27EB  0824               	movf	setLED_Initialization@led,w
 13879  27EC  3192  2254         	fcall	_setLED
 13880  27EE  0008               	return
 13881  27EF                     __end_of_setLED_Initialization:	
 13882                           
 13883                           	psect	text81
 13884  1E4F                     __ptext81:	
 13885 ;; *************** function _Flash_Memory_Main *****************
 13886 ;; Defined at:
 13887 ;;		line 867 in file "../src/MCU_B1.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;		None
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;		None
 13892 ;; Return value:  Size  Location     Type
 13893 ;;		None               void
 13894 ;; Registers used:
 13895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;Total ram usage:        0 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    7
 13908 ;; This function calls:
 13909 ;;		_Flash_Memory_Modify
 13910 ;; This function is called by:
 13911 ;;		_main
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           
 13916                           ;psect for function _Flash_Memory_Main
 13917  1E4F                     _Flash_Memory_Main:	
 13918                           
 13919                           ;MCU_B1.c: 868: if (Memory->GO) {
 13920                           
 13921                           ;incstack = 0
 13922                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13923  1E4F  0021               	movlb	1	; select bank1
 13924  1E50  086A               	movf	_Memory^(0+128),w
 13925  1E51  3E22               	addlw	34
 13926  1E52  0086               	movwf	6
 13927  1E53  3001               	movlw	1	; select bank2/3
 13928  1E54  0087               	movwf	7
 13929  1E55  1C81               	btfss	1,1
 13930  1E56  0008               	return
 13931                           
 13932                           ;MCU_B1.c: 869: if (Memory->Modify) {
 13933  1E57  086A               	movf	_Memory^(0+128),w
 13934  1E58  3E22               	addlw	34
 13935  1E59  0086               	movwf	6
 13936  1E5A  3001               	movlw	1	; select bank2/3
 13937  1E5B  0087               	movwf	7
 13938  1E5C  1C01               	btfss	1,0
 13939  1E5D  2E8C               	goto	l9276
 13940                           
 13941                           ;MCU_B1.c: 870: Memory->Time++;
 13942  1E5E  086A               	movf	_Memory^(0+128),w
 13943  1E5F  3E23               	addlw	35
 13944  1E60  0086               	movwf	6
 13945  1E61  3001               	movlw	1	; select bank2/3
 13946  1E62  0087               	movwf	7
 13947  1E63  3001               	movlw	1
 13948  1E64  0781               	addwf	1,f
 13949  1E65  3141               	addfsr 1,1
 13950  1E66  1803               	skipnc
 13951  1E67  0A81               	incf	1,f
 13952                           
 13953                           ;MCU_B1.c: 871: if (Memory->Time == 25)
 13954  1E68  086A               	movf	_Memory^(0+128),w
 13955  1E69  3E23               	addlw	35
 13956  1E6A  0086               	movwf	6
 13957  1E6B  3001               	movlw	1	; select bank2/3
 13958  1E6C  0087               	movwf	7
 13959  1E6D  3F40               	moviw [0]fsr1
 13960  1E6E  3A19               	xorlw	25
 13961  1E6F  1D03               	skipz
 13962  1E70  2E73               	goto	u8995
 13963  1E71  3F41               	moviw [1]fsr1
 13964  1E72  3A00               	xorlw	0
 13965  1E73                     u8995:	
 13966  1E73  1D03               	skipz
 13967  1E74  0008               	return
 13968                           
 13969                           ;MCU_B1.c: 872: {
 13970                           ;MCU_B1.c: 873: Memory->Time = 0;
 13971  1E75  086A               	movf	_Memory^(0+128),w
 13972  1E76  3E23               	addlw	35
 13973  1E77  0086               	movwf	6
 13974  1E78  3001               	movlw	1	; select bank2/3
 13975  1E79  0087               	movwf	7
 13976  1E7A  3000               	movlw	0
 13977  1E7B  3FC0               	movwi [0]fsr1
 13978  1E7C  3FC1               	movwi [1]fsr1
 13979                           
 13980                           ;MCU_B1.c: 874: Memory->Modify = 0;
 13981  1E7D  086A               	movf	_Memory^(0+128),w
 13982  1E7E  3E22               	addlw	34
 13983  1E7F  0086               	movwf	6
 13984  1E80  3001               	movlw	1	; select bank2/3
 13985  1E81  0087               	movwf	7
 13986  1E82  1001               	bcf	1,0
 13987                           
 13988                           ;MCU_B1.c: 875: Memory->GO = 0;
 13989  1E83  086A               	movf	_Memory^(0+128),w
 13990  1E84  3E22               	addlw	34
 13991  1E85  0086               	movwf	6
 13992  1E86  3001               	movlw	1	; select bank2/3
 13993  1E87  0087               	movwf	7
 13994  1E88  1081               	bcf	1,1
 13995                           
 13996                           ;MCU_B1.c: 876: Flash_Memory_Modify();
 13997  1E89  3194  244E         	fcall	_Flash_Memory_Modify
 13998                           
 13999                           ;MCU_B1.c: 878: }
 14000                           ;MCU_B1.c: 879: } else {
 14001  1E8B  0008               	return
 14002  1E8C                     l9276:	
 14003                           
 14004                           ;MCU_B1.c: 880: Memory->GO = 0;
 14005  1E8C  0021               	movlb	1	; select bank1
 14006  1E8D  086A               	movf	_Memory^(0+128),w
 14007  1E8E  3E22               	addlw	34
 14008  1E8F  0086               	movwf	6
 14009  1E90  3001               	movlw	1	; select bank2/3
 14010  1E91  0087               	movwf	7
 14011  1E92  1081               	bcf	1,1
 14012  1E93  0008               	return
 14013  1E94                     __end_of_Flash_Memory_Main:	
 14014                           
 14015                           	psect	text82
 14016  144E                     __ptext82:	
 14017 ;; *************** function _Flash_Memory_Modify *****************
 14018 ;; Defined at:
 14019 ;;		line 937 in file "../src/MCU_B1.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;		None
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  i               1    6[BANK0 ] unsigned char 
 14024 ;; Return value:  Size  Location     Type
 14025 ;;		None               void
 14026 ;; Registers used:
 14027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14028 ;; Tracked objects:
 14029 ;;		On entry : 0/0
 14030 ;;		On exit  : 0/0
 14031 ;;		Unchanged: 0/0
 14032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;Total ram usage:        3 bytes
 14038 ;; Hardware stack levels used:    1
 14039 ;; Hardware stack levels required when called:    6
 14040 ;; This function calls:
 14041 ;;		_Flash_Memory_Erasing
 14042 ;;		_Flash_Memory_Read
 14043 ;;		_Flash_Memory_Write
 14044 ;; This function is called by:
 14045 ;;		_Flash_Memory_Main
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           
 14050                           ;psect for function _Flash_Memory_Modify
 14051  144E                     _Flash_Memory_Modify:	
 14052                           
 14053                           ;MCU_B1.c: 938: char i;
 14054                           ;MCU_B1.c: 939: for (i = 0; i < 32; i++) {
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14058  144E  0020               	movlb	0	; select bank0
 14059  144F  01A6               	clrf	Flash_Memory_Modify@i
 14060  1450  3020               	movlw	32
 14061  1451  0226               	subwf	Flash_Memory_Modify@i,w
 14062  1452  1803               	btfsc	3,0
 14063  1453  2C6D               	goto	l8886
 14064  1454                     l8880:	
 14065                           
 14066                           ;MCU_B1.c: 940: Memory->Data[i] = Flash_Memory_Read(i);
 14067  1454  0826               	movf	Flash_Memory_Modify@i,w
 14068  1455  3199  2112  3194   	fcall	_Flash_Memory_Read
 14069  1458  0020               	movlb	0	; select bank0
 14070  1459  00A4               	movwf	??_Flash_Memory_Modify
 14071  145A  0826               	movf	Flash_Memory_Modify@i,w
 14072  145B  0021               	movlb	1	; select bank1
 14073  145C  076A               	addwf	_Memory^(0+128),w
 14074  145D  0020               	movlb	0	; select bank0
 14075  145E  00A5               	movwf	??_Flash_Memory_Modify+1
 14076  145F  0825               	movf	??_Flash_Memory_Modify+1,w
 14077  1460  0086               	movwf	6
 14078  1461  3001               	movlw	1	; select bank2/3
 14079  1462  0087               	movwf	7
 14080  1463  0824               	movf	??_Flash_Memory_Modify,w
 14081  1464  0081               	movwf	1
 14082  1465  3001               	movlw	1
 14083  1466  00A4               	movwf	??_Flash_Memory_Modify
 14084  1467  0824               	movf	??_Flash_Memory_Modify,w
 14085  1468  07A6               	addwf	Flash_Memory_Modify@i,f
 14086  1469  3020               	movlw	32
 14087  146A  0226               	subwf	Flash_Memory_Modify@i,w
 14088  146B  1C03               	skipc
 14089  146C  2C54               	goto	l8880
 14090  146D                     l8886:	
 14091                           
 14092                           ;MCU_B1.c: 941: }
 14093                           ;MCU_B1.c: 942: Memory->Data[0]=product->Data[12];
 14094  146D  087D               	movf	_product,w
 14095  146E  3E0C               	addlw	12
 14096  146F  0086               	movwf	6
 14097  1470  3001               	movlw	1	; select bank2/3
 14098  1471  0087               	movwf	7
 14099  1472  0801               	movf	1,w
 14100  1473  00A4               	movwf	??_Flash_Memory_Modify
 14101  1474  0021               	movlb	1	; select bank1
 14102  1475  086A               	movf	_Memory^(0+128),w
 14103  1476  0086               	movwf	6
 14104  1477  3001               	movlw	1	; select bank2/3
 14105  1478  0087               	movwf	7
 14106  1479  0020               	movlb	0	; select bank0
 14107  147A  0824               	movf	??_Flash_Memory_Modify,w
 14108  147B  0081               	movwf	1
 14109                           
 14110                           ;MCU_B1.c: 943: Memory->Data[1]=product->Data[13];
 14111  147C  087D               	movf	_product,w
 14112  147D  3E0D               	addlw	13
 14113  147E  0086               	movwf	6
 14114  147F  3001               	movlw	1	; select bank2/3
 14115  1480  0087               	movwf	7
 14116  1481  0801               	movf	1,w
 14117  1482  00A4               	movwf	??_Flash_Memory_Modify
 14118  1483  0021               	movlb	1	; select bank1
 14119  1484  0A6A               	incf	_Memory^(0+128),w
 14120  1485  0086               	movwf	6
 14121  1486  3001               	movlw	1	; select bank2/3
 14122  1487  0087               	movwf	7
 14123  1488  0020               	movlb	0	; select bank0
 14124  1489  0824               	movf	??_Flash_Memory_Modify,w
 14125  148A  0081               	movwf	1
 14126                           
 14127                           ;MCU_B1.c: 944: Memory->Data[2]=product->Data[14];
 14128  148B  087D               	movf	_product,w
 14129  148C  3E0E               	addlw	14
 14130  148D  0086               	movwf	6
 14131  148E  3001               	movlw	1	; select bank2/3
 14132  148F  0087               	movwf	7
 14133  1490  0801               	movf	1,w
 14134  1491  00A4               	movwf	??_Flash_Memory_Modify
 14135  1492  0021               	movlb	1	; select bank1
 14136  1493  086A               	movf	_Memory^(0+128),w
 14137  1494  3E02               	addlw	2
 14138  1495  0086               	movwf	6
 14139  1496  3001               	movlw	1	; select bank2/3
 14140  1497  0087               	movwf	7
 14141  1498  0020               	movlb	0	; select bank0
 14142  1499  0824               	movf	??_Flash_Memory_Modify,w
 14143  149A  0081               	movwf	1
 14144                           
 14145                           ;MCU_B1.c: 950: if (Memory->LoopSave) {
 14146  149B  0021               	movlb	1	; select bank1
 14147  149C  086A               	movf	_Memory^(0+128),w
 14148  149D  3E22               	addlw	34
 14149  149E  0086               	movwf	6
 14150  149F  3001               	movlw	1	; select bank2/3
 14151  14A0  0087               	movwf	7
 14152  14A1  1D01               	btfss	1,2
 14153  14A2  2CB4               	goto	l8890
 14154                           
 14155                           ;MCU_B1.c: 951: Memory->LoopSave = 0;
 14156  14A3  086A               	movf	_Memory^(0+128),w
 14157  14A4  3E22               	addlw	34
 14158  14A5  0086               	movwf	6
 14159  14A6  3001               	movlw	1	; select bank2/3
 14160  14A7  0087               	movwf	7
 14161  14A8  1101               	bcf	1,2
 14162                           
 14163                           ;MCU_B1.c: 952: myMain->FirstOpen = 0;
 14164  14A9  086D               	movf	_myMain^(0+128),w
 14165  14AA  0086               	movwf	6
 14166  14AB  3001               	movlw	1	; select bank2/3
 14167  14AC  0087               	movwf	7
 14168  14AD  1281               	bcf	1,5
 14169                           
 14170                           ;MCU_B1.c: 953: myMain->First = 0;
 14171  14AE  086D               	movf	_myMain^(0+128),w
 14172  14AF  3E03               	addlw	3
 14173  14B0  0086               	movwf	6
 14174  14B1  3001               	movlw	1	; select bank2/3
 14175  14B2  0087               	movwf	7
 14176  14B3  1081               	bcf	1,1
 14177  14B4                     l8890:	
 14178                           
 14179                           ;MCU_B1.c: 955: }
 14180                           ;MCU_B1.c: 956: GIE = 0;
 14181  14B4  138B               	bcf	11,7	;volatile
 14182                           
 14183                           ;MCU_B1.c: 957: Flash_Memory_Erasing();
 14184  14B5  31A6  26B9  3194   	fcall	_Flash_Memory_Erasing
 14185                           
 14186                           ;MCU_B1.c: 958: Flash_Memory_Write();
 14187  14B8  319C  2478         	fcall	_Flash_Memory_Write
 14188                           
 14189                           ;MCU_B1.c: 959: GIE = 1;
 14190  14BA  178B               	bsf	11,7	;volatile
 14191  14BB  0008               	return
 14192  14BC                     __end_of_Flash_Memory_Modify:	
 14193                           
 14194                           	psect	text83
 14195  26B9                     __ptext83:	
 14196 ;; *************** function _Flash_Memory_Erasing *****************
 14197 ;; Defined at:
 14198 ;;		line 926 in file "../src/MCU_B1.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;		None
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;		None
 14203 ;; Return value:  Size  Location     Type
 14204 ;;		None               void
 14205 ;; Registers used:
 14206 ;;		wreg, status,2, status,0, pclath, cstack
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;Total ram usage:        0 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    5
 14219 ;; This function calls:
 14220 ;;		_Flash_Memory_Unlock
 14221 ;; This function is called by:
 14222 ;;		_Flash_Memory_Modify
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           
 14227                           ;psect for function _Flash_Memory_Erasing
 14228  26B9                     _Flash_Memory_Erasing:	
 14229                           
 14230                           ;MCU_B1.c: 927: CFGS = 0;
 14231                           
 14232                           ;incstack = 0
 14233                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14234  26B9  0023               	movlb	3	; select bank3
 14235  26BA  1315               	bcf	21,6	;volatile
 14236                           
 14237                           ;MCU_B1.c: 928: PMADRH = 0x30;
 14238  26BB  3030               	movlw	48
 14239  26BC  0092               	movwf	18	;volatile
 14240                           
 14241                           ;MCU_B1.c: 929: PMADRL = 0x00;
 14242  26BD  0191               	clrf	17	;volatile
 14243                           
 14244                           ;MCU_B1.c: 930: FREE = 1;
 14245  26BE  1615               	bsf	21,4	;volatile
 14246                           
 14247                           ;MCU_B1.c: 931: WREN = 1;
 14248  26BF  1515               	bsf	21,2	;volatile
 14249                           
 14250                           ;MCU_B1.c: 932: Flash_Memory_Unlock();
 14251  26C0  31A5  25DD         	fcall	_Flash_Memory_Unlock
 14252                           
 14253                           ;MCU_B1.c: 933: WREN = 0;
 14254  26C2  0023               	movlb	3	; select bank3
 14255  26C3  1115               	bcf	21,2	;volatile
 14256  26C4  0008               	return
 14257  26C5                     __end_of_Flash_Memory_Erasing:	
 14258                           
 14259                           	psect	text84
 14260  0DEB                     __ptext84:	
 14261 ;; *************** function _Flash_Memory_Initialization *****************
 14262 ;; Defined at:
 14263 ;;		line 826 in file "../src/MCU_B1.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;		None
 14266 ;; Auto vars:     Size  Location     Type
 14267 ;;  i               1   62[BANK0 ] unsigned char 
 14268 ;; Return value:  Size  Location     Type
 14269 ;;		None               void
 14270 ;; Registers used:
 14271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14272 ;; Tracked objects:
 14273 ;;		On entry : 0/0
 14274 ;;		On exit  : 0/0
 14275 ;;		Unchanged: 0/0
 14276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;Total ram usage:        2 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    7
 14284 ;; This function calls:
 14285 ;;		_Flash_Memory_Read
 14286 ;;		_Flash_Memory_Write
 14287 ;;		_setPercentValue
 14288 ;; This function is called by:
 14289 ;;		_main
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           
 14294                           ;psect for function _Flash_Memory_Initialization
 14295  0DEB                     _Flash_Memory_Initialization:	
 14296                           
 14297                           ;MCU_B1.c: 827: char i;
 14298                           ;MCU_B1.c: 828: if (Flash_Memory_Read(31) == 0xaa) {
 14299                           
 14300                           ;incstack = 0
 14301                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14302  0DEB  301F               	movlw	31
 14303  0DEC  3199  2112  318D   	fcall	_Flash_Memory_Read
 14304  0DEF  3AAA               	xorlw	170
 14305  0DF0  1D03               	skipz
 14306  0DF1  2E64               	goto	l9232
 14307                           
 14308                           ;MCU_B1.c: 829: product->Data[12] = Flash_Memory_Read(0);
 14309  0DF2  3000               	movlw	0
 14310  0DF3  3199  2112  318D   	fcall	_Flash_Memory_Read
 14311  0DF6  0020               	movlb	0	; select bank0
 14312  0DF7  00DD               	movwf	??_Flash_Memory_Initialization
 14313  0DF8  087D               	movf	_product,w
 14314  0DF9  3E0C               	addlw	12
 14315  0DFA  0086               	movwf	6
 14316  0DFB  3001               	movlw	1	; select bank2/3
 14317  0DFC  0087               	movwf	7
 14318  0DFD  085D               	movf	??_Flash_Memory_Initialization,w
 14319  0DFE  0081               	movwf	1
 14320                           
 14321                           ;MCU_B1.c: 830: product->Data[13] = Flash_Memory_Read(1);
 14322  0DFF  3001               	movlw	1
 14323  0E00  3199  2112  318D   	fcall	_Flash_Memory_Read
 14324  0E03  0020               	movlb	0	; select bank0
 14325  0E04  00DD               	movwf	??_Flash_Memory_Initialization
 14326  0E05  087D               	movf	_product,w
 14327  0E06  3E0D               	addlw	13
 14328  0E07  0086               	movwf	6
 14329  0E08  3001               	movlw	1	; select bank2/3
 14330  0E09  0087               	movwf	7
 14331  0E0A  085D               	movf	??_Flash_Memory_Initialization,w
 14332  0E0B  0081               	movwf	1
 14333                           
 14334                           ;MCU_B1.c: 831: product->Data[14] = Flash_Memory_Read(2);
 14335  0E0C  3002               	movlw	2
 14336  0E0D  3199  2112  318D   	fcall	_Flash_Memory_Read
 14337  0E10  0020               	movlb	0	; select bank0
 14338  0E11  00DD               	movwf	??_Flash_Memory_Initialization
 14339  0E12  087D               	movf	_product,w
 14340  0E13  3E0E               	addlw	14
 14341  0E14  0086               	movwf	6
 14342  0E15  3001               	movlw	1	; select bank2/3
 14343  0E16  0087               	movwf	7
 14344  0E17  085D               	movf	??_Flash_Memory_Initialization,w
 14345  0E18  0081               	movwf	1
 14346                           
 14347                           ;MCU_B1.c: 837: i = setPercentValue(((char)((100-55)*1.5)));
 14348  0E19  3043               	movlw	67
 14349  0E1A  319E  2694  318D   	fcall	_setPercentValue
 14350  0E1D  0020               	movlb	0	; select bank0
 14351  0E1E  00DD               	movwf	??_Flash_Memory_Initialization
 14352  0E1F  085D               	movf	??_Flash_Memory_Initialization,w
 14353  0E20  00DE               	movwf	Flash_Memory_Initialization@i
 14354                           
 14355                           ;MCU_B1.c: 838: product->Data[21] = i;
 14356  0E21  085E               	movf	Flash_Memory_Initialization@i,w
 14357  0E22  00DD               	movwf	??_Flash_Memory_Initialization
 14358  0E23  087D               	movf	_product,w
 14359  0E24  3E15               	addlw	21
 14360  0E25  0086               	movwf	6
 14361  0E26  3001               	movlw	1	; select bank2/3
 14362  0E27  0087               	movwf	7
 14363  0E28  085D               	movf	??_Flash_Memory_Initialization,w
 14364  0E29  0081               	movwf	1
 14365                           
 14366                           ;MCU_B1.c: 839: product->Data[22] = i;
 14367  0E2A  085E               	movf	Flash_Memory_Initialization@i,w
 14368  0E2B  00DD               	movwf	??_Flash_Memory_Initialization
 14369  0E2C  087D               	movf	_product,w
 14370  0E2D  3E16               	addlw	22
 14371  0E2E  0086               	movwf	6
 14372  0E2F  3001               	movlw	1	; select bank2/3
 14373  0E30  0087               	movwf	7
 14374  0E31  085D               	movf	??_Flash_Memory_Initialization,w
 14375  0E32  0081               	movwf	1
 14376                           
 14377                           ;MCU_B1.c: 840: product->Data[23] = i;
 14378  0E33  085E               	movf	Flash_Memory_Initialization@i,w
 14379  0E34  00DD               	movwf	??_Flash_Memory_Initialization
 14380  0E35  087D               	movf	_product,w
 14381  0E36  3E17               	addlw	23
 14382  0E37  0086               	movwf	6
 14383  0E38  3001               	movlw	1	; select bank2/3
 14384  0E39  0087               	movwf	7
 14385  0E3A  085D               	movf	??_Flash_Memory_Initialization,w
 14386  0E3B  0081               	movwf	1
 14387                           
 14388                           ;MCU_B1.c: 842: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 14389  0E3C  087D               	movf	_product,w
 14390  0E3D  3E0C               	addlw	12
 14391  0E3E  0086               	movwf	6
 14392  0E3F  3001               	movlw	1	; select bank2/3
 14393  0E40  0087               	movwf	7
 14394  0E41  0801               	movf	1,w
 14395  0E42  3AFF               	xorlw	255
 14396  0E43  1D03               	skipz
 14397  0E44  0008               	return
 14398  0E45  087D               	movf	_product,w
 14399  0E46  3E0D               	addlw	13
 14400  0E47  0086               	movwf	6
 14401  0E48  3001               	movlw	1	; select bank2/3
 14402  0E49  0087               	movwf	7
 14403  0E4A  0801               	movf	1,w
 14404  0E4B  3AFF               	xorlw	255
 14405  0E4C  1D03               	skipz
 14406  0E4D  0008               	return
 14407  0E4E  087D               	movf	_product,w
 14408  0E4F  3E0E               	addlw	14
 14409  0E50  0086               	movwf	6
 14410  0E51  3001               	movlw	1	; select bank2/3
 14411  0E52  0087               	movwf	7
 14412  0E53  0801               	movf	1,w
 14413  0E54  3AFF               	xorlw	255
 14414  0E55  1D03               	skipz
 14415  0E56  0008               	return
 14416                           
 14417                           ;MCU_B1.c: 843: myMain->FirstOpen = 1;
 14418  0E57  0021               	movlb	1	; select bank1
 14419  0E58  086D               	movf	_myMain^(0+128),w
 14420  0E59  0086               	movwf	6
 14421  0E5A  3001               	movlw	1	; select bank2/3
 14422  0E5B  0087               	movwf	7
 14423  0E5C  1681               	bsf	1,5
 14424                           
 14425                           ;MCU_B1.c: 844: myMain->First = 1;
 14426  0E5D  086D               	movf	_myMain^(0+128),w
 14427  0E5E  3E03               	addlw	3
 14428  0E5F  0086               	movwf	6
 14429  0E60  3001               	movlw	1	; select bank2/3
 14430  0E61  0087               	movwf	7
 14431  0E62  1481               	bsf	1,1
 14432                           
 14433                           ;MCU_B1.c: 845: }
 14434                           ;MCU_B1.c: 846: } else {
 14435  0E63  0008               	return
 14436  0E64                     l9232:	
 14437                           
 14438                           ;MCU_B1.c: 847: i = setPercentValue(((char)((100-55)*1.5)));
 14439  0E64  3043               	movlw	67
 14440  0E65  319E  2694  318D   	fcall	_setPercentValue
 14441  0E68  0020               	movlb	0	; select bank0
 14442  0E69  00DD               	movwf	??_Flash_Memory_Initialization
 14443  0E6A  085D               	movf	??_Flash_Memory_Initialization,w
 14444  0E6B  00DE               	movwf	Flash_Memory_Initialization@i
 14445                           
 14446                           ;MCU_B1.c: 848: Memory->Data[0]=0xff;
 14447  0E6C  30FF               	movlw	255
 14448  0E6D  00DD               	movwf	??_Flash_Memory_Initialization
 14449  0E6E  0021               	movlb	1	; select bank1
 14450  0E6F  086A               	movf	_Memory^(0+128),w
 14451  0E70  0086               	movwf	6
 14452  0E71  3001               	movlw	1	; select bank2/3
 14453  0E72  0087               	movwf	7
 14454  0E73  0020               	movlb	0	; select bank0
 14455  0E74  085D               	movf	??_Flash_Memory_Initialization,w
 14456  0E75  0081               	movwf	1
 14457                           
 14458                           ;MCU_B1.c: 849: Memory->Data[1]=0xff;
 14459  0E76  30FF               	movlw	255
 14460  0E77  00DD               	movwf	??_Flash_Memory_Initialization
 14461  0E78  0021               	movlb	1	; select bank1
 14462  0E79  0A6A               	incf	_Memory^(0+128),w
 14463  0E7A  0086               	movwf	6
 14464  0E7B  3001               	movlw	1	; select bank2/3
 14465  0E7C  0087               	movwf	7
 14466  0E7D  0020               	movlb	0	; select bank0
 14467  0E7E  085D               	movf	??_Flash_Memory_Initialization,w
 14468  0E7F  0081               	movwf	1
 14469                           
 14470                           ;MCU_B1.c: 850: Memory->Data[2]=0xff;
 14471  0E80  30FF               	movlw	255
 14472  0E81  00DD               	movwf	??_Flash_Memory_Initialization
 14473  0E82  0021               	movlb	1	; select bank1
 14474  0E83  086A               	movf	_Memory^(0+128),w
 14475  0E84  3E02               	addlw	2
 14476  0E85  0086               	movwf	6
 14477  0E86  3001               	movlw	1	; select bank2/3
 14478  0E87  0087               	movwf	7
 14479  0E88  0020               	movlb	0	; select bank0
 14480  0E89  085D               	movf	??_Flash_Memory_Initialization,w
 14481  0E8A  0081               	movwf	1
 14482                           
 14483                           ;MCU_B1.c: 851: Memory->Data[3]=0xff;
 14484  0E8B  30FF               	movlw	255
 14485  0E8C  00DD               	movwf	??_Flash_Memory_Initialization
 14486  0E8D  0021               	movlb	1	; select bank1
 14487  0E8E  086A               	movf	_Memory^(0+128),w
 14488  0E8F  3E03               	addlw	3
 14489  0E90  0086               	movwf	6
 14490  0E91  3001               	movlw	1	; select bank2/3
 14491  0E92  0087               	movwf	7
 14492  0E93  0020               	movlb	0	; select bank0
 14493  0E94  085D               	movf	??_Flash_Memory_Initialization,w
 14494  0E95  0081               	movwf	1
 14495                           
 14496                           ;MCU_B1.c: 852: Memory->Data[4]=0xff;
 14497  0E96  30FF               	movlw	255
 14498  0E97  00DD               	movwf	??_Flash_Memory_Initialization
 14499  0E98  0021               	movlb	1	; select bank1
 14500  0E99  086A               	movf	_Memory^(0+128),w
 14501  0E9A  3E04               	addlw	4
 14502  0E9B  0086               	movwf	6
 14503  0E9C  3001               	movlw	1	; select bank2/3
 14504  0E9D  0087               	movwf	7
 14505  0E9E  0020               	movlb	0	; select bank0
 14506  0E9F  085D               	movf	??_Flash_Memory_Initialization,w
 14507  0EA0  0081               	movwf	1
 14508                           
 14509                           ;MCU_B1.c: 853: Memory->Data[5]=0xff;
 14510  0EA1  30FF               	movlw	255
 14511  0EA2  00DD               	movwf	??_Flash_Memory_Initialization
 14512  0EA3  0021               	movlb	1	; select bank1
 14513  0EA4  086A               	movf	_Memory^(0+128),w
 14514  0EA5  3E05               	addlw	5
 14515  0EA6  0086               	movwf	6
 14516  0EA7  3001               	movlw	1	; select bank2/3
 14517  0EA8  0087               	movwf	7
 14518  0EA9  0020               	movlb	0	; select bank0
 14519  0EAA  085D               	movf	??_Flash_Memory_Initialization,w
 14520  0EAB  0081               	movwf	1
 14521                           
 14522                           ;MCU_B1.c: 854: Memory->Data[31]=0xaa;
 14523  0EAC  30AA               	movlw	170
 14524  0EAD  00DD               	movwf	??_Flash_Memory_Initialization
 14525  0EAE  0021               	movlb	1	; select bank1
 14526  0EAF  086A               	movf	_Memory^(0+128),w
 14527  0EB0  3E1F               	addlw	31
 14528  0EB1  0086               	movwf	6
 14529  0EB2  3001               	movlw	1	; select bank2/3
 14530  0EB3  0087               	movwf	7
 14531  0EB4  0020               	movlb	0	; select bank0
 14532  0EB5  085D               	movf	??_Flash_Memory_Initialization,w
 14533  0EB6  0081               	movwf	1
 14534                           
 14535                           ;MCU_B1.c: 855: product->Data[21] = i;
 14536  0EB7  085E               	movf	Flash_Memory_Initialization@i,w
 14537  0EB8  00DD               	movwf	??_Flash_Memory_Initialization
 14538  0EB9  087D               	movf	_product,w
 14539  0EBA  3E15               	addlw	21
 14540  0EBB  0086               	movwf	6
 14541  0EBC  3001               	movlw	1	; select bank2/3
 14542  0EBD  0087               	movwf	7
 14543  0EBE  085D               	movf	??_Flash_Memory_Initialization,w
 14544  0EBF  0081               	movwf	1
 14545                           
 14546                           ;MCU_B1.c: 856: product->Data[22] = i;
 14547  0EC0  085E               	movf	Flash_Memory_Initialization@i,w
 14548  0EC1  00DD               	movwf	??_Flash_Memory_Initialization
 14549  0EC2  087D               	movf	_product,w
 14550  0EC3  3E16               	addlw	22
 14551  0EC4  0086               	movwf	6
 14552  0EC5  3001               	movlw	1	; select bank2/3
 14553  0EC6  0087               	movwf	7
 14554  0EC7  085D               	movf	??_Flash_Memory_Initialization,w
 14555  0EC8  0081               	movwf	1
 14556                           
 14557                           ;MCU_B1.c: 857: product->Data[23] = i;
 14558  0EC9  085E               	movf	Flash_Memory_Initialization@i,w
 14559  0ECA  00DD               	movwf	??_Flash_Memory_Initialization
 14560  0ECB  087D               	movf	_product,w
 14561  0ECC  3E17               	addlw	23
 14562  0ECD  0086               	movwf	6
 14563  0ECE  3001               	movlw	1	; select bank2/3
 14564  0ECF  0087               	movwf	7
 14565  0ED0  085D               	movf	??_Flash_Memory_Initialization,w
 14566  0ED1  0081               	movwf	1
 14567                           
 14568                           ;MCU_B1.c: 858: GIE = 0;
 14569  0ED2  138B               	bcf	11,7	;volatile
 14570                           
 14571                           ;MCU_B1.c: 859: Flash_Memory_Write();
 14572  0ED3  319C  2478         	fcall	_Flash_Memory_Write
 14573                           
 14574                           ;MCU_B1.c: 860: GIE = 1;
 14575  0ED5  178B               	bsf	11,7	;volatile
 14576                           
 14577                           ;MCU_B1.c: 861: myMain->FirstOpen = 1;
 14578  0ED6  0021               	movlb	1	; select bank1
 14579  0ED7  086D               	movf	_myMain^(0+128),w
 14580  0ED8  0086               	movwf	6
 14581  0ED9  3001               	movlw	1	; select bank2/3
 14582  0EDA  0087               	movwf	7
 14583  0EDB  1681               	bsf	1,5
 14584                           
 14585                           ;MCU_B1.c: 862: myMain->First = 1;
 14586  0EDC  086D               	movf	_myMain^(0+128),w
 14587  0EDD  3E03               	addlw	3
 14588  0EDE  0086               	movwf	6
 14589  0EDF  3001               	movlw	1	; select bank2/3
 14590  0EE0  0087               	movwf	7
 14591  0EE1  1481               	bsf	1,1
 14592  0EE2  0008               	return
 14593  0EE3                     __end_of_Flash_Memory_Initialization:	
 14594                           
 14595                           	psect	text85
 14596  1C78                     __ptext85:	
 14597 ;; *************** function _Flash_Memory_Write *****************
 14598 ;; Defined at:
 14599 ;;		line 907 in file "../src/MCU_B1.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;		None
 14602 ;; Auto vars:     Size  Location     Type
 14603 ;;  i               1    1[BANK0 ] unsigned char 
 14604 ;; Return value:  Size  Location     Type
 14605 ;;		None               void
 14606 ;; Registers used:
 14607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14608 ;; Tracked objects:
 14609 ;;		On entry : 0/0
 14610 ;;		On exit  : 0/0
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;Total ram usage:        2 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; Hardware stack levels required when called:    5
 14620 ;; This function calls:
 14621 ;;		_Flash_Memory_Unlock
 14622 ;; This function is called by:
 14623 ;;		_Flash_Memory_Initialization
 14624 ;;		_Flash_Memory_Modify
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           
 14629                           ;psect for function _Flash_Memory_Write
 14630  1C78                     _Flash_Memory_Write:	
 14631                           
 14632                           ;MCU_B1.c: 908: char i;
 14633                           ;MCU_B1.c: 909: CFGS = 0;
 14634                           
 14635                           ;incstack = 0
 14636                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14637  1C78  0023               	movlb	3	; select bank3
 14638  1C79  1315               	bcf	21,6	;volatile
 14639                           
 14640                           ;MCU_B1.c: 910: PMADRH = 0x30;
 14641  1C7A  3030               	movlw	48
 14642  1C7B  0092               	movwf	18	;volatile
 14643                           
 14644                           ;MCU_B1.c: 911: PMDATH = 0;
 14645  1C7C  0194               	clrf	20	;volatile
 14646                           
 14647                           ;MCU_B1.c: 912: FREE = 0;
 14648  1C7D  1215               	bcf	21,4	;volatile
 14649                           
 14650                           ;MCU_B1.c: 913: LWLO = 1;
 14651  1C7E  1695               	bsf	21,5	;volatile
 14652                           
 14653                           ;MCU_B1.c: 914: WREN = 1;
 14654  1C7F  1515               	bsf	21,2	;volatile
 14655                           
 14656                           ;MCU_B1.c: 915: for (i = 0; i < 32; i++) {
 14657  1C80  0020               	movlb	0	; select bank0
 14658  1C81  01A1               	clrf	Flash_Memory_Write@i
 14659  1C82  3020               	movlw	32
 14660  1C83  0221               	subwf	Flash_Memory_Write@i,w
 14661  1C84  1803               	btfsc	3,0
 14662  1C85  2CA2               	goto	l1377
 14663  1C86                     l8536:	
 14664                           
 14665                           ;MCU_B1.c: 916: PMADRL = i;
 14666  1C86  0821               	movf	Flash_Memory_Write@i,w
 14667  1C87  0023               	movlb	3	; select bank3
 14668  1C88  0091               	movwf	17	;volatile
 14669                           
 14670                           ;MCU_B1.c: 917: PMDATL = Memory->Data[i];
 14671  1C89  0020               	movlb	0	; select bank0
 14672  1C8A  0821               	movf	Flash_Memory_Write@i,w
 14673  1C8B  0021               	movlb	1	; select bank1
 14674  1C8C  076A               	addwf	_Memory^(0+128),w
 14675  1C8D  0020               	movlb	0	; select bank0
 14676  1C8E  00A0               	movwf	??_Flash_Memory_Write
 14677  1C8F  0820               	movf	??_Flash_Memory_Write,w
 14678  1C90  0086               	movwf	6
 14679  1C91  3001               	movlw	1	; select bank2/3
 14680  1C92  0087               	movwf	7
 14681  1C93  0801               	movf	1,w
 14682  1C94  0023               	movlb	3	; select bank3
 14683  1C95  0093               	movwf	19	;volatile
 14684                           
 14685                           ;MCU_B1.c: 918: Flash_Memory_Unlock();
 14686  1C96  31A5  25DD  319C   	fcall	_Flash_Memory_Unlock
 14687  1C99  3001               	movlw	1
 14688  1C9A  0020               	movlb	0	; select bank0
 14689  1C9B  00A0               	movwf	??_Flash_Memory_Write
 14690  1C9C  0820               	movf	??_Flash_Memory_Write,w
 14691  1C9D  07A1               	addwf	Flash_Memory_Write@i,f
 14692  1C9E  3020               	movlw	32
 14693  1C9F  0221               	subwf	Flash_Memory_Write@i,w
 14694  1CA0  1C03               	skipc
 14695  1CA1  2C86               	goto	l8536
 14696  1CA2                     l1377:	
 14697                           
 14698                           ;MCU_B1.c: 919: }
 14699                           ;MCU_B1.c: 920: LWLO = 0;
 14700  1CA2  0023               	movlb	3	; select bank3
 14701  1CA3  1295               	bcf	21,5	;volatile
 14702                           
 14703                           ;MCU_B1.c: 921: Flash_Memory_Unlock();
 14704  1CA4  31A5  25DD         	fcall	_Flash_Memory_Unlock
 14705                           
 14706                           ;MCU_B1.c: 922: WREN = 0;
 14707  1CA6  0023               	movlb	3	; select bank3
 14708  1CA7  1115               	bcf	21,2	;volatile
 14709  1CA8  0008               	return
 14710  1CA9                     __end_of_Flash_Memory_Write:	
 14711                           
 14712                           	psect	text86
 14713  25DD                     __ptext86:	
 14714 ;; *************** function _Flash_Memory_Unlock *****************
 14715 ;; Defined at:
 14716 ;;		line 886 in file "../src/MCU_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;		None
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;		None
 14721 ;; Return value:  Size  Location     Type
 14722 ;;		None               void
 14723 ;; Registers used:
 14724 ;;		wreg
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;Total ram usage:        0 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:    4
 14737 ;; This function calls:
 14738 ;;		Nothing
 14739 ;; This function is called by:
 14740 ;;		_Flash_Memory_Write
 14741 ;;		_Flash_Memory_Erasing
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _Flash_Memory_Unlock
 14747  25DD                     _Flash_Memory_Unlock:	
 14748                           
 14749                           ;MCU_B1.c: 887: PMCON2 = 0x55;
 14750                           
 14751                           ;incstack = 0
 14752                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14753  25DD  3055               	movlw	85
 14754  25DE  0023               	movlb	3	; select bank3
 14755  25DF  0096               	movwf	22	;volatile
 14756                           
 14757                           ;MCU_B1.c: 888: PMCON2 = 0xaa;
 14758  25E0  30AA               	movlw	170
 14759  25E1  0096               	movwf	22	;volatile
 14760                           
 14761                           ;MCU_B1.c: 889: WR = 1;
 14762  25E2  1495               	bsf	21,1	;volatile
 14763                           
 14764                           ;MCU_B1.c: 890: __nop();
 14765  25E3  0000               	nop
 14766                           
 14767                           ;MCU_B1.c: 891: __nop();
 14768  25E4  0000               	nop
 14769  25E5  0008               	return
 14770  25E6                     __end_of_Flash_Memory_Unlock:	
 14771                           
 14772                           	psect	text87
 14773  1912                     __ptext87:	
 14774 ;; *************** function _Flash_Memory_Read *****************
 14775 ;; Defined at:
 14776 ;;		line 895 in file "../src/MCU_B1.c"
 14777 ;; Parameters:    Size  Location     Type
 14778 ;;  address         1    wreg     unsigned char 
 14779 ;; Auto vars:     Size  Location     Type
 14780 ;;  address         1    2[BANK0 ] unsigned char 
 14781 ;;  ret             1    3[BANK0 ] unsigned char 
 14782 ;;  i               1    1[BANK0 ] unsigned char 
 14783 ;; Return value:  Size  Location     Type
 14784 ;;                  1    wreg      unsigned char 
 14785 ;; Registers used:
 14786 ;;		wreg, status,2
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;Total ram usage:        4 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; Hardware stack levels required when called:    4
 14799 ;; This function calls:
 14800 ;;		Nothing
 14801 ;; This function is called by:
 14802 ;;		_Flash_Memory_Initialization
 14803 ;;		_Flash_Memory_Modify
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           
 14808                           ;psect for function _Flash_Memory_Read
 14809  1912                     _Flash_Memory_Read:	
 14810                           
 14811                           ;incstack = 0
 14812                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14813                           ;Flash_Memory_Read@address stored from wreg
 14814  1912  0020               	movlb	0	; select bank0
 14815  1913  00A2               	movwf	Flash_Memory_Read@address
 14816                           
 14817                           ;MCU_B1.c: 896: char i, ret = 0;
 14818  1914  01A3               	clrf	Flash_Memory_Read@ret
 14819                           
 14820                           ;MCU_B1.c: 897: PMADRH = 0x30;
 14821  1915  3030               	movlw	48
 14822  1916  0023               	movlb	3	; select bank3
 14823  1917  0092               	movwf	18	;volatile
 14824                           
 14825                           ;MCU_B1.c: 898: PMADRL = address;
 14826  1918  0020               	movlb	0	; select bank0
 14827  1919  0822               	movf	Flash_Memory_Read@address,w
 14828  191A  0023               	movlb	3	; select bank3
 14829  191B  0091               	movwf	17	;volatile
 14830                           
 14831                           ;MCU_B1.c: 899: CFGS = 0;
 14832  191C  1315               	bcf	21,6	;volatile
 14833                           
 14834                           ;MCU_B1.c: 900: RD = 1;
 14835  191D  1415               	bsf	21,0	;volatile
 14836                           
 14837                           ;MCU_B1.c: 901: i = PMDATH;
 14838  191E  0814               	movf	20,w	;volatile
 14839  191F  0020               	movlb	0	; select bank0
 14840  1920  00A0               	movwf	??_Flash_Memory_Read
 14841  1921  0820               	movf	??_Flash_Memory_Read,w
 14842  1922  00A1               	movwf	Flash_Memory_Read@i
 14843                           
 14844                           ;MCU_B1.c: 902: ret = PMDATL;
 14845  1923  0023               	movlb	3	; select bank3
 14846  1924  0813               	movf	19,w	;volatile
 14847  1925  0020               	movlb	0	; select bank0
 14848  1926  00A0               	movwf	??_Flash_Memory_Read
 14849  1927  0820               	movf	??_Flash_Memory_Read,w
 14850  1928  00A3               	movwf	Flash_Memory_Read@ret
 14851                           
 14852                           ;MCU_B1.c: 903: return ret;
 14853  1929  0823               	movf	Flash_Memory_Read@ret,w
 14854  192A  0008               	return
 14855  192B                     __end_of_Flash_Memory_Read:	
 14856                           
 14857                           	psect	text88
 14858  25C1                     __ptext88:	
 14859 ;; *************** function _DimmerLights_Main *****************
 14860 ;; Defined at:
 14861 ;;		line 114 in file "../src/Dimmer_B1.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;		None
 14866 ;; Return value:  Size  Location     Type
 14867 ;;		None               void
 14868 ;; Registers used:
 14869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;Total ram usage:        0 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:   10
 14882 ;; This function calls:
 14883 ;;		_DimmerLights_Close
 14884 ;;		_setDimmerLights_Main
 14885 ;; This function is called by:
 14886 ;;		_main
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           
 14891                           ;psect for function _DimmerLights_Main
 14892  25C1                     _DimmerLights_Main:	
 14893                           
 14894                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14898  25C1  3001               	movlw	1
 14899  25C2  3196  260D  31A5   	fcall	_setDimmerLights_Main
 14900                           
 14901                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 14902  25C5  3199  212B         	fcall	_DimmerLights_Close
 14903  25C7  0008               	return
 14904  25C8                     __end_of_DimmerLights_Main:	
 14905                           
 14906                           	psect	text89
 14907  160D                     __ptext89:	
 14908 ;; *************** function _setDimmerLights_Main *****************
 14909 ;; Defined at:
 14910 ;;		line 131 in file "../src/Dimmer_B1.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;  lights          1    wreg     unsigned char 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  lights          1   70[BANK0 ] unsigned char 
 14915 ;;  clear           1   69[BANK0 ] unsigned char 
 14916 ;; Return value:  Size  Location     Type
 14917 ;;		None               void
 14918 ;; Registers used:
 14919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/0
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;Total ram usage:        2 bytes
 14930 ;; Hardware stack levels used:    1
 14931 ;; Hardware stack levels required when called:    9
 14932 ;; This function calls:
 14933 ;;		_DimmerLightsPointSelect
 14934 ;;		_setBuz
 14935 ;;		_setDimmerLights
 14936 ;;		_setDimmerLights_Adj
 14937 ;; This function is called by:
 14938 ;;		_DimmerLights_Main
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           
 14943                           ;psect for function _setDimmerLights_Main
 14944  160D                     _setDimmerLights_Main:	
 14945                           
 14946                           ;incstack = 0
 14947                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14948                           ;setDimmerLights_Main@lights stored from wreg
 14949  160D  0020               	movlb	0	; select bank0
 14950  160E  00E6               	movwf	setDimmerLights_Main@lights
 14951                           
 14952                           ;Dimmer_B1.c: 133: char clear=1;
 14953  160F  01E5               	clrf	setDimmerLights_Main@clear
 14954  1610  0AE5               	incf	setDimmerLights_Main@clear,f
 14955                           
 14956                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 14957  1611  0866               	movf	setDimmerLights_Main@lights,w
 14958  1612  31A6  2617  3196   	fcall	_DimmerLightsPointSelect
 14959                           
 14960                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 14961  1615  0877               	movf	_DimmerLights,w
 14962  1616  3E09               	addlw	9
 14963  1617  0086               	movwf	6
 14964  1618  3001               	movlw	1	; select bank2/3
 14965  1619  0087               	movwf	7
 14966  161A  1C81               	btfss	1,1
 14967  161B  2E4D               	goto	l8804
 14968                           
 14969                           ;Dimmer_B1.c: 163: {
 14970                           ;Dimmer_B1.c: 164: if(clear)
 14971  161C  0020               	movlb	0	; select bank0
 14972  161D  0865               	movf	setDimmerLights_Main@clear,w
 14973  161E  1903               	btfsc	3,2
 14974  161F  0008               	return
 14975                           
 14976                           ;Dimmer_B1.c: 165: {
 14977                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 14978  1620  0877               	movf	_DimmerLights,w
 14979  1621  3E09               	addlw	9
 14980  1622  0086               	movwf	6
 14981  1623  3001               	movlw	1	; select bank2/3
 14982  1624  0087               	movwf	7
 14983  1625  1C01               	btfss	1,0
 14984  1626  2E3A               	goto	l8798
 14985                           
 14986                           ;Dimmer_B1.c: 167: {
 14987                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 14988  1627  0877               	movf	_DimmerLights,w
 14989  1628  3E09               	addlw	9
 14990  1629  0086               	movwf	6
 14991  162A  3001               	movlw	1	; select bank2/3
 14992  162B  0087               	movwf	7
 14993  162C  1081               	bcf	1,1
 14994                           
 14995                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 14996  162D  01A4               	clrf	setDimmerLights@status
 14997  162E  0AA4               	incf	setDimmerLights@status,f
 14998  162F  0866               	movf	setDimmerLights_Main@lights,w
 14999  1630  3189  21C6         	fcall	_setDimmerLights
 15000                           
 15001                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15002  1632  0877               	movf	_DimmerLights,w
 15003  1633  3E0C               	addlw	12
 15004  1634  0086               	movwf	6
 15005  1635  3001               	movlw	1	; select bank2/3
 15006  1636  0087               	movwf	7
 15007  1637  1001               	bcf	1,0
 15008                           
 15009                           ;Dimmer_B1.c: 174: }
 15010  1638  0020               	movlb	0	; select bank0
 15011  1639  0008               	return
 15012  163A                     l8798:	
 15013                           
 15014                           ;Dimmer_B1.c: 175: else
 15015                           ;Dimmer_B1.c: 176: {
 15016                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15017  163A  0877               	movf	_DimmerLights,w
 15018  163B  3E09               	addlw	9
 15019  163C  0086               	movwf	6
 15020  163D  3001               	movlw	1	; select bank2/3
 15021  163E  0087               	movwf	7
 15022  163F  1081               	bcf	1,1
 15023                           
 15024                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15025  1640  0020               	movlb	0	; select bank0
 15026  1641  01A4               	clrf	setDimmerLights@status
 15027  1642  0866               	movf	setDimmerLights_Main@lights,w
 15028  1643  3189  21C6         	fcall	_setDimmerLights
 15029                           
 15030                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15031  1645  0877               	movf	_DimmerLights,w
 15032  1646  3E0C               	addlw	12
 15033  1647  0086               	movwf	6
 15034  1648  3001               	movlw	1	; select bank2/3
 15035  1649  0087               	movwf	7
 15036  164A  1001               	bcf	1,0
 15037  164B  0020               	movlb	0	; select bank0
 15038  164C  0008               	return
 15039  164D                     l8804:	
 15040                           ;Dimmer_B1.c: 183: }
 15041                           ;Dimmer_B1.c: 184: }
 15042                           ;Dimmer_B1.c: 185: }
 15043                           
 15044                           
 15045                           ;Dimmer_B1.c: 186: else
 15046                           ;Dimmer_B1.c: 187: {
 15047                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15048  164D  0877               	movf	_DimmerLights,w
 15049  164E  3E09               	addlw	9
 15050  164F  0086               	movwf	6
 15051  1650  3001               	movlw	1	; select bank2/3
 15052  1651  0087               	movwf	7
 15053  1652  1981               	btfsc	1,3
 15054  1653  2E56               	goto	l8806
 15055  1654  0020               	movlb	0	; select bank0
 15056  1655  0008               	return
 15057  1656                     l8806:	
 15058                           
 15059                           ;Dimmer_B1.c: 189: {
 15060                           ;Dimmer_B1.c: 190: if(clear)
 15061  1656  0020               	movlb	0	; select bank0
 15062  1657  0865               	movf	setDimmerLights_Main@clear,w
 15063  1658  1903               	btfsc	3,2
 15064  1659  0008               	return
 15065                           
 15066                           ;Dimmer_B1.c: 191: {
 15067                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15068  165A  0866               	movf	setDimmerLights_Main@lights,w
 15069  165B  31A6  2617  3196   	fcall	_DimmerLightsPointSelect
 15070                           
 15071                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15072  165E  0877               	movf	_DimmerLights,w
 15073  165F  3E09               	addlw	9
 15074  1660  0086               	movwf	6
 15075  1661  3001               	movlw	1	; select bank2/3
 15076  1662  0087               	movwf	7
 15077  1663  1181               	bcf	1,3
 15078                           
 15079                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15080  1664  0877               	movf	_DimmerLights,w
 15081  1665  3E09               	addlw	9
 15082  1666  0086               	movwf	6
 15083  1667  3001               	movlw	1	; select bank2/3
 15084  1668  0087               	movwf	7
 15085  1669  1D01               	btfss	1,2
 15086  166A  2E7C               	goto	l8816
 15087                           
 15088                           ;Dimmer_B1.c: 195: {
 15089                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15090  166B  0020               	movlb	0	; select bank0
 15091  166C  01E2               	clrf	setDimmerLights_Adj@status
 15092  166D  0AE2               	incf	setDimmerLights_Adj@status,f
 15093  166E  0866               	movf	setDimmerLights_Main@lights,w
 15094  166F  319D  25C7  3196   	fcall	_setDimmerLights_Adj
 15095                           
 15096                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15097  1672  3064               	movlw	100
 15098  1673  0020               	movlb	0	; select bank0
 15099  1674  00A6               	movwf	setBuz@time
 15100  1675  3000               	movlw	0
 15101  1676  00A7               	movwf	setBuz@time+1
 15102  1677  3001               	movlw	1
 15103  1678  3188  2019         	fcall	_setBuz
 15104                           
 15105                           ;Dimmer_B1.c: 198: }
 15106  167A  0020               	movlb	0	; select bank0
 15107  167B  0008               	return
 15108  167C                     l8816:	
 15109                           
 15110                           ;Dimmer_B1.c: 199: else
 15111                           ;Dimmer_B1.c: 200: {
 15112                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15113  167C  0020               	movlb	0	; select bank0
 15114  167D  01E2               	clrf	setDimmerLights_Adj@status
 15115  167E  0866               	movf	setDimmerLights_Main@lights,w
 15116  167F  319D  25C7         	fcall	_setDimmerLights_Adj
 15117  1681  0020               	movlb	0	; select bank0
 15118  1682  0008               	return
 15119  1683                     __end_of_setDimmerLights_Main:	
 15120                           
 15121                           	psect	text90
 15122  1DC7                     __ptext90:	
 15123 ;; *************** function _setDimmerLights_Adj *****************
 15124 ;; Defined at:
 15125 ;;		line 388 in file "../src/Dimmer_B1.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  lights          1    wreg     unsigned char 
 15128 ;;  status          1   66[BANK0 ] unsigned char 
 15129 ;; Auto vars:     Size  Location     Type
 15130 ;;  lights          1   68[BANK0 ] unsigned char 
 15131 ;; Return value:  Size  Location     Type
 15132 ;;		None               void
 15133 ;; Registers used:
 15134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15135 ;; Tracked objects:
 15136 ;;		On entry : 0/0
 15137 ;;		On exit  : 0/0
 15138 ;;		Unchanged: 0/0
 15139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15140 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15144 ;;Total ram usage:        3 bytes
 15145 ;; Hardware stack levels used:    1
 15146 ;; Hardware stack levels required when called:    8
 15147 ;; This function calls:
 15148 ;;		_DimmerLightsPointSelect
 15149 ;;		_setLoad_StatusOff
 15150 ;;		_setRF_DimmerLights
 15151 ;;		_setTxData
 15152 ;; This function is called by:
 15153 ;;		_setDimmerLights_Main
 15154 ;; This function uses a non-reentrant model
 15155 ;;
 15156                           
 15157                           
 15158                           ;psect for function _setDimmerLights_Adj
 15159  1DC7                     _setDimmerLights_Adj:	
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15163                           ;setDimmerLights_Adj@lights stored from wreg
 15164  1DC7  0020               	movlb	0	; select bank0
 15165  1DC8  00E4               	movwf	setDimmerLights_Adj@lights
 15166                           
 15167                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15168  1DC9  0864               	movf	setDimmerLights_Adj@lights,w
 15169  1DCA  31A6  2617  319D   	fcall	_DimmerLightsPointSelect
 15170                           
 15171                           ;Dimmer_B1.c: 391: if(status)
 15172  1DCD  0020               	movlb	0	; select bank0
 15173  1DCE  0862               	movf	setDimmerLights_Adj@status,w
 15174  1DCF  1903               	btfsc	3,2
 15175  1DD0  2DDC               	goto	l8512
 15176                           
 15177                           ;Dimmer_B1.c: 392: {
 15178                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15179  1DD1  0877               	movf	_DimmerLights,w
 15180  1DD2  0086               	movwf	6
 15181  1DD3  3001               	movlw	1	; select bank2/3
 15182  1DD4  0087               	movwf	7
 15183  1DD5  1581               	bsf	1,3
 15184                           
 15185                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15186  1DD6  0877               	movf	_DimmerLights,w
 15187  1DD7  0086               	movwf	6
 15188  1DD8  3001               	movlw	1	; select bank2/3
 15189  1DD9  0087               	movwf	7
 15190  1DDA  1481               	bsf	1,1
 15191                           
 15192                           ;Dimmer_B1.c: 395: }
 15193  1DDB  0008               	return
 15194  1DDC                     l8512:	
 15195                           
 15196                           ;Dimmer_B1.c: 396: else
 15197                           ;Dimmer_B1.c: 397: {
 15198                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15199  1DDC  0877               	movf	_DimmerLights,w
 15200  1DDD  0086               	movwf	6
 15201  1DDE  3001               	movlw	1	; select bank2/3
 15202  1DDF  0087               	movwf	7
 15203  1DE0  1D81               	btfss	1,3
 15204  1DE1  0008               	return
 15205                           
 15206                           ;Dimmer_B1.c: 399: {
 15207                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15208  1DE2  0877               	movf	_DimmerLights,w
 15209  1DE3  0086               	movwf	6
 15210  1DE4  3001               	movlw	1	; select bank2/3
 15211  1DE5  0087               	movwf	7
 15212  1DE6  1081               	bcf	1,1
 15213                           
 15214                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15215  1DE7  0877               	movf	_DimmerLights,w
 15216  1DE8  0086               	movwf	6
 15217  1DE9  3001               	movlw	1	; select bank2/3
 15218  1DEA  0087               	movwf	7
 15219  1DEB  1181               	bcf	1,3
 15220                           
 15221                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15222  1DEC  01A0               	clrf	setLoad_StatusOff@command
 15223  1DED  0AA0               	incf	setLoad_StatusOff@command,f
 15224  1DEE  3000               	movlw	0
 15225  1DEF  319C  2447  319D   	fcall	_setLoad_StatusOff
 15226                           
 15227                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15228  1DF2  0877               	movf	_DimmerLights,w
 15229  1DF3  3E04               	addlw	4
 15230  1DF4  0086               	movwf	6
 15231  1DF5  3001               	movlw	1	; select bank2/3
 15232  1DF6  0087               	movwf	7
 15233  1DF7  0801               	movf	1,w
 15234  1DF8  0020               	movlb	0	; select bank0
 15235  1DF9  00E3               	movwf	??_setDimmerLights_Adj
 15236  1DFA  0877               	movf	_DimmerLights,w
 15237  1DFB  3E05               	addlw	5
 15238  1DFC  0086               	movwf	6
 15239  1DFD  3001               	movlw	1	; select bank2/3
 15240  1DFE  0087               	movwf	7
 15241  1DFF  0863               	movf	??_setDimmerLights_Adj,w
 15242  1E00  0081               	movwf	1
 15243                           
 15244                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15245  1E01  01DD               	clrf	setRF_DimmerLights@on
 15246  1E02  0ADD               	incf	setRF_DimmerLights@on,f
 15247  1E03  0864               	movf	setDimmerLights_Adj@lights,w
 15248  1E04  3193  2377  319D   	fcall	_setRF_DimmerLights
 15249                           
 15250                           ;Dimmer_B1.c: 412: setTxData(1);
 15251  1E07  3001               	movlw	1
 15252  1E08  318A  22F2         	fcall	_setTxData
 15253  1E0A  0008               	return
 15254  1E0B                     __end_of_setDimmerLights_Adj:	
 15255                           
 15256                           	psect	text91
 15257  1C47                     __ptext91:	
 15258 ;; *************** function _setLoad_StatusOff *****************
 15259 ;; Defined at:
 15260 ;;		line 284 in file "../src/OverLoad_B1.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;  lights          1    wreg     unsigned char 
 15263 ;;  command         1    0[BANK0 ] unsigned char 
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  lights          1    1[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;		None               void
 15268 ;; Registers used:
 15269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15275 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;Total ram usage:        2 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:    4
 15282 ;; This function calls:
 15283 ;;		Nothing
 15284 ;; This function is called by:
 15285 ;;		_setDimmerLights_ERROR
 15286 ;;		_setDimmerLights_Adj
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _setLoad_StatusOff
 15292  1C47                     _setLoad_StatusOff:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15296                           ;setLoad_StatusOff@lights stored from wreg
 15297  1C47  0020               	movlb	0	; select bank0
 15298  1C48  00A1               	movwf	setLoad_StatusOff@lights
 15299                           
 15300                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 15301  1C49  087B               	movf	_Load,w
 15302  1C4A  3E46               	addlw	70
 15303  1C4B  0086               	movwf	6
 15304  1C4C  3002               	movlw	2	; select bank4/5
 15305  1C4D  0087               	movwf	7
 15306  1C4E  0820               	movf	setLoad_StatusOff@command,w
 15307  1C4F  1081               	bcf	1,1
 15308  1C50  1D03               	skipz
 15309  1C51  1481               	bsf	1,1
 15310                           
 15311                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 15312  1C52  087B               	movf	_Load,w
 15313  1C53  3E42               	addlw	66
 15314  1C54  0086               	movwf	6
 15315  1C55  3002               	movlw	2	; select bank4/5
 15316  1C56  0087               	movwf	7
 15317  1C57  3002               	movlw	2
 15318  1C58  0281               	subwf	1,f
 15319                           
 15320                           ;OverLoad_B1.c: 287: if (lights == 1) {
 15321  1C59  0821               	movf	setLoad_StatusOff@lights,w
 15322  1C5A  3A01               	xorlw	1
 15323  1C5B  1D03               	skipz
 15324  1C5C  2C63               	goto	l8170
 15325                           
 15326                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 15327  1C5D  087B               	movf	_Load,w
 15328  1C5E  3E43               	addlw	67
 15329  1C5F  0086               	movwf	6
 15330  1C60  3002               	movlw	2	; select bank4/5
 15331  1C61  0087               	movwf	7
 15332  1C62  0181               	clrf	1
 15333  1C63                     l8170:	
 15334                           
 15335                           ;OverLoad_B1.c: 289: }
 15336                           ;OverLoad_B1.c: 290: if (lights == 2) {
 15337  1C63  0821               	movf	setLoad_StatusOff@lights,w
 15338  1C64  3A02               	xorlw	2
 15339  1C65  1D03               	skipz
 15340  1C66  2C6D               	goto	l8174
 15341                           
 15342                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 15343  1C67  087B               	movf	_Load,w
 15344  1C68  3E44               	addlw	68
 15345  1C69  0086               	movwf	6
 15346  1C6A  3002               	movlw	2	; select bank4/5
 15347  1C6B  0087               	movwf	7
 15348  1C6C  0181               	clrf	1
 15349  1C6D                     l8174:	
 15350                           
 15351                           ;OverLoad_B1.c: 292: }
 15352                           ;OverLoad_B1.c: 293: if (lights == 3) {
 15353  1C6D  0821               	movf	setLoad_StatusOff@lights,w
 15354  1C6E  3A03               	xorlw	3
 15355  1C6F  1D03               	skipz
 15356  1C70  0008               	return
 15357                           
 15358                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 15359  1C71  087B               	movf	_Load,w
 15360  1C72  3E45               	addlw	69
 15361  1C73  0086               	movwf	6
 15362  1C74  3002               	movlw	2	; select bank4/5
 15363  1C75  0087               	movwf	7
 15364  1C76  0181               	clrf	1
 15365  1C77  0008               	return
 15366  1C78                     __end_of_setLoad_StatusOff:	
 15367                           
 15368                           	psect	text92
 15369  09C6                     __ptext92:	
 15370 ;; *************** function _setDimmerLights *****************
 15371 ;; Defined at:
 15372 ;;		line 330 in file "../src/Dimmer_B1.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  lights          1    wreg     unsigned char 
 15375 ;;  status          1    4[BANK0 ] unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  lights          1    6[BANK0 ] unsigned char 
 15378 ;; Return value:  Size  Location     Type
 15379 ;;		None               void
 15380 ;; Registers used:
 15381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15382 ;; Tracked objects:
 15383 ;;		On entry : 0/0
 15384 ;;		On exit  : 0/0
 15385 ;;		Unchanged: 0/0
 15386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15387 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;Total ram usage:        3 bytes
 15392 ;; Hardware stack levels used:    1
 15393 ;; Hardware stack levels required when called:    6
 15394 ;; This function calls:
 15395 ;;		_DimmerLightsPointSelect
 15396 ;;		_setLED
 15397 ;;		_setLoad_Count
 15398 ;;		_setLoad_StatusOn
 15399 ;; This function is called by:
 15400 ;;		_setDimmerLights_Main
 15401 ;;		_setControl_Lights_Table
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           
 15406                           ;psect for function _setDimmerLights
 15407  09C6                     _setDimmerLights:	
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15411                           ;setDimmerLights@lights stored from wreg
 15412  09C6  0020               	movlb	0	; select bank0
 15413  09C7  00A6               	movwf	setDimmerLights@lights
 15414                           
 15415                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15416  09C8  0826               	movf	setDimmerLights@lights,w
 15417  09C9  31A6  2617  3189   	fcall	_DimmerLightsPointSelect
 15418                           
 15419                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15420  09CC  0020               	movlb	0	; select bank0
 15421  09CD  0826               	movf	setDimmerLights@lights,w
 15422  09CE  00A5               	movwf	??_setDimmerLights
 15423  09CF  0021               	movlb	1	; select bank1
 15424  09D0  0A3A               	incf	_Dimmer^(0+128),w
 15425  09D1  0086               	movwf	6
 15426  09D2  0187               	clrf	7
 15427  09D3  0020               	movlb	0	; select bank0
 15428  09D4  0825               	movf	??_setDimmerLights,w
 15429  09D5  0081               	movwf	1
 15430                           
 15431                           ;Dimmer_B1.c: 334: if(status)
 15432  09D6  0824               	movf	setDimmerLights@status,w
 15433  09D7  1903               	btfsc	3,2
 15434  09D8  2A30               	goto	l8276
 15435                           
 15436                           ;Dimmer_B1.c: 335: {
 15437                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15438  09D9  0877               	movf	_DimmerLights,w
 15439  09DA  0086               	movwf	6
 15440  09DB  3001               	movlw	1	; select bank2/3
 15441  09DC  0087               	movwf	7
 15442  09DD  1681               	bsf	1,5
 15443                           
 15444                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15445  09DE  01A2               	clrf	setLED@command
 15446  09DF  0826               	movf	setDimmerLights@lights,w
 15447  09E0  3192  2254  3189   	fcall	_setLED
 15448                           
 15449                           ;Dimmer_B1.c: 338: RC7=!0;
 15450  09E3  0020               	movlb	0	; select bank0
 15451  09E4  178E               	bsf	14,7	;volatile
 15452                           
 15453                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15454  09E5  3000               	movlw	0
 15455  09E6  3198  209D  3189   	fcall	_setLoad_Count
 15456                           
 15457                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15458  09E9  0877               	movf	_DimmerLights,w
 15459  09EA  0086               	movwf	6
 15460  09EB  3001               	movlw	1	; select bank2/3
 15461  09EC  0087               	movwf	7
 15462  09ED  1481               	bsf	1,1
 15463                           
 15464                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15465  09EE  3003               	movlw	3
 15466  09EF  0020               	movlb	0	; select bank0
 15467  09F0  00A5               	movwf	??_setDimmerLights
 15468  09F1  0877               	movf	_DimmerLights,w
 15469  09F2  3E02               	addlw	2
 15470  09F3  0086               	movwf	6
 15471  09F4  3001               	movlw	1	; select bank2/3
 15472  09F5  0087               	movwf	7
 15473  09F6  0825               	movf	??_setDimmerLights,w
 15474  09F7  0081               	movwf	1
 15475                           
 15476                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15477  09F8  0877               	movf	_DimmerLights,w
 15478  09F9  0086               	movwf	6
 15479  09FA  3001               	movlw	1	; select bank2/3
 15480  09FB  0087               	movwf	7
 15481  09FC  1B01               	btfsc	1,6
 15482  09FD  0008               	return
 15483                           
 15484                           ;Dimmer_B1.c: 345: {
 15485                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15486  09FE  0877               	movf	_DimmerLights,w
 15487  09FF  0086               	movwf	6
 15488  0A00  3001               	movlw	1	; select bank2/3
 15489  0A01  0087               	movwf	7
 15490  0A02  1701               	bsf	1,6
 15491                           
 15492                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15493  0A03  01A0               	clrf	setLoad_StatusOn@command
 15494  0A04  0AA0               	incf	setLoad_StatusOn@command,f
 15495  0A05  0826               	movf	setDimmerLights@lights,w
 15496  0A06  319C  24A9         	fcall	_setLoad_StatusOn
 15497                           
 15498                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15499  0A08  0021               	movlb	1	; select bank1
 15500  0A09  086A               	movf	_Memory^(0+128),w
 15501  0A0A  3E22               	addlw	34
 15502  0A0B  0086               	movwf	6
 15503  0A0C  3001               	movlw	1	; select bank2/3
 15504  0A0D  0087               	movwf	7
 15505  0A0E  1081               	bcf	1,1
 15506  0A0F  086A               	movf	_Memory^(0+128),w
 15507  0A10  3E23               	addlw	35
 15508  0A11  0086               	movwf	6
 15509  0A12  3001               	movlw	1	; select bank2/3
 15510  0A13  0087               	movwf	7
 15511  0A14  3000               	movlw	0
 15512  0A15  3FC0               	movwi [0]fsr1
 15513  0A16  3FC1               	movwi [1]fsr1
 15514                           
 15515                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15516  0A17  0877               	movf	_DimmerLights,w
 15517  0A18  3E05               	addlw	5
 15518  0A19  0086               	movwf	6
 15519  0A1A  3001               	movlw	1	; select bank2/3
 15520  0A1B  0087               	movwf	7
 15521  0A1C  0801               	movf	1,w
 15522  0A1D  0020               	movlb	0	; select bank0
 15523  0A1E  00A5               	movwf	??_setDimmerLights
 15524  0A1F  0877               	movf	_DimmerLights,w
 15525  0A20  3E04               	addlw	4
 15526  0A21  0086               	movwf	6
 15527  0A22  3001               	movlw	1	; select bank2/3
 15528  0A23  0087               	movwf	7
 15529  0A24  0825               	movf	??_setDimmerLights,w
 15530  0A25  0081               	movwf	1
 15531                           
 15532                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15533  0A26  3043               	movlw	67
 15534  0A27  00A5               	movwf	??_setDimmerLights
 15535  0A28  0877               	movf	_DimmerLights,w
 15536  0A29  3E04               	addlw	4
 15537  0A2A  0086               	movwf	6
 15538  0A2B  3001               	movlw	1	; select bank2/3
 15539  0A2C  0087               	movwf	7
 15540  0A2D  0825               	movf	??_setDimmerLights,w
 15541  0A2E  0081               	movwf	1
 15542                           
 15543                           ;Dimmer_B1.c: 357: }
 15544                           ;Dimmer_B1.c: 358: }
 15545  0A2F  0008               	return
 15546  0A30                     l8276:	
 15547                           
 15548                           ;Dimmer_B1.c: 359: else
 15549                           ;Dimmer_B1.c: 360: {
 15550                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15551  0A30  0877               	movf	_DimmerLights,w
 15552  0A31  0086               	movwf	6
 15553  0A32  3001               	movlw	1	; select bank2/3
 15554  0A33  0087               	movwf	7
 15555  0A34  1281               	bcf	1,5
 15556                           
 15557                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15558  0A35  0877               	movf	_DimmerLights,w
 15559  0A36  3E06               	addlw	6
 15560  0A37  0086               	movwf	6
 15561  0A38  3001               	movlw	1	; select bank2/3
 15562  0A39  0087               	movwf	7
 15563  0A3A  0801               	movf	1,w
 15564  0A3B  00A5               	movwf	??_setDimmerLights
 15565  0A3C  0877               	movf	_DimmerLights,w
 15566  0A3D  3E04               	addlw	4
 15567  0A3E  0086               	movwf	6
 15568  0A3F  3001               	movlw	1	; select bank2/3
 15569  0A40  0087               	movwf	7
 15570  0A41  0825               	movf	??_setDimmerLights,w
 15571  0A42  0081               	movwf	1
 15572                           
 15573                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15574  0A43  0877               	movf	_DimmerLights,w
 15575  0A44  0086               	movwf	6
 15576  0A45  3001               	movlw	1	; select bank2/3
 15577  0A46  0087               	movwf	7
 15578  0A47  1481               	bsf	1,1
 15579                           
 15580                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15581  0A48  0877               	movf	_DimmerLights,w
 15582  0A49  0086               	movwf	6
 15583  0A4A  3001               	movlw	1	; select bank2/3
 15584  0A4B  0087               	movwf	7
 15585  0A4C  1181               	bcf	1,3
 15586                           
 15587                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15588  0A4D  0877               	movf	_DimmerLights,w
 15589  0A4E  0086               	movwf	6
 15590  0A4F  3001               	movlw	1	; select bank2/3
 15591  0A50  0087               	movwf	7
 15592  0A51  1201               	bcf	1,4
 15593                           
 15594                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15595  0A52  3003               	movlw	3
 15596  0A53  00A5               	movwf	??_setDimmerLights
 15597  0A54  0877               	movf	_DimmerLights,w
 15598  0A55  3E02               	addlw	2
 15599  0A56  0086               	movwf	6
 15600  0A57  3001               	movlw	1	; select bank2/3
 15601  0A58  0087               	movwf	7
 15602  0A59  0825               	movf	??_setDimmerLights,w
 15603  0A5A  0081               	movwf	1
 15604  0A5B  0008               	return
 15605  0A5C                     __end_of_setDimmerLights:	
 15606                           
 15607                           	psect	text93
 15608  1CA9                     __ptext93:	
 15609 ;; *************** function _setLoad_StatusOn *****************
 15610 ;; Defined at:
 15611 ;;		line 269 in file "../src/OverLoad_B1.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;  lights          1    wreg     unsigned char 
 15614 ;;  command         1    0[BANK0 ] unsigned char 
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;  lights          1    1[BANK0 ] unsigned char 
 15617 ;; Return value:  Size  Location     Type
 15618 ;;		None               void
 15619 ;; Registers used:
 15620 ;;		wreg, fsr1l, fsr1h
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15626 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;Total ram usage:        2 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    4
 15633 ;; This function calls:
 15634 ;;		Nothing
 15635 ;; This function is called by:
 15636 ;;		_setDimmerLights
 15637 ;; This function uses a non-reentrant model
 15638 ;;
 15639                           
 15640                           
 15641                           ;psect for function _setLoad_StatusOn
 15642  1CA9                     _setLoad_StatusOn:	
 15643                           
 15644                           ;incstack = 0
 15645                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15646                           ;setLoad_StatusOn@lights stored from wreg
 15647  1CA9  0020               	movlb	0	; select bank0
 15648  1CAA  00A1               	movwf	setLoad_StatusOn@lights
 15649                           
 15650                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15651  1CAB  087B               	movf	_Load,w
 15652  1CAC  0086               	movwf	6
 15653  1CAD  3002               	movlw	2	; select bank4/5
 15654  1CAE  0087               	movwf	7
 15655  1CAF  1481               	bsf	1,1
 15656                           
 15657                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15658  1CB0  087B               	movf	_Load,w
 15659  1CB1  3E46               	addlw	70
 15660  1CB2  0086               	movwf	6
 15661  1CB3  3002               	movlw	2	; select bank4/5
 15662  1CB4  0087               	movwf	7
 15663  1CB5  0820               	movf	setLoad_StatusOn@command,w
 15664  1CB6  1001               	bcf	1,0
 15665  1CB7  1D03               	skipz
 15666  1CB8  1401               	bsf	1,0
 15667                           
 15668                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15669  1CB9  0821               	movf	setLoad_StatusOn@lights,w
 15670  1CBA  3A01               	xorlw	1
 15671  1CBB  1D03               	skipz
 15672  1CBC  2CC4               	goto	l8234
 15673                           
 15674                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15675  1CBD  087B               	movf	_Load,w
 15676  1CBE  3E43               	addlw	67
 15677  1CBF  0086               	movwf	6
 15678  1CC0  3002               	movlw	2	; select bank4/5
 15679  1CC1  0087               	movwf	7
 15680  1CC2  0181               	clrf	1
 15681  1CC3  0A81               	incf	1,f
 15682  1CC4                     l8234:	
 15683                           
 15684                           ;OverLoad_B1.c: 275: }
 15685                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15686  1CC4  0821               	movf	setLoad_StatusOn@lights,w
 15687  1CC5  3A02               	xorlw	2
 15688  1CC6  1D03               	skipz
 15689  1CC7  2CCF               	goto	l8238
 15690                           
 15691                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15692  1CC8  087B               	movf	_Load,w
 15693  1CC9  3E44               	addlw	68
 15694  1CCA  0086               	movwf	6
 15695  1CCB  3002               	movlw	2	; select bank4/5
 15696  1CCC  0087               	movwf	7
 15697  1CCD  0181               	clrf	1
 15698  1CCE  0A81               	incf	1,f
 15699  1CCF                     l8238:	
 15700                           
 15701                           ;OverLoad_B1.c: 278: }
 15702                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15703  1CCF  0821               	movf	setLoad_StatusOn@lights,w
 15704  1CD0  3A03               	xorlw	3
 15705  1CD1  1D03               	skipz
 15706  1CD2  0008               	return
 15707                           
 15708                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15709  1CD3  087B               	movf	_Load,w
 15710  1CD4  3E45               	addlw	69
 15711  1CD5  0086               	movwf	6
 15712  1CD6  3002               	movlw	2	; select bank4/5
 15713  1CD7  0087               	movwf	7
 15714  1CD8  0181               	clrf	1
 15715  1CD9  0A81               	incf	1,f
 15716  1CDA  0008               	return
 15717  1CDB                     __end_of_setLoad_StatusOn:	
 15718                           
 15719                           	psect	text94
 15720  189D                     __ptext94:	
 15721 ;; *************** function _setLoad_Count *****************
 15722 ;; Defined at:
 15723 ;;		line 254 in file "../src/OverLoad_B1.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;  command         1    wreg     unsigned char 
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;  command         1    1[BANK0 ] unsigned char 
 15728 ;; Return value:  Size  Location     Type
 15729 ;;		None               void
 15730 ;; Registers used:
 15731 ;;		wreg, fsr1l, fsr1h
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;Total ram usage:        2 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:    4
 15744 ;; This function calls:
 15745 ;;		Nothing
 15746 ;; This function is called by:
 15747 ;;		_setDimmerLights
 15748 ;; This function uses a non-reentrant model
 15749 ;;
 15750                           
 15751                           
 15752                           ;psect for function _setLoad_Count
 15753  189D                     _setLoad_Count:	
 15754                           
 15755                           ;incstack = 0
 15756                           ; Regs used in _setLoad_Count: [wregfsr1]
 15757                           ;setLoad_Count@command stored from wreg
 15758  189D  0020               	movlb	0	; select bank0
 15759  189E  00A1               	movwf	setLoad_Count@command
 15760                           
 15761                           ;OverLoad_B1.c: 255: Load->Count = command;
 15762  189F  0821               	movf	setLoad_Count@command,w
 15763  18A0  00A0               	movwf	??_setLoad_Count
 15764  18A1  087B               	movf	_Load,w
 15765  18A2  3E3A               	addlw	58
 15766  18A3  0086               	movwf	6
 15767  18A4  3002               	movlw	2	; select bank4/5
 15768  18A5  0087               	movwf	7
 15769  18A6  0820               	movf	??_setLoad_Count,w
 15770  18A7  0081               	movwf	1
 15771                           
 15772                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15773  18A8  0821               	movf	setLoad_Count@command,w
 15774  18A9  00A0               	movwf	??_setLoad_Count
 15775  18AA  087B               	movf	_Load,w
 15776  18AB  3E42               	addlw	66
 15777  18AC  0086               	movwf	6
 15778  18AD  3002               	movlw	2	; select bank4/5
 15779  18AE  0087               	movwf	7
 15780  18AF  0820               	movf	??_setLoad_Count,w
 15781  18B0  0081               	movwf	1
 15782  18B1  0008               	return
 15783  18B2                     __end_of_setLoad_Count:	
 15784                           
 15785                           	psect	text95
 15786  1254                     __ptext95:	
 15787 ;; *************** function _setLED *****************
 15788 ;; Defined at:
 15789 ;;		line 74 in file "../src/LED_B1.c"
 15790 ;; Parameters:    Size  Location     Type
 15791 ;;  led             1    wreg     unsigned char 
 15792 ;;  command         1    2[BANK0 ] unsigned char 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  led             1    3[BANK0 ] unsigned char 
 15795 ;; Return value:  Size  Location     Type
 15796 ;;		None               void
 15797 ;; Registers used:
 15798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15804 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;Total ram usage:        2 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    5
 15811 ;; This function calls:
 15812 ;;		_LedPointSelect
 15813 ;; This function is called by:
 15814 ;;		_setDimmerLights_ERROR
 15815 ;;		_setDimmerLights
 15816 ;;		_setLED_Initialization
 15817 ;;		_setLoad_Exceptions
 15818 ;;		_setOverTemp_Exceptions
 15819 ;;		_setPowerFault_Exceptions
 15820 ;;		_setSw_Initialization
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           
 15825                           ;psect for function _setLED
 15826  1254                     _setLED:	
 15827                           
 15828                           ;incstack = 0
 15829                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15830                           ;setLED@led stored from wreg
 15831  1254  0020               	movlb	0	; select bank0
 15832  1255  00A3               	movwf	setLED@led
 15833                           
 15834                           ;LED_B1.c: 76: LedPointSelect(led);
 15835  1256  0823               	movf	setLED@led,w
 15836  1257  319A  2234  3192   	fcall	_LedPointSelect
 15837                           
 15838                           ;LED_B1.c: 77: if(command == 0)
 15839  125A  0020               	movlb	0	; select bank0
 15840  125B  08A2               	movf	setLED@command,f
 15841  125C  1D03               	skipz
 15842  125D  2A70               	goto	l8194
 15843                           
 15844                           ;LED_B1.c: 78: {
 15845                           ;LED_B1.c: 80: if(led == 1)
 15846  125E  0823               	movf	setLED@led,w
 15847  125F  3A01               	xorlw	1
 15848  1260  1D03               	skipz
 15849  1261  2A64               	goto	l8186
 15850                           
 15851                           ;LED_B1.c: 81: {
 15852                           ;LED_B1.c: 85: RA3=1;
 15853  1262  158C               	bsf	12,3	;volatile
 15854                           
 15855                           ;LED_B1.c: 87: }
 15856  1263  0008               	return
 15857  1264                     l8186:	
 15858                           
 15859                           ;LED_B1.c: 90: else if(led == 2)
 15860  1264  0823               	movf	setLED@led,w
 15861  1265  3A02               	xorlw	2
 15862  1266  1D03               	skipz
 15863  1267  2A6A               	goto	l8190
 15864                           
 15865                           ;LED_B1.c: 91: {
 15866                           ;LED_B1.c: 95: RC7=1;
 15867  1268  178E               	bsf	14,7	;volatile
 15868                           
 15869                           ;LED_B1.c: 97: }
 15870  1269  0008               	return
 15871  126A                     l8190:	
 15872                           
 15873                           ;LED_B1.c: 110: else if(led == 99)
 15874  126A  0823               	movf	setLED@led,w
 15875  126B  3A63               	xorlw	99
 15876  126C  1D03               	skipz
 15877  126D  0008               	return
 15878                           
 15879                           ;LED_B1.c: 111: {
 15880                           ;LED_B1.c: 115: RB5=1;
 15881  126E  168D               	bsf	13,5	;volatile
 15882                           
 15883                           ;LED_B1.c: 117: }
 15884                           ;LED_B1.c: 119: }
 15885  126F  0008               	return
 15886  1270                     l8194:	
 15887                           
 15888                           ;LED_B1.c: 120: else if(command == 1)
 15889  1270  0822               	movf	setLED@command,w
 15890  1271  3A01               	xorlw	1
 15891  1272  1D03               	skipz
 15892  1273  2A86               	goto	l8208
 15893                           
 15894                           ;LED_B1.c: 121: {
 15895                           ;LED_B1.c: 123: if(led == 1)
 15896  1274  0823               	movf	setLED@led,w
 15897  1275  3A01               	xorlw	1
 15898  1276  1D03               	skipz
 15899  1277  2A7A               	goto	l8200
 15900                           
 15901                           ;LED_B1.c: 124: {
 15902                           ;LED_B1.c: 128: RA3=0;
 15903  1278  118C               	bcf	12,3	;volatile
 15904                           
 15905                           ;LED_B1.c: 130: }
 15906  1279  0008               	return
 15907  127A                     l8200:	
 15908                           
 15909                           ;LED_B1.c: 133: else if(led == 2)
 15910  127A  0823               	movf	setLED@led,w
 15911  127B  3A02               	xorlw	2
 15912  127C  1D03               	skipz
 15913  127D  2A80               	goto	l8204
 15914                           
 15915                           ;LED_B1.c: 134: {
 15916                           ;LED_B1.c: 138: RC7=0;
 15917  127E  138E               	bcf	14,7	;volatile
 15918                           
 15919                           ;LED_B1.c: 140: }
 15920  127F  0008               	return
 15921  1280                     l8204:	
 15922                           
 15923                           ;LED_B1.c: 153: else if(led == 99)
 15924  1280  0823               	movf	setLED@led,w
 15925  1281  3A63               	xorlw	99
 15926  1282  1D03               	skipz
 15927  1283  0008               	return
 15928                           
 15929                           ;LED_B1.c: 154: {
 15930                           ;LED_B1.c: 158: RB5=0;
 15931  1284  128D               	bcf	13,5	;volatile
 15932                           
 15933                           ;LED_B1.c: 160: }
 15934                           ;LED_B1.c: 162: }
 15935  1285  0008               	return
 15936  1286                     l8208:	
 15937                           
 15938                           ;LED_B1.c: 163: else if(command == 10)
 15939  1286  0822               	movf	setLED@command,w
 15940  1287  3A0A               	xorlw	10
 15941  1288  1D03               	skipz
 15942  1289  2AA8               	goto	l8224
 15943                           
 15944                           ;LED_B1.c: 164: {
 15945                           ;LED_B1.c: 165: LED->GO=0;
 15946  128A  0021               	movlb	1	; select bank1
 15947  128B  083C               	movf	_LED^(0+128),w
 15948  128C  0086               	movwf	6
 15949  128D  0187               	clrf	7
 15950  128E  1081               	bcf	1,1
 15951                           
 15952                           ;LED_B1.c: 166: LED->Time=0;
 15953  128F  0A3C               	incf	_LED^(0+128),w
 15954  1290  0086               	movwf	6
 15955  1291  0187               	clrf	7
 15956  1292  3000               	movlw	0
 15957  1293  3FC0               	movwi [0]fsr1
 15958  1294  3FC1               	movwi [1]fsr1
 15959                           
 15960                           ;LED_B1.c: 168: if(led == 1)
 15961  1295  0020               	movlb	0	; select bank0
 15962  1296  0823               	movf	setLED@led,w
 15963  1297  3A01               	xorlw	1
 15964  1298  1D03               	skipz
 15965  1299  2A9C               	goto	l8216
 15966                           
 15967                           ;LED_B1.c: 169: {
 15968                           ;LED_B1.c: 173: RA3=1;
 15969  129A  158C               	bsf	12,3	;volatile
 15970                           
 15971                           ;LED_B1.c: 175: }
 15972  129B  0008               	return
 15973  129C                     l8216:	
 15974                           
 15975                           ;LED_B1.c: 178: else if(led == 2)
 15976  129C  0823               	movf	setLED@led,w
 15977  129D  3A02               	xorlw	2
 15978  129E  1D03               	skipz
 15979  129F  2AA2               	goto	l8220
 15980                           
 15981                           ;LED_B1.c: 179: {
 15982                           ;LED_B1.c: 183: RC7=1;
 15983  12A0  178E               	bsf	14,7	;volatile
 15984                           
 15985                           ;LED_B1.c: 185: }
 15986  12A1  0008               	return
 15987  12A2                     l8220:	
 15988                           
 15989                           ;LED_B1.c: 198: else if(led == 99)
 15990  12A2  0823               	movf	setLED@led,w
 15991  12A3  3A63               	xorlw	99
 15992  12A4  1D03               	skipz
 15993  12A5  0008               	return
 15994                           
 15995                           ;LED_B1.c: 199: {
 15996                           ;LED_B1.c: 203: RB5=1;
 15997  12A6  168D               	bsf	13,5	;volatile
 15998                           
 15999                           ;LED_B1.c: 205: }
 16000                           ;LED_B1.c: 207: }
 16001  12A7  0008               	return
 16002  12A8                     l8224:	
 16003                           
 16004                           ;LED_B1.c: 208: else if(command == 11)
 16005  12A8  0822               	movf	setLED@command,w
 16006  12A9  3A0B               	xorlw	11
 16007  12AA  1D03               	skipz
 16008  12AB  0008               	return
 16009                           
 16010                           ;LED_B1.c: 209: {
 16011                           ;LED_B1.c: 210: LED->GO=1;
 16012  12AC  0021               	movlb	1	; select bank1
 16013  12AD  083C               	movf	_LED^(0+128),w
 16014  12AE  0086               	movwf	6
 16015  12AF  0187               	clrf	7
 16016  12B0  1481               	bsf	1,1
 16017  12B1  0008               	return
 16018  12B2                     __end_of_setLED:	
 16019                           
 16020                           	psect	text96
 16021  1A34                     __ptext96:	
 16022 ;; *************** function _LedPointSelect *****************
 16023 ;; Defined at:
 16024 ;;		line 7 in file "../src/LED_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  led             1    wreg     unsigned char 
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  led             1    1[BANK0 ] unsigned char 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;		None               void
 16031 ;; Registers used:
 16032 ;;		wreg
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;Total ram usage:        2 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    4
 16045 ;; This function calls:
 16046 ;;		Nothing
 16047 ;; This function is called by:
 16048 ;;		_setLED_Initialization
 16049 ;;		_setLED
 16050 ;;		_setLED_Main
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           
 16055                           ;psect for function _LedPointSelect
 16056  1A34                     _LedPointSelect:	
 16057                           
 16058                           ;incstack = 0
 16059                           ; Regs used in _LedPointSelect: [wreg]
 16060                           ;LedPointSelect@led stored from wreg
 16061  1A34  0020               	movlb	0	; select bank0
 16062  1A35  00A1               	movwf	LedPointSelect@led
 16063                           
 16064                           ;LED_B1.c: 10: if(led == 1)
 16065  1A36  0821               	movf	LedPointSelect@led,w
 16066  1A37  3A01               	xorlw	1
 16067  1A38  1D03               	skipz
 16068  1A39  2A40               	goto	l6046
 16069                           
 16070                           ;LED_B1.c: 11: {
 16071                           ;LED_B1.c: 12: LED=&VarLED1;
 16072  1A3A  30D9               	movlw	_VarLED1& (0+255)
 16073  1A3B  00A0               	movwf	??_LedPointSelect
 16074  1A3C  0820               	movf	??_LedPointSelect,w
 16075  1A3D  0021               	movlb	1	; select bank1
 16076  1A3E  00BC               	movwf	_LED^(0+128)
 16077                           
 16078                           ;LED_B1.c: 13: }
 16079  1A3F  0008               	return
 16080  1A40                     l6046:	
 16081                           
 16082                           ;LED_B1.c: 16: else if(led == 2)
 16083  1A40  0020               	movlb	0	; select bank0
 16084  1A41  0821               	movf	LedPointSelect@led,w
 16085  1A42  3A02               	xorlw	2
 16086  1A43  1D03               	skipz
 16087  1A44  2A4B               	goto	l6050
 16088                           
 16089                           ;LED_B1.c: 17: {
 16090                           ;LED_B1.c: 18: LED=&VarLED2;
 16091  1A45  30DD               	movlw	_VarLED2& (0+255)
 16092  1A46  00A0               	movwf	??_LedPointSelect
 16093  1A47  0820               	movf	??_LedPointSelect,w
 16094  1A48  0021               	movlb	1	; select bank1
 16095  1A49  00BC               	movwf	_LED^(0+128)
 16096                           
 16097                           ;LED_B1.c: 19: }
 16098  1A4A  0008               	return
 16099  1A4B                     l6050:	
 16100                           
 16101                           ;LED_B1.c: 28: else if(led == 99)
 16102  1A4B  0020               	movlb	0	; select bank0
 16103  1A4C  0821               	movf	LedPointSelect@led,w
 16104  1A4D  3A63               	xorlw	99
 16105  1A4E  1D03               	skipz
 16106  1A4F  0008               	return
 16107                           
 16108                           ;LED_B1.c: 29: {
 16109                           ;LED_B1.c: 30: LED=&VarErrLED;
 16110  1A50  30D5               	movlw	_VarErrLED& (0+255)
 16111  1A51  00A0               	movwf	??_LedPointSelect
 16112  1A52  0820               	movf	??_LedPointSelect,w
 16113  1A53  0021               	movlb	1	; select bank1
 16114  1A54  00BC               	movwf	_LED^(0+128)
 16115  1A55  0008               	return
 16116  1A56                     __end_of_LedPointSelect:	
 16117                           
 16118                           	psect	text97
 16119  192B                     __ptext97:	
 16120 ;; *************** function _DimmerLights_Close *****************
 16121 ;; Defined at:
 16122 ;;		line 101 in file "../src/Dimmer_B1.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;		None
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;		None
 16127 ;; Return value:  Size  Location     Type
 16128 ;;		None               void
 16129 ;; Registers used:
 16130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;Total ram usage:        0 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    5
 16143 ;; This function calls:
 16144 ;;		_getDimmerLights_StatusFlag
 16145 ;;		_setLoad_GO
 16146 ;; This function is called by:
 16147 ;;		_DimmerLights_Main
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           
 16152                           ;psect for function _DimmerLights_Close
 16153  192B                     _DimmerLights_Close:	
 16154                           
 16155                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16156                           
 16157                           ;incstack = 0
 16158                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16159  192B  0021               	movlb	1	; select bank1
 16160  192C  083A               	movf	_Dimmer^(0+128),w
 16161  192D  0086               	movwf	6
 16162  192E  0187               	clrf	7
 16163  192F  1C01               	btfss	1,0
 16164  1930  0008               	return
 16165                           
 16166                           ;Dimmer_B1.c: 104: {
 16167                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16168  1931  083A               	movf	_Dimmer^(0+128),w
 16169  1932  0086               	movwf	6
 16170  1933  0187               	clrf	7
 16171  1934  1001               	bcf	1,0
 16172                           
 16173                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16174  1935  31A6  26AD  3199   	fcall	_getDimmerLights_StatusFlag
 16175  1938  3800               	iorlw	0
 16176  1939  1D03               	skipz
 16177  193A  0008               	return
 16178                           
 16179                           ;Dimmer_B1.c: 107: {
 16180                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16181  193B  3000               	movlw	0
 16182  193C  31A6  262D         	fcall	_setLoad_GO
 16183                           
 16184                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16185  193E  0021               	movlb	1	; select bank1
 16186  193F  086A               	movf	_Memory^(0+128),w
 16187  1940  3E22               	addlw	34
 16188  1941  0086               	movwf	6
 16189  1942  3001               	movlw	1	; select bank2/3
 16190  1943  0087               	movwf	7
 16191  1944  1481               	bsf	1,1
 16192  1945  0008               	return
 16193  1946                     __end_of_DimmerLights_Close:	
 16194                           
 16195                           	psect	text98
 16196  262D                     __ptext98:	
 16197 ;; *************** function _setLoad_GO *****************
 16198 ;; Defined at:
 16199 ;;		line 265 in file "../src/OverLoad_B1.c"
 16200 ;; Parameters:    Size  Location     Type
 16201 ;;  command         1    wreg     unsigned char 
 16202 ;; Auto vars:     Size  Location     Type
 16203 ;;  command         1    0[BANK0 ] unsigned char 
 16204 ;; Return value:  Size  Location     Type
 16205 ;;		None               void
 16206 ;; Registers used:
 16207 ;;		wreg, fsr1l, fsr1h
 16208 ;; Tracked objects:
 16209 ;;		On entry : 0/0
 16210 ;;		On exit  : 0/0
 16211 ;;		Unchanged: 0/0
 16212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16217 ;;Total ram usage:        1 bytes
 16218 ;; Hardware stack levels used:    1
 16219 ;; Hardware stack levels required when called:    4
 16220 ;; This function calls:
 16221 ;;		Nothing
 16222 ;; This function is called by:
 16223 ;;		_DimmerLights_Close
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           
 16228                           ;psect for function _setLoad_GO
 16229  262D                     _setLoad_GO:	
 16230                           
 16231                           ;incstack = 0
 16232                           ; Regs used in _setLoad_GO: [wregfsr1]
 16233                           ;setLoad_GO@command stored from wreg
 16234  262D  0020               	movlb	0	; select bank0
 16235  262E  00A0               	movwf	setLoad_GO@command
 16236                           
 16237                           ;OverLoad_B1.c: 266: Load->GO = command;
 16238  262F  087B               	movf	_Load,w
 16239  2630  0086               	movwf	6
 16240  2631  3002               	movlw	2	; select bank4/5
 16241  2632  0087               	movwf	7
 16242  2633  0820               	movf	setLoad_GO@command,w
 16243  2634  1081               	bcf	1,1
 16244  2635  1D03               	skipz
 16245  2636  1481               	bsf	1,1
 16246  2637  0008               	return
 16247  2638                     __end_of_setLoad_GO:	
 16248                           
 16249                           	psect	text99
 16250  26AD                     __ptext99:	
 16251 ;; *************** function _getDimmerLights_StatusFlag *****************
 16252 ;; Defined at:
 16253 ;;		line 208 in file "../src/Dimmer_B1.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;		None
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  Status          1    0[BANK0 ] unsigned char 
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      unsigned char 
 16260 ;; Registers used:
 16261 ;;		wreg, fsr1l, fsr1h, status,2
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;Total ram usage:        1 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; Hardware stack levels required when called:    4
 16274 ;; This function calls:
 16275 ;;		Nothing
 16276 ;; This function is called by:
 16277 ;;		_DimmerLights_Close
 16278 ;;		_DimmerLights_Exceptions
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           
 16283                           ;psect for function _getDimmerLights_StatusFlag
 16284  26AD                     _getDimmerLights_StatusFlag:	
 16285                           
 16286                           ;Dimmer_B1.c: 210: char Status=0;
 16287                           
 16288                           ;incstack = 0
 16289                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16290  26AD  0020               	movlb	0	; select bank0
 16291  26AE  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16292                           
 16293                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16294  26AF  0878               	movf	_DimmerLights11,w
 16295  26B0  0086               	movwf	6
 16296  26B1  3001               	movlw	1	; select bank2/3
 16297  26B2  0087               	movwf	7
 16298  26B3  3000               	movlw	0
 16299  26B4  1B01               	btfsc	1,6
 16300  26B5  3001               	movlw	1
 16301  26B6  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16302                           
 16303                           ;Dimmer_B1.c: 224: return Status;
 16304  26B7  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16305  26B8  0008               	return
 16306  26B9                     __end_of_getDimmerLights_StatusFlag:	
 16307                           
 16308                           	psect	text100
 16309  26A1                     __ptext100:	
 16310 ;; *************** function _DimmerLights_Initialization *****************
 16311 ;; Defined at:
 16312 ;;		line 41 in file "../src/Dimmer_B1.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;		None               void
 16319 ;; Registers used:
 16320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;Total ram usage:        1 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    6
 16333 ;; This function calls:
 16334 ;;		_Dimmer_Initialization
 16335 ;;		_setDimmerLights_Initialization
 16336 ;; This function is called by:
 16337 ;;		_main
 16338 ;; This function uses a non-reentrant model
 16339 ;;
 16340                           
 16341                           
 16342                           ;psect for function _DimmerLights_Initialization
 16343  26A1                     _DimmerLights_Initialization:	
 16344                           
 16345                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16346                           
 16347                           ;incstack = 0
 16348                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16349  26A1  3031               	movlw	_DimmerLights1& (0+255)
 16350  26A2  0020               	movlb	0	; select bank0
 16351  26A3  00A4               	movwf	??_DimmerLights_Initialization
 16352  26A4  0824               	movf	??_DimmerLights_Initialization,w
 16353  26A5  00F8               	movwf	_DimmerLights11
 16354                           
 16355                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16356  26A6  3001               	movlw	1
 16357  26A7  319B  23BA  31A6   	fcall	_setDimmerLights_Initialization
 16358                           
 16359                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16360  26AA  31A5  25BA         	fcall	_Dimmer_Initialization
 16361  26AC  0008               	return
 16362  26AD                     __end_of_DimmerLights_Initialization:	
 16363                           
 16364                           	psect	text101
 16365  1BBA                     __ptext101:	
 16366 ;; *************** function _setDimmerLights_Initialization *****************
 16367 ;; Defined at:
 16368 ;;		line 63 in file "../src/Dimmer_B1.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  lights          1    wreg     unsigned char 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  lights          1    3[BANK0 ] unsigned char 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;		None               void
 16375 ;; Registers used:
 16376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;Total ram usage:        2 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    5
 16389 ;; This function calls:
 16390 ;;		_DimmerLightsPointSelect
 16391 ;; This function is called by:
 16392 ;;		_DimmerLights_Initialization
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           
 16397                           ;psect for function _setDimmerLights_Initialization
 16398  1BBA                     _setDimmerLights_Initialization:	
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16402                           ;setDimmerLights_Initialization@lights stored from wreg
 16403  1BBA  0020               	movlb	0	; select bank0
 16404  1BBB  00A3               	movwf	setDimmerLights_Initialization@lights
 16405                           
 16406                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16407  1BBC  0823               	movf	setDimmerLights_Initialization@lights,w
 16408  1BBD  31A6  2617         	fcall	_DimmerLightsPointSelect
 16409                           
 16410                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16411  1BBF  0877               	movf	_DimmerLights,w
 16412  1BC0  3E0C               	addlw	12
 16413  1BC1  0086               	movwf	6
 16414  1BC2  3001               	movlw	1	; select bank2/3
 16415  1BC3  0087               	movwf	7
 16416  1BC4  1401               	bsf	1,0
 16417                           
 16418                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16419  1BC5  3043               	movlw	67
 16420  1BC6  0020               	movlb	0	; select bank0
 16421  1BC7  00A2               	movwf	??_setDimmerLights_Initialization
 16422  1BC8  0877               	movf	_DimmerLights,w
 16423  1BC9  3E05               	addlw	5
 16424  1BCA  0086               	movwf	6
 16425  1BCB  3001               	movlw	1	; select bank2/3
 16426  1BCC  0087               	movwf	7
 16427  1BCD  0822               	movf	??_setDimmerLights_Initialization,w
 16428  1BCE  0081               	movwf	1
 16429                           
 16430                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16431  1BCF  3078               	movlw	120
 16432  1BD0  00A2               	movwf	??_setDimmerLights_Initialization
 16433  1BD1  0877               	movf	_DimmerLights,w
 16434  1BD2  3E06               	addlw	6
 16435  1BD3  0086               	movwf	6
 16436  1BD4  3001               	movlw	1	; select bank2/3
 16437  1BD5  0087               	movwf	7
 16438  1BD6  0822               	movf	??_setDimmerLights_Initialization,w
 16439  1BD7  0081               	movwf	1
 16440                           
 16441                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16442  1BD8  0877               	movf	_DimmerLights,w
 16443  1BD9  3E06               	addlw	6
 16444  1BDA  0086               	movwf	6
 16445  1BDB  3001               	movlw	1	; select bank2/3
 16446  1BDC  0087               	movwf	7
 16447  1BDD  0801               	movf	1,w
 16448  1BDE  00A2               	movwf	??_setDimmerLights_Initialization
 16449  1BDF  0877               	movf	_DimmerLights,w
 16450  1BE0  3E04               	addlw	4
 16451  1BE1  0086               	movwf	6
 16452  1BE2  3001               	movlw	1	; select bank2/3
 16453  1BE3  0087               	movwf	7
 16454  1BE4  0822               	movf	??_setDimmerLights_Initialization,w
 16455  1BE5  0081               	movwf	1
 16456  1BE6  0008               	return
 16457  1BE7                     __end_of_setDimmerLights_Initialization:	
 16458                           
 16459                           	psect	text102
 16460  25BA                     __ptext102:	
 16461 ;; *************** function _Dimmer_Initialization *****************
 16462 ;; Defined at:
 16463 ;;		line 520 in file "../src/Dimmer_B1.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;		None
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;		None
 16468 ;; Return value:  Size  Location     Type
 16469 ;;		None               void
 16470 ;; Registers used:
 16471 ;;		wreg
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;Total ram usage:        1 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    4
 16484 ;; This function calls:
 16485 ;;		Nothing
 16486 ;; This function is called by:
 16487 ;;		_DimmerLights_Initialization
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function _Dimmer_Initialization
 16493  25BA                     _Dimmer_Initialization:	
 16494                           
 16495                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in _Dimmer_Initialization: [wreg]
 16499  25BA  30E1               	movlw	_Dimmer1& (0+255)
 16500  25BB  0020               	movlb	0	; select bank0
 16501  25BC  00A0               	movwf	??_Dimmer_Initialization
 16502  25BD  0820               	movf	??_Dimmer_Initialization,w
 16503  25BE  0021               	movlb	1	; select bank1
 16504  25BF  00BA               	movwf	_Dimmer^(0+128)
 16505  25C0  0008               	return
 16506  25C1                     __end_of_Dimmer_Initialization:	
 16507                           
 16508                           	psect	text103
 16509  258F                     __ptext103:	
 16510 ;; *************** function _DelayOff_Main *****************
 16511 ;; Defined at:
 16512 ;;		line 41 in file "../src/DelayOff_B1.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;		None
 16515 ;; Auto vars:     Size  Location     Type
 16516 ;;		None
 16517 ;; Return value:  Size  Location     Type
 16518 ;;		None               void
 16519 ;; Registers used:
 16520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16521 ;; Tracked objects:
 16522 ;;		On entry : 0/0
 16523 ;;		On exit  : 0/0
 16524 ;;		Unchanged: 0/0
 16525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;Total ram usage:        0 bytes
 16531 ;; Hardware stack levels used:    1
 16532 ;; Hardware stack levels required when called:    9
 16533 ;; This function calls:
 16534 ;;		_DlyOff_Main
 16535 ;; This function is called by:
 16536 ;;		_main
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           
 16541                           ;psect for function _DelayOff_Main
 16542  258F                     _DelayOff_Main:	
 16543                           
 16544                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16545                           
 16546                           ;incstack = 0
 16547                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16548  258F  3001               	movlw	1
 16549  2590  3196  2683         	fcall	_DlyOff_Main
 16550  2592  0008               	return
 16551  2593                     __end_of_DelayOff_Main:	
 16552                           
 16553                           	psect	text104
 16554  1683                     __ptext104:	
 16555 ;; *************** function _DlyOff_Main *****************
 16556 ;; Defined at:
 16557 ;;		line 62 in file "../src/DelayOff_B1.c"
 16558 ;; Parameters:    Size  Location     Type
 16559 ;;  sw              1    wreg     unsigned char 
 16560 ;; Auto vars:     Size  Location     Type
 16561 ;;  sw              1   68[BANK0 ] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;		None               void
 16564 ;; Registers used:
 16565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;Total ram usage:        3 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    8
 16578 ;; This function calls:
 16579 ;;		_DelayOffPointSelect
 16580 ;;		_setBuz
 16581 ;;		_setDimmerLights_Switch
 16582 ;;		_setDimmerLights_Trigger
 16583 ;;		_setRFSW_Status
 16584 ;;		_setRF_DimmerLights
 16585 ;;		_setSw_Status
 16586 ;;		_setTxData
 16587 ;; This function is called by:
 16588 ;;		_DelayOff_Main
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _DlyOff_Main
 16594  1683                     _DlyOff_Main:	
 16595                           
 16596                           ;incstack = 0
 16597                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16598                           ;DlyOff_Main@sw stored from wreg
 16599  1683  0020               	movlb	0	; select bank0
 16600  1684  00E4               	movwf	DlyOff_Main@sw
 16601                           
 16602                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16603  1685  0864               	movf	DlyOff_Main@sw,w
 16604  1686  31A6  267D  3196   	fcall	_DelayOffPointSelect
 16605                           
 16606                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 16607  1689  0021               	movlb	1	; select bank1
 16608  168A  0839               	movf	_DelayOff^(0+128),w
 16609  168B  0086               	movwf	6
 16610  168C  0187               	clrf	7
 16611  168D  1C81               	btfss	1,1
 16612  168E  0008               	return
 16613                           
 16614                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16615  168F  0839               	movf	_DelayOff^(0+128),w
 16616  1690  3E02               	addlw	2
 16617  1691  0086               	movwf	6
 16618  1692  0187               	clrf	7
 16619  1693  3001               	movlw	1
 16620  1694  0781               	addwf	1,f
 16621  1695  3141               	addfsr 1,1
 16622  1696  1803               	skipnc
 16623  1697  0A81               	incf	1,f
 16624                           
 16625                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 16626  1698  0839               	movf	_DelayOff^(0+128),w
 16627  1699  3E02               	addlw	2
 16628  169A  0086               	movwf	6
 16629  169B  0187               	clrf	7
 16630  169C  3F40               	moviw [0]fsr1
 16631  169D  0020               	movlb	0	; select bank0
 16632  169E  00E2               	movwf	??_DlyOff_Main
 16633  169F  3F41               	moviw [1]fsr1
 16634  16A0  00E3               	movwf	??_DlyOff_Main+1
 16635  16A1  3015               	movlw	21
 16636  16A2  0263               	subwf	??_DlyOff_Main+1,w
 16637  16A3  30E0               	movlw	224
 16638  16A4  1903               	skipnz
 16639  16A5  0262               	subwf	??_DlyOff_Main,w
 16640  16A6  1C03               	skipc
 16641  16A7  0008               	return
 16642                           
 16643                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16644  16A8  0021               	movlb	1	; select bank1
 16645  16A9  0839               	movf	_DelayOff^(0+128),w
 16646  16AA  3E02               	addlw	2
 16647  16AB  0086               	movwf	6
 16648  16AC  0187               	clrf	7
 16649  16AD  3000               	movlw	0
 16650  16AE  3FC0               	movwi [0]fsr1
 16651  16AF  3FC1               	movwi [1]fsr1
 16652                           
 16653                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16654  16B0  3001               	movlw	1
 16655  16B1  0020               	movlb	0	; select bank0
 16656  16B2  00E2               	movwf	??_DlyOff_Main
 16657  16B3  0021               	movlb	1	; select bank1
 16658  16B4  0839               	movf	_DelayOff^(0+128),w
 16659  16B5  3E04               	addlw	4
 16660  16B6  0086               	movwf	6
 16661  16B7  0187               	clrf	7
 16662  16B8  0020               	movlb	0	; select bank0
 16663  16B9  0862               	movf	??_DlyOff_Main,w
 16664  16BA  0781               	addwf	1,f
 16665                           
 16666                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16667  16BB  0021               	movlb	1	; select bank1
 16668  16BC  0839               	movf	_DelayOff^(0+128),w
 16669  16BD  3E04               	addlw	4
 16670  16BE  0086               	movwf	6
 16671  16BF  0187               	clrf	7
 16672  16C0  0A39               	incf	_DelayOff^(0+128),w
 16673  16C1  0084               	movwf	4
 16674  16C2  0185               	clrf	5
 16675  16C3  0800               	movf	0,w
 16676  16C4  0201               	subwf	1,w
 16677  16C5  1C03               	skipc
 16678  16C6  0008               	return
 16679                           
 16680                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16681  16C7  0839               	movf	_DelayOff^(0+128),w
 16682  16C8  3E04               	addlw	4
 16683  16C9  0086               	movwf	6
 16684  16CA  0187               	clrf	7
 16685  16CB  0181               	clrf	1
 16686                           
 16687                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16688  16CC  0839               	movf	_DelayOff^(0+128),w
 16689  16CD  0086               	movwf	6
 16690  16CE  0187               	clrf	7
 16691  16CF  1081               	bcf	1,1
 16692                           
 16693                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 16694  16D0  0020               	movlb	0	; select bank0
 16695  16D1  01A2               	clrf	setSw_Status@command
 16696  16D2  0864               	movf	DlyOff_Main@sw,w
 16697  16D3  31A7  2722  3196   	fcall	_setSw_Status
 16698                           
 16699                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 16700  16D6  0020               	movlb	0	; select bank0
 16701  16D7  01A2               	clrf	setRFSW_Status@command
 16702  16D8  0864               	movf	DlyOff_Main@sw,w
 16703  16D9  31A7  2713  3196   	fcall	_setRFSW_Status
 16704                           
 16705                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 16706  16DC  0020               	movlb	0	; select bank0
 16707  16DD  01DD               	clrf	setRF_DimmerLights@on
 16708  16DE  0864               	movf	DlyOff_Main@sw,w
 16709  16DF  3193  2377  3196   	fcall	_setRF_DimmerLights
 16710                           
 16711                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 16712  16E2  0020               	movlb	0	; select bank0
 16713  16E3  01A2               	clrf	setDimmerLights_Trigger@command
 16714  16E4  0AA2               	incf	setDimmerLights_Trigger@command,f
 16715  16E5  0864               	movf	DlyOff_Main@sw,w
 16716  16E6  31A7  277E  3196   	fcall	_setDimmerLights_Trigger
 16717                           
 16718                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 16719  16E9  0020               	movlb	0	; select bank0
 16720  16EA  01A2               	clrf	setDimmerLights_Switch@command
 16721  16EB  0864               	movf	DlyOff_Main@sw,w
 16722  16EC  31A7  276E  3196   	fcall	_setDimmerLights_Switch
 16723                           
 16724                           ;DelayOff_B1.c: 77: setTxData(1);
 16725  16EF  3001               	movlw	1
 16726  16F0  318A  22F2  3196   	fcall	_setTxData
 16727                           
 16728                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 16729  16F3  3064               	movlw	100
 16730  16F4  0020               	movlb	0	; select bank0
 16731  16F5  00A6               	movwf	setBuz@time
 16732  16F6  3000               	movlw	0
 16733  16F7  00A7               	movwf	setBuz@time+1
 16734  16F8  3001               	movlw	1
 16735  16F9  3188  2019         	fcall	_setBuz
 16736  16FB  0008               	return
 16737  16FC                     __end_of_DlyOff_Main:	
 16738                           
 16739                           	psect	text105
 16740  0AF2                     __ptext105:	
 16741 ;; *************** function _setTxData *****************
 16742 ;; Defined at:
 16743 ;;		line 131 in file "../src/RF_Control_B1.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;  rf              1    wreg     unsigned char 
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;  rf              1    3[BANK0 ] unsigned char 
 16748 ;;  i               1    0        unsigned char 
 16749 ;; Return value:  Size  Location     Type
 16750 ;;		None               void
 16751 ;; Registers used:
 16752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        2 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    5
 16765 ;; This function calls:
 16766 ;;		_RfPointSelect
 16767 ;; This function is called by:
 16768 ;;		_DlyOff_Main
 16769 ;;		_setDimmerLights_Adj
 16770 ;;		_setControl_Lights_Table
 16771 ;;		_setRFSW_Control
 16772 ;;		_setRFSW_AdjControl
 16773 ;;		_Sw_DimmerOnFunc
 16774 ;;		_Sw_DimmerOffFunc
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           
 16779                           ;psect for function _setTxData
 16780  0AF2                     _setTxData:	
 16781                           
 16782                           ;incstack = 0
 16783                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16784                           ;setTxData@rf stored from wreg
 16785  0AF2  0020               	movlb	0	; select bank0
 16786  0AF3  00A3               	movwf	setTxData@rf
 16787                           
 16788                           ;RF_Control_B1.c: 132: char i;
 16789                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 16790  0AF4  0823               	movf	setTxData@rf,w
 16791  0AF5  31A6  2695  318A   	fcall	_RfPointSelect
 16792                           
 16793                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 16794  0AF8  0021               	movlb	1	; select bank1
 16795  0AF9  083E               	movf	_RF^(0+128),w
 16796  0AFA  0086               	movwf	6
 16797  0AFB  0187               	clrf	7
 16798  0AFC  1C01               	btfss	1,0
 16799  0AFD  0008               	return
 16800                           
 16801                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 16802  0AFE  083E               	movf	_RF^(0+128),w
 16803  0AFF  0086               	movwf	6
 16804  0B00  0187               	clrf	7
 16805  0B01  1901               	btfsc	1,2
 16806  0B02  0008               	return
 16807                           
 16808                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 16809  0B03  083E               	movf	_RF^(0+128),w
 16810  0B04  0086               	movwf	6
 16811  0B05  0187               	clrf	7
 16812  0B06  1501               	bsf	1,2
 16813                           
 16814                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 16815  0B07  3063               	movlw	99
 16816  0B08  0020               	movlb	0	; select bank0
 16817  0B09  00A2               	movwf	??_setTxData
 16818  0B0A  0822               	movf	??_setTxData,w
 16819  0B0B  0021               	movlb	1	; select bank1
 16820  0B0C  00A0               	movwf	_RF_Data^(0+128)
 16821                           
 16822                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 16823  0B0D  3002               	movlw	2
 16824  0B0E  0020               	movlb	0	; select bank0
 16825  0B0F  00A2               	movwf	??_setTxData
 16826  0B10  0822               	movf	??_setTxData,w
 16827  0B11  0021               	movlb	1	; select bank1
 16828  0B12  00A1               	movwf	(_RF_Data^(0+128)+1)
 16829                           
 16830                           ;RF_Control_B1.c: 148: RF_Data[2] = product->Data[2];
 16831  0B13  087D               	movf	_product,w
 16832  0B14  0086               	movwf	6
 16833  0B15  3001               	movlw	1	; select bank2/3
 16834  0B16  0087               	movwf	7
 16835  0B17  3001               	movlw	1	; select bank2/3
 16836  0B18  3F42               	moviw [2]fsr1
 16837  0B19  00A2               	movwf	(_RF_Data^(0+128)+2)
 16838                           
 16839                           ;RF_Control_B1.c: 149: RF_Data[3] = product->Data[3];
 16840  0B1A  087D               	movf	_product,w
 16841  0B1B  0086               	movwf	6
 16842  0B1C  3001               	movlw	1	; select bank2/3
 16843  0B1D  0087               	movwf	7
 16844  0B1E  3001               	movlw	1	; select bank2/3
 16845  0B1F  3F43               	moviw [3]fsr1
 16846  0B20  00A3               	movwf	(_RF_Data^(0+128)+3)
 16847                           
 16848                           ;RF_Control_B1.c: 150: RF_Data[4] = product->Data[4];
 16849  0B21  087D               	movf	_product,w
 16850  0B22  0086               	movwf	6
 16851  0B23  3001               	movlw	1	; select bank2/3
 16852  0B24  0087               	movwf	7
 16853  0B25  3001               	movlw	1	; select bank2/3
 16854  0B26  3F44               	moviw [4]fsr1
 16855  0B27  00A4               	movwf	(_RF_Data^(0+128)+4)
 16856                           
 16857                           ;RF_Control_B1.c: 151: RF_Data[5] = product->Data[5];
 16858  0B28  087D               	movf	_product,w
 16859  0B29  0086               	movwf	6
 16860  0B2A  3001               	movlw	1	; select bank2/3
 16861  0B2B  0087               	movwf	7
 16862  0B2C  3001               	movlw	1	; select bank2/3
 16863  0B2D  3F45               	moviw [5]fsr1
 16864  0B2E  00A5               	movwf	(_RF_Data^(0+128)+5)
 16865                           
 16866                           ;RF_Control_B1.c: 152: RF_Data[6] = product->Data[6];
 16867  0B2F  087D               	movf	_product,w
 16868  0B30  0086               	movwf	6
 16869  0B31  3001               	movlw	1	; select bank2/3
 16870  0B32  0087               	movwf	7
 16871  0B33  3001               	movlw	1	; select bank2/3
 16872  0B34  3F46               	moviw [6]fsr1
 16873  0B35  00A6               	movwf	(_RF_Data^(0+128)+6)
 16874                           
 16875                           ;RF_Control_B1.c: 153: RF_Data[7] = product->Data[7];
 16876  0B36  087D               	movf	_product,w
 16877  0B37  0086               	movwf	6
 16878  0B38  3001               	movlw	1	; select bank2/3
 16879  0B39  0087               	movwf	7
 16880  0B3A  3001               	movlw	1	; select bank2/3
 16881  0B3B  3F47               	moviw [7]fsr1
 16882  0B3C  00A7               	movwf	(_RF_Data^(0+128)+7)
 16883                           
 16884                           ;RF_Control_B1.c: 154: RF_Data[8] = product->Data[8];
 16885  0B3D  087D               	movf	_product,w
 16886  0B3E  0086               	movwf	6
 16887  0B3F  3001               	movlw	1	; select bank2/3
 16888  0B40  0087               	movwf	7
 16889  0B41  3001               	movlw	1	; select bank2/3
 16890  0B42  3F48               	moviw [8]fsr1
 16891  0B43  00A8               	movwf	(_RF_Data^(0+128)+8)
 16892                           
 16893                           ;RF_Control_B1.c: 155: RF_Data[9] = product->Data[9];
 16894  0B44  087D               	movf	_product,w
 16895  0B45  0086               	movwf	6
 16896  0B46  3001               	movlw	1	; select bank2/3
 16897  0B47  0087               	movwf	7
 16898  0B48  3001               	movlw	1	; select bank2/3
 16899  0B49  3F49               	moviw [9]fsr1
 16900  0B4A  00A9               	movwf	(_RF_Data^(0+128)+9)
 16901                           
 16902                           ;RF_Control_B1.c: 156: RF_Data[10] = product->Data[10];
 16903  0B4B  087D               	movf	_product,w
 16904  0B4C  0086               	movwf	6
 16905  0B4D  3001               	movlw	1	; select bank2/3
 16906  0B4E  0087               	movwf	7
 16907  0B4F  3001               	movlw	1	; select bank2/3
 16908  0B50  3F4A               	moviw [10]fsr1
 16909  0B51  00AA               	movwf	(_RF_Data^(0+128)+10)
 16910                           
 16911                           ;RF_Control_B1.c: 157: RF_Data[11] = product->Data[11];
 16912  0B52  087D               	movf	_product,w
 16913  0B53  0086               	movwf	6
 16914  0B54  3001               	movlw	1	; select bank2/3
 16915  0B55  0087               	movwf	7
 16916  0B56  3001               	movlw	1	; select bank2/3
 16917  0B57  3F4B               	moviw [11]fsr1
 16918  0B58  00AB               	movwf	(_RF_Data^(0+128)+11)
 16919                           
 16920                           ;RF_Control_B1.c: 158: RF_Data[12] = product->Data[12];
 16921  0B59  087D               	movf	_product,w
 16922  0B5A  0086               	movwf	6
 16923  0B5B  3001               	movlw	1	; select bank2/3
 16924  0B5C  0087               	movwf	7
 16925  0B5D  3001               	movlw	1	; select bank2/3
 16926  0B5E  3F4C               	moviw [12]fsr1
 16927  0B5F  00AC               	movwf	(_RF_Data^(0+128)+12)
 16928                           
 16929                           ;RF_Control_B1.c: 159: RF_Data[13] = product->Data[13];
 16930  0B60  087D               	movf	_product,w
 16931  0B61  0086               	movwf	6
 16932  0B62  3001               	movlw	1	; select bank2/3
 16933  0B63  0087               	movwf	7
 16934  0B64  3001               	movlw	1	; select bank2/3
 16935  0B65  3F4D               	moviw [13]fsr1
 16936  0B66  00AD               	movwf	(_RF_Data^(0+128)+13)
 16937                           
 16938                           ;RF_Control_B1.c: 160: RF_Data[14] = product->Data[14];
 16939  0B67  087D               	movf	_product,w
 16940  0B68  0086               	movwf	6
 16941  0B69  3001               	movlw	1	; select bank2/3
 16942  0B6A  0087               	movwf	7
 16943  0B6B  3001               	movlw	1	; select bank2/3
 16944  0B6C  3F4E               	moviw [14]fsr1
 16945  0B6D  00AE               	movwf	(_RF_Data^(0+128)+14)
 16946                           
 16947                           ;RF_Control_B1.c: 161: RF_Data[15] = product->Data[15];
 16948  0B6E  087D               	movf	_product,w
 16949  0B6F  0086               	movwf	6
 16950  0B70  3001               	movlw	1	; select bank2/3
 16951  0B71  0087               	movwf	7
 16952  0B72  3001               	movlw	1	; select bank2/3
 16953  0B73  3F4F               	moviw [15]fsr1
 16954  0B74  00AF               	movwf	(_RF_Data^(0+128)+15)
 16955                           
 16956                           ;RF_Control_B1.c: 162: RF_Data[16] = product->Data[16];
 16957  0B75  087D               	movf	_product,w
 16958  0B76  0086               	movwf	6
 16959  0B77  3001               	movlw	1	; select bank2/3
 16960  0B78  0087               	movwf	7
 16961  0B79  3001               	movlw	1	; select bank2/3
 16962  0B7A  3F50               	moviw [16]fsr1
 16963  0B7B  00B0               	movwf	(_RF_Data^(0+128)+16)
 16964                           
 16965                           ;RF_Control_B1.c: 163: RF_Data[17] = product->Data[17];
 16966  0B7C  087D               	movf	_product,w
 16967  0B7D  0086               	movwf	6
 16968  0B7E  3001               	movlw	1	; select bank2/3
 16969  0B7F  0087               	movwf	7
 16970  0B80  3001               	movlw	1	; select bank2/3
 16971  0B81  3F51               	moviw [17]fsr1
 16972  0B82  00B1               	movwf	(_RF_Data^(0+128)+17)
 16973                           
 16974                           ;RF_Control_B1.c: 164: RF_Data[18] = product->Data[18];
 16975  0B83  087D               	movf	_product,w
 16976  0B84  0086               	movwf	6
 16977  0B85  3001               	movlw	1	; select bank2/3
 16978  0B86  0087               	movwf	7
 16979  0B87  3001               	movlw	1	; select bank2/3
 16980  0B88  3F52               	moviw [18]fsr1
 16981  0B89  00B2               	movwf	(_RF_Data^(0+128)+18)
 16982                           
 16983                           ;RF_Control_B1.c: 165: RF_Data[19] = product->Data[19];
 16984  0B8A  087D               	movf	_product,w
 16985  0B8B  0086               	movwf	6
 16986  0B8C  3001               	movlw	1	; select bank2/3
 16987  0B8D  0087               	movwf	7
 16988  0B8E  3001               	movlw	1	; select bank2/3
 16989  0B8F  3F53               	moviw [19]fsr1
 16990  0B90  00B3               	movwf	(_RF_Data^(0+128)+19)
 16991                           
 16992                           ;RF_Control_B1.c: 166: RF_Data[20] = 209;
 16993  0B91  30D1               	movlw	209
 16994  0B92  0020               	movlb	0	; select bank0
 16995  0B93  00A2               	movwf	??_setTxData
 16996  0B94  0822               	movf	??_setTxData,w
 16997  0B95  0021               	movlb	1	; select bank1
 16998  0B96  00B4               	movwf	(_RF_Data^(0+128)+20)
 16999  0B97  0008               	return
 17000  0B98                     __end_of_setTxData:	
 17001                           
 17002                           	psect	text106
 17003  2695                     __ptext106:	
 17004 ;; *************** function _RfPointSelect *****************
 17005 ;; Defined at:
 17006 ;;		line 7 in file "../src/RF_Control_B1.c"
 17007 ;; Parameters:    Size  Location     Type
 17008 ;;  rf              1    wreg     unsigned char 
 17009 ;; Auto vars:     Size  Location     Type
 17010 ;;  rf              1    1[BANK0 ] unsigned char 
 17011 ;; Return value:  Size  Location     Type
 17012 ;;		None               void
 17013 ;; Registers used:
 17014 ;;		wreg
 17015 ;; Tracked objects:
 17016 ;;		On entry : 0/0
 17017 ;;		On exit  : 0/0
 17018 ;;		Unchanged: 0/0
 17019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17024 ;;Total ram usage:        2 bytes
 17025 ;; Hardware stack levels used:    1
 17026 ;; Hardware stack levels required when called:    4
 17027 ;; This function calls:
 17028 ;;		Nothing
 17029 ;; This function is called by:
 17030 ;;		_setRF_Learn
 17031 ;;		_setRF_RxStatus
 17032 ;;		_setRF_Main
 17033 ;;		_setTxData
 17034 ;;		_setRF_Enable
 17035 ;;		_RF_RxDisable
 17036 ;;		_getRxData
 17037 ;;		_setLog_Code
 17038 ;;		_setControl_Lights_Table
 17039 ;; This function uses a non-reentrant model
 17040 ;;
 17041                           
 17042                           
 17043                           ;psect for function _RfPointSelect
 17044  2695                     _RfPointSelect:	
 17045                           
 17046                           ;incstack = 0
 17047                           ; Regs used in _RfPointSelect: [wreg]
 17048                           ;RfPointSelect@rf stored from wreg
 17049  2695  0020               	movlb	0	; select bank0
 17050  2696  00A1               	movwf	RfPointSelect@rf
 17051                           
 17052                           ;RF_Control_B1.c: 9: if (rf == 1) {
 17053  2697  0821               	movf	RfPointSelect@rf,w
 17054  2698  3A01               	xorlw	1
 17055  2699  1D03               	skipz
 17056  269A  0008               	return
 17057                           
 17058                           ;RF_Control_B1.c: 10: RF = &RF1;
 17059  269B  30E4               	movlw	_RF1& (0+255)
 17060  269C  00A0               	movwf	??_RfPointSelect
 17061  269D  0820               	movf	??_RfPointSelect,w
 17062  269E  0021               	movlb	1	; select bank1
 17063  269F  00BE               	movwf	_RF^(0+128)
 17064  26A0  0008               	return
 17065  26A1                     __end_of_RfPointSelect:	
 17066                           
 17067                           	psect	text107
 17068  2722                     __ptext107:	
 17069 ;; *************** function _setSw_Status *****************
 17070 ;; Defined at:
 17071 ;;		line 105 in file "../src/Switch_B1.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;  sw              1    wreg     unsigned char 
 17074 ;;  command         1    2[BANK0 ] unsigned char 
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;  sw              1    3[BANK0 ] unsigned char 
 17077 ;; Return value:  Size  Location     Type
 17078 ;;		None               void
 17079 ;; Registers used:
 17080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17086 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;Total ram usage:        2 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    5
 17093 ;; This function calls:
 17094 ;;		_SwPointSelect
 17095 ;; This function is called by:
 17096 ;;		_DlyOff_Main
 17097 ;;		_setDimmerLights_ERROR
 17098 ;;		_setControl_Lights_Table
 17099 ;;		_setRFSW_Control
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           
 17104                           ;psect for function _setSw_Status
 17105  2722                     _setSw_Status:	
 17106                           
 17107                           ;incstack = 0
 17108                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17109                           ;setSw_Status@sw stored from wreg
 17110  2722  0020               	movlb	0	; select bank0
 17111  2723  00A3               	movwf	setSw_Status@sw
 17112                           
 17113                           ;Switch_B1.c: 106: SwPointSelect(sw);
 17114  2724  0823               	movf	setSw_Status@sw,w
 17115  2725  31A6  2622         	fcall	_SwPointSelect
 17116                           
 17117                           ;Switch_B1.c: 107: Sw->Status = command;
 17118  2727  0879               	movf	_Sw,w
 17119  2728  0086               	movwf	6
 17120  2729  3001               	movlw	1	; select bank2/3
 17121  272A  0087               	movwf	7
 17122  272B  0020               	movlb	0	; select bank0
 17123  272C  0822               	movf	setSw_Status@command,w
 17124  272D  1301               	bcf	1,6
 17125  272E  1D03               	skipz
 17126  272F  1701               	bsf	1,6
 17127  2730  0008               	return
 17128  2731                     __end_of_setSw_Status:	
 17129                           
 17130                           	psect	text108
 17131  2622                     __ptext108:	
 17132 ;; *************** function _SwPointSelect *****************
 17133 ;; Defined at:
 17134 ;;		line 17 in file "../src/Switch_B1.c"
 17135 ;; Parameters:    Size  Location     Type
 17136 ;;  sw              1    wreg     unsigned char 
 17137 ;; Auto vars:     Size  Location     Type
 17138 ;;  sw              1    1[BANK0 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;		None               void
 17141 ;; Registers used:
 17142 ;;		wreg
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17152 ;;Total ram usage:        2 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:    4
 17155 ;; This function calls:
 17156 ;;		Nothing
 17157 ;; This function is called by:
 17158 ;;		_setSw_Enable
 17159 ;;		_setSw_Status
 17160 ;;		_setSw_Main
 17161 ;;		_Sw_Detect
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           
 17166                           ;psect for function _SwPointSelect
 17167  2622                     _SwPointSelect:	
 17168                           
 17169                           ;incstack = 0
 17170                           ; Regs used in _SwPointSelect: [wreg]
 17171                           ;SwPointSelect@sw stored from wreg
 17172  2622  0020               	movlb	0	; select bank0
 17173  2623  00A1               	movwf	SwPointSelect@sw
 17174                           
 17175                           ;Switch_B1.c: 20: if (sw == 1) {
 17176  2624  0821               	movf	SwPointSelect@sw,w
 17177  2625  3A01               	xorlw	1
 17178  2626  1D03               	skipz
 17179  2627  0008               	return
 17180                           
 17181                           ;Switch_B1.c: 21: Sw = &Sw1;
 17182  2628  305A               	movlw	_Sw1& (0+255)
 17183  2629  00A0               	movwf	??_SwPointSelect
 17184  262A  0820               	movf	??_SwPointSelect,w
 17185  262B  00F9               	movwf	_Sw
 17186  262C  0008               	return
 17187  262D                     __end_of_SwPointSelect:	
 17188                           
 17189                           	psect	text109
 17190  1377                     __ptext109:	
 17191 ;; *************** function _setRF_DimmerLights *****************
 17192 ;; Defined at:
 17193 ;;		line 398 in file "../src/RF_Control_B1.c"
 17194 ;; Parameters:    Size  Location     Type
 17195 ;;  lights          1    wreg     unsigned char 
 17196 ;;  on              1   61[BANK0 ] unsigned char 
 17197 ;; Auto vars:     Size  Location     Type
 17198 ;;  lights          1   65[BANK0 ] unsigned char 
 17199 ;;  status          1   64[BANK0 ] unsigned char 
 17200 ;; Return value:  Size  Location     Type
 17201 ;;		None               void
 17202 ;; Registers used:
 17203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17204 ;; Tracked objects:
 17205 ;;		On entry : 0/0
 17206 ;;		On exit  : 0/0
 17207 ;;		Unchanged: 0/0
 17208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17209 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;Total ram usage:        5 bytes
 17214 ;; Hardware stack levels used:    1
 17215 ;; Hardware stack levels required when called:    7
 17216 ;; This function calls:
 17217 ;;		_setPercentValue
 17218 ;; This function is called by:
 17219 ;;		_DlyOff_Main
 17220 ;;		_setDimmerLights_Adj
 17221 ;;		_setRFSW_Control
 17222 ;;		_Sw_DimmerOnFunc
 17223 ;;		_Sw_DimmerOffFunc
 17224 ;; This function uses a non-reentrant model
 17225 ;;
 17226                           
 17227                           
 17228                           ;psect for function _setRF_DimmerLights
 17229  1377                     _setRF_DimmerLights:	
 17230                           
 17231                           ;incstack = 0
 17232                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17233                           ;setRF_DimmerLights@lights stored from wreg
 17234  1377  0020               	movlb	0	; select bank0
 17235  1378  00E1               	movwf	setRF_DimmerLights@lights
 17236                           
 17237                           ;RF_Control_B1.c: 399: char status;
 17238                           ;RF_Control_B1.c: 400: status = 1;
 17239  1379  01E0               	clrf	setRF_DimmerLights@status
 17240  137A  0AE0               	incf	setRF_DimmerLights@status,f
 17241                           
 17242                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 17243  137B  0861               	movf	setRF_DimmerLights@lights,w
 17244  137C  3EFF               	addlw	-1
 17245  137D  0A89               	incf	9,f
 17246  137E  2B81               	goto	u7450
 17247  137F                     u7455:	
 17248  137F  1003               	clrc
 17249  1380  0DE0               	rlf	setRF_DimmerLights@status,f
 17250  1381                     u7450:	
 17251  1381  3EFF               	addlw	-1
 17252  1382  1D03               	skipz
 17253  1383  2B7F               	goto	u7455
 17254                           
 17255                           ;RF_Control_B1.c: 402: product->Data[11]=lights;
 17256  1384  0861               	movf	setRF_DimmerLights@lights,w
 17257  1385  00DE               	movwf	??_setRF_DimmerLights
 17258  1386  087D               	movf	_product,w
 17259  1387  3E0B               	addlw	11
 17260  1388  0086               	movwf	6
 17261  1389  3001               	movlw	1	; select bank2/3
 17262  138A  0087               	movwf	7
 17263  138B  085E               	movf	??_setRF_DimmerLights,w
 17264  138C  0081               	movwf	1
 17265                           
 17266                           ;RF_Control_B1.c: 405: product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 17267  138D  3043               	movlw	67
 17268  138E  319E  2694  3193   	fcall	_setPercentValue
 17269  1391  0020               	movlb	0	; select bank0
 17270  1392  00DE               	movwf	??_setRF_DimmerLights
 17271  1393  0861               	movf	setRF_DimmerLights@lights,w
 17272  1394  3E14               	addlw	20
 17273  1395  077D               	addwf	_product,w
 17274  1396  00DF               	movwf	??_setRF_DimmerLights+1
 17275  1397  085F               	movf	??_setRF_DimmerLights+1,w
 17276  1398  0086               	movwf	6
 17277  1399  3001               	movlw	1	; select bank2/3
 17278  139A  0087               	movwf	7
 17279  139B  085E               	movf	??_setRF_DimmerLights,w
 17280  139C  0081               	movwf	1
 17281                           
 17282                           ;RF_Control_B1.c: 408: product->Data[9]=product->Data[20 + lights];
 17283  139D  0861               	movf	setRF_DimmerLights@lights,w
 17284  139E  3E14               	addlw	20
 17285  139F  077D               	addwf	_product,w
 17286  13A0  00DE               	movwf	??_setRF_DimmerLights
 17287  13A1  085E               	movf	??_setRF_DimmerLights,w
 17288  13A2  0086               	movwf	6
 17289  13A3  3001               	movlw	1	; select bank2/3
 17290  13A4  0087               	movwf	7
 17291  13A5  0801               	movf	1,w
 17292  13A6  00DF               	movwf	??_setRF_DimmerLights+1
 17293  13A7  087D               	movf	_product,w
 17294  13A8  3E09               	addlw	9
 17295  13A9  0086               	movwf	6
 17296  13AA  3001               	movlw	1	; select bank2/3
 17297  13AB  0087               	movwf	7
 17298  13AC  085F               	movf	??_setRF_DimmerLights+1,w
 17299  13AD  0081               	movwf	1
 17300                           
 17301                           ;RF_Control_B1.c: 409: product->Data[17]=product->Data[26 + lights];
 17302  13AE  0861               	movf	setRF_DimmerLights@lights,w
 17303  13AF  3E1A               	addlw	26
 17304  13B0  077D               	addwf	_product,w
 17305  13B1  00DE               	movwf	??_setRF_DimmerLights
 17306  13B2  085E               	movf	??_setRF_DimmerLights,w
 17307  13B3  0086               	movwf	6
 17308  13B4  3001               	movlw	1	; select bank2/3
 17309  13B5  0087               	movwf	7
 17310  13B6  0801               	movf	1,w
 17311  13B7  00DF               	movwf	??_setRF_DimmerLights+1
 17312  13B8  087D               	movf	_product,w
 17313  13B9  3E11               	addlw	17
 17314  13BA  0086               	movwf	6
 17315  13BB  3001               	movlw	1	; select bank2/3
 17316  13BC  0087               	movwf	7
 17317  13BD  085F               	movf	??_setRF_DimmerLights+1,w
 17318  13BE  0081               	movwf	1
 17319                           
 17320                           ;RF_Control_B1.c: 410: if (on) {
 17321  13BF  085D               	movf	setRF_DimmerLights@on,w
 17322  13C0  1903               	btfsc	3,2
 17323  13C1  2BD2               	goto	l8152
 17324                           
 17325                           ;RF_Control_B1.c: 411: product->Data[15]=(product->Data[15] | status);
 17326  13C2  087D               	movf	_product,w
 17327  13C3  3E0F               	addlw	15
 17328  13C4  0086               	movwf	6
 17329  13C5  3001               	movlw	1	; select bank2/3
 17330  13C6  0087               	movwf	7
 17331  13C7  0801               	movf	1,w
 17332  13C8  0460               	iorwf	setRF_DimmerLights@status,w
 17333  13C9  00DE               	movwf	??_setRF_DimmerLights
 17334  13CA  087D               	movf	_product,w
 17335  13CB  3E0F               	addlw	15
 17336  13CC  0086               	movwf	6
 17337  13CD  3001               	movlw	1	; select bank2/3
 17338  13CE  0087               	movwf	7
 17339  13CF  085E               	movf	??_setRF_DimmerLights,w
 17340  13D0  0081               	movwf	1
 17341                           
 17342                           ;RF_Control_B1.c: 412: } else {
 17343  13D1  0008               	return
 17344  13D2                     l8152:	
 17345                           
 17346                           ;RF_Control_B1.c: 413: product->Data[15]=(product->Data[15]&(~status));
 17347  13D2  087D               	movf	_product,w
 17348  13D3  3E0F               	addlw	15
 17349  13D4  0086               	movwf	6
 17350  13D5  3001               	movlw	1	; select bank2/3
 17351  13D6  0087               	movwf	7
 17352  13D7  0960               	comf	setRF_DimmerLights@status,w
 17353  13D8  0501               	andwf	1,w
 17354  13D9  00DE               	movwf	??_setRF_DimmerLights
 17355  13DA  087D               	movf	_product,w
 17356  13DB  3E0F               	addlw	15
 17357  13DC  0086               	movwf	6
 17358  13DD  3001               	movlw	1	; select bank2/3
 17359  13DE  0087               	movwf	7
 17360  13DF  085E               	movf	??_setRF_DimmerLights,w
 17361  13E0  0081               	movwf	1
 17362  13E1  0008               	return
 17363  13E2                     __end_of_setRF_DimmerLights:	
 17364                           
 17365                           	psect	text110
 17366  1E94                     __ptext110:	
 17367 ;; *************** function _setPercentValue *****************
 17368 ;; Defined at:
 17369 ;;		line 505 in file "../src/Dimmer_B1.c"
 17370 ;; Parameters:    Size  Location     Type
 17371 ;;  value           1    wreg     unsigned char 
 17372 ;; Auto vars:     Size  Location     Type
 17373 ;;  value           1   57[BANK0 ] unsigned char 
 17374 ;;  i               3   58[BANK0 ] float 
 17375 ;; Return value:  Size  Location     Type
 17376 ;;                  1    wreg      unsigned char 
 17377 ;; Registers used:
 17378 ;;		wreg, status,2, status,0, pclath, cstack
 17379 ;; Tracked objects:
 17380 ;;		On entry : 0/0
 17381 ;;		On exit  : 0/0
 17382 ;;		Unchanged: 0/0
 17383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17385 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17388 ;;Total ram usage:        4 bytes
 17389 ;; Hardware stack levels used:    1
 17390 ;; Hardware stack levels required when called:    6
 17391 ;; This function calls:
 17392 ;;		___awtoft
 17393 ;;		___ftdiv
 17394 ;;		___fttol
 17395 ;; This function is called by:
 17396 ;;		_Flash_Memory_Initialization
 17397 ;;		_setRF_DimmerLights
 17398 ;; This function uses a non-reentrant model
 17399 ;;
 17400                           
 17401                           
 17402                           ;psect for function _setPercentValue
 17403  1E94                     _setPercentValue:	
 17404                           
 17405                           ;incstack = 0
 17406                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17407                           ;setPercentValue@value stored from wreg
 17408  1E94  0020               	movlb	0	; select bank0
 17409  1E95  00D9               	movwf	setPercentValue@value
 17410                           
 17411                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17412  1E96  3000               	movlw	0
 17413  1E97  00DA               	movwf	setPercentValue@i
 17414  1E98  3054               	movlw	84
 17415  1E99  00DB               	movwf	setPercentValue@i+1
 17416  1E9A  3042               	movlw	66
 17417  1E9B  00DC               	movwf	setPercentValue@i+2
 17418                           
 17419                           ;Dimmer_B1.c: 509: i/=100;
 17420  1E9C  3000               	movlw	0
 17421  1E9D  00AE               	movwf	___ftdiv@f2
 17422  1E9E  30C8               	movlw	200
 17423  1E9F  00AF               	movwf	___ftdiv@f2+1
 17424  1EA0  3042               	movlw	66
 17425  1EA1  00B0               	movwf	___ftdiv@f2+2
 17426  1EA2  085A               	movf	setPercentValue@i,w
 17427  1EA3  00B1               	movwf	___ftdiv@f1
 17428  1EA4  085B               	movf	setPercentValue@i+1,w
 17429  1EA5  00B2               	movwf	___ftdiv@f1+1
 17430  1EA6  085C               	movf	setPercentValue@i+2,w
 17431  1EA7  00B3               	movwf	___ftdiv@f1+2
 17432  1EA8  318B  2398  319E   	fcall	___ftdiv
 17433  1EAB  0020               	movlb	0	; select bank0
 17434  1EAC  082E               	movf	?___ftdiv,w
 17435  1EAD  00DA               	movwf	setPercentValue@i
 17436  1EAE  082F               	movf	?___ftdiv+1,w
 17437  1EAF  00DB               	movwf	setPercentValue@i+1
 17438  1EB0  0830               	movf	?___ftdiv+2,w
 17439  1EB1  00DC               	movwf	setPercentValue@i+2
 17440                           
 17441                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17442  1EB2  0859               	movf	setPercentValue@value,w
 17443  1EB3  3EBD               	addlw	189
 17444  1EB4  00A8               	movwf	___awtoft@c
 17445  1EB5  30FF               	movlw	255
 17446  1EB6  1803               	skipnc
 17447  1EB7  3000               	movlw	0
 17448  1EB8  00A9               	movwf	___awtoft@c+1
 17449  1EB9  319A  2212  319E   	fcall	___awtoft
 17450  1EBC  0020               	movlb	0	; select bank0
 17451  1EBD  0828               	movf	?___awtoft,w
 17452  1EBE  00B1               	movwf	___ftdiv@f1
 17453  1EBF  0829               	movf	?___awtoft+1,w
 17454  1EC0  00B2               	movwf	___ftdiv@f1+1
 17455  1EC1  082A               	movf	?___awtoft+2,w
 17456  1EC2  00B3               	movwf	___ftdiv@f1+2
 17457  1EC3  085A               	movf	setPercentValue@i,w
 17458  1EC4  00AE               	movwf	___ftdiv@f2
 17459  1EC5  085B               	movf	setPercentValue@i+1,w
 17460  1EC6  00AF               	movwf	___ftdiv@f2+1
 17461  1EC7  085C               	movf	setPercentValue@i+2,w
 17462  1EC8  00B0               	movwf	___ftdiv@f2+2
 17463  1EC9  318B  2398  319E   	fcall	___ftdiv
 17464  1ECC  0020               	movlb	0	; select bank0
 17465  1ECD  082E               	movf	?___ftdiv,w
 17466  1ECE  00CB               	movwf	___fttol@f1
 17467  1ECF  082F               	movf	?___ftdiv+1,w
 17468  1ED0  00CC               	movwf	___fttol@f1+1
 17469  1ED1  0830               	movf	?___ftdiv+2,w
 17470  1ED2  00CD               	movwf	___fttol@f1+2
 17471  1ED3  3197  2779         	fcall	___fttol
 17472  1ED5  0020               	movlb	0	; select bank0
 17473  1ED6  034B               	decf	?___fttol,w
 17474  1ED7  3AFF               	xorlw	255
 17475  1ED8  3E64               	addlw	100
 17476  1ED9  0008               	return
 17477  1EDA                     __end_of_setPercentValue:	
 17478                           
 17479                           	psect	text111
 17480  1779                     __ptext111:	
 17481 ;; *************** function ___fttol *****************
 17482 ;; Defined at:
 17483 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  f1              3   43[BANK0 ] float 
 17486 ;; Auto vars:     Size  Location     Type
 17487 ;;  lval            4   52[BANK0 ] unsigned long 
 17488 ;;  exp1            1   56[BANK0 ] unsigned char 
 17489 ;;  sign1           1   51[BANK0 ] unsigned char 
 17490 ;; Return value:  Size  Location     Type
 17491 ;;                  4   43[BANK0 ] long 
 17492 ;; Registers used:
 17493 ;;		wreg, status,2, status,0
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17499 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;Total ram usage:       14 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    4
 17506 ;; This function calls:
 17507 ;;		Nothing
 17508 ;; This function is called by:
 17509 ;;		_getPercentValue
 17510 ;;		_setPercentValue
 17511 ;; This function uses a non-reentrant model
 17512 ;;
 17513                           
 17514                           
 17515                           ;psect for function ___fttol
 17516  1779                     ___fttol:	
 17517                           
 17518                           ;incstack = 0
 17519                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17520  1779  0020               	movlb	0	; select bank0
 17521  177A  084B               	movf	___fttol@f1,w
 17522  177B  00CF               	movwf	??___fttol
 17523  177C  084C               	movf	___fttol@f1+1,w
 17524  177D  00D0               	movwf	??___fttol+1
 17525  177E  084D               	movf	___fttol@f1+2,w
 17526  177F  00D1               	movwf	??___fttol+2
 17527  1780  1003               	clrc
 17528  1781  0D50               	rlf	??___fttol+1,w
 17529  1782  0D51               	rlf	??___fttol+2,w
 17530  1783  00D2               	movwf	??___fttol+3
 17531  1784  0852               	movf	??___fttol+3,w
 17532  1785  00D8               	movwf	___fttol@exp1
 17533  1786  08D8               	movf	___fttol@exp1,f
 17534  1787  1D03               	skipz
 17535  1788  2F92               	goto	l5950
 17536  1789  3000               	movlw	0
 17537  178A  00CE               	movwf	?___fttol+3
 17538  178B  3000               	movlw	0
 17539  178C  00CD               	movwf	?___fttol+2
 17540  178D  3000               	movlw	0
 17541  178E  00CC               	movwf	?___fttol+1
 17542  178F  3000               	movlw	0
 17543  1790  00CB               	movwf	?___fttol
 17544  1791  0008               	return
 17545  1792                     l5950:	
 17546  1792  084B               	movf	___fttol@f1,w
 17547  1793  00CF               	movwf	??___fttol
 17548  1794  084C               	movf	___fttol@f1+1,w
 17549  1795  00D0               	movwf	??___fttol+1
 17550  1796  084D               	movf	___fttol@f1+2,w
 17551  1797  00D1               	movwf	??___fttol+2
 17552  1798  3017               	movlw	23
 17553  1799                     u4255:	
 17554  1799  36D1               	lsrf	??___fttol+2,f
 17555  179A  0CD0               	rrf	??___fttol+1,f
 17556  179B  0CCF               	rrf	??___fttol,f
 17557  179C  0B89               	decfsz	9,f
 17558  179D  2F99               	goto	u4255
 17559  179E  084F               	movf	??___fttol,w
 17560  179F  00D2               	movwf	??___fttol+3
 17561  17A0  0852               	movf	??___fttol+3,w
 17562  17A1  00D3               	movwf	___fttol@sign1
 17563  17A2  17CC               	bsf	___fttol@f1+1,7
 17564  17A3  30FF               	movlw	255
 17565  17A4  05CB               	andwf	___fttol@f1,f
 17566  17A5  30FF               	movlw	255
 17567  17A6  05CC               	andwf	___fttol@f1+1,f
 17568  17A7  3000               	movlw	0
 17569  17A8  05CD               	andwf	___fttol@f1+2,f
 17570  17A9  084B               	movf	___fttol@f1,w
 17571  17AA  00D4               	movwf	___fttol@lval
 17572  17AB  084C               	movf	___fttol@f1+1,w
 17573  17AC  00D5               	movwf	___fttol@lval+1
 17574  17AD  084D               	movf	___fttol@f1+2,w
 17575  17AE  00D6               	movwf	___fttol@lval+2
 17576  17AF  01D7               	clrf	___fttol@lval+3
 17577  17B0  308E               	movlw	142
 17578  17B1  02D8               	subwf	___fttol@exp1,f
 17579  17B2  1FD8               	btfss	___fttol@exp1,7
 17580  17B3  2FD0               	goto	l5970
 17581  17B4  0858               	movf	___fttol@exp1,w
 17582  17B5  3A80               	xorlw	128
 17583  17B6  3E8F               	addlw	143
 17584  17B7  1803               	skipnc
 17585  17B8  2FC2               	goto	l5968
 17586  17B9  3000               	movlw	0
 17587  17BA  00CE               	movwf	?___fttol+3
 17588  17BB  3000               	movlw	0
 17589  17BC  00CD               	movwf	?___fttol+2
 17590  17BD  3000               	movlw	0
 17591  17BE  00CC               	movwf	?___fttol+1
 17592  17BF  3000               	movlw	0
 17593  17C0  00CB               	movwf	?___fttol
 17594  17C1  0008               	return
 17595  17C2                     l5968:	
 17596  17C2  3001               	movlw	1
 17597  17C3                     u4285:	
 17598  17C3  36D7               	lsrf	___fttol@lval+3,f
 17599  17C4  0CD6               	rrf	___fttol@lval+2,f
 17600  17C5  0CD5               	rrf	___fttol@lval+1,f
 17601  17C6  0CD4               	rrf	___fttol@lval,f
 17602  17C7  0B89               	decfsz	9,f
 17603  17C8  2FC3               	goto	u4285
 17604  17C9  3001               	movlw	1
 17605  17CA  00CF               	movwf	??___fttol
 17606  17CB  084F               	movf	??___fttol,w
 17607  17CC  07D8               	addwf	___fttol@exp1,f
 17608  17CD  1903               	btfsc	3,2
 17609  17CE  2FE9               	goto	l5980
 17610  17CF  2FC2               	goto	l5968
 17611  17D0                     l5970:	
 17612  17D0  3018               	movlw	24
 17613  17D1  0258               	subwf	___fttol@exp1,w
 17614  17D2  1C03               	skipc
 17615  17D3  2FE6               	goto	l5978
 17616  17D4  3000               	movlw	0
 17617  17D5  00CE               	movwf	?___fttol+3
 17618  17D6  3000               	movlw	0
 17619  17D7  00CD               	movwf	?___fttol+2
 17620  17D8  3000               	movlw	0
 17621  17D9  00CC               	movwf	?___fttol+1
 17622  17DA  3000               	movlw	0
 17623  17DB  00CB               	movwf	?___fttol
 17624  17DC  0008               	return
 17625  17DD                     l5976:	
 17626  17DD  3001               	movlw	1
 17627  17DE                     u4315:	
 17628  17DE  35D4               	lslf	___fttol@lval,f
 17629  17DF  0DD5               	rlf	___fttol@lval+1,f
 17630  17E0  0DD6               	rlf	___fttol@lval+2,f
 17631  17E1  0DD7               	rlf	___fttol@lval+3,f
 17632  17E2  0B89               	decfsz	9,f
 17633  17E3  2FDE               	goto	u4315
 17634  17E4  3001               	movlw	1
 17635  17E5  02D8               	subwf	___fttol@exp1,f
 17636  17E6                     l5978:	
 17637  17E6  08D8               	movf	___fttol@exp1,f
 17638  17E7  1D03               	skipz
 17639  17E8  2FDD               	goto	l5976
 17640  17E9                     l5980:	
 17641  17E9  0853               	movf	___fttol@sign1,w
 17642  17EA  1903               	btfsc	3,2
 17643  17EB  2FF7               	goto	l5984
 17644  17EC  09D4               	comf	___fttol@lval,f
 17645  17ED  09D5               	comf	___fttol@lval+1,f
 17646  17EE  09D6               	comf	___fttol@lval+2,f
 17647  17EF  09D7               	comf	___fttol@lval+3,f
 17648  17F0  0AD4               	incf	___fttol@lval,f
 17649  17F1  1903               	skipnz
 17650  17F2  0AD5               	incf	___fttol@lval+1,f
 17651  17F3  1903               	skipnz
 17652  17F4  0AD6               	incf	___fttol@lval+2,f
 17653  17F5  1903               	skipnz
 17654  17F6  0AD7               	incf	___fttol@lval+3,f
 17655  17F7                     l5984:	
 17656  17F7  0857               	movf	___fttol@lval+3,w
 17657  17F8  00CE               	movwf	?___fttol+3
 17658  17F9  0856               	movf	___fttol@lval+2,w
 17659  17FA  00CD               	movwf	?___fttol+2
 17660  17FB  0855               	movf	___fttol@lval+1,w
 17661  17FC  00CC               	movwf	?___fttol+1
 17662  17FD  0854               	movf	___fttol@lval,w
 17663  17FE  00CB               	movwf	?___fttol
 17664  17FF  0008               	return
 17665  1800                     __end_of___fttol:	
 17666                           
 17667                           	psect	text112
 17668  0B98                     __ptext112:	
 17669 ;; *************** function ___ftdiv *****************
 17670 ;; Defined at:
 17671 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
 17672 ;; Parameters:    Size  Location     Type
 17673 ;;  f2              3   14[BANK0 ] float 
 17674 ;;  f1              3   17[BANK0 ] float 
 17675 ;; Auto vars:     Size  Location     Type
 17676 ;;  f3              3   25[BANK0 ] float 
 17677 ;;  sign            1   29[BANK0 ] unsigned char 
 17678 ;;  exp             1   28[BANK0 ] unsigned char 
 17679 ;;  cntr            1   24[BANK0 ] unsigned char 
 17680 ;; Return value:  Size  Location     Type
 17681 ;;                  3   14[BANK0 ] float 
 17682 ;; Registers used:
 17683 ;;		wreg, status,2, status,0, pclath, cstack
 17684 ;; Tracked objects:
 17685 ;;		On entry : 0/0
 17686 ;;		On exit  : 0/0
 17687 ;;		Unchanged: 0/0
 17688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17689 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;Total ram usage:       16 bytes
 17694 ;; Hardware stack levels used:    1
 17695 ;; Hardware stack levels required when called:    5
 17696 ;; This function calls:
 17697 ;;		___ftpack
 17698 ;; This function is called by:
 17699 ;;		_getPercentValue
 17700 ;;		_setPercentValue
 17701 ;; This function uses a non-reentrant model
 17702 ;;
 17703                           
 17704                           
 17705                           ;psect for function ___ftdiv
 17706  0B98                     ___ftdiv:	
 17707                           
 17708                           ;incstack = 0
 17709                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17710  0B98  0020               	movlb	0	; select bank0
 17711  0B99  0831               	movf	___ftdiv@f1,w
 17712  0B9A  00B4               	movwf	??___ftdiv
 17713  0B9B  0832               	movf	___ftdiv@f1+1,w
 17714  0B9C  00B5               	movwf	??___ftdiv+1
 17715  0B9D  0833               	movf	___ftdiv@f1+2,w
 17716  0B9E  00B6               	movwf	??___ftdiv+2
 17717  0B9F  1003               	clrc
 17718  0BA0  0D35               	rlf	??___ftdiv+1,w
 17719  0BA1  0D36               	rlf	??___ftdiv+2,w
 17720  0BA2  00B7               	movwf	??___ftdiv+3
 17721  0BA3  0837               	movf	??___ftdiv+3,w
 17722  0BA4  00BC               	movwf	___ftdiv@exp
 17723  0BA5  08BC               	movf	___ftdiv@exp,f
 17724  0BA6  1D03               	skipz
 17725  0BA7  2BAF               	goto	l5858
 17726  0BA8  3000               	movlw	0
 17727  0BA9  00AE               	movwf	?___ftdiv
 17728  0BAA  3000               	movlw	0
 17729  0BAB  00AF               	movwf	?___ftdiv+1
 17730  0BAC  3000               	movlw	0
 17731  0BAD  00B0               	movwf	?___ftdiv+2
 17732  0BAE  0008               	return
 17733  0BAF                     l5858:	
 17734  0BAF  082E               	movf	___ftdiv@f2,w
 17735  0BB0  00B4               	movwf	??___ftdiv
 17736  0BB1  082F               	movf	___ftdiv@f2+1,w
 17737  0BB2  00B5               	movwf	??___ftdiv+1
 17738  0BB3  0830               	movf	___ftdiv@f2+2,w
 17739  0BB4  00B6               	movwf	??___ftdiv+2
 17740  0BB5  1003               	clrc
 17741  0BB6  0D35               	rlf	??___ftdiv+1,w
 17742  0BB7  0D36               	rlf	??___ftdiv+2,w
 17743  0BB8  00B7               	movwf	??___ftdiv+3
 17744  0BB9  0837               	movf	??___ftdiv+3,w
 17745  0BBA  00BD               	movwf	___ftdiv@sign
 17746  0BBB  08BD               	movf	___ftdiv@sign,f
 17747  0BBC  1D03               	skipz
 17748  0BBD  2BC5               	goto	l5864
 17749  0BBE  3000               	movlw	0
 17750  0BBF  00AE               	movwf	?___ftdiv
 17751  0BC0  3000               	movlw	0
 17752  0BC1  00AF               	movwf	?___ftdiv+1
 17753  0BC2  3000               	movlw	0
 17754  0BC3  00B0               	movwf	?___ftdiv+2
 17755  0BC4  0008               	return
 17756  0BC5                     l5864:	
 17757  0BC5  3000               	movlw	0
 17758  0BC6  00B9               	movwf	___ftdiv@f3
 17759  0BC7  3000               	movlw	0
 17760  0BC8  00BA               	movwf	___ftdiv@f3+1
 17761  0BC9  3000               	movlw	0
 17762  0BCA  00BB               	movwf	___ftdiv@f3+2
 17763  0BCB  3089               	movlw	137
 17764  0BCC  073D               	addwf	___ftdiv@sign,w
 17765  0BCD  00B4               	movwf	??___ftdiv
 17766  0BCE  0834               	movf	??___ftdiv,w
 17767  0BCF  02BC               	subwf	___ftdiv@exp,f
 17768  0BD0  0831               	movf	___ftdiv@f1,w
 17769  0BD1  00B4               	movwf	??___ftdiv
 17770  0BD2  0832               	movf	___ftdiv@f1+1,w
 17771  0BD3  00B5               	movwf	??___ftdiv+1
 17772  0BD4  0833               	movf	___ftdiv@f1+2,w
 17773  0BD5  00B6               	movwf	??___ftdiv+2
 17774  0BD6  3010               	movlw	16
 17775  0BD7                     u4065:	
 17776  0BD7  36B6               	lsrf	??___ftdiv+2,f
 17777  0BD8  0CB5               	rrf	??___ftdiv+1,f
 17778  0BD9  0CB4               	rrf	??___ftdiv,f
 17779  0BDA  0B89               	decfsz	9,f
 17780  0BDB  2BD7               	goto	u4065
 17781  0BDC  0834               	movf	??___ftdiv,w
 17782  0BDD  00B7               	movwf	??___ftdiv+3
 17783  0BDE  0837               	movf	??___ftdiv+3,w
 17784  0BDF  00BD               	movwf	___ftdiv@sign
 17785  0BE0  082E               	movf	___ftdiv@f2,w
 17786  0BE1  00B4               	movwf	??___ftdiv
 17787  0BE2  082F               	movf	___ftdiv@f2+1,w
 17788  0BE3  00B5               	movwf	??___ftdiv+1
 17789  0BE4  0830               	movf	___ftdiv@f2+2,w
 17790  0BE5  00B6               	movwf	??___ftdiv+2
 17791  0BE6  3010               	movlw	16
 17792  0BE7                     u4075:	
 17793  0BE7  36B6               	lsrf	??___ftdiv+2,f
 17794  0BE8  0CB5               	rrf	??___ftdiv+1,f
 17795  0BE9  0CB4               	rrf	??___ftdiv,f
 17796  0BEA  0B89               	decfsz	9,f
 17797  0BEB  2BE7               	goto	u4075
 17798  0BEC  0834               	movf	??___ftdiv,w
 17799  0BED  00B7               	movwf	??___ftdiv+3
 17800  0BEE  0837               	movf	??___ftdiv+3,w
 17801  0BEF  06BD               	xorwf	___ftdiv@sign,f
 17802  0BF0  3080               	movlw	128
 17803  0BF1  00B4               	movwf	??___ftdiv
 17804  0BF2  0834               	movf	??___ftdiv,w
 17805  0BF3  05BD               	andwf	___ftdiv@sign,f
 17806  0BF4  17B2               	bsf	___ftdiv@f1+1,7
 17807  0BF5  30FF               	movlw	255
 17808  0BF6  05B1               	andwf	___ftdiv@f1,f
 17809  0BF7  30FF               	movlw	255
 17810  0BF8  05B2               	andwf	___ftdiv@f1+1,f
 17811  0BF9  3000               	movlw	0
 17812  0BFA  05B3               	andwf	___ftdiv@f1+2,f
 17813  0BFB  17AF               	bsf	___ftdiv@f2+1,7
 17814  0BFC  30FF               	movlw	255
 17815  0BFD  05AE               	andwf	___ftdiv@f2,f
 17816  0BFE  30FF               	movlw	255
 17817  0BFF  05AF               	andwf	___ftdiv@f2+1,f
 17818  0C00  3000               	movlw	0
 17819  0C01  05B0               	andwf	___ftdiv@f2+2,f
 17820  0C02  3018               	movlw	24
 17821  0C03  00B4               	movwf	??___ftdiv
 17822  0C04  0834               	movf	??___ftdiv,w
 17823  0C05  00B8               	movwf	___ftdiv@cntr
 17824  0C06                     l5878:	
 17825  0C06  3001               	movlw	1
 17826  0C07                     u4085:	
 17827  0C07  35B9               	lslf	___ftdiv@f3,f
 17828  0C08  0DBA               	rlf	___ftdiv@f3+1,f
 17829  0C09  0DBB               	rlf	___ftdiv@f3+2,f
 17830  0C0A  0B89               	decfsz	9,f
 17831  0C0B  2C07               	goto	u4085
 17832  0C0C  0830               	movf	___ftdiv@f2+2,w
 17833  0C0D  0233               	subwf	___ftdiv@f1+2,w
 17834  0C0E  1D03               	skipz
 17835  0C0F  2C16               	goto	u4095
 17836  0C10  082F               	movf	___ftdiv@f2+1,w
 17837  0C11  0232               	subwf	___ftdiv@f1+1,w
 17838  0C12  1D03               	skipz
 17839  0C13  2C16               	goto	u4095
 17840  0C14  082E               	movf	___ftdiv@f2,w
 17841  0C15  0231               	subwf	___ftdiv@f1,w
 17842  0C16                     u4095:	
 17843  0C16  1C03               	skipc
 17844  0C17  2C1F               	goto	l5886
 17845  0C18  082E               	movf	___ftdiv@f2,w
 17846  0C19  02B1               	subwf	___ftdiv@f1,f
 17847  0C1A  082F               	movf	___ftdiv@f2+1,w
 17848  0C1B  3BB2               	subwfb	___ftdiv@f1+1,f
 17849  0C1C  0830               	movf	___ftdiv@f2+2,w
 17850  0C1D  3BB3               	subwfb	___ftdiv@f1+2,f
 17851  0C1E  1439               	bsf	___ftdiv@f3,0
 17852  0C1F                     l5886:	
 17853  0C1F  3001               	movlw	1
 17854  0C20                     u4105:	
 17855  0C20  35B1               	lslf	___ftdiv@f1,f
 17856  0C21  0DB2               	rlf	___ftdiv@f1+1,f
 17857  0C22  0DB3               	rlf	___ftdiv@f1+2,f
 17858  0C23  0B89               	decfsz	9,f
 17859  0C24  2C20               	goto	u4105
 17860  0C25  3001               	movlw	1
 17861  0C26  02B8               	subwf	___ftdiv@cntr,f
 17862  0C27  1D03               	btfss	3,2
 17863  0C28  2C06               	goto	l5878
 17864  0C29  0839               	movf	___ftdiv@f3,w
 17865  0C2A  00A0               	movwf	___ftpack@arg
 17866  0C2B  083A               	movf	___ftdiv@f3+1,w
 17867  0C2C  00A1               	movwf	___ftpack@arg+1
 17868  0C2D  083B               	movf	___ftdiv@f3+2,w
 17869  0C2E  00A2               	movwf	___ftpack@arg+2
 17870  0C2F  083C               	movf	___ftdiv@exp,w
 17871  0C30  00B4               	movwf	??___ftdiv
 17872  0C31  0834               	movf	??___ftdiv,w
 17873  0C32  00A3               	movwf	___ftpack@exp
 17874  0C33  083D               	movf	___ftdiv@sign,w
 17875  0C34  00B5               	movwf	??___ftdiv+1
 17876  0C35  0835               	movf	??___ftdiv+1,w
 17877  0C36  00A4               	movwf	___ftpack@sign
 17878  0C37  3192  22B2         	fcall	___ftpack
 17879  0C39  0020               	movlb	0	; select bank0
 17880  0C3A  0820               	movf	?___ftpack,w
 17881  0C3B  00AE               	movwf	?___ftdiv
 17882  0C3C  0821               	movf	?___ftpack+1,w
 17883  0C3D  00AF               	movwf	?___ftdiv+1
 17884  0C3E  0822               	movf	?___ftpack+2,w
 17885  0C3F  00B0               	movwf	?___ftdiv+2
 17886  0C40  0008               	return
 17887  0C41                     __end_of___ftdiv:	
 17888                           
 17889                           	psect	text113
 17890  1A12                     __ptext113:	
 17891 ;; *************** function ___awtoft *****************
 17892 ;; Defined at:
 17893 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
 17894 ;; Parameters:    Size  Location     Type
 17895 ;;  c               2    8[BANK0 ] int 
 17896 ;; Auto vars:     Size  Location     Type
 17897 ;;  sign            1   13[BANK0 ] unsigned char 
 17898 ;; Return value:  Size  Location     Type
 17899 ;;                  3    8[BANK0 ] float 
 17900 ;; Registers used:
 17901 ;;		wreg, status,2, status,0, pclath, cstack
 17902 ;; Tracked objects:
 17903 ;;		On entry : 0/0
 17904 ;;		On exit  : 0/0
 17905 ;;		Unchanged: 0/0
 17906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17907 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17910 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17911 ;;Total ram usage:        6 bytes
 17912 ;; Hardware stack levels used:    1
 17913 ;; Hardware stack levels required when called:    5
 17914 ;; This function calls:
 17915 ;;		___ftpack
 17916 ;; This function is called by:
 17917 ;;		_getPercentValue
 17918 ;;		_setPercentValue
 17919 ;; This function uses a non-reentrant model
 17920 ;;
 17921                           
 17922                           
 17923                           ;psect for function ___awtoft
 17924  1A12                     ___awtoft:	
 17925                           
 17926                           ;incstack = 0
 17927                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17928  1A12  0020               	movlb	0	; select bank0
 17929  1A13  01AD               	clrf	___awtoft@sign
 17930  1A14  1FA9               	btfss	___awtoft@c+1,7
 17931  1A15  2A1D               	goto	l5776
 17932  1A16  09A8               	comf	___awtoft@c,f
 17933  1A17  09A9               	comf	___awtoft@c+1,f
 17934  1A18  0AA8               	incf	___awtoft@c,f
 17935  1A19  1903               	skipnz
 17936  1A1A  0AA9               	incf	___awtoft@c+1,f
 17937  1A1B  01AD               	clrf	___awtoft@sign
 17938  1A1C  0AAD               	incf	___awtoft@sign,f
 17939  1A1D                     l5776:	
 17940  1A1D  0828               	movf	___awtoft@c,w
 17941  1A1E  00A0               	movwf	___ftpack@arg
 17942  1A1F  0829               	movf	___awtoft@c+1,w
 17943  1A20  00A1               	movwf	___ftpack@arg+1
 17944  1A21  01A2               	clrf	___ftpack@arg+2
 17945  1A22  308E               	movlw	142
 17946  1A23  00AB               	movwf	??___awtoft
 17947  1A24  082B               	movf	??___awtoft,w
 17948  1A25  00A3               	movwf	___ftpack@exp
 17949  1A26  082D               	movf	___awtoft@sign,w
 17950  1A27  00AC               	movwf	??___awtoft+1
 17951  1A28  082C               	movf	??___awtoft+1,w
 17952  1A29  00A4               	movwf	___ftpack@sign
 17953  1A2A  3192  22B2         	fcall	___ftpack
 17954  1A2C  0020               	movlb	0	; select bank0
 17955  1A2D  0820               	movf	?___ftpack,w
 17956  1A2E  00A8               	movwf	?___awtoft
 17957  1A2F  0821               	movf	?___ftpack+1,w
 17958  1A30  00A9               	movwf	?___awtoft+1
 17959  1A31  0822               	movf	?___ftpack+2,w
 17960  1A32  00AA               	movwf	?___awtoft+2
 17961  1A33  0008               	return
 17962  1A34                     __end_of___awtoft:	
 17963                           
 17964                           	psect	text114
 17965  12B2                     __ptext114:	
 17966 ;; *************** function ___ftpack *****************
 17967 ;; Defined at:
 17968 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 17969 ;; Parameters:    Size  Location     Type
 17970 ;;  arg             3    0[BANK0 ] unsigned um
 17971 ;;  exp             1    3[BANK0 ] unsigned char 
 17972 ;;  sign            1    4[BANK0 ] unsigned char 
 17973 ;; Auto vars:     Size  Location     Type
 17974 ;;		None
 17975 ;; Return value:  Size  Location     Type
 17976 ;;                  3    0[BANK0 ] float 
 17977 ;; Registers used:
 17978 ;;		wreg, status,2, status,0
 17979 ;; Tracked objects:
 17980 ;;		On entry : 0/0
 17981 ;;		On exit  : 0/0
 17982 ;;		Unchanged: 0/0
 17983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17984 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;Total ram usage:        8 bytes
 17989 ;; Hardware stack levels used:    1
 17990 ;; Hardware stack levels required when called:    4
 17991 ;; This function calls:
 17992 ;;		Nothing
 17993 ;; This function is called by:
 17994 ;;		___awtoft
 17995 ;;		___ftadd
 17996 ;;		___ftdiv
 17997 ;;		___ftmul
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           
 18002                           ;psect for function ___ftpack
 18003  12B2                     ___ftpack:	
 18004                           
 18005                           ;incstack = 0
 18006                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18007  12B2  0020               	movlb	0	; select bank0
 18008  12B3  0823               	movf	___ftpack@exp,w
 18009  12B4  1903               	btfsc	3,2
 18010  12B5  2ABB               	goto	l5742
 18011  12B6  0822               	movf	___ftpack@arg+2,w
 18012  12B7  0421               	iorwf	___ftpack@arg+1,w
 18013  12B8  0420               	iorwf	___ftpack@arg,w
 18014  12B9  1D03               	skipz
 18015  12BA  2ACC               	goto	l5748
 18016  12BB                     l5742:	
 18017  12BB  3000               	movlw	0
 18018  12BC  00A0               	movwf	?___ftpack
 18019  12BD  3000               	movlw	0
 18020  12BE  00A1               	movwf	?___ftpack+1
 18021  12BF  3000               	movlw	0
 18022  12C0  00A2               	movwf	?___ftpack+2
 18023  12C1  0008               	return
 18024  12C2                     l5746:	
 18025  12C2  3001               	movlw	1
 18026  12C3  00A5               	movwf	??___ftpack
 18027  12C4  0825               	movf	??___ftpack,w
 18028  12C5  07A3               	addwf	___ftpack@exp,f
 18029  12C6  3001               	movlw	1
 18030  12C7                     u3715:	
 18031  12C7  36A2               	lsrf	___ftpack@arg+2,f
 18032  12C8  0CA1               	rrf	___ftpack@arg+1,f
 18033  12C9  0CA0               	rrf	___ftpack@arg,f
 18034  12CA  0B89               	decfsz	9,f
 18035  12CB  2AC7               	goto	u3715
 18036  12CC                     l5748:	
 18037  12CC  30FE               	movlw	254
 18038  12CD  0522               	andwf	___ftpack@arg+2,w
 18039  12CE  1903               	btfsc	3,2
 18040  12CF  2AE5               	goto	l3152
 18041  12D0  2AC2               	goto	l5746
 18042  12D1                     l5750:	
 18043  12D1  3001               	movlw	1
 18044  12D2  00A5               	movwf	??___ftpack
 18045  12D3  0825               	movf	??___ftpack,w
 18046  12D4  07A3               	addwf	___ftpack@exp,f
 18047  12D5  3001               	movlw	1
 18048  12D6  07A0               	addwf	___ftpack@arg,f
 18049  12D7  3000               	movlw	0
 18050  12D8  1803               	skipnc
 18051  12D9  3001               	movlw	1
 18052  12DA  07A1               	addwf	___ftpack@arg+1,f
 18053  12DB  3000               	movlw	0
 18054  12DC  1803               	skipnc
 18055  12DD  3001               	movlw	1
 18056  12DE  07A2               	addwf	___ftpack@arg+2,f
 18057  12DF  3001               	movlw	1
 18058  12E0                     u3735:	
 18059  12E0  36A2               	lsrf	___ftpack@arg+2,f
 18060  12E1  0CA1               	rrf	___ftpack@arg+1,f
 18061  12E2  0CA0               	rrf	___ftpack@arg,f
 18062  12E3  0B89               	decfsz	9,f
 18063  12E4  2AE0               	goto	u3735
 18064  12E5                     l3152:	
 18065  12E5  30FF               	movlw	255
 18066  12E6  0522               	andwf	___ftpack@arg+2,w
 18067  12E7  1903               	btfsc	3,2
 18068  12E8  2AF2               	goto	l5758
 18069  12E9  2AD1               	goto	l5750
 18070  12EA                     l5756:	
 18071  12EA  3001               	movlw	1
 18072  12EB  02A3               	subwf	___ftpack@exp,f
 18073  12EC  3001               	movlw	1
 18074  12ED                     u3755:	
 18075  12ED  35A0               	lslf	___ftpack@arg,f
 18076  12EE  0DA1               	rlf	___ftpack@arg+1,f
 18077  12EF  0DA2               	rlf	___ftpack@arg+2,f
 18078  12F0  0B89               	decfsz	9,f
 18079  12F1  2AED               	goto	u3755
 18080  12F2                     l5758:	
 18081  12F2  1FA1               	btfss	___ftpack@arg+1,7
 18082  12F3  2AEA               	goto	l5756
 18083  12F4  1823               	btfsc	___ftpack@exp,0
 18084  12F5  2AFC               	goto	l3158
 18085  12F6  30FF               	movlw	255
 18086  12F7  05A0               	andwf	___ftpack@arg,f
 18087  12F8  307F               	movlw	127
 18088  12F9  05A1               	andwf	___ftpack@arg+1,f
 18089  12FA  30FF               	movlw	255
 18090  12FB  05A2               	andwf	___ftpack@arg+2,f
 18091  12FC                     l3158:	
 18092  12FC  1003               	clrc
 18093  12FD  0CA3               	rrf	___ftpack@exp,f
 18094  12FE  0823               	movf	___ftpack@exp,w
 18095  12FF  00A5               	movwf	??___ftpack
 18096  1300  01A6               	clrf	??___ftpack+1
 18097  1301  01A7               	clrf	??___ftpack+2
 18098  1302  3010               	movlw	16
 18099  1303                     u3785:	
 18100  1303  35A5               	lslf	??___ftpack,f
 18101  1304  0DA6               	rlf	??___ftpack+1,f
 18102  1305  0DA7               	rlf	??___ftpack+2,f
 18103  1306  0B89               	decfsz	9,f
 18104  1307  2B03               	goto	u3785
 18105  1308  0825               	movf	??___ftpack,w
 18106  1309  04A0               	iorwf	___ftpack@arg,f
 18107  130A  0826               	movf	??___ftpack+1,w
 18108  130B  04A1               	iorwf	___ftpack@arg+1,f
 18109  130C  0827               	movf	??___ftpack+2,w
 18110  130D  04A2               	iorwf	___ftpack@arg+2,f
 18111  130E  0824               	movf	___ftpack@sign,w
 18112  130F  1903               	btfsc	3,2
 18113  1310  0008               	return
 18114  1311  17A2               	bsf	___ftpack@arg+2,7
 18115  1312  0008               	return
 18116  1313                     __end_of___ftpack:	
 18117                           
 18118                           	psect	text115
 18119  2713                     __ptext115:	
 18120 ;; *************** function _setRFSW_Status *****************
 18121 ;; Defined at:
 18122 ;;		line 380 in file "../src/RF_Control_B1.c"
 18123 ;; Parameters:    Size  Location     Type
 18124 ;;  sw              1    wreg     unsigned char 
 18125 ;;  command         1    2[BANK0 ] unsigned char 
 18126 ;; Auto vars:     Size  Location     Type
 18127 ;;  sw              1    3[BANK0 ] unsigned char 
 18128 ;; Return value:  Size  Location     Type
 18129 ;;		None               void
 18130 ;; Registers used:
 18131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18132 ;; Tracked objects:
 18133 ;;		On entry : 0/0
 18134 ;;		On exit  : 0/0
 18135 ;;		Unchanged: 0/0
 18136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18137 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18141 ;;Total ram usage:        2 bytes
 18142 ;; Hardware stack levels used:    1
 18143 ;; Hardware stack levels required when called:    5
 18144 ;; This function calls:
 18145 ;;		_RfSWPointSelect
 18146 ;; This function is called by:
 18147 ;;		_DlyOff_Main
 18148 ;;		_setDimmerLights_ERROR
 18149 ;;		_setControl_Lights_Table
 18150 ;;		_Sw_DimmerOnFunc
 18151 ;;		_Sw_DimmerAdjFunc
 18152 ;; This function uses a non-reentrant model
 18153 ;;
 18154                           
 18155                           
 18156                           ;psect for function _setRFSW_Status
 18157  2713                     _setRFSW_Status:	
 18158                           
 18159                           ;incstack = 0
 18160                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18161                           ;setRFSW_Status@sw stored from wreg
 18162  2713  0020               	movlb	0	; select bank0
 18163  2714  00A3               	movwf	setRFSW_Status@sw
 18164                           
 18165                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 18166  2715  0823               	movf	setRFSW_Status@sw,w
 18167  2716  31A6  2689         	fcall	_RfSWPointSelect
 18168                           
 18169                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 18170  2718  0021               	movlb	1	; select bank1
 18171  2719  083F               	movf	_RFSW^(0+128),w
 18172  271A  0086               	movwf	6
 18173  271B  0187               	clrf	7
 18174  271C  0020               	movlb	0	; select bank0
 18175  271D  0822               	movf	setRFSW_Status@command,w
 18176  271E  1001               	bcf	1,0
 18177  271F  1D03               	skipz
 18178  2720  1401               	bsf	1,0
 18179  2721  0008               	return
 18180  2722                     __end_of_setRFSW_Status:	
 18181                           
 18182                           	psect	text116
 18183  2689                     __ptext116:	
 18184 ;; *************** function _RfSWPointSelect *****************
 18185 ;; Defined at:
 18186 ;;		line 315 in file "../src/RF_Control_B1.c"
 18187 ;; Parameters:    Size  Location     Type
 18188 ;;  sw              1    wreg     unsigned char 
 18189 ;; Auto vars:     Size  Location     Type
 18190 ;;  sw              1    1[BANK0 ] unsigned char 
 18191 ;; Return value:  Size  Location     Type
 18192 ;;		None               void
 18193 ;; Registers used:
 18194 ;;		wreg
 18195 ;; Tracked objects:
 18196 ;;		On entry : 0/0
 18197 ;;		On exit  : 0/0
 18198 ;;		Unchanged: 0/0
 18199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18204 ;;Total ram usage:        2 bytes
 18205 ;; Hardware stack levels used:    1
 18206 ;; Hardware stack levels required when called:    4
 18207 ;; This function calls:
 18208 ;;		Nothing
 18209 ;; This function is called by:
 18210 ;;		_setRFSW_Control
 18211 ;;		_setRFSW_AdjControl
 18212 ;;		_setRFSW_Status
 18213 ;; This function uses a non-reentrant model
 18214 ;;
 18215                           
 18216                           
 18217                           ;psect for function _RfSWPointSelect
 18218  2689                     _RfSWPointSelect:	
 18219                           
 18220                           ;incstack = 0
 18221                           ; Regs used in _RfSWPointSelect: [wreg]
 18222                           ;RfSWPointSelect@sw stored from wreg
 18223  2689  0020               	movlb	0	; select bank0
 18224  268A  00A1               	movwf	RfSWPointSelect@sw
 18225                           
 18226                           ;RF_Control_B1.c: 317: if (sw == 1) {
 18227  268B  0821               	movf	RfSWPointSelect@sw,w
 18228  268C  3A01               	xorlw	1
 18229  268D  1D03               	skipz
 18230  268E  0008               	return
 18231                           
 18232                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 18233  268F  30E9               	movlw	_RFSW1& (0+255)
 18234  2690  00A0               	movwf	??_RfSWPointSelect
 18235  2691  0820               	movf	??_RfSWPointSelect,w
 18236  2692  0021               	movlb	1	; select bank1
 18237  2693  00BF               	movwf	_RFSW^(0+128)
 18238  2694  0008               	return
 18239  2695                     __end_of_RfSWPointSelect:	
 18240                           
 18241                           	psect	text117
 18242  277E                     __ptext117:	
 18243 ;; *************** function _setDimmerLights_Trigger *****************
 18244 ;; Defined at:
 18245 ;;		line 445 in file "../src/Dimmer_B1.c"
 18246 ;; Parameters:    Size  Location     Type
 18247 ;;  lights          1    wreg     unsigned char 
 18248 ;;  command         1    2[BANK0 ] unsigned char 
 18249 ;; Auto vars:     Size  Location     Type
 18250 ;;  lights          1    3[BANK0 ] unsigned char 
 18251 ;; Return value:  Size  Location     Type
 18252 ;;		None               void
 18253 ;; Registers used:
 18254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18255 ;; Tracked objects:
 18256 ;;		On entry : 0/0
 18257 ;;		On exit  : 0/0
 18258 ;;		Unchanged: 0/0
 18259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18260 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18264 ;;Total ram usage:        2 bytes
 18265 ;; Hardware stack levels used:    1
 18266 ;; Hardware stack levels required when called:    5
 18267 ;; This function calls:
 18268 ;;		_DimmerLightsPointSelect
 18269 ;; This function is called by:
 18270 ;;		_DlyOff_Main
 18271 ;;		_setRFSW_Control
 18272 ;;		_Sw_DimmerOnFunc
 18273 ;;		_Sw_DimmerOffFunc
 18274 ;; This function uses a non-reentrant model
 18275 ;;
 18276                           
 18277                           
 18278                           ;psect for function _setDimmerLights_Trigger
 18279  277E                     _setDimmerLights_Trigger:	
 18280                           
 18281                           ;incstack = 0
 18282                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18283                           ;setDimmerLights_Trigger@lights stored from wreg
 18284  277E  0020               	movlb	0	; select bank0
 18285  277F  00A3               	movwf	setDimmerLights_Trigger@lights
 18286                           
 18287                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18288  2780  0823               	movf	setDimmerLights_Trigger@lights,w
 18289  2781  31A6  2617         	fcall	_DimmerLightsPointSelect
 18290                           
 18291                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18292  2783  0877               	movf	_DimmerLights,w
 18293  2784  3E09               	addlw	9
 18294  2785  0086               	movwf	6
 18295  2786  3001               	movlw	1	; select bank2/3
 18296  2787  0087               	movwf	7
 18297  2788  0020               	movlb	0	; select bank0
 18298  2789  0822               	movf	setDimmerLights_Trigger@command,w
 18299  278A  1081               	bcf	1,1
 18300  278B  1D03               	skipz
 18301  278C  1481               	bsf	1,1
 18302  278D  0008               	return
 18303  278E                     __end_of_setDimmerLights_Trigger:	
 18304                           
 18305                           	psect	text118
 18306  276E                     __ptext118:	
 18307 ;; *************** function _setDimmerLights_Switch *****************
 18308 ;; Defined at:
 18309 ;;		line 435 in file "../src/Dimmer_B1.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;  lights          1    wreg     unsigned char 
 18312 ;;  command         1    2[BANK0 ] unsigned char 
 18313 ;; Auto vars:     Size  Location     Type
 18314 ;;  lights          1    3[BANK0 ] unsigned char 
 18315 ;; Return value:  Size  Location     Type
 18316 ;;		None               void
 18317 ;; Registers used:
 18318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18319 ;; Tracked objects:
 18320 ;;		On entry : 0/0
 18321 ;;		On exit  : 0/0
 18322 ;;		Unchanged: 0/0
 18323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18324 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;Total ram usage:        2 bytes
 18329 ;; Hardware stack levels used:    1
 18330 ;; Hardware stack levels required when called:    5
 18331 ;; This function calls:
 18332 ;;		_DimmerLightsPointSelect
 18333 ;; This function is called by:
 18334 ;;		_DlyOff_Main
 18335 ;;		_setRFSW_Control
 18336 ;;		_Sw_DimmerOnFunc
 18337 ;;		_Sw_DimmerOffFunc
 18338 ;; This function uses a non-reentrant model
 18339 ;;
 18340                           
 18341                           
 18342                           ;psect for function _setDimmerLights_Switch
 18343  276E                     _setDimmerLights_Switch:	
 18344                           
 18345                           ;incstack = 0
 18346                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18347                           ;setDimmerLights_Switch@lights stored from wreg
 18348  276E  0020               	movlb	0	; select bank0
 18349  276F  00A3               	movwf	setDimmerLights_Switch@lights
 18350                           
 18351                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18352  2770  0823               	movf	setDimmerLights_Switch@lights,w
 18353  2771  31A6  2617         	fcall	_DimmerLightsPointSelect
 18354                           
 18355                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18356  2773  0877               	movf	_DimmerLights,w
 18357  2774  3E09               	addlw	9
 18358  2775  0086               	movwf	6
 18359  2776  3001               	movlw	1	; select bank2/3
 18360  2777  0087               	movwf	7
 18361  2778  0020               	movlb	0	; select bank0
 18362  2779  0822               	movf	setDimmerLights_Switch@command,w
 18363  277A  1001               	bcf	1,0
 18364  277B  1D03               	skipz
 18365  277C  1401               	bsf	1,0
 18366  277D  0008               	return
 18367  277E                     __end_of_setDimmerLights_Switch:	
 18368                           
 18369                           	psect	text119
 18370  2617                     __ptext119:	
 18371 ;; *************** function _DimmerLightsPointSelect *****************
 18372 ;; Defined at:
 18373 ;;		line 7 in file "../src/Dimmer_B1.c"
 18374 ;; Parameters:    Size  Location     Type
 18375 ;;  lights          1    wreg     unsigned char 
 18376 ;; Auto vars:     Size  Location     Type
 18377 ;;  lights          1    1[BANK0 ] unsigned char 
 18378 ;; Return value:  Size  Location     Type
 18379 ;;		None               void
 18380 ;; Registers used:
 18381 ;;		wreg
 18382 ;; Tracked objects:
 18383 ;;		On entry : 0/0
 18384 ;;		On exit  : 0/0
 18385 ;;		Unchanged: 0/0
 18386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18391 ;;Total ram usage:        2 bytes
 18392 ;; Hardware stack levels used:    1
 18393 ;; Hardware stack levels required when called:    4
 18394 ;; This function calls:
 18395 ;;		Nothing
 18396 ;; This function is called by:
 18397 ;;		_setDimmerLights_Initialization
 18398 ;;		_setDimmerLights_Main
 18399 ;;		_setDimmerLights_ERROR
 18400 ;;		_setDimmerLights_TriggerERROR
 18401 ;;		_setDimmerLights
 18402 ;;		_setDimmerLights_Adj
 18403 ;;		_setDimmerLights_AdjRF
 18404 ;;		_setDimmerLights_Switch
 18405 ;;		_setDimmerLights_AdjGo
 18406 ;;		_setDimmerLights_Trigger
 18407 ;;		_setDimmerLights_TriggerAdj
 18408 ;;		_setDimmerLights_Clear
 18409 ;;		_setDimmerLights_GO
 18410 ;;		_setDimmerLights_MaxmumValue
 18411 ;; This function uses a non-reentrant model
 18412 ;;
 18413                           
 18414                           
 18415                           ;psect for function _DimmerLightsPointSelect
 18416  2617                     _DimmerLightsPointSelect:	
 18417                           
 18418                           ;incstack = 0
 18419                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18420                           ;DimmerLightsPointSelect@lights stored from wreg
 18421  2617  0020               	movlb	0	; select bank0
 18422  2618  00A1               	movwf	DimmerLightsPointSelect@lights
 18423                           
 18424                           ;Dimmer_B1.c: 10: if(lights == 1)
 18425  2619  0821               	movf	DimmerLightsPointSelect@lights,w
 18426  261A  3A01               	xorlw	1
 18427  261B  1D03               	skipz
 18428  261C  0008               	return
 18429                           
 18430                           ;Dimmer_B1.c: 11: {
 18431                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18432  261D  3031               	movlw	_DimmerLights1& (0+255)
 18433  261E  00A0               	movwf	??_DimmerLightsPointSelect
 18434  261F  0820               	movf	??_DimmerLightsPointSelect,w
 18435  2620  00F7               	movwf	_DimmerLights
 18436  2621  0008               	return
 18437  2622                     __end_of_DimmerLightsPointSelect:	
 18438                           
 18439                           	psect	text120
 18440  0819                     __ptext120:	
 18441 ;; *************** function _setBuz *****************
 18442 ;; Defined at:
 18443 ;;		line 23 in file "../src/Buzzer_B1.c"
 18444 ;; Parameters:    Size  Location     Type
 18445 ;;  count           1    wreg     unsigned char 
 18446 ;;  time            2    6[BANK0 ] int 
 18447 ;; Auto vars:     Size  Location     Type
 18448 ;;  count           1    9[BANK0 ] unsigned char 
 18449 ;; Return value:  Size  Location     Type
 18450 ;;		None               void
 18451 ;; Registers used:
 18452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18453 ;; Tracked objects:
 18454 ;;		On entry : 0/0
 18455 ;;		On exit  : 0/0
 18456 ;;		Unchanged: 0/0
 18457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18458 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18461 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18462 ;;Total ram usage:        4 bytes
 18463 ;; Hardware stack levels used:    1
 18464 ;; Hardware stack levels required when called:    5
 18465 ;; This function calls:
 18466 ;;		___wmul
 18467 ;; This function is called by:
 18468 ;;		_DlyOff_Main
 18469 ;;		_setDimmerLights_Main
 18470 ;;		_DimmerLights_Exceptions
 18471 ;;		_setOverTemp_Exceptions
 18472 ;;		_setLog_Code
 18473 ;;		_setControl_Lights_Table
 18474 ;;		_setRFSW_Control
 18475 ;;		_setSw_Main
 18476 ;;		_Sw_DimmerOnFunc
 18477 ;;		_my_Main
 18478 ;; This function uses a non-reentrant model
 18479 ;;
 18480                           
 18481                           
 18482                           ;psect for function _setBuz
 18483  0819                     _setBuz:	
 18484                           
 18485                           ;incstack = 0
 18486                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18487                           ;setBuz@count stored from wreg
 18488  0819  0020               	movlb	0	; select bank0
 18489  081A  00A9               	movwf	setBuz@count
 18490                           
 18491                           ;Buzzer_B1.c: 24: time *= 20;
 18492  081B  3014               	movlw	20
 18493  081C  00A0               	movwf	___wmul@multiplier
 18494  081D  3000               	movlw	0
 18495  081E  00A1               	movwf	___wmul@multiplier+1
 18496  081F  0827               	movf	setBuz@time+1,w
 18497  0820  01A3               	clrf	___wmul@multiplicand+1
 18498  0821  07A3               	addwf	___wmul@multiplicand+1,f
 18499  0822  0826               	movf	setBuz@time,w
 18500  0823  01A2               	clrf	___wmul@multiplicand
 18501  0824  07A2               	addwf	___wmul@multiplicand,f
 18502  0825  3199  21B5  3188   	fcall	___wmul
 18503  0828  0020               	movlb	0	; select bank0
 18504  0829  0821               	movf	?___wmul+1,w
 18505  082A  01A7               	clrf	setBuz@time+1
 18506  082B  07A7               	addwf	setBuz@time+1,f
 18507  082C  0820               	movf	?___wmul,w
 18508  082D  01A6               	clrf	setBuz@time
 18509  082E  07A6               	addwf	setBuz@time,f
 18510                           
 18511                           ;Buzzer_B1.c: 25: if (Buz->Enable) {
 18512  082F  0021               	movlb	1	; select bank1
 18513  0830  0837               	movf	_Buz^(0+128),w
 18514  0831  0086               	movwf	6
 18515  0832  3001               	movlw	1	; select bank2/3
 18516  0833  0087               	movwf	7
 18517  0834  1C01               	btfss	1,0
 18518  0835  0008               	return
 18519                           
 18520                           ;Buzzer_B1.c: 26: if (!Buz->GO) {
 18521  0836  0837               	movf	_Buz^(0+128),w
 18522  0837  0086               	movwf	6
 18523  0838  3001               	movlw	1	; select bank2/3
 18524  0839  0087               	movwf	7
 18525  083A  1881               	btfsc	1,1
 18526  083B  285A               	goto	l8120
 18527                           
 18528                           ;Buzzer_B1.c: 27: Buz->GO = 1;
 18529  083C  0837               	movf	_Buz^(0+128),w
 18530  083D  0086               	movwf	6
 18531  083E  3001               	movlw	1	; select bank2/3
 18532  083F  0087               	movwf	7
 18533  0840  1481               	bsf	1,1
 18534                           
 18535                           ;Buzzer_B1.c: 28: Buz->Count = count;
 18536  0841  0020               	movlb	0	; select bank0
 18537  0842  0829               	movf	setBuz@count,w
 18538  0843  00A8               	movwf	??_setBuz
 18539  0844  0021               	movlb	1	; select bank1
 18540  0845  0837               	movf	_Buz^(0+128),w
 18541  0846  3E03               	addlw	3
 18542  0847  0086               	movwf	6
 18543  0848  3001               	movlw	1	; select bank2/3
 18544  0849  0087               	movwf	7
 18545  084A  0020               	movlb	0	; select bank0
 18546  084B  0828               	movf	??_setBuz,w
 18547  084C  0081               	movwf	1
 18548                           
 18549                           ;Buzzer_B1.c: 29: Buz->TimeValue = time;
 18550  084D  0021               	movlb	1	; select bank1
 18551  084E  0837               	movf	_Buz^(0+128),w
 18552  084F  3E06               	addlw	6
 18553  0850  0086               	movwf	6
 18554  0851  3001               	movlw	1	; select bank2/3
 18555  0852  0087               	movwf	7
 18556  0853  0020               	movlb	0	; select bank0
 18557  0854  0826               	movf	setBuz@time,w
 18558  0855  3FC0               	movwi [0]fsr1
 18559  0856  0827               	movf	setBuz@time+1,w
 18560  0857  3FC1               	movwi [1]fsr1
 18561                           
 18562                           ;Buzzer_B1.c: 31: RB3 = 1;
 18563  0858  158D               	bsf	13,3	;volatile
 18564                           
 18565                           ;Buzzer_B1.c: 32: } else {
 18566  0859  0008               	return
 18567  085A                     l8120:	
 18568                           
 18569                           ;Buzzer_B1.c: 33: if (!Buz->BufferStatus1) {
 18570  085A  0021               	movlb	1	; select bank1
 18571  085B  0837               	movf	_Buz^(0+128),w
 18572  085C  0086               	movwf	6
 18573  085D  3001               	movlw	1	; select bank2/3
 18574  085E  0087               	movwf	7
 18575  085F  1981               	btfsc	1,3
 18576  0860  287E               	goto	l8124
 18577                           
 18578                           ;Buzzer_B1.c: 34: Buz->BufferStatus1 = 1;
 18579  0861  0837               	movf	_Buz^(0+128),w
 18580  0862  0086               	movwf	6
 18581  0863  3001               	movlw	1	; select bank2/3
 18582  0864  0087               	movwf	7
 18583  0865  1581               	bsf	1,3
 18584                           
 18585                           ;Buzzer_B1.c: 35: Buz->CountBuffer1 = count;
 18586  0866  0020               	movlb	0	; select bank0
 18587  0867  0829               	movf	setBuz@count,w
 18588  0868  00A8               	movwf	??_setBuz
 18589  0869  0021               	movlb	1	; select bank1
 18590  086A  0837               	movf	_Buz^(0+128),w
 18591  086B  3E04               	addlw	4
 18592  086C  0086               	movwf	6
 18593  086D  3001               	movlw	1	; select bank2/3
 18594  086E  0087               	movwf	7
 18595  086F  0020               	movlb	0	; select bank0
 18596  0870  0828               	movf	??_setBuz,w
 18597  0871  0081               	movwf	1
 18598                           
 18599                           ;Buzzer_B1.c: 36: Buz->TimeValueBuffer1 = time;
 18600  0872  0021               	movlb	1	; select bank1
 18601  0873  0837               	movf	_Buz^(0+128),w
 18602  0874  3E08               	addlw	8
 18603  0875  0086               	movwf	6
 18604  0876  3001               	movlw	1	; select bank2/3
 18605  0877  0087               	movwf	7
 18606  0878  0020               	movlb	0	; select bank0
 18607  0879  0826               	movf	setBuz@time,w
 18608  087A  3FC0               	movwi [0]fsr1
 18609  087B  0827               	movf	setBuz@time+1,w
 18610  087C  3FC1               	movwi [1]fsr1
 18611                           
 18612                           ;Buzzer_B1.c: 37: } else if (!Buz->BufferStatus2) {
 18613  087D  0008               	return
 18614  087E                     l8124:	
 18615  087E  0021               	movlb	1	; select bank1
 18616  087F  0837               	movf	_Buz^(0+128),w
 18617  0880  0086               	movwf	6
 18618  0881  3001               	movlw	1	; select bank2/3
 18619  0882  0087               	movwf	7
 18620  0883  1A01               	btfsc	1,4
 18621  0884  0008               	return
 18622                           
 18623                           ;Buzzer_B1.c: 38: Buz->BufferStatus2 = 1;
 18624  0885  0837               	movf	_Buz^(0+128),w
 18625  0886  0086               	movwf	6
 18626  0887  3001               	movlw	1	; select bank2/3
 18627  0888  0087               	movwf	7
 18628  0889  1601               	bsf	1,4
 18629                           
 18630                           ;Buzzer_B1.c: 39: Buz->CountBuffer2 = count;
 18631  088A  0020               	movlb	0	; select bank0
 18632  088B  0829               	movf	setBuz@count,w
 18633  088C  00A8               	movwf	??_setBuz
 18634  088D  0021               	movlb	1	; select bank1
 18635  088E  0837               	movf	_Buz^(0+128),w
 18636  088F  3E05               	addlw	5
 18637  0890  0086               	movwf	6
 18638  0891  3001               	movlw	1	; select bank2/3
 18639  0892  0087               	movwf	7
 18640  0893  0020               	movlb	0	; select bank0
 18641  0894  0828               	movf	??_setBuz,w
 18642  0895  0081               	movwf	1
 18643                           
 18644                           ;Buzzer_B1.c: 40: Buz->TimeValueBuffer2 = time;
 18645  0896  0021               	movlb	1	; select bank1
 18646  0897  0837               	movf	_Buz^(0+128),w
 18647  0898  3E0A               	addlw	10
 18648  0899  0086               	movwf	6
 18649  089A  3001               	movlw	1	; select bank2/3
 18650  089B  0087               	movwf	7
 18651  089C  0020               	movlb	0	; select bank0
 18652  089D  0826               	movf	setBuz@time,w
 18653  089E  3FC0               	movwi [0]fsr1
 18654  089F  0827               	movf	setBuz@time+1,w
 18655  08A0  3FC1               	movwi [1]fsr1
 18656  08A1  0008               	return
 18657  08A2                     __end_of_setBuz:	
 18658                           
 18659                           	psect	text121
 18660  19B5                     __ptext121:	
 18661 ;; *************** function ___wmul *****************
 18662 ;; Defined at:
 18663 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
 18664 ;; Parameters:    Size  Location     Type
 18665 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18666 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18667 ;; Auto vars:     Size  Location     Type
 18668 ;;  product         2    4[BANK0 ] unsigned int 
 18669 ;; Return value:  Size  Location     Type
 18670 ;;                  2    0[BANK0 ] unsigned int 
 18671 ;; Registers used:
 18672 ;;		wreg, status,2, status,0
 18673 ;; Tracked objects:
 18674 ;;		On entry : 0/0
 18675 ;;		On exit  : 0/0
 18676 ;;		Unchanged: 0/0
 18677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;Total ram usage:        6 bytes
 18683 ;; Hardware stack levels used:    1
 18684 ;; Hardware stack levels required when called:    4
 18685 ;; This function calls:
 18686 ;;		Nothing
 18687 ;; This function is called by:
 18688 ;;		_setBuz
 18689 ;;		_Load_Main
 18690 ;; This function uses a non-reentrant model
 18691 ;;
 18692                           
 18693                           
 18694                           ;psect for function ___wmul
 18695  19B5                     ___wmul:	
 18696                           
 18697                           ;incstack = 0
 18698                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18699  19B5  0020               	movlb	0	; select bank0
 18700  19B6  01A4               	clrf	___wmul@product
 18701  19B7  01A5               	clrf	___wmul@product+1
 18702  19B8                     l8100:	
 18703  19B8  1C20               	btfss	___wmul@multiplier,0
 18704  19B9  29BE               	goto	l2991
 18705  19BA  0822               	movf	___wmul@multiplicand,w
 18706  19BB  07A4               	addwf	___wmul@product,f
 18707  19BC  0823               	movf	___wmul@multiplicand+1,w
 18708  19BD  3DA5               	addwfc	___wmul@product+1,f
 18709  19BE                     l2991:	
 18710  19BE  3001               	movlw	1
 18711  19BF                     u7385:	
 18712  19BF  35A2               	lslf	___wmul@multiplicand,f
 18713  19C0  0DA3               	rlf	___wmul@multiplicand+1,f
 18714  19C1  0B89               	decfsz	9,f
 18715  19C2  29BF               	goto	u7385
 18716  19C3  3001               	movlw	1
 18717  19C4                     u7395:	
 18718  19C4  36A1               	lsrf	___wmul@multiplier+1,f
 18719  19C5  0CA0               	rrf	___wmul@multiplier,f
 18720  19C6  0B89               	decfsz	9,f
 18721  19C7  29C4               	goto	u7395
 18722  19C8  0821               	movf	___wmul@multiplier+1,w
 18723  19C9  0420               	iorwf	___wmul@multiplier,w
 18724  19CA  1D03               	skipz
 18725  19CB  29B8               	goto	l8100
 18726  19CC  0825               	movf	___wmul@product+1,w
 18727  19CD  01A1               	clrf	?___wmul+1
 18728  19CE  07A1               	addwf	?___wmul+1,f
 18729  19CF  0824               	movf	___wmul@product,w
 18730  19D0  01A0               	clrf	?___wmul
 18731  19D1  07A0               	addwf	?___wmul,f
 18732  19D2  0008               	return
 18733  19D3                     __end_of___wmul:	
 18734                           
 18735                           	psect	text122
 18736  258B                     __ptext122:	
 18737 ;; *************** function _DelayOff_Initialization *****************
 18738 ;; Defined at:
 18739 ;;		line 26 in file "../src/DelayOff_B1.c"
 18740 ;; Parameters:    Size  Location     Type
 18741 ;;		None
 18742 ;; Auto vars:     Size  Location     Type
 18743 ;;		None
 18744 ;; Return value:  Size  Location     Type
 18745 ;;		None               void
 18746 ;; Registers used:
 18747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18748 ;; Tracked objects:
 18749 ;;		On entry : 0/0
 18750 ;;		On exit  : 0/0
 18751 ;;		Unchanged: 0/0
 18752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;Total ram usage:        0 bytes
 18758 ;; Hardware stack levels used:    1
 18759 ;; Hardware stack levels required when called:    6
 18760 ;; This function calls:
 18761 ;;		_DlyOff_Initialization
 18762 ;; This function is called by:
 18763 ;;		_main
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           
 18768                           ;psect for function _DelayOff_Initialization
 18769  258B                     _DelayOff_Initialization:	
 18770                           
 18771                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18772                           
 18773                           ;incstack = 0
 18774                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18775  258B  3001               	movlw	1
 18776  258C  31A6  260C         	fcall	_DlyOff_Initialization
 18777  258E  0008               	return
 18778  258F                     __end_of_DelayOff_Initialization:	
 18779                           
 18780                           	psect	text123
 18781  260C                     __ptext123:	
 18782 ;; *************** function _DlyOff_Initialization *****************
 18783 ;; Defined at:
 18784 ;;		line 56 in file "../src/DelayOff_B1.c"
 18785 ;; Parameters:    Size  Location     Type
 18786 ;;  sw              1    wreg     unsigned char 
 18787 ;; Auto vars:     Size  Location     Type
 18788 ;;  sw              1    2[BANK0 ] unsigned char 
 18789 ;; Return value:  Size  Location     Type
 18790 ;;		None               void
 18791 ;; Registers used:
 18792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18793 ;; Tracked objects:
 18794 ;;		On entry : 0/0
 18795 ;;		On exit  : 0/0
 18796 ;;		Unchanged: 0/0
 18797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18802 ;;Total ram usage:        1 bytes
 18803 ;; Hardware stack levels used:    1
 18804 ;; Hardware stack levels required when called:    5
 18805 ;; This function calls:
 18806 ;;		_DelayOffPointSelect
 18807 ;; This function is called by:
 18808 ;;		_DelayOff_Initialization
 18809 ;; This function uses a non-reentrant model
 18810 ;;
 18811                           
 18812                           
 18813                           ;psect for function _DlyOff_Initialization
 18814  260C                     _DlyOff_Initialization:	
 18815                           
 18816                           ;incstack = 0
 18817                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18818                           ;DlyOff_Initialization@sw stored from wreg
 18819  260C  0020               	movlb	0	; select bank0
 18820  260D  00A2               	movwf	DlyOff_Initialization@sw
 18821                           
 18822                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18823  260E  0822               	movf	DlyOff_Initialization@sw,w
 18824  260F  31A6  267D         	fcall	_DelayOffPointSelect
 18825                           
 18826                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 18827  2611  0021               	movlb	1	; select bank1
 18828  2612  0839               	movf	_DelayOff^(0+128),w
 18829  2613  0086               	movwf	6
 18830  2614  0187               	clrf	7
 18831  2615  1401               	bsf	1,0
 18832  2616  0008               	return
 18833  2617                     __end_of_DlyOff_Initialization:	
 18834                           
 18835                           	psect	text124
 18836  267D                     __ptext124:	
 18837 ;; *************** function _DelayOffPointSelect *****************
 18838 ;; Defined at:
 18839 ;;		line 7 in file "../src/DelayOff_B1.c"
 18840 ;; Parameters:    Size  Location     Type
 18841 ;;  sw              1    wreg     unsigned char 
 18842 ;; Auto vars:     Size  Location     Type
 18843 ;;  sw              1    1[BANK0 ] unsigned char 
 18844 ;; Return value:  Size  Location     Type
 18845 ;;		None               void
 18846 ;; Registers used:
 18847 ;;		wreg
 18848 ;; Tracked objects:
 18849 ;;		On entry : 0/0
 18850 ;;		On exit  : 0/0
 18851 ;;		Unchanged: 0/0
 18852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18857 ;;Total ram usage:        2 bytes
 18858 ;; Hardware stack levels used:    1
 18859 ;; Hardware stack levels required when called:    4
 18860 ;; This function calls:
 18861 ;;		Nothing
 18862 ;; This function is called by:
 18863 ;;		_DlyOff_Initialization
 18864 ;;		_DlyOff_Main
 18865 ;;		_setDelayOff_GO
 18866 ;; This function uses a non-reentrant model
 18867 ;;
 18868                           
 18869                           
 18870                           ;psect for function _DelayOffPointSelect
 18871  267D                     _DelayOffPointSelect:	
 18872                           
 18873                           ;incstack = 0
 18874                           ; Regs used in _DelayOffPointSelect: [wreg]
 18875                           ;DelayOffPointSelect@sw stored from wreg
 18876  267D  0020               	movlb	0	; select bank0
 18877  267E  00A1               	movwf	DelayOffPointSelect@sw
 18878                           
 18879                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18880  267F  0821               	movf	DelayOffPointSelect@sw,w
 18881  2680  3A01               	xorlw	1
 18882  2681  1D03               	skipz
 18883  2682  0008               	return
 18884                           
 18885                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18886  2683  30D0               	movlw	_DlySw1& (0+255)
 18887  2684  00A0               	movwf	??_DelayOffPointSelect
 18888  2685  0820               	movf	??_DelayOffPointSelect,w
 18889  2686  0021               	movlb	1	; select bank1
 18890  2687  00B9               	movwf	_DelayOff^(0+128)
 18891  2688  0008               	return
 18892  2689                     __end_of_DelayOffPointSelect:	
 18893                           
 18894                           	psect	text125
 18895  1888                     __ptext125:	
 18896 ;; *************** function _CC2500_PowerOnInitial *****************
 18897 ;; Defined at:
 18898 ;;		line 97 in file "../src/CC2500_B1.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;		None
 18901 ;; Auto vars:     Size  Location     Type
 18902 ;;		None
 18903 ;; Return value:  Size  Location     Type
 18904 ;;		None               void
 18905 ;; Registers used:
 18906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18907 ;; Tracked objects:
 18908 ;;		On entry : 0/0
 18909 ;;		On exit  : 0/0
 18910 ;;		Unchanged: 0/0
 18911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;Total ram usage:        0 bytes
 18917 ;; Hardware stack levels used:    1
 18918 ;; Hardware stack levels required when called:    7
 18919 ;; This function calls:
 18920 ;;		_CC2500_ClearRXFIFO
 18921 ;;		_CC2500_ClearTXFIFO
 18922 ;;		_CC2500_FrequencyCabr
 18923 ;;		_CC2500_InitPATable
 18924 ;;		_CC2500_InitSetREG
 18925 ;;		_CC2500_PowerRST
 18926 ;;		_CC2500_SIDLEMode
 18927 ;; This function is called by:
 18928 ;;		_main
 18929 ;; This function uses a non-reentrant model
 18930 ;;
 18931                           
 18932                           
 18933                           ;psect for function _CC2500_PowerOnInitial
 18934  1888                     _CC2500_PowerOnInitial:	
 18935                           
 18936                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 18937                           
 18938                           ;incstack = 0
 18939                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18940  1888  319C  2417  3198   	fcall	_CC2500_PowerRST
 18941                           
 18942                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 18943  188B  319B  230D  3198   	fcall	_CC2500_InitSetREG
 18944                           
 18945                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 18946  188E  3199  21D3  3198   	fcall	_CC2500_InitPATable
 18947                           
 18948                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 18949  1891  31A5  2583  3198   	fcall	_CC2500_ClearTXFIFO
 18950                           
 18951                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 18952  1894  31A5  257F  3198   	fcall	_CC2500_ClearRXFIFO
 18953                           
 18954                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 18955  1897  31A6  2671  3198   	fcall	_CC2500_FrequencyCabr
 18956                           
 18957                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 18958  189A  31A5  2587         	fcall	_CC2500_SIDLEMode
 18959  189C  0008               	return
 18960  189D                     __end_of_CC2500_PowerOnInitial:	
 18961                           
 18962                           	psect	text126
 18963  2587                     __ptext126:	
 18964 ;; *************** function _CC2500_SIDLEMode *****************
 18965 ;; Defined at:
 18966 ;;		line 181 in file "../src/CC2500_B1.c"
 18967 ;; Parameters:    Size  Location     Type
 18968 ;;		None
 18969 ;; Auto vars:     Size  Location     Type
 18970 ;;		None
 18971 ;; Return value:  Size  Location     Type
 18972 ;;		None               void
 18973 ;; Registers used:
 18974 ;;		wreg, status,2, status,0, pclath, cstack
 18975 ;; Tracked objects:
 18976 ;;		On entry : 0/0
 18977 ;;		On exit  : 0/0
 18978 ;;		Unchanged: 0/0
 18979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18984 ;;Total ram usage:        0 bytes
 18985 ;; Hardware stack levels used:    1
 18986 ;; Hardware stack levels required when called:    6
 18987 ;; This function calls:
 18988 ;;		_CC2500_WriteCommand
 18989 ;; This function is called by:
 18990 ;;		_CC2500_PowerOnInitial
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           
 18995                           ;psect for function _CC2500_SIDLEMode
 18996  2587                     _CC2500_SIDLEMode:	
 18997                           
 18998                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 18999                           
 19000                           ;incstack = 0
 19001                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19002  2587  3036               	movlw	54
 19003  2588  31A7  275E         	fcall	_CC2500_WriteCommand
 19004  258A  0008               	return
 19005  258B                     __end_of_CC2500_SIDLEMode:	
 19006                           
 19007                           	psect	text127
 19008  1C17                     __ptext127:	
 19009 ;; *************** function _CC2500_PowerRST *****************
 19010 ;; Defined at:
 19011 ;;		line 110 in file "../src/CC2500_B1.c"
 19012 ;; Parameters:    Size  Location     Type
 19013 ;;		None
 19014 ;; Auto vars:     Size  Location     Type
 19015 ;;		None
 19016 ;; Return value:  Size  Location     Type
 19017 ;;		None               void
 19018 ;; Registers used:
 19019 ;;		wreg, status,2, status,0, pclath, cstack
 19020 ;; Tracked objects:
 19021 ;;		On entry : 0/0
 19022 ;;		On exit  : 0/0
 19023 ;;		Unchanged: 0/0
 19024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19029 ;;Total ram usage:        1 bytes
 19030 ;; Hardware stack levels used:    1
 19031 ;; Hardware stack levels required when called:    5
 19032 ;; This function calls:
 19033 ;;		_CC2500_WriteByte
 19034 ;;		_DelayTime_1us
 19035 ;; This function is called by:
 19036 ;;		_CC2500_PowerOnInitial
 19037 ;; This function uses a non-reentrant model
 19038 ;;
 19039                           
 19040                           
 19041                           ;psect for function _CC2500_PowerRST
 19042  1C17                     _CC2500_PowerRST:	
 19043                           
 19044                           ;CC2500_B1.c: 111: RC1 = 0;
 19045                           
 19046                           ;incstack = 0
 19047                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19048  1C17  0020               	movlb	0	; select bank0
 19049  1C18  108E               	bcf	14,1	;volatile
 19050                           
 19051                           ;CC2500_B1.c: 112: RC0 = 0;
 19052  1C19  100E               	bcf	14,0	;volatile
 19053                           
 19054                           ;CC2500_B1.c: 113: RC4 = 1;
 19055  1C1A  160E               	bsf	14,4	;volatile
 19056                           
 19057                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 19058  1C1B  300A               	movlw	10
 19059  1C1C  00A0               	movwf	DelayTime_1us@count
 19060  1C1D  3000               	movlw	0
 19061  1C1E  00A1               	movwf	DelayTime_1us@count+1
 19062  1C1F  319A  22BF  319C   	fcall	_DelayTime_1us
 19063                           
 19064                           ;CC2500_B1.c: 115: RC4 = 0;
 19065  1C22  0020               	movlb	0	; select bank0
 19066  1C23  120E               	bcf	14,4	;volatile
 19067                           
 19068                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 19069  1C24  300A               	movlw	10
 19070  1C25  00A0               	movwf	DelayTime_1us@count
 19071  1C26  3000               	movlw	0
 19072  1C27  00A1               	movwf	DelayTime_1us@count+1
 19073  1C28  319A  22BF  319C   	fcall	_DelayTime_1us
 19074                           
 19075                           ;CC2500_B1.c: 117: RC4 = 1;
 19076  1C2B  0020               	movlb	0	; select bank0
 19077  1C2C  160E               	bsf	14,4	;volatile
 19078                           
 19079                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 19080  1C2D  3028               	movlw	40
 19081  1C2E  00A0               	movwf	DelayTime_1us@count
 19082  1C2F  3000               	movlw	0
 19083  1C30  00A1               	movwf	DelayTime_1us@count+1
 19084  1C31  319A  22BF  319C   	fcall	_DelayTime_1us
 19085                           
 19086                           ;CC2500_B1.c: 119: RC4 = 0;
 19087  1C34  0020               	movlb	0	; select bank0
 19088  1C35  120E               	bcf	14,4	;volatile
 19089                           
 19090                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 19091  1C36  3030               	movlw	48
 19092  1C37  00A6               	movwf	??_CC2500_PowerRST
 19093  1C38  0826               	movf	??_CC2500_PowerRST,w
 19094  1C39  0021               	movlb	1	; select bank1
 19095  1C3A  00C2               	movwf	_SPI0Buffer^(0+128)
 19096  1C3B                     l304:	
 19097                           ;CC2500_B1.c: 121: while (RC2 == 1);
 19098                           
 19099  1C3B  0020               	movlb	0	; select bank0
 19100  1C3C  190E               	btfsc	14,2	;volatile
 19101  1C3D  2C3B               	goto	l304
 19102                           
 19103                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 19104  1C3E  3198  20E0  319C   	fcall	_CC2500_WriteByte
 19105  1C41                     l307:	
 19106                           ;CC2500_B1.c: 123: while (RC2 == 1);
 19107                           
 19108  1C41  0020               	movlb	0	; select bank0
 19109  1C42  190E               	btfsc	14,2	;volatile
 19110  1C43  2C41               	goto	l307
 19111                           
 19112                           ;CC2500_B1.c: 124: RC0 = 0;
 19113  1C44  100E               	bcf	14,0	;volatile
 19114                           
 19115                           ;CC2500_B1.c: 125: RC4 = 1;
 19116  1C45  160E               	bsf	14,4	;volatile
 19117  1C46  0008               	return
 19118  1C47                     __end_of_CC2500_PowerRST:	
 19119                           
 19120                           	psect	text128
 19121  1B0D                     __ptext128:	
 19122 ;; *************** function _CC2500_InitSetREG *****************
 19123 ;; Defined at:
 19124 ;;		line 131 in file "../src/CC2500_B1.c"
 19125 ;; Parameters:    Size  Location     Type
 19126 ;;		None
 19127 ;; Auto vars:     Size  Location     Type
 19128 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19129 ;;  temp2           1    7[BANK0 ] unsigned char 
 19130 ;;  temp1           1    6[BANK0 ] unsigned char 
 19131 ;; Return value:  Size  Location     Type
 19132 ;;		None               void
 19133 ;; Registers used:
 19134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19135 ;; Tracked objects:
 19136 ;;		On entry : 0/0
 19137 ;;		On exit  : 0/0
 19138 ;;		Unchanged: 0/0
 19139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19141 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;Total ram usage:        4 bytes
 19145 ;; Hardware stack levels used:    1
 19146 ;; Hardware stack levels required when called:    6
 19147 ;; This function calls:
 19148 ;;		_CC2500_WriteREG
 19149 ;; This function is called by:
 19150 ;;		_CC2500_PowerOnInitial
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           
 19155                           ;psect for function _CC2500_InitSetREG
 19156  1B0D                     _CC2500_InitSetREG:	
 19157                           
 19158                           ;CC2500_B1.c: 132: unsigned char loop_c;
 19159                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 19160                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 19161                           
 19162                           ;incstack = 0
 19163                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19164  1B0D  0020               	movlb	0	; select bank0
 19165  1B0E  01A8               	clrf	CC2500_InitSetREG@loop_c
 19166  1B0F                     L12:	
 19167  1B0F  302F               	movlw	47
 19168  1B10  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19169  1B11  1803               	btfsc	3,0
 19170  1B12  0008               	return
 19171                           
 19172                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 19173  1B13  0828               	movf	CC2500_InitSetREG@loop_c,w
 19174  1B14  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19175  1B15  0084               	movwf	4
 19176  1B16  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19177  1B17  1803               	skipnc
 19178  1B18  3E01               	addlw	1
 19179  1B19  0085               	movwf	5
 19180  1B1A  0800               	movf	0,w	;code access
 19181  1B1B  00A5               	movwf	??_CC2500_InitSetREG
 19182  1B1C  0825               	movf	??_CC2500_InitSetREG,w
 19183  1B1D  00A6               	movwf	CC2500_InitSetREG@temp1
 19184                           
 19185                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 19186  1B1E  0828               	movf	CC2500_InitSetREG@loop_c,w
 19187  1B1F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19188  1B20  0084               	movwf	4
 19189  1B21  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19190  1B22  1803               	skipnc
 19191  1B23  3E01               	addlw	1
 19192  1B24  0085               	movwf	5
 19193  1B25  0800               	movf	0,w	;code access
 19194  1B26  00A5               	movwf	??_CC2500_InitSetREG
 19195  1B27  0825               	movf	??_CC2500_InitSetREG,w
 19196  1B28  00A7               	movwf	CC2500_InitSetREG@temp2
 19197                           
 19198                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 19199  1B29  0827               	movf	CC2500_InitSetREG@temp2,w
 19200  1B2A  00A5               	movwf	??_CC2500_InitSetREG
 19201  1B2B  0825               	movf	??_CC2500_InitSetREG,w
 19202  1B2C  00A2               	movwf	CC2500_WriteREG@value
 19203  1B2D  0826               	movf	CC2500_InitSetREG@temp1,w
 19204  1B2E  3198  20F9  319B   	fcall	_CC2500_WriteREG
 19205  1B31  3001               	movlw	1
 19206  1B32  0020               	movlb	0	; select bank0
 19207  1B33  00A5               	movwf	??_CC2500_InitSetREG
 19208  1B34  0825               	movf	??_CC2500_InitSetREG,w
 19209  1B35  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19210  1B36  2B0F               	goto	L12
 19211  1B37                     __end_of_CC2500_InitSetREG:	
 19212                           
 19213                           	psect	text129
 19214  19D3                     __ptext129:	
 19215 ;; *************** function _CC2500_InitPATable *****************
 19216 ;; Defined at:
 19217 ;;		line 146 in file "../src/CC2500_B1.c"
 19218 ;; Parameters:    Size  Location     Type
 19219 ;;		None
 19220 ;; Auto vars:     Size  Location     Type
 19221 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19222 ;;  temp            1    6[BANK0 ] unsigned char 
 19223 ;; Return value:  Size  Location     Type
 19224 ;;		None               void
 19225 ;; Registers used:
 19226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19227 ;; Tracked objects:
 19228 ;;		On entry : 0/0
 19229 ;;		On exit  : 0/0
 19230 ;;		Unchanged: 0/0
 19231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;Total ram usage:        3 bytes
 19237 ;; Hardware stack levels used:    1
 19238 ;; Hardware stack levels required when called:    6
 19239 ;; This function calls:
 19240 ;;		_CC2500_WriteREG
 19241 ;; This function is called by:
 19242 ;;		_CC2500_PowerOnInitial
 19243 ;; This function uses a non-reentrant model
 19244 ;;
 19245                           
 19246                           
 19247                           ;psect for function _CC2500_InitPATable
 19248  19D3                     _CC2500_InitPATable:	
 19249                           
 19250                           ;CC2500_B1.c: 147: unsigned char loop_d;
 19251                           ;CC2500_B1.c: 148: unsigned char temp;
 19252                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 19253                           
 19254                           ;incstack = 0
 19255                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19256  19D3  0020               	movlb	0	; select bank0
 19257  19D4  01A7               	clrf	CC2500_InitPATable@loop_d
 19258  19D5                     L13:	
 19259  19D5  3008               	movlw	8
 19260  19D6  0227               	subwf	CC2500_InitPATable@loop_d,w
 19261  19D7  1803               	btfsc	3,0
 19262  19D8  0008               	return
 19263                           
 19264                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 19265  19D9  0827               	movf	CC2500_InitPATable@loop_d,w
 19266  19DA  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19267  19DB  0084               	movwf	4
 19268  19DC  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19269  19DD  1803               	skipnc
 19270  19DE  3E01               	addlw	1
 19271  19DF  0085               	movwf	5
 19272  19E0  0800               	movf	0,w	;code access
 19273  19E1  00A5               	movwf	??_CC2500_InitPATable
 19274  19E2  0825               	movf	??_CC2500_InitPATable,w
 19275  19E3  00A6               	movwf	CC2500_InitPATable@temp
 19276                           
 19277                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 19278  19E4  0826               	movf	CC2500_InitPATable@temp,w
 19279  19E5  00A5               	movwf	??_CC2500_InitPATable
 19280  19E6  0825               	movf	??_CC2500_InitPATable,w
 19281  19E7  00A2               	movwf	CC2500_WriteREG@value
 19282  19E8  303E               	movlw	62
 19283  19E9  3198  20F9  3199   	fcall	_CC2500_WriteREG
 19284  19EC  3001               	movlw	1
 19285  19ED  0020               	movlb	0	; select bank0
 19286  19EE  00A5               	movwf	??_CC2500_InitPATable
 19287  19EF  0825               	movf	??_CC2500_InitPATable,w
 19288  19F0  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19289  19F1  29D5               	goto	L13
 19290  19F2                     __end_of_CC2500_InitPATable:	
 19291                           
 19292                           	psect	text130
 19293  18F9                     __ptext130:	
 19294 ;; *************** function _CC2500_WriteREG *****************
 19295 ;; Defined at:
 19296 ;;		line 223 in file "../src/CC2500_B1.c"
 19297 ;; Parameters:    Size  Location     Type
 19298 ;;  w_addr          1    wreg     unsigned char 
 19299 ;;  value           1    2[BANK0 ] unsigned char 
 19300 ;; Auto vars:     Size  Location     Type
 19301 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19302 ;; Return value:  Size  Location     Type
 19303 ;;		None               void
 19304 ;; Registers used:
 19305 ;;		wreg, status,2, status,0, pclath, cstack
 19306 ;; Tracked objects:
 19307 ;;		On entry : 0/0
 19308 ;;		On exit  : 0/0
 19309 ;;		Unchanged: 0/0
 19310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19311 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19315 ;;Total ram usage:        3 bytes
 19316 ;; Hardware stack levels used:    1
 19317 ;; Hardware stack levels required when called:    5
 19318 ;; This function calls:
 19319 ;;		_CC2500_WriteByte
 19320 ;; This function is called by:
 19321 ;;		_CC2500_InitSetREG
 19322 ;;		_CC2500_InitPATable
 19323 ;; This function uses a non-reentrant model
 19324 ;;
 19325                           
 19326                           
 19327                           ;psect for function _CC2500_WriteREG
 19328  18F9                     _CC2500_WriteREG:	
 19329                           
 19330                           ;incstack = 0
 19331                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19332                           ;CC2500_WriteREG@w_addr stored from wreg
 19333  18F9  0020               	movlb	0	; select bank0
 19334  18FA  00A4               	movwf	CC2500_WriteREG@w_addr
 19335                           
 19336                           ;CC2500_B1.c: 224: RC4 = 0;
 19337  18FB  120E               	bcf	14,4	;volatile
 19338                           
 19339                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 19340  18FC  0824               	movf	CC2500_WriteREG@w_addr,w
 19341  18FD  00A3               	movwf	??_CC2500_WriteREG
 19342  18FE  0823               	movf	??_CC2500_WriteREG,w
 19343  18FF  0021               	movlb	1	; select bank1
 19344  1900  00C2               	movwf	_SPI0Buffer^(0+128)
 19345  1901                     l349:	
 19346                           ;CC2500_B1.c: 226: while (RC2 == 1);
 19347                           
 19348  1901  0020               	movlb	0	; select bank0
 19349  1902  190E               	btfsc	14,2	;volatile
 19350  1903  2901               	goto	l349
 19351                           
 19352                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 19353  1904  3198  20E0  3198   	fcall	_CC2500_WriteByte
 19354                           
 19355                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 19356  1907  0020               	movlb	0	; select bank0
 19357  1908  0822               	movf	CC2500_WriteREG@value,w
 19358  1909  00A3               	movwf	??_CC2500_WriteREG
 19359  190A  0823               	movf	??_CC2500_WriteREG,w
 19360  190B  0021               	movlb	1	; select bank1
 19361  190C  00C2               	movwf	_SPI0Buffer^(0+128)
 19362                           
 19363                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 19364  190D  3198  20E0         	fcall	_CC2500_WriteByte
 19365                           
 19366                           ;CC2500_B1.c: 230: RC4 = 1;
 19367  190F  0020               	movlb	0	; select bank0
 19368  1910  160E               	bsf	14,4	;volatile
 19369  1911  0008               	return
 19370  1912                     __end_of_CC2500_WriteREG:	
 19371                           
 19372                           	psect	text131
 19373  2671                     __ptext131:	
 19374 ;; *************** function _CC2500_FrequencyCabr *****************
 19375 ;; Defined at:
 19376 ;;		line 173 in file "../src/CC2500_B1.c"
 19377 ;; Parameters:    Size  Location     Type
 19378 ;;		None
 19379 ;; Auto vars:     Size  Location     Type
 19380 ;;		None
 19381 ;; Return value:  Size  Location     Type
 19382 ;;		None               void
 19383 ;; Registers used:
 19384 ;;		wreg, status,2, status,0, pclath, cstack
 19385 ;; Tracked objects:
 19386 ;;		On entry : 0/0
 19387 ;;		On exit  : 0/0
 19388 ;;		Unchanged: 0/0
 19389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19394 ;;Total ram usage:        0 bytes
 19395 ;; Hardware stack levels used:    1
 19396 ;; Hardware stack levels required when called:    6
 19397 ;; This function calls:
 19398 ;;		_CC2500_WriteCommand
 19399 ;;		_DelayTime_1us
 19400 ;; This function is called by:
 19401 ;;		_CC2500_PowerOnInitial
 19402 ;; This function uses a non-reentrant model
 19403 ;;
 19404                           
 19405                           
 19406                           ;psect for function _CC2500_FrequencyCabr
 19407  2671                     _CC2500_FrequencyCabr:	
 19408                           
 19409                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 19410                           
 19411                           ;incstack = 0
 19412                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19413  2671  3033               	movlw	51
 19414  2672  31A7  275E  31A6   	fcall	_CC2500_WriteCommand
 19415                           
 19416                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 19417  2675  30E8               	movlw	232
 19418  2676  0020               	movlb	0	; select bank0
 19419  2677  00A0               	movwf	DelayTime_1us@count
 19420  2678  3003               	movlw	3
 19421  2679  00A1               	movwf	DelayTime_1us@count+1
 19422  267A  319A  22BF         	fcall	_DelayTime_1us
 19423  267C  0008               	return
 19424  267D                     __end_of_CC2500_FrequencyCabr:	
 19425                           
 19426                           	psect	text132
 19427  1ABF                     __ptext132:	
 19428 ;; *************** function _DelayTime_1us *****************
 19429 ;; Defined at:
 19430 ;;		line 279 in file "../src/CC2500_B1.c"
 19431 ;; Parameters:    Size  Location     Type
 19432 ;;  count           2    0[BANK0 ] int 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;  j               2    4[BANK0 ] unsigned int 
 19435 ;;  i               2    2[BANK0 ] unsigned int 
 19436 ;; Return value:  Size  Location     Type
 19437 ;;		None               void
 19438 ;; Registers used:
 19439 ;;		wreg, status,2
 19440 ;; Tracked objects:
 19441 ;;		On entry : 0/0
 19442 ;;		On exit  : 0/0
 19443 ;;		Unchanged: 0/0
 19444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19448 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19449 ;;Total ram usage:        6 bytes
 19450 ;; Hardware stack levels used:    1
 19451 ;; Hardware stack levels required when called:    4
 19452 ;; This function calls:
 19453 ;;		Nothing
 19454 ;; This function is called by:
 19455 ;;		_CC2500_PowerRST
 19456 ;;		_CC2500_FrequencyCabr
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           
 19461                           ;psect for function _DelayTime_1us
 19462  1ABF                     _DelayTime_1us:	
 19463                           
 19464                           ;CC2500_B1.c: 280: unsigned int i, j;
 19465                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 19466                           
 19467                           ;incstack = 0
 19468                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19469  1ABF  3001               	movlw	1
 19470  1AC0  0020               	movlb	0	; select bank0
 19471  1AC1  00A2               	movwf	DelayTime_1us@i
 19472  1AC2  3000               	movlw	0
 19473  1AC3  00A3               	movwf	DelayTime_1us@i+1
 19474  1AC4                     l373:	
 19475  1AC4  0821               	movf	DelayTime_1us@count+1,w
 19476  1AC5  0223               	subwf	DelayTime_1us@i+1,w
 19477  1AC6  1D03               	skipz
 19478  1AC7  2ACA               	goto	u7925
 19479  1AC8  0820               	movf	DelayTime_1us@count,w
 19480  1AC9  0222               	subwf	DelayTime_1us@i,w
 19481  1ACA                     u7925:	
 19482  1ACA  1803               	btfsc	3,0
 19483  1ACB  0008               	return
 19484                           
 19485                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 19486  1ACC  01A4               	clrf	DelayTime_1us@j
 19487  1ACD  01A5               	clrf	DelayTime_1us@j+1
 19488  1ACE  3000               	movlw	0
 19489  1ACF  0225               	subwf	DelayTime_1us@j+1,w
 19490  1AD0  3002               	movlw	2
 19491  1AD1  1903               	skipnz
 19492  1AD2  0224               	subwf	DelayTime_1us@j,w
 19493  1AD3  1803               	btfsc	3,0
 19494  1AD4  2AE0               	goto	l8502
 19495  1AD5                     l8500:	
 19496  1AD5  3001               	movlw	1
 19497  1AD6  07A4               	addwf	DelayTime_1us@j,f
 19498  1AD7  3000               	movlw	0
 19499  1AD8  3DA5               	addwfc	DelayTime_1us@j+1,f
 19500  1AD9  3000               	movlw	0
 19501  1ADA  0225               	subwf	DelayTime_1us@j+1,w
 19502  1ADB  3002               	movlw	2
 19503  1ADC  1903               	skipnz
 19504  1ADD  0224               	subwf	DelayTime_1us@j,w
 19505  1ADE  1C03               	skipc
 19506  1ADF  2AD5               	goto	l8500
 19507  1AE0                     l8502:	
 19508  1AE0  3001               	movlw	1
 19509  1AE1  07A2               	addwf	DelayTime_1us@i,f
 19510  1AE2  3000               	movlw	0
 19511  1AE3  3DA3               	addwfc	DelayTime_1us@i+1,f
 19512  1AE4  2AC4               	goto	l373
 19513  1AE5                     __end_of_DelayTime_1us:	
 19514                           
 19515                           	psect	text133
 19516  2583                     __ptext133:	
 19517 ;; *************** function _CC2500_ClearTXFIFO *****************
 19518 ;; Defined at:
 19519 ;;		line 159 in file "../src/CC2500_B1.c"
 19520 ;; Parameters:    Size  Location     Type
 19521 ;;		None
 19522 ;; Auto vars:     Size  Location     Type
 19523 ;;		None
 19524 ;; Return value:  Size  Location     Type
 19525 ;;		None               void
 19526 ;; Registers used:
 19527 ;;		wreg, status,2, status,0, pclath, cstack
 19528 ;; Tracked objects:
 19529 ;;		On entry : 0/0
 19530 ;;		On exit  : 0/0
 19531 ;;		Unchanged: 0/0
 19532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;Total ram usage:        0 bytes
 19538 ;; Hardware stack levels used:    1
 19539 ;; Hardware stack levels required when called:    6
 19540 ;; This function calls:
 19541 ;;		_CC2500_WriteCommand
 19542 ;; This function is called by:
 19543 ;;		_CC2500_PowerOnInitial
 19544 ;; This function uses a non-reentrant model
 19545 ;;
 19546                           
 19547                           
 19548                           ;psect for function _CC2500_ClearTXFIFO
 19549  2583                     _CC2500_ClearTXFIFO:	
 19550                           
 19551                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 19552                           
 19553                           ;incstack = 0
 19554                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19555  2583  303B               	movlw	59
 19556  2584  31A7  275E         	fcall	_CC2500_WriteCommand
 19557  2586  0008               	return
 19558  2587                     __end_of_CC2500_ClearTXFIFO:	
 19559                           
 19560                           	psect	text134
 19561  257F                     __ptext134:	
 19562 ;; *************** function _CC2500_ClearRXFIFO *****************
 19563 ;; Defined at:
 19564 ;;		line 166 in file "../src/CC2500_B1.c"
 19565 ;; Parameters:    Size  Location     Type
 19566 ;;		None
 19567 ;; Auto vars:     Size  Location     Type
 19568 ;;		None
 19569 ;; Return value:  Size  Location     Type
 19570 ;;		None               void
 19571 ;; Registers used:
 19572 ;;		wreg, status,2, status,0, pclath, cstack
 19573 ;; Tracked objects:
 19574 ;;		On entry : 0/0
 19575 ;;		On exit  : 0/0
 19576 ;;		Unchanged: 0/0
 19577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19582 ;;Total ram usage:        0 bytes
 19583 ;; Hardware stack levels used:    1
 19584 ;; Hardware stack levels required when called:    6
 19585 ;; This function calls:
 19586 ;;		_CC2500_WriteCommand
 19587 ;; This function is called by:
 19588 ;;		_CC2500_PowerOnInitial
 19589 ;; This function uses a non-reentrant model
 19590 ;;
 19591                           
 19592                           
 19593                           ;psect for function _CC2500_ClearRXFIFO
 19594  257F                     _CC2500_ClearRXFIFO:	
 19595                           
 19596                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 19597                           
 19598                           ;incstack = 0
 19599                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19600  257F  303A               	movlw	58
 19601  2580  31A7  275E         	fcall	_CC2500_WriteCommand
 19602  2582  0008               	return
 19603  2583                     __end_of_CC2500_ClearRXFIFO:	
 19604                           
 19605                           	psect	text135
 19606  275E                     __ptext135:	
 19607 ;; *************** function _CC2500_WriteCommand *****************
 19608 ;; Defined at:
 19609 ;;		line 249 in file "../src/CC2500_B1.c"
 19610 ;; Parameters:    Size  Location     Type
 19611 ;;  command         1    wreg     unsigned char 
 19612 ;; Auto vars:     Size  Location     Type
 19613 ;;  command         1    3[BANK0 ] unsigned char 
 19614 ;; Return value:  Size  Location     Type
 19615 ;;		None               void
 19616 ;; Registers used:
 19617 ;;		wreg, status,2, status,0, pclath, cstack
 19618 ;; Tracked objects:
 19619 ;;		On entry : 0/0
 19620 ;;		On exit  : 0/0
 19621 ;;		Unchanged: 0/0
 19622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;Total ram usage:        2 bytes
 19628 ;; Hardware stack levels used:    1
 19629 ;; Hardware stack levels required when called:    5
 19630 ;; This function calls:
 19631 ;;		_CC2500_WriteByte
 19632 ;; This function is called by:
 19633 ;;		_CC2500_TxData
 19634 ;;		_CC2500_RxData
 19635 ;;		_CC2500_ClearTXFIFO
 19636 ;;		_CC2500_ClearRXFIFO
 19637 ;;		_CC2500_FrequencyCabr
 19638 ;;		_CC2500_SIDLEMode
 19639 ;;		_setRF_Main
 19640 ;;		_RF_RxDisable
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           
 19645                           ;psect for function _CC2500_WriteCommand
 19646  275E                     _CC2500_WriteCommand:	
 19647                           
 19648                           ;incstack = 0
 19649                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19650                           ;CC2500_WriteCommand@command stored from wreg
 19651  275E  0020               	movlb	0	; select bank0
 19652  275F  00A3               	movwf	CC2500_WriteCommand@command
 19653                           
 19654                           ;CC2500_B1.c: 250: RC4 = 0;
 19655  2760  120E               	bcf	14,4	;volatile
 19656                           
 19657                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 19658  2761  0823               	movf	CC2500_WriteCommand@command,w
 19659  2762  00A2               	movwf	??_CC2500_WriteCommand
 19660  2763  0822               	movf	??_CC2500_WriteCommand,w
 19661  2764  0021               	movlb	1	; select bank1
 19662  2765  00C2               	movwf	_SPI0Buffer^(0+128)
 19663  2766                     l361:	
 19664                           ;CC2500_B1.c: 253: while (RC2 == 1);
 19665                           
 19666  2766  0020               	movlb	0	; select bank0
 19667  2767  190E               	btfsc	14,2	;volatile
 19668  2768  2F66               	goto	l361
 19669                           
 19670                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 19671  2769  3198  20E0         	fcall	_CC2500_WriteByte
 19672                           
 19673                           ;CC2500_B1.c: 256: RC4 = 1;
 19674  276B  0020               	movlb	0	; select bank0
 19675  276C  160E               	bsf	14,4	;volatile
 19676  276D  0008               	return
 19677  276E                     __end_of_CC2500_WriteCommand:	
 19678                           
 19679                           	psect	text136
 19680  18E0                     __ptext136:	
 19681 ;; *************** function _CC2500_WriteByte *****************
 19682 ;; Defined at:
 19683 ;;		line 191 in file "../src/CC2500_B1.c"
 19684 ;; Parameters:    Size  Location     Type
 19685 ;;		None
 19686 ;; Auto vars:     Size  Location     Type
 19687 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19688 ;; Return value:  Size  Location     Type
 19689 ;;		None               void
 19690 ;; Registers used:
 19691 ;;		wreg, status,2, status,0
 19692 ;; Tracked objects:
 19693 ;;		On entry : 0/0
 19694 ;;		On exit  : 0/0
 19695 ;;		Unchanged: 0/0
 19696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19701 ;;Total ram usage:        2 bytes
 19702 ;; Hardware stack levels used:    1
 19703 ;; Hardware stack levels required when called:    4
 19704 ;; This function calls:
 19705 ;;		Nothing
 19706 ;; This function is called by:
 19707 ;;		_CC2500_TxData
 19708 ;;		_CC2500_RxData
 19709 ;;		_CC2500_PowerRST
 19710 ;;		_CC2500_WriteREG
 19711 ;;		_CC2500_WriteCommand
 19712 ;;		_CC2500_ReadStatus
 19713 ;;		_CC2500_ReadREG
 19714 ;; This function uses a non-reentrant model
 19715 ;;
 19716                           
 19717                           
 19718                           ;psect for function _CC2500_WriteByte
 19719  18E0                     _CC2500_WriteByte:	
 19720                           
 19721                           ;CC2500_B1.c: 192: unsigned char loop_a;
 19722                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 19723                           
 19724                           ;incstack = 0
 19725                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19726  18E0  0020               	movlb	0	; select bank0
 19727  18E1  01A1               	clrf	CC2500_WriteByte@loop_a
 19728  18E2                     L14:	
 19729  18E2  3008               	movlw	8
 19730  18E3  0221               	subwf	CC2500_WriteByte@loop_a,w
 19731  18E4  1803               	btfsc	3,0
 19732  18E5  0008               	return
 19733                           
 19734                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 19735  18E6  0021               	movlb	1	; select bank1
 19736  18E7  1FC2               	btfss	_SPI0Buffer^(0+128),7
 19737  18E8  28EC               	goto	l337
 19738                           
 19739                           ;CC2500_B1.c: 195: RC0 = 1;
 19740  18E9  0020               	movlb	0	; select bank0
 19741  18EA  140E               	bsf	14,0	;volatile
 19742  18EB  28EE               	goto	l338
 19743  18EC                     l337:	
 19744                           
 19745                           ;CC2500_B1.c: 196: else
 19746                           ;CC2500_B1.c: 197: RC0 = 0;
 19747  18EC  0020               	movlb	0	; select bank0
 19748  18ED  100E               	bcf	14,0	;volatile
 19749  18EE                     l338:	
 19750                           
 19751                           ;CC2500_B1.c: 198: RC1 = 1;
 19752  18EE  148E               	bsf	14,1	;volatile
 19753                           
 19754                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 19755  18EF  1003               	clrc
 19756  18F0  0021               	movlb	1	; select bank1
 19757  18F1  0DC2               	rlf	_SPI0Buffer^(0+128),f
 19758                           
 19759                           ;CC2500_B1.c: 200: RC1 = 0;
 19760  18F2  0020               	movlb	0	; select bank0
 19761  18F3  108E               	bcf	14,1	;volatile
 19762  18F4  3001               	movlw	1
 19763  18F5  00A0               	movwf	??_CC2500_WriteByte
 19764  18F6  0820               	movf	??_CC2500_WriteByte,w
 19765  18F7  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19766  18F8  28E2               	goto	L14
 19767  18F9                     __end_of_CC2500_WriteByte:	
 19768                           
 19769                           	psect	text137
 19770  071B                     __ptext137:	
 19771 ;; *************** function _Buzzer_Main *****************
 19772 ;; Defined at:
 19773 ;;		line 47 in file "../src/Buzzer_B1.c"
 19774 ;; Parameters:    Size  Location     Type
 19775 ;;		None
 19776 ;; Auto vars:     Size  Location     Type
 19777 ;;		None
 19778 ;; Return value:  Size  Location     Type
 19779 ;;		None               void
 19780 ;; Registers used:
 19781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19782 ;; Tracked objects:
 19783 ;;		On entry : 0/0
 19784 ;;		On exit  : 0/0
 19785 ;;		Unchanged: 0/0
 19786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19791 ;;Total ram usage:        4 bytes
 19792 ;; Hardware stack levels used:    1
 19793 ;; Hardware stack levels required when called:    4
 19794 ;; This function calls:
 19795 ;;		Nothing
 19796 ;; This function is called by:
 19797 ;;		_main
 19798 ;; This function uses a non-reentrant model
 19799 ;;
 19800                           
 19801                           
 19802                           ;psect for function _Buzzer_Main
 19803  071B                     _Buzzer_Main:	
 19804                           
 19805                           ;Buzzer_B1.c: 48: Buz->Switch = (RB3) ? 1 : 0;
 19806                           
 19807                           ;incstack = 0
 19808                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19809  071B  0021               	movlb	1	; select bank1
 19810  071C  0837               	movf	_Buz^(0+128),w
 19811  071D  0086               	movwf	6
 19812  071E  3001               	movlw	1	; select bank2/3
 19813  071F  0087               	movwf	7
 19814  0720  1281               	bcf	1,5
 19815  0721  0020               	movlb	0	; select bank0
 19816  0722  198D               	btfsc	13,3	;volatile
 19817  0723  1681               	bsf	1,5
 19818                           
 19819                           ;Buzzer_B1.c: 50: if (Buz->GO) {
 19820  0724  0021               	movlb	1	; select bank1
 19821  0725  0837               	movf	_Buz^(0+128),w
 19822  0726  0086               	movwf	6
 19823  0727  3001               	movlw	1	; select bank2/3
 19824  0728  0087               	movwf	7
 19825  0729  1C81               	btfss	1,1
 19826  072A  0008               	return
 19827                           
 19828                           ;Buzzer_B1.c: 52: if (Buz->Time >= Buz->TimeValue) {
 19829  072B  0837               	movf	_Buz^(0+128),w
 19830  072C  3E06               	addlw	6
 19831  072D  0086               	movwf	6
 19832  072E  3001               	movlw	1	; select bank2/3
 19833  072F  0087               	movwf	7
 19834  0730  3F40               	moviw [0]fsr1
 19835  0731  0020               	movlb	0	; select bank0
 19836  0732  00A0               	movwf	??_Buzzer_Main
 19837  0733  3F41               	moviw [1]fsr1
 19838  0734  00A1               	movwf	??_Buzzer_Main+1
 19839  0735  0021               	movlb	1	; select bank1
 19840  0736  0A37               	incf	_Buz^(0+128),w
 19841  0737  0086               	movwf	6
 19842  0738  3001               	movlw	1	; select bank2/3
 19843  0739  0087               	movwf	7
 19844  073A  3F40               	moviw [0]fsr1
 19845  073B  0020               	movlb	0	; select bank0
 19846  073C  00A2               	movwf	??_Buzzer_Main+2
 19847  073D  3F41               	moviw [1]fsr1
 19848  073E  00A3               	movwf	??_Buzzer_Main+3
 19849  073F  0821               	movf	??_Buzzer_Main+1,w
 19850  0740  0223               	subwf	??_Buzzer_Main+3,w
 19851  0741  1D03               	skipz
 19852  0742  2F45               	goto	u6465
 19853  0743  0820               	movf	??_Buzzer_Main,w
 19854  0744  0222               	subwf	??_Buzzer_Main+2,w
 19855  0745                     u6465:	
 19856  0745  1C03               	skipc
 19857  0746  0008               	return
 19858                           
 19859                           ;Buzzer_B1.c: 53: Buz->Time = 0;
 19860  0747  0021               	movlb	1	; select bank1
 19861  0748  0A37               	incf	_Buz^(0+128),w
 19862  0749  0086               	movwf	6
 19863  074A  3001               	movlw	1	; select bank2/3
 19864  074B  0087               	movwf	7
 19865  074C  3000               	movlw	0
 19866  074D  3FC0               	movwi [0]fsr1
 19867  074E  3FC1               	movwi [1]fsr1
 19868                           
 19869                           ;Buzzer_B1.c: 54: if (!Buz->Switch) {
 19870  074F  0837               	movf	_Buz^(0+128),w
 19871  0750  0086               	movwf	6
 19872  0751  3001               	movlw	1	; select bank2/3
 19873  0752  0087               	movwf	7
 19874  0753  1A81               	btfsc	1,5
 19875  0754  2FC3               	goto	l7522
 19876                           
 19877                           ;Buzzer_B1.c: 55: if (Buz->Count == 0) {
 19878  0755  0837               	movf	_Buz^(0+128),w
 19879  0756  3E03               	addlw	3
 19880  0757  0086               	movwf	6
 19881  0758  3001               	movlw	1	; select bank2/3
 19882  0759  0087               	movwf	7
 19883  075A  0881               	movf	1,f
 19884  075B  1D03               	skipz
 19885  075C  2FBB               	goto	l7518
 19886                           
 19887                           ;Buzzer_B1.c: 56: if (Buz->BufferStatus1) {
 19888  075D  0837               	movf	_Buz^(0+128),w
 19889  075E  0086               	movwf	6
 19890  075F  3001               	movlw	1	; select bank2/3
 19891  0760  0087               	movwf	7
 19892  0761  1D81               	btfss	1,3
 19893  0762  2F89               	goto	l7510
 19894                           
 19895                           ;Buzzer_B1.c: 57: Buz->BufferStatus1 = 0;
 19896  0763  0837               	movf	_Buz^(0+128),w
 19897  0764  0086               	movwf	6
 19898  0765  3001               	movlw	1	; select bank2/3
 19899  0766  0087               	movwf	7
 19900  0767  1181               	bcf	1,3
 19901                           
 19902                           ;Buzzer_B1.c: 58: Buz->Count = Buz->CountBuffer1;
 19903  0768  0837               	movf	_Buz^(0+128),w
 19904  0769  3E04               	addlw	4
 19905  076A  0086               	movwf	6
 19906  076B  3001               	movlw	1	; select bank2/3
 19907  076C  0087               	movwf	7
 19908  076D  0801               	movf	1,w
 19909  076E  0020               	movlb	0	; select bank0
 19910  076F  00A0               	movwf	??_Buzzer_Main
 19911  0770  0021               	movlb	1	; select bank1
 19912  0771  0837               	movf	_Buz^(0+128),w
 19913  0772  3E03               	addlw	3
 19914  0773  0086               	movwf	6
 19915  0774  3001               	movlw	1	; select bank2/3
 19916  0775  0087               	movwf	7
 19917  0776  0020               	movlb	0	; select bank0
 19918  0777  0820               	movf	??_Buzzer_Main,w
 19919  0778  0081               	movwf	1
 19920                           
 19921                           ;Buzzer_B1.c: 59: Buz->TimeValue = Buz->TimeValueBuffer1;
 19922  0779  0021               	movlb	1	; select bank1
 19923  077A  0837               	movf	_Buz^(0+128),w
 19924  077B  3E08               	addlw	8
 19925  077C  0086               	movwf	6
 19926  077D  3001               	movlw	1	; select bank2/3
 19927  077E  0087               	movwf	7
 19928  077F  0837               	movf	_Buz^(0+128),w
 19929  0780  3E06               	addlw	6
 19930  0781  0084               	movwf	4
 19931  0782  3001               	movlw	1	; select bank2/3
 19932  0783  0085               	movwf	5
 19933  0784  3F40               	moviw [0]fsr1
 19934  0785  3F80               	movwi [0]fsr0
 19935  0786  3F41               	moviw [1]fsr1
 19936  0787  3F81               	movwi [1]fsr0
 19937                           
 19938                           ;Buzzer_B1.c: 60: } else if (Buz->BufferStatus2) {
 19939  0788  0008               	return
 19940  0789                     l7510:	
 19941  0789  0837               	movf	_Buz^(0+128),w
 19942  078A  0086               	movwf	6
 19943  078B  3001               	movlw	1	; select bank2/3
 19944  078C  0087               	movwf	7
 19945  078D  1E01               	btfss	1,4
 19946  078E  2FB5               	goto	l7516
 19947                           
 19948                           ;Buzzer_B1.c: 61: Buz->BufferStatus2 = 0;
 19949  078F  0837               	movf	_Buz^(0+128),w
 19950  0790  0086               	movwf	6
 19951  0791  3001               	movlw	1	; select bank2/3
 19952  0792  0087               	movwf	7
 19953  0793  1201               	bcf	1,4
 19954                           
 19955                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer2;
 19956  0794  0837               	movf	_Buz^(0+128),w
 19957  0795  3E05               	addlw	5
 19958  0796  0086               	movwf	6
 19959  0797  3001               	movlw	1	; select bank2/3
 19960  0798  0087               	movwf	7
 19961  0799  0801               	movf	1,w
 19962  079A  0020               	movlb	0	; select bank0
 19963  079B  00A0               	movwf	??_Buzzer_Main
 19964  079C  0021               	movlb	1	; select bank1
 19965  079D  0837               	movf	_Buz^(0+128),w
 19966  079E  3E03               	addlw	3
 19967  079F  0086               	movwf	6
 19968  07A0  3001               	movlw	1	; select bank2/3
 19969  07A1  0087               	movwf	7
 19970  07A2  0020               	movlb	0	; select bank0
 19971  07A3  0820               	movf	??_Buzzer_Main,w
 19972  07A4  0081               	movwf	1
 19973                           
 19974                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer2;
 19975  07A5  0021               	movlb	1	; select bank1
 19976  07A6  0837               	movf	_Buz^(0+128),w
 19977  07A7  3E0A               	addlw	10
 19978  07A8  0086               	movwf	6
 19979  07A9  3001               	movlw	1	; select bank2/3
 19980  07AA  0087               	movwf	7
 19981  07AB  0837               	movf	_Buz^(0+128),w
 19982  07AC  3E06               	addlw	6
 19983  07AD  0084               	movwf	4
 19984  07AE  3001               	movlw	1	; select bank2/3
 19985  07AF  0085               	movwf	5
 19986  07B0  3F40               	moviw [0]fsr1
 19987  07B1  3F80               	movwi [0]fsr0
 19988  07B2  3F41               	moviw [1]fsr1
 19989  07B3  3F81               	movwi [1]fsr0
 19990                           
 19991                           ;Buzzer_B1.c: 64: } else {
 19992  07B4  0008               	return
 19993  07B5                     l7516:	
 19994                           
 19995                           ;Buzzer_B1.c: 65: Buz->GO = 0;
 19996  07B5  0837               	movf	_Buz^(0+128),w
 19997  07B6  0086               	movwf	6
 19998  07B7  3001               	movlw	1	; select bank2/3
 19999  07B8  0087               	movwf	7
 20000  07B9  1081               	bcf	1,1
 20001                           
 20002                           ;Buzzer_B1.c: 66: }
 20003                           ;Buzzer_B1.c: 67: } else {
 20004  07BA  0008               	return
 20005  07BB                     l7518:	
 20006                           
 20007                           ;Buzzer_B1.c: 68: Buz->Switch = 1;
 20008  07BB  0837               	movf	_Buz^(0+128),w
 20009  07BC  0086               	movwf	6
 20010  07BD  3001               	movlw	1	; select bank2/3
 20011  07BE  0087               	movwf	7
 20012  07BF  1681               	bsf	1,5
 20013                           
 20014                           ;Buzzer_B1.c: 70: RB3 = 1;
 20015  07C0  0020               	movlb	0	; select bank0
 20016  07C1  158D               	bsf	13,3	;volatile
 20017                           
 20018                           ;Buzzer_B1.c: 71: }
 20019                           ;Buzzer_B1.c: 72: } else {
 20020  07C2  0008               	return
 20021  07C3                     l7522:	
 20022                           
 20023                           ;Buzzer_B1.c: 73: Buz->Switch = 0;
 20024  07C3  0021               	movlb	1	; select bank1
 20025  07C4  0837               	movf	_Buz^(0+128),w
 20026  07C5  0086               	movwf	6
 20027  07C6  3001               	movlw	1	; select bank2/3
 20028  07C7  0087               	movwf	7
 20029  07C8  1281               	bcf	1,5
 20030                           
 20031                           ;Buzzer_B1.c: 75: RB3 = 0;
 20032  07C9  0020               	movlb	0	; select bank0
 20033  07CA  118D               	bcf	13,3	;volatile
 20034                           
 20035                           ;Buzzer_B1.c: 77: Buz->Count--;
 20036  07CB  0021               	movlb	1	; select bank1
 20037  07CC  0837               	movf	_Buz^(0+128),w
 20038  07CD  3E03               	addlw	3
 20039  07CE  0086               	movwf	6
 20040  07CF  3001               	movlw	1	; select bank2/3
 20041  07D0  0087               	movwf	7
 20042  07D1  3001               	movlw	1
 20043  07D2  0281               	subwf	1,f
 20044  07D3  0008               	return
 20045  07D4                     __end_of_Buzzer_Main:	
 20046                           
 20047                           	psect	text138
 20048  2665                     __ptext138:	
 20049 ;; *************** function _Buzzer_Initialization *****************
 20050 ;; Defined at:
 20051 ;;		line 11 in file "../src/Buzzer_B1.c"
 20052 ;; Parameters:    Size  Location     Type
 20053 ;;		None
 20054 ;; Auto vars:     Size  Location     Type
 20055 ;;		None
 20056 ;; Return value:  Size  Location     Type
 20057 ;;		None               void
 20058 ;; Registers used:
 20059 ;;		wreg, fsr1l, fsr1h
 20060 ;; Tracked objects:
 20061 ;;		On entry : 0/0
 20062 ;;		On exit  : 0/0
 20063 ;;		Unchanged: 0/0
 20064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20069 ;;Total ram usage:        1 bytes
 20070 ;; Hardware stack levels used:    1
 20071 ;; Hardware stack levels required when called:    4
 20072 ;; This function calls:
 20073 ;;		Nothing
 20074 ;; This function is called by:
 20075 ;;		_main
 20076 ;; This function uses a non-reentrant model
 20077 ;;
 20078                           
 20079                           
 20080                           ;psect for function _Buzzer_Initialization
 20081  2665                     _Buzzer_Initialization:	
 20082                           
 20083                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 20084                           
 20085                           ;incstack = 0
 20086                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20087  2665  304E               	movlw	_Buz1& (0+255)
 20088  2666  0020               	movlb	0	; select bank0
 20089  2667  00A0               	movwf	??_Buzzer_Initialization
 20090  2668  0820               	movf	??_Buzzer_Initialization,w
 20091  2669  0021               	movlb	1	; select bank1
 20092  266A  00B7               	movwf	_Buz^(0+128)
 20093                           
 20094                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 20095  266B  0837               	movf	_Buz^(0+128),w
 20096  266C  0086               	movwf	6
 20097  266D  3001               	movlw	1	; select bank2/3
 20098  266E  0087               	movwf	7
 20099  266F  1401               	bsf	1,0
 20100  2670  0008               	return
 20101  2671                     __end_of_Buzzer_Initialization:	
 20102                           
 20103                           	psect	intentry
 20104  0004                     __pintentry:	
 20105 ;; *************** function _ISR *****************
 20106 ;; Defined at:
 20107 ;;		line 109 in file "../src/MCU_B1.c"
 20108 ;; Parameters:    Size  Location     Type
 20109 ;;		None
 20110 ;; Auto vars:     Size  Location     Type
 20111 ;;		None
 20112 ;; Return value:  Size  Location     Type
 20113 ;;		None               void
 20114 ;; Registers used:
 20115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20116 ;; Tracked objects:
 20117 ;;		On entry : 0/0
 20118 ;;		On exit  : 0/0
 20119 ;;		Unchanged: 0/0
 20120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20123 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20124 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20125 ;;Total ram usage:        1 bytes
 20126 ;; Hardware stack levels used:    1
 20127 ;; Hardware stack levels required when called:    3
 20128 ;; This function calls:
 20129 ;;		_INT_ISR
 20130 ;;		_IOC_ISR
 20131 ;;		_TMR0_ISR
 20132 ;; This function is called by:
 20133 ;;		Interrupt level 1
 20134 ;; This function uses a non-reentrant model
 20135 ;;
 20136                           
 20137  0004                     _ISR:	
 20138                           
 20139                           ;incstack = 0
 20140                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20141  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20142  0005  3180               	pagesel	$
 20143  0006  0020               	movlb	0	; select bank0
 20144  0007  087F               	movf	127,w
 20145  0008  00F6               	movwf	??_ISR
 20146                           
 20147                           ;MCU_B1.c: 111: IOC_ISR();
 20148  0009  319A  229A  3180   	fcall	_IOC_ISR
 20149                           
 20150                           ;MCU_B1.c: 113: TMR0_ISR();
 20151  000C  3182  22EA  3180   	fcall	_TMR0_ISR
 20152                           
 20153                           ;MCU_B1.c: 115: ;;
 20154                           ;MCU_B1.c: 119: INT_ISR();
 20155  000F  31A6  2659         	fcall	_INT_ISR
 20156  0011  0876               	movf	??_ISR,w
 20157  0012  0020               	movlb	0	; select bank0
 20158  0013  00FF               	movwf	127
 20159  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20160  0015  0009               	retfie
 20161  0016                     __end_of_ISR:	
 20162                           
 20163                           	psect	text140
 20164  02EA                     __ptext140:	
 20165 ;; *************** function _TMR0_ISR *****************
 20166 ;; Defined at:
 20167 ;;		line 137 in file "../src/MCU_B1.c"
 20168 ;; Parameters:    Size  Location     Type
 20169 ;;		None
 20170 ;; Auto vars:     Size  Location     Type
 20171 ;;		None
 20172 ;; Return value:  Size  Location     Type
 20173 ;;		None               void
 20174 ;; Registers used:
 20175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20176 ;; Tracked objects:
 20177 ;;		On entry : 0/0
 20178 ;;		On exit  : 0/0
 20179 ;;		Unchanged: 0/0
 20180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20183 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20184 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20185 ;;Total ram usage:        4 bytes
 20186 ;; Hardware stack levels used:    1
 20187 ;; Hardware stack levels required when called:    1
 20188 ;; This function calls:
 20189 ;;		i1_setLoad_StatusOff
 20190 ;; This function is called by:
 20191 ;;		_ISR
 20192 ;; This function uses a non-reentrant model
 20193 ;;
 20194                           
 20195                           
 20196                           ;psect for function _TMR0_ISR
 20197  02EA                     _TMR0_ISR:	
 20198                           
 20199                           ;MCU_B1.c: 138: if (TMR0IE && TMR0IF) {
 20200                           
 20201                           ;incstack = 0
 20202                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20203  02EA  1E8B               	btfss	11,5	;volatile
 20204  02EB  0008               	return
 20205  02EC  1D0B               	btfss	11,2	;volatile
 20206  02ED  0008               	return
 20207                           
 20208                           ;MCU_B1.c: 139: TMR0 = (256-90);
 20209  02EE  30A6               	movlw	166
 20210  02EF  0020               	movlb	0	; select bank0
 20211  02F0  0095               	movwf	21	;volatile
 20212                           
 20213                           ;MCU_B1.c: 140: TMR0IF = 0;
 20214  02F1  110B               	bcf	11,2	;volatile
 20215                           
 20216                           ;MCU_B1.c: 145: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20217  02F2  0878               	movf	_DimmerLights11,w
 20218  02F3  0086               	movwf	6
 20219  02F4  3001               	movlw	1	; select bank2/3
 20220  02F5  0087               	movwf	7
 20221  02F6  1C01               	btfss	1,0
 20222  02F7  2B43               	goto	i1l7598
 20223  02F8  3001               	movlw	1
 20224  02F9  00F2               	movwf	??_TMR0_ISR
 20225  02FA  0878               	movf	_DimmerLights11,w
 20226  02FB  3E03               	addlw	3
 20227  02FC  0086               	movwf	6
 20228  02FD  3001               	movlw	1	; select bank2/3
 20229  02FE  0087               	movwf	7
 20230  02FF  0872               	movf	??_TMR0_ISR,w
 20231  0300  0781               	addwf	1,f
 20232  0301  0021               	movlb	1	; select bank1
 20233  0302  083A               	movf	_Dimmer^(0+128),w
 20234  0303  3E02               	addlw	2
 20235  0304  0086               	movwf	6
 20236  0305  0187               	clrf	7
 20237  0306  0801               	movf	1,w
 20238  0307  00F2               	movwf	??_TMR0_ISR
 20239  0308  01F3               	clrf	??_TMR0_ISR+1
 20240  0309  09F2               	comf	??_TMR0_ISR,f
 20241  030A  09F3               	comf	??_TMR0_ISR+1,f
 20242  030B  0AF2               	incf	??_TMR0_ISR,f
 20243  030C  1903               	skipnz
 20244  030D  0AF3               	incf	??_TMR0_ISR+1,f
 20245  030E  0878               	movf	_DimmerLights11,w
 20246  030F  3E04               	addlw	4
 20247  0310  0086               	movwf	6
 20248  0311  3001               	movlw	1	; select bank2/3
 20249  0312  0087               	movwf	7
 20250  0313  0801               	movf	1,w
 20251  0314  0772               	addwf	??_TMR0_ISR,w
 20252  0315  00F4               	movwf	??_TMR0_ISR+2
 20253  0316  0873               	movf	??_TMR0_ISR+1,w
 20254  0317  1803               	skipnc
 20255  0318  0A73               	incf	??_TMR0_ISR+1,w
 20256  0319  00F5               	movwf	??_TMR0_ISR+3
 20257  031A  0878               	movf	_DimmerLights11,w
 20258  031B  3E03               	addlw	3
 20259  031C  0086               	movwf	6
 20260  031D  3001               	movlw	1	; select bank2/3
 20261  031E  0087               	movwf	7
 20262  031F  0875               	movf	??_TMR0_ISR+3,w
 20263  0320  3A80               	xorlw	128
 20264  0321  3C80               	sublw	128
 20265  0322  1D03               	skipz
 20266  0323  2B26               	goto	u658_25
 20267  0324  0874               	movf	??_TMR0_ISR+2,w
 20268  0325  0201               	subwf	1,w
 20269  0326                     u658_25:	
 20270  0326  1C03               	skipc
 20271  0327  2C7F               	goto	i1l7668
 20272  0328  0878               	movf	_DimmerLights11,w
 20273  0329  3E03               	addlw	3
 20274  032A  0086               	movwf	6
 20275  032B  3001               	movlw	1	; select bank2/3
 20276  032C  0087               	movwf	7
 20277  032D  0181               	clrf	1
 20278  032E  0878               	movf	_DimmerLights11,w
 20279  032F  0086               	movwf	6
 20280  0330  3001               	movlw	1	; select bank2/3
 20281  0331  0087               	movwf	7
 20282  0332  1001               	bcf	1,0
 20283  0333  0878               	movf	_DimmerLights11,w
 20284  0334  3E07               	addlw	7
 20285  0335  0086               	movwf	6
 20286  0336  3001               	movlw	1	; select bank2/3
 20287  0337  0087               	movwf	7
 20288  0338  1401               	bsf	1,0
 20289  0339  0878               	movf	_DimmerLights11,w
 20290  033A  0086               	movwf	6
 20291  033B  3001               	movlw	1	; select bank2/3
 20292  033C  0087               	movwf	7
 20293  033D  1F01               	btfss	1,6
 20294  033E  2C7F               	goto	i1l7668
 20295  033F  0020               	movlb	0	; select bank0
 20296  0340  178C               	bsf	12,7	;volatile
 20297  0341  160D               	bsf	13,4	;volatile
 20298  0342  2C7F               	goto	i1l7668
 20299  0343                     i1l7598:	
 20300  0343  0878               	movf	_DimmerLights11,w
 20301  0344  3E07               	addlw	7
 20302  0345  0086               	movwf	6
 20303  0346  3001               	movlw	1	; select bank2/3
 20304  0347  0087               	movwf	7
 20305  0348  1C01               	btfss	1,0
 20306  0349  2C49               	goto	i1l7658
 20307  034A  0878               	movf	_DimmerLights11,w
 20308  034B  3E07               	addlw	7
 20309  034C  0086               	movwf	6
 20310  034D  3001               	movlw	1	; select bank2/3
 20311  034E  0087               	movwf	7
 20312  034F  1001               	bcf	1,0
 20313  0350  0878               	movf	_DimmerLights11,w
 20314  0351  0086               	movwf	6
 20315  0352  3001               	movlw	1	; select bank2/3
 20316  0353  0087               	movwf	7
 20317  0354  1C81               	btfss	1,1
 20318  0355  2C49               	goto	i1l7658
 20319  0356  3001               	movlw	1
 20320  0357  00F2               	movwf	??_TMR0_ISR
 20321  0358  0A78               	incf	_DimmerLights11,w
 20322  0359  0086               	movwf	6
 20323  035A  3001               	movlw	1	; select bank2/3
 20324  035B  0087               	movwf	7
 20325  035C  0872               	movf	??_TMR0_ISR,w
 20326  035D  0781               	addwf	1,f
 20327  035E  0A78               	incf	_DimmerLights11,w
 20328  035F  0086               	movwf	6
 20329  0360  3001               	movlw	1	; select bank2/3
 20330  0361  0087               	movwf	7
 20331  0362  0878               	movf	_DimmerLights11,w
 20332  0363  3E02               	addlw	2
 20333  0364  0084               	movwf	4
 20334  0365  3001               	movlw	1	; select bank2/3
 20335  0366  0085               	movwf	5
 20336  0367  0800               	movf	0,w
 20337  0368  0201               	subwf	1,w
 20338  0369  1C03               	skipc
 20339  036A  2C49               	goto	i1l7658
 20340  036B  0A78               	incf	_DimmerLights11,w
 20341  036C  0086               	movwf	6
 20342  036D  3001               	movlw	1	; select bank2/3
 20343  036E  0087               	movwf	7
 20344  036F  0181               	clrf	1
 20345  0370  0878               	movf	_DimmerLights11,w
 20346  0371  0086               	movwf	6
 20347  0372  3001               	movlw	1	; select bank2/3
 20348  0373  0087               	movwf	7
 20349  0374  1D81               	btfss	1,3
 20350  0375  2BAC               	goto	i1l7624
 20351  0376  0878               	movf	_DimmerLights11,w
 20352  0377  0086               	movwf	6
 20353  0378  3001               	movlw	1	; select bank2/3
 20354  0379  0087               	movwf	7
 20355  037A  1A01               	btfsc	1,4
 20356  037B  2B93               	goto	i1l7618
 20357  037C  0878               	movf	_DimmerLights11,w
 20358  037D  3E04               	addlw	4
 20359  037E  0086               	movwf	6
 20360  037F  3001               	movlw	1	; select bank2/3
 20361  0380  0087               	movwf	7
 20362  0381  3044               	movlw	68
 20363  0382  0201               	subwf	1,w
 20364  0383  1C03               	skipc
 20365  0384  2B8D               	goto	i1l7616
 20366  0385  0878               	movf	_DimmerLights11,w
 20367  0386  3E04               	addlw	4
 20368  0387  0086               	movwf	6
 20369  0388  3001               	movlw	1	; select bank2/3
 20370  0389  0087               	movwf	7
 20371  038A  3001               	movlw	1
 20372  038B  0281               	subwf	1,f
 20373  038C  2C49               	goto	i1l7658
 20374  038D                     i1l7616:	
 20375  038D  0878               	movf	_DimmerLights11,w
 20376  038E  0086               	movwf	6
 20377  038F  3001               	movlw	1	; select bank2/3
 20378  0390  0087               	movwf	7
 20379  0391  1601               	bsf	1,4
 20380  0392  2C49               	goto	i1l7658
 20381  0393                     i1l7618:	
 20382  0393  0878               	movf	_DimmerLights11,w
 20383  0394  3E04               	addlw	4
 20384  0395  0086               	movwf	6
 20385  0396  3001               	movlw	1	; select bank2/3
 20386  0397  0087               	movwf	7
 20387  0398  3078               	movlw	120
 20388  0399  0201               	subwf	1,w
 20389  039A  1803               	skipnc
 20390  039B  2BA6               	goto	i1l7622
 20391  039C  3001               	movlw	1
 20392  039D  00F2               	movwf	??_TMR0_ISR
 20393  039E  0878               	movf	_DimmerLights11,w
 20394  039F  3E04               	addlw	4
 20395  03A0  0086               	movwf	6
 20396  03A1  3001               	movlw	1	; select bank2/3
 20397  03A2  0087               	movwf	7
 20398  03A3  0872               	movf	??_TMR0_ISR,w
 20399  03A4  0781               	addwf	1,f
 20400  03A5  2C49               	goto	i1l7658
 20401  03A6                     i1l7622:	
 20402  03A6  0878               	movf	_DimmerLights11,w
 20403  03A7  0086               	movwf	6
 20404  03A8  3001               	movlw	1	; select bank2/3
 20405  03A9  0087               	movwf	7
 20406  03AA  1201               	bcf	1,4
 20407  03AB  2C49               	goto	i1l7658
 20408  03AC                     i1l7624:	
 20409  03AC  0878               	movf	_DimmerLights11,w
 20410  03AD  0086               	movwf	6
 20411  03AE  3001               	movlw	1	; select bank2/3
 20412  03AF  0087               	movwf	7
 20413  03B0  1D01               	btfss	1,2
 20414  03B1  2BF3               	goto	i1l7638
 20415  03B2  0878               	movf	_DimmerLights11,w
 20416  03B3  3E05               	addlw	5
 20417  03B4  0086               	movwf	6
 20418  03B5  3001               	movlw	1	; select bank2/3
 20419  03B6  0087               	movwf	7
 20420  03B7  0878               	movf	_DimmerLights11,w
 20421  03B8  3E04               	addlw	4
 20422  03B9  0084               	movwf	4
 20423  03BA  3001               	movlw	1	; select bank2/3
 20424  03BB  0085               	movwf	5
 20425  03BC  0800               	movf	0,w
 20426  03BD  0201               	subwf	1,w
 20427  03BE  1803               	skipnc
 20428  03BF  2BC8               	goto	i1l7630
 20429  03C0  0878               	movf	_DimmerLights11,w
 20430  03C1  3E04               	addlw	4
 20431  03C2  0086               	movwf	6
 20432  03C3  3001               	movlw	1	; select bank2/3
 20433  03C4  0087               	movwf	7
 20434  03C5  3001               	movlw	1
 20435  03C6  0281               	subwf	1,f
 20436  03C7  2BDF               	goto	i1l7634
 20437  03C8                     i1l7630:	
 20438  03C8  0878               	movf	_DimmerLights11,w
 20439  03C9  3E04               	addlw	4
 20440  03CA  0086               	movwf	6
 20441  03CB  3001               	movlw	1	; select bank2/3
 20442  03CC  0087               	movwf	7
 20443  03CD  0878               	movf	_DimmerLights11,w
 20444  03CE  3E05               	addlw	5
 20445  03CF  0084               	movwf	4
 20446  03D0  3001               	movlw	1	; select bank2/3
 20447  03D1  0085               	movwf	5
 20448  03D2  0800               	movf	0,w
 20449  03D3  0201               	subwf	1,w
 20450  03D4  1803               	skipnc
 20451  03D5  2BDF               	goto	i1l7634
 20452  03D6  3001               	movlw	1
 20453  03D7  00F2               	movwf	??_TMR0_ISR
 20454  03D8  0878               	movf	_DimmerLights11,w
 20455  03D9  3E04               	addlw	4
 20456  03DA  0086               	movwf	6
 20457  03DB  3001               	movlw	1	; select bank2/3
 20458  03DC  0087               	movwf	7
 20459  03DD  0872               	movf	??_TMR0_ISR,w
 20460  03DE  0781               	addwf	1,f
 20461  03DF                     i1l7634:	
 20462  03DF  0878               	movf	_DimmerLights11,w
 20463  03E0  3E05               	addlw	5
 20464  03E1  0086               	movwf	6
 20465  03E2  3001               	movlw	1	; select bank2/3
 20466  03E3  0087               	movwf	7
 20467  03E4  0878               	movf	_DimmerLights11,w
 20468  03E5  3E04               	addlw	4
 20469  03E6  0084               	movwf	4
 20470  03E7  3001               	movlw	1	; select bank2/3
 20471  03E8  0085               	movwf	5
 20472  03E9  0800               	movf	0,w
 20473  03EA  0601               	xorwf	1,w
 20474  03EB  1D03               	skipz
 20475  03EC  2C49               	goto	i1l7658
 20476  03ED  0878               	movf	_DimmerLights11,w
 20477  03EE  0086               	movwf	6
 20478  03EF  3001               	movlw	1	; select bank2/3
 20479  03F0  0087               	movwf	7
 20480  03F1  1101               	bcf	1,2
 20481  03F2  2C0E               	goto	i1l7644
 20482  03F3                     i1l7638:	
 20483  03F3  0878               	movf	_DimmerLights11,w
 20484  03F4  0086               	movwf	6
 20485  03F5  3001               	movlw	1	; select bank2/3
 20486  03F6  0087               	movwf	7
 20487  03F7  1E81               	btfss	1,5
 20488  03F8  2C14               	goto	i1l7646
 20489  03F9  0878               	movf	_DimmerLights11,w
 20490  03FA  3E04               	addlw	4
 20491  03FB  0086               	movwf	6
 20492  03FC  3001               	movlw	1	; select bank2/3
 20493  03FD  0087               	movwf	7
 20494  03FE  3001               	movlw	1
 20495  03FF  0281               	subwf	1,f
 20496  0400  0878               	movf	_DimmerLights11,w
 20497  0401  3E05               	addlw	5
 20498  0402  0086               	movwf	6
 20499  0403  3001               	movlw	1	; select bank2/3
 20500  0404  0087               	movwf	7
 20501  0405  0878               	movf	_DimmerLights11,w
 20502  0406  3E04               	addlw	4
 20503  0407  0084               	movwf	4
 20504  0408  3001               	movlw	1	; select bank2/3
 20505  0409  0085               	movwf	5
 20506  040A  0800               	movf	0,w
 20507  040B  0201               	subwf	1,w
 20508  040C  1C03               	skipc
 20509  040D  2C49               	goto	i1l7658
 20510  040E                     i1l7644:	
 20511  040E  0878               	movf	_DimmerLights11,w
 20512  040F  0086               	movwf	6
 20513  0410  3001               	movlw	1	; select bank2/3
 20514  0411  0087               	movwf	7
 20515  0412  1081               	bcf	1,1
 20516  0413  2C49               	goto	i1l7658
 20517  0414                     i1l7646:	
 20518  0414  3001               	movlw	1
 20519  0415  00F2               	movwf	??_TMR0_ISR
 20520  0416  0878               	movf	_DimmerLights11,w
 20521  0417  3E04               	addlw	4
 20522  0418  0086               	movwf	6
 20523  0419  3001               	movlw	1	; select bank2/3
 20524  041A  0087               	movwf	7
 20525  041B  0872               	movf	??_TMR0_ISR,w
 20526  041C  0781               	addwf	1,f
 20527  041D  0878               	movf	_DimmerLights11,w
 20528  041E  3E04               	addlw	4
 20529  041F  0086               	movwf	6
 20530  0420  3001               	movlw	1	; select bank2/3
 20531  0421  0087               	movwf	7
 20532  0422  0878               	movf	_DimmerLights11,w
 20533  0423  3E06               	addlw	6
 20534  0424  0084               	movwf	4
 20535  0425  3001               	movlw	1	; select bank2/3
 20536  0426  0085               	movwf	5
 20537  0427  0800               	movf	0,w
 20538  0428  0201               	subwf	1,w
 20539  0429  1C03               	skipc
 20540  042A  2C49               	goto	i1l7658
 20541  042B  0878               	movf	_DimmerLights11,w
 20542  042C  0086               	movwf	6
 20543  042D  3001               	movlw	1	; select bank2/3
 20544  042E  0087               	movwf	7
 20545  042F  1081               	bcf	1,1
 20546  0430  0878               	movf	_DimmerLights11,w
 20547  0431  0086               	movwf	6
 20548  0432  3001               	movlw	1	; select bank2/3
 20549  0433  0087               	movwf	7
 20550  0434  1301               	bcf	1,6
 20551  0435  0878               	movf	_DimmerLights11,w
 20552  0436  3E0C               	addlw	12
 20553  0437  0086               	movwf	6
 20554  0438  3001               	movlw	1	; select bank2/3
 20555  0439  0087               	movwf	7
 20556  043A  1401               	bsf	1,0
 20557  043B  0021               	movlb	1	; select bank1
 20558  043C  083A               	movf	_Dimmer^(0+128),w
 20559  043D  0086               	movwf	6
 20560  043E  0187               	clrf	7
 20561  043F  1401               	bsf	1,0
 20562  0440  0020               	movlb	0	; select bank0
 20563  0441  118C               	bcf	12,3	;volatile
 20564  0442  138E               	bcf	14,7	;volatile
 20565  0443  01F0               	clrf	i1setLoad_StatusOff@command
 20566  0444  0AF0               	incf	i1setLoad_StatusOff@command,f
 20567  0445  3001               	movlw	1
 20568  0446  319B  23E7  3182   	fcall	i1_setLoad_StatusOff
 20569  0449                     i1l7658:	
 20570  0449  0020               	movlb	0	; select bank0
 20571  044A  1F8C               	btfss	12,7	;volatile
 20572  044B  2C7F               	goto	i1l7668
 20573  044C  3001               	movlw	1
 20574  044D  00F2               	movwf	??_TMR0_ISR
 20575  044E  0878               	movf	_DimmerLights11,w
 20576  044F  3E08               	addlw	8
 20577  0450  0086               	movwf	6
 20578  0451  3001               	movlw	1	; select bank2/3
 20579  0452  0087               	movwf	7
 20580  0453  0872               	movf	??_TMR0_ISR,w
 20581  0454  0781               	addwf	1,f
 20582  0455  0878               	movf	_DimmerLights11,w
 20583  0456  3E04               	addlw	4
 20584  0457  0086               	movwf	6
 20585  0458  3001               	movlw	1	; select bank2/3
 20586  0459  0087               	movwf	7
 20587  045A  0801               	movf	1,w
 20588  045B  00F2               	movwf	??_TMR0_ISR
 20589  045C  01F3               	clrf	??_TMR0_ISR+1
 20590  045D  09F2               	comf	??_TMR0_ISR,f
 20591  045E  09F3               	comf	??_TMR0_ISR+1,f
 20592  045F  0AF2               	incf	??_TMR0_ISR,f
 20593  0460  1903               	skipnz
 20594  0461  0AF3               	incf	??_TMR0_ISR+1,f
 20595  0462  0872               	movf	??_TMR0_ISR,w
 20596  0463  3E78               	addlw	120
 20597  0464  00F4               	movwf	??_TMR0_ISR+2
 20598  0465  3000               	movlw	0
 20599  0466  3D73               	addwfc	??_TMR0_ISR+1,w
 20600  0467  00F5               	movwf	??_TMR0_ISR+3
 20601  0468  0878               	movf	_DimmerLights11,w
 20602  0469  3E08               	addlw	8
 20603  046A  0086               	movwf	6
 20604  046B  3001               	movlw	1	; select bank2/3
 20605  046C  0087               	movwf	7
 20606  046D  0875               	movf	??_TMR0_ISR+3,w
 20607  046E  3A80               	xorlw	128
 20608  046F  3C80               	sublw	128
 20609  0470  1D03               	skipz
 20610  0471  2C74               	goto	u675_25
 20611  0472  0874               	movf	??_TMR0_ISR+2,w
 20612  0473  0201               	subwf	1,w
 20613  0474                     u675_25:	
 20614  0474  1C03               	skipc
 20615  0475  2C7F               	goto	i1l7668
 20616  0476  0878               	movf	_DimmerLights11,w
 20617  0477  3E08               	addlw	8
 20618  0478  0086               	movwf	6
 20619  0479  3001               	movlw	1	; select bank2/3
 20620  047A  0087               	movwf	7
 20621  047B  0181               	clrf	1
 20622  047C  0020               	movlb	0	; select bank0
 20623  047D  138C               	bcf	12,7	;volatile
 20624  047E  120D               	bcf	13,4	;volatile
 20625  047F                     i1l7668:	
 20626                           
 20627                           ;MCU_B1.c: 158: Timer0->Count++;
 20628  047F  0021               	movlb	1	; select bank1
 20629  0480  0A6B               	incf	_Timer0^(0+128),w
 20630  0481  0086               	movwf	6
 20631  0482  0187               	clrf	7
 20632  0483  3001               	movlw	1
 20633  0484  0781               	addwf	1,f
 20634  0485  3141               	addfsr 1,1
 20635  0486  1803               	skipnc
 20636  0487  0A81               	incf	1,f
 20637                           
 20638                           ;MCU_B1.c: 159: if (Timer0->Count == 200) {
 20639  0488  0A6B               	incf	_Timer0^(0+128),w
 20640  0489  0086               	movwf	6
 20641  048A  0187               	clrf	7
 20642  048B  3F40               	moviw [0]fsr1
 20643  048C  3AC8               	xorlw	200
 20644  048D  1D03               	skipz
 20645  048E  2C91               	goto	u676_25
 20646  048F  3F41               	moviw [1]fsr1
 20647  0490  3A00               	xorlw	0
 20648  0491                     u676_25:	
 20649  0491  1D03               	skipz
 20650  0492  2C9E               	goto	i1l1319
 20651                           
 20652                           ;MCU_B1.c: 160: Timer0->Count = 0;
 20653  0493  0A6B               	incf	_Timer0^(0+128),w
 20654  0494  0086               	movwf	6
 20655  0495  0187               	clrf	7
 20656  0496  3000               	movlw	0
 20657  0497  3FC0               	movwi [0]fsr1
 20658  0498  3FC1               	movwi [1]fsr1
 20659                           
 20660                           ;MCU_B1.c: 161: myMain->T0_Timerout = 1;
 20661  0499  086D               	movf	_myMain^(0+128),w
 20662  049A  0086               	movwf	6
 20663  049B  3001               	movlw	1	; select bank2/3
 20664  049C  0087               	movwf	7
 20665  049D  1481               	bsf	1,1
 20666  049E                     i1l1319:	
 20667                           
 20668                           ;MCU_B1.c: 162: }
 20669                           ;MCU_B1.c: 165: if (Buz->GO) {
 20670  049E  0837               	movf	_Buz^(0+128),w
 20671  049F  0086               	movwf	6
 20672  04A0  3001               	movlw	1	; select bank2/3
 20673  04A1  0087               	movwf	7
 20674  04A2  1C81               	btfss	1,1
 20675  04A3  0008               	return
 20676                           
 20677                           ;MCU_B1.c: 166: Buz->Time++;
 20678  04A4  0A37               	incf	_Buz^(0+128),w
 20679  04A5  0086               	movwf	6
 20680  04A6  3001               	movlw	1	; select bank2/3
 20681  04A7  0087               	movwf	7
 20682  04A8  3001               	movlw	1
 20683  04A9  0781               	addwf	1,f
 20684  04AA  3141               	addfsr 1,1
 20685  04AB  1803               	skipnc
 20686  04AC  0A81               	incf	1,f
 20687  04AD  0008               	return
 20688  04AE                     __end_of_TMR0_ISR:	
 20689                           
 20690                           	psect	text141
 20691  1BE7                     __ptext141:	
 20692 ;; *************** function i1_setLoad_StatusOff *****************
 20693 ;; Defined at:
 20694 ;;		line 284 in file "../src/OverLoad_B1.c"
 20695 ;; Parameters:    Size  Location     Type
 20696 ;;  lights          1    wreg     unsigned char 
 20697 ;;  command         1    0[COMMON] unsigned char 
 20698 ;; Auto vars:     Size  Location     Type
 20699 ;;  lights          1    1[COMMON] unsigned char 
 20700 ;; Return value:  Size  Location     Type
 20701 ;;		None               void
 20702 ;; Registers used:
 20703 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20704 ;; Tracked objects:
 20705 ;;		On entry : 0/0
 20706 ;;		On exit  : 0/0
 20707 ;;		Unchanged: 0/0
 20708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20709 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20712 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20713 ;;Total ram usage:        2 bytes
 20714 ;; Hardware stack levels used:    1
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_TMR0_ISR
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           
 20723                           ;psect for function i1_setLoad_StatusOff
 20724  1BE7                     i1_setLoad_StatusOff:	
 20725                           
 20726                           ;incstack = 0
 20727                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20728                           ;i1setLoad_StatusOff@lights stored from wreg
 20729  1BE7  00F1               	movwf	i1setLoad_StatusOff@lights
 20730                           
 20731                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20732  1BE8  087B               	movf	_Load,w
 20733  1BE9  3E46               	addlw	70
 20734  1BEA  0086               	movwf	6
 20735  1BEB  3002               	movlw	2	; select bank4/5
 20736  1BEC  0087               	movwf	7
 20737  1BED  0870               	movf	i1setLoad_StatusOff@command,w
 20738  1BEE  1081               	bcf	1,1
 20739  1BEF  1D03               	skipz
 20740  1BF0  1481               	bsf	1,1
 20741                           
 20742                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20743  1BF1  087B               	movf	_Load,w
 20744  1BF2  3E42               	addlw	66
 20745  1BF3  0086               	movwf	6
 20746  1BF4  3002               	movlw	2	; select bank4/5
 20747  1BF5  0087               	movwf	7
 20748  1BF6  3002               	movlw	2
 20749  1BF7  0281               	subwf	1,f
 20750                           
 20751                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20752  1BF8  0871               	movf	i1setLoad_StatusOff@lights,w
 20753  1BF9  3A01               	xorlw	1
 20754  1BFA  1D03               	skipz
 20755  1BFB  2C02               	goto	i1l7484
 20756                           
 20757                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20758  1BFC  087B               	movf	_Load,w
 20759  1BFD  3E43               	addlw	67
 20760  1BFE  0086               	movwf	6
 20761  1BFF  3002               	movlw	2	; select bank4/5
 20762  1C00  0087               	movwf	7
 20763  1C01  0181               	clrf	1
 20764  1C02                     i1l7484:	
 20765                           
 20766                           ;OverLoad_B1.c: 289: }
 20767                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20768  1C02  0871               	movf	i1setLoad_StatusOff@lights,w
 20769  1C03  3A02               	xorlw	2
 20770  1C04  1D03               	skipz
 20771  1C05  2C0C               	goto	i1l7488
 20772                           
 20773                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20774  1C06  087B               	movf	_Load,w
 20775  1C07  3E44               	addlw	68
 20776  1C08  0086               	movwf	6
 20777  1C09  3002               	movlw	2	; select bank4/5
 20778  1C0A  0087               	movwf	7
 20779  1C0B  0181               	clrf	1
 20780  1C0C                     i1l7488:	
 20781                           
 20782                           ;OverLoad_B1.c: 292: }
 20783                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20784  1C0C  0871               	movf	i1setLoad_StatusOff@lights,w
 20785  1C0D  3A03               	xorlw	3
 20786  1C0E  1D03               	skipz
 20787  1C0F  0008               	return
 20788                           
 20789                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20790  1C10  087B               	movf	_Load,w
 20791  1C11  3E45               	addlw	69
 20792  1C12  0086               	movwf	6
 20793  1C13  3002               	movlw	2	; select bank4/5
 20794  1C14  0087               	movwf	7
 20795  1C15  0181               	clrf	1
 20796  1C16  0008               	return
 20797  1C17                     __end_ofi1_setLoad_StatusOff:	
 20798                           
 20799                           	psect	text142
 20800  1A9A                     __ptext142:	
 20801 ;; *************** function _IOC_ISR *****************
 20802 ;; Defined at:
 20803 ;;		line 357 in file "../src/MCU_B1.c"
 20804 ;; Parameters:    Size  Location     Type
 20805 ;;		None
 20806 ;; Auto vars:     Size  Location     Type
 20807 ;;		None
 20808 ;; Return value:  Size  Location     Type
 20809 ;;		None               void
 20810 ;; Registers used:
 20811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20812 ;; Tracked objects:
 20813 ;;		On entry : 0/0
 20814 ;;		On exit  : 0/0
 20815 ;;		Unchanged: 0/0
 20816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20821 ;;Total ram usage:        1 bytes
 20822 ;; Hardware stack levels used:    1
 20823 ;; Hardware stack levels required when called:    1
 20824 ;; This function calls:
 20825 ;;		_setDimmerReClock
 20826 ;; This function is called by:
 20827 ;;		_ISR
 20828 ;; This function uses a non-reentrant model
 20829 ;;
 20830                           
 20831                           
 20832                           ;psect for function _IOC_ISR
 20833  1A9A                     _IOC_ISR:	
 20834                           
 20835                           ;MCU_B1.c: 358: if (IOCIE && IOCBF2) {
 20836                           
 20837                           ;incstack = 0
 20838                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20839  1A9A  1D8B               	btfss	11,3	;volatile
 20840  1A9B  0008               	return
 20841  1A9C  0027               	movlb	7	; select bank7
 20842  1A9D  1D16               	btfss	22,2	;volatile
 20843  1A9E  0008               	return
 20844                           
 20845                           ;MCU_B1.c: 359: IOCBF2 = 0;
 20846  1A9F  1116               	bcf	22,2	;volatile
 20847                           
 20848                           ;MCU_B1.c: 360: IOCIF = 0;
 20849  1AA0  100B               	bcf	11,0	;volatile
 20850                           
 20851                           ;MCU_B1.c: 361: if (myMain->PowerON) {
 20852  1AA1  0021               	movlb	1	; select bank1
 20853  1AA2  086D               	movf	_myMain^(0+128),w
 20854  1AA3  0086               	movwf	6
 20855  1AA4  3001               	movlw	1	; select bank2/3
 20856  1AA5  0087               	movwf	7
 20857  1AA6  1C01               	btfss	1,0
 20858  1AA7  0008               	return
 20859                           
 20860                           ;MCU_B1.c: 365: setDimmerReClock();
 20861  1AA8  31A7  2704  319A   	fcall	_setDimmerReClock
 20862                           
 20863                           ;MCU_B1.c: 366: if (RB2) {
 20864  1AAB  0020               	movlb	0	; select bank0
 20865  1AAC  1D0D               	btfss	13,2	;volatile
 20866  1AAD  2AB5               	goto	i1l7574
 20867                           
 20868                           ;MCU_B1.c: 367: Dimmer->Correction = 0;
 20869  1AAE  0021               	movlb	1	; select bank1
 20870  1AAF  083A               	movf	_Dimmer^(0+128),w
 20871  1AB0  3E02               	addlw	2
 20872  1AB1  0086               	movwf	6
 20873  1AB2  0187               	clrf	7
 20874  1AB3  0181               	clrf	1
 20875                           
 20876                           ;MCU_B1.c: 368: } else {
 20877  1AB4  0008               	return
 20878  1AB5                     i1l7574:	
 20879                           
 20880                           ;MCU_B1.c: 369: Dimmer->Correction = 8;
 20881  1AB5  3008               	movlw	8
 20882  1AB6  00F0               	movwf	??_IOC_ISR
 20883  1AB7  0021               	movlb	1	; select bank1
 20884  1AB8  083A               	movf	_Dimmer^(0+128),w
 20885  1AB9  3E02               	addlw	2
 20886  1ABA  0086               	movwf	6
 20887  1ABB  0187               	clrf	7
 20888  1ABC  0870               	movf	??_IOC_ISR,w
 20889  1ABD  0081               	movwf	1
 20890  1ABE  0008               	return
 20891  1ABF                     __end_of_IOC_ISR:	
 20892                           
 20893                           	psect	text143
 20894  2704                     __ptext143:	
 20895 ;; *************** function _setDimmerReClock *****************
 20896 ;; Defined at:
 20897 ;;		line 175 in file "../src/MCU_B1.c"
 20898 ;; Parameters:    Size  Location     Type
 20899 ;;		None
 20900 ;; Auto vars:     Size  Location     Type
 20901 ;;		None
 20902 ;; Return value:  Size  Location     Type
 20903 ;;		None               void
 20904 ;; Registers used:
 20905 ;;		wreg, fsr1l, fsr1h
 20906 ;; Tracked objects:
 20907 ;;		On entry : 0/0
 20908 ;;		On exit  : 0/0
 20909 ;;		Unchanged: 0/0
 20910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20915 ;;Total ram usage:        0 bytes
 20916 ;; Hardware stack levels used:    1
 20917 ;; This function calls:
 20918 ;;		Nothing
 20919 ;; This function is called by:
 20920 ;;		_IOC_ISR
 20921 ;; This function uses a non-reentrant model
 20922 ;;
 20923                           
 20924                           
 20925                           ;psect for function _setDimmerReClock
 20926  2704                     _setDimmerReClock:	
 20927                           
 20928                           ;MCU_B1.c: 176: TMR0 = 255;
 20929                           
 20930                           ;incstack = 0
 20931                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20932  2704  30FF               	movlw	255
 20933  2705  0020               	movlb	0	; select bank0
 20934  2706  0095               	movwf	21	;volatile
 20935                           
 20936                           ;MCU_B1.c: 181: if (!DimmerLights11->GO) {
 20937  2707  0878               	movf	_DimmerLights11,w
 20938  2708  0086               	movwf	6
 20939  2709  3001               	movlw	1	; select bank2/3
 20940  270A  0087               	movwf	7
 20941  270B  1801               	btfsc	1,0
 20942  270C  0008               	return
 20943                           
 20944                           ;MCU_B1.c: 182: DimmerLights11->GO = 1;
 20945  270D  0878               	movf	_DimmerLights11,w
 20946  270E  0086               	movwf	6
 20947  270F  3001               	movlw	1	; select bank2/3
 20948  2710  0087               	movwf	7
 20949  2711  1401               	bsf	1,0
 20950  2712  0008               	return
 20951  2713                     __end_of_setDimmerReClock:	
 20952                           
 20953                           	psect	text144
 20954  2659                     __ptext144:	
 20955 ;; *************** function _INT_ISR *****************
 20956 ;; Defined at:
 20957 ;;		line 310 in file "../src/MCU_B1.c"
 20958 ;; Parameters:    Size  Location     Type
 20959 ;;		None
 20960 ;; Auto vars:     Size  Location     Type
 20961 ;;		None
 20962 ;; Return value:  Size  Location     Type
 20963 ;;		None               void
 20964 ;; Registers used:
 20965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20966 ;; Tracked objects:
 20967 ;;		On entry : 0/0
 20968 ;;		On exit  : 0/0
 20969 ;;		Unchanged: 0/0
 20970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20975 ;;Total ram usage:        0 bytes
 20976 ;; Hardware stack levels used:    1
 20977 ;; Hardware stack levels required when called:    2
 20978 ;; This function calls:
 20979 ;;		_setRF_ReceiveGO
 20980 ;; This function is called by:
 20981 ;;		_ISR
 20982 ;; This function uses a non-reentrant model
 20983 ;;
 20984                           
 20985                           
 20986                           ;psect for function _INT_ISR
 20987  2659                     _INT_ISR:	
 20988                           
 20989                           ;MCU_B1.c: 311: if (INTE && INTF) {
 20990                           
 20991                           ;incstack = 0
 20992                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20993  2659  1E0B               	btfss	11,4	;volatile
 20994  265A  0008               	return
 20995  265B  1C8B               	btfss	11,1	;volatile
 20996  265C  0008               	return
 20997                           
 20998                           ;MCU_B1.c: 312: INTF = 0;
 20999  265D  108B               	bcf	11,1	;volatile
 21000                           
 21001                           ;MCU_B1.c: 313: INTE = 0;
 21002  265E  120B               	bcf	11,4	;volatile
 21003                           
 21004                           ;MCU_B1.c: 314: setRF_ReceiveGO(1, 1);
 21005  265F  01F2               	clrf	setRF_ReceiveGO@command
 21006  2660  0AF2               	incf	setRF_ReceiveGO@command,f
 21007  2661  3001               	movlw	1
 21008  2662  31A6  26DD         	fcall	_setRF_ReceiveGO
 21009  2664  0008               	return
 21010  2665                     __end_of_INT_ISR:	
 21011                           
 21012                           	psect	text145
 21013  26DD                     __ptext145:	
 21014 ;; *************** function _setRF_ReceiveGO *****************
 21015 ;; Defined at:
 21016 ;;		line 36 in file "../src/RF_Control_B1.c"
 21017 ;; Parameters:    Size  Location     Type
 21018 ;;  rf              1    wreg     unsigned char 
 21019 ;;  command         1    2[COMMON] unsigned char 
 21020 ;; Auto vars:     Size  Location     Type
 21021 ;;  rf              1    3[COMMON] unsigned char 
 21022 ;; Return value:  Size  Location     Type
 21023 ;;		None               void
 21024 ;; Registers used:
 21025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21026 ;; Tracked objects:
 21027 ;;		On entry : 0/0
 21028 ;;		On exit  : 0/0
 21029 ;;		Unchanged: 0/0
 21030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21031 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21035 ;;Total ram usage:        2 bytes
 21036 ;; Hardware stack levels used:    1
 21037 ;; Hardware stack levels required when called:    1
 21038 ;; This function calls:
 21039 ;;		i1_RfPointSelect
 21040 ;; This function is called by:
 21041 ;;		_INT_ISR
 21042 ;; This function uses a non-reentrant model
 21043 ;;
 21044                           
 21045                           
 21046                           ;psect for function _setRF_ReceiveGO
 21047  26DD                     _setRF_ReceiveGO:	
 21048                           
 21049                           ;incstack = 0
 21050                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21051                           ;setRF_ReceiveGO@rf stored from wreg
 21052  26DD  00F3               	movwf	setRF_ReceiveGO@rf
 21053                           
 21054                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 21055  26DE  0873               	movf	setRF_ReceiveGO@rf,w
 21056  26DF  31A6  2601         	fcall	i1_RfPointSelect
 21057                           
 21058                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 21059  26E1  0021               	movlb	1	; select bank1
 21060  26E2  083E               	movf	_RF^(0+128),w
 21061  26E3  0086               	movwf	6
 21062  26E4  0187               	clrf	7
 21063  26E5  0872               	movf	setRF_ReceiveGO@command,w
 21064  26E6  1081               	bcf	1,1
 21065  26E7  1D03               	skipz
 21066  26E8  1481               	bsf	1,1
 21067  26E9  0008               	return
 21068  26EA                     __end_of_setRF_ReceiveGO:	
 21069                           
 21070                           	psect	text146
 21071  2601                     __ptext146:	
 21072 ;; *************** function i1_RfPointSelect *****************
 21073 ;; Defined at:
 21074 ;;		line 7 in file "../src/RF_Control_B1.c"
 21075 ;; Parameters:    Size  Location     Type
 21076 ;;  rf              1    wreg     unsigned char 
 21077 ;; Auto vars:     Size  Location     Type
 21078 ;;  rf              1    1[COMMON] unsigned char 
 21079 ;; Return value:  Size  Location     Type
 21080 ;;		None               void
 21081 ;; Registers used:
 21082 ;;		wreg
 21083 ;; Tracked objects:
 21084 ;;		On entry : 0/0
 21085 ;;		On exit  : 0/0
 21086 ;;		Unchanged: 0/0
 21087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21091 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21092 ;;Total ram usage:        2 bytes
 21093 ;; Hardware stack levels used:    1
 21094 ;; This function calls:
 21095 ;;		Nothing
 21096 ;; This function is called by:
 21097 ;;		_setRF_ReceiveGO
 21098 ;; This function uses a non-reentrant model
 21099 ;;
 21100                           
 21101                           
 21102                           ;psect for function i1_RfPointSelect
 21103  2601                     i1_RfPointSelect:	
 21104                           
 21105                           ;incstack = 0
 21106                           ; Regs used in i1_RfPointSelect: [wreg]
 21107                           ;i1RfPointSelect@rf stored from wreg
 21108  2601  00F1               	movwf	i1RfPointSelect@rf
 21109                           
 21110                           ;RF_Control_B1.c: 9: if (rf == 1) {
 21111  2602  0871               	movf	i1RfPointSelect@rf,w
 21112  2603  3A01               	xorlw	1
 21113  2604  1D03               	skipz
 21114  2605  0008               	return
 21115                           
 21116                           ;RF_Control_B1.c: 10: RF = &RF1;
 21117  2606  30E4               	movlw	_RF1& (0+255)
 21118  2607  00F0               	movwf	??i1_RfPointSelect
 21119  2608  0870               	movf	??i1_RfPointSelect,w
 21120  2609  0021               	movlb	1	; select bank1
 21121  260A  00BE               	movwf	_RF^(0+128)
 21122  260B  0008               	return
 21123  260C                     __end_ofi1_RfPointSelect:	
 21124  007E                     btemp	set	126	;btemp
 21125  007E                     pic14e$flags	set	126
 21126  007E                     wtemp	set	126
 21127  007E                     wtemp0	set	126
 21128  0080                     wtemp1	set	128
 21129  0082                     wtemp2	set	130
 21130  0084                     wtemp3	set	132
 21131  0086                     wtemp4	set	134
 21132  0088                     wtemp5	set	136
 21133  007F                     wtemp6	set	127
 21134  007E                     ttemp	set	126
 21135  007E                     ttemp0	set	126
 21136  0081                     ttemp1	set	129
 21137  0084                     ttemp2	set	132
 21138  0087                     ttemp3	set	135
 21139  007F                     ttemp4	set	127
 21140  007E                     ltemp	set	126
 21141  007E                     ltemp0	set	126
 21142  0082                     ltemp1	set	130
 21143  0086                     ltemp2	set	134
 21144  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         262
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     80      80
    BANK1            80      0      78
    BANK2            80      0      75
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK2[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  109273
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21597
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21597
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8883
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29119
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29119
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28115
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26498
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10564
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     849
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     183      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     183      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Oct 05 19:34:14 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _PF 00BD                                       _RD 0CA8  
                                     _RF 00BE                  __end_of_CC2500_WriteREG 1912  
                                     _WR 0CA9                                       _Sw 0079  
     __end_of_getDimmerLights_StatusFlag 26B9               _getDimmerLights_StatusFlag 26AD  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 1254  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1C78  
                   _setDimmerLights_Main 160D                             ___ftadd@sign 0048  
                                    l304 1C3B                                      l307 1C41  
                                    l271 1E12                                      l280 1E44  
                                    l337 18EC                                      l361 2766  
                                    l338 18EE                                      l291 1326  
                                    l276 1E3C                                      l373 1AC4  
                                    l349 1901                                      l277 1E41  
                                    l367 196A                                      l287 1315  
                                    l815 1174                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000C  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 0163                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00BC                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00E4  
                                    _ISR 0004                                      _WDT 00EC  
        setPowerFault_Exceptions@command 002C                                      _Sw1 015A  
                                    _Buz 00B7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 18F9           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 2665                          __end_of_ADC_Set 25D6  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 09C6  
                  _setDimmerLights_ERROR 1092                    _setDimmerLights_AdjRF 1A78  
                  _setDimmerLights_AdjGo 27AE                  __size_of_setTemp_Enable 000B  
                  _setDimmerLights_Clear 278E                                     ?_ISR 0070  
                        _PowerFault_Main 2576                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1ABF                               Load_Main@i 0031  
                           ___ftdiv@sign 003D                                     l2024 0FF7  
                                   l2028 102B                                     l1351 18BC  
                                   l2250 1F1B                 ?_DimmerLightsPointSelect 0070  
                                   l3152 12E5                                     l1377 1CA2  
                                   l1563 1F9B                          __end_of_IOC_Set 2704  
                                   l3181 0D94                                     l2277 1DB1  
                                   l3158 12FC                                     l6010 1B99  
                                   l6012 1B9B                                     l6020 1BA4  
                                   l1764 1F51                                     l2637 25A3  
                                   l6014 1B9D                                     l6022 1BB8  
                                   l6006 1B95                                     l6016 1B9F  
                                   l6008 1B97                                     l6050 1A4B  
                                   l6046 1A40                                     l7034 1D79  
                                   l6162 122D                                     l8100 19B8  
                                   l6412 1D9F                                     l6164 123A  
                                   l7038 1D80                                     l6158 1227  
                                   l2991 19BE                                     l8120 085A  
                                   l8200 127A                                     l6168 1246  
                                   l5810 0D4D                                     l6258 1CE8  
                                   l8124 087E                                     l8220 12A2  
                                   l8204 1280                                     l9012 0FA5  
                                   l5820 0D6F                                     l5900 0C58  
                                   l7510 0789                                     l5750 12D1  
                                   l5742 12BB                                     l6294 19A8  
                                   l5830 0D90                                     l5822 0D73  
                                   l9110 04C4                                     l8152 13D2  
                                   l8216 129C                                     l8224 12A8  
                                   l8208 1286                                     l9024 0FE5  
                                   l9016 0FC8                                     l6296 19AE  
                                   l5816 0D60                                     l7522 07C3  
                                   l5746 12C2                                     l8234 1CC4  
                                   l8170 1C63                                     l9026 0FEB  
                                   l5834 0DA6                                     l5818 0D6A  
                                   l5930 0CC5                                     l5922 0CB1  
                                   l5906 0C6E                                     l8330 08F9  
                                   l8314 08BF                                     l7516 07B5  
                                   l8500 1AD5                                     l5756 12EA  
                                   l5748 12CC                                     l7460 1D19  
                                   l6556 1E24                                     l5828 0D86  
                                   l8324 08E3                                     l9044 0947  
                                   l7518 07BB                                     l8502 1AE0  
                                   l5758 12F2                                     l5950 1792  
                                   l8190 126A                                     l8238 1CCF  
                                   l8174 1C6D                                     l7462 1D25  
                                   l5838 0DB8                                     l5934 0CCD  
                                   l5918 0CA9                                     l9070 098C  
                                   l9150 0570                                     l9126 04F9  
                                   l5776 1A1D                                     l5864 0BC5  
                                   l8512 1DDC                                     l9232 0E64  
                                   l7472 1D40                                     l8360 116B  
                                   l5848 0DD3                                     l5792 0D24  
                                   l9072 0990                                     l9048 0950  
                                   l9136 052B                                     l9160 05A3  
                                   l9320 0AED                                     l9304 0AAE  
                                   l5858 0BAF                                     l5970 17D0  
                                   l8186 1264                                     l8194 1270  
                                   l8362 1170                                     l8442 1518  
                                   l9058 0970                                     l5980 17E9  
                                   l8276 0A30                                     l7468 1D37  
                                   l8356 1158                                     l5788 0D1D  
                                   l8436 14FD                                     l8604 105C  
                                   l9308 0AB6                                     l5886 0C1F  
                                   l5878 0C06                                     l9422 0290  
                                   l9406 023E                                     l9414 0277  
                                   l9350 00C7                                     l9334 007A  
                                   l5798 0D33                                     l8446 1521  
                                   l9086 09BB                                     l5984 17F7  
                                   l5976 17DD                                     l5968 17C2  
                                   l8536 1C86                                     l9416 027A  
                                   l8616 1072                                     l8704 1576  
                                   l9512 1773                                     l9504 1747  
                                   l9520 15C2                                     l5978 17E6  
                                   l9370 018A                                     l8474 1338  
                                   l8804 164D                                     l9276 1E8C  
                                   l9428 02A2                                     l9356 00F5  
                                   l8476 1350                                     l8580 1F48  
                                   l9524 15D8                    _myMain_Initialization 1874  
                                   l8806 1656                                     l8670 112F  
                                   l8816 167C                                     l9376 01A6  
                                   l8488 1369                                     l9394 020E  
                                   l9378 01BE                                     l8930 0644  
                                   l9298 0A7D                                     l9458 1425  
                                   l9388 01F5                                     l8880 1454  
                                   l8952 06AA                                     l8928 063B  
                                   _CFGS 0CAE                                     l8890 14B4  
                                   l8962 06D8                                     l8964 06DE  
                                   l8798 163A                                     l8886 146D  
                                   l8990 0F2B                                     l8992 0F36  
                                   l8968 06E9                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 2665                                     _LATC 010E  
                                   u4105 0C20                                     u4215 0CCE  
                                   u4065 0BD7                                     u4225 0CD4  
                                   u4145 0C7A                                     u4075 0BE7  
                                   u4315 17DE                                     u4155 0C8A  
                                   u4085 0C07                                     u4095 0C16  
                                   u4255 1799                                     u4175 0CB2  
                                   u4185 0CB8                                     u3715 12C7  
                                   _PEIE 005E                                     u4285 17C3  
                                   _INTE 005C                                     _INTF 0059  
                                   u3735 12E0                                     u3905 0D4E  
                                   u3755 12ED                                     u3935 0D61  
                                   u3785 1303                                     u6355 1D1C  
                                   u3965 0D74                                     u6375 1D26  
                                   u6465 0745                                     u6385 1D30  
                                   u7450 1381                                     u6395 1D38  
                                   u3995 0D87                                     u9045 0A98  
                                   u7455 137F                                     u9215 01D6  
                                   u7385 19BF                                     u7395 19C4  
                                   u9165 0141                                     u9085 0AD9  
                                   u9335 1414                                     u9345 143D  
                                   u7690 25F6                                     u7925 1ACA  
                                   u9365 1FEE                                     u9385 1716  
                                   u9395 175D                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                                   u8995 1E73                          __end_of_INT_Set 25AE  
                                   _RSSI 00C0                                     _WREN 0CAA  
                                   _Buz1 014E                                     __WDT 00E7  
                                   _Load 007B                                     _Temp 007A  
                                   _main 159B                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 2576                      __end_of_DlyOff_Main 16FC  
                        __end_of_RF_Main 259F                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 18E0                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 2704  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1000  
                    DelayTimejudge@value 0021                            _RfPointSelect 2695  
             __end_of_setRFSW_AdjControl 1DC7                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 011D                                    ??_ISR 0076  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 26DD                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 18B2  
                                  ?_main 006C                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0DEB                          __end_of___ftdiv 0C41  
                        __end_of___ftmul 0CF5                          __end_of___fttol 1800  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1D47                   _setDimmerLights_Switch 276E  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E9  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0030                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                                    _Load1 0220  
                          __CFG_WRT$HALF 0000                                    _Temp1 0140  
                       __end_of_TMR0_ISR 04AE             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1874                                    _getAD 18B2  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 119D  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                        __end_of_my_Main 1779                           _setLoad_Enable 27CE  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1998              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 27EF                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1377  
            __size_of_Flash_Memory_Write 0031                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 119D  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 2643                        ??_setPercentValue 0059  
                           __end_of_main 160D                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 2597                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0A5C  
                   _setSw_Initialization 279E               __size_of_setLoad_StatusOff 0031  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 14BC  
                 ?_Buzzer_Initialization 0070                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 2579                               _Receive_OK 03E0  
                              ??_IOC_ISR 0070                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 2622  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 27DE                     __end_of_getTemp_Safe 25CF  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 1683  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0070                        ?_getPowerFault_AD 0070  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1A34                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1313                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 277E                                   i1l1319 049E  
                                 i1l7630 03C8                                   i1l7622 03A6  
                                 i1l7616 038D                                   i1l7624 03AC  
                                 i1l7634 03DF                                   i1l7618 0393  
                                 i1l7484 1C02                                   i1l7644 040E  
                                 i1l7574 1AB5                                   i1l7646 0414  
                                 i1l7638 03F3                                   i1l7488 1C0C  
                                 i1l7658 0449                                   i1l7668 047F  
                                 i1l7598 0343                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                       __size_of_Load_Main 029D  
                                 u658_25 0326                                   u675_25 0474  
                                 u676_25 0491                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 0800  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 25BA           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 189D                                   _Dimmer 00BA  
                                 _DlySw1 00D0              __size_of_setLoad_Exceptions 004A  
             __end_of_Mcu_Initialization 1961                      __end_of_Buzzer_Main 07D4  
                                 _Memory 00EA                                   _Timer0 00EB  
     __end_of_setDimmerLights_TriggerAdj 27CE               _setDimmerLights_TriggerAdj 27BE  
          setDimmerLights_Switch@command 0022                                   ___wmul 19B5  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
                        i1_RfPointSelect 2601              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 1254  
                                 _myMain 00ED                         _DimmerLightsIntr 00BB  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 0819                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 26F7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002A  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 262D  
                        ?_setLoad_Enable 0070                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                           _setTemp_Enable 264E  
                        _RfSWPointSelect 2689             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 25A3                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 11F8         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 2800    __size_of_setPowerFault_Initialization 0011  
           _setPowerFault_Initialization 27EF                  __end_of__initialization 0049  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 19F2  
                          __end_of_getAD 18C8                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 26C5  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005B  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02EA  
                       ?_PowerFault_Main 0070                 __end_of_setDimmerReClock 2713  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 2659                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 0078  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 2579  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002B  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 071B                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 257F                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 258B  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 25E6  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0077                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 260C                      i1_setLoad_StatusOff 1BE7  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000F                              setBuz@count 0029  
                             __pmaintext 159B                      _CC2500_WriteCommand 275E  
                   ?_Temp_Initialization 0070         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0072  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             _getLoad_AD 0A5C                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A6                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 25CF  
              _PowerFault_Initialization 2573                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13E2                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 25DD                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1D87  
                __end_of_RfSWPointSelect 2695                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1A9A  
                        ?_setTemp_Enable 0070                                  _IOC_Set 26F7  
                   __size_of_setLog_Code 0048                                  _INT_ISR 2659  
                                _INT_Set 25A8                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E4F                        _Flash_Memory_Read 1912  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2638                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 259B  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 18C8          __end_of_setControl_Lights_Table 152A  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 10E9                          _setPercentValue 1E94  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0070                                  _Dimmer1 00E1  
           __end_of_CC2500_FrequencyCabr 267D                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D9                                  _VarLED2 00DD  
                      __end_of_getRxData 1092               __end_of_setPowerFault_Main 1000  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 278E  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 25C8  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 277E  
                                ___ftadd 0CF5                           ??_setSw_Enable 0022  
                                ___ftdiv 0B98                          __size_of___wmul 001E  
                                ___ftmul 0C41                                  ___fttol 1779  
                    __end_of_Switch_Main 25A3                                  ___lwdiv 1D10  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                                __myMain 0120                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0089                           ??_setSw_Status 0023  
                                __ptext1 16FC                                  __ptext2 264E  
                                __ptext3 27CE                                  __ptext4 1874  
                                __ptext5 13E2                                  __ptext6 1FB5  
                                __ptext7 0A5C                                  __ptext8 18B2  
                                __ptext9 197C                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0071                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1E94                __end_of_Flash_Memory_Read 192B  
                             _setRF_Main 0932                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 258F                        _DimmerLights_Main 25C1  
                                _my_Main 16FC                        __end_of_setINT_GO 25F8  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 2617                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 2583                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 2587            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 1A34  
                    _DelayOffPointSelect 267D                                  clrloop0 25B5  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 2601  
                   end_of_initialization 0049                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 262D                        _CC2500_InitSetREG 1B0D  
                          _DelayTime_1us 1ABF                        __end_of_setTxData 0B98  
             __end_of_Flash_Memory_Write 1CA9                                  init_ram 25AE  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 25AF  
                             _setSw_Main 04AE                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1961                              ?_getPF_Safe 0070  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 27DE                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 1313  
                          _CC2500_TxData 1E0B                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B8E           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 004B  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 144E                  _DimmerLights_Exceptions 1142  
                            ?_getLoad_AD 0070                             __pstringtext 1800  
                    _Flash_Memory_Unlock 25DD                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070                         _setLoad_StatusOn 1CA9  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 25C8  
                     _Mcu_Initialization 1946                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4800 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1A56  
                __end_of_Sw_DimmerOnFunc 1142                  __end_of_setPercentValue 1EDA  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1B37  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 1045  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1DC7  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 197C  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 1FB5  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 0819  
                   _setRF_Initialization 25D6                              _Switch_Main 259F  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 2617                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1888                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 002C  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 19D3  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0076                           __end_of_setLED 12B2  
                         __end_of_setBuz 08A2                            _setLoad_Count 189D  
                   _CC2500_FrequencyCabr 2671                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 08A2                        __size_of_WDT_Main 001C  
                    __size_of_getPF_Safe 0009                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1CDB  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1946  
                              _Load_Main 004D                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0070                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 19F2          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 071B                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 2740  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D5                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 2731  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                i1setLoad_StatusOff@lights 0071  
                              _VarMemory 01A0                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 26A1                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C7                                _Temp_Main 257C  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00C3                              __pdataBANK3 01C5  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 0028  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 2587  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 1D10  
                  ?_CC2500_FrequencyCabr 0070                         setINT_GO@command 0020  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$3971 006B                              __pbssCOMMON 0077  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0096                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1F22                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0131  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1A78                  __size_of_setRF_RxStatus 000F  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00EA  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0094  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 2643  
                       _getPowerFault_AD 1FB5        __size_of_setPowerFault_Exceptions 0045  
    __end_of_Flash_Memory_Initialization 0EE3              _Flash_Memory_Initialization 0DEB  
              ?_setPowerFault_Exceptions 0070                                __ptext100 26A1  
                              __ptext101 1BBA                                __ptext110 1E94  
                              __ptext102 25BA                                __ptext111 1779  
                              __ptext103 258F                                __ptext120 0819  
                              __ptext112 0B98                                __ptext104 1683  
                              __ptext121 19B5                                __ptext113 1A12  
                              __ptext105 0AF2                                __ptext130 18F9  
                              __ptext122 258B                                __ptext114 12B2  
                              __ptext106 2695                                __ptext131 2671  
                              __ptext123 260C                                __ptext115 2713  
                              __ptext107 2722                                __ptext140 02EA  
                              __ptext132 1ABF                                __ptext124 267D  
                              __ptext116 2689                                __ptext108 2622  
                              __ptext141 1BE7                                __ptext133 2583  
                              __ptext125 1888                                __ptext117 277E  
                              __ptext109 1377                                 ?___ftadd 003E  
                              __ptext142 1A9A                                __ptext134 257F  
                              __ptext126 2587                                __ptext118 276E  
                              __ptext143 2704                                __ptext135 275E  
                              __ptext127 1C17                                __ptext119 2617  
                              __ptext144 2659                                __ptext136 18E0  
                              __ptext128 1B0D                                __ptext145 26DD  
                              __ptext137 071B                                __ptext129 19D3  
                              __ptext146 2601                                __ptext138 2665  
                              _getRxData 1045                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0932  
                        _setRF_ReceiveGO 26DD                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 2671                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 25A8                       _setPowerFault_Main 0EE3  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 014A            __end_of_setDimmerLights_ERROR 10E9  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1A9A  
          __end_of_setDimmerLights_AdjGo 27BE                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010                                 ?_my_Main 0070  
          __end_of_setDimmerLights_Clear 279E                                _r_address 00C4  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1866  
          __end_of_myMain_Initialization 1888                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0016                             _setRF_Enable 1B62  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 2622                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 25EF                      __end_of_setLED_Main 1D87  
               __end_of_setLoad_StatusOn 1CDB                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 257C                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 26D1  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 25B4                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0AF2      __end_of_DimmerLights_Initialization 26AD  
            _DimmerLights_Initialization 26A1                       _CC2500_ClearRXFIFO 257F  
                     _CC2500_ClearTXFIFO 2583           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 275E                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1C78                               ?_getRxData 0070  
                               _TMR0_ISR 02EA                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1C17                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1867                         _Sw_DimmerAdjFunc 07D4  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1B0D  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 276E  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 197C  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 152A  
                  __size_of_setTemp_Main 0123                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 000F                                 _DelayOff 00B9  
                           setSw_Main@sw 0068                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 25EF                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 26C5  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1F22  
                  _DlyOff_Initialization 260C                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0070                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                                 _Fosc_Set 2593  
                       __size_of_WDT_Set 0018                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0AF2                    _Switch_Initialization 25F8  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 2713                     __size_of_Buzzer_Main 00B9  
                     __end_of_getTemp_AD 144E                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 18E0  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 26EA                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 0063  
                    _Load_Initialization 26EA                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1B62    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1B37                             _setTemp_Main 05F8  
                     _setLoad_Exceptions 1F6B                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 2731                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000B                                 ___awtoft 1A12  
                       ??_LedPointSelect 0020                                 ___ftpack 12B2  
                           _setSw_Status 2722                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1D47                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 13E2  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 007D  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 0002                                 __ptext11 257C  
                               __ptext20 152A                                 __ptext12 05F8  
                               __ptext21 07D4                                 __ptext13 1F22  
                               __ptext30 1EDA                                 __ptext22 27BE  
                               __ptext14 2579                                 __ptext31 14BC  
                               __ptext23 27AE                                 __ptext15 2643  
                               __ptext40 0CF5                                 __ptext32 08A2  
                               __ptext24 25F8                                 __ptext16 259F  
                               __ptext41 1AE5                                 __ptext33 11F8  
                               __ptext25 279E                                 __ptext17 04AE  
                               __ptext50 0EE3                                 __ptext42 1E0B  
                               __ptext34 1B8E                                 __ptext26 25A3  
                               __ptext18 274F                                 __ptext51 1000  
                               __ptext43 1313                                 __ptext35 1D87  
                               __ptext27 259B                                 __ptext19 10E9  
                               __ptext60 25A8                                 __ptext52 2638  
                               __ptext44 2740                                 __ptext36 1CDB  
                               __ptext28 0932                                 __ptext61 2593  
                               __ptext53 2573                                 __ptext45 1961  
                               __ptext37 1A78                                 __ptext29 1045  
                               __ptext70 1092                                 __ptext62 25CF  
                               __ptext54 27EF                                 __ptext46 1998  
                               __ptext38 119D                                 __ptext71 278E  
                               __ptext63 004D                                 __ptext55 1946  
                               __ptext47 2597                                 __ptext39 0C41  
                               __ptext80 27DE                                 __ptext72 25C8  
                               __ptext64 1F6B                                 __ptext56 18C8  
                               __ptext48 25D6                                 __ptext81 1E4F  
                               __ptext73 25E6                                 __ptext65 2731  
                               __ptext57 1867                                 __ptext49 2576  
                               __ptext90 1DC7                                 __ptext82 144E  
                               __ptext74 1D10                                 __ptext66 1B62  
                               __ptext58 0800                                 __ptext91 1C47  
                               __ptext83 26B9                                 __ptext75 26EA  
                               __ptext67 25EF                                 __ptext59 26F7  
                               __ptext92 09C6                                 __ptext84 0DEB  
                               __ptext76 1A56                                 __ptext68 1142  
                               __ptext93 1CA9                                 __ptext85 1C78  
                               __ptext77 26D1                                 __ptext69 1B37  
                               __ptext94 189D                                 __ptext86 25DD  
                               __ptext78 1D47                                 __ptext95 1254  
                               __ptext87 1912                                 __ptext79 26C5  
                               __ptext96 1A34                                 __ptext88 25C1  
                               __ptext97 192B                                 __ptext89 160D  
                               __ptext98 262D                                 __ptext99 26AD  
                               __product 01C5                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 2722  
          __end_of_Dimmer_Initialization 25C1             __end_of_setDimmerLights_Main 1683  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0072  
                            _setRF_Learn 274F                 __end_of_CC2500_SIDLEMode 258B  
                         _setRF_RxStatus 2740               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 2689               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 192B                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000F                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 1998                       _CC2500_InitPATable 19D3  
    __size_of_getDimmerLights_StatusFlag 000C            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 09C6              __size_of_Mcu_Initialization 001B  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006C            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1C17                       __end_of_setLoad_GO 2638  
            __end_of_Flash_Memory_Modify 14BC                        ??_getPercentValue 0059  
                            _setLog_Code 1EDA                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 25E6                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 18F9                       __end_of_setSw_Main 05F8  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1B8E                            ?_getLoad_Safe 0070  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 2000  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 274F                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1BE7  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1BBA  
            __end_of_setDimmerLights_Adj 1E0B                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0072  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 0028  
                      _RF_Initialization 2597                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 26B9                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00C2          __end_of_DelayOff_Initialization 258F  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 2593                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 11F8  
       __size_of_setControl_Lights_Table 006E                        _setLoad_StatusOff 1C47  
                 __end_of_DelayTimejudge 1BBA           __end_of_setOverTemp_Exceptions 1F6B  
                 __size_of_RfPointSelect 000C                        ??i1_RfPointSelect 0070  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1AE5                 __end_of_Sw_DimmerAdjFunc 0800  
                __end_of_CC2500_ReadByte 19B5             __end_of_setSw_Initialization 27AE  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1AE5               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 26D1         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 264E  
               __size_of_Sw_DimmerOnFunc 0059                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 259B  
               __end_of_Sw_DimmerOffFunc 159B                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1377  
                  __end_of_CC2500_TxData 1E4F                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1A56                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1C47  
