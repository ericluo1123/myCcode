

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 15 14:05:31 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  011D                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  018E                     	;# 
   197  0191                     	;# 
   198  0191                     	;# 
   199  0192                     	;# 
   200  0193                     	;# 
   201  0193                     	;# 
   202  0194                     	;# 
   203  0195                     	;# 
   204  0196                     	;# 
   205  0197                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019E                     	;# 
   216  019F                     	;# 
   217  020D                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0291                     	;# 
   235  0291                     	;# 
   236  0292                     	;# 
   237  0293                     	;# 
   238  0298                     	;# 
   239  0298                     	;# 
   240  0299                     	;# 
   241  029A                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  0010                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0015                     	;# 
   275  0016                     	;# 
   276  0016                     	;# 
   277  0017                     	;# 
   278  0018                     	;# 
   279  0019                     	;# 
   280  001A                     	;# 
   281  001B                     	;# 
   282  001C                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  008E                     	;# 
   286  0090                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  010E                     	;# 
   302  0116                     	;# 
   303  0117                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0197                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019C                     	;# 
   324  019C                     	;# 
   325  019D                     	;# 
   326  019E                     	;# 
   327  019F                     	;# 
   328  020D                     	;# 
   329  0210                     	;# 
   330  0211                     	;# 
   331  0211                     	;# 
   332  0212                     	;# 
   333  0212                     	;# 
   334  0213                     	;# 
   335  0213                     	;# 
   336  0214                     	;# 
   337  0214                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0216                     	;# 
   342  0216                     	;# 
   343  0217                     	;# 
   344  0217                     	;# 
   345  0291                     	;# 
   346  0291                     	;# 
   347  0292                     	;# 
   348  0293                     	;# 
   349  0298                     	;# 
   350  0298                     	;# 
   351  0299                     	;# 
   352  029A                     	;# 
   353  0394                     	;# 
   354  0395                     	;# 
   355  0396                     	;# 
   356  0FE4                     	;# 
   357  0FE5                     	;# 
   358  0FE6                     	;# 
   359  0FE7                     	;# 
   360  0FE8                     	;# 
   361  0FE9                     	;# 
   362  0FEA                     	;# 
   363  0FEB                     	;# 
   364  0FED                     	;# 
   365  0FEE                     	;# 
   366  0FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  0116                     	;# 
   414  0117                     	;# 
   415  011D                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  0191                     	;# 
   420  0191                     	;# 
   421  0192                     	;# 
   422  0193                     	;# 
   423  0193                     	;# 
   424  0194                     	;# 
   425  0195                     	;# 
   426  0196                     	;# 
   427  0197                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019C                     	;# 
   435  019C                     	;# 
   436  019D                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  020D                     	;# 
   440  0210                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0216                     	;# 
   453  0216                     	;# 
   454  0217                     	;# 
   455  0217                     	;# 
   456  0291                     	;# 
   457  0291                     	;# 
   458  0292                     	;# 
   459  0293                     	;# 
   460  0298                     	;# 
   461  0298                     	;# 
   462  0299                     	;# 
   463  029A                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  0FE4                     	;# 
   468  0FE5                     	;# 
   469  0FE6                     	;# 
   470  0FE7                     	;# 
   471  0FE8                     	;# 
   472  0FE9                     	;# 
   473  0FEA                     	;# 
   474  0FEB                     	;# 
   475  0FED                     	;# 
   476  0FEE                     	;# 
   477  0FEF                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0008                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0015                     	;# 
   497  0016                     	;# 
   498  0016                     	;# 
   499  0017                     	;# 
   500  0018                     	;# 
   501  0019                     	;# 
   502  001A                     	;# 
   503  001B                     	;# 
   504  001C                     	;# 
   505  008C                     	;# 
   506  008D                     	;# 
   507  008E                     	;# 
   508  0090                     	;# 
   509  0091                     	;# 
   510  0092                     	;# 
   511  0095                     	;# 
   512  0096                     	;# 
   513  0097                     	;# 
   514  0099                     	;# 
   515  009A                     	;# 
   516  009B                     	;# 
   517  009B                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  010C                     	;# 
   522  010D                     	;# 
   523  010E                     	;# 
   524  0116                     	;# 
   525  0117                     	;# 
   526  011D                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529  018E                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0194                     	;# 
   536  0195                     	;# 
   537  0196                     	;# 
   538  0197                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019C                     	;# 
   546  019C                     	;# 
   547  019D                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  020D                     	;# 
   551  0210                     	;# 
   552  0211                     	;# 
   553  0211                     	;# 
   554  0212                     	;# 
   555  0212                     	;# 
   556  0213                     	;# 
   557  0213                     	;# 
   558  0214                     	;# 
   559  0214                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0216                     	;# 
   564  0216                     	;# 
   565  0217                     	;# 
   566  0217                     	;# 
   567  0291                     	;# 
   568  0291                     	;# 
   569  0292                     	;# 
   570  0293                     	;# 
   571  0298                     	;# 
   572  0298                     	;# 
   573  0299                     	;# 
   574  029A                     	;# 
   575  0394                     	;# 
   576  0395                     	;# 
   577  0396                     	;# 
   578  0FE4                     	;# 
   579  0FE5                     	;# 
   580  0FE6                     	;# 
   581  0FE7                     	;# 
   582  0FE8                     	;# 
   583  0FE9                     	;# 
   584  0FEA                     	;# 
   585  0FEB                     	;# 
   586  0FED                     	;# 
   587  0FEE                     	;# 
   588  0FEF                     	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  0010                     	;# 
   605  0011                     	;# 
   606  0012                     	;# 
   607  0015                     	;# 
   608  0016                     	;# 
   609  0016                     	;# 
   610  0017                     	;# 
   611  0018                     	;# 
   612  0019                     	;# 
   613  001A                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0092                     	;# 
   622  0095                     	;# 
   623  0096                     	;# 
   624  0097                     	;# 
   625  0099                     	;# 
   626  009A                     	;# 
   627  009B                     	;# 
   628  009B                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009E                     	;# 
   632  010C                     	;# 
   633  010D                     	;# 
   634  010E                     	;# 
   635  0116                     	;# 
   636  0117                     	;# 
   637  011D                     	;# 
   638  018C                     	;# 
   639  018D                     	;# 
   640  018E                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0197                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019D                     	;# 
   659  019E                     	;# 
   660  019F                     	;# 
   661  020D                     	;# 
   662  0210                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  0394                     	;# 
   687  0395                     	;# 
   688  0396                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001C                     	;# 
   727  008C                     	;# 
   728  008D                     	;# 
   729  008E                     	;# 
   730  0090                     	;# 
   731  0091                     	;# 
   732  0092                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009B                     	;# 
   740  009C                     	;# 
   741  009D                     	;# 
   742  009E                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  011D                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  018E                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0197                     	;# 
   761  0199                     	;# 
   762  019A                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019C                     	;# 
   768  019C                     	;# 
   769  019D                     	;# 
   770  019E                     	;# 
   771  019F                     	;# 
   772  020D                     	;# 
   773  0210                     	;# 
   774  0211                     	;# 
   775  0211                     	;# 
   776  0212                     	;# 
   777  0212                     	;# 
   778  0213                     	;# 
   779  0213                     	;# 
   780  0214                     	;# 
   781  0214                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0216                     	;# 
   786  0216                     	;# 
   787  0217                     	;# 
   788  0217                     	;# 
   789  0291                     	;# 
   790  0291                     	;# 
   791  0292                     	;# 
   792  0293                     	;# 
   793  0298                     	;# 
   794  0298                     	;# 
   795  0299                     	;# 
   796  029A                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0010                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  0090                     	;# 
   842  0091                     	;# 
   843  0092                     	;# 
   844  0095                     	;# 
   845  0096                     	;# 
   846  0097                     	;# 
   847  0099                     	;# 
   848  009A                     	;# 
   849  009B                     	;# 
   850  009B                     	;# 
   851  009C                     	;# 
   852  009D                     	;# 
   853  009E                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  011D                     	;# 
   860  018C                     	;# 
   861  018D                     	;# 
   862  018E                     	;# 
   863  0191                     	;# 
   864  0191                     	;# 
   865  0192                     	;# 
   866  0193                     	;# 
   867  0193                     	;# 
   868  0194                     	;# 
   869  0195                     	;# 
   870  0196                     	;# 
   871  0197                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019C                     	;# 
   879  019C                     	;# 
   880  019D                     	;# 
   881  019E                     	;# 
   882  019F                     	;# 
   883  020D                     	;# 
   884  0210                     	;# 
   885  0211                     	;# 
   886  0211                     	;# 
   887  0212                     	;# 
   888  0212                     	;# 
   889  0213                     	;# 
   890  0213                     	;# 
   891  0214                     	;# 
   892  0214                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0216                     	;# 
   897  0216                     	;# 
   898  0217                     	;# 
   899  0217                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  0FE4                     	;# 
   912  0FE5                     	;# 
   913  0FE6                     	;# 
   914  0FE7                     	;# 
   915  0FE8                     	;# 
   916  0FE9                     	;# 
   917  0FEA                     	;# 
   918  0FEB                     	;# 
   919  0FED                     	;# 
   920  0FEE                     	;# 
   921  0FEF                     	;# 
   922  0000                     	;# 
   923  0001                     	;# 
   924  0002                     	;# 
   925  0003                     	;# 
   926  0004                     	;# 
   927  0005                     	;# 
   928  0006                     	;# 
   929  0007                     	;# 
   930  0008                     	;# 
   931  0009                     	;# 
   932  000A                     	;# 
   933  000B                     	;# 
   934  000C                     	;# 
   935  000D                     	;# 
   936  000E                     	;# 
   937  0010                     	;# 
   938  0011                     	;# 
   939  0012                     	;# 
   940  0015                     	;# 
   941  0016                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001C                     	;# 
   949  008C                     	;# 
   950  008D                     	;# 
   951  008E                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0095                     	;# 
   956  0096                     	;# 
   957  0097                     	;# 
   958  0099                     	;# 
   959  009A                     	;# 
   960  009B                     	;# 
   961  009B                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009E                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010E                     	;# 
   968  0116                     	;# 
   969  0117                     	;# 
   970  011D                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  018E                     	;# 
   974  0191                     	;# 
   975  0191                     	;# 
   976  0192                     	;# 
   977  0193                     	;# 
   978  0193                     	;# 
   979  0194                     	;# 
   980  0195                     	;# 
   981  0196                     	;# 
   982  0197                     	;# 
   983  0199                     	;# 
   984  019A                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019C                     	;# 
   990  019C                     	;# 
   991  019D                     	;# 
   992  019E                     	;# 
   993  019F                     	;# 
   994  020D                     	;# 
   995  0210                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  0212                     	;# 
   999  0212                     	;# 
  1000  0213                     	;# 
  1001  0213                     	;# 
  1002  0214                     	;# 
  1003  0214                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0216                     	;# 
  1008  0216                     	;# 
  1009  0217                     	;# 
  1010  0217                     	;# 
  1011  0291                     	;# 
  1012  0291                     	;# 
  1013  0292                     	;# 
  1014  0293                     	;# 
  1015  0298                     	;# 
  1016  0298                     	;# 
  1017  0299                     	;# 
  1018  029A                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0FE4                     	;# 
  1023  0FE5                     	;# 
  1024  0FE6                     	;# 
  1025  0FE7                     	;# 
  1026  0FE8                     	;# 
  1027  0FE9                     	;# 
  1028  0FEA                     	;# 
  1029  0FEB                     	;# 
  1030  0FED                     	;# 
  1031  0FEE                     	;# 
  1032  0FEF                     	;# 
  1033  0000                     	;# 
  1034  0001                     	;# 
  1035  0002                     	;# 
  1036  0003                     	;# 
  1037  0004                     	;# 
  1038  0005                     	;# 
  1039  0006                     	;# 
  1040  0007                     	;# 
  1041  0008                     	;# 
  1042  0009                     	;# 
  1043  000A                     	;# 
  1044  000B                     	;# 
  1045  000C                     	;# 
  1046  000D                     	;# 
  1047  000E                     	;# 
  1048  0010                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0015                     	;# 
  1052  0016                     	;# 
  1053  0016                     	;# 
  1054  0017                     	;# 
  1055  0018                     	;# 
  1056  0019                     	;# 
  1057  001A                     	;# 
  1058  001B                     	;# 
  1059  001C                     	;# 
  1060  008C                     	;# 
  1061  008D                     	;# 
  1062  008E                     	;# 
  1063  0090                     	;# 
  1064  0091                     	;# 
  1065  0092                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  010C                     	;# 
  1077  010D                     	;# 
  1078  010E                     	;# 
  1079  0116                     	;# 
  1080  0117                     	;# 
  1081  011D                     	;# 
  1082  018C                     	;# 
  1083  018D                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0194                     	;# 
  1091  0195                     	;# 
  1092  0196                     	;# 
  1093  0197                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  020D                     	;# 
  1106  0210                     	;# 
  1107  0211                     	;# 
  1108  0211                     	;# 
  1109  0212                     	;# 
  1110  0212                     	;# 
  1111  0213                     	;# 
  1112  0213                     	;# 
  1113  0214                     	;# 
  1114  0214                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0216                     	;# 
  1119  0216                     	;# 
  1120  0217                     	;# 
  1121  0217                     	;# 
  1122  0291                     	;# 
  1123  0291                     	;# 
  1124  0292                     	;# 
  1125  0293                     	;# 
  1126  0298                     	;# 
  1127  0298                     	;# 
  1128  0299                     	;# 
  1129  029A                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  0FE4                     	;# 
  1134  0FE5                     	;# 
  1135  0FE6                     	;# 
  1136  0FE7                     	;# 
  1137  0FE8                     	;# 
  1138  0FE9                     	;# 
  1139  0FEA                     	;# 
  1140  0FEB                     	;# 
  1141  0FED                     	;# 
  1142  0FEE                     	;# 
  1143  0FEF                     	;# 
  1144  0000                     	;# 
  1145  0001                     	;# 
  1146  0002                     	;# 
  1147  0003                     	;# 
  1148  0004                     	;# 
  1149  0005                     	;# 
  1150  0006                     	;# 
  1151  0007                     	;# 
  1152  0008                     	;# 
  1153  0009                     	;# 
  1154  000A                     	;# 
  1155  000B                     	;# 
  1156  000C                     	;# 
  1157  000D                     	;# 
  1158  000E                     	;# 
  1159  0010                     	;# 
  1160  0011                     	;# 
  1161  0012                     	;# 
  1162  0015                     	;# 
  1163  0016                     	;# 
  1164  0016                     	;# 
  1165  0017                     	;# 
  1166  0018                     	;# 
  1167  0019                     	;# 
  1168  001A                     	;# 
  1169  001B                     	;# 
  1170  001C                     	;# 
  1171  008C                     	;# 
  1172  008D                     	;# 
  1173  008E                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0092                     	;# 
  1177  0095                     	;# 
  1178  0096                     	;# 
  1179  0097                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009B                     	;# 
  1184  009C                     	;# 
  1185  009D                     	;# 
  1186  009E                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010E                     	;# 
  1190  0116                     	;# 
  1191  0117                     	;# 
  1192  011D                     	;# 
  1193  018C                     	;# 
  1194  018D                     	;# 
  1195  018E                     	;# 
  1196  0191                     	;# 
  1197  0191                     	;# 
  1198  0192                     	;# 
  1199  0193                     	;# 
  1200  0193                     	;# 
  1201  0194                     	;# 
  1202  0195                     	;# 
  1203  0196                     	;# 
  1204  0197                     	;# 
  1205  0199                     	;# 
  1206  019A                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019F                     	;# 
  1216  020D                     	;# 
  1217  0210                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0291                     	;# 
  1234  0291                     	;# 
  1235  0292                     	;# 
  1236  0293                     	;# 
  1237  0298                     	;# 
  1238  0298                     	;# 
  1239  0299                     	;# 
  1240  029A                     	;# 
  1241  0394                     	;# 
  1242  0395                     	;# 
  1243  0396                     	;# 
  1244  0FE4                     	;# 
  1245  0FE5                     	;# 
  1246  0FE6                     	;# 
  1247  0FE7                     	;# 
  1248  0FE8                     	;# 
  1249  0FE9                     	;# 
  1250  0FEA                     	;# 
  1251  0FEB                     	;# 
  1252  0FED                     	;# 
  1253  0FEE                     	;# 
  1254  0FEF                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0008                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000D                     	;# 
  1269  000E                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0015                     	;# 
  1274  0016                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001C                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  0090                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009B                     	;# 
  1295  009C                     	;# 
  1296  009D                     	;# 
  1297  009E                     	;# 
  1298  010C                     	;# 
  1299  010D                     	;# 
  1300  010E                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  011D                     	;# 
  1304  018C                     	;# 
  1305  018D                     	;# 
  1306  018E                     	;# 
  1307  0191                     	;# 
  1308  0191                     	;# 
  1309  0192                     	;# 
  1310  0193                     	;# 
  1311  0193                     	;# 
  1312  0194                     	;# 
  1313  0195                     	;# 
  1314  0196                     	;# 
  1315  0197                     	;# 
  1316  0199                     	;# 
  1317  019A                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019C                     	;# 
  1323  019C                     	;# 
  1324  019D                     	;# 
  1325  019E                     	;# 
  1326  019F                     	;# 
  1327  020D                     	;# 
  1328  0210                     	;# 
  1329  0211                     	;# 
  1330  0211                     	;# 
  1331  0212                     	;# 
  1332  0212                     	;# 
  1333  0213                     	;# 
  1334  0213                     	;# 
  1335  0214                     	;# 
  1336  0214                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0215                     	;# 
  1340  0216                     	;# 
  1341  0216                     	;# 
  1342  0217                     	;# 
  1343  0217                     	;# 
  1344  0291                     	;# 
  1345  0291                     	;# 
  1346  0292                     	;# 
  1347  0293                     	;# 
  1348  0298                     	;# 
  1349  0298                     	;# 
  1350  0299                     	;# 
  1351  029A                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  0FE4                     	;# 
  1356  0FE5                     	;# 
  1357  0FE6                     	;# 
  1358  0FE7                     	;# 
  1359  0FE8                     	;# 
  1360  0FE9                     	;# 
  1361  0FEA                     	;# 
  1362  0FEB                     	;# 
  1363  0FED                     	;# 
  1364  0FEE                     	;# 
  1365  0FEF                     	;# 
  1366  0000                     	;# 
  1367  0001                     	;# 
  1368  0002                     	;# 
  1369  0003                     	;# 
  1370  0004                     	;# 
  1371  0005                     	;# 
  1372  0006                     	;# 
  1373  0007                     	;# 
  1374  0008                     	;# 
  1375  0009                     	;# 
  1376  000A                     	;# 
  1377  000B                     	;# 
  1378  000C                     	;# 
  1379  000D                     	;# 
  1380  000E                     	;# 
  1381  0010                     	;# 
  1382  0011                     	;# 
  1383  0012                     	;# 
  1384  0015                     	;# 
  1385  0016                     	;# 
  1386  0016                     	;# 
  1387  0017                     	;# 
  1388  0018                     	;# 
  1389  0019                     	;# 
  1390  001A                     	;# 
  1391  001B                     	;# 
  1392  001C                     	;# 
  1393  008C                     	;# 
  1394  008D                     	;# 
  1395  008E                     	;# 
  1396  0090                     	;# 
  1397  0091                     	;# 
  1398  0092                     	;# 
  1399  0095                     	;# 
  1400  0096                     	;# 
  1401  0097                     	;# 
  1402  0099                     	;# 
  1403  009A                     	;# 
  1404  009B                     	;# 
  1405  009B                     	;# 
  1406  009C                     	;# 
  1407  009D                     	;# 
  1408  009E                     	;# 
  1409  010C                     	;# 
  1410  010D                     	;# 
  1411  010E                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  011D                     	;# 
  1415  018C                     	;# 
  1416  018D                     	;# 
  1417  018E                     	;# 
  1418  0191                     	;# 
  1419  0191                     	;# 
  1420  0192                     	;# 
  1421  0193                     	;# 
  1422  0193                     	;# 
  1423  0194                     	;# 
  1424  0195                     	;# 
  1425  0196                     	;# 
  1426  0197                     	;# 
  1427  0199                     	;# 
  1428  019A                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019C                     	;# 
  1434  019C                     	;# 
  1435  019D                     	;# 
  1436  019E                     	;# 
  1437  019F                     	;# 
  1438  020D                     	;# 
  1439  0210                     	;# 
  1440  0211                     	;# 
  1441  0211                     	;# 
  1442  0212                     	;# 
  1443  0212                     	;# 
  1444  0213                     	;# 
  1445  0213                     	;# 
  1446  0214                     	;# 
  1447  0214                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0216                     	;# 
  1452  0216                     	;# 
  1453  0217                     	;# 
  1454  0217                     	;# 
  1455  0291                     	;# 
  1456  0291                     	;# 
  1457  0292                     	;# 
  1458  0293                     	;# 
  1459  0298                     	;# 
  1460  0298                     	;# 
  1461  0299                     	;# 
  1462  029A                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477  0000                     	;# 
  1478  0001                     	;# 
  1479  0002                     	;# 
  1480  0003                     	;# 
  1481  0004                     	;# 
  1482  0005                     	;# 
  1483  0006                     	;# 
  1484  0007                     	;# 
  1485  0008                     	;# 
  1486  0009                     	;# 
  1487  000A                     	;# 
  1488  000B                     	;# 
  1489  000C                     	;# 
  1490  000D                     	;# 
  1491  000E                     	;# 
  1492  0010                     	;# 
  1493  0011                     	;# 
  1494  0012                     	;# 
  1495  0015                     	;# 
  1496  0016                     	;# 
  1497  0016                     	;# 
  1498  0017                     	;# 
  1499  0018                     	;# 
  1500  0019                     	;# 
  1501  001A                     	;# 
  1502  001B                     	;# 
  1503  001C                     	;# 
  1504  008C                     	;# 
  1505  008D                     	;# 
  1506  008E                     	;# 
  1507  0090                     	;# 
  1508  0091                     	;# 
  1509  0092                     	;# 
  1510  0095                     	;# 
  1511  0096                     	;# 
  1512  0097                     	;# 
  1513  0099                     	;# 
  1514  009A                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  010C                     	;# 
  1521  010D                     	;# 
  1522  010E                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  011D                     	;# 
  1526  018C                     	;# 
  1527  018D                     	;# 
  1528  018E                     	;# 
  1529  0191                     	;# 
  1530  0191                     	;# 
  1531  0192                     	;# 
  1532  0193                     	;# 
  1533  0193                     	;# 
  1534  0194                     	;# 
  1535  0195                     	;# 
  1536  0196                     	;# 
  1537  0197                     	;# 
  1538  0199                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019C                     	;# 
  1545  019C                     	;# 
  1546  019D                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  020D                     	;# 
  1550  0210                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0298                     	;# 
  1571  0298                     	;# 
  1572  0299                     	;# 
  1573  029A                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  0FE4                     	;# 
  1578  0FE5                     	;# 
  1579  0FE6                     	;# 
  1580  0FE7                     	;# 
  1581  0FE8                     	;# 
  1582  0FE9                     	;# 
  1583  0FEA                     	;# 
  1584  0FEB                     	;# 
  1585  0FED                     	;# 
  1586  0FEE                     	;# 
  1587  0FEF                     	;# 
  1588  0000                     	;# 
  1589  0001                     	;# 
  1590  0002                     	;# 
  1591  0003                     	;# 
  1592  0004                     	;# 
  1593  0005                     	;# 
  1594  0006                     	;# 
  1595  0007                     	;# 
  1596  0008                     	;# 
  1597  0009                     	;# 
  1598  000A                     	;# 
  1599  000B                     	;# 
  1600  000C                     	;# 
  1601  000D                     	;# 
  1602  000E                     	;# 
  1603  0010                     	;# 
  1604  0011                     	;# 
  1605  0012                     	;# 
  1606  0015                     	;# 
  1607  0016                     	;# 
  1608  0016                     	;# 
  1609  0017                     	;# 
  1610  0018                     	;# 
  1611  0019                     	;# 
  1612  001A                     	;# 
  1613  001B                     	;# 
  1614  001C                     	;# 
  1615  008C                     	;# 
  1616  008D                     	;# 
  1617  008E                     	;# 
  1618  0090                     	;# 
  1619  0091                     	;# 
  1620  0092                     	;# 
  1621  0095                     	;# 
  1622  0096                     	;# 
  1623  0097                     	;# 
  1624  0099                     	;# 
  1625  009A                     	;# 
  1626  009B                     	;# 
  1627  009B                     	;# 
  1628  009C                     	;# 
  1629  009D                     	;# 
  1630  009E                     	;# 
  1631  010C                     	;# 
  1632  010D                     	;# 
  1633  010E                     	;# 
  1634  0116                     	;# 
  1635  0117                     	;# 
  1636  011D                     	;# 
  1637  018C                     	;# 
  1638  018D                     	;# 
  1639  018E                     	;# 
  1640  0191                     	;# 
  1641  0191                     	;# 
  1642  0192                     	;# 
  1643  0193                     	;# 
  1644  0193                     	;# 
  1645  0194                     	;# 
  1646  0195                     	;# 
  1647  0196                     	;# 
  1648  0197                     	;# 
  1649  0199                     	;# 
  1650  019A                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019C                     	;# 
  1656  019C                     	;# 
  1657  019D                     	;# 
  1658  019E                     	;# 
  1659  019F                     	;# 
  1660  020D                     	;# 
  1661  0210                     	;# 
  1662  0211                     	;# 
  1663  0211                     	;# 
  1664  0212                     	;# 
  1665  0212                     	;# 
  1666  0213                     	;# 
  1667  0213                     	;# 
  1668  0214                     	;# 
  1669  0214                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0216                     	;# 
  1674  0216                     	;# 
  1675  0217                     	;# 
  1676  0217                     	;# 
  1677  0291                     	;# 
  1678  0291                     	;# 
  1679  0292                     	;# 
  1680  0293                     	;# 
  1681  0298                     	;# 
  1682  0298                     	;# 
  1683  0299                     	;# 
  1684  029A                     	;# 
  1685  0394                     	;# 
  1686  0395                     	;# 
  1687  0396                     	;# 
  1688  0FE4                     	;# 
  1689  0FE5                     	;# 
  1690  0FE6                     	;# 
  1691  0FE7                     	;# 
  1692  0FE8                     	;# 
  1693  0FE9                     	;# 
  1694  0FEA                     	;# 
  1695  0FEB                     	;# 
  1696  0FED                     	;# 
  1697  0FEE                     	;# 
  1698  0FEF                     	;# 
  1699  0000                     	;# 
  1700  0001                     	;# 
  1701  0002                     	;# 
  1702  0003                     	;# 
  1703  0004                     	;# 
  1704  0005                     	;# 
  1705  0006                     	;# 
  1706  0007                     	;# 
  1707  0008                     	;# 
  1708  0009                     	;# 
  1709  000A                     	;# 
  1710  000B                     	;# 
  1711  000C                     	;# 
  1712  000D                     	;# 
  1713  000E                     	;# 
  1714  0010                     	;# 
  1715  0011                     	;# 
  1716  0012                     	;# 
  1717  0015                     	;# 
  1718  0016                     	;# 
  1719  0016                     	;# 
  1720  0017                     	;# 
  1721  0018                     	;# 
  1722  0019                     	;# 
  1723  001A                     	;# 
  1724  001B                     	;# 
  1725  001C                     	;# 
  1726  008C                     	;# 
  1727  008D                     	;# 
  1728  008E                     	;# 
  1729  0090                     	;# 
  1730  0091                     	;# 
  1731  0092                     	;# 
  1732  0095                     	;# 
  1733  0096                     	;# 
  1734  0097                     	;# 
  1735  0099                     	;# 
  1736  009A                     	;# 
  1737  009B                     	;# 
  1738  009B                     	;# 
  1739  009C                     	;# 
  1740  009D                     	;# 
  1741  009E                     	;# 
  1742  010C                     	;# 
  1743  010D                     	;# 
  1744  010E                     	;# 
  1745  0116                     	;# 
  1746  0117                     	;# 
  1747  011D                     	;# 
  1748  018C                     	;# 
  1749  018D                     	;# 
  1750  018E                     	;# 
  1751  0191                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0193                     	;# 
  1755  0193                     	;# 
  1756  0194                     	;# 
  1757  0195                     	;# 
  1758  0196                     	;# 
  1759  0197                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019B                     	;# 
  1766  019C                     	;# 
  1767  019C                     	;# 
  1768  019D                     	;# 
  1769  019E                     	;# 
  1770  019F                     	;# 
  1771  020D                     	;# 
  1772  0210                     	;# 
  1773  0211                     	;# 
  1774  0211                     	;# 
  1775  0212                     	;# 
  1776  0212                     	;# 
  1777  0213                     	;# 
  1778  0213                     	;# 
  1779  0214                     	;# 
  1780  0214                     	;# 
  1781  0215                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  0394                     	;# 
  1797  0395                     	;# 
  1798  0396                     	;# 
  1799  0FE4                     	;# 
  1800  0FE5                     	;# 
  1801  0FE6                     	;# 
  1802  0FE7                     	;# 
  1803  0FE8                     	;# 
  1804  0FE9                     	;# 
  1805  0FEA                     	;# 
  1806  0FEB                     	;# 
  1807  0FED                     	;# 
  1808  0FEE                     	;# 
  1809  0FEF                     	;# 
  1810  0000                     	;# 
  1811  0001                     	;# 
  1812  0002                     	;# 
  1813  0003                     	;# 
  1814  0004                     	;# 
  1815  0005                     	;# 
  1816  0006                     	;# 
  1817  0007                     	;# 
  1818  0008                     	;# 
  1819  0009                     	;# 
  1820  000A                     	;# 
  1821  000B                     	;# 
  1822  000C                     	;# 
  1823  000D                     	;# 
  1824  000E                     	;# 
  1825  0010                     	;# 
  1826  0011                     	;# 
  1827  0012                     	;# 
  1828  0015                     	;# 
  1829  0016                     	;# 
  1830  0016                     	;# 
  1831  0017                     	;# 
  1832  0018                     	;# 
  1833  0019                     	;# 
  1834  001A                     	;# 
  1835  001B                     	;# 
  1836  001C                     	;# 
  1837  008C                     	;# 
  1838  008D                     	;# 
  1839  008E                     	;# 
  1840  0090                     	;# 
  1841  0091                     	;# 
  1842  0092                     	;# 
  1843  0095                     	;# 
  1844  0096                     	;# 
  1845  0097                     	;# 
  1846  0099                     	;# 
  1847  009A                     	;# 
  1848  009B                     	;# 
  1849  009B                     	;# 
  1850  009C                     	;# 
  1851  009D                     	;# 
  1852  009E                     	;# 
  1853  010C                     	;# 
  1854  010D                     	;# 
  1855  010E                     	;# 
  1856  0116                     	;# 
  1857  0117                     	;# 
  1858  011D                     	;# 
  1859  018C                     	;# 
  1860  018D                     	;# 
  1861  018E                     	;# 
  1862  0191                     	;# 
  1863  0191                     	;# 
  1864  0192                     	;# 
  1865  0193                     	;# 
  1866  0193                     	;# 
  1867  0194                     	;# 
  1868  0195                     	;# 
  1869  0196                     	;# 
  1870  0197                     	;# 
  1871  0199                     	;# 
  1872  019A                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019C                     	;# 
  1878  019C                     	;# 
  1879  019D                     	;# 
  1880  019E                     	;# 
  1881  019F                     	;# 
  1882  020D                     	;# 
  1883  0210                     	;# 
  1884  0211                     	;# 
  1885  0211                     	;# 
  1886  0212                     	;# 
  1887  0212                     	;# 
  1888  0213                     	;# 
  1889  0213                     	;# 
  1890  0214                     	;# 
  1891  0214                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0216                     	;# 
  1896  0216                     	;# 
  1897  0217                     	;# 
  1898  0217                     	;# 
  1899  0291                     	;# 
  1900  0291                     	;# 
  1901  0292                     	;# 
  1902  0293                     	;# 
  1903  0298                     	;# 
  1904  0298                     	;# 
  1905  0299                     	;# 
  1906  029A                     	;# 
  1907  0394                     	;# 
  1908  0395                     	;# 
  1909  0396                     	;# 
  1910  0FE4                     	;# 
  1911  0FE5                     	;# 
  1912  0FE6                     	;# 
  1913  0FE7                     	;# 
  1914  0FE8                     	;# 
  1915  0FE9                     	;# 
  1916  0FEA                     	;# 
  1917  0FEB                     	;# 
  1918  0FED                     	;# 
  1919  0FEE                     	;# 
  1920  0FEF                     	;# 
  1921  0000                     	;# 
  1922  0001                     	;# 
  1923  0002                     	;# 
  1924  0003                     	;# 
  1925  0004                     	;# 
  1926  0005                     	;# 
  1927  0006                     	;# 
  1928  0007                     	;# 
  1929  0008                     	;# 
  1930  0009                     	;# 
  1931  000A                     	;# 
  1932  000B                     	;# 
  1933  000C                     	;# 
  1934  000D                     	;# 
  1935  000E                     	;# 
  1936  0010                     	;# 
  1937  0011                     	;# 
  1938  0012                     	;# 
  1939  0015                     	;# 
  1940  0016                     	;# 
  1941  0016                     	;# 
  1942  0017                     	;# 
  1943  0018                     	;# 
  1944  0019                     	;# 
  1945  001A                     	;# 
  1946  001B                     	;# 
  1947  001C                     	;# 
  1948  008C                     	;# 
  1949  008D                     	;# 
  1950  008E                     	;# 
  1951  0090                     	;# 
  1952  0091                     	;# 
  1953  0092                     	;# 
  1954  0095                     	;# 
  1955  0096                     	;# 
  1956  0097                     	;# 
  1957  0099                     	;# 
  1958  009A                     	;# 
  1959  009B                     	;# 
  1960  009B                     	;# 
  1961  009C                     	;# 
  1962  009D                     	;# 
  1963  009E                     	;# 
  1964  010C                     	;# 
  1965  010D                     	;# 
  1966  010E                     	;# 
  1967  0116                     	;# 
  1968  0117                     	;# 
  1969  011D                     	;# 
  1970  018C                     	;# 
  1971  018D                     	;# 
  1972  018E                     	;# 
  1973  0191                     	;# 
  1974  0191                     	;# 
  1975  0192                     	;# 
  1976  0193                     	;# 
  1977  0193                     	;# 
  1978  0194                     	;# 
  1979  0195                     	;# 
  1980  0196                     	;# 
  1981  0197                     	;# 
  1982  0199                     	;# 
  1983  019A                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019C                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020D                     	;# 
  1994  0210                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0216                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0217                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  0394                     	;# 
  2019  0395                     	;# 
  2020  0396                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032                           
  2033                           	psect	idataBANK3
  2034  1F9C                     __pidataBANK3:	
  2035                           
  2036                           ;initializer for __product
  2037  1F9C  3463               	retlw	99
  2038  1F9D  3402               	retlw	2
  2039  1F9E  3400               	retlw	0
  2040  1F9F  3400               	retlw	0
  2041  1FA0  3400               	retlw	0
  2042  1FA1  3400               	retlw	0
  2043  1FA2  3400               	retlw	0
  2044  1FA3  3400               	retlw	0
  2045  1FA4  3400               	retlw	0
  2046  1FA5  3400               	retlw	0
  2047  1FA6  3400               	retlw	0
  2048  1FA7  3400               	retlw	0
  2049  1FA8  34FF               	retlw	255
  2050  1FA9  34FF               	retlw	255
  2051  1FAA  34FF               	retlw	255
  2052  1FAB  3400               	retlw	0
  2053  1FAC  3400               	retlw	0
  2054  1FAD  3400               	retlw	0
  2055  1FAE  3400               	retlw	0
  2056  1FAF  3400               	retlw	0
  2057  1FB0  3400               	retlw	0
  2058  1FB1  3400               	retlw	0
  2059  1FB2  3400               	retlw	0
  2060  1FB3  3400               	retlw	0
  2061  1FB4  3400               	retlw	0
  2062  1FB5  3400               	retlw	0
  2063  1FB6  3400               	retlw	0
  2064  1FB7  3400               	retlw	0
  2065  1FB8  3400               	retlw	0
  2066  1FB9  3400               	retlw	0
  2067  1FBA  3400               	retlw	0
  2068  1FBB  3400               	retlw	0
  2069                           
  2070                           	psect	stringtext
  2071  1000                     __pstringtext:	
  2072  1000                     _CC2500_registers_address:	
  2073  1000  3403               	retlw	3
  2074  1001  3416               	retlw	22
  2075  1002  3417               	retlw	23
  2076  1003  341E               	retlw	30
  2077  1004  341F               	retlw	31
  2078  1005  3420               	retlw	32
  2079  1006  342A               	retlw	42
  2080  1007  342B               	retlw	43
  2081  1008  340B               	retlw	11
  2082  1009  340C               	retlw	12
  2083  100A  340D               	retlw	13
  2084  100B  340E               	retlw	14
  2085  100C  340F               	retlw	15
  2086  100D  3410               	retlw	16
  2087  100E  3411               	retlw	17
  2088  100F  3412               	retlw	18
  2089  1010  3413               	retlw	19
  2090  1011  3414               	retlw	20
  2091  1012  340A               	retlw	10
  2092  1013  3415               	retlw	21
  2093  1014  3421               	retlw	33
  2094  1015  3422               	retlw	34
  2095  1016  3418               	retlw	24
  2096  1017  3419               	retlw	25
  2097  1018  341A               	retlw	26
  2098  1019  341B               	retlw	27
  2099  101A  341C               	retlw	28
  2100  101B  341D               	retlw	29
  2101  101C  3423               	retlw	35
  2102  101D  3424               	retlw	36
  2103  101E  3425               	retlw	37
  2104  101F  3426               	retlw	38
  2105  1020  3429               	retlw	41
  2106  1021  342C               	retlw	44
  2107  1022  342D               	retlw	45
  2108  1023  342E               	retlw	46
  2109  1024  3400               	retlw	0
  2110  1025  3401               	retlw	1
  2111  1026  3402               	retlw	2
  2112  1027  3407               	retlw	7
  2113  1028  3408               	retlw	8
  2114  1029  3409               	retlw	9
  2115  102A  3406               	retlw	6
  2116  102B  3404               	retlw	4
  2117  102C  3405               	retlw	5
  2118  102D  3427               	retlw	39
  2119  102E  3428               	retlw	40
  2120  102F                     __end_of_CC2500_registers_address:	
  2121  102F                     _CC2500_rfSettings:	
  2122  102F  3407               	retlw	7
  2123  1030  3407               	retlw	7
  2124  1031  3430               	retlw	48
  2125  1032  3487               	retlw	135
  2126  1033  346B               	retlw	107
  2127  1034  34F8               	retlw	248
  2128  1035  347F               	retlw	127
  2129  1036  343F               	retlw	63
  2130  1037  3409               	retlw	9
  2131  1038  3400               	retlw	0
  2132  1039  345C               	retlw	92
  2133  103A  34A7               	retlw	167
  2134  103B  3462               	retlw	98
  2135  103C  3486               	retlw	134
  2136  103D  3483               	retlw	131
  2137  103E  3403               	retlw	3
  2138  103F  3422               	retlw	34
  2139  1040  34F8               	retlw	248
  2140  1041  3400               	retlw	0
  2141  1042  3444               	retlw	68
  2142  1043  34B6               	retlw	182
  2143  1044  3410               	retlw	16
  2144  1045  3418               	retlw	24
  2145  1046  341D               	retlw	29
  2146  1047  341C               	retlw	28
  2147  1048  34C7               	retlw	199
  2148  1049  3400               	retlw	0
  2149  104A  34B2               	retlw	178
  2150  104B  34EA               	retlw	234
  2151  104C  340A               	retlw	10
  2152  104D  3400               	retlw	0
  2153  104E  3411               	retlw	17
  2154  104F  3459               	retlw	89
  2155  1050  3488               	retlw	136
  2156  1051  3431               	retlw	49
  2157  1052  340B               	retlw	11
  2158  1053  342F               	retlw	47
  2159  1054  342E               	retlw	46
  2160  1055  3406               	retlw	6
  2161  1056  3404               	retlw	4
  2162  1057  3405               	retlw	5
  2163  1058  3400               	retlw	0
  2164  1059  3430               	retlw	48
  2165  105A  34D3               	retlw	211
  2166  105B  3491               	retlw	145
  2167  105C  3441               	retlw	65
  2168  105D  3400               	retlw	0
  2169  105E                     __end_of_CC2500_rfSettings:	
  2170  105E                     _CC2500_patable_vaule:	
  2171  105E  34FE               	retlw	254
  2172  105F  34FE               	retlw	254
  2173  1060  34FE               	retlw	254
  2174  1061  34FE               	retlw	254
  2175  1062  34FE               	retlw	254
  2176  1063  34FE               	retlw	254
  2177  1064  34FE               	retlw	254
  2178  1065  34FE               	retlw	254
  2179  1066                     __end_of_CC2500_patable_vaule:	
  2180                           
  2181                           	psect	nvCOMMON
  2182  007D                     __pnvCOMMON:	
  2183  007D                     _product:	
  2184  007D                     	ds	1
  2185                           
  2186                           	psect	nvBANK1
  2187  00ED                     __pnvBANK1:	
  2188  00ED                     _Timer0:	
  2189  00ED                     	ds	1
  2190  00EE                     _myMain:	
  2191  00EE                     	ds	1
  2192  00EF                     _Memory:	
  2193  00EF                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0015                     _TMR0	set	21
  2198  005F                     _GIE	set	95
  2199  005C                     _INTE	set	92
  2200  0059                     _INTF	set	89
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006B                     _RB3	set	107
  2212  006C                     _RB4	set	108
  2213  006D                     _RB5	set	109
  2214  0070                     _RC0	set	112
  2215  0071                     _RC1	set	113
  2216  0072                     _RC2	set	114
  2217  0074                     _RC4	set	116
  2218  0075                     _RC5	set	117
  2219  0077                     _RC7	set	119
  2220  005D                     _TMR0IE	set	93
  2221  005A                     _TMR0IF	set	90
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0095                     _OPTION_REG	set	149
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  04E9                     _GO_nDONE	set	1257
  2232  0117                     _FVRCON	set	279
  2233  010C                     _LATA	set	268
  2234  010D                     _LATB	set	269
  2235  010E                     _LATC	set	270
  2236  018C                     _ANSELA	set	396
  2237  018D                     _ANSELB	set	397
  2238  018E                     _ANSELC	set	398
  2239  0192                     _PMADRH	set	402
  2240  0191                     _PMADRL	set	401
  2241  0196                     _PMCON2	set	406
  2242  0194                     _PMDATH	set	404
  2243  0193                     _PMDATL	set	403
  2244  0CAE                     _CFGS	set	3246
  2245  0CAC                     _FREE	set	3244
  2246  0CAD                     _LWLO	set	3245
  2247  0CA8                     _RD	set	3240
  2248  0CA9                     _WR	set	3241
  2249  0CAA                     _WREN	set	3242
  2250  1068                     _WPUB0	set	4200
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0018                     start_initialization:	
  2262  0018                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2269  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK1
  2274  001D  30A0               	movlw	low __pbssBANK1
  2275  001E  0084               	movwf	4
  2276  001F  3000               	movlw	high __pbssBANK1
  2277  0020  0085               	movwf	5
  2278  0021  304D               	movlw	77
  2279  0022  3187  27FA  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK2
  2282  0025  3020               	movlw	low __pbssBANK2
  2283  0026  0084               	movwf	4
  2284  0027  3001               	movlw	high __pbssBANK2
  2285  0028  0085               	movwf	5
  2286  0029  303C               	movlw	60
  2287  002A  3187  27FA  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK3
  2290  002D  30A0               	movlw	low __pbssBANK3
  2291  002E  0084               	movwf	4
  2292  002F  3001               	movlw	high __pbssBANK3
  2293  0030  0085               	movwf	5
  2294  0031  3025               	movlw	37
  2295  0032  3187  27FA  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Initialize objects allocated to BANK3
  2298  0035  309C               	movlw	low __pidataBANK3
  2299  0036  0084               	movwf	4
  2300  0037  309F               	movlw	(high __pidataBANK3)| (0+128)
  2301  0038  0085               	movwf	5
  2302  0039  30C5               	movlw	low __pdataBANK3
  2303  003A  0086               	movwf	6
  2304  003B  3001               	movlw	high __pdataBANK3
  2305  003C  0087               	movwf	7
  2306  003D  3020               	movlw	32
  2307  003E  319C  2412         	fcall	init_ram
  2308  0040                     end_of_initialization:	
  2309                           ;End of C runtime variable initialization code
  2310                           
  2311  0040                     __end_of__initialization:	
  2312  0040  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2313  0041  0020               	movlb	0
  2314  0042  3197  2FA2         	ljmp	_main	;jump to C main() function
  2315                           
  2316                           	psect	bitbssCOMMON
  2317  03E0                     __pbitbssCOMMON:	
  2318  03E0                     _Receive_OK:	
  2319  03E0                     	ds	1
  2320  03E1                     _Transceive_OK:	
  2321  03E1                     	ds	1
  2322                           
  2323                           	psect	bssCOMMON
  2324  0078                     __pbssCOMMON:	
  2325  0078                     _DimmerLights:	
  2326  0078                     	ds	1
  2327  0079                     _DimmerLightsIntr:	
  2328  0079                     	ds	1
  2329  007A                     _RF:	
  2330  007A                     	ds	1
  2331  007B                     _Sw:	
  2332  007B                     	ds	1
  2333                           
  2334                           	psect	bssBANK1
  2335  00A0                     __pbssBANK1:	
  2336  00A0                     _RF_Data:	
  2337  00A0                     	ds	21
  2338  00B5                     _RF_Count:	
  2339  00B5                     	ds	2
  2340  00B7                     _Buz:	
  2341  00B7                     	ds	1
  2342  00B8                     _CRC:	
  2343  00B8                     	ds	1
  2344  00B9                     _DelayOff:	
  2345  00B9                     	ds	1
  2346  00BA                     _Dimmer:	
  2347  00BA                     	ds	1
  2348  00BB                     _DimmerLights11:	
  2349  00BB                     	ds	1
  2350  00BC                     _DimmerLightsIntrIOC:	
  2351  00BC                     	ds	1
  2352  00BD                     _LED:	
  2353  00BD                     	ds	1
  2354  00BE                     _PF:	
  2355  00BE                     	ds	1
  2356  00BF                     _RFSW:	
  2357  00BF                     	ds	1
  2358  00C0                     _RSSI:	
  2359  00C0                     	ds	1
  2360  00C1                     _Rx_Length:	
  2361  00C1                     	ds	1
  2362  00C2                     _SPI0Buffer:	
  2363  00C2                     	ds	1
  2364  00C3                     _Tx_Length:	
  2365  00C3                     	ds	1
  2366  00C4                     _r_address:	
  2367  00C4                     	ds	1
  2368  00C5                     _r_data:	
  2369  00C5                     	ds	1
  2370  00C6                     _s_data:	
  2371  00C6                     	ds	1
  2372  00C7                     _Buz1:	
  2373  00C7                     	ds	12
  2374  00D3                     _DlySw1:	
  2375  00D3                     	ds	5
  2376  00D8                     _RF1:	
  2377  00D8                     	ds	5
  2378  00DD                     _VarErrLED:	
  2379  00DD                     	ds	4
  2380  00E1                     _VarLED1:	
  2381  00E1                     	ds	4
  2382  00E5                     _VarLED2:	
  2383  00E5                     	ds	4
  2384  00E9                     _Dimmer1:	
  2385  00E9                     	ds	3
  2386  00EC                     _RFSW1:	
  2387  00EC                     	ds	1
  2388                           
  2389                           	psect	bssBANK2
  2390  0120                     __pbssBANK2:	
  2391  0120                     __myMain:	
  2392  0120                     	ds	20
  2393  0134                     _DimmerLights1:	
  2394  0134                     	ds	15
  2395  0143                     _Sw1:	
  2396  0143                     	ds	9
  2397  014C                     _PF1:	
  2398  014C                     	ds	8
  2399  0154                     _VarTimer0:	
  2400  0154                     	ds	8
  2401                           
  2402                           	psect	bssBANK3
  2403  01A0                     __pbssBANK3:	
  2404  01A0                     _VarMemory:	
  2405  01A0                     	ds	37
  2406                           
  2407                           	psect	dataBANK3
  2408  01C5                     __pdataBANK3:	
  2409  01C5                     __product:	
  2410  01C5                     	ds	32
  2411                           
  2412                           	psect	clrtext
  2413  07FA                     clear_ram0:	
  2414                           ;	Called with FSR0 containing the base address, and
  2415                           ;	WREG with the size to clear
  2416                           
  2417  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2418  07FB                     clrloop0:	
  2419  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2420  07FC  3101               	addfsr 0,1
  2421  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2422  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2423  07FF  3400               	retlw	0	;all done for this memory range, return
  2424                           
  2425                           	psect	inittext
  2426  1C12                     init_ram:	
  2427  1C12  00FE               	movwf	126
  2428  1C13                     initloop:	
  2429  1C13  0012               	moviw fsr0++
  2430  1C14  001E               	movwi fsr1++
  2431  1C15  0BFE               	decfsz	126,f
  2432  1C16  2C13               	goto	initloop
  2433  1C17  3400               	retlw	0
  2434                           
  2435                           	psect	cstackCOMMON
  2436  0070                     __pcstackCOMMON:	
  2437  0070                     ?_CC2500_WriteByte:	
  2438  0070                     ?_CC2500_WriteCommand:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_CC2500_ReadStatus:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_CC2500_ReadByte:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ?_CC2500_PowerRST:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_CC2500_InitSetREG:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_CC2500_InitPATable:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ClearTXFIFO:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ClearRXFIFO:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_FrequencyCabr:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_SIDLEMode:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_DlyOff_Initialization:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_DlyOff_Main:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_setTxData:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_setDimmerLights_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_Dimmer_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_setMemory_GO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_setDimmerLights_Main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setDimmerLights_ERROR:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setLED_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setLED_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Fosc_Set:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_IO_Set:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_TMR0_Set:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_ADC_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_INT_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_IOC_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_IOC_ISR:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_TMR0_ISR:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_INT_ISR:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_Flash_Memory_Write:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_Flash_Memory_Modify:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_setPowerFault_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setPowerFault_Main:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setPowerFault_Exceptions:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setSw_Enable:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setRF_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setRF_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_RF_RxDisable:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_getRxData:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setLog_Code:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setControl_Lights_Table:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRFSW_Control:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRFSW_AdjControl:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_DimmerValue:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setSw_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setSw_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Sw_DimmerOnFunc:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Sw_DimmerAdjFunc:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_Sw_DimmerOffFunc:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_myMain_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_my_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_my_TestPointCleared:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_Buzzer_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Buzzer_Main:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_TxData:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_RxData:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_PowerOnInitial:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DelayOffPointSelect:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DelayOff_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_DelayOff_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_DimmerIntrIOCPointSelect:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ??_DimmerIntrIOCPointSelect:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DimmerIntrPointSelect:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ??_DimmerIntrPointSelect:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_IntrControl:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerLightsPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DimmerLights_Initialization:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerLights_Close:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerLights_Main:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DimmerLights_Exceptions:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_AdjRF:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_LedPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_LED_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_LED_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Mcu_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ISR:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setDimmerReClock:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Flash_Memory_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Flash_Memory_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Unlock:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Erasing:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_PowerFault_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_PowerFault_Main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_getPowerFault_AD:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_RfPointSelect:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_RF_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RF_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_RfSWPointSelect:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TouchPower:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_SwPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Switch_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Switch_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?i1_RfPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ??i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_DelayTimejudge:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_getDimmerLights_StatusFlag:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_Flash_Memory_Read:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_setPercentValue:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     setRF_Initialization@rf:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x0
  2743  0070                     	ds	1
  2744  0071                     DimmerIntrIOCPointSelect@lights:	
  2745  0071                     DimmerIntrPointSelect@lights:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748  0071                     i1RfPointSelect@rf:	
  2749                           ; 1 bytes @ 0x1
  2750                           
  2751                           
  2752                           ; 1 bytes @ 0x1
  2753  0071                     	ds	1
  2754  0072                     ?_setRF_ReceiveGO:	
  2755  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2756                           ; 0 bytes @ 0x2
  2757                           
  2758  0072                     ??_setDimmerLights_IntrControl:	
  2759                           ; 0 bytes @ 0x2
  2760                           
  2761  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2762                           ; 0 bytes @ 0x2
  2763                           
  2764  0072                     setRF_ReceiveGO@command:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767                           
  2768                           ; 1 bytes @ 0x2
  2769  0072                     	ds	1
  2770  0073                     ??_IOC_ISR:	
  2771  0073                     ??_setRF_ReceiveGO:	
  2772                           ; 0 bytes @ 0x3
  2773                           
  2774  0073                     ??_setDimmerReClock:	
  2775                           ; 0 bytes @ 0x3
  2776                           
  2777  0073                     setRF_ReceiveGO@rf:	
  2778                           ; 0 bytes @ 0x3
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0x3
  2782  0073                     	ds	1
  2783  0074                     ??_INT_ISR:	
  2784                           
  2785                           ; 0 bytes @ 0x4
  2786  0074                     	ds	2
  2787  0076                     setDimmerLights_IntrControl@lights:	
  2788                           
  2789                           ; 1 bytes @ 0x6
  2790  0076                     	ds	1
  2791  0077                     ??_TMR0_ISR:	
  2792  0077                     ??_ISR:	
  2793                           ; 0 bytes @ 0x7
  2794                           
  2795                           
  2796                           ; 0 bytes @ 0x7
  2797  0077                     	ds	1
  2798                           
  2799                           	psect	cstackBANK0
  2800  0020                     __pcstackBANK0:	
  2801  0020                     ??_CC2500_WriteByte:	
  2802  0020                     ??_CC2500_ReadByte:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ?_DelayTime_1us:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_DelayTimejudge:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_Dimmer_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_getDimmerLights_StatusFlag:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_setMemory_GO:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Fosc_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_IO_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_TMR0_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_ADC_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_INT_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_IOC_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Read:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Flash_Memory_Write:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setPowerFault_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setRF_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_myMain_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_my_TestPointCleared:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Buzzer_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_Buzzer_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_DelayOffPointSelect:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_DimmerLightsPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_LedPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Unlock:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Erasing:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_RfPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_RfSWPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_TouchPower:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_SwPointSelect:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ?_getAD:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?___awdiv:	
  2893                           ; 2 bytes @ 0x0
  2894                           
  2895  0020                     ?___ftpack:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     getDimmerLights_StatusFlag@Status:	
  2899                           ; 3 bytes @ 0x0
  2900                           
  2901  0020                     getAD@adcon1:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0020                     DelayTime_1us@count:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0020                     ___awdiv@divisor:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     ___ftpack@arg:	
  2911                           ; 2 bytes @ 0x0
  2912                           
  2913                           
  2914                           ; 3 bytes @ 0x0
  2915  0020                     	ds	1
  2916  0021                     ??_Mcu_Initialization:	
  2917  0021                     ??_PowerFault_Initialization:	
  2918                           ; 0 bytes @ 0x1
  2919                           
  2920  0021                     ??_RF_Initialization:	
  2921                           ; 0 bytes @ 0x1
  2922                           
  2923  0021                     CC2500_WriteByte@loop_a:	
  2924                           ; 0 bytes @ 0x1
  2925                           
  2926  0021                     CC2500_ReadByte@loop_b:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0021                     DelayOffPointSelect@sw:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0021                     DelayTimejudge@value:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     DimmerLightsPointSelect@lights:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     LedPointSelect@led:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     Flash_Memory_Read@i:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     Flash_Memory_Write@i:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     RfPointSelect@rf:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     RfSWPointSelect@sw:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     SwPointSelect@sw:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x1
  2958  0021                     	ds	1
  2959  0022                     ??_CC2500_WriteCommand:	
  2960  0022                     ??_CC2500_ReadStatus:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0022                     ??_DelayTime_1us:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0022                     ?_CC2500_WriteREG:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0022                     ??_DlyOff_Initialization:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ?_setSw_Status:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_setRFSW_Status:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ?_setDimmerLights_Trigger:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ?_setDimmerLights_Switch:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ??_setTxData:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ??_setDimmerLights_Initialization:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ?_setDimmerLights_TriggerERROR:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ?_setLED:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ??_setLED_Main:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ??_setSw_Enable:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ?_setRF_Enable:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ?_setDimmerLights_AdjGo:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_setDimmerLights_TriggerAdj:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setRF_Learn:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     CC2500_WriteREG@value:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     DlyOff_Initialization@sw:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     DelayTimejudge@i:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     setDimmerLights_TriggerERROR@command:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     setDimmerLights_Switch@command:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     setDimmerLights_AdjGo@command:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setDimmerLights_Trigger@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setDimmerLights_TriggerAdj@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     setLED@command:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     Flash_Memory_Read@address:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setMemory_GO@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     setRF_Learn@command:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setRF_Enable@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setRFSW_Status@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setSw_Enable@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setSw_Status@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     DelayTime_1us@i:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     ___awdiv@dividend:	
  3066                           ; 2 bytes @ 0x2
  3067                           
  3068                           
  3069                           ; 2 bytes @ 0x2
  3070  0022                     	ds	1
  3071  0023                     ??_CC2500_WriteREG:	
  3072  0023                     ??_setSw_Status:	
  3073                           ; 0 bytes @ 0x3
  3074                           
  3075  0023                     ??_setRFSW_Status:	
  3076                           ; 0 bytes @ 0x3
  3077                           
  3078  0023                     ??_setDimmerLights_Trigger:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setDimmerLights_Switch:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     ??_setDimmerLights_TriggerERROR:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     ??_setLED:	
  3088                           ; 0 bytes @ 0x3
  3089                           
  3090  0023                     ??_setRF_Enable:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_DelayOff_Initialization:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ?_setDelayOff_GO:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ??_DimmerLights_Close:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setDimmerLights_AdjGo:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_TriggerAdj:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_getAD:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setRF_Learn:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     CC2500_WriteCommand@command:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     CC2500_ReadStatus@status_addr:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setDelayOff_GO@command:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setDimmerLights_Initialization@lights:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_TriggerERROR@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     setDimmerLights_Switch@lights:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDimmerLights_AdjGo@lights:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights_Trigger@lights:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setDimmerLights_TriggerAdj@lights:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     setLED@led:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     getAD@adcon0:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     Flash_Memory_Read@ret:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setRF_Learn@rf:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setTxData@rf:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setRF_Enable@rf:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setRFSW_Status@sw:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setSw_Status@sw:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     ___ftpack@exp:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168                           
  3169                           ; 1 bytes @ 0x3
  3170  0023                     	ds	1
  3171  0024                     ??_CC2500_ClearTXFIFO:	
  3172  0024                     ??_CC2500_ClearRXFIFO:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_CC2500_SIDLEMode:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ?_setDimmerLights:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_setDimmerLights_ERROR:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_setLED_Initialization:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_Flash_Memory_Modify:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_RF_RxDisable:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_setSw_Initialization:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_Sw_DimmerAdjFunc:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_CC2500_TxData:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_DimmerLights_Initialization:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_getPowerFault_AD:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??___awdiv:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     CC2500_WriteREG@w_addr:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     setDelayOff_GO@value:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     setDimmerLights@status:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     setLED_Initialization@led:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     setLED_Main@led:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     RF_RxDisable@rf:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0024                     setSw_Initialization@sw:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232  0024                     Sw_DimmerAdjFunc@Idle:	
  3233                           ; 1 bytes @ 0x4
  3234                           
  3235  0024                     ___ftpack@sign:	
  3236                           ; 1 bytes @ 0x4
  3237                           
  3238  0024                     DelayTime_1us@j:	
  3239                           ; 1 bytes @ 0x4
  3240                           
  3241                           
  3242                           ; 2 bytes @ 0x4
  3243  0024                     	ds	1
  3244  0025                     ??_CC2500_InitSetREG:	
  3245  0025                     ??_CC2500_InitPATable:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     ??_setDimmerLights:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??___ftpack:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_setDelayOff_GO:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     ??_LED_Initialization:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     ??_LED_Main:	
  3261                           ; 0 bytes @ 0x5
  3262                           
  3263  0025                     ??_Switch_Initialization:	
  3264                           ; 0 bytes @ 0x5
  3265                           
  3266  0025                     CC2500_TxData@loop_e:	
  3267                           ; 0 bytes @ 0x5
  3268                           
  3269  0025                     setDimmerLights_ERROR@lights:	
  3270                           ; 1 bytes @ 0x5
  3271                           
  3272  0025                     Sw_DimmerAdjFunc@sw:	
  3273                           ; 1 bytes @ 0x5
  3274                           
  3275  0025                     ___awdiv@counter:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278                           
  3279                           ; 1 bytes @ 0x5
  3280  0025                     	ds	1
  3281  0026                     ??_CC2500_PowerRST:	
  3282  0026                     ??_CC2500_FrequencyCabr:	
  3283                           ; 0 bytes @ 0x6
  3284                           
  3285  0026                     CC2500_InitSetREG@temp1:	
  3286                           ; 0 bytes @ 0x6
  3287                           
  3288  0026                     CC2500_InitPATable@temp:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291  0026                     setDimmerLights@lights:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0026                     Flash_Memory_Modify@i:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297  0026                     ___awdiv@sign:	
  3298                           ; 1 bytes @ 0x6
  3299                           
  3300                           
  3301                           ; 1 bytes @ 0x6
  3302  0026                     	ds	1
  3303  0027                     ??_Flash_Memory_Main:	
  3304  0027                     CC2500_InitSetREG@temp2:	
  3305                           ; 0 bytes @ 0x7
  3306                           
  3307  0027                     CC2500_InitPATable@loop_d:	
  3308                           ; 1 bytes @ 0x7
  3309                           
  3310  0027                     setDelayOff_GO@sw:	
  3311                           ; 1 bytes @ 0x7
  3312                           
  3313  0027                     ___awdiv@quotient:	
  3314                           ; 1 bytes @ 0x7
  3315                           
  3316                           
  3317                           ; 2 bytes @ 0x7
  3318  0027                     	ds	1
  3319  0028                     ?___awtoft:	
  3320  0028                     CC2500_InitSetREG@loop_c:	
  3321                           ; 3 bytes @ 0x8
  3322                           
  3323  0028                     getPowerFault_AD@channel:	
  3324                           ; 1 bytes @ 0x8
  3325                           
  3326  0028                     ___awtoft@c:	
  3327                           ; 1 bytes @ 0x8
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x8
  3331  0028                     	ds	1
  3332  0029                     ?_setBuz:	
  3333  0029                     ??_CC2500_PowerOnInitial:	
  3334                           ; 0 bytes @ 0x9
  3335                           
  3336  0029                     setBuz@time:	
  3337                           ; 0 bytes @ 0x9
  3338                           
  3339                           
  3340                           ; 2 bytes @ 0x9
  3341  0029                     	ds	2
  3342  002B                     ??_setBuz:	
  3343  002B                     ??___awtoft:	
  3344                           ; 0 bytes @ 0xB
  3345                           
  3346                           
  3347                           ; 0 bytes @ 0xB
  3348  002B                     	ds	1
  3349  002C                     setBuz@count:	
  3350                           
  3351                           ; 1 bytes @ 0xC
  3352  002C                     	ds	1
  3353  002D                     ??_setLog_Code:	
  3354  002D                     ??_my_Main:	
  3355                           ; 0 bytes @ 0xD
  3356                           
  3357  002D                     ??_CC2500_RxData:	
  3358                           ; 0 bytes @ 0xD
  3359                           
  3360  002D                     ??_DimmerLights_Exceptions:	
  3361                           ; 0 bytes @ 0xD
  3362                           
  3363  002D                     DimmerLights_Exceptions@status:	
  3364                           ; 0 bytes @ 0xD
  3365                           
  3366  002D                     ___awtoft@sign:	
  3367                           ; 1 bytes @ 0xD
  3368                           
  3369                           
  3370                           ; 1 bytes @ 0xD
  3371  002D                     	ds	1
  3372  002E                     ??_setPowerFault_Exceptions:	
  3373  002E                     ?___ftdiv:	
  3374                           ; 0 bytes @ 0xE
  3375                           
  3376  002E                     ?___ftmul:	
  3377                           ; 3 bytes @ 0xE
  3378                           
  3379  002E                     setLog_Code@rf:	
  3380                           ; 3 bytes @ 0xE
  3381                           
  3382  002E                     ___ftdiv@f2:	
  3383                           ; 1 bytes @ 0xE
  3384                           
  3385  002E                     ___ftmul@f1:	
  3386                           ; 3 bytes @ 0xE
  3387                           
  3388                           
  3389                           ; 3 bytes @ 0xE
  3390  002E                     	ds	1
  3391  002F                     CC2500_RxData@loop_f:	
  3392  002F                     setPowerFault_Exceptions@command:	
  3393                           ; 1 bytes @ 0xF
  3394                           
  3395                           
  3396                           ; 1 bytes @ 0xF
  3397  002F                     	ds	1
  3398  0030                     ??_setPowerFault_Main:	
  3399                           
  3400                           ; 0 bytes @ 0x10
  3401  0030                     	ds	1
  3402  0031                     ___ftdiv@f1:	
  3403  0031                     ___ftmul@f2:	
  3404                           ; 3 bytes @ 0x11
  3405                           
  3406                           
  3407                           ; 3 bytes @ 0x11
  3408  0031                     	ds	1
  3409  0032                     ??_PowerFault_Main:	
  3410                           
  3411                           ; 0 bytes @ 0x12
  3412  0032                     	ds	2
  3413  0034                     ??___ftdiv:	
  3414  0034                     ??___ftmul:	
  3415                           ; 0 bytes @ 0x14
  3416                           
  3417                           
  3418                           ; 0 bytes @ 0x14
  3419  0034                     	ds	4
  3420  0038                     ___ftdiv@cntr:	
  3421  0038                     ___ftmul@exp:	
  3422                           ; 1 bytes @ 0x18
  3423                           
  3424                           
  3425                           ; 1 bytes @ 0x18
  3426  0038                     	ds	1
  3427  0039                     ___ftdiv@f3:	
  3428  0039                     ___ftmul@f3_as_product:	
  3429                           ; 3 bytes @ 0x19
  3430                           
  3431                           
  3432                           ; 3 bytes @ 0x19
  3433  0039                     	ds	3
  3434  003C                     ___ftdiv@exp:	
  3435  003C                     ___ftmul@cntr:	
  3436                           ; 1 bytes @ 0x1C
  3437                           
  3438                           
  3439                           ; 1 bytes @ 0x1C
  3440  003C                     	ds	1
  3441  003D                     ___ftdiv@sign:	
  3442  003D                     ___ftmul@sign:	
  3443                           ; 1 bytes @ 0x1D
  3444                           
  3445                           
  3446                           ; 1 bytes @ 0x1D
  3447  003D                     	ds	1
  3448  003E                     ?___ftadd:	
  3449  003E                     ___ftadd@f1:	
  3450                           ; 3 bytes @ 0x1E
  3451                           
  3452                           
  3453                           ; 3 bytes @ 0x1E
  3454  003E                     	ds	3
  3455  0041                     ___ftadd@f2:	
  3456                           
  3457                           ; 3 bytes @ 0x21
  3458  0041                     	ds	3
  3459  0044                     ??___ftadd:	
  3460                           
  3461                           ; 0 bytes @ 0x24
  3462  0044                     	ds	4
  3463  0048                     ___ftadd@sign:	
  3464                           
  3465                           ; 1 bytes @ 0x28
  3466  0048                     	ds	1
  3467  0049                     ___ftadd@exp2:	
  3468                           
  3469                           ; 1 bytes @ 0x29
  3470  0049                     	ds	1
  3471  004A                     ___ftadd@exp1:	
  3472                           
  3473                           ; 1 bytes @ 0x2A
  3474  004A                     	ds	1
  3475  004B                     ?___fttol:	
  3476  004B                     ___fttol@f1:	
  3477                           ; 4 bytes @ 0x2B
  3478                           
  3479                           
  3480                           ; 3 bytes @ 0x2B
  3481  004B                     	ds	4
  3482  004F                     ??___fttol:	
  3483                           
  3484                           ; 0 bytes @ 0x2F
  3485  004F                     	ds	4
  3486  0053                     ___fttol@sign1:	
  3487                           
  3488                           ; 1 bytes @ 0x33
  3489  0053                     	ds	1
  3490  0054                     ___fttol@lval:	
  3491                           
  3492                           ; 4 bytes @ 0x34
  3493  0054                     	ds	4
  3494  0058                     ___fttol@exp1:	
  3495                           
  3496                           ; 1 bytes @ 0x38
  3497  0058                     	ds	1
  3498  0059                     ??_getPercentValue:	
  3499  0059                     ??_setPercentValue:	
  3500                           ; 0 bytes @ 0x39
  3501                           
  3502  0059                     setPercentValue@value:	
  3503                           ; 0 bytes @ 0x39
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0x39
  3507  0059                     	ds	1
  3508  005A                     setPercentValue@i:	
  3509                           
  3510                           ; 3 bytes @ 0x3A
  3511  005A                     	ds	1
  3512  005B                     getPercentValue@value:	
  3513                           
  3514                           ; 1 bytes @ 0x3B
  3515  005B                     	ds	1
  3516  005C                     getPercentValue@i:	
  3517                           
  3518                           ; 3 bytes @ 0x3C
  3519  005C                     	ds	1
  3520  005D                     ?_setRF_DimmerLights:	
  3521  005D                     ??_Flash_Memory_Initialization:	
  3522                           ; 0 bytes @ 0x3D
  3523                           
  3524  005D                     setRF_DimmerLights@on:	
  3525                           ; 0 bytes @ 0x3D
  3526                           
  3527                           
  3528                           ; 1 bytes @ 0x3D
  3529  005D                     	ds	1
  3530  005E                     ??_setRF_DimmerLights:	
  3531  005E                     Flash_Memory_Initialization@i:	
  3532                           ; 0 bytes @ 0x3E
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x3E
  3536  005E                     	ds	1
  3537  005F                     ??_setDimmerLights_AdjRF:	
  3538                           
  3539                           ; 0 bytes @ 0x3F
  3540  005F                     	ds	1
  3541  0060                     setDimmerLights_AdjRF@lights:	
  3542  0060                     setRF_DimmerLights@status:	
  3543                           ; 1 bytes @ 0x40
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x40
  3547  0060                     	ds	1
  3548  0061                     ??_setRF_DimmerValue:	
  3549  0061                     setRF_DimmerLights@lights:	
  3550                           ; 0 bytes @ 0x41
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0x41
  3554  0061                     	ds	1
  3555  0062                     ??_DlyOff_Main:	
  3556  0062                     ?_setDimmerLights_Adj:	
  3557                           ; 0 bytes @ 0x42
  3558                           
  3559  0062                     ??_setRFSW_Control:	
  3560                           ; 0 bytes @ 0x42
  3561                           
  3562  0062                     ??_Sw_DimmerOnFunc:	
  3563                           ; 0 bytes @ 0x42
  3564                           
  3565  0062                     ??_Sw_DimmerOffFunc:	
  3566                           ; 0 bytes @ 0x42
  3567                           
  3568  0062                     setDimmerLights_Adj@status:	
  3569                           ; 0 bytes @ 0x42
  3570                           
  3571  0062                     Sw_DimmerOnFunc@Idle:	
  3572                           ; 1 bytes @ 0x42
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x42
  3576  0062                     	ds	1
  3577  0063                     ??_setDimmerLights_Adj:	
  3578  0063                     setRFSW_Control@sw:	
  3579                           ; 0 bytes @ 0x43
  3580                           
  3581  0063                     setRF_DimmerValue@lights:	
  3582                           ; 1 bytes @ 0x43
  3583                           
  3584  0063                     Sw_DimmerOnFunc@sw:	
  3585                           ; 1 bytes @ 0x43
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x43
  3589  0063                     	ds	1
  3590  0064                     ??_setRFSW_AdjControl:	
  3591  0064                     DlyOff_Main@sw:	
  3592                           ; 0 bytes @ 0x44
  3593                           
  3594  0064                     setDimmerLights_Adj@lights:	
  3595                           ; 1 bytes @ 0x44
  3596                           
  3597  0064                     Sw_DimmerOffFunc@sw:	
  3598                           ; 1 bytes @ 0x44
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x44
  3602  0064                     	ds	1
  3603  0065                     ??_setDimmerLights_Main:	
  3604  0065                     ??_setSw_Main:	
  3605                           ; 0 bytes @ 0x45
  3606                           
  3607  0065                     ??_DelayOff_Main:	
  3608                           ; 0 bytes @ 0x45
  3609                           
  3610  0065                     setDimmerLights_Main@clear:	
  3611                           ; 0 bytes @ 0x45
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x45
  3615  0065                     	ds	1
  3616  0066                     setDimmerLights_Main@lights:	
  3617  0066                     setRFSW_AdjControl@sw:	
  3618                           ; 1 bytes @ 0x46
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x46
  3622  0066                     	ds	1
  3623  0067                     ??_setControl_Lights_Table:	
  3624  0067                     ??_DimmerLights_Main:	
  3625                           ; 0 bytes @ 0x47
  3626                           
  3627  0067                     setControl_Lights_Table@rf:	
  3628                           ; 0 bytes @ 0x47
  3629                           
  3630  0067                     _setSw_Main$4803:	
  3631                           ; 1 bytes @ 0x47
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0x47
  3635  0067                     	ds	1
  3636  0068                     ??_getRxData:	
  3637  0068                     getRxData@rf:	
  3638                           ; 0 bytes @ 0x48
  3639                           
  3640  0068                     setSw_Main@sw:	
  3641                           ; 1 bytes @ 0x48
  3642                           
  3643                           
  3644                           ; 1 bytes @ 0x48
  3645  0068                     	ds	1
  3646  0069                     ??_setRF_Main:	
  3647  0069                     ??_Switch_Main:	
  3648                           ; 0 bytes @ 0x49
  3649                           
  3650                           
  3651                           ; 0 bytes @ 0x49
  3652  0069                     	ds	1
  3653  006A                     setRF_Main@rf:	
  3654                           
  3655                           ; 1 bytes @ 0x4A
  3656  006A                     	ds	1
  3657  006B                     _setRF_Main$3967:	
  3658                           
  3659                           ; 1 bytes @ 0x4B
  3660  006B                     	ds	1
  3661  006C                     ??_RF_Main:	
  3662  006C                     ?_main:	
  3663                           ; 0 bytes @ 0x4C
  3664                           
  3665  006C                     main@argc:	
  3666                           ; 2 bytes @ 0x4C
  3667                           
  3668                           
  3669                           ; 2 bytes @ 0x4C
  3670  006C                     	ds	2
  3671  006E                     main@argv:	
  3672                           
  3673                           ; 2 bytes @ 0x4E
  3674  006E                     	ds	2
  3675  0070                     ??_main:	
  3676                           
  3677                           	psect	maintext
  3678  17A2                     __pmaintext:	
  3679                           ; 0 bytes @ 0x50
  3680 ;;
  3681 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3682 ;;
  3683 ;; *************** function _main *****************
  3684 ;; Defined at:
  3685 ;;		line 7 in file "../src/main_B1.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  argc            2   76[BANK0 ] int 
  3688 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  2   76[BANK0 ] int 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 17F/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;Total ram usage:        4 bytes
  3705 ;; Hardware stack levels required when called:   15
  3706 ;; This function calls:
  3707 ;;		_Buzzer_Initialization
  3708 ;;		_Buzzer_Main
  3709 ;;		_CC2500_PowerOnInitial
  3710 ;;		_DelayOff_Initialization
  3711 ;;		_DelayOff_Main
  3712 ;;		_DimmerLights_Initialization
  3713 ;;		_DimmerLights_Main
  3714 ;;		_Flash_Memory_Initialization
  3715 ;;		_Flash_Memory_Main
  3716 ;;		_LED_Initialization
  3717 ;;		_LED_Main
  3718 ;;		_Mcu_Initialization
  3719 ;;		_PowerFault_Initialization
  3720 ;;		_PowerFault_Main
  3721 ;;		_RF_Initialization
  3722 ;;		_RF_Main
  3723 ;;		_Switch_Initialization
  3724 ;;		_Switch_Main
  3725 ;;		_getPowerFault_AD
  3726 ;;		_myMain_Initialization
  3727 ;;		_my_Main
  3728 ;;		_my_TestPointCleared
  3729 ;; This function is called by:
  3730 ;;		Startup code after reset
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _main
  3736  17A2                     _main:	
  3737                           
  3738                           ;main_B1.c: 9: myMain_Initialization();
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3742  17A2  319E  2611  3197   	fcall	_myMain_Initialization
  3743                           
  3744                           ;main_B1.c: 10: Mcu_Initialization();
  3745  17A5  319E  2650  3197   	fcall	_Mcu_Initialization
  3746                           
  3747                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3748  17A8  3184  2444  3197   	fcall	_Flash_Memory_Initialization
  3749                           
  3750                           ;main_B1.c: 12: LED_Initialization();
  3751  17AB  319C  24D4  3197   	fcall	_LED_Initialization
  3752                           
  3753                           ;main_B1.c: 13: Buzzer_Initialization();
  3754  17AE  319C  246C  3197   	fcall	_Buzzer_Initialization
  3755                           
  3756                           ;main_B1.c: 15: ;;
  3757                           ;main_B1.c: 16: ;;
  3758                           ;main_B1.c: 17: ;;
  3759                           ;main_B1.c: 18: PowerFault_Initialization();
  3760  17B1  319B  23DD  3197   	fcall	_PowerFault_Initialization
  3761                           
  3762                           ;main_B1.c: 19: DelayOff_Initialization();
  3763  17B4  319B  23EF  3197   	fcall	_DelayOff_Initialization
  3764                           
  3765                           ;main_B1.c: 21: DimmerLights_Initialization();
  3766  17B7  319C  24F9  3197   	fcall	_DimmerLights_Initialization
  3767                           
  3768                           ;main_B1.c: 22: ;;
  3769                           ;main_B1.c: 23: ;;
  3770                           ;main_B1.c: 24: ;;
  3771                           ;main_B1.c: 25: Switch_Initialization();
  3772  17BA  319C  2444  3197   	fcall	_Switch_Initialization
  3773                           
  3774                           ;main_B1.c: 26: RF_Initialization();
  3775  17BD  319B  23FB  3197   	fcall	_RF_Initialization
  3776                           
  3777                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3778  17C0  319E  2625  3197   	fcall	_CC2500_PowerOnInitial
  3779  17C3                     l7118:	
  3780                           ;main_B1.c: 28: ;;
  3781                           ;main_B1.c: 31: while (1) {
  3782                           
  3783                           
  3784                           ;main_B1.c: 33: if (myMain->PowerON) {
  3785  17C3  0021               	movlb	1	; select bank1
  3786  17C4  086E               	movf	_myMain^(0+128),w
  3787  17C5  0086               	movwf	6
  3788  17C6  3001               	movlw	1	; select bank2/3
  3789  17C7  0087               	movwf	7
  3790  17C8  1C01               	btfss	1,0
  3791  17C9  2FCE               	goto	l7122
  3792                           
  3793                           ;main_B1.c: 35: ;;
  3794                           ;main_B1.c: 39: ;;
  3795                           ;main_B1.c: 43: ;;
  3796                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  3797  17CA  3011               	movlw	17
  3798  17CB  3194  2443  3197   	fcall	_getPowerFault_AD
  3799  17CE                     l7122:	
  3800                           
  3801                           ;main_B1.c: 58: }
  3802                           ;main_B1.c: 61: if (myMain->T0_Timerout) {
  3803  17CE  0021               	movlb	1	; select bank1
  3804  17CF  086E               	movf	_myMain^(0+128),w
  3805  17D0  0086               	movwf	6
  3806  17D1  3001               	movlw	1	; select bank2/3
  3807  17D2  0087               	movwf	7
  3808  17D3  1C81               	btfss	1,1
  3809  17D4  2FC3               	goto	l7118
  3810                           
  3811                           ;main_B1.c: 62: myMain->T0_Timerout = 0;
  3812  17D5  086E               	movf	_myMain^(0+128),w
  3813  17D6  0086               	movwf	6
  3814  17D7  3001               	movlw	1	; select bank2/3
  3815  17D8  0087               	movwf	7
  3816  17D9  1081               	bcf	1,1
  3817                           
  3818                           ;main_B1.c: 63: my_Main();
  3819  17DA  318A  2247  3197   	fcall	_my_Main
  3820                           
  3821                           ;main_B1.c: 64: my_TestPointCleared();
  3822  17DD  319D  25EB  3197   	fcall	_my_TestPointCleared
  3823                           
  3824                           ;main_B1.c: 65: ;;
  3825                           ;main_B1.c: 66: ;;
  3826                           ;main_B1.c: 67: ;;
  3827                           ;main_B1.c: 68: if (myMain->PowerON) {
  3828  17E0  0021               	movlb	1	; select bank1
  3829  17E1  086E               	movf	_myMain^(0+128),w
  3830  17E2  0086               	movwf	6
  3831  17E3  3001               	movlw	1	; select bank2/3
  3832  17E4  0087               	movwf	7
  3833  17E5  1C01               	btfss	1,0
  3834  17E6  2FC3               	goto	l7118
  3835                           
  3836                           ;main_B1.c: 69: Flash_Memory_Main();
  3837  17E7  3193  232C  3197   	fcall	_Flash_Memory_Main
  3838                           
  3839                           ;main_B1.c: 71: LED_Main();
  3840  17EA  319C  24E0  3197   	fcall	_LED_Main
  3841                           
  3842                           ;main_B1.c: 72: Buzzer_Main();
  3843  17ED  318E  269D  3197   	fcall	_Buzzer_Main
  3844                           
  3845                           ;main_B1.c: 74: ;;
  3846                           ;main_B1.c: 75: ;;
  3847                           ;main_B1.c: 76: ;;
  3848                           ;main_B1.c: 77: PowerFault_Main();
  3849  17F0  319B  23E0  3197   	fcall	_PowerFault_Main
  3850                           
  3851                           ;main_B1.c: 79: ;;
  3852                           ;main_B1.c: 80: DimmerLights_Main();
  3853  17F3  319C  2426  3197   	fcall	_DimmerLights_Main
  3854                           
  3855                           ;main_B1.c: 81: Switch_Main();
  3856  17F6  319C  2403  3197   	fcall	_Switch_Main
  3857                           
  3858                           ;main_B1.c: 82: ;;
  3859                           ;main_B1.c: 83: ;;
  3860                           ;main_B1.c: 85: RF_Main();
  3861  17F9  319B  23FF  3197   	fcall	_RF_Main
  3862                           
  3863                           ;main_B1.c: 86: DelayOff_Main();
  3864  17FC  319B  23F3  3197   	fcall	_DelayOff_Main
  3865                           
  3866                           ;main_B1.c: 87: ;;
  3867  17FF  2FC3               	goto	l7118
  3868  1800                     __end_of_main:	
  3869                           
  3870                           	psect	text1
  3871  1DEB                     __ptext1:	
  3872 ;; *************** function _my_TestPointCleared *****************
  3873 ;; Defined at:
  3874 ;;		line 204 in file "../src/main_B1.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;Total ram usage:        0 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    5
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_main
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _my_TestPointCleared
  3904  1DEB                     _my_TestPointCleared:	
  3905                           
  3906                           ;main_B1.c: 205: myMain->pcount1 = 0;
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  3910  1DEB  0021               	movlb	1	; select bank1
  3911  1DEC  086E               	movf	_myMain^(0+128),w
  3912  1DED  3E10               	addlw	16
  3913  1DEE  0086               	movwf	6
  3914  1DEF  3001               	movlw	1	; select bank2/3
  3915  1DF0  0087               	movwf	7
  3916  1DF1  3000               	movlw	0
  3917  1DF2  3FC0               	movwi [0]fsr1
  3918  1DF3  3FC1               	movwi [1]fsr1
  3919                           
  3920                           ;main_B1.c: 206: myMain->pcount2 = 0;
  3921  1DF4  086E               	movf	_myMain^(0+128),w
  3922  1DF5  3E12               	addlw	18
  3923  1DF6  0086               	movwf	6
  3924  1DF7  3001               	movlw	1	; select bank2/3
  3925  1DF8  0087               	movwf	7
  3926  1DF9  3000               	movlw	0
  3927  1DFA  3FC0               	movwi [0]fsr1
  3928  1DFB  3FC1               	movwi [1]fsr1
  3929  1DFC  0008               	return
  3930  1DFD                     __end_of_my_TestPointCleared:	
  3931                           
  3932                           	psect	text2
  3933  0A47                     __ptext2:	
  3934 ;; *************** function _my_Main *****************
  3935 ;; Defined at:
  3936 ;;		line 124 in file "../src/main_B1.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    7
  3957 ;; This function calls:
  3958 ;;		_setBuz
  3959 ;;		_setRF_Enable
  3960 ;;		_setSw_Enable
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _my_Main
  3968  0A47                     _my_Main:	
  3969                           
  3970                           ;main_B1.c: 126: if (myMain->PowerON == 0) {
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3974  0A47  0021               	movlb	1	; select bank1
  3975  0A48  086E               	movf	_myMain^(0+128),w
  3976  0A49  0086               	movwf	6
  3977  0A4A  3001               	movlw	1	; select bank2/3
  3978  0A4B  0087               	movwf	7
  3979  0A4C  1801               	btfsc	1,0
  3980  0A4D  2A89               	goto	l7030
  3981                           
  3982                           ;main_B1.c: 127: myMain->PowerCount++;
  3983  0A4E  0A6E               	incf	_myMain^(0+128),w
  3984  0A4F  0086               	movwf	6
  3985  0A50  3001               	movlw	1	; select bank2/3
  3986  0A51  0087               	movwf	7
  3987  0A52  3001               	movlw	1
  3988  0A53  0781               	addwf	1,f
  3989  0A54  3141               	addfsr 1,1
  3990  0A55  1803               	skipnc
  3991  0A56  0A81               	incf	1,f
  3992                           
  3993                           ;main_B1.c: 128: if (myMain->PowerCount == 150)
  3994  0A57  0A6E               	incf	_myMain^(0+128),w
  3995  0A58  0086               	movwf	6
  3996  0A59  3001               	movlw	1	; select bank2/3
  3997  0A5A  0087               	movwf	7
  3998  0A5B  3F40               	moviw [0]fsr1
  3999  0A5C  3A96               	xorlw	150
  4000  0A5D  1D03               	skipz
  4001  0A5E  2A61               	goto	u6305
  4002  0A5F  3F41               	moviw [1]fsr1
  4003  0A60  3A00               	xorlw	0
  4004  0A61                     u6305:	
  4005  0A61  1D03               	skipz
  4006  0A62  0008               	return
  4007                           
  4008                           ;main_B1.c: 129: {
  4009                           ;main_B1.c: 130: myMain->PowerCount = 0;
  4010  0A63  0A6E               	incf	_myMain^(0+128),w
  4011  0A64  0086               	movwf	6
  4012  0A65  3001               	movlw	1	; select bank2/3
  4013  0A66  0087               	movwf	7
  4014  0A67  3000               	movlw	0
  4015  0A68  3FC0               	movwi [0]fsr1
  4016  0A69  3FC1               	movwi [1]fsr1
  4017                           
  4018                           ;main_B1.c: 131: myMain->PowerON = 1;
  4019  0A6A  086E               	movf	_myMain^(0+128),w
  4020  0A6B  0086               	movwf	6
  4021  0A6C  3001               	movlw	1	; select bank2/3
  4022  0A6D  0087               	movwf	7
  4023  0A6E  1401               	bsf	1,0
  4024                           
  4025                           ;main_B1.c: 134: ;;
  4026                           ;main_B1.c: 138: ;;
  4027                           ;main_B1.c: 144: setBuz(3, 50);
  4028  0A6F  3032               	movlw	50
  4029  0A70  0020               	movlb	0	; select bank0
  4030  0A71  00A9               	movwf	setBuz@time
  4031  0A72  3000               	movlw	0
  4032  0A73  00AA               	movwf	setBuz@time+1
  4033  0A74  3003               	movlw	3
  4034  0A75  318C  243C  318A   	fcall	_setBuz
  4035                           
  4036                           ;main_B1.c: 145: myMain->SelfTest = 1;
  4037  0A78  0021               	movlb	1	; select bank1
  4038  0A79  086E               	movf	_myMain^(0+128),w
  4039  0A7A  0086               	movwf	6
  4040  0A7B  3001               	movlw	1	; select bank2/3
  4041  0A7C  0087               	movwf	7
  4042  0A7D  1701               	bsf	1,6
  4043                           
  4044                           ;main_B1.c: 147: setSw_Enable(1);
  4045  0A7E  3001               	movlw	1
  4046  0A7F  319D  255A  318A   	fcall	_setSw_Enable
  4047                           
  4048                           ;main_B1.c: 150: setRF_Enable(1, 1);
  4049  0A82  0020               	movlb	0	; select bank0
  4050  0A83  01A2               	clrf	setRF_Enable@command
  4051  0A84  0AA2               	incf	setRF_Enable@command,f
  4052  0A85  3001               	movlw	1
  4053  0A86  3190  20BF         	fcall	_setRF_Enable
  4054                           
  4055                           ;main_B1.c: 154: }
  4056                           ;main_B1.c: 155: } else {
  4057  0A88  0008               	return
  4058  0A89                     l7030:	
  4059                           
  4060                           ;main_B1.c: 163: myMain->Count1++;
  4061  0A89  0021               	movlb	1	; select bank1
  4062  0A8A  086E               	movf	_myMain^(0+128),w
  4063  0A8B  3E05               	addlw	5
  4064  0A8C  0086               	movwf	6
  4065  0A8D  3001               	movlw	1	; select bank2/3
  4066  0A8E  0087               	movwf	7
  4067  0A8F  3001               	movlw	1
  4068  0A90  0781               	addwf	1,f
  4069  0A91  3141               	addfsr 1,1
  4070  0A92  1803               	skipnc
  4071  0A93  0A81               	incf	1,f
  4072                           
  4073                           ;main_B1.c: 164: if (myMain->Count1 == 100)
  4074  0A94  086E               	movf	_myMain^(0+128),w
  4075  0A95  3E05               	addlw	5
  4076  0A96  0086               	movwf	6
  4077  0A97  3001               	movlw	1	; select bank2/3
  4078  0A98  0087               	movwf	7
  4079  0A99  3F40               	moviw [0]fsr1
  4080  0A9A  3A64               	xorlw	100
  4081  0A9B  1D03               	skipz
  4082  0A9C  2A9F               	goto	u6315
  4083  0A9D  3F41               	moviw [1]fsr1
  4084  0A9E  3A00               	xorlw	0
  4085  0A9F                     u6315:	
  4086  0A9F  1D03               	skipz
  4087  0AA0  0008               	return
  4088                           
  4089                           ;main_B1.c: 165: {
  4090                           ;main_B1.c: 166: myMain->Count1 = 0;
  4091  0AA1  086E               	movf	_myMain^(0+128),w
  4092  0AA2  3E05               	addlw	5
  4093  0AA3  0086               	movwf	6
  4094  0AA4  3001               	movlw	1	; select bank2/3
  4095  0AA5  0087               	movwf	7
  4096  0AA6  3000               	movlw	0
  4097  0AA7  3FC0               	movwi [0]fsr1
  4098  0AA8  3FC1               	movwi [1]fsr1
  4099                           
  4100                           ;main_B1.c: 179: if (myMain->Flag) {
  4101  0AA9  086E               	movf	_myMain^(0+128),w
  4102  0AAA  0086               	movwf	6
  4103  0AAB  3001               	movlw	1	; select bank2/3
  4104  0AAC  0087               	movwf	7
  4105  0AAD  1D81               	btfss	1,3
  4106  0AAE  2AB5               	goto	l7038
  4107                           
  4108                           ;main_B1.c: 180: myMain->Flag = 0;
  4109  0AAF  086E               	movf	_myMain^(0+128),w
  4110  0AB0  0086               	movwf	6
  4111  0AB1  3001               	movlw	1	; select bank2/3
  4112  0AB2  0087               	movwf	7
  4113  0AB3  1181               	bcf	1,3
  4114                           
  4115                           ;main_B1.c: 189: } else {
  4116  0AB4  0008               	return
  4117  0AB5                     l7038:	
  4118                           
  4119                           ;main_B1.c: 190: myMain->Flag = 1;
  4120  0AB5  086E               	movf	_myMain^(0+128),w
  4121  0AB6  0086               	movwf	6
  4122  0AB7  3001               	movlw	1	; select bank2/3
  4123  0AB8  0087               	movwf	7
  4124  0AB9  1581               	bsf	1,3
  4125  0ABA  0008               	return
  4126  0ABB                     __end_of_my_Main:	
  4127                           
  4128                           	psect	text3
  4129  1E11                     __ptext3:	
  4130 ;; *************** function _myMain_Initialization *****************
  4131 ;; Defined at:
  4132 ;;		line 112 in file "../src/main_B1.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, fsr1l, fsr1h
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;Total ram usage:        1 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    5
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _myMain_Initialization
  4162  1E11                     _myMain_Initialization:	
  4163                           
  4164                           ;main_B1.c: 114: product = &_product;
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4168  1E11  30C5               	movlw	__product& (0+255)
  4169  1E12  0020               	movlb	0	; select bank0
  4170  1E13  00A0               	movwf	??_myMain_Initialization
  4171  1E14  0820               	movf	??_myMain_Initialization,w
  4172  1E15  00FD               	movwf	_product
  4173                           
  4174                           ;main_B1.c: 115: product->Data[20] = 209;
  4175  1E16  30D1               	movlw	209
  4176  1E17  00A0               	movwf	??_myMain_Initialization
  4177  1E18  087D               	movf	_product,w
  4178  1E19  3E14               	addlw	20
  4179  1E1A  0086               	movwf	6
  4180  1E1B  3001               	movlw	1	; select bank2/3
  4181  1E1C  0087               	movwf	7
  4182  1E1D  0820               	movf	??_myMain_Initialization,w
  4183  1E1E  0081               	movwf	1
  4184                           
  4185                           ;main_B1.c: 118: myMain = &_myMain;
  4186  1E1F  3020               	movlw	__myMain& (0+255)
  4187  1E20  00A0               	movwf	??_myMain_Initialization
  4188  1E21  0820               	movf	??_myMain_Initialization,w
  4189  1E22  0021               	movlb	1	; select bank1
  4190  1E23  00EE               	movwf	_myMain^(0+128)
  4191  1E24  0008               	return
  4192  1E25                     __end_of_myMain_Initialization:	
  4193                           
  4194                           	psect	text4
  4195  1443                     __ptext4:	
  4196 ;; *************** function _getPowerFault_AD *****************
  4197 ;; Defined at:
  4198 ;;		line 49 in file "../src/PowerFault_B1.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  channel         1    wreg     unsigned char 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  channel         1    8[BANK0 ] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;Total ram usage:        5 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    6
  4219 ;; This function calls:
  4220 ;;		_getAD
  4221 ;; This function is called by:
  4222 ;;		_main
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _getPowerFault_AD
  4228  1443                     _getPowerFault_AD:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4232                           ;getPowerFault_AD@channel stored from wreg
  4233  1443  0020               	movlb	0	; select bank0
  4234  1444  00A8               	movwf	getPowerFault_AD@channel
  4235                           
  4236                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4237  1445  0021               	movlb	1	; select bank1
  4238  1446  083E               	movf	_PF^(0+128),w
  4239  1447  0086               	movwf	6
  4240  1448  3001               	movlw	1	; select bank2/3
  4241  1449  0087               	movwf	7
  4242  144A  1D81               	btfss	1,3
  4243  144B  0008               	return
  4244                           
  4245                           ;PowerFault_B1.c: 52: {
  4246                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4247  144C  30F0               	movlw	240
  4248  144D  0020               	movlb	0	; select bank0
  4249  144E  00A4               	movwf	??_getPowerFault_AD
  4250  144F  0824               	movf	??_getPowerFault_AD,w
  4251  1450  00A0               	movwf	getAD@adcon1
  4252  1451  0828               	movf	getPowerFault_AD@channel,w
  4253  1452  319E  263A  3194   	fcall	_getAD
  4254  1455  0021               	movlb	1	; select bank1
  4255  1456  083E               	movf	_PF^(0+128),w
  4256  1457  3E06               	addlw	6
  4257  1458  0086               	movwf	6
  4258  1459  3001               	movlw	1	; select bank2/3
  4259  145A  0087               	movwf	7
  4260  145B  0020               	movlb	0	; select bank0
  4261  145C  0820               	movf	?_getAD,w
  4262  145D  3FC0               	movwi [0]fsr1
  4263  145E  0821               	movf	?_getAD+1,w
  4264  145F  3FC1               	movwi [1]fsr1
  4265                           
  4266                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4267  1460  0021               	movlb	1	; select bank1
  4268  1461  083E               	movf	_PF^(0+128),w
  4269  1462  3E06               	addlw	6
  4270  1463  0086               	movwf	6
  4271  1464  3001               	movlw	1	; select bank2/3
  4272  1465  0087               	movwf	7
  4273  1466  3F40               	moviw [0]fsr1
  4274  1467  0020               	movlb	0	; select bank0
  4275  1468  00A4               	movwf	??_getPowerFault_AD
  4276  1469  3F41               	moviw [1]fsr1
  4277  146A  00A5               	movwf	??_getPowerFault_AD+1
  4278  146B  0021               	movlb	1	; select bank1
  4279  146C  083E               	movf	_PF^(0+128),w
  4280  146D  3E04               	addlw	4
  4281  146E  0086               	movwf	6
  4282  146F  3001               	movlw	1	; select bank2/3
  4283  1470  0087               	movwf	7
  4284  1471  3F40               	moviw [0]fsr1
  4285  1472  0020               	movlb	0	; select bank0
  4286  1473  00A6               	movwf	??_getPowerFault_AD+2
  4287  1474  3F41               	moviw [1]fsr1
  4288  1475  00A7               	movwf	??_getPowerFault_AD+3
  4289  1476  0825               	movf	??_getPowerFault_AD+1,w
  4290  1477  0227               	subwf	??_getPowerFault_AD+3,w
  4291  1478  1D03               	skipz
  4292  1479  2C7C               	goto	u6285
  4293  147A  0824               	movf	??_getPowerFault_AD,w
  4294  147B  0226               	subwf	??_getPowerFault_AD+2,w
  4295  147C                     u6285:	
  4296  147C  1803               	skipnc
  4297  147D  0008               	return
  4298                           
  4299                           ;PowerFault_B1.c: 55: {
  4300                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4301  147E  0021               	movlb	1	; select bank1
  4302  147F  083E               	movf	_PF^(0+128),w
  4303  1480  3E06               	addlw	6
  4304  1481  0086               	movwf	6
  4305  1482  3001               	movlw	1	; select bank2/3
  4306  1483  0087               	movwf	7
  4307  1484  083E               	movf	_PF^(0+128),w
  4308  1485  3E04               	addlw	4
  4309  1486  0084               	movwf	4
  4310  1487  3001               	movlw	1	; select bank2/3
  4311  1488  0085               	movwf	5
  4312  1489  3F40               	moviw [0]fsr1
  4313  148A  3F80               	movwi [0]fsr0
  4314  148B  3F41               	moviw [1]fsr1
  4315  148C  3F81               	movwi [1]fsr0
  4316  148D  0008               	return
  4317  148E                     __end_of_getPowerFault_AD:	
  4318                           
  4319                           	psect	text5
  4320  1E3A                     __ptext5:	
  4321 ;; *************** function _getAD *****************
  4322 ;; Defined at:
  4323 ;;		line 342 in file "../src/MCU_B1.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  adcon0          1    wreg     unsigned char 
  4326 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  2    0[BANK0 ] int 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2, status,0
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4338 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;Total ram usage:        4 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    5
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_getPowerFault_AD
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _getAD
  4354  1E3A                     _getAD:	
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4358                           ;getAD@adcon0 stored from wreg
  4359  1E3A  0020               	movlb	0	; select bank0
  4360  1E3B  00A3               	movwf	getAD@adcon0
  4361                           
  4362                           ;MCU_B1.c: 343: ADCON0 = adcon0;
  4363  1E3C  0823               	movf	getAD@adcon0,w
  4364  1E3D  0021               	movlb	1	; select bank1
  4365  1E3E  009D               	movwf	29	;volatile
  4366                           
  4367                           ;MCU_B1.c: 344: ADCON1 = adcon1;
  4368  1E3F  0020               	movlb	0	; select bank0
  4369  1E40  0820               	movf	getAD@adcon1,w
  4370  1E41  0021               	movlb	1	; select bank1
  4371  1E42  009E               	movwf	30	;volatile
  4372                           
  4373                           ;MCU_B1.c: 345: GO_nDONE = 1;
  4374  1E43  149D               	bsf	29,1	;volatile
  4375  1E44                     l1287:	
  4376                           ;MCU_B1.c: 346: while (GO_nDONE == 1);
  4377                           
  4378  1E44  189D               	btfsc	29,1	;volatile
  4379  1E45  2E44               	goto	l1287
  4380                           
  4381                           ;MCU_B1.c: 347: return ((ADRESH*256)+ADRESL);
  4382  1E46  081C               	movf	28,w	;volatile
  4383  1E47  0020               	movlb	0	; select bank0
  4384  1E48  01A1               	clrf	?_getAD+1
  4385  1E49  07A1               	addwf	?_getAD+1,f
  4386  1E4A  0021               	movlb	1	; select bank1
  4387  1E4B  081B               	movf	27,w	;volatile
  4388  1E4C  0020               	movlb	0	; select bank0
  4389  1E4D  01A0               	clrf	?_getAD
  4390  1E4E  07A0               	addwf	?_getAD,f
  4391  1E4F  0008               	return
  4392  1E50                     __end_of_getAD:	
  4393                           
  4394                           	psect	text6
  4395  1C03                     __ptext6:	
  4396 ;; *************** function _Switch_Main *****************
  4397 ;; Defined at:
  4398 ;;		line 61 in file "../src/Switch_B1.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:   11
  4419 ;; This function calls:
  4420 ;;		_setSw_Main
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _Switch_Main
  4428  1C03                     _Switch_Main:	
  4429                           
  4430                           ;Switch_B1.c: 63: setSw_Main(1);
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4434  1C03  3001               	movlw	1
  4435  1C04  3181  21FA         	fcall	_setSw_Main
  4436  1C06  0008               	return
  4437  1C07                     __end_of_Switch_Main:	
  4438                           
  4439                           	psect	text7
  4440  01FA                     __ptext7:	
  4441 ;; *************** function _setSw_Main *****************
  4442 ;; Defined at:
  4443 ;;		line 111 in file "../src/Switch_B1.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  sw              1    wreg     unsigned char 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  sw              1   72[BANK0 ] unsigned char 
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;Total ram usage:        4 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:   10
  4464 ;; This function calls:
  4465 ;;		_SwPointSelect
  4466 ;;		_Sw_DimmerAdjFunc
  4467 ;;		_Sw_DimmerOffFunc
  4468 ;;		_Sw_DimmerOnFunc
  4469 ;;		_setBuz
  4470 ;;		_setRF_Learn
  4471 ;; This function is called by:
  4472 ;;		_Switch_Main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _setSw_Main
  4478  01FA                     _setSw_Main:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4482                           ;setSw_Main@sw stored from wreg
  4483  01FA  0020               	movlb	0	; select bank0
  4484  01FB  00E8               	movwf	setSw_Main@sw
  4485                           
  4486                           ;Switch_B1.c: 112: SwPointSelect(sw);
  4487  01FC  0868               	movf	setSw_Main@sw,w
  4488  01FD  319C  248D  3181   	fcall	_SwPointSelect
  4489                           
  4490                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  4491  0200  087B               	movf	_Sw,w
  4492  0201  0086               	movwf	6
  4493  0202  3001               	movlw	1	; select bank2/3
  4494  0203  0087               	movwf	7
  4495  0204  1C01               	btfss	1,0
  4496  0205  0008               	return
  4497                           
  4498                           ;Switch_B1.c: 133: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  4499  0206  0020               	movlb	0	; select bank0
  4500  0207  01E7               	clrf	_setSw_Main$4803
  4501  0208  0AE7               	incf	_setSw_Main$4803,f
  4502  0209  1F0C               	btfss	12,6	;volatile
  4503  020A  1A0C               	btfsc	12,4	;volatile
  4504  020B  2A10               	goto	l6736
  4505  020C  1C0C               	btfss	12,0	;volatile
  4506  020D  188D               	btfsc	13,1	;volatile
  4507  020E  2A10               	goto	l6736
  4508  020F  01E7               	clrf	_setSw_Main$4803
  4509  0210                     l6736:	
  4510  0210  087B               	movf	_Sw,w
  4511  0211  0086               	movwf	6
  4512  0212  3001               	movlw	1	; select bank2/3
  4513  0213  0087               	movwf	7
  4514  0214  0867               	movf	_setSw_Main$4803,w
  4515  0215  1081               	bcf	1,1
  4516  0216  1D03               	skipz
  4517  0217  1481               	bsf	1,1
  4518                           
  4519                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  4520  0218  087B               	movf	_Sw,w
  4521  0219  0086               	movwf	6
  4522  021A  3001               	movlw	1	; select bank2/3
  4523  021B  0087               	movwf	7
  4524  021C  1C81               	btfss	1,1
  4525  021D  2AE9               	goto	l6786
  4526                           
  4527                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  4528  021E  087B               	movf	_Sw,w
  4529  021F  0086               	movwf	6
  4530  0220  3001               	movlw	1	; select bank2/3
  4531  0221  0087               	movwf	7
  4532  0222  1901               	btfsc	1,2
  4533  0223  2A45               	goto	l6752
  4534                           
  4535                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  4536  0224  3001               	movlw	1
  4537  0225  00E5               	movwf	??_setSw_Main
  4538  0226  087B               	movf	_Sw,w
  4539  0227  3E02               	addlw	2
  4540  0228  0086               	movwf	6
  4541  0229  3001               	movlw	1	; select bank2/3
  4542  022A  0087               	movwf	7
  4543  022B  0865               	movf	??_setSw_Main,w
  4544  022C  0781               	addwf	1,f
  4545                           
  4546                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  4547  022D  087B               	movf	_Sw,w
  4548  022E  3E02               	addlw	2
  4549  022F  0086               	movwf	6
  4550  0230  3001               	movlw	1	; select bank2/3
  4551  0231  0087               	movwf	7
  4552  0232  3005               	movlw	5
  4553  0233  0201               	subwf	1,w
  4554  0234  1C03               	skipc
  4555  0235  0008               	return
  4556                           
  4557                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  4558  0236  087B               	movf	_Sw,w
  4559  0237  3E02               	addlw	2
  4560  0238  0086               	movwf	6
  4561  0239  3001               	movlw	1	; select bank2/3
  4562  023A  0087               	movwf	7
  4563  023B  0181               	clrf	1
  4564                           
  4565                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  4566  023C  087B               	movf	_Sw,w
  4567  023D  0086               	movwf	6
  4568  023E  3001               	movlw	1	; select bank2/3
  4569  023F  0087               	movwf	7
  4570  0240  1501               	bsf	1,2
  4571                           
  4572                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  4573  0241  0868               	movf	setSw_Main@sw,w
  4574  0242  3195  257F         	fcall	_Sw_DimmerOnFunc
  4575                           
  4576                           ;Switch_B1.c: 145: }
  4577                           ;Switch_B1.c: 146: } else {
  4578  0244  0008               	return
  4579  0245                     l6752:	
  4580                           
  4581                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  4582  0245  087B               	movf	_Sw,w
  4583  0246  0086               	movwf	6
  4584  0247  3001               	movlw	1	; select bank2/3
  4585  0248  0087               	movwf	7
  4586  0249  1981               	btfsc	1,3
  4587  024A  2A72               	goto	l6762
  4588                           
  4589                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  4590  024B  087B               	movf	_Sw,w
  4591  024C  3E03               	addlw	3
  4592  024D  0086               	movwf	6
  4593  024E  3001               	movlw	1	; select bank2/3
  4594  024F  0087               	movwf	7
  4595  0250  3001               	movlw	1
  4596  0251  0781               	addwf	1,f
  4597  0252  3141               	addfsr 1,1
  4598  0253  1803               	skipnc
  4599  0254  0A81               	incf	1,f
  4600                           
  4601                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  4602  0255  087B               	movf	_Sw,w
  4603  0256  3E03               	addlw	3
  4604  0257  0086               	movwf	6
  4605  0258  3001               	movlw	1	; select bank2/3
  4606  0259  0087               	movwf	7
  4607  025A  3F40               	moviw [0]fsr1
  4608  025B  0020               	movlb	0	; select bank0
  4609  025C  00E5               	movwf	??_setSw_Main
  4610  025D  3F41               	moviw [1]fsr1
  4611  025E  00E6               	movwf	??_setSw_Main+1
  4612  025F  3000               	movlw	0
  4613  0260  0266               	subwf	??_setSw_Main+1,w
  4614  0261  3096               	movlw	150
  4615  0262  1903               	skipnz
  4616  0263  0265               	subwf	??_setSw_Main,w
  4617  0264  1C03               	skipc
  4618  0265  0008               	return
  4619                           
  4620                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  4621  0266  087B               	movf	_Sw,w
  4622  0267  3E03               	addlw	3
  4623  0268  0086               	movwf	6
  4624  0269  3001               	movlw	1	; select bank2/3
  4625  026A  0087               	movwf	7
  4626  026B  3000               	movlw	0
  4627  026C  3FC0               	movwi [0]fsr1
  4628  026D  3FC1               	movwi [1]fsr1
  4629                           
  4630                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  4631  026E  0868               	movf	setSw_Main@sw,w
  4632  026F  3191  21C6         	fcall	_Sw_DimmerAdjFunc
  4633                           
  4634                           ;Switch_B1.c: 156: }
  4635                           ;Switch_B1.c: 157: } else {
  4636  0271  0008               	return
  4637  0272                     l6762:	
  4638                           
  4639                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  4640  0272  087B               	movf	_Sw,w
  4641  0273  0086               	movwf	6
  4642  0274  3001               	movlw	1	; select bank2/3
  4643  0275  0087               	movwf	7
  4644  0276  1A01               	btfsc	1,4
  4645  0277  2AB6               	goto	l6776
  4646                           
  4647                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  4648  0278  087B               	movf	_Sw,w
  4649  0279  3E05               	addlw	5
  4650  027A  0086               	movwf	6
  4651  027B  3001               	movlw	1	; select bank2/3
  4652  027C  0087               	movwf	7
  4653  027D  3001               	movlw	1
  4654  027E  0781               	addwf	1,f
  4655  027F  3141               	addfsr 1,1
  4656  0280  1803               	skipnc
  4657  0281  0A81               	incf	1,f
  4658                           
  4659                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  4660  0282  087B               	movf	_Sw,w
  4661  0283  3E05               	addlw	5
  4662  0284  0086               	movwf	6
  4663  0285  3001               	movlw	1	; select bank2/3
  4664  0286  0087               	movwf	7
  4665  0287  3F40               	moviw [0]fsr1
  4666  0288  0020               	movlb	0	; select bank0
  4667  0289  00E5               	movwf	??_setSw_Main
  4668  028A  3F41               	moviw [1]fsr1
  4669  028B  00E6               	movwf	??_setSw_Main+1
  4670  028C  3000               	movlw	0
  4671  028D  0266               	subwf	??_setSw_Main+1,w
  4672  028E  3096               	movlw	150
  4673  028F  1903               	skipnz
  4674  0290  0265               	subwf	??_setSw_Main,w
  4675  0291  1C03               	skipc
  4676  0292  0008               	return
  4677                           
  4678                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  4679  0293  087B               	movf	_Sw,w
  4680  0294  3E05               	addlw	5
  4681  0295  0086               	movwf	6
  4682  0296  3001               	movlw	1	; select bank2/3
  4683  0297  0087               	movwf	7
  4684  0298  3000               	movlw	0
  4685  0299  3FC0               	movwi [0]fsr1
  4686  029A  3FC1               	movwi [1]fsr1
  4687                           
  4688                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  4689  029B  087B               	movf	_Sw,w
  4690  029C  0086               	movwf	6
  4691  029D  3001               	movlw	1	; select bank2/3
  4692  029E  0087               	movwf	7
  4693  029F  1601               	bsf	1,4
  4694                           
  4695                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  4696  02A0  01A2               	clrf	setRF_Learn@command
  4697  02A1  0AA2               	incf	setRF_Learn@command,f
  4698  02A2  3001               	movlw	1
  4699  02A3  319D  252E  3181   	fcall	_setRF_Learn
  4700                           
  4701                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  4702  02A6  0021               	movlb	1	; select bank1
  4703  02A7  086E               	movf	_myMain^(0+128),w
  4704  02A8  0086               	movwf	6
  4705  02A9  3001               	movlw	1	; select bank2/3
  4706  02AA  0087               	movwf	7
  4707  02AB  1F81               	btfss	1,7
  4708  02AC  0008               	return
  4709                           
  4710                           ;Switch_B1.c: 168: setBuz(2, 100);
  4711  02AD  3064               	movlw	100
  4712  02AE  0020               	movlb	0	; select bank0
  4713  02AF  00A9               	movwf	setBuz@time
  4714  02B0  3000               	movlw	0
  4715  02B1  00AA               	movwf	setBuz@time+1
  4716  02B2  3002               	movlw	2
  4717  02B3  318C  243C         	fcall	_setBuz
  4718                           
  4719                           ;Switch_B1.c: 169: }
  4720                           ;Switch_B1.c: 171: }
  4721                           ;Switch_B1.c: 172: } else {
  4722  02B5  0008               	return
  4723  02B6                     l6776:	
  4724                           
  4725                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  4726  02B6  087B               	movf	_Sw,w
  4727  02B7  0086               	movwf	6
  4728  02B8  3001               	movlw	1	; select bank2/3
  4729  02B9  0087               	movwf	7
  4730  02BA  1A81               	btfsc	1,5
  4731  02BB  0008               	return
  4732                           
  4733                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  4734  02BC  087B               	movf	_Sw,w
  4735  02BD  3E07               	addlw	7
  4736  02BE  0086               	movwf	6
  4737  02BF  3001               	movlw	1	; select bank2/3
  4738  02C0  0087               	movwf	7
  4739  02C1  3001               	movlw	1
  4740  02C2  0781               	addwf	1,f
  4741  02C3  3141               	addfsr 1,1
  4742  02C4  1803               	skipnc
  4743  02C5  0A81               	incf	1,f
  4744                           
  4745                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  4746  02C6  087B               	movf	_Sw,w
  4747  02C7  3E07               	addlw	7
  4748  02C8  0086               	movwf	6
  4749  02C9  3001               	movlw	1	; select bank2/3
  4750  02CA  0087               	movwf	7
  4751  02CB  3F40               	moviw [0]fsr1
  4752  02CC  0020               	movlb	0	; select bank0
  4753  02CD  00E5               	movwf	??_setSw_Main
  4754  02CE  3F41               	moviw [1]fsr1
  4755  02CF  00E6               	movwf	??_setSw_Main+1
  4756  02D0  3001               	movlw	1
  4757  02D1  0266               	subwf	??_setSw_Main+1,w
  4758  02D2  302C               	movlw	44
  4759  02D3  1903               	skipnz
  4760  02D4  0265               	subwf	??_setSw_Main,w
  4761  02D5  1C03               	skipc
  4762  02D6  0008               	return
  4763                           
  4764                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  4765  02D7  087B               	movf	_Sw,w
  4766  02D8  3E07               	addlw	7
  4767  02D9  0086               	movwf	6
  4768  02DA  3001               	movlw	1	; select bank2/3
  4769  02DB  0087               	movwf	7
  4770  02DC  3000               	movlw	0
  4771  02DD  3FC0               	movwi [0]fsr1
  4772  02DE  3FC1               	movwi [1]fsr1
  4773                           
  4774                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  4775  02DF  087B               	movf	_Sw,w
  4776  02E0  0086               	movwf	6
  4777  02E1  3001               	movlw	1	; select bank2/3
  4778  02E2  0087               	movwf	7
  4779  02E3  1681               	bsf	1,5
  4780                           
  4781                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  4782  02E4  01A2               	clrf	setRF_Learn@command
  4783  02E5  3001               	movlw	1
  4784  02E6  319D  252E         	fcall	_setRF_Learn
  4785                           
  4786                           ;Switch_B1.c: 183: }
  4787                           ;Switch_B1.c: 184: }
  4788                           ;Switch_B1.c: 185: }
  4789                           ;Switch_B1.c: 186: }
  4790                           ;Switch_B1.c: 187: }
  4791                           ;Switch_B1.c: 188: } else {
  4792  02E8  0008               	return
  4793  02E9                     l6786:	
  4794                           
  4795                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  4796  02E9  087B               	movf	_Sw,w
  4797  02EA  0086               	movwf	6
  4798  02EB  3001               	movlw	1	; select bank2/3
  4799  02EC  0087               	movwf	7
  4800  02ED  1D01               	btfss	1,2
  4801  02EE  0008               	return
  4802                           
  4803                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  4804  02EF  3001               	movlw	1
  4805  02F0  0020               	movlb	0	; select bank0
  4806  02F1  00E5               	movwf	??_setSw_Main
  4807  02F2  087B               	movf	_Sw,w
  4808  02F3  3E02               	addlw	2
  4809  02F4  0086               	movwf	6
  4810  02F5  3001               	movlw	1	; select bank2/3
  4811  02F6  0087               	movwf	7
  4812  02F7  0865               	movf	??_setSw_Main,w
  4813  02F8  0781               	addwf	1,f
  4814                           
  4815                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  4816  02F9  087B               	movf	_Sw,w
  4817  02FA  3E02               	addlw	2
  4818  02FB  0086               	movwf	6
  4819  02FC  3001               	movlw	1	; select bank2/3
  4820  02FD  0087               	movwf	7
  4821  02FE  3005               	movlw	5
  4822  02FF  0201               	subwf	1,w
  4823  0300  1C03               	skipc
  4824  0301  0008               	return
  4825                           
  4826                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  4827  0302  087B               	movf	_Sw,w
  4828  0303  3E02               	addlw	2
  4829  0304  0086               	movwf	6
  4830  0305  3001               	movlw	1	; select bank2/3
  4831  0306  0087               	movwf	7
  4832  0307  0181               	clrf	1
  4833                           
  4834                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  4835  0308  087B               	movf	_Sw,w
  4836  0309  0086               	movwf	6
  4837  030A  3001               	movlw	1	; select bank2/3
  4838  030B  0087               	movwf	7
  4839  030C  1101               	bcf	1,2
  4840                           
  4841                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  4842  030D  087B               	movf	_Sw,w
  4843  030E  3E03               	addlw	3
  4844  030F  0086               	movwf	6
  4845  0310  3001               	movlw	1	; select bank2/3
  4846  0311  0087               	movwf	7
  4847  0312  3000               	movlw	0
  4848  0313  3FC0               	movwi [0]fsr1
  4849  0314  3FC1               	movwi [1]fsr1
  4850                           
  4851                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  4852  0315  087B               	movf	_Sw,w
  4853  0316  0086               	movwf	6
  4854  0317  3001               	movlw	1	; select bank2/3
  4855  0318  0087               	movwf	7
  4856  0319  1181               	bcf	1,3
  4857                           
  4858                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  4859  031A  087B               	movf	_Sw,w
  4860  031B  3E05               	addlw	5
  4861  031C  0086               	movwf	6
  4862  031D  3001               	movlw	1	; select bank2/3
  4863  031E  0087               	movwf	7
  4864  031F  3000               	movlw	0
  4865  0320  3FC0               	movwi [0]fsr1
  4866  0321  3FC1               	movwi [1]fsr1
  4867                           
  4868                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  4869  0322  087B               	movf	_Sw,w
  4870  0323  0086               	movwf	6
  4871  0324  3001               	movlw	1	; select bank2/3
  4872  0325  0087               	movwf	7
  4873  0326  1201               	bcf	1,4
  4874                           
  4875                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  4876  0327  087B               	movf	_Sw,w
  4877  0328  3E07               	addlw	7
  4878  0329  0086               	movwf	6
  4879  032A  3001               	movlw	1	; select bank2/3
  4880  032B  0087               	movwf	7
  4881  032C  3000               	movlw	0
  4882  032D  3FC0               	movwi [0]fsr1
  4883  032E  3FC1               	movwi [1]fsr1
  4884                           
  4885                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  4886  032F  087B               	movf	_Sw,w
  4887  0330  0086               	movwf	6
  4888  0331  3001               	movlw	1	; select bank2/3
  4889  0332  0087               	movwf	7
  4890  0333  1281               	bcf	1,5
  4891                           
  4892                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  4893  0334  0868               	movf	setSw_Main@sw,w
  4894  0335  3189  21D6  3181   	fcall	_Sw_DimmerOffFunc
  4895                           
  4896                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  4897  0338  0020               	movlb	0	; select bank0
  4898  0339  01A2               	clrf	setRF_Learn@command
  4899  033A  3001               	movlw	1
  4900  033B  319D  252E         	fcall	_setRF_Learn
  4901  033D  0008               	return
  4902  033E                     __end_of_setSw_Main:	
  4903                           
  4904                           	psect	text8
  4905  1D2E                     __ptext8:	
  4906 ;; *************** function _setRF_Learn *****************
  4907 ;; Defined at:
  4908 ;;		line 33 in file "../src/RF_Control_B1.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  rf              1    wreg     unsigned char 
  4911 ;;  command         1    2[BANK0 ] unsigned char 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  rf              1    3[BANK0 ] unsigned char 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;		None               void
  4916 ;; Registers used:
  4917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;Total ram usage:        2 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    6
  4930 ;; This function calls:
  4931 ;;		_RfPointSelect
  4932 ;; This function is called by:
  4933 ;;		_setSw_Main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _setRF_Learn
  4939  1D2E                     _setRF_Learn:	
  4940                           
  4941                           ;incstack = 0
  4942                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4943                           ;setRF_Learn@rf stored from wreg
  4944  1D2E  0020               	movlb	0	; select bank0
  4945  1D2F  00A3               	movwf	setRF_Learn@rf
  4946                           
  4947                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  4948  1D30  0823               	movf	setRF_Learn@rf,w
  4949  1D31  319D  2520         	fcall	_RfPointSelect
  4950                           
  4951                           ;RF_Control_B1.c: 35: RF->Learn = command;
  4952  1D33  087A               	movf	_RF,w
  4953  1D34  0086               	movwf	6
  4954  1D35  0187               	clrf	7
  4955  1D36  0020               	movlb	0	; select bank0
  4956  1D37  0822               	movf	setRF_Learn@command,w
  4957  1D38  1301               	bcf	1,6
  4958  1D39  1D03               	skipz
  4959  1D3A  1701               	bsf	1,6
  4960  1D3B  0008               	return
  4961  1D3C                     __end_of_setRF_Learn:	
  4962                           
  4963                           	psect	text9
  4964  157F                     __ptext9:	
  4965 ;; *************** function _Sw_DimmerOnFunc *****************
  4966 ;; Defined at:
  4967 ;;		line 213 in file "../src/Switch_B1.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  sw              1    wreg     unsigned char 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  sw              1   67[BANK0 ] unsigned char 
  4972 ;;  Idle            1   66[BANK0 ] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;		None               void
  4975 ;; Registers used:
  4976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:        2 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    9
  4989 ;; This function calls:
  4990 ;;		_setBuz
  4991 ;;		_setDimmerLights_Switch
  4992 ;;		_setDimmerLights_Trigger
  4993 ;;		_setRFSW_Status
  4994 ;;		_setRF_DimmerLights
  4995 ;;		_setTxData
  4996 ;; This function is called by:
  4997 ;;		_setSw_Main
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _Sw_DimmerOnFunc
  5003  157F                     _Sw_DimmerOnFunc:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5007                           ;Sw_DimmerOnFunc@sw stored from wreg
  5008  157F  0020               	movlb	0	; select bank0
  5009  1580  00E3               	movwf	Sw_DimmerOnFunc@sw
  5010                           
  5011                           ;Switch_B1.c: 214: char Idle = 1;
  5012  1581  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5013  1582  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5014                           
  5015                           ;Switch_B1.c: 235: if (Idle == 1) {
  5016  1583  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5017  1584  3A01               	xorlw	1
  5018  1585  1D03               	skipz
  5019  1586  0008               	return
  5020                           
  5021                           ;Switch_B1.c: 236: Sw->Flag = 1;
  5022  1587  087B               	movf	_Sw,w
  5023  1588  0086               	movwf	6
  5024  1589  3001               	movlw	1	; select bank2/3
  5025  158A  0087               	movwf	7
  5026  158B  1781               	bsf	1,7
  5027                           
  5028                           ;Switch_B1.c: 237: setBuz(1, 100);
  5029  158C  3064               	movlw	100
  5030  158D  00A9               	movwf	setBuz@time
  5031  158E  3000               	movlw	0
  5032  158F  00AA               	movwf	setBuz@time+1
  5033  1590  3001               	movlw	1
  5034  1591  318C  243C  3195   	fcall	_setBuz
  5035                           
  5036                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  5037  1594  087B               	movf	_Sw,w
  5038  1595  0086               	movwf	6
  5039  1596  3001               	movlw	1	; select bank2/3
  5040  1597  0087               	movwf	7
  5041  1598  1B01               	btfsc	1,6
  5042  1599  2DC5               	goto	l6166
  5043                           
  5044                           ;Switch_B1.c: 239: Sw->Status = 1;
  5045  159A  087B               	movf	_Sw,w
  5046  159B  0086               	movwf	6
  5047  159C  3001               	movlw	1	; select bank2/3
  5048  159D  0087               	movwf	7
  5049  159E  1701               	bsf	1,6
  5050                           
  5051                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  5052  159F  0020               	movlb	0	; select bank0
  5053  15A0  01A2               	clrf	setRFSW_Status@command
  5054  15A1  0AA2               	incf	setRFSW_Status@command,f
  5055  15A2  0863               	movf	Sw_DimmerOnFunc@sw,w
  5056  15A3  319D  253C  3195   	fcall	_setRFSW_Status
  5057                           
  5058                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  5059  15A6  0020               	movlb	0	; select bank0
  5060  15A7  01A2               	clrf	setDimmerLights_Trigger@command
  5061  15A8  0AA2               	incf	setDimmerLights_Trigger@command,f
  5062  15A9  0863               	movf	Sw_DimmerOnFunc@sw,w
  5063  15AA  319D  2589  3195   	fcall	_setDimmerLights_Trigger
  5064                           
  5065                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  5066  15AD  0020               	movlb	0	; select bank0
  5067  15AE  01A2               	clrf	setDimmerLights_Switch@command
  5068  15AF  0AA2               	incf	setDimmerLights_Switch@command,f
  5069  15B0  0863               	movf	Sw_DimmerOnFunc@sw,w
  5070  15B1  319D  2579  3195   	fcall	_setDimmerLights_Switch
  5071                           
  5072                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  5073  15B4  087B               	movf	_Sw,w
  5074  15B5  0086               	movwf	6
  5075  15B6  3001               	movlw	1	; select bank2/3
  5076  15B7  0087               	movwf	7
  5077  15B8  3000               	movlw	0
  5078  15B9  1B01               	btfsc	1,6
  5079  15BA  3001               	movlw	1
  5080  15BB  0020               	movlb	0	; select bank0
  5081  15BC  00DD               	movwf	setRF_DimmerLights@on
  5082  15BD  0863               	movf	Sw_DimmerOnFunc@sw,w
  5083  15BE  3188  208E  3195   	fcall	_setRF_DimmerLights
  5084                           
  5085                           ;Switch_B1.c: 246: setTxData(1);
  5086  15C1  3001               	movlw	1
  5087  15C2  318D  2554         	fcall	_setTxData
  5088                           
  5089                           ;Switch_B1.c: 248: } else {
  5090  15C4  0008               	return
  5091  15C5                     l6166:	
  5092                           
  5093                           ;Switch_B1.c: 249: Sw->Status = 0;
  5094  15C5  087B               	movf	_Sw,w
  5095  15C6  0086               	movwf	6
  5096  15C7  3001               	movlw	1	; select bank2/3
  5097  15C8  0087               	movwf	7
  5098  15C9  1301               	bcf	1,6
  5099                           
  5100                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  5101  15CA  087B               	movf	_Sw,w
  5102  15CB  0086               	movwf	6
  5103  15CC  3001               	movlw	1	; select bank2/3
  5104  15CD  0087               	movwf	7
  5105  15CE  3000               	movlw	0
  5106  15CF  1B01               	btfsc	1,6
  5107  15D0  3001               	movlw	1
  5108  15D1  0020               	movlb	0	; select bank0
  5109  15D2  00A2               	movwf	setRFSW_Status@command
  5110  15D3  0863               	movf	Sw_DimmerOnFunc@sw,w
  5111  15D4  319D  253C         	fcall	_setRFSW_Status
  5112  15D6  0008               	return
  5113  15D7                     __end_of_Sw_DimmerOnFunc:	
  5114                           
  5115                           	psect	text10
  5116  09D6                     __ptext10:	
  5117 ;; *************** function _Sw_DimmerOffFunc *****************
  5118 ;; Defined at:
  5119 ;;		line 256 in file "../src/Switch_B1.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  sw              1    wreg     unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  sw              1   68[BANK0 ] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;		None               void
  5126 ;; Registers used:
  5127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;Total ram usage:        3 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    9
  5140 ;; This function calls:
  5141 ;;		_setDelayOff_GO
  5142 ;;		_setDimmerLights_AdjGo
  5143 ;;		_setDimmerLights_Switch
  5144 ;;		_setDimmerLights_Trigger
  5145 ;;		_setDimmerLights_TriggerAdj
  5146 ;;		_setRF_DimmerLights
  5147 ;;		_setTxData
  5148 ;; This function is called by:
  5149 ;;		_setSw_Main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _Sw_DimmerOffFunc
  5155  09D6                     _Sw_DimmerOffFunc:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5159                           ;Sw_DimmerOffFunc@sw stored from wreg
  5160  09D6  0020               	movlb	0	; select bank0
  5161  09D7  00E4               	movwf	Sw_DimmerOffFunc@sw
  5162                           
  5163                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  5164  09D8  087B               	movf	_Sw,w
  5165  09D9  0086               	movwf	6
  5166  09DA  3001               	movlw	1	; select bank2/3
  5167  09DB  0087               	movwf	7
  5168  09DC  1F81               	btfss	1,7
  5169  09DD  0008               	return
  5170                           
  5171                           ;Switch_B1.c: 258: Sw->Flag = 0;
  5172  09DE  087B               	movf	_Sw,w
  5173  09DF  0086               	movwf	6
  5174  09E0  3001               	movlw	1	; select bank2/3
  5175  09E1  0087               	movwf	7
  5176  09E2  1381               	bcf	1,7
  5177                           
  5178                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  5179  09E3  087B               	movf	_Sw,w
  5180  09E4  0086               	movwf	6
  5181  09E5  3001               	movlw	1	; select bank2/3
  5182  09E6  0087               	movwf	7
  5183  09E7  1F01               	btfss	1,6
  5184  09E8  2A22               	goto	l6202
  5185                           
  5186                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  5187  09E9  0A7B               	incf	_Sw,w
  5188  09EA  0086               	movwf	6
  5189  09EB  3001               	movlw	1	; select bank2/3
  5190  09EC  0087               	movwf	7
  5191  09ED  1C01               	btfss	1,0
  5192  09EE  0008               	return
  5193                           
  5194                           ;Switch_B1.c: 261: Sw->Adj = 0;
  5195  09EF  0A7B               	incf	_Sw,w
  5196  09F0  0086               	movwf	6
  5197  09F1  3001               	movlw	1	; select bank2/3
  5198  09F2  0087               	movwf	7
  5199  09F3  1001               	bcf	1,0
  5200                           
  5201                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  5202  09F4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5203  09F5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5204  09F6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5205  09F7  319D  25B9  3189   	fcall	_setDimmerLights_TriggerAdj
  5206                           
  5207                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  5208  09FA  0020               	movlb	0	; select bank0
  5209  09FB  01A2               	clrf	setDimmerLights_AdjGo@command
  5210  09FC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5211  09FD  319D  25A9  3189   	fcall	_setDimmerLights_AdjGo
  5212                           
  5213                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  5214  0A00  0020               	movlb	0	; select bank0
  5215  0A01  0864               	movf	Sw_DimmerOffFunc@sw,w
  5216  0A02  3E1A               	addlw	26
  5217  0A03  077D               	addwf	_product,w
  5218  0A04  00E2               	movwf	??_Sw_DimmerOffFunc
  5219  0A05  0862               	movf	??_Sw_DimmerOffFunc,w
  5220  0A06  0086               	movwf	6
  5221  0A07  3001               	movlw	1	; select bank2/3
  5222  0A08  0087               	movwf	7
  5223  0A09  0801               	movf	1,w
  5224  0A0A  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5225  0A0B  087D               	movf	_product,w
  5226  0A0C  3E11               	addlw	17
  5227  0A0D  0086               	movwf	6
  5228  0A0E  3001               	movlw	1	; select bank2/3
  5229  0A0F  0087               	movwf	7
  5230  0A10  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5231  0A11  0081               	movwf	1
  5232                           
  5233                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  5234  0A12  087B               	movf	_Sw,w
  5235  0A13  0086               	movwf	6
  5236  0A14  3001               	movlw	1	; select bank2/3
  5237  0A15  0087               	movwf	7
  5238  0A16  3000               	movlw	0
  5239  0A17  1B01               	btfsc	1,6
  5240  0A18  3001               	movlw	1
  5241  0A19  00DD               	movwf	setRF_DimmerLights@on
  5242  0A1A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5243  0A1B  3188  208E  3189   	fcall	_setRF_DimmerLights
  5244                           
  5245                           ;Switch_B1.c: 267: setTxData(1);
  5246  0A1E  3001               	movlw	1
  5247  0A1F  318D  2554         	fcall	_setTxData
  5248                           
  5249                           ;Switch_B1.c: 269: }
  5250                           ;Switch_B1.c: 270: } else {
  5251  0A21  0008               	return
  5252  0A22                     l6202:	
  5253                           
  5254                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  5255  0A22  0020               	movlb	0	; select bank0
  5256  0A23  01A2               	clrf	setDimmerLights_Trigger@command
  5257  0A24  0AA2               	incf	setDimmerLights_Trigger@command,f
  5258  0A25  0864               	movf	Sw_DimmerOffFunc@sw,w
  5259  0A26  319D  2589  3189   	fcall	_setDimmerLights_Trigger
  5260                           
  5261                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  5262  0A29  0020               	movlb	0	; select bank0
  5263  0A2A  01A2               	clrf	setDimmerLights_Switch@command
  5264  0A2B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5265  0A2C  319D  2579  3189   	fcall	_setDimmerLights_Switch
  5266                           
  5267                           ;Switch_B1.c: 274: setDelayOff_GO(sw, 0, 0);
  5268  0A2F  0020               	movlb	0	; select bank0
  5269  0A30  01A3               	clrf	setDelayOff_GO@command
  5270  0A31  01A4               	clrf	setDelayOff_GO@value
  5271  0A32  0864               	movf	Sw_DimmerOffFunc@sw,w
  5272  0A33  3196  26E7  3189   	fcall	_setDelayOff_GO
  5273                           
  5274                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  5275  0A36  087B               	movf	_Sw,w
  5276  0A37  0086               	movwf	6
  5277  0A38  3001               	movlw	1	; select bank2/3
  5278  0A39  0087               	movwf	7
  5279  0A3A  3000               	movlw	0
  5280  0A3B  1B01               	btfsc	1,6
  5281  0A3C  3001               	movlw	1
  5282  0A3D  0020               	movlb	0	; select bank0
  5283  0A3E  00DD               	movwf	setRF_DimmerLights@on
  5284  0A3F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5285  0A40  3188  208E  3189   	fcall	_setRF_DimmerLights
  5286                           
  5287                           ;Switch_B1.c: 276: setTxData(1);
  5288  0A43  3001               	movlw	1
  5289  0A44  318D  2554         	fcall	_setTxData
  5290  0A46  0008               	return
  5291  0A47                     __end_of_Sw_DimmerOffFunc:	
  5292                           
  5293                           	psect	text11
  5294  11C6                     __ptext11:	
  5295 ;; *************** function _Sw_DimmerAdjFunc *****************
  5296 ;; Defined at:
  5297 ;;		line 283 in file "../src/Switch_B1.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  sw              1    wreg     unsigned char 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  sw              1    5[BANK0 ] unsigned char 
  5302 ;;  Idle            1    4[BANK0 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;		None               void
  5305 ;; Registers used:
  5306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        2 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    7
  5319 ;; This function calls:
  5320 ;;		_setDimmerLights_AdjGo
  5321 ;;		_setDimmerLights_TriggerAdj
  5322 ;;		_setRFSW_Status
  5323 ;; This function is called by:
  5324 ;;		_setSw_Main
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _Sw_DimmerAdjFunc
  5330  11C6                     _Sw_DimmerAdjFunc:	
  5331                           
  5332                           ;incstack = 0
  5333                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5334                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5335  11C6  0020               	movlb	0	; select bank0
  5336  11C7  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5337                           
  5338                           ;Switch_B1.c: 284: char Idle = 1;
  5339  11C8  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5340  11C9  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5341                           
  5342                           ;Switch_B1.c: 304: if (Idle == 1) {
  5343  11CA  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5344  11CB  3A01               	xorlw	1
  5345  11CC  1D03               	skipz
  5346  11CD  0008               	return
  5347                           
  5348                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  5349  11CE  087B               	movf	_Sw,w
  5350  11CF  0086               	movwf	6
  5351  11D0  3001               	movlw	1	; select bank2/3
  5352  11D1  0087               	movwf	7
  5353  11D2  1F81               	btfss	1,7
  5354  11D3  0008               	return
  5355                           
  5356                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  5357  11D4  087B               	movf	_Sw,w
  5358  11D5  0086               	movwf	6
  5359  11D6  3001               	movlw	1	; select bank2/3
  5360  11D7  0087               	movwf	7
  5361  11D8  1581               	bsf	1,3
  5362                           
  5363                           ;Switch_B1.c: 307: Sw->Adj = 1;
  5364  11D9  0A7B               	incf	_Sw,w
  5365  11DA  0086               	movwf	6
  5366  11DB  3001               	movlw	1	; select bank2/3
  5367  11DC  0087               	movwf	7
  5368  11DD  1401               	bsf	1,0
  5369                           
  5370                           ;Switch_B1.c: 308: Sw->Status = 1;
  5371  11DE  087B               	movf	_Sw,w
  5372  11DF  0086               	movwf	6
  5373  11E0  3001               	movlw	1	; select bank2/3
  5374  11E1  0087               	movwf	7
  5375  11E2  1701               	bsf	1,6
  5376                           
  5377                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  5378  11E3  01A2               	clrf	setRFSW_Status@command
  5379  11E4  0AA2               	incf	setRFSW_Status@command,f
  5380  11E5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5381  11E6  319D  253C  3191   	fcall	_setRFSW_Status
  5382                           
  5383                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  5384  11E9  0020               	movlb	0	; select bank0
  5385  11EA  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5386  11EB  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5387  11EC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5388  11ED  319D  25B9  3191   	fcall	_setDimmerLights_TriggerAdj
  5389                           
  5390                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  5391  11F0  0020               	movlb	0	; select bank0
  5392  11F1  01A2               	clrf	setDimmerLights_AdjGo@command
  5393  11F2  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5394  11F3  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5395  11F4  319D  25A9         	fcall	_setDimmerLights_AdjGo
  5396  11F6  0008               	return
  5397  11F7                     __end_of_Sw_DimmerAdjFunc:	
  5398                           
  5399                           	psect	text12
  5400  1DB9                     __ptext12:	
  5401 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5402 ;; Defined at:
  5403 ;;		line 711 in file "../src/Dimmer_B1.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  lights          1    wreg     unsigned char 
  5406 ;;  command         1    2[BANK0 ] unsigned char 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  lights          1    3[BANK0 ] unsigned char 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;		None               void
  5411 ;; Registers used:
  5412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    6
  5425 ;; This function calls:
  5426 ;;		_DimmerLightsPointSelect
  5427 ;; This function is called by:
  5428 ;;		_Sw_DimmerOffFunc
  5429 ;;		_Sw_DimmerAdjFunc
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _setDimmerLights_TriggerAdj
  5435  1DB9                     _setDimmerLights_TriggerAdj:	
  5436                           
  5437                           ;incstack = 0
  5438                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5439                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5440  1DB9  0020               	movlb	0	; select bank0
  5441  1DBA  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5442                           
  5443                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  5444  1DBB  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5445  1DBC  319C  2482         	fcall	_DimmerLightsPointSelect
  5446                           
  5447                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  5448  1DBE  0878               	movf	_DimmerLights,w
  5449  1DBF  3E08               	addlw	8
  5450  1DC0  0086               	movwf	6
  5451  1DC1  3001               	movlw	1	; select bank2/3
  5452  1DC2  0087               	movwf	7
  5453  1DC3  0020               	movlb	0	; select bank0
  5454  1DC4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5455  1DC5  1201               	bcf	1,4
  5456  1DC6  1D03               	skipz
  5457  1DC7  1601               	bsf	1,4
  5458  1DC8  0008               	return
  5459  1DC9                     __end_of_setDimmerLights_TriggerAdj:	
  5460                           
  5461                           	psect	text13
  5462  1DA9                     __ptext13:	
  5463 ;; *************** function _setDimmerLights_AdjGo *****************
  5464 ;; Defined at:
  5465 ;;		line 699 in file "../src/Dimmer_B1.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  lights          1    wreg     unsigned char 
  5468 ;;  command         1    2[BANK0 ] unsigned char 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  lights          1    3[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    6
  5487 ;; This function calls:
  5488 ;;		_DimmerLightsPointSelect
  5489 ;; This function is called by:
  5490 ;;		_Sw_DimmerOffFunc
  5491 ;;		_Sw_DimmerAdjFunc
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _setDimmerLights_AdjGo
  5497  1DA9                     _setDimmerLights_AdjGo:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5501                           ;setDimmerLights_AdjGo@lights stored from wreg
  5502  1DA9  0020               	movlb	0	; select bank0
  5503  1DAA  00A3               	movwf	setDimmerLights_AdjGo@lights
  5504                           
  5505                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  5506  1DAB  0823               	movf	setDimmerLights_AdjGo@lights,w
  5507  1DAC  319C  2482         	fcall	_DimmerLightsPointSelect
  5508                           
  5509                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  5510  1DAE  0878               	movf	_DimmerLights,w
  5511  1DAF  3E08               	addlw	8
  5512  1DB0  0086               	movwf	6
  5513  1DB1  3001               	movlw	1	; select bank2/3
  5514  1DB2  0087               	movwf	7
  5515  1DB3  0020               	movlb	0	; select bank0
  5516  1DB4  0822               	movf	setDimmerLights_AdjGo@command,w
  5517  1DB5  1181               	bcf	1,3
  5518  1DB6  1D03               	skipz
  5519  1DB7  1581               	bsf	1,3
  5520  1DB8  0008               	return
  5521  1DB9                     __end_of_setDimmerLights_AdjGo:	
  5522                           
  5523                           	psect	text14
  5524  1C44                     __ptext14:	
  5525 ;; *************** function _Switch_Initialization *****************
  5526 ;; Defined at:
  5527 ;;		line 37 in file "../src/Switch_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;		None               void
  5534 ;; Registers used:
  5535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;Total ram usage:        0 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    8
  5548 ;; This function calls:
  5549 ;;		_TouchPower
  5550 ;;		_setSw_Initialization
  5551 ;; This function is called by:
  5552 ;;		_main
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _Switch_Initialization
  5558  1C44                     _Switch_Initialization:	
  5559                           
  5560                           ;Switch_B1.c: 38: TouchPower();
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5564  1C44  319C  2407  319C   	fcall	_TouchPower
  5565                           
  5566                           ;Switch_B1.c: 40: WPUB1 = 0;
  5567  1C47  0024               	movlb	4	; select bank4
  5568  1C48  108D               	bcf	13,1	;volatile
  5569                           
  5570                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5571  1C49  3001               	movlw	1
  5572  1C4A  319D  2599         	fcall	_setSw_Initialization
  5573  1C4C  0008               	return
  5574  1C4D                     __end_of_Switch_Initialization:	
  5575                           
  5576                           	psect	text15
  5577  1D99                     __ptext15:	
  5578 ;; *************** function _setSw_Initialization *****************
  5579 ;; Defined at:
  5580 ;;		line 77 in file "../src/Switch_B1.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  sw              1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  sw              1    4[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        1 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    7
  5601 ;; This function calls:
  5602 ;;		_setLED
  5603 ;; This function is called by:
  5604 ;;		_Switch_Initialization
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _setSw_Initialization
  5610  1D99                     _setSw_Initialization:	
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5614                           ;setSw_Initialization@sw stored from wreg
  5615  1D99  0020               	movlb	0	; select bank0
  5616  1D9A  00A4               	movwf	setSw_Initialization@sw
  5617                           
  5618                           ;Switch_B1.c: 78: setLED(sw, 1);
  5619  1D9B  01A2               	clrf	setLED@command
  5620  1D9C  0AA2               	incf	setLED@command,f
  5621  1D9D  0824               	movf	setSw_Initialization@sw,w
  5622  1D9E  3197  2744  319D   	fcall	_setLED
  5623                           
  5624                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  5625  1DA1  0020               	movlb	0	; select bank0
  5626  1DA2  01A2               	clrf	setLED@command
  5627  1DA3  0AA2               	incf	setLED@command,f
  5628  1DA4  0824               	movf	setSw_Initialization@sw,w
  5629  1DA5  3E01               	addlw	1
  5630  1DA6  3197  2744         	fcall	_setLED
  5631  1DA8  0008               	return
  5632  1DA9                     __end_of_setSw_Initialization:	
  5633                           
  5634                           	psect	text16
  5635  1C07                     __ptext16:	
  5636 ;; *************** function _TouchPower *****************
  5637 ;; Defined at:
  5638 ;;		line 10 in file "../src/Switch_B1.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;		None               void
  5645 ;; Registers used:
  5646 ;;		None
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;Total ram usage:        0 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    5
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		_Switch_Initialization
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _TouchPower
  5668  1C07                     _TouchPower:	
  5669  1C07                     l2316:	
  5670                           ;Switch_B1.c: 11: while (RC5 == 0)
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _TouchPower: []
  5674                           
  5675  1C07  0020               	movlb	0	; select bank0
  5676  1C08  1A8E               	btfsc	14,5	;volatile
  5677  1C09  0008               	return
  5678                           
  5679                           ;Switch_B1.c: 12: RC5 = 1;
  5680  1C0A  168E               	bsf	14,5	;volatile
  5681  1C0B  2C07               	goto	l2316
  5682  1C0C                     __end_of_TouchPower:	
  5683                           
  5684                           	psect	text17
  5685  1BFF                     __ptext17:	
  5686 ;; *************** function _RF_Main *****************
  5687 ;; Defined at:
  5688 ;;		line 26 in file "../src/RF_Control_B1.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;		None
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;		None
  5693 ;; Return value:  Size  Location     Type
  5694 ;;		None               void
  5695 ;; Registers used:
  5696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;Total ram usage:        0 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:   14
  5709 ;; This function calls:
  5710 ;;		_setRF_Main
  5711 ;; This function is called by:
  5712 ;;		_main
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           
  5717                           ;psect for function _RF_Main
  5718  1BFF                     _RF_Main:	
  5719                           
  5720                           ;RF_Control_B1.c: 28: setRF_Main(1);
  5721                           
  5722                           ;incstack = 0
  5723                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5724  1BFF  3001               	movlw	1
  5725  1C00  3186  2632         	fcall	_setRF_Main
  5726  1C02  0008               	return
  5727  1C03                     __end_of_RF_Main:	
  5728                           
  5729                           	psect	text18
  5730  0632                     __ptext18:	
  5731 ;; *************** function _setRF_Main *****************
  5732 ;; Defined at:
  5733 ;;		line 64 in file "../src/RF_Control_B1.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  rf              1    wreg     unsigned char 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  rf              1   74[BANK0 ] unsigned char 
  5738 ;; Return value:  Size  Location     Type
  5739 ;;		None               void
  5740 ;; Registers used:
  5741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5751 ;;Total ram usage:        3 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:   13
  5754 ;; This function calls:
  5755 ;;		_CC2500_RxData
  5756 ;;		_CC2500_TxData
  5757 ;;		_CC2500_WriteCommand
  5758 ;;		_RF_RxDisable
  5759 ;;		_RfPointSelect
  5760 ;;		_getRxData
  5761 ;; This function is called by:
  5762 ;;		_RF_Main
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           
  5767                           ;psect for function _setRF_Main
  5768  0632                     _setRF_Main:	
  5769                           
  5770                           ;incstack = 0
  5771                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5772                           ;setRF_Main@rf stored from wreg
  5773  0632  0020               	movlb	0	; select bank0
  5774  0633  00EA               	movwf	setRF_Main@rf
  5775                           
  5776                           ;RF_Control_B1.c: 65: RfPointSelect(rf);
  5777  0634  086A               	movf	setRF_Main@rf,w
  5778  0635  319D  2520  3186   	fcall	_RfPointSelect
  5779                           
  5780                           ;RF_Control_B1.c: 66: if (RF->Enable == 1) {
  5781  0638  087A               	movf	_RF,w
  5782  0639  0086               	movwf	6
  5783  063A  0187               	clrf	7
  5784  063B  1C01               	btfss	1,0
  5785  063C  0008               	return
  5786                           
  5787                           ;RF_Control_B1.c: 69: if (Buz->GO == 0) {
  5788  063D  0021               	movlb	1	; select bank1
  5789  063E  0837               	movf	_Buz^(0+128),w
  5790  063F  0086               	movwf	6
  5791  0640  0187               	clrf	7
  5792  0641  1881               	btfsc	1,1
  5793  0642  0008               	return
  5794                           
  5795                           ;RF_Control_B1.c: 79: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5796  0643  0020               	movlb	0	; select bank0
  5797  0644  01EB               	clrf	_setRF_Main$3967
  5798  0645  0AEB               	incf	_setRF_Main$3967,f
  5799  0646  1F0C               	btfss	12,6	;volatile
  5800  0647  1A0C               	btfsc	12,4	;volatile
  5801  0648  2E4D               	goto	l6640
  5802  0649  1C0C               	btfss	12,0	;volatile
  5803  064A  188D               	btfsc	13,1	;volatile
  5804  064B  2E4D               	goto	l6640
  5805  064C  01EB               	clrf	_setRF_Main$3967
  5806  064D                     l6640:	
  5807  064D  087A               	movf	_RF,w
  5808  064E  0086               	movwf	6
  5809  064F  0187               	clrf	7
  5810  0650  086B               	movf	_setRF_Main$3967,w
  5811  0651  1381               	bcf	1,7
  5812  0652  1D03               	skipz
  5813  0653  1781               	bsf	1,7
  5814                           
  5815                           ;RF_Control_B1.c: 81: if (RF->Key == 1 && RF->Learn == 0) {
  5816  0654  087A               	movf	_RF,w
  5817  0655  0086               	movwf	6
  5818  0656  0187               	clrf	7
  5819  0657  1F81               	btfss	1,7
  5820  0658  2E66               	goto	l6650
  5821  0659  087A               	movf	_RF,w
  5822  065A  0086               	movwf	6
  5823  065B  0187               	clrf	7
  5824  065C  1B01               	btfsc	1,6
  5825  065D  2E66               	goto	l6650
  5826                           
  5827                           ;RF_Control_B1.c: 82: RF->Run = 1;
  5828  065E  0A7A               	incf	_RF,w
  5829  065F  0086               	movwf	6
  5830  0660  0187               	clrf	7
  5831  0661  1481               	bsf	1,1
  5832                           
  5833                           ;RF_Control_B1.c: 83: RF_RxDisable(1);
  5834  0662  3001               	movlw	1
  5835  0663  319F  277C         	fcall	_RF_RxDisable
  5836                           
  5837                           ;RF_Control_B1.c: 84: } else {
  5838  0665  0008               	return
  5839  0666                     l6650:	
  5840                           
  5841                           ;RF_Control_B1.c: 85: if (RF->Run == 1 && RF->Learn == 0) {
  5842  0666  0A7A               	incf	_RF,w
  5843  0667  0086               	movwf	6
  5844  0668  0187               	clrf	7
  5845  0669  1C81               	btfss	1,1
  5846  066A  2E8B               	goto	l6662
  5847  066B  087A               	movf	_RF,w
  5848  066C  0086               	movwf	6
  5849  066D  0187               	clrf	7
  5850  066E  1B01               	btfsc	1,6
  5851  066F  2E8B               	goto	l6662
  5852                           
  5853                           ;RF_Control_B1.c: 86: RF->Count++;
  5854  0670  3001               	movlw	1
  5855  0671  0020               	movlb	0	; select bank0
  5856  0672  00E9               	movwf	??_setRF_Main
  5857  0673  087A               	movf	_RF,w
  5858  0674  3E03               	addlw	3
  5859  0675  0086               	movwf	6
  5860  0676  0187               	clrf	7
  5861  0677  0869               	movf	??_setRF_Main,w
  5862  0678  0781               	addwf	1,f
  5863                           
  5864                           ;RF_Control_B1.c: 87: if (RF->Count == 5) {
  5865  0679  087A               	movf	_RF,w
  5866  067A  3E03               	addlw	3
  5867  067B  0086               	movwf	6
  5868  067C  0187               	clrf	7
  5869  067D  0801               	movf	1,w
  5870  067E  3A05               	xorlw	5
  5871  067F  1D03               	skipz
  5872  0680  0008               	return
  5873                           
  5874                           ;RF_Control_B1.c: 88: RF->Count = 0;
  5875  0681  087A               	movf	_RF,w
  5876  0682  3E03               	addlw	3
  5877  0683  0086               	movwf	6
  5878  0684  0187               	clrf	7
  5879  0685  0181               	clrf	1
  5880                           
  5881                           ;RF_Control_B1.c: 89: RF->Run = 0;
  5882  0686  0A7A               	incf	_RF,w
  5883  0687  0086               	movwf	6
  5884  0688  0187               	clrf	7
  5885  0689  1081               	bcf	1,1
  5886                           
  5887                           ;RF_Control_B1.c: 90: }
  5888                           ;RF_Control_B1.c: 91: } else {
  5889  068A  0008               	return
  5890  068B                     l6662:	
  5891                           
  5892                           ;RF_Control_B1.c: 92: RF->Count = 0;
  5893  068B  087A               	movf	_RF,w
  5894  068C  3E03               	addlw	3
  5895  068D  0086               	movwf	6
  5896  068E  0187               	clrf	7
  5897  068F  0181               	clrf	1
  5898                           
  5899                           ;RF_Control_B1.c: 93: RF->Run = 0;
  5900  0690  0A7A               	incf	_RF,w
  5901  0691  0086               	movwf	6
  5902  0692  0187               	clrf	7
  5903  0693  1081               	bcf	1,1
  5904                           
  5905                           ;RF_Control_B1.c: 95: if (RF->ReceiveGO == 1) {
  5906  0694  087A               	movf	_RF,w
  5907  0695  0086               	movwf	6
  5908  0696  0187               	clrf	7
  5909  0697  1C81               	btfss	1,1
  5910  0698  2EA8               	goto	l6676
  5911                           
  5912                           ;RF_Control_B1.c: 96: RF->ReceiveGO = 0;
  5913  0699  087A               	movf	_RF,w
  5914  069A  0086               	movwf	6
  5915  069B  0187               	clrf	7
  5916  069C  1081               	bcf	1,1
  5917                           
  5918                           ;RF_Control_B1.c: 97: CC2500_RxData();
  5919  069D  3187  2707  3186   	fcall	_CC2500_RxData
  5920                           
  5921                           ;RF_Control_B1.c: 104: getRxData(1);
  5922  06A0  3001               	movlw	1
  5923  06A1  3194  248E         	fcall	_getRxData
  5924                           
  5925                           ;RF_Control_B1.c: 107: RF->Run = 1;
  5926  06A3  0A7A               	incf	_RF,w
  5927  06A4  0086               	movwf	6
  5928  06A5  0187               	clrf	7
  5929  06A6  1481               	bsf	1,1
  5930                           
  5931                           ;RF_Control_B1.c: 108: } else {
  5932  06A7  0008               	return
  5933  06A8                     l6676:	
  5934                           
  5935                           ;RF_Control_B1.c: 109: if (RF->Learn == 0) {
  5936  06A8  087A               	movf	_RF,w
  5937  06A9  0086               	movwf	6
  5938  06AA  0187               	clrf	7
  5939  06AB  1B01               	btfsc	1,6
  5940  06AC  2EEA               	goto	l6704
  5941                           
  5942                           ;RF_Control_B1.c: 110: if (RF->TransceiveGO == 1) {
  5943  06AD  087A               	movf	_RF,w
  5944  06AE  0086               	movwf	6
  5945  06AF  0187               	clrf	7
  5946  06B0  1D01               	btfss	1,2
  5947  06B1  2ECD               	goto	l6690
  5948                           
  5949                           ;RF_Control_B1.c: 111: RF->TransceiveGO = 0;
  5950  06B2  087A               	movf	_RF,w
  5951  06B3  0086               	movwf	6
  5952  06B4  0187               	clrf	7
  5953  06B5  1101               	bcf	1,2
  5954                           
  5955                           ;RF_Control_B1.c: 112: RF->RxStatus = 0;
  5956  06B6  087A               	movf	_RF,w
  5957  06B7  0086               	movwf	6
  5958  06B8  0187               	clrf	7
  5959  06B9  1181               	bcf	1,3
  5960                           
  5961                           ;RF_Control_B1.c: 113: RF->ReceiveGO = 0;
  5962  06BA  087A               	movf	_RF,w
  5963  06BB  0086               	movwf	6
  5964  06BC  0187               	clrf	7
  5965  06BD  1081               	bcf	1,1
  5966                           
  5967                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x36);
  5968  06BE  3036               	movlw	54
  5969  06BF  319D  2569  3186   	fcall	_CC2500_WriteCommand
  5970                           
  5971                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x3B);
  5972  06C2  303B               	movlw	59
  5973  06C3  319D  2569  3186   	fcall	_CC2500_WriteCommand
  5974                           
  5975                           ;RF_Control_B1.c: 117: CC2500_TxData();
  5976  06C6  3192  22E8         	fcall	_CC2500_TxData
  5977                           
  5978                           ;RF_Control_B1.c: 118: RF->Run = 1;
  5979  06C8  0A7A               	incf	_RF,w
  5980  06C9  0086               	movwf	6
  5981  06CA  0187               	clrf	7
  5982  06CB  1481               	bsf	1,1
  5983                           
  5984                           ;RF_Control_B1.c: 119: } else {
  5985  06CC  0008               	return
  5986  06CD                     l6690:	
  5987                           
  5988                           ;RF_Control_B1.c: 121: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  5989  06CD  087A               	movf	_RF,w
  5990  06CE  0086               	movwf	6
  5991  06CF  0187               	clrf	7
  5992  06D0  1981               	btfsc	1,3
  5993  06D1  0008               	return
  5994  06D2  087A               	movf	_RF,w
  5995  06D3  0086               	movwf	6
  5996  06D4  0187               	clrf	7
  5997  06D5  1881               	btfsc	1,1
  5998  06D6  0008               	return
  5999                           
  6000                           ;RF_Control_B1.c: 122: RF->RxStatus = 1;
  6001  06D7  087A               	movf	_RF,w
  6002  06D8  0086               	movwf	6
  6003  06D9  0187               	clrf	7
  6004  06DA  1581               	bsf	1,3
  6005                           
  6006                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6007  06DB  3036               	movlw	54
  6008  06DC  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6009                           
  6010                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6011  06DF  303A               	movlw	58
  6012  06E0  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6013                           
  6014                           ;RF_Control_B1.c: 125: CC2500_WriteCommand(0x34);
  6015  06E3  3034               	movlw	52
  6016  06E4  319D  2569         	fcall	_CC2500_WriteCommand
  6017                           
  6018                           ;RF_Control_B1.c: 127: RB5 = RB5 == 1 ? 0 : 1;
  6019  06E6  3020               	movlw	32
  6020  06E7  0020               	movlb	0	; select bank0
  6021  06E8  068D               	xorwf	13,f
  6022                           
  6023                           ;RF_Control_B1.c: 128: }
  6024                           ;RF_Control_B1.c: 131: }
  6025                           ;RF_Control_B1.c: 132: } else {
  6026  06E9  0008               	return
  6027  06EA                     l6704:	
  6028                           
  6029                           ;RF_Control_B1.c: 134: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6030  06EA  087A               	movf	_RF,w
  6031  06EB  0086               	movwf	6
  6032  06EC  0187               	clrf	7
  6033  06ED  1981               	btfsc	1,3
  6034  06EE  0008               	return
  6035  06EF  087A               	movf	_RF,w
  6036  06F0  0086               	movwf	6
  6037  06F1  0187               	clrf	7
  6038  06F2  1881               	btfsc	1,1
  6039  06F3  0008               	return
  6040                           
  6041                           ;RF_Control_B1.c: 135: RF->RxStatus = 1;
  6042  06F4  087A               	movf	_RF,w
  6043  06F5  0086               	movwf	6
  6044  06F6  0187               	clrf	7
  6045  06F7  1581               	bsf	1,3
  6046                           
  6047                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6048  06F8  3036               	movlw	54
  6049  06F9  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6050                           
  6051                           ;RF_Control_B1.c: 137: CC2500_WriteCommand(0x3A);
  6052  06FC  303A               	movlw	58
  6053  06FD  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6054                           
  6055                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x34);
  6056  0700  3034               	movlw	52
  6057  0701  319D  2569         	fcall	_CC2500_WriteCommand
  6058                           
  6059                           ;RF_Control_B1.c: 140: RB5 = RB5 == 1 ? 0 : 1;
  6060  0703  3020               	movlw	32
  6061  0704  0020               	movlb	0	; select bank0
  6062  0705  068D               	xorwf	13,f
  6063  0706  0008               	return
  6064  0707                     __end_of_setRF_Main:	
  6065                           
  6066                           	psect	text19
  6067  148E                     __ptext19:	
  6068 ;; *************** function _getRxData *****************
  6069 ;; Defined at:
  6070 ;;		line 228 in file "../src/RF_Control_B1.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  rf              1    wreg     unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  rf              1   72[BANK0 ] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;		None               void
  6077 ;; Registers used:
  6078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:        1 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:   12
  6091 ;; This function calls:
  6092 ;;		_RfPointSelect
  6093 ;;		_setControl_Lights_Table
  6094 ;;		_setLog_Code
  6095 ;; This function is called by:
  6096 ;;		_setRF_Main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _getRxData
  6102  148E                     _getRxData:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6106                           ;getRxData@rf stored from wreg
  6107  148E  0020               	movlb	0	; select bank0
  6108  148F  00E8               	movwf	getRxData@rf
  6109                           
  6110                           ;RF_Control_B1.c: 229: RfPointSelect(rf);
  6111  1490  0868               	movf	getRxData@rf,w
  6112  1491  319D  2520  3194   	fcall	_RfPointSelect
  6113                           
  6114                           ;RF_Control_B1.c: 230: if (RF->Learn) {
  6115  1494  087A               	movf	_RF,w
  6116  1495  0086               	movwf	6
  6117  1496  0187               	clrf	7
  6118  1497  1F01               	btfss	1,6
  6119  1498  2CA5               	goto	l6114
  6120                           
  6121                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6122  1499  0021               	movlb	1	; select bank1
  6123  149A  08A0               	movf	_RF_Data^(0+128),f
  6124  149B  1D03               	skipz
  6125  149C  0008               	return
  6126  149D  0821               	movf	(_RF_Data^(0+128)+1),w
  6127  149E  3A64               	xorlw	100
  6128  149F  1D03               	skipz
  6129  14A0  0008               	return
  6130                           
  6131                           ;RF_Control_B1.c: 232: {
  6132                           ;RF_Control_B1.c: 233: setLog_Code(1);
  6133  14A1  3001               	movlw	1
  6134  14A2  3193  23FC         	fcall	_setLog_Code
  6135                           
  6136                           ;RF_Control_B1.c: 234: }
  6137                           ;RF_Control_B1.c: 235: } else {
  6138  14A4  0008               	return
  6139  14A5                     l6114:	
  6140                           
  6141                           ;RF_Control_B1.c: 236: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6142  14A5  0021               	movlb	1	; select bank1
  6143  14A6  08A0               	movf	_RF_Data^(0+128),f
  6144  14A7  1D03               	skipz
  6145  14A8  0008               	return
  6146  14A9  0821               	movf	(_RF_Data^(0+128)+1),w
  6147  14AA  3A02               	xorlw	2
  6148  14AB  1D03               	skipz
  6149  14AC  0008               	return
  6150                           
  6151                           ;RF_Control_B1.c: 237: {
  6152                           ;RF_Control_B1.c: 238: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6153  14AD  082C               	movf	(_RF_Data^(0+128)+12),w
  6154  14AE  3AFF               	xorlw	255
  6155  14AF  1D03               	skipz
  6156  14B0  2CBB               	goto	l6126
  6157  14B1  082D               	movf	(_RF_Data^(0+128)+13),w
  6158  14B2  3AFF               	xorlw	255
  6159  14B3  1D03               	skipz
  6160  14B4  2CBB               	goto	l6126
  6161  14B5  082E               	movf	(_RF_Data^(0+128)+14),w
  6162  14B6  3AFF               	xorlw	255
  6163  14B7  1D03               	skipz
  6164  14B8  2CBB               	goto	l6126
  6165                           
  6166                           ;RF_Control_B1.c: 239: __nop();
  6167  14B9  0000               	nop
  6168                           
  6169                           ;RF_Control_B1.c: 240: } else {
  6170  14BA  0008               	return
  6171  14BB                     l6126:	
  6172                           
  6173                           ;RF_Control_B1.c: 241: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6174  14BB  087D               	movf	_product,w
  6175  14BC  3E0C               	addlw	12
  6176  14BD  0086               	movwf	6
  6177  14BE  3001               	movlw	1	; select bank2/3
  6178  14BF  0087               	movwf	7
  6179  14C0  0021               	movlb	1	; select bank1
  6180  14C1  082C               	movf	(_RF_Data^(0+128)+12),w
  6181  14C2  0601               	xorwf	1,w
  6182  14C3  1D03               	skipz
  6183  14C4  0008               	return
  6184  14C5  087D               	movf	_product,w
  6185  14C6  3E0D               	addlw	13
  6186  14C7  0086               	movwf	6
  6187  14C8  3001               	movlw	1	; select bank2/3
  6188  14C9  0087               	movwf	7
  6189  14CA  082D               	movf	(_RF_Data^(0+128)+13),w
  6190  14CB  0601               	xorwf	1,w
  6191  14CC  1D03               	skipz
  6192  14CD  0008               	return
  6193  14CE  087D               	movf	_product,w
  6194  14CF  3E0E               	addlw	14
  6195  14D0  0086               	movwf	6
  6196  14D1  3001               	movlw	1	; select bank2/3
  6197  14D2  0087               	movwf	7
  6198  14D3  082E               	movf	(_RF_Data^(0+128)+14),w
  6199  14D4  0601               	xorwf	1,w
  6200  14D5  1D03               	skipz
  6201  14D6  0008               	return
  6202                           
  6203                           ;RF_Control_B1.c: 242: setControl_Lights_Table(1);
  6204  14D7  3001               	movlw	1
  6205  14D8  3189  2168         	fcall	_setControl_Lights_Table
  6206                           
  6207                           ;RF_Control_B1.c: 249: {
  6208                           ;RF_Control_B1.c: 250: ;
  6209                           
  6210                           ;RF_Control_B1.c: 246: {
  6211                           ;RF_Control_B1.c: 247: ;
  6212                           ;RF_Control_B1.c: 248: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6213                           
  6214                           ;RF_Control_B1.c: 243: }
  6215                           ;RF_Control_B1.c: 244: }
  6216                           ;RF_Control_B1.c: 245: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6217  14DA  0008               	return
  6218  14DB                     __end_of_getRxData:	
  6219                           
  6220                           	psect	text20
  6221  13FC                     __ptext20:	
  6222 ;; *************** function _setLog_Code *****************
  6223 ;; Defined at:
  6224 ;;		line 260 in file "../src/RF_Control_B1.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  rf              1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  rf              1   14[BANK0 ] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;		None               void
  6231 ;; Registers used:
  6232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;Total ram usage:        2 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    7
  6245 ;; This function calls:
  6246 ;;		_RfPointSelect
  6247 ;;		_setBuz
  6248 ;; This function is called by:
  6249 ;;		_getRxData
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _setLog_Code
  6255  13FC                     _setLog_Code:	
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6259                           ;setLog_Code@rf stored from wreg
  6260  13FC  0020               	movlb	0	; select bank0
  6261  13FD  00AE               	movwf	setLog_Code@rf
  6262                           
  6263                           ;RF_Control_B1.c: 261: RfPointSelect(rf);
  6264  13FE  082E               	movf	setLog_Code@rf,w
  6265  13FF  319D  2520  3193   	fcall	_RfPointSelect
  6266                           
  6267                           ;RF_Control_B1.c: 262: product->Data[12]=RF_Data[12];
  6268  1402  0021               	movlb	1	; select bank1
  6269  1403  082C               	movf	(_RF_Data^(0+128)+12),w
  6270  1404  0020               	movlb	0	; select bank0
  6271  1405  00AD               	movwf	??_setLog_Code
  6272  1406  087D               	movf	_product,w
  6273  1407  3E0C               	addlw	12
  6274  1408  0086               	movwf	6
  6275  1409  3001               	movlw	1	; select bank2/3
  6276  140A  0087               	movwf	7
  6277  140B  082D               	movf	??_setLog_Code,w
  6278  140C  0081               	movwf	1
  6279                           
  6280                           ;RF_Control_B1.c: 263: product->Data[13]=RF_Data[13];
  6281  140D  0021               	movlb	1	; select bank1
  6282  140E  082D               	movf	(_RF_Data^(0+128)+13),w
  6283  140F  0020               	movlb	0	; select bank0
  6284  1410  00AD               	movwf	??_setLog_Code
  6285  1411  087D               	movf	_product,w
  6286  1412  3E0D               	addlw	13
  6287  1413  0086               	movwf	6
  6288  1414  3001               	movlw	1	; select bank2/3
  6289  1415  0087               	movwf	7
  6290  1416  082D               	movf	??_setLog_Code,w
  6291  1417  0081               	movwf	1
  6292                           
  6293                           ;RF_Control_B1.c: 264: product->Data[14]=RF_Data[14];
  6294  1418  0021               	movlb	1	; select bank1
  6295  1419  082E               	movf	(_RF_Data^(0+128)+14),w
  6296  141A  0020               	movlb	0	; select bank0
  6297  141B  00AD               	movwf	??_setLog_Code
  6298  141C  087D               	movf	_product,w
  6299  141D  3E0E               	addlw	14
  6300  141E  0086               	movwf	6
  6301  141F  3001               	movlw	1	; select bank2/3
  6302  1420  0087               	movwf	7
  6303  1421  082D               	movf	??_setLog_Code,w
  6304  1422  0081               	movwf	1
  6305                           
  6306                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  6307  1423  3064               	movlw	100
  6308  1424  00A9               	movwf	setBuz@time
  6309  1425  3000               	movlw	0
  6310  1426  00AA               	movwf	setBuz@time+1
  6311  1427  3001               	movlw	1
  6312  1428  318C  243C  3193   	fcall	_setBuz
  6313                           
  6314                           ;RF_Control_B1.c: 266: RF->Learn = 0;
  6315  142B  087A               	movf	_RF,w
  6316  142C  0086               	movwf	6
  6317  142D  0187               	clrf	7
  6318  142E  1301               	bcf	1,6
  6319                           
  6320                           ;RF_Control_B1.c: 267: if (myMain->First) {
  6321  142F  0021               	movlb	1	; select bank1
  6322  1430  086E               	movf	_myMain^(0+128),w
  6323  1431  0086               	movwf	6
  6324  1432  3001               	movlw	1	; select bank2/3
  6325  1433  0087               	movwf	7
  6326  1434  1F81               	btfss	1,7
  6327  1435  2C3C               	goto	l1963
  6328                           
  6329                           ;RF_Control_B1.c: 268: Memory->LoopSave=1;
  6330  1436  086F               	movf	_Memory^(0+128),w
  6331  1437  3E24               	addlw	36
  6332  1438  0086               	movwf	6
  6333  1439  3001               	movlw	1	; select bank2/3
  6334  143A  0087               	movwf	7
  6335  143B  1501               	bsf	1,2
  6336  143C                     l1963:	
  6337                           
  6338                           ;RF_Control_B1.c: 269: }
  6339                           ;RF_Control_B1.c: 270: Memory->Modify=1;
  6340  143C  086F               	movf	_Memory^(0+128),w
  6341  143D  3E24               	addlw	36
  6342  143E  0086               	movwf	6
  6343  143F  3001               	movlw	1	; select bank2/3
  6344  1440  0087               	movwf	7
  6345  1441  1401               	bsf	1,0
  6346  1442  0008               	return
  6347  1443                     __end_of_setLog_Code:	
  6348                           
  6349                           	psect	text21
  6350  0968                     __ptext21:	
  6351 ;; *************** function _setControl_Lights_Table *****************
  6352 ;; Defined at:
  6353 ;;		line 274 in file "../src/RF_Control_B1.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  rf              1    wreg     unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  rf              1   71[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;		None               void
  6360 ;; Registers used:
  6361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        1 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:   11
  6374 ;; This function calls:
  6375 ;;		_RfPointSelect
  6376 ;;		_setBuz
  6377 ;;		_setDimmerLights
  6378 ;;		_setRFSW_AdjControl
  6379 ;;		_setRFSW_Control
  6380 ;;		_setRFSW_Status
  6381 ;;		_setSw_Status
  6382 ;;		_setTxData
  6383 ;; This function is called by:
  6384 ;;		_getRxData
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _setControl_Lights_Table
  6390  0968                     _setControl_Lights_Table:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6394                           ;setControl_Lights_Table@rf stored from wreg
  6395  0968  0020               	movlb	0	; select bank0
  6396  0969  00E7               	movwf	setControl_Lights_Table@rf
  6397                           
  6398                           ;RF_Control_B1.c: 275: RfPointSelect(rf);
  6399  096A  0867               	movf	setControl_Lights_Table@rf,w
  6400  096B  319D  2520  3189   	fcall	_RfPointSelect
  6401                           
  6402                           ;RF_Control_B1.c: 276: if (RF_Data[15] == 0x00) {
  6403  096E  0021               	movlb	1	; select bank1
  6404  096F  08AF               	movf	(_RF_Data^(0+128)+15),f
  6405  0970  1D03               	skipz
  6406  0971  29A9               	goto	l5868
  6407                           
  6408                           ;RF_Control_B1.c: 278: setDimmerLights(1, 0);
  6409  0972  0020               	movlb	0	; select bank0
  6410  0973  01A4               	clrf	setDimmerLights@status
  6411  0974  3001               	movlw	1
  6412  0975  318B  2334  3189   	fcall	_setDimmerLights
  6413                           
  6414                           ;RF_Control_B1.c: 279: setRFSW_Status(1, 0);
  6415  0978  0020               	movlb	0	; select bank0
  6416  0979  01A2               	clrf	setRFSW_Status@command
  6417  097A  3001               	movlw	1
  6418  097B  319D  253C  3189   	fcall	_setRFSW_Status
  6419                           
  6420                           ;RF_Control_B1.c: 280: setSw_Status(1, 0);
  6421  097E  0020               	movlb	0	; select bank0
  6422  097F  01A2               	clrf	setSw_Status@command
  6423  0980  3001               	movlw	1
  6424  0981  319D  254B  3189   	fcall	_setSw_Status
  6425                           
  6426                           ;RF_Control_B1.c: 293: product->Data[9]=0;
  6427  0984  087D               	movf	_product,w
  6428  0985  3E09               	addlw	9
  6429  0986  0086               	movwf	6
  6430  0987  3001               	movlw	1	; select bank2/3
  6431  0988  0087               	movwf	7
  6432  0989  0181               	clrf	1
  6433                           
  6434                           ;RF_Control_B1.c: 294: product->Data[11]=0;
  6435  098A  087D               	movf	_product,w
  6436  098B  3E0B               	addlw	11
  6437  098C  0086               	movwf	6
  6438  098D  3001               	movlw	1	; select bank2/3
  6439  098E  0087               	movwf	7
  6440  098F  0181               	clrf	1
  6441                           
  6442                           ;RF_Control_B1.c: 295: product->Data[15]=0;
  6443  0990  087D               	movf	_product,w
  6444  0991  3E0F               	addlw	15
  6445  0992  0086               	movwf	6
  6446  0993  3001               	movlw	1	; select bank2/3
  6447  0994  0087               	movwf	7
  6448  0995  0181               	clrf	1
  6449                           
  6450                           ;RF_Control_B1.c: 296: product->Data[17]=0;
  6451  0996  087D               	movf	_product,w
  6452  0997  3E11               	addlw	17
  6453  0998  0086               	movwf	6
  6454  0999  3001               	movlw	1	; select bank2/3
  6455  099A  0087               	movwf	7
  6456  099B  0181               	clrf	1
  6457                           
  6458                           ;RF_Control_B1.c: 297: setBuz(1, 100);
  6459  099C  3064               	movlw	100
  6460  099D  0020               	movlb	0	; select bank0
  6461  099E  00A9               	movwf	setBuz@time
  6462  099F  3000               	movlw	0
  6463  09A0  00AA               	movwf	setBuz@time+1
  6464  09A1  3001               	movlw	1
  6465  09A2  318C  243C  3189   	fcall	_setBuz
  6466                           
  6467                           ;RF_Control_B1.c: 298: setTxData(1);
  6468  09A5  3001               	movlw	1
  6469  09A6  318D  2554         	fcall	_setTxData
  6470                           
  6471                           ;RF_Control_B1.c: 299: } else if (RF_Data[15] == 0x20) {
  6472  09A8  0008               	return
  6473  09A9                     l5868:	
  6474  09A9  0021               	movlb	1	; select bank1
  6475  09AA  082F               	movf	(_RF_Data^(0+128)+15),w
  6476  09AB  3A20               	xorlw	32
  6477  09AC  1D03               	skipz
  6478  09AD  29C4               	goto	l5874
  6479                           
  6480                           ;RF_Control_B1.c: 300: product->Data[9]=0;
  6481  09AE  087D               	movf	_product,w
  6482  09AF  3E09               	addlw	9
  6483  09B0  0086               	movwf	6
  6484  09B1  3001               	movlw	1	; select bank2/3
  6485  09B2  0087               	movwf	7
  6486  09B3  0181               	clrf	1
  6487                           
  6488                           ;RF_Control_B1.c: 301: product->Data[11]=0;
  6489  09B4  087D               	movf	_product,w
  6490  09B5  3E0B               	addlw	11
  6491  09B6  0086               	movwf	6
  6492  09B7  3001               	movlw	1	; select bank2/3
  6493  09B8  0087               	movwf	7
  6494  09B9  0181               	clrf	1
  6495                           
  6496                           ;RF_Control_B1.c: 302: product->Data[17]=0;
  6497  09BA  087D               	movf	_product,w
  6498  09BB  3E11               	addlw	17
  6499  09BC  0086               	movwf	6
  6500  09BD  3001               	movlw	1	; select bank2/3
  6501  09BE  0087               	movwf	7
  6502  09BF  0181               	clrf	1
  6503                           
  6504                           ;RF_Control_B1.c: 303: setTxData(1);
  6505  09C0  3001               	movlw	1
  6506  09C1  318D  2554         	fcall	_setTxData
  6507                           
  6508                           ;RF_Control_B1.c: 304: }
  6509  09C3  0008               	return
  6510  09C4                     l5874:	
  6511                           
  6512                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x01) {
  6513  09C4  0021               	movlb	1	; select bank1
  6514  09C5  082F               	movf	(_RF_Data^(0+128)+15),w
  6515  09C6  3A01               	xorlw	1
  6516  09C7  1D03               	skipz
  6517  09C8  29CD               	goto	l5878
  6518                           
  6519                           ;RF_Control_B1.c: 307: setRFSW_Control(1);
  6520  09C9  3001               	movlw	1
  6521  09CA  318C  24C4         	fcall	_setRFSW_Control
  6522                           
  6523                           ;RF_Control_B1.c: 308: }
  6524  09CC  0008               	return
  6525  09CD                     l5878:	
  6526                           
  6527                           ;RF_Control_B1.c: 310: else if (RF_Data[15] == 0x11) {
  6528  09CD  0021               	movlb	1	; select bank1
  6529  09CE  082F               	movf	(_RF_Data^(0+128)+15),w
  6530  09CF  3A11               	xorlw	17
  6531  09D0  1D03               	skipz
  6532  09D1  0008               	return
  6533                           
  6534                           ;RF_Control_B1.c: 311: setRFSW_AdjControl(1);
  6535  09D2  3001               	movlw	1
  6536  09D3  3192  22A8         	fcall	_setRFSW_AdjControl
  6537  09D5  0008               	return
  6538  09D6                     __end_of_setControl_Lights_Table:	
  6539                           
  6540                           	psect	text22
  6541  0CC4                     __ptext22:	
  6542 ;; *************** function _setRFSW_Control *****************
  6543 ;; Defined at:
  6544 ;;		line 359 in file "../src/RF_Control_B1.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;  sw              1    wreg     unsigned char 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  sw              1   67[BANK0 ] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;Total ram usage:        2 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    9
  6565 ;; This function calls:
  6566 ;;		_RfSWPointSelect
  6567 ;;		_setBuz
  6568 ;;		_setDelayOff_GO
  6569 ;;		_setDimmerLights_Switch
  6570 ;;		_setDimmerLights_Trigger
  6571 ;;		_setRF_DimmerLights
  6572 ;;		_setSw_Status
  6573 ;;		_setTxData
  6574 ;; This function is called by:
  6575 ;;		_setControl_Lights_Table
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _setRFSW_Control
  6581  0CC4                     _setRFSW_Control:	
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6585                           ;setRFSW_Control@sw stored from wreg
  6586  0CC4  0020               	movlb	0	; select bank0
  6587  0CC5  00E3               	movwf	setRFSW_Control@sw
  6588                           
  6589                           ;RF_Control_B1.c: 360: RfSWPointSelect(sw);
  6590  0CC6  0863               	movf	setRFSW_Control@sw,w
  6591  0CC7  319C  24BC  318C   	fcall	_RfSWPointSelect
  6592                           
  6593                           ;RF_Control_B1.c: 361: if (!RFSW->Status) {
  6594  0CCA  0021               	movlb	1	; select bank1
  6595  0CCB  083F               	movf	_RFSW^(0+128),w
  6596  0CCC  0086               	movwf	6
  6597  0CCD  0187               	clrf	7
  6598  0CCE  1801               	btfsc	1,0
  6599  0CCF  2D05               	goto	l5728
  6600                           
  6601                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  6602  0CD0  0830               	movf	(_RF_Data^(0+128)+16),w
  6603  0CD1  3A80               	xorlw	128
  6604  0CD2  1D03               	skipz
  6605  0CD3  2CE1               	goto	l5718
  6606                           
  6607                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  6608  0CD4  0020               	movlb	0	; select bank0
  6609  0CD5  01A3               	clrf	setDelayOff_GO@command
  6610  0CD6  0AA3               	incf	setDelayOff_GO@command,f
  6611  0CD7  0021               	movlb	1	; select bank1
  6612  0CD8  0831               	movf	(_RF_Data^(0+128)+17),w
  6613  0CD9  0020               	movlb	0	; select bank0
  6614  0CDA  00E2               	movwf	??_setRFSW_Control
  6615  0CDB  0862               	movf	??_setRFSW_Control,w
  6616  0CDC  00A4               	movwf	setDelayOff_GO@value
  6617  0CDD  0863               	movf	setRFSW_Control@sw,w
  6618  0CDE  3196  26E7  318C   	fcall	_setDelayOff_GO
  6619  0CE1                     l5718:	
  6620                           
  6621                           ;RF_Control_B1.c: 364: }
  6622                           ;RF_Control_B1.c: 365: RFSW->Status = 1;
  6623  0CE1  0021               	movlb	1	; select bank1
  6624  0CE2  083F               	movf	_RFSW^(0+128),w
  6625  0CE3  0086               	movwf	6
  6626  0CE4  0187               	clrf	7
  6627  0CE5  1401               	bsf	1,0
  6628                           
  6629                           ;RF_Control_B1.c: 366: setSw_Status(sw, 1);
  6630  0CE6  0020               	movlb	0	; select bank0
  6631  0CE7  01A2               	clrf	setSw_Status@command
  6632  0CE8  0AA2               	incf	setSw_Status@command,f
  6633  0CE9  0863               	movf	setRFSW_Control@sw,w
  6634  0CEA  319D  254B  318C   	fcall	_setSw_Status
  6635                           
  6636                           ;RF_Control_B1.c: 368: setDimmerLights_Trigger(sw, 1);
  6637  0CED  0020               	movlb	0	; select bank0
  6638  0CEE  01A2               	clrf	setDimmerLights_Trigger@command
  6639  0CEF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6640  0CF0  0863               	movf	setRFSW_Control@sw,w
  6641  0CF1  319D  2589  318C   	fcall	_setDimmerLights_Trigger
  6642                           
  6643                           ;RF_Control_B1.c: 369: setDimmerLights_Switch(sw, 1);
  6644  0CF4  0020               	movlb	0	; select bank0
  6645  0CF5  01A2               	clrf	setDimmerLights_Switch@command
  6646  0CF6  0AA2               	incf	setDimmerLights_Switch@command,f
  6647  0CF7  0863               	movf	setRFSW_Control@sw,w
  6648  0CF8  319D  2579  318C   	fcall	_setDimmerLights_Switch
  6649                           
  6650                           ;RF_Control_B1.c: 371: setRF_DimmerLights(sw, RFSW->Status);
  6651  0CFB  0021               	movlb	1	; select bank1
  6652  0CFC  083F               	movf	_RFSW^(0+128),w
  6653  0CFD  0086               	movwf	6
  6654  0CFE  0187               	clrf	7
  6655  0CFF  3000               	movlw	0
  6656  0D00  1801               	btfsc	1,0
  6657  0D01  3001               	movlw	1
  6658  0D02  0020               	movlb	0	; select bank0
  6659  0D03  00DD               	movwf	setRF_DimmerLights@on
  6660  0D04  2D43               	goto	L1
  6661  0D05                     l5728:	
  6662                           ;RF_Control_B1.c: 372: } else {
  6663                           
  6664                           
  6665                           ;RF_Control_B1.c: 373: if (RF_Data[16] == 0x80) {
  6666  0D05  0021               	movlb	1	; select bank1
  6667  0D06  0830               	movf	(_RF_Data^(0+128)+16),w
  6668  0D07  3A80               	xorlw	128
  6669  0D08  1D03               	skipz
  6670  0D09  2D1B               	goto	l5734
  6671                           
  6672                           ;RF_Control_B1.c: 374: setDelayOff_GO(sw, 1, RF_Data[17]);
  6673  0D0A  0020               	movlb	0	; select bank0
  6674  0D0B  01A3               	clrf	setDelayOff_GO@command
  6675  0D0C  0AA3               	incf	setDelayOff_GO@command,f
  6676  0D0D  0021               	movlb	1	; select bank1
  6677  0D0E  0831               	movf	(_RF_Data^(0+128)+17),w
  6678  0D0F  0020               	movlb	0	; select bank0
  6679  0D10  00E2               	movwf	??_setRFSW_Control
  6680  0D11  0862               	movf	??_setRFSW_Control,w
  6681  0D12  00A4               	movwf	setDelayOff_GO@value
  6682  0D13  0863               	movf	setRFSW_Control@sw,w
  6683  0D14  3196  26E7  318C   	fcall	_setDelayOff_GO
  6684                           
  6685                           ;RF_Control_B1.c: 375: setRF_DimmerLights(sw, 1);
  6686  0D17  0020               	movlb	0	; select bank0
  6687  0D18  01DD               	clrf	setRF_DimmerLights@on
  6688  0D19  0ADD               	incf	setRF_DimmerLights@on,f
  6689  0D1A  2D43               	goto	L1
  6690  0D1B                     l5734:	
  6691                           ;RF_Control_B1.c: 376: } else {
  6692                           
  6693                           
  6694                           ;RF_Control_B1.c: 377: RFSW->Status = 0;
  6695  0D1B  0021               	movlb	1	; select bank1
  6696  0D1C  083F               	movf	_RFSW^(0+128),w
  6697  0D1D  0086               	movwf	6
  6698  0D1E  0187               	clrf	7
  6699  0D1F  1001               	bcf	1,0
  6700                           
  6701                           ;RF_Control_B1.c: 378: setSw_Status(sw, 0);
  6702  0D20  0020               	movlb	0	; select bank0
  6703  0D21  01A2               	clrf	setSw_Status@command
  6704  0D22  0863               	movf	setRFSW_Control@sw,w
  6705  0D23  319D  254B  318C   	fcall	_setSw_Status
  6706                           
  6707                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw, 1);
  6708  0D26  0020               	movlb	0	; select bank0
  6709  0D27  01A2               	clrf	setDimmerLights_Trigger@command
  6710  0D28  0AA2               	incf	setDimmerLights_Trigger@command,f
  6711  0D29  0863               	movf	setRFSW_Control@sw,w
  6712  0D2A  319D  2589  318C   	fcall	_setDimmerLights_Trigger
  6713                           
  6714                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw, RFSW->Status);
  6715  0D2D  0021               	movlb	1	; select bank1
  6716  0D2E  083F               	movf	_RFSW^(0+128),w
  6717  0D2F  0086               	movwf	6
  6718  0D30  0187               	clrf	7
  6719  0D31  3000               	movlw	0
  6720  0D32  1801               	btfsc	1,0
  6721  0D33  3001               	movlw	1
  6722  0D34  0020               	movlb	0	; select bank0
  6723  0D35  00A2               	movwf	setDimmerLights_Switch@command
  6724  0D36  0863               	movf	setRFSW_Control@sw,w
  6725  0D37  319D  2579  318C   	fcall	_setDimmerLights_Switch
  6726                           
  6727                           ;RF_Control_B1.c: 383: setDelayOff_GO(sw, 0, 0);
  6728  0D3A  0020               	movlb	0	; select bank0
  6729  0D3B  01A3               	clrf	setDelayOff_GO@command
  6730  0D3C  01A4               	clrf	setDelayOff_GO@value
  6731  0D3D  0863               	movf	setRFSW_Control@sw,w
  6732  0D3E  3196  26E7  318C   	fcall	_setDelayOff_GO
  6733                           
  6734                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw, 0);
  6735  0D41  0020               	movlb	0	; select bank0
  6736  0D42  01DD               	clrf	setRF_DimmerLights@on
  6737  0D43                     L1:	
  6738  0D43  0863               	movf	setRFSW_Control@sw,w
  6739  0D44  3188  208E  318C   	fcall	_setRF_DimmerLights
  6740                           
  6741                           ;RF_Control_B1.c: 385: }
  6742                           ;RF_Control_B1.c: 386: }
  6743                           ;RF_Control_B1.c: 387: setBuz(1, 100);
  6744  0D47  3064               	movlw	100
  6745  0D48  0020               	movlb	0	; select bank0
  6746  0D49  00A9               	movwf	setBuz@time
  6747  0D4A  3000               	movlw	0
  6748  0D4B  00AA               	movwf	setBuz@time+1
  6749  0D4C  3001               	movlw	1
  6750  0D4D  318C  243C  318C   	fcall	_setBuz
  6751                           
  6752                           ;RF_Control_B1.c: 388: setTxData(1);
  6753  0D50  3001               	movlw	1
  6754  0D51  318D  2554         	fcall	_setTxData
  6755  0D53  0008               	return
  6756  0D54                     __end_of_setRFSW_Control:	
  6757                           
  6758                           	psect	text23
  6759  16E7                     __ptext23:	
  6760 ;; *************** function _setDelayOff_GO *****************
  6761 ;; Defined at:
  6762 ;;		line 85 in file "../src/DelayOff_B1.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  sw              1    wreg     unsigned char 
  6765 ;;  command         1    3[BANK0 ] unsigned char 
  6766 ;;  value           1    4[BANK0 ] unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  sw              1    7[BANK0 ] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        5 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    6
  6785 ;; This function calls:
  6786 ;;		_DelayOffPointSelect
  6787 ;;		_DelayTimejudge
  6788 ;; This function is called by:
  6789 ;;		_setRFSW_Control
  6790 ;;		_Sw_DimmerOffFunc
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _setDelayOff_GO
  6796  16E7                     _setDelayOff_GO:	
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6800                           ;setDelayOff_GO@sw stored from wreg
  6801  16E7  0020               	movlb	0	; select bank0
  6802  16E8  00A7               	movwf	setDelayOff_GO@sw
  6803                           
  6804                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6805  16E9  0827               	movf	setDelayOff_GO@sw,w
  6806  16EA  319C  24B0  3196   	fcall	_DelayOffPointSelect
  6807                           
  6808                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6809  16ED  0021               	movlb	1	; select bank1
  6810  16EE  0839               	movf	_DelayOff^(0+128),w
  6811  16EF  0086               	movwf	6
  6812  16F0  0187               	clrf	7
  6813  16F1  1C01               	btfss	1,0
  6814  16F2  0008               	return
  6815                           
  6816                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6817  16F3  0839               	movf	_DelayOff^(0+128),w
  6818  16F4  0086               	movwf	6
  6819  16F5  0187               	clrf	7
  6820  16F6  0020               	movlb	0	; select bank0
  6821  16F7  0823               	movf	setDelayOff_GO@command,w
  6822  16F8  1081               	bcf	1,1
  6823  16F9  1D03               	skipz
  6824  16FA  1481               	bsf	1,1
  6825                           
  6826                           ;DelayOff_B1.c: 89: if (command == 1) {
  6827  16FB  0823               	movf	setDelayOff_GO@command,w
  6828  16FC  3A01               	xorlw	1
  6829  16FD  1D03               	skipz
  6830  16FE  2F2A               	goto	l5544
  6831                           
  6832                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6833  16FF  0824               	movf	setDelayOff_GO@value,w
  6834  1700  3191  213B  3196   	fcall	_DelayTimejudge
  6835  1703  0020               	movlb	0	; select bank0
  6836  1704  00A5               	movwf	??_setDelayOff_GO
  6837  1705  0021               	movlb	1	; select bank1
  6838  1706  0A39               	incf	_DelayOff^(0+128),w
  6839  1707  0086               	movwf	6
  6840  1708  0187               	clrf	7
  6841  1709  0020               	movlb	0	; select bank0
  6842  170A  0825               	movf	??_setDelayOff_GO,w
  6843  170B  0081               	movwf	1
  6844                           
  6845                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6846  170C  300F               	movlw	15
  6847  170D  0524               	andwf	setDelayOff_GO@value,w
  6848  170E  00A5               	movwf	??_setDelayOff_GO
  6849  170F  0825               	movf	??_setDelayOff_GO,w
  6850  1710  3A05               	xorlw	5
  6851  1711  1903               	skipnz
  6852  1712  2F17               	goto	l5538
  6853  1713  0824               	movf	setDelayOff_GO@value,w
  6854  1714  390F               	andlw	15
  6855  1715  1D03               	btfss	3,2
  6856  1716  2F1D               	goto	l5542
  6857  1717                     l5538:	
  6858  1717  3026               	movlw	38
  6859  1718  0224               	subwf	setDelayOff_GO@value,w
  6860  1719  1803               	skipnc
  6861  171A  2F1D               	goto	l5542
  6862                           
  6863                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6864  171B  0824               	movf	setDelayOff_GO@value,w
  6865  171C  2F1E               	goto	L2
  6866  171D                     l5542:	
  6867                           ;DelayOff_B1.c: 93: } else {
  6868                           
  6869                           
  6870                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6871  171D  3005               	movlw	5
  6872  171E                     L2:	
  6873  171E  00A5               	movwf	??_setDelayOff_GO
  6874  171F  0827               	movf	setDelayOff_GO@sw,w
  6875  1720  3E1A               	addlw	26
  6876  1721  077D               	addwf	_product,w
  6877  1722  00A6               	movwf	??_setDelayOff_GO+1
  6878  1723  0826               	movf	??_setDelayOff_GO+1,w
  6879  1724  0086               	movwf	6
  6880  1725  3001               	movlw	1	; select bank2/3
  6881  1726  0087               	movwf	7
  6882  1727  0825               	movf	??_setDelayOff_GO,w
  6883  1728  0081               	movwf	1
  6884                           
  6885                           ;DelayOff_B1.c: 95: }
  6886                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6887  1729  2F36               	goto	l5548
  6888  172A                     l5544:	
  6889  172A  08A3               	movf	setDelayOff_GO@command,f
  6890  172B  1D03               	skipz
  6891  172C  2F36               	goto	l5548
  6892                           
  6893                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6894  172D  0827               	movf	setDelayOff_GO@sw,w
  6895  172E  3E1A               	addlw	26
  6896  172F  077D               	addwf	_product,w
  6897  1730  00A5               	movwf	??_setDelayOff_GO
  6898  1731  0825               	movf	??_setDelayOff_GO,w
  6899  1732  0086               	movwf	6
  6900  1733  3001               	movlw	1	; select bank2/3
  6901  1734  0087               	movwf	7
  6902  1735  0181               	clrf	1
  6903  1736                     l5548:	
  6904                           
  6905                           ;DelayOff_B1.c: 98: }
  6906                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6907  1736  0021               	movlb	1	; select bank1
  6908  1737  0839               	movf	_DelayOff^(0+128),w
  6909  1738  3E02               	addlw	2
  6910  1739  0086               	movwf	6
  6911  173A  0187               	clrf	7
  6912  173B  3000               	movlw	0
  6913  173C  3FC0               	movwi [0]fsr1
  6914  173D  3FC1               	movwi [1]fsr1
  6915                           
  6916                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6917  173E  0839               	movf	_DelayOff^(0+128),w
  6918  173F  3E04               	addlw	4
  6919  1740  0086               	movwf	6
  6920  1741  0187               	clrf	7
  6921  1742  0181               	clrf	1
  6922  1743  0008               	return
  6923  1744                     __end_of_setDelayOff_GO:	
  6924                           
  6925                           	psect	text24
  6926  113B                     __ptext24:	
  6927 ;; *************** function _DelayTimejudge *****************
  6928 ;; Defined at:
  6929 ;;		line 105 in file "../src/DelayOff_B1.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  value           1    wreg     unsigned char 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;  value           1    1[BANK0 ] unsigned char 
  6934 ;;  i               1    2[BANK0 ] unsigned char 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      unsigned char 
  6937 ;; Registers used:
  6938 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;Total ram usage:        3 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    5
  6951 ;; This function calls:
  6952 ;;		Nothing
  6953 ;; This function is called by:
  6954 ;;		_setDelayOff_GO
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           
  6959                           ;psect for function _DelayTimejudge
  6960  113B                     _DelayTimejudge:	
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  6964                           ;DelayTimejudge@value stored from wreg
  6965  113B  0020               	movlb	0	; select bank0
  6966  113C  00A1               	movwf	DelayTimejudge@value
  6967                           
  6968                           ;DelayOff_B1.c: 106: char i = 5;
  6969  113D  3005               	movlw	5
  6970  113E  00A0               	movwf	??_DelayTimejudge
  6971  113F  0820               	movf	??_DelayTimejudge,w
  6972  1140  00A2               	movwf	DelayTimejudge@i
  6973                           
  6974                           ;DelayOff_B1.c: 107: switch (value) {
  6975  1141  2951               	goto	l5364
  6976  1142                     l5350:	
  6977                           ;DelayOff_B1.c: 108: case 0x05:
  6978                           
  6979                           
  6980                           ;DelayOff_B1.c: 109: i = 5;
  6981  1142  3005               	movlw	5
  6982  1143  294D               	goto	L7
  6983  1144                     l5352:	
  6984                           ;DelayOff_B1.c: 111: case 0x10:
  6985                           
  6986                           ;DelayOff_B1.c: 110: break;
  6987                           
  6988                           
  6989                           ;DelayOff_B1.c: 112: i = 10;
  6990  1144  300A               	movlw	10
  6991  1145  294D               	goto	L7
  6992  1146                     l5354:	
  6993                           ;DelayOff_B1.c: 114: case 0x15:
  6994                           
  6995                           ;DelayOff_B1.c: 113: break;
  6996                           
  6997                           
  6998                           ;DelayOff_B1.c: 115: i = 15;
  6999  1146  300F               	movlw	15
  7000  1147  294D               	goto	L7
  7001  1148                     l5356:	
  7002                           ;DelayOff_B1.c: 117: case 0x20:
  7003                           
  7004                           ;DelayOff_B1.c: 116: break;
  7005                           
  7006                           
  7007                           ;DelayOff_B1.c: 118: i = 20;
  7008  1148  3014               	movlw	20
  7009  1149  294D               	goto	L7
  7010  114A                     l5358:	
  7011                           ;DelayOff_B1.c: 120: case 0x25:
  7012                           
  7013                           ;DelayOff_B1.c: 119: break;
  7014                           
  7015                           
  7016                           ;DelayOff_B1.c: 121: i = 25;
  7017  114A  3019               	movlw	25
  7018  114B  294D               	goto	L7
  7019  114C                     l5360:	
  7020                           ;DelayOff_B1.c: 123: case 0x30:
  7021                           
  7022                           ;DelayOff_B1.c: 122: break;
  7023                           
  7024                           
  7025                           ;DelayOff_B1.c: 124: i = 30;
  7026  114C  301E               	movlw	30
  7027  114D                     L7:	
  7028  114D  00A0               	movwf	??_DelayTimejudge
  7029  114E  0820               	movf	??_DelayTimejudge,w
  7030  114F  00A2               	movwf	DelayTimejudge@i
  7031                           
  7032                           ;DelayOff_B1.c: 126: }
  7033                           
  7034                           ;DelayOff_B1.c: 125: break;
  7035  1150  2965               	goto	l5366
  7036  1151                     l5364:	
  7037  1151  0821               	movf	DelayTimejudge@value,w
  7038                           
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 6, Range of values is 5 to 48
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte           19    10 (average)
  7044                           ; direct_byte           97     9 (fixed)
  7045                           ; jumptable            263     9 (fixed)
  7046                           ;	Chosen strategy is simple_byte
  7047  1152  3A05               	xorlw	5	; case 5
  7048  1153  1903               	skipnz
  7049  1154  2942               	goto	l5350
  7050  1155  3A15               	xorlw	21	; case 16
  7051  1156  1903               	skipnz
  7052  1157  2944               	goto	l5352
  7053  1158  3A05               	xorlw	5	; case 21
  7054  1159  1903               	skipnz
  7055  115A  2946               	goto	l5354
  7056  115B  3A35               	xorlw	53	; case 32
  7057  115C  1903               	skipnz
  7058  115D  2948               	goto	l5356
  7059  115E  3A05               	xorlw	5	; case 37
  7060  115F  1903               	skipnz
  7061  1160  294A               	goto	l5358
  7062  1161  3A15               	xorlw	21	; case 48
  7063  1162  1903               	skipnz
  7064  1163  294C               	goto	l5360
  7065  1164  2965               	goto	l5366
  7066  1165                     l5366:	
  7067                           
  7068                           ;DelayOff_B1.c: 127: return i;
  7069  1165  0822               	movf	DelayTimejudge@i,w
  7070  1166  0008               	return
  7071  1167                     __end_of_DelayTimejudge:	
  7072                           
  7073                           	psect	text25
  7074  12A8                     __ptext25:	
  7075 ;; *************** function _setRFSW_AdjControl *****************
  7076 ;; Defined at:
  7077 ;;		line 392 in file "../src/RF_Control_B1.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  sw              1    wreg     unsigned char 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  sw              1   70[BANK0 ] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;		None               void
  7084 ;; Registers used:
  7085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;Total ram usage:        3 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:   10
  7098 ;; This function calls:
  7099 ;;		_RfSWPointSelect
  7100 ;;		_setRF_DimmerValue
  7101 ;;		_setTxData
  7102 ;; This function is called by:
  7103 ;;		_setControl_Lights_Table
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           
  7108                           ;psect for function _setRFSW_AdjControl
  7109  12A8                     _setRFSW_AdjControl:	
  7110                           
  7111                           ;incstack = 0
  7112                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7113                           ;setRFSW_AdjControl@sw stored from wreg
  7114  12A8  0020               	movlb	0	; select bank0
  7115  12A9  00E6               	movwf	setRFSW_AdjControl@sw
  7116                           
  7117                           ;RF_Control_B1.c: 393: RfSWPointSelect(sw);
  7118  12AA  0866               	movf	setRFSW_AdjControl@sw,w
  7119  12AB  319C  24BC  3192   	fcall	_RfSWPointSelect
  7120                           
  7121                           ;RF_Control_B1.c: 394: if (RFSW->Status == 1) {
  7122  12AE  0021               	movlb	1	; select bank1
  7123  12AF  083F               	movf	_RFSW^(0+128),w
  7124  12B0  0086               	movwf	6
  7125  12B1  0187               	clrf	7
  7126  12B2  1C01               	btfss	1,0
  7127  12B3  2AC0               	goto	l5758
  7128                           
  7129                           ;RF_Control_B1.c: 395: Memory->Modify=1;
  7130  12B4  086F               	movf	_Memory^(0+128),w
  7131  12B5  3E24               	addlw	36
  7132  12B6  0086               	movwf	6
  7133  12B7  3001               	movlw	1	; select bank2/3
  7134  12B8  0087               	movwf	7
  7135  12B9  1401               	bsf	1,0
  7136                           
  7137                           ;RF_Control_B1.c: 396: setRF_DimmerValue(sw);
  7138  12BA  0020               	movlb	0	; select bank0
  7139  12BB  0866               	movf	setRFSW_AdjControl@sw,w
  7140  12BC  3187  27C5  3192   	fcall	_setRF_DimmerValue
  7141                           
  7142                           ;RF_Control_B1.c: 397: } else {
  7143  12BF  2AD2               	goto	l1990
  7144  12C0                     l5758:	
  7145                           
  7146                           ;RF_Control_B1.c: 398: product->Data[9]=product->Data[20 + sw];
  7147  12C0  0020               	movlb	0	; select bank0
  7148  12C1  0866               	movf	setRFSW_AdjControl@sw,w
  7149  12C2  3E14               	addlw	20
  7150  12C3  077D               	addwf	_product,w
  7151  12C4  00E4               	movwf	??_setRFSW_AdjControl
  7152  12C5  0864               	movf	??_setRFSW_AdjControl,w
  7153  12C6  0086               	movwf	6
  7154  12C7  3001               	movlw	1	; select bank2/3
  7155  12C8  0087               	movwf	7
  7156  12C9  0801               	movf	1,w
  7157  12CA  00E5               	movwf	??_setRFSW_AdjControl+1
  7158  12CB  087D               	movf	_product,w
  7159  12CC  3E09               	addlw	9
  7160  12CD  0086               	movwf	6
  7161  12CE  3001               	movlw	1	; select bank2/3
  7162  12CF  0087               	movwf	7
  7163  12D0  0865               	movf	??_setRFSW_AdjControl+1,w
  7164  12D1  0081               	movwf	1
  7165  12D2                     l1990:	
  7166                           
  7167                           ;RF_Control_B1.c: 399: }
  7168                           ;RF_Control_B1.c: 400: product->Data[17]=product->Data[26 + sw];
  7169  12D2  0020               	movlb	0	; select bank0
  7170  12D3  0866               	movf	setRFSW_AdjControl@sw,w
  7171  12D4  3E1A               	addlw	26
  7172  12D5  077D               	addwf	_product,w
  7173  12D6  00E4               	movwf	??_setRFSW_AdjControl
  7174  12D7  0864               	movf	??_setRFSW_AdjControl,w
  7175  12D8  0086               	movwf	6
  7176  12D9  3001               	movlw	1	; select bank2/3
  7177  12DA  0087               	movwf	7
  7178  12DB  0801               	movf	1,w
  7179  12DC  00E5               	movwf	??_setRFSW_AdjControl+1
  7180  12DD  087D               	movf	_product,w
  7181  12DE  3E11               	addlw	17
  7182  12DF  0086               	movwf	6
  7183  12E0  3001               	movlw	1	; select bank2/3
  7184  12E1  0087               	movwf	7
  7185  12E2  0865               	movf	??_setRFSW_AdjControl+1,w
  7186  12E3  0081               	movwf	1
  7187                           
  7188                           ;RF_Control_B1.c: 401: setTxData(1);
  7189  12E4  3001               	movlw	1
  7190  12E5  318D  2554         	fcall	_setTxData
  7191  12E7  0008               	return
  7192  12E8                     __end_of_setRFSW_AdjControl:	
  7193                           
  7194                           	psect	text26
  7195  07C5                     __ptext26:	
  7196 ;; *************** function _setRF_DimmerValue *****************
  7197 ;; Defined at:
  7198 ;;		line 412 in file "../src/RF_Control_B1.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  lights          1    wreg     unsigned char 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  lights          1   67[BANK0 ] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;		None               void
  7205 ;; Registers used:
  7206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;Total ram usage:        3 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    9
  7219 ;; This function calls:
  7220 ;;		_setDimmerLights_AdjRF
  7221 ;; This function is called by:
  7222 ;;		_setRFSW_AdjControl
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _setRF_DimmerValue
  7228  07C5                     _setRF_DimmerValue:	
  7229                           
  7230                           ;incstack = 0
  7231                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7232                           ;setRF_DimmerValue@lights stored from wreg
  7233  07C5  0020               	movlb	0	; select bank0
  7234  07C6  00E3               	movwf	setRF_DimmerValue@lights
  7235                           
  7236                           ;RF_Control_B1.c: 413: if (RF_Data[9] > 0x64) {
  7237  07C7  3065               	movlw	101
  7238  07C8  0021               	movlb	1	; select bank1
  7239  07C9  0229               	subwf	(_RF_Data^(0+128)+9),w
  7240  07CA  1C03               	skipc
  7241  07CB  2FD2               	goto	l5612
  7242                           
  7243                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x64;
  7244  07CC  3064               	movlw	100
  7245  07CD  0020               	movlb	0	; select bank0
  7246  07CE  00E1               	movwf	??_setRF_DimmerValue
  7247  07CF  0861               	movf	??_setRF_DimmerValue,w
  7248  07D0  0021               	movlb	1	; select bank1
  7249  07D1  00A9               	movwf	(_RF_Data^(0+128)+9)
  7250  07D2                     l5612:	
  7251                           
  7252                           ;RF_Control_B1.c: 415: }
  7253                           ;RF_Control_B1.c: 416: product->Data[9]=RF_Data[9];
  7254  07D2  0829               	movf	(_RF_Data^(0+128)+9),w
  7255  07D3  0020               	movlb	0	; select bank0
  7256  07D4  00E1               	movwf	??_setRF_DimmerValue
  7257  07D5  087D               	movf	_product,w
  7258  07D6  3E09               	addlw	9
  7259  07D7  0086               	movwf	6
  7260  07D8  3001               	movlw	1	; select bank2/3
  7261  07D9  0087               	movwf	7
  7262  07DA  0861               	movf	??_setRF_DimmerValue,w
  7263  07DB  0081               	movwf	1
  7264                           
  7265                           ;RF_Control_B1.c: 417: product->Data[11]=lights;
  7266  07DC  0863               	movf	setRF_DimmerValue@lights,w
  7267  07DD  00E1               	movwf	??_setRF_DimmerValue
  7268  07DE  087D               	movf	_product,w
  7269  07DF  3E0B               	addlw	11
  7270  07E0  0086               	movwf	6
  7271  07E1  3001               	movlw	1	; select bank2/3
  7272  07E2  0087               	movwf	7
  7273  07E3  0861               	movf	??_setRF_DimmerValue,w
  7274  07E4  0081               	movwf	1
  7275                           
  7276                           ;RF_Control_B1.c: 418: product->Data[(20 + lights)]=product->Data[9];
  7277  07E5  087D               	movf	_product,w
  7278  07E6  3E09               	addlw	9
  7279  07E7  0086               	movwf	6
  7280  07E8  3001               	movlw	1	; select bank2/3
  7281  07E9  0087               	movwf	7
  7282  07EA  0801               	movf	1,w
  7283  07EB  00E1               	movwf	??_setRF_DimmerValue
  7284  07EC  0863               	movf	setRF_DimmerValue@lights,w
  7285  07ED  3E14               	addlw	20
  7286  07EE  077D               	addwf	_product,w
  7287  07EF  00E2               	movwf	??_setRF_DimmerValue+1
  7288  07F0  0862               	movf	??_setRF_DimmerValue+1,w
  7289  07F1  0086               	movwf	6
  7290  07F2  3001               	movlw	1	; select bank2/3
  7291  07F3  0087               	movwf	7
  7292  07F4  0861               	movf	??_setRF_DimmerValue,w
  7293  07F5  0081               	movwf	1
  7294                           
  7295                           ;RF_Control_B1.c: 419: setDimmerLights_AdjRF(lights);
  7296  07F6  0863               	movf	setRF_DimmerValue@lights,w
  7297  07F7  3190  2077         	fcall	_setDimmerLights_AdjRF
  7298  07F9  0008               	return
  7299  07FA                     __end_of_setRF_DimmerValue:	
  7300                           
  7301                           	psect	text27
  7302  1077                     __ptext27:	
  7303 ;; *************** function _setDimmerLights_AdjRF *****************
  7304 ;; Defined at:
  7305 ;;		line 679 in file "../src/Dimmer_B1.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  lights          1    wreg     unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  lights          1   64[BANK0 ] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;		None               void
  7312 ;; Registers used:
  7313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        2 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    8
  7326 ;; This function calls:
  7327 ;;		_DimmerLightsPointSelect
  7328 ;;		_getPercentValue
  7329 ;; This function is called by:
  7330 ;;		_setRF_DimmerValue
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _setDimmerLights_AdjRF
  7336  1077                     _setDimmerLights_AdjRF:	
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7340                           ;setDimmerLights_AdjRF@lights stored from wreg
  7341  1077  0020               	movlb	0	; select bank0
  7342  1078  00E0               	movwf	setDimmerLights_AdjRF@lights
  7343                           
  7344                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7345  1079  0860               	movf	setDimmerLights_AdjRF@lights,w
  7346  107A  319C  2482  3190   	fcall	_DimmerLightsPointSelect
  7347                           
  7348                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7349  107D  0878               	movf	_DimmerLights,w
  7350  107E  0086               	movwf	6
  7351  107F  3001               	movlw	1	; select bank2/3
  7352  1080  0087               	movwf	7
  7353  1081  1501               	bsf	1,2
  7354                           
  7355                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7356  1082  0878               	movf	_DimmerLights,w
  7357  1083  0086               	movwf	6
  7358  1084  3001               	movlw	1	; select bank2/3
  7359  1085  0087               	movwf	7
  7360  1086  1481               	bsf	1,1
  7361                           
  7362                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7363  1087  087D               	movf	_product,w
  7364  1088  3E09               	addlw	9
  7365  1089  0086               	movwf	6
  7366  108A  3001               	movlw	1	; select bank2/3
  7367  108B  0087               	movwf	7
  7368  108C  0801               	movf	1,w
  7369  108D  3196  268C         	fcall	_getPercentValue
  7370  108F  0020               	movlb	0	; select bank0
  7371  1090  00DF               	movwf	??_setDimmerLights_AdjRF
  7372  1091  0878               	movf	_DimmerLights,w
  7373  1092  3E05               	addlw	5
  7374  1093  0086               	movwf	6
  7375  1094  3001               	movlw	1	; select bank2/3
  7376  1095  0087               	movwf	7
  7377  1096  085F               	movf	??_setDimmerLights_AdjRF,w
  7378  1097  0081               	movwf	1
  7379  1098  0008               	return
  7380  1099                     __end_of_setDimmerLights_AdjRF:	
  7381                           
  7382                           	psect	text28
  7383  168C                     __ptext28:	
  7384 ;; *************** function _getPercentValue *****************
  7385 ;; Defined at:
  7386 ;;		line 752 in file "../src/Dimmer_B1.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  value           1    wreg     unsigned char 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  value           1   59[BANK0 ] unsigned char 
  7391 ;;  i               3   60[BANK0 ] float 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      unsigned char 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, pclath, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;Total ram usage:        6 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    7
  7408 ;; This function calls:
  7409 ;;		___awtoft
  7410 ;;		___ftadd
  7411 ;;		___ftdiv
  7412 ;;		___ftmul
  7413 ;;		___fttol
  7414 ;; This function is called by:
  7415 ;;		_setDimmerLights_AdjRF
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           
  7420                           ;psect for function _getPercentValue
  7421  168C                     _getPercentValue:	
  7422                           
  7423                           ;incstack = 0
  7424                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7425                           ;getPercentValue@value stored from wreg
  7426  168C  0020               	movlb	0	; select bank0
  7427  168D  00DB               	movwf	getPercentValue@value
  7428                           
  7429                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7430  168E  3000               	movlw	0
  7431  168F  00DC               	movwf	getPercentValue@i
  7432  1690  30E0               	movlw	224
  7433  1691  00DD               	movwf	getPercentValue@i+1
  7434  1692  3041               	movlw	65
  7435  1693  00DE               	movwf	getPercentValue@i+2
  7436                           
  7437                           ;Dimmer_B1.c: 755: i /= 100;
  7438  1694  3000               	movlw	0
  7439  1695  00AE               	movwf	___ftdiv@f2
  7440  1696  30C8               	movlw	200
  7441  1697  00AF               	movwf	___ftdiv@f2+1
  7442  1698  3042               	movlw	66
  7443  1699  00B0               	movwf	___ftdiv@f2+2
  7444  169A  085C               	movf	getPercentValue@i,w
  7445  169B  00B1               	movwf	___ftdiv@f1
  7446  169C  085D               	movf	getPercentValue@i+1,w
  7447  169D  00B2               	movwf	___ftdiv@f1+1
  7448  169E  085E               	movf	getPercentValue@i+2,w
  7449  169F  00B3               	movwf	___ftdiv@f1+2
  7450  16A0  318D  25F4  3196   	fcall	___ftdiv
  7451  16A3  0020               	movlb	0	; select bank0
  7452  16A4  082E               	movf	?___ftdiv,w
  7453  16A5  00DC               	movwf	getPercentValue@i
  7454  16A6  082F               	movf	?___ftdiv+1,w
  7455  16A7  00DD               	movwf	getPercentValue@i+1
  7456  16A8  0830               	movf	?___ftdiv+2,w
  7457  16A9  00DE               	movwf	getPercentValue@i+2
  7458                           
  7459                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7460  16AA  085B               	movf	getPercentValue@value,w
  7461  16AB  00D9               	movwf	??_getPercentValue
  7462  16AC  01DA               	clrf	??_getPercentValue+1
  7463  16AD  09D9               	comf	??_getPercentValue,f
  7464  16AE  09DA               	comf	??_getPercentValue+1,f
  7465  16AF  0AD9               	incf	??_getPercentValue,f
  7466  16B0  1903               	skipnz
  7467  16B1  0ADA               	incf	??_getPercentValue+1,f
  7468  16B2  0859               	movf	??_getPercentValue,w
  7469  16B3  3E64               	addlw	100
  7470  16B4  00A8               	movwf	___awtoft@c
  7471  16B5  3000               	movlw	0
  7472  16B6  3D5A               	addwfc	??_getPercentValue+1,w
  7473  16B7  00A9               	movwf	___awtoft@c+1
  7474  16B8  319F  27BC  3196   	fcall	___awtoft
  7475  16BB  0020               	movlb	0	; select bank0
  7476  16BC  0828               	movf	?___awtoft,w
  7477  16BD  00B1               	movwf	___ftmul@f2
  7478  16BE  0829               	movf	?___awtoft+1,w
  7479  16BF  00B2               	movwf	___ftmul@f2+1
  7480  16C0  082A               	movf	?___awtoft+2,w
  7481  16C1  00B3               	movwf	___ftmul@f2+2
  7482  16C2  085C               	movf	getPercentValue@i,w
  7483  16C3  00AE               	movwf	___ftmul@f1
  7484  16C4  085D               	movf	getPercentValue@i+1,w
  7485  16C5  00AF               	movwf	___ftmul@f1+1
  7486  16C6  085E               	movf	getPercentValue@i+2,w
  7487  16C7  00B0               	movwf	___ftmul@f1+2
  7488  16C8  318F  274C  3196   	fcall	___ftmul
  7489  16CB  0020               	movlb	0	; select bank0
  7490  16CC  082E               	movf	?___ftmul,w
  7491  16CD  00C1               	movwf	___ftadd@f2
  7492  16CE  082F               	movf	?___ftmul+1,w
  7493  16CF  00C2               	movwf	___ftadd@f2+1
  7494  16D0  0830               	movf	?___ftmul+2,w
  7495  16D1  00C3               	movwf	___ftadd@f2+2
  7496  16D2  3000               	movlw	0
  7497  16D3  00BE               	movwf	___ftadd@f1
  7498  16D4  3000               	movlw	0
  7499  16D5  00BF               	movwf	___ftadd@f1+1
  7500  16D6  3042               	movlw	66
  7501  16D7  00C0               	movwf	___ftadd@f1+2
  7502  16D8  3185  253C  3196   	fcall	___ftadd
  7503  16DB  0020               	movlb	0	; select bank0
  7504  16DC  083E               	movf	?___ftadd,w
  7505  16DD  00CB               	movwf	___fttol@f1
  7506  16DE  083F               	movf	?___ftadd+1,w
  7507  16DF  00CC               	movwf	___fttol@f1+1
  7508  16E0  0840               	movf	?___ftadd+2,w
  7509  16E1  00CD               	movwf	___fttol@f1+2
  7510  16E2  318B  23B5         	fcall	___fttol
  7511  16E4  0020               	movlb	0	; select bank0
  7512  16E5  084B               	movf	?___fttol,w
  7513  16E6  0008               	return
  7514  16E7                     __end_of_getPercentValue:	
  7515                           
  7516                           	psect	text29
  7517  0F4C                     __ptext29:	
  7518 ;; *************** function ___ftmul *****************
  7519 ;; Defined at:
  7520 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;  f1              3   14[BANK0 ] float 
  7523 ;;  f2              3   17[BANK0 ] float 
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7526 ;;  sign            1   29[BANK0 ] unsigned char 
  7527 ;;  cntr            1   28[BANK0 ] unsigned char 
  7528 ;;  exp             1   24[BANK0 ] unsigned char 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  3   14[BANK0 ] float 
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:       16 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    6
  7545 ;; This function calls:
  7546 ;;		___ftpack
  7547 ;; This function is called by:
  7548 ;;		_getPercentValue
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function ___ftmul
  7554  0F4C                     ___ftmul:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7558  0F4C  0020               	movlb	0	; select bank0
  7559  0F4D  082E               	movf	___ftmul@f1,w
  7560  0F4E  00B4               	movwf	??___ftmul
  7561  0F4F  082F               	movf	___ftmul@f1+1,w
  7562  0F50  00B5               	movwf	??___ftmul+1
  7563  0F51  0830               	movf	___ftmul@f1+2,w
  7564  0F52  00B6               	movwf	??___ftmul+2
  7565  0F53  1003               	clrc
  7566  0F54  0D35               	rlf	??___ftmul+1,w
  7567  0F55  0D36               	rlf	??___ftmul+2,w
  7568  0F56  00B7               	movwf	??___ftmul+3
  7569  0F57  0837               	movf	??___ftmul+3,w
  7570  0F58  00B8               	movwf	___ftmul@exp
  7571  0F59  08B8               	movf	___ftmul@exp,f
  7572  0F5A  1D03               	skipz
  7573  0F5B  2F63               	goto	l5244
  7574  0F5C  3000               	movlw	0
  7575  0F5D  00AE               	movwf	?___ftmul
  7576  0F5E  3000               	movlw	0
  7577  0F5F  00AF               	movwf	?___ftmul+1
  7578  0F60  3000               	movlw	0
  7579  0F61  00B0               	movwf	?___ftmul+2
  7580  0F62  0008               	return
  7581  0F63                     l5244:	
  7582  0F63  0831               	movf	___ftmul@f2,w
  7583  0F64  00B4               	movwf	??___ftmul
  7584  0F65  0832               	movf	___ftmul@f2+1,w
  7585  0F66  00B5               	movwf	??___ftmul+1
  7586  0F67  0833               	movf	___ftmul@f2+2,w
  7587  0F68  00B6               	movwf	??___ftmul+2
  7588  0F69  1003               	clrc
  7589  0F6A  0D35               	rlf	??___ftmul+1,w
  7590  0F6B  0D36               	rlf	??___ftmul+2,w
  7591  0F6C  00B7               	movwf	??___ftmul+3
  7592  0F6D  0837               	movf	??___ftmul+3,w
  7593  0F6E  00BD               	movwf	___ftmul@sign
  7594  0F6F  08BD               	movf	___ftmul@sign,f
  7595  0F70  1D03               	skipz
  7596  0F71  2F79               	goto	l5250
  7597  0F72  3000               	movlw	0
  7598  0F73  00AE               	movwf	?___ftmul
  7599  0F74  3000               	movlw	0
  7600  0F75  00AF               	movwf	?___ftmul+1
  7601  0F76  3000               	movlw	0
  7602  0F77  00B0               	movwf	?___ftmul+2
  7603  0F78  0008               	return
  7604  0F79                     l5250:	
  7605  0F79  083D               	movf	___ftmul@sign,w
  7606  0F7A  3E7B               	addlw	123
  7607  0F7B  00B4               	movwf	??___ftmul
  7608  0F7C  0834               	movf	??___ftmul,w
  7609  0F7D  07B8               	addwf	___ftmul@exp,f
  7610  0F7E  082E               	movf	___ftmul@f1,w
  7611  0F7F  00B4               	movwf	??___ftmul
  7612  0F80  082F               	movf	___ftmul@f1+1,w
  7613  0F81  00B5               	movwf	??___ftmul+1
  7614  0F82  0830               	movf	___ftmul@f1+2,w
  7615  0F83  00B6               	movwf	??___ftmul+2
  7616  0F84  3010               	movlw	16
  7617  0F85                     u3675:	
  7618  0F85  36B6               	lsrf	??___ftmul+2,f
  7619  0F86  0CB5               	rrf	??___ftmul+1,f
  7620  0F87  0CB4               	rrf	??___ftmul,f
  7621  0F88  0B89               	decfsz	9,f
  7622  0F89  2F85               	goto	u3675
  7623  0F8A  0834               	movf	??___ftmul,w
  7624  0F8B  00B7               	movwf	??___ftmul+3
  7625  0F8C  0837               	movf	??___ftmul+3,w
  7626  0F8D  00BD               	movwf	___ftmul@sign
  7627  0F8E  0831               	movf	___ftmul@f2,w
  7628  0F8F  00B4               	movwf	??___ftmul
  7629  0F90  0832               	movf	___ftmul@f2+1,w
  7630  0F91  00B5               	movwf	??___ftmul+1
  7631  0F92  0833               	movf	___ftmul@f2+2,w
  7632  0F93  00B6               	movwf	??___ftmul+2
  7633  0F94  3010               	movlw	16
  7634  0F95                     u3685:	
  7635  0F95  36B6               	lsrf	??___ftmul+2,f
  7636  0F96  0CB5               	rrf	??___ftmul+1,f
  7637  0F97  0CB4               	rrf	??___ftmul,f
  7638  0F98  0B89               	decfsz	9,f
  7639  0F99  2F95               	goto	u3685
  7640  0F9A  0834               	movf	??___ftmul,w
  7641  0F9B  00B7               	movwf	??___ftmul+3
  7642  0F9C  0837               	movf	??___ftmul+3,w
  7643  0F9D  06BD               	xorwf	___ftmul@sign,f
  7644  0F9E  3080               	movlw	128
  7645  0F9F  00B4               	movwf	??___ftmul
  7646  0FA0  0834               	movf	??___ftmul,w
  7647  0FA1  05BD               	andwf	___ftmul@sign,f
  7648  0FA2  17AF               	bsf	___ftmul@f1+1,7
  7649  0FA3  17B2               	bsf	___ftmul@f2+1,7
  7650  0FA4  30FF               	movlw	255
  7651  0FA5  05B1               	andwf	___ftmul@f2,f
  7652  0FA6  30FF               	movlw	255
  7653  0FA7  05B2               	andwf	___ftmul@f2+1,f
  7654  0FA8  3000               	movlw	0
  7655  0FA9  05B3               	andwf	___ftmul@f2+2,f
  7656  0FAA  3000               	movlw	0
  7657  0FAB  00B9               	movwf	___ftmul@f3_as_product
  7658  0FAC  3000               	movlw	0
  7659  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  7660  0FAE  3000               	movlw	0
  7661  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  7662  0FB0  3007               	movlw	7
  7663  0FB1  00B4               	movwf	??___ftmul
  7664  0FB2  0834               	movf	??___ftmul,w
  7665  0FB3  00BC               	movwf	___ftmul@cntr
  7666  0FB4                     l5262:	
  7667  0FB4  1C2E               	btfss	___ftmul@f1,0
  7668  0FB5  2FBC               	goto	l5266
  7669  0FB6  0831               	movf	___ftmul@f2,w
  7670  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  7671  0FB8  0832               	movf	___ftmul@f2+1,w
  7672  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7673  0FBA  0833               	movf	___ftmul@f2+2,w
  7674  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7675  0FBC                     l5266:	
  7676  0FBC  3001               	movlw	1
  7677  0FBD                     u3705:	
  7678  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  7679  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  7680  0FBF  0CAE               	rrf	___ftmul@f1,f
  7681  0FC0  0B89               	decfsz	9,f
  7682  0FC1  2FBD               	goto	u3705
  7683  0FC2  3001               	movlw	1
  7684  0FC3                     u3715:	
  7685  0FC3  35B1               	lslf	___ftmul@f2,f
  7686  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  7687  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  7688  0FC6  0B89               	decfsz	9,f
  7689  0FC7  2FC3               	goto	u3715
  7690  0FC8  3001               	movlw	1
  7691  0FC9  02BC               	subwf	___ftmul@cntr,f
  7692  0FCA  1D03               	btfss	3,2
  7693  0FCB  2FB4               	goto	l5262
  7694  0FCC  3009               	movlw	9
  7695  0FCD  00B4               	movwf	??___ftmul
  7696  0FCE  0834               	movf	??___ftmul,w
  7697  0FCF  00BC               	movwf	___ftmul@cntr
  7698  0FD0                     l5274:	
  7699  0FD0  1C2E               	btfss	___ftmul@f1,0
  7700  0FD1  2FD8               	goto	l5278
  7701  0FD2  0831               	movf	___ftmul@f2,w
  7702  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  7703  0FD4  0832               	movf	___ftmul@f2+1,w
  7704  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7705  0FD6  0833               	movf	___ftmul@f2+2,w
  7706  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7707  0FD8                     l5278:	
  7708  0FD8  3001               	movlw	1
  7709  0FD9                     u3745:	
  7710  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  7711  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  7712  0FDB  0CAE               	rrf	___ftmul@f1,f
  7713  0FDC  0B89               	decfsz	9,f
  7714  0FDD  2FD9               	goto	u3745
  7715  0FDE  3001               	movlw	1
  7716  0FDF                     u3755:	
  7717  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7718  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7719  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  7720  0FE2  0B89               	decfsz	9,f
  7721  0FE3  2FDF               	goto	u3755
  7722  0FE4  3001               	movlw	1
  7723  0FE5  02BC               	subwf	___ftmul@cntr,f
  7724  0FE6  1D03               	btfss	3,2
  7725  0FE7  2FD0               	goto	l5274
  7726  0FE8  0839               	movf	___ftmul@f3_as_product,w
  7727  0FE9  00A0               	movwf	___ftpack@arg
  7728  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  7729  0FEB  00A1               	movwf	___ftpack@arg+1
  7730  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  7731  0FED  00A2               	movwf	___ftpack@arg+2
  7732  0FEE  0838               	movf	___ftmul@exp,w
  7733  0FEF  00B4               	movwf	??___ftmul
  7734  0FF0  0834               	movf	??___ftmul,w
  7735  0FF1  00A3               	movwf	___ftpack@exp
  7736  0FF2  083D               	movf	___ftmul@sign,w
  7737  0FF3  00B5               	movwf	??___ftmul+1
  7738  0FF4  0835               	movf	??___ftmul+1,w
  7739  0FF5  00A4               	movwf	___ftpack@sign
  7740  0FF6  3188  202D         	fcall	___ftpack
  7741  0FF8  0020               	movlb	0	; select bank0
  7742  0FF9  0820               	movf	?___ftpack,w
  7743  0FFA  00AE               	movwf	?___ftmul
  7744  0FFB  0821               	movf	?___ftpack+1,w
  7745  0FFC  00AF               	movwf	?___ftmul+1
  7746  0FFD  0822               	movf	?___ftpack+2,w
  7747  0FFE  00B0               	movwf	?___ftmul+2
  7748  0FFF  0008               	return
  7749  1000                     __end_of___ftmul:	
  7750                           
  7751                           	psect	text30
  7752  053C                     __ptext30:	
  7753 ;; *************** function ___ftadd *****************
  7754 ;; Defined at:
  7755 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  f1              3   30[BANK0 ] float 
  7758 ;;  f2              3   33[BANK0 ] float 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  exp1            1   42[BANK0 ] unsigned char 
  7761 ;;  exp2            1   41[BANK0 ] unsigned char 
  7762 ;;  sign            1   40[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  3   30[BANK0 ] float 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0, pclath, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7772 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;Total ram usage:       13 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    6
  7779 ;; This function calls:
  7780 ;;		___ftpack
  7781 ;; This function is called by:
  7782 ;;		_getPercentValue
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function ___ftadd
  7788  053C                     ___ftadd:	
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7792  053C  0020               	movlb	0	; select bank0
  7793  053D  083E               	movf	___ftadd@f1,w
  7794  053E  00C4               	movwf	??___ftadd
  7795  053F  083F               	movf	___ftadd@f1+1,w
  7796  0540  00C5               	movwf	??___ftadd+1
  7797  0541  0840               	movf	___ftadd@f1+2,w
  7798  0542  00C6               	movwf	??___ftadd+2
  7799  0543  1003               	clrc
  7800  0544  0D45               	rlf	??___ftadd+1,w
  7801  0545  0D46               	rlf	??___ftadd+2,w
  7802  0546  00C7               	movwf	??___ftadd+3
  7803  0547  0847               	movf	??___ftadd+3,w
  7804  0548  00CA               	movwf	___ftadd@exp1
  7805  0549  0841               	movf	___ftadd@f2,w
  7806  054A  00C4               	movwf	??___ftadd
  7807  054B  0842               	movf	___ftadd@f2+1,w
  7808  054C  00C5               	movwf	??___ftadd+1
  7809  054D  0843               	movf	___ftadd@f2+2,w
  7810  054E  00C6               	movwf	??___ftadd+2
  7811  054F  1003               	clrc
  7812  0550  0D45               	rlf	??___ftadd+1,w
  7813  0551  0D46               	rlf	??___ftadd+2,w
  7814  0552  00C7               	movwf	??___ftadd+3
  7815  0553  0847               	movf	??___ftadd+3,w
  7816  0554  00C9               	movwf	___ftadd@exp2
  7817  0555  084A               	movf	___ftadd@exp1,w
  7818  0556  1903               	btfsc	3,2
  7819  0557  2D64               	goto	l5132
  7820  0558  0849               	movf	___ftadd@exp2,w
  7821  0559  024A               	subwf	___ftadd@exp1,w
  7822  055A  1803               	skipnc
  7823  055B  2D6B               	goto	l5136
  7824  055C  034A               	decf	___ftadd@exp1,w
  7825  055D  3AFF               	xorlw	255
  7826  055E  0749               	addwf	___ftadd@exp2,w
  7827  055F  00C4               	movwf	??___ftadd
  7828  0560  3019               	movlw	25
  7829  0561  0244               	subwf	??___ftadd,w
  7830  0562  1C03               	skipc
  7831  0563  2D6B               	goto	l5136
  7832  0564                     l5132:	
  7833  0564  0841               	movf	___ftadd@f2,w
  7834  0565  00BE               	movwf	?___ftadd
  7835  0566  0842               	movf	___ftadd@f2+1,w
  7836  0567  00BF               	movwf	?___ftadd+1
  7837  0568  0843               	movf	___ftadd@f2+2,w
  7838  0569  00C0               	movwf	?___ftadd+2
  7839  056A  0008               	return
  7840  056B                     l5136:	
  7841  056B  0849               	movf	___ftadd@exp2,w
  7842  056C  1903               	btfsc	3,2
  7843  056D  0008               	return
  7844  056E  084A               	movf	___ftadd@exp1,w
  7845  056F  0249               	subwf	___ftadd@exp2,w
  7846  0570  1803               	skipnc
  7847  0571  2D7A               	goto	l5142
  7848  0572  0349               	decf	___ftadd@exp2,w
  7849  0573  3AFF               	xorlw	255
  7850  0574  074A               	addwf	___ftadd@exp1,w
  7851  0575  00C4               	movwf	??___ftadd
  7852  0576  3019               	movlw	25
  7853  0577  0244               	subwf	??___ftadd,w
  7854  0578  1803               	btfsc	3,0
  7855  0579  0008               	return
  7856  057A                     l5142:	
  7857  057A  3006               	movlw	6
  7858  057B  00C4               	movwf	??___ftadd
  7859  057C  0844               	movf	??___ftadd,w
  7860  057D  00C8               	movwf	___ftadd@sign
  7861  057E  1BC0               	btfsc	___ftadd@f1+2,7
  7862  057F  17C8               	bsf	___ftadd@sign,7
  7863  0580  1BC3               	btfsc	___ftadd@f2+2,7
  7864  0581  1748               	bsf	___ftadd@sign,6
  7865  0582  17BF               	bsf	___ftadd@f1+1,7
  7866  0583  30FF               	movlw	255
  7867  0584  05BE               	andwf	___ftadd@f1,f
  7868  0585  30FF               	movlw	255
  7869  0586  05BF               	andwf	___ftadd@f1+1,f
  7870  0587  3000               	movlw	0
  7871  0588  05C0               	andwf	___ftadd@f1+2,f
  7872  0589  17C2               	bsf	___ftadd@f2+1,7
  7873  058A  30FF               	movlw	255
  7874  058B  05C1               	andwf	___ftadd@f2,f
  7875  058C  30FF               	movlw	255
  7876  058D  05C2               	andwf	___ftadd@f2+1,f
  7877  058E  3000               	movlw	0
  7878  058F  05C3               	andwf	___ftadd@f2+2,f
  7879  0590  0849               	movf	___ftadd@exp2,w
  7880  0591  024A               	subwf	___ftadd@exp1,w
  7881  0592  1803               	skipnc
  7882  0593  2DB6               	goto	l5164
  7883  0594                     l5154:	
  7884  0594  3001               	movlw	1
  7885  0595                     u3435:	
  7886  0595  35C1               	lslf	___ftadd@f2,f
  7887  0596  0DC2               	rlf	___ftadd@f2+1,f
  7888  0597  0DC3               	rlf	___ftadd@f2+2,f
  7889  0598  0B89               	decfsz	9,f
  7890  0599  2D95               	goto	u3435
  7891  059A  3001               	movlw	1
  7892  059B  02C9               	subwf	___ftadd@exp2,f
  7893  059C  0849               	movf	___ftadd@exp2,w
  7894  059D  064A               	xorwf	___ftadd@exp1,w
  7895  059E  1903               	skipnz
  7896  059F  2DB1               	goto	l5162
  7897  05A0  3001               	movlw	1
  7898  05A1  02C8               	subwf	___ftadd@sign,f
  7899  05A2  0848               	movf	___ftadd@sign,w
  7900  05A3  3907               	andlw	7
  7901  05A4  1903               	btfsc	3,2
  7902  05A5  2DB1               	goto	l5162
  7903  05A6  2D94               	goto	l5154
  7904  05A7                     l5160:	
  7905  05A7  3001               	movlw	1
  7906  05A8                     u3465:	
  7907  05A8  36C0               	lsrf	___ftadd@f1+2,f
  7908  05A9  0CBF               	rrf	___ftadd@f1+1,f
  7909  05AA  0CBE               	rrf	___ftadd@f1,f
  7910  05AB  0B89               	decfsz	9,f
  7911  05AC  2DA8               	goto	u3465
  7912  05AD  3001               	movlw	1
  7913  05AE  00C4               	movwf	??___ftadd
  7914  05AF  0844               	movf	??___ftadd,w
  7915  05B0  07CA               	addwf	___ftadd@exp1,f
  7916  05B1                     l5162:	
  7917  05B1  084A               	movf	___ftadd@exp1,w
  7918  05B2  0649               	xorwf	___ftadd@exp2,w
  7919  05B3  1903               	btfsc	3,2
  7920  05B4  2DDB               	goto	l2827
  7921  05B5  2DA7               	goto	l5160
  7922  05B6                     l5164:	
  7923  05B6  084A               	movf	___ftadd@exp1,w
  7924  05B7  0249               	subwf	___ftadd@exp2,w
  7925  05B8  1803               	skipnc
  7926  05B9  2DDB               	goto	l2827
  7927  05BA                     l5166:	
  7928  05BA  3001               	movlw	1
  7929  05BB                     u3495:	
  7930  05BB  35BE               	lslf	___ftadd@f1,f
  7931  05BC  0DBF               	rlf	___ftadd@f1+1,f
  7932  05BD  0DC0               	rlf	___ftadd@f1+2,f
  7933  05BE  0B89               	decfsz	9,f
  7934  05BF  2DBB               	goto	u3495
  7935  05C0  3001               	movlw	1
  7936  05C1  02CA               	subwf	___ftadd@exp1,f
  7937  05C2  0849               	movf	___ftadd@exp2,w
  7938  05C3  064A               	xorwf	___ftadd@exp1,w
  7939  05C4  1903               	skipnz
  7940  05C5  2DD7               	goto	l5174
  7941  05C6  3001               	movlw	1
  7942  05C7  02C8               	subwf	___ftadd@sign,f
  7943  05C8  0848               	movf	___ftadd@sign,w
  7944  05C9  3907               	andlw	7
  7945  05CA  1903               	btfsc	3,2
  7946  05CB  2DD7               	goto	l5174
  7947  05CC  2DBA               	goto	l5166
  7948  05CD                     l5172:	
  7949  05CD  3001               	movlw	1
  7950  05CE                     u3525:	
  7951  05CE  36C3               	lsrf	___ftadd@f2+2,f
  7952  05CF  0CC2               	rrf	___ftadd@f2+1,f
  7953  05D0  0CC1               	rrf	___ftadd@f2,f
  7954  05D1  0B89               	decfsz	9,f
  7955  05D2  2DCE               	goto	u3525
  7956  05D3  3001               	movlw	1
  7957  05D4  00C4               	movwf	??___ftadd
  7958  05D5  0844               	movf	??___ftadd,w
  7959  05D6  07C9               	addwf	___ftadd@exp2,f
  7960  05D7                     l5174:	
  7961  05D7  084A               	movf	___ftadd@exp1,w
  7962  05D8  0649               	xorwf	___ftadd@exp2,w
  7963  05D9  1D03               	skipz
  7964  05DA  2DCD               	goto	l5172
  7965  05DB                     l2827:	
  7966  05DB  1FC8               	btfss	___ftadd@sign,7
  7967  05DC  2DED               	goto	l5178
  7968  05DD  30FF               	movlw	255
  7969  05DE  06BE               	xorwf	___ftadd@f1,f
  7970  05DF  30FF               	movlw	255
  7971  05E0  06BF               	xorwf	___ftadd@f1+1,f
  7972  05E1  30FF               	movlw	255
  7973  05E2  06C0               	xorwf	___ftadd@f1+2,f
  7974  05E3  3001               	movlw	1
  7975  05E4  07BE               	addwf	___ftadd@f1,f
  7976  05E5  3000               	movlw	0
  7977  05E6  1803               	skipnc
  7978  05E7  3001               	movlw	1
  7979  05E8  07BF               	addwf	___ftadd@f1+1,f
  7980  05E9  3000               	movlw	0
  7981  05EA  1803               	skipnc
  7982  05EB  3001               	movlw	1
  7983  05EC  07C0               	addwf	___ftadd@f1+2,f
  7984  05ED                     l5178:	
  7985  05ED  1F48               	btfss	___ftadd@sign,6
  7986  05EE  2DFF               	goto	l5182
  7987  05EF  30FF               	movlw	255
  7988  05F0  06C1               	xorwf	___ftadd@f2,f
  7989  05F1  30FF               	movlw	255
  7990  05F2  06C2               	xorwf	___ftadd@f2+1,f
  7991  05F3  30FF               	movlw	255
  7992  05F4  06C3               	xorwf	___ftadd@f2+2,f
  7993  05F5  3001               	movlw	1
  7994  05F6  07C1               	addwf	___ftadd@f2,f
  7995  05F7  3000               	movlw	0
  7996  05F8  1803               	skipnc
  7997  05F9  3001               	movlw	1
  7998  05FA  07C2               	addwf	___ftadd@f2+1,f
  7999  05FB  3000               	movlw	0
  8000  05FC  1803               	skipnc
  8001  05FD  3001               	movlw	1
  8002  05FE  07C3               	addwf	___ftadd@f2+2,f
  8003  05FF                     l5182:	
  8004  05FF  01C8               	clrf	___ftadd@sign
  8005  0600  083E               	movf	___ftadd@f1,w
  8006  0601  07C1               	addwf	___ftadd@f2,f
  8007  0602  083F               	movf	___ftadd@f1+1,w
  8008  0603  3DC2               	addwfc	___ftadd@f2+1,f
  8009  0604  0840               	movf	___ftadd@f1+2,w
  8010  0605  3DC3               	addwfc	___ftadd@f2+2,f
  8011  0606  1FC3               	btfss	___ftadd@f2+2,7
  8012  0607  2E1A               	goto	l5192
  8013  0608  30FF               	movlw	255
  8014  0609  06C1               	xorwf	___ftadd@f2,f
  8015  060A  30FF               	movlw	255
  8016  060B  06C2               	xorwf	___ftadd@f2+1,f
  8017  060C  30FF               	movlw	255
  8018  060D  06C3               	xorwf	___ftadd@f2+2,f
  8019  060E  3001               	movlw	1
  8020  060F  07C1               	addwf	___ftadd@f2,f
  8021  0610  3000               	movlw	0
  8022  0611  1803               	skipnc
  8023  0612  3001               	movlw	1
  8024  0613  07C2               	addwf	___ftadd@f2+1,f
  8025  0614  3000               	movlw	0
  8026  0615  1803               	skipnc
  8027  0616  3001               	movlw	1
  8028  0617  07C3               	addwf	___ftadd@f2+2,f
  8029  0618  01C8               	clrf	___ftadd@sign
  8030  0619  0AC8               	incf	___ftadd@sign,f
  8031  061A                     l5192:	
  8032  061A  0841               	movf	___ftadd@f2,w
  8033  061B  00A0               	movwf	___ftpack@arg
  8034  061C  0842               	movf	___ftadd@f2+1,w
  8035  061D  00A1               	movwf	___ftpack@arg+1
  8036  061E  0843               	movf	___ftadd@f2+2,w
  8037  061F  00A2               	movwf	___ftpack@arg+2
  8038  0620  084A               	movf	___ftadd@exp1,w
  8039  0621  00C4               	movwf	??___ftadd
  8040  0622  0844               	movf	??___ftadd,w
  8041  0623  00A3               	movwf	___ftpack@exp
  8042  0624  0848               	movf	___ftadd@sign,w
  8043  0625  00C5               	movwf	??___ftadd+1
  8044  0626  0845               	movf	??___ftadd+1,w
  8045  0627  00A4               	movwf	___ftpack@sign
  8046  0628  3188  202D         	fcall	___ftpack
  8047  062A  0020               	movlb	0	; select bank0
  8048  062B  0820               	movf	?___ftpack,w
  8049  062C  00BE               	movwf	?___ftadd
  8050  062D  0821               	movf	?___ftpack+1,w
  8051  062E  00BF               	movwf	?___ftadd+1
  8052  062F  0822               	movf	?___ftpack+2,w
  8053  0630  00C0               	movwf	?___ftadd+2
  8054  0631  0008               	return
  8055  0632                     __end_of___ftadd:	
  8056                           
  8057                           	psect	text31
  8058  1F7C                     __ptext31:	
  8059 ;; *************** function _RF_RxDisable *****************
  8060 ;; Defined at:
  8061 ;;		line 215 in file "../src/RF_Control_B1.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  rf              1    wreg     unsigned char 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  rf              1    4[BANK0 ] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;		None               void
  8068 ;; Registers used:
  8069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;Total ram usage:        1 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    7
  8082 ;; This function calls:
  8083 ;;		_CC2500_WriteCommand
  8084 ;;		_RfPointSelect
  8085 ;; This function is called by:
  8086 ;;		_setRF_Main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _RF_RxDisable
  8092  1F7C                     _RF_RxDisable:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8096                           ;RF_RxDisable@rf stored from wreg
  8097  1F7C  0020               	movlb	0	; select bank0
  8098  1F7D  00A4               	movwf	RF_RxDisable@rf
  8099                           
  8100                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
  8101  1F7E  0824               	movf	RF_RxDisable@rf,w
  8102  1F7F  319D  2520  319F   	fcall	_RfPointSelect
  8103                           
  8104                           ;RF_Control_B1.c: 218: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8105  1F82  087A               	movf	_RF,w
  8106  1F83  0086               	movwf	6
  8107  1F84  0187               	clrf	7
  8108  1F85  1881               	btfsc	1,1
  8109  1F86  2F8C               	goto	l6098
  8110  1F87  087A               	movf	_RF,w
  8111  1F88  0086               	movwf	6
  8112  1F89  0187               	clrf	7
  8113  1F8A  1D81               	btfss	1,3
  8114  1F8B  0008               	return
  8115  1F8C                     l6098:	
  8116                           
  8117                           ;RF_Control_B1.c: 219: RF->RxStatus = 0;
  8118  1F8C  087A               	movf	_RF,w
  8119  1F8D  0086               	movwf	6
  8120  1F8E  0187               	clrf	7
  8121  1F8F  1181               	bcf	1,3
  8122                           
  8123                           ;RF_Control_B1.c: 220: RF->ReceiveGO = 0;
  8124  1F90  087A               	movf	_RF,w
  8125  1F91  0086               	movwf	6
  8126  1F92  0187               	clrf	7
  8127  1F93  1081               	bcf	1,1
  8128                           
  8129                           ;RF_Control_B1.c: 221: CC2500_WriteCommand(0x36);
  8130  1F94  3036               	movlw	54
  8131  1F95  319D  2569  319F   	fcall	_CC2500_WriteCommand
  8132                           
  8133                           ;RF_Control_B1.c: 222: CC2500_WriteCommand(0x3A);
  8134  1F98  303A               	movlw	58
  8135  1F99  319D  2569         	fcall	_CC2500_WriteCommand
  8136  1F9B  0008               	return
  8137  1F9C                     __end_of_RF_RxDisable:	
  8138                           
  8139                           	psect	text32
  8140  12E8                     __ptext32:	
  8141 ;; *************** function _CC2500_TxData *****************
  8142 ;; Defined at:
  8143 ;;		line 32 in file "../src/CC2500_B1.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;		None
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;		None               void
  8150 ;; Registers used:
  8151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;Total ram usage:        2 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    7
  8164 ;; This function calls:
  8165 ;;		_CC2500_WriteByte
  8166 ;;		_CC2500_WriteCommand
  8167 ;; This function is called by:
  8168 ;;		_setRF_Main
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           
  8173                           ;psect for function _CC2500_TxData
  8174  12E8                     _CC2500_TxData:	
  8175                           
  8176                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8177                           ;CC2500_B1.c: 35: RC4 = 0;
  8178                           
  8179                           ;incstack = 0
  8180                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8181  12E8  0020               	movlb	0	; select bank0
  8182  12E9  120E               	bcf	14,4	;volatile
  8183                           
  8184                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8185  12EA  307F               	movlw	127
  8186  12EB  00A4               	movwf	??_CC2500_TxData
  8187  12EC  0824               	movf	??_CC2500_TxData,w
  8188  12ED  0021               	movlb	1	; select bank1
  8189  12EE  00C2               	movwf	_SPI0Buffer^(0+128)
  8190  12EF                     l255:	
  8191                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8192                           
  8193  12EF  0020               	movlb	0	; select bank0
  8194  12F0  190E               	btfsc	14,2	;volatile
  8195  12F1  2AEF               	goto	l255
  8196                           
  8197                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8198  12F2  319E  2668  3192   	fcall	_CC2500_WriteByte
  8199                           
  8200                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8201  12F5  0021               	movlb	1	; select bank1
  8202  12F6  0843               	movf	_Tx_Length^(0+128),w
  8203  12F7  0020               	movlb	0	; select bank0
  8204  12F8  00A4               	movwf	??_CC2500_TxData
  8205  12F9  0824               	movf	??_CC2500_TxData,w
  8206  12FA  0021               	movlb	1	; select bank1
  8207  12FB  00C2               	movwf	_SPI0Buffer^(0+128)
  8208                           
  8209                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8210  12FC  319E  2668  3192   	fcall	_CC2500_WriteByte
  8211                           
  8212                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8213  12FF  0020               	movlb	0	; select bank0
  8214  1300  01A5               	clrf	CC2500_TxData@loop_e
  8215  1301                     l5900:	
  8216  1301  0021               	movlb	1	; select bank1
  8217  1302  0843               	movf	_Tx_Length^(0+128),w
  8218  1303  0020               	movlb	0	; select bank0
  8219  1304  0225               	subwf	CC2500_TxData@loop_e,w
  8220  1305  1803               	btfsc	3,0
  8221  1306  2B19               	goto	l260
  8222                           
  8223                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8224  1307  0825               	movf	CC2500_TxData@loop_e,w
  8225  1308  3EA0               	addlw	_RF_Data& (0+255)
  8226  1309  0086               	movwf	6
  8227  130A  0187               	clrf	7
  8228  130B  0801               	movf	1,w
  8229  130C  00A4               	movwf	??_CC2500_TxData
  8230  130D  0824               	movf	??_CC2500_TxData,w
  8231  130E  0021               	movlb	1	; select bank1
  8232  130F  00C2               	movwf	_SPI0Buffer^(0+128)
  8233                           
  8234                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8235  1310  319E  2668  3192   	fcall	_CC2500_WriteByte
  8236  1313  3001               	movlw	1
  8237  1314  0020               	movlb	0	; select bank0
  8238  1315  00A4               	movwf	??_CC2500_TxData
  8239  1316  0824               	movf	??_CC2500_TxData,w
  8240  1317  07A5               	addwf	CC2500_TxData@loop_e,f
  8241  1318  2B01               	goto	l5900
  8242  1319                     l260:	
  8243                           
  8244                           ;CC2500_B1.c: 44: }
  8245                           ;CC2500_B1.c: 45: RC4 = 1;
  8246  1319  160E               	bsf	14,4	;volatile
  8247                           
  8248                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8249  131A  3035               	movlw	53
  8250  131B  319D  2569  3192   	fcall	_CC2500_WriteCommand
  8251  131E                     l261:	
  8252                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8253                           
  8254  131E  0020               	movlb	0	; select bank0
  8255  131F  1C0D               	btfss	13,0	;volatile
  8256  1320  2B1E               	goto	l261
  8257  1321                     l264:	
  8258                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8259                           
  8260  1321  180D               	btfsc	13,0	;volatile
  8261  1322  2B21               	goto	l264
  8262                           
  8263                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8264  1323  3036               	movlw	54
  8265  1324  319D  2569  3192   	fcall	_CC2500_WriteCommand
  8266                           
  8267                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8268  1327  303B               	movlw	59
  8269  1328  319D  2569         	fcall	_CC2500_WriteCommand
  8270                           
  8271                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8272  132A  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8273  132B  0008               	return
  8274  132C                     __end_of_CC2500_TxData:	
  8275                           
  8276                           	psect	text33
  8277  0707                     __ptext33:	
  8278 ;; *************** function _CC2500_RxData *****************
  8279 ;; Defined at:
  8280 ;;		line 57 in file "../src/CC2500_B1.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;  loop_f          1   15[BANK0 ] unsigned char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;		None               void
  8287 ;; Registers used:
  8288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        3 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    7
  8301 ;; This function calls:
  8302 ;;		_CC2500_ReadByte
  8303 ;;		_CC2500_ReadStatus
  8304 ;;		_CC2500_WriteByte
  8305 ;;		_CC2500_WriteCommand
  8306 ;;		_setBuz
  8307 ;; This function is called by:
  8308 ;;		_setRF_Main
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _CC2500_RxData
  8314  0707                     _CC2500_RxData:	
  8315                           
  8316                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8317                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8318                           
  8319                           ;incstack = 0
  8320                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8321  0707  0020               	movlb	0	; select bank0
  8322  0708  180D               	btfsc	13,0	;volatile
  8323  0709  2F3A               	goto	l271
  8324  070A  2F3D               	goto	l5920
  8325  070B                     l5912:	
  8326                           ;CC2500_B1.c: 63: {
  8327                           ;CC2500_B1.c: 64: while (RB0 == 1) {
  8328                           
  8329                           
  8330                           ;CC2500_B1.c: 65: myMain->pcount1++;
  8331  070B  0021               	movlb	1	; select bank1
  8332  070C  086E               	movf	_myMain^(0+128),w
  8333  070D  3E10               	addlw	16
  8334  070E  0086               	movwf	6
  8335  070F  3001               	movlw	1	; select bank2/3
  8336  0710  0087               	movwf	7
  8337  0711  3001               	movlw	1
  8338  0712  0781               	addwf	1,f
  8339  0713  3141               	addfsr 1,1
  8340  0714  1803               	skipnc
  8341  0715  0A81               	incf	1,f
  8342                           
  8343                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
  8344  0716  086E               	movf	_myMain^(0+128),w
  8345  0717  3E10               	addlw	16
  8346  0718  0086               	movwf	6
  8347  0719  3001               	movlw	1	; select bank2/3
  8348  071A  0087               	movwf	7
  8349  071B  3F40               	moviw [0]fsr1
  8350  071C  0020               	movlb	0	; select bank0
  8351  071D  00AD               	movwf	??_CC2500_RxData
  8352  071E  3F41               	moviw [1]fsr1
  8353  071F  00AE               	movwf	??_CC2500_RxData+1
  8354  0720  3027               	movlw	39
  8355  0721  022E               	subwf	??_CC2500_RxData+1,w
  8356  0722  3010               	movlw	16
  8357  0723  1903               	skipnz
  8358  0724  022D               	subwf	??_CC2500_RxData,w
  8359  0725  1C03               	skipc
  8360  0726  2F3A               	goto	l271
  8361                           
  8362                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
  8363  0727  0021               	movlb	1	; select bank1
  8364  0728  086E               	movf	_myMain^(0+128),w
  8365  0729  3E10               	addlw	16
  8366  072A  0086               	movwf	6
  8367  072B  3001               	movlw	1	; select bank2/3
  8368  072C  0087               	movwf	7
  8369  072D  3000               	movlw	0
  8370  072E  3FC0               	movwi [0]fsr1
  8371  072F  3FC1               	movwi [1]fsr1
  8372                           
  8373                           ;CC2500_B1.c: 68: setBuz(1, 250);
  8374  0730  30FA               	movlw	250
  8375  0731  0020               	movlb	0	; select bank0
  8376  0732  00A9               	movwf	setBuz@time
  8377  0733  3000               	movlw	0
  8378  0734  00AA               	movwf	setBuz@time+1
  8379  0735  3001               	movlw	1
  8380  0736  318C  243C  3187   	fcall	_setBuz
  8381                           
  8382                           ;CC2500_B1.c: 69: break;
  8383  0739  2F3D               	goto	l5920
  8384  073A                     l271:	
  8385  073A  0020               	movlb	0	; select bank0
  8386  073B  180D               	btfsc	13,0	;volatile
  8387  073C  2F0B               	goto	l5912
  8388  073D                     l5920:	
  8389                           ;CC2500_B1.c: 70: }
  8390                           ;CC2500_B1.c: 71: };
  8391                           
  8392                           
  8393                           ;CC2500_B1.c: 72: }
  8394                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
  8395  073D  303B               	movlw	59
  8396  073E  319E  26E7  3187   	fcall	_CC2500_ReadStatus
  8397                           
  8398                           ;CC2500_B1.c: 75: if (s_data != 0) {
  8399  0741  0021               	movlb	1	; select bank1
  8400  0742  0846               	movf	_s_data^(0+128),w
  8401  0743  1903               	btfsc	3,2
  8402  0744  2FBD               	goto	l5962
  8403                           
  8404                           ;CC2500_B1.c: 76: RC4 = 0;
  8405  0745  0020               	movlb	0	; select bank0
  8406  0746  120E               	bcf	14,4	;volatile
  8407                           
  8408                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
  8409  0747  30FF               	movlw	255
  8410  0748  00AD               	movwf	??_CC2500_RxData
  8411  0749  082D               	movf	??_CC2500_RxData,w
  8412  074A  0021               	movlb	1	; select bank1
  8413  074B  00C2               	movwf	_SPI0Buffer^(0+128)
  8414  074C                     l276:	
  8415                           ;CC2500_B1.c: 78: while (RC2 == 1) {
  8416                           
  8417  074C  0020               	movlb	0	; select bank0
  8418  074D  1D0E               	btfss	14,2	;volatile
  8419  074E  2F7D               	goto	l5936
  8420                           
  8421                           ;CC2500_B1.c: 79: myMain->pcount2++;
  8422  074F  0021               	movlb	1	; select bank1
  8423  0750  086E               	movf	_myMain^(0+128),w
  8424  0751  3E12               	addlw	18
  8425  0752  0086               	movwf	6
  8426  0753  3001               	movlw	1	; select bank2/3
  8427  0754  0087               	movwf	7
  8428  0755  3001               	movlw	1
  8429  0756  0781               	addwf	1,f
  8430  0757  3141               	addfsr 1,1
  8431  0758  1803               	skipnc
  8432  0759  0A81               	incf	1,f
  8433                           
  8434                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
  8435  075A  086E               	movf	_myMain^(0+128),w
  8436  075B  3E12               	addlw	18
  8437  075C  0086               	movwf	6
  8438  075D  3001               	movlw	1	; select bank2/3
  8439  075E  0087               	movwf	7
  8440  075F  3F40               	moviw [0]fsr1
  8441  0760  0020               	movlb	0	; select bank0
  8442  0761  00AD               	movwf	??_CC2500_RxData
  8443  0762  3F41               	moviw [1]fsr1
  8444  0763  00AE               	movwf	??_CC2500_RxData+1
  8445  0764  3027               	movlw	39
  8446  0765  022E               	subwf	??_CC2500_RxData+1,w
  8447  0766  3010               	movlw	16
  8448  0767  1903               	skipnz
  8449  0768  022D               	subwf	??_CC2500_RxData,w
  8450  0769  1C03               	skipc
  8451  076A  2F4C               	goto	l276
  8452                           
  8453                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
  8454  076B  0021               	movlb	1	; select bank1
  8455  076C  086E               	movf	_myMain^(0+128),w
  8456  076D  3E12               	addlw	18
  8457  076E  0086               	movwf	6
  8458  076F  3001               	movlw	1	; select bank2/3
  8459  0770  0087               	movwf	7
  8460  0771  3000               	movlw	0
  8461  0772  3FC0               	movwi [0]fsr1
  8462  0773  3FC1               	movwi [1]fsr1
  8463                           
  8464                           ;CC2500_B1.c: 82: setBuz(2, 250);
  8465  0774  30FA               	movlw	250
  8466  0775  0020               	movlb	0	; select bank0
  8467  0776  00A9               	movwf	setBuz@time
  8468  0777  3000               	movlw	0
  8469  0778  00AA               	movwf	setBuz@time+1
  8470  0779  3002               	movlw	2
  8471  077A  318C  243C  3187   	fcall	_setBuz
  8472  077D                     l5936:	
  8473                           ;CC2500_B1.c: 83: break;
  8474                           
  8475                           
  8476                           ;CC2500_B1.c: 84: }
  8477                           ;CC2500_B1.c: 85: };
  8478                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8479  077D  319E  2668  3187   	fcall	_CC2500_WriteByte
  8480                           
  8481                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8482  0780  319F  2702  3187   	fcall	_CC2500_ReadByte
  8483                           
  8484                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8485  0783  0021               	movlb	1	; select bank1
  8486  0784  0842               	movf	_SPI0Buffer^(0+128),w
  8487  0785  0020               	movlb	0	; select bank0
  8488  0786  00AD               	movwf	??_CC2500_RxData
  8489  0787  082D               	movf	??_CC2500_RxData,w
  8490  0788  0021               	movlb	1	; select bank1
  8491  0789  00C1               	movwf	_Rx_Length^(0+128)
  8492                           
  8493                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8494  078A  0020               	movlb	0	; select bank0
  8495  078B  01AF               	clrf	CC2500_RxData@loop_f
  8496  078C                     l5948:	
  8497  078C  0021               	movlb	1	; select bank1
  8498  078D  0841               	movf	_Rx_Length^(0+128),w
  8499  078E  0020               	movlb	0	; select bank0
  8500  078F  022F               	subwf	CC2500_RxData@loop_f,w
  8501  0790  1803               	btfsc	3,0
  8502  0791  2FA4               	goto	l5950
  8503                           
  8504                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8505  0792  319F  2702  3187   	fcall	_CC2500_ReadByte
  8506                           
  8507                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8508  0795  0021               	movlb	1	; select bank1
  8509  0796  0842               	movf	_SPI0Buffer^(0+128),w
  8510  0797  0020               	movlb	0	; select bank0
  8511  0798  00AD               	movwf	??_CC2500_RxData
  8512  0799  082F               	movf	CC2500_RxData@loop_f,w
  8513  079A  3EA0               	addlw	_RF_Data& (0+255)
  8514  079B  0086               	movwf	6
  8515  079C  0187               	clrf	7
  8516  079D  082D               	movf	??_CC2500_RxData,w
  8517  079E  0081               	movwf	1
  8518  079F  3001               	movlw	1
  8519  07A0  00AD               	movwf	??_CC2500_RxData
  8520  07A1  082D               	movf	??_CC2500_RxData,w
  8521  07A2  07AF               	addwf	CC2500_RxData@loop_f,f
  8522  07A3  2F8C               	goto	l5948
  8523  07A4                     l5950:	
  8524                           
  8525                           ;CC2500_B1.c: 94: }
  8526                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8527  07A4  319F  2702  3187   	fcall	_CC2500_ReadByte
  8528                           
  8529                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8530  07A7  0021               	movlb	1	; select bank1
  8531  07A8  0842               	movf	_SPI0Buffer^(0+128),w
  8532  07A9  0020               	movlb	0	; select bank0
  8533  07AA  00AD               	movwf	??_CC2500_RxData
  8534  07AB  082D               	movf	??_CC2500_RxData,w
  8535  07AC  0021               	movlb	1	; select bank1
  8536  07AD  00C0               	movwf	_RSSI^(0+128)
  8537                           
  8538                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8539  07AE  319F  2702  3187   	fcall	_CC2500_ReadByte
  8540                           
  8541                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  8542  07B1  0021               	movlb	1	; select bank1
  8543  07B2  0842               	movf	_SPI0Buffer^(0+128),w
  8544  07B3  0020               	movlb	0	; select bank0
  8545  07B4  00AD               	movwf	??_CC2500_RxData
  8546  07B5  082D               	movf	??_CC2500_RxData,w
  8547  07B6  0021               	movlb	1	; select bank1
  8548  07B7  00B8               	movwf	_CRC^(0+128)
  8549                           
  8550                           ;CC2500_B1.c: 99: RC4 = 1;
  8551  07B8  0020               	movlb	0	; select bank0
  8552  07B9  160E               	bsf	14,4	;volatile
  8553                           
  8554                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  8555  07BA  0021               	movlb	1	; select bank1
  8556  07BB  1BB8               	btfsc	_CRC^(0+128),7
  8557                           
  8558                           ;CC2500_B1.c: 101: Receive_OK = 1;
  8559  07BC  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8560  07BD                     l5962:	
  8561                           
  8562                           ;CC2500_B1.c: 102: }
  8563                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  8564  07BD  3036               	movlw	54
  8565  07BE  319D  2569  3187   	fcall	_CC2500_WriteCommand
  8566                           
  8567                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  8568  07C1  303A               	movlw	58
  8569  07C2  319D  2569         	fcall	_CC2500_WriteCommand
  8570  07C4  0008               	return
  8571  07C5                     __end_of_CC2500_RxData:	
  8572                           
  8573                           	psect	text34
  8574  1EE7                     __ptext34:	
  8575 ;; *************** function _CC2500_ReadStatus *****************
  8576 ;; Defined at:
  8577 ;;		line 277 in file "../src/CC2500_B1.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  status_addr     1    wreg     unsigned char 
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8582 ;; Return value:  Size  Location     Type
  8583 ;;		None               void
  8584 ;; Registers used:
  8585 ;;		wreg, status,2, status,0, pclath, cstack
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/0
  8588 ;;		On exit  : 0/0
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;Total ram usage:        2 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    6
  8598 ;; This function calls:
  8599 ;;		_CC2500_ReadByte
  8600 ;;		_CC2500_WriteByte
  8601 ;; This function is called by:
  8602 ;;		_CC2500_RxData
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           
  8607                           ;psect for function _CC2500_ReadStatus
  8608  1EE7                     _CC2500_ReadStatus:	
  8609                           
  8610                           ;incstack = 0
  8611                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8612                           ;CC2500_ReadStatus@status_addr stored from wreg
  8613  1EE7  0020               	movlb	0	; select bank0
  8614  1EE8  00A3               	movwf	CC2500_ReadStatus@status_addr
  8615                           
  8616                           ;CC2500_B1.c: 278: RC4 = 0;
  8617  1EE9  120E               	bcf	14,4	;volatile
  8618                           
  8619                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
  8620  1EEA  0823               	movf	CC2500_ReadStatus@status_addr,w
  8621  1EEB  3EC0               	addlw	192
  8622  1EEC  00A2               	movwf	??_CC2500_ReadStatus
  8623  1EED  0822               	movf	??_CC2500_ReadStatus,w
  8624  1EEE  0021               	movlb	1	; select bank1
  8625  1EEF  00C2               	movwf	_SPI0Buffer^(0+128)
  8626  1EF0                     l353:	
  8627                           ;CC2500_B1.c: 281: while (RC2 == 1);
  8628                           
  8629  1EF0  0020               	movlb	0	; select bank0
  8630  1EF1  190E               	btfsc	14,2	;volatile
  8631  1EF2  2EF0               	goto	l353
  8632                           
  8633                           ;CC2500_B1.c: 283: CC2500_WriteByte();
  8634  1EF3  319E  2668  319E   	fcall	_CC2500_WriteByte
  8635                           
  8636                           ;CC2500_B1.c: 284: CC2500_ReadByte();
  8637  1EF6  319F  2702         	fcall	_CC2500_ReadByte
  8638                           
  8639                           ;CC2500_B1.c: 285: RC4 = 1;
  8640  1EF8  0020               	movlb	0	; select bank0
  8641  1EF9  160E               	bsf	14,4	;volatile
  8642                           
  8643                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
  8644  1EFA  0021               	movlb	1	; select bank1
  8645  1EFB  0842               	movf	_SPI0Buffer^(0+128),w
  8646  1EFC  0020               	movlb	0	; select bank0
  8647  1EFD  00A2               	movwf	??_CC2500_ReadStatus
  8648  1EFE  0822               	movf	??_CC2500_ReadStatus,w
  8649  1EFF  0021               	movlb	1	; select bank1
  8650  1F00  00C6               	movwf	_s_data^(0+128)
  8651  1F01  0008               	return
  8652  1F02                     __end_of_CC2500_ReadStatus:	
  8653                           
  8654                           	psect	text35
  8655  1F02                     __ptext35:	
  8656 ;; *************** function _CC2500_ReadByte *****************
  8657 ;; Defined at:
  8658 ;;		line 221 in file "../src/CC2500_B1.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;		None
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8663 ;; Return value:  Size  Location     Type
  8664 ;;		None               void
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;Total ram usage:        2 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    5
  8679 ;; This function calls:
  8680 ;;		Nothing
  8681 ;; This function is called by:
  8682 ;;		_CC2500_RxData
  8683 ;;		_CC2500_ReadStatus
  8684 ;;		_CC2500_ReadREG
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _CC2500_ReadByte
  8690  1F02                     _CC2500_ReadByte:	
  8691                           
  8692                           ;CC2500_B1.c: 222: unsigned char loop_b;
  8693                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8697  1F02  0020               	movlb	0	; select bank0
  8698  1F03  01A1               	clrf	CC2500_ReadByte@loop_b
  8699  1F04                     L8:	
  8700  1F04  3008               	movlw	8
  8701  1F05  0221               	subwf	CC2500_ReadByte@loop_b,w
  8702  1F06  1803               	btfsc	3,0
  8703  1F07  0008               	return
  8704                           
  8705                           ;CC2500_B1.c: 224: RC1 = 1;
  8706  1F08  148E               	bsf	14,1	;volatile
  8707                           
  8708                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
  8709  1F09  1003               	clrc
  8710  1F0A  0021               	movlb	1	; select bank1
  8711  1F0B  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8712                           
  8713                           ;CC2500_B1.c: 226: if (RC2 == 1)
  8714  1F0C  0020               	movlb	0	; select bank0
  8715  1F0D  1D0E               	btfss	14,2	;volatile
  8716  1F0E  2F12               	goto	l5648
  8717                           
  8718                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
  8719  1F0F  0021               	movlb	1	; select bank1
  8720  1F10  1442               	bsf	_SPI0Buffer^(0+128),0
  8721  1F11  2F18               	goto	l5650
  8722  1F12                     l5648:	
  8723                           
  8724                           ;CC2500_B1.c: 228: else
  8725                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
  8726  1F12  30FE               	movlw	254
  8727  1F13  0020               	movlb	0	; select bank0
  8728  1F14  00A0               	movwf	??_CC2500_ReadByte
  8729  1F15  0820               	movf	??_CC2500_ReadByte,w
  8730  1F16  0021               	movlb	1	; select bank1
  8731  1F17  05C2               	andwf	_SPI0Buffer^(0+128),f
  8732  1F18                     l5650:	
  8733                           
  8734                           ;CC2500_B1.c: 230: RC1 = 0;
  8735  1F18  0020               	movlb	0	; select bank0
  8736  1F19  108E               	bcf	14,1	;volatile
  8737  1F1A  3001               	movlw	1
  8738  1F1B  00A0               	movwf	??_CC2500_ReadByte
  8739  1F1C  0820               	movf	??_CC2500_ReadByte,w
  8740  1F1D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8741  1F1E  2F04               	goto	L8
  8742  1F1F                     __end_of_CC2500_ReadByte:	
  8743                           
  8744                           	psect	text36
  8745  1BFB                     __ptext36:	
  8746 ;; *************** function _RF_Initialization *****************
  8747 ;; Defined at:
  8748 ;;		line 19 in file "../src/RF_Control_B1.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;		None
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;		None
  8753 ;; Return value:  Size  Location     Type
  8754 ;;		None               void
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0, pclath, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;Total ram usage:        0 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    6
  8769 ;; This function calls:
  8770 ;;		_setRF_Initialization
  8771 ;; This function is called by:
  8772 ;;		_main
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _RF_Initialization
  8778  1BFB                     _RF_Initialization:	
  8779                           
  8780                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8784  1BFB  3001               	movlw	1
  8785  1BFC  319C  2434         	fcall	_setRF_Initialization
  8786  1BFE  0008               	return
  8787  1BFF                     __end_of_RF_Initialization:	
  8788                           
  8789                           	psect	text37
  8790  1C34                     __ptext37:	
  8791 ;; *************** function _setRF_Initialization *****************
  8792 ;; Defined at:
  8793 ;;		line 56 in file "../src/RF_Control_B1.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  rf              1    wreg     unsigned char 
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;  rf              1    0[COMMON] unsigned char 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;		None               void
  8800 ;; Registers used:
  8801 ;;		wreg
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;Total ram usage:        1 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    5
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_RF_Initialization
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _setRF_Initialization
  8823  1C34                     _setRF_Initialization:	
  8824                           
  8825                           ;RF_Control_B1.c: 59: Tx_Length = 21;
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _setRF_Initialization: [wreg]
  8829  1C34  3015               	movlw	21
  8830  1C35  0020               	movlb	0	; select bank0
  8831  1C36  00A0               	movwf	??_setRF_Initialization
  8832  1C37  0820               	movf	??_setRF_Initialization,w
  8833  1C38  0021               	movlb	1	; select bank1
  8834  1C39  00C3               	movwf	_Tx_Length^(0+128)
  8835  1C3A  0008               	return
  8836  1C3B                     __end_of_setRF_Initialization:	
  8837                           
  8838                           	psect	text38
  8839  1BE0                     __ptext38:	
  8840 ;; *************** function _PowerFault_Main *****************
  8841 ;; Defined at:
  8842 ;;		line 22 in file "../src/PowerFault_B1.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;		None
  8845 ;; Auto vars:     Size  Location     Type
  8846 ;;		None
  8847 ;; Return value:  Size  Location     Type
  8848 ;;		None               void
  8849 ;; Registers used:
  8850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;Total ram usage:        0 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; Hardware stack levels required when called:   11
  8863 ;; This function calls:
  8864 ;;		_setPowerFault_Main
  8865 ;; This function is called by:
  8866 ;;		_main
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           
  8871                           ;psect for function _PowerFault_Main
  8872  1BE0                     _PowerFault_Main:	
  8873                           
  8874                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8878  1BE0  3183  233E         	fcall	_setPowerFault_Main
  8879  1BE2  0008               	return
  8880  1BE3                     __end_of_PowerFault_Main:	
  8881                           
  8882                           	psect	text39
  8883  033E                     __ptext39:	
  8884 ;; *************** function _setPowerFault_Main *****************
  8885 ;; Defined at:
  8886 ;;		line 61 in file "../src/PowerFault_B1.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;		None
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;		None
  8891 ;; Return value:  Size  Location     Type
  8892 ;;		None               void
  8893 ;; Registers used:
  8894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;Total ram usage:        2 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:   10
  8907 ;; This function calls:
  8908 ;;		_setPowerFault_Exceptions
  8909 ;; This function is called by:
  8910 ;;		_PowerFault_Main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           
  8915                           ;psect for function _setPowerFault_Main
  8916  033E                     _setPowerFault_Main:	
  8917                           
  8918                           ;PowerFault_B1.c: 63: if(PF->Enable)
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8922  033E  0021               	movlb	1	; select bank1
  8923  033F  083E               	movf	_PF^(0+128),w
  8924  0340  0086               	movwf	6
  8925  0341  3001               	movlw	1	; select bank2/3
  8926  0342  0087               	movwf	7
  8927  0343  1C01               	btfss	1,0
  8928  0344  0008               	return
  8929                           
  8930                           ;PowerFault_B1.c: 64: {
  8931                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  8932  0345  083E               	movf	_PF^(0+128),w
  8933  0346  0086               	movwf	6
  8934  0347  3001               	movlw	1	; select bank2/3
  8935  0348  0087               	movwf	7
  8936  0349  1981               	btfsc	1,3
  8937  034A  2B7A               	goto	l6584
  8938                           
  8939                           ;PowerFault_B1.c: 66: {
  8940                           ;PowerFault_B1.c: 67: PF->Time++;
  8941  034B  083E               	movf	_PF^(0+128),w
  8942  034C  3E02               	addlw	2
  8943  034D  0086               	movwf	6
  8944  034E  3001               	movlw	1	; select bank2/3
  8945  034F  0087               	movwf	7
  8946  0350  3001               	movlw	1
  8947  0351  0781               	addwf	1,f
  8948  0352  3141               	addfsr 1,1
  8949  0353  1803               	skipnc
  8950  0354  0A81               	incf	1,f
  8951                           
  8952                           ;PowerFault_B1.c: 69: {
  8953                           ;PowerFault_B1.c: 70: if(1 && 1)
  8954  0355  083E               	movf	_PF^(0+128),w
  8955  0356  3E02               	addlw	2
  8956  0357  0086               	movwf	6
  8957  0358  3001               	movlw	1	; select bank2/3
  8958  0359  0087               	movwf	7
  8959  035A  3F40               	moviw [0]fsr1
  8960  035B  0020               	movlb	0	; select bank0
  8961  035C  00B0               	movwf	??_setPowerFault_Main
  8962  035D  3F41               	moviw [1]fsr1
  8963  035E  00B1               	movwf	??_setPowerFault_Main+1
  8964  035F  3002               	movlw	2
  8965  0360  0231               	subwf	??_setPowerFault_Main+1,w
  8966  0361  30BC               	movlw	188
  8967  0362  1903               	skipnz
  8968  0363  0230               	subwf	??_setPowerFault_Main,w
  8969  0364  1C03               	skipc
  8970  0365  0008               	return
  8971                           
  8972                           ;PowerFault_B1.c: 71: {
  8973                           ;PowerFault_B1.c: 72: PF->Time=0;
  8974  0366  0021               	movlb	1	; select bank1
  8975  0367  083E               	movf	_PF^(0+128),w
  8976  0368  3E02               	addlw	2
  8977  0369  0086               	movwf	6
  8978  036A  3001               	movlw	1	; select bank2/3
  8979  036B  0087               	movwf	7
  8980  036C  3000               	movlw	0
  8981  036D  3FC0               	movwi [0]fsr1
  8982  036E  3FC1               	movwi [1]fsr1
  8983                           
  8984                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  8985  036F  083E               	movf	_PF^(0+128),w
  8986  0370  0086               	movwf	6
  8987  0371  3001               	movlw	1	; select bank2/3
  8988  0372  0087               	movwf	7
  8989  0373  1581               	bsf	1,3
  8990                           
  8991                           ;PowerFault_B1.c: 74: PF->Safe=0;
  8992  0374  083E               	movf	_PF^(0+128),w
  8993  0375  0086               	movwf	6
  8994  0376  3001               	movlw	1	; select bank2/3
  8995  0377  0087               	movwf	7
  8996  0378  1101               	bcf	1,2
  8997                           
  8998                           ;PowerFault_B1.c: 75: }
  8999  0379  0008               	return
  9000  037A                     l6584:	
  9001                           ;PowerFault_B1.c: 79: }
  9002                           ;PowerFault_B1.c: 80: }
  9003                           ;PowerFault_B1.c: 81: }
  9004                           
  9005                           ;PowerFault_B1.c: 76: else
  9006                           ;PowerFault_B1.c: 77: {
  9007                           ;PowerFault_B1.c: 78: PF->Time=700;
  9008                           
  9009                           
  9010                           ;PowerFault_B1.c: 82: else
  9011                           ;PowerFault_B1.c: 83: {
  9012                           ;PowerFault_B1.c: 84: PF->Time++;
  9013  037A  083E               	movf	_PF^(0+128),w
  9014  037B  3E02               	addlw	2
  9015  037C  0086               	movwf	6
  9016  037D  3001               	movlw	1	; select bank2/3
  9017  037E  0087               	movwf	7
  9018  037F  3001               	movlw	1
  9019  0380  0781               	addwf	1,f
  9020  0381  3141               	addfsr 1,1
  9021  0382  1803               	skipnc
  9022  0383  0A81               	incf	1,f
  9023                           
  9024                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9025  0384  083E               	movf	_PF^(0+128),w
  9026  0385  3E02               	addlw	2
  9027  0386  0086               	movwf	6
  9028  0387  3001               	movlw	1	; select bank2/3
  9029  0388  0087               	movwf	7
  9030  0389  3F40               	moviw [0]fsr1
  9031  038A  0020               	movlb	0	; select bank0
  9032  038B  00B0               	movwf	??_setPowerFault_Main
  9033  038C  3F41               	moviw [1]fsr1
  9034  038D  00B1               	movwf	??_setPowerFault_Main+1
  9035  038E  3000               	movlw	0
  9036  038F  0231               	subwf	??_setPowerFault_Main+1,w
  9037  0390  3002               	movlw	2
  9038  0391  1903               	skipnz
  9039  0392  0230               	subwf	??_setPowerFault_Main,w
  9040  0393  1C03               	skipc
  9041  0394  0008               	return
  9042                           
  9043                           ;PowerFault_B1.c: 86: {
  9044                           ;PowerFault_B1.c: 87: PF->Time=0;
  9045  0395  0021               	movlb	1	; select bank1
  9046  0396  083E               	movf	_PF^(0+128),w
  9047  0397  3E02               	addlw	2
  9048  0398  0086               	movwf	6
  9049  0399  3001               	movlw	1	; select bank2/3
  9050  039A  0087               	movwf	7
  9051  039B  3000               	movlw	0
  9052  039C  3FC0               	movwi [0]fsr1
  9053  039D  3FC1               	movwi [1]fsr1
  9054                           
  9055                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9056  039E  083E               	movf	_PF^(0+128),w
  9057  039F  0086               	movwf	6
  9058  03A0  3001               	movlw	1	; select bank2/3
  9059  03A1  0087               	movwf	7
  9060  03A2  1181               	bcf	1,3
  9061                           
  9062                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9063  03A3  083E               	movf	_PF^(0+128),w
  9064  03A4  0086               	movwf	6
  9065  03A5  3001               	movlw	1	; select bank2/3
  9066  03A6  0087               	movwf	7
  9067  03A7  1C81               	btfss	1,1
  9068  03A8  2BE9               	goto	l6604
  9069                           
  9070                           ;PowerFault_B1.c: 91: {
  9071                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9072  03A9  083E               	movf	_PF^(0+128),w
  9073  03AA  3E04               	addlw	4
  9074  03AB  0086               	movwf	6
  9075  03AC  3001               	movlw	1	; select bank2/3
  9076  03AD  0087               	movwf	7
  9077  03AE  3F40               	moviw [0]fsr1
  9078  03AF  0020               	movlb	0	; select bank0
  9079  03B0  00B0               	movwf	??_setPowerFault_Main
  9080  03B1  3F41               	moviw [1]fsr1
  9081  03B2  00B1               	movwf	??_setPowerFault_Main+1
  9082  03B3  3001               	movlw	1
  9083  03B4  0231               	subwf	??_setPowerFault_Main+1,w
  9084  03B5  3091               	movlw	145
  9085  03B6  1903               	skipnz
  9086  03B7  0230               	subwf	??_setPowerFault_Main,w
  9087  03B8  1803               	skipnc
  9088  03B9  2C29               	goto	l6616
  9089  03BA  0021               	movlb	1	; select bank1
  9090  03BB  083E               	movf	_PF^(0+128),w
  9091  03BC  3E04               	addlw	4
  9092  03BD  0086               	movwf	6
  9093  03BE  3001               	movlw	1	; select bank2/3
  9094  03BF  0087               	movwf	7
  9095  03C0  3F40               	moviw [0]fsr1
  9096  03C1  0020               	movlb	0	; select bank0
  9097  03C2  00B0               	movwf	??_setPowerFault_Main
  9098  03C3  3F41               	moviw [1]fsr1
  9099  03C4  00B1               	movwf	??_setPowerFault_Main+1
  9100  03C5  3000               	movlw	0
  9101  03C6  0231               	subwf	??_setPowerFault_Main+1,w
  9102  03C7  30C8               	movlw	200
  9103  03C8  1903               	skipnz
  9104  03C9  0230               	subwf	??_setPowerFault_Main,w
  9105  03CA  1C03               	skipc
  9106  03CB  2C29               	goto	l6616
  9107                           
  9108                           ;PowerFault_B1.c: 93: {
  9109                           ;PowerFault_B1.c: 94: PF->Count++;
  9110  03CC  3001               	movlw	1
  9111  03CD  00B0               	movwf	??_setPowerFault_Main
  9112  03CE  0021               	movlb	1	; select bank1
  9113  03CF  0A3E               	incf	_PF^(0+128),w
  9114  03D0  0086               	movwf	6
  9115  03D1  3001               	movlw	1	; select bank2/3
  9116  03D2  0087               	movwf	7
  9117  03D3  0020               	movlb	0	; select bank0
  9118  03D4  0830               	movf	??_setPowerFault_Main,w
  9119  03D5  0781               	addwf	1,f
  9120                           
  9121                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9122  03D6  0021               	movlb	1	; select bank1
  9123  03D7  0A3E               	incf	_PF^(0+128),w
  9124  03D8  0086               	movwf	6
  9125  03D9  3001               	movlw	1	; select bank2/3
  9126  03DA  0087               	movwf	7
  9127  03DB  3002               	movlw	2
  9128  03DC  0201               	subwf	1,w
  9129  03DD  1C03               	skipc
  9130  03DE  2C2F               	goto	l6618
  9131                           
  9132                           ;PowerFault_B1.c: 96: {
  9133                           ;PowerFault_B1.c: 97: PF->Count=0;
  9134  03DF  0A3E               	incf	_PF^(0+128),w
  9135  03E0  0086               	movwf	6
  9136  03E1  3001               	movlw	1	; select bank2/3
  9137  03E2  0087               	movwf	7
  9138  03E3  0181               	clrf	1
  9139                           
  9140                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9141  03E4  3000               	movlw	0
  9142  03E5  3193  2371  3183   	fcall	_setPowerFault_Exceptions
  9143                           
  9144                           ;PowerFault_B1.c: 99: }
  9145                           ;PowerFault_B1.c: 100: }
  9146  03E8  2C2F               	goto	l6618
  9147  03E9                     l6604:	
  9148                           ;PowerFault_B1.c: 104: }
  9149                           ;PowerFault_B1.c: 105: }
  9150                           
  9151                           ;PowerFault_B1.c: 101: else
  9152                           ;PowerFault_B1.c: 102: {
  9153                           ;PowerFault_B1.c: 103: PF->Count=0;
  9154                           
  9155                           
  9156                           ;PowerFault_B1.c: 106: else
  9157                           ;PowerFault_B1.c: 107: {
  9158                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9159  03E9  083E               	movf	_PF^(0+128),w
  9160  03EA  3E04               	addlw	4
  9161  03EB  0086               	movwf	6
  9162  03EC  3001               	movlw	1	; select bank2/3
  9163  03ED  0087               	movwf	7
  9164  03EE  3F40               	moviw [0]fsr1
  9165  03EF  0020               	movlb	0	; select bank0
  9166  03F0  00B0               	movwf	??_setPowerFault_Main
  9167  03F1  3F41               	moviw [1]fsr1
  9168  03F2  00B1               	movwf	??_setPowerFault_Main+1
  9169  03F3  3001               	movlw	1
  9170  03F4  0231               	subwf	??_setPowerFault_Main+1,w
  9171  03F5  3090               	movlw	144
  9172  03F6  1903               	skipnz
  9173  03F7  0230               	subwf	??_setPowerFault_Main,w
  9174  03F8  1803               	skipnc
  9175  03F9  2C0C               	goto	l6608
  9176  03FA  0021               	movlb	1	; select bank1
  9177  03FB  083E               	movf	_PF^(0+128),w
  9178  03FC  3E04               	addlw	4
  9179  03FD  0086               	movwf	6
  9180  03FE  3001               	movlw	1	; select bank2/3
  9181  03FF  0087               	movwf	7
  9182  0400  3F40               	moviw [0]fsr1
  9183  0401  0020               	movlb	0	; select bank0
  9184  0402  00B0               	movwf	??_setPowerFault_Main
  9185  0403  3F41               	moviw [1]fsr1
  9186  0404  00B1               	movwf	??_setPowerFault_Main+1
  9187  0405  3000               	movlw	0
  9188  0406  0231               	subwf	??_setPowerFault_Main+1,w
  9189  0407  30D3               	movlw	211
  9190  0408  1903               	skipnz
  9191  0409  0230               	subwf	??_setPowerFault_Main,w
  9192  040A  1803               	skipnc
  9193  040B  2C29               	goto	l6616
  9194  040C                     l6608:	
  9195                           
  9196                           ;PowerFault_B1.c: 109: {
  9197                           ;PowerFault_B1.c: 110: PF->Count++;
  9198  040C  3001               	movlw	1
  9199  040D  00B0               	movwf	??_setPowerFault_Main
  9200  040E  0021               	movlb	1	; select bank1
  9201  040F  0A3E               	incf	_PF^(0+128),w
  9202  0410  0086               	movwf	6
  9203  0411  3001               	movlw	1	; select bank2/3
  9204  0412  0087               	movwf	7
  9205  0413  0020               	movlb	0	; select bank0
  9206  0414  0830               	movf	??_setPowerFault_Main,w
  9207  0415  0781               	addwf	1,f
  9208                           
  9209                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9210  0416  0021               	movlb	1	; select bank1
  9211  0417  0A3E               	incf	_PF^(0+128),w
  9212  0418  0086               	movwf	6
  9213  0419  3001               	movlw	1	; select bank2/3
  9214  041A  0087               	movwf	7
  9215  041B  3002               	movlw	2
  9216  041C  0201               	subwf	1,w
  9217  041D  1C03               	skipc
  9218  041E  2C2F               	goto	l6618
  9219                           
  9220                           ;PowerFault_B1.c: 112: {
  9221                           ;PowerFault_B1.c: 113: PF->Count=0;
  9222  041F  0A3E               	incf	_PF^(0+128),w
  9223  0420  0086               	movwf	6
  9224  0421  3001               	movlw	1	; select bank2/3
  9225  0422  0087               	movwf	7
  9226  0423  0181               	clrf	1
  9227                           
  9228                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9229  0424  3001               	movlw	1
  9230  0425  3193  2371  3183   	fcall	_setPowerFault_Exceptions
  9231                           
  9232                           ;PowerFault_B1.c: 115: }
  9233                           ;PowerFault_B1.c: 116: }
  9234  0428  2C2F               	goto	l6618
  9235  0429                     l6616:	
  9236                           
  9237                           ;PowerFault_B1.c: 117: else
  9238                           ;PowerFault_B1.c: 118: {
  9239                           ;PowerFault_B1.c: 119: PF->Count=0;
  9240  0429  0021               	movlb	1	; select bank1
  9241  042A  0A3E               	incf	_PF^(0+128),w
  9242  042B  0086               	movwf	6
  9243  042C  3001               	movlw	1	; select bank2/3
  9244  042D  0087               	movwf	7
  9245  042E  0181               	clrf	1
  9246  042F                     l6618:	
  9247                           
  9248                           ;PowerFault_B1.c: 120: }
  9249                           ;PowerFault_B1.c: 122: }
  9250                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9251  042F  0021               	movlb	1	; select bank1
  9252  0430  083E               	movf	_PF^(0+128),w
  9253  0431  0086               	movwf	6
  9254  0432  3001               	movlw	1	; select bank2/3
  9255  0433  0087               	movwf	7
  9256  0434  1881               	btfsc	1,1
  9257  0435  2C3B               	goto	l1738
  9258                           
  9259                           ;PowerFault_B1.c: 124: {
  9260                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9261  0436  083E               	movf	_PF^(0+128),w
  9262  0437  0086               	movwf	6
  9263  0438  3001               	movlw	1	; select bank2/3
  9264  0439  0087               	movwf	7
  9265  043A  1501               	bsf	1,2
  9266  043B                     l1738:	
  9267                           
  9268                           ;PowerFault_B1.c: 126: }
  9269                           ;PowerFault_B1.c: 127: PF->AD=0;
  9270  043B  083E               	movf	_PF^(0+128),w
  9271  043C  3E04               	addlw	4
  9272  043D  0086               	movwf	6
  9273  043E  3001               	movlw	1	; select bank2/3
  9274  043F  0087               	movwf	7
  9275  0440  3000               	movlw	0
  9276  0441  3FC0               	movwi [0]fsr1
  9277  0442  3FC1               	movwi [1]fsr1
  9278  0443  0008               	return
  9279  0444                     __end_of_setPowerFault_Main:	
  9280                           
  9281                           	psect	text40
  9282  1371                     __ptext40:	
  9283 ;; *************** function _setPowerFault_Exceptions *****************
  9284 ;; Defined at:
  9285 ;;		line 133 in file "../src/PowerFault_B1.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  command         1    wreg     unsigned char 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  command         1   15[BANK0 ] unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;		None               void
  9292 ;; Registers used:
  9293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;Total ram usage:        2 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    9
  9306 ;; This function calls:
  9307 ;;		_DimmerLights_Exceptions
  9308 ;;		_setLED
  9309 ;;		_setRF_Enable
  9310 ;;		_setSw_Enable
  9311 ;; This function is called by:
  9312 ;;		_setPowerFault_Main
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           
  9317                           ;psect for function _setPowerFault_Exceptions
  9318  1371                     _setPowerFault_Exceptions:	
  9319                           
  9320                           ;incstack = 0
  9321                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9322                           ;setPowerFault_Exceptions@command stored from wreg
  9323  1371  0020               	movlb	0	; select bank0
  9324  1372  00AF               	movwf	setPowerFault_Exceptions@command
  9325                           
  9326                           ;PowerFault_B1.c: 135: PF->ERROR=command;
  9327  1373  0021               	movlb	1	; select bank1
  9328  1374  083E               	movf	_PF^(0+128),w
  9329  1375  0086               	movwf	6
  9330  1376  3001               	movlw	1	; select bank2/3
  9331  1377  0087               	movwf	7
  9332  1378  0020               	movlb	0	; select bank0
  9333  1379  082F               	movf	setPowerFault_Exceptions@command,w
  9334  137A  1081               	bcf	1,1
  9335  137B  1D03               	skipz
  9336  137C  1481               	bsf	1,1
  9337                           
  9338                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
  9339  137D  092F               	comf	setPowerFault_Exceptions@command,w
  9340  137E  3901               	andlw	1
  9341  137F  00AE               	movwf	??_setPowerFault_Exceptions
  9342  1380  0021               	movlb	1	; select bank1
  9343  1381  083E               	movf	_PF^(0+128),w
  9344  1382  0086               	movwf	6
  9345  1383  3001               	movlw	1	; select bank2/3
  9346  1384  0087               	movwf	7
  9347  1385  0020               	movlb	0	; select bank0
  9348  1386  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9349  1387  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9350  1388  0801               	movf	1,w
  9351  1389  062E               	xorwf	??_setPowerFault_Exceptions,w
  9352  138A  39FB               	andlw	-5
  9353  138B  062E               	xorwf	??_setPowerFault_Exceptions,w
  9354  138C  0081               	movwf	1
  9355                           
  9356                           ;PowerFault_B1.c: 137: if(command == 1)
  9357  138D  082F               	movf	setPowerFault_Exceptions@command,w
  9358  138E  3A01               	xorlw	1
  9359  138F  1D03               	skipz
  9360  1390  2B9C               	goto	l1742
  9361                           
  9362                           ;PowerFault_B1.c: 138: {
  9363                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
  9364  1391  3003               	movlw	3
  9365  1392  3195  25D7  3193   	fcall	_DimmerLights_Exceptions
  9366                           
  9367                           ;PowerFault_B1.c: 141: setLED(2,1);
  9368  1395  0020               	movlb	0	; select bank0
  9369  1396  01A2               	clrf	setLED@command
  9370  1397  0AA2               	incf	setLED@command,f
  9371  1398  3002               	movlw	2
  9372  1399  3197  2744  3193   	fcall	_setLED
  9373  139C                     l1742:	
  9374                           
  9375                           ;PowerFault_B1.c: 143: }
  9376                           ;PowerFault_B1.c: 144: setLED(99,command+10);
  9377  139C  0020               	movlb	0	; select bank0
  9378  139D  082F               	movf	setPowerFault_Exceptions@command,w
  9379  139E  3E0A               	addlw	10
  9380  139F  00AE               	movwf	??_setPowerFault_Exceptions
  9381  13A0  082E               	movf	??_setPowerFault_Exceptions,w
  9382  13A1  00A2               	movwf	setLED@command
  9383  13A2  3063               	movlw	99
  9384  13A3  3197  2744  3193   	fcall	_setLED
  9385                           
  9386                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
  9387  13A6  0020               	movlb	0	; select bank0
  9388  13A7  092F               	comf	setPowerFault_Exceptions@command,w
  9389  13A8  3901               	andlw	1
  9390  13A9  319D  255A  3193   	fcall	_setSw_Enable
  9391                           
  9392                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
  9393  13AC  0020               	movlb	0	; select bank0
  9394  13AD  092F               	comf	setPowerFault_Exceptions@command,w
  9395  13AE  3901               	andlw	1
  9396  13AF  00AE               	movwf	??_setPowerFault_Exceptions
  9397  13B0  082E               	movf	??_setPowerFault_Exceptions,w
  9398  13B1  00A2               	movwf	setRF_Enable@command
  9399  13B2  3001               	movlw	1
  9400  13B3  3190  20BF         	fcall	_setRF_Enable
  9401  13B5  0008               	return
  9402  13B6                     __end_of_setPowerFault_Exceptions:	
  9403                           
  9404                           	psect	text41
  9405  1D5A                     __ptext41:	
  9406 ;; *************** function _setSw_Enable *****************
  9407 ;; Defined at:
  9408 ;;		line 85 in file "../src/Switch_B1.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  command         1    wreg     unsigned char 
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;  command         1    2[BANK0 ] unsigned char 
  9413 ;; Return value:  Size  Location     Type
  9414 ;;		None               void
  9415 ;; Registers used:
  9416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;Total ram usage:        1 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    6
  9429 ;; This function calls:
  9430 ;;		_SwPointSelect
  9431 ;; This function is called by:
  9432 ;;		_setPowerFault_Exceptions
  9433 ;;		_my_Main
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           
  9438                           ;psect for function _setSw_Enable
  9439  1D5A                     _setSw_Enable:	
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9443                           ;setSw_Enable@command stored from wreg
  9444  1D5A  0020               	movlb	0	; select bank0
  9445  1D5B  00A2               	movwf	setSw_Enable@command
  9446                           
  9447                           ;Switch_B1.c: 88: SwPointSelect(1);
  9448  1D5C  3001               	movlw	1
  9449  1D5D  319C  248D         	fcall	_SwPointSelect
  9450                           
  9451                           ;Switch_B1.c: 89: Sw->Enable = command;
  9452  1D5F  087B               	movf	_Sw,w
  9453  1D60  0086               	movwf	6
  9454  1D61  3001               	movlw	1	; select bank2/3
  9455  1D62  0087               	movwf	7
  9456  1D63  0020               	movlb	0	; select bank0
  9457  1D64  0822               	movf	setSw_Enable@command,w
  9458  1D65  1001               	bcf	1,0
  9459  1D66  1D03               	skipz
  9460  1D67  1401               	bsf	1,0
  9461  1D68  0008               	return
  9462  1D69                     __end_of_setSw_Enable:	
  9463                           
  9464                           	psect	text42
  9465  10BF                     __ptext42:	
  9466 ;; *************** function _setRF_Enable *****************
  9467 ;; Defined at:
  9468 ;;		line 202 in file "../src/RF_Control_B1.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  rf              1    wreg     unsigned char 
  9471 ;;  command         1    2[BANK0 ] unsigned char 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  rf              1    3[BANK0 ] unsigned char 
  9474 ;; Return value:  Size  Location     Type
  9475 ;;		None               void
  9476 ;; Registers used:
  9477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;Total ram usage:        2 bytes
  9488 ;; Hardware stack levels used:    1
  9489 ;; Hardware stack levels required when called:    6
  9490 ;; This function calls:
  9491 ;;		_RfPointSelect
  9492 ;; This function is called by:
  9493 ;;		_setPowerFault_Exceptions
  9494 ;;		_my_Main
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           
  9499                           ;psect for function _setRF_Enable
  9500  10BF                     _setRF_Enable:	
  9501                           
  9502                           ;incstack = 0
  9503                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9504                           ;setRF_Enable@rf stored from wreg
  9505  10BF  0020               	movlb	0	; select bank0
  9506  10C0  00A3               	movwf	setRF_Enable@rf
  9507                           
  9508                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  9509  10C1  0823               	movf	setRF_Enable@rf,w
  9510  10C2  319D  2520         	fcall	_RfPointSelect
  9511                           
  9512                           ;RF_Control_B1.c: 204: RF->Enable = command;
  9513  10C4  087A               	movf	_RF,w
  9514  10C5  0086               	movwf	6
  9515  10C6  0187               	clrf	7
  9516  10C7  0020               	movlb	0	; select bank0
  9517  10C8  0822               	movf	setRF_Enable@command,w
  9518  10C9  1001               	bcf	1,0
  9519  10CA  1D03               	skipz
  9520  10CB  1401               	bsf	1,0
  9521                           
  9522                           ;RF_Control_B1.c: 205: RF->Learn = 0;
  9523  10CC  087A               	movf	_RF,w
  9524  10CD  0086               	movwf	6
  9525  10CE  0187               	clrf	7
  9526  10CF  1301               	bcf	1,6
  9527                           
  9528                           ;RF_Control_B1.c: 206: RF->TransceiveGO = 0;
  9529  10D0  087A               	movf	_RF,w
  9530  10D1  0086               	movwf	6
  9531  10D2  0187               	clrf	7
  9532  10D3  1101               	bcf	1,2
  9533                           
  9534                           ;RF_Control_B1.c: 207: RF->RxStatus = 0;
  9535  10D4  087A               	movf	_RF,w
  9536  10D5  0086               	movwf	6
  9537  10D6  0187               	clrf	7
  9538  10D7  1181               	bcf	1,3
  9539                           
  9540                           ;RF_Control_B1.c: 208: RF->ReceiveGO = 0;
  9541  10D8  087A               	movf	_RF,w
  9542  10D9  0086               	movwf	6
  9543  10DA  0187               	clrf	7
  9544  10DB  1081               	bcf	1,1
  9545                           
  9546                           ;RF_Control_B1.c: 209: RF->DebounceTime = 0;
  9547  10DC  087A               	movf	_RF,w
  9548  10DD  3E04               	addlw	4
  9549  10DE  0086               	movwf	6
  9550  10DF  0187               	clrf	7
  9551  10E0  0181               	clrf	1
  9552                           
  9553                           ;RF_Control_B1.c: 210: RF->Debounce = 0;
  9554  10E1  087A               	movf	_RF,w
  9555  10E2  0086               	movwf	6
  9556  10E3  0187               	clrf	7
  9557  10E4  1281               	bcf	1,5
  9558  10E5  0008               	return
  9559  10E6                     __end_of_setRF_Enable:	
  9560                           
  9561                           	psect	text43
  9562  15D7                     __ptext43:	
  9563 ;; *************** function _DimmerLights_Exceptions *****************
  9564 ;; Defined at:
  9565 ;;		line 513 in file "../src/Dimmer_B1.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  status          1    wreg     unsigned char 
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  status          1   13[BANK0 ] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;		None               void
  9572 ;; Registers used:
  9573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;Total ram usage:        1 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    8
  9586 ;; This function calls:
  9587 ;;		_getDimmerLights_StatusFlag
  9588 ;;		_setBuz
  9589 ;;		_setDimmerLights_ERROR
  9590 ;;		_setDimmerLights_TriggerERROR
  9591 ;; This function is called by:
  9592 ;;		_setPowerFault_Exceptions
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _DimmerLights_Exceptions
  9598  15D7                     _DimmerLights_Exceptions:	
  9599                           
  9600                           ;incstack = 0
  9601                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9602                           ;DimmerLights_Exceptions@status stored from wreg
  9603  15D7  0020               	movlb	0	; select bank0
  9604  15D8  00AD               	movwf	DimmerLights_Exceptions@status
  9605                           
  9606                           ;Dimmer_B1.c: 514: if (status == 1) {
  9607  15D9  082D               	movf	DimmerLights_Exceptions@status,w
  9608  15DA  3A01               	xorlw	1
  9609  15DB  1D03               	skipz
  9610  15DC  2DED               	goto	l5790
  9611                           
  9612                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  9613  15DD  319C  2457  3195   	fcall	_getDimmerLights_StatusFlag
  9614  15E0  3A01               	xorlw	1
  9615  15E1  1D03               	skipz
  9616  15E2  2E05               	goto	l5796
  9617                           
  9618                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  9619  15E3  302C               	movlw	44
  9620  15E4  0020               	movlb	0	; select bank0
  9621  15E5  00A9               	movwf	setBuz@time
  9622  15E6  3001               	movlw	1
  9623  15E7  00AA               	movwf	setBuz@time+1
  9624  15E8  300A               	movlw	10
  9625  15E9  318C  243C  3195   	fcall	_setBuz
  9626  15EC  2E05               	goto	l5796
  9627  15ED                     l5790:	
  9628                           ;Dimmer_B1.c: 528: } else if (status == 2)
  9629                           
  9630                           ;Dimmer_B1.c: 517: }
  9631                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  9632                           
  9633  15ED  0020               	movlb	0	; select bank0
  9634  15EE  082D               	movf	DimmerLights_Exceptions@status,w
  9635  15EF  3A02               	xorlw	2
  9636  15F0  1D03               	skipz
  9637  15F1  2E00               	goto	l5794
  9638                           
  9639                           ;Dimmer_B1.c: 529: {
  9640                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  9641  15F2  302C               	movlw	44
  9642  15F3  00A9               	movwf	setBuz@time
  9643  15F4  3001               	movlw	1
  9644  15F5  00AA               	movwf	setBuz@time+1
  9645  15F6  3005               	movlw	5
  9646  15F7  318C  243C  3195   	fcall	_setBuz
  9647                           
  9648                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  9649  15FA  0021               	movlb	1	; select bank1
  9650  15FB  0A3A               	incf	_Dimmer^(0+128),w
  9651  15FC  0086               	movwf	6
  9652  15FD  0187               	clrf	7
  9653  15FE  0801               	movf	1,w
  9654  15FF  2E06               	goto	L9
  9655  1600                     l5794:	
  9656                           ;Dimmer_B1.c: 532: } else if (status == 3)
  9657                           
  9658  1600  0020               	movlb	0	; select bank0
  9659  1601  082D               	movf	DimmerLights_Exceptions@status,w
  9660  1602  3A03               	xorlw	3
  9661  1603  1D03               	skipz
  9662  1604  2E09               	goto	l817
  9663  1605                     l5796:	
  9664                           
  9665                           ;Dimmer_B1.c: 533: {
  9666                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  9667  1605  3001               	movlw	1
  9668  1606                     L9:	
  9669  1606  3194  24DB  3195   	fcall	_setDimmerLights_ERROR
  9670  1609                     l817:	
  9671                           
  9672                           ;Dimmer_B1.c: 543: }
  9673                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  9674  1609  0020               	movlb	0	; select bank0
  9675  160A  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9676  160B  3001               	movlw	1
  9677  160C  3191  2110  3195   	fcall	_setDimmerLights_TriggerERROR
  9678                           
  9679                           ;Dimmer_B1.c: 555: if (myMain->SelfTest == 0) {
  9680  160F  0021               	movlb	1	; select bank1
  9681  1610  086E               	movf	_myMain^(0+128),w
  9682  1611  0086               	movwf	6
  9683  1612  3001               	movlw	1	; select bank2/3
  9684  1613  0087               	movwf	7
  9685  1614  1B01               	btfsc	1,6
  9686  1615  0008               	return
  9687                           
  9688                           ;Dimmer_B1.c: 556: myMain->i = 0;
  9689  1616  086E               	movf	_myMain^(0+128),w
  9690  1617  3E0E               	addlw	14
  9691  1618  0086               	movwf	6
  9692  1619  3001               	movlw	1	; select bank2/3
  9693  161A  0087               	movwf	7
  9694  161B  1001               	bcf	1,0
  9695                           
  9696                           ;Dimmer_B1.c: 557: myMain->j = 0;
  9697  161C  086E               	movf	_myMain^(0+128),w
  9698  161D  3E0E               	addlw	14
  9699  161E  0086               	movwf	6
  9700  161F  3001               	movlw	1	; select bank2/3
  9701  1620  0087               	movwf	7
  9702  1621  1081               	bcf	1,1
  9703                           
  9704                           ;Dimmer_B1.c: 558: myMain->k = 1;
  9705  1622  086E               	movf	_myMain^(0+128),w
  9706  1623  3E0E               	addlw	14
  9707  1624  0086               	movwf	6
  9708  1625  3001               	movlw	1	; select bank2/3
  9709  1626  0087               	movwf	7
  9710  1627  1501               	bsf	1,2
  9711                           
  9712                           ;Dimmer_B1.c: 559: myMain->Count2 = 0;
  9713  1628  086E               	movf	_myMain^(0+128),w
  9714  1629  3E07               	addlw	7
  9715  162A  0086               	movwf	6
  9716  162B  3001               	movlw	1	; select bank2/3
  9717  162C  0087               	movwf	7
  9718  162D  3000               	movlw	0
  9719  162E  3FC0               	movwi [0]fsr1
  9720  162F  3FC1               	movwi [1]fsr1
  9721  1630  0008               	return
  9722  1631                     __end_of_DimmerLights_Exceptions:	
  9723                           
  9724                           	psect	text44
  9725  1110                     __ptext44:	
  9726 ;; *************** function _setDimmerLights_TriggerERROR *****************
  9727 ;; Defined at:
  9728 ;;		line 582 in file "../src/Dimmer_B1.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;  lights          1    wreg     unsigned char 
  9731 ;;  command         1    2[BANK0 ] unsigned char 
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  lights          1    3[BANK0 ] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        2 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    6
  9750 ;; This function calls:
  9751 ;;		_DimmerLightsPointSelect
  9752 ;; This function is called by:
  9753 ;;		_DimmerLights_Exceptions
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function _setDimmerLights_TriggerERROR
  9759  1110                     _setDimmerLights_TriggerERROR:	
  9760                           
  9761                           ;incstack = 0
  9762                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9763                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  9764  1110  0020               	movlb	0	; select bank0
  9765  1111  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  9766                           
  9767                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  9768  1112  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  9769  1113  319C  2482         	fcall	_DimmerLightsPointSelect
  9770                           
  9771                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  9772  1115  0878               	movf	_DimmerLights,w
  9773  1116  3E08               	addlw	8
  9774  1117  0086               	movwf	6
  9775  1118  3001               	movlw	1	; select bank2/3
  9776  1119  0087               	movwf	7
  9777  111A  0020               	movlb	0	; select bank0
  9778  111B  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9779  111C  1101               	bcf	1,2
  9780  111D  1D03               	skipz
  9781  111E  1501               	bsf	1,2
  9782                           
  9783                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  9784  111F  0878               	movf	_DimmerLights,w
  9785  1120  3E08               	addlw	8
  9786  1121  0086               	movwf	6
  9787  1122  3001               	movlw	1	; select bank2/3
  9788  1123  0087               	movwf	7
  9789  1124  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9790  1125  1081               	bcf	1,1
  9791  1126  1D03               	skipz
  9792  1127  1481               	bsf	1,1
  9793                           
  9794                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  9795  1128  0878               	movf	_DimmerLights,w
  9796  1129  3E08               	addlw	8
  9797  112A  0086               	movwf	6
  9798  112B  3001               	movlw	1	; select bank2/3
  9799  112C  0087               	movwf	7
  9800  112D  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9801  112E  1201               	bcf	1,4
  9802  112F  1D03               	skipz
  9803  1130  1601               	bsf	1,4
  9804                           
  9805                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  9806  1131  0878               	movf	_DimmerLights,w
  9807  1132  3E08               	addlw	8
  9808  1133  0086               	movwf	6
  9809  1134  3001               	movlw	1	; select bank2/3
  9810  1135  0087               	movwf	7
  9811  1136  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9812  1137  1181               	bcf	1,3
  9813  1138  1D03               	skipz
  9814  1139  1581               	bsf	1,3
  9815  113A  0008               	return
  9816  113B                     __end_of_setDimmerLights_TriggerERROR:	
  9817                           
  9818                           	psect	text45
  9819  14DB                     __ptext45:	
  9820 ;; *************** function _setDimmerLights_ERROR *****************
  9821 ;; Defined at:
  9822 ;;		line 564 in file "../src/Dimmer_B1.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;  lights          1    wreg     unsigned char 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;  lights          1    5[BANK0 ] unsigned char 
  9827 ;; Return value:  Size  Location     Type
  9828 ;;		None               void
  9829 ;; Registers used:
  9830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:        2 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    7
  9843 ;; This function calls:
  9844 ;;		_DimmerLightsPointSelect
  9845 ;;		_setLED
  9846 ;;		_setRFSW_Status
  9847 ;;		_setSw_Status
  9848 ;; This function is called by:
  9849 ;;		_DimmerLights_Exceptions
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _setDimmerLights_ERROR
  9855  14DB                     _setDimmerLights_ERROR:	
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9859                           ;setDimmerLights_ERROR@lights stored from wreg
  9860  14DB  0020               	movlb	0	; select bank0
  9861  14DC  00A5               	movwf	setDimmerLights_ERROR@lights
  9862                           
  9863                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  9864  14DD  0825               	movf	setDimmerLights_ERROR@lights,w
  9865  14DE  319C  2482  3194   	fcall	_DimmerLightsPointSelect
  9866                           
  9867                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  9868  14E1  0878               	movf	_DimmerLights,w
  9869  14E2  0086               	movwf	6
  9870  14E3  3001               	movlw	1	; select bank2/3
  9871  14E4  0087               	movwf	7
  9872  14E5  1E81               	btfss	1,5
  9873  14E6  0008               	return
  9874                           
  9875                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  9876  14E7  0878               	movf	_DimmerLights,w
  9877  14E8  0086               	movwf	6
  9878  14E9  3001               	movlw	1	; select bank2/3
  9879  14EA  0087               	movwf	7
  9880  14EB  1081               	bcf	1,1
  9881                           
  9882                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  9883  14EC  0878               	movf	_DimmerLights,w
  9884  14ED  0086               	movwf	6
  9885  14EE  3001               	movlw	1	; select bank2/3
  9886  14EF  0087               	movwf	7
  9887  14F0  1181               	bcf	1,3
  9888                           
  9889                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  9890  14F1  0878               	movf	_DimmerLights,w
  9891  14F2  0086               	movwf	6
  9892  14F3  3001               	movlw	1	; select bank2/3
  9893  14F4  0087               	movwf	7
  9894  14F5  1201               	bcf	1,4
  9895                           
  9896                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  9897  14F6  0878               	movf	_DimmerLights,w
  9898  14F7  0086               	movwf	6
  9899  14F8  3001               	movlw	1	; select bank2/3
  9900  14F9  0087               	movwf	7
  9901  14FA  1301               	bcf	1,6
  9902                           
  9903                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  9904  14FB  3007               	movlw	7
  9905  14FC  0020               	movlb	0	; select bank0
  9906  14FD  00A4               	movwf	??_setDimmerLights_ERROR
  9907  14FE  0878               	movf	_DimmerLights,w
  9908  14FF  3E02               	addlw	2
  9909  1500  0086               	movwf	6
  9910  1501  3001               	movlw	1	; select bank2/3
  9911  1502  0087               	movwf	7
  9912  1503  0824               	movf	??_setDimmerLights_ERROR,w
  9913  1504  0081               	movwf	1
  9914                           
  9915                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  9916  1505  0878               	movf	_DimmerLights,w
  9917  1506  3E06               	addlw	6
  9918  1507  0086               	movwf	6
  9919  1508  3001               	movlw	1	; select bank2/3
  9920  1509  0087               	movwf	7
  9921  150A  0801               	movf	1,w
  9922  150B  00A4               	movwf	??_setDimmerLights_ERROR
  9923  150C  0878               	movf	_DimmerLights,w
  9924  150D  3E04               	addlw	4
  9925  150E  0086               	movwf	6
  9926  150F  3001               	movlw	1	; select bank2/3
  9927  1510  0087               	movwf	7
  9928  1511  0824               	movf	??_setDimmerLights_ERROR,w
  9929  1512  0081               	movwf	1
  9930                           
  9931                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  9932  1513  0021               	movlb	1	; select bank1
  9933  1514  083A               	movf	_Dimmer^(0+128),w
  9934  1515  0086               	movwf	6
  9935  1516  0187               	clrf	7
  9936  1517  1401               	bsf	1,0
  9937                           
  9938                           ;Dimmer_B1.c: 575: ;;
  9939                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  9940  1518  0020               	movlb	0	; select bank0
  9941  1519  01A2               	clrf	setLED@command
  9942  151A  0AA2               	incf	setLED@command,f
  9943  151B  0825               	movf	setDimmerLights_ERROR@lights,w
  9944  151C  3197  2744  3194   	fcall	_setLED
  9945                           
  9946                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  9947  151F  0020               	movlb	0	; select bank0
  9948  1520  01A2               	clrf	setSw_Status@command
  9949  1521  0825               	movf	setDimmerLights_ERROR@lights,w
  9950  1522  319D  254B  3194   	fcall	_setSw_Status
  9951                           
  9952                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  9953  1525  0020               	movlb	0	; select bank0
  9954  1526  01A2               	clrf	setRFSW_Status@command
  9955  1527  0825               	movf	setDimmerLights_ERROR@lights,w
  9956  1528  319D  253C         	fcall	_setRFSW_Status
  9957  152A  0008               	return
  9958  152B                     __end_of_setDimmerLights_ERROR:	
  9959                           
  9960                           	psect	text46
  9961  1BDD                     __ptext46:	
  9962 ;; *************** function _PowerFault_Initialization *****************
  9963 ;; Defined at:
  9964 ;;		line 15 in file "../src/PowerFault_B1.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;		None
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;		None
  9969 ;; Return value:  Size  Location     Type
  9970 ;;		None               void
  9971 ;; Registers used:
  9972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;Total ram usage:        0 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    6
  9985 ;; This function calls:
  9986 ;;		_setPowerFault_Initialization
  9987 ;; This function is called by:
  9988 ;;		_main
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function _PowerFault_Initialization
  9994  1BDD                     _PowerFault_Initialization:	
  9995                           
  9996                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
  9997                           
  9998                           ;incstack = 0
  9999                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10000  1BDD  3190  2066         	fcall	_setPowerFault_Initialization
 10001  1BDF  0008               	return
 10002  1BE0                     __end_of_PowerFault_Initialization:	
 10003                           
 10004                           	psect	text47
 10005  1066                     __ptext47:	
 10006 ;; *************** function _setPowerFault_Initialization *****************
 10007 ;; Defined at:
 10008 ;;		line 29 in file "../src/PowerFault_B1.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;		None
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;		None
 10013 ;; Return value:  Size  Location     Type
 10014 ;;		None               void
 10015 ;; Registers used:
 10016 ;;		wreg, fsr1l, fsr1h
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;Total ram usage:        1 bytes
 10027 ;; Hardware stack levels used:    1
 10028 ;; Hardware stack levels required when called:    5
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		_PowerFault_Initialization
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           
 10037                           ;psect for function _setPowerFault_Initialization
 10038  1066                     _setPowerFault_Initialization:	
 10039                           
 10040                           ;PowerFault_B1.c: 31: PF=&PF1;
 10041                           
 10042                           ;incstack = 0
 10043                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10044  1066  304C               	movlw	_PF1& (0+255)
 10045  1067  0020               	movlb	0	; select bank0
 10046  1068  00A0               	movwf	??_setPowerFault_Initialization
 10047  1069  0820               	movf	??_setPowerFault_Initialization,w
 10048  106A  0021               	movlb	1	; select bank1
 10049  106B  00BE               	movwf	_PF^(0+128)
 10050                           
 10051                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10052  106C  083E               	movf	_PF^(0+128),w
 10053  106D  0086               	movwf	6
 10054  106E  3001               	movlw	1	; select bank2/3
 10055  106F  0087               	movwf	7
 10056  1070  1401               	bsf	1,0
 10057                           
 10058                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10059  1071  083E               	movf	_PF^(0+128),w
 10060  1072  0086               	movwf	6
 10061  1073  3001               	movlw	1	; select bank2/3
 10062  1074  0087               	movwf	7
 10063  1075  1501               	bsf	1,2
 10064  1076  0008               	return
 10065  1077                     __end_of_setPowerFault_Initialization:	
 10066                           
 10067                           	psect	text48
 10068  1E50                     __ptext48:	
 10069 ;; *************** function _Mcu_Initialization *****************
 10070 ;; Defined at:
 10071 ;;		line 30 in file "../src/MCU_B1.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;		None               void
 10078 ;; Registers used:
 10079 ;;		wreg, status,2, status,0, pclath, cstack
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        1 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    6
 10092 ;; This function calls:
 10093 ;;		_ADC_Set
 10094 ;;		_Fosc_Set
 10095 ;;		_INT_Set
 10096 ;;		_IOC_Set
 10097 ;;		_IO_Set
 10098 ;;		_TMR0_Set
 10099 ;; This function is called by:
 10100 ;;		_main
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function _Mcu_Initialization
 10106  1E50                     _Mcu_Initialization:	
 10107                           
 10108                           ;MCU_B1.c: 32: Fosc_Set();
 10109                           
 10110                           ;incstack = 0
 10111                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10112  1E50  319B  23F7  319E   	fcall	_Fosc_Set
 10113                           
 10114                           ;MCU_B1.c: 34: IO_Set();
 10115  1E53  319E  269A  319E   	fcall	_IO_Set
 10116                           
 10117                           ;MCU_B1.c: 36: TMR0_Set();
 10118  1E56  319D  2513  319E   	fcall	_TMR0_Set
 10119                           
 10120                           ;MCU_B1.c: 38: ;;
 10121                           ;MCU_B1.c: 40: ADC_Set();
 10122  1E59  319C  242D  319E   	fcall	_ADC_Set
 10123                           
 10124                           ;MCU_B1.c: 44: INT_Set();
 10125  1E5C  319C  240C  319E   	fcall	_INT_Set
 10126                           
 10127                           ;MCU_B1.c: 46: IOC_Set();
 10128  1E5F  319D  2506         	fcall	_IOC_Set
 10129                           
 10130                           ;MCU_B1.c: 48: ;;
 10131                           ;MCU_B1.c: 50: ;;
 10132                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10133  1E61  30A0               	movlw	_VarMemory& (0+255)
 10134  1E62  0020               	movlb	0	; select bank0
 10135  1E63  00A1               	movwf	??_Mcu_Initialization
 10136  1E64  0821               	movf	??_Mcu_Initialization,w
 10137  1E65  0021               	movlb	1	; select bank1
 10138  1E66  00EF               	movwf	_Memory^(0+128)
 10139  1E67  0008               	return
 10140  1E68                     __end_of_Mcu_Initialization:	
 10141                           
 10142                           	psect	text49
 10143  1D13                     __ptext49:	
 10144 ;; *************** function _TMR0_Set *****************
 10145 ;; Defined at:
 10146 ;;		line 128 in file "../src/MCU_B1.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;		None               void
 10153 ;; Registers used:
 10154 ;;		wreg, status,2
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;Total ram usage:        1 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    5
 10167 ;; This function calls:
 10168 ;;		Nothing
 10169 ;; This function is called by:
 10170 ;;		_Mcu_Initialization
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _TMR0_Set
 10176  1D13                     _TMR0_Set:	
 10177                           
 10178                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10182  1D13  3054               	movlw	_VarTimer0& (0+255)
 10183  1D14  0020               	movlb	0	; select bank0
 10184  1D15  00A0               	movwf	??_TMR0_Set
 10185  1D16  0820               	movf	??_TMR0_Set,w
 10186  1D17  0021               	movlb	1	; select bank1
 10187  1D18  00ED               	movwf	_Timer0^(0+128)
 10188                           
 10189                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10190  1D19  0195               	clrf	21	;volatile
 10191                           
 10192                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10193  1D1A  3042               	movlw	66
 10194  1D1B  0020               	movlb	0	; select bank0
 10195  1D1C  0095               	movwf	21	;volatile
 10196                           
 10197                           ;MCU_B1.c: 132: TMR0IE = 1;
 10198  1D1D  168B               	bsf	11,5	;volatile
 10199                           
 10200                           ;MCU_B1.c: 133: GIE = 1;
 10201  1D1E  178B               	bsf	11,7	;volatile
 10202  1D1F  0008               	return
 10203  1D20                     __end_of_TMR0_Set:	
 10204                           
 10205                           	psect	text50
 10206  1E9A                     __ptext50:	
 10207 ;; *************** function _IO_Set *****************
 10208 ;; Defined at:
 10209 ;;		line 62 in file "../src/MCU_B1.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;		None               void
 10216 ;; Registers used:
 10217 ;;		wreg, status,2
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;Total ram usage:        0 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    5
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_Mcu_Initialization
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _IO_Set
 10239  1E9A                     _IO_Set:	
 10240                           
 10241                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _IO_Set: [wreg+status,2]
 10245  1E9A  3077               	movlw	119
 10246  1E9B  0021               	movlb	1	; select bank1
 10247  1E9C  008C               	movwf	12	;volatile
 10248                           
 10249                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10250  1E9D  3007               	movlw	7
 10251  1E9E  008D               	movwf	13	;volatile
 10252                           
 10253                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10254  1E9F  300C               	movlw	12
 10255  1EA0  008E               	movwf	14	;volatile
 10256                           
 10257                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10258  1EA1  0022               	movlb	2	; select bank2
 10259  1EA2  018C               	clrf	12	;volatile
 10260                           
 10261                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10262  1EA3  3002               	movlw	2
 10263  1EA4  008D               	movwf	13	;volatile
 10264                           
 10265                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10266  1EA5  018E               	clrf	14	;volatile
 10267                           
 10268                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10269  1EA6  3022               	movlw	34
 10270  1EA7  0023               	movlb	3	; select bank3
 10271  1EA8  008C               	movwf	12	;volatile
 10272                           
 10273                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10274  1EA9  018D               	clrf	13	;volatile
 10275                           
 10276                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10277  1EAA  018E               	clrf	14	;volatile
 10278                           
 10279                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10280  1EAB  3077               	movlw	119
 10281  1EAC  0020               	movlb	0	; select bank0
 10282  1EAD  008C               	movwf	12	;volatile
 10283                           
 10284                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10285  1EAE  3007               	movlw	7
 10286  1EAF  008D               	movwf	13	;volatile
 10287                           
 10288                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10289  1EB0  300C               	movlw	12
 10290  1EB1  008E               	movwf	14	;volatile
 10291  1EB2  0008               	return
 10292  1EB3                     __end_of_IO_Set:	
 10293                           
 10294                           	psect	text51
 10295  1D06                     __ptext51:	
 10296 ;; *************** function _IOC_Set *****************
 10297 ;; Defined at:
 10298 ;;		line 269 in file "../src/MCU_B1.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;		None
 10301 ;; Auto vars:     Size  Location     Type
 10302 ;;		None
 10303 ;; Return value:  Size  Location     Type
 10304 ;;		None               void
 10305 ;; Registers used:
 10306 ;;		wreg, status,2
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;Total ram usage:        0 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; Hardware stack levels required when called:    5
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_Mcu_Initialization
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _IOC_Set
 10328  1D06                     _IOC_Set:	
 10329                           
 10330                           ;MCU_B1.c: 270: WPUB2 = 0;
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _IOC_Set: [wreg+status,2]
 10334  1D06  0024               	movlb	4	; select bank4
 10335  1D07  110D               	bcf	13,2	;volatile
 10336                           
 10337                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
 10338  1D08  3004               	movlw	4
 10339  1D09  0027               	movlb	7	; select bank7
 10340  1D0A  0094               	movwf	20	;volatile
 10341                           
 10342                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
 10343  1D0B  3004               	movlw	4
 10344  1D0C  0095               	movwf	21	;volatile
 10345                           
 10346                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 10347  1D0D  0196               	clrf	22	;volatile
 10348                           
 10349                           ;MCU_B1.c: 290: IOCIE = 1;
 10350  1D0E  158B               	bsf	11,3	;volatile
 10351                           
 10352                           ;MCU_B1.c: 291: IOCIF = 0;
 10353  1D0F  100B               	bcf	11,0	;volatile
 10354                           
 10355                           ;MCU_B1.c: 292: PEIE = 1;
 10356  1D10  170B               	bsf	11,6	;volatile
 10357                           
 10358                           ;MCU_B1.c: 293: GIE = 1;
 10359  1D11  178B               	bsf	11,7	;volatile
 10360  1D12  0008               	return
 10361  1D13                     __end_of_IOC_Set:	
 10362                           
 10363                           	psect	text52
 10364  1C0C                     __ptext52:	
 10365 ;; *************** function _INT_Set *****************
 10366 ;; Defined at:
 10367 ;;		line 242 in file "../src/MCU_B1.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;		None
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;		None
 10372 ;; Return value:  Size  Location     Type
 10373 ;;		None               void
 10374 ;; Registers used:
 10375 ;;		None
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;Total ram usage:        0 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    5
 10388 ;; This function calls:
 10389 ;;		Nothing
 10390 ;; This function is called by:
 10391 ;;		_Mcu_Initialization
 10392 ;; This function uses a non-reentrant model
 10393 ;;
 10394                           
 10395                           
 10396                           ;psect for function _INT_Set
 10397  1C0C                     _INT_Set:	
 10398                           
 10399                           ;MCU_B1.c: 243: WPUB0 = 0;
 10400                           
 10401                           ;incstack = 0
 10402                           ; Regs used in _INT_Set: []
 10403  1C0C  0024               	movlb	4	; select bank4
 10404  1C0D  100D               	bcf	13,0	;volatile
 10405                           
 10406                           ;MCU_B1.c: 244: INTE = 0;
 10407  1C0E  120B               	bcf	11,4	;volatile
 10408                           
 10409                           ;MCU_B1.c: 245: PEIE = 1;
 10410  1C0F  170B               	bsf	11,6	;volatile
 10411                           
 10412                           ;MCU_B1.c: 246: GIE = 1;
 10413  1C10  178B               	bsf	11,7	;volatile
 10414  1C11  0008               	return
 10415  1C12                     __end_of_INT_Set:	
 10416                           
 10417                           	psect	text53
 10418  1BF7                     __ptext53:	
 10419 ;; *************** function _Fosc_Set *****************
 10420 ;; Defined at:
 10421 ;;		line 58 in file "../src/MCU_B1.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;		None               void
 10428 ;; Registers used:
 10429 ;;		wreg
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        0 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    5
 10442 ;; This function calls:
 10443 ;;		Nothing
 10444 ;; This function is called by:
 10445 ;;		_Mcu_Initialization
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function _Fosc_Set
 10451  1BF7                     _Fosc_Set:	
 10452                           
 10453                           ;MCU_B1.c: 59: OSCCON = 0x78;
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _Fosc_Set: [wreg]
 10457  1BF7  3078               	movlw	120
 10458  1BF8  0021               	movlb	1	; select bank1
 10459  1BF9  0099               	movwf	25	;volatile
 10460  1BFA  0008               	return
 10461  1BFB                     __end_of_Fosc_Set:	
 10462                           
 10463                           	psect	text54
 10464  1C2D                     __ptext54:	
 10465 ;; *************** function _ADC_Set *****************
 10466 ;; Defined at:
 10467 ;;		line 315 in file "../src/MCU_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Mcu_Initialization
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _ADC_Set
 10497  1C2D                     _ADC_Set:	
 10498                           
 10499                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _ADC_Set: [wreg]
 10503  1C2D  30F2               	movlw	242
 10504  1C2E  0021               	movlb	1	; select bank1
 10505  1C2F  009E               	movwf	30	;volatile
 10506                           
 10507                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 10508  1C30  30C0               	movlw	192
 10509  1C31  0022               	movlb	2	; select bank2
 10510  1C32  0097               	movwf	23	;volatile
 10511  1C33  0008               	return
 10512  1C34                     __end_of_ADC_Set:	
 10513                           
 10514                           	psect	text55
 10515  1CE0                     __ptext55:	
 10516 ;; *************** function _LED_Main *****************
 10517 ;; Defined at:
 10518 ;;		line 51 in file "../src/LED_B1.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;		None
 10523 ;; Return value:  Size  Location     Type
 10524 ;;		None               void
 10525 ;; Registers used:
 10526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;Total ram usage:        0 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    7
 10539 ;; This function calls:
 10540 ;;		_setLED_Main
 10541 ;; This function is called by:
 10542 ;;		_main
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           
 10547                           ;psect for function _LED_Main
 10548  1CE0                     _LED_Main:	
 10549                           
 10550                           ;LED_B1.c: 54: setLED_Main(1);
 10551                           
 10552                           ;incstack = 0
 10553                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10554  1CE0  3001               	movlw	1
 10555  1CE1  3192  2268  319C   	fcall	_setLED_Main
 10556                           
 10557                           ;LED_B1.c: 57: setLED_Main(2);
 10558  1CE4  3002               	movlw	2
 10559  1CE5  3192  2268  319C   	fcall	_setLED_Main
 10560                           
 10561                           ;LED_B1.c: 63: setLED_Main(99);
 10562  1CE8  3063               	movlw	99
 10563  1CE9  3192  2268         	fcall	_setLED_Main
 10564  1CEB  0008               	return
 10565  1CEC                     __end_of_LED_Main:	
 10566                           
 10567                           	psect	text56
 10568  1268                     __ptext56:	
 10569 ;; *************** function _setLED_Main *****************
 10570 ;; Defined at:
 10571 ;;		line 215 in file "../src/LED_B1.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;  led             1    wreg     unsigned char 
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;  led             1    4[BANK0 ] unsigned char 
 10576 ;; Return value:  Size  Location     Type
 10577 ;;		None               void
 10578 ;; Registers used:
 10579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;Total ram usage:        3 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    6
 10592 ;; This function calls:
 10593 ;;		_LedPointSelect
 10594 ;; This function is called by:
 10595 ;;		_LED_Main
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           
 10600                           ;psect for function _setLED_Main
 10601  1268                     _setLED_Main:	
 10602                           
 10603                           ;incstack = 0
 10604                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10605                           ;setLED_Main@led stored from wreg
 10606  1268  0020               	movlb	0	; select bank0
 10607  1269  00A4               	movwf	setLED_Main@led
 10608                           
 10609                           ;LED_B1.c: 217: LedPointSelect(led);
 10610  126A  0824               	movf	setLED_Main@led,w
 10611  126B  319F  27DE  3192   	fcall	_LedPointSelect
 10612                           
 10613                           ;LED_B1.c: 218: if(LED->GO)
 10614  126E  0021               	movlb	1	; select bank1
 10615  126F  083D               	movf	_LED^(0+128),w
 10616  1270  0086               	movwf	6
 10617  1271  0187               	clrf	7
 10618  1272  1C81               	btfss	1,1
 10619  1273  0008               	return
 10620                           
 10621                           ;LED_B1.c: 219: {
 10622                           ;LED_B1.c: 220: LED->Time++;
 10623  1274  0A3D               	incf	_LED^(0+128),w
 10624  1275  0086               	movwf	6
 10625  1276  0187               	clrf	7
 10626  1277  3001               	movlw	1
 10627  1278  0781               	addwf	1,f
 10628  1279  3141               	addfsr 1,1
 10629  127A  1803               	skipnc
 10630  127B  0A81               	incf	1,f
 10631                           
 10632                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 10633  127C  0A3D               	incf	_LED^(0+128),w
 10634  127D  0086               	movwf	6
 10635  127E  0187               	clrf	7
 10636  127F  3F40               	moviw [0]fsr1
 10637  1280  0020               	movlb	0	; select bank0
 10638  1281  00A2               	movwf	??_setLED_Main
 10639  1282  3F41               	moviw [1]fsr1
 10640  1283  00A3               	movwf	??_setLED_Main+1
 10641  1284  3000               	movlw	0
 10642  1285  0223               	subwf	??_setLED_Main+1,w
 10643  1286  3032               	movlw	50
 10644  1287  1903               	skipnz
 10645  1288  0222               	subwf	??_setLED_Main,w
 10646  1289  1C03               	skipc
 10647  128A  0008               	return
 10648                           
 10649                           ;LED_B1.c: 222: {
 10650                           ;LED_B1.c: 223: LED->Time=0;
 10651  128B  0021               	movlb	1	; select bank1
 10652  128C  0A3D               	incf	_LED^(0+128),w
 10653  128D  0086               	movwf	6
 10654  128E  0187               	clrf	7
 10655  128F  3000               	movlw	0
 10656  1290  3FC0               	movwi [0]fsr1
 10657  1291  3FC1               	movwi [1]fsr1
 10658                           
 10659                           ;LED_B1.c: 225: if(led == 1)
 10660  1292  0020               	movlb	0	; select bank0
 10661  1293  0824               	movf	setLED_Main@led,w
 10662  1294  3A01               	xorlw	1
 10663  1295  1D03               	skipz
 10664  1296  2A9A               	goto	l6468
 10665                           
 10666                           ;LED_B1.c: 226: {
 10667                           ;LED_B1.c: 227: RA3=~RA3;
 10668  1297  3008               	movlw	8
 10669  1298  068C               	xorwf	12,f
 10670                           
 10671                           ;LED_B1.c: 228: }
 10672  1299  0008               	return
 10673  129A                     l6468:	
 10674                           
 10675                           ;LED_B1.c: 231: else if(led == 2)
 10676  129A  0824               	movf	setLED_Main@led,w
 10677  129B  3A02               	xorlw	2
 10678  129C  1D03               	skipz
 10679  129D  2AA1               	goto	l6472
 10680                           
 10681                           ;LED_B1.c: 232: {
 10682                           ;LED_B1.c: 233: RC7=~RC7;
 10683  129E  3080               	movlw	128
 10684  129F  068E               	xorwf	14,f
 10685                           
 10686                           ;LED_B1.c: 234: }
 10687  12A0  0008               	return
 10688  12A1                     l6472:	
 10689                           
 10690                           ;LED_B1.c: 243: else if(led == 99)
 10691  12A1  0824               	movf	setLED_Main@led,w
 10692  12A2  3A63               	xorlw	99
 10693  12A3  1D03               	skipz
 10694  12A4  0008               	return
 10695                           
 10696                           ;LED_B1.c: 244: {
 10697                           ;LED_B1.c: 245: RB5=~RB5;
 10698  12A5  3020               	movlw	32
 10699  12A6  068D               	xorwf	13,f
 10700  12A7  0008               	return
 10701  12A8                     __end_of_setLED_Main:	
 10702                           
 10703                           	psect	text57
 10704  1CD4                     __ptext57:	
 10705 ;; *************** function _LED_Initialization *****************
 10706 ;; Defined at:
 10707 ;;		line 35 in file "../src/LED_B1.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;		None               void
 10714 ;; Registers used:
 10715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    8
 10728 ;; This function calls:
 10729 ;;		_setLED_Initialization
 10730 ;; This function is called by:
 10731 ;;		_main
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function _LED_Initialization
 10737  1CD4                     _LED_Initialization:	
 10738                           
 10739                           ;LED_B1.c: 38: setLED_Initialization(1);
 10740                           
 10741                           ;incstack = 0
 10742                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10743  1CD4  3001               	movlw	1
 10744  1CD5  319D  25DA  319C   	fcall	_setLED_Initialization
 10745                           
 10746                           ;LED_B1.c: 41: setLED_Initialization(2);
 10747  1CD8  3002               	movlw	2
 10748  1CD9  319D  25DA  319C   	fcall	_setLED_Initialization
 10749                           
 10750                           ;LED_B1.c: 47: setLED_Initialization(99);
 10751  1CDC  3063               	movlw	99
 10752  1CDD  319D  25DA         	fcall	_setLED_Initialization
 10753  1CDF  0008               	return
 10754  1CE0                     __end_of_LED_Initialization:	
 10755                           
 10756                           	psect	text58
 10757  1DDA                     __ptext58:	
 10758 ;; *************** function _setLED_Initialization *****************
 10759 ;; Defined at:
 10760 ;;		line 67 in file "../src/LED_B1.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  led             1    wreg     unsigned char 
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  led             1    4[BANK0 ] unsigned char 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        1 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    7
 10781 ;; This function calls:
 10782 ;;		_LedPointSelect
 10783 ;;		_setLED
 10784 ;; This function is called by:
 10785 ;;		_LED_Initialization
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _setLED_Initialization
 10791  1DDA                     _setLED_Initialization:	
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10795                           ;setLED_Initialization@led stored from wreg
 10796  1DDA  0020               	movlb	0	; select bank0
 10797  1DDB  00A4               	movwf	setLED_Initialization@led
 10798                           
 10799                           ;LED_B1.c: 69: LedPointSelect(led);
 10800  1DDC  0824               	movf	setLED_Initialization@led,w
 10801  1DDD  319F  27DE  319D   	fcall	_LedPointSelect
 10802                           
 10803                           ;LED_B1.c: 70: LED->Enable=1;
 10804  1DE0  0021               	movlb	1	; select bank1
 10805  1DE1  083D               	movf	_LED^(0+128),w
 10806  1DE2  0086               	movwf	6
 10807  1DE3  0187               	clrf	7
 10808  1DE4  1401               	bsf	1,0
 10809                           
 10810                           ;LED_B1.c: 71: setLED(led,0);
 10811  1DE5  0020               	movlb	0	; select bank0
 10812  1DE6  01A2               	clrf	setLED@command
 10813  1DE7  0824               	movf	setLED_Initialization@led,w
 10814  1DE8  3197  2744         	fcall	_setLED
 10815  1DEA  0008               	return
 10816  1DEB                     __end_of_setLED_Initialization:	
 10817                           
 10818                           	psect	text59
 10819  132C                     __ptext59:	
 10820 ;; *************** function _Flash_Memory_Main *****************
 10821 ;; Defined at:
 10822 ;;		line 786 in file "../src/MCU_B1.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;		None
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;		None               void
 10829 ;; Registers used:
 10830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;Total ram usage:        0 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    8
 10843 ;; This function calls:
 10844 ;;		_Flash_Memory_Modify
 10845 ;; This function is called by:
 10846 ;;		_main
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           
 10851                           ;psect for function _Flash_Memory_Main
 10852  132C                     _Flash_Memory_Main:	
 10853                           
 10854                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 10855                           
 10856                           ;incstack = 0
 10857                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10858  132C  0021               	movlb	1	; select bank1
 10859  132D  086F               	movf	_Memory^(0+128),w
 10860  132E  3E24               	addlw	36
 10861  132F  0086               	movwf	6
 10862  1330  3001               	movlw	1	; select bank2/3
 10863  1331  0087               	movwf	7
 10864  1332  1C81               	btfss	1,1
 10865  1333  0008               	return
 10866                           
 10867                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 10868  1334  086F               	movf	_Memory^(0+128),w
 10869  1335  3E24               	addlw	36
 10870  1336  0086               	movwf	6
 10871  1337  3001               	movlw	1	; select bank2/3
 10872  1338  0087               	movwf	7
 10873  1339  1C01               	btfss	1,0
 10874  133A  2B69               	goto	l6982
 10875                           
 10876                           ;MCU_B1.c: 789: Memory->Time++;
 10877  133B  086F               	movf	_Memory^(0+128),w
 10878  133C  3E22               	addlw	34
 10879  133D  0086               	movwf	6
 10880  133E  3001               	movlw	1	; select bank2/3
 10881  133F  0087               	movwf	7
 10882  1340  3001               	movlw	1
 10883  1341  0781               	addwf	1,f
 10884  1342  3141               	addfsr 1,1
 10885  1343  1803               	skipnc
 10886  1344  0A81               	incf	1,f
 10887                           
 10888                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 10889  1345  086F               	movf	_Memory^(0+128),w
 10890  1346  3E22               	addlw	34
 10891  1347  0086               	movwf	6
 10892  1348  3001               	movlw	1	; select bank2/3
 10893  1349  0087               	movwf	7
 10894  134A  3F40               	moviw [0]fsr1
 10895  134B  3A19               	xorlw	25
 10896  134C  1D03               	skipz
 10897  134D  2B50               	goto	u6265
 10898  134E  3F41               	moviw [1]fsr1
 10899  134F  3A00               	xorlw	0
 10900  1350                     u6265:	
 10901  1350  1D03               	skipz
 10902  1351  0008               	return
 10903                           
 10904                           ;MCU_B1.c: 791: {
 10905                           ;MCU_B1.c: 792: Memory->Time = 0;
 10906  1352  086F               	movf	_Memory^(0+128),w
 10907  1353  3E22               	addlw	34
 10908  1354  0086               	movwf	6
 10909  1355  3001               	movlw	1	; select bank2/3
 10910  1356  0087               	movwf	7
 10911  1357  3000               	movlw	0
 10912  1358  3FC0               	movwi [0]fsr1
 10913  1359  3FC1               	movwi [1]fsr1
 10914                           
 10915                           ;MCU_B1.c: 793: Memory->Modify = 0;
 10916  135A  086F               	movf	_Memory^(0+128),w
 10917  135B  3E24               	addlw	36
 10918  135C  0086               	movwf	6
 10919  135D  3001               	movlw	1	; select bank2/3
 10920  135E  0087               	movwf	7
 10921  135F  1001               	bcf	1,0
 10922                           
 10923                           ;MCU_B1.c: 794: Memory->GO = 0;
 10924  1360  086F               	movf	_Memory^(0+128),w
 10925  1361  3E24               	addlw	36
 10926  1362  0086               	movwf	6
 10927  1363  3001               	movlw	1	; select bank2/3
 10928  1364  0087               	movwf	7
 10929  1365  1081               	bcf	1,1
 10930                           
 10931                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 10932  1366  3188  20FA         	fcall	_Flash_Memory_Modify
 10933                           
 10934                           ;MCU_B1.c: 796: }
 10935                           ;MCU_B1.c: 797: } else {
 10936  1368  0008               	return
 10937  1369                     l6982:	
 10938                           
 10939                           ;MCU_B1.c: 798: Memory->GO = 0;
 10940  1369  0021               	movlb	1	; select bank1
 10941  136A  086F               	movf	_Memory^(0+128),w
 10942  136B  3E24               	addlw	36
 10943  136C  0086               	movwf	6
 10944  136D  3001               	movlw	1	; select bank2/3
 10945  136E  0087               	movwf	7
 10946  136F  1081               	bcf	1,1
 10947  1370  0008               	return
 10948  1371                     __end_of_Flash_Memory_Main:	
 10949                           
 10950                           	psect	text60
 10951  08FA                     __ptext60:	
 10952 ;; *************** function _Flash_Memory_Modify *****************
 10953 ;; Defined at:
 10954 ;;		line 855 in file "../src/MCU_B1.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;		None
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  i               1    6[BANK0 ] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;		None               void
 10961 ;; Registers used:
 10962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;Total ram usage:        3 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    7
 10975 ;; This function calls:
 10976 ;;		_Flash_Memory_Erasing
 10977 ;;		_Flash_Memory_Read
 10978 ;;		_Flash_Memory_Write
 10979 ;; This function is called by:
 10980 ;;		_Flash_Memory_Main
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           
 10985                           ;psect for function _Flash_Memory_Modify
 10986  08FA                     _Flash_Memory_Modify:	
 10987                           
 10988                           ;MCU_B1.c: 856: char i = 0;
 10989                           
 10990                           ;incstack = 0
 10991                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10992  08FA  0020               	movlb	0	; select bank0
 10993  08FB  01A6               	clrf	Flash_Memory_Modify@i
 10994                           
 10995                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 10996  08FC  01A6               	clrf	Flash_Memory_Modify@i
 10997  08FD  3020               	movlw	32
 10998  08FE  0226               	subwf	Flash_Memory_Modify@i,w
 10999  08FF  1803               	btfsc	3,0
 11000  0900  291A               	goto	l6554
 11001  0901                     l6548:	
 11002                           
 11003                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 11004  0901  0826               	movf	Flash_Memory_Modify@i,w
 11005  0902  319E  26CD  3188   	fcall	_Flash_Memory_Read
 11006  0905  0020               	movlb	0	; select bank0
 11007  0906  00A4               	movwf	??_Flash_Memory_Modify
 11008  0907  0826               	movf	Flash_Memory_Modify@i,w
 11009  0908  0021               	movlb	1	; select bank1
 11010  0909  076F               	addwf	_Memory^(0+128),w
 11011  090A  0020               	movlb	0	; select bank0
 11012  090B  00A5               	movwf	??_Flash_Memory_Modify+1
 11013  090C  0825               	movf	??_Flash_Memory_Modify+1,w
 11014  090D  0086               	movwf	6
 11015  090E  3001               	movlw	1	; select bank2/3
 11016  090F  0087               	movwf	7
 11017  0910  0824               	movf	??_Flash_Memory_Modify,w
 11018  0911  0081               	movwf	1
 11019  0912  3001               	movlw	1
 11020  0913  00A4               	movwf	??_Flash_Memory_Modify
 11021  0914  0824               	movf	??_Flash_Memory_Modify,w
 11022  0915  07A6               	addwf	Flash_Memory_Modify@i,f
 11023  0916  3020               	movlw	32
 11024  0917  0226               	subwf	Flash_Memory_Modify@i,w
 11025  0918  1C03               	skipc
 11026  0919  2901               	goto	l6548
 11027  091A                     l6554:	
 11028                           
 11029                           ;MCU_B1.c: 859: }
 11030                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 11031  091A  087D               	movf	_product,w
 11032  091B  3E0C               	addlw	12
 11033  091C  0086               	movwf	6
 11034  091D  3001               	movlw	1	; select bank2/3
 11035  091E  0087               	movwf	7
 11036  091F  0801               	movf	1,w
 11037  0920  00A4               	movwf	??_Flash_Memory_Modify
 11038  0921  0021               	movlb	1	; select bank1
 11039  0922  086F               	movf	_Memory^(0+128),w
 11040  0923  0086               	movwf	6
 11041  0924  3001               	movlw	1	; select bank2/3
 11042  0925  0087               	movwf	7
 11043  0926  0020               	movlb	0	; select bank0
 11044  0927  0824               	movf	??_Flash_Memory_Modify,w
 11045  0928  0081               	movwf	1
 11046                           
 11047                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 11048  0929  087D               	movf	_product,w
 11049  092A  3E0D               	addlw	13
 11050  092B  0086               	movwf	6
 11051  092C  3001               	movlw	1	; select bank2/3
 11052  092D  0087               	movwf	7
 11053  092E  0801               	movf	1,w
 11054  092F  00A4               	movwf	??_Flash_Memory_Modify
 11055  0930  0021               	movlb	1	; select bank1
 11056  0931  0A6F               	incf	_Memory^(0+128),w
 11057  0932  0086               	movwf	6
 11058  0933  3001               	movlw	1	; select bank2/3
 11059  0934  0087               	movwf	7
 11060  0935  0020               	movlb	0	; select bank0
 11061  0936  0824               	movf	??_Flash_Memory_Modify,w
 11062  0937  0081               	movwf	1
 11063                           
 11064                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 11065  0938  087D               	movf	_product,w
 11066  0939  3E0E               	addlw	14
 11067  093A  0086               	movwf	6
 11068  093B  3001               	movlw	1	; select bank2/3
 11069  093C  0087               	movwf	7
 11070  093D  0801               	movf	1,w
 11071  093E  00A4               	movwf	??_Flash_Memory_Modify
 11072  093F  0021               	movlb	1	; select bank1
 11073  0940  086F               	movf	_Memory^(0+128),w
 11074  0941  3E02               	addlw	2
 11075  0942  0086               	movwf	6
 11076  0943  3001               	movlw	1	; select bank2/3
 11077  0944  0087               	movwf	7
 11078  0945  0020               	movlb	0	; select bank0
 11079  0946  0824               	movf	??_Flash_Memory_Modify,w
 11080  0947  0081               	movwf	1
 11081                           
 11082                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 11083  0948  0021               	movlb	1	; select bank1
 11084  0949  086F               	movf	_Memory^(0+128),w
 11085  094A  3E24               	addlw	36
 11086  094B  0086               	movwf	6
 11087  094C  3001               	movlw	1	; select bank2/3
 11088  094D  0087               	movwf	7
 11089  094E  1D01               	btfss	1,2
 11090  094F  2960               	goto	l6558
 11091                           
 11092                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 11093  0950  086F               	movf	_Memory^(0+128),w
 11094  0951  3E24               	addlw	36
 11095  0952  0086               	movwf	6
 11096  0953  3001               	movlw	1	; select bank2/3
 11097  0954  0087               	movwf	7
 11098  0955  1101               	bcf	1,2
 11099                           
 11100                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 11101  0956  086E               	movf	_myMain^(0+128),w
 11102  0957  0086               	movwf	6
 11103  0958  3001               	movlw	1	; select bank2/3
 11104  0959  0087               	movwf	7
 11105  095A  1281               	bcf	1,5
 11106                           
 11107                           ;MCU_B1.c: 871: myMain->First = 0;
 11108  095B  086E               	movf	_myMain^(0+128),w
 11109  095C  0086               	movwf	6
 11110  095D  3001               	movlw	1	; select bank2/3
 11111  095E  0087               	movwf	7
 11112  095F  1381               	bcf	1,7
 11113  0960                     l6558:	
 11114                           
 11115                           ;MCU_B1.c: 873: }
 11116                           ;MCU_B1.c: 874: GIE = 0;
 11117  0960  138B               	bcf	11,7	;volatile
 11118                           
 11119                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 11120  0961  319C  24C8  3188   	fcall	_Flash_Memory_Erasing
 11121                           
 11122                           ;MCU_B1.c: 876: Flash_Memory_Write();
 11123  0964  3191  21F7         	fcall	_Flash_Memory_Write
 11124                           
 11125                           ;MCU_B1.c: 877: GIE = 1;
 11126  0966  178B               	bsf	11,7	;volatile
 11127  0967  0008               	return
 11128  0968                     __end_of_Flash_Memory_Modify:	
 11129                           
 11130                           	psect	text61
 11131  1CC8                     __ptext61:	
 11132 ;; *************** function _Flash_Memory_Erasing *****************
 11133 ;; Defined at:
 11134 ;;		line 844 in file "../src/MCU_B1.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;		None
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;		None               void
 11141 ;; Registers used:
 11142 ;;		wreg, status,2, status,0, pclath, cstack
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;Total ram usage:        0 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    6
 11155 ;; This function calls:
 11156 ;;		_Flash_Memory_Unlock
 11157 ;; This function is called by:
 11158 ;;		_Flash_Memory_Modify
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           
 11163                           ;psect for function _Flash_Memory_Erasing
 11164  1CC8                     _Flash_Memory_Erasing:	
 11165                           
 11166                           ;MCU_B1.c: 845: CFGS = 0;
 11167                           
 11168                           ;incstack = 0
 11169                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11170  1CC8  0023               	movlb	3	; select bank3
 11171  1CC9  1315               	bcf	21,6	;volatile
 11172                           
 11173                           ;MCU_B1.c: 846: PMADRH = 0x30;
 11174  1CCA  3030               	movlw	48
 11175  1CCB  0092               	movwf	18	;volatile
 11176                           
 11177                           ;MCU_B1.c: 847: PMADRL = 0x00;
 11178  1CCC  0191               	clrf	17	;volatile
 11179                           
 11180                           ;MCU_B1.c: 848: FREE = 1;
 11181  1CCD  1615               	bsf	21,4	;volatile
 11182                           
 11183                           ;MCU_B1.c: 849: WREN = 1;
 11184  1CCE  1515               	bsf	21,2	;volatile
 11185                           
 11186                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 11187  1CCF  319C  243B         	fcall	_Flash_Memory_Unlock
 11188                           
 11189                           ;MCU_B1.c: 851: WREN = 0;
 11190  1CD1  0023               	movlb	3	; select bank3
 11191  1CD2  1115               	bcf	21,2	;volatile
 11192  1CD3  0008               	return
 11193  1CD4                     __end_of_Flash_Memory_Erasing:	
 11194                           
 11195                           	psect	text62
 11196  0444                     __ptext62:	
 11197 ;; *************** function _Flash_Memory_Initialization *****************
 11198 ;; Defined at:
 11199 ;;		line 745 in file "../src/MCU_B1.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;  i               1   62[BANK0 ] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;		None               void
 11206 ;; Registers used:
 11207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;Total ram usage:        2 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    8
 11220 ;; This function calls:
 11221 ;;		_Flash_Memory_Read
 11222 ;;		_Flash_Memory_Write
 11223 ;;		_setPercentValue
 11224 ;; This function is called by:
 11225 ;;		_main
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _Flash_Memory_Initialization
 11231  0444                     _Flash_Memory_Initialization:	
 11232                           
 11233                           ;MCU_B1.c: 746: char i = 0;
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11237  0444  0020               	movlb	0	; select bank0
 11238  0445  01DE               	clrf	Flash_Memory_Initialization@i
 11239                           
 11240                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 11241  0446  301F               	movlw	31
 11242  0447  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11243  044A  3AAA               	xorlw	170
 11244  044B  1D03               	skipz
 11245  044C  2CBE               	goto	l6938
 11246                           
 11247                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 11248  044D  3000               	movlw	0
 11249  044E  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11250  0451  0020               	movlb	0	; select bank0
 11251  0452  00DD               	movwf	??_Flash_Memory_Initialization
 11252  0453  087D               	movf	_product,w
 11253  0454  3E0C               	addlw	12
 11254  0455  0086               	movwf	6
 11255  0456  3001               	movlw	1	; select bank2/3
 11256  0457  0087               	movwf	7
 11257  0458  085D               	movf	??_Flash_Memory_Initialization,w
 11258  0459  0081               	movwf	1
 11259                           
 11260                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 11261  045A  3001               	movlw	1
 11262  045B  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11263  045E  0020               	movlb	0	; select bank0
 11264  045F  00DD               	movwf	??_Flash_Memory_Initialization
 11265  0460  087D               	movf	_product,w
 11266  0461  3E0D               	addlw	13
 11267  0462  0086               	movwf	6
 11268  0463  3001               	movlw	1	; select bank2/3
 11269  0464  0087               	movwf	7
 11270  0465  085D               	movf	??_Flash_Memory_Initialization,w
 11271  0466  0081               	movwf	1
 11272                           
 11273                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 11274  0467  3002               	movlw	2
 11275  0468  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11276  046B  0020               	movlb	0	; select bank0
 11277  046C  00DD               	movwf	??_Flash_Memory_Initialization
 11278  046D  087D               	movf	_product,w
 11279  046E  3E0E               	addlw	14
 11280  046F  0086               	movwf	6
 11281  0470  3001               	movlw	1	; select bank2/3
 11282  0471  0087               	movwf	7
 11283  0472  085D               	movf	??_Flash_Memory_Initialization,w
 11284  0473  0081               	movwf	1
 11285                           
 11286                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-60)*0.8)));
 11287  0474  3020               	movlw	32
 11288  0475  3193  23B6  3184   	fcall	_setPercentValue
 11289  0478  0020               	movlb	0	; select bank0
 11290  0479  00DD               	movwf	??_Flash_Memory_Initialization
 11291  047A  085D               	movf	??_Flash_Memory_Initialization,w
 11292  047B  00DE               	movwf	Flash_Memory_Initialization@i
 11293                           
 11294                           ;MCU_B1.c: 757: product->Data[21] = i;
 11295  047C  085E               	movf	Flash_Memory_Initialization@i,w
 11296  047D  00DD               	movwf	??_Flash_Memory_Initialization
 11297  047E  087D               	movf	_product,w
 11298  047F  3E15               	addlw	21
 11299  0480  0086               	movwf	6
 11300  0481  3001               	movlw	1	; select bank2/3
 11301  0482  0087               	movwf	7
 11302  0483  085D               	movf	??_Flash_Memory_Initialization,w
 11303  0484  0081               	movwf	1
 11304                           
 11305                           ;MCU_B1.c: 758: product->Data[22] = i;
 11306  0485  085E               	movf	Flash_Memory_Initialization@i,w
 11307  0486  00DD               	movwf	??_Flash_Memory_Initialization
 11308  0487  087D               	movf	_product,w
 11309  0488  3E16               	addlw	22
 11310  0489  0086               	movwf	6
 11311  048A  3001               	movlw	1	; select bank2/3
 11312  048B  0087               	movwf	7
 11313  048C  085D               	movf	??_Flash_Memory_Initialization,w
 11314  048D  0081               	movwf	1
 11315                           
 11316                           ;MCU_B1.c: 759: product->Data[23] = i;
 11317  048E  085E               	movf	Flash_Memory_Initialization@i,w
 11318  048F  00DD               	movwf	??_Flash_Memory_Initialization
 11319  0490  087D               	movf	_product,w
 11320  0491  3E17               	addlw	23
 11321  0492  0086               	movwf	6
 11322  0493  3001               	movlw	1	; select bank2/3
 11323  0494  0087               	movwf	7
 11324  0495  085D               	movf	??_Flash_Memory_Initialization,w
 11325  0496  0081               	movwf	1
 11326                           
 11327                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11328  0497  087D               	movf	_product,w
 11329  0498  3E0C               	addlw	12
 11330  0499  0086               	movwf	6
 11331  049A  3001               	movlw	1	; select bank2/3
 11332  049B  0087               	movwf	7
 11333  049C  0801               	movf	1,w
 11334  049D  3AFF               	xorlw	255
 11335  049E  1D03               	skipz
 11336  049F  0008               	return
 11337  04A0  087D               	movf	_product,w
 11338  04A1  3E0D               	addlw	13
 11339  04A2  0086               	movwf	6
 11340  04A3  3001               	movlw	1	; select bank2/3
 11341  04A4  0087               	movwf	7
 11342  04A5  0801               	movf	1,w
 11343  04A6  3AFF               	xorlw	255
 11344  04A7  1D03               	skipz
 11345  04A8  0008               	return
 11346  04A9  087D               	movf	_product,w
 11347  04AA  3E0E               	addlw	14
 11348  04AB  0086               	movwf	6
 11349  04AC  3001               	movlw	1	; select bank2/3
 11350  04AD  0087               	movwf	7
 11351  04AE  0801               	movf	1,w
 11352  04AF  3AFF               	xorlw	255
 11353  04B0  1D03               	skipz
 11354  04B1  0008               	return
 11355                           
 11356                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 11357  04B2  0021               	movlb	1	; select bank1
 11358  04B3  086E               	movf	_myMain^(0+128),w
 11359  04B4  0086               	movwf	6
 11360  04B5  3001               	movlw	1	; select bank2/3
 11361  04B6  0087               	movwf	7
 11362  04B7  1681               	bsf	1,5
 11363                           
 11364                           ;MCU_B1.c: 763: myMain->First = 1;
 11365  04B8  086E               	movf	_myMain^(0+128),w
 11366  04B9  0086               	movwf	6
 11367  04BA  3001               	movlw	1	; select bank2/3
 11368  04BB  0087               	movwf	7
 11369  04BC  1781               	bsf	1,7
 11370                           
 11371                           ;MCU_B1.c: 764: }
 11372                           ;MCU_B1.c: 765: } else {
 11373  04BD  0008               	return
 11374  04BE                     l6938:	
 11375                           
 11376                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-60)*0.8)));
 11377  04BE  3020               	movlw	32
 11378  04BF  3193  23B6  3184   	fcall	_setPercentValue
 11379  04C2  0020               	movlb	0	; select bank0
 11380  04C3  00DD               	movwf	??_Flash_Memory_Initialization
 11381  04C4  085D               	movf	??_Flash_Memory_Initialization,w
 11382  04C5  00DE               	movwf	Flash_Memory_Initialization@i
 11383                           
 11384                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 11385  04C6  30FF               	movlw	255
 11386  04C7  00DD               	movwf	??_Flash_Memory_Initialization
 11387  04C8  0021               	movlb	1	; select bank1
 11388  04C9  086F               	movf	_Memory^(0+128),w
 11389  04CA  0086               	movwf	6
 11390  04CB  3001               	movlw	1	; select bank2/3
 11391  04CC  0087               	movwf	7
 11392  04CD  0020               	movlb	0	; select bank0
 11393  04CE  085D               	movf	??_Flash_Memory_Initialization,w
 11394  04CF  0081               	movwf	1
 11395                           
 11396                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 11397  04D0  30FF               	movlw	255
 11398  04D1  00DD               	movwf	??_Flash_Memory_Initialization
 11399  04D2  0021               	movlb	1	; select bank1
 11400  04D3  0A6F               	incf	_Memory^(0+128),w
 11401  04D4  0086               	movwf	6
 11402  04D5  3001               	movlw	1	; select bank2/3
 11403  04D6  0087               	movwf	7
 11404  04D7  0020               	movlb	0	; select bank0
 11405  04D8  085D               	movf	??_Flash_Memory_Initialization,w
 11406  04D9  0081               	movwf	1
 11407                           
 11408                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 11409  04DA  30FF               	movlw	255
 11410  04DB  00DD               	movwf	??_Flash_Memory_Initialization
 11411  04DC  0021               	movlb	1	; select bank1
 11412  04DD  086F               	movf	_Memory^(0+128),w
 11413  04DE  3E02               	addlw	2
 11414  04DF  0086               	movwf	6
 11415  04E0  3001               	movlw	1	; select bank2/3
 11416  04E1  0087               	movwf	7
 11417  04E2  0020               	movlb	0	; select bank0
 11418  04E3  085D               	movf	??_Flash_Memory_Initialization,w
 11419  04E4  0081               	movwf	1
 11420                           
 11421                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 11422  04E5  30FF               	movlw	255
 11423  04E6  00DD               	movwf	??_Flash_Memory_Initialization
 11424  04E7  0021               	movlb	1	; select bank1
 11425  04E8  086F               	movf	_Memory^(0+128),w
 11426  04E9  3E03               	addlw	3
 11427  04EA  0086               	movwf	6
 11428  04EB  3001               	movlw	1	; select bank2/3
 11429  04EC  0087               	movwf	7
 11430  04ED  0020               	movlb	0	; select bank0
 11431  04EE  085D               	movf	??_Flash_Memory_Initialization,w
 11432  04EF  0081               	movwf	1
 11433                           
 11434                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 11435  04F0  30FF               	movlw	255
 11436  04F1  00DD               	movwf	??_Flash_Memory_Initialization
 11437  04F2  0021               	movlb	1	; select bank1
 11438  04F3  086F               	movf	_Memory^(0+128),w
 11439  04F4  3E04               	addlw	4
 11440  04F5  0086               	movwf	6
 11441  04F6  3001               	movlw	1	; select bank2/3
 11442  04F7  0087               	movwf	7
 11443  04F8  0020               	movlb	0	; select bank0
 11444  04F9  085D               	movf	??_Flash_Memory_Initialization,w
 11445  04FA  0081               	movwf	1
 11446                           
 11447                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 11448  04FB  30FF               	movlw	255
 11449  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 11450  04FD  0021               	movlb	1	; select bank1
 11451  04FE  086F               	movf	_Memory^(0+128),w
 11452  04FF  3E05               	addlw	5
 11453  0500  0086               	movwf	6
 11454  0501  3001               	movlw	1	; select bank2/3
 11455  0502  0087               	movwf	7
 11456  0503  0020               	movlb	0	; select bank0
 11457  0504  085D               	movf	??_Flash_Memory_Initialization,w
 11458  0505  0081               	movwf	1
 11459                           
 11460                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 11461  0506  30AA               	movlw	170
 11462  0507  00DD               	movwf	??_Flash_Memory_Initialization
 11463  0508  0021               	movlb	1	; select bank1
 11464  0509  086F               	movf	_Memory^(0+128),w
 11465  050A  3E1F               	addlw	31
 11466  050B  0086               	movwf	6
 11467  050C  3001               	movlw	1	; select bank2/3
 11468  050D  0087               	movwf	7
 11469  050E  0020               	movlb	0	; select bank0
 11470  050F  085D               	movf	??_Flash_Memory_Initialization,w
 11471  0510  0081               	movwf	1
 11472                           
 11473                           ;MCU_B1.c: 774: product->Data[21] = i;
 11474  0511  085E               	movf	Flash_Memory_Initialization@i,w
 11475  0512  00DD               	movwf	??_Flash_Memory_Initialization
 11476  0513  087D               	movf	_product,w
 11477  0514  3E15               	addlw	21
 11478  0515  0086               	movwf	6
 11479  0516  3001               	movlw	1	; select bank2/3
 11480  0517  0087               	movwf	7
 11481  0518  085D               	movf	??_Flash_Memory_Initialization,w
 11482  0519  0081               	movwf	1
 11483                           
 11484                           ;MCU_B1.c: 775: product->Data[22] = i;
 11485  051A  085E               	movf	Flash_Memory_Initialization@i,w
 11486  051B  00DD               	movwf	??_Flash_Memory_Initialization
 11487  051C  087D               	movf	_product,w
 11488  051D  3E16               	addlw	22
 11489  051E  0086               	movwf	6
 11490  051F  3001               	movlw	1	; select bank2/3
 11491  0520  0087               	movwf	7
 11492  0521  085D               	movf	??_Flash_Memory_Initialization,w
 11493  0522  0081               	movwf	1
 11494                           
 11495                           ;MCU_B1.c: 776: product->Data[23] = i;
 11496  0523  085E               	movf	Flash_Memory_Initialization@i,w
 11497  0524  00DD               	movwf	??_Flash_Memory_Initialization
 11498  0525  087D               	movf	_product,w
 11499  0526  3E17               	addlw	23
 11500  0527  0086               	movwf	6
 11501  0528  3001               	movlw	1	; select bank2/3
 11502  0529  0087               	movwf	7
 11503  052A  085D               	movf	??_Flash_Memory_Initialization,w
 11504  052B  0081               	movwf	1
 11505                           
 11506                           ;MCU_B1.c: 777: GIE = 0;
 11507  052C  138B               	bcf	11,7	;volatile
 11508                           
 11509                           ;MCU_B1.c: 778: Flash_Memory_Write();
 11510  052D  3191  21F7         	fcall	_Flash_Memory_Write
 11511                           
 11512                           ;MCU_B1.c: 779: GIE = 1;
 11513  052F  178B               	bsf	11,7	;volatile
 11514                           
 11515                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 11516  0530  0021               	movlb	1	; select bank1
 11517  0531  086E               	movf	_myMain^(0+128),w
 11518  0532  0086               	movwf	6
 11519  0533  3001               	movlw	1	; select bank2/3
 11520  0534  0087               	movwf	7
 11521  0535  1681               	bsf	1,5
 11522                           
 11523                           ;MCU_B1.c: 781: myMain->First = 1;
 11524  0536  086E               	movf	_myMain^(0+128),w
 11525  0537  0086               	movwf	6
 11526  0538  3001               	movlw	1	; select bank2/3
 11527  0539  0087               	movwf	7
 11528  053A  1781               	bsf	1,7
 11529  053B  0008               	return
 11530  053C                     __end_of_Flash_Memory_Initialization:	
 11531                           
 11532                           	psect	text63
 11533  11F7                     __ptext63:	
 11534 ;; *************** function _Flash_Memory_Write *****************
 11535 ;; Defined at:
 11536 ;;		line 825 in file "../src/MCU_B1.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  i               1    1[BANK0 ] unsigned char 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;		None               void
 11543 ;; Registers used:
 11544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        2 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    6
 11557 ;; This function calls:
 11558 ;;		_Flash_Memory_Unlock
 11559 ;; This function is called by:
 11560 ;;		_Flash_Memory_Initialization
 11561 ;;		_Flash_Memory_Modify
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           
 11566                           ;psect for function _Flash_Memory_Write
 11567  11F7                     _Flash_Memory_Write:	
 11568                           
 11569                           ;MCU_B1.c: 826: char i = 0;
 11570                           
 11571                           ;incstack = 0
 11572                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11573  11F7  0020               	movlb	0	; select bank0
 11574  11F8  01A1               	clrf	Flash_Memory_Write@i
 11575                           
 11576                           ;MCU_B1.c: 827: CFGS = 0;
 11577  11F9  0023               	movlb	3	; select bank3
 11578  11FA  1315               	bcf	21,6	;volatile
 11579                           
 11580                           ;MCU_B1.c: 828: PMADRH = 0x30;
 11581  11FB  3030               	movlw	48
 11582  11FC  0092               	movwf	18	;volatile
 11583                           
 11584                           ;MCU_B1.c: 829: PMDATH = 0;
 11585  11FD  0194               	clrf	20	;volatile
 11586                           
 11587                           ;MCU_B1.c: 830: FREE = 0;
 11588  11FE  1215               	bcf	21,4	;volatile
 11589                           
 11590                           ;MCU_B1.c: 831: LWLO = 1;
 11591  11FF  1695               	bsf	21,5	;volatile
 11592                           
 11593                           ;MCU_B1.c: 832: WREN = 1;
 11594  1200  1515               	bsf	21,2	;volatile
 11595                           
 11596                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 11597  1201  0020               	movlb	0	; select bank0
 11598  1202  01A1               	clrf	Flash_Memory_Write@i
 11599  1203  3020               	movlw	32
 11600  1204  0221               	subwf	Flash_Memory_Write@i,w
 11601  1205  1803               	btfsc	3,0
 11602  1206  2A23               	goto	l1313
 11603  1207                     l6052:	
 11604                           
 11605                           ;MCU_B1.c: 834: PMADRL = i;
 11606  1207  0821               	movf	Flash_Memory_Write@i,w
 11607  1208  0023               	movlb	3	; select bank3
 11608  1209  0091               	movwf	17	;volatile
 11609                           
 11610                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 11611  120A  0020               	movlb	0	; select bank0
 11612  120B  0821               	movf	Flash_Memory_Write@i,w
 11613  120C  0021               	movlb	1	; select bank1
 11614  120D  076F               	addwf	_Memory^(0+128),w
 11615  120E  0020               	movlb	0	; select bank0
 11616  120F  00A0               	movwf	??_Flash_Memory_Write
 11617  1210  0820               	movf	??_Flash_Memory_Write,w
 11618  1211  0086               	movwf	6
 11619  1212  3001               	movlw	1	; select bank2/3
 11620  1213  0087               	movwf	7
 11621  1214  0801               	movf	1,w
 11622  1215  0023               	movlb	3	; select bank3
 11623  1216  0093               	movwf	19	;volatile
 11624                           
 11625                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 11626  1217  319C  243B  3191   	fcall	_Flash_Memory_Unlock
 11627  121A  3001               	movlw	1
 11628  121B  0020               	movlb	0	; select bank0
 11629  121C  00A0               	movwf	??_Flash_Memory_Write
 11630  121D  0820               	movf	??_Flash_Memory_Write,w
 11631  121E  07A1               	addwf	Flash_Memory_Write@i,f
 11632  121F  3020               	movlw	32
 11633  1220  0221               	subwf	Flash_Memory_Write@i,w
 11634  1221  1C03               	skipc
 11635  1222  2A07               	goto	l6052
 11636  1223                     l1313:	
 11637                           
 11638                           ;MCU_B1.c: 837: }
 11639                           ;MCU_B1.c: 838: LWLO = 0;
 11640  1223  0023               	movlb	3	; select bank3
 11641  1224  1295               	bcf	21,5	;volatile
 11642                           
 11643                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 11644  1225  319C  243B         	fcall	_Flash_Memory_Unlock
 11645                           
 11646                           ;MCU_B1.c: 840: WREN = 0;
 11647  1227  0023               	movlb	3	; select bank3
 11648  1228  1115               	bcf	21,2	;volatile
 11649  1229  0008               	return
 11650  122A                     __end_of_Flash_Memory_Write:	
 11651                           
 11652                           	psect	text64
 11653  1C3B                     __ptext64:	
 11654 ;; *************** function _Flash_Memory_Unlock *****************
 11655 ;; Defined at:
 11656 ;;		line 804 in file "../src/MCU_B1.c"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;		None
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;		None
 11661 ;; Return value:  Size  Location     Type
 11662 ;;		None               void
 11663 ;; Registers used:
 11664 ;;		wreg
 11665 ;; Tracked objects:
 11666 ;;		On entry : 0/0
 11667 ;;		On exit  : 0/0
 11668 ;;		Unchanged: 0/0
 11669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;Total ram usage:        0 bytes
 11675 ;; Hardware stack levels used:    1
 11676 ;; Hardware stack levels required when called:    5
 11677 ;; This function calls:
 11678 ;;		Nothing
 11679 ;; This function is called by:
 11680 ;;		_Flash_Memory_Write
 11681 ;;		_Flash_Memory_Erasing
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function _Flash_Memory_Unlock
 11687  1C3B                     _Flash_Memory_Unlock:	
 11688                           
 11689                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11693  1C3B  3055               	movlw	85
 11694  1C3C  0023               	movlb	3	; select bank3
 11695  1C3D  0096               	movwf	22	;volatile
 11696                           
 11697                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 11698  1C3E  30AA               	movlw	170
 11699  1C3F  0096               	movwf	22	;volatile
 11700                           
 11701                           ;MCU_B1.c: 807: WR = 1;
 11702  1C40  1495               	bsf	21,1	;volatile
 11703                           
 11704                           ;MCU_B1.c: 808: __nop();
 11705  1C41  0000               	nop
 11706                           
 11707                           ;MCU_B1.c: 809: __nop();
 11708  1C42  0000               	nop
 11709  1C43  0008               	return
 11710  1C44                     __end_of_Flash_Memory_Unlock:	
 11711                           
 11712                           	psect	text65
 11713  1ECD                     __ptext65:	
 11714 ;; *************** function _Flash_Memory_Read *****************
 11715 ;; Defined at:
 11716 ;;		line 813 in file "../src/MCU_B1.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  address         1    wreg     unsigned char 
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;  address         1    2[BANK0 ] unsigned char 
 11721 ;;  ret             1    3[BANK0 ] unsigned char 
 11722 ;;  i               1    1[BANK0 ] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      unsigned char 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;Total ram usage:        4 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    5
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_Flash_Memory_Initialization
 11743 ;;		_Flash_Memory_Modify
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           
 11748                           ;psect for function _Flash_Memory_Read
 11749  1ECD                     _Flash_Memory_Read:	
 11750                           
 11751                           ;incstack = 0
 11752                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11753                           ;Flash_Memory_Read@address stored from wreg
 11754  1ECD  0020               	movlb	0	; select bank0
 11755  1ECE  00A2               	movwf	Flash_Memory_Read@address
 11756                           
 11757                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 11758  1ECF  01A1               	clrf	Flash_Memory_Read@i
 11759  1ED0  01A3               	clrf	Flash_Memory_Read@ret
 11760                           
 11761                           ;MCU_B1.c: 815: PMADRH = 0x30;
 11762  1ED1  3030               	movlw	48
 11763  1ED2  0023               	movlb	3	; select bank3
 11764  1ED3  0092               	movwf	18	;volatile
 11765                           
 11766                           ;MCU_B1.c: 816: PMADRL = address;
 11767  1ED4  0020               	movlb	0	; select bank0
 11768  1ED5  0822               	movf	Flash_Memory_Read@address,w
 11769  1ED6  0023               	movlb	3	; select bank3
 11770  1ED7  0091               	movwf	17	;volatile
 11771                           
 11772                           ;MCU_B1.c: 817: CFGS = 0;
 11773  1ED8  1315               	bcf	21,6	;volatile
 11774                           
 11775                           ;MCU_B1.c: 818: RD = 1;
 11776  1ED9  1415               	bsf	21,0	;volatile
 11777                           
 11778                           ;MCU_B1.c: 819: i = PMDATH;
 11779  1EDA  0814               	movf	20,w	;volatile
 11780  1EDB  0020               	movlb	0	; select bank0
 11781  1EDC  00A0               	movwf	??_Flash_Memory_Read
 11782  1EDD  0820               	movf	??_Flash_Memory_Read,w
 11783  1EDE  00A1               	movwf	Flash_Memory_Read@i
 11784                           
 11785                           ;MCU_B1.c: 820: ret = PMDATL;
 11786  1EDF  0023               	movlb	3	; select bank3
 11787  1EE0  0813               	movf	19,w	;volatile
 11788  1EE1  0020               	movlb	0	; select bank0
 11789  1EE2  00A0               	movwf	??_Flash_Memory_Read
 11790  1EE3  0820               	movf	??_Flash_Memory_Read,w
 11791  1EE4  00A3               	movwf	Flash_Memory_Read@ret
 11792                           
 11793                           ;MCU_B1.c: 821: return ret;
 11794  1EE5  0823               	movf	Flash_Memory_Read@ret,w
 11795  1EE6  0008               	return
 11796  1EE7                     __end_of_Flash_Memory_Read:	
 11797                           
 11798                           	psect	text66
 11799  1C26                     __ptext66:	
 11800 ;; *************** function _DimmerLights_Main *****************
 11801 ;; Defined at:
 11802 ;;		line 407 in file "../src/Dimmer_B1.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;		None               void
 11809 ;; Registers used:
 11810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        0 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:   11
 11823 ;; This function calls:
 11824 ;;		_DimmerLights_Close
 11825 ;;		_setDimmerLights_Main
 11826 ;; This function is called by:
 11827 ;;		_main
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _DimmerLights_Main
 11833  1C26                     _DimmerLights_Main:	
 11834                           
 11835                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11836                           
 11837                           ;incstack = 0
 11838                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11839  1C26  3001               	movlw	1
 11840  1C27  3196  2631  319C   	fcall	_setDimmerLights_Main
 11841                           
 11842                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11843  1C2A  319D  25FD         	fcall	_DimmerLights_Close
 11844  1C2C  0008               	return
 11845  1C2D                     __end_of_DimmerLights_Main:	
 11846                           
 11847                           	psect	text67
 11848  1631                     __ptext67:	
 11849 ;; *************** function _setDimmerLights_Main *****************
 11850 ;; Defined at:
 11851 ;;		line 425 in file "../src/Dimmer_B1.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;  lights          1    wreg     unsigned char 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  lights          1   70[BANK0 ] unsigned char 
 11856 ;;  clear           1   69[BANK0 ] unsigned char 
 11857 ;; Return value:  Size  Location     Type
 11858 ;;		None               void
 11859 ;; Registers used:
 11860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11861 ;; Tracked objects:
 11862 ;;		On entry : 0/0
 11863 ;;		On exit  : 0/0
 11864 ;;		Unchanged: 0/0
 11865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;Total ram usage:        2 bytes
 11871 ;; Hardware stack levels used:    1
 11872 ;; Hardware stack levels required when called:   10
 11873 ;; This function calls:
 11874 ;;		_DimmerLightsPointSelect
 11875 ;;		_setBuz
 11876 ;;		_setDimmerLights
 11877 ;;		_setDimmerLights_Adj
 11878 ;; This function is called by:
 11879 ;;		_DimmerLights_Main
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _setDimmerLights_Main
 11885  1631                     _setDimmerLights_Main:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11889                           ;setDimmerLights_Main@lights stored from wreg
 11890  1631  0020               	movlb	0	; select bank0
 11891  1632  00E6               	movwf	setDimmerLights_Main@lights
 11892                           
 11893                           ;Dimmer_B1.c: 426: char clear = 1;
 11894  1633  01E5               	clrf	setDimmerLights_Main@clear
 11895  1634  0AE5               	incf	setDimmerLights_Main@clear,f
 11896                           
 11897                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11898  1635  0866               	movf	setDimmerLights_Main@lights,w
 11899  1636  319C  2482  3196   	fcall	_DimmerLightsPointSelect
 11900                           
 11901                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11902  1639  0878               	movf	_DimmerLights,w
 11903  163A  3E08               	addlw	8
 11904  163B  0086               	movwf	6
 11905  163C  3001               	movlw	1	; select bank2/3
 11906  163D  0087               	movwf	7
 11907  163E  1D01               	btfss	1,2
 11908  163F  2E5E               	goto	l6438
 11909                           
 11910                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11911  1640  0020               	movlb	0	; select bank0
 11912  1641  0865               	movf	setDimmerLights_Main@clear,w
 11913  1642  3A01               	xorlw	1
 11914  1643  1D03               	skipz
 11915  1644  0008               	return
 11916                           
 11917                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11918  1645  0878               	movf	_DimmerLights,w
 11919  1646  3E08               	addlw	8
 11920  1647  0086               	movwf	6
 11921  1648  3001               	movlw	1	; select bank2/3
 11922  1649  0087               	movwf	7
 11923  164A  1101               	bcf	1,2
 11924                           
 11925                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 11926  164B  0878               	movf	_DimmerLights,w
 11927  164C  3E08               	addlw	8
 11928  164D  0086               	movwf	6
 11929  164E  3001               	movlw	1	; select bank2/3
 11930  164F  0087               	movwf	7
 11931  1650  1C81               	btfss	1,1
 11932  1651  2E58               	goto	l6436
 11933                           
 11934                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 11935  1652  01A4               	clrf	setDimmerLights@status
 11936  1653  0AA4               	incf	setDimmerLights@status,f
 11937  1654  0866               	movf	setDimmerLights_Main@lights,w
 11938  1655  318B  2334         	fcall	_setDimmerLights
 11939                           
 11940                           ;Dimmer_B1.c: 452: } else {
 11941  1657  0008               	return
 11942  1658                     l6436:	
 11943                           
 11944                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 11945  1658  0020               	movlb	0	; select bank0
 11946  1659  01A4               	clrf	setDimmerLights@status
 11947  165A  0866               	movf	setDimmerLights_Main@lights,w
 11948  165B  318B  2334         	fcall	_setDimmerLights
 11949                           
 11950                           ;Dimmer_B1.c: 454: }
 11951                           ;Dimmer_B1.c: 458: }
 11952                           ;Dimmer_B1.c: 459: } else {
 11953  165D  0008               	return
 11954  165E                     l6438:	
 11955                           
 11956                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 11957  165E  0878               	movf	_DimmerLights,w
 11958  165F  3E08               	addlw	8
 11959  1660  0086               	movwf	6
 11960  1661  3001               	movlw	1	; select bank2/3
 11961  1662  0087               	movwf	7
 11962  1663  1E01               	btfss	1,4
 11963  1664  0008               	return
 11964                           
 11965                           ;Dimmer_B1.c: 461: if (clear == 1) {
 11966  1665  0020               	movlb	0	; select bank0
 11967  1666  0865               	movf	setDimmerLights_Main@clear,w
 11968  1667  3A01               	xorlw	1
 11969  1668  1D03               	skipz
 11970  1669  0008               	return
 11971                           
 11972                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 11973  166A  0878               	movf	_DimmerLights,w
 11974  166B  3E08               	addlw	8
 11975  166C  0086               	movwf	6
 11976  166D  3001               	movlw	1	; select bank2/3
 11977  166E  0087               	movwf	7
 11978  166F  1201               	bcf	1,4
 11979                           
 11980                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 11981  1670  0878               	movf	_DimmerLights,w
 11982  1671  3E08               	addlw	8
 11983  1672  0086               	movwf	6
 11984  1673  3001               	movlw	1	; select bank2/3
 11985  1674  0087               	movwf	7
 11986  1675  1D81               	btfss	1,3
 11987  1676  2E86               	goto	l6446
 11988                           
 11989                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 11990  1677  01E2               	clrf	setDimmerLights_Adj@status
 11991  1678  0AE2               	incf	setDimmerLights_Adj@status,f
 11992  1679  0866               	movf	setDimmerLights_Main@lights,w
 11993  167A  3192  222A  3196   	fcall	_setDimmerLights_Adj
 11994                           
 11995                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 11996  167D  3064               	movlw	100
 11997  167E  0020               	movlb	0	; select bank0
 11998  167F  00A9               	movwf	setBuz@time
 11999  1680  3000               	movlw	0
 12000  1681  00AA               	movwf	setBuz@time+1
 12001  1682  3001               	movlw	1
 12002  1683  318C  243C         	fcall	_setBuz
 12003                           
 12004                           ;Dimmer_B1.c: 466: } else {
 12005  1685  0008               	return
 12006  1686                     l6446:	
 12007                           
 12008                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12009  1686  0020               	movlb	0	; select bank0
 12010  1687  01E2               	clrf	setDimmerLights_Adj@status
 12011  1688  0866               	movf	setDimmerLights_Main@lights,w
 12012  1689  3192  222A         	fcall	_setDimmerLights_Adj
 12013  168B  0008               	return
 12014  168C                     __end_of_setDimmerLights_Main:	
 12015                           
 12016                           	psect	text68
 12017  122A                     __ptext68:	
 12018 ;; *************** function _setDimmerLights_Adj *****************
 12019 ;; Defined at:
 12020 ;;		line 646 in file "../src/Dimmer_B1.c"
 12021 ;; Parameters:    Size  Location     Type
 12022 ;;  lights          1    wreg     unsigned char 
 12023 ;;  status          1   66[BANK0 ] unsigned char 
 12024 ;; Auto vars:     Size  Location     Type
 12025 ;;  lights          1   68[BANK0 ] unsigned char 
 12026 ;; Return value:  Size  Location     Type
 12027 ;;		None               void
 12028 ;; Registers used:
 12029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12030 ;; Tracked objects:
 12031 ;;		On entry : 0/0
 12032 ;;		On exit  : 0/0
 12033 ;;		Unchanged: 0/0
 12034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12035 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;Total ram usage:        3 bytes
 12040 ;; Hardware stack levels used:    1
 12041 ;; Hardware stack levels required when called:    9
 12042 ;; This function calls:
 12043 ;;		_DimmerLightsPointSelect
 12044 ;;		_setRF_DimmerLights
 12045 ;;		_setTxData
 12046 ;; This function is called by:
 12047 ;;		_setDimmerLights_Main
 12048 ;; This function uses a non-reentrant model
 12049 ;;
 12050                           
 12051                           
 12052                           ;psect for function _setDimmerLights_Adj
 12053  122A                     _setDimmerLights_Adj:	
 12054                           
 12055                           ;incstack = 0
 12056                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12057                           ;setDimmerLights_Adj@lights stored from wreg
 12058  122A  0020               	movlb	0	; select bank0
 12059  122B  00E4               	movwf	setDimmerLights_Adj@lights
 12060                           
 12061                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12062  122C  0864               	movf	setDimmerLights_Adj@lights,w
 12063  122D  319C  2482  3192   	fcall	_DimmerLightsPointSelect
 12064                           
 12065                           ;Dimmer_B1.c: 648: if (status == 1) {
 12066  1230  0020               	movlb	0	; select bank0
 12067  1231  0862               	movf	setDimmerLights_Adj@status,w
 12068  1232  3A01               	xorlw	1
 12069  1233  1D03               	skipz
 12070  1234  2A40               	goto	l6006
 12071                           
 12072                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12073  1235  0878               	movf	_DimmerLights,w
 12074  1236  0086               	movwf	6
 12075  1237  3001               	movlw	1	; select bank2/3
 12076  1238  0087               	movwf	7
 12077  1239  1581               	bsf	1,3
 12078                           
 12079                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12080  123A  0878               	movf	_DimmerLights,w
 12081  123B  0086               	movwf	6
 12082  123C  3001               	movlw	1	; select bank2/3
 12083  123D  0087               	movwf	7
 12084  123E  1481               	bsf	1,1
 12085                           
 12086                           ;Dimmer_B1.c: 651: } else {
 12087  123F  0008               	return
 12088  1240                     l6006:	
 12089                           
 12090                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12091  1240  0878               	movf	_DimmerLights,w
 12092  1241  0086               	movwf	6
 12093  1242  3001               	movlw	1	; select bank2/3
 12094  1243  0087               	movwf	7
 12095  1244  1D81               	btfss	1,3
 12096  1245  0008               	return
 12097                           
 12098                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12099  1246  0878               	movf	_DimmerLights,w
 12100  1247  0086               	movwf	6
 12101  1248  3001               	movlw	1	; select bank2/3
 12102  1249  0087               	movwf	7
 12103  124A  1081               	bcf	1,1
 12104                           
 12105                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12106  124B  0878               	movf	_DimmerLights,w
 12107  124C  0086               	movwf	6
 12108  124D  3001               	movlw	1	; select bank2/3
 12109  124E  0087               	movwf	7
 12110  124F  1181               	bcf	1,3
 12111                           
 12112                           ;Dimmer_B1.c: 656: ;;
 12113                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12114  1250  0878               	movf	_DimmerLights,w
 12115  1251  3E04               	addlw	4
 12116  1252  0086               	movwf	6
 12117  1253  3001               	movlw	1	; select bank2/3
 12118  1254  0087               	movwf	7
 12119  1255  0801               	movf	1,w
 12120  1256  00E3               	movwf	??_setDimmerLights_Adj
 12121  1257  0878               	movf	_DimmerLights,w
 12122  1258  3E05               	addlw	5
 12123  1259  0086               	movwf	6
 12124  125A  3001               	movlw	1	; select bank2/3
 12125  125B  0087               	movwf	7
 12126  125C  0863               	movf	??_setDimmerLights_Adj,w
 12127  125D  0081               	movwf	1
 12128                           
 12129                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12130  125E  01DD               	clrf	setRF_DimmerLights@on
 12131  125F  0ADD               	incf	setRF_DimmerLights@on,f
 12132  1260  0864               	movf	setDimmerLights_Adj@lights,w
 12133  1261  3188  208E  3192   	fcall	_setRF_DimmerLights
 12134                           
 12135                           ;Dimmer_B1.c: 666: setTxData(1);
 12136  1264  3001               	movlw	1
 12137  1265  318D  2554         	fcall	_setTxData
 12138  1267  0008               	return
 12139  1268                     __end_of_setDimmerLights_Adj:	
 12140                           
 12141                           	psect	text69
 12142  0B34                     __ptext69:	
 12143 ;; *************** function _setDimmerLights *****************
 12144 ;; Defined at:
 12145 ;;		line 593 in file "../src/Dimmer_B1.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;  lights          1    wreg     unsigned char 
 12148 ;;  status          1    4[BANK0 ] unsigned char 
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;  lights          1    6[BANK0 ] unsigned char 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;		None               void
 12153 ;; Registers used:
 12154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;Total ram usage:        3 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    7
 12167 ;; This function calls:
 12168 ;;		_DimmerLightsPointSelect
 12169 ;;		_setLED
 12170 ;;		_setMemory_GO
 12171 ;; This function is called by:
 12172 ;;		_setDimmerLights_Main
 12173 ;;		_setControl_Lights_Table
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           
 12178                           ;psect for function _setDimmerLights
 12179  0B34                     _setDimmerLights:	
 12180                           
 12181                           ;incstack = 0
 12182                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12183                           ;setDimmerLights@lights stored from wreg
 12184  0B34  0020               	movlb	0	; select bank0
 12185  0B35  00A6               	movwf	setDimmerLights@lights
 12186                           
 12187                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12188  0B36  0826               	movf	setDimmerLights@lights,w
 12189  0B37  319C  2482  318B   	fcall	_DimmerLightsPointSelect
 12190                           
 12191                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12192  0B3A  0020               	movlb	0	; select bank0
 12193  0B3B  0826               	movf	setDimmerLights@lights,w
 12194  0B3C  00A5               	movwf	??_setDimmerLights
 12195  0B3D  0021               	movlb	1	; select bank1
 12196  0B3E  0A3A               	incf	_Dimmer^(0+128),w
 12197  0B3F  0086               	movwf	6
 12198  0B40  0187               	clrf	7
 12199  0B41  0020               	movlb	0	; select bank0
 12200  0B42  0825               	movf	??_setDimmerLights,w
 12201  0B43  0081               	movwf	1
 12202                           
 12203                           ;Dimmer_B1.c: 596: if (status == 1) {
 12204  0B44  0824               	movf	setDimmerLights@status,w
 12205  0B45  3A01               	xorlw	1
 12206  0B46  1D03               	skipz
 12207  0B47  2B89               	goto	l5686
 12208                           
 12209                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12210  0B48  0878               	movf	_DimmerLights,w
 12211  0B49  0086               	movwf	6
 12212  0B4A  3001               	movlw	1	; select bank2/3
 12213  0B4B  0087               	movwf	7
 12214  0B4C  1681               	bsf	1,5
 12215                           
 12216                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12217  0B4D  01A2               	clrf	setLED@command
 12218  0B4E  0826               	movf	setDimmerLights@lights,w
 12219  0B4F  3197  2744  318B   	fcall	_setLED
 12220                           
 12221                           ;Dimmer_B1.c: 599: RC7=!0;
 12222  0B52  0020               	movlb	0	; select bank0
 12223  0B53  178E               	bsf	14,7	;volatile
 12224                           
 12225                           ;Dimmer_B1.c: 600: ;;
 12226                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12227  0B54  0878               	movf	_DimmerLights,w
 12228  0B55  0086               	movwf	6
 12229  0B56  3001               	movlw	1	; select bank2/3
 12230  0B57  0087               	movwf	7
 12231  0B58  1481               	bsf	1,1
 12232                           
 12233                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12234  0B59  3007               	movlw	7
 12235  0B5A  00A5               	movwf	??_setDimmerLights
 12236  0B5B  0878               	movf	_DimmerLights,w
 12237  0B5C  3E02               	addlw	2
 12238  0B5D  0086               	movwf	6
 12239  0B5E  3001               	movlw	1	; select bank2/3
 12240  0B5F  0087               	movwf	7
 12241  0B60  0825               	movf	??_setDimmerLights,w
 12242  0B61  0081               	movwf	1
 12243                           
 12244                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12245  0B62  0878               	movf	_DimmerLights,w
 12246  0B63  0086               	movwf	6
 12247  0B64  3001               	movlw	1	; select bank2/3
 12248  0B65  0087               	movwf	7
 12249  0B66  1B01               	btfsc	1,6
 12250  0B67  0008               	return
 12251                           
 12252                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12253  0B68  0878               	movf	_DimmerLights,w
 12254  0B69  0086               	movwf	6
 12255  0B6A  3001               	movlw	1	; select bank2/3
 12256  0B6B  0087               	movwf	7
 12257  0B6C  1701               	bsf	1,6
 12258                           
 12259                           ;Dimmer_B1.c: 607: ;;
 12260                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12261  0B6D  3000               	movlw	0
 12262  0B6E  319F  275D         	fcall	_setMemory_GO
 12263                           
 12264                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12265  0B70  0878               	movf	_DimmerLights,w
 12266  0B71  3E05               	addlw	5
 12267  0B72  0086               	movwf	6
 12268  0B73  3001               	movlw	1	; select bank2/3
 12269  0B74  0087               	movwf	7
 12270  0B75  0801               	movf	1,w
 12271  0B76  0020               	movlb	0	; select bank0
 12272  0B77  00A5               	movwf	??_setDimmerLights
 12273  0B78  0878               	movf	_DimmerLights,w
 12274  0B79  3E04               	addlw	4
 12275  0B7A  0086               	movwf	6
 12276  0B7B  3001               	movlw	1	; select bank2/3
 12277  0B7C  0087               	movwf	7
 12278  0B7D  0825               	movf	??_setDimmerLights,w
 12279  0B7E  0081               	movwf	1
 12280                           
 12281                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12282  0B7F  3020               	movlw	32
 12283  0B80  00A5               	movwf	??_setDimmerLights
 12284  0B81  0878               	movf	_DimmerLights,w
 12285  0B82  3E04               	addlw	4
 12286  0B83  0086               	movwf	6
 12287  0B84  3001               	movlw	1	; select bank2/3
 12288  0B85  0087               	movwf	7
 12289  0B86  0825               	movf	??_setDimmerLights,w
 12290  0B87  0081               	movwf	1
 12291                           
 12292                           ;Dimmer_B1.c: 617: }
 12293                           ;Dimmer_B1.c: 618: } else {
 12294  0B88  0008               	return
 12295  0B89                     l5686:	
 12296                           
 12297                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12298  0B89  0878               	movf	_DimmerLights,w
 12299  0B8A  0086               	movwf	6
 12300  0B8B  3001               	movlw	1	; select bank2/3
 12301  0B8C  0087               	movwf	7
 12302  0B8D  1281               	bcf	1,5
 12303                           
 12304                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12305  0B8E  0878               	movf	_DimmerLights,w
 12306  0B8F  3E06               	addlw	6
 12307  0B90  0086               	movwf	6
 12308  0B91  3001               	movlw	1	; select bank2/3
 12309  0B92  0087               	movwf	7
 12310  0B93  0801               	movf	1,w
 12311  0B94  00A5               	movwf	??_setDimmerLights
 12312  0B95  0878               	movf	_DimmerLights,w
 12313  0B96  3E04               	addlw	4
 12314  0B97  0086               	movwf	6
 12315  0B98  3001               	movlw	1	; select bank2/3
 12316  0B99  0087               	movwf	7
 12317  0B9A  0825               	movf	??_setDimmerLights,w
 12318  0B9B  0081               	movwf	1
 12319                           
 12320                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12321  0B9C  0878               	movf	_DimmerLights,w
 12322  0B9D  0086               	movwf	6
 12323  0B9E  3001               	movlw	1	; select bank2/3
 12324  0B9F  0087               	movwf	7
 12325  0BA0  1481               	bsf	1,1
 12326                           
 12327                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12328  0BA1  0878               	movf	_DimmerLights,w
 12329  0BA2  0086               	movwf	6
 12330  0BA3  3001               	movlw	1	; select bank2/3
 12331  0BA4  0087               	movwf	7
 12332  0BA5  1181               	bcf	1,3
 12333                           
 12334                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12335  0BA6  0878               	movf	_DimmerLights,w
 12336  0BA7  0086               	movwf	6
 12337  0BA8  3001               	movlw	1	; select bank2/3
 12338  0BA9  0087               	movwf	7
 12339  0BAA  1201               	bcf	1,4
 12340                           
 12341                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12342  0BAB  3007               	movlw	7
 12343  0BAC  00A5               	movwf	??_setDimmerLights
 12344  0BAD  0878               	movf	_DimmerLights,w
 12345  0BAE  3E02               	addlw	2
 12346  0BAF  0086               	movwf	6
 12347  0BB0  3001               	movlw	1	; select bank2/3
 12348  0BB1  0087               	movwf	7
 12349  0BB2  0825               	movf	??_setDimmerLights,w
 12350  0BB3  0081               	movwf	1
 12351  0BB4  0008               	return
 12352  0BB5                     __end_of_setDimmerLights:	
 12353                           
 12354                           	psect	text70
 12355  1744                     __ptext70:	
 12356 ;; *************** function _setLED *****************
 12357 ;; Defined at:
 12358 ;;		line 74 in file "../src/LED_B1.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  led             1    wreg     unsigned char 
 12361 ;;  command         1    2[BANK0 ] unsigned char 
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;  led             1    3[BANK0 ] unsigned char 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12373 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;Total ram usage:        2 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    6
 12380 ;; This function calls:
 12381 ;;		_LedPointSelect
 12382 ;; This function is called by:
 12383 ;;		_setDimmerLights_ERROR
 12384 ;;		_setDimmerLights
 12385 ;;		_setLED_Initialization
 12386 ;;		_setPowerFault_Exceptions
 12387 ;;		_setSw_Initialization
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           
 12392                           ;psect for function _setLED
 12393  1744                     _setLED:	
 12394                           
 12395                           ;incstack = 0
 12396                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12397                           ;setLED@led stored from wreg
 12398  1744  0020               	movlb	0	; select bank0
 12399  1745  00A3               	movwf	setLED@led
 12400                           
 12401                           ;LED_B1.c: 76: LedPointSelect(led);
 12402  1746  0823               	movf	setLED@led,w
 12403  1747  319F  27DE  3197   	fcall	_LedPointSelect
 12404                           
 12405                           ;LED_B1.c: 77: if(command == 0)
 12406  174A  0020               	movlb	0	; select bank0
 12407  174B  08A2               	movf	setLED@command,f
 12408  174C  1D03               	skipz
 12409  174D  2F60               	goto	l5574
 12410                           
 12411                           ;LED_B1.c: 78: {
 12412                           ;LED_B1.c: 80: if(led == 1)
 12413  174E  0823               	movf	setLED@led,w
 12414  174F  3A01               	xorlw	1
 12415  1750  1D03               	skipz
 12416  1751  2F54               	goto	l5566
 12417                           
 12418                           ;LED_B1.c: 81: {
 12419                           ;LED_B1.c: 85: RA3=1;
 12420  1752  158C               	bsf	12,3	;volatile
 12421                           
 12422                           ;LED_B1.c: 87: }
 12423  1753  0008               	return
 12424  1754                     l5566:	
 12425                           
 12426                           ;LED_B1.c: 90: else if(led == 2)
 12427  1754  0823               	movf	setLED@led,w
 12428  1755  3A02               	xorlw	2
 12429  1756  1D03               	skipz
 12430  1757  2F5A               	goto	l5570
 12431                           
 12432                           ;LED_B1.c: 91: {
 12433                           ;LED_B1.c: 95: RC7=1;
 12434  1758  178E               	bsf	14,7	;volatile
 12435                           
 12436                           ;LED_B1.c: 97: }
 12437  1759  0008               	return
 12438  175A                     l5570:	
 12439                           
 12440                           ;LED_B1.c: 110: else if(led == 99)
 12441  175A  0823               	movf	setLED@led,w
 12442  175B  3A63               	xorlw	99
 12443  175C  1D03               	skipz
 12444  175D  0008               	return
 12445                           
 12446                           ;LED_B1.c: 111: {
 12447                           ;LED_B1.c: 115: RB5=1;
 12448  175E  168D               	bsf	13,5	;volatile
 12449                           
 12450                           ;LED_B1.c: 117: }
 12451                           ;LED_B1.c: 119: }
 12452  175F  0008               	return
 12453  1760                     l5574:	
 12454                           
 12455                           ;LED_B1.c: 120: else if(command == 1)
 12456  1760  0822               	movf	setLED@command,w
 12457  1761  3A01               	xorlw	1
 12458  1762  1D03               	skipz
 12459  1763  2F76               	goto	l5588
 12460                           
 12461                           ;LED_B1.c: 121: {
 12462                           ;LED_B1.c: 123: if(led == 1)
 12463  1764  0823               	movf	setLED@led,w
 12464  1765  3A01               	xorlw	1
 12465  1766  1D03               	skipz
 12466  1767  2F6A               	goto	l5580
 12467                           
 12468                           ;LED_B1.c: 124: {
 12469                           ;LED_B1.c: 128: RA3=0;
 12470  1768  118C               	bcf	12,3	;volatile
 12471                           
 12472                           ;LED_B1.c: 130: }
 12473  1769  0008               	return
 12474  176A                     l5580:	
 12475                           
 12476                           ;LED_B1.c: 133: else if(led == 2)
 12477  176A  0823               	movf	setLED@led,w
 12478  176B  3A02               	xorlw	2
 12479  176C  1D03               	skipz
 12480  176D  2F70               	goto	l5584
 12481                           
 12482                           ;LED_B1.c: 134: {
 12483                           ;LED_B1.c: 138: RC7=0;
 12484  176E  138E               	bcf	14,7	;volatile
 12485                           
 12486                           ;LED_B1.c: 140: }
 12487  176F  0008               	return
 12488  1770                     l5584:	
 12489                           
 12490                           ;LED_B1.c: 153: else if(led == 99)
 12491  1770  0823               	movf	setLED@led,w
 12492  1771  3A63               	xorlw	99
 12493  1772  1D03               	skipz
 12494  1773  0008               	return
 12495                           
 12496                           ;LED_B1.c: 154: {
 12497                           ;LED_B1.c: 158: RB5=0;
 12498  1774  128D               	bcf	13,5	;volatile
 12499                           
 12500                           ;LED_B1.c: 160: }
 12501                           ;LED_B1.c: 162: }
 12502  1775  0008               	return
 12503  1776                     l5588:	
 12504                           
 12505                           ;LED_B1.c: 163: else if(command == 10)
 12506  1776  0822               	movf	setLED@command,w
 12507  1777  3A0A               	xorlw	10
 12508  1778  1D03               	skipz
 12509  1779  2F98               	goto	l5604
 12510                           
 12511                           ;LED_B1.c: 164: {
 12512                           ;LED_B1.c: 165: LED->GO=0;
 12513  177A  0021               	movlb	1	; select bank1
 12514  177B  083D               	movf	_LED^(0+128),w
 12515  177C  0086               	movwf	6
 12516  177D  0187               	clrf	7
 12517  177E  1081               	bcf	1,1
 12518                           
 12519                           ;LED_B1.c: 166: LED->Time=0;
 12520  177F  0A3D               	incf	_LED^(0+128),w
 12521  1780  0086               	movwf	6
 12522  1781  0187               	clrf	7
 12523  1782  3000               	movlw	0
 12524  1783  3FC0               	movwi [0]fsr1
 12525  1784  3FC1               	movwi [1]fsr1
 12526                           
 12527                           ;LED_B1.c: 168: if(led == 1)
 12528  1785  0020               	movlb	0	; select bank0
 12529  1786  0823               	movf	setLED@led,w
 12530  1787  3A01               	xorlw	1
 12531  1788  1D03               	skipz
 12532  1789  2F8C               	goto	l5596
 12533                           
 12534                           ;LED_B1.c: 169: {
 12535                           ;LED_B1.c: 173: RA3=1;
 12536  178A  158C               	bsf	12,3	;volatile
 12537                           
 12538                           ;LED_B1.c: 175: }
 12539  178B  0008               	return
 12540  178C                     l5596:	
 12541                           
 12542                           ;LED_B1.c: 178: else if(led == 2)
 12543  178C  0823               	movf	setLED@led,w
 12544  178D  3A02               	xorlw	2
 12545  178E  1D03               	skipz
 12546  178F  2F92               	goto	l5600
 12547                           
 12548                           ;LED_B1.c: 179: {
 12549                           ;LED_B1.c: 183: RC7=1;
 12550  1790  178E               	bsf	14,7	;volatile
 12551                           
 12552                           ;LED_B1.c: 185: }
 12553  1791  0008               	return
 12554  1792                     l5600:	
 12555                           
 12556                           ;LED_B1.c: 198: else if(led == 99)
 12557  1792  0823               	movf	setLED@led,w
 12558  1793  3A63               	xorlw	99
 12559  1794  1D03               	skipz
 12560  1795  0008               	return
 12561                           
 12562                           ;LED_B1.c: 199: {
 12563                           ;LED_B1.c: 203: RB5=1;
 12564  1796  168D               	bsf	13,5	;volatile
 12565                           
 12566                           ;LED_B1.c: 205: }
 12567                           ;LED_B1.c: 207: }
 12568  1797  0008               	return
 12569  1798                     l5604:	
 12570                           
 12571                           ;LED_B1.c: 208: else if(command == 11)
 12572  1798  0822               	movf	setLED@command,w
 12573  1799  3A0B               	xorlw	11
 12574  179A  1D03               	skipz
 12575  179B  0008               	return
 12576                           
 12577                           ;LED_B1.c: 209: {
 12578                           ;LED_B1.c: 210: LED->GO=1;
 12579  179C  0021               	movlb	1	; select bank1
 12580  179D  083D               	movf	_LED^(0+128),w
 12581  179E  0086               	movwf	6
 12582  179F  0187               	clrf	7
 12583  17A0  1481               	bsf	1,1
 12584  17A1  0008               	return
 12585  17A2                     __end_of_setLED:	
 12586                           
 12587                           	psect	text71
 12588  1FDE                     __ptext71:	
 12589 ;; *************** function _LedPointSelect *****************
 12590 ;; Defined at:
 12591 ;;		line 7 in file "../src/LED_B1.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  led             1    wreg     unsigned char 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  led             1    1[BANK0 ] unsigned char 
 12596 ;; Return value:  Size  Location     Type
 12597 ;;		None               void
 12598 ;; Registers used:
 12599 ;;		wreg
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;Total ram usage:        2 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    5
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		_setLED_Initialization
 12616 ;;		_setLED
 12617 ;;		_setLED_Main
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _LedPointSelect
 12623  1FDE                     _LedPointSelect:	
 12624                           
 12625                           ;incstack = 0
 12626                           ; Regs used in _LedPointSelect: [wreg]
 12627                           ;LedPointSelect@led stored from wreg
 12628  1FDE  0020               	movlb	0	; select bank0
 12629  1FDF  00A1               	movwf	LedPointSelect@led
 12630                           
 12631                           ;LED_B1.c: 10: if(led == 1)
 12632  1FE0  0821               	movf	LedPointSelect@led,w
 12633  1FE1  3A01               	xorlw	1
 12634  1FE2  1D03               	skipz
 12635  1FE3  2FEA               	goto	l5390
 12636                           
 12637                           ;LED_B1.c: 11: {
 12638                           ;LED_B1.c: 12: LED=&VarLED1;
 12639  1FE4  30E1               	movlw	_VarLED1& (0+255)
 12640  1FE5  00A0               	movwf	??_LedPointSelect
 12641  1FE6  0820               	movf	??_LedPointSelect,w
 12642  1FE7  0021               	movlb	1	; select bank1
 12643  1FE8  00BD               	movwf	_LED^(0+128)
 12644                           
 12645                           ;LED_B1.c: 13: }
 12646  1FE9  0008               	return
 12647  1FEA                     l5390:	
 12648                           
 12649                           ;LED_B1.c: 16: else if(led == 2)
 12650  1FEA  0020               	movlb	0	; select bank0
 12651  1FEB  0821               	movf	LedPointSelect@led,w
 12652  1FEC  3A02               	xorlw	2
 12653  1FED  1D03               	skipz
 12654  1FEE  2FF5               	goto	l5394
 12655                           
 12656                           ;LED_B1.c: 17: {
 12657                           ;LED_B1.c: 18: LED=&VarLED2;
 12658  1FEF  30E5               	movlw	_VarLED2& (0+255)
 12659  1FF0  00A0               	movwf	??_LedPointSelect
 12660  1FF1  0820               	movf	??_LedPointSelect,w
 12661  1FF2  0021               	movlb	1	; select bank1
 12662  1FF3  00BD               	movwf	_LED^(0+128)
 12663                           
 12664                           ;LED_B1.c: 19: }
 12665  1FF4  0008               	return
 12666  1FF5                     l5394:	
 12667                           
 12668                           ;LED_B1.c: 28: else if(led == 99)
 12669  1FF5  0020               	movlb	0	; select bank0
 12670  1FF6  0821               	movf	LedPointSelect@led,w
 12671  1FF7  3A63               	xorlw	99
 12672  1FF8  1D03               	skipz
 12673  1FF9  0008               	return
 12674                           
 12675                           ;LED_B1.c: 29: {
 12676                           ;LED_B1.c: 30: LED=&VarErrLED;
 12677  1FFA  30DD               	movlw	_VarErrLED& (0+255)
 12678  1FFB  00A0               	movwf	??_LedPointSelect
 12679  1FFC  0820               	movf	??_LedPointSelect,w
 12680  1FFD  0021               	movlb	1	; select bank1
 12681  1FFE  00BD               	movwf	_LED^(0+128)
 12682  1FFF  0008               	return
 12683  2000                     __end_of_LedPointSelect:	
 12684                           
 12685                           	psect	text72
 12686  1DFD                     __ptext72:	
 12687 ;; *************** function _DimmerLights_Close *****************
 12688 ;; Defined at:
 12689 ;;		line 396 in file "../src/Dimmer_B1.c"
 12690 ;; Parameters:    Size  Location     Type
 12691 ;;		None
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;		None
 12694 ;; Return value:  Size  Location     Type
 12695 ;;		None               void
 12696 ;; Registers used:
 12697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12698 ;; Tracked objects:
 12699 ;;		On entry : 0/0
 12700 ;;		On exit  : 0/0
 12701 ;;		Unchanged: 0/0
 12702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12707 ;;Total ram usage:        0 bytes
 12708 ;; Hardware stack levels used:    1
 12709 ;; Hardware stack levels required when called:    6
 12710 ;; This function calls:
 12711 ;;		_getDimmerLights_StatusFlag
 12712 ;;		_setMemory_GO
 12713 ;; This function is called by:
 12714 ;;		_DimmerLights_Main
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           
 12719                           ;psect for function _DimmerLights_Close
 12720  1DFD                     _DimmerLights_Close:	
 12721                           
 12722                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12723                           
 12724                           ;incstack = 0
 12725                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12726  1DFD  0021               	movlb	1	; select bank1
 12727  1DFE  083A               	movf	_Dimmer^(0+128),w
 12728  1DFF  0086               	movwf	6
 12729  1E00  0187               	clrf	7
 12730  1E01  1C01               	btfss	1,0
 12731  1E02  0008               	return
 12732                           
 12733                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12734  1E03  083A               	movf	_Dimmer^(0+128),w
 12735  1E04  0086               	movwf	6
 12736  1E05  0187               	clrf	7
 12737  1E06  1001               	bcf	1,0
 12738                           
 12739                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12740  1E07  319C  2457  319D   	fcall	_getDimmerLights_StatusFlag
 12741  1E0A  3800               	iorlw	0
 12742  1E0B  1D03               	skipz
 12743  1E0C  0008               	return
 12744                           
 12745                           ;Dimmer_B1.c: 400: ;;
 12746                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12747  1E0D  3001               	movlw	1
 12748  1E0E  319F  275D         	fcall	_setMemory_GO
 12749  1E10  0008               	return
 12750  1E11                     __end_of_DimmerLights_Close:	
 12751                           
 12752                           	psect	text73
 12753  1F5D                     __ptext73:	
 12754 ;; *************** function _setMemory_GO *****************
 12755 ;; Defined at:
 12756 ;;		line 882 in file "../src/MCU_B1.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;  command         1    wreg     unsigned char 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  command         1    2[BANK0 ] unsigned char 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;		None               void
 12763 ;; Registers used:
 12764 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;Total ram usage:        3 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    5
 12777 ;; This function calls:
 12778 ;;		Nothing
 12779 ;; This function is called by:
 12780 ;;		_DimmerLights_Close
 12781 ;;		_setDimmerLights
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           
 12786                           ;psect for function _setMemory_GO
 12787  1F5D                     _setMemory_GO:	
 12788                           
 12789                           ;incstack = 0
 12790                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 12791                           ;setMemory_GO@command stored from wreg
 12792  1F5D  0020               	movlb	0	; select bank0
 12793  1F5E  00A2               	movwf	setMemory_GO@command
 12794                           
 12795                           ;MCU_B1.c: 883: Memory->GO = command;
 12796  1F5F  0021               	movlb	1	; select bank1
 12797  1F60  086F               	movf	_Memory^(0+128),w
 12798  1F61  3E24               	addlw	36
 12799  1F62  0086               	movwf	6
 12800  1F63  3001               	movlw	1	; select bank2/3
 12801  1F64  0087               	movwf	7
 12802  1F65  0020               	movlb	0	; select bank0
 12803  1F66  0822               	movf	setMemory_GO@command,w
 12804  1F67  1081               	bcf	1,1
 12805  1F68  1D03               	skipz
 12806  1F69  1481               	bsf	1,1
 12807                           
 12808                           ;MCU_B1.c: 884: if (command == 0) {
 12809  1F6A  08A2               	movf	setMemory_GO@command,f
 12810  1F6B  1D03               	skipz
 12811  1F6C  0008               	return
 12812                           
 12813                           ;MCU_B1.c: 885: Memory->Time = command;
 12814  1F6D  0822               	movf	setMemory_GO@command,w
 12815  1F6E  00A0               	movwf	??_setMemory_GO
 12816  1F6F  01A1               	clrf	??_setMemory_GO+1
 12817  1F70  0021               	movlb	1	; select bank1
 12818  1F71  086F               	movf	_Memory^(0+128),w
 12819  1F72  3E22               	addlw	34
 12820  1F73  0086               	movwf	6
 12821  1F74  3001               	movlw	1	; select bank2/3
 12822  1F75  0087               	movwf	7
 12823  1F76  0020               	movlb	0	; select bank0
 12824  1F77  0820               	movf	??_setMemory_GO,w
 12825  1F78  3FC0               	movwi [0]fsr1
 12826  1F79  0821               	movf	??_setMemory_GO+1,w
 12827  1F7A  3FC1               	movwi [1]fsr1
 12828  1F7B  0008               	return
 12829  1F7C                     __end_of_setMemory_GO:	
 12830                           
 12831                           	psect	text74
 12832  1C57                     __ptext74:	
 12833 ;; *************** function _getDimmerLights_StatusFlag *****************
 12834 ;; Defined at:
 12835 ;;		line 475 in file "../src/Dimmer_B1.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;		None
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  Status          1    0[BANK0 ] unsigned char 
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  1    wreg      unsigned char 
 12842 ;; Registers used:
 12843 ;;		wreg, status,2
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;Total ram usage:        1 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:    5
 12856 ;; This function calls:
 12857 ;;		Nothing
 12858 ;; This function is called by:
 12859 ;;		_DimmerLights_Close
 12860 ;;		_DimmerLights_Exceptions
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           
 12865                           ;psect for function _getDimmerLights_StatusFlag
 12866  1C57                     _getDimmerLights_StatusFlag:	
 12867                           
 12868                           ;Dimmer_B1.c: 476: char Status = 0;
 12869                           
 12870                           ;incstack = 0
 12871                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12872  1C57  0020               	movlb	0	; select bank0
 12873  1C58  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12874                           
 12875                           ;Dimmer_B1.c: 487: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12876  1C59  3000               	movlw	0
 12877  1C5A  0022               	movlb	2	; select bank2
 12878  1C5B  1B34               	btfsc	_DimmerLights1^(0+256),6
 12879  1C5C  3001               	movlw	1
 12880  1C5D  0020               	movlb	0	; select bank0
 12881  1C5E  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12882                           
 12883                           ;Dimmer_B1.c: 490: return Status;
 12884  1C5F  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12885  1C60  0008               	return
 12886  1C61                     __end_of_getDimmerLights_StatusFlag:	
 12887                           
 12888                           	psect	text75
 12889  1CF9                     __ptext75:	
 12890 ;; *************** function _DimmerLights_Initialization *****************
 12891 ;; Defined at:
 12892 ;;		line 334 in file "../src/Dimmer_B1.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;		None
 12895 ;; Auto vars:     Size  Location     Type
 12896 ;;		None
 12897 ;; Return value:  Size  Location     Type
 12898 ;;		None               void
 12899 ;; Registers used:
 12900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:        1 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    7
 12913 ;; This function calls:
 12914 ;;		_Dimmer_Initialization
 12915 ;;		_setDimmerLights_Initialization
 12916 ;; This function is called by:
 12917 ;;		_main
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           
 12922                           ;psect for function _DimmerLights_Initialization
 12923  1CF9                     _DimmerLights_Initialization:	
 12924                           
 12925                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 12926                           
 12927                           ;incstack = 0
 12928                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12929  1CF9  3034               	movlw	_DimmerLights1& (0+255)
 12930  1CFA  0020               	movlb	0	; select bank0
 12931  1CFB  00A4               	movwf	??_DimmerLights_Initialization
 12932  1CFC  0824               	movf	??_DimmerLights_Initialization,w
 12933  1CFD  0021               	movlb	1	; select bank1
 12934  1CFE  00BB               	movwf	_DimmerLights11^(0+128)
 12935                           
 12936                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 12937  1CFF  3001               	movlw	1
 12938  1D00  3188  2000  319C   	fcall	_setDimmerLights_Initialization
 12939                           
 12940                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 12941  1D03  319C  241F         	fcall	_Dimmer_Initialization
 12942  1D05  0008               	return
 12943  1D06                     __end_of_DimmerLights_Initialization:	
 12944                           
 12945                           	psect	text76
 12946  0800                     __ptext76:	
 12947 ;; *************** function _setDimmerLights_Initialization *****************
 12948 ;; Defined at:
 12949 ;;		line 357 in file "../src/Dimmer_B1.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  lights          1    wreg     unsigned char 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;  lights          1    3[BANK0 ] unsigned char 
 12954 ;; Return value:  Size  Location     Type
 12955 ;;		None               void
 12956 ;; Registers used:
 12957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;Total ram usage:        2 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    6
 12970 ;; This function calls:
 12971 ;;		_DimmerLightsPointSelect
 12972 ;; This function is called by:
 12973 ;;		_DimmerLights_Initialization
 12974 ;; This function uses a non-reentrant model
 12975 ;;
 12976                           
 12977                           
 12978                           ;psect for function _setDimmerLights_Initialization
 12979  0800                     _setDimmerLights_Initialization:	
 12980                           
 12981                           ;incstack = 0
 12982                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12983                           ;setDimmerLights_Initialization@lights stored from wreg
 12984  0800  0020               	movlb	0	; select bank0
 12985  0801  00A3               	movwf	setDimmerLights_Initialization@lights
 12986                           
 12987                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 12988  0802  0823               	movf	setDimmerLights_Initialization@lights,w
 12989  0803  319C  2482         	fcall	_DimmerLightsPointSelect
 12990                           
 12991                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 12992  0805  0878               	movf	_DimmerLights,w
 12993  0806  3E09               	addlw	9
 12994  0807  0086               	movwf	6
 12995  0808  3001               	movlw	1	; select bank2/3
 12996  0809  0087               	movwf	7
 12997  080A  1501               	bsf	1,2
 12998                           
 12999                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13000  080B  3020               	movlw	32
 13001  080C  0020               	movlb	0	; select bank0
 13002  080D  00A2               	movwf	??_setDimmerLights_Initialization
 13003  080E  0878               	movf	_DimmerLights,w
 13004  080F  3E05               	addlw	5
 13005  0810  0086               	movwf	6
 13006  0811  3001               	movlw	1	; select bank2/3
 13007  0812  0087               	movwf	7
 13008  0813  0822               	movf	??_setDimmerLights_Initialization,w
 13009  0814  0081               	movwf	1
 13010                           
 13011                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13012  0815  303C               	movlw	60
 13013  0816  00A2               	movwf	??_setDimmerLights_Initialization
 13014  0817  0878               	movf	_DimmerLights,w
 13015  0818  3E06               	addlw	6
 13016  0819  0086               	movwf	6
 13017  081A  3001               	movlw	1	; select bank2/3
 13018  081B  0087               	movwf	7
 13019  081C  0822               	movf	??_setDimmerLights_Initialization,w
 13020  081D  0081               	movwf	1
 13021                           
 13022                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13023  081E  0878               	movf	_DimmerLights,w
 13024  081F  3E06               	addlw	6
 13025  0820  0086               	movwf	6
 13026  0821  3001               	movlw	1	; select bank2/3
 13027  0822  0087               	movwf	7
 13028  0823  0801               	movf	1,w
 13029  0824  00A2               	movwf	??_setDimmerLights_Initialization
 13030  0825  0878               	movf	_DimmerLights,w
 13031  0826  3E04               	addlw	4
 13032  0827  0086               	movwf	6
 13033  0828  3001               	movlw	1	; select bank2/3
 13034  0829  0087               	movwf	7
 13035  082A  0822               	movf	??_setDimmerLights_Initialization,w
 13036  082B  0081               	movwf	1
 13037  082C  0008               	return
 13038  082D                     __end_of_setDimmerLights_Initialization:	
 13039                           
 13040                           	psect	text77
 13041  1C1F                     __ptext77:	
 13042 ;; *************** function _Dimmer_Initialization *****************
 13043 ;; Defined at:
 13044 ;;		line 786 in file "../src/Dimmer_B1.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;		None
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;		None
 13049 ;; Return value:  Size  Location     Type
 13050 ;;		None               void
 13051 ;; Registers used:
 13052 ;;		wreg
 13053 ;; Tracked objects:
 13054 ;;		On entry : 0/0
 13055 ;;		On exit  : 0/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;Total ram usage:        1 bytes
 13063 ;; Hardware stack levels used:    1
 13064 ;; Hardware stack levels required when called:    5
 13065 ;; This function calls:
 13066 ;;		Nothing
 13067 ;; This function is called by:
 13068 ;;		_DimmerLights_Initialization
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           
 13073                           ;psect for function _Dimmer_Initialization
 13074  1C1F                     _Dimmer_Initialization:	
 13075                           
 13076                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13077                           
 13078                           ;incstack = 0
 13079                           ; Regs used in _Dimmer_Initialization: [wreg]
 13080  1C1F  30E9               	movlw	_Dimmer1& (0+255)
 13081  1C20  0020               	movlb	0	; select bank0
 13082  1C21  00A0               	movwf	??_Dimmer_Initialization
 13083  1C22  0820               	movf	??_Dimmer_Initialization,w
 13084  1C23  0021               	movlb	1	; select bank1
 13085  1C24  00BA               	movwf	_Dimmer^(0+128)
 13086  1C25  0008               	return
 13087  1C26                     __end_of_Dimmer_Initialization:	
 13088                           
 13089                           	psect	text78
 13090  1BF3                     __ptext78:	
 13091 ;; *************** function _DelayOff_Main *****************
 13092 ;; Defined at:
 13093 ;;		line 41 in file "../src/DelayOff_B1.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;		None
 13098 ;; Return value:  Size  Location     Type
 13099 ;;		None               void
 13100 ;; Registers used:
 13101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;Total ram usage:        0 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:   10
 13114 ;; This function calls:
 13115 ;;		_DlyOff_Main
 13116 ;; This function is called by:
 13117 ;;		_main
 13118 ;; This function uses a non-reentrant model
 13119 ;;
 13120                           
 13121                           
 13122                           ;psect for function _DelayOff_Main
 13123  1BF3                     _DelayOff_Main:	
 13124                           
 13125                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13126                           
 13127                           ;incstack = 0
 13128                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13129  1BF3  3001               	movlw	1
 13130  1BF4  318A  22BB         	fcall	_DlyOff_Main
 13131  1BF6  0008               	return
 13132  1BF7                     __end_of_DelayOff_Main:	
 13133                           
 13134                           	psect	text79
 13135  0ABB                     __ptext79:	
 13136 ;; *************** function _DlyOff_Main *****************
 13137 ;; Defined at:
 13138 ;;		line 62 in file "../src/DelayOff_B1.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;  sw              1    wreg     unsigned char 
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;  sw              1   68[BANK0 ] unsigned char 
 13143 ;; Return value:  Size  Location     Type
 13144 ;;		None               void
 13145 ;; Registers used:
 13146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13147 ;; Tracked objects:
 13148 ;;		On entry : 0/0
 13149 ;;		On exit  : 0/0
 13150 ;;		Unchanged: 0/0
 13151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;Total ram usage:        3 bytes
 13157 ;; Hardware stack levels used:    1
 13158 ;; Hardware stack levels required when called:    9
 13159 ;; This function calls:
 13160 ;;		_DelayOffPointSelect
 13161 ;;		_setBuz
 13162 ;;		_setDimmerLights_Switch
 13163 ;;		_setDimmerLights_Trigger
 13164 ;;		_setRFSW_Status
 13165 ;;		_setRF_DimmerLights
 13166 ;;		_setSw_Status
 13167 ;;		_setTxData
 13168 ;; This function is called by:
 13169 ;;		_DelayOff_Main
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _DlyOff_Main
 13175  0ABB                     _DlyOff_Main:	
 13176                           
 13177                           ;incstack = 0
 13178                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13179                           ;DlyOff_Main@sw stored from wreg
 13180  0ABB  0020               	movlb	0	; select bank0
 13181  0ABC  00E4               	movwf	DlyOff_Main@sw
 13182                           
 13183                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13184  0ABD  0864               	movf	DlyOff_Main@sw,w
 13185  0ABE  319C  24B0  318A   	fcall	_DelayOffPointSelect
 13186                           
 13187                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 13188  0AC1  0021               	movlb	1	; select bank1
 13189  0AC2  0839               	movf	_DelayOff^(0+128),w
 13190  0AC3  0086               	movwf	6
 13191  0AC4  0187               	clrf	7
 13192  0AC5  1C81               	btfss	1,1
 13193  0AC6  0008               	return
 13194                           
 13195                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13196  0AC7  0839               	movf	_DelayOff^(0+128),w
 13197  0AC8  3E02               	addlw	2
 13198  0AC9  0086               	movwf	6
 13199  0ACA  0187               	clrf	7
 13200  0ACB  3001               	movlw	1
 13201  0ACC  0781               	addwf	1,f
 13202  0ACD  3141               	addfsr 1,1
 13203  0ACE  1803               	skipnc
 13204  0ACF  0A81               	incf	1,f
 13205                           
 13206                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13207  0AD0  0839               	movf	_DelayOff^(0+128),w
 13208  0AD1  3E02               	addlw	2
 13209  0AD2  0086               	movwf	6
 13210  0AD3  0187               	clrf	7
 13211  0AD4  3F40               	moviw [0]fsr1
 13212  0AD5  0020               	movlb	0	; select bank0
 13213  0AD6  00E2               	movwf	??_DlyOff_Main
 13214  0AD7  3F41               	moviw [1]fsr1
 13215  0AD8  00E3               	movwf	??_DlyOff_Main+1
 13216  0AD9  3015               	movlw	21
 13217  0ADA  0263               	subwf	??_DlyOff_Main+1,w
 13218  0ADB  30E0               	movlw	224
 13219  0ADC  1903               	skipnz
 13220  0ADD  0262               	subwf	??_DlyOff_Main,w
 13221  0ADE  1C03               	skipc
 13222  0ADF  0008               	return
 13223                           
 13224                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13225  0AE0  0021               	movlb	1	; select bank1
 13226  0AE1  0839               	movf	_DelayOff^(0+128),w
 13227  0AE2  3E02               	addlw	2
 13228  0AE3  0086               	movwf	6
 13229  0AE4  0187               	clrf	7
 13230  0AE5  3000               	movlw	0
 13231  0AE6  3FC0               	movwi [0]fsr1
 13232  0AE7  3FC1               	movwi [1]fsr1
 13233                           
 13234                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13235  0AE8  3001               	movlw	1
 13236  0AE9  0020               	movlb	0	; select bank0
 13237  0AEA  00E2               	movwf	??_DlyOff_Main
 13238  0AEB  0021               	movlb	1	; select bank1
 13239  0AEC  0839               	movf	_DelayOff^(0+128),w
 13240  0AED  3E04               	addlw	4
 13241  0AEE  0086               	movwf	6
 13242  0AEF  0187               	clrf	7
 13243  0AF0  0020               	movlb	0	; select bank0
 13244  0AF1  0862               	movf	??_DlyOff_Main,w
 13245  0AF2  0781               	addwf	1,f
 13246                           
 13247                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13248  0AF3  0021               	movlb	1	; select bank1
 13249  0AF4  0839               	movf	_DelayOff^(0+128),w
 13250  0AF5  3E04               	addlw	4
 13251  0AF6  0086               	movwf	6
 13252  0AF7  0187               	clrf	7
 13253  0AF8  0A39               	incf	_DelayOff^(0+128),w
 13254  0AF9  0084               	movwf	4
 13255  0AFA  0185               	clrf	5
 13256  0AFB  0800               	movf	0,w
 13257  0AFC  0201               	subwf	1,w
 13258  0AFD  1C03               	skipc
 13259  0AFE  0008               	return
 13260                           
 13261                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13262  0AFF  0839               	movf	_DelayOff^(0+128),w
 13263  0B00  3E04               	addlw	4
 13264  0B01  0086               	movwf	6
 13265  0B02  0187               	clrf	7
 13266  0B03  0181               	clrf	1
 13267                           
 13268                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13269  0B04  0839               	movf	_DelayOff^(0+128),w
 13270  0B05  0086               	movwf	6
 13271  0B06  0187               	clrf	7
 13272  0B07  1081               	bcf	1,1
 13273                           
 13274                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 13275  0B08  0020               	movlb	0	; select bank0
 13276  0B09  01A2               	clrf	setSw_Status@command
 13277  0B0A  0864               	movf	DlyOff_Main@sw,w
 13278  0B0B  319D  254B  318A   	fcall	_setSw_Status
 13279                           
 13280                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 13281  0B0E  0020               	movlb	0	; select bank0
 13282  0B0F  01A2               	clrf	setRFSW_Status@command
 13283  0B10  0864               	movf	DlyOff_Main@sw,w
 13284  0B11  319D  253C  318A   	fcall	_setRFSW_Status
 13285                           
 13286                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 13287  0B14  0020               	movlb	0	; select bank0
 13288  0B15  01DD               	clrf	setRF_DimmerLights@on
 13289  0B16  0864               	movf	DlyOff_Main@sw,w
 13290  0B17  3188  208E  318A   	fcall	_setRF_DimmerLights
 13291                           
 13292                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 13293  0B1A  0020               	movlb	0	; select bank0
 13294  0B1B  01A2               	clrf	setDimmerLights_Trigger@command
 13295  0B1C  0AA2               	incf	setDimmerLights_Trigger@command,f
 13296  0B1D  0864               	movf	DlyOff_Main@sw,w
 13297  0B1E  319D  2589  318A   	fcall	_setDimmerLights_Trigger
 13298                           
 13299                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 13300  0B21  0020               	movlb	0	; select bank0
 13301  0B22  01A2               	clrf	setDimmerLights_Switch@command
 13302  0B23  0864               	movf	DlyOff_Main@sw,w
 13303  0B24  319D  2579  318A   	fcall	_setDimmerLights_Switch
 13304                           
 13305                           ;DelayOff_B1.c: 77: setTxData(1);
 13306  0B27  3001               	movlw	1
 13307  0B28  318D  2554  318A   	fcall	_setTxData
 13308                           
 13309                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 13310  0B2B  3064               	movlw	100
 13311  0B2C  0020               	movlb	0	; select bank0
 13312  0B2D  00A9               	movwf	setBuz@time
 13313  0B2E  3000               	movlw	0
 13314  0B2F  00AA               	movwf	setBuz@time+1
 13315  0B30  3001               	movlw	1
 13316  0B31  318C  243C         	fcall	_setBuz
 13317  0B33  0008               	return
 13318  0B34                     __end_of_DlyOff_Main:	
 13319                           
 13320                           	psect	text80
 13321  0D54                     __ptext80:	
 13322 ;; *************** function _setTxData *****************
 13323 ;; Defined at:
 13324 ;;		line 161 in file "../src/RF_Control_B1.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;  rf              1    wreg     unsigned char 
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;  rf              1    3[BANK0 ] unsigned char 
 13329 ;;  i               1    0        unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;		None               void
 13332 ;; Registers used:
 13333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;Total ram usage:        2 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:    6
 13346 ;; This function calls:
 13347 ;;		_RfPointSelect
 13348 ;; This function is called by:
 13349 ;;		_DlyOff_Main
 13350 ;;		_setDimmerLights_Adj
 13351 ;;		_setControl_Lights_Table
 13352 ;;		_setRFSW_Control
 13353 ;;		_setRFSW_AdjControl
 13354 ;;		_Sw_DimmerOnFunc
 13355 ;;		_Sw_DimmerOffFunc
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           
 13360                           ;psect for function _setTxData
 13361  0D54                     _setTxData:	
 13362                           
 13363                           ;incstack = 0
 13364                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13365                           ;setTxData@rf stored from wreg
 13366  0D54  0020               	movlb	0	; select bank0
 13367  0D55  00A3               	movwf	setTxData@rf
 13368                           
 13369                           ;RF_Control_B1.c: 162: char i;
 13370                           ;RF_Control_B1.c: 163: RfPointSelect(rf);
 13371  0D56  0823               	movf	setTxData@rf,w
 13372  0D57  319D  2520  318D   	fcall	_RfPointSelect
 13373                           
 13374                           ;RF_Control_B1.c: 164: if (RF->Enable == 1) {
 13375  0D5A  087A               	movf	_RF,w
 13376  0D5B  0086               	movwf	6
 13377  0D5C  0187               	clrf	7
 13378  0D5D  1C01               	btfss	1,0
 13379  0D5E  0008               	return
 13380                           
 13381                           ;RF_Control_B1.c: 166: RF->TransceiveGO = 1;
 13382  0D5F  087A               	movf	_RF,w
 13383  0D60  0086               	movwf	6
 13384  0D61  0187               	clrf	7
 13385  0D62  1501               	bsf	1,2
 13386                           
 13387                           ;RF_Control_B1.c: 176: RF_Data[0] = 0x63;
 13388  0D63  3063               	movlw	99
 13389  0D64  0020               	movlb	0	; select bank0
 13390  0D65  00A2               	movwf	??_setTxData
 13391  0D66  0822               	movf	??_setTxData,w
 13392  0D67  0021               	movlb	1	; select bank1
 13393  0D68  00A0               	movwf	_RF_Data^(0+128)
 13394                           
 13395                           ;RF_Control_B1.c: 177: RF_Data[1] = 0x02;
 13396  0D69  3002               	movlw	2
 13397  0D6A  0020               	movlb	0	; select bank0
 13398  0D6B  00A2               	movwf	??_setTxData
 13399  0D6C  0822               	movf	??_setTxData,w
 13400  0D6D  0021               	movlb	1	; select bank1
 13401  0D6E  00A1               	movwf	(_RF_Data^(0+128)+1)
 13402                           
 13403                           ;RF_Control_B1.c: 178: RF_Data[2] = product->Data[2];
 13404  0D6F  087D               	movf	_product,w
 13405  0D70  0086               	movwf	6
 13406  0D71  3001               	movlw	1	; select bank2/3
 13407  0D72  0087               	movwf	7
 13408  0D73  3001               	movlw	1	; select bank2/3
 13409  0D74  3F42               	moviw [2]fsr1
 13410  0D75  00A2               	movwf	(_RF_Data^(0+128)+2)
 13411                           
 13412                           ;RF_Control_B1.c: 179: RF_Data[3] = product->Data[3];
 13413  0D76  087D               	movf	_product,w
 13414  0D77  0086               	movwf	6
 13415  0D78  3001               	movlw	1	; select bank2/3
 13416  0D79  0087               	movwf	7
 13417  0D7A  3001               	movlw	1	; select bank2/3
 13418  0D7B  3F43               	moviw [3]fsr1
 13419  0D7C  00A3               	movwf	(_RF_Data^(0+128)+3)
 13420                           
 13421                           ;RF_Control_B1.c: 180: RF_Data[4] = product->Data[4];
 13422  0D7D  087D               	movf	_product,w
 13423  0D7E  0086               	movwf	6
 13424  0D7F  3001               	movlw	1	; select bank2/3
 13425  0D80  0087               	movwf	7
 13426  0D81  3001               	movlw	1	; select bank2/3
 13427  0D82  3F44               	moviw [4]fsr1
 13428  0D83  00A4               	movwf	(_RF_Data^(0+128)+4)
 13429                           
 13430                           ;RF_Control_B1.c: 181: RF_Data[5] = product->Data[5];
 13431  0D84  087D               	movf	_product,w
 13432  0D85  0086               	movwf	6
 13433  0D86  3001               	movlw	1	; select bank2/3
 13434  0D87  0087               	movwf	7
 13435  0D88  3001               	movlw	1	; select bank2/3
 13436  0D89  3F45               	moviw [5]fsr1
 13437  0D8A  00A5               	movwf	(_RF_Data^(0+128)+5)
 13438                           
 13439                           ;RF_Control_B1.c: 182: RF_Data[6] = product->Data[6];
 13440  0D8B  087D               	movf	_product,w
 13441  0D8C  0086               	movwf	6
 13442  0D8D  3001               	movlw	1	; select bank2/3
 13443  0D8E  0087               	movwf	7
 13444  0D8F  3001               	movlw	1	; select bank2/3
 13445  0D90  3F46               	moviw [6]fsr1
 13446  0D91  00A6               	movwf	(_RF_Data^(0+128)+6)
 13447                           
 13448                           ;RF_Control_B1.c: 183: RF_Data[7] = product->Data[7];
 13449  0D92  087D               	movf	_product,w
 13450  0D93  0086               	movwf	6
 13451  0D94  3001               	movlw	1	; select bank2/3
 13452  0D95  0087               	movwf	7
 13453  0D96  3001               	movlw	1	; select bank2/3
 13454  0D97  3F47               	moviw [7]fsr1
 13455  0D98  00A7               	movwf	(_RF_Data^(0+128)+7)
 13456                           
 13457                           ;RF_Control_B1.c: 184: RF_Data[8] = product->Data[8];
 13458  0D99  087D               	movf	_product,w
 13459  0D9A  0086               	movwf	6
 13460  0D9B  3001               	movlw	1	; select bank2/3
 13461  0D9C  0087               	movwf	7
 13462  0D9D  3001               	movlw	1	; select bank2/3
 13463  0D9E  3F48               	moviw [8]fsr1
 13464  0D9F  00A8               	movwf	(_RF_Data^(0+128)+8)
 13465                           
 13466                           ;RF_Control_B1.c: 185: RF_Data[9] = product->Data[9];
 13467  0DA0  087D               	movf	_product,w
 13468  0DA1  0086               	movwf	6
 13469  0DA2  3001               	movlw	1	; select bank2/3
 13470  0DA3  0087               	movwf	7
 13471  0DA4  3001               	movlw	1	; select bank2/3
 13472  0DA5  3F49               	moviw [9]fsr1
 13473  0DA6  00A9               	movwf	(_RF_Data^(0+128)+9)
 13474                           
 13475                           ;RF_Control_B1.c: 186: RF_Data[10] = product->Data[10];
 13476  0DA7  087D               	movf	_product,w
 13477  0DA8  0086               	movwf	6
 13478  0DA9  3001               	movlw	1	; select bank2/3
 13479  0DAA  0087               	movwf	7
 13480  0DAB  3001               	movlw	1	; select bank2/3
 13481  0DAC  3F4A               	moviw [10]fsr1
 13482  0DAD  00AA               	movwf	(_RF_Data^(0+128)+10)
 13483                           
 13484                           ;RF_Control_B1.c: 187: RF_Data[11] = product->Data[11];
 13485  0DAE  087D               	movf	_product,w
 13486  0DAF  0086               	movwf	6
 13487  0DB0  3001               	movlw	1	; select bank2/3
 13488  0DB1  0087               	movwf	7
 13489  0DB2  3001               	movlw	1	; select bank2/3
 13490  0DB3  3F4B               	moviw [11]fsr1
 13491  0DB4  00AB               	movwf	(_RF_Data^(0+128)+11)
 13492                           
 13493                           ;RF_Control_B1.c: 188: RF_Data[12] = product->Data[12];
 13494  0DB5  087D               	movf	_product,w
 13495  0DB6  0086               	movwf	6
 13496  0DB7  3001               	movlw	1	; select bank2/3
 13497  0DB8  0087               	movwf	7
 13498  0DB9  3001               	movlw	1	; select bank2/3
 13499  0DBA  3F4C               	moviw [12]fsr1
 13500  0DBB  00AC               	movwf	(_RF_Data^(0+128)+12)
 13501                           
 13502                           ;RF_Control_B1.c: 189: RF_Data[13] = product->Data[13];
 13503  0DBC  087D               	movf	_product,w
 13504  0DBD  0086               	movwf	6
 13505  0DBE  3001               	movlw	1	; select bank2/3
 13506  0DBF  0087               	movwf	7
 13507  0DC0  3001               	movlw	1	; select bank2/3
 13508  0DC1  3F4D               	moviw [13]fsr1
 13509  0DC2  00AD               	movwf	(_RF_Data^(0+128)+13)
 13510                           
 13511                           ;RF_Control_B1.c: 190: RF_Data[14] = product->Data[14];
 13512  0DC3  087D               	movf	_product,w
 13513  0DC4  0086               	movwf	6
 13514  0DC5  3001               	movlw	1	; select bank2/3
 13515  0DC6  0087               	movwf	7
 13516  0DC7  3001               	movlw	1	; select bank2/3
 13517  0DC8  3F4E               	moviw [14]fsr1
 13518  0DC9  00AE               	movwf	(_RF_Data^(0+128)+14)
 13519                           
 13520                           ;RF_Control_B1.c: 191: RF_Data[15] = product->Data[15];
 13521  0DCA  087D               	movf	_product,w
 13522  0DCB  0086               	movwf	6
 13523  0DCC  3001               	movlw	1	; select bank2/3
 13524  0DCD  0087               	movwf	7
 13525  0DCE  3001               	movlw	1	; select bank2/3
 13526  0DCF  3F4F               	moviw [15]fsr1
 13527  0DD0  00AF               	movwf	(_RF_Data^(0+128)+15)
 13528                           
 13529                           ;RF_Control_B1.c: 192: RF_Data[16] = product->Data[16];
 13530  0DD1  087D               	movf	_product,w
 13531  0DD2  0086               	movwf	6
 13532  0DD3  3001               	movlw	1	; select bank2/3
 13533  0DD4  0087               	movwf	7
 13534  0DD5  3001               	movlw	1	; select bank2/3
 13535  0DD6  3F50               	moviw [16]fsr1
 13536  0DD7  00B0               	movwf	(_RF_Data^(0+128)+16)
 13537                           
 13538                           ;RF_Control_B1.c: 193: RF_Data[17] = product->Data[17];
 13539  0DD8  087D               	movf	_product,w
 13540  0DD9  0086               	movwf	6
 13541  0DDA  3001               	movlw	1	; select bank2/3
 13542  0DDB  0087               	movwf	7
 13543  0DDC  3001               	movlw	1	; select bank2/3
 13544  0DDD  3F51               	moviw [17]fsr1
 13545  0DDE  00B1               	movwf	(_RF_Data^(0+128)+17)
 13546                           
 13547                           ;RF_Control_B1.c: 194: RF_Data[18] = product->Data[18];
 13548  0DDF  087D               	movf	_product,w
 13549  0DE0  0086               	movwf	6
 13550  0DE1  3001               	movlw	1	; select bank2/3
 13551  0DE2  0087               	movwf	7
 13552  0DE3  3001               	movlw	1	; select bank2/3
 13553  0DE4  3F52               	moviw [18]fsr1
 13554  0DE5  00B2               	movwf	(_RF_Data^(0+128)+18)
 13555                           
 13556                           ;RF_Control_B1.c: 195: RF_Data[19] = product->Data[19];
 13557  0DE6  087D               	movf	_product,w
 13558  0DE7  0086               	movwf	6
 13559  0DE8  3001               	movlw	1	; select bank2/3
 13560  0DE9  0087               	movwf	7
 13561  0DEA  3001               	movlw	1	; select bank2/3
 13562  0DEB  3F53               	moviw [19]fsr1
 13563  0DEC  00B3               	movwf	(_RF_Data^(0+128)+19)
 13564                           
 13565                           ;RF_Control_B1.c: 196: RF_Data[20] = 209;
 13566  0DED  30D1               	movlw	209
 13567  0DEE  0020               	movlb	0	; select bank0
 13568  0DEF  00A2               	movwf	??_setTxData
 13569  0DF0  0822               	movf	??_setTxData,w
 13570  0DF1  0021               	movlb	1	; select bank1
 13571  0DF2  00B4               	movwf	(_RF_Data^(0+128)+20)
 13572  0DF3  0008               	return
 13573  0DF4                     __end_of_setTxData:	
 13574                           
 13575                           	psect	text81
 13576  1D20                     __ptext81:	
 13577 ;; *************** function _RfPointSelect *****************
 13578 ;; Defined at:
 13579 ;;		line 7 in file "../src/RF_Control_B1.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;  rf              1    wreg     unsigned char 
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;  rf              1    1[BANK0 ] unsigned char 
 13584 ;; Return value:  Size  Location     Type
 13585 ;;		None               void
 13586 ;; Registers used:
 13587 ;;		wreg
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:        2 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    5
 13600 ;; This function calls:
 13601 ;;		Nothing
 13602 ;; This function is called by:
 13603 ;;		_setRF_Learn
 13604 ;;		_setRF_Main
 13605 ;;		_setTxData
 13606 ;;		_setRF_Enable
 13607 ;;		_RF_RxDisable
 13608 ;;		_getRxData
 13609 ;;		_setLog_Code
 13610 ;;		_setControl_Lights_Table
 13611 ;;		_setRF_RxStatus
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           
 13616                           ;psect for function _RfPointSelect
 13617  1D20                     _RfPointSelect:	
 13618                           
 13619                           ;incstack = 0
 13620                           ; Regs used in _RfPointSelect: [wreg]
 13621                           ;RfPointSelect@rf stored from wreg
 13622  1D20  0020               	movlb	0	; select bank0
 13623  1D21  00A1               	movwf	RfPointSelect@rf
 13624                           
 13625                           ;RF_Control_B1.c: 9: if (rf == 1) {
 13626  1D22  0821               	movf	RfPointSelect@rf,w
 13627  1D23  3A01               	xorlw	1
 13628  1D24  1D03               	skipz
 13629  1D25  2D2A               	goto	l5402
 13630                           
 13631                           ;RF_Control_B1.c: 10: RF = &RF1;
 13632  1D26  30D8               	movlw	_RF1& (0+255)
 13633  1D27  00A0               	movwf	??_RfPointSelect
 13634  1D28  0820               	movf	??_RfPointSelect,w
 13635  1D29  00FA               	movwf	_RF
 13636  1D2A                     l5402:	
 13637                           
 13638                           ;RF_Control_B1.c: 11: }
 13639                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 13640  1D2A  1A0B               	btfsc	11,4	;volatile
 13641  1D2B  0008               	return
 13642                           
 13643                           ;RF_Control_B1.c: 13: INTE = 1;
 13644  1D2C  160B               	bsf	11,4	;volatile
 13645  1D2D  0008               	return
 13646  1D2E                     __end_of_RfPointSelect:	
 13647                           
 13648                           	psect	text82
 13649  1D4B                     __ptext82:	
 13650 ;; *************** function _setSw_Status *****************
 13651 ;; Defined at:
 13652 ;;		line 105 in file "../src/Switch_B1.c"
 13653 ;; Parameters:    Size  Location     Type
 13654 ;;  sw              1    wreg     unsigned char 
 13655 ;;  command         1    2[BANK0 ] unsigned char 
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;  sw              1    3[BANK0 ] unsigned char 
 13658 ;; Return value:  Size  Location     Type
 13659 ;;		None               void
 13660 ;; Registers used:
 13661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13662 ;; Tracked objects:
 13663 ;;		On entry : 0/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13667 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;Total ram usage:        2 bytes
 13672 ;; Hardware stack levels used:    1
 13673 ;; Hardware stack levels required when called:    6
 13674 ;; This function calls:
 13675 ;;		_SwPointSelect
 13676 ;; This function is called by:
 13677 ;;		_DlyOff_Main
 13678 ;;		_setDimmerLights_ERROR
 13679 ;;		_setControl_Lights_Table
 13680 ;;		_setRFSW_Control
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _setSw_Status
 13686  1D4B                     _setSw_Status:	
 13687                           
 13688                           ;incstack = 0
 13689                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13690                           ;setSw_Status@sw stored from wreg
 13691  1D4B  0020               	movlb	0	; select bank0
 13692  1D4C  00A3               	movwf	setSw_Status@sw
 13693                           
 13694                           ;Switch_B1.c: 106: SwPointSelect(sw);
 13695  1D4D  0823               	movf	setSw_Status@sw,w
 13696  1D4E  319C  248D         	fcall	_SwPointSelect
 13697                           
 13698                           ;Switch_B1.c: 107: Sw->Status = command;
 13699  1D50  087B               	movf	_Sw,w
 13700  1D51  0086               	movwf	6
 13701  1D52  3001               	movlw	1	; select bank2/3
 13702  1D53  0087               	movwf	7
 13703  1D54  0020               	movlb	0	; select bank0
 13704  1D55  0822               	movf	setSw_Status@command,w
 13705  1D56  1301               	bcf	1,6
 13706  1D57  1D03               	skipz
 13707  1D58  1701               	bsf	1,6
 13708  1D59  0008               	return
 13709  1D5A                     __end_of_setSw_Status:	
 13710                           
 13711                           	psect	text83
 13712  1C8D                     __ptext83:	
 13713 ;; *************** function _SwPointSelect *****************
 13714 ;; Defined at:
 13715 ;;		line 17 in file "../src/Switch_B1.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;  sw              1    wreg     unsigned char 
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;  sw              1    1[BANK0 ] unsigned char 
 13720 ;; Return value:  Size  Location     Type
 13721 ;;		None               void
 13722 ;; Registers used:
 13723 ;;		wreg
 13724 ;; Tracked objects:
 13725 ;;		On entry : 0/0
 13726 ;;		On exit  : 0/0
 13727 ;;		Unchanged: 0/0
 13728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;Total ram usage:        2 bytes
 13734 ;; Hardware stack levels used:    1
 13735 ;; Hardware stack levels required when called:    5
 13736 ;; This function calls:
 13737 ;;		Nothing
 13738 ;; This function is called by:
 13739 ;;		_setSw_Enable
 13740 ;;		_setSw_Status
 13741 ;;		_setSw_Main
 13742 ;;		_Sw_Detect
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           
 13747                           ;psect for function _SwPointSelect
 13748  1C8D                     _SwPointSelect:	
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _SwPointSelect: [wreg]
 13752                           ;SwPointSelect@sw stored from wreg
 13753  1C8D  0020               	movlb	0	; select bank0
 13754  1C8E  00A1               	movwf	SwPointSelect@sw
 13755                           
 13756                           ;Switch_B1.c: 20: if (sw == 1) {
 13757  1C8F  0821               	movf	SwPointSelect@sw,w
 13758  1C90  3A01               	xorlw	1
 13759  1C91  1D03               	skipz
 13760  1C92  0008               	return
 13761                           
 13762                           ;Switch_B1.c: 21: Sw = &Sw1;
 13763  1C93  3043               	movlw	_Sw1& (0+255)
 13764  1C94  00A0               	movwf	??_SwPointSelect
 13765  1C95  0820               	movf	??_SwPointSelect,w
 13766  1C96  00FB               	movwf	_Sw
 13767  1C97  0008               	return
 13768  1C98                     __end_of_SwPointSelect:	
 13769                           
 13770                           	psect	text84
 13771  088E                     __ptext84:	
 13772 ;; *************** function _setRF_DimmerLights *****************
 13773 ;; Defined at:
 13774 ;;		line 423 in file "../src/RF_Control_B1.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  lights          1    wreg     unsigned char 
 13777 ;;  on              1   61[BANK0 ] unsigned char 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  lights          1   65[BANK0 ] unsigned char 
 13780 ;;  status          1   64[BANK0 ] unsigned char 
 13781 ;; Return value:  Size  Location     Type
 13782 ;;		None               void
 13783 ;; Registers used:
 13784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;Total ram usage:        5 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    8
 13797 ;; This function calls:
 13798 ;;		_setPercentValue
 13799 ;; This function is called by:
 13800 ;;		_DlyOff_Main
 13801 ;;		_setDimmerLights_Adj
 13802 ;;		_setRFSW_Control
 13803 ;;		_Sw_DimmerOnFunc
 13804 ;;		_Sw_DimmerOffFunc
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           
 13809                           ;psect for function _setRF_DimmerLights
 13810  088E                     _setRF_DimmerLights:	
 13811                           
 13812                           ;incstack = 0
 13813                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13814                           ;setRF_DimmerLights@lights stored from wreg
 13815  088E  0020               	movlb	0	; select bank0
 13816  088F  00E1               	movwf	setRF_DimmerLights@lights
 13817                           
 13818                           ;RF_Control_B1.c: 424: char status;
 13819                           ;RF_Control_B1.c: 425: status = 1;
 13820  0890  01E0               	clrf	setRF_DimmerLights@status
 13821  0891  0AE0               	incf	setRF_DimmerLights@status,f
 13822                           
 13823                           ;RF_Control_B1.c: 426: status <<= (lights - 1);
 13824  0892  0861               	movf	setRF_DimmerLights@lights,w
 13825  0893  3EFF               	addlw	-1
 13826  0894  0A89               	incf	9,f
 13827  0895  2898               	goto	u4100
 13828  0896                     u4105:	
 13829  0896  1003               	clrc
 13830  0897  0DE0               	rlf	setRF_DimmerLights@status,f
 13831  0898                     u4100:	
 13832  0898  3EFF               	addlw	-1
 13833  0899  1D03               	skipz
 13834  089A  2896               	goto	u4105
 13835                           
 13836                           ;RF_Control_B1.c: 427: product->Data[11]=lights;
 13837  089B  0861               	movf	setRF_DimmerLights@lights,w
 13838  089C  00DE               	movwf	??_setRF_DimmerLights
 13839  089D  087D               	movf	_product,w
 13840  089E  3E0B               	addlw	11
 13841  089F  0086               	movwf	6
 13842  08A0  3001               	movlw	1	; select bank2/3
 13843  08A1  0087               	movwf	7
 13844  08A2  085E               	movf	??_setRF_DimmerLights,w
 13845  08A3  0081               	movwf	1
 13846                           
 13847                           ;RF_Control_B1.c: 430: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13848  08A4  3020               	movlw	32
 13849  08A5  3193  23B6  3188   	fcall	_setPercentValue
 13850  08A8  0020               	movlb	0	; select bank0
 13851  08A9  00DE               	movwf	??_setRF_DimmerLights
 13852  08AA  0861               	movf	setRF_DimmerLights@lights,w
 13853  08AB  3E14               	addlw	20
 13854  08AC  077D               	addwf	_product,w
 13855  08AD  00DF               	movwf	??_setRF_DimmerLights+1
 13856  08AE  085F               	movf	??_setRF_DimmerLights+1,w
 13857  08AF  0086               	movwf	6
 13858  08B0  3001               	movlw	1	; select bank2/3
 13859  08B1  0087               	movwf	7
 13860  08B2  085E               	movf	??_setRF_DimmerLights,w
 13861  08B3  0081               	movwf	1
 13862                           
 13863                           ;RF_Control_B1.c: 433: product->Data[9]=product->Data[20 + lights];
 13864  08B4  0861               	movf	setRF_DimmerLights@lights,w
 13865  08B5  3E14               	addlw	20
 13866  08B6  077D               	addwf	_product,w
 13867  08B7  00DE               	movwf	??_setRF_DimmerLights
 13868  08B8  085E               	movf	??_setRF_DimmerLights,w
 13869  08B9  0086               	movwf	6
 13870  08BA  3001               	movlw	1	; select bank2/3
 13871  08BB  0087               	movwf	7
 13872  08BC  0801               	movf	1,w
 13873  08BD  00DF               	movwf	??_setRF_DimmerLights+1
 13874  08BE  087D               	movf	_product,w
 13875  08BF  3E09               	addlw	9
 13876  08C0  0086               	movwf	6
 13877  08C1  3001               	movlw	1	; select bank2/3
 13878  08C2  0087               	movwf	7
 13879  08C3  085F               	movf	??_setRF_DimmerLights+1,w
 13880  08C4  0081               	movwf	1
 13881                           
 13882                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + lights];
 13883  08C5  0861               	movf	setRF_DimmerLights@lights,w
 13884  08C6  3E1A               	addlw	26
 13885  08C7  077D               	addwf	_product,w
 13886  08C8  00DE               	movwf	??_setRF_DimmerLights
 13887  08C9  085E               	movf	??_setRF_DimmerLights,w
 13888  08CA  0086               	movwf	6
 13889  08CB  3001               	movlw	1	; select bank2/3
 13890  08CC  0087               	movwf	7
 13891  08CD  0801               	movf	1,w
 13892  08CE  00DF               	movwf	??_setRF_DimmerLights+1
 13893  08CF  087D               	movf	_product,w
 13894  08D0  3E11               	addlw	17
 13895  08D1  0086               	movwf	6
 13896  08D2  3001               	movlw	1	; select bank2/3
 13897  08D3  0087               	movwf	7
 13898  08D4  085F               	movf	??_setRF_DimmerLights+1,w
 13899  08D5  0081               	movwf	1
 13900                           
 13901                           ;RF_Control_B1.c: 435: if (on == 1) {
 13902  08D6  085D               	movf	setRF_DimmerLights@on,w
 13903  08D7  3A01               	xorlw	1
 13904  08D8  1D03               	skipz
 13905  08D9  28EA               	goto	l5502
 13906                           
 13907                           ;RF_Control_B1.c: 436: product->Data[15]=(product->Data[15] | status);
 13908  08DA  087D               	movf	_product,w
 13909  08DB  3E0F               	addlw	15
 13910  08DC  0086               	movwf	6
 13911  08DD  3001               	movlw	1	; select bank2/3
 13912  08DE  0087               	movwf	7
 13913  08DF  0801               	movf	1,w
 13914  08E0  0460               	iorwf	setRF_DimmerLights@status,w
 13915  08E1  00DE               	movwf	??_setRF_DimmerLights
 13916  08E2  087D               	movf	_product,w
 13917  08E3  3E0F               	addlw	15
 13918  08E4  0086               	movwf	6
 13919  08E5  3001               	movlw	1	; select bank2/3
 13920  08E6  0087               	movwf	7
 13921  08E7  085E               	movf	??_setRF_DimmerLights,w
 13922  08E8  0081               	movwf	1
 13923                           
 13924                           ;RF_Control_B1.c: 437: } else {
 13925  08E9  0008               	return
 13926  08EA                     l5502:	
 13927                           
 13928                           ;RF_Control_B1.c: 438: product->Data[15]=(product->Data[15]&(~status));
 13929  08EA  087D               	movf	_product,w
 13930  08EB  3E0F               	addlw	15
 13931  08EC  0086               	movwf	6
 13932  08ED  3001               	movlw	1	; select bank2/3
 13933  08EE  0087               	movwf	7
 13934  08EF  0960               	comf	setRF_DimmerLights@status,w
 13935  08F0  0501               	andwf	1,w
 13936  08F1  00DE               	movwf	??_setRF_DimmerLights
 13937  08F2  087D               	movf	_product,w
 13938  08F3  3E0F               	addlw	15
 13939  08F4  0086               	movwf	6
 13940  08F5  3001               	movlw	1	; select bank2/3
 13941  08F6  0087               	movwf	7
 13942  08F7  085E               	movf	??_setRF_DimmerLights,w
 13943  08F8  0081               	movwf	1
 13944  08F9  0008               	return
 13945  08FA                     __end_of_setRF_DimmerLights:	
 13946                           
 13947                           	psect	text85
 13948  13B6                     __ptext85:	
 13949 ;; *************** function _setPercentValue *****************
 13950 ;; Defined at:
 13951 ;;		line 768 in file "../src/Dimmer_B1.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  value           1    wreg     unsigned char 
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;  value           1   57[BANK0 ] unsigned char 
 13956 ;;  i               3   58[BANK0 ] float 
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  1    wreg      unsigned char 
 13959 ;; Registers used:
 13960 ;;		wreg, status,2, status,0, pclath, cstack
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;Total ram usage:        4 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    7
 13973 ;; This function calls:
 13974 ;;		___awtoft
 13975 ;;		___ftdiv
 13976 ;;		___fttol
 13977 ;; This function is called by:
 13978 ;;		_Flash_Memory_Initialization
 13979 ;;		_setRF_DimmerLights
 13980 ;; This function uses a non-reentrant model
 13981 ;;
 13982                           
 13983                           
 13984                           ;psect for function _setPercentValue
 13985  13B6                     _setPercentValue:	
 13986                           
 13987                           ;incstack = 0
 13988                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13989                           ;setPercentValue@value stored from wreg
 13990  13B6  0020               	movlb	0	; select bank0
 13991  13B7  00D9               	movwf	setPercentValue@value
 13992                           
 13993                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 13994  13B8  3000               	movlw	0
 13995  13B9  00DA               	movwf	setPercentValue@i
 13996  13BA  30E0               	movlw	224
 13997  13BB  00DB               	movwf	setPercentValue@i+1
 13998  13BC  3041               	movlw	65
 13999  13BD  00DC               	movwf	setPercentValue@i+2
 14000                           
 14001                           ;Dimmer_B1.c: 771: i /= 100;
 14002  13BE  3000               	movlw	0
 14003  13BF  00AE               	movwf	___ftdiv@f2
 14004  13C0  30C8               	movlw	200
 14005  13C1  00AF               	movwf	___ftdiv@f2+1
 14006  13C2  3042               	movlw	66
 14007  13C3  00B0               	movwf	___ftdiv@f2+2
 14008  13C4  085A               	movf	setPercentValue@i,w
 14009  13C5  00B1               	movwf	___ftdiv@f1
 14010  13C6  085B               	movf	setPercentValue@i+1,w
 14011  13C7  00B2               	movwf	___ftdiv@f1+1
 14012  13C8  085C               	movf	setPercentValue@i+2,w
 14013  13C9  00B3               	movwf	___ftdiv@f1+2
 14014  13CA  318D  25F4  3193   	fcall	___ftdiv
 14015  13CD  0020               	movlb	0	; select bank0
 14016  13CE  082E               	movf	?___ftdiv,w
 14017  13CF  00DA               	movwf	setPercentValue@i
 14018  13D0  082F               	movf	?___ftdiv+1,w
 14019  13D1  00DB               	movwf	setPercentValue@i+1
 14020  13D2  0830               	movf	?___ftdiv+2,w
 14021  13D3  00DC               	movwf	setPercentValue@i+2
 14022                           
 14023                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14024  13D4  0859               	movf	setPercentValue@value,w
 14025  13D5  3EE0               	addlw	224
 14026  13D6  00A8               	movwf	___awtoft@c
 14027  13D7  30FF               	movlw	255
 14028  13D8  1803               	skipnc
 14029  13D9  3000               	movlw	0
 14030  13DA  00A9               	movwf	___awtoft@c+1
 14031  13DB  319F  27BC  3193   	fcall	___awtoft
 14032  13DE  0020               	movlb	0	; select bank0
 14033  13DF  0828               	movf	?___awtoft,w
 14034  13E0  00B1               	movwf	___ftdiv@f1
 14035  13E1  0829               	movf	?___awtoft+1,w
 14036  13E2  00B2               	movwf	___ftdiv@f1+1
 14037  13E3  082A               	movf	?___awtoft+2,w
 14038  13E4  00B3               	movwf	___ftdiv@f1+2
 14039  13E5  085A               	movf	setPercentValue@i,w
 14040  13E6  00AE               	movwf	___ftdiv@f2
 14041  13E7  085B               	movf	setPercentValue@i+1,w
 14042  13E8  00AF               	movwf	___ftdiv@f2+1
 14043  13E9  085C               	movf	setPercentValue@i+2,w
 14044  13EA  00B0               	movwf	___ftdiv@f2+2
 14045  13EB  318D  25F4  3193   	fcall	___ftdiv
 14046  13EE  0020               	movlb	0	; select bank0
 14047  13EF  082E               	movf	?___ftdiv,w
 14048  13F0  00CB               	movwf	___fttol@f1
 14049  13F1  082F               	movf	?___ftdiv+1,w
 14050  13F2  00CC               	movwf	___fttol@f1+1
 14051  13F3  0830               	movf	?___ftdiv+2,w
 14052  13F4  00CD               	movwf	___fttol@f1+2
 14053  13F5  318B  23B5         	fcall	___fttol
 14054  13F7  0020               	movlb	0	; select bank0
 14055  13F8  034B               	decf	?___fttol,w
 14056  13F9  3AFF               	xorlw	255
 14057  13FA  3E64               	addlw	100
 14058  13FB  0008               	return
 14059  13FC                     __end_of_setPercentValue:	
 14060                           
 14061                           	psect	text86
 14062  0BB5                     __ptext86:	
 14063 ;; *************** function ___fttol *****************
 14064 ;; Defined at:
 14065 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;  f1              3   43[BANK0 ] float 
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;  lval            4   52[BANK0 ] unsigned long 
 14070 ;;  exp1            1   56[BANK0 ] unsigned char 
 14071 ;;  sign1           1   51[BANK0 ] unsigned char 
 14072 ;; Return value:  Size  Location     Type
 14073 ;;                  4   43[BANK0 ] long 
 14074 ;; Registers used:
 14075 ;;		wreg, status,2, status,0
 14076 ;; Tracked objects:
 14077 ;;		On entry : 0/0
 14078 ;;		On exit  : 0/0
 14079 ;;		Unchanged: 0/0
 14080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;Total ram usage:       14 bytes
 14086 ;; Hardware stack levels used:    1
 14087 ;; Hardware stack levels required when called:    5
 14088 ;; This function calls:
 14089 ;;		Nothing
 14090 ;; This function is called by:
 14091 ;;		_getPercentValue
 14092 ;;		_setPercentValue
 14093 ;; This function uses a non-reentrant model
 14094 ;;
 14095                           
 14096                           
 14097                           ;psect for function ___fttol
 14098  0BB5                     ___fttol:	
 14099                           
 14100                           ;incstack = 0
 14101                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14102  0BB5  0020               	movlb	0	; select bank0
 14103  0BB6  084B               	movf	___fttol@f1,w
 14104  0BB7  00CF               	movwf	??___fttol
 14105  0BB8  084C               	movf	___fttol@f1+1,w
 14106  0BB9  00D0               	movwf	??___fttol+1
 14107  0BBA  084D               	movf	___fttol@f1+2,w
 14108  0BBB  00D1               	movwf	??___fttol+2
 14109  0BBC  1003               	clrc
 14110  0BBD  0D50               	rlf	??___fttol+1,w
 14111  0BBE  0D51               	rlf	??___fttol+2,w
 14112  0BBF  00D2               	movwf	??___fttol+3
 14113  0BC0  0852               	movf	??___fttol+3,w
 14114  0BC1  00D8               	movwf	___fttol@exp1
 14115  0BC2  08D8               	movf	___fttol@exp1,f
 14116  0BC3  1D03               	skipz
 14117  0BC4  2BCE               	goto	l5294
 14118  0BC5  3000               	movlw	0
 14119  0BC6  00CE               	movwf	?___fttol+3
 14120  0BC7  3000               	movlw	0
 14121  0BC8  00CD               	movwf	?___fttol+2
 14122  0BC9  3000               	movlw	0
 14123  0BCA  00CC               	movwf	?___fttol+1
 14124  0BCB  3000               	movlw	0
 14125  0BCC  00CB               	movwf	?___fttol
 14126  0BCD  0008               	return
 14127  0BCE                     l5294:	
 14128  0BCE  084B               	movf	___fttol@f1,w
 14129  0BCF  00CF               	movwf	??___fttol
 14130  0BD0  084C               	movf	___fttol@f1+1,w
 14131  0BD1  00D0               	movwf	??___fttol+1
 14132  0BD2  084D               	movf	___fttol@f1+2,w
 14133  0BD3  00D1               	movwf	??___fttol+2
 14134  0BD4  3017               	movlw	23
 14135  0BD5                     u3785:	
 14136  0BD5  36D1               	lsrf	??___fttol+2,f
 14137  0BD6  0CD0               	rrf	??___fttol+1,f
 14138  0BD7  0CCF               	rrf	??___fttol,f
 14139  0BD8  0B89               	decfsz	9,f
 14140  0BD9  2BD5               	goto	u3785
 14141  0BDA  084F               	movf	??___fttol,w
 14142  0BDB  00D2               	movwf	??___fttol+3
 14143  0BDC  0852               	movf	??___fttol+3,w
 14144  0BDD  00D3               	movwf	___fttol@sign1
 14145  0BDE  17CC               	bsf	___fttol@f1+1,7
 14146  0BDF  30FF               	movlw	255
 14147  0BE0  05CB               	andwf	___fttol@f1,f
 14148  0BE1  30FF               	movlw	255
 14149  0BE2  05CC               	andwf	___fttol@f1+1,f
 14150  0BE3  3000               	movlw	0
 14151  0BE4  05CD               	andwf	___fttol@f1+2,f
 14152  0BE5  084B               	movf	___fttol@f1,w
 14153  0BE6  00D4               	movwf	___fttol@lval
 14154  0BE7  084C               	movf	___fttol@f1+1,w
 14155  0BE8  00D5               	movwf	___fttol@lval+1
 14156  0BE9  084D               	movf	___fttol@f1+2,w
 14157  0BEA  00D6               	movwf	___fttol@lval+2
 14158  0BEB  01D7               	clrf	___fttol@lval+3
 14159  0BEC  308E               	movlw	142
 14160  0BED  02D8               	subwf	___fttol@exp1,f
 14161  0BEE  1FD8               	btfss	___fttol@exp1,7
 14162  0BEF  2C0C               	goto	l5314
 14163  0BF0  0858               	movf	___fttol@exp1,w
 14164  0BF1  3A80               	xorlw	128
 14165  0BF2  3E8F               	addlw	143
 14166  0BF3  1803               	skipnc
 14167  0BF4  2BFE               	goto	l5312
 14168  0BF5  3000               	movlw	0
 14169  0BF6  00CE               	movwf	?___fttol+3
 14170  0BF7  3000               	movlw	0
 14171  0BF8  00CD               	movwf	?___fttol+2
 14172  0BF9  3000               	movlw	0
 14173  0BFA  00CC               	movwf	?___fttol+1
 14174  0BFB  3000               	movlw	0
 14175  0BFC  00CB               	movwf	?___fttol
 14176  0BFD  0008               	return
 14177  0BFE                     l5312:	
 14178  0BFE  3001               	movlw	1
 14179  0BFF                     u3815:	
 14180  0BFF  36D7               	lsrf	___fttol@lval+3,f
 14181  0C00  0CD6               	rrf	___fttol@lval+2,f
 14182  0C01  0CD5               	rrf	___fttol@lval+1,f
 14183  0C02  0CD4               	rrf	___fttol@lval,f
 14184  0C03  0B89               	decfsz	9,f
 14185  0C04  2BFF               	goto	u3815
 14186  0C05  3001               	movlw	1
 14187  0C06  00CF               	movwf	??___fttol
 14188  0C07  084F               	movf	??___fttol,w
 14189  0C08  07D8               	addwf	___fttol@exp1,f
 14190  0C09  1903               	btfsc	3,2
 14191  0C0A  2C25               	goto	l5324
 14192  0C0B  2BFE               	goto	l5312
 14193  0C0C                     l5314:	
 14194  0C0C  3018               	movlw	24
 14195  0C0D  0258               	subwf	___fttol@exp1,w
 14196  0C0E  1C03               	skipc
 14197  0C0F  2C22               	goto	l5322
 14198  0C10  3000               	movlw	0
 14199  0C11  00CE               	movwf	?___fttol+3
 14200  0C12  3000               	movlw	0
 14201  0C13  00CD               	movwf	?___fttol+2
 14202  0C14  3000               	movlw	0
 14203  0C15  00CC               	movwf	?___fttol+1
 14204  0C16  3000               	movlw	0
 14205  0C17  00CB               	movwf	?___fttol
 14206  0C18  0008               	return
 14207  0C19                     l5320:	
 14208  0C19  3001               	movlw	1
 14209  0C1A                     u3845:	
 14210  0C1A  35D4               	lslf	___fttol@lval,f
 14211  0C1B  0DD5               	rlf	___fttol@lval+1,f
 14212  0C1C  0DD6               	rlf	___fttol@lval+2,f
 14213  0C1D  0DD7               	rlf	___fttol@lval+3,f
 14214  0C1E  0B89               	decfsz	9,f
 14215  0C1F  2C1A               	goto	u3845
 14216  0C20  3001               	movlw	1
 14217  0C21  02D8               	subwf	___fttol@exp1,f
 14218  0C22                     l5322:	
 14219  0C22  08D8               	movf	___fttol@exp1,f
 14220  0C23  1D03               	skipz
 14221  0C24  2C19               	goto	l5320
 14222  0C25                     l5324:	
 14223  0C25  0853               	movf	___fttol@sign1,w
 14224  0C26  1903               	btfsc	3,2
 14225  0C27  2C33               	goto	l5328
 14226  0C28  09D4               	comf	___fttol@lval,f
 14227  0C29  09D5               	comf	___fttol@lval+1,f
 14228  0C2A  09D6               	comf	___fttol@lval+2,f
 14229  0C2B  09D7               	comf	___fttol@lval+3,f
 14230  0C2C  0AD4               	incf	___fttol@lval,f
 14231  0C2D  1903               	skipnz
 14232  0C2E  0AD5               	incf	___fttol@lval+1,f
 14233  0C2F  1903               	skipnz
 14234  0C30  0AD6               	incf	___fttol@lval+2,f
 14235  0C31  1903               	skipnz
 14236  0C32  0AD7               	incf	___fttol@lval+3,f
 14237  0C33                     l5328:	
 14238  0C33  0857               	movf	___fttol@lval+3,w
 14239  0C34  00CE               	movwf	?___fttol+3
 14240  0C35  0856               	movf	___fttol@lval+2,w
 14241  0C36  00CD               	movwf	?___fttol+2
 14242  0C37  0855               	movf	___fttol@lval+1,w
 14243  0C38  00CC               	movwf	?___fttol+1
 14244  0C39  0854               	movf	___fttol@lval,w
 14245  0C3A  00CB               	movwf	?___fttol
 14246  0C3B  0008               	return
 14247  0C3C                     __end_of___fttol:	
 14248                           
 14249                           	psect	text87
 14250  0DF4                     __ptext87:	
 14251 ;; *************** function ___ftdiv *****************
 14252 ;; Defined at:
 14253 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  f2              3   14[BANK0 ] float 
 14256 ;;  f1              3   17[BANK0 ] float 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;  f3              3   25[BANK0 ] float 
 14259 ;;  sign            1   29[BANK0 ] unsigned char 
 14260 ;;  exp             1   28[BANK0 ] unsigned char 
 14261 ;;  cntr            1   24[BANK0 ] unsigned char 
 14262 ;; Return value:  Size  Location     Type
 14263 ;;                  3   14[BANK0 ] float 
 14264 ;; Registers used:
 14265 ;;		wreg, status,2, status,0, pclath, cstack
 14266 ;; Tracked objects:
 14267 ;;		On entry : 0/0
 14268 ;;		On exit  : 0/0
 14269 ;;		Unchanged: 0/0
 14270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14271 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;Total ram usage:       16 bytes
 14276 ;; Hardware stack levels used:    1
 14277 ;; Hardware stack levels required when called:    6
 14278 ;; This function calls:
 14279 ;;		___ftpack
 14280 ;; This function is called by:
 14281 ;;		_getPercentValue
 14282 ;;		_setPercentValue
 14283 ;; This function uses a non-reentrant model
 14284 ;;
 14285                           
 14286                           
 14287                           ;psect for function ___ftdiv
 14288  0DF4                     ___ftdiv:	
 14289                           
 14290                           ;incstack = 0
 14291                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14292  0DF4  0020               	movlb	0	; select bank0
 14293  0DF5  0831               	movf	___ftdiv@f1,w
 14294  0DF6  00B4               	movwf	??___ftdiv
 14295  0DF7  0832               	movf	___ftdiv@f1+1,w
 14296  0DF8  00B5               	movwf	??___ftdiv+1
 14297  0DF9  0833               	movf	___ftdiv@f1+2,w
 14298  0DFA  00B6               	movwf	??___ftdiv+2
 14299  0DFB  1003               	clrc
 14300  0DFC  0D35               	rlf	??___ftdiv+1,w
 14301  0DFD  0D36               	rlf	??___ftdiv+2,w
 14302  0DFE  00B7               	movwf	??___ftdiv+3
 14303  0DFF  0837               	movf	??___ftdiv+3,w
 14304  0E00  00BC               	movwf	___ftdiv@exp
 14305  0E01  08BC               	movf	___ftdiv@exp,f
 14306  0E02  1D03               	skipz
 14307  0E03  2E0B               	goto	l5202
 14308  0E04  3000               	movlw	0
 14309  0E05  00AE               	movwf	?___ftdiv
 14310  0E06  3000               	movlw	0
 14311  0E07  00AF               	movwf	?___ftdiv+1
 14312  0E08  3000               	movlw	0
 14313  0E09  00B0               	movwf	?___ftdiv+2
 14314  0E0A  0008               	return
 14315  0E0B                     l5202:	
 14316  0E0B  082E               	movf	___ftdiv@f2,w
 14317  0E0C  00B4               	movwf	??___ftdiv
 14318  0E0D  082F               	movf	___ftdiv@f2+1,w
 14319  0E0E  00B5               	movwf	??___ftdiv+1
 14320  0E0F  0830               	movf	___ftdiv@f2+2,w
 14321  0E10  00B6               	movwf	??___ftdiv+2
 14322  0E11  1003               	clrc
 14323  0E12  0D35               	rlf	??___ftdiv+1,w
 14324  0E13  0D36               	rlf	??___ftdiv+2,w
 14325  0E14  00B7               	movwf	??___ftdiv+3
 14326  0E15  0837               	movf	??___ftdiv+3,w
 14327  0E16  00BD               	movwf	___ftdiv@sign
 14328  0E17  08BD               	movf	___ftdiv@sign,f
 14329  0E18  1D03               	skipz
 14330  0E19  2E21               	goto	l5208
 14331  0E1A  3000               	movlw	0
 14332  0E1B  00AE               	movwf	?___ftdiv
 14333  0E1C  3000               	movlw	0
 14334  0E1D  00AF               	movwf	?___ftdiv+1
 14335  0E1E  3000               	movlw	0
 14336  0E1F  00B0               	movwf	?___ftdiv+2
 14337  0E20  0008               	return
 14338  0E21                     l5208:	
 14339  0E21  3000               	movlw	0
 14340  0E22  00B9               	movwf	___ftdiv@f3
 14341  0E23  3000               	movlw	0
 14342  0E24  00BA               	movwf	___ftdiv@f3+1
 14343  0E25  3000               	movlw	0
 14344  0E26  00BB               	movwf	___ftdiv@f3+2
 14345  0E27  3089               	movlw	137
 14346  0E28  073D               	addwf	___ftdiv@sign,w
 14347  0E29  00B4               	movwf	??___ftdiv
 14348  0E2A  0834               	movf	??___ftdiv,w
 14349  0E2B  02BC               	subwf	___ftdiv@exp,f
 14350  0E2C  0831               	movf	___ftdiv@f1,w
 14351  0E2D  00B4               	movwf	??___ftdiv
 14352  0E2E  0832               	movf	___ftdiv@f1+1,w
 14353  0E2F  00B5               	movwf	??___ftdiv+1
 14354  0E30  0833               	movf	___ftdiv@f1+2,w
 14355  0E31  00B6               	movwf	??___ftdiv+2
 14356  0E32  3010               	movlw	16
 14357  0E33                     u3595:	
 14358  0E33  36B6               	lsrf	??___ftdiv+2,f
 14359  0E34  0CB5               	rrf	??___ftdiv+1,f
 14360  0E35  0CB4               	rrf	??___ftdiv,f
 14361  0E36  0B89               	decfsz	9,f
 14362  0E37  2E33               	goto	u3595
 14363  0E38  0834               	movf	??___ftdiv,w
 14364  0E39  00B7               	movwf	??___ftdiv+3
 14365  0E3A  0837               	movf	??___ftdiv+3,w
 14366  0E3B  00BD               	movwf	___ftdiv@sign
 14367  0E3C  082E               	movf	___ftdiv@f2,w
 14368  0E3D  00B4               	movwf	??___ftdiv
 14369  0E3E  082F               	movf	___ftdiv@f2+1,w
 14370  0E3F  00B5               	movwf	??___ftdiv+1
 14371  0E40  0830               	movf	___ftdiv@f2+2,w
 14372  0E41  00B6               	movwf	??___ftdiv+2
 14373  0E42  3010               	movlw	16
 14374  0E43                     u3605:	
 14375  0E43  36B6               	lsrf	??___ftdiv+2,f
 14376  0E44  0CB5               	rrf	??___ftdiv+1,f
 14377  0E45  0CB4               	rrf	??___ftdiv,f
 14378  0E46  0B89               	decfsz	9,f
 14379  0E47  2E43               	goto	u3605
 14380  0E48  0834               	movf	??___ftdiv,w
 14381  0E49  00B7               	movwf	??___ftdiv+3
 14382  0E4A  0837               	movf	??___ftdiv+3,w
 14383  0E4B  06BD               	xorwf	___ftdiv@sign,f
 14384  0E4C  3080               	movlw	128
 14385  0E4D  00B4               	movwf	??___ftdiv
 14386  0E4E  0834               	movf	??___ftdiv,w
 14387  0E4F  05BD               	andwf	___ftdiv@sign,f
 14388  0E50  17B2               	bsf	___ftdiv@f1+1,7
 14389  0E51  30FF               	movlw	255
 14390  0E52  05B1               	andwf	___ftdiv@f1,f
 14391  0E53  30FF               	movlw	255
 14392  0E54  05B2               	andwf	___ftdiv@f1+1,f
 14393  0E55  3000               	movlw	0
 14394  0E56  05B3               	andwf	___ftdiv@f1+2,f
 14395  0E57  17AF               	bsf	___ftdiv@f2+1,7
 14396  0E58  30FF               	movlw	255
 14397  0E59  05AE               	andwf	___ftdiv@f2,f
 14398  0E5A  30FF               	movlw	255
 14399  0E5B  05AF               	andwf	___ftdiv@f2+1,f
 14400  0E5C  3000               	movlw	0
 14401  0E5D  05B0               	andwf	___ftdiv@f2+2,f
 14402  0E5E  3018               	movlw	24
 14403  0E5F  00B4               	movwf	??___ftdiv
 14404  0E60  0834               	movf	??___ftdiv,w
 14405  0E61  00B8               	movwf	___ftdiv@cntr
 14406  0E62                     l5222:	
 14407  0E62  3001               	movlw	1
 14408  0E63                     u3615:	
 14409  0E63  35B9               	lslf	___ftdiv@f3,f
 14410  0E64  0DBA               	rlf	___ftdiv@f3+1,f
 14411  0E65  0DBB               	rlf	___ftdiv@f3+2,f
 14412  0E66  0B89               	decfsz	9,f
 14413  0E67  2E63               	goto	u3615
 14414  0E68  0830               	movf	___ftdiv@f2+2,w
 14415  0E69  0233               	subwf	___ftdiv@f1+2,w
 14416  0E6A  1D03               	skipz
 14417  0E6B  2E72               	goto	u3625
 14418  0E6C  082F               	movf	___ftdiv@f2+1,w
 14419  0E6D  0232               	subwf	___ftdiv@f1+1,w
 14420  0E6E  1D03               	skipz
 14421  0E6F  2E72               	goto	u3625
 14422  0E70  082E               	movf	___ftdiv@f2,w
 14423  0E71  0231               	subwf	___ftdiv@f1,w
 14424  0E72                     u3625:	
 14425  0E72  1C03               	skipc
 14426  0E73  2E7B               	goto	l5230
 14427  0E74  082E               	movf	___ftdiv@f2,w
 14428  0E75  02B1               	subwf	___ftdiv@f1,f
 14429  0E76  082F               	movf	___ftdiv@f2+1,w
 14430  0E77  3BB2               	subwfb	___ftdiv@f1+1,f
 14431  0E78  0830               	movf	___ftdiv@f2+2,w
 14432  0E79  3BB3               	subwfb	___ftdiv@f1+2,f
 14433  0E7A  1439               	bsf	___ftdiv@f3,0
 14434  0E7B                     l5230:	
 14435  0E7B  3001               	movlw	1
 14436  0E7C                     u3635:	
 14437  0E7C  35B1               	lslf	___ftdiv@f1,f
 14438  0E7D  0DB2               	rlf	___ftdiv@f1+1,f
 14439  0E7E  0DB3               	rlf	___ftdiv@f1+2,f
 14440  0E7F  0B89               	decfsz	9,f
 14441  0E80  2E7C               	goto	u3635
 14442  0E81  3001               	movlw	1
 14443  0E82  02B8               	subwf	___ftdiv@cntr,f
 14444  0E83  1D03               	btfss	3,2
 14445  0E84  2E62               	goto	l5222
 14446  0E85  0839               	movf	___ftdiv@f3,w
 14447  0E86  00A0               	movwf	___ftpack@arg
 14448  0E87  083A               	movf	___ftdiv@f3+1,w
 14449  0E88  00A1               	movwf	___ftpack@arg+1
 14450  0E89  083B               	movf	___ftdiv@f3+2,w
 14451  0E8A  00A2               	movwf	___ftpack@arg+2
 14452  0E8B  083C               	movf	___ftdiv@exp,w
 14453  0E8C  00B4               	movwf	??___ftdiv
 14454  0E8D  0834               	movf	??___ftdiv,w
 14455  0E8E  00A3               	movwf	___ftpack@exp
 14456  0E8F  083D               	movf	___ftdiv@sign,w
 14457  0E90  00B5               	movwf	??___ftdiv+1
 14458  0E91  0835               	movf	??___ftdiv+1,w
 14459  0E92  00A4               	movwf	___ftpack@sign
 14460  0E93  3188  202D         	fcall	___ftpack
 14461  0E95  0020               	movlb	0	; select bank0
 14462  0E96  0820               	movf	?___ftpack,w
 14463  0E97  00AE               	movwf	?___ftdiv
 14464  0E98  0821               	movf	?___ftpack+1,w
 14465  0E99  00AF               	movwf	?___ftdiv+1
 14466  0E9A  0822               	movf	?___ftpack+2,w
 14467  0E9B  00B0               	movwf	?___ftdiv+2
 14468  0E9C  0008               	return
 14469  0E9D                     __end_of___ftdiv:	
 14470                           
 14471                           	psect	text88
 14472  1FBC                     __ptext88:	
 14473 ;; *************** function ___awtoft *****************
 14474 ;; Defined at:
 14475 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  c               2    8[BANK0 ] int 
 14478 ;; Auto vars:     Size  Location     Type
 14479 ;;  sign            1   13[BANK0 ] unsigned char 
 14480 ;; Return value:  Size  Location     Type
 14481 ;;                  3    8[BANK0 ] float 
 14482 ;; Registers used:
 14483 ;;		wreg, status,2, status,0, pclath, cstack
 14484 ;; Tracked objects:
 14485 ;;		On entry : 0/0
 14486 ;;		On exit  : 0/0
 14487 ;;		Unchanged: 0/0
 14488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14489 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;Total ram usage:        6 bytes
 14494 ;; Hardware stack levels used:    1
 14495 ;; Hardware stack levels required when called:    6
 14496 ;; This function calls:
 14497 ;;		___ftpack
 14498 ;; This function is called by:
 14499 ;;		_getPercentValue
 14500 ;;		_setPercentValue
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           
 14505                           ;psect for function ___awtoft
 14506  1FBC                     ___awtoft:	
 14507                           
 14508                           ;incstack = 0
 14509                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14510  1FBC  0020               	movlb	0	; select bank0
 14511  1FBD  01AD               	clrf	___awtoft@sign
 14512  1FBE  1FA9               	btfss	___awtoft@c+1,7
 14513  1FBF  2FC7               	goto	l5120
 14514  1FC0  09A8               	comf	___awtoft@c,f
 14515  1FC1  09A9               	comf	___awtoft@c+1,f
 14516  1FC2  0AA8               	incf	___awtoft@c,f
 14517  1FC3  1903               	skipnz
 14518  1FC4  0AA9               	incf	___awtoft@c+1,f
 14519  1FC5  01AD               	clrf	___awtoft@sign
 14520  1FC6  0AAD               	incf	___awtoft@sign,f
 14521  1FC7                     l5120:	
 14522  1FC7  0828               	movf	___awtoft@c,w
 14523  1FC8  00A0               	movwf	___ftpack@arg
 14524  1FC9  0829               	movf	___awtoft@c+1,w
 14525  1FCA  00A1               	movwf	___ftpack@arg+1
 14526  1FCB  01A2               	clrf	___ftpack@arg+2
 14527  1FCC  308E               	movlw	142
 14528  1FCD  00AB               	movwf	??___awtoft
 14529  1FCE  082B               	movf	??___awtoft,w
 14530  1FCF  00A3               	movwf	___ftpack@exp
 14531  1FD0  082D               	movf	___awtoft@sign,w
 14532  1FD1  00AC               	movwf	??___awtoft+1
 14533  1FD2  082C               	movf	??___awtoft+1,w
 14534  1FD3  00A4               	movwf	___ftpack@sign
 14535  1FD4  3188  202D         	fcall	___ftpack
 14536  1FD6  0020               	movlb	0	; select bank0
 14537  1FD7  0820               	movf	?___ftpack,w
 14538  1FD8  00A8               	movwf	?___awtoft
 14539  1FD9  0821               	movf	?___ftpack+1,w
 14540  1FDA  00A9               	movwf	?___awtoft+1
 14541  1FDB  0822               	movf	?___ftpack+2,w
 14542  1FDC  00AA               	movwf	?___awtoft+2
 14543  1FDD  0008               	return
 14544  1FDE                     __end_of___awtoft:	
 14545                           
 14546                           	psect	text89
 14547  082D                     __ptext89:	
 14548 ;; *************** function ___ftpack *****************
 14549 ;; Defined at:
 14550 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;  arg             3    0[BANK0 ] unsigned um
 14553 ;;  exp             1    3[BANK0 ] unsigned char 
 14554 ;;  sign            1    4[BANK0 ] unsigned char 
 14555 ;; Auto vars:     Size  Location     Type
 14556 ;;		None
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  3    0[BANK0 ] float 
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14566 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;Total ram usage:        8 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    5
 14573 ;; This function calls:
 14574 ;;		Nothing
 14575 ;; This function is called by:
 14576 ;;		___awtoft
 14577 ;;		___ftadd
 14578 ;;		___ftdiv
 14579 ;;		___ftmul
 14580 ;; This function uses a non-reentrant model
 14581 ;;
 14582                           
 14583                           
 14584                           ;psect for function ___ftpack
 14585  082D                     ___ftpack:	
 14586                           
 14587                           ;incstack = 0
 14588                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14589  082D  0020               	movlb	0	; select bank0
 14590  082E  0823               	movf	___ftpack@exp,w
 14591  082F  1903               	btfsc	3,2
 14592  0830  2836               	goto	l5086
 14593  0831  0822               	movf	___ftpack@arg+2,w
 14594  0832  0421               	iorwf	___ftpack@arg+1,w
 14595  0833  0420               	iorwf	___ftpack@arg,w
 14596  0834  1D03               	skipz
 14597  0835  2847               	goto	l5092
 14598  0836                     l5086:	
 14599  0836  3000               	movlw	0
 14600  0837  00A0               	movwf	?___ftpack
 14601  0838  3000               	movlw	0
 14602  0839  00A1               	movwf	?___ftpack+1
 14603  083A  3000               	movlw	0
 14604  083B  00A2               	movwf	?___ftpack+2
 14605  083C  0008               	return
 14606  083D                     l5090:	
 14607  083D  3001               	movlw	1
 14608  083E  00A5               	movwf	??___ftpack
 14609  083F  0825               	movf	??___ftpack,w
 14610  0840  07A3               	addwf	___ftpack@exp,f
 14611  0841  3001               	movlw	1
 14612  0842                     u3245:	
 14613  0842  36A2               	lsrf	___ftpack@arg+2,f
 14614  0843  0CA1               	rrf	___ftpack@arg+1,f
 14615  0844  0CA0               	rrf	___ftpack@arg,f
 14616  0845  0B89               	decfsz	9,f
 14617  0846  2842               	goto	u3245
 14618  0847                     l5092:	
 14619  0847  30FE               	movlw	254
 14620  0848  0522               	andwf	___ftpack@arg+2,w
 14621  0849  1903               	btfsc	3,2
 14622  084A  2860               	goto	l2798
 14623  084B  283D               	goto	l5090
 14624  084C                     l5094:	
 14625  084C  3001               	movlw	1
 14626  084D  00A5               	movwf	??___ftpack
 14627  084E  0825               	movf	??___ftpack,w
 14628  084F  07A3               	addwf	___ftpack@exp,f
 14629  0850  3001               	movlw	1
 14630  0851  07A0               	addwf	___ftpack@arg,f
 14631  0852  3000               	movlw	0
 14632  0853  1803               	skipnc
 14633  0854  3001               	movlw	1
 14634  0855  07A1               	addwf	___ftpack@arg+1,f
 14635  0856  3000               	movlw	0
 14636  0857  1803               	skipnc
 14637  0858  3001               	movlw	1
 14638  0859  07A2               	addwf	___ftpack@arg+2,f
 14639  085A  3001               	movlw	1
 14640  085B                     u3265:	
 14641  085B  36A2               	lsrf	___ftpack@arg+2,f
 14642  085C  0CA1               	rrf	___ftpack@arg+1,f
 14643  085D  0CA0               	rrf	___ftpack@arg,f
 14644  085E  0B89               	decfsz	9,f
 14645  085F  285B               	goto	u3265
 14646  0860                     l2798:	
 14647  0860  30FF               	movlw	255
 14648  0861  0522               	andwf	___ftpack@arg+2,w
 14649  0862  1903               	btfsc	3,2
 14650  0863  286D               	goto	l5102
 14651  0864  284C               	goto	l5094
 14652  0865                     l5100:	
 14653  0865  3001               	movlw	1
 14654  0866  02A3               	subwf	___ftpack@exp,f
 14655  0867  3001               	movlw	1
 14656  0868                     u3285:	
 14657  0868  35A0               	lslf	___ftpack@arg,f
 14658  0869  0DA1               	rlf	___ftpack@arg+1,f
 14659  086A  0DA2               	rlf	___ftpack@arg+2,f
 14660  086B  0B89               	decfsz	9,f
 14661  086C  2868               	goto	u3285
 14662  086D                     l5102:	
 14663  086D  1FA1               	btfss	___ftpack@arg+1,7
 14664  086E  2865               	goto	l5100
 14665  086F  1823               	btfsc	___ftpack@exp,0
 14666  0870  2877               	goto	l2804
 14667  0871  30FF               	movlw	255
 14668  0872  05A0               	andwf	___ftpack@arg,f
 14669  0873  307F               	movlw	127
 14670  0874  05A1               	andwf	___ftpack@arg+1,f
 14671  0875  30FF               	movlw	255
 14672  0876  05A2               	andwf	___ftpack@arg+2,f
 14673  0877                     l2804:	
 14674  0877  1003               	clrc
 14675  0878  0CA3               	rrf	___ftpack@exp,f
 14676  0879  0823               	movf	___ftpack@exp,w
 14677  087A  00A5               	movwf	??___ftpack
 14678  087B  01A6               	clrf	??___ftpack+1
 14679  087C  01A7               	clrf	??___ftpack+2
 14680  087D  3010               	movlw	16
 14681  087E                     u3315:	
 14682  087E  35A5               	lslf	??___ftpack,f
 14683  087F  0DA6               	rlf	??___ftpack+1,f
 14684  0880  0DA7               	rlf	??___ftpack+2,f
 14685  0881  0B89               	decfsz	9,f
 14686  0882  287E               	goto	u3315
 14687  0883  0825               	movf	??___ftpack,w
 14688  0884  04A0               	iorwf	___ftpack@arg,f
 14689  0885  0826               	movf	??___ftpack+1,w
 14690  0886  04A1               	iorwf	___ftpack@arg+1,f
 14691  0887  0827               	movf	??___ftpack+2,w
 14692  0888  04A2               	iorwf	___ftpack@arg+2,f
 14693  0889  0824               	movf	___ftpack@sign,w
 14694  088A  1903               	btfsc	3,2
 14695  088B  0008               	return
 14696  088C  17A2               	bsf	___ftpack@arg+2,7
 14697  088D  0008               	return
 14698  088E                     __end_of___ftpack:	
 14699                           
 14700                           	psect	text90
 14701  1D3C                     __ptext90:	
 14702 ;; *************** function _setRFSW_Status *****************
 14703 ;; Defined at:
 14704 ;;		line 405 in file "../src/RF_Control_B1.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;  sw              1    wreg     unsigned char 
 14707 ;;  command         1    2[BANK0 ] unsigned char 
 14708 ;; Auto vars:     Size  Location     Type
 14709 ;;  sw              1    3[BANK0 ] unsigned char 
 14710 ;; Return value:  Size  Location     Type
 14711 ;;		None               void
 14712 ;; Registers used:
 14713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14714 ;; Tracked objects:
 14715 ;;		On entry : 0/0
 14716 ;;		On exit  : 0/0
 14717 ;;		Unchanged: 0/0
 14718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;Total ram usage:        2 bytes
 14724 ;; Hardware stack levels used:    1
 14725 ;; Hardware stack levels required when called:    6
 14726 ;; This function calls:
 14727 ;;		_RfSWPointSelect
 14728 ;; This function is called by:
 14729 ;;		_DlyOff_Main
 14730 ;;		_setDimmerLights_ERROR
 14731 ;;		_setControl_Lights_Table
 14732 ;;		_Sw_DimmerOnFunc
 14733 ;;		_Sw_DimmerAdjFunc
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           
 14738                           ;psect for function _setRFSW_Status
 14739  1D3C                     _setRFSW_Status:	
 14740                           
 14741                           ;incstack = 0
 14742                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14743                           ;setRFSW_Status@sw stored from wreg
 14744  1D3C  0020               	movlb	0	; select bank0
 14745  1D3D  00A3               	movwf	setRFSW_Status@sw
 14746                           
 14747                           ;RF_Control_B1.c: 406: RfSWPointSelect(sw);
 14748  1D3E  0823               	movf	setRFSW_Status@sw,w
 14749  1D3F  319C  24BC         	fcall	_RfSWPointSelect
 14750                           
 14751                           ;RF_Control_B1.c: 407: RFSW->Status = command;
 14752  1D41  0021               	movlb	1	; select bank1
 14753  1D42  083F               	movf	_RFSW^(0+128),w
 14754  1D43  0086               	movwf	6
 14755  1D44  0187               	clrf	7
 14756  1D45  0020               	movlb	0	; select bank0
 14757  1D46  0822               	movf	setRFSW_Status@command,w
 14758  1D47  1001               	bcf	1,0
 14759  1D48  1D03               	skipz
 14760  1D49  1401               	bsf	1,0
 14761  1D4A  0008               	return
 14762  1D4B                     __end_of_setRFSW_Status:	
 14763                           
 14764                           	psect	text91
 14765  1CBC                     __ptext91:	
 14766 ;; *************** function _RfSWPointSelect *****************
 14767 ;; Defined at:
 14768 ;;		line 340 in file "../src/RF_Control_B1.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  sw              1    wreg     unsigned char 
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  sw              1    1[BANK0 ] unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;		None               void
 14775 ;; Registers used:
 14776 ;;		wreg
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:        2 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    5
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_setRFSW_Control
 14793 ;;		_setRFSW_AdjControl
 14794 ;;		_setRFSW_Status
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           
 14799                           ;psect for function _RfSWPointSelect
 14800  1CBC                     _RfSWPointSelect:	
 14801                           
 14802                           ;incstack = 0
 14803                           ; Regs used in _RfSWPointSelect: [wreg]
 14804                           ;RfSWPointSelect@sw stored from wreg
 14805  1CBC  0020               	movlb	0	; select bank0
 14806  1CBD  00A1               	movwf	RfSWPointSelect@sw
 14807                           
 14808                           ;RF_Control_B1.c: 342: if (sw == 1) {
 14809  1CBE  0821               	movf	RfSWPointSelect@sw,w
 14810  1CBF  3A01               	xorlw	1
 14811  1CC0  1D03               	skipz
 14812  1CC1  0008               	return
 14813                           
 14814                           ;RF_Control_B1.c: 343: RFSW = &RFSW1;
 14815  1CC2  30EC               	movlw	_RFSW1& (0+255)
 14816  1CC3  00A0               	movwf	??_RfSWPointSelect
 14817  1CC4  0820               	movf	??_RfSWPointSelect,w
 14818  1CC5  0021               	movlb	1	; select bank1
 14819  1CC6  00BF               	movwf	_RFSW^(0+128)
 14820  1CC7  0008               	return
 14821  1CC8                     __end_of_RfSWPointSelect:	
 14822                           
 14823                           	psect	text92
 14824  1D89                     __ptext92:	
 14825 ;; *************** function _setDimmerLights_Trigger *****************
 14826 ;; Defined at:
 14827 ;;		line 705 in file "../src/Dimmer_B1.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;  lights          1    wreg     unsigned char 
 14830 ;;  command         1    2[BANK0 ] unsigned char 
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;  lights          1    3[BANK0 ] unsigned char 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;		None               void
 14835 ;; Registers used:
 14836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14842 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;Total ram usage:        2 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    6
 14849 ;; This function calls:
 14850 ;;		_DimmerLightsPointSelect
 14851 ;; This function is called by:
 14852 ;;		_DlyOff_Main
 14853 ;;		_setRFSW_Control
 14854 ;;		_Sw_DimmerOnFunc
 14855 ;;		_Sw_DimmerOffFunc
 14856 ;; This function uses a non-reentrant model
 14857 ;;
 14858                           
 14859                           
 14860                           ;psect for function _setDimmerLights_Trigger
 14861  1D89                     _setDimmerLights_Trigger:	
 14862                           
 14863                           ;incstack = 0
 14864                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14865                           ;setDimmerLights_Trigger@lights stored from wreg
 14866  1D89  0020               	movlb	0	; select bank0
 14867  1D8A  00A3               	movwf	setDimmerLights_Trigger@lights
 14868                           
 14869                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14870  1D8B  0823               	movf	setDimmerLights_Trigger@lights,w
 14871  1D8C  319C  2482         	fcall	_DimmerLightsPointSelect
 14872                           
 14873                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 14874  1D8E  0878               	movf	_DimmerLights,w
 14875  1D8F  3E08               	addlw	8
 14876  1D90  0086               	movwf	6
 14877  1D91  3001               	movlw	1	; select bank2/3
 14878  1D92  0087               	movwf	7
 14879  1D93  0020               	movlb	0	; select bank0
 14880  1D94  0822               	movf	setDimmerLights_Trigger@command,w
 14881  1D95  1101               	bcf	1,2
 14882  1D96  1D03               	skipz
 14883  1D97  1501               	bsf	1,2
 14884  1D98  0008               	return
 14885  1D99                     __end_of_setDimmerLights_Trigger:	
 14886                           
 14887                           	psect	text93
 14888  1D79                     __ptext93:	
 14889 ;; *************** function _setDimmerLights_Switch *****************
 14890 ;; Defined at:
 14891 ;;		line 693 in file "../src/Dimmer_B1.c"
 14892 ;; Parameters:    Size  Location     Type
 14893 ;;  lights          1    wreg     unsigned char 
 14894 ;;  command         1    2[BANK0 ] unsigned char 
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;  lights          1    3[BANK0 ] unsigned char 
 14897 ;; Return value:  Size  Location     Type
 14898 ;;		None               void
 14899 ;; Registers used:
 14900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14901 ;; Tracked objects:
 14902 ;;		On entry : 0/0
 14903 ;;		On exit  : 0/0
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14906 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;Total ram usage:        2 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; Hardware stack levels required when called:    6
 14913 ;; This function calls:
 14914 ;;		_DimmerLightsPointSelect
 14915 ;; This function is called by:
 14916 ;;		_DlyOff_Main
 14917 ;;		_setRFSW_Control
 14918 ;;		_Sw_DimmerOnFunc
 14919 ;;		_Sw_DimmerOffFunc
 14920 ;; This function uses a non-reentrant model
 14921 ;;
 14922                           
 14923                           
 14924                           ;psect for function _setDimmerLights_Switch
 14925  1D79                     _setDimmerLights_Switch:	
 14926                           
 14927                           ;incstack = 0
 14928                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14929                           ;setDimmerLights_Switch@lights stored from wreg
 14930  1D79  0020               	movlb	0	; select bank0
 14931  1D7A  00A3               	movwf	setDimmerLights_Switch@lights
 14932                           
 14933                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 14934  1D7B  0823               	movf	setDimmerLights_Switch@lights,w
 14935  1D7C  319C  2482         	fcall	_DimmerLightsPointSelect
 14936                           
 14937                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 14938  1D7E  0878               	movf	_DimmerLights,w
 14939  1D7F  3E08               	addlw	8
 14940  1D80  0086               	movwf	6
 14941  1D81  3001               	movlw	1	; select bank2/3
 14942  1D82  0087               	movwf	7
 14943  1D83  0020               	movlb	0	; select bank0
 14944  1D84  0822               	movf	setDimmerLights_Switch@command,w
 14945  1D85  1081               	bcf	1,1
 14946  1D86  1D03               	skipz
 14947  1D87  1481               	bsf	1,1
 14948  1D88  0008               	return
 14949  1D89                     __end_of_setDimmerLights_Switch:	
 14950                           
 14951                           	psect	text94
 14952  1C82                     __ptext94:	
 14953 ;; *************** function _DimmerLightsPointSelect *****************
 14954 ;; Defined at:
 14955 ;;		line 315 in file "../src/Dimmer_B1.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;  lights          1    wreg     unsigned char 
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;  lights          1    1[BANK0 ] unsigned char 
 14960 ;; Return value:  Size  Location     Type
 14961 ;;		None               void
 14962 ;; Registers used:
 14963 ;;		wreg
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;Total ram usage:        2 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    5
 14976 ;; This function calls:
 14977 ;;		Nothing
 14978 ;; This function is called by:
 14979 ;;		_setDimmerLights_Initialization
 14980 ;;		_setDimmerLights_Main
 14981 ;;		_setDimmerLights_ERROR
 14982 ;;		_setDimmerLights_TriggerERROR
 14983 ;;		_setDimmerLights
 14984 ;;		_setDimmerLights_Adj
 14985 ;;		_setDimmerLights_AdjRF
 14986 ;;		_setDimmerLights_Switch
 14987 ;;		_setDimmerLights_AdjGo
 14988 ;;		_setDimmerLights_Trigger
 14989 ;;		_setDimmerLights_TriggerAdj
 14990 ;;		_setDimmerLights_GO
 14991 ;;		_setDimmerLights_MaxmumValue
 14992 ;;		_setDimmerLights_Clear
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           
 14997                           ;psect for function _DimmerLightsPointSelect
 14998  1C82                     _DimmerLightsPointSelect:	
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15002                           ;DimmerLightsPointSelect@lights stored from wreg
 15003  1C82  0020               	movlb	0	; select bank0
 15004  1C83  00A1               	movwf	DimmerLightsPointSelect@lights
 15005                           
 15006                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15007  1C84  0821               	movf	DimmerLightsPointSelect@lights,w
 15008  1C85  3A01               	xorlw	1
 15009  1C86  1D03               	skipz
 15010  1C87  0008               	return
 15011                           
 15012                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15013  1C88  3034               	movlw	_DimmerLights1& (0+255)
 15014  1C89  00A0               	movwf	??_DimmerLightsPointSelect
 15015  1C8A  0820               	movf	??_DimmerLightsPointSelect,w
 15016  1C8B  00F8               	movwf	_DimmerLights
 15017  1C8C  0008               	return
 15018  1C8D                     __end_of_DimmerLightsPointSelect:	
 15019                           
 15020                           	psect	text95
 15021  0C3C                     __ptext95:	
 15022 ;; *************** function _setBuz *****************
 15023 ;; Defined at:
 15024 ;;		line 30 in file "../src/Buzzer_B1.c"
 15025 ;; Parameters:    Size  Location     Type
 15026 ;;  count           1    wreg     unsigned char 
 15027 ;;  time            2    9[BANK0 ] int 
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  count           1   12[BANK0 ] unsigned char 
 15030 ;; Return value:  Size  Location     Type
 15031 ;;		None               void
 15032 ;; Registers used:
 15033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15034 ;; Tracked objects:
 15035 ;;		On entry : 0/0
 15036 ;;		On exit  : 0/0
 15037 ;;		Unchanged: 0/0
 15038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;Total ram usage:        4 bytes
 15044 ;; Hardware stack levels used:    1
 15045 ;; Hardware stack levels required when called:    6
 15046 ;; This function calls:
 15047 ;;		___awdiv
 15048 ;; This function is called by:
 15049 ;;		_CC2500_RxData
 15050 ;;		_DlyOff_Main
 15051 ;;		_setDimmerLights_Main
 15052 ;;		_DimmerLights_Exceptions
 15053 ;;		_setLog_Code
 15054 ;;		_setControl_Lights_Table
 15055 ;;		_setRFSW_Control
 15056 ;;		_setSw_Main
 15057 ;;		_Sw_DimmerOnFunc
 15058 ;;		_my_Main
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062                           
 15063                           ;psect for function _setBuz
 15064  0C3C                     _setBuz:	
 15065                           
 15066                           ;incstack = 0
 15067                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15068                           ;setBuz@count stored from wreg
 15069  0C3C  0020               	movlb	0	; select bank0
 15070  0C3D  00AC               	movwf	setBuz@count
 15071                           
 15072                           ;Buzzer_B1.c: 31: Buz = &Buz1;
 15073  0C3E  30C7               	movlw	_Buz1& (0+255)
 15074  0C3F  00AB               	movwf	??_setBuz
 15075  0C40  082B               	movf	??_setBuz,w
 15076  0C41  0021               	movlb	1	; select bank1
 15077  0C42  00B7               	movwf	_Buz^(0+128)
 15078                           
 15079                           ;Buzzer_B1.c: 32: time /= 10;
 15080  0C43  300A               	movlw	10
 15081  0C44  0020               	movlb	0	; select bank0
 15082  0C45  00A0               	movwf	___awdiv@divisor
 15083  0C46  3000               	movlw	0
 15084  0C47  00A1               	movwf	___awdiv@divisor+1
 15085  0C48  082A               	movf	setBuz@time+1,w
 15086  0C49  01A3               	clrf	___awdiv@dividend+1
 15087  0C4A  07A3               	addwf	___awdiv@dividend+1,f
 15088  0C4B  0829               	movf	setBuz@time,w
 15089  0C4C  01A2               	clrf	___awdiv@dividend
 15090  0C4D  07A2               	addwf	___awdiv@dividend,f
 15091  0C4E  3195  252B  318C   	fcall	___awdiv
 15092  0C51  0020               	movlb	0	; select bank0
 15093  0C52  0821               	movf	?___awdiv+1,w
 15094  0C53  01AA               	clrf	setBuz@time+1
 15095  0C54  07AA               	addwf	setBuz@time+1,f
 15096  0C55  0820               	movf	?___awdiv,w
 15097  0C56  01A9               	clrf	setBuz@time
 15098  0C57  07A9               	addwf	setBuz@time,f
 15099                           
 15100                           ;Buzzer_B1.c: 33: if (Buz->Enable == 1) {
 15101  0C58  0021               	movlb	1	; select bank1
 15102  0C59  0837               	movf	_Buz^(0+128),w
 15103  0C5A  0086               	movwf	6
 15104  0C5B  0187               	clrf	7
 15105  0C5C  1C01               	btfss	1,0
 15106  0C5D  0008               	return
 15107                           
 15108                           ;Buzzer_B1.c: 34: if (Buz->GO == 0) {
 15109  0C5E  0837               	movf	_Buz^(0+128),w
 15110  0C5F  0086               	movwf	6
 15111  0C60  0187               	clrf	7
 15112  0C61  1881               	btfsc	1,1
 15113  0C62  2C84               	goto	l5470
 15114                           
 15115                           ;Buzzer_B1.c: 35: Buz->GO = 1;
 15116  0C63  0837               	movf	_Buz^(0+128),w
 15117  0C64  0086               	movwf	6
 15118  0C65  0187               	clrf	7
 15119  0C66  1481               	bsf	1,1
 15120                           
 15121                           ;Buzzer_B1.c: 36: Buz->Counter = 0;
 15122  0C67  0A37               	incf	_Buz^(0+128),w
 15123  0C68  0086               	movwf	6
 15124  0C69  0187               	clrf	7
 15125  0C6A  3000               	movlw	0
 15126  0C6B  3FC0               	movwi [0]fsr1
 15127  0C6C  3FC1               	movwi [1]fsr1
 15128                           
 15129                           ;Buzzer_B1.c: 37: Buz->Count = count;
 15130  0C6D  0020               	movlb	0	; select bank0
 15131  0C6E  082C               	movf	setBuz@count,w
 15132  0C6F  00AB               	movwf	??_setBuz
 15133  0C70  0021               	movlb	1	; select bank1
 15134  0C71  0837               	movf	_Buz^(0+128),w
 15135  0C72  3E03               	addlw	3
 15136  0C73  0086               	movwf	6
 15137  0C74  0187               	clrf	7
 15138  0C75  0020               	movlb	0	; select bank0
 15139  0C76  082B               	movf	??_setBuz,w
 15140  0C77  0081               	movwf	1
 15141                           
 15142                           ;Buzzer_B1.c: 38: Buz->TimeValue = time;
 15143  0C78  0021               	movlb	1	; select bank1
 15144  0C79  0837               	movf	_Buz^(0+128),w
 15145  0C7A  3E06               	addlw	6
 15146  0C7B  0086               	movwf	6
 15147  0C7C  0187               	clrf	7
 15148  0C7D  0020               	movlb	0	; select bank0
 15149  0C7E  0829               	movf	setBuz@time,w
 15150  0C7F  3FC0               	movwi [0]fsr1
 15151  0C80  082A               	movf	setBuz@time+1,w
 15152  0C81  3FC1               	movwi [1]fsr1
 15153                           
 15154                           ;Buzzer_B1.c: 39: RB3 = 1;
 15155  0C82  158D               	bsf	13,3	;volatile
 15156                           
 15157                           ;Buzzer_B1.c: 40: } else {
 15158  0C83  0008               	return
 15159  0C84                     l5470:	
 15160                           
 15161                           ;Buzzer_B1.c: 41: if (Buz->BufferStatus1 == 0) {
 15162  0C84  0021               	movlb	1	; select bank1
 15163  0C85  0837               	movf	_Buz^(0+128),w
 15164  0C86  0086               	movwf	6
 15165  0C87  0187               	clrf	7
 15166  0C88  1981               	btfsc	1,3
 15167  0C89  2CA4               	goto	l5474
 15168                           
 15169                           ;Buzzer_B1.c: 42: Buz->BufferStatus1 = 1;
 15170  0C8A  0837               	movf	_Buz^(0+128),w
 15171  0C8B  0086               	movwf	6
 15172  0C8C  0187               	clrf	7
 15173  0C8D  1581               	bsf	1,3
 15174                           
 15175                           ;Buzzer_B1.c: 43: Buz->CountBuffer1 = count;
 15176  0C8E  0020               	movlb	0	; select bank0
 15177  0C8F  082C               	movf	setBuz@count,w
 15178  0C90  00AB               	movwf	??_setBuz
 15179  0C91  0021               	movlb	1	; select bank1
 15180  0C92  0837               	movf	_Buz^(0+128),w
 15181  0C93  3E04               	addlw	4
 15182  0C94  0086               	movwf	6
 15183  0C95  0187               	clrf	7
 15184  0C96  0020               	movlb	0	; select bank0
 15185  0C97  082B               	movf	??_setBuz,w
 15186  0C98  0081               	movwf	1
 15187                           
 15188                           ;Buzzer_B1.c: 44: Buz->TimeValueBuffer1 = time;
 15189  0C99  0021               	movlb	1	; select bank1
 15190  0C9A  0837               	movf	_Buz^(0+128),w
 15191  0C9B  3E08               	addlw	8
 15192  0C9C  0086               	movwf	6
 15193  0C9D  0187               	clrf	7
 15194  0C9E  0020               	movlb	0	; select bank0
 15195  0C9F  0829               	movf	setBuz@time,w
 15196  0CA0  3FC0               	movwi [0]fsr1
 15197  0CA1  082A               	movf	setBuz@time+1,w
 15198  0CA2  3FC1               	movwi [1]fsr1
 15199                           
 15200                           ;Buzzer_B1.c: 45: } else if (Buz->BufferStatus2 == 0) {
 15201  0CA3  0008               	return
 15202  0CA4                     l5474:	
 15203  0CA4  0021               	movlb	1	; select bank1
 15204  0CA5  0837               	movf	_Buz^(0+128),w
 15205  0CA6  0086               	movwf	6
 15206  0CA7  0187               	clrf	7
 15207  0CA8  1A01               	btfsc	1,4
 15208  0CA9  0008               	return
 15209                           
 15210                           ;Buzzer_B1.c: 46: Buz->BufferStatus2 = 1;
 15211  0CAA  0837               	movf	_Buz^(0+128),w
 15212  0CAB  0086               	movwf	6
 15213  0CAC  0187               	clrf	7
 15214  0CAD  1601               	bsf	1,4
 15215                           
 15216                           ;Buzzer_B1.c: 47: Buz->CountBuffer2 = count;
 15217  0CAE  0020               	movlb	0	; select bank0
 15218  0CAF  082C               	movf	setBuz@count,w
 15219  0CB0  00AB               	movwf	??_setBuz
 15220  0CB1  0021               	movlb	1	; select bank1
 15221  0CB2  0837               	movf	_Buz^(0+128),w
 15222  0CB3  3E05               	addlw	5
 15223  0CB4  0086               	movwf	6
 15224  0CB5  0187               	clrf	7
 15225  0CB6  0020               	movlb	0	; select bank0
 15226  0CB7  082B               	movf	??_setBuz,w
 15227  0CB8  0081               	movwf	1
 15228                           
 15229                           ;Buzzer_B1.c: 48: Buz->TimeValueBuffer2 = time;
 15230  0CB9  0021               	movlb	1	; select bank1
 15231  0CBA  0837               	movf	_Buz^(0+128),w
 15232  0CBB  3E0A               	addlw	10
 15233  0CBC  0086               	movwf	6
 15234  0CBD  0187               	clrf	7
 15235  0CBE  0020               	movlb	0	; select bank0
 15236  0CBF  0829               	movf	setBuz@time,w
 15237  0CC0  3FC0               	movwi [0]fsr1
 15238  0CC1  082A               	movf	setBuz@time+1,w
 15239  0CC2  3FC1               	movwi [1]fsr1
 15240  0CC3  0008               	return
 15241  0CC4                     __end_of_setBuz:	
 15242                           
 15243                           	psect	text96
 15244  152B                     __ptext96:	
 15245 ;; *************** function ___awdiv *****************
 15246 ;; Defined at:
 15247 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15248 ;; Parameters:    Size  Location     Type
 15249 ;;  divisor         2    0[BANK0 ] int 
 15250 ;;  dividend        2    2[BANK0 ] int 
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;  quotient        2    7[BANK0 ] int 
 15253 ;;  sign            1    6[BANK0 ] unsigned char 
 15254 ;;  counter         1    5[BANK0 ] unsigned char 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  2    0[BANK0 ] int 
 15257 ;; Registers used:
 15258 ;;		wreg, status,2, status,0
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15264 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;Total ram usage:        9 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; Hardware stack levels required when called:    5
 15271 ;; This function calls:
 15272 ;;		Nothing
 15273 ;; This function is called by:
 15274 ;;		_setBuz
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           
 15279                           ;psect for function ___awdiv
 15280  152B                     ___awdiv:	
 15281                           
 15282                           ;incstack = 0
 15283                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15284  152B  0020               	movlb	0	; select bank0
 15285  152C  01A6               	clrf	___awdiv@sign
 15286  152D  1FA1               	btfss	___awdiv@divisor+1,7
 15287  152E  2D36               	goto	l5422
 15288  152F  09A0               	comf	___awdiv@divisor,f
 15289  1530  09A1               	comf	___awdiv@divisor+1,f
 15290  1531  0AA0               	incf	___awdiv@divisor,f
 15291  1532  1903               	skipnz
 15292  1533  0AA1               	incf	___awdiv@divisor+1,f
 15293  1534  01A6               	clrf	___awdiv@sign
 15294  1535  0AA6               	incf	___awdiv@sign,f
 15295  1536                     l5422:	
 15296  1536  1FA3               	btfss	___awdiv@dividend+1,7
 15297  1537  2D41               	goto	l5428
 15298  1538  09A2               	comf	___awdiv@dividend,f
 15299  1539  09A3               	comf	___awdiv@dividend+1,f
 15300  153A  0AA2               	incf	___awdiv@dividend,f
 15301  153B  1903               	skipnz
 15302  153C  0AA3               	incf	___awdiv@dividend+1,f
 15303  153D  3001               	movlw	1
 15304  153E  00A4               	movwf	??___awdiv
 15305  153F  0824               	movf	??___awdiv,w
 15306  1540  06A6               	xorwf	___awdiv@sign,f
 15307  1541                     l5428:	
 15308  1541  01A7               	clrf	___awdiv@quotient
 15309  1542  01A8               	clrf	___awdiv@quotient+1
 15310  1543  0821               	movf	___awdiv@divisor+1,w
 15311  1544  0420               	iorwf	___awdiv@divisor,w
 15312  1545  1903               	skipnz
 15313  1546  2D70               	goto	l5450
 15314  1547  01A5               	clrf	___awdiv@counter
 15315  1548  0AA5               	incf	___awdiv@counter,f
 15316  1549                     l5438:	
 15317  1549  1BA1               	btfsc	___awdiv@divisor+1,7
 15318  154A  2D55               	goto	l5440
 15319  154B  3001               	movlw	1
 15320  154C                     u3995:	
 15321  154C  35A0               	lslf	___awdiv@divisor,f
 15322  154D  0DA1               	rlf	___awdiv@divisor+1,f
 15323  154E  0B89               	decfsz	9,f
 15324  154F  2D4C               	goto	u3995
 15325  1550  3001               	movlw	1
 15326  1551  00A4               	movwf	??___awdiv
 15327  1552  0824               	movf	??___awdiv,w
 15328  1553  07A5               	addwf	___awdiv@counter,f
 15329  1554  2D49               	goto	l5438
 15330  1555                     l5440:	
 15331  1555  3001               	movlw	1
 15332  1556                     u4015:	
 15333  1556  35A7               	lslf	___awdiv@quotient,f
 15334  1557  0DA8               	rlf	___awdiv@quotient+1,f
 15335  1558  0B89               	decfsz	9,f
 15336  1559  2D56               	goto	u4015
 15337  155A  0821               	movf	___awdiv@divisor+1,w
 15338  155B  0223               	subwf	___awdiv@dividend+1,w
 15339  155C  1D03               	skipz
 15340  155D  2D60               	goto	u4025
 15341  155E  0820               	movf	___awdiv@divisor,w
 15342  155F  0222               	subwf	___awdiv@dividend,w
 15343  1560                     u4025:	
 15344  1560  1C03               	skipc
 15345  1561  2D67               	goto	l5446
 15346  1562  0820               	movf	___awdiv@divisor,w
 15347  1563  02A2               	subwf	___awdiv@dividend,f
 15348  1564  0821               	movf	___awdiv@divisor+1,w
 15349  1565  3BA3               	subwfb	___awdiv@dividend+1,f
 15350  1566  1427               	bsf	___awdiv@quotient,0
 15351  1567                     l5446:	
 15352  1567  3001               	movlw	1
 15353  1568                     u4035:	
 15354  1568  36A1               	lsrf	___awdiv@divisor+1,f
 15355  1569  0CA0               	rrf	___awdiv@divisor,f
 15356  156A  0B89               	decfsz	9,f
 15357  156B  2D68               	goto	u4035
 15358  156C  3001               	movlw	1
 15359  156D  02A5               	subwf	___awdiv@counter,f
 15360  156E  1D03               	btfss	3,2
 15361  156F  2D55               	goto	l5440
 15362  1570                     l5450:	
 15363  1570  0826               	movf	___awdiv@sign,w
 15364  1571  1903               	btfsc	3,2
 15365  1572  2D78               	goto	l5454
 15366  1573  09A7               	comf	___awdiv@quotient,f
 15367  1574  09A8               	comf	___awdiv@quotient+1,f
 15368  1575  0AA7               	incf	___awdiv@quotient,f
 15369  1576  1903               	skipnz
 15370  1577  0AA8               	incf	___awdiv@quotient+1,f
 15371  1578                     l5454:	
 15372  1578  0828               	movf	___awdiv@quotient+1,w
 15373  1579  01A1               	clrf	?___awdiv+1
 15374  157A  07A1               	addwf	?___awdiv+1,f
 15375  157B  0827               	movf	___awdiv@quotient,w
 15376  157C  01A0               	clrf	?___awdiv
 15377  157D  07A0               	addwf	?___awdiv,f
 15378  157E  0008               	return
 15379  157F                     __end_of___awdiv:	
 15380                           
 15381                           	psect	text97
 15382  1BEF                     __ptext97:	
 15383 ;; *************** function _DelayOff_Initialization *****************
 15384 ;; Defined at:
 15385 ;;		line 26 in file "../src/DelayOff_B1.c"
 15386 ;; Parameters:    Size  Location     Type
 15387 ;;		None
 15388 ;; Auto vars:     Size  Location     Type
 15389 ;;		None
 15390 ;; Return value:  Size  Location     Type
 15391 ;;		None               void
 15392 ;; Registers used:
 15393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;Total ram usage:        0 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    7
 15406 ;; This function calls:
 15407 ;;		_DlyOff_Initialization
 15408 ;; This function is called by:
 15409 ;;		_main
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           
 15414                           ;psect for function _DelayOff_Initialization
 15415  1BEF                     _DelayOff_Initialization:	
 15416                           
 15417                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15418                           
 15419                           ;incstack = 0
 15420                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15421  1BEF  3001               	movlw	1
 15422  1BF0  319C  2477         	fcall	_DlyOff_Initialization
 15423  1BF2  0008               	return
 15424  1BF3                     __end_of_DelayOff_Initialization:	
 15425                           
 15426                           	psect	text98
 15427  1C77                     __ptext98:	
 15428 ;; *************** function _DlyOff_Initialization *****************
 15429 ;; Defined at:
 15430 ;;		line 56 in file "../src/DelayOff_B1.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;  sw              1    wreg     unsigned char 
 15433 ;; Auto vars:     Size  Location     Type
 15434 ;;  sw              1    2[BANK0 ] unsigned char 
 15435 ;; Return value:  Size  Location     Type
 15436 ;;		None               void
 15437 ;; Registers used:
 15438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;Total ram usage:        1 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; Hardware stack levels required when called:    6
 15451 ;; This function calls:
 15452 ;;		_DelayOffPointSelect
 15453 ;; This function is called by:
 15454 ;;		_DelayOff_Initialization
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           
 15459                           ;psect for function _DlyOff_Initialization
 15460  1C77                     _DlyOff_Initialization:	
 15461                           
 15462                           ;incstack = 0
 15463                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15464                           ;DlyOff_Initialization@sw stored from wreg
 15465  1C77  0020               	movlb	0	; select bank0
 15466  1C78  00A2               	movwf	DlyOff_Initialization@sw
 15467                           
 15468                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15469  1C79  0822               	movf	DlyOff_Initialization@sw,w
 15470  1C7A  319C  24B0         	fcall	_DelayOffPointSelect
 15471                           
 15472                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15473  1C7C  0021               	movlb	1	; select bank1
 15474  1C7D  0839               	movf	_DelayOff^(0+128),w
 15475  1C7E  0086               	movwf	6
 15476  1C7F  0187               	clrf	7
 15477  1C80  1401               	bsf	1,0
 15478  1C81  0008               	return
 15479  1C82                     __end_of_DlyOff_Initialization:	
 15480                           
 15481                           	psect	text99
 15482  1CB0                     __ptext99:	
 15483 ;; *************** function _DelayOffPointSelect *****************
 15484 ;; Defined at:
 15485 ;;		line 7 in file "../src/DelayOff_B1.c"
 15486 ;; Parameters:    Size  Location     Type
 15487 ;;  sw              1    wreg     unsigned char 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  sw              1    1[BANK0 ] unsigned char 
 15490 ;; Return value:  Size  Location     Type
 15491 ;;		None               void
 15492 ;; Registers used:
 15493 ;;		wreg
 15494 ;; Tracked objects:
 15495 ;;		On entry : 0/0
 15496 ;;		On exit  : 0/0
 15497 ;;		Unchanged: 0/0
 15498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;Total ram usage:        2 bytes
 15504 ;; Hardware stack levels used:    1
 15505 ;; Hardware stack levels required when called:    5
 15506 ;; This function calls:
 15507 ;;		Nothing
 15508 ;; This function is called by:
 15509 ;;		_DlyOff_Initialization
 15510 ;;		_DlyOff_Main
 15511 ;;		_setDelayOff_GO
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           
 15516                           ;psect for function _DelayOffPointSelect
 15517  1CB0                     _DelayOffPointSelect:	
 15518                           
 15519                           ;incstack = 0
 15520                           ; Regs used in _DelayOffPointSelect: [wreg]
 15521                           ;DelayOffPointSelect@sw stored from wreg
 15522  1CB0  0020               	movlb	0	; select bank0
 15523  1CB1  00A1               	movwf	DelayOffPointSelect@sw
 15524                           
 15525                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15526  1CB2  0821               	movf	DelayOffPointSelect@sw,w
 15527  1CB3  3A01               	xorlw	1
 15528  1CB4  1D03               	skipz
 15529  1CB5  0008               	return
 15530                           
 15531                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15532  1CB6  30D3               	movlw	_DlySw1& (0+255)
 15533  1CB7  00A0               	movwf	??_DelayOffPointSelect
 15534  1CB8  0820               	movf	??_DelayOffPointSelect,w
 15535  1CB9  0021               	movlb	1	; select bank1
 15536  1CBA  00B9               	movwf	_DelayOff^(0+128)
 15537  1CBB  0008               	return
 15538  1CBC                     __end_of_DelayOffPointSelect:	
 15539                           
 15540                           	psect	text100
 15541  1E25                     __ptext100:	
 15542 ;; *************** function _CC2500_PowerOnInitial *****************
 15543 ;; Defined at:
 15544 ;;		line 111 in file "../src/CC2500_B1.c"
 15545 ;; Parameters:    Size  Location     Type
 15546 ;;		None
 15547 ;; Auto vars:     Size  Location     Type
 15548 ;;		None
 15549 ;; Return value:  Size  Location     Type
 15550 ;;		None               void
 15551 ;; Registers used:
 15552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15553 ;; Tracked objects:
 15554 ;;		On entry : 0/0
 15555 ;;		On exit  : 0/0
 15556 ;;		Unchanged: 0/0
 15557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;Total ram usage:        0 bytes
 15563 ;; Hardware stack levels used:    1
 15564 ;; Hardware stack levels required when called:    8
 15565 ;; This function calls:
 15566 ;;		_CC2500_ClearRXFIFO
 15567 ;;		_CC2500_ClearTXFIFO
 15568 ;;		_CC2500_FrequencyCabr
 15569 ;;		_CC2500_InitPATable
 15570 ;;		_CC2500_InitSetREG
 15571 ;;		_CC2500_PowerRST
 15572 ;;		_CC2500_SIDLEMode
 15573 ;; This function is called by:
 15574 ;;		_main
 15575 ;; This function uses a non-reentrant model
 15576 ;;
 15577                           
 15578                           
 15579                           ;psect for function _CC2500_PowerOnInitial
 15580  1E25                     _CC2500_PowerOnInitial:	
 15581                           
 15582                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 15583                           
 15584                           ;incstack = 0
 15585                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15586  1E25  3191  2196  319E   	fcall	_CC2500_PowerRST
 15587                           
 15588                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 15589  1E28  3190  20E6  319E   	fcall	_CC2500_InitSetREG
 15590                           
 15591                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 15592  1E2B  319F  273E  319E   	fcall	_CC2500_InitPATable
 15593                           
 15594                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 15595  1E2E  319B  23E7  319E   	fcall	_CC2500_ClearTXFIFO
 15596                           
 15597                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 15598  1E31  319B  23E3  319E   	fcall	_CC2500_ClearRXFIFO
 15599                           
 15600                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 15601  1E34  319C  24A4  319E   	fcall	_CC2500_FrequencyCabr
 15602                           
 15603                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 15604  1E37  319B  23EB         	fcall	_CC2500_SIDLEMode
 15605  1E39  0008               	return
 15606  1E3A                     __end_of_CC2500_PowerOnInitial:	
 15607                           
 15608                           	psect	text101
 15609  1BEB                     __ptext101:	
 15610 ;; *************** function _CC2500_SIDLEMode *****************
 15611 ;; Defined at:
 15612 ;;		line 195 in file "../src/CC2500_B1.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;		None
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;		None
 15617 ;; Return value:  Size  Location     Type
 15618 ;;		None               void
 15619 ;; Registers used:
 15620 ;;		wreg, status,2, status,0, pclath, cstack
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;Total ram usage:        0 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    7
 15633 ;; This function calls:
 15634 ;;		_CC2500_WriteCommand
 15635 ;; This function is called by:
 15636 ;;		_CC2500_PowerOnInitial
 15637 ;; This function uses a non-reentrant model
 15638 ;;
 15639                           
 15640                           
 15641                           ;psect for function _CC2500_SIDLEMode
 15642  1BEB                     _CC2500_SIDLEMode:	
 15643                           
 15644                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 15645                           
 15646                           ;incstack = 0
 15647                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 15648  1BEB  3036               	movlw	54
 15649  1BEC  319D  2569         	fcall	_CC2500_WriteCommand
 15650  1BEE  0008               	return
 15651  1BEF                     __end_of_CC2500_SIDLEMode:	
 15652                           
 15653                           	psect	text102
 15654  1196                     __ptext102:	
 15655 ;; *************** function _CC2500_PowerRST *****************
 15656 ;; Defined at:
 15657 ;;		line 124 in file "../src/CC2500_B1.c"
 15658 ;; Parameters:    Size  Location     Type
 15659 ;;		None
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;		None               void
 15664 ;; Registers used:
 15665 ;;		wreg, status,2, status,0, pclath, cstack
 15666 ;; Tracked objects:
 15667 ;;		On entry : 0/0
 15668 ;;		On exit  : 0/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;Total ram usage:        1 bytes
 15676 ;; Hardware stack levels used:    1
 15677 ;; Hardware stack levels required when called:    6
 15678 ;; This function calls:
 15679 ;;		_CC2500_WriteByte
 15680 ;;		_DelayTime_1us
 15681 ;; This function is called by:
 15682 ;;		_CC2500_PowerOnInitial
 15683 ;; This function uses a non-reentrant model
 15684 ;;
 15685                           
 15686                           
 15687                           ;psect for function _CC2500_PowerRST
 15688  1196                     _CC2500_PowerRST:	
 15689                           
 15690                           ;CC2500_B1.c: 125: RC1 = 0;
 15691                           
 15692                           ;incstack = 0
 15693                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 15694  1196  0020               	movlb	0	; select bank0
 15695  1197  108E               	bcf	14,1	;volatile
 15696                           
 15697                           ;CC2500_B1.c: 126: RC0 = 0;
 15698  1198  100E               	bcf	14,0	;volatile
 15699                           
 15700                           ;CC2500_B1.c: 127: RC4 = 1;
 15701  1199  160E               	bsf	14,4	;volatile
 15702                           
 15703                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 15704  119A  300A               	movlw	10
 15705  119B  00A0               	movwf	DelayTime_1us@count
 15706  119C  3000               	movlw	0
 15707  119D  00A1               	movwf	DelayTime_1us@count+1
 15708  119E  3190  2099  3191   	fcall	_DelayTime_1us
 15709                           
 15710                           ;CC2500_B1.c: 129: RC4 = 0;
 15711  11A1  0020               	movlb	0	; select bank0
 15712  11A2  120E               	bcf	14,4	;volatile
 15713                           
 15714                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 15715  11A3  300A               	movlw	10
 15716  11A4  00A0               	movwf	DelayTime_1us@count
 15717  11A5  3000               	movlw	0
 15718  11A6  00A1               	movwf	DelayTime_1us@count+1
 15719  11A7  3190  2099  3191   	fcall	_DelayTime_1us
 15720                           
 15721                           ;CC2500_B1.c: 131: RC4 = 1;
 15722  11AA  0020               	movlb	0	; select bank0
 15723  11AB  160E               	bsf	14,4	;volatile
 15724                           
 15725                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 15726  11AC  3028               	movlw	40
 15727  11AD  00A0               	movwf	DelayTime_1us@count
 15728  11AE  3000               	movlw	0
 15729  11AF  00A1               	movwf	DelayTime_1us@count+1
 15730  11B0  3190  2099  3191   	fcall	_DelayTime_1us
 15731                           
 15732                           ;CC2500_B1.c: 133: RC4 = 0;
 15733  11B3  0020               	movlb	0	; select bank0
 15734  11B4  120E               	bcf	14,4	;volatile
 15735                           
 15736                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 15737  11B5  3030               	movlw	48
 15738  11B6  00A6               	movwf	??_CC2500_PowerRST
 15739  11B7  0826               	movf	??_CC2500_PowerRST,w
 15740  11B8  0021               	movlb	1	; select bank1
 15741  11B9  00C2               	movwf	_SPI0Buffer^(0+128)
 15742  11BA                     l290:	
 15743                           ;CC2500_B1.c: 135: while (RC2 == 1);
 15744                           
 15745  11BA  0020               	movlb	0	; select bank0
 15746  11BB  190E               	btfsc	14,2	;volatile
 15747  11BC  29BA               	goto	l290
 15748                           
 15749                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 15750  11BD  319E  2668  3191   	fcall	_CC2500_WriteByte
 15751  11C0                     l293:	
 15752                           ;CC2500_B1.c: 137: while (RC2 == 1);
 15753                           
 15754  11C0  0020               	movlb	0	; select bank0
 15755  11C1  190E               	btfsc	14,2	;volatile
 15756  11C2  29C0               	goto	l293
 15757                           
 15758                           ;CC2500_B1.c: 138: RC0 = 0;
 15759  11C3  100E               	bcf	14,0	;volatile
 15760                           
 15761                           ;CC2500_B1.c: 139: RC4 = 1;
 15762  11C4  160E               	bsf	14,4	;volatile
 15763  11C5  0008               	return
 15764  11C6                     __end_of_CC2500_PowerRST:	
 15765                           
 15766                           	psect	text103
 15767  10E6                     __ptext103:	
 15768 ;; *************** function _CC2500_InitSetREG *****************
 15769 ;; Defined at:
 15770 ;;		line 145 in file "../src/CC2500_B1.c"
 15771 ;; Parameters:    Size  Location     Type
 15772 ;;		None
 15773 ;; Auto vars:     Size  Location     Type
 15774 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15775 ;;  temp2           1    7[BANK0 ] unsigned char 
 15776 ;;  temp1           1    6[BANK0 ] unsigned char 
 15777 ;; Return value:  Size  Location     Type
 15778 ;;		None               void
 15779 ;; Registers used:
 15780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;Total ram usage:        4 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:    7
 15793 ;; This function calls:
 15794 ;;		_CC2500_WriteREG
 15795 ;; This function is called by:
 15796 ;;		_CC2500_PowerOnInitial
 15797 ;; This function uses a non-reentrant model
 15798 ;;
 15799                           
 15800                           
 15801                           ;psect for function _CC2500_InitSetREG
 15802  10E6                     _CC2500_InitSetREG:	
 15803                           
 15804                           ;CC2500_B1.c: 146: unsigned char loop_c;
 15805                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 15806                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 15807                           
 15808                           ;incstack = 0
 15809                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15810  10E6  0020               	movlb	0	; select bank0
 15811  10E7  01A8               	clrf	CC2500_InitSetREG@loop_c
 15812  10E8                     L10:	
 15813  10E8  302F               	movlw	47
 15814  10E9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15815  10EA  1803               	btfsc	3,0
 15816  10EB  0008               	return
 15817                           
 15818                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 15819  10EC  0828               	movf	CC2500_InitSetREG@loop_c,w
 15820  10ED  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15821  10EE  0084               	movwf	4
 15822  10EF  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15823  10F0  1803               	skipnc
 15824  10F1  3E01               	addlw	1
 15825  10F2  0085               	movwf	5
 15826  10F3  0800               	movf	0,w	;code access
 15827  10F4  00A5               	movwf	??_CC2500_InitSetREG
 15828  10F5  0825               	movf	??_CC2500_InitSetREG,w
 15829  10F6  00A6               	movwf	CC2500_InitSetREG@temp1
 15830                           
 15831                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 15832  10F7  0828               	movf	CC2500_InitSetREG@loop_c,w
 15833  10F8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15834  10F9  0084               	movwf	4
 15835  10FA  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15836  10FB  1803               	skipnc
 15837  10FC  3E01               	addlw	1
 15838  10FD  0085               	movwf	5
 15839  10FE  0800               	movf	0,w	;code access
 15840  10FF  00A5               	movwf	??_CC2500_InitSetREG
 15841  1100  0825               	movf	??_CC2500_InitSetREG,w
 15842  1101  00A7               	movwf	CC2500_InitSetREG@temp2
 15843                           
 15844                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 15845  1102  0827               	movf	CC2500_InitSetREG@temp2,w
 15846  1103  00A5               	movwf	??_CC2500_InitSetREG
 15847  1104  0825               	movf	??_CC2500_InitSetREG,w
 15848  1105  00A2               	movwf	CC2500_WriteREG@value
 15849  1106  0826               	movf	CC2500_InitSetREG@temp1,w
 15850  1107  319E  2681  3190   	fcall	_CC2500_WriteREG
 15851  110A  3001               	movlw	1
 15852  110B  0020               	movlb	0	; select bank0
 15853  110C  00A5               	movwf	??_CC2500_InitSetREG
 15854  110D  0825               	movf	??_CC2500_InitSetREG,w
 15855  110E  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15856  110F  28E8               	goto	L10
 15857  1110                     __end_of_CC2500_InitSetREG:	
 15858                           
 15859                           	psect	text104
 15860  1F3E                     __ptext104:	
 15861 ;; *************** function _CC2500_InitPATable *****************
 15862 ;; Defined at:
 15863 ;;		line 160 in file "../src/CC2500_B1.c"
 15864 ;; Parameters:    Size  Location     Type
 15865 ;;		None
 15866 ;; Auto vars:     Size  Location     Type
 15867 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15868 ;;  temp            1    6[BANK0 ] unsigned char 
 15869 ;; Return value:  Size  Location     Type
 15870 ;;		None               void
 15871 ;; Registers used:
 15872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        3 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    7
 15885 ;; This function calls:
 15886 ;;		_CC2500_WriteREG
 15887 ;; This function is called by:
 15888 ;;		_CC2500_PowerOnInitial
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           
 15893                           ;psect for function _CC2500_InitPATable
 15894  1F3E                     _CC2500_InitPATable:	
 15895                           
 15896                           ;CC2500_B1.c: 161: unsigned char loop_d;
 15897                           ;CC2500_B1.c: 162: unsigned char temp;
 15898                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 15899                           
 15900                           ;incstack = 0
 15901                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15902  1F3E  0020               	movlb	0	; select bank0
 15903  1F3F  01A7               	clrf	CC2500_InitPATable@loop_d
 15904  1F40                     L11:	
 15905  1F40  3008               	movlw	8
 15906  1F41  0227               	subwf	CC2500_InitPATable@loop_d,w
 15907  1F42  1803               	btfsc	3,0
 15908  1F43  0008               	return
 15909                           
 15910                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 15911  1F44  0827               	movf	CC2500_InitPATable@loop_d,w
 15912  1F45  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15913  1F46  0084               	movwf	4
 15914  1F47  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15915  1F48  1803               	skipnc
 15916  1F49  3E01               	addlw	1
 15917  1F4A  0085               	movwf	5
 15918  1F4B  0800               	movf	0,w	;code access
 15919  1F4C  00A5               	movwf	??_CC2500_InitPATable
 15920  1F4D  0825               	movf	??_CC2500_InitPATable,w
 15921  1F4E  00A6               	movwf	CC2500_InitPATable@temp
 15922                           
 15923                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 15924  1F4F  0826               	movf	CC2500_InitPATable@temp,w
 15925  1F50  00A5               	movwf	??_CC2500_InitPATable
 15926  1F51  0825               	movf	??_CC2500_InitPATable,w
 15927  1F52  00A2               	movwf	CC2500_WriteREG@value
 15928  1F53  303E               	movlw	62
 15929  1F54  319E  2681  319F   	fcall	_CC2500_WriteREG
 15930  1F57  3001               	movlw	1
 15931  1F58  0020               	movlb	0	; select bank0
 15932  1F59  00A5               	movwf	??_CC2500_InitPATable
 15933  1F5A  0825               	movf	??_CC2500_InitPATable,w
 15934  1F5B  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15935  1F5C  2F40               	goto	L11
 15936  1F5D                     __end_of_CC2500_InitPATable:	
 15937                           
 15938                           	psect	text105
 15939  1E81                     __ptext105:	
 15940 ;; *************** function _CC2500_WriteREG *****************
 15941 ;; Defined at:
 15942 ;;		line 237 in file "../src/CC2500_B1.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;  w_addr          1    wreg     unsigned char 
 15945 ;;  value           1    2[BANK0 ] unsigned char 
 15946 ;; Auto vars:     Size  Location     Type
 15947 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15948 ;; Return value:  Size  Location     Type
 15949 ;;		None               void
 15950 ;; Registers used:
 15951 ;;		wreg, status,2, status,0, pclath, cstack
 15952 ;; Tracked objects:
 15953 ;;		On entry : 0/0
 15954 ;;		On exit  : 0/0
 15955 ;;		Unchanged: 0/0
 15956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15957 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;Total ram usage:        3 bytes
 15962 ;; Hardware stack levels used:    1
 15963 ;; Hardware stack levels required when called:    6
 15964 ;; This function calls:
 15965 ;;		_CC2500_WriteByte
 15966 ;; This function is called by:
 15967 ;;		_CC2500_InitSetREG
 15968 ;;		_CC2500_InitPATable
 15969 ;; This function uses a non-reentrant model
 15970 ;;
 15971                           
 15972                           
 15973                           ;psect for function _CC2500_WriteREG
 15974  1E81                     _CC2500_WriteREG:	
 15975                           
 15976                           ;incstack = 0
 15977                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 15978                           ;CC2500_WriteREG@w_addr stored from wreg
 15979  1E81  0020               	movlb	0	; select bank0
 15980  1E82  00A4               	movwf	CC2500_WriteREG@w_addr
 15981                           
 15982                           ;CC2500_B1.c: 238: RC4 = 0;
 15983  1E83  120E               	bcf	14,4	;volatile
 15984                           
 15985                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 15986  1E84  0824               	movf	CC2500_WriteREG@w_addr,w
 15987  1E85  00A3               	movwf	??_CC2500_WriteREG
 15988  1E86  0823               	movf	??_CC2500_WriteREG,w
 15989  1E87  0021               	movlb	1	; select bank1
 15990  1E88  00C2               	movwf	_SPI0Buffer^(0+128)
 15991  1E89                     l335:	
 15992                           ;CC2500_B1.c: 240: while (RC2 == 1);
 15993                           
 15994  1E89  0020               	movlb	0	; select bank0
 15995  1E8A  190E               	btfsc	14,2	;volatile
 15996  1E8B  2E89               	goto	l335
 15997                           
 15998                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 15999  1E8C  319E  2668  319E   	fcall	_CC2500_WriteByte
 16000                           
 16001                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 16002  1E8F  0020               	movlb	0	; select bank0
 16003  1E90  0822               	movf	CC2500_WriteREG@value,w
 16004  1E91  00A3               	movwf	??_CC2500_WriteREG
 16005  1E92  0823               	movf	??_CC2500_WriteREG,w
 16006  1E93  0021               	movlb	1	; select bank1
 16007  1E94  00C2               	movwf	_SPI0Buffer^(0+128)
 16008                           
 16009                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 16010  1E95  319E  2668         	fcall	_CC2500_WriteByte
 16011                           
 16012                           ;CC2500_B1.c: 244: RC4 = 1;
 16013  1E97  0020               	movlb	0	; select bank0
 16014  1E98  160E               	bsf	14,4	;volatile
 16015  1E99  0008               	return
 16016  1E9A                     __end_of_CC2500_WriteREG:	
 16017                           
 16018                           	psect	text106
 16019  1CA4                     __ptext106:	
 16020 ;; *************** function _CC2500_FrequencyCabr *****************
 16021 ;; Defined at:
 16022 ;;		line 187 in file "../src/CC2500_B1.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;		None
 16025 ;; Auto vars:     Size  Location     Type
 16026 ;;		None
 16027 ;; Return value:  Size  Location     Type
 16028 ;;		None               void
 16029 ;; Registers used:
 16030 ;;		wreg, status,2, status,0, pclath, cstack
 16031 ;; Tracked objects:
 16032 ;;		On entry : 0/0
 16033 ;;		On exit  : 0/0
 16034 ;;		Unchanged: 0/0
 16035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;Total ram usage:        0 bytes
 16041 ;; Hardware stack levels used:    1
 16042 ;; Hardware stack levels required when called:    7
 16043 ;; This function calls:
 16044 ;;		_CC2500_WriteCommand
 16045 ;;		_DelayTime_1us
 16046 ;; This function is called by:
 16047 ;;		_CC2500_PowerOnInitial
 16048 ;; This function uses a non-reentrant model
 16049 ;;
 16050                           
 16051                           
 16052                           ;psect for function _CC2500_FrequencyCabr
 16053  1CA4                     _CC2500_FrequencyCabr:	
 16054                           
 16055                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 16056                           
 16057                           ;incstack = 0
 16058                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 16059  1CA4  3033               	movlw	51
 16060  1CA5  319D  2569  319C   	fcall	_CC2500_WriteCommand
 16061                           
 16062                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 16063  1CA8  30E8               	movlw	232
 16064  1CA9  0020               	movlb	0	; select bank0
 16065  1CAA  00A0               	movwf	DelayTime_1us@count
 16066  1CAB  3003               	movlw	3
 16067  1CAC  00A1               	movwf	DelayTime_1us@count+1
 16068  1CAD  3190  2099         	fcall	_DelayTime_1us
 16069  1CAF  0008               	return
 16070  1CB0                     __end_of_CC2500_FrequencyCabr:	
 16071                           
 16072                           	psect	text107
 16073  1099                     __ptext107:	
 16074 ;; *************** function _DelayTime_1us *****************
 16075 ;; Defined at:
 16076 ;;		line 293 in file "../src/CC2500_B1.c"
 16077 ;; Parameters:    Size  Location     Type
 16078 ;;  count           2    0[BANK0 ] int 
 16079 ;; Auto vars:     Size  Location     Type
 16080 ;;  j               2    4[BANK0 ] unsigned int 
 16081 ;;  i               2    2[BANK0 ] unsigned int 
 16082 ;; Return value:  Size  Location     Type
 16083 ;;		None               void
 16084 ;; Registers used:
 16085 ;;		wreg, status,2
 16086 ;; Tracked objects:
 16087 ;;		On entry : 0/0
 16088 ;;		On exit  : 0/0
 16089 ;;		Unchanged: 0/0
 16090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;Total ram usage:        6 bytes
 16096 ;; Hardware stack levels used:    1
 16097 ;; Hardware stack levels required when called:    5
 16098 ;; This function calls:
 16099 ;;		Nothing
 16100 ;; This function is called by:
 16101 ;;		_CC2500_PowerRST
 16102 ;;		_CC2500_FrequencyCabr
 16103 ;; This function uses a non-reentrant model
 16104 ;;
 16105                           
 16106                           
 16107                           ;psect for function _DelayTime_1us
 16108  1099                     _DelayTime_1us:	
 16109                           
 16110                           ;CC2500_B1.c: 294: unsigned int i, j;
 16111                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 16112                           
 16113                           ;incstack = 0
 16114                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16115  1099  3001               	movlw	1
 16116  109A  0020               	movlb	0	; select bank0
 16117  109B  00A2               	movwf	DelayTime_1us@i
 16118  109C  3000               	movlw	0
 16119  109D  00A3               	movwf	DelayTime_1us@i+1
 16120  109E                     l359:	
 16121  109E  0821               	movf	DelayTime_1us@count+1,w
 16122  109F  0223               	subwf	DelayTime_1us@i+1,w
 16123  10A0  1D03               	skipz
 16124  10A1  28A4               	goto	u4745
 16125  10A2  0820               	movf	DelayTime_1us@count,w
 16126  10A3  0222               	subwf	DelayTime_1us@i,w
 16127  10A4                     u4745:	
 16128  10A4  1803               	btfsc	3,0
 16129  10A5  0008               	return
 16130                           
 16131                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 16132  10A6  01A4               	clrf	DelayTime_1us@j
 16133  10A7  01A5               	clrf	DelayTime_1us@j+1
 16134  10A8  3000               	movlw	0
 16135  10A9  0225               	subwf	DelayTime_1us@j+1,w
 16136  10AA  3002               	movlw	2
 16137  10AB  1903               	skipnz
 16138  10AC  0224               	subwf	DelayTime_1us@j,w
 16139  10AD  1803               	btfsc	3,0
 16140  10AE  28BA               	goto	l5974
 16141  10AF                     l5972:	
 16142  10AF  3001               	movlw	1
 16143  10B0  07A4               	addwf	DelayTime_1us@j,f
 16144  10B1  3000               	movlw	0
 16145  10B2  3DA5               	addwfc	DelayTime_1us@j+1,f
 16146  10B3  3000               	movlw	0
 16147  10B4  0225               	subwf	DelayTime_1us@j+1,w
 16148  10B5  3002               	movlw	2
 16149  10B6  1903               	skipnz
 16150  10B7  0224               	subwf	DelayTime_1us@j,w
 16151  10B8  1C03               	skipc
 16152  10B9  28AF               	goto	l5972
 16153  10BA                     l5974:	
 16154  10BA  3001               	movlw	1
 16155  10BB  07A2               	addwf	DelayTime_1us@i,f
 16156  10BC  3000               	movlw	0
 16157  10BD  3DA3               	addwfc	DelayTime_1us@i+1,f
 16158  10BE  289E               	goto	l359
 16159  10BF                     __end_of_DelayTime_1us:	
 16160                           
 16161                           	psect	text108
 16162  1BE7                     __ptext108:	
 16163 ;; *************** function _CC2500_ClearTXFIFO *****************
 16164 ;; Defined at:
 16165 ;;		line 173 in file "../src/CC2500_B1.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;		None
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;		None
 16170 ;; Return value:  Size  Location     Type
 16171 ;;		None               void
 16172 ;; Registers used:
 16173 ;;		wreg, status,2, status,0, pclath, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;Total ram usage:        0 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    7
 16186 ;; This function calls:
 16187 ;;		_CC2500_WriteCommand
 16188 ;; This function is called by:
 16189 ;;		_CC2500_PowerOnInitial
 16190 ;; This function uses a non-reentrant model
 16191 ;;
 16192                           
 16193                           
 16194                           ;psect for function _CC2500_ClearTXFIFO
 16195  1BE7                     _CC2500_ClearTXFIFO:	
 16196                           
 16197                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 16198                           
 16199                           ;incstack = 0
 16200                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16201  1BE7  303B               	movlw	59
 16202  1BE8  319D  2569         	fcall	_CC2500_WriteCommand
 16203  1BEA  0008               	return
 16204  1BEB                     __end_of_CC2500_ClearTXFIFO:	
 16205                           
 16206                           	psect	text109
 16207  1BE3                     __ptext109:	
 16208 ;; *************** function _CC2500_ClearRXFIFO *****************
 16209 ;; Defined at:
 16210 ;;		line 180 in file "../src/CC2500_B1.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;		None
 16213 ;; Auto vars:     Size  Location     Type
 16214 ;;		None
 16215 ;; Return value:  Size  Location     Type
 16216 ;;		None               void
 16217 ;; Registers used:
 16218 ;;		wreg, status,2, status,0, pclath, cstack
 16219 ;; Tracked objects:
 16220 ;;		On entry : 0/0
 16221 ;;		On exit  : 0/0
 16222 ;;		Unchanged: 0/0
 16223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;Total ram usage:        0 bytes
 16229 ;; Hardware stack levels used:    1
 16230 ;; Hardware stack levels required when called:    7
 16231 ;; This function calls:
 16232 ;;		_CC2500_WriteCommand
 16233 ;; This function is called by:
 16234 ;;		_CC2500_PowerOnInitial
 16235 ;; This function uses a non-reentrant model
 16236 ;;
 16237                           
 16238                           
 16239                           ;psect for function _CC2500_ClearRXFIFO
 16240  1BE3                     _CC2500_ClearRXFIFO:	
 16241                           
 16242                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 16243                           
 16244                           ;incstack = 0
 16245                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16246  1BE3  303A               	movlw	58
 16247  1BE4  319D  2569         	fcall	_CC2500_WriteCommand
 16248  1BE6  0008               	return
 16249  1BE7                     __end_of_CC2500_ClearRXFIFO:	
 16250                           
 16251                           	psect	text110
 16252  1D69                     __ptext110:	
 16253 ;; *************** function _CC2500_WriteCommand *****************
 16254 ;; Defined at:
 16255 ;;		line 263 in file "../src/CC2500_B1.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  command         1    wreg     unsigned char 
 16258 ;; Auto vars:     Size  Location     Type
 16259 ;;  command         1    3[BANK0 ] unsigned char 
 16260 ;; Return value:  Size  Location     Type
 16261 ;;		None               void
 16262 ;; Registers used:
 16263 ;;		wreg, status,2, status,0, pclath, cstack
 16264 ;; Tracked objects:
 16265 ;;		On entry : 0/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;Total ram usage:        2 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; Hardware stack levels required when called:    6
 16276 ;; This function calls:
 16277 ;;		_CC2500_WriteByte
 16278 ;; This function is called by:
 16279 ;;		_CC2500_TxData
 16280 ;;		_CC2500_RxData
 16281 ;;		_CC2500_ClearTXFIFO
 16282 ;;		_CC2500_ClearRXFIFO
 16283 ;;		_CC2500_FrequencyCabr
 16284 ;;		_CC2500_SIDLEMode
 16285 ;;		_setRF_Main
 16286 ;;		_RF_RxDisable
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           
 16291                           ;psect for function _CC2500_WriteCommand
 16292  1D69                     _CC2500_WriteCommand:	
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 16296                           ;CC2500_WriteCommand@command stored from wreg
 16297  1D69  0020               	movlb	0	; select bank0
 16298  1D6A  00A3               	movwf	CC2500_WriteCommand@command
 16299                           
 16300                           ;CC2500_B1.c: 264: RC4 = 0;
 16301  1D6B  120E               	bcf	14,4	;volatile
 16302                           
 16303                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 16304  1D6C  0823               	movf	CC2500_WriteCommand@command,w
 16305  1D6D  00A2               	movwf	??_CC2500_WriteCommand
 16306  1D6E  0822               	movf	??_CC2500_WriteCommand,w
 16307  1D6F  0021               	movlb	1	; select bank1
 16308  1D70  00C2               	movwf	_SPI0Buffer^(0+128)
 16309  1D71                     l347:	
 16310                           ;CC2500_B1.c: 267: while (RC2 == 1);
 16311                           
 16312  1D71  0020               	movlb	0	; select bank0
 16313  1D72  190E               	btfsc	14,2	;volatile
 16314  1D73  2D71               	goto	l347
 16315                           
 16316                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 16317  1D74  319E  2668         	fcall	_CC2500_WriteByte
 16318                           
 16319                           ;CC2500_B1.c: 270: RC4 = 1;
 16320  1D76  0020               	movlb	0	; select bank0
 16321  1D77  160E               	bsf	14,4	;volatile
 16322  1D78  0008               	return
 16323  1D79                     __end_of_CC2500_WriteCommand:	
 16324                           
 16325                           	psect	text111
 16326  1E68                     __ptext111:	
 16327 ;; *************** function _CC2500_WriteByte *****************
 16328 ;; Defined at:
 16329 ;;		line 205 in file "../src/CC2500_B1.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;		None
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16334 ;; Return value:  Size  Location     Type
 16335 ;;		None               void
 16336 ;; Registers used:
 16337 ;;		wreg, status,2, status,0
 16338 ;; Tracked objects:
 16339 ;;		On entry : 0/0
 16340 ;;		On exit  : 0/0
 16341 ;;		Unchanged: 0/0
 16342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;Total ram usage:        2 bytes
 16348 ;; Hardware stack levels used:    1
 16349 ;; Hardware stack levels required when called:    5
 16350 ;; This function calls:
 16351 ;;		Nothing
 16352 ;; This function is called by:
 16353 ;;		_CC2500_TxData
 16354 ;;		_CC2500_RxData
 16355 ;;		_CC2500_PowerRST
 16356 ;;		_CC2500_WriteREG
 16357 ;;		_CC2500_WriteCommand
 16358 ;;		_CC2500_ReadStatus
 16359 ;;		_CC2500_ReadREG
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           
 16364                           ;psect for function _CC2500_WriteByte
 16365  1E68                     _CC2500_WriteByte:	
 16366                           
 16367                           ;CC2500_B1.c: 206: unsigned char loop_a;
 16368                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 16369                           
 16370                           ;incstack = 0
 16371                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16372  1E68  0020               	movlb	0	; select bank0
 16373  1E69  01A1               	clrf	CC2500_WriteByte@loop_a
 16374  1E6A                     L12:	
 16375  1E6A  3008               	movlw	8
 16376  1E6B  0221               	subwf	CC2500_WriteByte@loop_a,w
 16377  1E6C  1803               	btfsc	3,0
 16378  1E6D  0008               	return
 16379                           
 16380                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 16381  1E6E  0021               	movlb	1	; select bank1
 16382  1E6F  1FC2               	btfss	_SPI0Buffer^(0+128),7
 16383  1E70  2E74               	goto	l323
 16384                           
 16385                           ;CC2500_B1.c: 209: RC0 = 1;
 16386  1E71  0020               	movlb	0	; select bank0
 16387  1E72  140E               	bsf	14,0	;volatile
 16388  1E73  2E76               	goto	l324
 16389  1E74                     l323:	
 16390                           
 16391                           ;CC2500_B1.c: 210: else
 16392                           ;CC2500_B1.c: 211: RC0 = 0;
 16393  1E74  0020               	movlb	0	; select bank0
 16394  1E75  100E               	bcf	14,0	;volatile
 16395  1E76                     l324:	
 16396                           
 16397                           ;CC2500_B1.c: 212: RC1 = 1;
 16398  1E76  148E               	bsf	14,1	;volatile
 16399                           
 16400                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 16401  1E77  1003               	clrc
 16402  1E78  0021               	movlb	1	; select bank1
 16403  1E79  0DC2               	rlf	_SPI0Buffer^(0+128),f
 16404                           
 16405                           ;CC2500_B1.c: 214: RC1 = 0;
 16406  1E7A  0020               	movlb	0	; select bank0
 16407  1E7B  108E               	bcf	14,1	;volatile
 16408  1E7C  3001               	movlw	1
 16409  1E7D  00A0               	movwf	??_CC2500_WriteByte
 16410  1E7E  0820               	movf	??_CC2500_WriteByte,w
 16411  1E7F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16412  1E80  2E6A               	goto	L12
 16413  1E81                     __end_of_CC2500_WriteByte:	
 16414                           
 16415                           	psect	text112
 16416  0E9D                     __ptext112:	
 16417 ;; *************** function _Buzzer_Main *****************
 16418 ;; Defined at:
 16419 ;;		line 55 in file "../src/Buzzer_B1.c"
 16420 ;; Parameters:    Size  Location     Type
 16421 ;;		None
 16422 ;; Auto vars:     Size  Location     Type
 16423 ;;		None
 16424 ;; Return value:  Size  Location     Type
 16425 ;;		None               void
 16426 ;; Registers used:
 16427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16428 ;; Tracked objects:
 16429 ;;		On entry : 0/0
 16430 ;;		On exit  : 0/0
 16431 ;;		Unchanged: 0/0
 16432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;Total ram usage:        4 bytes
 16438 ;; Hardware stack levels used:    1
 16439 ;; Hardware stack levels required when called:    5
 16440 ;; This function calls:
 16441 ;;		Nothing
 16442 ;; This function is called by:
 16443 ;;		_main
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           
 16448                           ;psect for function _Buzzer_Main
 16449  0E9D                     _Buzzer_Main:	
 16450                           
 16451                           ;Buzzer_B1.c: 56: Buz = &Buz1;
 16452                           
 16453                           ;incstack = 0
 16454                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 16455  0E9D  30C7               	movlw	_Buz1& (0+255)
 16456  0E9E  0020               	movlb	0	; select bank0
 16457  0E9F  00A0               	movwf	??_Buzzer_Main
 16458  0EA0  0820               	movf	??_Buzzer_Main,w
 16459  0EA1  0021               	movlb	1	; select bank1
 16460  0EA2  00B7               	movwf	_Buz^(0+128)
 16461                           
 16462                           ;Buzzer_B1.c: 57: if (Buz->GO == 1) {
 16463  0EA3  0837               	movf	_Buz^(0+128),w
 16464  0EA4  0086               	movwf	6
 16465  0EA5  0187               	clrf	7
 16466  0EA6  1C81               	btfss	1,1
 16467  0EA7  0008               	return
 16468                           
 16469                           ;Buzzer_B1.c: 58: Buz->Counter++;
 16470  0EA8  0A37               	incf	_Buz^(0+128),w
 16471  0EA9  0086               	movwf	6
 16472  0EAA  0187               	clrf	7
 16473  0EAB  3001               	movlw	1
 16474  0EAC  0781               	addwf	1,f
 16475  0EAD  3141               	addfsr 1,1
 16476  0EAE  1803               	skipnc
 16477  0EAF  0A81               	incf	1,f
 16478                           
 16479                           ;Buzzer_B1.c: 59: if (Buz->Counter >= Buz->TimeValue) {
 16480  0EB0  0837               	movf	_Buz^(0+128),w
 16481  0EB1  3E06               	addlw	6
 16482  0EB2  0086               	movwf	6
 16483  0EB3  0187               	clrf	7
 16484  0EB4  3F40               	moviw [0]fsr1
 16485  0EB5  0020               	movlb	0	; select bank0
 16486  0EB6  00A0               	movwf	??_Buzzer_Main
 16487  0EB7  3F41               	moviw [1]fsr1
 16488  0EB8  00A1               	movwf	??_Buzzer_Main+1
 16489  0EB9  0021               	movlb	1	; select bank1
 16490  0EBA  0A37               	incf	_Buz^(0+128),w
 16491  0EBB  0086               	movwf	6
 16492  0EBC  0187               	clrf	7
 16493  0EBD  3F40               	moviw [0]fsr1
 16494  0EBE  0020               	movlb	0	; select bank0
 16495  0EBF  00A2               	movwf	??_Buzzer_Main+2
 16496  0EC0  3F41               	moviw [1]fsr1
 16497  0EC1  00A3               	movwf	??_Buzzer_Main+3
 16498  0EC2  0821               	movf	??_Buzzer_Main+1,w
 16499  0EC3  0223               	subwf	??_Buzzer_Main+3,w
 16500  0EC4  1D03               	skipz
 16501  0EC5  2EC8               	goto	u6065
 16502  0EC6  0820               	movf	??_Buzzer_Main,w
 16503  0EC7  0222               	subwf	??_Buzzer_Main+2,w
 16504  0EC8                     u6065:	
 16505  0EC8  1C03               	skipc
 16506  0EC9  0008               	return
 16507                           
 16508                           ;Buzzer_B1.c: 60: Buz->Counter = 0;
 16509  0ECA  0021               	movlb	1	; select bank1
 16510  0ECB  0A37               	incf	_Buz^(0+128),w
 16511  0ECC  0086               	movwf	6
 16512  0ECD  0187               	clrf	7
 16513  0ECE  3000               	movlw	0
 16514  0ECF  3FC0               	movwi [0]fsr1
 16515  0ED0  3FC1               	movwi [1]fsr1
 16516                           
 16517                           ;Buzzer_B1.c: 61: Buz->Switch = (RB3 == 1) ? 1 : 0;
 16518  0ED1  0837               	movf	_Buz^(0+128),w
 16519  0ED2  0086               	movwf	6
 16520  0ED3  0187               	clrf	7
 16521  0ED4  1281               	bcf	1,5
 16522  0ED5  0020               	movlb	0	; select bank0
 16523  0ED6  198D               	btfsc	13,3	;volatile
 16524  0ED7  1681               	bsf	1,5
 16525                           
 16526                           ;Buzzer_B1.c: 62: if (Buz->Switch == 0) {
 16527  0ED8  0021               	movlb	1	; select bank1
 16528  0ED9  0837               	movf	_Buz^(0+128),w
 16529  0EDA  0086               	movwf	6
 16530  0EDB  0187               	clrf	7
 16531  0EDC  1A81               	btfsc	1,5
 16532  0EDD  2F3D               	goto	l6846
 16533                           
 16534                           ;Buzzer_B1.c: 63: if (Buz->Count == 0) {
 16535  0EDE  0837               	movf	_Buz^(0+128),w
 16536  0EDF  3E03               	addlw	3
 16537  0EE0  0086               	movwf	6
 16538  0EE1  0187               	clrf	7
 16539  0EE2  0881               	movf	1,f
 16540  0EE3  1D03               	skipz
 16541  0EE4  2F36               	goto	l6842
 16542                           
 16543                           ;Buzzer_B1.c: 64: if (Buz->BufferStatus1 == 1) {
 16544  0EE5  0837               	movf	_Buz^(0+128),w
 16545  0EE6  0086               	movwf	6
 16546  0EE7  0187               	clrf	7
 16547  0EE8  1D81               	btfss	1,3
 16548  0EE9  2F0B               	goto	l6834
 16549                           
 16550                           ;Buzzer_B1.c: 65: Buz->BufferStatus1 = 0;
 16551  0EEA  0837               	movf	_Buz^(0+128),w
 16552  0EEB  0086               	movwf	6
 16553  0EEC  0187               	clrf	7
 16554  0EED  1181               	bcf	1,3
 16555                           
 16556                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer1;
 16557  0EEE  0837               	movf	_Buz^(0+128),w
 16558  0EEF  3E04               	addlw	4
 16559  0EF0  0086               	movwf	6
 16560  0EF1  0187               	clrf	7
 16561  0EF2  0801               	movf	1,w
 16562  0EF3  0020               	movlb	0	; select bank0
 16563  0EF4  00A0               	movwf	??_Buzzer_Main
 16564  0EF5  0021               	movlb	1	; select bank1
 16565  0EF6  0837               	movf	_Buz^(0+128),w
 16566  0EF7  3E03               	addlw	3
 16567  0EF8  0086               	movwf	6
 16568  0EF9  0187               	clrf	7
 16569  0EFA  0020               	movlb	0	; select bank0
 16570  0EFB  0820               	movf	??_Buzzer_Main,w
 16571  0EFC  0081               	movwf	1
 16572                           
 16573                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer1;
 16574  0EFD  0021               	movlb	1	; select bank1
 16575  0EFE  0837               	movf	_Buz^(0+128),w
 16576  0EFF  3E08               	addlw	8
 16577  0F00  0086               	movwf	6
 16578  0F01  0187               	clrf	7
 16579  0F02  0837               	movf	_Buz^(0+128),w
 16580  0F03  3E06               	addlw	6
 16581  0F04  0084               	movwf	4
 16582  0F05  0185               	clrf	5
 16583  0F06  3F40               	moviw [0]fsr1
 16584  0F07  3F80               	movwi [0]fsr0
 16585  0F08  3F41               	moviw [1]fsr1
 16586  0F09  3F81               	movwi [1]fsr0
 16587                           
 16588                           ;Buzzer_B1.c: 68: } else if (Buz->BufferStatus2 == 1) {
 16589  0F0A  0008               	return
 16590  0F0B                     l6834:	
 16591  0F0B  0837               	movf	_Buz^(0+128),w
 16592  0F0C  0086               	movwf	6
 16593  0F0D  0187               	clrf	7
 16594  0F0E  1E01               	btfss	1,4
 16595  0F0F  2F31               	goto	l6840
 16596                           
 16597                           ;Buzzer_B1.c: 69: Buz->BufferStatus2 = 0;
 16598  0F10  0837               	movf	_Buz^(0+128),w
 16599  0F11  0086               	movwf	6
 16600  0F12  0187               	clrf	7
 16601  0F13  1201               	bcf	1,4
 16602                           
 16603                           ;Buzzer_B1.c: 70: Buz->Count = Buz->CountBuffer2;
 16604  0F14  0837               	movf	_Buz^(0+128),w
 16605  0F15  3E05               	addlw	5
 16606  0F16  0086               	movwf	6
 16607  0F17  0187               	clrf	7
 16608  0F18  0801               	movf	1,w
 16609  0F19  0020               	movlb	0	; select bank0
 16610  0F1A  00A0               	movwf	??_Buzzer_Main
 16611  0F1B  0021               	movlb	1	; select bank1
 16612  0F1C  0837               	movf	_Buz^(0+128),w
 16613  0F1D  3E03               	addlw	3
 16614  0F1E  0086               	movwf	6
 16615  0F1F  0187               	clrf	7
 16616  0F20  0020               	movlb	0	; select bank0
 16617  0F21  0820               	movf	??_Buzzer_Main,w
 16618  0F22  0081               	movwf	1
 16619                           
 16620                           ;Buzzer_B1.c: 71: Buz->TimeValue = Buz->TimeValueBuffer2;
 16621  0F23  0021               	movlb	1	; select bank1
 16622  0F24  0837               	movf	_Buz^(0+128),w
 16623  0F25  3E0A               	addlw	10
 16624  0F26  0086               	movwf	6
 16625  0F27  0187               	clrf	7
 16626  0F28  0837               	movf	_Buz^(0+128),w
 16627  0F29  3E06               	addlw	6
 16628  0F2A  0084               	movwf	4
 16629  0F2B  0185               	clrf	5
 16630  0F2C  3F40               	moviw [0]fsr1
 16631  0F2D  3F80               	movwi [0]fsr0
 16632  0F2E  3F41               	moviw [1]fsr1
 16633  0F2F  3F81               	movwi [1]fsr0
 16634                           
 16635                           ;Buzzer_B1.c: 72: } else {
 16636  0F30  0008               	return
 16637  0F31                     l6840:	
 16638                           
 16639                           ;Buzzer_B1.c: 73: Buz->GO = 0;
 16640  0F31  0837               	movf	_Buz^(0+128),w
 16641  0F32  0086               	movwf	6
 16642  0F33  0187               	clrf	7
 16643  0F34  1081               	bcf	1,1
 16644                           
 16645                           ;Buzzer_B1.c: 74: }
 16646                           ;Buzzer_B1.c: 75: } else {
 16647  0F35  0008               	return
 16648  0F36                     l6842:	
 16649                           
 16650                           ;Buzzer_B1.c: 76: Buz->Switch = 1;
 16651  0F36  0837               	movf	_Buz^(0+128),w
 16652  0F37  0086               	movwf	6
 16653  0F38  0187               	clrf	7
 16654  0F39  1681               	bsf	1,5
 16655                           
 16656                           ;Buzzer_B1.c: 78: RB3 = 1;
 16657  0F3A  0020               	movlb	0	; select bank0
 16658  0F3B  158D               	bsf	13,3	;volatile
 16659                           
 16660                           ;Buzzer_B1.c: 79: }
 16661                           ;Buzzer_B1.c: 80: } else {
 16662  0F3C  0008               	return
 16663  0F3D                     l6846:	
 16664                           
 16665                           ;Buzzer_B1.c: 81: Buz->Switch = 0;
 16666  0F3D  0021               	movlb	1	; select bank1
 16667  0F3E  0837               	movf	_Buz^(0+128),w
 16668  0F3F  0086               	movwf	6
 16669  0F40  0187               	clrf	7
 16670  0F41  1281               	bcf	1,5
 16671                           
 16672                           ;Buzzer_B1.c: 83: RB3 = 0;
 16673  0F42  0020               	movlb	0	; select bank0
 16674  0F43  118D               	bcf	13,3	;volatile
 16675                           
 16676                           ;Buzzer_B1.c: 85: Buz->Count--;
 16677  0F44  0021               	movlb	1	; select bank1
 16678  0F45  0837               	movf	_Buz^(0+128),w
 16679  0F46  3E03               	addlw	3
 16680  0F47  0086               	movwf	6
 16681  0F48  0187               	clrf	7
 16682  0F49  3001               	movlw	1
 16683  0F4A  0281               	subwf	1,f
 16684  0F4B  0008               	return
 16685  0F4C                     __end_of_Buzzer_Main:	
 16686                           
 16687                           	psect	text113
 16688  1C6C                     __ptext113:	
 16689 ;; *************** function _Buzzer_Initialization *****************
 16690 ;; Defined at:
 16691 ;;		line 11 in file "../src/Buzzer_B1.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;		None               void
 16698 ;; Registers used:
 16699 ;;		wreg, fsr1l, fsr1h
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;Total ram usage:        1 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    5
 16712 ;; This function calls:
 16713 ;;		Nothing
 16714 ;; This function is called by:
 16715 ;;		_main
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function _Buzzer_Initialization
 16721  1C6C                     _Buzzer_Initialization:	
 16722                           
 16723                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 16727  1C6C  30C7               	movlw	_Buz1& (0+255)
 16728  1C6D  0020               	movlb	0	; select bank0
 16729  1C6E  00A0               	movwf	??_Buzzer_Initialization
 16730  1C6F  0820               	movf	??_Buzzer_Initialization,w
 16731  1C70  0021               	movlb	1	; select bank1
 16732  1C71  00B7               	movwf	_Buz^(0+128)
 16733                           
 16734                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 16735  1C72  0837               	movf	_Buz^(0+128),w
 16736  1C73  0086               	movwf	6
 16737  1C74  0187               	clrf	7
 16738  1C75  1401               	bsf	1,0
 16739  1C76  0008               	return
 16740  1C77                     __end_of_Buzzer_Initialization:	
 16741                           
 16742                           	psect	intentry
 16743  0004                     __pintentry:	
 16744 ;; *************** function _ISR *****************
 16745 ;; Defined at:
 16746 ;;		line 109 in file "../src/MCU_B1.c"
 16747 ;; Parameters:    Size  Location     Type
 16748 ;;		None
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;		None
 16751 ;; Return value:  Size  Location     Type
 16752 ;;		None               void
 16753 ;; Registers used:
 16754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16755 ;; Tracked objects:
 16756 ;;		On entry : 0/0
 16757 ;;		On exit  : 0/0
 16758 ;;		Unchanged: 0/0
 16759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;Total ram usage:        1 bytes
 16765 ;; Hardware stack levels used:    1
 16766 ;; Hardware stack levels required when called:    4
 16767 ;; This function calls:
 16768 ;;		_INT_ISR
 16769 ;;		_IOC_ISR
 16770 ;;		_TMR0_ISR
 16771 ;; This function is called by:
 16772 ;;		Interrupt level 1
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776  0004                     _ISR:	
 16777                           
 16778                           ;incstack = 0
 16779                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16780  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16781  0005  3180               	pagesel	$
 16782  0006  0020               	movlb	0	; select bank0
 16783  0007  087F               	movf	127,w
 16784  0008  00F7               	movwf	??_ISR
 16785                           
 16786                           ;MCU_B1.c: 111: IOC_ISR();
 16787  0009  319D  25C9  3180   	fcall	_IOC_ISR
 16788                           
 16789                           ;MCU_B1.c: 113: TMR0_ISR();
 16790  000C  3191  2167  3180   	fcall	_TMR0_ISR
 16791                           
 16792                           ;MCU_B1.c: 115: ;;
 16793                           ;MCU_B1.c: 119: INT_ISR();
 16794  000F  319C  2498         	fcall	_INT_ISR
 16795  0011  0877               	movf	??_ISR,w
 16796  0012  0020               	movlb	0	; select bank0
 16797  0013  00FF               	movwf	127
 16798  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 16799  0015  0009               	retfie
 16800  0016                     __end_of_ISR:	
 16801                           
 16802                           	psect	text115
 16803  1167                     __ptext115:	
 16804 ;; *************** function _TMR0_ISR *****************
 16805 ;; Defined at:
 16806 ;;		line 137 in file "../src/MCU_B1.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;		None
 16809 ;; Auto vars:     Size  Location     Type
 16810 ;;		None
 16811 ;; Return value:  Size  Location     Type
 16812 ;;		None               void
 16813 ;; Registers used:
 16814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16815 ;; Tracked objects:
 16816 ;;		On entry : 0/0
 16817 ;;		On exit  : 0/0
 16818 ;;		Unchanged: 0/0
 16819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;Total ram usage:        0 bytes
 16825 ;; Hardware stack levels used:    1
 16826 ;; Hardware stack levels required when called:    2
 16827 ;; This function calls:
 16828 ;;		_setDimmerLights_IntrControl
 16829 ;; This function is called by:
 16830 ;;		_ISR
 16831 ;; This function uses a non-reentrant model
 16832 ;;
 16833                           
 16834                           
 16835                           ;psect for function _TMR0_ISR
 16836  1167                     _TMR0_ISR:	
 16837                           
 16838                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 16839                           
 16840                           ;incstack = 0
 16841                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16842  1167  1E8B               	btfss	11,5	;volatile
 16843  1168  0008               	return
 16844  1169  1D0B               	btfss	11,2	;volatile
 16845  116A  0008               	return
 16846                           
 16847                           ;MCU_B1.c: 139: TMR0 = (256-190);
 16848  116B  3042               	movlw	66
 16849  116C  0020               	movlb	0	; select bank0
 16850  116D  0095               	movwf	21	;volatile
 16851                           
 16852                           ;MCU_B1.c: 140: TMR0IF = 0;
 16853  116E  110B               	bcf	11,2	;volatile
 16854                           
 16855                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 16856  116F  3001               	movlw	1
 16857  1170  3180  2044  3191   	fcall	_setDimmerLights_IntrControl
 16858                           
 16859                           ;MCU_B1.c: 161: Timer0->Count++;
 16860  1173  0021               	movlb	1	; select bank1
 16861  1174  0A6D               	incf	_Timer0^(0+128),w
 16862  1175  0086               	movwf	6
 16863  1176  3001               	movlw	1	; select bank2/3
 16864  1177  0087               	movwf	7
 16865  1178  3001               	movlw	1
 16866  1179  0781               	addwf	1,f
 16867  117A  3141               	addfsr 1,1
 16868  117B  1803               	skipnc
 16869  117C  0A81               	incf	1,f
 16870                           
 16871                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 16872  117D  0A6D               	incf	_Timer0^(0+128),w
 16873  117E  0086               	movwf	6
 16874  117F  3001               	movlw	1	; select bank2/3
 16875  1180  0087               	movwf	7
 16876  1181  3F40               	moviw [0]fsr1
 16877  1182  3A64               	xorlw	100
 16878  1183  1D03               	skipz
 16879  1184  2987               	goto	u617_25
 16880  1185  3F41               	moviw [1]fsr1
 16881  1186  3A00               	xorlw	0
 16882  1187                     u617_25:	
 16883  1187  1D03               	skipz
 16884  1188  0008               	return
 16885                           
 16886                           ;MCU_B1.c: 163: Timer0->Count = 0;
 16887  1189  0A6D               	incf	_Timer0^(0+128),w
 16888  118A  0086               	movwf	6
 16889  118B  3001               	movlw	1	; select bank2/3
 16890  118C  0087               	movwf	7
 16891  118D  3000               	movlw	0
 16892  118E  3FC0               	movwi [0]fsr1
 16893  118F  3FC1               	movwi [1]fsr1
 16894                           
 16895                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 16896  1190  086E               	movf	_myMain^(0+128),w
 16897  1191  0086               	movwf	6
 16898  1192  3001               	movlw	1	; select bank2/3
 16899  1193  0087               	movwf	7
 16900  1194  1481               	bsf	1,1
 16901  1195  0008               	return
 16902  1196                     __end_of_TMR0_ISR:	
 16903                           
 16904                           	psect	text116
 16905  0044                     __ptext116:	
 16906 ;; *************** function _setDimmerLights_IntrControl *****************
 16907 ;; Defined at:
 16908 ;;		line 87 in file "../src/Dimmer_B1.c"
 16909 ;; Parameters:    Size  Location     Type
 16910 ;;  lights          1    wreg     unsigned char 
 16911 ;; Auto vars:     Size  Location     Type
 16912 ;;  lights          1    6[COMMON] unsigned char 
 16913 ;; Return value:  Size  Location     Type
 16914 ;;		None               void
 16915 ;; Registers used:
 16916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16917 ;; Tracked objects:
 16918 ;;		On entry : 0/0
 16919 ;;		On exit  : 0/0
 16920 ;;		Unchanged: 0/0
 16921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16925 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;Total ram usage:        5 bytes
 16927 ;; Hardware stack levels used:    1
 16928 ;; Hardware stack levels required when called:    1
 16929 ;; This function calls:
 16930 ;;		_DimmerIntrPointSelect
 16931 ;; This function is called by:
 16932 ;;		_TMR0_ISR
 16933 ;; This function uses a non-reentrant model
 16934 ;;
 16935                           
 16936                           
 16937                           ;psect for function _setDimmerLights_IntrControl
 16938  0044                     _setDimmerLights_IntrControl:	
 16939                           
 16940                           ;incstack = 0
 16941                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16942                           ;setDimmerLights_IntrControl@lights stored from wreg
 16943  0044  00F6               	movwf	setDimmerLights_IntrControl@lights
 16944                           
 16945                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16946  0045  0876               	movf	setDimmerLights_IntrControl@lights,w
 16947  0046  319C  244D  3180   	fcall	_DimmerIntrPointSelect
 16948                           
 16949                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16950  0049  0879               	movf	_DimmerLightsIntr,w
 16951  004A  0086               	movwf	6
 16952  004B  3001               	movlw	1	; select bank2/3
 16953  004C  0087               	movwf	7
 16954  004D  1C01               	btfss	1,0
 16955  004E  28A4               	goto	i1l6322
 16956                           
 16957                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16958  004F  3001               	movlw	1
 16959  0050  00F2               	movwf	??_setDimmerLights_IntrControl
 16960  0051  0879               	movf	_DimmerLightsIntr,w
 16961  0052  3E03               	addlw	3
 16962  0053  0086               	movwf	6
 16963  0054  3001               	movlw	1	; select bank2/3
 16964  0055  0087               	movwf	7
 16965  0056  0872               	movf	??_setDimmerLights_IntrControl,w
 16966  0057  0781               	addwf	1,f
 16967                           
 16968                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16969  0058  0021               	movlb	1	; select bank1
 16970  0059  083A               	movf	_Dimmer^(0+128),w
 16971  005A  3E02               	addlw	2
 16972  005B  0086               	movwf	6
 16973  005C  0187               	clrf	7
 16974  005D  0801               	movf	1,w
 16975  005E  00F2               	movwf	??_setDimmerLights_IntrControl
 16976  005F  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16977  0060  09F2               	comf	??_setDimmerLights_IntrControl,f
 16978  0061  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16979  0062  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16980  0063  1903               	skipnz
 16981  0064  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16982  0065  0879               	movf	_DimmerLightsIntr,w
 16983  0066  3E04               	addlw	4
 16984  0067  0086               	movwf	6
 16985  0068  3001               	movlw	1	; select bank2/3
 16986  0069  0087               	movwf	7
 16987  006A  0801               	movf	1,w
 16988  006B  0772               	addwf	??_setDimmerLights_IntrControl,w
 16989  006C  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16990  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16991  006E  1803               	skipnc
 16992  006F  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 16993  0070  00F5               	movwf	??_setDimmerLights_IntrControl+3
 16994  0071  0879               	movf	_DimmerLightsIntr,w
 16995  0072  3E03               	addlw	3
 16996  0073  0086               	movwf	6
 16997  0074  3001               	movlw	1	; select bank2/3
 16998  0075  0087               	movwf	7
 16999  0076  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17000  0077  3A80               	xorlw	128
 17001  0078  3C80               	sublw	128
 17002  0079  1D03               	skipz
 17003  007A  287D               	goto	u516_25
 17004  007B  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17005  007C  0201               	subwf	1,w
 17006  007D                     u516_25:	
 17007  007D  1C03               	skipc
 17008  007E  29A8               	goto	i1l6380
 17009                           
 17010                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17011  007F  0879               	movf	_DimmerLightsIntr,w
 17012  0080  3E03               	addlw	3
 17013  0081  0086               	movwf	6
 17014  0082  3001               	movlw	1	; select bank2/3
 17015  0083  0087               	movwf	7
 17016  0084  0181               	clrf	1
 17017                           
 17018                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17019  0085  0879               	movf	_DimmerLightsIntr,w
 17020  0086  0086               	movwf	6
 17021  0087  3001               	movlw	1	; select bank2/3
 17022  0088  0087               	movwf	7
 17023  0089  1001               	bcf	1,0
 17024                           
 17025                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17026  008A  0879               	movf	_DimmerLightsIntr,w
 17027  008B  0086               	movwf	6
 17028  008C  3001               	movlw	1	; select bank2/3
 17029  008D  0087               	movwf	7
 17030  008E  1F01               	btfss	1,6
 17031  008F  29A8               	goto	i1l6380
 17032                           
 17033                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17034  0090  0879               	movf	_DimmerLightsIntr,w
 17035  0091  3E08               	addlw	8
 17036  0092  0086               	movwf	6
 17037  0093  3001               	movlw	1	; select bank2/3
 17038  0094  0087               	movwf	7
 17039  0095  1401               	bsf	1,0
 17040                           
 17041                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17042  0096  0879               	movf	_DimmerLightsIntr,w
 17043  0097  3E08               	addlw	8
 17044  0098  0086               	movwf	6
 17045  0099  3001               	movlw	1	; select bank2/3
 17046  009A  0087               	movwf	7
 17047  009B  1681               	bsf	1,5
 17048                           
 17049                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17050  009C  0876               	movf	setDimmerLights_IntrControl@lights,w
 17051  009D  3A01               	xorlw	1
 17052  009E  1D03               	skipz
 17053  009F  29A8               	goto	i1l6380
 17054                           
 17055                           ;Dimmer_B1.c: 101: RA7 = 1;
 17056  00A0  0020               	movlb	0	; select bank0
 17057  00A1  178C               	bsf	12,7	;volatile
 17058                           
 17059                           ;Dimmer_B1.c: 102: RB4=1;
 17060  00A2  160D               	bsf	13,4	;volatile
 17061                           
 17062                           ;Dimmer_B1.c: 103: }
 17063                           ;Dimmer_B1.c: 115: }
 17064                           ;Dimmer_B1.c: 116: }
 17065                           ;Dimmer_B1.c: 117: } else {
 17066  00A3  29A8               	goto	i1l6380
 17067  00A4                     i1l6322:	
 17068                           
 17069                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17070  00A4  0879               	movf	_DimmerLightsIntr,w
 17071  00A5  3E08               	addlw	8
 17072  00A6  0086               	movwf	6
 17073  00A7  3001               	movlw	1	; select bank2/3
 17074  00A8  0087               	movwf	7
 17075  00A9  1C01               	btfss	1,0
 17076  00AA  29A8               	goto	i1l6380
 17077                           
 17078                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17079  00AB  0879               	movf	_DimmerLightsIntr,w
 17080  00AC  3E08               	addlw	8
 17081  00AD  0086               	movwf	6
 17082  00AE  3001               	movlw	1	; select bank2/3
 17083  00AF  0087               	movwf	7
 17084  00B0  1001               	bcf	1,0
 17085                           
 17086                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17087  00B1  0879               	movf	_DimmerLightsIntr,w
 17088  00B2  0086               	movwf	6
 17089  00B3  3001               	movlw	1	; select bank2/3
 17090  00B4  0087               	movwf	7
 17091  00B5  1C81               	btfss	1,1
 17092  00B6  29A8               	goto	i1l6380
 17093                           
 17094                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17095  00B7  3001               	movlw	1
 17096  00B8  00F2               	movwf	??_setDimmerLights_IntrControl
 17097  00B9  0A79               	incf	_DimmerLightsIntr,w
 17098  00BA  0086               	movwf	6
 17099  00BB  3001               	movlw	1	; select bank2/3
 17100  00BC  0087               	movwf	7
 17101  00BD  0872               	movf	??_setDimmerLights_IntrControl,w
 17102  00BE  0781               	addwf	1,f
 17103                           
 17104                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17105  00BF  0A79               	incf	_DimmerLightsIntr,w
 17106  00C0  0086               	movwf	6
 17107  00C1  3001               	movlw	1	; select bank2/3
 17108  00C2  0087               	movwf	7
 17109  00C3  0879               	movf	_DimmerLightsIntr,w
 17110  00C4  3E02               	addlw	2
 17111  00C5  0084               	movwf	4
 17112  00C6  3001               	movlw	1	; select bank2/3
 17113  00C7  0085               	movwf	5
 17114  00C8  0800               	movf	0,w
 17115  00C9  0201               	subwf	1,w
 17116  00CA  1C03               	skipc
 17117  00CB  29A8               	goto	i1l6380
 17118                           
 17119                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17120  00CC  0A79               	incf	_DimmerLightsIntr,w
 17121  00CD  0086               	movwf	6
 17122  00CE  3001               	movlw	1	; select bank2/3
 17123  00CF  0087               	movwf	7
 17124  00D0  0181               	clrf	1
 17125                           
 17126                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17127  00D1  0879               	movf	_DimmerLightsIntr,w
 17128  00D2  0086               	movwf	6
 17129  00D3  3001               	movlw	1	; select bank2/3
 17130  00D4  0087               	movwf	7
 17131  00D5  1D81               	btfss	1,3
 17132  00D6  290D               	goto	i1l6348
 17133                           
 17134                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17135  00D7  0879               	movf	_DimmerLightsIntr,w
 17136  00D8  0086               	movwf	6
 17137  00D9  3001               	movlw	1	; select bank2/3
 17138  00DA  0087               	movwf	7
 17139  00DB  1A01               	btfsc	1,4
 17140  00DC  28F4               	goto	i1l6342
 17141                           
 17142                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17143  00DD  0879               	movf	_DimmerLightsIntr,w
 17144  00DE  3E04               	addlw	4
 17145  00DF  0086               	movwf	6
 17146  00E0  3001               	movlw	1	; select bank2/3
 17147  00E1  0087               	movwf	7
 17148  00E2  3021               	movlw	33
 17149  00E3  0201               	subwf	1,w
 17150  00E4  1C03               	skipc
 17151  00E5  28EE               	goto	i1l6340
 17152                           
 17153                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17154  00E6  0879               	movf	_DimmerLightsIntr,w
 17155  00E7  3E04               	addlw	4
 17156  00E8  0086               	movwf	6
 17157  00E9  3001               	movlw	1	; select bank2/3
 17158  00EA  0087               	movwf	7
 17159  00EB  3001               	movlw	1
 17160  00EC  0281               	subwf	1,f
 17161                           
 17162                           ;Dimmer_B1.c: 128: } else {
 17163  00ED  29A8               	goto	i1l6380
 17164  00EE                     i1l6340:	
 17165                           
 17166                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17167  00EE  0879               	movf	_DimmerLightsIntr,w
 17168  00EF  0086               	movwf	6
 17169  00F0  3001               	movlw	1	; select bank2/3
 17170  00F1  0087               	movwf	7
 17171  00F2  1601               	bsf	1,4
 17172                           
 17173                           ;Dimmer_B1.c: 130: }
 17174                           ;Dimmer_B1.c: 131: } else {
 17175  00F3  29A8               	goto	i1l6380
 17176  00F4                     i1l6342:	
 17177                           
 17178                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17179  00F4  0879               	movf	_DimmerLightsIntr,w
 17180  00F5  3E04               	addlw	4
 17181  00F6  0086               	movwf	6
 17182  00F7  3001               	movlw	1	; select bank2/3
 17183  00F8  0087               	movwf	7
 17184  00F9  303C               	movlw	60
 17185  00FA  0201               	subwf	1,w
 17186  00FB  1803               	skipnc
 17187  00FC  2907               	goto	i1l6346
 17188                           
 17189                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17190  00FD  3001               	movlw	1
 17191  00FE  00F2               	movwf	??_setDimmerLights_IntrControl
 17192  00FF  0879               	movf	_DimmerLightsIntr,w
 17193  0100  3E04               	addlw	4
 17194  0101  0086               	movwf	6
 17195  0102  3001               	movlw	1	; select bank2/3
 17196  0103  0087               	movwf	7
 17197  0104  0872               	movf	??_setDimmerLights_IntrControl,w
 17198  0105  0781               	addwf	1,f
 17199                           
 17200                           ;Dimmer_B1.c: 134: } else {
 17201  0106  29A8               	goto	i1l6380
 17202  0107                     i1l6346:	
 17203                           
 17204                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17205  0107  0879               	movf	_DimmerLightsIntr,w
 17206  0108  0086               	movwf	6
 17207  0109  3001               	movlw	1	; select bank2/3
 17208  010A  0087               	movwf	7
 17209  010B  1201               	bcf	1,4
 17210                           
 17211                           ;Dimmer_B1.c: 136: }
 17212                           ;Dimmer_B1.c: 137: }
 17213                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17214  010C  29A8               	goto	i1l6380
 17215  010D                     i1l6348:	
 17216  010D  0879               	movf	_DimmerLightsIntr,w
 17217  010E  0086               	movwf	6
 17218  010F  3001               	movlw	1	; select bank2/3
 17219  0110  0087               	movwf	7
 17220  0111  1D01               	btfss	1,2
 17221  0112  2954               	goto	i1l6362
 17222                           
 17223                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17224  0113  0879               	movf	_DimmerLightsIntr,w
 17225  0114  3E05               	addlw	5
 17226  0115  0086               	movwf	6
 17227  0116  3001               	movlw	1	; select bank2/3
 17228  0117  0087               	movwf	7
 17229  0118  0879               	movf	_DimmerLightsIntr,w
 17230  0119  3E04               	addlw	4
 17231  011A  0084               	movwf	4
 17232  011B  3001               	movlw	1	; select bank2/3
 17233  011C  0085               	movwf	5
 17234  011D  0800               	movf	0,w
 17235  011E  0201               	subwf	1,w
 17236  011F  1803               	skipnc
 17237  0120  2929               	goto	i1l6354
 17238                           
 17239                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17240  0121  0879               	movf	_DimmerLightsIntr,w
 17241  0122  3E04               	addlw	4
 17242  0123  0086               	movwf	6
 17243  0124  3001               	movlw	1	; select bank2/3
 17244  0125  0087               	movwf	7
 17245  0126  3001               	movlw	1
 17246  0127  0281               	subwf	1,f
 17247                           
 17248                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17249  0128  2940               	goto	i1l6358
 17250  0129                     i1l6354:	
 17251  0129  0879               	movf	_DimmerLightsIntr,w
 17252  012A  3E04               	addlw	4
 17253  012B  0086               	movwf	6
 17254  012C  3001               	movlw	1	; select bank2/3
 17255  012D  0087               	movwf	7
 17256  012E  0879               	movf	_DimmerLightsIntr,w
 17257  012F  3E05               	addlw	5
 17258  0130  0084               	movwf	4
 17259  0131  3001               	movlw	1	; select bank2/3
 17260  0132  0085               	movwf	5
 17261  0133  0800               	movf	0,w
 17262  0134  0201               	subwf	1,w
 17263  0135  1803               	skipnc
 17264  0136  2940               	goto	i1l6358
 17265                           
 17266                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17267  0137  3001               	movlw	1
 17268  0138  00F2               	movwf	??_setDimmerLights_IntrControl
 17269  0139  0879               	movf	_DimmerLightsIntr,w
 17270  013A  3E04               	addlw	4
 17271  013B  0086               	movwf	6
 17272  013C  3001               	movlw	1	; select bank2/3
 17273  013D  0087               	movwf	7
 17274  013E  0872               	movf	??_setDimmerLights_IntrControl,w
 17275  013F  0781               	addwf	1,f
 17276  0140                     i1l6358:	
 17277                           
 17278                           ;Dimmer_B1.c: 143: }
 17279                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17280  0140  0879               	movf	_DimmerLightsIntr,w
 17281  0141  3E05               	addlw	5
 17282  0142  0086               	movwf	6
 17283  0143  3001               	movlw	1	; select bank2/3
 17284  0144  0087               	movwf	7
 17285  0145  0879               	movf	_DimmerLightsIntr,w
 17286  0146  3E04               	addlw	4
 17287  0147  0084               	movwf	4
 17288  0148  3001               	movlw	1	; select bank2/3
 17289  0149  0085               	movwf	5
 17290  014A  0800               	movf	0,w
 17291  014B  0601               	xorwf	1,w
 17292  014C  1D03               	skipz
 17293  014D  29A8               	goto	i1l6380
 17294                           
 17295                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17296  014E  0879               	movf	_DimmerLightsIntr,w
 17297  014F  0086               	movwf	6
 17298  0150  3001               	movlw	1	; select bank2/3
 17299  0151  0087               	movwf	7
 17300  0152  1101               	bcf	1,2
 17301  0153  296F               	goto	i1l6368
 17302  0154                     i1l6362:	
 17303                           ;Dimmer_B1.c: 147: }
 17304                           ;Dimmer_B1.c: 148: } else {
 17305                           
 17306                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17307                           
 17308                           
 17309                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17310  0154  0879               	movf	_DimmerLightsIntr,w
 17311  0155  0086               	movwf	6
 17312  0156  3001               	movlw	1	; select bank2/3
 17313  0157  0087               	movwf	7
 17314  0158  1E81               	btfss	1,5
 17315  0159  2975               	goto	i1l6370
 17316                           
 17317                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17318  015A  0879               	movf	_DimmerLightsIntr,w
 17319  015B  3E04               	addlw	4
 17320  015C  0086               	movwf	6
 17321  015D  3001               	movlw	1	; select bank2/3
 17322  015E  0087               	movwf	7
 17323  015F  3001               	movlw	1
 17324  0160  0281               	subwf	1,f
 17325                           
 17326                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17327  0161  0879               	movf	_DimmerLightsIntr,w
 17328  0162  3E05               	addlw	5
 17329  0163  0086               	movwf	6
 17330  0164  3001               	movlw	1	; select bank2/3
 17331  0165  0087               	movwf	7
 17332  0166  0879               	movf	_DimmerLightsIntr,w
 17333  0167  3E04               	addlw	4
 17334  0168  0084               	movwf	4
 17335  0169  3001               	movlw	1	; select bank2/3
 17336  016A  0085               	movwf	5
 17337  016B  0800               	movf	0,w
 17338  016C  0201               	subwf	1,w
 17339  016D  1C03               	skipc
 17340  016E  29A8               	goto	i1l6380
 17341  016F                     i1l6368:	
 17342                           
 17343                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17344  016F  0879               	movf	_DimmerLightsIntr,w
 17345  0170  0086               	movwf	6
 17346  0171  3001               	movlw	1	; select bank2/3
 17347  0172  0087               	movwf	7
 17348  0173  1081               	bcf	1,1
 17349                           
 17350                           ;Dimmer_B1.c: 153: }
 17351                           ;Dimmer_B1.c: 154: } else {
 17352  0174  29A8               	goto	i1l6380
 17353  0175                     i1l6370:	
 17354                           
 17355                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17356  0175  3001               	movlw	1
 17357  0176  00F2               	movwf	??_setDimmerLights_IntrControl
 17358  0177  0879               	movf	_DimmerLightsIntr,w
 17359  0178  3E04               	addlw	4
 17360  0179  0086               	movwf	6
 17361  017A  3001               	movlw	1	; select bank2/3
 17362  017B  0087               	movwf	7
 17363  017C  0872               	movf	??_setDimmerLights_IntrControl,w
 17364  017D  0781               	addwf	1,f
 17365                           
 17366                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17367  017E  0879               	movf	_DimmerLightsIntr,w
 17368  017F  3E04               	addlw	4
 17369  0180  0086               	movwf	6
 17370  0181  3001               	movlw	1	; select bank2/3
 17371  0182  0087               	movwf	7
 17372  0183  0879               	movf	_DimmerLightsIntr,w
 17373  0184  3E06               	addlw	6
 17374  0185  0084               	movwf	4
 17375  0186  3001               	movlw	1	; select bank2/3
 17376  0187  0085               	movwf	5
 17377  0188  0800               	movf	0,w
 17378  0189  0201               	subwf	1,w
 17379  018A  1C03               	skipc
 17380  018B  29A8               	goto	i1l6380
 17381                           
 17382                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17383  018C  0879               	movf	_DimmerLightsIntr,w
 17384  018D  0086               	movwf	6
 17385  018E  3001               	movlw	1	; select bank2/3
 17386  018F  0087               	movwf	7
 17387  0190  1081               	bcf	1,1
 17388                           
 17389                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17390  0191  0879               	movf	_DimmerLightsIntr,w
 17391  0192  0086               	movwf	6
 17392  0193  3001               	movlw	1	; select bank2/3
 17393  0194  0087               	movwf	7
 17394  0195  1301               	bcf	1,6
 17395                           
 17396                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17397  0196  0879               	movf	_DimmerLightsIntr,w
 17398  0197  3E09               	addlw	9
 17399  0198  0086               	movwf	6
 17400  0199  3001               	movlw	1	; select bank2/3
 17401  019A  0087               	movwf	7
 17402  019B  1501               	bsf	1,2
 17403                           
 17404                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17405  019C  0021               	movlb	1	; select bank1
 17406  019D  083A               	movf	_Dimmer^(0+128),w
 17407  019E  0086               	movwf	6
 17408  019F  0187               	clrf	7
 17409  01A0  1401               	bsf	1,0
 17410                           
 17411                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17412  01A1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17413  01A2  3A01               	xorlw	1
 17414  01A3  1D03               	skipz
 17415  01A4  29A8               	goto	i1l6380
 17416                           
 17417                           ;Dimmer_B1.c: 163: RA3 = 0;
 17418  01A5  0020               	movlb	0	; select bank0
 17419  01A6  118C               	bcf	12,3	;volatile
 17420                           
 17421                           ;Dimmer_B1.c: 164: RC7=!1;
 17422  01A7  138E               	bcf	14,7	;volatile
 17423  01A8                     i1l6380:	
 17424                           ;Dimmer_B1.c: 165: }
 17425                           ;Dimmer_B1.c: 177: ;;
 17426                           
 17427                           
 17428                           ;Dimmer_B1.c: 178: }
 17429                           ;Dimmer_B1.c: 179: }
 17430                           ;Dimmer_B1.c: 180: }
 17431                           ;Dimmer_B1.c: 181: }
 17432                           ;Dimmer_B1.c: 182: }
 17433                           ;Dimmer_B1.c: 183: }
 17434                           ;Dimmer_B1.c: 184: }
 17435                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17436  01A8  0879               	movf	_DimmerLightsIntr,w
 17437  01A9  3E08               	addlw	8
 17438  01AA  0086               	movwf	6
 17439  01AB  3001               	movlw	1	; select bank2/3
 17440  01AC  0087               	movwf	7
 17441  01AD  1E81               	btfss	1,5
 17442  01AE  29D4               	goto	i1l6394
 17443                           
 17444                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17445  01AF  3001               	movlw	1
 17446  01B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17447  01B1  0879               	movf	_DimmerLightsIntr,w
 17448  01B2  3E07               	addlw	7
 17449  01B3  0086               	movwf	6
 17450  01B4  3001               	movlw	1	; select bank2/3
 17451  01B5  0087               	movwf	7
 17452  01B6  0872               	movf	??_setDimmerLights_IntrControl,w
 17453  01B7  0781               	addwf	1,f
 17454                           
 17455                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17456  01B8  0879               	movf	_DimmerLightsIntr,w
 17457  01B9  3E07               	addlw	7
 17458  01BA  0086               	movwf	6
 17459  01BB  3001               	movlw	1	; select bank2/3
 17460  01BC  0087               	movwf	7
 17461  01BD  3005               	movlw	5
 17462  01BE  0201               	subwf	1,w
 17463  01BF  1C03               	skipc
 17464  01C0  29D4               	goto	i1l6394
 17465                           
 17466                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17467  01C1  0879               	movf	_DimmerLightsIntr,w
 17468  01C2  3E07               	addlw	7
 17469  01C3  0086               	movwf	6
 17470  01C4  3001               	movlw	1	; select bank2/3
 17471  01C5  0087               	movwf	7
 17472  01C6  0181               	clrf	1
 17473                           
 17474                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17475  01C7  0879               	movf	_DimmerLightsIntr,w
 17476  01C8  3E08               	addlw	8
 17477  01C9  0086               	movwf	6
 17478  01CA  3001               	movlw	1	; select bank2/3
 17479  01CB  0087               	movwf	7
 17480  01CC  1281               	bcf	1,5
 17481                           
 17482                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17483  01CD  0876               	movf	setDimmerLights_IntrControl@lights,w
 17484  01CE  3A01               	xorlw	1
 17485  01CF  1D03               	skipz
 17486  01D0  29D4               	goto	i1l6394
 17487                           
 17488                           ;Dimmer_B1.c: 193: RA7 = 0;
 17489  01D1  0020               	movlb	0	; select bank0
 17490  01D2  138C               	bcf	12,7	;volatile
 17491                           
 17492                           ;Dimmer_B1.c: 194: RB4=0;
 17493  01D3  120D               	bcf	13,4	;volatile
 17494  01D4                     i1l6394:	
 17495                           
 17496                           ;Dimmer_B1.c: 195: }
 17497                           ;Dimmer_B1.c: 207: }
 17498                           ;Dimmer_B1.c: 208: }
 17499                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17500  01D4  0879               	movf	_DimmerLightsIntr,w
 17501  01D5  3E09               	addlw	9
 17502  01D6  0086               	movwf	6
 17503  01D7  3001               	movlw	1	; select bank2/3
 17504  01D8  0087               	movwf	7
 17505  01D9  1E81               	btfss	1,5
 17506  01DA  0008               	return
 17507                           
 17508                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17509  01DB  3001               	movlw	1
 17510  01DC  00F2               	movwf	??_setDimmerLights_IntrControl
 17511  01DD  0879               	movf	_DimmerLightsIntr,w
 17512  01DE  3E0A               	addlw	10
 17513  01DF  0086               	movwf	6
 17514  01E0  3001               	movlw	1	; select bank2/3
 17515  01E1  0087               	movwf	7
 17516  01E2  0872               	movf	??_setDimmerLights_IntrControl,w
 17517  01E3  0781               	addwf	1,f
 17518                           
 17519                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17520  01E4  0879               	movf	_DimmerLightsIntr,w
 17521  01E5  3E0A               	addlw	10
 17522  01E6  0086               	movwf	6
 17523  01E7  3001               	movlw	1	; select bank2/3
 17524  01E8  0087               	movwf	7
 17525  01E9  0801               	movf	1,w
 17526  01EA  3A46               	xorlw	70
 17527  01EB  1D03               	skipz
 17528  01EC  0008               	return
 17529                           
 17530                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17531  01ED  0879               	movf	_DimmerLightsIntr,w
 17532  01EE  3E0A               	addlw	10
 17533  01EF  0086               	movwf	6
 17534  01F0  3001               	movlw	1	; select bank2/3
 17535  01F1  0087               	movwf	7
 17536  01F2  0181               	clrf	1
 17537                           
 17538                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17539  01F3  0879               	movf	_DimmerLightsIntr,w
 17540  01F4  3E09               	addlw	9
 17541  01F5  0086               	movwf	6
 17542  01F6  3001               	movlw	1	; select bank2/3
 17543  01F7  0087               	movwf	7
 17544  01F8  1281               	bcf	1,5
 17545  01F9  0008               	return
 17546  01FA                     __end_of_setDimmerLights_IntrControl:	
 17547                           
 17548                           	psect	text117
 17549  1C4D                     __ptext117:	
 17550 ;; *************** function _DimmerIntrPointSelect *****************
 17551 ;; Defined at:
 17552 ;;		line 65 in file "../src/Dimmer_B1.c"
 17553 ;; Parameters:    Size  Location     Type
 17554 ;;  lights          1    wreg     unsigned char 
 17555 ;; Auto vars:     Size  Location     Type
 17556 ;;  lights          1    1[COMMON] unsigned char 
 17557 ;; Return value:  Size  Location     Type
 17558 ;;		None               void
 17559 ;; Registers used:
 17560 ;;		wreg
 17561 ;; Tracked objects:
 17562 ;;		On entry : 0/0
 17563 ;;		On exit  : 0/0
 17564 ;;		Unchanged: 0/0
 17565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;Total ram usage:        2 bytes
 17571 ;; Hardware stack levels used:    1
 17572 ;; This function calls:
 17573 ;;		Nothing
 17574 ;; This function is called by:
 17575 ;;		_setDimmerLights_IntrControl
 17576 ;; This function uses a non-reentrant model
 17577 ;;
 17578                           
 17579                           
 17580                           ;psect for function _DimmerIntrPointSelect
 17581  1C4D                     _DimmerIntrPointSelect:	
 17582                           
 17583                           ;incstack = 0
 17584                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17585                           ;DimmerIntrPointSelect@lights stored from wreg
 17586  1C4D  00F1               	movwf	DimmerIntrPointSelect@lights
 17587                           
 17588                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17589  1C4E  0871               	movf	DimmerIntrPointSelect@lights,w
 17590  1C4F  3A01               	xorlw	1
 17591  1C50  1D03               	skipz
 17592  1C51  0008               	return
 17593                           
 17594                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17595  1C52  3034               	movlw	_DimmerLights1& (0+255)
 17596  1C53  00F0               	movwf	??_DimmerIntrPointSelect
 17597  1C54  0870               	movf	??_DimmerIntrPointSelect,w
 17598  1C55  00F9               	movwf	_DimmerLightsIntr
 17599  1C56  0008               	return
 17600  1C57                     __end_of_DimmerIntrPointSelect:	
 17601                           
 17602                           	psect	text118
 17603  1DC9                     __ptext118:	
 17604 ;; *************** function _IOC_ISR *****************
 17605 ;; Defined at:
 17606 ;;		line 297 in file "../src/MCU_B1.c"
 17607 ;; Parameters:    Size  Location     Type
 17608 ;;		None
 17609 ;; Auto vars:     Size  Location     Type
 17610 ;;		None
 17611 ;; Return value:  Size  Location     Type
 17612 ;;		None               void
 17613 ;; Registers used:
 17614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;Total ram usage:        0 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    3
 17627 ;; This function calls:
 17628 ;;		_setDimmerReClock
 17629 ;; This function is called by:
 17630 ;;		_ISR
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           
 17635                           ;psect for function _IOC_ISR
 17636  1DC9                     _IOC_ISR:	
 17637                           
 17638                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 17639                           
 17640                           ;incstack = 0
 17641                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17642  1DC9  1D8B               	btfss	11,3	;volatile
 17643  1DCA  0008               	return
 17644  1DCB  0027               	movlb	7	; select bank7
 17645  1DCC  1D16               	btfss	22,2	;volatile
 17646  1DCD  0008               	return
 17647                           
 17648                           ;MCU_B1.c: 299: IOCBF2 = 0;
 17649  1DCE  1116               	bcf	22,2	;volatile
 17650                           
 17651                           ;MCU_B1.c: 300: IOCIF = 0;
 17652  1DCF  100B               	bcf	11,0	;volatile
 17653                           
 17654                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 17655  1DD0  0021               	movlb	1	; select bank1
 17656  1DD1  086E               	movf	_myMain^(0+128),w
 17657  1DD2  0086               	movwf	6
 17658  1DD3  3001               	movlw	1	; select bank2/3
 17659  1DD4  0087               	movwf	7
 17660  1DD5  1C01               	btfss	1,0
 17661  1DD6  0008               	return
 17662                           
 17663                           ;MCU_B1.c: 303: setDimmerReClock();
 17664  1DD7  319C  2418         	fcall	_setDimmerReClock
 17665  1DD9  0008               	return
 17666  1DDA                     __end_of_IOC_ISR:	
 17667                           
 17668                           	psect	text119
 17669  1C18                     __ptext119:	
 17670 ;; *************** function _setDimmerReClock *****************
 17671 ;; Defined at:
 17672 ;;		line 175 in file "../src/MCU_B1.c"
 17673 ;; Parameters:    Size  Location     Type
 17674 ;;		None
 17675 ;; Auto vars:     Size  Location     Type
 17676 ;;		None
 17677 ;; Return value:  Size  Location     Type
 17678 ;;		None               void
 17679 ;; Registers used:
 17680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17681 ;; Tracked objects:
 17682 ;;		On entry : 0/0
 17683 ;;		On exit  : 0/0
 17684 ;;		Unchanged: 0/0
 17685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;Total ram usage:        0 bytes
 17691 ;; Hardware stack levels used:    1
 17692 ;; Hardware stack levels required when called:    2
 17693 ;; This function calls:
 17694 ;;		_setDimmerLights_IntrIOC_GO
 17695 ;; This function is called by:
 17696 ;;		_IOC_ISR
 17697 ;; This function uses a non-reentrant model
 17698 ;;
 17699                           
 17700                           
 17701                           ;psect for function _setDimmerReClock
 17702  1C18                     _setDimmerReClock:	
 17703                           
 17704                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 17705                           
 17706                           ;incstack = 0
 17707                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17708  1C18  3001               	movlw	1
 17709  1C19  319F  271F         	fcall	_setDimmerLights_IntrIOC_GO
 17710                           
 17711                           ;MCU_B1.c: 191: TMR0 = 255;
 17712  1C1B  30FF               	movlw	255
 17713  1C1C  0020               	movlb	0	; select bank0
 17714  1C1D  0095               	movwf	21	;volatile
 17715  1C1E  0008               	return
 17716  1C1F                     __end_of_setDimmerReClock:	
 17717                           
 17718                           	psect	text120
 17719  1F1F                     __ptext120:	
 17720 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17721 ;; Defined at:
 17722 ;;		line 28 in file "../src/Dimmer_B1.c"
 17723 ;; Parameters:    Size  Location     Type
 17724 ;;  lights          1    wreg     unsigned char 
 17725 ;; Auto vars:     Size  Location     Type
 17726 ;;  lights          1    2[COMMON] unsigned char 
 17727 ;; Return value:  Size  Location     Type
 17728 ;;		None               void
 17729 ;; Registers used:
 17730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17731 ;; Tracked objects:
 17732 ;;		On entry : 0/0
 17733 ;;		On exit  : 0/0
 17734 ;;		Unchanged: 0/0
 17735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;Total ram usage:        1 bytes
 17741 ;; Hardware stack levels used:    1
 17742 ;; Hardware stack levels required when called:    1
 17743 ;; This function calls:
 17744 ;;		_DimmerIntrIOCPointSelect
 17745 ;; This function is called by:
 17746 ;;		_setDimmerReClock
 17747 ;; This function uses a non-reentrant model
 17748 ;;
 17749                           
 17750                           
 17751                           ;psect for function _setDimmerLights_IntrIOC_GO
 17752  1F1F                     _setDimmerLights_IntrIOC_GO:	
 17753                           
 17754                           ;incstack = 0
 17755                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17756                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17757  1F1F  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17758                           
 17759                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17760  1F20  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17761  1F21  319C  2461  319F   	fcall	_DimmerIntrIOCPointSelect
 17762                           
 17763                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17764  1F24  0021               	movlb	1	; select bank1
 17765  1F25  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17766  1F26  0086               	movwf	6
 17767  1F27  3001               	movlw	1	; select bank2/3
 17768  1F28  0087               	movwf	7
 17769  1F29  1801               	btfsc	1,0
 17770  1F2A  0008               	return
 17771  1F2B  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17772  1F2C  3E09               	addlw	9
 17773  1F2D  0086               	movwf	6
 17774  1F2E  3001               	movlw	1	; select bank2/3
 17775  1F2F  0087               	movwf	7
 17776  1F30  1A81               	btfsc	1,5
 17777  1F31  0008               	return
 17778                           
 17779                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17780  1F32  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17781  1F33  0086               	movwf	6
 17782  1F34  3001               	movlw	1	; select bank2/3
 17783  1F35  0087               	movwf	7
 17784  1F36  1401               	bsf	1,0
 17785                           
 17786                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17787  1F37  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17788  1F38  3E09               	addlw	9
 17789  1F39  0086               	movwf	6
 17790  1F3A  3001               	movlw	1	; select bank2/3
 17791  1F3B  0087               	movwf	7
 17792  1F3C  1681               	bsf	1,5
 17793  1F3D  0008               	return
 17794  1F3E                     __end_of_setDimmerLights_IntrIOC_GO:	
 17795                           
 17796                           	psect	text121
 17797  1C61                     __ptext121:	
 17798 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17799 ;; Defined at:
 17800 ;;		line 8 in file "../src/Dimmer_B1.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  lights          1    wreg     unsigned char 
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;  lights          1    1[COMMON] unsigned char 
 17805 ;; Return value:  Size  Location     Type
 17806 ;;		None               void
 17807 ;; Registers used:
 17808 ;;		wreg
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;Total ram usage:        2 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; This function calls:
 17821 ;;		Nothing
 17822 ;; This function is called by:
 17823 ;;		_setDimmerLights_IntrIOC_GO
 17824 ;; This function uses a non-reentrant model
 17825 ;;
 17826                           
 17827                           
 17828                           ;psect for function _DimmerIntrIOCPointSelect
 17829  1C61                     _DimmerIntrIOCPointSelect:	
 17830                           
 17831                           ;incstack = 0
 17832                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17833                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17834  1C61  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17835                           
 17836                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17837  1C62  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17838  1C63  3A01               	xorlw	1
 17839  1C64  1D03               	skipz
 17840  1C65  0008               	return
 17841                           
 17842                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17843  1C66  3034               	movlw	_DimmerLights1& (0+255)
 17844  1C67  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17845  1C68  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17846  1C69  0021               	movlb	1	; select bank1
 17847  1C6A  00BC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17848  1C6B  0008               	return
 17849  1C6C                     __end_of_DimmerIntrIOCPointSelect:	
 17850                           
 17851                           	psect	text122
 17852  1C98                     __ptext122:	
 17853 ;; *************** function _INT_ISR *****************
 17854 ;; Defined at:
 17855 ;;		line 250 in file "../src/MCU_B1.c"
 17856 ;; Parameters:    Size  Location     Type
 17857 ;;		None
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;		None
 17860 ;; Return value:  Size  Location     Type
 17861 ;;		None               void
 17862 ;; Registers used:
 17863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;Total ram usage:        0 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    2
 17876 ;; This function calls:
 17877 ;;		_setRF_ReceiveGO
 17878 ;; This function is called by:
 17879 ;;		_ISR
 17880 ;; This function uses a non-reentrant model
 17881 ;;
 17882                           
 17883                           
 17884                           ;psect for function _INT_ISR
 17885  1C98                     _INT_ISR:	
 17886                           
 17887                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 17888                           
 17889                           ;incstack = 0
 17890                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17891  1C98  1E0B               	btfss	11,4	;volatile
 17892  1C99  0008               	return
 17893  1C9A  1C8B               	btfss	11,1	;volatile
 17894  1C9B  0008               	return
 17895                           
 17896                           ;MCU_B1.c: 252: INTF = 0;
 17897  1C9C  108B               	bcf	11,1	;volatile
 17898                           
 17899                           ;MCU_B1.c: 253: INTE = 0;
 17900  1C9D  120B               	bcf	11,4	;volatile
 17901                           
 17902                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 17903  1C9E  01F2               	clrf	setRF_ReceiveGO@command
 17904  1C9F  0AF2               	incf	setRF_ReceiveGO@command,f
 17905  1CA0  3001               	movlw	1
 17906  1CA1  319E  26B3         	fcall	_setRF_ReceiveGO
 17907  1CA3  0008               	return
 17908  1CA4                     __end_of_INT_ISR:	
 17909                           
 17910                           	psect	text123
 17911  1EB3                     __ptext123:	
 17912 ;; *************** function _setRF_ReceiveGO *****************
 17913 ;; Defined at:
 17914 ;;		line 39 in file "../src/RF_Control_B1.c"
 17915 ;; Parameters:    Size  Location     Type
 17916 ;;  rf              1    wreg     unsigned char 
 17917 ;;  command         1    2[COMMON] unsigned char 
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  rf              1    3[COMMON] unsigned char 
 17920 ;; Return value:  Size  Location     Type
 17921 ;;		None               void
 17922 ;; Registers used:
 17923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17929 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;Total ram usage:        2 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    1
 17936 ;; This function calls:
 17937 ;;		i1_RfPointSelect
 17938 ;; This function is called by:
 17939 ;;		_INT_ISR
 17940 ;; This function uses a non-reentrant model
 17941 ;;
 17942                           
 17943                           
 17944                           ;psect for function _setRF_ReceiveGO
 17945  1EB3                     _setRF_ReceiveGO:	
 17946                           
 17947                           ;incstack = 0
 17948                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17949                           ;setRF_ReceiveGO@rf stored from wreg
 17950  1EB3  00F3               	movwf	setRF_ReceiveGO@rf
 17951                           
 17952                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 17953  1EB4  0873               	movf	setRF_ReceiveGO@rf,w
 17954  1EB5  319C  24EC  319E   	fcall	i1_RfPointSelect
 17955                           
 17956                           ;RF_Control_B1.c: 41: if (RF->RxStatus == 1) {
 17957  1EB8  087A               	movf	_RF,w
 17958  1EB9  0086               	movwf	6
 17959  1EBA  0187               	clrf	7
 17960  1EBB  1D81               	btfss	1,3
 17961  1EBC  0008               	return
 17962                           
 17963                           ;RF_Control_B1.c: 42: RF->RxStatus = 0;
 17964  1EBD  087A               	movf	_RF,w
 17965  1EBE  0086               	movwf	6
 17966  1EBF  0187               	clrf	7
 17967  1EC0  1181               	bcf	1,3
 17968                           
 17969                           ;RF_Control_B1.c: 43: RF->Run = 1;
 17970  1EC1  0A7A               	incf	_RF,w
 17971  1EC2  0086               	movwf	6
 17972  1EC3  0187               	clrf	7
 17973  1EC4  1481               	bsf	1,1
 17974                           
 17975                           ;RF_Control_B1.c: 44: RF->ReceiveGO = command;
 17976  1EC5  087A               	movf	_RF,w
 17977  1EC6  0086               	movwf	6
 17978  1EC7  0187               	clrf	7
 17979  1EC8  0872               	movf	setRF_ReceiveGO@command,w
 17980  1EC9  1081               	bcf	1,1
 17981  1ECA  1D03               	skipz
 17982  1ECB  1481               	bsf	1,1
 17983  1ECC  0008               	return
 17984  1ECD                     __end_of_setRF_ReceiveGO:	
 17985                           
 17986                           	psect	text124
 17987  1CEC                     __ptext124:	
 17988 ;; *************** function i1_RfPointSelect *****************
 17989 ;; Defined at:
 17990 ;;		line 7 in file "../src/RF_Control_B1.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;  rf              1    wreg     unsigned char 
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;  rf              1    1[COMMON] unsigned char 
 17995 ;; Return value:  Size  Location     Type
 17996 ;;		None               void
 17997 ;; Registers used:
 17998 ;;		wreg
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;Total ram usage:        2 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; This function calls:
 18011 ;;		Nothing
 18012 ;; This function is called by:
 18013 ;;		_setRF_ReceiveGO
 18014 ;; This function uses a non-reentrant model
 18015 ;;
 18016                           
 18017                           
 18018                           ;psect for function i1_RfPointSelect
 18019  1CEC                     i1_RfPointSelect:	
 18020                           
 18021                           ;incstack = 0
 18022                           ; Regs used in i1_RfPointSelect: [wreg]
 18023                           ;i1RfPointSelect@rf stored from wreg
 18024  1CEC  00F1               	movwf	i1RfPointSelect@rf
 18025                           
 18026                           ;RF_Control_B1.c: 9: if (rf == 1) {
 18027  1CED  0871               	movf	i1RfPointSelect@rf,w
 18028  1CEE  3A01               	xorlw	1
 18029  1CEF  1D03               	skipz
 18030  1CF0  2CF5               	goto	i1l6214
 18031                           
 18032                           ;RF_Control_B1.c: 10: RF = &RF1;
 18033  1CF1  30D8               	movlw	_RF1& (0+255)
 18034  1CF2  00F0               	movwf	??i1_RfPointSelect
 18035  1CF3  0870               	movf	??i1_RfPointSelect,w
 18036  1CF4  00FA               	movwf	_RF
 18037  1CF5                     i1l6214:	
 18038                           
 18039                           ;RF_Control_B1.c: 11: }
 18040                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 18041  1CF5  1A0B               	btfsc	11,4	;volatile
 18042  1CF6  0008               	return
 18043                           
 18044                           ;RF_Control_B1.c: 13: INTE = 1;
 18045  1CF7  160B               	bsf	11,4	;volatile
 18046  1CF8  0008               	return
 18047  1CF9                     __end_ofi1_RfPointSelect:	
 18048  007E                     btemp	set	126	;btemp
 18049  007E                     pic14e$flags	set	126
 18050  007E                     wtemp	set	126
 18051  007E                     wtemp0	set	126
 18052  0080                     wtemp1	set	128
 18053  0082                     wtemp2	set	130
 18054  0084                     wtemp3	set	132
 18055  0086                     wtemp4	set	134
 18056  0088                     wtemp5	set	136
 18057  007F                     wtemp6	set	127
 18058  007E                     ttemp	set	126
 18059  007E                     ttemp0	set	126
 18060  0081                     ttemp1	set	129
 18061  0084                     ttemp2	set	132
 18062  0087                     ttemp3	set	135
 18063  007F                     ttemp4	set	127
 18064  007E                     ltemp	set	126
 18065  007E                     ltemp0	set	126
 18066  0082                     ltemp1	set	130
 18067  0086                     ltemp2	set	134
 18068  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         178
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      80
    BANK2            80      0      60
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK2[20]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getPowerFault_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   82427
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                   _getPowerFault_AD
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1589
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     130
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19883
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   19883
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8867
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8346
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0     927
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     866
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     866
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28121
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   28121
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   26042
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1395
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24603
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9827
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     849
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1671
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    4597
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    4597
                                             16 BANK0      2     2      0
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    4597
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      44
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     194
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3405
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     196
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    1768
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     932
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     932
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9185
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9095
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1190
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     822
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      90
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9274
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9274
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     386
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     450
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1351
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     284
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _getPowerFault_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3C       9       75.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 15 14:05:31 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 00BE  
                                     _RD 0CA8                                       _RF 007A  
                __end_of_CC2500_WriteREG 1E9A                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1C61               _getDimmerLights_StatusFlag 1C57  
                 __end_of_setDelayOff_GO 1744                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 1631                             ___ftadd@sign 0048  
                                    l323 1E74                                      l324 1E76  
                                    l260 1319                                      l261 131E  
                                    l335 1E89                                      l271 073A  
                                    l255 12EF                                      l264 1321  
                                    l353 1EF0                                      l290 11BA  
                                    l347 1D71                                      l276 074C  
                                    l293 11C0                                      l359 109E  
                                    l817 1609                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000D  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 014C                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BD  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00D8                                      _ISR 0004  
        setPowerFault_Exceptions@command 002F                                      _Sw1 0143  
                                    _Buz 00B7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1E81           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1C6C                          __end_of_ADC_Set 1C34  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0B34  
                  _setDimmerLights_ERROR 14DB                    _setDimmerLights_AdjRF 1077  
                  _setDimmerLights_AdjGo 1DA9                                     ?_ISR 0070  
                        _PowerFault_Main 1BE0                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1DDA                             ___ftdiv@sign 003D  
                                   l1313 1223                 ?_DimmerLightsPointSelect 0070  
                                   l2316 1C07                                     l1287 1E44  
                                   l5100 0865                          __end_of_IOC_Set 1D13  
                                   l5102 086D                                     l1742 139C  
                                   l5120 1FC7                                     l5202 0E0B  
                                   l1738 043B                                     l2804 0877  
                                   l5132 0564                                     l5230 0E7B  
                                   l5222 0E62                                     l6006 1240  
                                   l5142 057A                                     l5208 0E21  
                                   l5320 0C19                                     l5312 0BFE  
                                   l5160 05A7                                     l5136 056B  
                                   l5090 083D                                     l5322 0C22  
                                   l5314 0C0C                                     l5402 1D2A  
                                   l5162 05B1                                     l5154 0594  
                                   l5250 0F79                                     l6114 14A5  
                                   l6202 0A22                                     l2827 05DB  
                                   l1963 143C                                     l5092 0847  
                                   l5324 0C25                                     l6052 1207  
                                   l5172 05CD                                     l5164 05B6  
                                   l5244 0F63                                     l5422 1536  
                                   l5094 084C                                     l5086 0836  
                                   l5502 08EA                                     l5182 05FF  
                                   l5174 05D7                                     l5166 05BA  
                                   l5262 0FB4                                     l1990 12D2  
                                   l5350 1142                                     l6126 14BB  
                                   l7030 0A89                                     l5440 1555  
                                   l5328 0C33                                     l5600 1792  
                                   l5192 061A                                     l5360 114C  
                                   l5352 1144                                     l5450 1570  
                                   l5178 05ED                                     l5274 0FD0  
                                   l5266 0FBC                                     l5354 1146  
                                   l7122 17CE                                     l5428 1541  
                                   l5604 1798                                     l5612 07D2  
                                   l5356 1148                                     l5364 1151  
                                   l5454 1578                                     l5446 1567  
                                   l5438 1549                                     l5470 0C84  
                                   l2798 0860                                     l5294 0BCE  
                                   l5390 1FEA                                     l5278 0FD8  
                                   l5358 114A                                     l5366 1165  
                                   l5542 171D                                     l6166 15C5  
                                   l7038 0AB5                                     l7118 17C3  
                                   l5544 172A                                     l5474 0CA4  
                                   l5394 1FF5                                     l5570 175A  
                                   l5650 1F18                                     l6098 1F8C  
                                   l5538 1717                                     l5580 176A  
                                   l6436 1658                                     l6604 03E9  
                                   l5900 1301                                     l5548 1736  
                                   l5566 1754                                     l5574 1760  
                                   l6446 1686                                     l6438 165E  
                                   l5734 0D1B                                     l5718 0CE1  
                                   l5584 1770                                     l6472 12A1  
                                   l6616 0429                                     l6608 040C  
                                   l5648 1F12                                     l5912 070B  
                                   l5920 073D                                     l5728 0D05  
                                   l6704 06EA                                     l6640 064D  
                                   l6554 091A                                     l6618 042F  
                                   l6650 0666                                     l5596 178C  
                                   l5588 1776                                     l6548 0901  
                                   l6468 129A                                     l5686 0B89  
                                   l6558 0960                                     l5790 15ED  
                                   l5950 07A4                                     l5758 12C0  
                                   l6662 068B                                     l6840 0F31  
                                   l6584 037A                                     l5936 077D  
                                   l6752 0245                                     l6736 0210  
                                   l6834 0F0B                                     l6842 0F36  
                                   l5794 1600                                     l5962 07BD  
                                   l5874 09C4                                     l6690 06CD  
                                   l6762 0272                                     l5972 10AF  
                                   l5796 1605                                     l5948 078C  
                                   l5868 09A9                                     l6676 06A8  
                                   l6846 0F3D                                     l5974 10BA  
                                   l5878 09CD                                     l6776 02B6  
                                   l6938 04BE                                     l6786 02E9  
                  _myMain_Initialization 1E11                                     l6982 1369  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1CA4                                     _LATC 010E  
                                   u4100 0898                                     u4015 1556  
                                   u4025 1560                                     u4105 0896  
                                   u4035 1568                                     u3315 087E  
                                   u3245 0842                                     u3265 085B  
                                   u3435 0595                                     u3285 0868  
                                   u3605 0E43                                     u3525 05CE  
                                   u3615 0E63                                     u3625 0E72  
                                   u3465 05A8                                     u3705 0FBD  
                                   u3635 0E7C                                     u3715 0FC3  
                                   _PEIE 005E                                     _INTE 005C  
                                   _INTF 0059                                     u3815 0BFF  
                                   u3495 05BB                                     u6065 0EC8  
                                   u3745 0FD9                                     u6305 0A61  
                                   u3595 0E33                                     u3755 0FDF  
                                   u3675 0F85                                     u6315 0A9F  
                                   u3845 0C1A                                     u3685 0F95  
                                   u4745 10A4                                     u3785 0BD5  
                                   u6265 1350                                     u6285 147C  
                                   u3995 154C                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1C12                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 00C7  
                                   _main 17A2                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 1BE0                      __end_of_DlyOff_Main 0B34  
                        __end_of_RF_Main 1C03                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1C18                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1371                      DelayTimejudge@value 0021  
                          _RfPointSelect 1D20               __end_of_setRFSW_AdjControl 12E8  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
            __size_of_setPowerFault_Main 0106                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1CEC  
          __end_of_DimmerIntrPointSelect 1C57                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 157F  
                        __end_of___ftadd 0632                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0E9D                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                          __end_of___fttol 0C3C  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                 _setDimmerLights_Switch 1D79                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EC  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1F3E  
             _setDimmerLights_IntrIOC_GO 1F1F                         __end_of_TMR0_ISR 1196  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 1D20  
                                  _getAD 1E3A                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1631            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0ABB              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 002F                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1DEB  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 088E              __size_of_Flash_Memory_Write 0033  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 168C  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1800  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1BFB  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0BB5                     _setSw_Initialization 1D99  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0968  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 1BE3  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C8D  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0ABB                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B                        ?_getPowerFault_AD 0070  
                       ___awdiv@dividend 0022                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1FDE                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 088E                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1D89                                   i1l6214 1CF5  
                                 i1l6322 00A4                                   i1l6340 00EE  
                                 i1l6342 00F4                                   i1l6370 0175  
                                 i1l6354 0129                                   i1l6362 0154  
                                 i1l6346 0107                                   i1l6348 010D  
                                 i1l6380 01A8                                   i1l6358 0140  
                                 i1l6368 016F                                   i1l6394 01D4  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u516_25 007D                       ??_getPowerFault_AD 0024  
                                 u617_25 1187                                   _OSCCON 0099  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1E9A                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1C1F           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E3A                                   _Dimmer 00BA  
                                 _DlySw1 00D3               __end_of_Mcu_Initialization 1E68  
                    __end_of_Buzzer_Main 0F4C                                   _Memory 00EF  
                                 _Timer0 00ED       __end_of_setDimmerLights_TriggerAdj 1DC9  
             _setDimmerLights_TriggerAdj 1DB9            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1CEC              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 1744  
                                 _myMain 00EE                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0C3C  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
           __size_of_my_TestPointCleared 0012                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 01FA              _setDimmerLights_IntrControl 0044  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                  __end_of_SwPointSelect 1C98                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1CBC  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1C07                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 16E7         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1077    __size_of_setPowerFault_Initialization 0011  
           _setPowerFault_Initialization 1066                  __end_of__initialization 0040  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1F9C                            __end_of_getAD 1E50  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003E                       _LED_Initialization 1CD4  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 001A  
                       ?_setDimmerLights 0024                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1C1F                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0E9D                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1BEF  
                             __pnvCOMMON 007D            ?_setPowerFault_Initialization 0070  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1CF9                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 002C  
                             __pmaintext 17A2                      _CC2500_WriteCommand 1D69  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A0                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1C2D  
              _PowerFault_Initialization 1BDD                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
           __end_of_setRF_Initialization 1C3B                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 12A8                  __end_of_RfSWPointSelect 1CC8  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1DC9  
                                _IOC_Set 1D06                     __size_of_setLog_Code 0047  
                                _INT_ISR 1C98                                  _INT_Set 1C0C  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 132C  
                      _Flash_Memory_Read 1ECD              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 00BE                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 1BFF                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 09D6  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 157F                          _setPercentValue 13B6  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E9  
           __end_of_CC2500_FrequencyCabr 1CB0                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00E1                                  _VarLED2 00E5  
                      __end_of_getRxData 14DB               __end_of_setPowerFault_Main 0444  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C6C  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1D99  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1D89  
                                ___awdiv 152B                                  ___ftadd 053C  
                         ??_setSw_Enable 0022                                  ___ftdiv 0DF4  
                                ___ftmul 0F4C                                  ___fttol 0BB5  
                    __end_of_Switch_Main 1C07                  ??_Buzzer_Initialization 0020  
                                __myMain 0120                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0088                           ??_setSw_Status 0023  
                                __ptext1 1DEB                                  __ptext2 0A47  
                                __ptext3 1E11                                  __ptext4 1443  
                                __ptext5 1E3A                                  __ptext6 1C03  
                                __ptext7 01FA                                  __ptext8 1D2E  
                                __ptext9 157F                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 1C4D  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1371  
              __end_of_Flash_Memory_Read 1EE7                               _setRF_Main 0632  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1BF3  
                      _DimmerLights_Main 1C26                                  _my_Main 0A47  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1C82                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1BE7               __end_of_CC2500_ClearTXFIFO 1BEB  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 1FDE                      _DelayOffPointSelect 1CB0  
                                clrloop0 07FB           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1C4D                     end_of_initialization 0040  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 10E6  
                          _DelayTime_1us 1099                        __end_of_setTxData 0DF4  
             __end_of_Flash_Memory_Write 122A                      _my_TestPointCleared 1DEB  
                                init_ram 1C12                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C13                               _setSw_Main 01FA  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1EE7  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1DDA  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0707                            _CC2500_TxData 12E8  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 10E6  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 004B            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 08FA  
                _DimmerLights_Exceptions 15D7                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C3B                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                     ?_my_TestPointCleared 0070  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1C2D  
                     _Mcu_Initialization 1E50                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4803 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 2000                  __end_of_Sw_DimmerOnFunc 15D7  
                __end_of_setPercentValue 13FC                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1110                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 13B6                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 122A                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F02                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1EB3  
                   _setRF_Initialization 1C34                              _Switch_Main 1C03  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C82  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E25  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0031  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C61  
                  ??_my_TestPointCleared 0020                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 002F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1F7C  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 17A2  
                         __end_of_setBuz 0CC4                     _CC2500_FrequencyCabr 1CA4  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0CC4                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 07C5  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1E11  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F5D  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1D69  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00DD  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1D5A  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1D2E  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 0154  
              ??_DimmerLights_Exceptions 002D                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C3  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1BEB               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 07FA                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$3967 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0081                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0134                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 0027                          ??_CC2500_RxData 002D  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00ED  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00D5                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                         _getPowerFault_AD 1443  
      __size_of_setPowerFault_Exceptions 0045      __end_of_Flash_Memory_Initialization 053C  
            _Flash_Memory_Initialization 0444                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1E25  
                              __ptext101 1BEB                                __ptext110 1D69  
                              __ptext102 1196                                __ptext111 1E68  
                              __ptext103 10E6                                __ptext120 1F1F  
                              __ptext112 0E9D                                __ptext104 1F3E  
                              __ptext121 1C61                                __ptext113 1C6C  
                              __ptext105 1E81                                __ptext122 1C98  
                              __ptext106 1CA4                                __ptext123 1EB3  
                              __ptext115 1167                                __ptext107 1099  
                              __ptext124 1CEC                                __ptext116 0044  
                              __ptext108 1BE7                                __ptext117 1C4D  
                              __ptext109 1BE3                                 ?___ftadd 003E  
                              __ptext118 1DC9                                __ptext119 1C18  
                              _getRxData 148E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0D54                          _setRF_ReceiveGO 1EB3  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 1C77                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1C0C                       _setPowerFault_Main 033E  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0050  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 0144            __end_of_setDimmerLights_ERROR 152B  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1099  
          __end_of_setDimmerLights_AdjGo 1DB9                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C4  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1E25                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0016                             _setRF_Enable 10BF  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 1C8D  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 12A8  
                    _DimmerLightsIntrIOC 00BC                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1CE0  
                        SwPointSelect@sw 0021                                clear_ram0 07FA  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0D54  
    __end_of_DimmerLights_Initialization 1D06              _DimmerLights_Initialization 1CF9  
                     _CC2500_ClearRXFIFO 1BE3                       _CC2500_ClearTXFIFO 1BE7  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D3C  
                   ??_setPowerFault_Main 0030                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 11F7                               ?_getRxData 0070  
                               _TMR0_ISR 1167                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1D13                         _Sw_DimmerAdjFunc 11C6  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1F9C              __end_of_CC2500_WriteCommand 1D79  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 09D6  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B9                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1CD4                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1443  
                  _DlyOff_Initialization 1C77                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1BF7                    _Switch_Initialization 1C44  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1D3C                             _setMemory_GO 1F5D  
                   __size_of_Buzzer_Main 00AF                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1E68             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1ECD                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 113B    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1110                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1D5A                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000D  
                               ___awtoft 1FBC                         ??_LedPointSelect 0020  
                               ___ftpack 082D                             _setSw_Status 1D4B  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1268                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 08FA                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 09D6                                 __ptext11 11C6  
                               __ptext20 13FC                                 __ptext12 1DB9  
                               __ptext21 0968                                 __ptext13 1DA9  
                               __ptext30 053C                                 __ptext22 0CC4  
                               __ptext14 1C44                                 __ptext31 1F7C  
                               __ptext23 16E7                                 __ptext15 1D99  
                               __ptext40 1371                                 __ptext32 12E8  
                               __ptext24 113B                                 __ptext16 1C07  
                               __ptext41 1D5A                                 __ptext33 0707  
                               __ptext25 12A8                                 __ptext17 1BFF  
                               __ptext50 1E9A                                 __ptext42 10BF  
                               __ptext34 1EE7                                 __ptext26 07C5  
                               __ptext18 0632                                 __ptext51 1D06  
                               __ptext43 15D7                                 __ptext35 1F02  
                               __ptext27 1077                                 __ptext19 148E  
                               __ptext60 08FA                                 __ptext52 1C0C  
                               __ptext44 1110                                 __ptext36 1BFB  
                               __ptext28 168C                                 __ptext61 1CC8  
                               __ptext53 1BF7                                 __ptext45 14DB  
                               __ptext37 1C34                                 __ptext29 0F4C  
                               __ptext70 1744                                 __ptext62 0444  
                               __ptext54 1C2D                                 __ptext46 1BDD  
                               __ptext38 1BE0                                 __ptext71 1FDE  
                               __ptext63 11F7                                 __ptext55 1CE0  
                               __ptext47 1066                                 __ptext39 033E  
                               __ptext80 0D54                                 __ptext72 1DFD  
                               __ptext64 1C3B                                 __ptext56 1268  
                               __ptext48 1E50                                 __ptext81 1D20  
                               __ptext73 1F5D                                 __ptext65 1ECD  
                               __ptext57 1CD4                                 __ptext49 1D13  
                               __ptext90 1D3C                                 __ptext82 1D4B  
                               __ptext74 1C57                                 __ptext66 1C26  
                               __ptext58 1DDA                                 __ptext91 1CBC  
                               __ptext83 1C8D                                 __ptext75 1CF9  
                               __ptext67 1631                                 __ptext59 132C  
                               __ptext92 1D89                                 __ptext84 088E  
                               __ptext76 0800                                 __ptext68 122A  
                               __ptext93 1D79                                 __ptext85 13B6  
                               __ptext77 1C1F                                 __ptext69 0B34  
                               __ptext94 1C82                                 __ptext86 0BB5  
                               __ptext78 1BF3                                 __ptext95 0C3C  
                               __ptext87 0DF4                                 __ptext79 0ABB  
                               __ptext96 152B                                 __ptext88 1FBC  
                               __ptext97 1BEF                                 __ptext89 082D  
                               __ptext98 1C77                                 __ptext99 1CB0  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1D4B  
          __end_of_Dimmer_Initialization 1C26             __end_of_setDimmerLights_Main 168C  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 005E  
                            _setRF_Learn 1D2E                 __end_of_CC2500_SIDLEMode 1BEF  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CBC  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1DFD  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0007  
                        _CC2500_ReadByte 1F02                       _CC2500_InitPATable 1F3E  
    __size_of_getDimmerLights_StatusFlag 000A              __end_of_my_TestPointCleared 1DFD  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0707  
            __size_of_Mcu_Initialization 0018                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1196  
            __end_of_Flash_Memory_Modify 0968                        ??_getPercentValue 0059  
                            _setLog_Code 13FC              __end_of_Flash_Memory_Unlock 1C44  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1E81  
                     __end_of_setSw_Main 033E                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 113B  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 148E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 082D  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 0800  
            __end_of_setDimmerLights_Adj 1268                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1BFB  
   __size_of_setDimmerLights_IntrControl 01B6                     _Flash_Memory_Erasing 1CC8  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 1BF3      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 1BF7  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 16E7         __size_of_setControl_Lights_Table 006E  
                 __end_of_DelayTimejudge 1167                   __size_of_RfPointSelect 000E  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 10BF  
               __end_of_Sw_DimmerAdjFunc 11F7                  __end_of_CC2500_ReadByte 1F1F  
           __end_of_setSw_Initialization 1DA9                     getPercentValue@value 005B  
                           _RF_RxDisable 1F7C               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 1CE0         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0058                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1BFF                 __end_of_Sw_DimmerOffFunc 0A47  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 07C5                    __end_of_CC2500_TxData 132C  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 11C6  
