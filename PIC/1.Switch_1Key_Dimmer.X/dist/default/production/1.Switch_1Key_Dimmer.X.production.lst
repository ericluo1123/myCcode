

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 14 17:19:29 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	intentry,global,class=CODE,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	dabs	1,0x7E,2
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  0116                     	;# 
   196  0117                     	;# 
   197  011D                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  0191                     	;# 
   202  0191                     	;# 
   203  0192                     	;# 
   204  0193                     	;# 
   205  0193                     	;# 
   206  0194                     	;# 
   207  0195                     	;# 
   208  0196                     	;# 
   209  0197                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019C                     	;# 
   217  019C                     	;# 
   218  019D                     	;# 
   219  019E                     	;# 
   220  019F                     	;# 
   221  020D                     	;# 
   222  0210                     	;# 
   223  0211                     	;# 
   224  0211                     	;# 
   225  0212                     	;# 
   226  0212                     	;# 
   227  0213                     	;# 
   228  0213                     	;# 
   229  0214                     	;# 
   230  0214                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0215                     	;# 
   234  0216                     	;# 
   235  0216                     	;# 
   236  0217                     	;# 
   237  0217                     	;# 
   238  0291                     	;# 
   239  0291                     	;# 
   240  0292                     	;# 
   241  0293                     	;# 
   242  0298                     	;# 
   243  0298                     	;# 
   244  0299                     	;# 
   245  029A                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  0FE4                     	;# 
   250  0FE5                     	;# 
   251  0FE6                     	;# 
   252  0FE7                     	;# 
   253  0FE8                     	;# 
   254  0FE9                     	;# 
   255  0FEA                     	;# 
   256  0FEB                     	;# 
   257  0FED                     	;# 
   258  0FEE                     	;# 
   259  0FEF                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  0010                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0016                     	;# 
   281  0017                     	;# 
   282  0018                     	;# 
   283  0019                     	;# 
   284  001A                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  008C                     	;# 
   288  008D                     	;# 
   289  008E                     	;# 
   290  0090                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0095                     	;# 
   294  0096                     	;# 
   295  0097                     	;# 
   296  0099                     	;# 
   297  009A                     	;# 
   298  009B                     	;# 
   299  009B                     	;# 
   300  009C                     	;# 
   301  009D                     	;# 
   302  009E                     	;# 
   303  010C                     	;# 
   304  010D                     	;# 
   305  010E                     	;# 
   306  0116                     	;# 
   307  0117                     	;# 
   308  011D                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311  018E                     	;# 
   312  0191                     	;# 
   313  0191                     	;# 
   314  0192                     	;# 
   315  0193                     	;# 
   316  0193                     	;# 
   317  0194                     	;# 
   318  0195                     	;# 
   319  0196                     	;# 
   320  0197                     	;# 
   321  0199                     	;# 
   322  019A                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019C                     	;# 
   328  019C                     	;# 
   329  019D                     	;# 
   330  019E                     	;# 
   331  019F                     	;# 
   332  020D                     	;# 
   333  0210                     	;# 
   334  0211                     	;# 
   335  0211                     	;# 
   336  0212                     	;# 
   337  0212                     	;# 
   338  0213                     	;# 
   339  0213                     	;# 
   340  0214                     	;# 
   341  0214                     	;# 
   342  0215                     	;# 
   343  0215                     	;# 
   344  0215                     	;# 
   345  0216                     	;# 
   346  0216                     	;# 
   347  0217                     	;# 
   348  0217                     	;# 
   349  0291                     	;# 
   350  0291                     	;# 
   351  0292                     	;# 
   352  0293                     	;# 
   353  0298                     	;# 
   354  0298                     	;# 
   355  0299                     	;# 
   356  029A                     	;# 
   357  0394                     	;# 
   358  0395                     	;# 
   359  0396                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEB                     	;# 
   368  0FED                     	;# 
   369  0FEE                     	;# 
   370  0FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000D                     	;# 
   385  000E                     	;# 
   386  0010                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  008D                     	;# 
   400  008E                     	;# 
   401  0090                     	;# 
   402  0091                     	;# 
   403  0092                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  010C                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  0116                     	;# 
   418  0117                     	;# 
   419  011D                     	;# 
   420  018C                     	;# 
   421  018D                     	;# 
   422  018E                     	;# 
   423  0191                     	;# 
   424  0191                     	;# 
   425  0192                     	;# 
   426  0193                     	;# 
   427  0193                     	;# 
   428  0194                     	;# 
   429  0195                     	;# 
   430  0196                     	;# 
   431  0197                     	;# 
   432  0199                     	;# 
   433  019A                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019C                     	;# 
   440  019D                     	;# 
   441  019E                     	;# 
   442  019F                     	;# 
   443  020D                     	;# 
   444  0210                     	;# 
   445  0211                     	;# 
   446  0211                     	;# 
   447  0212                     	;# 
   448  0212                     	;# 
   449  0213                     	;# 
   450  0213                     	;# 
   451  0214                     	;# 
   452  0214                     	;# 
   453  0215                     	;# 
   454  0215                     	;# 
   455  0215                     	;# 
   456  0216                     	;# 
   457  0216                     	;# 
   458  0217                     	;# 
   459  0217                     	;# 
   460  0291                     	;# 
   461  0291                     	;# 
   462  0292                     	;# 
   463  0293                     	;# 
   464  0298                     	;# 
   465  0298                     	;# 
   466  0299                     	;# 
   467  029A                     	;# 
   468  0394                     	;# 
   469  0395                     	;# 
   470  0396                     	;# 
   471  0FE4                     	;# 
   472  0FE5                     	;# 
   473  0FE6                     	;# 
   474  0FE7                     	;# 
   475  0FE8                     	;# 
   476  0FE9                     	;# 
   477  0FEA                     	;# 
   478  0FEB                     	;# 
   479  0FED                     	;# 
   480  0FEE                     	;# 
   481  0FEF                     	;# 
   482  0000                     	;# 
   483  0001                     	;# 
   484  0002                     	;# 
   485  0003                     	;# 
   486  0004                     	;# 
   487  0005                     	;# 
   488  0006                     	;# 
   489  0007                     	;# 
   490  0008                     	;# 
   491  0009                     	;# 
   492  000A                     	;# 
   493  000B                     	;# 
   494  000C                     	;# 
   495  000D                     	;# 
   496  000E                     	;# 
   497  0010                     	;# 
   498  0011                     	;# 
   499  0012                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0016                     	;# 
   503  0017                     	;# 
   504  0018                     	;# 
   505  0019                     	;# 
   506  001A                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  0090                     	;# 
   513  0091                     	;# 
   514  0092                     	;# 
   515  0095                     	;# 
   516  0096                     	;# 
   517  0097                     	;# 
   518  0099                     	;# 
   519  009A                     	;# 
   520  009B                     	;# 
   521  009B                     	;# 
   522  009C                     	;# 
   523  009D                     	;# 
   524  009E                     	;# 
   525  010C                     	;# 
   526  010D                     	;# 
   527  010E                     	;# 
   528  0116                     	;# 
   529  0117                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018D                     	;# 
   533  018E                     	;# 
   534  0191                     	;# 
   535  0191                     	;# 
   536  0192                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0197                     	;# 
   543  0199                     	;# 
   544  019A                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019C                     	;# 
   550  019C                     	;# 
   551  019D                     	;# 
   552  019E                     	;# 
   553  019F                     	;# 
   554  020D                     	;# 
   555  0210                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0216                     	;# 
   568  0216                     	;# 
   569  0217                     	;# 
   570  0217                     	;# 
   571  0291                     	;# 
   572  0291                     	;# 
   573  0292                     	;# 
   574  0293                     	;# 
   575  0298                     	;# 
   576  0298                     	;# 
   577  0299                     	;# 
   578  029A                     	;# 
   579  0394                     	;# 
   580  0395                     	;# 
   581  0396                     	;# 
   582  0FE4                     	;# 
   583  0FE5                     	;# 
   584  0FE6                     	;# 
   585  0FE7                     	;# 
   586  0FE8                     	;# 
   587  0FE9                     	;# 
   588  0FEA                     	;# 
   589  0FEB                     	;# 
   590  0FED                     	;# 
   591  0FEE                     	;# 
   592  0FEF                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0008                     	;# 
   602  0009                     	;# 
   603  000A                     	;# 
   604  000B                     	;# 
   605  000C                     	;# 
   606  000D                     	;# 
   607  000E                     	;# 
   608  0010                     	;# 
   609  0011                     	;# 
   610  0012                     	;# 
   611  0015                     	;# 
   612  0016                     	;# 
   613  0016                     	;# 
   614  0017                     	;# 
   615  0018                     	;# 
   616  0019                     	;# 
   617  001A                     	;# 
   618  001B                     	;# 
   619  001C                     	;# 
   620  008C                     	;# 
   621  008D                     	;# 
   622  008E                     	;# 
   623  0090                     	;# 
   624  0091                     	;# 
   625  0092                     	;# 
   626  0095                     	;# 
   627  0096                     	;# 
   628  0097                     	;# 
   629  0099                     	;# 
   630  009A                     	;# 
   631  009B                     	;# 
   632  009B                     	;# 
   633  009C                     	;# 
   634  009D                     	;# 
   635  009E                     	;# 
   636  010C                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  011D                     	;# 
   642  018C                     	;# 
   643  018D                     	;# 
   644  018E                     	;# 
   645  0191                     	;# 
   646  0191                     	;# 
   647  0192                     	;# 
   648  0193                     	;# 
   649  0193                     	;# 
   650  0194                     	;# 
   651  0195                     	;# 
   652  0196                     	;# 
   653  0197                     	;# 
   654  0199                     	;# 
   655  019A                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019C                     	;# 
   661  019C                     	;# 
   662  019D                     	;# 
   663  019E                     	;# 
   664  019F                     	;# 
   665  020D                     	;# 
   666  0210                     	;# 
   667  0211                     	;# 
   668  0211                     	;# 
   669  0212                     	;# 
   670  0212                     	;# 
   671  0213                     	;# 
   672  0213                     	;# 
   673  0214                     	;# 
   674  0214                     	;# 
   675  0215                     	;# 
   676  0215                     	;# 
   677  0215                     	;# 
   678  0216                     	;# 
   679  0216                     	;# 
   680  0217                     	;# 
   681  0217                     	;# 
   682  0291                     	;# 
   683  0291                     	;# 
   684  0292                     	;# 
   685  0293                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  0394                     	;# 
   691  0395                     	;# 
   692  0396                     	;# 
   693  0FE4                     	;# 
   694  0FE5                     	;# 
   695  0FE6                     	;# 
   696  0FE7                     	;# 
   697  0FE8                     	;# 
   698  0FE9                     	;# 
   699  0FEA                     	;# 
   700  0FEB                     	;# 
   701  0FED                     	;# 
   702  0FEE                     	;# 
   703  0FEF                     	;# 
   704  0000                     	;# 
   705  0001                     	;# 
   706  0002                     	;# 
   707  0003                     	;# 
   708  0004                     	;# 
   709  0005                     	;# 
   710  0006                     	;# 
   711  0007                     	;# 
   712  0008                     	;# 
   713  0009                     	;# 
   714  000A                     	;# 
   715  000B                     	;# 
   716  000C                     	;# 
   717  000D                     	;# 
   718  000E                     	;# 
   719  0010                     	;# 
   720  0011                     	;# 
   721  0012                     	;# 
   722  0015                     	;# 
   723  0016                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  0090                     	;# 
   735  0091                     	;# 
   736  0092                     	;# 
   737  0095                     	;# 
   738  0096                     	;# 
   739  0097                     	;# 
   740  0099                     	;# 
   741  009A                     	;# 
   742  009B                     	;# 
   743  009B                     	;# 
   744  009C                     	;# 
   745  009D                     	;# 
   746  009E                     	;# 
   747  010C                     	;# 
   748  010D                     	;# 
   749  010E                     	;# 
   750  0116                     	;# 
   751  0117                     	;# 
   752  011D                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755  018E                     	;# 
   756  0191                     	;# 
   757  0191                     	;# 
   758  0192                     	;# 
   759  0193                     	;# 
   760  0193                     	;# 
   761  0194                     	;# 
   762  0195                     	;# 
   763  0196                     	;# 
   764  0197                     	;# 
   765  0199                     	;# 
   766  019A                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019C                     	;# 
   772  019C                     	;# 
   773  019D                     	;# 
   774  019E                     	;# 
   775  019F                     	;# 
   776  020D                     	;# 
   777  0210                     	;# 
   778  0211                     	;# 
   779  0211                     	;# 
   780  0212                     	;# 
   781  0212                     	;# 
   782  0213                     	;# 
   783  0213                     	;# 
   784  0214                     	;# 
   785  0214                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0215                     	;# 
   789  0216                     	;# 
   790  0216                     	;# 
   791  0217                     	;# 
   792  0217                     	;# 
   793  0291                     	;# 
   794  0291                     	;# 
   795  0292                     	;# 
   796  0293                     	;# 
   797  0298                     	;# 
   798  0298                     	;# 
   799  0299                     	;# 
   800  029A                     	;# 
   801  0394                     	;# 
   802  0395                     	;# 
   803  0396                     	;# 
   804  0FE4                     	;# 
   805  0FE5                     	;# 
   806  0FE6                     	;# 
   807  0FE7                     	;# 
   808  0FE8                     	;# 
   809  0FE9                     	;# 
   810  0FEA                     	;# 
   811  0FEB                     	;# 
   812  0FED                     	;# 
   813  0FEE                     	;# 
   814  0FEF                     	;# 
   815  0000                     	;# 
   816  0001                     	;# 
   817  0002                     	;# 
   818  0003                     	;# 
   819  0004                     	;# 
   820  0005                     	;# 
   821  0006                     	;# 
   822  0007                     	;# 
   823  0008                     	;# 
   824  0009                     	;# 
   825  000A                     	;# 
   826  000B                     	;# 
   827  000C                     	;# 
   828  000D                     	;# 
   829  000E                     	;# 
   830  0010                     	;# 
   831  0011                     	;# 
   832  0012                     	;# 
   833  0015                     	;# 
   834  0016                     	;# 
   835  0016                     	;# 
   836  0017                     	;# 
   837  0018                     	;# 
   838  0019                     	;# 
   839  001A                     	;# 
   840  001B                     	;# 
   841  001C                     	;# 
   842  008C                     	;# 
   843  008D                     	;# 
   844  008E                     	;# 
   845  0090                     	;# 
   846  0091                     	;# 
   847  0092                     	;# 
   848  0095                     	;# 
   849  0096                     	;# 
   850  0097                     	;# 
   851  0099                     	;# 
   852  009A                     	;# 
   853  009B                     	;# 
   854  009B                     	;# 
   855  009C                     	;# 
   856  009D                     	;# 
   857  009E                     	;# 
   858  010C                     	;# 
   859  010D                     	;# 
   860  010E                     	;# 
   861  0116                     	;# 
   862  0117                     	;# 
   863  011D                     	;# 
   864  018C                     	;# 
   865  018D                     	;# 
   866  018E                     	;# 
   867  0191                     	;# 
   868  0191                     	;# 
   869  0192                     	;# 
   870  0193                     	;# 
   871  0193                     	;# 
   872  0194                     	;# 
   873  0195                     	;# 
   874  0196                     	;# 
   875  0197                     	;# 
   876  0199                     	;# 
   877  019A                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019E                     	;# 
   886  019F                     	;# 
   887  020D                     	;# 
   888  0210                     	;# 
   889  0211                     	;# 
   890  0211                     	;# 
   891  0212                     	;# 
   892  0212                     	;# 
   893  0213                     	;# 
   894  0213                     	;# 
   895  0214                     	;# 
   896  0214                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0216                     	;# 
   901  0216                     	;# 
   902  0217                     	;# 
   903  0217                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0298                     	;# 
   909  0298                     	;# 
   910  0299                     	;# 
   911  029A                     	;# 
   912  0394                     	;# 
   913  0395                     	;# 
   914  0396                     	;# 
   915  0FE4                     	;# 
   916  0FE5                     	;# 
   917  0FE6                     	;# 
   918  0FE7                     	;# 
   919  0FE8                     	;# 
   920  0FE9                     	;# 
   921  0FEA                     	;# 
   922  0FEB                     	;# 
   923  0FED                     	;# 
   924  0FEE                     	;# 
   925  0FEF                     	;# 
   926  0000                     	;# 
   927  0001                     	;# 
   928  0002                     	;# 
   929  0003                     	;# 
   930  0004                     	;# 
   931  0005                     	;# 
   932  0006                     	;# 
   933  0007                     	;# 
   934  0008                     	;# 
   935  0009                     	;# 
   936  000A                     	;# 
   937  000B                     	;# 
   938  000C                     	;# 
   939  000D                     	;# 
   940  000E                     	;# 
   941  0010                     	;# 
   942  0011                     	;# 
   943  0012                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  008C                     	;# 
   954  008D                     	;# 
   955  008E                     	;# 
   956  0090                     	;# 
   957  0091                     	;# 
   958  0092                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0097                     	;# 
   962  0099                     	;# 
   963  009A                     	;# 
   964  009B                     	;# 
   965  009B                     	;# 
   966  009C                     	;# 
   967  009D                     	;# 
   968  009E                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010E                     	;# 
   972  0116                     	;# 
   973  0117                     	;# 
   974  011D                     	;# 
   975  018C                     	;# 
   976  018D                     	;# 
   977  018E                     	;# 
   978  0191                     	;# 
   979  0191                     	;# 
   980  0192                     	;# 
   981  0193                     	;# 
   982  0193                     	;# 
   983  0194                     	;# 
   984  0195                     	;# 
   985  0196                     	;# 
   986  0197                     	;# 
   987  0199                     	;# 
   988  019A                     	;# 
   989  019B                     	;# 
   990  019B                     	;# 
   991  019B                     	;# 
   992  019B                     	;# 
   993  019C                     	;# 
   994  019C                     	;# 
   995  019D                     	;# 
   996  019E                     	;# 
   997  019F                     	;# 
   998  020D                     	;# 
   999  0210                     	;# 
  1000  0211                     	;# 
  1001  0211                     	;# 
  1002  0212                     	;# 
  1003  0212                     	;# 
  1004  0213                     	;# 
  1005  0213                     	;# 
  1006  0214                     	;# 
  1007  0214                     	;# 
  1008  0215                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0216                     	;# 
  1012  0216                     	;# 
  1013  0217                     	;# 
  1014  0217                     	;# 
  1015  0291                     	;# 
  1016  0291                     	;# 
  1017  0292                     	;# 
  1018  0293                     	;# 
  1019  0298                     	;# 
  1020  0298                     	;# 
  1021  0299                     	;# 
  1022  029A                     	;# 
  1023  0394                     	;# 
  1024  0395                     	;# 
  1025  0396                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000D                     	;# 
  1051  000E                     	;# 
  1052  0010                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008D                     	;# 
  1066  008E                     	;# 
  1067  0090                     	;# 
  1068  0091                     	;# 
  1069  0092                     	;# 
  1070  0095                     	;# 
  1071  0096                     	;# 
  1072  0097                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  010C                     	;# 
  1081  010D                     	;# 
  1082  010E                     	;# 
  1083  0116                     	;# 
  1084  0117                     	;# 
  1085  011D                     	;# 
  1086  018C                     	;# 
  1087  018D                     	;# 
  1088  018E                     	;# 
  1089  0191                     	;# 
  1090  0191                     	;# 
  1091  0192                     	;# 
  1092  0193                     	;# 
  1093  0193                     	;# 
  1094  0194                     	;# 
  1095  0195                     	;# 
  1096  0196                     	;# 
  1097  0197                     	;# 
  1098  0199                     	;# 
  1099  019A                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019C                     	;# 
  1105  019C                     	;# 
  1106  019D                     	;# 
  1107  019E                     	;# 
  1108  019F                     	;# 
  1109  020D                     	;# 
  1110  0210                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  0394                     	;# 
  1135  0395                     	;# 
  1136  0396                     	;# 
  1137  0FE4                     	;# 
  1138  0FE5                     	;# 
  1139  0FE6                     	;# 
  1140  0FE7                     	;# 
  1141  0FE8                     	;# 
  1142  0FE9                     	;# 
  1143  0FEA                     	;# 
  1144  0FEB                     	;# 
  1145  0FED                     	;# 
  1146  0FEE                     	;# 
  1147  0FEF                     	;# 
  1148  0000                     	;# 
  1149  0001                     	;# 
  1150  0002                     	;# 
  1151  0003                     	;# 
  1152  0004                     	;# 
  1153  0005                     	;# 
  1154  0006                     	;# 
  1155  0007                     	;# 
  1156  0008                     	;# 
  1157  0009                     	;# 
  1158  000A                     	;# 
  1159  000B                     	;# 
  1160  000C                     	;# 
  1161  000D                     	;# 
  1162  000E                     	;# 
  1163  0010                     	;# 
  1164  0011                     	;# 
  1165  0012                     	;# 
  1166  0015                     	;# 
  1167  0016                     	;# 
  1168  0016                     	;# 
  1169  0017                     	;# 
  1170  0018                     	;# 
  1171  0019                     	;# 
  1172  001A                     	;# 
  1173  001B                     	;# 
  1174  001C                     	;# 
  1175  008C                     	;# 
  1176  008D                     	;# 
  1177  008E                     	;# 
  1178  0090                     	;# 
  1179  0091                     	;# 
  1180  0092                     	;# 
  1181  0095                     	;# 
  1182  0096                     	;# 
  1183  0097                     	;# 
  1184  0099                     	;# 
  1185  009A                     	;# 
  1186  009B                     	;# 
  1187  009B                     	;# 
  1188  009C                     	;# 
  1189  009D                     	;# 
  1190  009E                     	;# 
  1191  010C                     	;# 
  1192  010D                     	;# 
  1193  010E                     	;# 
  1194  0116                     	;# 
  1195  0117                     	;# 
  1196  011D                     	;# 
  1197  018C                     	;# 
  1198  018D                     	;# 
  1199  018E                     	;# 
  1200  0191                     	;# 
  1201  0191                     	;# 
  1202  0192                     	;# 
  1203  0193                     	;# 
  1204  0193                     	;# 
  1205  0194                     	;# 
  1206  0195                     	;# 
  1207  0196                     	;# 
  1208  0197                     	;# 
  1209  0199                     	;# 
  1210  019A                     	;# 
  1211  019B                     	;# 
  1212  019B                     	;# 
  1213  019B                     	;# 
  1214  019B                     	;# 
  1215  019C                     	;# 
  1216  019C                     	;# 
  1217  019D                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  020D                     	;# 
  1221  0210                     	;# 
  1222  0211                     	;# 
  1223  0211                     	;# 
  1224  0212                     	;# 
  1225  0212                     	;# 
  1226  0213                     	;# 
  1227  0213                     	;# 
  1228  0214                     	;# 
  1229  0214                     	;# 
  1230  0215                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0216                     	;# 
  1234  0216                     	;# 
  1235  0217                     	;# 
  1236  0217                     	;# 
  1237  0291                     	;# 
  1238  0291                     	;# 
  1239  0292                     	;# 
  1240  0293                     	;# 
  1241  0298                     	;# 
  1242  0298                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  0394                     	;# 
  1246  0395                     	;# 
  1247  0396                     	;# 
  1248  0FE4                     	;# 
  1249  0FE5                     	;# 
  1250  0FE6                     	;# 
  1251  0FE7                     	;# 
  1252  0FE8                     	;# 
  1253  0FE9                     	;# 
  1254  0FEA                     	;# 
  1255  0FEB                     	;# 
  1256  0FED                     	;# 
  1257  0FEE                     	;# 
  1258  0FEF                     	;# 
  1259  0000                     	;# 
  1260  0001                     	;# 
  1261  0002                     	;# 
  1262  0003                     	;# 
  1263  0004                     	;# 
  1264  0005                     	;# 
  1265  0006                     	;# 
  1266  0007                     	;# 
  1267  0008                     	;# 
  1268  0009                     	;# 
  1269  000A                     	;# 
  1270  000B                     	;# 
  1271  000C                     	;# 
  1272  000D                     	;# 
  1273  000E                     	;# 
  1274  0010                     	;# 
  1275  0011                     	;# 
  1276  0012                     	;# 
  1277  0015                     	;# 
  1278  0016                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  001A                     	;# 
  1284  001B                     	;# 
  1285  001C                     	;# 
  1286  008C                     	;# 
  1287  008D                     	;# 
  1288  008E                     	;# 
  1289  0090                     	;# 
  1290  0091                     	;# 
  1291  0092                     	;# 
  1292  0095                     	;# 
  1293  0096                     	;# 
  1294  0097                     	;# 
  1295  0099                     	;# 
  1296  009A                     	;# 
  1297  009B                     	;# 
  1298  009B                     	;# 
  1299  009C                     	;# 
  1300  009D                     	;# 
  1301  009E                     	;# 
  1302  010C                     	;# 
  1303  010D                     	;# 
  1304  010E                     	;# 
  1305  0116                     	;# 
  1306  0117                     	;# 
  1307  011D                     	;# 
  1308  018C                     	;# 
  1309  018D                     	;# 
  1310  018E                     	;# 
  1311  0191                     	;# 
  1312  0191                     	;# 
  1313  0192                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0194                     	;# 
  1317  0195                     	;# 
  1318  0196                     	;# 
  1319  0197                     	;# 
  1320  0199                     	;# 
  1321  019A                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019C                     	;# 
  1327  019C                     	;# 
  1328  019D                     	;# 
  1329  019E                     	;# 
  1330  019F                     	;# 
  1331  020D                     	;# 
  1332  0210                     	;# 
  1333  0211                     	;# 
  1334  0211                     	;# 
  1335  0212                     	;# 
  1336  0212                     	;# 
  1337  0213                     	;# 
  1338  0213                     	;# 
  1339  0214                     	;# 
  1340  0214                     	;# 
  1341  0215                     	;# 
  1342  0215                     	;# 
  1343  0215                     	;# 
  1344  0216                     	;# 
  1345  0216                     	;# 
  1346  0217                     	;# 
  1347  0217                     	;# 
  1348  0291                     	;# 
  1349  0291                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0298                     	;# 
  1353  0298                     	;# 
  1354  0299                     	;# 
  1355  029A                     	;# 
  1356  0394                     	;# 
  1357  0395                     	;# 
  1358  0396                     	;# 
  1359  0FE4                     	;# 
  1360  0FE5                     	;# 
  1361  0FE6                     	;# 
  1362  0FE7                     	;# 
  1363  0FE8                     	;# 
  1364  0FE9                     	;# 
  1365  0FEA                     	;# 
  1366  0FEB                     	;# 
  1367  0FED                     	;# 
  1368  0FEE                     	;# 
  1369  0FEF                     	;# 
  1370  0000                     	;# 
  1371  0001                     	;# 
  1372  0002                     	;# 
  1373  0003                     	;# 
  1374  0004                     	;# 
  1375  0005                     	;# 
  1376  0006                     	;# 
  1377  0007                     	;# 
  1378  0008                     	;# 
  1379  0009                     	;# 
  1380  000A                     	;# 
  1381  000B                     	;# 
  1382  000C                     	;# 
  1383  000D                     	;# 
  1384  000E                     	;# 
  1385  0010                     	;# 
  1386  0011                     	;# 
  1387  0012                     	;# 
  1388  0015                     	;# 
  1389  0016                     	;# 
  1390  0016                     	;# 
  1391  0017                     	;# 
  1392  0018                     	;# 
  1393  0019                     	;# 
  1394  001A                     	;# 
  1395  001B                     	;# 
  1396  001C                     	;# 
  1397  008C                     	;# 
  1398  008D                     	;# 
  1399  008E                     	;# 
  1400  0090                     	;# 
  1401  0091                     	;# 
  1402  0092                     	;# 
  1403  0095                     	;# 
  1404  0096                     	;# 
  1405  0097                     	;# 
  1406  0099                     	;# 
  1407  009A                     	;# 
  1408  009B                     	;# 
  1409  009B                     	;# 
  1410  009C                     	;# 
  1411  009D                     	;# 
  1412  009E                     	;# 
  1413  010C                     	;# 
  1414  010D                     	;# 
  1415  010E                     	;# 
  1416  0116                     	;# 
  1417  0117                     	;# 
  1418  011D                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  018E                     	;# 
  1422  0191                     	;# 
  1423  0191                     	;# 
  1424  0192                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0197                     	;# 
  1431  0199                     	;# 
  1432  019A                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019C                     	;# 
  1438  019C                     	;# 
  1439  019D                     	;# 
  1440  019E                     	;# 
  1441  019F                     	;# 
  1442  020D                     	;# 
  1443  0210                     	;# 
  1444  0211                     	;# 
  1445  0211                     	;# 
  1446  0212                     	;# 
  1447  0212                     	;# 
  1448  0213                     	;# 
  1449  0213                     	;# 
  1450  0214                     	;# 
  1451  0214                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0216                     	;# 
  1456  0216                     	;# 
  1457  0217                     	;# 
  1458  0217                     	;# 
  1459  0291                     	;# 
  1460  0291                     	;# 
  1461  0292                     	;# 
  1462  0293                     	;# 
  1463  0298                     	;# 
  1464  0298                     	;# 
  1465  0299                     	;# 
  1466  029A                     	;# 
  1467  0394                     	;# 
  1468  0395                     	;# 
  1469  0396                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481  0000                     	;# 
  1482  0001                     	;# 
  1483  0002                     	;# 
  1484  0003                     	;# 
  1485  0004                     	;# 
  1486  0005                     	;# 
  1487  0006                     	;# 
  1488  0007                     	;# 
  1489  0008                     	;# 
  1490  0009                     	;# 
  1491  000A                     	;# 
  1492  000B                     	;# 
  1493  000C                     	;# 
  1494  000D                     	;# 
  1495  000E                     	;# 
  1496  0010                     	;# 
  1497  0011                     	;# 
  1498  0012                     	;# 
  1499  0015                     	;# 
  1500  0016                     	;# 
  1501  0016                     	;# 
  1502  0017                     	;# 
  1503  0018                     	;# 
  1504  0019                     	;# 
  1505  001A                     	;# 
  1506  001B                     	;# 
  1507  001C                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  008E                     	;# 
  1511  0090                     	;# 
  1512  0091                     	;# 
  1513  0092                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  010C                     	;# 
  1525  010D                     	;# 
  1526  010E                     	;# 
  1527  0116                     	;# 
  1528  0117                     	;# 
  1529  011D                     	;# 
  1530  018C                     	;# 
  1531  018D                     	;# 
  1532  018E                     	;# 
  1533  0191                     	;# 
  1534  0191                     	;# 
  1535  0192                     	;# 
  1536  0193                     	;# 
  1537  0193                     	;# 
  1538  0194                     	;# 
  1539  0195                     	;# 
  1540  0196                     	;# 
  1541  0197                     	;# 
  1542  0199                     	;# 
  1543  019A                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019C                     	;# 
  1549  019C                     	;# 
  1550  019D                     	;# 
  1551  019E                     	;# 
  1552  019F                     	;# 
  1553  020D                     	;# 
  1554  0210                     	;# 
  1555  0211                     	;# 
  1556  0211                     	;# 
  1557  0212                     	;# 
  1558  0212                     	;# 
  1559  0213                     	;# 
  1560  0213                     	;# 
  1561  0214                     	;# 
  1562  0214                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0216                     	;# 
  1567  0216                     	;# 
  1568  0217                     	;# 
  1569  0217                     	;# 
  1570  0291                     	;# 
  1571  0291                     	;# 
  1572  0292                     	;# 
  1573  0293                     	;# 
  1574  0298                     	;# 
  1575  0298                     	;# 
  1576  0299                     	;# 
  1577  029A                     	;# 
  1578  0394                     	;# 
  1579  0395                     	;# 
  1580  0396                     	;# 
  1581  0FE4                     	;# 
  1582  0FE5                     	;# 
  1583  0FE6                     	;# 
  1584  0FE7                     	;# 
  1585  0FE8                     	;# 
  1586  0FE9                     	;# 
  1587  0FEA                     	;# 
  1588  0FEB                     	;# 
  1589  0FED                     	;# 
  1590  0FEE                     	;# 
  1591  0FEF                     	;# 
  1592  0000                     	;# 
  1593  0001                     	;# 
  1594  0002                     	;# 
  1595  0003                     	;# 
  1596  0004                     	;# 
  1597  0005                     	;# 
  1598  0006                     	;# 
  1599  0007                     	;# 
  1600  0008                     	;# 
  1601  0009                     	;# 
  1602  000A                     	;# 
  1603  000B                     	;# 
  1604  000C                     	;# 
  1605  000D                     	;# 
  1606  000E                     	;# 
  1607  0010                     	;# 
  1608  0011                     	;# 
  1609  0012                     	;# 
  1610  0015                     	;# 
  1611  0016                     	;# 
  1612  0016                     	;# 
  1613  0017                     	;# 
  1614  0018                     	;# 
  1615  0019                     	;# 
  1616  001A                     	;# 
  1617  001B                     	;# 
  1618  001C                     	;# 
  1619  008C                     	;# 
  1620  008D                     	;# 
  1621  008E                     	;# 
  1622  0090                     	;# 
  1623  0091                     	;# 
  1624  0092                     	;# 
  1625  0095                     	;# 
  1626  0096                     	;# 
  1627  0097                     	;# 
  1628  0099                     	;# 
  1629  009A                     	;# 
  1630  009B                     	;# 
  1631  009B                     	;# 
  1632  009C                     	;# 
  1633  009D                     	;# 
  1634  009E                     	;# 
  1635  010C                     	;# 
  1636  010D                     	;# 
  1637  010E                     	;# 
  1638  0116                     	;# 
  1639  0117                     	;# 
  1640  011D                     	;# 
  1641  018C                     	;# 
  1642  018D                     	;# 
  1643  018E                     	;# 
  1644  0191                     	;# 
  1645  0191                     	;# 
  1646  0192                     	;# 
  1647  0193                     	;# 
  1648  0193                     	;# 
  1649  0194                     	;# 
  1650  0195                     	;# 
  1651  0196                     	;# 
  1652  0197                     	;# 
  1653  0199                     	;# 
  1654  019A                     	;# 
  1655  019B                     	;# 
  1656  019B                     	;# 
  1657  019B                     	;# 
  1658  019B                     	;# 
  1659  019C                     	;# 
  1660  019C                     	;# 
  1661  019D                     	;# 
  1662  019E                     	;# 
  1663  019F                     	;# 
  1664  020D                     	;# 
  1665  0210                     	;# 
  1666  0211                     	;# 
  1667  0211                     	;# 
  1668  0212                     	;# 
  1669  0212                     	;# 
  1670  0213                     	;# 
  1671  0213                     	;# 
  1672  0214                     	;# 
  1673  0214                     	;# 
  1674  0215                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0216                     	;# 
  1678  0216                     	;# 
  1679  0217                     	;# 
  1680  0217                     	;# 
  1681  0291                     	;# 
  1682  0291                     	;# 
  1683  0292                     	;# 
  1684  0293                     	;# 
  1685  0298                     	;# 
  1686  0298                     	;# 
  1687  0299                     	;# 
  1688  029A                     	;# 
  1689  0394                     	;# 
  1690  0395                     	;# 
  1691  0396                     	;# 
  1692  0FE4                     	;# 
  1693  0FE5                     	;# 
  1694  0FE6                     	;# 
  1695  0FE7                     	;# 
  1696  0FE8                     	;# 
  1697  0FE9                     	;# 
  1698  0FEA                     	;# 
  1699  0FEB                     	;# 
  1700  0FED                     	;# 
  1701  0FEE                     	;# 
  1702  0FEF                     	;# 
  1703  0000                     	;# 
  1704  0001                     	;# 
  1705  0002                     	;# 
  1706  0003                     	;# 
  1707  0004                     	;# 
  1708  0005                     	;# 
  1709  0006                     	;# 
  1710  0007                     	;# 
  1711  0008                     	;# 
  1712  0009                     	;# 
  1713  000A                     	;# 
  1714  000B                     	;# 
  1715  000C                     	;# 
  1716  000D                     	;# 
  1717  000E                     	;# 
  1718  0010                     	;# 
  1719  0011                     	;# 
  1720  0012                     	;# 
  1721  0015                     	;# 
  1722  0016                     	;# 
  1723  0016                     	;# 
  1724  0017                     	;# 
  1725  0018                     	;# 
  1726  0019                     	;# 
  1727  001A                     	;# 
  1728  001B                     	;# 
  1729  001C                     	;# 
  1730  008C                     	;# 
  1731  008D                     	;# 
  1732  008E                     	;# 
  1733  0090                     	;# 
  1734  0091                     	;# 
  1735  0092                     	;# 
  1736  0095                     	;# 
  1737  0096                     	;# 
  1738  0097                     	;# 
  1739  0099                     	;# 
  1740  009A                     	;# 
  1741  009B                     	;# 
  1742  009B                     	;# 
  1743  009C                     	;# 
  1744  009D                     	;# 
  1745  009E                     	;# 
  1746  010C                     	;# 
  1747  010D                     	;# 
  1748  010E                     	;# 
  1749  0116                     	;# 
  1750  0117                     	;# 
  1751  011D                     	;# 
  1752  018C                     	;# 
  1753  018D                     	;# 
  1754  018E                     	;# 
  1755  0191                     	;# 
  1756  0191                     	;# 
  1757  0192                     	;# 
  1758  0193                     	;# 
  1759  0193                     	;# 
  1760  0194                     	;# 
  1761  0195                     	;# 
  1762  0196                     	;# 
  1763  0197                     	;# 
  1764  0199                     	;# 
  1765  019A                     	;# 
  1766  019B                     	;# 
  1767  019B                     	;# 
  1768  019B                     	;# 
  1769  019B                     	;# 
  1770  019C                     	;# 
  1771  019C                     	;# 
  1772  019D                     	;# 
  1773  019E                     	;# 
  1774  019F                     	;# 
  1775  020D                     	;# 
  1776  0210                     	;# 
  1777  0211                     	;# 
  1778  0211                     	;# 
  1779  0212                     	;# 
  1780  0212                     	;# 
  1781  0213                     	;# 
  1782  0213                     	;# 
  1783  0214                     	;# 
  1784  0214                     	;# 
  1785  0215                     	;# 
  1786  0215                     	;# 
  1787  0215                     	;# 
  1788  0216                     	;# 
  1789  0216                     	;# 
  1790  0217                     	;# 
  1791  0217                     	;# 
  1792  0291                     	;# 
  1793  0291                     	;# 
  1794  0292                     	;# 
  1795  0293                     	;# 
  1796  0298                     	;# 
  1797  0298                     	;# 
  1798  0299                     	;# 
  1799  029A                     	;# 
  1800  0394                     	;# 
  1801  0395                     	;# 
  1802  0396                     	;# 
  1803  0FE4                     	;# 
  1804  0FE5                     	;# 
  1805  0FE6                     	;# 
  1806  0FE7                     	;# 
  1807  0FE8                     	;# 
  1808  0FE9                     	;# 
  1809  0FEA                     	;# 
  1810  0FEB                     	;# 
  1811  0FED                     	;# 
  1812  0FEE                     	;# 
  1813  0FEF                     	;# 
  1814  0000                     	;# 
  1815  0001                     	;# 
  1816  0002                     	;# 
  1817  0003                     	;# 
  1818  0004                     	;# 
  1819  0005                     	;# 
  1820  0006                     	;# 
  1821  0007                     	;# 
  1822  0008                     	;# 
  1823  0009                     	;# 
  1824  000A                     	;# 
  1825  000B                     	;# 
  1826  000C                     	;# 
  1827  000D                     	;# 
  1828  000E                     	;# 
  1829  0010                     	;# 
  1830  0011                     	;# 
  1831  0012                     	;# 
  1832  0015                     	;# 
  1833  0016                     	;# 
  1834  0016                     	;# 
  1835  0017                     	;# 
  1836  0018                     	;# 
  1837  0019                     	;# 
  1838  001A                     	;# 
  1839  001B                     	;# 
  1840  001C                     	;# 
  1841  008C                     	;# 
  1842  008D                     	;# 
  1843  008E                     	;# 
  1844  0090                     	;# 
  1845  0091                     	;# 
  1846  0092                     	;# 
  1847  0095                     	;# 
  1848  0096                     	;# 
  1849  0097                     	;# 
  1850  0099                     	;# 
  1851  009A                     	;# 
  1852  009B                     	;# 
  1853  009B                     	;# 
  1854  009C                     	;# 
  1855  009D                     	;# 
  1856  009E                     	;# 
  1857  010C                     	;# 
  1858  010D                     	;# 
  1859  010E                     	;# 
  1860  0116                     	;# 
  1861  0117                     	;# 
  1862  011D                     	;# 
  1863  018C                     	;# 
  1864  018D                     	;# 
  1865  018E                     	;# 
  1866  0191                     	;# 
  1867  0191                     	;# 
  1868  0192                     	;# 
  1869  0193                     	;# 
  1870  0193                     	;# 
  1871  0194                     	;# 
  1872  0195                     	;# 
  1873  0196                     	;# 
  1874  0197                     	;# 
  1875  0199                     	;# 
  1876  019A                     	;# 
  1877  019B                     	;# 
  1878  019B                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019C                     	;# 
  1882  019C                     	;# 
  1883  019D                     	;# 
  1884  019E                     	;# 
  1885  019F                     	;# 
  1886  020D                     	;# 
  1887  0210                     	;# 
  1888  0211                     	;# 
  1889  0211                     	;# 
  1890  0212                     	;# 
  1891  0212                     	;# 
  1892  0213                     	;# 
  1893  0213                     	;# 
  1894  0214                     	;# 
  1895  0214                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0215                     	;# 
  1899  0216                     	;# 
  1900  0216                     	;# 
  1901  0217                     	;# 
  1902  0217                     	;# 
  1903  0291                     	;# 
  1904  0291                     	;# 
  1905  0292                     	;# 
  1906  0293                     	;# 
  1907  0298                     	;# 
  1908  0298                     	;# 
  1909  0299                     	;# 
  1910  029A                     	;# 
  1911  0394                     	;# 
  1912  0395                     	;# 
  1913  0396                     	;# 
  1914  0FE4                     	;# 
  1915  0FE5                     	;# 
  1916  0FE6                     	;# 
  1917  0FE7                     	;# 
  1918  0FE8                     	;# 
  1919  0FE9                     	;# 
  1920  0FEA                     	;# 
  1921  0FEB                     	;# 
  1922  0FED                     	;# 
  1923  0FEE                     	;# 
  1924  0FEF                     	;# 
  1925  0000                     	;# 
  1926  0001                     	;# 
  1927  0002                     	;# 
  1928  0003                     	;# 
  1929  0004                     	;# 
  1930  0005                     	;# 
  1931  0006                     	;# 
  1932  0007                     	;# 
  1933  0008                     	;# 
  1934  0009                     	;# 
  1935  000A                     	;# 
  1936  000B                     	;# 
  1937  000C                     	;# 
  1938  000D                     	;# 
  1939  000E                     	;# 
  1940  0010                     	;# 
  1941  0011                     	;# 
  1942  0012                     	;# 
  1943  0015                     	;# 
  1944  0016                     	;# 
  1945  0016                     	;# 
  1946  0017                     	;# 
  1947  0018                     	;# 
  1948  0019                     	;# 
  1949  001A                     	;# 
  1950  001B                     	;# 
  1951  001C                     	;# 
  1952  008C                     	;# 
  1953  008D                     	;# 
  1954  008E                     	;# 
  1955  0090                     	;# 
  1956  0091                     	;# 
  1957  0092                     	;# 
  1958  0095                     	;# 
  1959  0096                     	;# 
  1960  0097                     	;# 
  1961  0099                     	;# 
  1962  009A                     	;# 
  1963  009B                     	;# 
  1964  009B                     	;# 
  1965  009C                     	;# 
  1966  009D                     	;# 
  1967  009E                     	;# 
  1968  010C                     	;# 
  1969  010D                     	;# 
  1970  010E                     	;# 
  1971  0116                     	;# 
  1972  0117                     	;# 
  1973  011D                     	;# 
  1974  018C                     	;# 
  1975  018D                     	;# 
  1976  018E                     	;# 
  1977  0191                     	;# 
  1978  0191                     	;# 
  1979  0192                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0197                     	;# 
  1986  0199                     	;# 
  1987  019A                     	;# 
  1988  019B                     	;# 
  1989  019B                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019C                     	;# 
  1993  019C                     	;# 
  1994  019D                     	;# 
  1995  019E                     	;# 
  1996  019F                     	;# 
  1997  020D                     	;# 
  1998  0210                     	;# 
  1999  0211                     	;# 
  2000  0211                     	;# 
  2001  0212                     	;# 
  2002  0212                     	;# 
  2003  0213                     	;# 
  2004  0213                     	;# 
  2005  0214                     	;# 
  2006  0214                     	;# 
  2007  0215                     	;# 
  2008  0215                     	;# 
  2009  0215                     	;# 
  2010  0216                     	;# 
  2011  0216                     	;# 
  2012  0217                     	;# 
  2013  0217                     	;# 
  2014  0291                     	;# 
  2015  0291                     	;# 
  2016  0292                     	;# 
  2017  0293                     	;# 
  2018  0298                     	;# 
  2019  0298                     	;# 
  2020  0299                     	;# 
  2021  029A                     	;# 
  2022  0394                     	;# 
  2023  0395                     	;# 
  2024  0396                     	;# 
  2025  0FE4                     	;# 
  2026  0FE5                     	;# 
  2027  0FE6                     	;# 
  2028  0FE7                     	;# 
  2029  0FE8                     	;# 
  2030  0FE9                     	;# 
  2031  0FEA                     	;# 
  2032  0FEB                     	;# 
  2033  0FED                     	;# 
  2034  0FEE                     	;# 
  2035  0FEF                     	;# 
  2036                           
  2037                           	psect	idataBANK3
  2038  0801                     __pidataBANK3:	
  2039                           
  2040                           ;initializer for __product
  2041  0801  3463               	retlw	99
  2042  0802  3402               	retlw	2
  2043  0803  3400               	retlw	0
  2044  0804  3400               	retlw	0
  2045  0805  3400               	retlw	0
  2046  0806  3400               	retlw	0
  2047  0807  3400               	retlw	0
  2048  0808  3400               	retlw	0
  2049  0809  3400               	retlw	0
  2050  080A  3400               	retlw	0
  2051  080B  3400               	retlw	0
  2052  080C  3400               	retlw	0
  2053  080D  34FF               	retlw	255
  2054  080E  34FF               	retlw	255
  2055  080F  34FF               	retlw	255
  2056  0810  3400               	retlw	0
  2057  0811  3400               	retlw	0
  2058  0812  3400               	retlw	0
  2059  0813  3400               	retlw	0
  2060  0814  3400               	retlw	0
  2061  0815  3400               	retlw	0
  2062  0816  3400               	retlw	0
  2063  0817  3400               	retlw	0
  2064  0818  3400               	retlw	0
  2065  0819  3400               	retlw	0
  2066  081A  3400               	retlw	0
  2067  081B  3400               	retlw	0
  2068  081C  3400               	retlw	0
  2069  081D  3400               	retlw	0
  2070  081E  3400               	retlw	0
  2071  081F  3400               	retlw	0
  2072  0820  3400               	retlw	0
  2073                           
  2074                           	psect	stringtext
  2075  1000                     __pstringtext:	
  2076  1000                     _CC2500_registers_address:	
  2077  1000  3403               	retlw	3
  2078  1001  3416               	retlw	22
  2079  1002  3417               	retlw	23
  2080  1003  341E               	retlw	30
  2081  1004  341F               	retlw	31
  2082  1005  3420               	retlw	32
  2083  1006  342A               	retlw	42
  2084  1007  342B               	retlw	43
  2085  1008  340B               	retlw	11
  2086  1009  340C               	retlw	12
  2087  100A  340D               	retlw	13
  2088  100B  340E               	retlw	14
  2089  100C  340F               	retlw	15
  2090  100D  3410               	retlw	16
  2091  100E  3411               	retlw	17
  2092  100F  3412               	retlw	18
  2093  1010  3413               	retlw	19
  2094  1011  3414               	retlw	20
  2095  1012  340A               	retlw	10
  2096  1013  3415               	retlw	21
  2097  1014  3421               	retlw	33
  2098  1015  3422               	retlw	34
  2099  1016  3418               	retlw	24
  2100  1017  3419               	retlw	25
  2101  1018  341A               	retlw	26
  2102  1019  341B               	retlw	27
  2103  101A  341C               	retlw	28
  2104  101B  341D               	retlw	29
  2105  101C  3423               	retlw	35
  2106  101D  3424               	retlw	36
  2107  101E  3425               	retlw	37
  2108  101F  3426               	retlw	38
  2109  1020  3429               	retlw	41
  2110  1021  342C               	retlw	44
  2111  1022  342D               	retlw	45
  2112  1023  342E               	retlw	46
  2113  1024  3400               	retlw	0
  2114  1025  3401               	retlw	1
  2115  1026  3402               	retlw	2
  2116  1027  3407               	retlw	7
  2117  1028  3408               	retlw	8
  2118  1029  3409               	retlw	9
  2119  102A  3406               	retlw	6
  2120  102B  3404               	retlw	4
  2121  102C  3405               	retlw	5
  2122  102D  3427               	retlw	39
  2123  102E  3428               	retlw	40
  2124  102F                     __end_of_CC2500_registers_address:	
  2125  102F                     _CC2500_rfSettings:	
  2126  102F  3407               	retlw	7
  2127  1030  3407               	retlw	7
  2128  1031  3430               	retlw	48
  2129  1032  3487               	retlw	135
  2130  1033  346B               	retlw	107
  2131  1034  34F8               	retlw	248
  2132  1035  347F               	retlw	127
  2133  1036  343F               	retlw	63
  2134  1037  3409               	retlw	9
  2135  1038  3400               	retlw	0
  2136  1039  345C               	retlw	92
  2137  103A  34A7               	retlw	167
  2138  103B  3462               	retlw	98
  2139  103C  3486               	retlw	134
  2140  103D  3483               	retlw	131
  2141  103E  3403               	retlw	3
  2142  103F  3422               	retlw	34
  2143  1040  34F8               	retlw	248
  2144  1041  3400               	retlw	0
  2145  1042  3444               	retlw	68
  2146  1043  34B6               	retlw	182
  2147  1044  3410               	retlw	16
  2148  1045  3418               	retlw	24
  2149  1046  341D               	retlw	29
  2150  1047  341C               	retlw	28
  2151  1048  34C7               	retlw	199
  2152  1049  3400               	retlw	0
  2153  104A  34B2               	retlw	178
  2154  104B  34EA               	retlw	234
  2155  104C  340A               	retlw	10
  2156  104D  3400               	retlw	0
  2157  104E  3411               	retlw	17
  2158  104F  3459               	retlw	89
  2159  1050  3488               	retlw	136
  2160  1051  3431               	retlw	49
  2161  1052  340B               	retlw	11
  2162  1053  342F               	retlw	47
  2163  1054  342E               	retlw	46
  2164  1055  3406               	retlw	6
  2165  1056  3404               	retlw	4
  2166  1057  3405               	retlw	5
  2167  1058  3400               	retlw	0
  2168  1059  3430               	retlw	48
  2169  105A  34D3               	retlw	211
  2170  105B  3491               	retlw	145
  2171  105C  3441               	retlw	65
  2172  105D  3400               	retlw	0
  2173  105E                     __end_of_CC2500_rfSettings:	
  2174  105E                     _CC2500_patable_vaule:	
  2175  105E  34FE               	retlw	254
  2176  105F  34FE               	retlw	254
  2177  1060  34FE               	retlw	254
  2178  1061  34FE               	retlw	254
  2179  1062  34FE               	retlw	254
  2180  1063  34FE               	retlw	254
  2181  1064  34FE               	retlw	254
  2182  1065  34FE               	retlw	254
  2183  1066                     __end_of_CC2500_patable_vaule:	
  2184                           
  2185                           	psect	nvCOMMON
  2186  007D                     __pnvCOMMON:	
  2187  007D                     _product:	
  2188  007D                     	ds	1
  2189                           
  2190                           	psect	nvBANK1
  2191  00EB                     __pnvBANK1:	
  2192  00EB                     _Timer0:	
  2193  00EB                     	ds	1
  2194  00EC                     _WDT:	
  2195  00EC                     	ds	1
  2196  00ED                     _myMain:	
  2197  00ED                     	ds	1
  2198  00EE                     _Memory:	
  2199  00EE                     	ds	1
  2200  000C                     _PORTA	set	12
  2201  000D                     _PORTB	set	13
  2202  000E                     _PORTC	set	14
  2203  0015                     _TMR0	set	21
  2204  005F                     _GIE	set	95
  2205  005C                     _INTE	set	92
  2206  0059                     _INTF	set	89
  2207  005B                     _IOCIE	set	91
  2208  0058                     _IOCIF	set	88
  2209  005E                     _PEIE	set	94
  2210  0060                     _RA0	set	96
  2211  0063                     _RA3	set	99
  2212  0064                     _RA4	set	100
  2213  0066                     _RA6	set	102
  2214  0067                     _RA7	set	103
  2215  0068                     _RB0	set	104
  2216  0069                     _RB1	set	105
  2217  006B                     _RB3	set	107
  2218  006C                     _RB4	set	108
  2219  006D                     _RB5	set	109
  2220  0070                     _RC0	set	112
  2221  0071                     _RC1	set	113
  2222  0072                     _RC2	set	114
  2223  0074                     _RC4	set	116
  2224  0075                     _RC5	set	117
  2225  0077                     _RC7	set	119
  2226  005D                     _TMR0IE	set	93
  2227  005A                     _TMR0IF	set	90
  2228  009D                     _ADCON0	set	157
  2229  009E                     _ADCON1	set	158
  2230  009C                     _ADRESH	set	156
  2231  009B                     _ADRESL	set	155
  2232  0095                     _OPTION_REG	set	149
  2233  0099                     _OSCCON	set	153
  2234  008C                     _TRISA	set	140
  2235  008D                     _TRISB	set	141
  2236  008E                     _TRISC	set	142
  2237  0097                     _WDTCON	set	151
  2238  04E9                     _GO_nDONE	set	1257
  2239  0117                     _FVRCON	set	279
  2240  010C                     _LATA	set	268
  2241  010D                     _LATB	set	269
  2242  010E                     _LATC	set	270
  2243  018C                     _ANSELA	set	396
  2244  018D                     _ANSELB	set	397
  2245  018E                     _ANSELC	set	398
  2246  0192                     _PMADRH	set	402
  2247  0191                     _PMADRL	set	401
  2248  0196                     _PMCON2	set	406
  2249  0194                     _PMDATH	set	404
  2250  0193                     _PMDATL	set	403
  2251  0CAE                     _CFGS	set	3246
  2252  0CAC                     _FREE	set	3244
  2253  0CAD                     _LWLO	set	3245
  2254  0CA8                     _RD	set	3240
  2255  0CA9                     _WR	set	3241
  2256  0CAA                     _WREN	set	3242
  2257  1068                     _WPUB0	set	4200
  2258  1069                     _WPUB1	set	4201
  2259  106A                     _WPUB2	set	4202
  2260  0396                     _IOCBF	set	918
  2261  0395                     _IOCBN	set	917
  2262  0394                     _IOCBP	set	916
  2263  1CB2                     _IOCBF2	set	7346
  2264                           
  2265                           ; #config settings
  2266  0000                     
  2267                           	psect	cinit
  2268  0018                     start_initialization:	
  2269  0018                     __initialization:	
  2270                           
  2271                           ; Clear objects allocated to BITCOMMON
  2272  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2273                           
  2274                           ; Clear objects allocated to COMMON
  2275  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2276  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2277  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2278  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2279                           
  2280                           ; Clear objects allocated to BANK1
  2281  001D  30A0               	movlw	low __pbssBANK1
  2282  001E  0084               	movwf	4
  2283  001F  3000               	movlw	high __pbssBANK1
  2284  0020  0085               	movwf	5
  2285  0021  304B               	movlw	75
  2286  0022  319C  245C  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK2
  2289  0025  3020               	movlw	low __pbssBANK2
  2290  0026  0084               	movwf	4
  2291  0027  3001               	movlw	high __pbssBANK2
  2292  0028  0085               	movwf	5
  2293  0029  303C               	movlw	60
  2294  002A  319C  245C  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK3
  2297  002D  30A0               	movlw	low __pbssBANK3
  2298  002E  0084               	movwf	4
  2299  002F  3001               	movlw	high __pbssBANK3
  2300  0030  0085               	movwf	5
  2301  0031  3025               	movlw	37
  2302  0032  319C  245C  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK3
  2305  0035  3001               	movlw	low __pidataBANK3
  2306  0036  0084               	movwf	4
  2307  0037  3088               	movlw	(high __pidataBANK3)| (0+128)
  2308  0038  0085               	movwf	5
  2309  0039  30C5               	movlw	low __pdataBANK3
  2310  003A  0086               	movwf	6
  2311  003B  3001               	movlw	high __pdataBANK3
  2312  003C  0087               	movwf	7
  2313  003D  3020               	movlw	32
  2314  003E  319C  2456         	fcall	init_ram
  2315  0040                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0040                     __end_of__initialization:	
  2319  0040  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0041  0020               	movlb	0
  2321  0042  3188  287F         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03E0                     __pbitbssCOMMON:	
  2325  03E0                     _Receive_OK:	
  2326  03E0                     	ds	1
  2327  03E1                     _Transceive_OK:	
  2328  03E1                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0078                     __pbssCOMMON:	
  2332  0078                     _DimmerLights:	
  2333  0078                     	ds	1
  2334  0079                     _DimmerLightsIntr:	
  2335  0079                     	ds	1
  2336  007A                     _RF:	
  2337  007A                     	ds	1
  2338  007B                     _Sw:	
  2339  007B                     	ds	1
  2340                           
  2341                           	psect	bssBANK1
  2342  00A0                     __pbssBANK1:	
  2343  00A0                     _RF_Data:	
  2344  00A0                     	ds	21
  2345  00B5                     _RF_Count:	
  2346  00B5                     	ds	2
  2347  00B7                     _Buz:	
  2348  00B7                     	ds	1
  2349  00B8                     _CRC:	
  2350  00B8                     	ds	1
  2351  00B9                     _DelayOff:	
  2352  00B9                     	ds	1
  2353  00BA                     _Dimmer:	
  2354  00BA                     	ds	1
  2355  00BB                     _DimmerLights11:	
  2356  00BB                     	ds	1
  2357  00BC                     _DimmerLightsIntrIOC:	
  2358  00BC                     	ds	1
  2359  00BD                     _LED:	
  2360  00BD                     	ds	1
  2361  00BE                     _PF:	
  2362  00BE                     	ds	1
  2363  00BF                     _RFSW:	
  2364  00BF                     	ds	1
  2365  00C0                     _RSSI:	
  2366  00C0                     	ds	1
  2367  00C1                     _Rx_Length:	
  2368  00C1                     	ds	1
  2369  00C2                     _SPI0Buffer:	
  2370  00C2                     	ds	1
  2371  00C3                     _Tx_Length:	
  2372  00C3                     	ds	1
  2373  00C4                     _r_address:	
  2374  00C4                     	ds	1
  2375  00C5                     _r_data:	
  2376  00C5                     	ds	1
  2377  00C6                     _s_data:	
  2378  00C6                     	ds	1
  2379  00C7                     _PF1:	
  2380  00C7                     	ds	8
  2381  00CF                     _DlySw1:	
  2382  00CF                     	ds	5
  2383  00D4                     _RF1:	
  2384  00D4                     	ds	5
  2385  00D9                     _VarErrLED:	
  2386  00D9                     	ds	4
  2387  00DD                     _VarLED1:	
  2388  00DD                     	ds	4
  2389  00E1                     _VarLED2:	
  2390  00E1                     	ds	4
  2391  00E5                     _Dimmer1:	
  2392  00E5                     	ds	3
  2393  00E8                     __WDT:	
  2394  00E8                     	ds	2
  2395  00EA                     _RFSW1:	
  2396  00EA                     	ds	1
  2397                           
  2398                           	psect	bssBANK2
  2399  0120                     __pbssBANK2:	
  2400  0120                     __myMain:	
  2401  0120                     	ds	16
  2402  0130                     _DimmerLights1:	
  2403  0130                     	ds	15
  2404  013F                     _Buz1:	
  2405  013F                     	ds	12
  2406  014B                     _Sw1:	
  2407  014B                     	ds	9
  2408  0154                     _VarTimer0:	
  2409  0154                     	ds	8
  2410                           
  2411                           	psect	bssBANK3
  2412  01A0                     __pbssBANK3:	
  2413  01A0                     _VarMemory:	
  2414  01A0                     	ds	37
  2415                           
  2416                           	psect	dataBANK3
  2417  01C5                     __pdataBANK3:	
  2418  01C5                     __product:	
  2419  01C5                     	ds	32
  2420                           
  2421                           	psect	clrtext
  2422  1C5C                     clear_ram0:	
  2423                           ;	Called with FSR0 containing the base address, and
  2424                           ;	WREG with the size to clear
  2425                           
  2426  1C5C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2427  1C5D                     clrloop0:	
  2428  1C5D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2429  1C5E  3101               	addfsr 0,1
  2430  1C5F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2431  1C60  2C5D               	goto	clrloop0	;have we reached the end yet?
  2432  1C61  3400               	retlw	0	;all done for this memory range, return
  2433                           
  2434                           	psect	inittext
  2435  1C56                     init_ram:	
  2436  1C56  00FE               	movwf	126
  2437  1C57                     initloop:	
  2438  1C57  0012               	moviw fsr0++
  2439  1C58  001E               	movwi fsr1++
  2440  1C59  0BFE               	decfsz	126,f
  2441  1C5A  2C57               	goto	initloop
  2442  1C5B  3400               	retlw	0
  2443                           
  2444                           	psect	cstackCOMMON
  2445  0070                     __pcstackCOMMON:	
  2446  0070                     ?_CC2500_WriteByte:	
  2447  0070                     ?_CC2500_WriteCommand:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_CC2500_ReadStatus:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_CC2500_ReadByte:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_PowerRST:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_InitSetREG:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_InitPATable:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_ClearTXFIFO:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_ClearRXFIFO:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_FrequencyCabr:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_SIDLEMode:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_DlyOff_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_DlyOff_Main:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_setTxData:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_setDimmerLights_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_Dimmer_Initialization:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setMemory_GO:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setDimmerLights_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setDimmerLights_ERROR:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setLED_Initialization:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setLED_Main:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_Fosc_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_IO_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_TMR0_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_ADC_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_INT_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_IOC_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_WDT_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_IOC_ISR:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_TMR0_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_INT_ISR:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Flash_Memory_Write:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_Flash_Memory_Modify:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_WDT_Clearing:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setPowerFault_Initialization:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setPowerFault_Main:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setPowerFault_Exceptions:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setSw_Enable:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setRF_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRF_Main:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_RF_RxDisable:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_getRxData:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setLog_Code:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setControl_Lights_Table:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setRFSW_Control:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_setRFSW_AdjControl:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setRF_DimmerValue:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setSw_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setSw_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_Sw_DimmerOnFunc:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_Sw_DimmerAdjFunc:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Sw_DimmerOffFunc:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_myMain_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_my_Main:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Buzzer_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Buz_Counter:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ??_Buz_Counter:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buzzer_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_TxData:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_RxData:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_PowerOnInitial:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DelayOffPointSelect:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DelayOff_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DelayOff_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerIntrIOCPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ??_DimmerIntrIOCPointSelect:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerIntrPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ??_DimmerIntrPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_IntrControl:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerLightsPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_Close:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLights_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_DimmerLights_Exceptions:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setDimmerLights_AdjRF:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_LedPointSelect:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_LED_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_LED_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Mcu_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerReClock:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Flash_Memory_Unlock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Erasing:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_PowerFault_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_PowerFault_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getPowerFault_AD:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_RfPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_RF_Initialization:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_RF_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_RfSWPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_TouchPower:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_SwPointSelect:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Switch_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Switch_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?i1_RfPointSelect:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ??i1_RfPointSelect:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_DelayTimejudge:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_getDimmerLights_StatusFlag:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0070                     ?_getPercentValue:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0070                     ?_Flash_Memory_Read:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ?_setPercentValue:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     setRF_Initialization@rf:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762                           
  2763                           ; 1 bytes @ 0x0
  2764  0070                     	ds	1
  2765  0071                     DimmerIntrIOCPointSelect@lights:	
  2766  0071                     DimmerIntrPointSelect@lights:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769  0071                     i1RfPointSelect@rf:	
  2770                           ; 1 bytes @ 0x1
  2771                           
  2772                           
  2773                           ; 1 bytes @ 0x1
  2774  0071                     	ds	1
  2775  0072                     ?_setRF_ReceiveGO:	
  2776  0072                     ?_setRF_RxStatus:	
  2777                           ; 0 bytes @ 0x2
  2778                           
  2779  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x2
  2781                           
  2782  0072                     ??_setDimmerLights_IntrControl:	
  2783                           ; 0 bytes @ 0x2
  2784                           
  2785  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2786                           ; 0 bytes @ 0x2
  2787                           
  2788  0072                     setRF_ReceiveGO@command:	
  2789                           ; 1 bytes @ 0x2
  2790                           
  2791  0072                     setRF_RxStatus@command:	
  2792                           ; 1 bytes @ 0x2
  2793                           
  2794                           
  2795                           ; 1 bytes @ 0x2
  2796  0072                     	ds	1
  2797  0073                     ??_IOC_ISR:	
  2798  0073                     ??_setRF_ReceiveGO:	
  2799                           ; 0 bytes @ 0x3
  2800                           
  2801  0073                     ??_setRF_RxStatus:	
  2802                           ; 0 bytes @ 0x3
  2803                           
  2804  0073                     ??_setDimmerReClock:	
  2805                           ; 0 bytes @ 0x3
  2806                           
  2807  0073                     setRF_ReceiveGO@rf:	
  2808                           ; 0 bytes @ 0x3
  2809                           
  2810  0073                     setRF_RxStatus@rf:	
  2811                           ; 1 bytes @ 0x3
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x3
  2815  0073                     	ds	1
  2816  0074                     ??_INT_ISR:	
  2817                           
  2818                           ; 0 bytes @ 0x4
  2819  0074                     	ds	2
  2820  0076                     setDimmerLights_IntrControl@lights:	
  2821                           
  2822                           ; 1 bytes @ 0x6
  2823  0076                     	ds	1
  2824  0077                     ??_TMR0_ISR:	
  2825  0077                     ??_ISR:	
  2826                           ; 0 bytes @ 0x7
  2827                           
  2828                           
  2829                           ; 0 bytes @ 0x7
  2830  0077                     	ds	1
  2831                           
  2832                           	psect	cstackBANK0
  2833  0020                     __pcstackBANK0:	
  2834  0020                     ??_CC2500_WriteByte:	
  2835  0020                     ??_CC2500_ReadByte:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ?_DelayTime_1us:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_DelayTimejudge:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_Dimmer_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_getDimmerLights_StatusFlag:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setMemory_GO:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Fosc_Set:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_IO_Set:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_TMR0_Set:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_ADC_Set:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_INT_Set:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_IOC_Set:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_WDT_Set:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Read:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_Flash_Memory_Write:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_WDT_Clearing:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_setPowerFault_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_setRF_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_myMain_Initialization:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_Buzzer_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Buzzer_Main:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_DelayOffPointSelect:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_DimmerLightsPointSelect:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_LedPointSelect:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_Flash_Memory_Unlock:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Flash_Memory_Erasing:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_RfPointSelect:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_RfSWPointSelect:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_TouchPower:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_SwPointSelect:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ?_getAD:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ?___awdiv:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     ?___ftpack:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937  0020                     getDimmerLights_StatusFlag@Status:	
  2938                           ; 3 bytes @ 0x0
  2939                           
  2940  0020                     getAD@adcon1:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     DelayTime_1us@count:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     ___awdiv@divisor:	
  2947                           ; 2 bytes @ 0x0
  2948                           
  2949  0020                     ___ftpack@arg:	
  2950                           ; 2 bytes @ 0x0
  2951                           
  2952                           
  2953                           ; 3 bytes @ 0x0
  2954  0020                     	ds	1
  2955  0021                     ??_Mcu_Initialization:	
  2956  0021                     ??_PowerFault_Initialization:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     ??_RF_Initialization:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962  0021                     CC2500_WriteByte@loop_a:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     CC2500_ReadByte@loop_b:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     DelayOffPointSelect@sw:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     DelayTimejudge@value:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DimmerLightsPointSelect@lights:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     LedPointSelect@led:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     Flash_Memory_Read@i:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     Flash_Memory_Write@i:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     RfPointSelect@rf:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     RfSWPointSelect@sw:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     SwPointSelect@sw:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995                           
  2996                           ; 1 bytes @ 0x1
  2997  0021                     	ds	1
  2998  0022                     ??_CC2500_WriteCommand:	
  2999  0022                     ??_CC2500_ReadStatus:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ??_DelayTime_1us:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ?_CC2500_WriteREG:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ??_DlyOff_Initialization:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setSw_Status:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setRFSW_Status:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ?_setDimmerLights_Trigger:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_setDimmerLights_Switch:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_setTxData:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ??_setDimmerLights_Initialization:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setDimmerLights_TriggerERROR:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ?_setLED:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ??_setLED_Main:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_setSw_Enable:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_setRF_Enable:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_AdjGo:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setDimmerLights_TriggerAdj:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ?_setRF_Learn:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     CC2500_WriteREG@value:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     DlyOff_Initialization@sw:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     DelayTimejudge@i:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setDimmerLights_TriggerERROR@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setDimmerLights_Switch@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setDimmerLights_AdjGo@command:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     setDimmerLights_Trigger@command:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setDimmerLights_TriggerAdj@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setLED@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     Flash_Memory_Read@address:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setMemory_GO@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setRF_Learn@command:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setRF_Enable@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setRFSW_Status@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setSw_Enable@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setSw_Status@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     DelayTime_1us@i:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     ___awdiv@dividend:	
  3105                           ; 2 bytes @ 0x2
  3106                           
  3107                           
  3108                           ; 2 bytes @ 0x2
  3109  0022                     	ds	1
  3110  0023                     ??_CC2500_WriteREG:	
  3111  0023                     ??_setSw_Status:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_setRFSW_Status:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_setDimmerLights_Trigger:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_setDimmerLights_Switch:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     ??_setDimmerLights_TriggerERROR:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     ??_setLED:	
  3127                           ; 0 bytes @ 0x3
  3128                           
  3129  0023                     ??_setRF_Enable:	
  3130                           ; 0 bytes @ 0x3
  3131                           
  3132  0023                     ??_DelayOff_Initialization:	
  3133                           ; 0 bytes @ 0x3
  3134                           
  3135  0023                     ?_setDelayOff_GO:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     ??_DimmerLights_Close:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setDimmerLights_AdjGo:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setDimmerLights_TriggerAdj:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_getAD:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setRF_Learn:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     CC2500_WriteCommand@command:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     CC2500_ReadStatus@status_addr:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setDelayOff_GO@command:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setDimmerLights_Initialization@lights:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setDimmerLights_TriggerERROR@lights:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     setDimmerLights_Switch@lights:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     setDimmerLights_AdjGo@lights:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     setDimmerLights_Trigger@lights:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setDimmerLights_TriggerAdj@lights:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setLED@led:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     getAD@adcon0:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     Flash_Memory_Read@ret:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setRF_Learn@rf:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setTxData@rf:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     setRF_Enable@rf:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     setRFSW_Status@sw:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setSw_Status@sw:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     ___ftpack@exp:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207                           
  3208                           ; 1 bytes @ 0x3
  3209  0023                     	ds	1
  3210  0024                     ??_CC2500_ClearTXFIFO:	
  3211  0024                     ??_CC2500_ClearRXFIFO:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     ??_CC2500_SIDLEMode:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ?_setDimmerLights:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_setDimmerLights_ERROR:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_setLED_Initialization:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ??_Flash_Memory_Modify:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_RF_RxDisable:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_setSw_Initialization:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_Sw_DimmerAdjFunc:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_CC2500_TxData:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_CC2500_RxData:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??_DimmerLights_Initialization:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     ??_getPowerFault_AD:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??___awdiv:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     CC2500_WriteREG@w_addr:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     setDelayOff_GO@value:	
  3257                           ; 1 bytes @ 0x4
  3258                           
  3259  0024                     setDimmerLights@status:	
  3260                           ; 1 bytes @ 0x4
  3261                           
  3262  0024                     setLED_Initialization@led:	
  3263                           ; 1 bytes @ 0x4
  3264                           
  3265  0024                     setLED_Main@led:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268  0024                     RF_RxDisable@rf:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271  0024                     setSw_Initialization@sw:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0024                     Sw_DimmerAdjFunc@Idle:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0024                     ___ftpack@sign:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280  0024                     DelayTime_1us@j:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283                           
  3284                           ; 2 bytes @ 0x4
  3285  0024                     	ds	1
  3286  0025                     ??_CC2500_InitSetREG:	
  3287  0025                     ??_CC2500_InitPATable:	
  3288                           ; 0 bytes @ 0x5
  3289                           
  3290  0025                     ??_setDimmerLights:	
  3291                           ; 0 bytes @ 0x5
  3292                           
  3293  0025                     ??___ftpack:	
  3294                           ; 0 bytes @ 0x5
  3295                           
  3296  0025                     ??_setDelayOff_GO:	
  3297                           ; 0 bytes @ 0x5
  3298                           
  3299  0025                     ??_LED_Initialization:	
  3300                           ; 0 bytes @ 0x5
  3301                           
  3302  0025                     ??_LED_Main:	
  3303                           ; 0 bytes @ 0x5
  3304                           
  3305  0025                     ??_Switch_Initialization:	
  3306                           ; 0 bytes @ 0x5
  3307                           
  3308  0025                     CC2500_TxData@loop_e:	
  3309                           ; 0 bytes @ 0x5
  3310                           
  3311  0025                     CC2500_RxData@loop_f:	
  3312                           ; 1 bytes @ 0x5
  3313                           
  3314  0025                     setDimmerLights_ERROR@lights:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0025                     Sw_DimmerAdjFunc@sw:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320  0025                     ___awdiv@counter:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323                           
  3324                           ; 1 bytes @ 0x5
  3325  0025                     	ds	1
  3326  0026                     ??_CC2500_PowerRST:	
  3327  0026                     ??_CC2500_FrequencyCabr:	
  3328                           ; 0 bytes @ 0x6
  3329                           
  3330  0026                     CC2500_InitSetREG@temp1:	
  3331                           ; 0 bytes @ 0x6
  3332                           
  3333  0026                     CC2500_InitPATable@temp:	
  3334                           ; 1 bytes @ 0x6
  3335                           
  3336  0026                     setDimmerLights@lights:	
  3337                           ; 1 bytes @ 0x6
  3338                           
  3339  0026                     Flash_Memory_Modify@i:	
  3340                           ; 1 bytes @ 0x6
  3341                           
  3342  0026                     ___awdiv@sign:	
  3343                           ; 1 bytes @ 0x6
  3344                           
  3345                           
  3346                           ; 1 bytes @ 0x6
  3347  0026                     	ds	1
  3348  0027                     ??_Flash_Memory_Main:	
  3349  0027                     CC2500_InitSetREG@temp2:	
  3350                           ; 0 bytes @ 0x7
  3351                           
  3352  0027                     CC2500_InitPATable@loop_d:	
  3353                           ; 1 bytes @ 0x7
  3354                           
  3355  0027                     setDelayOff_GO@sw:	
  3356                           ; 1 bytes @ 0x7
  3357                           
  3358  0027                     ___awdiv@quotient:	
  3359                           ; 1 bytes @ 0x7
  3360                           
  3361                           
  3362                           ; 2 bytes @ 0x7
  3363  0027                     	ds	1
  3364  0028                     ?___awtoft:	
  3365  0028                     CC2500_InitSetREG@loop_c:	
  3366                           ; 3 bytes @ 0x8
  3367                           
  3368  0028                     getPowerFault_AD@channel:	
  3369                           ; 1 bytes @ 0x8
  3370                           
  3371  0028                     ___awtoft@c:	
  3372                           ; 1 bytes @ 0x8
  3373                           
  3374                           
  3375                           ; 2 bytes @ 0x8
  3376  0028                     	ds	1
  3377  0029                     ?_setBuz:	
  3378  0029                     ??_CC2500_PowerOnInitial:	
  3379                           ; 0 bytes @ 0x9
  3380                           
  3381  0029                     setBuz@time:	
  3382                           ; 0 bytes @ 0x9
  3383                           
  3384                           
  3385                           ; 2 bytes @ 0x9
  3386  0029                     	ds	2
  3387  002B                     ??_setBuz:	
  3388  002B                     ??___awtoft:	
  3389                           ; 0 bytes @ 0xB
  3390                           
  3391                           
  3392                           ; 0 bytes @ 0xB
  3393  002B                     	ds	1
  3394  002C                     setBuz@count:	
  3395                           
  3396                           ; 1 bytes @ 0xC
  3397  002C                     	ds	1
  3398  002D                     ??_setLog_Code:	
  3399  002D                     ??_my_Main:	
  3400                           ; 0 bytes @ 0xD
  3401                           
  3402  002D                     ??_DimmerLights_Exceptions:	
  3403                           ; 0 bytes @ 0xD
  3404                           
  3405  002D                     DimmerLights_Exceptions@status:	
  3406                           ; 0 bytes @ 0xD
  3407                           
  3408  002D                     ___awtoft@sign:	
  3409                           ; 1 bytes @ 0xD
  3410                           
  3411                           
  3412                           ; 1 bytes @ 0xD
  3413  002D                     	ds	1
  3414  002E                     ??_setPowerFault_Exceptions:	
  3415  002E                     ?___ftdiv:	
  3416                           ; 0 bytes @ 0xE
  3417                           
  3418  002E                     ?___ftmul:	
  3419                           ; 3 bytes @ 0xE
  3420                           
  3421  002E                     setLog_Code@rf:	
  3422                           ; 3 bytes @ 0xE
  3423                           
  3424  002E                     ___ftdiv@f2:	
  3425                           ; 1 bytes @ 0xE
  3426                           
  3427  002E                     ___ftmul@f1:	
  3428                           ; 3 bytes @ 0xE
  3429                           
  3430                           
  3431                           ; 3 bytes @ 0xE
  3432  002E                     	ds	1
  3433  002F                     setPowerFault_Exceptions@command:	
  3434                           
  3435                           ; 1 bytes @ 0xF
  3436  002F                     	ds	1
  3437  0030                     ??_setPowerFault_Main:	
  3438                           
  3439                           ; 0 bytes @ 0x10
  3440  0030                     	ds	1
  3441  0031                     ___ftdiv@f1:	
  3442  0031                     ___ftmul@f2:	
  3443                           ; 3 bytes @ 0x11
  3444                           
  3445                           
  3446                           ; 3 bytes @ 0x11
  3447  0031                     	ds	1
  3448  0032                     ??_PowerFault_Main:	
  3449                           
  3450                           ; 0 bytes @ 0x12
  3451  0032                     	ds	2
  3452  0034                     ??___ftdiv:	
  3453  0034                     ??___ftmul:	
  3454                           ; 0 bytes @ 0x14
  3455                           
  3456                           
  3457                           ; 0 bytes @ 0x14
  3458  0034                     	ds	4
  3459  0038                     ___ftdiv@cntr:	
  3460  0038                     ___ftmul@exp:	
  3461                           ; 1 bytes @ 0x18
  3462                           
  3463                           
  3464                           ; 1 bytes @ 0x18
  3465  0038                     	ds	1
  3466  0039                     ___ftdiv@f3:	
  3467  0039                     ___ftmul@f3_as_product:	
  3468                           ; 3 bytes @ 0x19
  3469                           
  3470                           
  3471                           ; 3 bytes @ 0x19
  3472  0039                     	ds	3
  3473  003C                     ___ftdiv@exp:	
  3474  003C                     ___ftmul@cntr:	
  3475                           ; 1 bytes @ 0x1C
  3476                           
  3477                           
  3478                           ; 1 bytes @ 0x1C
  3479  003C                     	ds	1
  3480  003D                     ___ftdiv@sign:	
  3481  003D                     ___ftmul@sign:	
  3482                           ; 1 bytes @ 0x1D
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x1D
  3486  003D                     	ds	1
  3487  003E                     ?___ftadd:	
  3488  003E                     ___ftadd@f1:	
  3489                           ; 3 bytes @ 0x1E
  3490                           
  3491                           
  3492                           ; 3 bytes @ 0x1E
  3493  003E                     	ds	3
  3494  0041                     ___ftadd@f2:	
  3495                           
  3496                           ; 3 bytes @ 0x21
  3497  0041                     	ds	3
  3498  0044                     ??___ftadd:	
  3499                           
  3500                           ; 0 bytes @ 0x24
  3501  0044                     	ds	4
  3502  0048                     ___ftadd@sign:	
  3503                           
  3504                           ; 1 bytes @ 0x28
  3505  0048                     	ds	1
  3506  0049                     ___ftadd@exp2:	
  3507                           
  3508                           ; 1 bytes @ 0x29
  3509  0049                     	ds	1
  3510  004A                     ___ftadd@exp1:	
  3511                           
  3512                           ; 1 bytes @ 0x2A
  3513  004A                     	ds	1
  3514  004B                     ?___fttol:	
  3515  004B                     ___fttol@f1:	
  3516                           ; 4 bytes @ 0x2B
  3517                           
  3518                           
  3519                           ; 3 bytes @ 0x2B
  3520  004B                     	ds	4
  3521  004F                     ??___fttol:	
  3522                           
  3523                           ; 0 bytes @ 0x2F
  3524  004F                     	ds	4
  3525  0053                     ___fttol@sign1:	
  3526                           
  3527                           ; 1 bytes @ 0x33
  3528  0053                     	ds	1
  3529  0054                     ___fttol@lval:	
  3530                           
  3531                           ; 4 bytes @ 0x34
  3532  0054                     	ds	4
  3533  0058                     ___fttol@exp1:	
  3534                           
  3535                           ; 1 bytes @ 0x38
  3536  0058                     	ds	1
  3537  0059                     ??_getPercentValue:	
  3538  0059                     ??_setPercentValue:	
  3539                           ; 0 bytes @ 0x39
  3540                           
  3541  0059                     setPercentValue@value:	
  3542                           ; 0 bytes @ 0x39
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x39
  3546  0059                     	ds	1
  3547  005A                     setPercentValue@i:	
  3548                           
  3549                           ; 3 bytes @ 0x3A
  3550  005A                     	ds	1
  3551  005B                     getPercentValue@value:	
  3552                           
  3553                           ; 1 bytes @ 0x3B
  3554  005B                     	ds	1
  3555  005C                     getPercentValue@i:	
  3556                           
  3557                           ; 3 bytes @ 0x3C
  3558  005C                     	ds	1
  3559  005D                     ?_setRF_DimmerLights:	
  3560  005D                     ??_Flash_Memory_Initialization:	
  3561                           ; 0 bytes @ 0x3D
  3562                           
  3563  005D                     setRF_DimmerLights@on:	
  3564                           ; 0 bytes @ 0x3D
  3565                           
  3566                           
  3567                           ; 1 bytes @ 0x3D
  3568  005D                     	ds	1
  3569  005E                     ??_setRF_DimmerLights:	
  3570  005E                     Flash_Memory_Initialization@i:	
  3571                           ; 0 bytes @ 0x3E
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x3E
  3575  005E                     	ds	1
  3576  005F                     ??_setDimmerLights_AdjRF:	
  3577                           
  3578                           ; 0 bytes @ 0x3F
  3579  005F                     	ds	1
  3580  0060                     setDimmerLights_AdjRF@lights:	
  3581  0060                     setRF_DimmerLights@status:	
  3582                           ; 1 bytes @ 0x40
  3583                           
  3584                           
  3585                           ; 1 bytes @ 0x40
  3586  0060                     	ds	1
  3587  0061                     ??_setRF_DimmerValue:	
  3588  0061                     setRF_DimmerLights@lights:	
  3589                           ; 0 bytes @ 0x41
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x41
  3593  0061                     	ds	1
  3594  0062                     ??_DlyOff_Main:	
  3595  0062                     ?_setDimmerLights_Adj:	
  3596                           ; 0 bytes @ 0x42
  3597                           
  3598  0062                     ??_setRFSW_Control:	
  3599                           ; 0 bytes @ 0x42
  3600                           
  3601  0062                     ??_Sw_DimmerOnFunc:	
  3602                           ; 0 bytes @ 0x42
  3603                           
  3604  0062                     ??_Sw_DimmerOffFunc:	
  3605                           ; 0 bytes @ 0x42
  3606                           
  3607  0062                     setDimmerLights_Adj@status:	
  3608                           ; 0 bytes @ 0x42
  3609                           
  3610  0062                     Sw_DimmerOnFunc@Idle:	
  3611                           ; 1 bytes @ 0x42
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x42
  3615  0062                     	ds	1
  3616  0063                     ??_setDimmerLights_Adj:	
  3617  0063                     setRFSW_Control@sw:	
  3618                           ; 0 bytes @ 0x43
  3619                           
  3620  0063                     setRF_DimmerValue@lights:	
  3621                           ; 1 bytes @ 0x43
  3622                           
  3623  0063                     Sw_DimmerOnFunc@sw:	
  3624                           ; 1 bytes @ 0x43
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x43
  3628  0063                     	ds	1
  3629  0064                     ??_setRFSW_AdjControl:	
  3630  0064                     DlyOff_Main@sw:	
  3631                           ; 0 bytes @ 0x44
  3632                           
  3633  0064                     setDimmerLights_Adj@lights:	
  3634                           ; 1 bytes @ 0x44
  3635                           
  3636  0064                     Sw_DimmerOffFunc@sw:	
  3637                           ; 1 bytes @ 0x44
  3638                           
  3639                           
  3640                           ; 1 bytes @ 0x44
  3641  0064                     	ds	1
  3642  0065                     ??_setDimmerLights_Main:	
  3643  0065                     ??_setSw_Main:	
  3644                           ; 0 bytes @ 0x45
  3645                           
  3646  0065                     ??_DelayOff_Main:	
  3647                           ; 0 bytes @ 0x45
  3648                           
  3649  0065                     setDimmerLights_Main@clear:	
  3650                           ; 0 bytes @ 0x45
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0x45
  3654  0065                     	ds	1
  3655  0066                     setDimmerLights_Main@lights:	
  3656  0066                     setRFSW_AdjControl@sw:	
  3657                           ; 1 bytes @ 0x46
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x46
  3661  0066                     	ds	1
  3662  0067                     ??_setControl_Lights_Table:	
  3663  0067                     ??_DimmerLights_Main:	
  3664                           ; 0 bytes @ 0x47
  3665                           
  3666  0067                     setControl_Lights_Table@rf:	
  3667                           ; 0 bytes @ 0x47
  3668                           
  3669  0067                     _setSw_Main$4867:	
  3670                           ; 1 bytes @ 0x47
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x47
  3674  0067                     	ds	1
  3675  0068                     ??_getRxData:	
  3676  0068                     getRxData@rf:	
  3677                           ; 0 bytes @ 0x48
  3678                           
  3679  0068                     setSw_Main@sw:	
  3680                           ; 1 bytes @ 0x48
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x48
  3684  0068                     	ds	1
  3685  0069                     ??_setRF_Main:	
  3686  0069                     ??_Switch_Main:	
  3687                           ; 0 bytes @ 0x49
  3688                           
  3689                           
  3690                           ; 0 bytes @ 0x49
  3691  0069                     	ds	1
  3692  006A                     setRF_Main@rf:	
  3693                           
  3694                           ; 1 bytes @ 0x4A
  3695  006A                     	ds	1
  3696  006B                     _setRF_Main$4022:	
  3697                           
  3698                           ; 1 bytes @ 0x4B
  3699  006B                     	ds	1
  3700  006C                     ??_RF_Main:	
  3701  006C                     ?_main:	
  3702                           ; 0 bytes @ 0x4C
  3703                           
  3704  006C                     main@argc:	
  3705                           ; 2 bytes @ 0x4C
  3706                           
  3707                           
  3708                           ; 2 bytes @ 0x4C
  3709  006C                     	ds	2
  3710  006E                     main@argv:	
  3711                           
  3712                           ; 2 bytes @ 0x4E
  3713  006E                     	ds	2
  3714  0070                     ??_main:	
  3715                           
  3716                           	psect	maintext
  3717  087F                     __pmaintext:	
  3718                           ; 0 bytes @ 0x50
  3719 ;;
  3720 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3721 ;;
  3722 ;; *************** function _main *****************
  3723 ;; Defined at:
  3724 ;;		line 7 in file "../src/main_B1.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  argc            2   76[BANK0 ] int 
  3727 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  2   76[BANK0 ] int 
  3732 ;; Registers used:
  3733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 17F/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;Total ram usage:        4 bytes
  3744 ;; Hardware stack levels required when called:   15
  3745 ;; This function calls:
  3746 ;;		_Buzzer_Initialization
  3747 ;;		_Buzzer_Main
  3748 ;;		_CC2500_PowerOnInitial
  3749 ;;		_DelayOff_Initialization
  3750 ;;		_DelayOff_Main
  3751 ;;		_DimmerLights_Initialization
  3752 ;;		_DimmerLights_Main
  3753 ;;		_Flash_Memory_Initialization
  3754 ;;		_Flash_Memory_Main
  3755 ;;		_LED_Initialization
  3756 ;;		_LED_Main
  3757 ;;		_Mcu_Initialization
  3758 ;;		_PowerFault_Initialization
  3759 ;;		_PowerFault_Main
  3760 ;;		_RF_Initialization
  3761 ;;		_RF_Main
  3762 ;;		_Switch_Initialization
  3763 ;;		_Switch_Main
  3764 ;;		_WDT_Main
  3765 ;;		_getPowerFault_AD
  3766 ;;		_myMain_Initialization
  3767 ;;		_my_Main
  3768 ;; This function is called by:
  3769 ;;		Startup code after reset
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function _main
  3775  087F                     _main:	
  3776                           
  3777                           ;main_B1.c: 9: myMain_Initialization();
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3781  087F  319E  2678  3188   	fcall	_myMain_Initialization
  3782                           
  3783                           ;main_B1.c: 10: Mcu_Initialization();
  3784  0882  319F  2734  3188   	fcall	_Mcu_Initialization
  3785                           
  3786                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3787  0885  3183  2343  3188   	fcall	_Flash_Memory_Initialization
  3788                           
  3789                           ;main_B1.c: 12: LED_Initialization();
  3790  0888  319D  252B  3188   	fcall	_LED_Initialization
  3791                           
  3792                           ;main_B1.c: 13: Buzzer_Initialization();
  3793  088B  319C  24EF  3188   	fcall	_Buzzer_Initialization
  3794                           
  3795                           ;main_B1.c: 15: ;;
  3796                           ;main_B1.c: 16: ;;
  3797                           ;main_B1.c: 17: ;;
  3798                           ;main_B1.c: 18: PowerFault_Initialization();
  3799  088E  319C  2421  3188   	fcall	_PowerFault_Initialization
  3800                           
  3801                           ;main_B1.c: 19: DelayOff_Initialization();
  3802  0891  319C  2433  3188   	fcall	_DelayOff_Initialization
  3803                           
  3804                           ;main_B1.c: 21: DimmerLights_Initialization();
  3805  0894  319D  2550  3188   	fcall	_DimmerLights_Initialization
  3806                           
  3807                           ;main_B1.c: 22: ;;
  3808                           ;main_B1.c: 23: ;;
  3809                           ;main_B1.c: 24: ;;
  3810                           ;main_B1.c: 25: Switch_Initialization();
  3811  0897  319C  248E  3188   	fcall	_Switch_Initialization
  3812                           
  3813                           ;main_B1.c: 26: RF_Initialization();
  3814  089A  319C  243F  3188   	fcall	_RF_Initialization
  3815                           
  3816                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3817  089D  319E  268C  3188   	fcall	_CC2500_PowerOnInitial
  3818  08A0                     l7152:	
  3819                           ;main_B1.c: 28: ;;
  3820                           ;main_B1.c: 31: while (1) {
  3821                           
  3822                           
  3823                           ;main_B1.c: 33: if (myMain->PowerON) {
  3824  08A0  0021               	movlb	1	; select bank1
  3825  08A1  086D               	movf	_myMain^(0+128),w
  3826  08A2  0086               	movwf	6
  3827  08A3  3001               	movlw	1	; select bank2/3
  3828  08A4  0087               	movwf	7
  3829  08A5  1C01               	btfss	1,0
  3830  08A6  28AB               	goto	l7156
  3831                           
  3832                           ;main_B1.c: 35: ;;
  3833                           ;main_B1.c: 39: ;;
  3834                           ;main_B1.c: 43: ;;
  3835                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  3836  08A7  3011               	movlw	17
  3837  08A8  3194  2475  3188   	fcall	_getPowerFault_AD
  3838  08AB                     l7156:	
  3839                           
  3840                           ;main_B1.c: 58: }
  3841                           ;main_B1.c: 61: if (myMain->T0_Timerout) {
  3842  08AB  0021               	movlb	1	; select bank1
  3843  08AC  086D               	movf	_myMain^(0+128),w
  3844  08AD  0086               	movwf	6
  3845  08AE  3001               	movlw	1	; select bank2/3
  3846  08AF  0087               	movwf	7
  3847  08B0  1C81               	btfss	1,1
  3848  08B1  28A0               	goto	l7152
  3849                           
  3850                           ;main_B1.c: 62: myMain->T0_Timerout = 0;
  3851  08B2  086D               	movf	_myMain^(0+128),w
  3852  08B3  0086               	movwf	6
  3853  08B4  3001               	movlw	1	; select bank2/3
  3854  08B5  0087               	movwf	7
  3855  08B6  1081               	bcf	1,1
  3856                           
  3857                           ;main_B1.c: 63: my_Main();
  3858  08B7  318A  22F7  3188   	fcall	_my_Main
  3859                           
  3860                           ;main_B1.c: 64: WDT_Main();
  3861  08BA  319F  276A  3188   	fcall	_WDT_Main
  3862                           
  3863                           ;main_B1.c: 65: ;;
  3864                           ;main_B1.c: 66: ;;
  3865                           ;main_B1.c: 67: if (myMain->PowerON) {
  3866  08BD  0021               	movlb	1	; select bank1
  3867  08BE  086D               	movf	_myMain^(0+128),w
  3868  08BF  0086               	movwf	6
  3869  08C0  3001               	movlw	1	; select bank2/3
  3870  08C1  0087               	movwf	7
  3871  08C2  1C01               	btfss	1,0
  3872  08C3  28A0               	goto	l7152
  3873                           
  3874                           ;main_B1.c: 68: Flash_Memory_Main();
  3875  08C4  3194  2430  3188   	fcall	_Flash_Memory_Main
  3876                           
  3877                           ;main_B1.c: 70: LED_Main();
  3878  08C7  319D  2537  3188   	fcall	_LED_Main
  3879                           
  3880                           ;main_B1.c: 71: Buzzer_Main();
  3881  08CA  318F  274D  3188   	fcall	_Buzzer_Main
  3882                           
  3883                           ;main_B1.c: 73: ;;
  3884                           ;main_B1.c: 74: ;;
  3885                           ;main_B1.c: 75: ;;
  3886                           ;main_B1.c: 76: PowerFault_Main();
  3887  08CD  319C  2424  3188   	fcall	_PowerFault_Main
  3888                           
  3889                           ;main_B1.c: 78: ;;
  3890                           ;main_B1.c: 79: DimmerLights_Main();
  3891  08D0  319C  2470  3188   	fcall	_DimmerLights_Main
  3892                           
  3893                           ;main_B1.c: 80: Switch_Main();
  3894  08D3  319C  2447  3188   	fcall	_Switch_Main
  3895                           
  3896                           ;main_B1.c: 81: ;;
  3897                           ;main_B1.c: 82: ;;
  3898                           ;main_B1.c: 84: RF_Main();
  3899  08D6  319C  2443  3188   	fcall	_RF_Main
  3900                           
  3901                           ;main_B1.c: 85: DelayOff_Main();
  3902  08D9  319C  2437  3188   	fcall	_DelayOff_Main
  3903                           
  3904                           ;main_B1.c: 86: ;;
  3905  08DC  28A0               	goto	l7152
  3906  08DD                     __end_of_main:	
  3907                           
  3908                           	psect	text1
  3909  0AF7                     __ptext1:	
  3910 ;; *************** function _my_Main *****************
  3911 ;; Defined at:
  3912 ;;		line 123 in file "../src/main_B1.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    7
  3933 ;; This function calls:
  3934 ;;		_setBuz
  3935 ;;		_setRF_Enable
  3936 ;;		_setSw_Enable
  3937 ;; This function is called by:
  3938 ;;		_main
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _my_Main
  3944  0AF7                     _my_Main:	
  3945                           
  3946                           ;main_B1.c: 125: if (myMain->PowerON == 0) {
  3947                           
  3948                           ;incstack = 0
  3949                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3950  0AF7  0021               	movlb	1	; select bank1
  3951  0AF8  086D               	movf	_myMain^(0+128),w
  3952  0AF9  0086               	movwf	6
  3953  0AFA  3001               	movlw	1	; select bank2/3
  3954  0AFB  0087               	movwf	7
  3955  0AFC  1801               	btfsc	1,0
  3956  0AFD  2B39               	goto	l7088
  3957                           
  3958                           ;main_B1.c: 126: myMain->PowerCount++;
  3959  0AFE  0A6D               	incf	_myMain^(0+128),w
  3960  0AFF  0086               	movwf	6
  3961  0B00  3001               	movlw	1	; select bank2/3
  3962  0B01  0087               	movwf	7
  3963  0B02  3001               	movlw	1
  3964  0B03  0781               	addwf	1,f
  3965  0B04  3141               	addfsr 1,1
  3966  0B05  1803               	skipnc
  3967  0B06  0A81               	incf	1,f
  3968                           
  3969                           ;main_B1.c: 127: if (myMain->PowerCount == 150)
  3970  0B07  0A6D               	incf	_myMain^(0+128),w
  3971  0B08  0086               	movwf	6
  3972  0B09  3001               	movlw	1	; select bank2/3
  3973  0B0A  0087               	movwf	7
  3974  0B0B  3F40               	moviw [0]fsr1
  3975  0B0C  3A96               	xorlw	150
  3976  0B0D  1D03               	skipz
  3977  0B0E  2B11               	goto	u6275
  3978  0B0F  3F41               	moviw [1]fsr1
  3979  0B10  3A00               	xorlw	0
  3980  0B11                     u6275:	
  3981  0B11  1D03               	skipz
  3982  0B12  0008               	return
  3983                           
  3984                           ;main_B1.c: 128: {
  3985                           ;main_B1.c: 129: myMain->PowerCount = 0;
  3986  0B13  0A6D               	incf	_myMain^(0+128),w
  3987  0B14  0086               	movwf	6
  3988  0B15  3001               	movlw	1	; select bank2/3
  3989  0B16  0087               	movwf	7
  3990  0B17  3000               	movlw	0
  3991  0B18  3FC0               	movwi [0]fsr1
  3992  0B19  3FC1               	movwi [1]fsr1
  3993                           
  3994                           ;main_B1.c: 130: myMain->PowerON = 1;
  3995  0B1A  086D               	movf	_myMain^(0+128),w
  3996  0B1B  0086               	movwf	6
  3997  0B1C  3001               	movlw	1	; select bank2/3
  3998  0B1D  0087               	movwf	7
  3999  0B1E  1401               	bsf	1,0
  4000                           
  4001                           ;main_B1.c: 133: ;;
  4002                           ;main_B1.c: 137: ;;
  4003                           ;main_B1.c: 143: setBuz(3, 50);
  4004  0B1F  3032               	movlw	50
  4005  0B20  0020               	movlb	0	; select bank0
  4006  0B21  00A9               	movwf	setBuz@time
  4007  0B22  3000               	movlw	0
  4008  0B23  00AA               	movwf	setBuz@time+1
  4009  0B24  3003               	movlw	3
  4010  0B25  318C  24EB  318A   	fcall	_setBuz
  4011                           
  4012                           ;main_B1.c: 144: myMain->SelfTest = 1;
  4013  0B28  0021               	movlb	1	; select bank1
  4014  0B29  086D               	movf	_myMain^(0+128),w
  4015  0B2A  0086               	movwf	6
  4016  0B2B  3001               	movlw	1	; select bank2/3
  4017  0B2C  0087               	movwf	7
  4018  0B2D  1701               	bsf	1,6
  4019                           
  4020                           ;main_B1.c: 146: setSw_Enable(1);
  4021  0B2E  3001               	movlw	1
  4022  0B2F  3190  2066  318A   	fcall	_setSw_Enable
  4023                           
  4024                           ;main_B1.c: 149: setRF_Enable(1, 1);
  4025  0B32  0020               	movlb	0	; select bank0
  4026  0B33  01A2               	clrf	setRF_Enable@command
  4027  0B34  0AA2               	incf	setRF_Enable@command,f
  4028  0B35  3001               	movlw	1
  4029  0B36  3191  2121         	fcall	_setRF_Enable
  4030                           
  4031                           ;main_B1.c: 153: }
  4032                           ;main_B1.c: 154: } else {
  4033  0B38  0008               	return
  4034  0B39                     l7088:	
  4035                           
  4036                           ;main_B1.c: 162: myMain->Count1++;
  4037  0B39  0021               	movlb	1	; select bank1
  4038  0B3A  086D               	movf	_myMain^(0+128),w
  4039  0B3B  3E05               	addlw	5
  4040  0B3C  0086               	movwf	6
  4041  0B3D  3001               	movlw	1	; select bank2/3
  4042  0B3E  0087               	movwf	7
  4043  0B3F  3001               	movlw	1
  4044  0B40  0781               	addwf	1,f
  4045  0B41  3141               	addfsr 1,1
  4046  0B42  1803               	skipnc
  4047  0B43  0A81               	incf	1,f
  4048                           
  4049                           ;main_B1.c: 163: if (myMain->Count1 == 100)
  4050  0B44  086D               	movf	_myMain^(0+128),w
  4051  0B45  3E05               	addlw	5
  4052  0B46  0086               	movwf	6
  4053  0B47  3001               	movlw	1	; select bank2/3
  4054  0B48  0087               	movwf	7
  4055  0B49  3F40               	moviw [0]fsr1
  4056  0B4A  3A64               	xorlw	100
  4057  0B4B  1D03               	skipz
  4058  0B4C  2B4F               	goto	u6285
  4059  0B4D  3F41               	moviw [1]fsr1
  4060  0B4E  3A00               	xorlw	0
  4061  0B4F                     u6285:	
  4062  0B4F  1D03               	skipz
  4063  0B50  0008               	return
  4064                           
  4065                           ;main_B1.c: 164: {
  4066                           ;main_B1.c: 165: myMain->Count1 = 0;
  4067  0B51  086D               	movf	_myMain^(0+128),w
  4068  0B52  3E05               	addlw	5
  4069  0B53  0086               	movwf	6
  4070  0B54  3001               	movlw	1	; select bank2/3
  4071  0B55  0087               	movwf	7
  4072  0B56  3000               	movlw	0
  4073  0B57  3FC0               	movwi [0]fsr1
  4074  0B58  3FC1               	movwi [1]fsr1
  4075                           
  4076                           ;main_B1.c: 178: if (myMain->Flag) {
  4077  0B59  086D               	movf	_myMain^(0+128),w
  4078  0B5A  0086               	movwf	6
  4079  0B5B  3001               	movlw	1	; select bank2/3
  4080  0B5C  0087               	movwf	7
  4081  0B5D  1D81               	btfss	1,3
  4082  0B5E  2B65               	goto	l7096
  4083                           
  4084                           ;main_B1.c: 179: myMain->Flag = 0;
  4085  0B5F  086D               	movf	_myMain^(0+128),w
  4086  0B60  0086               	movwf	6
  4087  0B61  3001               	movlw	1	; select bank2/3
  4088  0B62  0087               	movwf	7
  4089  0B63  1181               	bcf	1,3
  4090                           
  4091                           ;main_B1.c: 188: } else {
  4092  0B64  0008               	return
  4093  0B65                     l7096:	
  4094                           
  4095                           ;main_B1.c: 189: myMain->Flag = 1;
  4096  0B65  086D               	movf	_myMain^(0+128),w
  4097  0B66  0086               	movwf	6
  4098  0B67  3001               	movlw	1	; select bank2/3
  4099  0B68  0087               	movwf	7
  4100  0B69  1581               	bsf	1,3
  4101  0B6A  0008               	return
  4102  0B6B                     __end_of_my_Main:	
  4103                           
  4104                           	psect	text2
  4105  1E78                     __ptext2:	
  4106 ;; *************** function _myMain_Initialization *****************
  4107 ;; Defined at:
  4108 ;;		line 111 in file "../src/main_B1.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;		None               void
  4115 ;; Registers used:
  4116 ;;		wreg, fsr1l, fsr1h
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;Total ram usage:        1 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    5
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_main
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _myMain_Initialization
  4138  1E78                     _myMain_Initialization:	
  4139                           
  4140                           ;main_B1.c: 113: product = &_product;
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4144  1E78  30C5               	movlw	__product& (0+255)
  4145  1E79  0020               	movlb	0	; select bank0
  4146  1E7A  00A0               	movwf	??_myMain_Initialization
  4147  1E7B  0820               	movf	??_myMain_Initialization,w
  4148  1E7C  00FD               	movwf	_product
  4149                           
  4150                           ;main_B1.c: 114: product->Data[20] = 209;
  4151  1E7D  30D1               	movlw	209
  4152  1E7E  00A0               	movwf	??_myMain_Initialization
  4153  1E7F  087D               	movf	_product,w
  4154  1E80  3E14               	addlw	20
  4155  1E81  0086               	movwf	6
  4156  1E82  3001               	movlw	1	; select bank2/3
  4157  1E83  0087               	movwf	7
  4158  1E84  0820               	movf	??_myMain_Initialization,w
  4159  1E85  0081               	movwf	1
  4160                           
  4161                           ;main_B1.c: 117: myMain = &_myMain;
  4162  1E86  3020               	movlw	__myMain& (0+255)
  4163  1E87  00A0               	movwf	??_myMain_Initialization
  4164  1E88  0820               	movf	??_myMain_Initialization,w
  4165  1E89  0021               	movlb	1	; select bank1
  4166  1E8A  00ED               	movwf	_myMain^(0+128)
  4167  1E8B  0008               	return
  4168  1E8C                     __end_of_myMain_Initialization:	
  4169                           
  4170                           	psect	text3
  4171  1475                     __ptext3:	
  4172 ;; *************** function _getPowerFault_AD *****************
  4173 ;; Defined at:
  4174 ;;		line 49 in file "../src/PowerFault_B1.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  channel         1    wreg     unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  channel         1    8[BANK0 ] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;		None               void
  4181 ;; Registers used:
  4182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;Total ram usage:        5 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    6
  4195 ;; This function calls:
  4196 ;;		_getAD
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function _getPowerFault_AD
  4204  1475                     _getPowerFault_AD:	
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4208                           ;getPowerFault_AD@channel stored from wreg
  4209  1475  0020               	movlb	0	; select bank0
  4210  1476  00A8               	movwf	getPowerFault_AD@channel
  4211                           
  4212                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4213  1477  0021               	movlb	1	; select bank1
  4214  1478  083E               	movf	_PF^(0+128),w
  4215  1479  0086               	movwf	6
  4216  147A  0187               	clrf	7
  4217  147B  1D81               	btfss	1,3
  4218  147C  0008               	return
  4219                           
  4220                           ;PowerFault_B1.c: 52: {
  4221                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4222  147D  30F0               	movlw	240
  4223  147E  0020               	movlb	0	; select bank0
  4224  147F  00A4               	movwf	??_getPowerFault_AD
  4225  1480  0824               	movf	??_getPowerFault_AD,w
  4226  1481  00A0               	movwf	getAD@adcon1
  4227  1482  0828               	movf	getPowerFault_AD@channel,w
  4228  1483  319E  26A1  3194   	fcall	_getAD
  4229  1486  0021               	movlb	1	; select bank1
  4230  1487  083E               	movf	_PF^(0+128),w
  4231  1488  3E06               	addlw	6
  4232  1489  0086               	movwf	6
  4233  148A  0187               	clrf	7
  4234  148B  0020               	movlb	0	; select bank0
  4235  148C  0820               	movf	?_getAD,w
  4236  148D  3FC0               	movwi [0]fsr1
  4237  148E  0821               	movf	?_getAD+1,w
  4238  148F  3FC1               	movwi [1]fsr1
  4239                           
  4240                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4241  1490  0021               	movlb	1	; select bank1
  4242  1491  083E               	movf	_PF^(0+128),w
  4243  1492  3E06               	addlw	6
  4244  1493  0086               	movwf	6
  4245  1494  0187               	clrf	7
  4246  1495  3F40               	moviw [0]fsr1
  4247  1496  0020               	movlb	0	; select bank0
  4248  1497  00A4               	movwf	??_getPowerFault_AD
  4249  1498  3F41               	moviw [1]fsr1
  4250  1499  00A5               	movwf	??_getPowerFault_AD+1
  4251  149A  0021               	movlb	1	; select bank1
  4252  149B  083E               	movf	_PF^(0+128),w
  4253  149C  3E04               	addlw	4
  4254  149D  0086               	movwf	6
  4255  149E  0187               	clrf	7
  4256  149F  3F40               	moviw [0]fsr1
  4257  14A0  0020               	movlb	0	; select bank0
  4258  14A1  00A6               	movwf	??_getPowerFault_AD+2
  4259  14A2  3F41               	moviw [1]fsr1
  4260  14A3  00A7               	movwf	??_getPowerFault_AD+3
  4261  14A4  0825               	movf	??_getPowerFault_AD+1,w
  4262  14A5  0227               	subwf	??_getPowerFault_AD+3,w
  4263  14A6  1D03               	skipz
  4264  14A7  2CAA               	goto	u6255
  4265  14A8  0824               	movf	??_getPowerFault_AD,w
  4266  14A9  0226               	subwf	??_getPowerFault_AD+2,w
  4267  14AA                     u6255:	
  4268  14AA  1803               	skipnc
  4269  14AB  0008               	return
  4270                           
  4271                           ;PowerFault_B1.c: 55: {
  4272                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4273  14AC  0021               	movlb	1	; select bank1
  4274  14AD  083E               	movf	_PF^(0+128),w
  4275  14AE  3E06               	addlw	6
  4276  14AF  0086               	movwf	6
  4277  14B0  0187               	clrf	7
  4278  14B1  083E               	movf	_PF^(0+128),w
  4279  14B2  3E04               	addlw	4
  4280  14B3  0084               	movwf	4
  4281  14B4  0185               	clrf	5
  4282  14B5  3F40               	moviw [0]fsr1
  4283  14B6  3F80               	movwi [0]fsr0
  4284  14B7  3F41               	moviw [1]fsr1
  4285  14B8  3F81               	movwi [1]fsr0
  4286  14B9  0008               	return
  4287  14BA                     __end_of_getPowerFault_AD:	
  4288                           
  4289                           	psect	text4
  4290  1EA1                     __ptext4:	
  4291 ;; *************** function _getAD *****************
  4292 ;; Defined at:
  4293 ;;		line 343 in file "../src/MCU_B1.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  adcon0          1    wreg     unsigned char 
  4296 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  2    0[BANK0 ] int 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2, status,0
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        4 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    5
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_getPowerFault_AD
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _getAD
  4324  1EA1                     _getAD:	
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4328                           ;getAD@adcon0 stored from wreg
  4329  1EA1  0020               	movlb	0	; select bank0
  4330  1EA2  00A3               	movwf	getAD@adcon0
  4331                           
  4332                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4333  1EA3  0823               	movf	getAD@adcon0,w
  4334  1EA4  0021               	movlb	1	; select bank1
  4335  1EA5  009D               	movwf	29	;volatile
  4336                           
  4337                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4338  1EA6  0020               	movlb	0	; select bank0
  4339  1EA7  0820               	movf	getAD@adcon1,w
  4340  1EA8  0021               	movlb	1	; select bank1
  4341  1EA9  009E               	movwf	30	;volatile
  4342                           
  4343                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4344  1EAA  149D               	bsf	29,1	;volatile
  4345  1EAB                     l1320:	
  4346                           ;MCU_B1.c: 347: while (GO_nDONE == 1);
  4347                           
  4348  1EAB  189D               	btfsc	29,1	;volatile
  4349  1EAC  2EAB               	goto	l1320
  4350                           
  4351                           ;MCU_B1.c: 348: return ((ADRESH*256)+ADRESL);
  4352  1EAD  081C               	movf	28,w	;volatile
  4353  1EAE  0020               	movlb	0	; select bank0
  4354  1EAF  01A1               	clrf	?_getAD+1
  4355  1EB0  07A1               	addwf	?_getAD+1,f
  4356  1EB1  0021               	movlb	1	; select bank1
  4357  1EB2  081B               	movf	27,w	;volatile
  4358  1EB3  0020               	movlb	0	; select bank0
  4359  1EB4  01A0               	clrf	?_getAD
  4360  1EB5  07A0               	addwf	?_getAD,f
  4361  1EB6  0008               	return
  4362  1EB7                     __end_of_getAD:	
  4363                           
  4364                           	psect	text5
  4365  1F6A                     __ptext5:	
  4366 ;; *************** function _WDT_Main *****************
  4367 ;; Defined at:
  4368 ;;		line 900 in file "../src/MCU_B1.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;		None               void
  4375 ;; Registers used:
  4376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;Total ram usage:        1 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    6
  4389 ;; This function calls:
  4390 ;;		_WDT_Clearing
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           
  4397                           ;psect for function _WDT_Main
  4398  1F6A                     _WDT_Main:	
  4399                           
  4400                           ;MCU_B1.c: 901: if (WDT->Enable == 1) {
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4404  1F6A  0021               	movlb	1	; select bank1
  4405  1F6B  086C               	movf	_WDT^(0+128),w
  4406  1F6C  0086               	movwf	6
  4407  1F6D  0187               	clrf	7
  4408  1F6E  1C01               	btfss	1,0
  4409  1F6F  0008               	return
  4410                           
  4411                           ;MCU_B1.c: 902: if (WDT->Count-- > 0) {
  4412  1F70  0A6C               	incf	_WDT^(0+128),w
  4413  1F71  0086               	movwf	6
  4414  1F72  0187               	clrf	7
  4415  1F73  3001               	movlw	1
  4416  1F74  0281               	subwf	1,f
  4417  1F75  0801               	movf	1,w
  4418  1F76  3AFF               	xorlw	255
  4419  1F77  1903               	skipnz
  4420  1F78  0008               	return
  4421                           
  4422                           ;MCU_B1.c: 903: WDT->Count = 10;
  4423  1F79  300A               	movlw	10
  4424  1F7A  0020               	movlb	0	; select bank0
  4425  1F7B  00A0               	movwf	??_WDT_Main
  4426  1F7C  0021               	movlb	1	; select bank1
  4427  1F7D  0A6C               	incf	_WDT^(0+128),w
  4428  1F7E  0086               	movwf	6
  4429  1F7F  0187               	clrf	7
  4430  1F80  0020               	movlb	0	; select bank0
  4431  1F81  0820               	movf	??_WDT_Main,w
  4432  1F82  0081               	movwf	1
  4433                           
  4434                           ;MCU_B1.c: 904: WDT_Clearing();
  4435  1F83  3180  2002         	fcall	_WDT_Clearing
  4436  1F85  0008               	return
  4437  1F86                     __end_of_WDT_Main:	
  4438                           
  4439                           	psect	text6
  4440  0002                     __ptext6:	
  4441 ;; *************** function _WDT_Clearing *****************
  4442 ;; Defined at:
  4443 ;;		line 910 in file "../src/MCU_B1.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		None
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    5
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_WDT_Main
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _WDT_Clearing
  4473  0002                     _WDT_Clearing:	
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in _WDT_Clearing: []
  4477  0002  0064               	clrwdt	;# 
  4478  0003  0008               	return
  4479  0004                     __end_of_WDT_Clearing:	
  4480                           
  4481                           	psect	text7
  4482  1C47                     __ptext7:	
  4483 ;; *************** function _Switch_Main *****************
  4484 ;; Defined at:
  4485 ;;		line 61 in file "../src/Switch_B1.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;		None               void
  4492 ;; Registers used:
  4493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:   11
  4506 ;; This function calls:
  4507 ;;		_setSw_Main
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           
  4514                           ;psect for function _Switch_Main
  4515  1C47                     _Switch_Main:	
  4516                           
  4517                           ;Switch_B1.c: 63: setSw_Main(1);
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4521  1C47  3001               	movlw	1
  4522  1C48  3181  21FA         	fcall	_setSw_Main
  4523  1C4A  0008               	return
  4524  1C4B                     __end_of_Switch_Main:	
  4525                           
  4526                           	psect	text8
  4527  01FA                     __ptext8:	
  4528 ;; *************** function _setSw_Main *****************
  4529 ;; Defined at:
  4530 ;;		line 111 in file "../src/Switch_B1.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  sw              1    wreg     unsigned char 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  sw              1   72[BANK0 ] unsigned char 
  4535 ;; Return value:  Size  Location     Type
  4536 ;;		None               void
  4537 ;; Registers used:
  4538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;Total ram usage:        4 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:   10
  4551 ;; This function calls:
  4552 ;;		_SwPointSelect
  4553 ;;		_Sw_DimmerAdjFunc
  4554 ;;		_Sw_DimmerOffFunc
  4555 ;;		_Sw_DimmerOnFunc
  4556 ;;		_setBuz
  4557 ;;		_setRF_Learn
  4558 ;; This function is called by:
  4559 ;;		_Switch_Main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _setSw_Main
  4565  01FA                     _setSw_Main:	
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4569                           ;setSw_Main@sw stored from wreg
  4570  01FA  0020               	movlb	0	; select bank0
  4571  01FB  00E8               	movwf	setSw_Main@sw
  4572                           
  4573                           ;Switch_B1.c: 112: SwPointSelect(sw);
  4574  01FC  0868               	movf	setSw_Main@sw,w
  4575  01FD  319C  24CC  3181   	fcall	_SwPointSelect
  4576                           
  4577                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  4578  0200  087B               	movf	_Sw,w
  4579  0201  0086               	movwf	6
  4580  0202  3001               	movlw	1	; select bank2/3
  4581  0203  0087               	movwf	7
  4582  0204  1C01               	btfss	1,0
  4583  0205  0008               	return
  4584                           
  4585                           ;Switch_B1.c: 133: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  4586  0206  0020               	movlb	0	; select bank0
  4587  0207  01E7               	clrf	_setSw_Main$4867
  4588  0208  0AE7               	incf	_setSw_Main$4867,f
  4589  0209  1F0C               	btfss	12,6	;volatile
  4590  020A  1A0C               	btfsc	12,4	;volatile
  4591  020B  2A10               	goto	l6788
  4592  020C  1C0C               	btfss	12,0	;volatile
  4593  020D  188D               	btfsc	13,1	;volatile
  4594  020E  2A10               	goto	l6788
  4595  020F  01E7               	clrf	_setSw_Main$4867
  4596  0210                     l6788:	
  4597  0210  087B               	movf	_Sw,w
  4598  0211  0086               	movwf	6
  4599  0212  3001               	movlw	1	; select bank2/3
  4600  0213  0087               	movwf	7
  4601  0214  0867               	movf	_setSw_Main$4867,w
  4602  0215  1081               	bcf	1,1
  4603  0216  1D03               	skipz
  4604  0217  1481               	bsf	1,1
  4605                           
  4606                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  4607  0218  087B               	movf	_Sw,w
  4608  0219  0086               	movwf	6
  4609  021A  3001               	movlw	1	; select bank2/3
  4610  021B  0087               	movwf	7
  4611  021C  1C81               	btfss	1,1
  4612  021D  2AEE               	goto	l6838
  4613                           
  4614                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  4615  021E  087B               	movf	_Sw,w
  4616  021F  0086               	movwf	6
  4617  0220  3001               	movlw	1	; select bank2/3
  4618  0221  0087               	movwf	7
  4619  0222  1901               	btfsc	1,2
  4620  0223  2A45               	goto	l6804
  4621                           
  4622                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  4623  0224  3001               	movlw	1
  4624  0225  00E5               	movwf	??_setSw_Main
  4625  0226  087B               	movf	_Sw,w
  4626  0227  3E02               	addlw	2
  4627  0228  0086               	movwf	6
  4628  0229  3001               	movlw	1	; select bank2/3
  4629  022A  0087               	movwf	7
  4630  022B  0865               	movf	??_setSw_Main,w
  4631  022C  0781               	addwf	1,f
  4632                           
  4633                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  4634  022D  087B               	movf	_Sw,w
  4635  022E  3E02               	addlw	2
  4636  022F  0086               	movwf	6
  4637  0230  3001               	movlw	1	; select bank2/3
  4638  0231  0087               	movwf	7
  4639  0232  3005               	movlw	5
  4640  0233  0201               	subwf	1,w
  4641  0234  1C03               	skipc
  4642  0235  0008               	return
  4643                           
  4644                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  4645  0236  087B               	movf	_Sw,w
  4646  0237  3E02               	addlw	2
  4647  0238  0086               	movwf	6
  4648  0239  3001               	movlw	1	; select bank2/3
  4649  023A  0087               	movwf	7
  4650  023B  0181               	clrf	1
  4651                           
  4652                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  4653  023C  087B               	movf	_Sw,w
  4654  023D  0086               	movwf	6
  4655  023E  3001               	movlw	1	; select bank2/3
  4656  023F  0087               	movwf	7
  4657  0240  1501               	bsf	1,2
  4658                           
  4659                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  4660  0241  0868               	movf	setSw_Main@sw,w
  4661  0242  3196  2638         	fcall	_Sw_DimmerOnFunc
  4662                           
  4663                           ;Switch_B1.c: 145: }
  4664                           ;Switch_B1.c: 146: } else {
  4665  0244  0008               	return
  4666  0245                     l6804:	
  4667                           
  4668                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  4669  0245  087B               	movf	_Sw,w
  4670  0246  0086               	movwf	6
  4671  0247  3001               	movlw	1	; select bank2/3
  4672  0248  0087               	movwf	7
  4673  0249  1981               	btfsc	1,3
  4674  024A  2A77               	goto	l6814
  4675                           
  4676                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  4677  024B  087B               	movf	_Sw,w
  4678  024C  3E03               	addlw	3
  4679  024D  0086               	movwf	6
  4680  024E  3001               	movlw	1	; select bank2/3
  4681  024F  0087               	movwf	7
  4682  0250  3001               	movlw	1
  4683  0251  0781               	addwf	1,f
  4684  0252  3141               	addfsr 1,1
  4685  0253  1803               	skipnc
  4686  0254  0A81               	incf	1,f
  4687                           
  4688                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  4689  0255  087B               	movf	_Sw,w
  4690  0256  3E03               	addlw	3
  4691  0257  0086               	movwf	6
  4692  0258  3001               	movlw	1	; select bank2/3
  4693  0259  0087               	movwf	7
  4694  025A  3F40               	moviw [0]fsr1
  4695  025B  0020               	movlb	0	; select bank0
  4696  025C  00E5               	movwf	??_setSw_Main
  4697  025D  3F41               	moviw [1]fsr1
  4698  025E  00E6               	movwf	??_setSw_Main+1
  4699  025F  3000               	movlw	0
  4700  0260  0266               	subwf	??_setSw_Main+1,w
  4701  0261  3096               	movlw	150
  4702  0262  1903               	skipnz
  4703  0263  0265               	subwf	??_setSw_Main,w
  4704  0264  1C03               	skipc
  4705  0265  0008               	return
  4706                           
  4707                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  4708  0266  087B               	movf	_Sw,w
  4709  0267  3E03               	addlw	3
  4710  0268  0086               	movwf	6
  4711  0269  3001               	movlw	1	; select bank2/3
  4712  026A  0087               	movwf	7
  4713  026B  3000               	movlw	0
  4714  026C  3FC0               	movwi [0]fsr1
  4715  026D  3FC1               	movwi [1]fsr1
  4716                           
  4717                           ;Switch_B1.c: 151: Sw->Hold1 = 1;
  4718  026E  087B               	movf	_Sw,w
  4719  026F  0086               	movwf	6
  4720  0270  3001               	movlw	1	; select bank2/3
  4721  0271  0087               	movwf	7
  4722  0272  1581               	bsf	1,3
  4723                           
  4724                           ;Switch_B1.c: 154: Sw_DimmerAdjFunc(sw);
  4725  0273  0868               	movf	setSw_Main@sw,w
  4726  0274  3191  21C9         	fcall	_Sw_DimmerAdjFunc
  4727                           
  4728                           ;Switch_B1.c: 157: }
  4729                           ;Switch_B1.c: 158: } else {
  4730  0276  0008               	return
  4731  0277                     l6814:	
  4732                           
  4733                           ;Switch_B1.c: 159: if (Sw->Hold2 == 0) {
  4734  0277  087B               	movf	_Sw,w
  4735  0278  0086               	movwf	6
  4736  0279  3001               	movlw	1	; select bank2/3
  4737  027A  0087               	movwf	7
  4738  027B  1A01               	btfsc	1,4
  4739  027C  2ABB               	goto	l6828
  4740                           
  4741                           ;Switch_B1.c: 160: Sw->Hold2Time++;
  4742  027D  087B               	movf	_Sw,w
  4743  027E  3E05               	addlw	5
  4744  027F  0086               	movwf	6
  4745  0280  3001               	movlw	1	; select bank2/3
  4746  0281  0087               	movwf	7
  4747  0282  3001               	movlw	1
  4748  0283  0781               	addwf	1,f
  4749  0284  3141               	addfsr 1,1
  4750  0285  1803               	skipnc
  4751  0286  0A81               	incf	1,f
  4752                           
  4753                           ;Switch_B1.c: 161: if (Sw->Hold2Time >= 150) {
  4754  0287  087B               	movf	_Sw,w
  4755  0288  3E05               	addlw	5
  4756  0289  0086               	movwf	6
  4757  028A  3001               	movlw	1	; select bank2/3
  4758  028B  0087               	movwf	7
  4759  028C  3F40               	moviw [0]fsr1
  4760  028D  0020               	movlb	0	; select bank0
  4761  028E  00E5               	movwf	??_setSw_Main
  4762  028F  3F41               	moviw [1]fsr1
  4763  0290  00E6               	movwf	??_setSw_Main+1
  4764  0291  3000               	movlw	0
  4765  0292  0266               	subwf	??_setSw_Main+1,w
  4766  0293  3096               	movlw	150
  4767  0294  1903               	skipnz
  4768  0295  0265               	subwf	??_setSw_Main,w
  4769  0296  1C03               	skipc
  4770  0297  0008               	return
  4771                           
  4772                           ;Switch_B1.c: 162: Sw->Hold2Time = 0;
  4773  0298  087B               	movf	_Sw,w
  4774  0299  3E05               	addlw	5
  4775  029A  0086               	movwf	6
  4776  029B  3001               	movlw	1	; select bank2/3
  4777  029C  0087               	movwf	7
  4778  029D  3000               	movlw	0
  4779  029E  3FC0               	movwi [0]fsr1
  4780  029F  3FC1               	movwi [1]fsr1
  4781                           
  4782                           ;Switch_B1.c: 163: Sw->Hold2 = 1;
  4783  02A0  087B               	movf	_Sw,w
  4784  02A1  0086               	movwf	6
  4785  02A2  3001               	movlw	1	; select bank2/3
  4786  02A3  0087               	movwf	7
  4787  02A4  1601               	bsf	1,4
  4788                           
  4789                           ;Switch_B1.c: 166: setRF_Learn(1, 1);
  4790  02A5  01A2               	clrf	setRF_Learn@command
  4791  02A6  0AA2               	incf	setRF_Learn@command,f
  4792  02A7  3001               	movlw	1
  4793  02A8  319D  2585  3181   	fcall	_setRF_Learn
  4794                           
  4795                           ;Switch_B1.c: 168: if (myMain->First == 1) {
  4796  02AB  0021               	movlb	1	; select bank1
  4797  02AC  086D               	movf	_myMain^(0+128),w
  4798  02AD  0086               	movwf	6
  4799  02AE  3001               	movlw	1	; select bank2/3
  4800  02AF  0087               	movwf	7
  4801  02B0  1F81               	btfss	1,7
  4802  02B1  0008               	return
  4803                           
  4804                           ;Switch_B1.c: 169: setBuz(2, 100);
  4805  02B2  3064               	movlw	100
  4806  02B3  0020               	movlb	0	; select bank0
  4807  02B4  00A9               	movwf	setBuz@time
  4808  02B5  3000               	movlw	0
  4809  02B6  00AA               	movwf	setBuz@time+1
  4810  02B7  3002               	movlw	2
  4811  02B8  318C  24EB         	fcall	_setBuz
  4812                           
  4813                           ;Switch_B1.c: 170: }
  4814                           ;Switch_B1.c: 172: }
  4815                           ;Switch_B1.c: 173: } else {
  4816  02BA  0008               	return
  4817  02BB                     l6828:	
  4818                           
  4819                           ;Switch_B1.c: 174: if (Sw->Hold3 == 0) {
  4820  02BB  087B               	movf	_Sw,w
  4821  02BC  0086               	movwf	6
  4822  02BD  3001               	movlw	1	; select bank2/3
  4823  02BE  0087               	movwf	7
  4824  02BF  1A81               	btfsc	1,5
  4825  02C0  0008               	return
  4826                           
  4827                           ;Switch_B1.c: 175: Sw->Hold3Time++;
  4828  02C1  087B               	movf	_Sw,w
  4829  02C2  3E07               	addlw	7
  4830  02C3  0086               	movwf	6
  4831  02C4  3001               	movlw	1	; select bank2/3
  4832  02C5  0087               	movwf	7
  4833  02C6  3001               	movlw	1
  4834  02C7  0781               	addwf	1,f
  4835  02C8  3141               	addfsr 1,1
  4836  02C9  1803               	skipnc
  4837  02CA  0A81               	incf	1,f
  4838                           
  4839                           ;Switch_B1.c: 176: if (Sw->Hold3Time >= 300) {
  4840  02CB  087B               	movf	_Sw,w
  4841  02CC  3E07               	addlw	7
  4842  02CD  0086               	movwf	6
  4843  02CE  3001               	movlw	1	; select bank2/3
  4844  02CF  0087               	movwf	7
  4845  02D0  3F40               	moviw [0]fsr1
  4846  02D1  0020               	movlb	0	; select bank0
  4847  02D2  00E5               	movwf	??_setSw_Main
  4848  02D3  3F41               	moviw [1]fsr1
  4849  02D4  00E6               	movwf	??_setSw_Main+1
  4850  02D5  3001               	movlw	1
  4851  02D6  0266               	subwf	??_setSw_Main+1,w
  4852  02D7  302C               	movlw	44
  4853  02D8  1903               	skipnz
  4854  02D9  0265               	subwf	??_setSw_Main,w
  4855  02DA  1C03               	skipc
  4856  02DB  0008               	return
  4857                           
  4858                           ;Switch_B1.c: 177: Sw->Hold3Time = 0;
  4859  02DC  087B               	movf	_Sw,w
  4860  02DD  3E07               	addlw	7
  4861  02DE  0086               	movwf	6
  4862  02DF  3001               	movlw	1	; select bank2/3
  4863  02E0  0087               	movwf	7
  4864  02E1  3000               	movlw	0
  4865  02E2  3FC0               	movwi [0]fsr1
  4866  02E3  3FC1               	movwi [1]fsr1
  4867                           
  4868                           ;Switch_B1.c: 178: Sw->Hold3 = 1;
  4869  02E4  087B               	movf	_Sw,w
  4870  02E5  0086               	movwf	6
  4871  02E6  3001               	movlw	1	; select bank2/3
  4872  02E7  0087               	movwf	7
  4873  02E8  1681               	bsf	1,5
  4874                           
  4875                           ;Switch_B1.c: 181: setRF_Learn(1, 0);
  4876  02E9  01A2               	clrf	setRF_Learn@command
  4877  02EA  3001               	movlw	1
  4878  02EB  319D  2585         	fcall	_setRF_Learn
  4879                           
  4880                           ;Switch_B1.c: 184: }
  4881                           ;Switch_B1.c: 185: }
  4882                           ;Switch_B1.c: 186: }
  4883                           ;Switch_B1.c: 187: }
  4884                           ;Switch_B1.c: 188: }
  4885                           ;Switch_B1.c: 189: } else {
  4886  02ED  0008               	return
  4887  02EE                     l6838:	
  4888                           
  4889                           ;Switch_B1.c: 190: if (Sw->Debounce == 1) {
  4890  02EE  087B               	movf	_Sw,w
  4891  02EF  0086               	movwf	6
  4892  02F0  3001               	movlw	1	; select bank2/3
  4893  02F1  0087               	movwf	7
  4894  02F2  1D01               	btfss	1,2
  4895  02F3  0008               	return
  4896                           
  4897                           ;Switch_B1.c: 191: Sw->DebounceTime++;
  4898  02F4  3001               	movlw	1
  4899  02F5  0020               	movlb	0	; select bank0
  4900  02F6  00E5               	movwf	??_setSw_Main
  4901  02F7  087B               	movf	_Sw,w
  4902  02F8  3E02               	addlw	2
  4903  02F9  0086               	movwf	6
  4904  02FA  3001               	movlw	1	; select bank2/3
  4905  02FB  0087               	movwf	7
  4906  02FC  0865               	movf	??_setSw_Main,w
  4907  02FD  0781               	addwf	1,f
  4908                           
  4909                           ;Switch_B1.c: 192: if (Sw->DebounceTime >= 5) {
  4910  02FE  087B               	movf	_Sw,w
  4911  02FF  3E02               	addlw	2
  4912  0300  0086               	movwf	6
  4913  0301  3001               	movlw	1	; select bank2/3
  4914  0302  0087               	movwf	7
  4915  0303  3005               	movlw	5
  4916  0304  0201               	subwf	1,w
  4917  0305  1C03               	skipc
  4918  0306  0008               	return
  4919                           
  4920                           ;Switch_B1.c: 193: Sw->DebounceTime = 0;
  4921  0307  087B               	movf	_Sw,w
  4922  0308  3E02               	addlw	2
  4923  0309  0086               	movwf	6
  4924  030A  3001               	movlw	1	; select bank2/3
  4925  030B  0087               	movwf	7
  4926  030C  0181               	clrf	1
  4927                           
  4928                           ;Switch_B1.c: 194: Sw->Debounce = 0;
  4929  030D  087B               	movf	_Sw,w
  4930  030E  0086               	movwf	6
  4931  030F  3001               	movlw	1	; select bank2/3
  4932  0310  0087               	movwf	7
  4933  0311  1101               	bcf	1,2
  4934                           
  4935                           ;Switch_B1.c: 195: Sw->Hold1Time = 0;
  4936  0312  087B               	movf	_Sw,w
  4937  0313  3E03               	addlw	3
  4938  0314  0086               	movwf	6
  4939  0315  3001               	movlw	1	; select bank2/3
  4940  0316  0087               	movwf	7
  4941  0317  3000               	movlw	0
  4942  0318  3FC0               	movwi [0]fsr1
  4943  0319  3FC1               	movwi [1]fsr1
  4944                           
  4945                           ;Switch_B1.c: 196: Sw->Hold1 = 0;
  4946  031A  087B               	movf	_Sw,w
  4947  031B  0086               	movwf	6
  4948  031C  3001               	movlw	1	; select bank2/3
  4949  031D  0087               	movwf	7
  4950  031E  1181               	bcf	1,3
  4951                           
  4952                           ;Switch_B1.c: 197: Sw->Hold2Time = 0;
  4953  031F  087B               	movf	_Sw,w
  4954  0320  3E05               	addlw	5
  4955  0321  0086               	movwf	6
  4956  0322  3001               	movlw	1	; select bank2/3
  4957  0323  0087               	movwf	7
  4958  0324  3000               	movlw	0
  4959  0325  3FC0               	movwi [0]fsr1
  4960  0326  3FC1               	movwi [1]fsr1
  4961                           
  4962                           ;Switch_B1.c: 198: Sw->Hold2 = 0;
  4963  0327  087B               	movf	_Sw,w
  4964  0328  0086               	movwf	6
  4965  0329  3001               	movlw	1	; select bank2/3
  4966  032A  0087               	movwf	7
  4967  032B  1201               	bcf	1,4
  4968                           
  4969                           ;Switch_B1.c: 199: Sw->Hold3Time = 0;
  4970  032C  087B               	movf	_Sw,w
  4971  032D  3E07               	addlw	7
  4972  032E  0086               	movwf	6
  4973  032F  3001               	movlw	1	; select bank2/3
  4974  0330  0087               	movwf	7
  4975  0331  3000               	movlw	0
  4976  0332  3FC0               	movwi [0]fsr1
  4977  0333  3FC1               	movwi [1]fsr1
  4978                           
  4979                           ;Switch_B1.c: 200: Sw->Hold3 = 0;
  4980  0334  087B               	movf	_Sw,w
  4981  0335  0086               	movwf	6
  4982  0336  3001               	movlw	1	; select bank2/3
  4983  0337  0087               	movwf	7
  4984  0338  1281               	bcf	1,5
  4985                           
  4986                           ;Switch_B1.c: 202: Sw_DimmerOffFunc(sw);
  4987  0339  0868               	movf	setSw_Main@sw,w
  4988  033A  318A  2286  3181   	fcall	_Sw_DimmerOffFunc
  4989                           
  4990                           ;Switch_B1.c: 205: setRF_Learn(1, 0);
  4991  033D  0020               	movlb	0	; select bank0
  4992  033E  01A2               	clrf	setRF_Learn@command
  4993  033F  3001               	movlw	1
  4994  0340  319D  2585         	fcall	_setRF_Learn
  4995  0342  0008               	return
  4996  0343                     __end_of_setSw_Main:	
  4997                           
  4998                           	psect	text9
  4999  1D85                     __ptext9:	
  5000 ;; *************** function _setRF_Learn *****************
  5001 ;; Defined at:
  5002 ;;		line 33 in file "../src/RF_Control_B1.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  rf              1    wreg     unsigned char 
  5005 ;;  command         1    2[BANK0 ] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  rf              1    3[BANK0 ] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;		None               void
  5010 ;; Registers used:
  5011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5017 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;Total ram usage:        2 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    6
  5024 ;; This function calls:
  5025 ;;		_RfPointSelect
  5026 ;; This function is called by:
  5027 ;;		_setSw_Main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           
  5032                           ;psect for function _setRF_Learn
  5033  1D85                     _setRF_Learn:	
  5034                           
  5035                           ;incstack = 0
  5036                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5037                           ;setRF_Learn@rf stored from wreg
  5038  1D85  0020               	movlb	0	; select bank0
  5039  1D86  00A3               	movwf	setRF_Learn@rf
  5040                           
  5041                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  5042  1D87  0823               	movf	setRF_Learn@rf,w
  5043  1D88  319D  2577         	fcall	_RfPointSelect
  5044                           
  5045                           ;RF_Control_B1.c: 35: RF->Learn = command;
  5046  1D8A  087A               	movf	_RF,w
  5047  1D8B  0086               	movwf	6
  5048  1D8C  0187               	clrf	7
  5049  1D8D  0020               	movlb	0	; select bank0
  5050  1D8E  0822               	movf	setRF_Learn@command,w
  5051  1D8F  1301               	bcf	1,6
  5052  1D90  1D03               	skipz
  5053  1D91  1701               	bsf	1,6
  5054  1D92  0008               	return
  5055  1D93                     __end_of_setRF_Learn:	
  5056                           
  5057                           	psect	text10
  5058  1638                     __ptext10:	
  5059 ;; *************** function _Sw_DimmerOnFunc *****************
  5060 ;; Defined at:
  5061 ;;		line 214 in file "../src/Switch_B1.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  sw              1    wreg     unsigned char 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  sw              1   67[BANK0 ] unsigned char 
  5066 ;;  Idle            1   66[BANK0 ] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;Total ram usage:        2 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    9
  5083 ;; This function calls:
  5084 ;;		_setBuz
  5085 ;;		_setDimmerLights_Switch
  5086 ;;		_setDimmerLights_Trigger
  5087 ;;		_setRFSW_Status
  5088 ;;		_setRF_DimmerLights
  5089 ;;		_setTxData
  5090 ;; This function is called by:
  5091 ;;		_setSw_Main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _Sw_DimmerOnFunc
  5097  1638                     _Sw_DimmerOnFunc:	
  5098                           
  5099                           ;incstack = 0
  5100                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5101                           ;Sw_DimmerOnFunc@sw stored from wreg
  5102  1638  0020               	movlb	0	; select bank0
  5103  1639  00E3               	movwf	Sw_DimmerOnFunc@sw
  5104                           
  5105                           ;Switch_B1.c: 215: char Idle = 1;
  5106  163A  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5107  163B  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5108                           
  5109                           ;Switch_B1.c: 236: if (Idle == 1) {
  5110  163C  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5111  163D  3A01               	xorlw	1
  5112  163E  1D03               	skipz
  5113  163F  0008               	return
  5114                           
  5115                           ;Switch_B1.c: 237: Sw->Flag = 1;
  5116  1640  087B               	movf	_Sw,w
  5117  1641  0086               	movwf	6
  5118  1642  3001               	movlw	1	; select bank2/3
  5119  1643  0087               	movwf	7
  5120  1644  1781               	bsf	1,7
  5121                           
  5122                           ;Switch_B1.c: 238: setBuz(1, 100);
  5123  1645  3064               	movlw	100
  5124  1646  00A9               	movwf	setBuz@time
  5125  1647  3000               	movlw	0
  5126  1648  00AA               	movwf	setBuz@time+1
  5127  1649  3001               	movlw	1
  5128  164A  318C  24EB  3196   	fcall	_setBuz
  5129                           
  5130                           ;Switch_B1.c: 239: if (Sw->Status == 0) {
  5131  164D  087B               	movf	_Sw,w
  5132  164E  0086               	movwf	6
  5133  164F  3001               	movlw	1	; select bank2/3
  5134  1650  0087               	movwf	7
  5135  1651  1B01               	btfsc	1,6
  5136  1652  2E7E               	goto	l6204
  5137                           
  5138                           ;Switch_B1.c: 240: Sw->Status = 1;
  5139  1653  087B               	movf	_Sw,w
  5140  1654  0086               	movwf	6
  5141  1655  3001               	movlw	1	; select bank2/3
  5142  1656  0087               	movwf	7
  5143  1657  1701               	bsf	1,6
  5144                           
  5145                           ;Switch_B1.c: 241: setRFSW_Status(sw, 1);
  5146  1658  0020               	movlb	0	; select bank0
  5147  1659  01A2               	clrf	setRFSW_Status@command
  5148  165A  0AA2               	incf	setRFSW_Status@command,f
  5149  165B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5150  165C  319D  2593  3196   	fcall	_setRFSW_Status
  5151                           
  5152                           ;Switch_B1.c: 243: setDimmerLights_Trigger(sw, 1);
  5153  165F  0020               	movlb	0	; select bank0
  5154  1660  01A2               	clrf	setDimmerLights_Trigger@command
  5155  1661  0AA2               	incf	setDimmerLights_Trigger@command,f
  5156  1662  0863               	movf	Sw_DimmerOnFunc@sw,w
  5157  1663  319D  25E0  3196   	fcall	_setDimmerLights_Trigger
  5158                           
  5159                           ;Switch_B1.c: 244: setDimmerLights_Switch(sw, 1);
  5160  1666  0020               	movlb	0	; select bank0
  5161  1667  01A2               	clrf	setDimmerLights_Switch@command
  5162  1668  0AA2               	incf	setDimmerLights_Switch@command,f
  5163  1669  0863               	movf	Sw_DimmerOnFunc@sw,w
  5164  166A  319D  25D0  3196   	fcall	_setDimmerLights_Switch
  5165                           
  5166                           ;Switch_B1.c: 246: setRF_DimmerLights(sw, Sw->Status);
  5167  166D  087B               	movf	_Sw,w
  5168  166E  0086               	movwf	6
  5169  166F  3001               	movlw	1	; select bank2/3
  5170  1670  0087               	movwf	7
  5171  1671  3000               	movlw	0
  5172  1672  1B01               	btfsc	1,6
  5173  1673  3001               	movlw	1
  5174  1674  0020               	movlb	0	; select bank0
  5175  1675  00DD               	movwf	setRF_DimmerLights@on
  5176  1676  0863               	movf	Sw_DimmerOnFunc@sw,w
  5177  1677  3189  213E  3196   	fcall	_setRF_DimmerLights
  5178                           
  5179                           ;Switch_B1.c: 247: setTxData(1);
  5180  167A  3001               	movlw	1
  5181  167B  318E  2604         	fcall	_setTxData
  5182                           
  5183                           ;Switch_B1.c: 249: } else {
  5184  167D  0008               	return
  5185  167E                     l6204:	
  5186                           
  5187                           ;Switch_B1.c: 250: Sw->Status = 0;
  5188  167E  087B               	movf	_Sw,w
  5189  167F  0086               	movwf	6
  5190  1680  3001               	movlw	1	; select bank2/3
  5191  1681  0087               	movwf	7
  5192  1682  1301               	bcf	1,6
  5193                           
  5194                           ;Switch_B1.c: 251: setRFSW_Status(sw, Sw->Status);
  5195  1683  087B               	movf	_Sw,w
  5196  1684  0086               	movwf	6
  5197  1685  3001               	movlw	1	; select bank2/3
  5198  1686  0087               	movwf	7
  5199  1687  3000               	movlw	0
  5200  1688  1B01               	btfsc	1,6
  5201  1689  3001               	movlw	1
  5202  168A  0020               	movlb	0	; select bank0
  5203  168B  00A2               	movwf	setRFSW_Status@command
  5204  168C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5205  168D  319D  2593         	fcall	_setRFSW_Status
  5206  168F  0008               	return
  5207  1690                     __end_of_Sw_DimmerOnFunc:	
  5208                           
  5209                           	psect	text11
  5210  0A86                     __ptext11:	
  5211 ;; *************** function _Sw_DimmerOffFunc *****************
  5212 ;; Defined at:
  5213 ;;		line 257 in file "../src/Switch_B1.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  sw              1    wreg     unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  sw              1   68[BANK0 ] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;		None               void
  5220 ;; Registers used:
  5221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;Total ram usage:        3 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    9
  5234 ;; This function calls:
  5235 ;;		_setDelayOff_GO
  5236 ;;		_setDimmerLights_AdjGo
  5237 ;;		_setDimmerLights_Switch
  5238 ;;		_setDimmerLights_Trigger
  5239 ;;		_setDimmerLights_TriggerAdj
  5240 ;;		_setRF_DimmerLights
  5241 ;;		_setTxData
  5242 ;; This function is called by:
  5243 ;;		_setSw_Main
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _Sw_DimmerOffFunc
  5249  0A86                     _Sw_DimmerOffFunc:	
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5253                           ;Sw_DimmerOffFunc@sw stored from wreg
  5254  0A86  0020               	movlb	0	; select bank0
  5255  0A87  00E4               	movwf	Sw_DimmerOffFunc@sw
  5256                           
  5257                           ;Switch_B1.c: 258: if (Sw->Flag == 1) {
  5258  0A88  087B               	movf	_Sw,w
  5259  0A89  0086               	movwf	6
  5260  0A8A  3001               	movlw	1	; select bank2/3
  5261  0A8B  0087               	movwf	7
  5262  0A8C  1F81               	btfss	1,7
  5263  0A8D  0008               	return
  5264                           
  5265                           ;Switch_B1.c: 259: Sw->Flag = 0;
  5266  0A8E  087B               	movf	_Sw,w
  5267  0A8F  0086               	movwf	6
  5268  0A90  3001               	movlw	1	; select bank2/3
  5269  0A91  0087               	movwf	7
  5270  0A92  1381               	bcf	1,7
  5271                           
  5272                           ;Switch_B1.c: 260: if (Sw->Status == 1) {
  5273  0A93  087B               	movf	_Sw,w
  5274  0A94  0086               	movwf	6
  5275  0A95  3001               	movlw	1	; select bank2/3
  5276  0A96  0087               	movwf	7
  5277  0A97  1F01               	btfss	1,6
  5278  0A98  2AD2               	goto	l6240
  5279                           
  5280                           ;Switch_B1.c: 261: if (Sw->Adj == 1) {
  5281  0A99  0A7B               	incf	_Sw,w
  5282  0A9A  0086               	movwf	6
  5283  0A9B  3001               	movlw	1	; select bank2/3
  5284  0A9C  0087               	movwf	7
  5285  0A9D  1C01               	btfss	1,0
  5286  0A9E  0008               	return
  5287                           
  5288                           ;Switch_B1.c: 262: Sw->Adj = 0;
  5289  0A9F  0A7B               	incf	_Sw,w
  5290  0AA0  0086               	movwf	6
  5291  0AA1  3001               	movlw	1	; select bank2/3
  5292  0AA2  0087               	movwf	7
  5293  0AA3  1001               	bcf	1,0
  5294                           
  5295                           ;Switch_B1.c: 263: setDimmerLights_TriggerAdj(sw, 1);
  5296  0AA4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5297  0AA5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5298  0AA6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5299  0AA7  319E  2610  318A   	fcall	_setDimmerLights_TriggerAdj
  5300                           
  5301                           ;Switch_B1.c: 264: setDimmerLights_AdjGo(sw, 0);
  5302  0AAA  0020               	movlb	0	; select bank0
  5303  0AAB  01A2               	clrf	setDimmerLights_AdjGo@command
  5304  0AAC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5305  0AAD  319E  2600  318A   	fcall	_setDimmerLights_AdjGo
  5306                           
  5307                           ;Switch_B1.c: 266: product->Data[17]=product->Data[26 + sw];
  5308  0AB0  0020               	movlb	0	; select bank0
  5309  0AB1  0864               	movf	Sw_DimmerOffFunc@sw,w
  5310  0AB2  3E1A               	addlw	26
  5311  0AB3  077D               	addwf	_product,w
  5312  0AB4  00E2               	movwf	??_Sw_DimmerOffFunc
  5313  0AB5  0862               	movf	??_Sw_DimmerOffFunc,w
  5314  0AB6  0086               	movwf	6
  5315  0AB7  3001               	movlw	1	; select bank2/3
  5316  0AB8  0087               	movwf	7
  5317  0AB9  0801               	movf	1,w
  5318  0ABA  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5319  0ABB  087D               	movf	_product,w
  5320  0ABC  3E11               	addlw	17
  5321  0ABD  0086               	movwf	6
  5322  0ABE  3001               	movlw	1	; select bank2/3
  5323  0ABF  0087               	movwf	7
  5324  0AC0  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5325  0AC1  0081               	movwf	1
  5326                           
  5327                           ;Switch_B1.c: 267: setRF_DimmerLights(sw, Sw->Status);
  5328  0AC2  087B               	movf	_Sw,w
  5329  0AC3  0086               	movwf	6
  5330  0AC4  3001               	movlw	1	; select bank2/3
  5331  0AC5  0087               	movwf	7
  5332  0AC6  3000               	movlw	0
  5333  0AC7  1B01               	btfsc	1,6
  5334  0AC8  3001               	movlw	1
  5335  0AC9  00DD               	movwf	setRF_DimmerLights@on
  5336  0ACA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5337  0ACB  3189  213E  318A   	fcall	_setRF_DimmerLights
  5338                           
  5339                           ;Switch_B1.c: 268: setTxData(1);
  5340  0ACE  3001               	movlw	1
  5341  0ACF  318E  2604         	fcall	_setTxData
  5342                           
  5343                           ;Switch_B1.c: 270: }
  5344                           ;Switch_B1.c: 271: } else {
  5345  0AD1  0008               	return
  5346  0AD2                     l6240:	
  5347                           
  5348                           ;Switch_B1.c: 272: setDimmerLights_Trigger(sw, 1);
  5349  0AD2  0020               	movlb	0	; select bank0
  5350  0AD3  01A2               	clrf	setDimmerLights_Trigger@command
  5351  0AD4  0AA2               	incf	setDimmerLights_Trigger@command,f
  5352  0AD5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5353  0AD6  319D  25E0  318A   	fcall	_setDimmerLights_Trigger
  5354                           
  5355                           ;Switch_B1.c: 273: setDimmerLights_Switch(sw, 0);
  5356  0AD9  0020               	movlb	0	; select bank0
  5357  0ADA  01A2               	clrf	setDimmerLights_Switch@command
  5358  0ADB  0864               	movf	Sw_DimmerOffFunc@sw,w
  5359  0ADC  319D  25D0  318A   	fcall	_setDimmerLights_Switch
  5360                           
  5361                           ;Switch_B1.c: 275: setDelayOff_GO(sw, 0, 0);
  5362  0ADF  0020               	movlb	0	; select bank0
  5363  0AE0  01A3               	clrf	setDelayOff_GO@command
  5364  0AE1  01A4               	clrf	setDelayOff_GO@value
  5365  0AE2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5366  0AE3  3197  2745  318A   	fcall	_setDelayOff_GO
  5367                           
  5368                           ;Switch_B1.c: 276: setRF_DimmerLights(sw, Sw->Status);
  5369  0AE6  087B               	movf	_Sw,w
  5370  0AE7  0086               	movwf	6
  5371  0AE8  3001               	movlw	1	; select bank2/3
  5372  0AE9  0087               	movwf	7
  5373  0AEA  3000               	movlw	0
  5374  0AEB  1B01               	btfsc	1,6
  5375  0AEC  3001               	movlw	1
  5376  0AED  0020               	movlb	0	; select bank0
  5377  0AEE  00DD               	movwf	setRF_DimmerLights@on
  5378  0AEF  0864               	movf	Sw_DimmerOffFunc@sw,w
  5379  0AF0  3189  213E  318A   	fcall	_setRF_DimmerLights
  5380                           
  5381                           ;Switch_B1.c: 277: setTxData(1);
  5382  0AF3  3001               	movlw	1
  5383  0AF4  318E  2604         	fcall	_setTxData
  5384  0AF6  0008               	return
  5385  0AF7                     __end_of_Sw_DimmerOffFunc:	
  5386                           
  5387                           	psect	text12
  5388  11C9                     __ptext12:	
  5389 ;; *************** function _Sw_DimmerAdjFunc *****************
  5390 ;; Defined at:
  5391 ;;		line 284 in file "../src/Switch_B1.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  sw              1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  sw              1    5[BANK0 ] unsigned char 
  5396 ;;  Idle            1    4[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;Total ram usage:        2 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    7
  5413 ;; This function calls:
  5414 ;;		_setDimmerLights_AdjGo
  5415 ;;		_setDimmerLights_TriggerAdj
  5416 ;;		_setRFSW_Status
  5417 ;; This function is called by:
  5418 ;;		_setSw_Main
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function _Sw_DimmerAdjFunc
  5424  11C9                     _Sw_DimmerAdjFunc:	
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5428                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5429  11C9  0020               	movlb	0	; select bank0
  5430  11CA  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5431                           
  5432                           ;Switch_B1.c: 285: char Idle = 1;
  5433  11CB  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5434  11CC  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5435                           
  5436                           ;Switch_B1.c: 305: if (Idle == 1) {
  5437  11CD  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5438  11CE  3A01               	xorlw	1
  5439  11CF  1D03               	skipz
  5440  11D0  0008               	return
  5441                           
  5442                           ;Switch_B1.c: 306: if (Sw->Flag == 1) {
  5443  11D1  087B               	movf	_Sw,w
  5444  11D2  0086               	movwf	6
  5445  11D3  3001               	movlw	1	; select bank2/3
  5446  11D4  0087               	movwf	7
  5447  11D5  1F81               	btfss	1,7
  5448  11D6  0008               	return
  5449                           
  5450                           ;Switch_B1.c: 307: Sw->Adj = 1;
  5451  11D7  0A7B               	incf	_Sw,w
  5452  11D8  0086               	movwf	6
  5453  11D9  3001               	movlw	1	; select bank2/3
  5454  11DA  0087               	movwf	7
  5455  11DB  1401               	bsf	1,0
  5456                           
  5457                           ;Switch_B1.c: 308: Sw->Status = 1;
  5458  11DC  087B               	movf	_Sw,w
  5459  11DD  0086               	movwf	6
  5460  11DE  3001               	movlw	1	; select bank2/3
  5461  11DF  0087               	movwf	7
  5462  11E0  1701               	bsf	1,6
  5463                           
  5464                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  5465  11E1  01A2               	clrf	setRFSW_Status@command
  5466  11E2  0AA2               	incf	setRFSW_Status@command,f
  5467  11E3  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5468  11E4  319D  2593  3191   	fcall	_setRFSW_Status
  5469                           
  5470                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  5471  11E7  0020               	movlb	0	; select bank0
  5472  11E8  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5473  11E9  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5474  11EA  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5475  11EB  319E  2610  3191   	fcall	_setDimmerLights_TriggerAdj
  5476                           
  5477                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  5478  11EE  0020               	movlb	0	; select bank0
  5479  11EF  01A2               	clrf	setDimmerLights_AdjGo@command
  5480  11F0  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5481  11F1  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5482  11F2  319E  2600         	fcall	_setDimmerLights_AdjGo
  5483  11F4  0008               	return
  5484  11F5                     __end_of_Sw_DimmerAdjFunc:	
  5485                           
  5486                           	psect	text13
  5487  1E10                     __ptext13:	
  5488 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5489 ;; Defined at:
  5490 ;;		line 729 in file "../src/Dimmer_B1.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  lights          1    wreg     unsigned char 
  5493 ;;  command         1    2[BANK0 ] unsigned char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  lights          1    3[BANK0 ] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;Total ram usage:        2 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    6
  5512 ;; This function calls:
  5513 ;;		_DimmerLightsPointSelect
  5514 ;; This function is called by:
  5515 ;;		_Sw_DimmerOffFunc
  5516 ;;		_Sw_DimmerAdjFunc
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _setDimmerLights_TriggerAdj
  5522  1E10                     _setDimmerLights_TriggerAdj:	
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5526                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5527  1E10  0020               	movlb	0	; select bank0
  5528  1E11  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5529                           
  5530                           ;Dimmer_B1.c: 731: DimmerLightsPointSelect(lights);
  5531  1E12  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5532  1E13  319C  24C1         	fcall	_DimmerLightsPointSelect
  5533                           
  5534                           ;Dimmer_B1.c: 732: DimmerLights->TriggerAdj = command;
  5535  1E15  0878               	movf	_DimmerLights,w
  5536  1E16  3E08               	addlw	8
  5537  1E17  0086               	movwf	6
  5538  1E18  3001               	movlw	1	; select bank2/3
  5539  1E19  0087               	movwf	7
  5540  1E1A  0020               	movlb	0	; select bank0
  5541  1E1B  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5542  1E1C  1201               	bcf	1,4
  5543  1E1D  1D03               	skipz
  5544  1E1E  1601               	bsf	1,4
  5545  1E1F  0008               	return
  5546  1E20                     __end_of_setDimmerLights_TriggerAdj:	
  5547                           
  5548                           	psect	text14
  5549  1E00                     __ptext14:	
  5550 ;; *************** function _setDimmerLights_AdjGo *****************
  5551 ;; Defined at:
  5552 ;;		line 717 in file "../src/Dimmer_B1.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  lights          1    wreg     unsigned char 
  5555 ;;  command         1    2[BANK0 ] unsigned char 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  lights          1    3[BANK0 ] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;		None               void
  5560 ;; Registers used:
  5561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5567 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;Total ram usage:        2 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    6
  5574 ;; This function calls:
  5575 ;;		_DimmerLightsPointSelect
  5576 ;; This function is called by:
  5577 ;;		_Sw_DimmerOffFunc
  5578 ;;		_Sw_DimmerAdjFunc
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           
  5583                           ;psect for function _setDimmerLights_AdjGo
  5584  1E00                     _setDimmerLights_AdjGo:	
  5585                           
  5586                           ;incstack = 0
  5587                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5588                           ;setDimmerLights_AdjGo@lights stored from wreg
  5589  1E00  0020               	movlb	0	; select bank0
  5590  1E01  00A3               	movwf	setDimmerLights_AdjGo@lights
  5591                           
  5592                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
  5593  1E02  0823               	movf	setDimmerLights_AdjGo@lights,w
  5594  1E03  319C  24C1         	fcall	_DimmerLightsPointSelect
  5595                           
  5596                           ;Dimmer_B1.c: 720: DimmerLights->AdjGo = command;
  5597  1E05  0878               	movf	_DimmerLights,w
  5598  1E06  3E08               	addlw	8
  5599  1E07  0086               	movwf	6
  5600  1E08  3001               	movlw	1	; select bank2/3
  5601  1E09  0087               	movwf	7
  5602  1E0A  0020               	movlb	0	; select bank0
  5603  1E0B  0822               	movf	setDimmerLights_AdjGo@command,w
  5604  1E0C  1181               	bcf	1,3
  5605  1E0D  1D03               	skipz
  5606  1E0E  1581               	bsf	1,3
  5607  1E0F  0008               	return
  5608  1E10                     __end_of_setDimmerLights_AdjGo:	
  5609                           
  5610                           	psect	text15
  5611  1C8E                     __ptext15:	
  5612 ;; *************** function _Switch_Initialization *****************
  5613 ;; Defined at:
  5614 ;;		line 37 in file "../src/Switch_B1.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;		None               void
  5621 ;; Registers used:
  5622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;Total ram usage:        0 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    8
  5635 ;; This function calls:
  5636 ;;		_TouchPower
  5637 ;;		_setSw_Initialization
  5638 ;; This function is called by:
  5639 ;;		_main
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _Switch_Initialization
  5645  1C8E                     _Switch_Initialization:	
  5646                           
  5647                           ;Switch_B1.c: 38: TouchPower();
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5651  1C8E  319C  244B  319C   	fcall	_TouchPower
  5652                           
  5653                           ;Switch_B1.c: 40: WPUB1 = 0;
  5654  1C91  0024               	movlb	4	; select bank4
  5655  1C92  108D               	bcf	13,1	;volatile
  5656                           
  5657                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5658  1C93  3001               	movlw	1
  5659  1C94  319D  25F0         	fcall	_setSw_Initialization
  5660  1C96  0008               	return
  5661  1C97                     __end_of_Switch_Initialization:	
  5662                           
  5663                           	psect	text16
  5664  1DF0                     __ptext16:	
  5665 ;; *************** function _setSw_Initialization *****************
  5666 ;; Defined at:
  5667 ;;		line 77 in file "../src/Switch_B1.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  sw              1    wreg     unsigned char 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  sw              1    4[BANK0 ] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;		None               void
  5674 ;; Registers used:
  5675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5685 ;;Total ram usage:        1 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    7
  5688 ;; This function calls:
  5689 ;;		_setLED
  5690 ;; This function is called by:
  5691 ;;		_Switch_Initialization
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function _setSw_Initialization
  5697  1DF0                     _setSw_Initialization:	
  5698                           
  5699                           ;incstack = 0
  5700                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5701                           ;setSw_Initialization@sw stored from wreg
  5702  1DF0  0020               	movlb	0	; select bank0
  5703  1DF1  00A4               	movwf	setSw_Initialization@sw
  5704                           
  5705                           ;Switch_B1.c: 78: setLED(sw, 1);
  5706  1DF2  01A2               	clrf	setLED@command
  5707  1DF3  0AA2               	incf	setLED@command,f
  5708  1DF4  0824               	movf	setSw_Initialization@sw,w
  5709  1DF5  3197  27A2  319D   	fcall	_setLED
  5710                           
  5711                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  5712  1DF8  0020               	movlb	0	; select bank0
  5713  1DF9  01A2               	clrf	setLED@command
  5714  1DFA  0AA2               	incf	setLED@command,f
  5715  1DFB  0824               	movf	setSw_Initialization@sw,w
  5716  1DFC  3E01               	addlw	1
  5717  1DFD  3197  27A2         	fcall	_setLED
  5718  1DFF  0008               	return
  5719  1E00                     __end_of_setSw_Initialization:	
  5720                           
  5721                           	psect	text17
  5722  1C4B                     __ptext17:	
  5723 ;; *************** function _TouchPower *****************
  5724 ;; Defined at:
  5725 ;;		line 10 in file "../src/Switch_B1.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;		None               void
  5732 ;; Registers used:
  5733 ;;		None
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;Total ram usage:        0 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    5
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_Switch_Initialization
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _TouchPower
  5755  1C4B                     _TouchPower:	
  5756  1C4B                     l2389:	
  5757                           ;Switch_B1.c: 11: while (RC5 == 0)
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in _TouchPower: []
  5761                           
  5762  1C4B  0020               	movlb	0	; select bank0
  5763  1C4C  1A8E               	btfsc	14,5	;volatile
  5764  1C4D  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 12: RC5 = 1;
  5767  1C4E  168E               	bsf	14,5	;volatile
  5768  1C4F  2C4B               	goto	l2389
  5769  1C50                     __end_of_TouchPower:	
  5770                           
  5771                           	psect	text18
  5772  1C43                     __ptext18:	
  5773 ;; *************** function _RF_Main *****************
  5774 ;; Defined at:
  5775 ;;		line 26 in file "../src/RF_Control_B1.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;		None               void
  5782 ;; Registers used:
  5783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:   14
  5796 ;; This function calls:
  5797 ;;		_setRF_Main
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _RF_Main
  5805  1C43                     _RF_Main:	
  5806                           
  5807                           ;RF_Control_B1.c: 28: setRF_Main(1);
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5811  1C43  3001               	movlw	1
  5812  1C44  3186  261D         	fcall	_setRF_Main
  5813  1C46  0008               	return
  5814  1C47                     __end_of_RF_Main:	
  5815                           
  5816                           	psect	text19
  5817  061D                     __ptext19:	
  5818 ;; *************** function _setRF_Main *****************
  5819 ;; Defined at:
  5820 ;;		line 60 in file "../src/RF_Control_B1.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  rf              1    wreg     unsigned char 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  rf              1   74[BANK0 ] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;		None               void
  5827 ;; Registers used:
  5828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;Total ram usage:        3 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:   13
  5841 ;; This function calls:
  5842 ;;		_CC2500_RxData
  5843 ;;		_CC2500_TxData
  5844 ;;		_CC2500_WriteCommand
  5845 ;;		_RF_RxDisable
  5846 ;;		_RfPointSelect
  5847 ;;		_getRxData
  5848 ;; This function is called by:
  5849 ;;		_RF_Main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function _setRF_Main
  5855  061D                     _setRF_Main:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5859                           ;setRF_Main@rf stored from wreg
  5860  061D  0020               	movlb	0	; select bank0
  5861  061E  00EA               	movwf	setRF_Main@rf
  5862                           
  5863                           ;RF_Control_B1.c: 61: RfPointSelect(rf);
  5864  061F  086A               	movf	setRF_Main@rf,w
  5865  0620  319D  2577  3186   	fcall	_RfPointSelect
  5866                           
  5867                           ;RF_Control_B1.c: 62: if (RF->Enable == 1) {
  5868  0623  087A               	movf	_RF,w
  5869  0624  0086               	movwf	6
  5870  0625  0187               	clrf	7
  5871  0626  1C01               	btfss	1,0
  5872  0627  0008               	return
  5873                           
  5874                           ;RF_Control_B1.c: 65: if (Buz->GO == 0) {
  5875  0628  0021               	movlb	1	; select bank1
  5876  0629  0837               	movf	_Buz^(0+128),w
  5877  062A  0086               	movwf	6
  5878  062B  3001               	movlw	1	; select bank2/3
  5879  062C  0087               	movwf	7
  5880  062D  1881               	btfsc	1,1
  5881  062E  0008               	return
  5882                           
  5883                           ;RF_Control_B1.c: 75: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5884  062F  0020               	movlb	0	; select bank0
  5885  0630  01EB               	clrf	_setRF_Main$4022
  5886  0631  0AEB               	incf	_setRF_Main$4022,f
  5887  0632  1F0C               	btfss	12,6	;volatile
  5888  0633  1A0C               	btfsc	12,4	;volatile
  5889  0634  2E39               	goto	l6700
  5890  0635  1C0C               	btfss	12,0	;volatile
  5891  0636  188D               	btfsc	13,1	;volatile
  5892  0637  2E39               	goto	l6700
  5893  0638  01EB               	clrf	_setRF_Main$4022
  5894  0639                     l6700:	
  5895  0639  087A               	movf	_RF,w
  5896  063A  0086               	movwf	6
  5897  063B  0187               	clrf	7
  5898  063C  086B               	movf	_setRF_Main$4022,w
  5899  063D  1381               	bcf	1,7
  5900  063E  1D03               	skipz
  5901  063F  1781               	bsf	1,7
  5902                           
  5903                           ;RF_Control_B1.c: 77: if (RF->Key == 1 && RF->Learn == 0) {
  5904  0640  087A               	movf	_RF,w
  5905  0641  0086               	movwf	6
  5906  0642  0187               	clrf	7
  5907  0643  1F81               	btfss	1,7
  5908  0644  2E52               	goto	l6710
  5909  0645  087A               	movf	_RF,w
  5910  0646  0086               	movwf	6
  5911  0647  0187               	clrf	7
  5912  0648  1B01               	btfsc	1,6
  5913  0649  2E52               	goto	l6710
  5914                           
  5915                           ;RF_Control_B1.c: 78: RF->Run = 1;
  5916  064A  0A7A               	incf	_RF,w
  5917  064B  0086               	movwf	6
  5918  064C  0187               	clrf	7
  5919  064D  1481               	bsf	1,1
  5920                           
  5921                           ;RF_Control_B1.c: 79: RF_RxDisable(1);
  5922  064E  3001               	movlw	1
  5923  064F  3190  2075         	fcall	_RF_RxDisable
  5924                           
  5925                           ;RF_Control_B1.c: 80: } else {
  5926  0651  0008               	return
  5927  0652                     l6710:	
  5928                           
  5929                           ;RF_Control_B1.c: 81: if (RF->Run == 1 && RF->Learn == 0) {
  5930  0652  0A7A               	incf	_RF,w
  5931  0653  0086               	movwf	6
  5932  0654  0187               	clrf	7
  5933  0655  1C81               	btfss	1,1
  5934  0656  2E77               	goto	l6722
  5935  0657  087A               	movf	_RF,w
  5936  0658  0086               	movwf	6
  5937  0659  0187               	clrf	7
  5938  065A  1B01               	btfsc	1,6
  5939  065B  2E77               	goto	l6722
  5940                           
  5941                           ;RF_Control_B1.c: 82: RF->Count++;
  5942  065C  3001               	movlw	1
  5943  065D  0020               	movlb	0	; select bank0
  5944  065E  00E9               	movwf	??_setRF_Main
  5945  065F  087A               	movf	_RF,w
  5946  0660  3E03               	addlw	3
  5947  0661  0086               	movwf	6
  5948  0662  0187               	clrf	7
  5949  0663  0869               	movf	??_setRF_Main,w
  5950  0664  0781               	addwf	1,f
  5951                           
  5952                           ;RF_Control_B1.c: 83: if (RF->Count == 25) {
  5953  0665  087A               	movf	_RF,w
  5954  0666  3E03               	addlw	3
  5955  0667  0086               	movwf	6
  5956  0668  0187               	clrf	7
  5957  0669  0801               	movf	1,w
  5958  066A  3A19               	xorlw	25
  5959  066B  1D03               	skipz
  5960  066C  0008               	return
  5961                           
  5962                           ;RF_Control_B1.c: 84: RF->Count = 0;
  5963  066D  087A               	movf	_RF,w
  5964  066E  3E03               	addlw	3
  5965  066F  0086               	movwf	6
  5966  0670  0187               	clrf	7
  5967  0671  0181               	clrf	1
  5968                           
  5969                           ;RF_Control_B1.c: 85: RF->Run = 0;
  5970  0672  0A7A               	incf	_RF,w
  5971  0673  0086               	movwf	6
  5972  0674  0187               	clrf	7
  5973  0675  1081               	bcf	1,1
  5974                           
  5975                           ;RF_Control_B1.c: 86: }
  5976                           ;RF_Control_B1.c: 87: } else {
  5977  0676  0008               	return
  5978  0677                     l6722:	
  5979                           
  5980                           ;RF_Control_B1.c: 88: RF->Count = 0;
  5981  0677  087A               	movf	_RF,w
  5982  0678  3E03               	addlw	3
  5983  0679  0086               	movwf	6
  5984  067A  0187               	clrf	7
  5985  067B  0181               	clrf	1
  5986                           
  5987                           ;RF_Control_B1.c: 89: RF->Run = 0;
  5988  067C  0A7A               	incf	_RF,w
  5989  067D  0086               	movwf	6
  5990  067E  0187               	clrf	7
  5991  067F  1081               	bcf	1,1
  5992                           
  5993                           ;RF_Control_B1.c: 91: if (RF->ReceiveGO == 1) {
  5994  0680  087A               	movf	_RF,w
  5995  0681  0086               	movwf	6
  5996  0682  0187               	clrf	7
  5997  0683  1C81               	btfss	1,1
  5998  0684  2E90               	goto	l6734
  5999                           
  6000                           ;RF_Control_B1.c: 92: RF->ReceiveGO = 0;
  6001  0685  087A               	movf	_RF,w
  6002  0686  0086               	movwf	6
  6003  0687  0187               	clrf	7
  6004  0688  1081               	bcf	1,1
  6005                           
  6006                           ;RF_Control_B1.c: 93: CC2500_RxData();
  6007  0689  3188  2021  3186   	fcall	_CC2500_RxData
  6008                           
  6009                           ;RF_Control_B1.c: 101: getRxData(1);
  6010  068C  3001               	movlw	1
  6011  068D  3195  2547         	fcall	_getRxData
  6012                           
  6013                           ;RF_Control_B1.c: 105: } else {
  6014  068F  0008               	return
  6015  0690                     l6734:	
  6016                           
  6017                           ;RF_Control_B1.c: 106: if (RF->Learn == 0) {
  6018  0690  087A               	movf	_RF,w
  6019  0691  0086               	movwf	6
  6020  0692  0187               	clrf	7
  6021  0693  1B01               	btfsc	1,6
  6022  0694  2ECB               	goto	l6758
  6023                           
  6024                           ;RF_Control_B1.c: 107: if (RF->TransceiveGO == 1) {
  6025  0695  087A               	movf	_RF,w
  6026  0696  0086               	movwf	6
  6027  0697  0187               	clrf	7
  6028  0698  1D01               	btfss	1,2
  6029  0699  2EB1               	goto	l6746
  6030                           
  6031                           ;RF_Control_B1.c: 108: RF->TransceiveGO = 0;
  6032  069A  087A               	movf	_RF,w
  6033  069B  0086               	movwf	6
  6034  069C  0187               	clrf	7
  6035  069D  1101               	bcf	1,2
  6036                           
  6037                           ;RF_Control_B1.c: 109: RF->RxStatus = 0;
  6038  069E  087A               	movf	_RF,w
  6039  069F  0086               	movwf	6
  6040  06A0  0187               	clrf	7
  6041  06A1  1181               	bcf	1,3
  6042                           
  6043                           ;RF_Control_B1.c: 110: RF->ReceiveGO = 0;
  6044  06A2  087A               	movf	_RF,w
  6045  06A3  0086               	movwf	6
  6046  06A4  0187               	clrf	7
  6047  06A5  1081               	bcf	1,1
  6048                           
  6049                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  6050  06A6  3036               	movlw	54
  6051  06A7  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6052                           
  6053                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3B);
  6054  06AA  303B               	movlw	59
  6055  06AB  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6056                           
  6057                           ;RF_Control_B1.c: 114: CC2500_TxData();
  6058  06AE  3193  23EC         	fcall	_CC2500_TxData
  6059                           
  6060                           ;RF_Control_B1.c: 116: } else {
  6061  06B0  0008               	return
  6062  06B1                     l6746:	
  6063                           
  6064                           ;RF_Control_B1.c: 118: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6065  06B1  087A               	movf	_RF,w
  6066  06B2  0086               	movwf	6
  6067  06B3  0187               	clrf	7
  6068  06B4  1981               	btfsc	1,3
  6069  06B5  0008               	return
  6070  06B6  087A               	movf	_RF,w
  6071  06B7  0086               	movwf	6
  6072  06B8  0187               	clrf	7
  6073  06B9  1881               	btfsc	1,1
  6074  06BA  0008               	return
  6075                           
  6076                           ;RF_Control_B1.c: 119: RF->RxStatus = 1;
  6077  06BB  087A               	movf	_RF,w
  6078  06BC  0086               	movwf	6
  6079  06BD  0187               	clrf	7
  6080  06BE  1581               	bsf	1,3
  6081                           
  6082                           ;RF_Control_B1.c: 120: CC2500_WriteCommand(0x36);
  6083  06BF  3036               	movlw	54
  6084  06C0  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6085                           
  6086                           ;RF_Control_B1.c: 121: CC2500_WriteCommand(0x3A);
  6087  06C3  303A               	movlw	58
  6088  06C4  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6089                           
  6090                           ;RF_Control_B1.c: 122: CC2500_WriteCommand(0x34);
  6091  06C7  3034               	movlw	52
  6092  06C8  319D  25C0         	fcall	_CC2500_WriteCommand
  6093                           
  6094                           ;RF_Control_B1.c: 124: }
  6095                           ;RF_Control_B1.c: 127: }
  6096                           ;RF_Control_B1.c: 128: } else {
  6097  06CA  0008               	return
  6098  06CB                     l6758:	
  6099                           
  6100                           ;RF_Control_B1.c: 130: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6101  06CB  087A               	movf	_RF,w
  6102  06CC  0086               	movwf	6
  6103  06CD  0187               	clrf	7
  6104  06CE  1981               	btfsc	1,3
  6105  06CF  0008               	return
  6106  06D0  087A               	movf	_RF,w
  6107  06D1  0086               	movwf	6
  6108  06D2  0187               	clrf	7
  6109  06D3  1881               	btfsc	1,1
  6110  06D4  0008               	return
  6111                           
  6112                           ;RF_Control_B1.c: 131: RF->RxStatus = 1;
  6113  06D5  087A               	movf	_RF,w
  6114  06D6  0086               	movwf	6
  6115  06D7  0187               	clrf	7
  6116  06D8  1581               	bsf	1,3
  6117                           
  6118                           ;RF_Control_B1.c: 132: CC2500_WriteCommand(0x36);
  6119  06D9  3036               	movlw	54
  6120  06DA  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6121                           
  6122                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x3A);
  6123  06DD  303A               	movlw	58
  6124  06DE  319D  25C0  3186   	fcall	_CC2500_WriteCommand
  6125                           
  6126                           ;RF_Control_B1.c: 134: CC2500_WriteCommand(0x34);
  6127  06E1  3034               	movlw	52
  6128  06E2  319D  25C0         	fcall	_CC2500_WriteCommand
  6129  06E4  0008               	return
  6130  06E5                     __end_of_setRF_Main:	
  6131                           
  6132                           	psect	text20
  6133  1547                     __ptext20:	
  6134 ;; *************** function _getRxData *****************
  6135 ;; Defined at:
  6136 ;;		line 223 in file "../src/RF_Control_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  rf              1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  rf              1   72[BANK0 ] unsigned char 
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;Total ram usage:        1 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:   12
  6157 ;; This function calls:
  6158 ;;		_RfPointSelect
  6159 ;;		_setControl_Lights_Table
  6160 ;;		_setLog_Code
  6161 ;; This function is called by:
  6162 ;;		_setRF_Main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function _getRxData
  6168  1547                     _getRxData:	
  6169                           
  6170                           ;incstack = 0
  6171                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6172                           ;getRxData@rf stored from wreg
  6173  1547  0020               	movlb	0	; select bank0
  6174  1548  00E8               	movwf	getRxData@rf
  6175                           
  6176                           ;RF_Control_B1.c: 224: RfPointSelect(rf);
  6177  1549  0868               	movf	getRxData@rf,w
  6178  154A  319D  2577  3195   	fcall	_RfPointSelect
  6179                           
  6180                           ;RF_Control_B1.c: 225: if (RF->Learn) {
  6181  154D  087A               	movf	_RF,w
  6182  154E  0086               	movwf	6
  6183  154F  0187               	clrf	7
  6184  1550  1F01               	btfss	1,6
  6185  1551  2D5E               	goto	l6152
  6186                           
  6187                           ;RF_Control_B1.c: 226: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6188  1552  0021               	movlb	1	; select bank1
  6189  1553  08A0               	movf	_RF_Data^(0+128),f
  6190  1554  1D03               	skipz
  6191  1555  0008               	return
  6192  1556  0821               	movf	(_RF_Data^(0+128)+1),w
  6193  1557  3A64               	xorlw	100
  6194  1558  1D03               	skipz
  6195  1559  0008               	return
  6196                           
  6197                           ;RF_Control_B1.c: 227: {
  6198                           ;RF_Control_B1.c: 228: setLog_Code(1);
  6199  155A  3001               	movlw	1
  6200  155B  3195  2500         	fcall	_setLog_Code
  6201                           
  6202                           ;RF_Control_B1.c: 229: }
  6203                           ;RF_Control_B1.c: 230: } else {
  6204  155D  0008               	return
  6205  155E                     l6152:	
  6206                           
  6207                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6208  155E  0021               	movlb	1	; select bank1
  6209  155F  08A0               	movf	_RF_Data^(0+128),f
  6210  1560  1D03               	skipz
  6211  1561  0008               	return
  6212  1562  0821               	movf	(_RF_Data^(0+128)+1),w
  6213  1563  3A02               	xorlw	2
  6214  1564  1D03               	skipz
  6215  1565  0008               	return
  6216                           
  6217                           ;RF_Control_B1.c: 232: {
  6218                           ;RF_Control_B1.c: 233: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6219  1566  082C               	movf	(_RF_Data^(0+128)+12),w
  6220  1567  3AFF               	xorlw	255
  6221  1568  1D03               	skipz
  6222  1569  2D74               	goto	l6164
  6223  156A  082D               	movf	(_RF_Data^(0+128)+13),w
  6224  156B  3AFF               	xorlw	255
  6225  156C  1D03               	skipz
  6226  156D  2D74               	goto	l6164
  6227  156E  082E               	movf	(_RF_Data^(0+128)+14),w
  6228  156F  3AFF               	xorlw	255
  6229  1570  1D03               	skipz
  6230  1571  2D74               	goto	l6164
  6231                           
  6232                           ;RF_Control_B1.c: 234: __nop();
  6233  1572  0000               	nop
  6234                           
  6235                           ;RF_Control_B1.c: 235: } else {
  6236  1573  0008               	return
  6237  1574                     l6164:	
  6238                           
  6239                           ;RF_Control_B1.c: 236: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6240  1574  087D               	movf	_product,w
  6241  1575  3E0C               	addlw	12
  6242  1576  0086               	movwf	6
  6243  1577  3001               	movlw	1	; select bank2/3
  6244  1578  0087               	movwf	7
  6245  1579  0021               	movlb	1	; select bank1
  6246  157A  082C               	movf	(_RF_Data^(0+128)+12),w
  6247  157B  0601               	xorwf	1,w
  6248  157C  1D03               	skipz
  6249  157D  0008               	return
  6250  157E  087D               	movf	_product,w
  6251  157F  3E0D               	addlw	13
  6252  1580  0086               	movwf	6
  6253  1581  3001               	movlw	1	; select bank2/3
  6254  1582  0087               	movwf	7
  6255  1583  082D               	movf	(_RF_Data^(0+128)+13),w
  6256  1584  0601               	xorwf	1,w
  6257  1585  1D03               	skipz
  6258  1586  0008               	return
  6259  1587  087D               	movf	_product,w
  6260  1588  3E0E               	addlw	14
  6261  1589  0086               	movwf	6
  6262  158A  3001               	movlw	1	; select bank2/3
  6263  158B  0087               	movwf	7
  6264  158C  082E               	movf	(_RF_Data^(0+128)+14),w
  6265  158D  0601               	xorwf	1,w
  6266  158E  1D03               	skipz
  6267  158F  0008               	return
  6268                           
  6269                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  6270  1590  3001               	movlw	1
  6271  1591  318A  2218         	fcall	_setControl_Lights_Table
  6272                           
  6273                           ;RF_Control_B1.c: 244: {
  6274                           ;RF_Control_B1.c: 245: ;
  6275                           
  6276                           ;RF_Control_B1.c: 241: {
  6277                           ;RF_Control_B1.c: 242: ;
  6278                           ;RF_Control_B1.c: 243: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6279                           
  6280                           ;RF_Control_B1.c: 238: }
  6281                           ;RF_Control_B1.c: 239: }
  6282                           ;RF_Control_B1.c: 240: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6283  1593  0008               	return
  6284  1594                     __end_of_getRxData:	
  6285                           
  6286                           	psect	text21
  6287  1500                     __ptext21:	
  6288 ;; *************** function _setLog_Code *****************
  6289 ;; Defined at:
  6290 ;;		line 255 in file "../src/RF_Control_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  rf              1    wreg     unsigned char 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  rf              1   14[BANK0 ] unsigned char 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;Total ram usage:        2 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    7
  6311 ;; This function calls:
  6312 ;;		_RfPointSelect
  6313 ;;		_setBuz
  6314 ;; This function is called by:
  6315 ;;		_getRxData
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _setLog_Code
  6321  1500                     _setLog_Code:	
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6325                           ;setLog_Code@rf stored from wreg
  6326  1500  0020               	movlb	0	; select bank0
  6327  1501  00AE               	movwf	setLog_Code@rf
  6328                           
  6329                           ;RF_Control_B1.c: 256: RfPointSelect(rf);
  6330  1502  082E               	movf	setLog_Code@rf,w
  6331  1503  319D  2577  3195   	fcall	_RfPointSelect
  6332                           
  6333                           ;RF_Control_B1.c: 257: product->Data[12]=RF_Data[12];
  6334  1506  0021               	movlb	1	; select bank1
  6335  1507  082C               	movf	(_RF_Data^(0+128)+12),w
  6336  1508  0020               	movlb	0	; select bank0
  6337  1509  00AD               	movwf	??_setLog_Code
  6338  150A  087D               	movf	_product,w
  6339  150B  3E0C               	addlw	12
  6340  150C  0086               	movwf	6
  6341  150D  3001               	movlw	1	; select bank2/3
  6342  150E  0087               	movwf	7
  6343  150F  082D               	movf	??_setLog_Code,w
  6344  1510  0081               	movwf	1
  6345                           
  6346                           ;RF_Control_B1.c: 258: product->Data[13]=RF_Data[13];
  6347  1511  0021               	movlb	1	; select bank1
  6348  1512  082D               	movf	(_RF_Data^(0+128)+13),w
  6349  1513  0020               	movlb	0	; select bank0
  6350  1514  00AD               	movwf	??_setLog_Code
  6351  1515  087D               	movf	_product,w
  6352  1516  3E0D               	addlw	13
  6353  1517  0086               	movwf	6
  6354  1518  3001               	movlw	1	; select bank2/3
  6355  1519  0087               	movwf	7
  6356  151A  082D               	movf	??_setLog_Code,w
  6357  151B  0081               	movwf	1
  6358                           
  6359                           ;RF_Control_B1.c: 259: product->Data[14]=RF_Data[14];
  6360  151C  0021               	movlb	1	; select bank1
  6361  151D  082E               	movf	(_RF_Data^(0+128)+14),w
  6362  151E  0020               	movlb	0	; select bank0
  6363  151F  00AD               	movwf	??_setLog_Code
  6364  1520  087D               	movf	_product,w
  6365  1521  3E0E               	addlw	14
  6366  1522  0086               	movwf	6
  6367  1523  3001               	movlw	1	; select bank2/3
  6368  1524  0087               	movwf	7
  6369  1525  082D               	movf	??_setLog_Code,w
  6370  1526  0081               	movwf	1
  6371                           
  6372                           ;RF_Control_B1.c: 260: setBuz(1, 100);
  6373  1527  3064               	movlw	100
  6374  1528  00A9               	movwf	setBuz@time
  6375  1529  3000               	movlw	0
  6376  152A  00AA               	movwf	setBuz@time+1
  6377  152B  3001               	movlw	1
  6378  152C  318C  24EB  3195   	fcall	_setBuz
  6379                           
  6380                           ;RF_Control_B1.c: 261: RF->Learn = 0;
  6381  152F  087A               	movf	_RF,w
  6382  1530  0086               	movwf	6
  6383  1531  0187               	clrf	7
  6384  1532  1301               	bcf	1,6
  6385                           
  6386                           ;RF_Control_B1.c: 262: if (myMain->First) {
  6387  1533  0021               	movlb	1	; select bank1
  6388  1534  086D               	movf	_myMain^(0+128),w
  6389  1535  0086               	movwf	6
  6390  1536  3001               	movlw	1	; select bank2/3
  6391  1537  0087               	movwf	7
  6392  1538  1F81               	btfss	1,7
  6393  1539  2D40               	goto	l2024
  6394                           
  6395                           ;RF_Control_B1.c: 263: Memory->LoopSave=1;
  6396  153A  086E               	movf	_Memory^(0+128),w
  6397  153B  3E24               	addlw	36
  6398  153C  0086               	movwf	6
  6399  153D  3001               	movlw	1	; select bank2/3
  6400  153E  0087               	movwf	7
  6401  153F  1501               	bsf	1,2
  6402  1540                     l2024:	
  6403                           
  6404                           ;RF_Control_B1.c: 264: }
  6405                           ;RF_Control_B1.c: 265: Memory->Modify=1;
  6406  1540  086E               	movf	_Memory^(0+128),w
  6407  1541  3E24               	addlw	36
  6408  1542  0086               	movwf	6
  6409  1543  3001               	movlw	1	; select bank2/3
  6410  1544  0087               	movwf	7
  6411  1545  1401               	bsf	1,0
  6412  1546  0008               	return
  6413  1547                     __end_of_setLog_Code:	
  6414                           
  6415                           	psect	text22
  6416  0A18                     __ptext22:	
  6417 ;; *************** function _setControl_Lights_Table *****************
  6418 ;; Defined at:
  6419 ;;		line 269 in file "../src/RF_Control_B1.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  rf              1    wreg     unsigned char 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  rf              1   71[BANK0 ] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;		None               void
  6426 ;; Registers used:
  6427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;Total ram usage:        1 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:   11
  6440 ;; This function calls:
  6441 ;;		_RfPointSelect
  6442 ;;		_setBuz
  6443 ;;		_setDimmerLights
  6444 ;;		_setRFSW_AdjControl
  6445 ;;		_setRFSW_Control
  6446 ;;		_setRFSW_Status
  6447 ;;		_setSw_Status
  6448 ;;		_setTxData
  6449 ;; This function is called by:
  6450 ;;		_getRxData
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _setControl_Lights_Table
  6456  0A18                     _setControl_Lights_Table:	
  6457                           
  6458                           ;incstack = 0
  6459                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6460                           ;setControl_Lights_Table@rf stored from wreg
  6461  0A18  0020               	movlb	0	; select bank0
  6462  0A19  00E7               	movwf	setControl_Lights_Table@rf
  6463                           
  6464                           ;RF_Control_B1.c: 270: RfPointSelect(rf);
  6465  0A1A  0867               	movf	setControl_Lights_Table@rf,w
  6466  0A1B  319D  2577  318A   	fcall	_RfPointSelect
  6467                           
  6468                           ;RF_Control_B1.c: 271: if (RF_Data[15] == 0x00) {
  6469  0A1E  0021               	movlb	1	; select bank1
  6470  0A1F  08AF               	movf	(_RF_Data^(0+128)+15),f
  6471  0A20  1D03               	skipz
  6472  0A21  2A59               	goto	l5922
  6473                           
  6474                           ;RF_Control_B1.c: 273: setDimmerLights(1, 0);
  6475  0A22  0020               	movlb	0	; select bank0
  6476  0A23  01A4               	clrf	setDimmerLights@status
  6477  0A24  3001               	movlw	1
  6478  0A25  318B  23E4  318A   	fcall	_setDimmerLights
  6479                           
  6480                           ;RF_Control_B1.c: 274: setRFSW_Status(1, 0);
  6481  0A28  0020               	movlb	0	; select bank0
  6482  0A29  01A2               	clrf	setRFSW_Status@command
  6483  0A2A  3001               	movlw	1
  6484  0A2B  319D  2593  318A   	fcall	_setRFSW_Status
  6485                           
  6486                           ;RF_Control_B1.c: 275: setSw_Status(1, 0);
  6487  0A2E  0020               	movlb	0	; select bank0
  6488  0A2F  01A2               	clrf	setSw_Status@command
  6489  0A30  3001               	movlw	1
  6490  0A31  319D  25A2  318A   	fcall	_setSw_Status
  6491                           
  6492                           ;RF_Control_B1.c: 288: product->Data[9]=0;
  6493  0A34  087D               	movf	_product,w
  6494  0A35  3E09               	addlw	9
  6495  0A36  0086               	movwf	6
  6496  0A37  3001               	movlw	1	; select bank2/3
  6497  0A38  0087               	movwf	7
  6498  0A39  0181               	clrf	1
  6499                           
  6500                           ;RF_Control_B1.c: 289: product->Data[11]=0;
  6501  0A3A  087D               	movf	_product,w
  6502  0A3B  3E0B               	addlw	11
  6503  0A3C  0086               	movwf	6
  6504  0A3D  3001               	movlw	1	; select bank2/3
  6505  0A3E  0087               	movwf	7
  6506  0A3F  0181               	clrf	1
  6507                           
  6508                           ;RF_Control_B1.c: 290: product->Data[15]=0;
  6509  0A40  087D               	movf	_product,w
  6510  0A41  3E0F               	addlw	15
  6511  0A42  0086               	movwf	6
  6512  0A43  3001               	movlw	1	; select bank2/3
  6513  0A44  0087               	movwf	7
  6514  0A45  0181               	clrf	1
  6515                           
  6516                           ;RF_Control_B1.c: 291: product->Data[17]=0;
  6517  0A46  087D               	movf	_product,w
  6518  0A47  3E11               	addlw	17
  6519  0A48  0086               	movwf	6
  6520  0A49  3001               	movlw	1	; select bank2/3
  6521  0A4A  0087               	movwf	7
  6522  0A4B  0181               	clrf	1
  6523                           
  6524                           ;RF_Control_B1.c: 292: setBuz(1, 100);
  6525  0A4C  3064               	movlw	100
  6526  0A4D  0020               	movlb	0	; select bank0
  6527  0A4E  00A9               	movwf	setBuz@time
  6528  0A4F  3000               	movlw	0
  6529  0A50  00AA               	movwf	setBuz@time+1
  6530  0A51  3001               	movlw	1
  6531  0A52  318C  24EB  318A   	fcall	_setBuz
  6532                           
  6533                           ;RF_Control_B1.c: 293: setTxData(1);
  6534  0A55  3001               	movlw	1
  6535  0A56  318E  2604         	fcall	_setTxData
  6536                           
  6537                           ;RF_Control_B1.c: 294: } else if (RF_Data[15] == 0x20) {
  6538  0A58  0008               	return
  6539  0A59                     l5922:	
  6540  0A59  0021               	movlb	1	; select bank1
  6541  0A5A  082F               	movf	(_RF_Data^(0+128)+15),w
  6542  0A5B  3A20               	xorlw	32
  6543  0A5C  1D03               	skipz
  6544  0A5D  2A74               	goto	l5928
  6545                           
  6546                           ;RF_Control_B1.c: 295: product->Data[9]=0;
  6547  0A5E  087D               	movf	_product,w
  6548  0A5F  3E09               	addlw	9
  6549  0A60  0086               	movwf	6
  6550  0A61  3001               	movlw	1	; select bank2/3
  6551  0A62  0087               	movwf	7
  6552  0A63  0181               	clrf	1
  6553                           
  6554                           ;RF_Control_B1.c: 296: product->Data[11]=0;
  6555  0A64  087D               	movf	_product,w
  6556  0A65  3E0B               	addlw	11
  6557  0A66  0086               	movwf	6
  6558  0A67  3001               	movlw	1	; select bank2/3
  6559  0A68  0087               	movwf	7
  6560  0A69  0181               	clrf	1
  6561                           
  6562                           ;RF_Control_B1.c: 297: product->Data[17]=0;
  6563  0A6A  087D               	movf	_product,w
  6564  0A6B  3E11               	addlw	17
  6565  0A6C  0086               	movwf	6
  6566  0A6D  3001               	movlw	1	; select bank2/3
  6567  0A6E  0087               	movwf	7
  6568  0A6F  0181               	clrf	1
  6569                           
  6570                           ;RF_Control_B1.c: 298: setTxData(1);
  6571  0A70  3001               	movlw	1
  6572  0A71  318E  2604         	fcall	_setTxData
  6573                           
  6574                           ;RF_Control_B1.c: 299: }
  6575  0A73  0008               	return
  6576  0A74                     l5928:	
  6577                           
  6578                           ;RF_Control_B1.c: 301: else if (RF_Data[15] == 0x01) {
  6579  0A74  0021               	movlb	1	; select bank1
  6580  0A75  082F               	movf	(_RF_Data^(0+128)+15),w
  6581  0A76  3A01               	xorlw	1
  6582  0A77  1D03               	skipz
  6583  0A78  2A7D               	goto	l5932
  6584                           
  6585                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  6586  0A79  3001               	movlw	1
  6587  0A7A  318D  2574         	fcall	_setRFSW_Control
  6588                           
  6589                           ;RF_Control_B1.c: 303: }
  6590  0A7C  0008               	return
  6591  0A7D                     l5932:	
  6592                           
  6593                           ;RF_Control_B1.c: 305: else if (RF_Data[15] == 0x11) {
  6594  0A7D  0021               	movlb	1	; select bank1
  6595  0A7E  082F               	movf	(_RF_Data^(0+128)+15),w
  6596  0A7F  3A11               	xorlw	17
  6597  0A80  1D03               	skipz
  6598  0A81  0008               	return
  6599                           
  6600                           ;RF_Control_B1.c: 306: setRFSW_AdjControl(1);
  6601  0A82  3001               	movlw	1
  6602  0A83  3193  2369         	fcall	_setRFSW_AdjControl
  6603  0A85  0008               	return
  6604  0A86                     __end_of_setControl_Lights_Table:	
  6605                           
  6606                           	psect	text23
  6607  0D74                     __ptext23:	
  6608 ;; *************** function _setRFSW_Control *****************
  6609 ;; Defined at:
  6610 ;;		line 354 in file "../src/RF_Control_B1.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  sw              1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  sw              1   67[BANK0 ] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;Total ram usage:        2 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    9
  6631 ;; This function calls:
  6632 ;;		_RfSWPointSelect
  6633 ;;		_setBuz
  6634 ;;		_setDelayOff_GO
  6635 ;;		_setDimmerLights_Switch
  6636 ;;		_setDimmerLights_Trigger
  6637 ;;		_setRF_DimmerLights
  6638 ;;		_setSw_Status
  6639 ;;		_setTxData
  6640 ;; This function is called by:
  6641 ;;		_setControl_Lights_Table
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           
  6646                           ;psect for function _setRFSW_Control
  6647  0D74                     _setRFSW_Control:	
  6648                           
  6649                           ;incstack = 0
  6650                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6651                           ;setRFSW_Control@sw stored from wreg
  6652  0D74  0020               	movlb	0	; select bank0
  6653  0D75  00E3               	movwf	setRFSW_Control@sw
  6654                           
  6655                           ;RF_Control_B1.c: 355: RfSWPointSelect(sw);
  6656  0D76  0863               	movf	setRFSW_Control@sw,w
  6657  0D77  319D  2513  318D   	fcall	_RfSWPointSelect
  6658                           
  6659                           ;RF_Control_B1.c: 356: if (!RFSW->Status) {
  6660  0D7A  0021               	movlb	1	; select bank1
  6661  0D7B  083F               	movf	_RFSW^(0+128),w
  6662  0D7C  0086               	movwf	6
  6663  0D7D  0187               	clrf	7
  6664  0D7E  1801               	btfsc	1,0
  6665  0D7F  2DB5               	goto	l5782
  6666                           
  6667                           ;RF_Control_B1.c: 357: if (RF_Data[16] == 0x80) {
  6668  0D80  0830               	movf	(_RF_Data^(0+128)+16),w
  6669  0D81  3A80               	xorlw	128
  6670  0D82  1D03               	skipz
  6671  0D83  2D91               	goto	l5772
  6672                           
  6673                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 1, RF_Data[17]);
  6674  0D84  0020               	movlb	0	; select bank0
  6675  0D85  01A3               	clrf	setDelayOff_GO@command
  6676  0D86  0AA3               	incf	setDelayOff_GO@command,f
  6677  0D87  0021               	movlb	1	; select bank1
  6678  0D88  0831               	movf	(_RF_Data^(0+128)+17),w
  6679  0D89  0020               	movlb	0	; select bank0
  6680  0D8A  00E2               	movwf	??_setRFSW_Control
  6681  0D8B  0862               	movf	??_setRFSW_Control,w
  6682  0D8C  00A4               	movwf	setDelayOff_GO@value
  6683  0D8D  0863               	movf	setRFSW_Control@sw,w
  6684  0D8E  3197  2745  318D   	fcall	_setDelayOff_GO
  6685  0D91                     l5772:	
  6686                           
  6687                           ;RF_Control_B1.c: 359: }
  6688                           ;RF_Control_B1.c: 360: RFSW->Status = 1;
  6689  0D91  0021               	movlb	1	; select bank1
  6690  0D92  083F               	movf	_RFSW^(0+128),w
  6691  0D93  0086               	movwf	6
  6692  0D94  0187               	clrf	7
  6693  0D95  1401               	bsf	1,0
  6694                           
  6695                           ;RF_Control_B1.c: 361: setSw_Status(sw, 1);
  6696  0D96  0020               	movlb	0	; select bank0
  6697  0D97  01A2               	clrf	setSw_Status@command
  6698  0D98  0AA2               	incf	setSw_Status@command,f
  6699  0D99  0863               	movf	setRFSW_Control@sw,w
  6700  0D9A  319D  25A2  318D   	fcall	_setSw_Status
  6701                           
  6702                           ;RF_Control_B1.c: 363: setDimmerLights_Trigger(sw, 1);
  6703  0D9D  0020               	movlb	0	; select bank0
  6704  0D9E  01A2               	clrf	setDimmerLights_Trigger@command
  6705  0D9F  0AA2               	incf	setDimmerLights_Trigger@command,f
  6706  0DA0  0863               	movf	setRFSW_Control@sw,w
  6707  0DA1  319D  25E0  318D   	fcall	_setDimmerLights_Trigger
  6708                           
  6709                           ;RF_Control_B1.c: 364: setDimmerLights_Switch(sw, 1);
  6710  0DA4  0020               	movlb	0	; select bank0
  6711  0DA5  01A2               	clrf	setDimmerLights_Switch@command
  6712  0DA6  0AA2               	incf	setDimmerLights_Switch@command,f
  6713  0DA7  0863               	movf	setRFSW_Control@sw,w
  6714  0DA8  319D  25D0  318D   	fcall	_setDimmerLights_Switch
  6715                           
  6716                           ;RF_Control_B1.c: 366: setRF_DimmerLights(sw, RFSW->Status);
  6717  0DAB  0021               	movlb	1	; select bank1
  6718  0DAC  083F               	movf	_RFSW^(0+128),w
  6719  0DAD  0086               	movwf	6
  6720  0DAE  0187               	clrf	7
  6721  0DAF  3000               	movlw	0
  6722  0DB0  1801               	btfsc	1,0
  6723  0DB1  3001               	movlw	1
  6724  0DB2  0020               	movlb	0	; select bank0
  6725  0DB3  00DD               	movwf	setRF_DimmerLights@on
  6726  0DB4  2DF3               	goto	L1
  6727  0DB5                     l5782:	
  6728                           ;RF_Control_B1.c: 367: } else {
  6729                           
  6730                           
  6731                           ;RF_Control_B1.c: 368: if (RF_Data[16] == 0x80) {
  6732  0DB5  0021               	movlb	1	; select bank1
  6733  0DB6  0830               	movf	(_RF_Data^(0+128)+16),w
  6734  0DB7  3A80               	xorlw	128
  6735  0DB8  1D03               	skipz
  6736  0DB9  2DCB               	goto	l5788
  6737                           
  6738                           ;RF_Control_B1.c: 369: setDelayOff_GO(sw, 1, RF_Data[17]);
  6739  0DBA  0020               	movlb	0	; select bank0
  6740  0DBB  01A3               	clrf	setDelayOff_GO@command
  6741  0DBC  0AA3               	incf	setDelayOff_GO@command,f
  6742  0DBD  0021               	movlb	1	; select bank1
  6743  0DBE  0831               	movf	(_RF_Data^(0+128)+17),w
  6744  0DBF  0020               	movlb	0	; select bank0
  6745  0DC0  00E2               	movwf	??_setRFSW_Control
  6746  0DC1  0862               	movf	??_setRFSW_Control,w
  6747  0DC2  00A4               	movwf	setDelayOff_GO@value
  6748  0DC3  0863               	movf	setRFSW_Control@sw,w
  6749  0DC4  3197  2745  318D   	fcall	_setDelayOff_GO
  6750                           
  6751                           ;RF_Control_B1.c: 370: setRF_DimmerLights(sw, 1);
  6752  0DC7  0020               	movlb	0	; select bank0
  6753  0DC8  01DD               	clrf	setRF_DimmerLights@on
  6754  0DC9  0ADD               	incf	setRF_DimmerLights@on,f
  6755  0DCA  2DF3               	goto	L1
  6756  0DCB                     l5788:	
  6757                           ;RF_Control_B1.c: 371: } else {
  6758                           
  6759                           
  6760                           ;RF_Control_B1.c: 372: RFSW->Status = 0;
  6761  0DCB  0021               	movlb	1	; select bank1
  6762  0DCC  083F               	movf	_RFSW^(0+128),w
  6763  0DCD  0086               	movwf	6
  6764  0DCE  0187               	clrf	7
  6765  0DCF  1001               	bcf	1,0
  6766                           
  6767                           ;RF_Control_B1.c: 373: setSw_Status(sw, 0);
  6768  0DD0  0020               	movlb	0	; select bank0
  6769  0DD1  01A2               	clrf	setSw_Status@command
  6770  0DD2  0863               	movf	setRFSW_Control@sw,w
  6771  0DD3  319D  25A2  318D   	fcall	_setSw_Status
  6772                           
  6773                           ;RF_Control_B1.c: 375: setDimmerLights_Trigger(sw, 1);
  6774  0DD6  0020               	movlb	0	; select bank0
  6775  0DD7  01A2               	clrf	setDimmerLights_Trigger@command
  6776  0DD8  0AA2               	incf	setDimmerLights_Trigger@command,f
  6777  0DD9  0863               	movf	setRFSW_Control@sw,w
  6778  0DDA  319D  25E0  318D   	fcall	_setDimmerLights_Trigger
  6779                           
  6780                           ;RF_Control_B1.c: 376: setDimmerLights_Switch(sw, RFSW->Status);
  6781  0DDD  0021               	movlb	1	; select bank1
  6782  0DDE  083F               	movf	_RFSW^(0+128),w
  6783  0DDF  0086               	movwf	6
  6784  0DE0  0187               	clrf	7
  6785  0DE1  3000               	movlw	0
  6786  0DE2  1801               	btfsc	1,0
  6787  0DE3  3001               	movlw	1
  6788  0DE4  0020               	movlb	0	; select bank0
  6789  0DE5  00A2               	movwf	setDimmerLights_Switch@command
  6790  0DE6  0863               	movf	setRFSW_Control@sw,w
  6791  0DE7  319D  25D0  318D   	fcall	_setDimmerLights_Switch
  6792                           
  6793                           ;RF_Control_B1.c: 378: setDelayOff_GO(sw, 0, 0);
  6794  0DEA  0020               	movlb	0	; select bank0
  6795  0DEB  01A3               	clrf	setDelayOff_GO@command
  6796  0DEC  01A4               	clrf	setDelayOff_GO@value
  6797  0DED  0863               	movf	setRFSW_Control@sw,w
  6798  0DEE  3197  2745  318D   	fcall	_setDelayOff_GO
  6799                           
  6800                           ;RF_Control_B1.c: 379: setRF_DimmerLights(sw, 0);
  6801  0DF1  0020               	movlb	0	; select bank0
  6802  0DF2  01DD               	clrf	setRF_DimmerLights@on
  6803  0DF3                     L1:	
  6804  0DF3  0863               	movf	setRFSW_Control@sw,w
  6805  0DF4  3189  213E  318D   	fcall	_setRF_DimmerLights
  6806                           
  6807                           ;RF_Control_B1.c: 380: }
  6808                           ;RF_Control_B1.c: 381: }
  6809                           ;RF_Control_B1.c: 382: setBuz(1, 100);
  6810  0DF7  3064               	movlw	100
  6811  0DF8  0020               	movlb	0	; select bank0
  6812  0DF9  00A9               	movwf	setBuz@time
  6813  0DFA  3000               	movlw	0
  6814  0DFB  00AA               	movwf	setBuz@time+1
  6815  0DFC  3001               	movlw	1
  6816  0DFD  318C  24EB  318D   	fcall	_setBuz
  6817                           
  6818                           ;RF_Control_B1.c: 383: setTxData(1);
  6819  0E00  3001               	movlw	1
  6820  0E01  318E  2604         	fcall	_setTxData
  6821  0E03  0008               	return
  6822  0E04                     __end_of_setRFSW_Control:	
  6823                           
  6824                           	psect	text24
  6825  1745                     __ptext24:	
  6826 ;; *************** function _setDelayOff_GO *****************
  6827 ;; Defined at:
  6828 ;;		line 85 in file "../src/DelayOff_B1.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  sw              1    wreg     unsigned char 
  6831 ;;  command         1    3[BANK0 ] unsigned char 
  6832 ;;  value           1    4[BANK0 ] unsigned char 
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;  sw              1    7[BANK0 ] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6844 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;Total ram usage:        5 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    6
  6851 ;; This function calls:
  6852 ;;		_DelayOffPointSelect
  6853 ;;		_DelayTimejudge
  6854 ;; This function is called by:
  6855 ;;		_setRFSW_Control
  6856 ;;		_Sw_DimmerOffFunc
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function _setDelayOff_GO
  6862  1745                     _setDelayOff_GO:	
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6866                           ;setDelayOff_GO@sw stored from wreg
  6867  1745  0020               	movlb	0	; select bank0
  6868  1746  00A7               	movwf	setDelayOff_GO@sw
  6869                           
  6870                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6871  1747  0827               	movf	setDelayOff_GO@sw,w
  6872  1748  319D  2507  3197   	fcall	_DelayOffPointSelect
  6873                           
  6874                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6875  174B  0021               	movlb	1	; select bank1
  6876  174C  0839               	movf	_DelayOff^(0+128),w
  6877  174D  0086               	movwf	6
  6878  174E  0187               	clrf	7
  6879  174F  1C01               	btfss	1,0
  6880  1750  0008               	return
  6881                           
  6882                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6883  1751  0839               	movf	_DelayOff^(0+128),w
  6884  1752  0086               	movwf	6
  6885  1753  0187               	clrf	7
  6886  1754  0020               	movlb	0	; select bank0
  6887  1755  0823               	movf	setDelayOff_GO@command,w
  6888  1756  1081               	bcf	1,1
  6889  1757  1D03               	skipz
  6890  1758  1481               	bsf	1,1
  6891                           
  6892                           ;DelayOff_B1.c: 89: if (command == 1) {
  6893  1759  0823               	movf	setDelayOff_GO@command,w
  6894  175A  3A01               	xorlw	1
  6895  175B  1D03               	skipz
  6896  175C  2F88               	goto	l5598
  6897                           
  6898                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6899  175D  0824               	movf	setDelayOff_GO@value,w
  6900  175E  3191  219D  3197   	fcall	_DelayTimejudge
  6901  1761  0020               	movlb	0	; select bank0
  6902  1762  00A5               	movwf	??_setDelayOff_GO
  6903  1763  0021               	movlb	1	; select bank1
  6904  1764  0A39               	incf	_DelayOff^(0+128),w
  6905  1765  0086               	movwf	6
  6906  1766  0187               	clrf	7
  6907  1767  0020               	movlb	0	; select bank0
  6908  1768  0825               	movf	??_setDelayOff_GO,w
  6909  1769  0081               	movwf	1
  6910                           
  6911                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6912  176A  300F               	movlw	15
  6913  176B  0524               	andwf	setDelayOff_GO@value,w
  6914  176C  00A5               	movwf	??_setDelayOff_GO
  6915  176D  0825               	movf	??_setDelayOff_GO,w
  6916  176E  3A05               	xorlw	5
  6917  176F  1903               	skipnz
  6918  1770  2F75               	goto	l5592
  6919  1771  0824               	movf	setDelayOff_GO@value,w
  6920  1772  390F               	andlw	15
  6921  1773  1D03               	btfss	3,2
  6922  1774  2F7B               	goto	l5596
  6923  1775                     l5592:	
  6924  1775  3026               	movlw	38
  6925  1776  0224               	subwf	setDelayOff_GO@value,w
  6926  1777  1803               	skipnc
  6927  1778  2F7B               	goto	l5596
  6928                           
  6929                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6930  1779  0824               	movf	setDelayOff_GO@value,w
  6931  177A  2F7C               	goto	L2
  6932  177B                     l5596:	
  6933                           ;DelayOff_B1.c: 93: } else {
  6934                           
  6935                           
  6936                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6937  177B  3005               	movlw	5
  6938  177C                     L2:	
  6939  177C  00A5               	movwf	??_setDelayOff_GO
  6940  177D  0827               	movf	setDelayOff_GO@sw,w
  6941  177E  3E1A               	addlw	26
  6942  177F  077D               	addwf	_product,w
  6943  1780  00A6               	movwf	??_setDelayOff_GO+1
  6944  1781  0826               	movf	??_setDelayOff_GO+1,w
  6945  1782  0086               	movwf	6
  6946  1783  3001               	movlw	1	; select bank2/3
  6947  1784  0087               	movwf	7
  6948  1785  0825               	movf	??_setDelayOff_GO,w
  6949  1786  0081               	movwf	1
  6950                           
  6951                           ;DelayOff_B1.c: 95: }
  6952                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6953  1787  2F94               	goto	l5602
  6954  1788                     l5598:	
  6955  1788  08A3               	movf	setDelayOff_GO@command,f
  6956  1789  1D03               	skipz
  6957  178A  2F94               	goto	l5602
  6958                           
  6959                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6960  178B  0827               	movf	setDelayOff_GO@sw,w
  6961  178C  3E1A               	addlw	26
  6962  178D  077D               	addwf	_product,w
  6963  178E  00A5               	movwf	??_setDelayOff_GO
  6964  178F  0825               	movf	??_setDelayOff_GO,w
  6965  1790  0086               	movwf	6
  6966  1791  3001               	movlw	1	; select bank2/3
  6967  1792  0087               	movwf	7
  6968  1793  0181               	clrf	1
  6969  1794                     l5602:	
  6970                           
  6971                           ;DelayOff_B1.c: 98: }
  6972                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6973  1794  0021               	movlb	1	; select bank1
  6974  1795  0839               	movf	_DelayOff^(0+128),w
  6975  1796  3E02               	addlw	2
  6976  1797  0086               	movwf	6
  6977  1798  0187               	clrf	7
  6978  1799  3000               	movlw	0
  6979  179A  3FC0               	movwi [0]fsr1
  6980  179B  3FC1               	movwi [1]fsr1
  6981                           
  6982                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6983  179C  0839               	movf	_DelayOff^(0+128),w
  6984  179D  3E04               	addlw	4
  6985  179E  0086               	movwf	6
  6986  179F  0187               	clrf	7
  6987  17A0  0181               	clrf	1
  6988  17A1  0008               	return
  6989  17A2                     __end_of_setDelayOff_GO:	
  6990                           
  6991                           	psect	text25
  6992  119D                     __ptext25:	
  6993 ;; *************** function _DelayTimejudge *****************
  6994 ;; Defined at:
  6995 ;;		line 105 in file "../src/DelayOff_B1.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  value           1    wreg     unsigned char 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  value           1    1[BANK0 ] unsigned char 
  7000 ;;  i               1    2[BANK0 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      unsigned char 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;Total ram usage:        3 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    5
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_setDelayOff_GO
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           
  7025                           ;psect for function _DelayTimejudge
  7026  119D                     _DelayTimejudge:	
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7030                           ;DelayTimejudge@value stored from wreg
  7031  119D  0020               	movlb	0	; select bank0
  7032  119E  00A1               	movwf	DelayTimejudge@value
  7033                           
  7034                           ;DelayOff_B1.c: 106: char i = 5;
  7035  119F  3005               	movlw	5
  7036  11A0  00A0               	movwf	??_DelayTimejudge
  7037  11A1  0820               	movf	??_DelayTimejudge,w
  7038  11A2  00A2               	movwf	DelayTimejudge@i
  7039                           
  7040                           ;DelayOff_B1.c: 107: switch (value) {
  7041  11A3  29B3               	goto	l5420
  7042  11A4                     l5406:	
  7043                           ;DelayOff_B1.c: 108: case 0x05:
  7044                           
  7045                           
  7046                           ;DelayOff_B1.c: 109: i = 5;
  7047  11A4  3005               	movlw	5
  7048  11A5  29AF               	goto	L7
  7049  11A6                     l5408:	
  7050                           ;DelayOff_B1.c: 111: case 0x10:
  7051                           
  7052                           ;DelayOff_B1.c: 110: break;
  7053                           
  7054                           
  7055                           ;DelayOff_B1.c: 112: i = 10;
  7056  11A6  300A               	movlw	10
  7057  11A7  29AF               	goto	L7
  7058  11A8                     l5410:	
  7059                           ;DelayOff_B1.c: 114: case 0x15:
  7060                           
  7061                           ;DelayOff_B1.c: 113: break;
  7062                           
  7063                           
  7064                           ;DelayOff_B1.c: 115: i = 15;
  7065  11A8  300F               	movlw	15
  7066  11A9  29AF               	goto	L7
  7067  11AA                     l5412:	
  7068                           ;DelayOff_B1.c: 117: case 0x20:
  7069                           
  7070                           ;DelayOff_B1.c: 116: break;
  7071                           
  7072                           
  7073                           ;DelayOff_B1.c: 118: i = 20;
  7074  11AA  3014               	movlw	20
  7075  11AB  29AF               	goto	L7
  7076  11AC                     l5414:	
  7077                           ;DelayOff_B1.c: 120: case 0x25:
  7078                           
  7079                           ;DelayOff_B1.c: 119: break;
  7080                           
  7081                           
  7082                           ;DelayOff_B1.c: 121: i = 25;
  7083  11AC  3019               	movlw	25
  7084  11AD  29AF               	goto	L7
  7085  11AE                     l5416:	
  7086                           ;DelayOff_B1.c: 123: case 0x30:
  7087                           
  7088                           ;DelayOff_B1.c: 122: break;
  7089                           
  7090                           
  7091                           ;DelayOff_B1.c: 124: i = 30;
  7092  11AE  301E               	movlw	30
  7093  11AF                     L7:	
  7094  11AF  00A0               	movwf	??_DelayTimejudge
  7095  11B0  0820               	movf	??_DelayTimejudge,w
  7096  11B1  00A2               	movwf	DelayTimejudge@i
  7097                           
  7098                           ;DelayOff_B1.c: 126: }
  7099                           
  7100                           ;DelayOff_B1.c: 125: break;
  7101  11B2  29C7               	goto	l5422
  7102  11B3                     l5420:	
  7103  11B3  0821               	movf	DelayTimejudge@value,w
  7104                           
  7105                           ; Switch size 1, requested type "space"
  7106                           ; Number of cases is 6, Range of values is 5 to 48
  7107                           ; switch strategies available:
  7108                           ; Name         Instructions Cycles
  7109                           ; simple_byte           19    10 (average)
  7110                           ; direct_byte           97     9 (fixed)
  7111                           ; jumptable            263     9 (fixed)
  7112                           ;	Chosen strategy is simple_byte
  7113  11B4  3A05               	xorlw	5	; case 5
  7114  11B5  1903               	skipnz
  7115  11B6  29A4               	goto	l5406
  7116  11B7  3A15               	xorlw	21	; case 16
  7117  11B8  1903               	skipnz
  7118  11B9  29A6               	goto	l5408
  7119  11BA  3A05               	xorlw	5	; case 21
  7120  11BB  1903               	skipnz
  7121  11BC  29A8               	goto	l5410
  7122  11BD  3A35               	xorlw	53	; case 32
  7123  11BE  1903               	skipnz
  7124  11BF  29AA               	goto	l5412
  7125  11C0  3A05               	xorlw	5	; case 37
  7126  11C1  1903               	skipnz
  7127  11C2  29AC               	goto	l5414
  7128  11C3  3A15               	xorlw	21	; case 48
  7129  11C4  1903               	skipnz
  7130  11C5  29AE               	goto	l5416
  7131  11C6  29C7               	goto	l5422
  7132  11C7                     l5422:	
  7133                           
  7134                           ;DelayOff_B1.c: 127: return i;
  7135  11C7  0822               	movf	DelayTimejudge@i,w
  7136  11C8  0008               	return
  7137  11C9                     __end_of_DelayTimejudge:	
  7138                           
  7139                           	psect	text26
  7140  1369                     __ptext26:	
  7141 ;; *************** function _setRFSW_AdjControl *****************
  7142 ;; Defined at:
  7143 ;;		line 387 in file "../src/RF_Control_B1.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  sw              1    wreg     unsigned char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  sw              1   70[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;		None               void
  7150 ;; Registers used:
  7151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;Total ram usage:        3 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:   10
  7164 ;; This function calls:
  7165 ;;		_RfSWPointSelect
  7166 ;;		_setRF_DimmerValue
  7167 ;;		_setTxData
  7168 ;; This function is called by:
  7169 ;;		_setControl_Lights_Table
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           
  7174                           ;psect for function _setRFSW_AdjControl
  7175  1369                     _setRFSW_AdjControl:	
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7179                           ;setRFSW_AdjControl@sw stored from wreg
  7180  1369  0020               	movlb	0	; select bank0
  7181  136A  00E6               	movwf	setRFSW_AdjControl@sw
  7182                           
  7183                           ;RF_Control_B1.c: 388: RfSWPointSelect(sw);
  7184  136B  0866               	movf	setRFSW_AdjControl@sw,w
  7185  136C  319D  2513  3193   	fcall	_RfSWPointSelect
  7186                           
  7187                           ;RF_Control_B1.c: 389: if (RFSW->Status == 1) {
  7188  136F  0021               	movlb	1	; select bank1
  7189  1370  083F               	movf	_RFSW^(0+128),w
  7190  1371  0086               	movwf	6
  7191  1372  0187               	clrf	7
  7192  1373  1C01               	btfss	1,0
  7193  1374  2B81               	goto	l5812
  7194                           
  7195                           ;RF_Control_B1.c: 390: Memory->Modify=1;
  7196  1375  086E               	movf	_Memory^(0+128),w
  7197  1376  3E24               	addlw	36
  7198  1377  0086               	movwf	6
  7199  1378  3001               	movlw	1	; select bank2/3
  7200  1379  0087               	movwf	7
  7201  137A  1401               	bsf	1,0
  7202                           
  7203                           ;RF_Control_B1.c: 391: setRF_DimmerValue(sw);
  7204  137B  0020               	movlb	0	; select bank0
  7205  137C  0866               	movf	setRFSW_AdjControl@sw,w
  7206  137D  3192  22B6  3193   	fcall	_setRF_DimmerValue
  7207                           
  7208                           ;RF_Control_B1.c: 392: } else {
  7209  1380  2B93               	goto	l2051
  7210  1381                     l5812:	
  7211                           
  7212                           ;RF_Control_B1.c: 393: product->Data[9]=product->Data[20 + sw];
  7213  1381  0020               	movlb	0	; select bank0
  7214  1382  0866               	movf	setRFSW_AdjControl@sw,w
  7215  1383  3E14               	addlw	20
  7216  1384  077D               	addwf	_product,w
  7217  1385  00E4               	movwf	??_setRFSW_AdjControl
  7218  1386  0864               	movf	??_setRFSW_AdjControl,w
  7219  1387  0086               	movwf	6
  7220  1388  3001               	movlw	1	; select bank2/3
  7221  1389  0087               	movwf	7
  7222  138A  0801               	movf	1,w
  7223  138B  00E5               	movwf	??_setRFSW_AdjControl+1
  7224  138C  087D               	movf	_product,w
  7225  138D  3E09               	addlw	9
  7226  138E  0086               	movwf	6
  7227  138F  3001               	movlw	1	; select bank2/3
  7228  1390  0087               	movwf	7
  7229  1391  0865               	movf	??_setRFSW_AdjControl+1,w
  7230  1392  0081               	movwf	1
  7231  1393                     l2051:	
  7232                           
  7233                           ;RF_Control_B1.c: 394: }
  7234                           ;RF_Control_B1.c: 395: product->Data[17]=product->Data[26 + sw];
  7235  1393  0020               	movlb	0	; select bank0
  7236  1394  0866               	movf	setRFSW_AdjControl@sw,w
  7237  1395  3E1A               	addlw	26
  7238  1396  077D               	addwf	_product,w
  7239  1397  00E4               	movwf	??_setRFSW_AdjControl
  7240  1398  0864               	movf	??_setRFSW_AdjControl,w
  7241  1399  0086               	movwf	6
  7242  139A  3001               	movlw	1	; select bank2/3
  7243  139B  0087               	movwf	7
  7244  139C  0801               	movf	1,w
  7245  139D  00E5               	movwf	??_setRFSW_AdjControl+1
  7246  139E  087D               	movf	_product,w
  7247  139F  3E11               	addlw	17
  7248  13A0  0086               	movwf	6
  7249  13A1  3001               	movlw	1	; select bank2/3
  7250  13A2  0087               	movwf	7
  7251  13A3  0865               	movf	??_setRFSW_AdjControl+1,w
  7252  13A4  0081               	movwf	1
  7253                           
  7254                           ;RF_Control_B1.c: 396: setTxData(1);
  7255  13A5  3001               	movlw	1
  7256  13A6  318E  2604         	fcall	_setTxData
  7257  13A8  0008               	return
  7258  13A9                     __end_of_setRFSW_AdjControl:	
  7259                           
  7260                           	psect	text27
  7261  12B6                     __ptext27:	
  7262 ;; *************** function _setRF_DimmerValue *****************
  7263 ;; Defined at:
  7264 ;;		line 407 in file "../src/RF_Control_B1.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  lights          1    wreg     unsigned char 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  lights          1   67[BANK0 ] unsigned char 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;		None               void
  7271 ;; Registers used:
  7272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;Total ram usage:        3 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    9
  7285 ;; This function calls:
  7286 ;;		_setDimmerLights_AdjRF
  7287 ;; This function is called by:
  7288 ;;		_setRFSW_AdjControl
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _setRF_DimmerValue
  7294  12B6                     _setRF_DimmerValue:	
  7295                           
  7296                           ;incstack = 0
  7297                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7298                           ;setRF_DimmerValue@lights stored from wreg
  7299  12B6  0020               	movlb	0	; select bank0
  7300  12B7  00E3               	movwf	setRF_DimmerValue@lights
  7301                           
  7302                           ;RF_Control_B1.c: 408: if (RF_Data[9] > 0x64) {
  7303  12B8  3065               	movlw	101
  7304  12B9  0021               	movlb	1	; select bank1
  7305  12BA  0229               	subwf	(_RF_Data^(0+128)+9),w
  7306  12BB  1C03               	skipc
  7307  12BC  2AC3               	goto	l5666
  7308                           
  7309                           ;RF_Control_B1.c: 409: RF_Data[9] = 0x64;
  7310  12BD  3064               	movlw	100
  7311  12BE  0020               	movlb	0	; select bank0
  7312  12BF  00E1               	movwf	??_setRF_DimmerValue
  7313  12C0  0861               	movf	??_setRF_DimmerValue,w
  7314  12C1  0021               	movlb	1	; select bank1
  7315  12C2  00A9               	movwf	(_RF_Data^(0+128)+9)
  7316  12C3                     l5666:	
  7317                           
  7318                           ;RF_Control_B1.c: 410: }
  7319                           ;RF_Control_B1.c: 411: product->Data[9]=RF_Data[9];
  7320  12C3  0829               	movf	(_RF_Data^(0+128)+9),w
  7321  12C4  0020               	movlb	0	; select bank0
  7322  12C5  00E1               	movwf	??_setRF_DimmerValue
  7323  12C6  087D               	movf	_product,w
  7324  12C7  3E09               	addlw	9
  7325  12C8  0086               	movwf	6
  7326  12C9  3001               	movlw	1	; select bank2/3
  7327  12CA  0087               	movwf	7
  7328  12CB  0861               	movf	??_setRF_DimmerValue,w
  7329  12CC  0081               	movwf	1
  7330                           
  7331                           ;RF_Control_B1.c: 412: product->Data[11]=lights;
  7332  12CD  0863               	movf	setRF_DimmerValue@lights,w
  7333  12CE  00E1               	movwf	??_setRF_DimmerValue
  7334  12CF  087D               	movf	_product,w
  7335  12D0  3E0B               	addlw	11
  7336  12D1  0086               	movwf	6
  7337  12D2  3001               	movlw	1	; select bank2/3
  7338  12D3  0087               	movwf	7
  7339  12D4  0861               	movf	??_setRF_DimmerValue,w
  7340  12D5  0081               	movwf	1
  7341                           
  7342                           ;RF_Control_B1.c: 413: product->Data[(20 + lights)]=product->Data[9];
  7343  12D6  087D               	movf	_product,w
  7344  12D7  3E09               	addlw	9
  7345  12D8  0086               	movwf	6
  7346  12D9  3001               	movlw	1	; select bank2/3
  7347  12DA  0087               	movwf	7
  7348  12DB  0801               	movf	1,w
  7349  12DC  00E1               	movwf	??_setRF_DimmerValue
  7350  12DD  0863               	movf	setRF_DimmerValue@lights,w
  7351  12DE  3E14               	addlw	20
  7352  12DF  077D               	addwf	_product,w
  7353  12E0  00E2               	movwf	??_setRF_DimmerValue+1
  7354  12E1  0862               	movf	??_setRF_DimmerValue+1,w
  7355  12E2  0086               	movwf	6
  7356  12E3  3001               	movlw	1	; select bank2/3
  7357  12E4  0087               	movwf	7
  7358  12E5  0861               	movf	??_setRF_DimmerValue,w
  7359  12E6  0081               	movwf	1
  7360                           
  7361                           ;RF_Control_B1.c: 414: setDimmerLights_AdjRF(lights);
  7362  12E7  0863               	movf	setRF_DimmerValue@lights,w
  7363  12E8  3190  20D9         	fcall	_setDimmerLights_AdjRF
  7364  12EA  0008               	return
  7365  12EB                     __end_of_setRF_DimmerValue:	
  7366                           
  7367                           	psect	text28
  7368  10D9                     __ptext28:	
  7369 ;; *************** function _setDimmerLights_AdjRF *****************
  7370 ;; Defined at:
  7371 ;;		line 697 in file "../src/Dimmer_B1.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;  lights          1    wreg     unsigned char 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  lights          1   64[BANK0 ] unsigned char 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;		None               void
  7378 ;; Registers used:
  7379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        2 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    8
  7392 ;; This function calls:
  7393 ;;		_DimmerLightsPointSelect
  7394 ;;		_getPercentValue
  7395 ;; This function is called by:
  7396 ;;		_setRF_DimmerValue
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function _setDimmerLights_AdjRF
  7402  10D9                     _setDimmerLights_AdjRF:	
  7403                           
  7404                           ;incstack = 0
  7405                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7406                           ;setDimmerLights_AdjRF@lights stored from wreg
  7407  10D9  0020               	movlb	0	; select bank0
  7408  10DA  00E0               	movwf	setDimmerLights_AdjRF@lights
  7409                           
  7410                           ;Dimmer_B1.c: 699: DimmerLightsPointSelect(lights);
  7411  10DB  0860               	movf	setDimmerLights_AdjRF@lights,w
  7412  10DC  319C  24C1  3190   	fcall	_DimmerLightsPointSelect
  7413                           
  7414                           ;Dimmer_B1.c: 700: DimmerLights->AdjRF = 1;
  7415  10DF  0878               	movf	_DimmerLights,w
  7416  10E0  0086               	movwf	6
  7417  10E1  3001               	movlw	1	; select bank2/3
  7418  10E2  0087               	movwf	7
  7419  10E3  1501               	bsf	1,2
  7420                           
  7421                           ;Dimmer_B1.c: 701: DimmerLights->Signal = 1;
  7422  10E4  0878               	movf	_DimmerLights,w
  7423  10E5  0086               	movwf	6
  7424  10E6  3001               	movlw	1	; select bank2/3
  7425  10E7  0087               	movwf	7
  7426  10E8  1481               	bsf	1,1
  7427                           
  7428                           ;Dimmer_B1.c: 702: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7429  10E9  087D               	movf	_product,w
  7430  10EA  3E09               	addlw	9
  7431  10EB  0086               	movwf	6
  7432  10EC  3001               	movlw	1	; select bank2/3
  7433  10ED  0087               	movwf	7
  7434  10EE  0801               	movf	1,w
  7435  10EF  3196  26EA         	fcall	_getPercentValue
  7436  10F1  0020               	movlb	0	; select bank0
  7437  10F2  00DF               	movwf	??_setDimmerLights_AdjRF
  7438  10F3  0878               	movf	_DimmerLights,w
  7439  10F4  3E05               	addlw	5
  7440  10F5  0086               	movwf	6
  7441  10F6  3001               	movlw	1	; select bank2/3
  7442  10F7  0087               	movwf	7
  7443  10F8  085F               	movf	??_setDimmerLights_AdjRF,w
  7444  10F9  0081               	movwf	1
  7445  10FA  0008               	return
  7446  10FB                     __end_of_setDimmerLights_AdjRF:	
  7447                           
  7448                           	psect	text29
  7449  16EA                     __ptext29:	
  7450 ;; *************** function _getPercentValue *****************
  7451 ;; Defined at:
  7452 ;;		line 770 in file "../src/Dimmer_B1.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  value           1    wreg     unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  value           1   59[BANK0 ] unsigned char 
  7457 ;;  i               3   60[BANK0 ] float 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      unsigned char 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0, pclath, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;Total ram usage:        6 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    7
  7474 ;; This function calls:
  7475 ;;		___awtoft
  7476 ;;		___ftadd
  7477 ;;		___ftdiv
  7478 ;;		___ftmul
  7479 ;;		___fttol
  7480 ;; This function is called by:
  7481 ;;		_setDimmerLights_AdjRF
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _getPercentValue
  7487  16EA                     _getPercentValue:	
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7491                           ;getPercentValue@value stored from wreg
  7492  16EA  0020               	movlb	0	; select bank0
  7493  16EB  00DB               	movwf	getPercentValue@value
  7494                           
  7495                           ;Dimmer_B1.c: 772: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7496  16EC  3000               	movlw	0
  7497  16ED  00DC               	movwf	getPercentValue@i
  7498  16EE  30E0               	movlw	224
  7499  16EF  00DD               	movwf	getPercentValue@i+1
  7500  16F0  3041               	movlw	65
  7501  16F1  00DE               	movwf	getPercentValue@i+2
  7502                           
  7503                           ;Dimmer_B1.c: 773: i /= 100;
  7504  16F2  3000               	movlw	0
  7505  16F3  00AE               	movwf	___ftdiv@f2
  7506  16F4  30C8               	movlw	200
  7507  16F5  00AF               	movwf	___ftdiv@f2+1
  7508  16F6  3042               	movlw	66
  7509  16F7  00B0               	movwf	___ftdiv@f2+2
  7510  16F8  085C               	movf	getPercentValue@i,w
  7511  16F9  00B1               	movwf	___ftdiv@f1
  7512  16FA  085D               	movf	getPercentValue@i+1,w
  7513  16FB  00B2               	movwf	___ftdiv@f1+1
  7514  16FC  085E               	movf	getPercentValue@i+2,w
  7515  16FD  00B3               	movwf	___ftdiv@f1+2
  7516  16FE  318E  26A4  3196   	fcall	___ftdiv
  7517  1701  0020               	movlb	0	; select bank0
  7518  1702  082E               	movf	?___ftdiv,w
  7519  1703  00DC               	movwf	getPercentValue@i
  7520  1704  082F               	movf	?___ftdiv+1,w
  7521  1705  00DD               	movwf	getPercentValue@i+1
  7522  1706  0830               	movf	?___ftdiv+2,w
  7523  1707  00DE               	movwf	getPercentValue@i+2
  7524                           
  7525                           ;Dimmer_B1.c: 774: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7526  1708  085B               	movf	getPercentValue@value,w
  7527  1709  00D9               	movwf	??_getPercentValue
  7528  170A  01DA               	clrf	??_getPercentValue+1
  7529  170B  09D9               	comf	??_getPercentValue,f
  7530  170C  09DA               	comf	??_getPercentValue+1,f
  7531  170D  0AD9               	incf	??_getPercentValue,f
  7532  170E  1903               	skipnz
  7533  170F  0ADA               	incf	??_getPercentValue+1,f
  7534  1710  0859               	movf	??_getPercentValue,w
  7535  1711  3E64               	addlw	100
  7536  1712  00A8               	movwf	___awtoft@c
  7537  1713  3000               	movlw	0
  7538  1714  3D5A               	addwfc	??_getPercentValue+1,w
  7539  1715  00A9               	movwf	___awtoft@c+1
  7540  1716  3190  2095  3196   	fcall	___awtoft
  7541  1719  0020               	movlb	0	; select bank0
  7542  171A  0828               	movf	?___awtoft,w
  7543  171B  00B1               	movwf	___ftmul@f2
  7544  171C  0829               	movf	?___awtoft+1,w
  7545  171D  00B2               	movwf	___ftmul@f2+1
  7546  171E  082A               	movf	?___awtoft+2,w
  7547  171F  00B3               	movwf	___ftmul@f2+2
  7548  1720  085C               	movf	getPercentValue@i,w
  7549  1721  00AE               	movwf	___ftmul@f1
  7550  1722  085D               	movf	getPercentValue@i+1,w
  7551  1723  00AF               	movwf	___ftmul@f1+1
  7552  1724  085E               	movf	getPercentValue@i+2,w
  7553  1725  00B0               	movwf	___ftmul@f1+2
  7554  1726  3186  26E5  3196   	fcall	___ftmul
  7555  1729  0020               	movlb	0	; select bank0
  7556  172A  082E               	movf	?___ftmul,w
  7557  172B  00C1               	movwf	___ftadd@f2
  7558  172C  082F               	movf	?___ftmul+1,w
  7559  172D  00C2               	movwf	___ftadd@f2+1
  7560  172E  0830               	movf	?___ftmul+2,w
  7561  172F  00C3               	movwf	___ftadd@f2+2
  7562  1730  3000               	movlw	0
  7563  1731  00BE               	movwf	___ftadd@f1
  7564  1732  3000               	movlw	0
  7565  1733  00BF               	movwf	___ftadd@f1+1
  7566  1734  3042               	movlw	66
  7567  1735  00C0               	movwf	___ftadd@f1+2
  7568  1736  3184  243B  3196   	fcall	___ftadd
  7569  1739  0020               	movlb	0	; select bank0
  7570  173A  083E               	movf	?___ftadd,w
  7571  173B  00CB               	movwf	___fttol@f1
  7572  173C  083F               	movf	?___ftadd+1,w
  7573  173D  00CC               	movwf	___fttol@f1+1
  7574  173E  0840               	movf	?___ftadd+2,w
  7575  173F  00CD               	movwf	___fttol@f1+2
  7576  1740  318C  2464         	fcall	___fttol
  7577  1742  0020               	movlb	0	; select bank0
  7578  1743  084B               	movf	?___fttol,w
  7579  1744  0008               	return
  7580  1745                     __end_of_getPercentValue:	
  7581                           
  7582                           	psect	text30
  7583  06E5                     __ptext30:	
  7584 ;; *************** function ___ftmul *****************
  7585 ;; Defined at:
  7586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  f1              3   14[BANK0 ] float 
  7589 ;;  f2              3   17[BANK0 ] float 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7592 ;;  sign            1   29[BANK0 ] unsigned char 
  7593 ;;  cntr            1   28[BANK0 ] unsigned char 
  7594 ;;  exp             1   24[BANK0 ] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  3   14[BANK0 ] float 
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0, pclath, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7604 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;Total ram usage:       16 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    6
  7611 ;; This function calls:
  7612 ;;		___ftpack
  7613 ;; This function is called by:
  7614 ;;		_getPercentValue
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           
  7619                           ;psect for function ___ftmul
  7620  06E5                     ___ftmul:	
  7621                           
  7622                           ;incstack = 0
  7623                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7624  06E5  0020               	movlb	0	; select bank0
  7625  06E6  082E               	movf	___ftmul@f1,w
  7626  06E7  00B4               	movwf	??___ftmul
  7627  06E8  082F               	movf	___ftmul@f1+1,w
  7628  06E9  00B5               	movwf	??___ftmul+1
  7629  06EA  0830               	movf	___ftmul@f1+2,w
  7630  06EB  00B6               	movwf	??___ftmul+2
  7631  06EC  1003               	clrc
  7632  06ED  0D35               	rlf	??___ftmul+1,w
  7633  06EE  0D36               	rlf	??___ftmul+2,w
  7634  06EF  00B7               	movwf	??___ftmul+3
  7635  06F0  0837               	movf	??___ftmul+3,w
  7636  06F1  00B8               	movwf	___ftmul@exp
  7637  06F2  08B8               	movf	___ftmul@exp,f
  7638  06F3  1D03               	skipz
  7639  06F4  2EFC               	goto	l5300
  7640  06F5  3000               	movlw	0
  7641  06F6  00AE               	movwf	?___ftmul
  7642  06F7  3000               	movlw	0
  7643  06F8  00AF               	movwf	?___ftmul+1
  7644  06F9  3000               	movlw	0
  7645  06FA  00B0               	movwf	?___ftmul+2
  7646  06FB  0008               	return
  7647  06FC                     l5300:	
  7648  06FC  0831               	movf	___ftmul@f2,w
  7649  06FD  00B4               	movwf	??___ftmul
  7650  06FE  0832               	movf	___ftmul@f2+1,w
  7651  06FF  00B5               	movwf	??___ftmul+1
  7652  0700  0833               	movf	___ftmul@f2+2,w
  7653  0701  00B6               	movwf	??___ftmul+2
  7654  0702  1003               	clrc
  7655  0703  0D35               	rlf	??___ftmul+1,w
  7656  0704  0D36               	rlf	??___ftmul+2,w
  7657  0705  00B7               	movwf	??___ftmul+3
  7658  0706  0837               	movf	??___ftmul+3,w
  7659  0707  00BD               	movwf	___ftmul@sign
  7660  0708  08BD               	movf	___ftmul@sign,f
  7661  0709  1D03               	skipz
  7662  070A  2F12               	goto	l5306
  7663  070B  3000               	movlw	0
  7664  070C  00AE               	movwf	?___ftmul
  7665  070D  3000               	movlw	0
  7666  070E  00AF               	movwf	?___ftmul+1
  7667  070F  3000               	movlw	0
  7668  0710  00B0               	movwf	?___ftmul+2
  7669  0711  0008               	return
  7670  0712                     l5306:	
  7671  0712  083D               	movf	___ftmul@sign,w
  7672  0713  3E7B               	addlw	123
  7673  0714  00B4               	movwf	??___ftmul
  7674  0715  0834               	movf	??___ftmul,w
  7675  0716  07B8               	addwf	___ftmul@exp,f
  7676  0717  082E               	movf	___ftmul@f1,w
  7677  0718  00B4               	movwf	??___ftmul
  7678  0719  082F               	movf	___ftmul@f1+1,w
  7679  071A  00B5               	movwf	??___ftmul+1
  7680  071B  0830               	movf	___ftmul@f1+2,w
  7681  071C  00B6               	movwf	??___ftmul+2
  7682  071D  3010               	movlw	16
  7683  071E                     u3655:	
  7684  071E  36B6               	lsrf	??___ftmul+2,f
  7685  071F  0CB5               	rrf	??___ftmul+1,f
  7686  0720  0CB4               	rrf	??___ftmul,f
  7687  0721  0B89               	decfsz	9,f
  7688  0722  2F1E               	goto	u3655
  7689  0723  0834               	movf	??___ftmul,w
  7690  0724  00B7               	movwf	??___ftmul+3
  7691  0725  0837               	movf	??___ftmul+3,w
  7692  0726  00BD               	movwf	___ftmul@sign
  7693  0727  0831               	movf	___ftmul@f2,w
  7694  0728  00B4               	movwf	??___ftmul
  7695  0729  0832               	movf	___ftmul@f2+1,w
  7696  072A  00B5               	movwf	??___ftmul+1
  7697  072B  0833               	movf	___ftmul@f2+2,w
  7698  072C  00B6               	movwf	??___ftmul+2
  7699  072D  3010               	movlw	16
  7700  072E                     u3665:	
  7701  072E  36B6               	lsrf	??___ftmul+2,f
  7702  072F  0CB5               	rrf	??___ftmul+1,f
  7703  0730  0CB4               	rrf	??___ftmul,f
  7704  0731  0B89               	decfsz	9,f
  7705  0732  2F2E               	goto	u3665
  7706  0733  0834               	movf	??___ftmul,w
  7707  0734  00B7               	movwf	??___ftmul+3
  7708  0735  0837               	movf	??___ftmul+3,w
  7709  0736  06BD               	xorwf	___ftmul@sign,f
  7710  0737  3080               	movlw	128
  7711  0738  00B4               	movwf	??___ftmul
  7712  0739  0834               	movf	??___ftmul,w
  7713  073A  05BD               	andwf	___ftmul@sign,f
  7714  073B  17AF               	bsf	___ftmul@f1+1,7
  7715  073C  17B2               	bsf	___ftmul@f2+1,7
  7716  073D  30FF               	movlw	255
  7717  073E  05B1               	andwf	___ftmul@f2,f
  7718  073F  30FF               	movlw	255
  7719  0740  05B2               	andwf	___ftmul@f2+1,f
  7720  0741  3000               	movlw	0
  7721  0742  05B3               	andwf	___ftmul@f2+2,f
  7722  0743  3000               	movlw	0
  7723  0744  00B9               	movwf	___ftmul@f3_as_product
  7724  0745  3000               	movlw	0
  7725  0746  00BA               	movwf	___ftmul@f3_as_product+1
  7726  0747  3000               	movlw	0
  7727  0748  00BB               	movwf	___ftmul@f3_as_product+2
  7728  0749  3007               	movlw	7
  7729  074A  00B4               	movwf	??___ftmul
  7730  074B  0834               	movf	??___ftmul,w
  7731  074C  00BC               	movwf	___ftmul@cntr
  7732  074D                     l5318:	
  7733  074D  1C2E               	btfss	___ftmul@f1,0
  7734  074E  2F55               	goto	l5322
  7735  074F  0831               	movf	___ftmul@f2,w
  7736  0750  07B9               	addwf	___ftmul@f3_as_product,f
  7737  0751  0832               	movf	___ftmul@f2+1,w
  7738  0752  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7739  0753  0833               	movf	___ftmul@f2+2,w
  7740  0754  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7741  0755                     l5322:	
  7742  0755  3001               	movlw	1
  7743  0756                     u3685:	
  7744  0756  36B0               	lsrf	___ftmul@f1+2,f
  7745  0757  0CAF               	rrf	___ftmul@f1+1,f
  7746  0758  0CAE               	rrf	___ftmul@f1,f
  7747  0759  0B89               	decfsz	9,f
  7748  075A  2F56               	goto	u3685
  7749  075B  3001               	movlw	1
  7750  075C                     u3695:	
  7751  075C  35B1               	lslf	___ftmul@f2,f
  7752  075D  0DB2               	rlf	___ftmul@f2+1,f
  7753  075E  0DB3               	rlf	___ftmul@f2+2,f
  7754  075F  0B89               	decfsz	9,f
  7755  0760  2F5C               	goto	u3695
  7756  0761  3001               	movlw	1
  7757  0762  02BC               	subwf	___ftmul@cntr,f
  7758  0763  1D03               	btfss	3,2
  7759  0764  2F4D               	goto	l5318
  7760  0765  3009               	movlw	9
  7761  0766  00B4               	movwf	??___ftmul
  7762  0767  0834               	movf	??___ftmul,w
  7763  0768  00BC               	movwf	___ftmul@cntr
  7764  0769                     l5330:	
  7765  0769  1C2E               	btfss	___ftmul@f1,0
  7766  076A  2F71               	goto	l5334
  7767  076B  0831               	movf	___ftmul@f2,w
  7768  076C  07B9               	addwf	___ftmul@f3_as_product,f
  7769  076D  0832               	movf	___ftmul@f2+1,w
  7770  076E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7771  076F  0833               	movf	___ftmul@f2+2,w
  7772  0770  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7773  0771                     l5334:	
  7774  0771  3001               	movlw	1
  7775  0772                     u3725:	
  7776  0772  36B0               	lsrf	___ftmul@f1+2,f
  7777  0773  0CAF               	rrf	___ftmul@f1+1,f
  7778  0774  0CAE               	rrf	___ftmul@f1,f
  7779  0775  0B89               	decfsz	9,f
  7780  0776  2F72               	goto	u3725
  7781  0777  3001               	movlw	1
  7782  0778                     u3735:	
  7783  0778  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7784  0779  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7785  077A  0CB9               	rrf	___ftmul@f3_as_product,f
  7786  077B  0B89               	decfsz	9,f
  7787  077C  2F78               	goto	u3735
  7788  077D  3001               	movlw	1
  7789  077E  02BC               	subwf	___ftmul@cntr,f
  7790  077F  1D03               	btfss	3,2
  7791  0780  2F69               	goto	l5330
  7792  0781  0839               	movf	___ftmul@f3_as_product,w
  7793  0782  00A0               	movwf	___ftpack@arg
  7794  0783  083A               	movf	___ftmul@f3_as_product+1,w
  7795  0784  00A1               	movwf	___ftpack@arg+1
  7796  0785  083B               	movf	___ftmul@f3_as_product+2,w
  7797  0786  00A2               	movwf	___ftpack@arg+2
  7798  0787  0838               	movf	___ftmul@exp,w
  7799  0788  00B4               	movwf	??___ftmul
  7800  0789  0834               	movf	??___ftmul,w
  7801  078A  00A3               	movwf	___ftpack@exp
  7802  078B  083D               	movf	___ftmul@sign,w
  7803  078C  00B5               	movwf	??___ftmul+1
  7804  078D  0835               	movf	??___ftmul+1,w
  7805  078E  00A4               	movwf	___ftpack@sign
  7806  078F  3188  20DD         	fcall	___ftpack
  7807  0791  0020               	movlb	0	; select bank0
  7808  0792  0820               	movf	?___ftpack,w
  7809  0793  00AE               	movwf	?___ftmul
  7810  0794  0821               	movf	?___ftpack+1,w
  7811  0795  00AF               	movwf	?___ftmul+1
  7812  0796  0822               	movf	?___ftpack+2,w
  7813  0797  00B0               	movwf	?___ftmul+2
  7814  0798  0008               	return
  7815  0799                     __end_of___ftmul:	
  7816                           
  7817                           	psect	text31
  7818  043B                     __ptext31:	
  7819 ;; *************** function ___ftadd *****************
  7820 ;; Defined at:
  7821 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  f1              3   30[BANK0 ] float 
  7824 ;;  f2              3   33[BANK0 ] float 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  exp1            1   42[BANK0 ] unsigned char 
  7827 ;;  exp2            1   41[BANK0 ] unsigned char 
  7828 ;;  sign            1   40[BANK0 ] unsigned char 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  3   30[BANK0 ] float 
  7831 ;; Registers used:
  7832 ;;		wreg, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7838 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;Total ram usage:       13 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    6
  7845 ;; This function calls:
  7846 ;;		___ftpack
  7847 ;; This function is called by:
  7848 ;;		_getPercentValue
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function ___ftadd
  7854  043B                     ___ftadd:	
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7858  043B  0020               	movlb	0	; select bank0
  7859  043C  083E               	movf	___ftadd@f1,w
  7860  043D  00C4               	movwf	??___ftadd
  7861  043E  083F               	movf	___ftadd@f1+1,w
  7862  043F  00C5               	movwf	??___ftadd+1
  7863  0440  0840               	movf	___ftadd@f1+2,w
  7864  0441  00C6               	movwf	??___ftadd+2
  7865  0442  1003               	clrc
  7866  0443  0D45               	rlf	??___ftadd+1,w
  7867  0444  0D46               	rlf	??___ftadd+2,w
  7868  0445  00C7               	movwf	??___ftadd+3
  7869  0446  0847               	movf	??___ftadd+3,w
  7870  0447  00CA               	movwf	___ftadd@exp1
  7871  0448  0841               	movf	___ftadd@f2,w
  7872  0449  00C4               	movwf	??___ftadd
  7873  044A  0842               	movf	___ftadd@f2+1,w
  7874  044B  00C5               	movwf	??___ftadd+1
  7875  044C  0843               	movf	___ftadd@f2+2,w
  7876  044D  00C6               	movwf	??___ftadd+2
  7877  044E  1003               	clrc
  7878  044F  0D45               	rlf	??___ftadd+1,w
  7879  0450  0D46               	rlf	??___ftadd+2,w
  7880  0451  00C7               	movwf	??___ftadd+3
  7881  0452  0847               	movf	??___ftadd+3,w
  7882  0453  00C9               	movwf	___ftadd@exp2
  7883  0454  084A               	movf	___ftadd@exp1,w
  7884  0455  1903               	btfsc	3,2
  7885  0456  2C63               	goto	l5188
  7886  0457  0849               	movf	___ftadd@exp2,w
  7887  0458  024A               	subwf	___ftadd@exp1,w
  7888  0459  1803               	skipnc
  7889  045A  2C6A               	goto	l5192
  7890  045B  034A               	decf	___ftadd@exp1,w
  7891  045C  3AFF               	xorlw	255
  7892  045D  0749               	addwf	___ftadd@exp2,w
  7893  045E  00C4               	movwf	??___ftadd
  7894  045F  3019               	movlw	25
  7895  0460  0244               	subwf	??___ftadd,w
  7896  0461  1C03               	skipc
  7897  0462  2C6A               	goto	l5192
  7898  0463                     l5188:	
  7899  0463  0841               	movf	___ftadd@f2,w
  7900  0464  00BE               	movwf	?___ftadd
  7901  0465  0842               	movf	___ftadd@f2+1,w
  7902  0466  00BF               	movwf	?___ftadd+1
  7903  0467  0843               	movf	___ftadd@f2+2,w
  7904  0468  00C0               	movwf	?___ftadd+2
  7905  0469  0008               	return
  7906  046A                     l5192:	
  7907  046A  0849               	movf	___ftadd@exp2,w
  7908  046B  1903               	btfsc	3,2
  7909  046C  0008               	return
  7910  046D  084A               	movf	___ftadd@exp1,w
  7911  046E  0249               	subwf	___ftadd@exp2,w
  7912  046F  1803               	skipnc
  7913  0470  2C79               	goto	l5198
  7914  0471  0349               	decf	___ftadd@exp2,w
  7915  0472  3AFF               	xorlw	255
  7916  0473  074A               	addwf	___ftadd@exp1,w
  7917  0474  00C4               	movwf	??___ftadd
  7918  0475  3019               	movlw	25
  7919  0476  0244               	subwf	??___ftadd,w
  7920  0477  1803               	btfsc	3,0
  7921  0478  0008               	return
  7922  0479                     l5198:	
  7923  0479  3006               	movlw	6
  7924  047A  00C4               	movwf	??___ftadd
  7925  047B  0844               	movf	??___ftadd,w
  7926  047C  00C8               	movwf	___ftadd@sign
  7927  047D  1BC0               	btfsc	___ftadd@f1+2,7
  7928  047E  17C8               	bsf	___ftadd@sign,7
  7929  047F  1BC3               	btfsc	___ftadd@f2+2,7
  7930  0480  1748               	bsf	___ftadd@sign,6
  7931  0481  17BF               	bsf	___ftadd@f1+1,7
  7932  0482  30FF               	movlw	255
  7933  0483  05BE               	andwf	___ftadd@f1,f
  7934  0484  30FF               	movlw	255
  7935  0485  05BF               	andwf	___ftadd@f1+1,f
  7936  0486  3000               	movlw	0
  7937  0487  05C0               	andwf	___ftadd@f1+2,f
  7938  0488  17C2               	bsf	___ftadd@f2+1,7
  7939  0489  30FF               	movlw	255
  7940  048A  05C1               	andwf	___ftadd@f2,f
  7941  048B  30FF               	movlw	255
  7942  048C  05C2               	andwf	___ftadd@f2+1,f
  7943  048D  3000               	movlw	0
  7944  048E  05C3               	andwf	___ftadd@f2+2,f
  7945  048F  0849               	movf	___ftadd@exp2,w
  7946  0490  024A               	subwf	___ftadd@exp1,w
  7947  0491  1803               	skipnc
  7948  0492  2CB5               	goto	l5220
  7949  0493                     l5210:	
  7950  0493  3001               	movlw	1
  7951  0494                     u3415:	
  7952  0494  35C1               	lslf	___ftadd@f2,f
  7953  0495  0DC2               	rlf	___ftadd@f2+1,f
  7954  0496  0DC3               	rlf	___ftadd@f2+2,f
  7955  0497  0B89               	decfsz	9,f
  7956  0498  2C94               	goto	u3415
  7957  0499  3001               	movlw	1
  7958  049A  02C9               	subwf	___ftadd@exp2,f
  7959  049B  0849               	movf	___ftadd@exp2,w
  7960  049C  064A               	xorwf	___ftadd@exp1,w
  7961  049D  1903               	skipnz
  7962  049E  2CB0               	goto	l5218
  7963  049F  3001               	movlw	1
  7964  04A0  02C8               	subwf	___ftadd@sign,f
  7965  04A1  0848               	movf	___ftadd@sign,w
  7966  04A2  3907               	andlw	7
  7967  04A3  1903               	btfsc	3,2
  7968  04A4  2CB0               	goto	l5218
  7969  04A5  2C93               	goto	l5210
  7970  04A6                     l5216:	
  7971  04A6  3001               	movlw	1
  7972  04A7                     u3445:	
  7973  04A7  36C0               	lsrf	___ftadd@f1+2,f
  7974  04A8  0CBF               	rrf	___ftadd@f1+1,f
  7975  04A9  0CBE               	rrf	___ftadd@f1,f
  7976  04AA  0B89               	decfsz	9,f
  7977  04AB  2CA7               	goto	u3445
  7978  04AC  3001               	movlw	1
  7979  04AD  00C4               	movwf	??___ftadd
  7980  04AE  0844               	movf	??___ftadd,w
  7981  04AF  07CA               	addwf	___ftadd@exp1,f
  7982  04B0                     l5218:	
  7983  04B0  084A               	movf	___ftadd@exp1,w
  7984  04B1  0649               	xorwf	___ftadd@exp2,w
  7985  04B2  1903               	btfsc	3,2
  7986  04B3  2CDA               	goto	l2905
  7987  04B4  2CA6               	goto	l5216
  7988  04B5                     l5220:	
  7989  04B5  084A               	movf	___ftadd@exp1,w
  7990  04B6  0249               	subwf	___ftadd@exp2,w
  7991  04B7  1803               	skipnc
  7992  04B8  2CDA               	goto	l2905
  7993  04B9                     l5222:	
  7994  04B9  3001               	movlw	1
  7995  04BA                     u3475:	
  7996  04BA  35BE               	lslf	___ftadd@f1,f
  7997  04BB  0DBF               	rlf	___ftadd@f1+1,f
  7998  04BC  0DC0               	rlf	___ftadd@f1+2,f
  7999  04BD  0B89               	decfsz	9,f
  8000  04BE  2CBA               	goto	u3475
  8001  04BF  3001               	movlw	1
  8002  04C0  02CA               	subwf	___ftadd@exp1,f
  8003  04C1  0849               	movf	___ftadd@exp2,w
  8004  04C2  064A               	xorwf	___ftadd@exp1,w
  8005  04C3  1903               	skipnz
  8006  04C4  2CD6               	goto	l5230
  8007  04C5  3001               	movlw	1
  8008  04C6  02C8               	subwf	___ftadd@sign,f
  8009  04C7  0848               	movf	___ftadd@sign,w
  8010  04C8  3907               	andlw	7
  8011  04C9  1903               	btfsc	3,2
  8012  04CA  2CD6               	goto	l5230
  8013  04CB  2CB9               	goto	l5222
  8014  04CC                     l5228:	
  8015  04CC  3001               	movlw	1
  8016  04CD                     u3505:	
  8017  04CD  36C3               	lsrf	___ftadd@f2+2,f
  8018  04CE  0CC2               	rrf	___ftadd@f2+1,f
  8019  04CF  0CC1               	rrf	___ftadd@f2,f
  8020  04D0  0B89               	decfsz	9,f
  8021  04D1  2CCD               	goto	u3505
  8022  04D2  3001               	movlw	1
  8023  04D3  00C4               	movwf	??___ftadd
  8024  04D4  0844               	movf	??___ftadd,w
  8025  04D5  07C9               	addwf	___ftadd@exp2,f
  8026  04D6                     l5230:	
  8027  04D6  084A               	movf	___ftadd@exp1,w
  8028  04D7  0649               	xorwf	___ftadd@exp2,w
  8029  04D8  1D03               	skipz
  8030  04D9  2CCC               	goto	l5228
  8031  04DA                     l2905:	
  8032  04DA  1FC8               	btfss	___ftadd@sign,7
  8033  04DB  2CEC               	goto	l5234
  8034  04DC  30FF               	movlw	255
  8035  04DD  06BE               	xorwf	___ftadd@f1,f
  8036  04DE  30FF               	movlw	255
  8037  04DF  06BF               	xorwf	___ftadd@f1+1,f
  8038  04E0  30FF               	movlw	255
  8039  04E1  06C0               	xorwf	___ftadd@f1+2,f
  8040  04E2  3001               	movlw	1
  8041  04E3  07BE               	addwf	___ftadd@f1,f
  8042  04E4  3000               	movlw	0
  8043  04E5  1803               	skipnc
  8044  04E6  3001               	movlw	1
  8045  04E7  07BF               	addwf	___ftadd@f1+1,f
  8046  04E8  3000               	movlw	0
  8047  04E9  1803               	skipnc
  8048  04EA  3001               	movlw	1
  8049  04EB  07C0               	addwf	___ftadd@f1+2,f
  8050  04EC                     l5234:	
  8051  04EC  1F48               	btfss	___ftadd@sign,6
  8052  04ED  2CFE               	goto	l5238
  8053  04EE  30FF               	movlw	255
  8054  04EF  06C1               	xorwf	___ftadd@f2,f
  8055  04F0  30FF               	movlw	255
  8056  04F1  06C2               	xorwf	___ftadd@f2+1,f
  8057  04F2  30FF               	movlw	255
  8058  04F3  06C3               	xorwf	___ftadd@f2+2,f
  8059  04F4  3001               	movlw	1
  8060  04F5  07C1               	addwf	___ftadd@f2,f
  8061  04F6  3000               	movlw	0
  8062  04F7  1803               	skipnc
  8063  04F8  3001               	movlw	1
  8064  04F9  07C2               	addwf	___ftadd@f2+1,f
  8065  04FA  3000               	movlw	0
  8066  04FB  1803               	skipnc
  8067  04FC  3001               	movlw	1
  8068  04FD  07C3               	addwf	___ftadd@f2+2,f
  8069  04FE                     l5238:	
  8070  04FE  01C8               	clrf	___ftadd@sign
  8071  04FF  083E               	movf	___ftadd@f1,w
  8072  0500  07C1               	addwf	___ftadd@f2,f
  8073  0501  083F               	movf	___ftadd@f1+1,w
  8074  0502  3DC2               	addwfc	___ftadd@f2+1,f
  8075  0503  0840               	movf	___ftadd@f1+2,w
  8076  0504  3DC3               	addwfc	___ftadd@f2+2,f
  8077  0505  1FC3               	btfss	___ftadd@f2+2,7
  8078  0506  2D19               	goto	l5248
  8079  0507  30FF               	movlw	255
  8080  0508  06C1               	xorwf	___ftadd@f2,f
  8081  0509  30FF               	movlw	255
  8082  050A  06C2               	xorwf	___ftadd@f2+1,f
  8083  050B  30FF               	movlw	255
  8084  050C  06C3               	xorwf	___ftadd@f2+2,f
  8085  050D  3001               	movlw	1
  8086  050E  07C1               	addwf	___ftadd@f2,f
  8087  050F  3000               	movlw	0
  8088  0510  1803               	skipnc
  8089  0511  3001               	movlw	1
  8090  0512  07C2               	addwf	___ftadd@f2+1,f
  8091  0513  3000               	movlw	0
  8092  0514  1803               	skipnc
  8093  0515  3001               	movlw	1
  8094  0516  07C3               	addwf	___ftadd@f2+2,f
  8095  0517  01C8               	clrf	___ftadd@sign
  8096  0518  0AC8               	incf	___ftadd@sign,f
  8097  0519                     l5248:	
  8098  0519  0841               	movf	___ftadd@f2,w
  8099  051A  00A0               	movwf	___ftpack@arg
  8100  051B  0842               	movf	___ftadd@f2+1,w
  8101  051C  00A1               	movwf	___ftpack@arg+1
  8102  051D  0843               	movf	___ftadd@f2+2,w
  8103  051E  00A2               	movwf	___ftpack@arg+2
  8104  051F  084A               	movf	___ftadd@exp1,w
  8105  0520  00C4               	movwf	??___ftadd
  8106  0521  0844               	movf	??___ftadd,w
  8107  0522  00A3               	movwf	___ftpack@exp
  8108  0523  0848               	movf	___ftadd@sign,w
  8109  0524  00C5               	movwf	??___ftadd+1
  8110  0525  0845               	movf	??___ftadd+1,w
  8111  0526  00A4               	movwf	___ftpack@sign
  8112  0527  3188  20DD         	fcall	___ftpack
  8113  0529  0020               	movlb	0	; select bank0
  8114  052A  0820               	movf	?___ftpack,w
  8115  052B  00BE               	movwf	?___ftadd
  8116  052C  0821               	movf	?___ftpack+1,w
  8117  052D  00BF               	movwf	?___ftadd+1
  8118  052E  0822               	movf	?___ftpack+2,w
  8119  052F  00C0               	movwf	?___ftadd+2
  8120  0530  0008               	return
  8121  0531                     __end_of___ftadd:	
  8122                           
  8123                           	psect	text32
  8124  1075                     __ptext32:	
  8125 ;; *************** function _RF_RxDisable *****************
  8126 ;; Defined at:
  8127 ;;		line 210 in file "../src/RF_Control_B1.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  rf              1    wreg     unsigned char 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  rf              1    4[BANK0 ] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;		None               void
  8134 ;; Registers used:
  8135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;Total ram usage:        1 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    7
  8148 ;; This function calls:
  8149 ;;		_CC2500_WriteCommand
  8150 ;;		_RfPointSelect
  8151 ;; This function is called by:
  8152 ;;		_setRF_Main
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _RF_RxDisable
  8158  1075                     _RF_RxDisable:	
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8162                           ;RF_RxDisable@rf stored from wreg
  8163  1075  0020               	movlb	0	; select bank0
  8164  1076  00A4               	movwf	RF_RxDisable@rf
  8165                           
  8166                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  8167  1077  0824               	movf	RF_RxDisable@rf,w
  8168  1078  319D  2577  3190   	fcall	_RfPointSelect
  8169                           
  8170                           ;RF_Control_B1.c: 213: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8171  107B  087A               	movf	_RF,w
  8172  107C  0086               	movwf	6
  8173  107D  0187               	clrf	7
  8174  107E  1881               	btfsc	1,1
  8175  107F  2885               	goto	l6136
  8176  1080  087A               	movf	_RF,w
  8177  1081  0086               	movwf	6
  8178  1082  0187               	clrf	7
  8179  1083  1D81               	btfss	1,3
  8180  1084  0008               	return
  8181  1085                     l6136:	
  8182                           
  8183                           ;RF_Control_B1.c: 214: RF->RxStatus = 0;
  8184  1085  087A               	movf	_RF,w
  8185  1086  0086               	movwf	6
  8186  1087  0187               	clrf	7
  8187  1088  1181               	bcf	1,3
  8188                           
  8189                           ;RF_Control_B1.c: 215: RF->ReceiveGO = 0;
  8190  1089  087A               	movf	_RF,w
  8191  108A  0086               	movwf	6
  8192  108B  0187               	clrf	7
  8193  108C  1081               	bcf	1,1
  8194                           
  8195                           ;RF_Control_B1.c: 216: CC2500_WriteCommand(0x36);
  8196  108D  3036               	movlw	54
  8197  108E  319D  25C0  3190   	fcall	_CC2500_WriteCommand
  8198                           
  8199                           ;RF_Control_B1.c: 217: CC2500_WriteCommand(0x3A);
  8200  1091  303A               	movlw	58
  8201  1092  319D  25C0         	fcall	_CC2500_WriteCommand
  8202  1094  0008               	return
  8203  1095                     __end_of_RF_RxDisable:	
  8204                           
  8205                           	psect	text33
  8206  13EC                     __ptext33:	
  8207 ;; *************** function _CC2500_TxData *****************
  8208 ;; Defined at:
  8209 ;;		line 32 in file "../src/CC2500_B1.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;		None
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        2 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    7
  8230 ;; This function calls:
  8231 ;;		_CC2500_WriteByte
  8232 ;;		_CC2500_WriteCommand
  8233 ;; This function is called by:
  8234 ;;		_setRF_Main
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           
  8239                           ;psect for function _CC2500_TxData
  8240  13EC                     _CC2500_TxData:	
  8241                           
  8242                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8243                           ;CC2500_B1.c: 35: RC4 = 0;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8247  13EC  0020               	movlb	0	; select bank0
  8248  13ED  120E               	bcf	14,4	;volatile
  8249                           
  8250                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8251  13EE  307F               	movlw	127
  8252  13EF  00A4               	movwf	??_CC2500_TxData
  8253  13F0  0824               	movf	??_CC2500_TxData,w
  8254  13F1  0021               	movlb	1	; select bank1
  8255  13F2  00C2               	movwf	_SPI0Buffer^(0+128)
  8256  13F3                     l260:	
  8257                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8258                           
  8259  13F3  0020               	movlb	0	; select bank0
  8260  13F4  190E               	btfsc	14,2	;volatile
  8261  13F5  2BF3               	goto	l260
  8262                           
  8263                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8264  13F6  319E  26CF  3193   	fcall	_CC2500_WriteByte
  8265                           
  8266                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8267  13F9  0021               	movlb	1	; select bank1
  8268  13FA  0843               	movf	_Tx_Length^(0+128),w
  8269  13FB  0020               	movlb	0	; select bank0
  8270  13FC  00A4               	movwf	??_CC2500_TxData
  8271  13FD  0824               	movf	??_CC2500_TxData,w
  8272  13FE  0021               	movlb	1	; select bank1
  8273  13FF  00C2               	movwf	_SPI0Buffer^(0+128)
  8274                           
  8275                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8276  1400  319E  26CF  3193   	fcall	_CC2500_WriteByte
  8277                           
  8278                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8279  1403  0020               	movlb	0	; select bank0
  8280  1404  01A5               	clrf	CC2500_TxData@loop_e
  8281  1405                     l5954:	
  8282  1405  0021               	movlb	1	; select bank1
  8283  1406  0843               	movf	_Tx_Length^(0+128),w
  8284  1407  0020               	movlb	0	; select bank0
  8285  1408  0225               	subwf	CC2500_TxData@loop_e,w
  8286  1409  1803               	btfsc	3,0
  8287  140A  2C1D               	goto	l265
  8288                           
  8289                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8290  140B  0825               	movf	CC2500_TxData@loop_e,w
  8291  140C  3EA0               	addlw	_RF_Data& (0+255)
  8292  140D  0086               	movwf	6
  8293  140E  0187               	clrf	7
  8294  140F  0801               	movf	1,w
  8295  1410  00A4               	movwf	??_CC2500_TxData
  8296  1411  0824               	movf	??_CC2500_TxData,w
  8297  1412  0021               	movlb	1	; select bank1
  8298  1413  00C2               	movwf	_SPI0Buffer^(0+128)
  8299                           
  8300                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8301  1414  319E  26CF  3193   	fcall	_CC2500_WriteByte
  8302  1417  3001               	movlw	1
  8303  1418  0020               	movlb	0	; select bank0
  8304  1419  00A4               	movwf	??_CC2500_TxData
  8305  141A  0824               	movf	??_CC2500_TxData,w
  8306  141B  07A5               	addwf	CC2500_TxData@loop_e,f
  8307  141C  2C05               	goto	l5954
  8308  141D                     l265:	
  8309                           
  8310                           ;CC2500_B1.c: 44: }
  8311                           ;CC2500_B1.c: 45: RC4 = 1;
  8312  141D  160E               	bsf	14,4	;volatile
  8313                           
  8314                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8315  141E  3035               	movlw	53
  8316  141F  319D  25C0  3193   	fcall	_CC2500_WriteCommand
  8317  1422                     l266:	
  8318                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8319                           
  8320  1422  0020               	movlb	0	; select bank0
  8321  1423  1C0D               	btfss	13,0	;volatile
  8322  1424  2C22               	goto	l266
  8323  1425                     l269:	
  8324                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8325                           
  8326  1425  180D               	btfsc	13,0	;volatile
  8327  1426  2C25               	goto	l269
  8328                           
  8329                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8330  1427  3036               	movlw	54
  8331  1428  319D  25C0  3193   	fcall	_CC2500_WriteCommand
  8332                           
  8333                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8334  142B  303B               	movlw	59
  8335  142C  319D  25C0         	fcall	_CC2500_WriteCommand
  8336                           
  8337                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8338  142E  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8339  142F  0008               	return
  8340  1430                     __end_of_CC2500_TxData:	
  8341                           
  8342                           	psect	text34
  8343  0821                     __ptext34:	
  8344 ;; *************** function _CC2500_RxData *****************
  8345 ;; Defined at:
  8346 ;;		line 57 in file "../src/CC2500_B1.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;		None               void
  8353 ;; Registers used:
  8354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;Total ram usage:        2 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    7
  8367 ;; This function calls:
  8368 ;;		_CC2500_ReadByte
  8369 ;;		_CC2500_ReadStatus
  8370 ;;		_CC2500_WriteByte
  8371 ;;		_CC2500_WriteCommand
  8372 ;; This function is called by:
  8373 ;;		_setRF_Main
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _CC2500_RxData
  8379  0821                     _CC2500_RxData:	
  8380                           
  8381                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8382                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8386  0821  0020               	movlb	0	; select bank0
  8387  0822  180D               	btfsc	13,0	;volatile
  8388  0823                     l276:	
  8389                           ;CC2500_B1.c: 63: {
  8390                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8391                           
  8392  0823  180D               	btfsc	13,0	;volatile
  8393  0824  2823               	goto	l276
  8394                           
  8395                           ;CC2500_B1.c: 65: }
  8396                           ;CC2500_B1.c: 67: CC2500_ReadStatus(0x3B);
  8397  0825  303B               	movlw	59
  8398  0826  319F  274F  3188   	fcall	_CC2500_ReadStatus
  8399                           
  8400                           ;CC2500_B1.c: 68: if (s_data != 0) {
  8401  0829  0021               	movlb	1	; select bank1
  8402  082A  0846               	movf	_s_data^(0+128),w
  8403  082B  1903               	btfsc	3,2
  8404  082C  2877               	goto	l6000
  8405                           
  8406                           ;CC2500_B1.c: 69: RC4 = 0;
  8407  082D  0020               	movlb	0	; select bank0
  8408  082E  120E               	bcf	14,4	;volatile
  8409                           
  8410                           ;CC2500_B1.c: 70: SPI0Buffer = 0x3F + 0xC0;
  8411  082F  30FF               	movlw	255
  8412  0830  00A4               	movwf	??_CC2500_RxData
  8413  0831  0824               	movf	??_CC2500_RxData,w
  8414  0832  0021               	movlb	1	; select bank1
  8415  0833  00C2               	movwf	_SPI0Buffer^(0+128)
  8416  0834                     l280:	
  8417                           ;CC2500_B1.c: 71: while (RC2 == 1);
  8418                           
  8419  0834  0020               	movlb	0	; select bank0
  8420  0835  190E               	btfsc	14,2	;volatile
  8421  0836  2834               	goto	l280
  8422                           
  8423                           ;CC2500_B1.c: 72: CC2500_WriteByte();
  8424  0837  319E  26CF  3188   	fcall	_CC2500_WriteByte
  8425                           
  8426                           ;CC2500_B1.c: 74: CC2500_ReadByte();
  8427  083A  319F  2786  3188   	fcall	_CC2500_ReadByte
  8428                           
  8429                           ;CC2500_B1.c: 75: Rx_Length = SPI0Buffer;
  8430  083D  0021               	movlb	1	; select bank1
  8431  083E  0842               	movf	_SPI0Buffer^(0+128),w
  8432  083F  0020               	movlb	0	; select bank0
  8433  0840  00A4               	movwf	??_CC2500_RxData
  8434  0841  0824               	movf	??_CC2500_RxData,w
  8435  0842  0021               	movlb	1	; select bank1
  8436  0843  00C1               	movwf	_Rx_Length^(0+128)
  8437                           
  8438                           ;CC2500_B1.c: 76: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8439  0844  0020               	movlb	0	; select bank0
  8440  0845  01A5               	clrf	CC2500_RxData@loop_f
  8441  0846                     l5986:	
  8442  0846  0021               	movlb	1	; select bank1
  8443  0847  0841               	movf	_Rx_Length^(0+128),w
  8444  0848  0020               	movlb	0	; select bank0
  8445  0849  0225               	subwf	CC2500_RxData@loop_f,w
  8446  084A  1803               	btfsc	3,0
  8447  084B  285E               	goto	l5988
  8448                           
  8449                           ;CC2500_B1.c: 77: CC2500_ReadByte();
  8450  084C  319F  2786  3188   	fcall	_CC2500_ReadByte
  8451                           
  8452                           ;CC2500_B1.c: 78: RF_Data[loop_f] = SPI0Buffer;
  8453  084F  0021               	movlb	1	; select bank1
  8454  0850  0842               	movf	_SPI0Buffer^(0+128),w
  8455  0851  0020               	movlb	0	; select bank0
  8456  0852  00A4               	movwf	??_CC2500_RxData
  8457  0853  0825               	movf	CC2500_RxData@loop_f,w
  8458  0854  3EA0               	addlw	_RF_Data& (0+255)
  8459  0855  0086               	movwf	6
  8460  0856  0187               	clrf	7
  8461  0857  0824               	movf	??_CC2500_RxData,w
  8462  0858  0081               	movwf	1
  8463  0859  3001               	movlw	1
  8464  085A  00A4               	movwf	??_CC2500_RxData
  8465  085B  0824               	movf	??_CC2500_RxData,w
  8466  085C  07A5               	addwf	CC2500_RxData@loop_f,f
  8467  085D  2846               	goto	l5986
  8468  085E                     l5988:	
  8469                           
  8470                           ;CC2500_B1.c: 79: }
  8471                           ;CC2500_B1.c: 80: CC2500_ReadByte();
  8472  085E  319F  2786  3188   	fcall	_CC2500_ReadByte
  8473                           
  8474                           ;CC2500_B1.c: 81: RSSI = SPI0Buffer;
  8475  0861  0021               	movlb	1	; select bank1
  8476  0862  0842               	movf	_SPI0Buffer^(0+128),w
  8477  0863  0020               	movlb	0	; select bank0
  8478  0864  00A4               	movwf	??_CC2500_RxData
  8479  0865  0824               	movf	??_CC2500_RxData,w
  8480  0866  0021               	movlb	1	; select bank1
  8481  0867  00C0               	movwf	_RSSI^(0+128)
  8482                           
  8483                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8484  0868  319F  2786  3188   	fcall	_CC2500_ReadByte
  8485                           
  8486                           ;CC2500_B1.c: 83: CRC = SPI0Buffer;
  8487  086B  0021               	movlb	1	; select bank1
  8488  086C  0842               	movf	_SPI0Buffer^(0+128),w
  8489  086D  0020               	movlb	0	; select bank0
  8490  086E  00A4               	movwf	??_CC2500_RxData
  8491  086F  0824               	movf	??_CC2500_RxData,w
  8492  0870  0021               	movlb	1	; select bank1
  8493  0871  00B8               	movwf	_CRC^(0+128)
  8494                           
  8495                           ;CC2500_B1.c: 84: RC4 = 1;
  8496  0872  0020               	movlb	0	; select bank0
  8497  0873  160E               	bsf	14,4	;volatile
  8498                           
  8499                           ;CC2500_B1.c: 85: if (CRC & 0x80)
  8500  0874  0021               	movlb	1	; select bank1
  8501  0875  1BB8               	btfsc	_CRC^(0+128),7
  8502                           
  8503                           ;CC2500_B1.c: 86: Receive_OK = 1;
  8504  0876  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8505  0877                     l6000:	
  8506                           
  8507                           ;CC2500_B1.c: 87: }
  8508                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8509  0877  3036               	movlw	54
  8510  0878  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  8511                           
  8512                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8513  087B  303A               	movlw	58
  8514  087C  319D  25C0         	fcall	_CC2500_WriteCommand
  8515  087E  0008               	return
  8516  087F                     __end_of_CC2500_RxData:	
  8517                           
  8518                           	psect	text35
  8519  1F4F                     __ptext35:	
  8520 ;; *************** function _CC2500_ReadStatus *****************
  8521 ;; Defined at:
  8522 ;;		line 262 in file "../src/CC2500_B1.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  status_addr     1    wreg     unsigned char 
  8525 ;; Auto vars:     Size  Location     Type
  8526 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;		None               void
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, status,0, pclath, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;Total ram usage:        2 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    6
  8543 ;; This function calls:
  8544 ;;		_CC2500_ReadByte
  8545 ;;		_CC2500_WriteByte
  8546 ;; This function is called by:
  8547 ;;		_CC2500_RxData
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           
  8552                           ;psect for function _CC2500_ReadStatus
  8553  1F4F                     _CC2500_ReadStatus:	
  8554                           
  8555                           ;incstack = 0
  8556                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8557                           ;CC2500_ReadStatus@status_addr stored from wreg
  8558  1F4F  0020               	movlb	0	; select bank0
  8559  1F50  00A3               	movwf	CC2500_ReadStatus@status_addr
  8560                           
  8561                           ;CC2500_B1.c: 263: RC4 = 0;
  8562  1F51  120E               	bcf	14,4	;volatile
  8563                           
  8564                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
  8565  1F52  0823               	movf	CC2500_ReadStatus@status_addr,w
  8566  1F53  3EC0               	addlw	192
  8567  1F54  00A2               	movwf	??_CC2500_ReadStatus
  8568  1F55  0822               	movf	??_CC2500_ReadStatus,w
  8569  1F56  0021               	movlb	1	; select bank1
  8570  1F57  00C2               	movwf	_SPI0Buffer^(0+128)
  8571  1F58                     l356:	
  8572                           ;CC2500_B1.c: 266: while (RC2 == 1);
  8573                           
  8574  1F58  0020               	movlb	0	; select bank0
  8575  1F59  190E               	btfsc	14,2	;volatile
  8576  1F5A  2F58               	goto	l356
  8577                           
  8578                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8579  1F5B  319E  26CF  319F   	fcall	_CC2500_WriteByte
  8580                           
  8581                           ;CC2500_B1.c: 269: CC2500_ReadByte();
  8582  1F5E  319F  2786         	fcall	_CC2500_ReadByte
  8583                           
  8584                           ;CC2500_B1.c: 270: RC4 = 1;
  8585  1F60  0020               	movlb	0	; select bank0
  8586  1F61  160E               	bsf	14,4	;volatile
  8587                           
  8588                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
  8589  1F62  0021               	movlb	1	; select bank1
  8590  1F63  0842               	movf	_SPI0Buffer^(0+128),w
  8591  1F64  0020               	movlb	0	; select bank0
  8592  1F65  00A2               	movwf	??_CC2500_ReadStatus
  8593  1F66  0822               	movf	??_CC2500_ReadStatus,w
  8594  1F67  0021               	movlb	1	; select bank1
  8595  1F68  00C6               	movwf	_s_data^(0+128)
  8596  1F69  0008               	return
  8597  1F6A                     __end_of_CC2500_ReadStatus:	
  8598                           
  8599                           	psect	text36
  8600  1F86                     __ptext36:	
  8601 ;; *************** function _CC2500_ReadByte *****************
  8602 ;; Defined at:
  8603 ;;		line 206 in file "../src/CC2500_B1.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, status,2, status,0
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        2 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    5
  8624 ;; This function calls:
  8625 ;;		Nothing
  8626 ;; This function is called by:
  8627 ;;		_CC2500_RxData
  8628 ;;		_CC2500_ReadStatus
  8629 ;;		_CC2500_ReadREG
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_ReadByte
  8635  1F86                     _CC2500_ReadByte:	
  8636                           
  8637                           ;CC2500_B1.c: 207: unsigned char loop_b;
  8638                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8642  1F86  0020               	movlb	0	; select bank0
  8643  1F87  01A1               	clrf	CC2500_ReadByte@loop_b
  8644  1F88                     L8:	
  8645  1F88  3008               	movlw	8
  8646  1F89  0221               	subwf	CC2500_ReadByte@loop_b,w
  8647  1F8A  1803               	btfsc	3,0
  8648  1F8B  0008               	return
  8649                           
  8650                           ;CC2500_B1.c: 209: RC1 = 1;
  8651  1F8C  148E               	bsf	14,1	;volatile
  8652                           
  8653                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
  8654  1F8D  1003               	clrc
  8655  1F8E  0021               	movlb	1	; select bank1
  8656  1F8F  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8657                           
  8658                           ;CC2500_B1.c: 211: if (RC2 == 1)
  8659  1F90  0020               	movlb	0	; select bank0
  8660  1F91  1D0E               	btfss	14,2	;volatile
  8661  1F92  2F96               	goto	l5702
  8662                           
  8663                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
  8664  1F93  0021               	movlb	1	; select bank1
  8665  1F94  1442               	bsf	_SPI0Buffer^(0+128),0
  8666  1F95  2F9C               	goto	l5704
  8667  1F96                     l5702:	
  8668                           
  8669                           ;CC2500_B1.c: 213: else
  8670                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
  8671  1F96  30FE               	movlw	254
  8672  1F97  0020               	movlb	0	; select bank0
  8673  1F98  00A0               	movwf	??_CC2500_ReadByte
  8674  1F99  0820               	movf	??_CC2500_ReadByte,w
  8675  1F9A  0021               	movlb	1	; select bank1
  8676  1F9B  05C2               	andwf	_SPI0Buffer^(0+128),f
  8677  1F9C                     l5704:	
  8678                           
  8679                           ;CC2500_B1.c: 215: RC1 = 0;
  8680  1F9C  0020               	movlb	0	; select bank0
  8681  1F9D  108E               	bcf	14,1	;volatile
  8682  1F9E  3001               	movlw	1
  8683  1F9F  00A0               	movwf	??_CC2500_ReadByte
  8684  1FA0  0820               	movf	??_CC2500_ReadByte,w
  8685  1FA1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8686  1FA2  2F88               	goto	L8
  8687  1FA3                     __end_of_CC2500_ReadByte:	
  8688                           
  8689                           	psect	text37
  8690  1C3F                     __ptext37:	
  8691 ;; *************** function _RF_Initialization *****************
  8692 ;; Defined at:
  8693 ;;		line 19 in file "../src/RF_Control_B1.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;		None
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;		None
  8698 ;; Return value:  Size  Location     Type
  8699 ;;		None               void
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;Total ram usage:        0 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    6
  8714 ;; This function calls:
  8715 ;;		_setRF_Initialization
  8716 ;; This function is called by:
  8717 ;;		_main
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _RF_Initialization
  8723  1C3F                     _RF_Initialization:	
  8724                           
  8725                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
  8726                           
  8727                           ;incstack = 0
  8728                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8729  1C3F  3001               	movlw	1
  8730  1C40  319C  247E         	fcall	_setRF_Initialization
  8731  1C42  0008               	return
  8732  1C43                     __end_of_RF_Initialization:	
  8733                           
  8734                           	psect	text38
  8735  1C7E                     __ptext38:	
  8736 ;; *************** function _setRF_Initialization *****************
  8737 ;; Defined at:
  8738 ;;		line 52 in file "../src/RF_Control_B1.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  rf              1    wreg     unsigned char 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  rf              1    0[COMMON] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;		None               void
  8745 ;; Registers used:
  8746 ;;		wreg
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;Total ram usage:        1 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    5
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_RF_Initialization
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           
  8767                           ;psect for function _setRF_Initialization
  8768  1C7E                     _setRF_Initialization:	
  8769                           
  8770                           ;RF_Control_B1.c: 55: Tx_Length = 21;
  8771                           
  8772                           ;incstack = 0
  8773                           ; Regs used in _setRF_Initialization: [wreg]
  8774  1C7E  3015               	movlw	21
  8775  1C7F  0020               	movlb	0	; select bank0
  8776  1C80  00A0               	movwf	??_setRF_Initialization
  8777  1C81  0820               	movf	??_setRF_Initialization,w
  8778  1C82  0021               	movlb	1	; select bank1
  8779  1C83  00C3               	movwf	_Tx_Length^(0+128)
  8780  1C84  0008               	return
  8781  1C85                     __end_of_setRF_Initialization:	
  8782                           
  8783                           	psect	text39
  8784  1C24                     __ptext39:	
  8785 ;; *************** function _PowerFault_Main *****************
  8786 ;; Defined at:
  8787 ;;		line 22 in file "../src/PowerFault_B1.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;		None
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;		None
  8792 ;; Return value:  Size  Location     Type
  8793 ;;		None               void
  8794 ;; Registers used:
  8795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        0 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:   11
  8808 ;; This function calls:
  8809 ;;		_setPowerFault_Main
  8810 ;; This function is called by:
  8811 ;;		_main
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           
  8816                           ;psect for function _PowerFault_Main
  8817  1C24                     _PowerFault_Main:	
  8818                           
  8819                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  8820                           
  8821                           ;incstack = 0
  8822                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8823  1C24  3185  2531         	fcall	_setPowerFault_Main
  8824  1C26  0008               	return
  8825  1C27                     __end_of_PowerFault_Main:	
  8826                           
  8827                           	psect	text40
  8828  0531                     __ptext40:	
  8829 ;; *************** function _setPowerFault_Main *****************
  8830 ;; Defined at:
  8831 ;;		line 61 in file "../src/PowerFault_B1.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;		None
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;		None
  8836 ;; Return value:  Size  Location     Type
  8837 ;;		None               void
  8838 ;; Registers used:
  8839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;Total ram usage:        2 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:   10
  8852 ;; This function calls:
  8853 ;;		_setPowerFault_Exceptions
  8854 ;; This function is called by:
  8855 ;;		_PowerFault_Main
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859                           
  8860                           ;psect for function _setPowerFault_Main
  8861  0531                     _setPowerFault_Main:	
  8862                           
  8863                           ;PowerFault_B1.c: 63: if(PF->Enable)
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8867  0531  0021               	movlb	1	; select bank1
  8868  0532  083E               	movf	_PF^(0+128),w
  8869  0533  0086               	movwf	6
  8870  0534  0187               	clrf	7
  8871  0535  1C01               	btfss	1,0
  8872  0536  0008               	return
  8873                           
  8874                           ;PowerFault_B1.c: 64: {
  8875                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  8876  0537  083E               	movf	_PF^(0+128),w
  8877  0538  0086               	movwf	6
  8878  0539  0187               	clrf	7
  8879  053A  1981               	btfsc	1,3
  8880  053B  2D66               	goto	l6644
  8881                           
  8882                           ;PowerFault_B1.c: 66: {
  8883                           ;PowerFault_B1.c: 67: PF->Time++;
  8884  053C  083E               	movf	_PF^(0+128),w
  8885  053D  3E02               	addlw	2
  8886  053E  0086               	movwf	6
  8887  053F  0187               	clrf	7
  8888  0540  3001               	movlw	1
  8889  0541  0781               	addwf	1,f
  8890  0542  3141               	addfsr 1,1
  8891  0543  1803               	skipnc
  8892  0544  0A81               	incf	1,f
  8893                           
  8894                           ;PowerFault_B1.c: 69: {
  8895                           ;PowerFault_B1.c: 70: if(1 && 1)
  8896  0545  083E               	movf	_PF^(0+128),w
  8897  0546  3E02               	addlw	2
  8898  0547  0086               	movwf	6
  8899  0548  0187               	clrf	7
  8900  0549  3F40               	moviw [0]fsr1
  8901  054A  0020               	movlb	0	; select bank0
  8902  054B  00B0               	movwf	??_setPowerFault_Main
  8903  054C  3F41               	moviw [1]fsr1
  8904  054D  00B1               	movwf	??_setPowerFault_Main+1
  8905  054E  3002               	movlw	2
  8906  054F  0231               	subwf	??_setPowerFault_Main+1,w
  8907  0550  30BC               	movlw	188
  8908  0551  1903               	skipnz
  8909  0552  0230               	subwf	??_setPowerFault_Main,w
  8910  0553  1C03               	skipc
  8911  0554  0008               	return
  8912                           
  8913                           ;PowerFault_B1.c: 71: {
  8914                           ;PowerFault_B1.c: 72: PF->Time=0;
  8915  0555  0021               	movlb	1	; select bank1
  8916  0556  083E               	movf	_PF^(0+128),w
  8917  0557  3E02               	addlw	2
  8918  0558  0086               	movwf	6
  8919  0559  0187               	clrf	7
  8920  055A  3000               	movlw	0
  8921  055B  3FC0               	movwi [0]fsr1
  8922  055C  3FC1               	movwi [1]fsr1
  8923                           
  8924                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  8925  055D  083E               	movf	_PF^(0+128),w
  8926  055E  0086               	movwf	6
  8927  055F  0187               	clrf	7
  8928  0560  1581               	bsf	1,3
  8929                           
  8930                           ;PowerFault_B1.c: 74: PF->Safe=0;
  8931  0561  083E               	movf	_PF^(0+128),w
  8932  0562  0086               	movwf	6
  8933  0563  0187               	clrf	7
  8934  0564  1101               	bcf	1,2
  8935                           
  8936                           ;PowerFault_B1.c: 75: }
  8937  0565  0008               	return
  8938  0566                     l6644:	
  8939                           ;PowerFault_B1.c: 79: }
  8940                           ;PowerFault_B1.c: 80: }
  8941                           ;PowerFault_B1.c: 81: }
  8942                           
  8943                           ;PowerFault_B1.c: 76: else
  8944                           ;PowerFault_B1.c: 77: {
  8945                           ;PowerFault_B1.c: 78: PF->Time=700;
  8946                           
  8947                           
  8948                           ;PowerFault_B1.c: 82: else
  8949                           ;PowerFault_B1.c: 83: {
  8950                           ;PowerFault_B1.c: 84: PF->Time++;
  8951  0566  083E               	movf	_PF^(0+128),w
  8952  0567  3E02               	addlw	2
  8953  0568  0086               	movwf	6
  8954  0569  0187               	clrf	7
  8955  056A  3001               	movlw	1
  8956  056B  0781               	addwf	1,f
  8957  056C  3141               	addfsr 1,1
  8958  056D  1803               	skipnc
  8959  056E  0A81               	incf	1,f
  8960                           
  8961                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  8962  056F  083E               	movf	_PF^(0+128),w
  8963  0570  3E02               	addlw	2
  8964  0571  0086               	movwf	6
  8965  0572  0187               	clrf	7
  8966  0573  3F40               	moviw [0]fsr1
  8967  0574  0020               	movlb	0	; select bank0
  8968  0575  00B0               	movwf	??_setPowerFault_Main
  8969  0576  3F41               	moviw [1]fsr1
  8970  0577  00B1               	movwf	??_setPowerFault_Main+1
  8971  0578  3000               	movlw	0
  8972  0579  0231               	subwf	??_setPowerFault_Main+1,w
  8973  057A  3002               	movlw	2
  8974  057B  1903               	skipnz
  8975  057C  0230               	subwf	??_setPowerFault_Main,w
  8976  057D  1C03               	skipc
  8977  057E  0008               	return
  8978                           
  8979                           ;PowerFault_B1.c: 86: {
  8980                           ;PowerFault_B1.c: 87: PF->Time=0;
  8981  057F  0021               	movlb	1	; select bank1
  8982  0580  083E               	movf	_PF^(0+128),w
  8983  0581  3E02               	addlw	2
  8984  0582  0086               	movwf	6
  8985  0583  0187               	clrf	7
  8986  0584  3000               	movlw	0
  8987  0585  3FC0               	movwi [0]fsr1
  8988  0586  3FC1               	movwi [1]fsr1
  8989                           
  8990                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  8991  0587  083E               	movf	_PF^(0+128),w
  8992  0588  0086               	movwf	6
  8993  0589  0187               	clrf	7
  8994  058A  1181               	bcf	1,3
  8995                           
  8996                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  8997  058B  083E               	movf	_PF^(0+128),w
  8998  058C  0086               	movwf	6
  8999  058D  0187               	clrf	7
  9000  058E  1C81               	btfss	1,1
  9001  058F  2DCB               	goto	l6664
  9002                           
  9003                           ;PowerFault_B1.c: 91: {
  9004                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9005  0590  083E               	movf	_PF^(0+128),w
  9006  0591  3E04               	addlw	4
  9007  0592  0086               	movwf	6
  9008  0593  0187               	clrf	7
  9009  0594  3F40               	moviw [0]fsr1
  9010  0595  0020               	movlb	0	; select bank0
  9011  0596  00B0               	movwf	??_setPowerFault_Main
  9012  0597  3F41               	moviw [1]fsr1
  9013  0598  00B1               	movwf	??_setPowerFault_Main+1
  9014  0599  3001               	movlw	1
  9015  059A  0231               	subwf	??_setPowerFault_Main+1,w
  9016  059B  3091               	movlw	145
  9017  059C  1903               	skipnz
  9018  059D  0230               	subwf	??_setPowerFault_Main,w
  9019  059E  1803               	skipnc
  9020  059F  2E06               	goto	l6676
  9021  05A0  0021               	movlb	1	; select bank1
  9022  05A1  083E               	movf	_PF^(0+128),w
  9023  05A2  3E04               	addlw	4
  9024  05A3  0086               	movwf	6
  9025  05A4  0187               	clrf	7
  9026  05A5  3F40               	moviw [0]fsr1
  9027  05A6  0020               	movlb	0	; select bank0
  9028  05A7  00B0               	movwf	??_setPowerFault_Main
  9029  05A8  3F41               	moviw [1]fsr1
  9030  05A9  00B1               	movwf	??_setPowerFault_Main+1
  9031  05AA  3000               	movlw	0
  9032  05AB  0231               	subwf	??_setPowerFault_Main+1,w
  9033  05AC  30C8               	movlw	200
  9034  05AD  1903               	skipnz
  9035  05AE  0230               	subwf	??_setPowerFault_Main,w
  9036  05AF  1C03               	skipc
  9037  05B0  2E06               	goto	l6676
  9038                           
  9039                           ;PowerFault_B1.c: 93: {
  9040                           ;PowerFault_B1.c: 94: PF->Count++;
  9041  05B1  3001               	movlw	1
  9042  05B2  00B0               	movwf	??_setPowerFault_Main
  9043  05B3  0021               	movlb	1	; select bank1
  9044  05B4  0A3E               	incf	_PF^(0+128),w
  9045  05B5  0086               	movwf	6
  9046  05B6  0187               	clrf	7
  9047  05B7  0020               	movlb	0	; select bank0
  9048  05B8  0830               	movf	??_setPowerFault_Main,w
  9049  05B9  0781               	addwf	1,f
  9050                           
  9051                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9052  05BA  0021               	movlb	1	; select bank1
  9053  05BB  0A3E               	incf	_PF^(0+128),w
  9054  05BC  0086               	movwf	6
  9055  05BD  0187               	clrf	7
  9056  05BE  3002               	movlw	2
  9057  05BF  0201               	subwf	1,w
  9058  05C0  1C03               	skipc
  9059  05C1  2E0B               	goto	l6678
  9060                           
  9061                           ;PowerFault_B1.c: 96: {
  9062                           ;PowerFault_B1.c: 97: PF->Count=0;
  9063  05C2  0A3E               	incf	_PF^(0+128),w
  9064  05C3  0086               	movwf	6
  9065  05C4  0187               	clrf	7
  9066  05C5  0181               	clrf	1
  9067                           
  9068                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9069  05C6  3000               	movlw	0
  9070  05C7  3193  23A9  3185   	fcall	_setPowerFault_Exceptions
  9071                           
  9072                           ;PowerFault_B1.c: 99: }
  9073                           ;PowerFault_B1.c: 100: }
  9074  05CA  2E0B               	goto	l6678
  9075  05CB                     l6664:	
  9076                           ;PowerFault_B1.c: 104: }
  9077                           ;PowerFault_B1.c: 105: }
  9078                           
  9079                           ;PowerFault_B1.c: 101: else
  9080                           ;PowerFault_B1.c: 102: {
  9081                           ;PowerFault_B1.c: 103: PF->Count=0;
  9082                           
  9083                           
  9084                           ;PowerFault_B1.c: 106: else
  9085                           ;PowerFault_B1.c: 107: {
  9086                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9087  05CB  083E               	movf	_PF^(0+128),w
  9088  05CC  3E04               	addlw	4
  9089  05CD  0086               	movwf	6
  9090  05CE  0187               	clrf	7
  9091  05CF  3F40               	moviw [0]fsr1
  9092  05D0  0020               	movlb	0	; select bank0
  9093  05D1  00B0               	movwf	??_setPowerFault_Main
  9094  05D2  3F41               	moviw [1]fsr1
  9095  05D3  00B1               	movwf	??_setPowerFault_Main+1
  9096  05D4  3001               	movlw	1
  9097  05D5  0231               	subwf	??_setPowerFault_Main+1,w
  9098  05D6  3090               	movlw	144
  9099  05D7  1903               	skipnz
  9100  05D8  0230               	subwf	??_setPowerFault_Main,w
  9101  05D9  1803               	skipnc
  9102  05DA  2DEC               	goto	l6668
  9103  05DB  0021               	movlb	1	; select bank1
  9104  05DC  083E               	movf	_PF^(0+128),w
  9105  05DD  3E04               	addlw	4
  9106  05DE  0086               	movwf	6
  9107  05DF  0187               	clrf	7
  9108  05E0  3F40               	moviw [0]fsr1
  9109  05E1  0020               	movlb	0	; select bank0
  9110  05E2  00B0               	movwf	??_setPowerFault_Main
  9111  05E3  3F41               	moviw [1]fsr1
  9112  05E4  00B1               	movwf	??_setPowerFault_Main+1
  9113  05E5  3000               	movlw	0
  9114  05E6  0231               	subwf	??_setPowerFault_Main+1,w
  9115  05E7  30D3               	movlw	211
  9116  05E8  1903               	skipnz
  9117  05E9  0230               	subwf	??_setPowerFault_Main,w
  9118  05EA  1803               	skipnc
  9119  05EB  2E06               	goto	l6676
  9120  05EC                     l6668:	
  9121                           
  9122                           ;PowerFault_B1.c: 109: {
  9123                           ;PowerFault_B1.c: 110: PF->Count++;
  9124  05EC  3001               	movlw	1
  9125  05ED  00B0               	movwf	??_setPowerFault_Main
  9126  05EE  0021               	movlb	1	; select bank1
  9127  05EF  0A3E               	incf	_PF^(0+128),w
  9128  05F0  0086               	movwf	6
  9129  05F1  0187               	clrf	7
  9130  05F2  0020               	movlb	0	; select bank0
  9131  05F3  0830               	movf	??_setPowerFault_Main,w
  9132  05F4  0781               	addwf	1,f
  9133                           
  9134                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9135  05F5  0021               	movlb	1	; select bank1
  9136  05F6  0A3E               	incf	_PF^(0+128),w
  9137  05F7  0086               	movwf	6
  9138  05F8  0187               	clrf	7
  9139  05F9  3002               	movlw	2
  9140  05FA  0201               	subwf	1,w
  9141  05FB  1C03               	skipc
  9142  05FC  2E0B               	goto	l6678
  9143                           
  9144                           ;PowerFault_B1.c: 112: {
  9145                           ;PowerFault_B1.c: 113: PF->Count=0;
  9146  05FD  0A3E               	incf	_PF^(0+128),w
  9147  05FE  0086               	movwf	6
  9148  05FF  0187               	clrf	7
  9149  0600  0181               	clrf	1
  9150                           
  9151                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9152  0601  3001               	movlw	1
  9153  0602  3193  23A9  3185   	fcall	_setPowerFault_Exceptions
  9154                           
  9155                           ;PowerFault_B1.c: 115: }
  9156                           ;PowerFault_B1.c: 116: }
  9157  0605  2E0B               	goto	l6678
  9158  0606                     l6676:	
  9159                           
  9160                           ;PowerFault_B1.c: 117: else
  9161                           ;PowerFault_B1.c: 118: {
  9162                           ;PowerFault_B1.c: 119: PF->Count=0;
  9163  0606  0021               	movlb	1	; select bank1
  9164  0607  0A3E               	incf	_PF^(0+128),w
  9165  0608  0086               	movwf	6
  9166  0609  0187               	clrf	7
  9167  060A  0181               	clrf	1
  9168  060B                     l6678:	
  9169                           
  9170                           ;PowerFault_B1.c: 120: }
  9171                           ;PowerFault_B1.c: 122: }
  9172                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9173  060B  0021               	movlb	1	; select bank1
  9174  060C  083E               	movf	_PF^(0+128),w
  9175  060D  0086               	movwf	6
  9176  060E  0187               	clrf	7
  9177  060F  1881               	btfsc	1,1
  9178  0610  2E15               	goto	l1798
  9179                           
  9180                           ;PowerFault_B1.c: 124: {
  9181                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9182  0611  083E               	movf	_PF^(0+128),w
  9183  0612  0086               	movwf	6
  9184  0613  0187               	clrf	7
  9185  0614  1501               	bsf	1,2
  9186  0615                     l1798:	
  9187                           
  9188                           ;PowerFault_B1.c: 126: }
  9189                           ;PowerFault_B1.c: 127: PF->AD=0;
  9190  0615  083E               	movf	_PF^(0+128),w
  9191  0616  3E04               	addlw	4
  9192  0617  0086               	movwf	6
  9193  0618  0187               	clrf	7
  9194  0619  3000               	movlw	0
  9195  061A  3FC0               	movwi [0]fsr1
  9196  061B  3FC1               	movwi [1]fsr1
  9197  061C  0008               	return
  9198  061D                     __end_of_setPowerFault_Main:	
  9199                           
  9200                           	psect	text41
  9201  13A9                     __ptext41:	
  9202 ;; *************** function _setPowerFault_Exceptions *****************
  9203 ;; Defined at:
  9204 ;;		line 133 in file "../src/PowerFault_B1.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  command         1    wreg     unsigned char 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  command         1   15[BANK0 ] unsigned char 
  9209 ;; Return value:  Size  Location     Type
  9210 ;;		None               void
  9211 ;; Registers used:
  9212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 0/0
  9215 ;;		On exit  : 0/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;Total ram usage:        2 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    9
  9225 ;; This function calls:
  9226 ;;		_DimmerLights_Exceptions
  9227 ;;		_setLED
  9228 ;;		_setRF_Enable
  9229 ;;		_setSw_Enable
  9230 ;; This function is called by:
  9231 ;;		_setPowerFault_Main
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           
  9236                           ;psect for function _setPowerFault_Exceptions
  9237  13A9                     _setPowerFault_Exceptions:	
  9238                           
  9239                           ;incstack = 0
  9240                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9241                           ;setPowerFault_Exceptions@command stored from wreg
  9242  13A9  0020               	movlb	0	; select bank0
  9243  13AA  00AF               	movwf	setPowerFault_Exceptions@command
  9244                           
  9245                           ;PowerFault_B1.c: 135: PF->ERROR=command;
  9246  13AB  0021               	movlb	1	; select bank1
  9247  13AC  083E               	movf	_PF^(0+128),w
  9248  13AD  0086               	movwf	6
  9249  13AE  0187               	clrf	7
  9250  13AF  0020               	movlb	0	; select bank0
  9251  13B0  082F               	movf	setPowerFault_Exceptions@command,w
  9252  13B1  1081               	bcf	1,1
  9253  13B2  1D03               	skipz
  9254  13B3  1481               	bsf	1,1
  9255                           
  9256                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
  9257  13B4  092F               	comf	setPowerFault_Exceptions@command,w
  9258  13B5  3901               	andlw	1
  9259  13B6  00AE               	movwf	??_setPowerFault_Exceptions
  9260  13B7  0021               	movlb	1	; select bank1
  9261  13B8  083E               	movf	_PF^(0+128),w
  9262  13B9  0086               	movwf	6
  9263  13BA  0187               	clrf	7
  9264  13BB  0020               	movlb	0	; select bank0
  9265  13BC  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9266  13BD  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9267  13BE  0801               	movf	1,w
  9268  13BF  062E               	xorwf	??_setPowerFault_Exceptions,w
  9269  13C0  39FB               	andlw	-5
  9270  13C1  062E               	xorwf	??_setPowerFault_Exceptions,w
  9271  13C2  0081               	movwf	1
  9272                           
  9273                           ;PowerFault_B1.c: 137: if(command == 1)
  9274  13C3  082F               	movf	setPowerFault_Exceptions@command,w
  9275  13C4  3A01               	xorlw	1
  9276  13C5  1D03               	skipz
  9277  13C6  2BD2               	goto	l1802
  9278                           
  9279                           ;PowerFault_B1.c: 138: {
  9280                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
  9281  13C7  3003               	movlw	3
  9282  13C8  3196  2690  3193   	fcall	_DimmerLights_Exceptions
  9283                           
  9284                           ;PowerFault_B1.c: 141: setLED(2,1);
  9285  13CB  0020               	movlb	0	; select bank0
  9286  13CC  01A2               	clrf	setLED@command
  9287  13CD  0AA2               	incf	setLED@command,f
  9288  13CE  3002               	movlw	2
  9289  13CF  3197  27A2  3193   	fcall	_setLED
  9290  13D2                     l1802:	
  9291                           
  9292                           ;PowerFault_B1.c: 143: }
  9293                           ;PowerFault_B1.c: 144: setLED(99,command+10);
  9294  13D2  0020               	movlb	0	; select bank0
  9295  13D3  082F               	movf	setPowerFault_Exceptions@command,w
  9296  13D4  3E0A               	addlw	10
  9297  13D5  00AE               	movwf	??_setPowerFault_Exceptions
  9298  13D6  082E               	movf	??_setPowerFault_Exceptions,w
  9299  13D7  00A2               	movwf	setLED@command
  9300  13D8  3063               	movlw	99
  9301  13D9  3197  27A2  3193   	fcall	_setLED
  9302                           
  9303                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
  9304  13DC  0020               	movlb	0	; select bank0
  9305  13DD  092F               	comf	setPowerFault_Exceptions@command,w
  9306  13DE  3901               	andlw	1
  9307  13DF  3190  2066  3193   	fcall	_setSw_Enable
  9308                           
  9309                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
  9310  13E2  0020               	movlb	0	; select bank0
  9311  13E3  092F               	comf	setPowerFault_Exceptions@command,w
  9312  13E4  3901               	andlw	1
  9313  13E5  00AE               	movwf	??_setPowerFault_Exceptions
  9314  13E6  082E               	movf	??_setPowerFault_Exceptions,w
  9315  13E7  00A2               	movwf	setRF_Enable@command
  9316  13E8  3001               	movlw	1
  9317  13E9  3191  2121         	fcall	_setRF_Enable
  9318  13EB  0008               	return
  9319  13EC                     __end_of_setPowerFault_Exceptions:	
  9320                           
  9321                           	psect	text42
  9322  1066                     __ptext42:	
  9323 ;; *************** function _setSw_Enable *****************
  9324 ;; Defined at:
  9325 ;;		line 85 in file "../src/Switch_B1.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  command         1    wreg     unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  command         1    2[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        1 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    6
  9346 ;; This function calls:
  9347 ;;		_SwPointSelect
  9348 ;; This function is called by:
  9349 ;;		_setPowerFault_Exceptions
  9350 ;;		_my_Main
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _setSw_Enable
  9356  1066                     _setSw_Enable:	
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9360                           ;setSw_Enable@command stored from wreg
  9361  1066  0020               	movlb	0	; select bank0
  9362  1067  00A2               	movwf	setSw_Enable@command
  9363                           
  9364                           ;Switch_B1.c: 88: SwPointSelect(1);
  9365  1068  3001               	movlw	1
  9366  1069  319C  24CC         	fcall	_SwPointSelect
  9367                           
  9368                           ;Switch_B1.c: 89: Sw->Enable = command;
  9369  106B  087B               	movf	_Sw,w
  9370  106C  0086               	movwf	6
  9371  106D  3001               	movlw	1	; select bank2/3
  9372  106E  0087               	movwf	7
  9373  106F  0020               	movlb	0	; select bank0
  9374  1070  0822               	movf	setSw_Enable@command,w
  9375  1071  1001               	bcf	1,0
  9376  1072  1D03               	skipz
  9377  1073  1401               	bsf	1,0
  9378  1074  0008               	return
  9379  1075                     __end_of_setSw_Enable:	
  9380                           
  9381                           	psect	text43
  9382  1121                     __ptext43:	
  9383 ;; *************** function _setRF_Enable *****************
  9384 ;; Defined at:
  9385 ;;		line 197 in file "../src/RF_Control_B1.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  rf              1    wreg     unsigned char 
  9388 ;;  command         1    2[BANK0 ] unsigned char 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  rf              1    3[BANK0 ] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;		None               void
  9393 ;; Registers used:
  9394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9400 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;Total ram usage:        2 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    6
  9407 ;; This function calls:
  9408 ;;		_RfPointSelect
  9409 ;; This function is called by:
  9410 ;;		_setPowerFault_Exceptions
  9411 ;;		_my_Main
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           
  9416                           ;psect for function _setRF_Enable
  9417  1121                     _setRF_Enable:	
  9418                           
  9419                           ;incstack = 0
  9420                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9421                           ;setRF_Enable@rf stored from wreg
  9422  1121  0020               	movlb	0	; select bank0
  9423  1122  00A3               	movwf	setRF_Enable@rf
  9424                           
  9425                           ;RF_Control_B1.c: 198: RfPointSelect(rf);
  9426  1123  0823               	movf	setRF_Enable@rf,w
  9427  1124  319D  2577         	fcall	_RfPointSelect
  9428                           
  9429                           ;RF_Control_B1.c: 199: RF->Enable = command;
  9430  1126  087A               	movf	_RF,w
  9431  1127  0086               	movwf	6
  9432  1128  0187               	clrf	7
  9433  1129  0020               	movlb	0	; select bank0
  9434  112A  0822               	movf	setRF_Enable@command,w
  9435  112B  1001               	bcf	1,0
  9436  112C  1D03               	skipz
  9437  112D  1401               	bsf	1,0
  9438                           
  9439                           ;RF_Control_B1.c: 200: RF->Learn = 0;
  9440  112E  087A               	movf	_RF,w
  9441  112F  0086               	movwf	6
  9442  1130  0187               	clrf	7
  9443  1131  1301               	bcf	1,6
  9444                           
  9445                           ;RF_Control_B1.c: 201: RF->TransceiveGO = 0;
  9446  1132  087A               	movf	_RF,w
  9447  1133  0086               	movwf	6
  9448  1134  0187               	clrf	7
  9449  1135  1101               	bcf	1,2
  9450                           
  9451                           ;RF_Control_B1.c: 202: RF->RxStatus = 0;
  9452  1136  087A               	movf	_RF,w
  9453  1137  0086               	movwf	6
  9454  1138  0187               	clrf	7
  9455  1139  1181               	bcf	1,3
  9456                           
  9457                           ;RF_Control_B1.c: 203: RF->ReceiveGO = 0;
  9458  113A  087A               	movf	_RF,w
  9459  113B  0086               	movwf	6
  9460  113C  0187               	clrf	7
  9461  113D  1081               	bcf	1,1
  9462                           
  9463                           ;RF_Control_B1.c: 204: RF->DebounceTime = 0;
  9464  113E  087A               	movf	_RF,w
  9465  113F  3E04               	addlw	4
  9466  1140  0086               	movwf	6
  9467  1141  0187               	clrf	7
  9468  1142  0181               	clrf	1
  9469                           
  9470                           ;RF_Control_B1.c: 205: RF->Debounce = 0;
  9471  1143  087A               	movf	_RF,w
  9472  1144  0086               	movwf	6
  9473  1145  0187               	clrf	7
  9474  1146  1281               	bcf	1,5
  9475  1147  0008               	return
  9476  1148                     __end_of_setRF_Enable:	
  9477                           
  9478                           	psect	text44
  9479  1690                     __ptext44:	
  9480 ;; *************** function _DimmerLights_Exceptions *****************
  9481 ;; Defined at:
  9482 ;;		line 528 in file "../src/Dimmer_B1.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;  status          1    wreg     unsigned char 
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  status          1   13[BANK0 ] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        1 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    8
  9503 ;; This function calls:
  9504 ;;		_getDimmerLights_StatusFlag
  9505 ;;		_setBuz
  9506 ;;		_setDimmerLights_ERROR
  9507 ;;		_setDimmerLights_TriggerERROR
  9508 ;; This function is called by:
  9509 ;;		_setPowerFault_Exceptions
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           
  9514                           ;psect for function _DimmerLights_Exceptions
  9515  1690                     _DimmerLights_Exceptions:	
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9519                           ;DimmerLights_Exceptions@status stored from wreg
  9520  1690  0020               	movlb	0	; select bank0
  9521  1691  00AD               	movwf	DimmerLights_Exceptions@status
  9522                           
  9523                           ;Dimmer_B1.c: 529: if (status == 1)
  9524  1692  082D               	movf	DimmerLights_Exceptions@status,w
  9525  1693  3A01               	xorlw	1
  9526  1694  1D03               	skipz
  9527  1695  2EA6               	goto	l5844
  9528                           
  9529                           ;Dimmer_B1.c: 530: {
  9530                           ;Dimmer_B1.c: 531: if (getDimmerLights_StatusFlag()) {
  9531  1696  319C  24A1  3196   	fcall	_getDimmerLights_StatusFlag
  9532  1699  3A00               	xorlw	0
  9533  169A  1903               	skipnz
  9534  169B  2EBE               	goto	l5850
  9535                           
  9536                           ;Dimmer_B1.c: 532: setBuz(10, 300);
  9537  169C  302C               	movlw	44
  9538  169D  0020               	movlb	0	; select bank0
  9539  169E  00A9               	movwf	setBuz@time
  9540  169F  3001               	movlw	1
  9541  16A0  00AA               	movwf	setBuz@time+1
  9542  16A1  300A               	movlw	10
  9543  16A2  318C  24EB  3196   	fcall	_setBuz
  9544  16A5  2EBE               	goto	l5850
  9545  16A6                     l5844:	
  9546                           ;Dimmer_B1.c: 544: } else if (status == 2)
  9547                           
  9548                           ;Dimmer_B1.c: 533: }
  9549                           ;Dimmer_B1.c: 536: setDimmerLights_ERROR(1);
  9550                           
  9551  16A6  0020               	movlb	0	; select bank0
  9552  16A7  082D               	movf	DimmerLights_Exceptions@status,w
  9553  16A8  3A02               	xorlw	2
  9554  16A9  1D03               	skipz
  9555  16AA  2EB9               	goto	l5848
  9556                           
  9557                           ;Dimmer_B1.c: 545: {
  9558                           ;Dimmer_B1.c: 546: setBuz(5, 300);
  9559  16AB  302C               	movlw	44
  9560  16AC  00A9               	movwf	setBuz@time
  9561  16AD  3001               	movlw	1
  9562  16AE  00AA               	movwf	setBuz@time+1
  9563  16AF  3005               	movlw	5
  9564  16B0  318C  24EB  3196   	fcall	_setBuz
  9565                           
  9566                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(Dimmer->Load);
  9567  16B3  0021               	movlb	1	; select bank1
  9568  16B4  0A3A               	incf	_Dimmer^(0+128),w
  9569  16B5  0086               	movwf	6
  9570  16B6  0187               	clrf	7
  9571  16B7  0801               	movf	1,w
  9572  16B8  2EBF               	goto	L9
  9573  16B9                     l5848:	
  9574                           ;Dimmer_B1.c: 548: } else if (status == 3)
  9575                           
  9576  16B9  0020               	movlb	0	; select bank0
  9577  16BA  082D               	movf	DimmerLights_Exceptions@status,w
  9578  16BB  3A03               	xorlw	3
  9579  16BC  1D03               	skipz
  9580  16BD  2EC2               	goto	l832
  9581  16BE                     l5850:	
  9582                           
  9583                           ;Dimmer_B1.c: 549: {
  9584                           ;Dimmer_B1.c: 551: setDimmerLights_ERROR(1);
  9585  16BE  3001               	movlw	1
  9586  16BF                     L9:	
  9587  16BF  3195  2594  3196   	fcall	_setDimmerLights_ERROR
  9588  16C2                     l832:	
  9589                           
  9590                           ;Dimmer_B1.c: 559: }
  9591                           ;Dimmer_B1.c: 562: setDimmerLights_TriggerERROR(1, 0);
  9592  16C2  0020               	movlb	0	; select bank0
  9593  16C3  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9594  16C4  3001               	movlw	1
  9595  16C5  3191  2172  3196   	fcall	_setDimmerLights_TriggerERROR
  9596                           
  9597                           ;Dimmer_B1.c: 571: if (myMain->SelfTest == 0) {
  9598  16C8  0021               	movlb	1	; select bank1
  9599  16C9  086D               	movf	_myMain^(0+128),w
  9600  16CA  0086               	movwf	6
  9601  16CB  3001               	movlw	1	; select bank2/3
  9602  16CC  0087               	movwf	7
  9603  16CD  1B01               	btfsc	1,6
  9604  16CE  0008               	return
  9605                           
  9606                           ;Dimmer_B1.c: 573: myMain->i = 0;
  9607  16CF  086D               	movf	_myMain^(0+128),w
  9608  16D0  3E0E               	addlw	14
  9609  16D1  0086               	movwf	6
  9610  16D2  3001               	movlw	1	; select bank2/3
  9611  16D3  0087               	movwf	7
  9612  16D4  1001               	bcf	1,0
  9613                           
  9614                           ;Dimmer_B1.c: 574: myMain->j = 0;
  9615  16D5  086D               	movf	_myMain^(0+128),w
  9616  16D6  3E0E               	addlw	14
  9617  16D7  0086               	movwf	6
  9618  16D8  3001               	movlw	1	; select bank2/3
  9619  16D9  0087               	movwf	7
  9620  16DA  1081               	bcf	1,1
  9621                           
  9622                           ;Dimmer_B1.c: 575: myMain->k = 1;
  9623  16DB  086D               	movf	_myMain^(0+128),w
  9624  16DC  3E0E               	addlw	14
  9625  16DD  0086               	movwf	6
  9626  16DE  3001               	movlw	1	; select bank2/3
  9627  16DF  0087               	movwf	7
  9628  16E0  1501               	bsf	1,2
  9629                           
  9630                           ;Dimmer_B1.c: 576: myMain->Count2 = 0;
  9631  16E1  086D               	movf	_myMain^(0+128),w
  9632  16E2  3E07               	addlw	7
  9633  16E3  0086               	movwf	6
  9634  16E4  3001               	movlw	1	; select bank2/3
  9635  16E5  0087               	movwf	7
  9636  16E6  3000               	movlw	0
  9637  16E7  3FC0               	movwi [0]fsr1
  9638  16E8  3FC1               	movwi [1]fsr1
  9639  16E9  0008               	return
  9640  16EA                     __end_of_DimmerLights_Exceptions:	
  9641                           
  9642                           	psect	text45
  9643  1172                     __ptext45:	
  9644 ;; *************** function _setDimmerLights_TriggerERROR *****************
  9645 ;; Defined at:
  9646 ;;		line 599 in file "../src/Dimmer_B1.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  lights          1    wreg     unsigned char 
  9649 ;;  command         1    2[BANK0 ] unsigned char 
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;  lights          1    3[BANK0 ] unsigned char 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;		None               void
  9654 ;; Registers used:
  9655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9661 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;Total ram usage:        2 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    6
  9668 ;; This function calls:
  9669 ;;		_DimmerLightsPointSelect
  9670 ;; This function is called by:
  9671 ;;		_DimmerLights_Exceptions
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           
  9676                           ;psect for function _setDimmerLights_TriggerERROR
  9677  1172                     _setDimmerLights_TriggerERROR:	
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9681                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  9682  1172  0020               	movlb	0	; select bank0
  9683  1173  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  9684                           
  9685                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(lights);
  9686  1174  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  9687  1175  319C  24C1         	fcall	_DimmerLightsPointSelect
  9688                           
  9689                           ;Dimmer_B1.c: 602: DimmerLights->Trigger = command;
  9690  1177  0878               	movf	_DimmerLights,w
  9691  1178  3E08               	addlw	8
  9692  1179  0086               	movwf	6
  9693  117A  3001               	movlw	1	; select bank2/3
  9694  117B  0087               	movwf	7
  9695  117C  0020               	movlb	0	; select bank0
  9696  117D  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9697  117E  1101               	bcf	1,2
  9698  117F  1D03               	skipz
  9699  1180  1501               	bsf	1,2
  9700                           
  9701                           ;Dimmer_B1.c: 603: DimmerLights->Switch = command;
  9702  1181  0878               	movf	_DimmerLights,w
  9703  1182  3E08               	addlw	8
  9704  1183  0086               	movwf	6
  9705  1184  3001               	movlw	1	; select bank2/3
  9706  1185  0087               	movwf	7
  9707  1186  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9708  1187  1081               	bcf	1,1
  9709  1188  1D03               	skipz
  9710  1189  1481               	bsf	1,1
  9711                           
  9712                           ;Dimmer_B1.c: 604: DimmerLights->TriggerAdj = command;
  9713  118A  0878               	movf	_DimmerLights,w
  9714  118B  3E08               	addlw	8
  9715  118C  0086               	movwf	6
  9716  118D  3001               	movlw	1	; select bank2/3
  9717  118E  0087               	movwf	7
  9718  118F  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9719  1190  1201               	bcf	1,4
  9720  1191  1D03               	skipz
  9721  1192  1601               	bsf	1,4
  9722                           
  9723                           ;Dimmer_B1.c: 605: DimmerLights->AdjGo = command;
  9724  1193  0878               	movf	_DimmerLights,w
  9725  1194  3E08               	addlw	8
  9726  1195  0086               	movwf	6
  9727  1196  3001               	movlw	1	; select bank2/3
  9728  1197  0087               	movwf	7
  9729  1198  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9730  1199  1181               	bcf	1,3
  9731  119A  1D03               	skipz
  9732  119B  1581               	bsf	1,3
  9733  119C  0008               	return
  9734  119D                     __end_of_setDimmerLights_TriggerERROR:	
  9735                           
  9736                           	psect	text46
  9737  1594                     __ptext46:	
  9738 ;; *************** function _setDimmerLights_ERROR *****************
  9739 ;; Defined at:
  9740 ;;		line 581 in file "../src/Dimmer_B1.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  lights          1    wreg     unsigned char 
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;  lights          1    5[BANK0 ] unsigned char 
  9745 ;; Return value:  Size  Location     Type
  9746 ;;		None               void
  9747 ;; Registers used:
  9748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:        2 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    7
  9761 ;; This function calls:
  9762 ;;		_DimmerLightsPointSelect
  9763 ;;		_setLED
  9764 ;;		_setRFSW_Status
  9765 ;;		_setSw_Status
  9766 ;; This function is called by:
  9767 ;;		_DimmerLights_Exceptions
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function _setDimmerLights_ERROR
  9773  1594                     _setDimmerLights_ERROR:	
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9777                           ;setDimmerLights_ERROR@lights stored from wreg
  9778  1594  0020               	movlb	0	; select bank0
  9779  1595  00A5               	movwf	setDimmerLights_ERROR@lights
  9780                           
  9781                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
  9782  1596  0825               	movf	setDimmerLights_ERROR@lights,w
  9783  1597  319C  24C1  3195   	fcall	_DimmerLightsPointSelect
  9784                           
  9785                           ;Dimmer_B1.c: 583: if (DimmerLights->Status) {
  9786  159A  0878               	movf	_DimmerLights,w
  9787  159B  0086               	movwf	6
  9788  159C  3001               	movlw	1	; select bank2/3
  9789  159D  0087               	movwf	7
  9790  159E  1E81               	btfss	1,5
  9791  159F  0008               	return
  9792                           
  9793                           ;Dimmer_B1.c: 585: DimmerLights->Signal = 0;
  9794  15A0  0878               	movf	_DimmerLights,w
  9795  15A1  0086               	movwf	6
  9796  15A2  3001               	movlw	1	; select bank2/3
  9797  15A3  0087               	movwf	7
  9798  15A4  1081               	bcf	1,1
  9799                           
  9800                           ;Dimmer_B1.c: 586: DimmerLights->AdjFlag = 0;
  9801  15A5  0878               	movf	_DimmerLights,w
  9802  15A6  0086               	movwf	6
  9803  15A7  3001               	movlw	1	; select bank2/3
  9804  15A8  0087               	movwf	7
  9805  15A9  1181               	bcf	1,3
  9806                           
  9807                           ;Dimmer_B1.c: 587: DimmerLights->AdjStatus = 0;
  9808  15AA  0878               	movf	_DimmerLights,w
  9809  15AB  0086               	movwf	6
  9810  15AC  3001               	movlw	1	; select bank2/3
  9811  15AD  0087               	movwf	7
  9812  15AE  1201               	bcf	1,4
  9813                           
  9814                           ;Dimmer_B1.c: 588: DimmerLights->StatusFlag = 0;
  9815  15AF  0878               	movf	_DimmerLights,w
  9816  15B0  0086               	movwf	6
  9817  15B1  3001               	movlw	1	; select bank2/3
  9818  15B2  0087               	movwf	7
  9819  15B3  1301               	bcf	1,6
  9820                           
  9821                           ;Dimmer_B1.c: 589: DimmerLights->DimmingTimeValue = 6;
  9822  15B4  3006               	movlw	6
  9823  15B5  0020               	movlb	0	; select bank0
  9824  15B6  00A4               	movwf	??_setDimmerLights_ERROR
  9825  15B7  0878               	movf	_DimmerLights,w
  9826  15B8  3E02               	addlw	2
  9827  15B9  0086               	movwf	6
  9828  15BA  3001               	movlw	1	; select bank2/3
  9829  15BB  0087               	movwf	7
  9830  15BC  0824               	movf	??_setDimmerLights_ERROR,w
  9831  15BD  0081               	movwf	1
  9832                           
  9833                           ;Dimmer_B1.c: 590: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  9834  15BE  0878               	movf	_DimmerLights,w
  9835  15BF  3E06               	addlw	6
  9836  15C0  0086               	movwf	6
  9837  15C1  3001               	movlw	1	; select bank2/3
  9838  15C2  0087               	movwf	7
  9839  15C3  0801               	movf	1,w
  9840  15C4  00A4               	movwf	??_setDimmerLights_ERROR
  9841  15C5  0878               	movf	_DimmerLights,w
  9842  15C6  3E04               	addlw	4
  9843  15C7  0086               	movwf	6
  9844  15C8  3001               	movlw	1	; select bank2/3
  9845  15C9  0087               	movwf	7
  9846  15CA  0824               	movf	??_setDimmerLights_ERROR,w
  9847  15CB  0081               	movwf	1
  9848                           
  9849                           ;Dimmer_B1.c: 591: Dimmer->Detect = 1;
  9850  15CC  0021               	movlb	1	; select bank1
  9851  15CD  083A               	movf	_Dimmer^(0+128),w
  9852  15CE  0086               	movwf	6
  9853  15CF  0187               	clrf	7
  9854  15D0  1401               	bsf	1,0
  9855                           
  9856                           ;Dimmer_B1.c: 592: ;;
  9857                           ;Dimmer_B1.c: 593: setLED(lights, 1);
  9858  15D1  0020               	movlb	0	; select bank0
  9859  15D2  01A2               	clrf	setLED@command
  9860  15D3  0AA2               	incf	setLED@command,f
  9861  15D4  0825               	movf	setDimmerLights_ERROR@lights,w
  9862  15D5  3197  27A2  3195   	fcall	_setLED
  9863                           
  9864                           ;Dimmer_B1.c: 594: setSw_Status(lights, 0);
  9865  15D8  0020               	movlb	0	; select bank0
  9866  15D9  01A2               	clrf	setSw_Status@command
  9867  15DA  0825               	movf	setDimmerLights_ERROR@lights,w
  9868  15DB  319D  25A2  3195   	fcall	_setSw_Status
  9869                           
  9870                           ;Dimmer_B1.c: 595: setRFSW_Status(lights, 0);
  9871  15DE  0020               	movlb	0	; select bank0
  9872  15DF  01A2               	clrf	setRFSW_Status@command
  9873  15E0  0825               	movf	setDimmerLights_ERROR@lights,w
  9874  15E1  319D  2593         	fcall	_setRFSW_Status
  9875  15E3  0008               	return
  9876  15E4                     __end_of_setDimmerLights_ERROR:	
  9877                           
  9878                           	psect	text47
  9879  1C21                     __ptext47:	
  9880 ;; *************** function _PowerFault_Initialization *****************
  9881 ;; Defined at:
  9882 ;;		line 15 in file "../src/PowerFault_B1.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;		None               void
  9889 ;; Registers used:
  9890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    6
  9903 ;; This function calls:
  9904 ;;		_setPowerFault_Initialization
  9905 ;; This function is called by:
  9906 ;;		_main
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function _PowerFault_Initialization
  9912  1C21                     _PowerFault_Initialization:	
  9913                           
  9914                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
  9915                           
  9916                           ;incstack = 0
  9917                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9918  1C21  319D  25B1         	fcall	_setPowerFault_Initialization
  9919  1C23  0008               	return
  9920  1C24                     __end_of_PowerFault_Initialization:	
  9921                           
  9922                           	psect	text48
  9923  1DB1                     __ptext48:	
  9924 ;; *************** function _setPowerFault_Initialization *****************
  9925 ;; Defined at:
  9926 ;;		line 29 in file "../src/PowerFault_B1.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;		None
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;		None
  9931 ;; Return value:  Size  Location     Type
  9932 ;;		None               void
  9933 ;; Registers used:
  9934 ;;		wreg, fsr1l, fsr1h
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;Total ram usage:        1 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    5
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		_PowerFault_Initialization
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function _setPowerFault_Initialization
  9956  1DB1                     _setPowerFault_Initialization:	
  9957                           
  9958                           ;PowerFault_B1.c: 31: PF=&PF1;
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
  9962  1DB1  30C7               	movlw	_PF1& (0+255)
  9963  1DB2  0020               	movlb	0	; select bank0
  9964  1DB3  00A0               	movwf	??_setPowerFault_Initialization
  9965  1DB4  0820               	movf	??_setPowerFault_Initialization,w
  9966  1DB5  0021               	movlb	1	; select bank1
  9967  1DB6  00BE               	movwf	_PF^(0+128)
  9968                           
  9969                           ;PowerFault_B1.c: 32: PF->Enable=1;
  9970  1DB7  083E               	movf	_PF^(0+128),w
  9971  1DB8  0086               	movwf	6
  9972  1DB9  0187               	clrf	7
  9973  1DBA  1401               	bsf	1,0
  9974                           
  9975                           ;PowerFault_B1.c: 33: PF->Safe=1;
  9976  1DBB  083E               	movf	_PF^(0+128),w
  9977  1DBC  0086               	movwf	6
  9978  1DBD  0187               	clrf	7
  9979  1DBE  1501               	bsf	1,2
  9980  1DBF  0008               	return
  9981  1DC0                     __end_of_setPowerFault_Initialization:	
  9982                           
  9983                           	psect	text49
  9984  1F34                     __ptext49:	
  9985 ;; *************** function _Mcu_Initialization *****************
  9986 ;; Defined at:
  9987 ;;		line 30 in file "../src/MCU_B1.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;		None
  9992 ;; Return value:  Size  Location     Type
  9993 ;;		None               void
  9994 ;; Registers used:
  9995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;Total ram usage:        1 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    6
 10008 ;; This function calls:
 10009 ;;		_ADC_Set
 10010 ;;		_Fosc_Set
 10011 ;;		_INT_Set
 10012 ;;		_IOC_Set
 10013 ;;		_IO_Set
 10014 ;;		_TMR0_Set
 10015 ;;		_WDT_Set
 10016 ;; This function is called by:
 10017 ;;		_main
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           
 10022                           ;psect for function _Mcu_Initialization
 10023  1F34                     _Mcu_Initialization:	
 10024                           
 10025                           ;MCU_B1.c: 32: Fosc_Set();
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10029  1F34  319C  243B  319F   	fcall	_Fosc_Set
 10030                           
 10031                           ;MCU_B1.c: 34: IO_Set();
 10032  1F37  319F  2701  319F   	fcall	_IO_Set
 10033                           
 10034                           ;MCU_B1.c: 36: TMR0_Set();
 10035  1F3A  319D  256A  319F   	fcall	_TMR0_Set
 10036                           
 10037                           ;MCU_B1.c: 38: ;;
 10038                           ;MCU_B1.c: 40: ADC_Set();
 10039  1F3D  319C  2477  319F   	fcall	_ADC_Set
 10040                           
 10041                           ;MCU_B1.c: 44: INT_Set();
 10042  1F40  319C  2450  319F   	fcall	_INT_Set
 10043                           
 10044                           ;MCU_B1.c: 46: IOC_Set();
 10045  1F43  319D  255D  319F   	fcall	_IOC_Set
 10046                           
 10047                           ;MCU_B1.c: 48: ;;
 10048                           ;MCU_B1.c: 50: ;;
 10049                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10050  1F46  30A0               	movlw	_VarMemory& (0+255)
 10051  1F47  0020               	movlb	0	; select bank0
 10052  1F48  00A1               	movwf	??_Mcu_Initialization
 10053  1F49  0821               	movf	??_Mcu_Initialization,w
 10054  1F4A  0021               	movlb	1	; select bank1
 10055  1F4B  00EE               	movwf	_Memory^(0+128)
 10056                           
 10057                           ;MCU_B1.c: 54: WDT_Set();
 10058  1F4C  319E  26B7         	fcall	_WDT_Set
 10059  1F4E  0008               	return
 10060  1F4F                     __end_of_Mcu_Initialization:	
 10061                           
 10062                           	psect	text50
 10063  1EB7                     __ptext50:	
 10064 ;; *************** function _WDT_Set *****************
 10065 ;; Defined at:
 10066 ;;		line 892 in file "../src/MCU_B1.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;		None
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;		None
 10071 ;; Return value:  Size  Location     Type
 10072 ;;		None               void
 10073 ;; Registers used:
 10074 ;;		wreg, fsr1l, fsr1h
 10075 ;; Tracked objects:
 10076 ;;		On entry : 0/0
 10077 ;;		On exit  : 0/0
 10078 ;;		Unchanged: 0/0
 10079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;Total ram usage:        1 bytes
 10085 ;; Hardware stack levels used:    1
 10086 ;; Hardware stack levels required when called:    5
 10087 ;; This function calls:
 10088 ;;		Nothing
 10089 ;; This function is called by:
 10090 ;;		_Mcu_Initialization
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           
 10095                           ;psect for function _WDT_Set
 10096  1EB7                     _WDT_Set:	
 10097                           
 10098                           ;MCU_B1.c: 893: WDTCON = 0b00010111;;
 10099                           
 10100                           ;incstack = 0
 10101                           ; Regs used in _WDT_Set: [wregfsr1]
 10102  1EB7  3017               	movlw	23
 10103  1EB8  0021               	movlb	1	; select bank1
 10104  1EB9  0097               	movwf	23	;volatile
 10105                           
 10106                           ;MCU_B1.c: 894: WDT = &_WDT;
 10107  1EBA  30E8               	movlw	__WDT& (0+255)
 10108  1EBB  0020               	movlb	0	; select bank0
 10109  1EBC  00A0               	movwf	??_WDT_Set
 10110  1EBD  0820               	movf	??_WDT_Set,w
 10111  1EBE  0021               	movlb	1	; select bank1
 10112  1EBF  00EC               	movwf	_WDT^(0+128)
 10113                           
 10114                           ;MCU_B1.c: 895: WDT->Enable = 1;
 10115  1EC0  086C               	movf	_WDT^(0+128),w
 10116  1EC1  0086               	movwf	6
 10117  1EC2  0187               	clrf	7
 10118  1EC3  1401               	bsf	1,0
 10119                           
 10120                           ;MCU_B1.c: 896: WDT->Count = 10;
 10121  1EC4  300A               	movlw	10
 10122  1EC5  0020               	movlb	0	; select bank0
 10123  1EC6  00A0               	movwf	??_WDT_Set
 10124  1EC7  0021               	movlb	1	; select bank1
 10125  1EC8  0A6C               	incf	_WDT^(0+128),w
 10126  1EC9  0086               	movwf	6
 10127  1ECA  0187               	clrf	7
 10128  1ECB  0020               	movlb	0	; select bank0
 10129  1ECC  0820               	movf	??_WDT_Set,w
 10130  1ECD  0081               	movwf	1
 10131  1ECE  0008               	return
 10132  1ECF                     __end_of_WDT_Set:	
 10133                           
 10134                           	psect	text51
 10135  1D6A                     __ptext51:	
 10136 ;; *************** function _TMR0_Set *****************
 10137 ;; Defined at:
 10138 ;;		line 128 in file "../src/MCU_B1.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;		None
 10143 ;; Return value:  Size  Location     Type
 10144 ;;		None               void
 10145 ;; Registers used:
 10146 ;;		wreg, status,2
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;Total ram usage:        1 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    5
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		_Mcu_Initialization
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function _TMR0_Set
 10168  1D6A                     _TMR0_Set:	
 10169                           
 10170                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10174  1D6A  3054               	movlw	_VarTimer0& (0+255)
 10175  1D6B  0020               	movlb	0	; select bank0
 10176  1D6C  00A0               	movwf	??_TMR0_Set
 10177  1D6D  0820               	movf	??_TMR0_Set,w
 10178  1D6E  0021               	movlb	1	; select bank1
 10179  1D6F  00EB               	movwf	_Timer0^(0+128)
 10180                           
 10181                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10182  1D70  0195               	clrf	21	;volatile
 10183                           
 10184                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10185  1D71  3042               	movlw	66
 10186  1D72  0020               	movlb	0	; select bank0
 10187  1D73  0095               	movwf	21	;volatile
 10188                           
 10189                           ;MCU_B1.c: 132: TMR0IE = 1;
 10190  1D74  168B               	bsf	11,5	;volatile
 10191                           
 10192                           ;MCU_B1.c: 133: GIE = 1;
 10193  1D75  178B               	bsf	11,7	;volatile
 10194  1D76  0008               	return
 10195  1D77                     __end_of_TMR0_Set:	
 10196                           
 10197                           	psect	text52
 10198  1F01                     __ptext52:	
 10199 ;; *************** function _IO_Set *****************
 10200 ;; Defined at:
 10201 ;;		line 62 in file "../src/MCU_B1.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;		None               void
 10208 ;; Registers used:
 10209 ;;		wreg, status,2
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        0 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    5
 10222 ;; This function calls:
 10223 ;;		Nothing
 10224 ;; This function is called by:
 10225 ;;		_Mcu_Initialization
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           
 10230                           ;psect for function _IO_Set
 10231  1F01                     _IO_Set:	
 10232                           
 10233                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10234                           
 10235                           ;incstack = 0
 10236                           ; Regs used in _IO_Set: [wreg+status,2]
 10237  1F01  3077               	movlw	119
 10238  1F02  0021               	movlb	1	; select bank1
 10239  1F03  008C               	movwf	12	;volatile
 10240                           
 10241                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10242  1F04  3007               	movlw	7
 10243  1F05  008D               	movwf	13	;volatile
 10244                           
 10245                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10246  1F06  300C               	movlw	12
 10247  1F07  008E               	movwf	14	;volatile
 10248                           
 10249                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10250  1F08  0022               	movlb	2	; select bank2
 10251  1F09  018C               	clrf	12	;volatile
 10252                           
 10253                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10254  1F0A  3002               	movlw	2
 10255  1F0B  008D               	movwf	13	;volatile
 10256                           
 10257                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10258  1F0C  018E               	clrf	14	;volatile
 10259                           
 10260                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10261  1F0D  3022               	movlw	34
 10262  1F0E  0023               	movlb	3	; select bank3
 10263  1F0F  008C               	movwf	12	;volatile
 10264                           
 10265                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10266  1F10  018D               	clrf	13	;volatile
 10267                           
 10268                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10269  1F11  018E               	clrf	14	;volatile
 10270                           
 10271                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10272  1F12  3077               	movlw	119
 10273  1F13  0020               	movlb	0	; select bank0
 10274  1F14  008C               	movwf	12	;volatile
 10275                           
 10276                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10277  1F15  3007               	movlw	7
 10278  1F16  008D               	movwf	13	;volatile
 10279                           
 10280                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10281  1F17  300C               	movlw	12
 10282  1F18  008E               	movwf	14	;volatile
 10283  1F19  0008               	return
 10284  1F1A                     __end_of_IO_Set:	
 10285                           
 10286                           	psect	text53
 10287  1D5D                     __ptext53:	
 10288 ;; *************** function _IOC_Set *****************
 10289 ;; Defined at:
 10290 ;;		line 270 in file "../src/MCU_B1.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;		None               void
 10297 ;; Registers used:
 10298 ;;		wreg, status,2
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        0 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    5
 10311 ;; This function calls:
 10312 ;;		Nothing
 10313 ;; This function is called by:
 10314 ;;		_Mcu_Initialization
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _IOC_Set
 10320  1D5D                     _IOC_Set:	
 10321                           
 10322                           ;MCU_B1.c: 271: WPUB2 = 0;
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _IOC_Set: [wreg+status,2]
 10326  1D5D  0024               	movlb	4	; select bank4
 10327  1D5E  110D               	bcf	13,2	;volatile
 10328                           
 10329                           ;MCU_B1.c: 273: IOCBP = 0b00000100;
 10330  1D5F  3004               	movlw	4
 10331  1D60  0027               	movlb	7	; select bank7
 10332  1D61  0094               	movwf	20	;volatile
 10333                           
 10334                           ;MCU_B1.c: 274: IOCBN = 0b00000100;
 10335  1D62  3004               	movlw	4
 10336  1D63  0095               	movwf	21	;volatile
 10337                           
 10338                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
 10339  1D64  0196               	clrf	22	;volatile
 10340                           
 10341                           ;MCU_B1.c: 291: IOCIE = 1;
 10342  1D65  158B               	bsf	11,3	;volatile
 10343                           
 10344                           ;MCU_B1.c: 292: IOCIF = 0;
 10345  1D66  100B               	bcf	11,0	;volatile
 10346                           
 10347                           ;MCU_B1.c: 293: PEIE = 1;
 10348  1D67  170B               	bsf	11,6	;volatile
 10349                           
 10350                           ;MCU_B1.c: 294: GIE = 1;
 10351  1D68  178B               	bsf	11,7	;volatile
 10352  1D69  0008               	return
 10353  1D6A                     __end_of_IOC_Set:	
 10354                           
 10355                           	psect	text54
 10356  1C50                     __ptext54:	
 10357 ;; *************** function _INT_Set *****************
 10358 ;; Defined at:
 10359 ;;		line 242 in file "../src/MCU_B1.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;		None
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;		None
 10364 ;; Return value:  Size  Location     Type
 10365 ;;		None               void
 10366 ;; Registers used:
 10367 ;;		None
 10368 ;; Tracked objects:
 10369 ;;		On entry : 0/0
 10370 ;;		On exit  : 0/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;Total ram usage:        0 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    5
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_Mcu_Initialization
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           
 10388                           ;psect for function _INT_Set
 10389  1C50                     _INT_Set:	
 10390                           
 10391                           ;MCU_B1.c: 243: WPUB0 = 0;
 10392                           
 10393                           ;incstack = 0
 10394                           ; Regs used in _INT_Set: []
 10395  1C50  0024               	movlb	4	; select bank4
 10396  1C51  100D               	bcf	13,0	;volatile
 10397                           
 10398                           ;MCU_B1.c: 244: INTE = 0;
 10399  1C52  120B               	bcf	11,4	;volatile
 10400                           
 10401                           ;MCU_B1.c: 245: PEIE = 1;
 10402  1C53  170B               	bsf	11,6	;volatile
 10403                           
 10404                           ;MCU_B1.c: 246: GIE = 1;
 10405  1C54  178B               	bsf	11,7	;volatile
 10406  1C55  0008               	return
 10407  1C56                     __end_of_INT_Set:	
 10408                           
 10409                           	psect	text55
 10410  1C3B                     __ptext55:	
 10411 ;; *************** function _Fosc_Set *****************
 10412 ;; Defined at:
 10413 ;;		line 58 in file "../src/MCU_B1.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;		None               void
 10420 ;; Registers used:
 10421 ;;		wreg
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;Total ram usage:        0 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    5
 10434 ;; This function calls:
 10435 ;;		Nothing
 10436 ;; This function is called by:
 10437 ;;		_Mcu_Initialization
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           
 10442                           ;psect for function _Fosc_Set
 10443  1C3B                     _Fosc_Set:	
 10444                           
 10445                           ;MCU_B1.c: 59: OSCCON = 0x78;
 10446                           
 10447                           ;incstack = 0
 10448                           ; Regs used in _Fosc_Set: [wreg]
 10449  1C3B  3078               	movlw	120
 10450  1C3C  0021               	movlb	1	; select bank1
 10451  1C3D  0099               	movwf	25	;volatile
 10452  1C3E  0008               	return
 10453  1C3F                     __end_of_Fosc_Set:	
 10454                           
 10455                           	psect	text56
 10456  1C77                     __ptext56:	
 10457 ;; *************** function _ADC_Set *****************
 10458 ;; Defined at:
 10459 ;;		line 316 in file "../src/MCU_B1.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;		None               void
 10466 ;; Registers used:
 10467 ;;		wreg
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;Total ram usage:        0 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    5
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		_Mcu_Initialization
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function _ADC_Set
 10489  1C77                     _ADC_Set:	
 10490                           
 10491                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
 10492                           
 10493                           ;incstack = 0
 10494                           ; Regs used in _ADC_Set: [wreg]
 10495  1C77  30F2               	movlw	242
 10496  1C78  0021               	movlb	1	; select bank1
 10497  1C79  009E               	movwf	30	;volatile
 10498                           
 10499                           ;MCU_B1.c: 318: FVRCON = 0xc0;
 10500  1C7A  30C0               	movlw	192
 10501  1C7B  0022               	movlb	2	; select bank2
 10502  1C7C  0097               	movwf	23	;volatile
 10503  1C7D  0008               	return
 10504  1C7E                     __end_of_ADC_Set:	
 10505                           
 10506                           	psect	text57
 10507  1D37                     __ptext57:	
 10508 ;; *************** function _LED_Main *****************
 10509 ;; Defined at:
 10510 ;;		line 51 in file "../src/LED_B1.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;		None               void
 10517 ;; Registers used:
 10518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:        0 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    7
 10531 ;; This function calls:
 10532 ;;		_setLED_Main
 10533 ;; This function is called by:
 10534 ;;		_main
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _LED_Main
 10540  1D37                     _LED_Main:	
 10541                           
 10542                           ;LED_B1.c: 54: setLED_Main(1);
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10546  1D37  3001               	movlw	1
 10547  1D38  3193  2329  319D   	fcall	_setLED_Main
 10548                           
 10549                           ;LED_B1.c: 57: setLED_Main(2);
 10550  1D3B  3002               	movlw	2
 10551  1D3C  3193  2329  319D   	fcall	_setLED_Main
 10552                           
 10553                           ;LED_B1.c: 63: setLED_Main(99);
 10554  1D3F  3063               	movlw	99
 10555  1D40  3193  2329         	fcall	_setLED_Main
 10556  1D42  0008               	return
 10557  1D43                     __end_of_LED_Main:	
 10558                           
 10559                           	psect	text58
 10560  1329                     __ptext58:	
 10561 ;; *************** function _setLED_Main *****************
 10562 ;; Defined at:
 10563 ;;		line 215 in file "../src/LED_B1.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  led             1    wreg     unsigned char 
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  led             1    4[BANK0 ] unsigned char 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;		None               void
 10570 ;; Registers used:
 10571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;Total ram usage:        3 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    6
 10584 ;; This function calls:
 10585 ;;		_LedPointSelect
 10586 ;; This function is called by:
 10587 ;;		_LED_Main
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           
 10592                           ;psect for function _setLED_Main
 10593  1329                     _setLED_Main:	
 10594                           
 10595                           ;incstack = 0
 10596                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10597                           ;setLED_Main@led stored from wreg
 10598  1329  0020               	movlb	0	; select bank0
 10599  132A  00A4               	movwf	setLED_Main@led
 10600                           
 10601                           ;LED_B1.c: 217: LedPointSelect(led);
 10602  132B  0824               	movf	setLED_Main@led,w
 10603  132C  3190  20B7  3193   	fcall	_LedPointSelect
 10604                           
 10605                           ;LED_B1.c: 218: if(LED->GO)
 10606  132F  0021               	movlb	1	; select bank1
 10607  1330  083D               	movf	_LED^(0+128),w
 10608  1331  0086               	movwf	6
 10609  1332  0187               	clrf	7
 10610  1333  1C81               	btfss	1,1
 10611  1334  0008               	return
 10612                           
 10613                           ;LED_B1.c: 219: {
 10614                           ;LED_B1.c: 220: LED->Time++;
 10615  1335  0A3D               	incf	_LED^(0+128),w
 10616  1336  0086               	movwf	6
 10617  1337  0187               	clrf	7
 10618  1338  3001               	movlw	1
 10619  1339  0781               	addwf	1,f
 10620  133A  3141               	addfsr 1,1
 10621  133B  1803               	skipnc
 10622  133C  0A81               	incf	1,f
 10623                           
 10624                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 10625  133D  0A3D               	incf	_LED^(0+128),w
 10626  133E  0086               	movwf	6
 10627  133F  0187               	clrf	7
 10628  1340  3F40               	moviw [0]fsr1
 10629  1341  0020               	movlb	0	; select bank0
 10630  1342  00A2               	movwf	??_setLED_Main
 10631  1343  3F41               	moviw [1]fsr1
 10632  1344  00A3               	movwf	??_setLED_Main+1
 10633  1345  3000               	movlw	0
 10634  1346  0223               	subwf	??_setLED_Main+1,w
 10635  1347  3032               	movlw	50
 10636  1348  1903               	skipnz
 10637  1349  0222               	subwf	??_setLED_Main,w
 10638  134A  1C03               	skipc
 10639  134B  0008               	return
 10640                           
 10641                           ;LED_B1.c: 222: {
 10642                           ;LED_B1.c: 223: LED->Time=0;
 10643  134C  0021               	movlb	1	; select bank1
 10644  134D  0A3D               	incf	_LED^(0+128),w
 10645  134E  0086               	movwf	6
 10646  134F  0187               	clrf	7
 10647  1350  3000               	movlw	0
 10648  1351  3FC0               	movwi [0]fsr1
 10649  1352  3FC1               	movwi [1]fsr1
 10650                           
 10651                           ;LED_B1.c: 225: if(led == 1)
 10652  1353  0020               	movlb	0	; select bank0
 10653  1354  0824               	movf	setLED_Main@led,w
 10654  1355  3A01               	xorlw	1
 10655  1356  1D03               	skipz
 10656  1357  2B5B               	goto	l6518
 10657                           
 10658                           ;LED_B1.c: 226: {
 10659                           ;LED_B1.c: 227: RA3=~RA3;
 10660  1358  3008               	movlw	8
 10661  1359  068C               	xorwf	12,f
 10662                           
 10663                           ;LED_B1.c: 228: }
 10664  135A  0008               	return
 10665  135B                     l6518:	
 10666                           
 10667                           ;LED_B1.c: 231: else if(led == 2)
 10668  135B  0824               	movf	setLED_Main@led,w
 10669  135C  3A02               	xorlw	2
 10670  135D  1D03               	skipz
 10671  135E  2B62               	goto	l6522
 10672                           
 10673                           ;LED_B1.c: 232: {
 10674                           ;LED_B1.c: 233: RC7=~RC7;
 10675  135F  3080               	movlw	128
 10676  1360  068E               	xorwf	14,f
 10677                           
 10678                           ;LED_B1.c: 234: }
 10679  1361  0008               	return
 10680  1362                     l6522:	
 10681                           
 10682                           ;LED_B1.c: 243: else if(led == 99)
 10683  1362  0824               	movf	setLED_Main@led,w
 10684  1363  3A63               	xorlw	99
 10685  1364  1D03               	skipz
 10686  1365  0008               	return
 10687                           
 10688                           ;LED_B1.c: 244: {
 10689                           ;LED_B1.c: 245: RB5=~RB5;
 10690  1366  3020               	movlw	32
 10691  1367  068D               	xorwf	13,f
 10692  1368  0008               	return
 10693  1369                     __end_of_setLED_Main:	
 10694                           
 10695                           	psect	text59
 10696  1D2B                     __ptext59:	
 10697 ;; *************** function _LED_Initialization *****************
 10698 ;; Defined at:
 10699 ;;		line 35 in file "../src/LED_B1.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;		None
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;		None
 10704 ;; Return value:  Size  Location     Type
 10705 ;;		None               void
 10706 ;; Registers used:
 10707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;Total ram usage:        0 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    8
 10720 ;; This function calls:
 10721 ;;		_setLED_Initialization
 10722 ;; This function is called by:
 10723 ;;		_main
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function _LED_Initialization
 10729  1D2B                     _LED_Initialization:	
 10730                           
 10731                           ;LED_B1.c: 38: setLED_Initialization(1);
 10732                           
 10733                           ;incstack = 0
 10734                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10735  1D2B  3001               	movlw	1
 10736  1D2C  319E  2653  319D   	fcall	_setLED_Initialization
 10737                           
 10738                           ;LED_B1.c: 41: setLED_Initialization(2);
 10739  1D2F  3002               	movlw	2
 10740  1D30  319E  2653  319D   	fcall	_setLED_Initialization
 10741                           
 10742                           ;LED_B1.c: 47: setLED_Initialization(99);
 10743  1D33  3063               	movlw	99
 10744  1D34  319E  2653         	fcall	_setLED_Initialization
 10745  1D36  0008               	return
 10746  1D37                     __end_of_LED_Initialization:	
 10747                           
 10748                           	psect	text60
 10749  1E53                     __ptext60:	
 10750 ;; *************** function _setLED_Initialization *****************
 10751 ;; Defined at:
 10752 ;;		line 67 in file "../src/LED_B1.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;  led             1    wreg     unsigned char 
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;  led             1    4[BANK0 ] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:        1 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    7
 10773 ;; This function calls:
 10774 ;;		_LedPointSelect
 10775 ;;		_setLED
 10776 ;; This function is called by:
 10777 ;;		_LED_Initialization
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _setLED_Initialization
 10783  1E53                     _setLED_Initialization:	
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10787                           ;setLED_Initialization@led stored from wreg
 10788  1E53  0020               	movlb	0	; select bank0
 10789  1E54  00A4               	movwf	setLED_Initialization@led
 10790                           
 10791                           ;LED_B1.c: 69: LedPointSelect(led);
 10792  1E55  0824               	movf	setLED_Initialization@led,w
 10793  1E56  3190  20B7  319E   	fcall	_LedPointSelect
 10794                           
 10795                           ;LED_B1.c: 70: LED->Enable=1;
 10796  1E59  0021               	movlb	1	; select bank1
 10797  1E5A  083D               	movf	_LED^(0+128),w
 10798  1E5B  0086               	movwf	6
 10799  1E5C  0187               	clrf	7
 10800  1E5D  1401               	bsf	1,0
 10801                           
 10802                           ;LED_B1.c: 71: setLED(led,0);
 10803  1E5E  0020               	movlb	0	; select bank0
 10804  1E5F  01A2               	clrf	setLED@command
 10805  1E60  0824               	movf	setLED_Initialization@led,w
 10806  1E61  3197  27A2         	fcall	_setLED
 10807  1E63  0008               	return
 10808  1E64                     __end_of_setLED_Initialization:	
 10809                           
 10810                           	psect	text61
 10811  1430                     __ptext61:	
 10812 ;; *************** function _Flash_Memory_Main *****************
 10813 ;; Defined at:
 10814 ;;		line 787 in file "../src/MCU_B1.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;		None               void
 10821 ;; Registers used:
 10822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    8
 10835 ;; This function calls:
 10836 ;;		_Flash_Memory_Modify
 10837 ;; This function is called by:
 10838 ;;		_main
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           
 10843                           ;psect for function _Flash_Memory_Main
 10844  1430                     _Flash_Memory_Main:	
 10845                           
 10846                           ;MCU_B1.c: 788: if (Memory->GO == 1) {
 10847                           
 10848                           ;incstack = 0
 10849                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10850  1430  0021               	movlb	1	; select bank1
 10851  1431  086E               	movf	_Memory^(0+128),w
 10852  1432  3E24               	addlw	36
 10853  1433  0086               	movwf	6
 10854  1434  3001               	movlw	1	; select bank2/3
 10855  1435  0087               	movwf	7
 10856  1436  1C81               	btfss	1,1
 10857  1437  0008               	return
 10858                           
 10859                           ;MCU_B1.c: 789: if (Memory->Modify == 1) {
 10860  1438  086E               	movf	_Memory^(0+128),w
 10861  1439  3E24               	addlw	36
 10862  143A  0086               	movwf	6
 10863  143B  3001               	movlw	1	; select bank2/3
 10864  143C  0087               	movwf	7
 10865  143D  1C01               	btfss	1,0
 10866  143E  2C6D               	goto	l7032
 10867                           
 10868                           ;MCU_B1.c: 790: Memory->Time++;
 10869  143F  086E               	movf	_Memory^(0+128),w
 10870  1440  3E22               	addlw	34
 10871  1441  0086               	movwf	6
 10872  1442  3001               	movlw	1	; select bank2/3
 10873  1443  0087               	movwf	7
 10874  1444  3001               	movlw	1
 10875  1445  0781               	addwf	1,f
 10876  1446  3141               	addfsr 1,1
 10877  1447  1803               	skipnc
 10878  1448  0A81               	incf	1,f
 10879                           
 10880                           ;MCU_B1.c: 791: if (Memory->Time == 25)
 10881  1449  086E               	movf	_Memory^(0+128),w
 10882  144A  3E22               	addlw	34
 10883  144B  0086               	movwf	6
 10884  144C  3001               	movlw	1	; select bank2/3
 10885  144D  0087               	movwf	7
 10886  144E  3F40               	moviw [0]fsr1
 10887  144F  3A19               	xorlw	25
 10888  1450  1D03               	skipz
 10889  1451  2C54               	goto	u6215
 10890  1452  3F41               	moviw [1]fsr1
 10891  1453  3A00               	xorlw	0
 10892  1454                     u6215:	
 10893  1454  1D03               	skipz
 10894  1455  0008               	return
 10895                           
 10896                           ;MCU_B1.c: 792: {
 10897                           ;MCU_B1.c: 793: Memory->Time = 0;
 10898  1456  086E               	movf	_Memory^(0+128),w
 10899  1457  3E22               	addlw	34
 10900  1458  0086               	movwf	6
 10901  1459  3001               	movlw	1	; select bank2/3
 10902  145A  0087               	movwf	7
 10903  145B  3000               	movlw	0
 10904  145C  3FC0               	movwi [0]fsr1
 10905  145D  3FC1               	movwi [1]fsr1
 10906                           
 10907                           ;MCU_B1.c: 794: Memory->Modify = 0;
 10908  145E  086E               	movf	_Memory^(0+128),w
 10909  145F  3E24               	addlw	36
 10910  1460  0086               	movwf	6
 10911  1461  3001               	movlw	1	; select bank2/3
 10912  1462  0087               	movwf	7
 10913  1463  1001               	bcf	1,0
 10914                           
 10915                           ;MCU_B1.c: 795: Memory->GO = 0;
 10916  1464  086E               	movf	_Memory^(0+128),w
 10917  1465  3E24               	addlw	36
 10918  1466  0086               	movwf	6
 10919  1467  3001               	movlw	1	; select bank2/3
 10920  1468  0087               	movwf	7
 10921  1469  1081               	bcf	1,1
 10922                           
 10923                           ;MCU_B1.c: 796: Flash_Memory_Modify();
 10924  146A  3189  21AA         	fcall	_Flash_Memory_Modify
 10925                           
 10926                           ;MCU_B1.c: 797: }
 10927                           ;MCU_B1.c: 798: } else {
 10928  146C  0008               	return
 10929  146D                     l7032:	
 10930                           
 10931                           ;MCU_B1.c: 799: Memory->GO = 0;
 10932  146D  0021               	movlb	1	; select bank1
 10933  146E  086E               	movf	_Memory^(0+128),w
 10934  146F  3E24               	addlw	36
 10935  1470  0086               	movwf	6
 10936  1471  3001               	movlw	1	; select bank2/3
 10937  1472  0087               	movwf	7
 10938  1473  1081               	bcf	1,1
 10939  1474  0008               	return
 10940  1475                     __end_of_Flash_Memory_Main:	
 10941                           
 10942                           	psect	text62
 10943  09AA                     __ptext62:	
 10944 ;; *************** function _Flash_Memory_Modify *****************
 10945 ;; Defined at:
 10946 ;;		line 856 in file "../src/MCU_B1.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;		None
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  i               1    6[BANK0 ] unsigned char 
 10951 ;; Return value:  Size  Location     Type
 10952 ;;		None               void
 10953 ;; Registers used:
 10954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;Total ram usage:        3 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    7
 10967 ;; This function calls:
 10968 ;;		_Flash_Memory_Erasing
 10969 ;;		_Flash_Memory_Read
 10970 ;;		_Flash_Memory_Write
 10971 ;; This function is called by:
 10972 ;;		_Flash_Memory_Main
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _Flash_Memory_Modify
 10978  09AA                     _Flash_Memory_Modify:	
 10979                           
 10980                           ;MCU_B1.c: 857: char i = 0;
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10984  09AA  0020               	movlb	0	; select bank0
 10985  09AB  01A6               	clrf	Flash_Memory_Modify@i
 10986                           
 10987                           ;MCU_B1.c: 858: for (i = 0; i < 32; i++) {
 10988  09AC  01A6               	clrf	Flash_Memory_Modify@i
 10989  09AD  3020               	movlw	32
 10990  09AE  0226               	subwf	Flash_Memory_Modify@i,w
 10991  09AF  1803               	btfsc	3,0
 10992  09B0  29CA               	goto	l6612
 10993  09B1                     l6606:	
 10994                           
 10995                           ;MCU_B1.c: 859: Memory->Data[i] = Flash_Memory_Read(i);
 10996  09B1  0826               	movf	Flash_Memory_Modify@i,w
 10997  09B2  319F  271A  3189   	fcall	_Flash_Memory_Read
 10998  09B5  0020               	movlb	0	; select bank0
 10999  09B6  00A4               	movwf	??_Flash_Memory_Modify
 11000  09B7  0826               	movf	Flash_Memory_Modify@i,w
 11001  09B8  0021               	movlb	1	; select bank1
 11002  09B9  076E               	addwf	_Memory^(0+128),w
 11003  09BA  0020               	movlb	0	; select bank0
 11004  09BB  00A5               	movwf	??_Flash_Memory_Modify+1
 11005  09BC  0825               	movf	??_Flash_Memory_Modify+1,w
 11006  09BD  0086               	movwf	6
 11007  09BE  3001               	movlw	1	; select bank2/3
 11008  09BF  0087               	movwf	7
 11009  09C0  0824               	movf	??_Flash_Memory_Modify,w
 11010  09C1  0081               	movwf	1
 11011  09C2  3001               	movlw	1
 11012  09C3  00A4               	movwf	??_Flash_Memory_Modify
 11013  09C4  0824               	movf	??_Flash_Memory_Modify,w
 11014  09C5  07A6               	addwf	Flash_Memory_Modify@i,f
 11015  09C6  3020               	movlw	32
 11016  09C7  0226               	subwf	Flash_Memory_Modify@i,w
 11017  09C8  1C03               	skipc
 11018  09C9  29B1               	goto	l6606
 11019  09CA                     l6612:	
 11020                           
 11021                           ;MCU_B1.c: 860: }
 11022                           ;MCU_B1.c: 861: Memory->Data[0]=product->Data[12];
 11023  09CA  087D               	movf	_product,w
 11024  09CB  3E0C               	addlw	12
 11025  09CC  0086               	movwf	6
 11026  09CD  3001               	movlw	1	; select bank2/3
 11027  09CE  0087               	movwf	7
 11028  09CF  0801               	movf	1,w
 11029  09D0  00A4               	movwf	??_Flash_Memory_Modify
 11030  09D1  0021               	movlb	1	; select bank1
 11031  09D2  086E               	movf	_Memory^(0+128),w
 11032  09D3  0086               	movwf	6
 11033  09D4  3001               	movlw	1	; select bank2/3
 11034  09D5  0087               	movwf	7
 11035  09D6  0020               	movlb	0	; select bank0
 11036  09D7  0824               	movf	??_Flash_Memory_Modify,w
 11037  09D8  0081               	movwf	1
 11038                           
 11039                           ;MCU_B1.c: 862: Memory->Data[1]=product->Data[13];
 11040  09D9  087D               	movf	_product,w
 11041  09DA  3E0D               	addlw	13
 11042  09DB  0086               	movwf	6
 11043  09DC  3001               	movlw	1	; select bank2/3
 11044  09DD  0087               	movwf	7
 11045  09DE  0801               	movf	1,w
 11046  09DF  00A4               	movwf	??_Flash_Memory_Modify
 11047  09E0  0021               	movlb	1	; select bank1
 11048  09E1  0A6E               	incf	_Memory^(0+128),w
 11049  09E2  0086               	movwf	6
 11050  09E3  3001               	movlw	1	; select bank2/3
 11051  09E4  0087               	movwf	7
 11052  09E5  0020               	movlb	0	; select bank0
 11053  09E6  0824               	movf	??_Flash_Memory_Modify,w
 11054  09E7  0081               	movwf	1
 11055                           
 11056                           ;MCU_B1.c: 863: Memory->Data[2]=product->Data[14];
 11057  09E8  087D               	movf	_product,w
 11058  09E9  3E0E               	addlw	14
 11059  09EA  0086               	movwf	6
 11060  09EB  3001               	movlw	1	; select bank2/3
 11061  09EC  0087               	movwf	7
 11062  09ED  0801               	movf	1,w
 11063  09EE  00A4               	movwf	??_Flash_Memory_Modify
 11064  09EF  0021               	movlb	1	; select bank1
 11065  09F0  086E               	movf	_Memory^(0+128),w
 11066  09F1  3E02               	addlw	2
 11067  09F2  0086               	movwf	6
 11068  09F3  3001               	movlw	1	; select bank2/3
 11069  09F4  0087               	movwf	7
 11070  09F5  0020               	movlb	0	; select bank0
 11071  09F6  0824               	movf	??_Flash_Memory_Modify,w
 11072  09F7  0081               	movwf	1
 11073                           
 11074                           ;MCU_B1.c: 869: if (Memory->LoopSave == 1) {
 11075  09F8  0021               	movlb	1	; select bank1
 11076  09F9  086E               	movf	_Memory^(0+128),w
 11077  09FA  3E24               	addlw	36
 11078  09FB  0086               	movwf	6
 11079  09FC  3001               	movlw	1	; select bank2/3
 11080  09FD  0087               	movwf	7
 11081  09FE  1D01               	btfss	1,2
 11082  09FF  2A10               	goto	l6616
 11083                           
 11084                           ;MCU_B1.c: 870: Memory->LoopSave = 0;
 11085  0A00  086E               	movf	_Memory^(0+128),w
 11086  0A01  3E24               	addlw	36
 11087  0A02  0086               	movwf	6
 11088  0A03  3001               	movlw	1	; select bank2/3
 11089  0A04  0087               	movwf	7
 11090  0A05  1101               	bcf	1,2
 11091                           
 11092                           ;MCU_B1.c: 871: myMain->FirstOpen = 0;
 11093  0A06  086D               	movf	_myMain^(0+128),w
 11094  0A07  0086               	movwf	6
 11095  0A08  3001               	movlw	1	; select bank2/3
 11096  0A09  0087               	movwf	7
 11097  0A0A  1281               	bcf	1,5
 11098                           
 11099                           ;MCU_B1.c: 872: myMain->First = 0;
 11100  0A0B  086D               	movf	_myMain^(0+128),w
 11101  0A0C  0086               	movwf	6
 11102  0A0D  3001               	movlw	1	; select bank2/3
 11103  0A0E  0087               	movwf	7
 11104  0A0F  1381               	bcf	1,7
 11105  0A10                     l6616:	
 11106                           
 11107                           ;MCU_B1.c: 874: }
 11108                           ;MCU_B1.c: 875: GIE = 0;
 11109  0A10  138B               	bcf	11,7	;volatile
 11110                           
 11111                           ;MCU_B1.c: 876: Flash_Memory_Erasing();
 11112  0A11  319D  251F  3189   	fcall	_Flash_Memory_Erasing
 11113                           
 11114                           ;MCU_B1.c: 877: Flash_Memory_Write();
 11115  0A14  3192  2283         	fcall	_Flash_Memory_Write
 11116                           
 11117                           ;MCU_B1.c: 878: GIE = 1;
 11118  0A16  178B               	bsf	11,7	;volatile
 11119  0A17  0008               	return
 11120  0A18                     __end_of_Flash_Memory_Modify:	
 11121                           
 11122                           	psect	text63
 11123  1D1F                     __ptext63:	
 11124 ;; *************** function _Flash_Memory_Erasing *****************
 11125 ;; Defined at:
 11126 ;;		line 845 in file "../src/MCU_B1.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;		None
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;		None
 11131 ;; Return value:  Size  Location     Type
 11132 ;;		None               void
 11133 ;; Registers used:
 11134 ;;		wreg, status,2, status,0, pclath, cstack
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;Total ram usage:        0 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    6
 11147 ;; This function calls:
 11148 ;;		_Flash_Memory_Unlock
 11149 ;; This function is called by:
 11150 ;;		_Flash_Memory_Modify
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           
 11155                           ;psect for function _Flash_Memory_Erasing
 11156  1D1F                     _Flash_Memory_Erasing:	
 11157                           
 11158                           ;MCU_B1.c: 846: CFGS = 0;
 11159                           
 11160                           ;incstack = 0
 11161                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11162  1D1F  0023               	movlb	3	; select bank3
 11163  1D20  1315               	bcf	21,6	;volatile
 11164                           
 11165                           ;MCU_B1.c: 847: PMADRH = 0x30;
 11166  1D21  3030               	movlw	48
 11167  1D22  0092               	movwf	18	;volatile
 11168                           
 11169                           ;MCU_B1.c: 848: PMADRL = 0x00;
 11170  1D23  0191               	clrf	17	;volatile
 11171                           
 11172                           ;MCU_B1.c: 849: FREE = 1;
 11173  1D24  1615               	bsf	21,4	;volatile
 11174                           
 11175                           ;MCU_B1.c: 850: WREN = 1;
 11176  1D25  1515               	bsf	21,2	;volatile
 11177                           
 11178                           ;MCU_B1.c: 851: Flash_Memory_Unlock();
 11179  1D26  319C  2485         	fcall	_Flash_Memory_Unlock
 11180                           
 11181                           ;MCU_B1.c: 852: WREN = 0;
 11182  1D28  0023               	movlb	3	; select bank3
 11183  1D29  1115               	bcf	21,2	;volatile
 11184  1D2A  0008               	return
 11185  1D2B                     __end_of_Flash_Memory_Erasing:	
 11186                           
 11187                           	psect	text64
 11188  0343                     __ptext64:	
 11189 ;; *************** function _Flash_Memory_Initialization *****************
 11190 ;; Defined at:
 11191 ;;		line 746 in file "../src/MCU_B1.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;		None
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  i               1   62[BANK0 ] unsigned char 
 11196 ;; Return value:  Size  Location     Type
 11197 ;;		None               void
 11198 ;; Registers used:
 11199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/0
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;Total ram usage:        2 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    8
 11212 ;; This function calls:
 11213 ;;		_Flash_Memory_Read
 11214 ;;		_Flash_Memory_Write
 11215 ;;		_setPercentValue
 11216 ;; This function is called by:
 11217 ;;		_main
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           
 11222                           ;psect for function _Flash_Memory_Initialization
 11223  0343                     _Flash_Memory_Initialization:	
 11224                           
 11225                           ;MCU_B1.c: 747: char i = 0;
 11226                           
 11227                           ;incstack = 0
 11228                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11229  0343  0020               	movlb	0	; select bank0
 11230  0344  01DE               	clrf	Flash_Memory_Initialization@i
 11231                           
 11232                           ;MCU_B1.c: 748: if (Flash_Memory_Read(31) == 0xaa) {
 11233  0345  301F               	movlw	31
 11234  0346  319F  271A  3183   	fcall	_Flash_Memory_Read
 11235  0349  3AAA               	xorlw	170
 11236  034A  1D03               	skipz
 11237  034B  2BBD               	goto	l6988
 11238                           
 11239                           ;MCU_B1.c: 749: product->Data[12] = Flash_Memory_Read(0);
 11240  034C  3000               	movlw	0
 11241  034D  319F  271A  3183   	fcall	_Flash_Memory_Read
 11242  0350  0020               	movlb	0	; select bank0
 11243  0351  00DD               	movwf	??_Flash_Memory_Initialization
 11244  0352  087D               	movf	_product,w
 11245  0353  3E0C               	addlw	12
 11246  0354  0086               	movwf	6
 11247  0355  3001               	movlw	1	; select bank2/3
 11248  0356  0087               	movwf	7
 11249  0357  085D               	movf	??_Flash_Memory_Initialization,w
 11250  0358  0081               	movwf	1
 11251                           
 11252                           ;MCU_B1.c: 750: product->Data[13] = Flash_Memory_Read(1);
 11253  0359  3001               	movlw	1
 11254  035A  319F  271A  3183   	fcall	_Flash_Memory_Read
 11255  035D  0020               	movlb	0	; select bank0
 11256  035E  00DD               	movwf	??_Flash_Memory_Initialization
 11257  035F  087D               	movf	_product,w
 11258  0360  3E0D               	addlw	13
 11259  0361  0086               	movwf	6
 11260  0362  3001               	movlw	1	; select bank2/3
 11261  0363  0087               	movwf	7
 11262  0364  085D               	movf	??_Flash_Memory_Initialization,w
 11263  0365  0081               	movwf	1
 11264                           
 11265                           ;MCU_B1.c: 751: product->Data[14] = Flash_Memory_Read(2);
 11266  0366  3002               	movlw	2
 11267  0367  319F  271A  3183   	fcall	_Flash_Memory_Read
 11268  036A  0020               	movlb	0	; select bank0
 11269  036B  00DD               	movwf	??_Flash_Memory_Initialization
 11270  036C  087D               	movf	_product,w
 11271  036D  3E0E               	addlw	14
 11272  036E  0086               	movwf	6
 11273  036F  3001               	movlw	1	; select bank2/3
 11274  0370  0087               	movwf	7
 11275  0371  085D               	movf	??_Flash_Memory_Initialization,w
 11276  0372  0081               	movwf	1
 11277                           
 11278                           ;MCU_B1.c: 757: i = setPercentValue(((char)((100-60)*0.8)));
 11279  0373  3020               	movlw	32
 11280  0374  3194  24BA  3183   	fcall	_setPercentValue
 11281  0377  0020               	movlb	0	; select bank0
 11282  0378  00DD               	movwf	??_Flash_Memory_Initialization
 11283  0379  085D               	movf	??_Flash_Memory_Initialization,w
 11284  037A  00DE               	movwf	Flash_Memory_Initialization@i
 11285                           
 11286                           ;MCU_B1.c: 758: product->Data[21] = i;
 11287  037B  085E               	movf	Flash_Memory_Initialization@i,w
 11288  037C  00DD               	movwf	??_Flash_Memory_Initialization
 11289  037D  087D               	movf	_product,w
 11290  037E  3E15               	addlw	21
 11291  037F  0086               	movwf	6
 11292  0380  3001               	movlw	1	; select bank2/3
 11293  0381  0087               	movwf	7
 11294  0382  085D               	movf	??_Flash_Memory_Initialization,w
 11295  0383  0081               	movwf	1
 11296                           
 11297                           ;MCU_B1.c: 759: product->Data[22] = i;
 11298  0384  085E               	movf	Flash_Memory_Initialization@i,w
 11299  0385  00DD               	movwf	??_Flash_Memory_Initialization
 11300  0386  087D               	movf	_product,w
 11301  0387  3E16               	addlw	22
 11302  0388  0086               	movwf	6
 11303  0389  3001               	movlw	1	; select bank2/3
 11304  038A  0087               	movwf	7
 11305  038B  085D               	movf	??_Flash_Memory_Initialization,w
 11306  038C  0081               	movwf	1
 11307                           
 11308                           ;MCU_B1.c: 760: product->Data[23] = i;
 11309  038D  085E               	movf	Flash_Memory_Initialization@i,w
 11310  038E  00DD               	movwf	??_Flash_Memory_Initialization
 11311  038F  087D               	movf	_product,w
 11312  0390  3E17               	addlw	23
 11313  0391  0086               	movwf	6
 11314  0392  3001               	movlw	1	; select bank2/3
 11315  0393  0087               	movwf	7
 11316  0394  085D               	movf	??_Flash_Memory_Initialization,w
 11317  0395  0081               	movwf	1
 11318                           
 11319                           ;MCU_B1.c: 762: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11320  0396  087D               	movf	_product,w
 11321  0397  3E0C               	addlw	12
 11322  0398  0086               	movwf	6
 11323  0399  3001               	movlw	1	; select bank2/3
 11324  039A  0087               	movwf	7
 11325  039B  0801               	movf	1,w
 11326  039C  3AFF               	xorlw	255
 11327  039D  1D03               	skipz
 11328  039E  0008               	return
 11329  039F  087D               	movf	_product,w
 11330  03A0  3E0D               	addlw	13
 11331  03A1  0086               	movwf	6
 11332  03A2  3001               	movlw	1	; select bank2/3
 11333  03A3  0087               	movwf	7
 11334  03A4  0801               	movf	1,w
 11335  03A5  3AFF               	xorlw	255
 11336  03A6  1D03               	skipz
 11337  03A7  0008               	return
 11338  03A8  087D               	movf	_product,w
 11339  03A9  3E0E               	addlw	14
 11340  03AA  0086               	movwf	6
 11341  03AB  3001               	movlw	1	; select bank2/3
 11342  03AC  0087               	movwf	7
 11343  03AD  0801               	movf	1,w
 11344  03AE  3AFF               	xorlw	255
 11345  03AF  1D03               	skipz
 11346  03B0  0008               	return
 11347                           
 11348                           ;MCU_B1.c: 763: myMain->FirstOpen = 1;
 11349  03B1  0021               	movlb	1	; select bank1
 11350  03B2  086D               	movf	_myMain^(0+128),w
 11351  03B3  0086               	movwf	6
 11352  03B4  3001               	movlw	1	; select bank2/3
 11353  03B5  0087               	movwf	7
 11354  03B6  1681               	bsf	1,5
 11355                           
 11356                           ;MCU_B1.c: 764: myMain->First = 1;
 11357  03B7  086D               	movf	_myMain^(0+128),w
 11358  03B8  0086               	movwf	6
 11359  03B9  3001               	movlw	1	; select bank2/3
 11360  03BA  0087               	movwf	7
 11361  03BB  1781               	bsf	1,7
 11362                           
 11363                           ;MCU_B1.c: 765: }
 11364                           ;MCU_B1.c: 766: } else {
 11365  03BC  0008               	return
 11366  03BD                     l6988:	
 11367                           
 11368                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-60)*0.8)));
 11369  03BD  3020               	movlw	32
 11370  03BE  3194  24BA  3183   	fcall	_setPercentValue
 11371  03C1  0020               	movlb	0	; select bank0
 11372  03C2  00DD               	movwf	??_Flash_Memory_Initialization
 11373  03C3  085D               	movf	??_Flash_Memory_Initialization,w
 11374  03C4  00DE               	movwf	Flash_Memory_Initialization@i
 11375                           
 11376                           ;MCU_B1.c: 768: Memory->Data[0]=0xff;
 11377  03C5  30FF               	movlw	255
 11378  03C6  00DD               	movwf	??_Flash_Memory_Initialization
 11379  03C7  0021               	movlb	1	; select bank1
 11380  03C8  086E               	movf	_Memory^(0+128),w
 11381  03C9  0086               	movwf	6
 11382  03CA  3001               	movlw	1	; select bank2/3
 11383  03CB  0087               	movwf	7
 11384  03CC  0020               	movlb	0	; select bank0
 11385  03CD  085D               	movf	??_Flash_Memory_Initialization,w
 11386  03CE  0081               	movwf	1
 11387                           
 11388                           ;MCU_B1.c: 769: Memory->Data[1]=0xff;
 11389  03CF  30FF               	movlw	255
 11390  03D0  00DD               	movwf	??_Flash_Memory_Initialization
 11391  03D1  0021               	movlb	1	; select bank1
 11392  03D2  0A6E               	incf	_Memory^(0+128),w
 11393  03D3  0086               	movwf	6
 11394  03D4  3001               	movlw	1	; select bank2/3
 11395  03D5  0087               	movwf	7
 11396  03D6  0020               	movlb	0	; select bank0
 11397  03D7  085D               	movf	??_Flash_Memory_Initialization,w
 11398  03D8  0081               	movwf	1
 11399                           
 11400                           ;MCU_B1.c: 770: Memory->Data[2]=0xff;
 11401  03D9  30FF               	movlw	255
 11402  03DA  00DD               	movwf	??_Flash_Memory_Initialization
 11403  03DB  0021               	movlb	1	; select bank1
 11404  03DC  086E               	movf	_Memory^(0+128),w
 11405  03DD  3E02               	addlw	2
 11406  03DE  0086               	movwf	6
 11407  03DF  3001               	movlw	1	; select bank2/3
 11408  03E0  0087               	movwf	7
 11409  03E1  0020               	movlb	0	; select bank0
 11410  03E2  085D               	movf	??_Flash_Memory_Initialization,w
 11411  03E3  0081               	movwf	1
 11412                           
 11413                           ;MCU_B1.c: 771: Memory->Data[3]=0xff;
 11414  03E4  30FF               	movlw	255
 11415  03E5  00DD               	movwf	??_Flash_Memory_Initialization
 11416  03E6  0021               	movlb	1	; select bank1
 11417  03E7  086E               	movf	_Memory^(0+128),w
 11418  03E8  3E03               	addlw	3
 11419  03E9  0086               	movwf	6
 11420  03EA  3001               	movlw	1	; select bank2/3
 11421  03EB  0087               	movwf	7
 11422  03EC  0020               	movlb	0	; select bank0
 11423  03ED  085D               	movf	??_Flash_Memory_Initialization,w
 11424  03EE  0081               	movwf	1
 11425                           
 11426                           ;MCU_B1.c: 772: Memory->Data[4]=0xff;
 11427  03EF  30FF               	movlw	255
 11428  03F0  00DD               	movwf	??_Flash_Memory_Initialization
 11429  03F1  0021               	movlb	1	; select bank1
 11430  03F2  086E               	movf	_Memory^(0+128),w
 11431  03F3  3E04               	addlw	4
 11432  03F4  0086               	movwf	6
 11433  03F5  3001               	movlw	1	; select bank2/3
 11434  03F6  0087               	movwf	7
 11435  03F7  0020               	movlb	0	; select bank0
 11436  03F8  085D               	movf	??_Flash_Memory_Initialization,w
 11437  03F9  0081               	movwf	1
 11438                           
 11439                           ;MCU_B1.c: 773: Memory->Data[5]=0xff;
 11440  03FA  30FF               	movlw	255
 11441  03FB  00DD               	movwf	??_Flash_Memory_Initialization
 11442  03FC  0021               	movlb	1	; select bank1
 11443  03FD  086E               	movf	_Memory^(0+128),w
 11444  03FE  3E05               	addlw	5
 11445  03FF  0086               	movwf	6
 11446  0400  3001               	movlw	1	; select bank2/3
 11447  0401  0087               	movwf	7
 11448  0402  0020               	movlb	0	; select bank0
 11449  0403  085D               	movf	??_Flash_Memory_Initialization,w
 11450  0404  0081               	movwf	1
 11451                           
 11452                           ;MCU_B1.c: 774: Memory->Data[31]=0xaa;
 11453  0405  30AA               	movlw	170
 11454  0406  00DD               	movwf	??_Flash_Memory_Initialization
 11455  0407  0021               	movlb	1	; select bank1
 11456  0408  086E               	movf	_Memory^(0+128),w
 11457  0409  3E1F               	addlw	31
 11458  040A  0086               	movwf	6
 11459  040B  3001               	movlw	1	; select bank2/3
 11460  040C  0087               	movwf	7
 11461  040D  0020               	movlb	0	; select bank0
 11462  040E  085D               	movf	??_Flash_Memory_Initialization,w
 11463  040F  0081               	movwf	1
 11464                           
 11465                           ;MCU_B1.c: 775: product->Data[21] = i;
 11466  0410  085E               	movf	Flash_Memory_Initialization@i,w
 11467  0411  00DD               	movwf	??_Flash_Memory_Initialization
 11468  0412  087D               	movf	_product,w
 11469  0413  3E15               	addlw	21
 11470  0414  0086               	movwf	6
 11471  0415  3001               	movlw	1	; select bank2/3
 11472  0416  0087               	movwf	7
 11473  0417  085D               	movf	??_Flash_Memory_Initialization,w
 11474  0418  0081               	movwf	1
 11475                           
 11476                           ;MCU_B1.c: 776: product->Data[22] = i;
 11477  0419  085E               	movf	Flash_Memory_Initialization@i,w
 11478  041A  00DD               	movwf	??_Flash_Memory_Initialization
 11479  041B  087D               	movf	_product,w
 11480  041C  3E16               	addlw	22
 11481  041D  0086               	movwf	6
 11482  041E  3001               	movlw	1	; select bank2/3
 11483  041F  0087               	movwf	7
 11484  0420  085D               	movf	??_Flash_Memory_Initialization,w
 11485  0421  0081               	movwf	1
 11486                           
 11487                           ;MCU_B1.c: 777: product->Data[23] = i;
 11488  0422  085E               	movf	Flash_Memory_Initialization@i,w
 11489  0423  00DD               	movwf	??_Flash_Memory_Initialization
 11490  0424  087D               	movf	_product,w
 11491  0425  3E17               	addlw	23
 11492  0426  0086               	movwf	6
 11493  0427  3001               	movlw	1	; select bank2/3
 11494  0428  0087               	movwf	7
 11495  0429  085D               	movf	??_Flash_Memory_Initialization,w
 11496  042A  0081               	movwf	1
 11497                           
 11498                           ;MCU_B1.c: 778: GIE = 0;
 11499  042B  138B               	bcf	11,7	;volatile
 11500                           
 11501                           ;MCU_B1.c: 779: Flash_Memory_Write();
 11502  042C  3192  2283         	fcall	_Flash_Memory_Write
 11503                           
 11504                           ;MCU_B1.c: 780: GIE = 1;
 11505  042E  178B               	bsf	11,7	;volatile
 11506                           
 11507                           ;MCU_B1.c: 781: myMain->FirstOpen = 1;
 11508  042F  0021               	movlb	1	; select bank1
 11509  0430  086D               	movf	_myMain^(0+128),w
 11510  0431  0086               	movwf	6
 11511  0432  3001               	movlw	1	; select bank2/3
 11512  0433  0087               	movwf	7
 11513  0434  1681               	bsf	1,5
 11514                           
 11515                           ;MCU_B1.c: 782: myMain->First = 1;
 11516  0435  086D               	movf	_myMain^(0+128),w
 11517  0436  0086               	movwf	6
 11518  0437  3001               	movlw	1	; select bank2/3
 11519  0438  0087               	movwf	7
 11520  0439  1781               	bsf	1,7
 11521  043A  0008               	return
 11522  043B                     __end_of_Flash_Memory_Initialization:	
 11523                           
 11524                           	psect	text65
 11525  1283                     __ptext65:	
 11526 ;; *************** function _Flash_Memory_Write *****************
 11527 ;; Defined at:
 11528 ;;		line 826 in file "../src/MCU_B1.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;		None
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  i               1    1[BANK0 ] unsigned char 
 11533 ;; Return value:  Size  Location     Type
 11534 ;;		None               void
 11535 ;; Registers used:
 11536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;Total ram usage:        2 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    6
 11549 ;; This function calls:
 11550 ;;		_Flash_Memory_Unlock
 11551 ;; This function is called by:
 11552 ;;		_Flash_Memory_Initialization
 11553 ;;		_Flash_Memory_Modify
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           
 11558                           ;psect for function _Flash_Memory_Write
 11559  1283                     _Flash_Memory_Write:	
 11560                           
 11561                           ;MCU_B1.c: 827: char i = 0;
 11562                           
 11563                           ;incstack = 0
 11564                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11565  1283  0020               	movlb	0	; select bank0
 11566  1284  01A1               	clrf	Flash_Memory_Write@i
 11567                           
 11568                           ;MCU_B1.c: 828: CFGS = 0;
 11569  1285  0023               	movlb	3	; select bank3
 11570  1286  1315               	bcf	21,6	;volatile
 11571                           
 11572                           ;MCU_B1.c: 829: PMADRH = 0x30;
 11573  1287  3030               	movlw	48
 11574  1288  0092               	movwf	18	;volatile
 11575                           
 11576                           ;MCU_B1.c: 830: PMDATH = 0;
 11577  1289  0194               	clrf	20	;volatile
 11578                           
 11579                           ;MCU_B1.c: 831: FREE = 0;
 11580  128A  1215               	bcf	21,4	;volatile
 11581                           
 11582                           ;MCU_B1.c: 832: LWLO = 1;
 11583  128B  1695               	bsf	21,5	;volatile
 11584                           
 11585                           ;MCU_B1.c: 833: WREN = 1;
 11586  128C  1515               	bsf	21,2	;volatile
 11587                           
 11588                           ;MCU_B1.c: 834: for (i = 0; i < 32; i++) {
 11589  128D  0020               	movlb	0	; select bank0
 11590  128E  01A1               	clrf	Flash_Memory_Write@i
 11591  128F  3020               	movlw	32
 11592  1290  0221               	subwf	Flash_Memory_Write@i,w
 11593  1291  1803               	btfsc	3,0
 11594  1292  2AAF               	goto	l1346
 11595  1293                     l6090:	
 11596                           
 11597                           ;MCU_B1.c: 835: PMADRL = i;
 11598  1293  0821               	movf	Flash_Memory_Write@i,w
 11599  1294  0023               	movlb	3	; select bank3
 11600  1295  0091               	movwf	17	;volatile
 11601                           
 11602                           ;MCU_B1.c: 836: PMDATL = Memory->Data[i];
 11603  1296  0020               	movlb	0	; select bank0
 11604  1297  0821               	movf	Flash_Memory_Write@i,w
 11605  1298  0021               	movlb	1	; select bank1
 11606  1299  076E               	addwf	_Memory^(0+128),w
 11607  129A  0020               	movlb	0	; select bank0
 11608  129B  00A0               	movwf	??_Flash_Memory_Write
 11609  129C  0820               	movf	??_Flash_Memory_Write,w
 11610  129D  0086               	movwf	6
 11611  129E  3001               	movlw	1	; select bank2/3
 11612  129F  0087               	movwf	7
 11613  12A0  0801               	movf	1,w
 11614  12A1  0023               	movlb	3	; select bank3
 11615  12A2  0093               	movwf	19	;volatile
 11616                           
 11617                           ;MCU_B1.c: 837: Flash_Memory_Unlock();
 11618  12A3  319C  2485  3192   	fcall	_Flash_Memory_Unlock
 11619  12A6  3001               	movlw	1
 11620  12A7  0020               	movlb	0	; select bank0
 11621  12A8  00A0               	movwf	??_Flash_Memory_Write
 11622  12A9  0820               	movf	??_Flash_Memory_Write,w
 11623  12AA  07A1               	addwf	Flash_Memory_Write@i,f
 11624  12AB  3020               	movlw	32
 11625  12AC  0221               	subwf	Flash_Memory_Write@i,w
 11626  12AD  1C03               	skipc
 11627  12AE  2A93               	goto	l6090
 11628  12AF                     l1346:	
 11629                           
 11630                           ;MCU_B1.c: 838: }
 11631                           ;MCU_B1.c: 839: LWLO = 0;
 11632  12AF  0023               	movlb	3	; select bank3
 11633  12B0  1295               	bcf	21,5	;volatile
 11634                           
 11635                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 11636  12B1  319C  2485         	fcall	_Flash_Memory_Unlock
 11637                           
 11638                           ;MCU_B1.c: 841: WREN = 0;
 11639  12B3  0023               	movlb	3	; select bank3
 11640  12B4  1115               	bcf	21,2	;volatile
 11641  12B5  0008               	return
 11642  12B6                     __end_of_Flash_Memory_Write:	
 11643                           
 11644                           	psect	text66
 11645  1C85                     __ptext66:	
 11646 ;; *************** function _Flash_Memory_Unlock *****************
 11647 ;; Defined at:
 11648 ;;		line 805 in file "../src/MCU_B1.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;		None
 11653 ;; Return value:  Size  Location     Type
 11654 ;;		None               void
 11655 ;; Registers used:
 11656 ;;		wreg
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;Total ram usage:        0 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    5
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_Flash_Memory_Write
 11673 ;;		_Flash_Memory_Erasing
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function _Flash_Memory_Unlock
 11679  1C85                     _Flash_Memory_Unlock:	
 11680                           
 11681                           ;MCU_B1.c: 806: PMCON2 = 0x55;
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11685  1C85  3055               	movlw	85
 11686  1C86  0023               	movlb	3	; select bank3
 11687  1C87  0096               	movwf	22	;volatile
 11688                           
 11689                           ;MCU_B1.c: 807: PMCON2 = 0xaa;
 11690  1C88  30AA               	movlw	170
 11691  1C89  0096               	movwf	22	;volatile
 11692                           
 11693                           ;MCU_B1.c: 808: WR = 1;
 11694  1C8A  1495               	bsf	21,1	;volatile
 11695                           
 11696                           ;MCU_B1.c: 809: __nop();
 11697  1C8B  0000               	nop
 11698                           
 11699                           ;MCU_B1.c: 810: __nop();
 11700  1C8C  0000               	nop
 11701  1C8D  0008               	return
 11702  1C8E                     __end_of_Flash_Memory_Unlock:	
 11703                           
 11704                           	psect	text67
 11705  1F1A                     __ptext67:	
 11706 ;; *************** function _Flash_Memory_Read *****************
 11707 ;; Defined at:
 11708 ;;		line 814 in file "../src/MCU_B1.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;  address         1    wreg     unsigned char 
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  address         1    2[BANK0 ] unsigned char 
 11713 ;;  ret             1    3[BANK0 ] unsigned char 
 11714 ;;  i               1    1[BANK0 ] unsigned char 
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  1    wreg      unsigned char 
 11717 ;; Registers used:
 11718 ;;		wreg, status,2
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;Total ram usage:        4 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    5
 11731 ;; This function calls:
 11732 ;;		Nothing
 11733 ;; This function is called by:
 11734 ;;		_Flash_Memory_Initialization
 11735 ;;		_Flash_Memory_Modify
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function _Flash_Memory_Read
 11741  1F1A                     _Flash_Memory_Read:	
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11745                           ;Flash_Memory_Read@address stored from wreg
 11746  1F1A  0020               	movlb	0	; select bank0
 11747  1F1B  00A2               	movwf	Flash_Memory_Read@address
 11748                           
 11749                           ;MCU_B1.c: 815: char i = 0, ret = 0;
 11750  1F1C  01A1               	clrf	Flash_Memory_Read@i
 11751  1F1D  01A3               	clrf	Flash_Memory_Read@ret
 11752                           
 11753                           ;MCU_B1.c: 816: PMADRH = 0x30;
 11754  1F1E  3030               	movlw	48
 11755  1F1F  0023               	movlb	3	; select bank3
 11756  1F20  0092               	movwf	18	;volatile
 11757                           
 11758                           ;MCU_B1.c: 817: PMADRL = address;
 11759  1F21  0020               	movlb	0	; select bank0
 11760  1F22  0822               	movf	Flash_Memory_Read@address,w
 11761  1F23  0023               	movlb	3	; select bank3
 11762  1F24  0091               	movwf	17	;volatile
 11763                           
 11764                           ;MCU_B1.c: 818: CFGS = 0;
 11765  1F25  1315               	bcf	21,6	;volatile
 11766                           
 11767                           ;MCU_B1.c: 819: RD = 1;
 11768  1F26  1415               	bsf	21,0	;volatile
 11769                           
 11770                           ;MCU_B1.c: 820: i = PMDATH;
 11771  1F27  0814               	movf	20,w	;volatile
 11772  1F28  0020               	movlb	0	; select bank0
 11773  1F29  00A0               	movwf	??_Flash_Memory_Read
 11774  1F2A  0820               	movf	??_Flash_Memory_Read,w
 11775  1F2B  00A1               	movwf	Flash_Memory_Read@i
 11776                           
 11777                           ;MCU_B1.c: 821: ret = PMDATL;
 11778  1F2C  0023               	movlb	3	; select bank3
 11779  1F2D  0813               	movf	19,w	;volatile
 11780  1F2E  0020               	movlb	0	; select bank0
 11781  1F2F  00A0               	movwf	??_Flash_Memory_Read
 11782  1F30  0820               	movf	??_Flash_Memory_Read,w
 11783  1F31  00A3               	movwf	Flash_Memory_Read@ret
 11784                           
 11785                           ;MCU_B1.c: 822: return ret;
 11786  1F32  0823               	movf	Flash_Memory_Read@ret,w
 11787  1F33  0008               	return
 11788  1F34                     __end_of_Flash_Memory_Read:	
 11789                           
 11790                           	psect	text68
 11791  1C70                     __ptext68:	
 11792 ;; *************** function _DimmerLights_Main *****************
 11793 ;; Defined at:
 11794 ;;		line 420 in file "../src/Dimmer_B1.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;		None
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;		None
 11799 ;; Return value:  Size  Location     Type
 11800 ;;		None               void
 11801 ;; Registers used:
 11802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;Total ram usage:        0 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:   11
 11815 ;; This function calls:
 11816 ;;		_DimmerLights_Close
 11817 ;;		_setDimmerLights_Main
 11818 ;; This function is called by:
 11819 ;;		_main
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function _DimmerLights_Main
 11825  1C70                     _DimmerLights_Main:	
 11826                           
 11827                           ;Dimmer_B1.c: 423: setDimmerLights_Main(1);
 11828                           
 11829                           ;incstack = 0
 11830                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11831  1C70  3001               	movlw	1
 11832  1C71  3187  2799  319C   	fcall	_setDimmerLights_Main
 11833                           
 11834                           ;Dimmer_B1.c: 434: DimmerLights_Close();
 11835  1C74  319E  2664         	fcall	_DimmerLights_Close
 11836  1C76  0008               	return
 11837  1C77                     __end_of_DimmerLights_Main:	
 11838                           
 11839                           	psect	text69
 11840  0799                     __ptext69:	
 11841 ;; *************** function _setDimmerLights_Main *****************
 11842 ;; Defined at:
 11843 ;;		line 438 in file "../src/Dimmer_B1.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  lights          1    wreg     unsigned char 
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;  lights          1   70[BANK0 ] unsigned char 
 11848 ;;  clear           1   69[BANK0 ] unsigned char 
 11849 ;; Return value:  Size  Location     Type
 11850 ;;		None               void
 11851 ;; Registers used:
 11852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11853 ;; Tracked objects:
 11854 ;;		On entry : 0/0
 11855 ;;		On exit  : 0/0
 11856 ;;		Unchanged: 0/0
 11857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;Total ram usage:        2 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:   10
 11865 ;; This function calls:
 11866 ;;		_DimmerLightsPointSelect
 11867 ;;		_setBuz
 11868 ;;		_setDimmerLights
 11869 ;;		_setDimmerLights_Adj
 11870 ;; This function is called by:
 11871 ;;		_DimmerLights_Main
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _setDimmerLights_Main
 11877  0799                     _setDimmerLights_Main:	
 11878                           
 11879                           ;incstack = 0
 11880                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11881                           ;setDimmerLights_Main@lights stored from wreg
 11882  0799  0020               	movlb	0	; select bank0
 11883  079A  00E6               	movwf	setDimmerLights_Main@lights
 11884                           
 11885                           ;Dimmer_B1.c: 439: char clear = 1;
 11886  079B  01E5               	clrf	setDimmerLights_Main@clear
 11887  079C  0AE5               	incf	setDimmerLights_Main@clear,f
 11888                           
 11889                           ;Dimmer_B1.c: 440: DimmerLightsPointSelect(lights);
 11890  079D  0866               	movf	setDimmerLights_Main@lights,w
 11891  079E  319C  24C1  3187   	fcall	_DimmerLightsPointSelect
 11892                           
 11893                           ;Dimmer_B1.c: 460: if (DimmerLights->Trigger == 1) {
 11894  07A1  0878               	movf	_DimmerLights,w
 11895  07A2  3E08               	addlw	8
 11896  07A3  0086               	movwf	6
 11897  07A4  3001               	movlw	1	; select bank2/3
 11898  07A5  0087               	movwf	7
 11899  07A6  1D01               	btfss	1,2
 11900  07A7  2FCC               	goto	l6484
 11901                           
 11902                           ;Dimmer_B1.c: 461: if (clear == 1) {
 11903  07A8  0020               	movlb	0	; select bank0
 11904  07A9  0865               	movf	setDimmerLights_Main@clear,w
 11905  07AA  3A01               	xorlw	1
 11906  07AB  1D03               	skipz
 11907  07AC  0008               	return
 11908                           
 11909                           ;Dimmer_B1.c: 462: if (DimmerLights->Switch == 1) {
 11910  07AD  0878               	movf	_DimmerLights,w
 11911  07AE  3E08               	addlw	8
 11912  07AF  0086               	movwf	6
 11913  07B0  3001               	movlw	1	; select bank2/3
 11914  07B1  0087               	movwf	7
 11915  07B2  1C81               	btfss	1,1
 11916  07B3  2FC0               	goto	l6480
 11917                           
 11918                           ;Dimmer_B1.c: 463: DimmerLights->Trigger = 0;
 11919  07B4  0878               	movf	_DimmerLights,w
 11920  07B5  3E08               	addlw	8
 11921  07B6  0086               	movwf	6
 11922  07B7  3001               	movlw	1	; select bank2/3
 11923  07B8  0087               	movwf	7
 11924  07B9  1101               	bcf	1,2
 11925                           
 11926                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 1);
 11927  07BA  01A4               	clrf	setDimmerLights@status
 11928  07BB  0AA4               	incf	setDimmerLights@status,f
 11929  07BC  0866               	movf	setDimmerLights_Main@lights,w
 11930  07BD  318B  23E4         	fcall	_setDimmerLights
 11931                           
 11932                           ;Dimmer_B1.c: 465: } else {
 11933  07BF  0008               	return
 11934  07C0                     l6480:	
 11935                           
 11936                           ;Dimmer_B1.c: 466: DimmerLights->Trigger = 0;
 11937  07C0  0878               	movf	_DimmerLights,w
 11938  07C1  3E08               	addlw	8
 11939  07C2  0086               	movwf	6
 11940  07C3  3001               	movlw	1	; select bank2/3
 11941  07C4  0087               	movwf	7
 11942  07C5  1101               	bcf	1,2
 11943                           
 11944                           ;Dimmer_B1.c: 467: setDimmerLights(lights, 0);
 11945  07C6  0020               	movlb	0	; select bank0
 11946  07C7  01A4               	clrf	setDimmerLights@status
 11947  07C8  0866               	movf	setDimmerLights_Main@lights,w
 11948  07C9  318B  23E4         	fcall	_setDimmerLights
 11949                           
 11950                           ;Dimmer_B1.c: 468: }
 11951                           ;Dimmer_B1.c: 472: }
 11952                           ;Dimmer_B1.c: 473: } else {
 11953  07CB  0008               	return
 11954  07CC                     l6484:	
 11955                           
 11956                           ;Dimmer_B1.c: 474: if (DimmerLights->TriggerAdj == 1) {
 11957  07CC  0878               	movf	_DimmerLights,w
 11958  07CD  3E08               	addlw	8
 11959  07CE  0086               	movwf	6
 11960  07CF  3001               	movlw	1	; select bank2/3
 11961  07D0  0087               	movwf	7
 11962  07D1  1E01               	btfss	1,4
 11963  07D2  0008               	return
 11964                           
 11965                           ;Dimmer_B1.c: 475: if (clear == 1) {
 11966  07D3  0020               	movlb	0	; select bank0
 11967  07D4  0865               	movf	setDimmerLights_Main@clear,w
 11968  07D5  3A01               	xorlw	1
 11969  07D6  1D03               	skipz
 11970  07D7  0008               	return
 11971                           
 11972                           ;Dimmer_B1.c: 476: DimmerLightsPointSelect(lights);
 11973  07D8  0866               	movf	setDimmerLights_Main@lights,w
 11974  07D9  319C  24C1  3187   	fcall	_DimmerLightsPointSelect
 11975                           
 11976                           ;Dimmer_B1.c: 477: DimmerLights->TriggerAdj = 0;
 11977  07DC  0878               	movf	_DimmerLights,w
 11978  07DD  3E08               	addlw	8
 11979  07DE  0086               	movwf	6
 11980  07DF  3001               	movlw	1	; select bank2/3
 11981  07E0  0087               	movwf	7
 11982  07E1  1201               	bcf	1,4
 11983                           
 11984                           ;Dimmer_B1.c: 478: if (DimmerLights->AdjGo == 1) {
 11985  07E2  0878               	movf	_DimmerLights,w
 11986  07E3  3E08               	addlw	8
 11987  07E4  0086               	movwf	6
 11988  07E5  3001               	movlw	1	; select bank2/3
 11989  07E6  0087               	movwf	7
 11990  07E7  1D81               	btfss	1,3
 11991  07E8  2FF9               	goto	l6496
 11992                           
 11993                           ;Dimmer_B1.c: 479: setDimmerLights_Adj(lights, 1);
 11994  07E9  0020               	movlb	0	; select bank0
 11995  07EA  01E2               	clrf	setDimmerLights_Adj@status
 11996  07EB  0AE2               	incf	setDimmerLights_Adj@status,f
 11997  07EC  0866               	movf	setDimmerLights_Main@lights,w
 11998  07ED  3192  22EB  3187   	fcall	_setDimmerLights_Adj
 11999                           
 12000                           ;Dimmer_B1.c: 480: setBuz(1, 100);
 12001  07F0  3064               	movlw	100
 12002  07F1  0020               	movlb	0	; select bank0
 12003  07F2  00A9               	movwf	setBuz@time
 12004  07F3  3000               	movlw	0
 12005  07F4  00AA               	movwf	setBuz@time+1
 12006  07F5  3001               	movlw	1
 12007  07F6  318C  24EB         	fcall	_setBuz
 12008                           
 12009                           ;Dimmer_B1.c: 481: } else {
 12010  07F8  0008               	return
 12011  07F9                     l6496:	
 12012                           
 12013                           ;Dimmer_B1.c: 482: setDimmerLights_Adj(lights, 0);
 12014  07F9  0020               	movlb	0	; select bank0
 12015  07FA  01E2               	clrf	setDimmerLights_Adj@status
 12016  07FB  0866               	movf	setDimmerLights_Main@lights,w
 12017  07FC  3192  22EB         	fcall	_setDimmerLights_Adj
 12018  07FE  0008               	return
 12019  07FF                     __end_of_setDimmerLights_Main:	
 12020                           
 12021                           	psect	text70
 12022  12EB                     __ptext70:	
 12023 ;; *************** function _setDimmerLights_Adj *****************
 12024 ;; Defined at:
 12025 ;;		line 664 in file "../src/Dimmer_B1.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  lights          1    wreg     unsigned char 
 12028 ;;  status          1   66[BANK0 ] unsigned char 
 12029 ;; Auto vars:     Size  Location     Type
 12030 ;;  lights          1   68[BANK0 ] unsigned char 
 12031 ;; Return value:  Size  Location     Type
 12032 ;;		None               void
 12033 ;; Registers used:
 12034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12035 ;; Tracked objects:
 12036 ;;		On entry : 0/0
 12037 ;;		On exit  : 0/0
 12038 ;;		Unchanged: 0/0
 12039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12040 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;Total ram usage:        3 bytes
 12045 ;; Hardware stack levels used:    1
 12046 ;; Hardware stack levels required when called:    9
 12047 ;; This function calls:
 12048 ;;		_DimmerLightsPointSelect
 12049 ;;		_setRF_DimmerLights
 12050 ;;		_setTxData
 12051 ;; This function is called by:
 12052 ;;		_setDimmerLights_Main
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           
 12057                           ;psect for function _setDimmerLights_Adj
 12058  12EB                     _setDimmerLights_Adj:	
 12059                           
 12060                           ;incstack = 0
 12061                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12062                           ;setDimmerLights_Adj@lights stored from wreg
 12063  12EB  0020               	movlb	0	; select bank0
 12064  12EC  00E4               	movwf	setDimmerLights_Adj@lights
 12065                           
 12066                           ;Dimmer_B1.c: 665: DimmerLightsPointSelect(lights);
 12067  12ED  0864               	movf	setDimmerLights_Adj@lights,w
 12068  12EE  319C  24C1  3192   	fcall	_DimmerLightsPointSelect
 12069                           
 12070                           ;Dimmer_B1.c: 666: if (status == 1) {
 12071  12F1  0020               	movlb	0	; select bank0
 12072  12F2  0862               	movf	setDimmerLights_Adj@status,w
 12073  12F3  3A01               	xorlw	1
 12074  12F4  1D03               	skipz
 12075  12F5  2B01               	goto	l6044
 12076                           
 12077                           ;Dimmer_B1.c: 667: DimmerLights->AdjFlag = 1;
 12078  12F6  0878               	movf	_DimmerLights,w
 12079  12F7  0086               	movwf	6
 12080  12F8  3001               	movlw	1	; select bank2/3
 12081  12F9  0087               	movwf	7
 12082  12FA  1581               	bsf	1,3
 12083                           
 12084                           ;Dimmer_B1.c: 668: DimmerLights->Signal = 1;
 12085  12FB  0878               	movf	_DimmerLights,w
 12086  12FC  0086               	movwf	6
 12087  12FD  3001               	movlw	1	; select bank2/3
 12088  12FE  0087               	movwf	7
 12089  12FF  1481               	bsf	1,1
 12090                           
 12091                           ;Dimmer_B1.c: 669: } else {
 12092  1300  0008               	return
 12093  1301                     l6044:	
 12094                           
 12095                           ;Dimmer_B1.c: 670: if (DimmerLights->AdjFlag) {
 12096  1301  0878               	movf	_DimmerLights,w
 12097  1302  0086               	movwf	6
 12098  1303  3001               	movlw	1	; select bank2/3
 12099  1304  0087               	movwf	7
 12100  1305  1D81               	btfss	1,3
 12101  1306  0008               	return
 12102                           
 12103                           ;Dimmer_B1.c: 672: DimmerLights->Signal = 0;
 12104  1307  0878               	movf	_DimmerLights,w
 12105  1308  0086               	movwf	6
 12106  1309  3001               	movlw	1	; select bank2/3
 12107  130A  0087               	movwf	7
 12108  130B  1081               	bcf	1,1
 12109                           
 12110                           ;Dimmer_B1.c: 673: DimmerLights->AdjFlag = 0;
 12111  130C  0878               	movf	_DimmerLights,w
 12112  130D  0086               	movwf	6
 12113  130E  3001               	movlw	1	; select bank2/3
 12114  130F  0087               	movwf	7
 12115  1310  1181               	bcf	1,3
 12116                           
 12117                           ;Dimmer_B1.c: 674: ;;
 12118                           ;Dimmer_B1.c: 675: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12119  1311  0878               	movf	_DimmerLights,w
 12120  1312  3E04               	addlw	4
 12121  1313  0086               	movwf	6
 12122  1314  3001               	movlw	1	; select bank2/3
 12123  1315  0087               	movwf	7
 12124  1316  0801               	movf	1,w
 12125  1317  00E3               	movwf	??_setDimmerLights_Adj
 12126  1318  0878               	movf	_DimmerLights,w
 12127  1319  3E05               	addlw	5
 12128  131A  0086               	movwf	6
 12129  131B  3001               	movlw	1	; select bank2/3
 12130  131C  0087               	movwf	7
 12131  131D  0863               	movf	??_setDimmerLights_Adj,w
 12132  131E  0081               	movwf	1
 12133                           
 12134                           ;Dimmer_B1.c: 683: setRF_DimmerLights(lights, 1);
 12135  131F  01DD               	clrf	setRF_DimmerLights@on
 12136  1320  0ADD               	incf	setRF_DimmerLights@on,f
 12137  1321  0864               	movf	setDimmerLights_Adj@lights,w
 12138  1322  3189  213E  3192   	fcall	_setRF_DimmerLights
 12139                           
 12140                           ;Dimmer_B1.c: 684: setTxData(1);
 12141  1325  3001               	movlw	1
 12142  1326  318E  2604         	fcall	_setTxData
 12143  1328  0008               	return
 12144  1329                     __end_of_setDimmerLights_Adj:	
 12145                           
 12146                           	psect	text71
 12147  0BE4                     __ptext71:	
 12148 ;; *************** function _setDimmerLights *****************
 12149 ;; Defined at:
 12150 ;;		line 610 in file "../src/Dimmer_B1.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;  lights          1    wreg     unsigned char 
 12153 ;;  status          1    4[BANK0 ] unsigned char 
 12154 ;; Auto vars:     Size  Location     Type
 12155 ;;  lights          1    6[BANK0 ] unsigned char 
 12156 ;; Return value:  Size  Location     Type
 12157 ;;		None               void
 12158 ;; Registers used:
 12159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12160 ;; Tracked objects:
 12161 ;;		On entry : 0/0
 12162 ;;		On exit  : 0/0
 12163 ;;		Unchanged: 0/0
 12164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12165 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;Total ram usage:        3 bytes
 12170 ;; Hardware stack levels used:    1
 12171 ;; Hardware stack levels required when called:    7
 12172 ;; This function calls:
 12173 ;;		_DimmerLightsPointSelect
 12174 ;;		_setLED
 12175 ;;		_setMemory_GO
 12176 ;; This function is called by:
 12177 ;;		_setDimmerLights_Main
 12178 ;;		_setControl_Lights_Table
 12179 ;; This function uses a non-reentrant model
 12180 ;;
 12181                           
 12182                           
 12183                           ;psect for function _setDimmerLights
 12184  0BE4                     _setDimmerLights:	
 12185                           
 12186                           ;incstack = 0
 12187                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12188                           ;setDimmerLights@lights stored from wreg
 12189  0BE4  0020               	movlb	0	; select bank0
 12190  0BE5  00A6               	movwf	setDimmerLights@lights
 12191                           
 12192                           ;Dimmer_B1.c: 611: DimmerLightsPointSelect(lights);
 12193  0BE6  0826               	movf	setDimmerLights@lights,w
 12194  0BE7  319C  24C1  318B   	fcall	_DimmerLightsPointSelect
 12195                           
 12196                           ;Dimmer_B1.c: 612: Dimmer->Load = lights;
 12197  0BEA  0020               	movlb	0	; select bank0
 12198  0BEB  0826               	movf	setDimmerLights@lights,w
 12199  0BEC  00A5               	movwf	??_setDimmerLights
 12200  0BED  0021               	movlb	1	; select bank1
 12201  0BEE  0A3A               	incf	_Dimmer^(0+128),w
 12202  0BEF  0086               	movwf	6
 12203  0BF0  0187               	clrf	7
 12204  0BF1  0020               	movlb	0	; select bank0
 12205  0BF2  0825               	movf	??_setDimmerLights,w
 12206  0BF3  0081               	movwf	1
 12207                           
 12208                           ;Dimmer_B1.c: 613: if (status) {
 12209  0BF4  0824               	movf	setDimmerLights@status,w
 12210  0BF5  1903               	btfsc	3,2
 12211  0BF6  2C38               	goto	l5740
 12212                           
 12213                           ;Dimmer_B1.c: 614: DimmerLights->Status = 1;
 12214  0BF7  0878               	movf	_DimmerLights,w
 12215  0BF8  0086               	movwf	6
 12216  0BF9  3001               	movlw	1	; select bank2/3
 12217  0BFA  0087               	movwf	7
 12218  0BFB  1681               	bsf	1,5
 12219                           
 12220                           ;Dimmer_B1.c: 615: setLED(lights, 0);
 12221  0BFC  01A2               	clrf	setLED@command
 12222  0BFD  0826               	movf	setDimmerLights@lights,w
 12223  0BFE  3197  27A2  318B   	fcall	_setLED
 12224                           
 12225                           ;Dimmer_B1.c: 616: RC7=!0;
 12226  0C01  0020               	movlb	0	; select bank0
 12227  0C02  178E               	bsf	14,7	;volatile
 12228                           
 12229                           ;Dimmer_B1.c: 617: ;;
 12230                           ;Dimmer_B1.c: 619: DimmerLights->Signal = 1;
 12231  0C03  0878               	movf	_DimmerLights,w
 12232  0C04  0086               	movwf	6
 12233  0C05  3001               	movlw	1	; select bank2/3
 12234  0C06  0087               	movwf	7
 12235  0C07  1481               	bsf	1,1
 12236                           
 12237                           ;Dimmer_B1.c: 620: DimmerLights->DimmingTimeValue = 6;
 12238  0C08  3006               	movlw	6
 12239  0C09  00A5               	movwf	??_setDimmerLights
 12240  0C0A  0878               	movf	_DimmerLights,w
 12241  0C0B  3E02               	addlw	2
 12242  0C0C  0086               	movwf	6
 12243  0C0D  3001               	movlw	1	; select bank2/3
 12244  0C0E  0087               	movwf	7
 12245  0C0F  0825               	movf	??_setDimmerLights,w
 12246  0C10  0081               	movwf	1
 12247                           
 12248                           ;Dimmer_B1.c: 622: if (!DimmerLights->StatusFlag) {
 12249  0C11  0878               	movf	_DimmerLights,w
 12250  0C12  0086               	movwf	6
 12251  0C13  3001               	movlw	1	; select bank2/3
 12252  0C14  0087               	movwf	7
 12253  0C15  1B01               	btfsc	1,6
 12254  0C16  0008               	return
 12255                           
 12256                           ;Dimmer_B1.c: 623: DimmerLights->StatusFlag = 1;
 12257  0C17  0878               	movf	_DimmerLights,w
 12258  0C18  0086               	movwf	6
 12259  0C19  3001               	movlw	1	; select bank2/3
 12260  0C1A  0087               	movwf	7
 12261  0C1B  1701               	bsf	1,6
 12262                           
 12263                           ;Dimmer_B1.c: 624: ;;
 12264                           ;Dimmer_B1.c: 625: setMemory_GO(0);
 12265  0C1C  3000               	movlw	0
 12266  0C1D  319F  27E1         	fcall	_setMemory_GO
 12267                           
 12268                           ;Dimmer_B1.c: 628: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12269  0C1F  0878               	movf	_DimmerLights,w
 12270  0C20  3E05               	addlw	5
 12271  0C21  0086               	movwf	6
 12272  0C22  3001               	movlw	1	; select bank2/3
 12273  0C23  0087               	movwf	7
 12274  0C24  0801               	movf	1,w
 12275  0C25  0020               	movlb	0	; select bank0
 12276  0C26  00A5               	movwf	??_setDimmerLights
 12277  0C27  0878               	movf	_DimmerLights,w
 12278  0C28  3E04               	addlw	4
 12279  0C29  0086               	movwf	6
 12280  0C2A  3001               	movlw	1	; select bank2/3
 12281  0C2B  0087               	movwf	7
 12282  0C2C  0825               	movf	??_setDimmerLights,w
 12283  0C2D  0081               	movwf	1
 12284                           
 12285                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12286  0C2E  3020               	movlw	32
 12287  0C2F  00A5               	movwf	??_setDimmerLights
 12288  0C30  0878               	movf	_DimmerLights,w
 12289  0C31  3E04               	addlw	4
 12290  0C32  0086               	movwf	6
 12291  0C33  3001               	movlw	1	; select bank2/3
 12292  0C34  0087               	movwf	7
 12293  0C35  0825               	movf	??_setDimmerLights,w
 12294  0C36  0081               	movwf	1
 12295                           
 12296                           ;Dimmer_B1.c: 634: }
 12297                           ;Dimmer_B1.c: 635: } else {
 12298  0C37  0008               	return
 12299  0C38                     l5740:	
 12300                           
 12301                           ;Dimmer_B1.c: 637: DimmerLights->Status = 0;
 12302  0C38  0878               	movf	_DimmerLights,w
 12303  0C39  0086               	movwf	6
 12304  0C3A  3001               	movlw	1	; select bank2/3
 12305  0C3B  0087               	movwf	7
 12306  0C3C  1281               	bcf	1,5
 12307                           
 12308                           ;Dimmer_B1.c: 639: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12309  0C3D  0878               	movf	_DimmerLights,w
 12310  0C3E  3E06               	addlw	6
 12311  0C3F  0086               	movwf	6
 12312  0C40  3001               	movlw	1	; select bank2/3
 12313  0C41  0087               	movwf	7
 12314  0C42  0801               	movf	1,w
 12315  0C43  00A5               	movwf	??_setDimmerLights
 12316  0C44  0878               	movf	_DimmerLights,w
 12317  0C45  3E04               	addlw	4
 12318  0C46  0086               	movwf	6
 12319  0C47  3001               	movlw	1	; select bank2/3
 12320  0C48  0087               	movwf	7
 12321  0C49  0825               	movf	??_setDimmerLights,w
 12322  0C4A  0081               	movwf	1
 12323                           
 12324                           ;Dimmer_B1.c: 646: DimmerLights->Signal = 1;
 12325  0C4B  0878               	movf	_DimmerLights,w
 12326  0C4C  0086               	movwf	6
 12327  0C4D  3001               	movlw	1	; select bank2/3
 12328  0C4E  0087               	movwf	7
 12329  0C4F  1481               	bsf	1,1
 12330                           
 12331                           ;Dimmer_B1.c: 647: DimmerLights->AdjFlag = 0;
 12332  0C50  0878               	movf	_DimmerLights,w
 12333  0C51  0086               	movwf	6
 12334  0C52  3001               	movlw	1	; select bank2/3
 12335  0C53  0087               	movwf	7
 12336  0C54  1181               	bcf	1,3
 12337                           
 12338                           ;Dimmer_B1.c: 648: DimmerLights->AdjStatus = 0;
 12339  0C55  0878               	movf	_DimmerLights,w
 12340  0C56  0086               	movwf	6
 12341  0C57  3001               	movlw	1	; select bank2/3
 12342  0C58  0087               	movwf	7
 12343  0C59  1201               	bcf	1,4
 12344                           
 12345                           ;Dimmer_B1.c: 649: DimmerLights->DimmingTimeValue = 6;
 12346  0C5A  3006               	movlw	6
 12347  0C5B  00A5               	movwf	??_setDimmerLights
 12348  0C5C  0878               	movf	_DimmerLights,w
 12349  0C5D  3E02               	addlw	2
 12350  0C5E  0086               	movwf	6
 12351  0C5F  3001               	movlw	1	; select bank2/3
 12352  0C60  0087               	movwf	7
 12353  0C61  0825               	movf	??_setDimmerLights,w
 12354  0C62  0081               	movwf	1
 12355  0C63  0008               	return
 12356  0C64                     __end_of_setDimmerLights:	
 12357                           
 12358                           	psect	text72
 12359  17A2                     __ptext72:	
 12360 ;; *************** function _setLED *****************
 12361 ;; Defined at:
 12362 ;;		line 74 in file "../src/LED_B1.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;  led             1    wreg     unsigned char 
 12365 ;;  command         1    2[BANK0 ] unsigned char 
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;  led             1    3[BANK0 ] unsigned char 
 12368 ;; Return value:  Size  Location     Type
 12369 ;;		None               void
 12370 ;; Registers used:
 12371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12377 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;Total ram usage:        2 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    6
 12384 ;; This function calls:
 12385 ;;		_LedPointSelect
 12386 ;; This function is called by:
 12387 ;;		_setDimmerLights_ERROR
 12388 ;;		_setDimmerLights
 12389 ;;		_setLED_Initialization
 12390 ;;		_setPowerFault_Exceptions
 12391 ;;		_setSw_Initialization
 12392 ;; This function uses a non-reentrant model
 12393 ;;
 12394                           
 12395                           
 12396                           ;psect for function _setLED
 12397  17A2                     _setLED:	
 12398                           
 12399                           ;incstack = 0
 12400                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12401                           ;setLED@led stored from wreg
 12402  17A2  0020               	movlb	0	; select bank0
 12403  17A3  00A3               	movwf	setLED@led
 12404                           
 12405                           ;LED_B1.c: 76: LedPointSelect(led);
 12406  17A4  0823               	movf	setLED@led,w
 12407  17A5  3190  20B7  3197   	fcall	_LedPointSelect
 12408                           
 12409                           ;LED_B1.c: 77: if(command == 0)
 12410  17A8  0020               	movlb	0	; select bank0
 12411  17A9  08A2               	movf	setLED@command,f
 12412  17AA  1D03               	skipz
 12413  17AB  2FBE               	goto	l5628
 12414                           
 12415                           ;LED_B1.c: 78: {
 12416                           ;LED_B1.c: 80: if(led == 1)
 12417  17AC  0823               	movf	setLED@led,w
 12418  17AD  3A01               	xorlw	1
 12419  17AE  1D03               	skipz
 12420  17AF  2FB2               	goto	l5620
 12421                           
 12422                           ;LED_B1.c: 81: {
 12423                           ;LED_B1.c: 85: RA3=1;
 12424  17B0  158C               	bsf	12,3	;volatile
 12425                           
 12426                           ;LED_B1.c: 87: }
 12427  17B1  0008               	return
 12428  17B2                     l5620:	
 12429                           
 12430                           ;LED_B1.c: 90: else if(led == 2)
 12431  17B2  0823               	movf	setLED@led,w
 12432  17B3  3A02               	xorlw	2
 12433  17B4  1D03               	skipz
 12434  17B5  2FB8               	goto	l5624
 12435                           
 12436                           ;LED_B1.c: 91: {
 12437                           ;LED_B1.c: 95: RC7=1;
 12438  17B6  178E               	bsf	14,7	;volatile
 12439                           
 12440                           ;LED_B1.c: 97: }
 12441  17B7  0008               	return
 12442  17B8                     l5624:	
 12443                           
 12444                           ;LED_B1.c: 110: else if(led == 99)
 12445  17B8  0823               	movf	setLED@led,w
 12446  17B9  3A63               	xorlw	99
 12447  17BA  1D03               	skipz
 12448  17BB  0008               	return
 12449                           
 12450                           ;LED_B1.c: 111: {
 12451                           ;LED_B1.c: 115: RB5=1;
 12452  17BC  168D               	bsf	13,5	;volatile
 12453                           
 12454                           ;LED_B1.c: 117: }
 12455                           ;LED_B1.c: 119: }
 12456  17BD  0008               	return
 12457  17BE                     l5628:	
 12458                           
 12459                           ;LED_B1.c: 120: else if(command == 1)
 12460  17BE  0822               	movf	setLED@command,w
 12461  17BF  3A01               	xorlw	1
 12462  17C0  1D03               	skipz
 12463  17C1  2FD4               	goto	l5642
 12464                           
 12465                           ;LED_B1.c: 121: {
 12466                           ;LED_B1.c: 123: if(led == 1)
 12467  17C2  0823               	movf	setLED@led,w
 12468  17C3  3A01               	xorlw	1
 12469  17C4  1D03               	skipz
 12470  17C5  2FC8               	goto	l5634
 12471                           
 12472                           ;LED_B1.c: 124: {
 12473                           ;LED_B1.c: 128: RA3=0;
 12474  17C6  118C               	bcf	12,3	;volatile
 12475                           
 12476                           ;LED_B1.c: 130: }
 12477  17C7  0008               	return
 12478  17C8                     l5634:	
 12479                           
 12480                           ;LED_B1.c: 133: else if(led == 2)
 12481  17C8  0823               	movf	setLED@led,w
 12482  17C9  3A02               	xorlw	2
 12483  17CA  1D03               	skipz
 12484  17CB  2FCE               	goto	l5638
 12485                           
 12486                           ;LED_B1.c: 134: {
 12487                           ;LED_B1.c: 138: RC7=0;
 12488  17CC  138E               	bcf	14,7	;volatile
 12489                           
 12490                           ;LED_B1.c: 140: }
 12491  17CD  0008               	return
 12492  17CE                     l5638:	
 12493                           
 12494                           ;LED_B1.c: 153: else if(led == 99)
 12495  17CE  0823               	movf	setLED@led,w
 12496  17CF  3A63               	xorlw	99
 12497  17D0  1D03               	skipz
 12498  17D1  0008               	return
 12499                           
 12500                           ;LED_B1.c: 154: {
 12501                           ;LED_B1.c: 158: RB5=0;
 12502  17D2  128D               	bcf	13,5	;volatile
 12503                           
 12504                           ;LED_B1.c: 160: }
 12505                           ;LED_B1.c: 162: }
 12506  17D3  0008               	return
 12507  17D4                     l5642:	
 12508                           
 12509                           ;LED_B1.c: 163: else if(command == 10)
 12510  17D4  0822               	movf	setLED@command,w
 12511  17D5  3A0A               	xorlw	10
 12512  17D6  1D03               	skipz
 12513  17D7  2FF6               	goto	l5658
 12514                           
 12515                           ;LED_B1.c: 164: {
 12516                           ;LED_B1.c: 165: LED->GO=0;
 12517  17D8  0021               	movlb	1	; select bank1
 12518  17D9  083D               	movf	_LED^(0+128),w
 12519  17DA  0086               	movwf	6
 12520  17DB  0187               	clrf	7
 12521  17DC  1081               	bcf	1,1
 12522                           
 12523                           ;LED_B1.c: 166: LED->Time=0;
 12524  17DD  0A3D               	incf	_LED^(0+128),w
 12525  17DE  0086               	movwf	6
 12526  17DF  0187               	clrf	7
 12527  17E0  3000               	movlw	0
 12528  17E1  3FC0               	movwi [0]fsr1
 12529  17E2  3FC1               	movwi [1]fsr1
 12530                           
 12531                           ;LED_B1.c: 168: if(led == 1)
 12532  17E3  0020               	movlb	0	; select bank0
 12533  17E4  0823               	movf	setLED@led,w
 12534  17E5  3A01               	xorlw	1
 12535  17E6  1D03               	skipz
 12536  17E7  2FEA               	goto	l5650
 12537                           
 12538                           ;LED_B1.c: 169: {
 12539                           ;LED_B1.c: 173: RA3=1;
 12540  17E8  158C               	bsf	12,3	;volatile
 12541                           
 12542                           ;LED_B1.c: 175: }
 12543  17E9  0008               	return
 12544  17EA                     l5650:	
 12545                           
 12546                           ;LED_B1.c: 178: else if(led == 2)
 12547  17EA  0823               	movf	setLED@led,w
 12548  17EB  3A02               	xorlw	2
 12549  17EC  1D03               	skipz
 12550  17ED  2FF0               	goto	l5654
 12551                           
 12552                           ;LED_B1.c: 179: {
 12553                           ;LED_B1.c: 183: RC7=1;
 12554  17EE  178E               	bsf	14,7	;volatile
 12555                           
 12556                           ;LED_B1.c: 185: }
 12557  17EF  0008               	return
 12558  17F0                     l5654:	
 12559                           
 12560                           ;LED_B1.c: 198: else if(led == 99)
 12561  17F0  0823               	movf	setLED@led,w
 12562  17F1  3A63               	xorlw	99
 12563  17F2  1D03               	skipz
 12564  17F3  0008               	return
 12565                           
 12566                           ;LED_B1.c: 199: {
 12567                           ;LED_B1.c: 203: RB5=1;
 12568  17F4  168D               	bsf	13,5	;volatile
 12569                           
 12570                           ;LED_B1.c: 205: }
 12571                           ;LED_B1.c: 207: }
 12572  17F5  0008               	return
 12573  17F6                     l5658:	
 12574                           
 12575                           ;LED_B1.c: 208: else if(command == 11)
 12576  17F6  0822               	movf	setLED@command,w
 12577  17F7  3A0B               	xorlw	11
 12578  17F8  1D03               	skipz
 12579  17F9  0008               	return
 12580                           
 12581                           ;LED_B1.c: 209: {
 12582                           ;LED_B1.c: 210: LED->GO=1;
 12583  17FA  0021               	movlb	1	; select bank1
 12584  17FB  083D               	movf	_LED^(0+128),w
 12585  17FC  0086               	movwf	6
 12586  17FD  0187               	clrf	7
 12587  17FE  1481               	bsf	1,1
 12588  17FF  0008               	return
 12589  1800                     __end_of_setLED:	
 12590                           
 12591                           	psect	text73
 12592  10B7                     __ptext73:	
 12593 ;; *************** function _LedPointSelect *****************
 12594 ;; Defined at:
 12595 ;;		line 7 in file "../src/LED_B1.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;  led             1    wreg     unsigned char 
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;  led             1    1[BANK0 ] unsigned char 
 12600 ;; Return value:  Size  Location     Type
 12601 ;;		None               void
 12602 ;; Registers used:
 12603 ;;		wreg
 12604 ;; Tracked objects:
 12605 ;;		On entry : 0/0
 12606 ;;		On exit  : 0/0
 12607 ;;		Unchanged: 0/0
 12608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;Total ram usage:        2 bytes
 12614 ;; Hardware stack levels used:    1
 12615 ;; Hardware stack levels required when called:    5
 12616 ;; This function calls:
 12617 ;;		Nothing
 12618 ;; This function is called by:
 12619 ;;		_setLED_Initialization
 12620 ;;		_setLED
 12621 ;;		_setLED_Main
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _LedPointSelect
 12627  10B7                     _LedPointSelect:	
 12628                           
 12629                           ;incstack = 0
 12630                           ; Regs used in _LedPointSelect: [wreg]
 12631                           ;LedPointSelect@led stored from wreg
 12632  10B7  0020               	movlb	0	; select bank0
 12633  10B8  00A1               	movwf	LedPointSelect@led
 12634                           
 12635                           ;LED_B1.c: 10: if(led == 1)
 12636  10B9  0821               	movf	LedPointSelect@led,w
 12637  10BA  3A01               	xorlw	1
 12638  10BB  1D03               	skipz
 12639  10BC  28C3               	goto	l5446
 12640                           
 12641                           ;LED_B1.c: 11: {
 12642                           ;LED_B1.c: 12: LED=&VarLED1;
 12643  10BD  30DD               	movlw	_VarLED1& (0+255)
 12644  10BE  00A0               	movwf	??_LedPointSelect
 12645  10BF  0820               	movf	??_LedPointSelect,w
 12646  10C0  0021               	movlb	1	; select bank1
 12647  10C1  00BD               	movwf	_LED^(0+128)
 12648                           
 12649                           ;LED_B1.c: 13: }
 12650  10C2  0008               	return
 12651  10C3                     l5446:	
 12652                           
 12653                           ;LED_B1.c: 16: else if(led == 2)
 12654  10C3  0020               	movlb	0	; select bank0
 12655  10C4  0821               	movf	LedPointSelect@led,w
 12656  10C5  3A02               	xorlw	2
 12657  10C6  1D03               	skipz
 12658  10C7  28CE               	goto	l5450
 12659                           
 12660                           ;LED_B1.c: 17: {
 12661                           ;LED_B1.c: 18: LED=&VarLED2;
 12662  10C8  30E1               	movlw	_VarLED2& (0+255)
 12663  10C9  00A0               	movwf	??_LedPointSelect
 12664  10CA  0820               	movf	??_LedPointSelect,w
 12665  10CB  0021               	movlb	1	; select bank1
 12666  10CC  00BD               	movwf	_LED^(0+128)
 12667                           
 12668                           ;LED_B1.c: 19: }
 12669  10CD  0008               	return
 12670  10CE                     l5450:	
 12671                           
 12672                           ;LED_B1.c: 28: else if(led == 99)
 12673  10CE  0020               	movlb	0	; select bank0
 12674  10CF  0821               	movf	LedPointSelect@led,w
 12675  10D0  3A63               	xorlw	99
 12676  10D1  1D03               	skipz
 12677  10D2  0008               	return
 12678                           
 12679                           ;LED_B1.c: 29: {
 12680                           ;LED_B1.c: 30: LED=&VarErrLED;
 12681  10D3  30D9               	movlw	_VarErrLED& (0+255)
 12682  10D4  00A0               	movwf	??_LedPointSelect
 12683  10D5  0820               	movf	??_LedPointSelect,w
 12684  10D6  0021               	movlb	1	; select bank1
 12685  10D7  00BD               	movwf	_LED^(0+128)
 12686  10D8  0008               	return
 12687  10D9                     __end_of_LedPointSelect:	
 12688                           
 12689                           	psect	text74
 12690  1E64                     __ptext74:	
 12691 ;; *************** function _DimmerLights_Close *****************
 12692 ;; Defined at:
 12693 ;;		line 408 in file "../src/Dimmer_B1.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;		None
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;		None
 12698 ;; Return value:  Size  Location     Type
 12699 ;;		None               void
 12700 ;; Registers used:
 12701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;Total ram usage:        0 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    6
 12714 ;; This function calls:
 12715 ;;		_getDimmerLights_StatusFlag
 12716 ;;		_setMemory_GO
 12717 ;; This function is called by:
 12718 ;;		_DimmerLights_Main
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           
 12723                           ;psect for function _DimmerLights_Close
 12724  1E64                     _DimmerLights_Close:	
 12725                           
 12726                           ;Dimmer_B1.c: 409: if (Dimmer->Detect) {
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12730  1E64  0021               	movlb	1	; select bank1
 12731  1E65  083A               	movf	_Dimmer^(0+128),w
 12732  1E66  0086               	movwf	6
 12733  1E67  0187               	clrf	7
 12734  1E68  1C01               	btfss	1,0
 12735  1E69  0008               	return
 12736                           
 12737                           ;Dimmer_B1.c: 410: Dimmer->Detect = 0;
 12738  1E6A  083A               	movf	_Dimmer^(0+128),w
 12739  1E6B  0086               	movwf	6
 12740  1E6C  0187               	clrf	7
 12741  1E6D  1001               	bcf	1,0
 12742                           
 12743                           ;Dimmer_B1.c: 411: if (!getDimmerLights_StatusFlag()) {
 12744  1E6E  319C  24A1  319E   	fcall	_getDimmerLights_StatusFlag
 12745  1E71  3800               	iorlw	0
 12746  1E72  1D03               	skipz
 12747  1E73  0008               	return
 12748                           
 12749                           ;Dimmer_B1.c: 413: ;;
 12750                           ;Dimmer_B1.c: 414: setMemory_GO(1);
 12751  1E74  3001               	movlw	1
 12752  1E75  319F  27E1         	fcall	_setMemory_GO
 12753  1E77  0008               	return
 12754  1E78                     __end_of_DimmerLights_Close:	
 12755                           
 12756                           	psect	text75
 12757  1FE1                     __ptext75:	
 12758 ;; *************** function _setMemory_GO *****************
 12759 ;; Defined at:
 12760 ;;		line 883 in file "../src/MCU_B1.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  command         1    wreg     unsigned char 
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;  command         1    2[BANK0 ] unsigned char 
 12765 ;; Return value:  Size  Location     Type
 12766 ;;		None               void
 12767 ;; Registers used:
 12768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;Total ram usage:        3 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; Hardware stack levels required when called:    5
 12781 ;; This function calls:
 12782 ;;		Nothing
 12783 ;; This function is called by:
 12784 ;;		_DimmerLights_Close
 12785 ;;		_setDimmerLights
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           
 12790                           ;psect for function _setMemory_GO
 12791  1FE1                     _setMemory_GO:	
 12792                           
 12793                           ;incstack = 0
 12794                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 12795                           ;setMemory_GO@command stored from wreg
 12796  1FE1  0020               	movlb	0	; select bank0
 12797  1FE2  00A2               	movwf	setMemory_GO@command
 12798                           
 12799                           ;MCU_B1.c: 884: Memory->GO = command;
 12800  1FE3  0021               	movlb	1	; select bank1
 12801  1FE4  086E               	movf	_Memory^(0+128),w
 12802  1FE5  3E24               	addlw	36
 12803  1FE6  0086               	movwf	6
 12804  1FE7  3001               	movlw	1	; select bank2/3
 12805  1FE8  0087               	movwf	7
 12806  1FE9  0020               	movlb	0	; select bank0
 12807  1FEA  0822               	movf	setMemory_GO@command,w
 12808  1FEB  1081               	bcf	1,1
 12809  1FEC  1D03               	skipz
 12810  1FED  1481               	bsf	1,1
 12811                           
 12812                           ;MCU_B1.c: 885: if (command == 0) {
 12813  1FEE  08A2               	movf	setMemory_GO@command,f
 12814  1FEF  1D03               	skipz
 12815  1FF0  0008               	return
 12816                           
 12817                           ;MCU_B1.c: 886: Memory->Time = command;
 12818  1FF1  0822               	movf	setMemory_GO@command,w
 12819  1FF2  00A0               	movwf	??_setMemory_GO
 12820  1FF3  01A1               	clrf	??_setMemory_GO+1
 12821  1FF4  0021               	movlb	1	; select bank1
 12822  1FF5  086E               	movf	_Memory^(0+128),w
 12823  1FF6  3E22               	addlw	34
 12824  1FF7  0086               	movwf	6
 12825  1FF8  3001               	movlw	1	; select bank2/3
 12826  1FF9  0087               	movwf	7
 12827  1FFA  0020               	movlb	0	; select bank0
 12828  1FFB  0820               	movf	??_setMemory_GO,w
 12829  1FFC  3FC0               	movwi [0]fsr1
 12830  1FFD  0821               	movf	??_setMemory_GO+1,w
 12831  1FFE  3FC1               	movwi [1]fsr1
 12832  1FFF  0008               	return
 12833  2000                     __end_of_setMemory_GO:	
 12834                           
 12835                           	psect	text76
 12836  1CA1                     __ptext76:	
 12837 ;; *************** function _getDimmerLights_StatusFlag *****************
 12838 ;; Defined at:
 12839 ;;		line 490 in file "../src/Dimmer_B1.c"
 12840 ;; Parameters:    Size  Location     Type
 12841 ;;		None
 12842 ;; Auto vars:     Size  Location     Type
 12843 ;;  Status          1    0[BANK0 ] unsigned char 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  1    wreg      unsigned char 
 12846 ;; Registers used:
 12847 ;;		wreg, status,2
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;Total ram usage:        1 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    5
 12860 ;; This function calls:
 12861 ;;		Nothing
 12862 ;; This function is called by:
 12863 ;;		_DimmerLights_Close
 12864 ;;		_DimmerLights_Exceptions
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868                           
 12869                           ;psect for function _getDimmerLights_StatusFlag
 12870  1CA1                     _getDimmerLights_StatusFlag:	
 12871                           
 12872                           ;Dimmer_B1.c: 491: char Status = 0;
 12873                           
 12874                           ;incstack = 0
 12875                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12876  1CA1  0020               	movlb	0	; select bank0
 12877  1CA2  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12878                           
 12879                           ;Dimmer_B1.c: 502: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12880  1CA3  3000               	movlw	0
 12881  1CA4  0022               	movlb	2	; select bank2
 12882  1CA5  1B30               	btfsc	_DimmerLights1^(0+256),6
 12883  1CA6  3001               	movlw	1
 12884  1CA7  0020               	movlb	0	; select bank0
 12885  1CA8  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12886                           
 12887                           ;Dimmer_B1.c: 505: return Status;
 12888  1CA9  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12889  1CAA  0008               	return
 12890  1CAB                     __end_of_getDimmerLights_StatusFlag:	
 12891                           
 12892                           	psect	text77
 12893  1D50                     __ptext77:	
 12894 ;; *************** function _DimmerLights_Initialization *****************
 12895 ;; Defined at:
 12896 ;;		line 346 in file "../src/Dimmer_B1.c"
 12897 ;; Parameters:    Size  Location     Type
 12898 ;;		None
 12899 ;; Auto vars:     Size  Location     Type
 12900 ;;		None
 12901 ;; Return value:  Size  Location     Type
 12902 ;;		None               void
 12903 ;; Registers used:
 12904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12905 ;; Tracked objects:
 12906 ;;		On entry : 0/0
 12907 ;;		On exit  : 0/0
 12908 ;;		Unchanged: 0/0
 12909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;Total ram usage:        1 bytes
 12915 ;; Hardware stack levels used:    1
 12916 ;; Hardware stack levels required when called:    7
 12917 ;; This function calls:
 12918 ;;		_Dimmer_Initialization
 12919 ;;		_setDimmerLights_Initialization
 12920 ;; This function is called by:
 12921 ;;		_main
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function _DimmerLights_Initialization
 12927  1D50                     _DimmerLights_Initialization:	
 12928                           
 12929                           ;Dimmer_B1.c: 349: DimmerLights11 = &DimmerLights1;
 12930                           
 12931                           ;incstack = 0
 12932                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12933  1D50  3030               	movlw	_DimmerLights1& (0+255)
 12934  1D51  0020               	movlb	0	; select bank0
 12935  1D52  00A4               	movwf	??_DimmerLights_Initialization
 12936  1D53  0824               	movf	??_DimmerLights_Initialization,w
 12937  1D54  0021               	movlb	1	; select bank1
 12938  1D55  00BB               	movwf	_DimmerLights11^(0+128)
 12939                           
 12940                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(1);
 12941  1D56  3001               	movlw	1
 12942  1D57  3191  21F5  319D   	fcall	_setDimmerLights_Initialization
 12943                           
 12944                           ;Dimmer_B1.c: 364: Dimmer_Initialization();
 12945  1D5A  319C  2469         	fcall	_Dimmer_Initialization
 12946  1D5C  0008               	return
 12947  1D5D                     __end_of_DimmerLights_Initialization:	
 12948                           
 12949                           	psect	text78
 12950  11F5                     __ptext78:	
 12951 ;; *************** function _setDimmerLights_Initialization *****************
 12952 ;; Defined at:
 12953 ;;		line 369 in file "../src/Dimmer_B1.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  lights          1    wreg     unsigned char 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  lights          1    3[BANK0 ] unsigned char 
 12958 ;; Return value:  Size  Location     Type
 12959 ;;		None               void
 12960 ;; Registers used:
 12961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12962 ;; Tracked objects:
 12963 ;;		On entry : 0/0
 12964 ;;		On exit  : 0/0
 12965 ;;		Unchanged: 0/0
 12966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;Total ram usage:        2 bytes
 12972 ;; Hardware stack levels used:    1
 12973 ;; Hardware stack levels required when called:    6
 12974 ;; This function calls:
 12975 ;;		_DimmerLightsPointSelect
 12976 ;; This function is called by:
 12977 ;;		_DimmerLights_Initialization
 12978 ;; This function uses a non-reentrant model
 12979 ;;
 12980                           
 12981                           
 12982                           ;psect for function _setDimmerLights_Initialization
 12983  11F5                     _setDimmerLights_Initialization:	
 12984                           
 12985                           ;incstack = 0
 12986                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12987                           ;setDimmerLights_Initialization@lights stored from wreg
 12988  11F5  0020               	movlb	0	; select bank0
 12989  11F6  00A3               	movwf	setDimmerLights_Initialization@lights
 12990                           
 12991                           ;Dimmer_B1.c: 371: DimmerLightsPointSelect(lights);
 12992  11F7  0823               	movf	setDimmerLights_Initialization@lights,w
 12993  11F8  319C  24C1         	fcall	_DimmerLightsPointSelect
 12994                           
 12995                           ;Dimmer_B1.c: 372: DimmerLights->Clear = 1;
 12996  11FA  0878               	movf	_DimmerLights,w
 12997  11FB  3E09               	addlw	9
 12998  11FC  0086               	movwf	6
 12999  11FD  3001               	movlw	1	; select bank2/3
 13000  11FE  0087               	movwf	7
 13001  11FF  1501               	bsf	1,2
 13002                           
 13003                           ;Dimmer_B1.c: 378: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13004  1200  3020               	movlw	32
 13005  1201  0020               	movlb	0	; select bank0
 13006  1202  00A2               	movwf	??_setDimmerLights_Initialization
 13007  1203  0878               	movf	_DimmerLights,w
 13008  1204  3E05               	addlw	5
 13009  1205  0086               	movwf	6
 13010  1206  3001               	movlw	1	; select bank2/3
 13011  1207  0087               	movwf	7
 13012  1208  0822               	movf	??_setDimmerLights_Initialization,w
 13013  1209  0081               	movwf	1
 13014                           
 13015                           ;Dimmer_B1.c: 379: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13016  120A  303C               	movlw	60
 13017  120B  00A2               	movwf	??_setDimmerLights_Initialization
 13018  120C  0878               	movf	_DimmerLights,w
 13019  120D  3E06               	addlw	6
 13020  120E  0086               	movwf	6
 13021  120F  3001               	movlw	1	; select bank2/3
 13022  1210  0087               	movwf	7
 13023  1211  0822               	movf	??_setDimmerLights_Initialization,w
 13024  1212  0081               	movwf	1
 13025                           
 13026                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13027  1213  0878               	movf	_DimmerLights,w
 13028  1214  3E06               	addlw	6
 13029  1215  0086               	movwf	6
 13030  1216  3001               	movlw	1	; select bank2/3
 13031  1217  0087               	movwf	7
 13032  1218  0801               	movf	1,w
 13033  1219  00A2               	movwf	??_setDimmerLights_Initialization
 13034  121A  0878               	movf	_DimmerLights,w
 13035  121B  3E04               	addlw	4
 13036  121C  0086               	movwf	6
 13037  121D  3001               	movlw	1	; select bank2/3
 13038  121E  0087               	movwf	7
 13039  121F  0822               	movf	??_setDimmerLights_Initialization,w
 13040  1220  0081               	movwf	1
 13041  1221  0008               	return
 13042  1222                     __end_of_setDimmerLights_Initialization:	
 13043                           
 13044                           	psect	text79
 13045  1C69                     __ptext79:	
 13046 ;; *************** function _Dimmer_Initialization *****************
 13047 ;; Defined at:
 13048 ;;		line 804 in file "../src/Dimmer_B1.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;		None               void
 13055 ;; Registers used:
 13056 ;;		wreg
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;Total ram usage:        1 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    5
 13069 ;; This function calls:
 13070 ;;		Nothing
 13071 ;; This function is called by:
 13072 ;;		_DimmerLights_Initialization
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function _Dimmer_Initialization
 13078  1C69                     _Dimmer_Initialization:	
 13079                           
 13080                           ;Dimmer_B1.c: 806: Dimmer = &Dimmer1;
 13081                           
 13082                           ;incstack = 0
 13083                           ; Regs used in _Dimmer_Initialization: [wreg]
 13084  1C69  30E5               	movlw	_Dimmer1& (0+255)
 13085  1C6A  0020               	movlb	0	; select bank0
 13086  1C6B  00A0               	movwf	??_Dimmer_Initialization
 13087  1C6C  0820               	movf	??_Dimmer_Initialization,w
 13088  1C6D  0021               	movlb	1	; select bank1
 13089  1C6E  00BA               	movwf	_Dimmer^(0+128)
 13090  1C6F  0008               	return
 13091  1C70                     __end_of_Dimmer_Initialization:	
 13092                           
 13093                           	psect	text80
 13094  1C37                     __ptext80:	
 13095 ;; *************** function _DelayOff_Main *****************
 13096 ;; Defined at:
 13097 ;;		line 41 in file "../src/DelayOff_B1.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;		None
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;		None               void
 13104 ;; Registers used:
 13105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13106 ;; Tracked objects:
 13107 ;;		On entry : 0/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;Total ram usage:        0 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; Hardware stack levels required when called:   10
 13118 ;; This function calls:
 13119 ;;		_DlyOff_Main
 13120 ;; This function is called by:
 13121 ;;		_main
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           
 13126                           ;psect for function _DelayOff_Main
 13127  1C37                     _DelayOff_Main:	
 13128                           
 13129                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13133  1C37  3001               	movlw	1
 13134  1C38  318B  236B         	fcall	_DlyOff_Main
 13135  1C3A  0008               	return
 13136  1C3B                     __end_of_DelayOff_Main:	
 13137                           
 13138                           	psect	text81
 13139  0B6B                     __ptext81:	
 13140 ;; *************** function _DlyOff_Main *****************
 13141 ;; Defined at:
 13142 ;;		line 62 in file "../src/DelayOff_B1.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  sw              1    wreg     unsigned char 
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  sw              1   68[BANK0 ] unsigned char 
 13147 ;; Return value:  Size  Location     Type
 13148 ;;		None               void
 13149 ;; Registers used:
 13150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13151 ;; Tracked objects:
 13152 ;;		On entry : 0/0
 13153 ;;		On exit  : 0/0
 13154 ;;		Unchanged: 0/0
 13155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;Total ram usage:        3 bytes
 13161 ;; Hardware stack levels used:    1
 13162 ;; Hardware stack levels required when called:    9
 13163 ;; This function calls:
 13164 ;;		_DelayOffPointSelect
 13165 ;;		_setBuz
 13166 ;;		_setDimmerLights_Switch
 13167 ;;		_setDimmerLights_Trigger
 13168 ;;		_setRFSW_Status
 13169 ;;		_setRF_DimmerLights
 13170 ;;		_setSw_Status
 13171 ;;		_setTxData
 13172 ;; This function is called by:
 13173 ;;		_DelayOff_Main
 13174 ;; This function uses a non-reentrant model
 13175 ;;
 13176                           
 13177                           
 13178                           ;psect for function _DlyOff_Main
 13179  0B6B                     _DlyOff_Main:	
 13180                           
 13181                           ;incstack = 0
 13182                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13183                           ;DlyOff_Main@sw stored from wreg
 13184  0B6B  0020               	movlb	0	; select bank0
 13185  0B6C  00E4               	movwf	DlyOff_Main@sw
 13186                           
 13187                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13188  0B6D  0864               	movf	DlyOff_Main@sw,w
 13189  0B6E  319D  2507  318B   	fcall	_DelayOffPointSelect
 13190                           
 13191                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 13192  0B71  0021               	movlb	1	; select bank1
 13193  0B72  0839               	movf	_DelayOff^(0+128),w
 13194  0B73  0086               	movwf	6
 13195  0B74  0187               	clrf	7
 13196  0B75  1C81               	btfss	1,1
 13197  0B76  0008               	return
 13198                           
 13199                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13200  0B77  0839               	movf	_DelayOff^(0+128),w
 13201  0B78  3E02               	addlw	2
 13202  0B79  0086               	movwf	6
 13203  0B7A  0187               	clrf	7
 13204  0B7B  3001               	movlw	1
 13205  0B7C  0781               	addwf	1,f
 13206  0B7D  3141               	addfsr 1,1
 13207  0B7E  1803               	skipnc
 13208  0B7F  0A81               	incf	1,f
 13209                           
 13210                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13211  0B80  0839               	movf	_DelayOff^(0+128),w
 13212  0B81  3E02               	addlw	2
 13213  0B82  0086               	movwf	6
 13214  0B83  0187               	clrf	7
 13215  0B84  3F40               	moviw [0]fsr1
 13216  0B85  0020               	movlb	0	; select bank0
 13217  0B86  00E2               	movwf	??_DlyOff_Main
 13218  0B87  3F41               	moviw [1]fsr1
 13219  0B88  00E3               	movwf	??_DlyOff_Main+1
 13220  0B89  3015               	movlw	21
 13221  0B8A  0263               	subwf	??_DlyOff_Main+1,w
 13222  0B8B  30E0               	movlw	224
 13223  0B8C  1903               	skipnz
 13224  0B8D  0262               	subwf	??_DlyOff_Main,w
 13225  0B8E  1C03               	skipc
 13226  0B8F  0008               	return
 13227                           
 13228                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13229  0B90  0021               	movlb	1	; select bank1
 13230  0B91  0839               	movf	_DelayOff^(0+128),w
 13231  0B92  3E02               	addlw	2
 13232  0B93  0086               	movwf	6
 13233  0B94  0187               	clrf	7
 13234  0B95  3000               	movlw	0
 13235  0B96  3FC0               	movwi [0]fsr1
 13236  0B97  3FC1               	movwi [1]fsr1
 13237                           
 13238                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13239  0B98  3001               	movlw	1
 13240  0B99  0020               	movlb	0	; select bank0
 13241  0B9A  00E2               	movwf	??_DlyOff_Main
 13242  0B9B  0021               	movlb	1	; select bank1
 13243  0B9C  0839               	movf	_DelayOff^(0+128),w
 13244  0B9D  3E04               	addlw	4
 13245  0B9E  0086               	movwf	6
 13246  0B9F  0187               	clrf	7
 13247  0BA0  0020               	movlb	0	; select bank0
 13248  0BA1  0862               	movf	??_DlyOff_Main,w
 13249  0BA2  0781               	addwf	1,f
 13250                           
 13251                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13252  0BA3  0021               	movlb	1	; select bank1
 13253  0BA4  0839               	movf	_DelayOff^(0+128),w
 13254  0BA5  3E04               	addlw	4
 13255  0BA6  0086               	movwf	6
 13256  0BA7  0187               	clrf	7
 13257  0BA8  0A39               	incf	_DelayOff^(0+128),w
 13258  0BA9  0084               	movwf	4
 13259  0BAA  0185               	clrf	5
 13260  0BAB  0800               	movf	0,w
 13261  0BAC  0201               	subwf	1,w
 13262  0BAD  1C03               	skipc
 13263  0BAE  0008               	return
 13264                           
 13265                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13266  0BAF  0839               	movf	_DelayOff^(0+128),w
 13267  0BB0  3E04               	addlw	4
 13268  0BB1  0086               	movwf	6
 13269  0BB2  0187               	clrf	7
 13270  0BB3  0181               	clrf	1
 13271                           
 13272                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13273  0BB4  0839               	movf	_DelayOff^(0+128),w
 13274  0BB5  0086               	movwf	6
 13275  0BB6  0187               	clrf	7
 13276  0BB7  1081               	bcf	1,1
 13277                           
 13278                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 13279  0BB8  0020               	movlb	0	; select bank0
 13280  0BB9  01A2               	clrf	setSw_Status@command
 13281  0BBA  0864               	movf	DlyOff_Main@sw,w
 13282  0BBB  319D  25A2  318B   	fcall	_setSw_Status
 13283                           
 13284                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 13285  0BBE  0020               	movlb	0	; select bank0
 13286  0BBF  01A2               	clrf	setRFSW_Status@command
 13287  0BC0  0864               	movf	DlyOff_Main@sw,w
 13288  0BC1  319D  2593  318B   	fcall	_setRFSW_Status
 13289                           
 13290                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 13291  0BC4  0020               	movlb	0	; select bank0
 13292  0BC5  01DD               	clrf	setRF_DimmerLights@on
 13293  0BC6  0864               	movf	DlyOff_Main@sw,w
 13294  0BC7  3189  213E  318B   	fcall	_setRF_DimmerLights
 13295                           
 13296                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 13297  0BCA  0020               	movlb	0	; select bank0
 13298  0BCB  01A2               	clrf	setDimmerLights_Trigger@command
 13299  0BCC  0AA2               	incf	setDimmerLights_Trigger@command,f
 13300  0BCD  0864               	movf	DlyOff_Main@sw,w
 13301  0BCE  319D  25E0  318B   	fcall	_setDimmerLights_Trigger
 13302                           
 13303                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 13304  0BD1  0020               	movlb	0	; select bank0
 13305  0BD2  01A2               	clrf	setDimmerLights_Switch@command
 13306  0BD3  0864               	movf	DlyOff_Main@sw,w
 13307  0BD4  319D  25D0  318B   	fcall	_setDimmerLights_Switch
 13308                           
 13309                           ;DelayOff_B1.c: 77: setTxData(1);
 13310  0BD7  3001               	movlw	1
 13311  0BD8  318E  2604  318B   	fcall	_setTxData
 13312                           
 13313                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 13314  0BDB  3064               	movlw	100
 13315  0BDC  0020               	movlb	0	; select bank0
 13316  0BDD  00A9               	movwf	setBuz@time
 13317  0BDE  3000               	movlw	0
 13318  0BDF  00AA               	movwf	setBuz@time+1
 13319  0BE0  3001               	movlw	1
 13320  0BE1  318C  24EB         	fcall	_setBuz
 13321  0BE3  0008               	return
 13322  0BE4                     __end_of_DlyOff_Main:	
 13323                           
 13324                           	psect	text82
 13325  0E04                     __ptext82:	
 13326 ;; *************** function _setTxData *****************
 13327 ;; Defined at:
 13328 ;;		line 156 in file "../src/RF_Control_B1.c"
 13329 ;; Parameters:    Size  Location     Type
 13330 ;;  rf              1    wreg     unsigned char 
 13331 ;; Auto vars:     Size  Location     Type
 13332 ;;  rf              1    3[BANK0 ] unsigned char 
 13333 ;;  i               1    0        unsigned char 
 13334 ;; Return value:  Size  Location     Type
 13335 ;;		None               void
 13336 ;; Registers used:
 13337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13338 ;; Tracked objects:
 13339 ;;		On entry : 0/0
 13340 ;;		On exit  : 0/0
 13341 ;;		Unchanged: 0/0
 13342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;Total ram usage:        2 bytes
 13348 ;; Hardware stack levels used:    1
 13349 ;; Hardware stack levels required when called:    6
 13350 ;; This function calls:
 13351 ;;		_RfPointSelect
 13352 ;; This function is called by:
 13353 ;;		_DlyOff_Main
 13354 ;;		_setDimmerLights_Adj
 13355 ;;		_setControl_Lights_Table
 13356 ;;		_setRFSW_Control
 13357 ;;		_setRFSW_AdjControl
 13358 ;;		_Sw_DimmerOnFunc
 13359 ;;		_Sw_DimmerOffFunc
 13360 ;; This function uses a non-reentrant model
 13361 ;;
 13362                           
 13363                           
 13364                           ;psect for function _setTxData
 13365  0E04                     _setTxData:	
 13366                           
 13367                           ;incstack = 0
 13368                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13369                           ;setTxData@rf stored from wreg
 13370  0E04  0020               	movlb	0	; select bank0
 13371  0E05  00A3               	movwf	setTxData@rf
 13372                           
 13373                           ;RF_Control_B1.c: 157: char i;
 13374                           ;RF_Control_B1.c: 158: RfPointSelect(rf);
 13375  0E06  0823               	movf	setTxData@rf,w
 13376  0E07  319D  2577  318E   	fcall	_RfPointSelect
 13377                           
 13378                           ;RF_Control_B1.c: 159: if (RF->Enable == 1) {
 13379  0E0A  087A               	movf	_RF,w
 13380  0E0B  0086               	movwf	6
 13381  0E0C  0187               	clrf	7
 13382  0E0D  1C01               	btfss	1,0
 13383  0E0E  0008               	return
 13384                           
 13385                           ;RF_Control_B1.c: 161: RF->TransceiveGO = 1;
 13386  0E0F  087A               	movf	_RF,w
 13387  0E10  0086               	movwf	6
 13388  0E11  0187               	clrf	7
 13389  0E12  1501               	bsf	1,2
 13390                           
 13391                           ;RF_Control_B1.c: 171: RF_Data[0] = 0x63;
 13392  0E13  3063               	movlw	99
 13393  0E14  0020               	movlb	0	; select bank0
 13394  0E15  00A2               	movwf	??_setTxData
 13395  0E16  0822               	movf	??_setTxData,w
 13396  0E17  0021               	movlb	1	; select bank1
 13397  0E18  00A0               	movwf	_RF_Data^(0+128)
 13398                           
 13399                           ;RF_Control_B1.c: 172: RF_Data[1] = 0x02;
 13400  0E19  3002               	movlw	2
 13401  0E1A  0020               	movlb	0	; select bank0
 13402  0E1B  00A2               	movwf	??_setTxData
 13403  0E1C  0822               	movf	??_setTxData,w
 13404  0E1D  0021               	movlb	1	; select bank1
 13405  0E1E  00A1               	movwf	(_RF_Data^(0+128)+1)
 13406                           
 13407                           ;RF_Control_B1.c: 173: RF_Data[2] = product->Data[2];
 13408  0E1F  087D               	movf	_product,w
 13409  0E20  0086               	movwf	6
 13410  0E21  3001               	movlw	1	; select bank2/3
 13411  0E22  0087               	movwf	7
 13412  0E23  3001               	movlw	1	; select bank2/3
 13413  0E24  3F42               	moviw [2]fsr1
 13414  0E25  00A2               	movwf	(_RF_Data^(0+128)+2)
 13415                           
 13416                           ;RF_Control_B1.c: 174: RF_Data[3] = product->Data[3];
 13417  0E26  087D               	movf	_product,w
 13418  0E27  0086               	movwf	6
 13419  0E28  3001               	movlw	1	; select bank2/3
 13420  0E29  0087               	movwf	7
 13421  0E2A  3001               	movlw	1	; select bank2/3
 13422  0E2B  3F43               	moviw [3]fsr1
 13423  0E2C  00A3               	movwf	(_RF_Data^(0+128)+3)
 13424                           
 13425                           ;RF_Control_B1.c: 175: RF_Data[4] = product->Data[4];
 13426  0E2D  087D               	movf	_product,w
 13427  0E2E  0086               	movwf	6
 13428  0E2F  3001               	movlw	1	; select bank2/3
 13429  0E30  0087               	movwf	7
 13430  0E31  3001               	movlw	1	; select bank2/3
 13431  0E32  3F44               	moviw [4]fsr1
 13432  0E33  00A4               	movwf	(_RF_Data^(0+128)+4)
 13433                           
 13434                           ;RF_Control_B1.c: 176: RF_Data[5] = product->Data[5];
 13435  0E34  087D               	movf	_product,w
 13436  0E35  0086               	movwf	6
 13437  0E36  3001               	movlw	1	; select bank2/3
 13438  0E37  0087               	movwf	7
 13439  0E38  3001               	movlw	1	; select bank2/3
 13440  0E39  3F45               	moviw [5]fsr1
 13441  0E3A  00A5               	movwf	(_RF_Data^(0+128)+5)
 13442                           
 13443                           ;RF_Control_B1.c: 177: RF_Data[6] = product->Data[6];
 13444  0E3B  087D               	movf	_product,w
 13445  0E3C  0086               	movwf	6
 13446  0E3D  3001               	movlw	1	; select bank2/3
 13447  0E3E  0087               	movwf	7
 13448  0E3F  3001               	movlw	1	; select bank2/3
 13449  0E40  3F46               	moviw [6]fsr1
 13450  0E41  00A6               	movwf	(_RF_Data^(0+128)+6)
 13451                           
 13452                           ;RF_Control_B1.c: 178: RF_Data[7] = product->Data[7];
 13453  0E42  087D               	movf	_product,w
 13454  0E43  0086               	movwf	6
 13455  0E44  3001               	movlw	1	; select bank2/3
 13456  0E45  0087               	movwf	7
 13457  0E46  3001               	movlw	1	; select bank2/3
 13458  0E47  3F47               	moviw [7]fsr1
 13459  0E48  00A7               	movwf	(_RF_Data^(0+128)+7)
 13460                           
 13461                           ;RF_Control_B1.c: 179: RF_Data[8] = product->Data[8];
 13462  0E49  087D               	movf	_product,w
 13463  0E4A  0086               	movwf	6
 13464  0E4B  3001               	movlw	1	; select bank2/3
 13465  0E4C  0087               	movwf	7
 13466  0E4D  3001               	movlw	1	; select bank2/3
 13467  0E4E  3F48               	moviw [8]fsr1
 13468  0E4F  00A8               	movwf	(_RF_Data^(0+128)+8)
 13469                           
 13470                           ;RF_Control_B1.c: 180: RF_Data[9] = product->Data[9];
 13471  0E50  087D               	movf	_product,w
 13472  0E51  0086               	movwf	6
 13473  0E52  3001               	movlw	1	; select bank2/3
 13474  0E53  0087               	movwf	7
 13475  0E54  3001               	movlw	1	; select bank2/3
 13476  0E55  3F49               	moviw [9]fsr1
 13477  0E56  00A9               	movwf	(_RF_Data^(0+128)+9)
 13478                           
 13479                           ;RF_Control_B1.c: 181: RF_Data[10] = product->Data[10];
 13480  0E57  087D               	movf	_product,w
 13481  0E58  0086               	movwf	6
 13482  0E59  3001               	movlw	1	; select bank2/3
 13483  0E5A  0087               	movwf	7
 13484  0E5B  3001               	movlw	1	; select bank2/3
 13485  0E5C  3F4A               	moviw [10]fsr1
 13486  0E5D  00AA               	movwf	(_RF_Data^(0+128)+10)
 13487                           
 13488                           ;RF_Control_B1.c: 182: RF_Data[11] = product->Data[11];
 13489  0E5E  087D               	movf	_product,w
 13490  0E5F  0086               	movwf	6
 13491  0E60  3001               	movlw	1	; select bank2/3
 13492  0E61  0087               	movwf	7
 13493  0E62  3001               	movlw	1	; select bank2/3
 13494  0E63  3F4B               	moviw [11]fsr1
 13495  0E64  00AB               	movwf	(_RF_Data^(0+128)+11)
 13496                           
 13497                           ;RF_Control_B1.c: 183: RF_Data[12] = product->Data[12];
 13498  0E65  087D               	movf	_product,w
 13499  0E66  0086               	movwf	6
 13500  0E67  3001               	movlw	1	; select bank2/3
 13501  0E68  0087               	movwf	7
 13502  0E69  3001               	movlw	1	; select bank2/3
 13503  0E6A  3F4C               	moviw [12]fsr1
 13504  0E6B  00AC               	movwf	(_RF_Data^(0+128)+12)
 13505                           
 13506                           ;RF_Control_B1.c: 184: RF_Data[13] = product->Data[13];
 13507  0E6C  087D               	movf	_product,w
 13508  0E6D  0086               	movwf	6
 13509  0E6E  3001               	movlw	1	; select bank2/3
 13510  0E6F  0087               	movwf	7
 13511  0E70  3001               	movlw	1	; select bank2/3
 13512  0E71  3F4D               	moviw [13]fsr1
 13513  0E72  00AD               	movwf	(_RF_Data^(0+128)+13)
 13514                           
 13515                           ;RF_Control_B1.c: 185: RF_Data[14] = product->Data[14];
 13516  0E73  087D               	movf	_product,w
 13517  0E74  0086               	movwf	6
 13518  0E75  3001               	movlw	1	; select bank2/3
 13519  0E76  0087               	movwf	7
 13520  0E77  3001               	movlw	1	; select bank2/3
 13521  0E78  3F4E               	moviw [14]fsr1
 13522  0E79  00AE               	movwf	(_RF_Data^(0+128)+14)
 13523                           
 13524                           ;RF_Control_B1.c: 186: RF_Data[15] = product->Data[15];
 13525  0E7A  087D               	movf	_product,w
 13526  0E7B  0086               	movwf	6
 13527  0E7C  3001               	movlw	1	; select bank2/3
 13528  0E7D  0087               	movwf	7
 13529  0E7E  3001               	movlw	1	; select bank2/3
 13530  0E7F  3F4F               	moviw [15]fsr1
 13531  0E80  00AF               	movwf	(_RF_Data^(0+128)+15)
 13532                           
 13533                           ;RF_Control_B1.c: 187: RF_Data[16] = product->Data[16];
 13534  0E81  087D               	movf	_product,w
 13535  0E82  0086               	movwf	6
 13536  0E83  3001               	movlw	1	; select bank2/3
 13537  0E84  0087               	movwf	7
 13538  0E85  3001               	movlw	1	; select bank2/3
 13539  0E86  3F50               	moviw [16]fsr1
 13540  0E87  00B0               	movwf	(_RF_Data^(0+128)+16)
 13541                           
 13542                           ;RF_Control_B1.c: 188: RF_Data[17] = product->Data[17];
 13543  0E88  087D               	movf	_product,w
 13544  0E89  0086               	movwf	6
 13545  0E8A  3001               	movlw	1	; select bank2/3
 13546  0E8B  0087               	movwf	7
 13547  0E8C  3001               	movlw	1	; select bank2/3
 13548  0E8D  3F51               	moviw [17]fsr1
 13549  0E8E  00B1               	movwf	(_RF_Data^(0+128)+17)
 13550                           
 13551                           ;RF_Control_B1.c: 189: RF_Data[18] = product->Data[18];
 13552  0E8F  087D               	movf	_product,w
 13553  0E90  0086               	movwf	6
 13554  0E91  3001               	movlw	1	; select bank2/3
 13555  0E92  0087               	movwf	7
 13556  0E93  3001               	movlw	1	; select bank2/3
 13557  0E94  3F52               	moviw [18]fsr1
 13558  0E95  00B2               	movwf	(_RF_Data^(0+128)+18)
 13559                           
 13560                           ;RF_Control_B1.c: 190: RF_Data[19] = product->Data[19];
 13561  0E96  087D               	movf	_product,w
 13562  0E97  0086               	movwf	6
 13563  0E98  3001               	movlw	1	; select bank2/3
 13564  0E99  0087               	movwf	7
 13565  0E9A  3001               	movlw	1	; select bank2/3
 13566  0E9B  3F53               	moviw [19]fsr1
 13567  0E9C  00B3               	movwf	(_RF_Data^(0+128)+19)
 13568                           
 13569                           ;RF_Control_B1.c: 191: RF_Data[20] = 209;
 13570  0E9D  30D1               	movlw	209
 13571  0E9E  0020               	movlb	0	; select bank0
 13572  0E9F  00A2               	movwf	??_setTxData
 13573  0EA0  0822               	movf	??_setTxData,w
 13574  0EA1  0021               	movlb	1	; select bank1
 13575  0EA2  00B4               	movwf	(_RF_Data^(0+128)+20)
 13576  0EA3  0008               	return
 13577  0EA4                     __end_of_setTxData:	
 13578                           
 13579                           	psect	text83
 13580  1D77                     __ptext83:	
 13581 ;; *************** function _RfPointSelect *****************
 13582 ;; Defined at:
 13583 ;;		line 7 in file "../src/RF_Control_B1.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;  rf              1    wreg     unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;  rf              1    1[BANK0 ] unsigned char 
 13588 ;; Return value:  Size  Location     Type
 13589 ;;		None               void
 13590 ;; Registers used:
 13591 ;;		wreg
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;Total ram usage:        2 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    5
 13604 ;; This function calls:
 13605 ;;		Nothing
 13606 ;; This function is called by:
 13607 ;;		_setRF_Learn
 13608 ;;		_setRF_Main
 13609 ;;		_setTxData
 13610 ;;		_setRF_Enable
 13611 ;;		_RF_RxDisable
 13612 ;;		_getRxData
 13613 ;;		_setLog_Code
 13614 ;;		_setControl_Lights_Table
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           
 13619                           ;psect for function _RfPointSelect
 13620  1D77                     _RfPointSelect:	
 13621                           
 13622                           ;incstack = 0
 13623                           ; Regs used in _RfPointSelect: [wreg]
 13624                           ;RfPointSelect@rf stored from wreg
 13625  1D77  0020               	movlb	0	; select bank0
 13626  1D78  00A1               	movwf	RfPointSelect@rf
 13627                           
 13628                           ;RF_Control_B1.c: 9: if (rf == 1) {
 13629  1D79  0821               	movf	RfPointSelect@rf,w
 13630  1D7A  3A01               	xorlw	1
 13631  1D7B  1D03               	skipz
 13632  1D7C  2D81               	goto	l5458
 13633                           
 13634                           ;RF_Control_B1.c: 10: RF = &RF1;
 13635  1D7D  30D4               	movlw	_RF1& (0+255)
 13636  1D7E  00A0               	movwf	??_RfPointSelect
 13637  1D7F  0820               	movf	??_RfPointSelect,w
 13638  1D80  00FA               	movwf	_RF
 13639  1D81                     l5458:	
 13640                           
 13641                           ;RF_Control_B1.c: 11: }
 13642                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 13643  1D81  1A0B               	btfsc	11,4	;volatile
 13644  1D82  0008               	return
 13645                           
 13646                           ;RF_Control_B1.c: 13: INTE = 1;
 13647  1D83  160B               	bsf	11,4	;volatile
 13648  1D84  0008               	return
 13649  1D85                     __end_of_RfPointSelect:	
 13650                           
 13651                           	psect	text84
 13652  1DA2                     __ptext84:	
 13653 ;; *************** function _setSw_Status *****************
 13654 ;; Defined at:
 13655 ;;		line 105 in file "../src/Switch_B1.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;  sw              1    wreg     unsigned char 
 13658 ;;  command         1    2[BANK0 ] unsigned char 
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;  sw              1    3[BANK0 ] unsigned char 
 13661 ;; Return value:  Size  Location     Type
 13662 ;;		None               void
 13663 ;; Registers used:
 13664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;Total ram usage:        2 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    6
 13677 ;; This function calls:
 13678 ;;		_SwPointSelect
 13679 ;; This function is called by:
 13680 ;;		_DlyOff_Main
 13681 ;;		_setDimmerLights_ERROR
 13682 ;;		_setControl_Lights_Table
 13683 ;;		_setRFSW_Control
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function _setSw_Status
 13689  1DA2                     _setSw_Status:	
 13690                           
 13691                           ;incstack = 0
 13692                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13693                           ;setSw_Status@sw stored from wreg
 13694  1DA2  0020               	movlb	0	; select bank0
 13695  1DA3  00A3               	movwf	setSw_Status@sw
 13696                           
 13697                           ;Switch_B1.c: 106: SwPointSelect(sw);
 13698  1DA4  0823               	movf	setSw_Status@sw,w
 13699  1DA5  319C  24CC         	fcall	_SwPointSelect
 13700                           
 13701                           ;Switch_B1.c: 107: Sw->Status = command;
 13702  1DA7  087B               	movf	_Sw,w
 13703  1DA8  0086               	movwf	6
 13704  1DA9  3001               	movlw	1	; select bank2/3
 13705  1DAA  0087               	movwf	7
 13706  1DAB  0020               	movlb	0	; select bank0
 13707  1DAC  0822               	movf	setSw_Status@command,w
 13708  1DAD  1301               	bcf	1,6
 13709  1DAE  1D03               	skipz
 13710  1DAF  1701               	bsf	1,6
 13711  1DB0  0008               	return
 13712  1DB1                     __end_of_setSw_Status:	
 13713                           
 13714                           	psect	text85
 13715  1CCC                     __ptext85:	
 13716 ;; *************** function _SwPointSelect *****************
 13717 ;; Defined at:
 13718 ;;		line 17 in file "../src/Switch_B1.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  sw              1    wreg     unsigned char 
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  sw              1    1[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        2 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    5
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_setSw_Enable
 13743 ;;		_setSw_Status
 13744 ;;		_setSw_Main
 13745 ;;		_Sw_Detect
 13746 ;; This function uses a non-reentrant model
 13747 ;;
 13748                           
 13749                           
 13750                           ;psect for function _SwPointSelect
 13751  1CCC                     _SwPointSelect:	
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _SwPointSelect: [wreg]
 13755                           ;SwPointSelect@sw stored from wreg
 13756  1CCC  0020               	movlb	0	; select bank0
 13757  1CCD  00A1               	movwf	SwPointSelect@sw
 13758                           
 13759                           ;Switch_B1.c: 20: if (sw == 1) {
 13760  1CCE  0821               	movf	SwPointSelect@sw,w
 13761  1CCF  3A01               	xorlw	1
 13762  1CD0  1D03               	skipz
 13763  1CD1  0008               	return
 13764                           
 13765                           ;Switch_B1.c: 21: Sw = &Sw1;
 13766  1CD2  304B               	movlw	_Sw1& (0+255)
 13767  1CD3  00A0               	movwf	??_SwPointSelect
 13768  1CD4  0820               	movf	??_SwPointSelect,w
 13769  1CD5  00FB               	movwf	_Sw
 13770  1CD6  0008               	return
 13771  1CD7                     __end_of_SwPointSelect:	
 13772                           
 13773                           	psect	text86
 13774  093E                     __ptext86:	
 13775 ;; *************** function _setRF_DimmerLights *****************
 13776 ;; Defined at:
 13777 ;;		line 418 in file "../src/RF_Control_B1.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;  lights          1    wreg     unsigned char 
 13780 ;;  on              1   61[BANK0 ] unsigned char 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;  lights          1   65[BANK0 ] unsigned char 
 13783 ;;  status          1   64[BANK0 ] unsigned char 
 13784 ;; Return value:  Size  Location     Type
 13785 ;;		None               void
 13786 ;; Registers used:
 13787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13788 ;; Tracked objects:
 13789 ;;		On entry : 0/0
 13790 ;;		On exit  : 0/0
 13791 ;;		Unchanged: 0/0
 13792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13793 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;Total ram usage:        5 bytes
 13798 ;; Hardware stack levels used:    1
 13799 ;; Hardware stack levels required when called:    8
 13800 ;; This function calls:
 13801 ;;		_setPercentValue
 13802 ;; This function is called by:
 13803 ;;		_DlyOff_Main
 13804 ;;		_setDimmerLights_Adj
 13805 ;;		_setRFSW_Control
 13806 ;;		_Sw_DimmerOnFunc
 13807 ;;		_Sw_DimmerOffFunc
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           
 13812                           ;psect for function _setRF_DimmerLights
 13813  093E                     _setRF_DimmerLights:	
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13817                           ;setRF_DimmerLights@lights stored from wreg
 13818  093E  0020               	movlb	0	; select bank0
 13819  093F  00E1               	movwf	setRF_DimmerLights@lights
 13820                           
 13821                           ;RF_Control_B1.c: 419: char status;
 13822                           ;RF_Control_B1.c: 420: status = 1;
 13823  0940  01E0               	clrf	setRF_DimmerLights@status
 13824  0941  0AE0               	incf	setRF_DimmerLights@status,f
 13825                           
 13826                           ;RF_Control_B1.c: 421: status <<= (lights - 1);
 13827  0942  0861               	movf	setRF_DimmerLights@lights,w
 13828  0943  3EFF               	addlw	-1
 13829  0944  0A89               	incf	9,f
 13830  0945  2948               	goto	u4080
 13831  0946                     u4085:	
 13832  0946  1003               	clrc
 13833  0947  0DE0               	rlf	setRF_DimmerLights@status,f
 13834  0948                     u4080:	
 13835  0948  3EFF               	addlw	-1
 13836  0949  1D03               	skipz
 13837  094A  2946               	goto	u4085
 13838                           
 13839                           ;RF_Control_B1.c: 422: product->Data[11]=lights;
 13840  094B  0861               	movf	setRF_DimmerLights@lights,w
 13841  094C  00DE               	movwf	??_setRF_DimmerLights
 13842  094D  087D               	movf	_product,w
 13843  094E  3E0B               	addlw	11
 13844  094F  0086               	movwf	6
 13845  0950  3001               	movlw	1	; select bank2/3
 13846  0951  0087               	movwf	7
 13847  0952  085E               	movf	??_setRF_DimmerLights,w
 13848  0953  0081               	movwf	1
 13849                           
 13850                           ;RF_Control_B1.c: 425: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13851  0954  3020               	movlw	32
 13852  0955  3194  24BA  3189   	fcall	_setPercentValue
 13853  0958  0020               	movlb	0	; select bank0
 13854  0959  00DE               	movwf	??_setRF_DimmerLights
 13855  095A  0861               	movf	setRF_DimmerLights@lights,w
 13856  095B  3E14               	addlw	20
 13857  095C  077D               	addwf	_product,w
 13858  095D  00DF               	movwf	??_setRF_DimmerLights+1
 13859  095E  085F               	movf	??_setRF_DimmerLights+1,w
 13860  095F  0086               	movwf	6
 13861  0960  3001               	movlw	1	; select bank2/3
 13862  0961  0087               	movwf	7
 13863  0962  085E               	movf	??_setRF_DimmerLights,w
 13864  0963  0081               	movwf	1
 13865                           
 13866                           ;RF_Control_B1.c: 428: product->Data[9]=product->Data[20 + lights];
 13867  0964  0861               	movf	setRF_DimmerLights@lights,w
 13868  0965  3E14               	addlw	20
 13869  0966  077D               	addwf	_product,w
 13870  0967  00DE               	movwf	??_setRF_DimmerLights
 13871  0968  085E               	movf	??_setRF_DimmerLights,w
 13872  0969  0086               	movwf	6
 13873  096A  3001               	movlw	1	; select bank2/3
 13874  096B  0087               	movwf	7
 13875  096C  0801               	movf	1,w
 13876  096D  00DF               	movwf	??_setRF_DimmerLights+1
 13877  096E  087D               	movf	_product,w
 13878  096F  3E09               	addlw	9
 13879  0970  0086               	movwf	6
 13880  0971  3001               	movlw	1	; select bank2/3
 13881  0972  0087               	movwf	7
 13882  0973  085F               	movf	??_setRF_DimmerLights+1,w
 13883  0974  0081               	movwf	1
 13884                           
 13885                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + lights];
 13886  0975  0861               	movf	setRF_DimmerLights@lights,w
 13887  0976  3E1A               	addlw	26
 13888  0977  077D               	addwf	_product,w
 13889  0978  00DE               	movwf	??_setRF_DimmerLights
 13890  0979  085E               	movf	??_setRF_DimmerLights,w
 13891  097A  0086               	movwf	6
 13892  097B  3001               	movlw	1	; select bank2/3
 13893  097C  0087               	movwf	7
 13894  097D  0801               	movf	1,w
 13895  097E  00DF               	movwf	??_setRF_DimmerLights+1
 13896  097F  087D               	movf	_product,w
 13897  0980  3E11               	addlw	17
 13898  0981  0086               	movwf	6
 13899  0982  3001               	movlw	1	; select bank2/3
 13900  0983  0087               	movwf	7
 13901  0984  085F               	movf	??_setRF_DimmerLights+1,w
 13902  0985  0081               	movwf	1
 13903                           
 13904                           ;RF_Control_B1.c: 430: if (on == 1) {
 13905  0986  085D               	movf	setRF_DimmerLights@on,w
 13906  0987  3A01               	xorlw	1
 13907  0988  1D03               	skipz
 13908  0989  299A               	goto	l5556
 13909                           
 13910                           ;RF_Control_B1.c: 431: product->Data[15]=(product->Data[15] | status);
 13911  098A  087D               	movf	_product,w
 13912  098B  3E0F               	addlw	15
 13913  098C  0086               	movwf	6
 13914  098D  3001               	movlw	1	; select bank2/3
 13915  098E  0087               	movwf	7
 13916  098F  0801               	movf	1,w
 13917  0990  0460               	iorwf	setRF_DimmerLights@status,w
 13918  0991  00DE               	movwf	??_setRF_DimmerLights
 13919  0992  087D               	movf	_product,w
 13920  0993  3E0F               	addlw	15
 13921  0994  0086               	movwf	6
 13922  0995  3001               	movlw	1	; select bank2/3
 13923  0996  0087               	movwf	7
 13924  0997  085E               	movf	??_setRF_DimmerLights,w
 13925  0998  0081               	movwf	1
 13926                           
 13927                           ;RF_Control_B1.c: 432: } else {
 13928  0999  0008               	return
 13929  099A                     l5556:	
 13930                           
 13931                           ;RF_Control_B1.c: 433: product->Data[15]=(product->Data[15]&(~status));
 13932  099A  087D               	movf	_product,w
 13933  099B  3E0F               	addlw	15
 13934  099C  0086               	movwf	6
 13935  099D  3001               	movlw	1	; select bank2/3
 13936  099E  0087               	movwf	7
 13937  099F  0960               	comf	setRF_DimmerLights@status,w
 13938  09A0  0501               	andwf	1,w
 13939  09A1  00DE               	movwf	??_setRF_DimmerLights
 13940  09A2  087D               	movf	_product,w
 13941  09A3  3E0F               	addlw	15
 13942  09A4  0086               	movwf	6
 13943  09A5  3001               	movlw	1	; select bank2/3
 13944  09A6  0087               	movwf	7
 13945  09A7  085E               	movf	??_setRF_DimmerLights,w
 13946  09A8  0081               	movwf	1
 13947  09A9  0008               	return
 13948  09AA                     __end_of_setRF_DimmerLights:	
 13949                           
 13950                           	psect	text87
 13951  14BA                     __ptext87:	
 13952 ;; *************** function _setPercentValue *****************
 13953 ;; Defined at:
 13954 ;;		line 786 in file "../src/Dimmer_B1.c"
 13955 ;; Parameters:    Size  Location     Type
 13956 ;;  value           1    wreg     unsigned char 
 13957 ;; Auto vars:     Size  Location     Type
 13958 ;;  value           1   57[BANK0 ] unsigned char 
 13959 ;;  i               3   58[BANK0 ] float 
 13960 ;; Return value:  Size  Location     Type
 13961 ;;                  1    wreg      unsigned char 
 13962 ;; Registers used:
 13963 ;;		wreg, status,2, status,0, pclath, cstack
 13964 ;; Tracked objects:
 13965 ;;		On entry : 0/0
 13966 ;;		On exit  : 0/0
 13967 ;;		Unchanged: 0/0
 13968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;Total ram usage:        4 bytes
 13974 ;; Hardware stack levels used:    1
 13975 ;; Hardware stack levels required when called:    7
 13976 ;; This function calls:
 13977 ;;		___awtoft
 13978 ;;		___ftdiv
 13979 ;;		___fttol
 13980 ;; This function is called by:
 13981 ;;		_Flash_Memory_Initialization
 13982 ;;		_setRF_DimmerLights
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           
 13987                           ;psect for function _setPercentValue
 13988  14BA                     _setPercentValue:	
 13989                           
 13990                           ;incstack = 0
 13991                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13992                           ;setPercentValue@value stored from wreg
 13993  14BA  0020               	movlb	0	; select bank0
 13994  14BB  00D9               	movwf	setPercentValue@value
 13995                           
 13996                           ;Dimmer_B1.c: 788: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 13997  14BC  3000               	movlw	0
 13998  14BD  00DA               	movwf	setPercentValue@i
 13999  14BE  30E0               	movlw	224
 14000  14BF  00DB               	movwf	setPercentValue@i+1
 14001  14C0  3041               	movlw	65
 14002  14C1  00DC               	movwf	setPercentValue@i+2
 14003                           
 14004                           ;Dimmer_B1.c: 789: i /= 100;
 14005  14C2  3000               	movlw	0
 14006  14C3  00AE               	movwf	___ftdiv@f2
 14007  14C4  30C8               	movlw	200
 14008  14C5  00AF               	movwf	___ftdiv@f2+1
 14009  14C6  3042               	movlw	66
 14010  14C7  00B0               	movwf	___ftdiv@f2+2
 14011  14C8  085A               	movf	setPercentValue@i,w
 14012  14C9  00B1               	movwf	___ftdiv@f1
 14013  14CA  085B               	movf	setPercentValue@i+1,w
 14014  14CB  00B2               	movwf	___ftdiv@f1+1
 14015  14CC  085C               	movf	setPercentValue@i+2,w
 14016  14CD  00B3               	movwf	___ftdiv@f1+2
 14017  14CE  318E  26A4  3194   	fcall	___ftdiv
 14018  14D1  0020               	movlb	0	; select bank0
 14019  14D2  082E               	movf	?___ftdiv,w
 14020  14D3  00DA               	movwf	setPercentValue@i
 14021  14D4  082F               	movf	?___ftdiv+1,w
 14022  14D5  00DB               	movwf	setPercentValue@i+1
 14023  14D6  0830               	movf	?___ftdiv+2,w
 14024  14D7  00DC               	movwf	setPercentValue@i+2
 14025                           
 14026                           ;Dimmer_B1.c: 790: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14027  14D8  0859               	movf	setPercentValue@value,w
 14028  14D9  3EE0               	addlw	224
 14029  14DA  00A8               	movwf	___awtoft@c
 14030  14DB  30FF               	movlw	255
 14031  14DC  1803               	skipnc
 14032  14DD  3000               	movlw	0
 14033  14DE  00A9               	movwf	___awtoft@c+1
 14034  14DF  3190  2095  3194   	fcall	___awtoft
 14035  14E2  0020               	movlb	0	; select bank0
 14036  14E3  0828               	movf	?___awtoft,w
 14037  14E4  00B1               	movwf	___ftdiv@f1
 14038  14E5  0829               	movf	?___awtoft+1,w
 14039  14E6  00B2               	movwf	___ftdiv@f1+1
 14040  14E7  082A               	movf	?___awtoft+2,w
 14041  14E8  00B3               	movwf	___ftdiv@f1+2
 14042  14E9  085A               	movf	setPercentValue@i,w
 14043  14EA  00AE               	movwf	___ftdiv@f2
 14044  14EB  085B               	movf	setPercentValue@i+1,w
 14045  14EC  00AF               	movwf	___ftdiv@f2+1
 14046  14ED  085C               	movf	setPercentValue@i+2,w
 14047  14EE  00B0               	movwf	___ftdiv@f2+2
 14048  14EF  318E  26A4  3194   	fcall	___ftdiv
 14049  14F2  0020               	movlb	0	; select bank0
 14050  14F3  082E               	movf	?___ftdiv,w
 14051  14F4  00CB               	movwf	___fttol@f1
 14052  14F5  082F               	movf	?___ftdiv+1,w
 14053  14F6  00CC               	movwf	___fttol@f1+1
 14054  14F7  0830               	movf	?___ftdiv+2,w
 14055  14F8  00CD               	movwf	___fttol@f1+2
 14056  14F9  318C  2464         	fcall	___fttol
 14057  14FB  0020               	movlb	0	; select bank0
 14058  14FC  034B               	decf	?___fttol,w
 14059  14FD  3AFF               	xorlw	255
 14060  14FE  3E64               	addlw	100
 14061  14FF  0008               	return
 14062  1500                     __end_of_setPercentValue:	
 14063                           
 14064                           	psect	text88
 14065  0C64                     __ptext88:	
 14066 ;; *************** function ___fttol *****************
 14067 ;; Defined at:
 14068 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;  f1              3   43[BANK0 ] float 
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  lval            4   52[BANK0 ] unsigned long 
 14073 ;;  exp1            1   56[BANK0 ] unsigned char 
 14074 ;;  sign1           1   51[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  4   43[BANK0 ] long 
 14077 ;; Registers used:
 14078 ;;		wreg, status,2, status,0
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:       14 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    5
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_getPercentValue
 14095 ;;		_setPercentValue
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           
 14100                           ;psect for function ___fttol
 14101  0C64                     ___fttol:	
 14102                           
 14103                           ;incstack = 0
 14104                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14105  0C64  0020               	movlb	0	; select bank0
 14106  0C65  084B               	movf	___fttol@f1,w
 14107  0C66  00CF               	movwf	??___fttol
 14108  0C67  084C               	movf	___fttol@f1+1,w
 14109  0C68  00D0               	movwf	??___fttol+1
 14110  0C69  084D               	movf	___fttol@f1+2,w
 14111  0C6A  00D1               	movwf	??___fttol+2
 14112  0C6B  1003               	clrc
 14113  0C6C  0D50               	rlf	??___fttol+1,w
 14114  0C6D  0D51               	rlf	??___fttol+2,w
 14115  0C6E  00D2               	movwf	??___fttol+3
 14116  0C6F  0852               	movf	??___fttol+3,w
 14117  0C70  00D8               	movwf	___fttol@exp1
 14118  0C71  08D8               	movf	___fttol@exp1,f
 14119  0C72  1D03               	skipz
 14120  0C73  2C7D               	goto	l5350
 14121  0C74  3000               	movlw	0
 14122  0C75  00CE               	movwf	?___fttol+3
 14123  0C76  3000               	movlw	0
 14124  0C77  00CD               	movwf	?___fttol+2
 14125  0C78  3000               	movlw	0
 14126  0C79  00CC               	movwf	?___fttol+1
 14127  0C7A  3000               	movlw	0
 14128  0C7B  00CB               	movwf	?___fttol
 14129  0C7C  0008               	return
 14130  0C7D                     l5350:	
 14131  0C7D  084B               	movf	___fttol@f1,w
 14132  0C7E  00CF               	movwf	??___fttol
 14133  0C7F  084C               	movf	___fttol@f1+1,w
 14134  0C80  00D0               	movwf	??___fttol+1
 14135  0C81  084D               	movf	___fttol@f1+2,w
 14136  0C82  00D1               	movwf	??___fttol+2
 14137  0C83  3017               	movlw	23
 14138  0C84                     u3765:	
 14139  0C84  36D1               	lsrf	??___fttol+2,f
 14140  0C85  0CD0               	rrf	??___fttol+1,f
 14141  0C86  0CCF               	rrf	??___fttol,f
 14142  0C87  0B89               	decfsz	9,f
 14143  0C88  2C84               	goto	u3765
 14144  0C89  084F               	movf	??___fttol,w
 14145  0C8A  00D2               	movwf	??___fttol+3
 14146  0C8B  0852               	movf	??___fttol+3,w
 14147  0C8C  00D3               	movwf	___fttol@sign1
 14148  0C8D  17CC               	bsf	___fttol@f1+1,7
 14149  0C8E  30FF               	movlw	255
 14150  0C8F  05CB               	andwf	___fttol@f1,f
 14151  0C90  30FF               	movlw	255
 14152  0C91  05CC               	andwf	___fttol@f1+1,f
 14153  0C92  3000               	movlw	0
 14154  0C93  05CD               	andwf	___fttol@f1+2,f
 14155  0C94  084B               	movf	___fttol@f1,w
 14156  0C95  00D4               	movwf	___fttol@lval
 14157  0C96  084C               	movf	___fttol@f1+1,w
 14158  0C97  00D5               	movwf	___fttol@lval+1
 14159  0C98  084D               	movf	___fttol@f1+2,w
 14160  0C99  00D6               	movwf	___fttol@lval+2
 14161  0C9A  01D7               	clrf	___fttol@lval+3
 14162  0C9B  308E               	movlw	142
 14163  0C9C  02D8               	subwf	___fttol@exp1,f
 14164  0C9D  1FD8               	btfss	___fttol@exp1,7
 14165  0C9E  2CBB               	goto	l5370
 14166  0C9F  0858               	movf	___fttol@exp1,w
 14167  0CA0  3A80               	xorlw	128
 14168  0CA1  3E8F               	addlw	143
 14169  0CA2  1803               	skipnc
 14170  0CA3  2CAD               	goto	l5368
 14171  0CA4  3000               	movlw	0
 14172  0CA5  00CE               	movwf	?___fttol+3
 14173  0CA6  3000               	movlw	0
 14174  0CA7  00CD               	movwf	?___fttol+2
 14175  0CA8  3000               	movlw	0
 14176  0CA9  00CC               	movwf	?___fttol+1
 14177  0CAA  3000               	movlw	0
 14178  0CAB  00CB               	movwf	?___fttol
 14179  0CAC  0008               	return
 14180  0CAD                     l5368:	
 14181  0CAD  3001               	movlw	1
 14182  0CAE                     u3795:	
 14183  0CAE  36D7               	lsrf	___fttol@lval+3,f
 14184  0CAF  0CD6               	rrf	___fttol@lval+2,f
 14185  0CB0  0CD5               	rrf	___fttol@lval+1,f
 14186  0CB1  0CD4               	rrf	___fttol@lval,f
 14187  0CB2  0B89               	decfsz	9,f
 14188  0CB3  2CAE               	goto	u3795
 14189  0CB4  3001               	movlw	1
 14190  0CB5  00CF               	movwf	??___fttol
 14191  0CB6  084F               	movf	??___fttol,w
 14192  0CB7  07D8               	addwf	___fttol@exp1,f
 14193  0CB8  1903               	btfsc	3,2
 14194  0CB9  2CD4               	goto	l5380
 14195  0CBA  2CAD               	goto	l5368
 14196  0CBB                     l5370:	
 14197  0CBB  3018               	movlw	24
 14198  0CBC  0258               	subwf	___fttol@exp1,w
 14199  0CBD  1C03               	skipc
 14200  0CBE  2CD1               	goto	l5378
 14201  0CBF  3000               	movlw	0
 14202  0CC0  00CE               	movwf	?___fttol+3
 14203  0CC1  3000               	movlw	0
 14204  0CC2  00CD               	movwf	?___fttol+2
 14205  0CC3  3000               	movlw	0
 14206  0CC4  00CC               	movwf	?___fttol+1
 14207  0CC5  3000               	movlw	0
 14208  0CC6  00CB               	movwf	?___fttol
 14209  0CC7  0008               	return
 14210  0CC8                     l5376:	
 14211  0CC8  3001               	movlw	1
 14212  0CC9                     u3825:	
 14213  0CC9  35D4               	lslf	___fttol@lval,f
 14214  0CCA  0DD5               	rlf	___fttol@lval+1,f
 14215  0CCB  0DD6               	rlf	___fttol@lval+2,f
 14216  0CCC  0DD7               	rlf	___fttol@lval+3,f
 14217  0CCD  0B89               	decfsz	9,f
 14218  0CCE  2CC9               	goto	u3825
 14219  0CCF  3001               	movlw	1
 14220  0CD0  02D8               	subwf	___fttol@exp1,f
 14221  0CD1                     l5378:	
 14222  0CD1  08D8               	movf	___fttol@exp1,f
 14223  0CD2  1D03               	skipz
 14224  0CD3  2CC8               	goto	l5376
 14225  0CD4                     l5380:	
 14226  0CD4  0853               	movf	___fttol@sign1,w
 14227  0CD5  1903               	btfsc	3,2
 14228  0CD6  2CE2               	goto	l5384
 14229  0CD7  09D4               	comf	___fttol@lval,f
 14230  0CD8  09D5               	comf	___fttol@lval+1,f
 14231  0CD9  09D6               	comf	___fttol@lval+2,f
 14232  0CDA  09D7               	comf	___fttol@lval+3,f
 14233  0CDB  0AD4               	incf	___fttol@lval,f
 14234  0CDC  1903               	skipnz
 14235  0CDD  0AD5               	incf	___fttol@lval+1,f
 14236  0CDE  1903               	skipnz
 14237  0CDF  0AD6               	incf	___fttol@lval+2,f
 14238  0CE0  1903               	skipnz
 14239  0CE1  0AD7               	incf	___fttol@lval+3,f
 14240  0CE2                     l5384:	
 14241  0CE2  0857               	movf	___fttol@lval+3,w
 14242  0CE3  00CE               	movwf	?___fttol+3
 14243  0CE4  0856               	movf	___fttol@lval+2,w
 14244  0CE5  00CD               	movwf	?___fttol+2
 14245  0CE6  0855               	movf	___fttol@lval+1,w
 14246  0CE7  00CC               	movwf	?___fttol+1
 14247  0CE8  0854               	movf	___fttol@lval,w
 14248  0CE9  00CB               	movwf	?___fttol
 14249  0CEA  0008               	return
 14250  0CEB                     __end_of___fttol:	
 14251                           
 14252                           	psect	text89
 14253  0EA4                     __ptext89:	
 14254 ;; *************** function ___ftdiv *****************
 14255 ;; Defined at:
 14256 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  f2              3   14[BANK0 ] float 
 14259 ;;  f1              3   17[BANK0 ] float 
 14260 ;; Auto vars:     Size  Location     Type
 14261 ;;  f3              3   25[BANK0 ] float 
 14262 ;;  sign            1   29[BANK0 ] unsigned char 
 14263 ;;  exp             1   28[BANK0 ] unsigned char 
 14264 ;;  cntr            1   24[BANK0 ] unsigned char 
 14265 ;; Return value:  Size  Location     Type
 14266 ;;                  3   14[BANK0 ] float 
 14267 ;; Registers used:
 14268 ;;		wreg, status,2, status,0, pclath, cstack
 14269 ;; Tracked objects:
 14270 ;;		On entry : 0/0
 14271 ;;		On exit  : 0/0
 14272 ;;		Unchanged: 0/0
 14273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;Total ram usage:       16 bytes
 14279 ;; Hardware stack levels used:    1
 14280 ;; Hardware stack levels required when called:    6
 14281 ;; This function calls:
 14282 ;;		___ftpack
 14283 ;; This function is called by:
 14284 ;;		_getPercentValue
 14285 ;;		_setPercentValue
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289                           
 14290                           ;psect for function ___ftdiv
 14291  0EA4                     ___ftdiv:	
 14292                           
 14293                           ;incstack = 0
 14294                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14295  0EA4  0020               	movlb	0	; select bank0
 14296  0EA5  0831               	movf	___ftdiv@f1,w
 14297  0EA6  00B4               	movwf	??___ftdiv
 14298  0EA7  0832               	movf	___ftdiv@f1+1,w
 14299  0EA8  00B5               	movwf	??___ftdiv+1
 14300  0EA9  0833               	movf	___ftdiv@f1+2,w
 14301  0EAA  00B6               	movwf	??___ftdiv+2
 14302  0EAB  1003               	clrc
 14303  0EAC  0D35               	rlf	??___ftdiv+1,w
 14304  0EAD  0D36               	rlf	??___ftdiv+2,w
 14305  0EAE  00B7               	movwf	??___ftdiv+3
 14306  0EAF  0837               	movf	??___ftdiv+3,w
 14307  0EB0  00BC               	movwf	___ftdiv@exp
 14308  0EB1  08BC               	movf	___ftdiv@exp,f
 14309  0EB2  1D03               	skipz
 14310  0EB3  2EBB               	goto	l5258
 14311  0EB4  3000               	movlw	0
 14312  0EB5  00AE               	movwf	?___ftdiv
 14313  0EB6  3000               	movlw	0
 14314  0EB7  00AF               	movwf	?___ftdiv+1
 14315  0EB8  3000               	movlw	0
 14316  0EB9  00B0               	movwf	?___ftdiv+2
 14317  0EBA  0008               	return
 14318  0EBB                     l5258:	
 14319  0EBB  082E               	movf	___ftdiv@f2,w
 14320  0EBC  00B4               	movwf	??___ftdiv
 14321  0EBD  082F               	movf	___ftdiv@f2+1,w
 14322  0EBE  00B5               	movwf	??___ftdiv+1
 14323  0EBF  0830               	movf	___ftdiv@f2+2,w
 14324  0EC0  00B6               	movwf	??___ftdiv+2
 14325  0EC1  1003               	clrc
 14326  0EC2  0D35               	rlf	??___ftdiv+1,w
 14327  0EC3  0D36               	rlf	??___ftdiv+2,w
 14328  0EC4  00B7               	movwf	??___ftdiv+3
 14329  0EC5  0837               	movf	??___ftdiv+3,w
 14330  0EC6  00BD               	movwf	___ftdiv@sign
 14331  0EC7  08BD               	movf	___ftdiv@sign,f
 14332  0EC8  1D03               	skipz
 14333  0EC9  2ED1               	goto	l5264
 14334  0ECA  3000               	movlw	0
 14335  0ECB  00AE               	movwf	?___ftdiv
 14336  0ECC  3000               	movlw	0
 14337  0ECD  00AF               	movwf	?___ftdiv+1
 14338  0ECE  3000               	movlw	0
 14339  0ECF  00B0               	movwf	?___ftdiv+2
 14340  0ED0  0008               	return
 14341  0ED1                     l5264:	
 14342  0ED1  3000               	movlw	0
 14343  0ED2  00B9               	movwf	___ftdiv@f3
 14344  0ED3  3000               	movlw	0
 14345  0ED4  00BA               	movwf	___ftdiv@f3+1
 14346  0ED5  3000               	movlw	0
 14347  0ED6  00BB               	movwf	___ftdiv@f3+2
 14348  0ED7  3089               	movlw	137
 14349  0ED8  073D               	addwf	___ftdiv@sign,w
 14350  0ED9  00B4               	movwf	??___ftdiv
 14351  0EDA  0834               	movf	??___ftdiv,w
 14352  0EDB  02BC               	subwf	___ftdiv@exp,f
 14353  0EDC  0831               	movf	___ftdiv@f1,w
 14354  0EDD  00B4               	movwf	??___ftdiv
 14355  0EDE  0832               	movf	___ftdiv@f1+1,w
 14356  0EDF  00B5               	movwf	??___ftdiv+1
 14357  0EE0  0833               	movf	___ftdiv@f1+2,w
 14358  0EE1  00B6               	movwf	??___ftdiv+2
 14359  0EE2  3010               	movlw	16
 14360  0EE3                     u3575:	
 14361  0EE3  36B6               	lsrf	??___ftdiv+2,f
 14362  0EE4  0CB5               	rrf	??___ftdiv+1,f
 14363  0EE5  0CB4               	rrf	??___ftdiv,f
 14364  0EE6  0B89               	decfsz	9,f
 14365  0EE7  2EE3               	goto	u3575
 14366  0EE8  0834               	movf	??___ftdiv,w
 14367  0EE9  00B7               	movwf	??___ftdiv+3
 14368  0EEA  0837               	movf	??___ftdiv+3,w
 14369  0EEB  00BD               	movwf	___ftdiv@sign
 14370  0EEC  082E               	movf	___ftdiv@f2,w
 14371  0EED  00B4               	movwf	??___ftdiv
 14372  0EEE  082F               	movf	___ftdiv@f2+1,w
 14373  0EEF  00B5               	movwf	??___ftdiv+1
 14374  0EF0  0830               	movf	___ftdiv@f2+2,w
 14375  0EF1  00B6               	movwf	??___ftdiv+2
 14376  0EF2  3010               	movlw	16
 14377  0EF3                     u3585:	
 14378  0EF3  36B6               	lsrf	??___ftdiv+2,f
 14379  0EF4  0CB5               	rrf	??___ftdiv+1,f
 14380  0EF5  0CB4               	rrf	??___ftdiv,f
 14381  0EF6  0B89               	decfsz	9,f
 14382  0EF7  2EF3               	goto	u3585
 14383  0EF8  0834               	movf	??___ftdiv,w
 14384  0EF9  00B7               	movwf	??___ftdiv+3
 14385  0EFA  0837               	movf	??___ftdiv+3,w
 14386  0EFB  06BD               	xorwf	___ftdiv@sign,f
 14387  0EFC  3080               	movlw	128
 14388  0EFD  00B4               	movwf	??___ftdiv
 14389  0EFE  0834               	movf	??___ftdiv,w
 14390  0EFF  05BD               	andwf	___ftdiv@sign,f
 14391  0F00  17B2               	bsf	___ftdiv@f1+1,7
 14392  0F01  30FF               	movlw	255
 14393  0F02  05B1               	andwf	___ftdiv@f1,f
 14394  0F03  30FF               	movlw	255
 14395  0F04  05B2               	andwf	___ftdiv@f1+1,f
 14396  0F05  3000               	movlw	0
 14397  0F06  05B3               	andwf	___ftdiv@f1+2,f
 14398  0F07  17AF               	bsf	___ftdiv@f2+1,7
 14399  0F08  30FF               	movlw	255
 14400  0F09  05AE               	andwf	___ftdiv@f2,f
 14401  0F0A  30FF               	movlw	255
 14402  0F0B  05AF               	andwf	___ftdiv@f2+1,f
 14403  0F0C  3000               	movlw	0
 14404  0F0D  05B0               	andwf	___ftdiv@f2+2,f
 14405  0F0E  3018               	movlw	24
 14406  0F0F  00B4               	movwf	??___ftdiv
 14407  0F10  0834               	movf	??___ftdiv,w
 14408  0F11  00B8               	movwf	___ftdiv@cntr
 14409  0F12                     l5278:	
 14410  0F12  3001               	movlw	1
 14411  0F13                     u3595:	
 14412  0F13  35B9               	lslf	___ftdiv@f3,f
 14413  0F14  0DBA               	rlf	___ftdiv@f3+1,f
 14414  0F15  0DBB               	rlf	___ftdiv@f3+2,f
 14415  0F16  0B89               	decfsz	9,f
 14416  0F17  2F13               	goto	u3595
 14417  0F18  0830               	movf	___ftdiv@f2+2,w
 14418  0F19  0233               	subwf	___ftdiv@f1+2,w
 14419  0F1A  1D03               	skipz
 14420  0F1B  2F22               	goto	u3605
 14421  0F1C  082F               	movf	___ftdiv@f2+1,w
 14422  0F1D  0232               	subwf	___ftdiv@f1+1,w
 14423  0F1E  1D03               	skipz
 14424  0F1F  2F22               	goto	u3605
 14425  0F20  082E               	movf	___ftdiv@f2,w
 14426  0F21  0231               	subwf	___ftdiv@f1,w
 14427  0F22                     u3605:	
 14428  0F22  1C03               	skipc
 14429  0F23  2F2B               	goto	l5286
 14430  0F24  082E               	movf	___ftdiv@f2,w
 14431  0F25  02B1               	subwf	___ftdiv@f1,f
 14432  0F26  082F               	movf	___ftdiv@f2+1,w
 14433  0F27  3BB2               	subwfb	___ftdiv@f1+1,f
 14434  0F28  0830               	movf	___ftdiv@f2+2,w
 14435  0F29  3BB3               	subwfb	___ftdiv@f1+2,f
 14436  0F2A  1439               	bsf	___ftdiv@f3,0
 14437  0F2B                     l5286:	
 14438  0F2B  3001               	movlw	1
 14439  0F2C                     u3615:	
 14440  0F2C  35B1               	lslf	___ftdiv@f1,f
 14441  0F2D  0DB2               	rlf	___ftdiv@f1+1,f
 14442  0F2E  0DB3               	rlf	___ftdiv@f1+2,f
 14443  0F2F  0B89               	decfsz	9,f
 14444  0F30  2F2C               	goto	u3615
 14445  0F31  3001               	movlw	1
 14446  0F32  02B8               	subwf	___ftdiv@cntr,f
 14447  0F33  1D03               	btfss	3,2
 14448  0F34  2F12               	goto	l5278
 14449  0F35  0839               	movf	___ftdiv@f3,w
 14450  0F36  00A0               	movwf	___ftpack@arg
 14451  0F37  083A               	movf	___ftdiv@f3+1,w
 14452  0F38  00A1               	movwf	___ftpack@arg+1
 14453  0F39  083B               	movf	___ftdiv@f3+2,w
 14454  0F3A  00A2               	movwf	___ftpack@arg+2
 14455  0F3B  083C               	movf	___ftdiv@exp,w
 14456  0F3C  00B4               	movwf	??___ftdiv
 14457  0F3D  0834               	movf	??___ftdiv,w
 14458  0F3E  00A3               	movwf	___ftpack@exp
 14459  0F3F  083D               	movf	___ftdiv@sign,w
 14460  0F40  00B5               	movwf	??___ftdiv+1
 14461  0F41  0835               	movf	??___ftdiv+1,w
 14462  0F42  00A4               	movwf	___ftpack@sign
 14463  0F43  3188  20DD         	fcall	___ftpack
 14464  0F45  0020               	movlb	0	; select bank0
 14465  0F46  0820               	movf	?___ftpack,w
 14466  0F47  00AE               	movwf	?___ftdiv
 14467  0F48  0821               	movf	?___ftpack+1,w
 14468  0F49  00AF               	movwf	?___ftdiv+1
 14469  0F4A  0822               	movf	?___ftpack+2,w
 14470  0F4B  00B0               	movwf	?___ftdiv+2
 14471  0F4C  0008               	return
 14472  0F4D                     __end_of___ftdiv:	
 14473                           
 14474                           	psect	text90
 14475  1095                     __ptext90:	
 14476 ;; *************** function ___awtoft *****************
 14477 ;; Defined at:
 14478 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;  c               2    8[BANK0 ] int 
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  sign            1   13[BANK0 ] unsigned char 
 14483 ;; Return value:  Size  Location     Type
 14484 ;;                  3    8[BANK0 ] float 
 14485 ;; Registers used:
 14486 ;;		wreg, status,2, status,0, pclath, cstack
 14487 ;; Tracked objects:
 14488 ;;		On entry : 0/0
 14489 ;;		On exit  : 0/0
 14490 ;;		Unchanged: 0/0
 14491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14492 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;Total ram usage:        6 bytes
 14497 ;; Hardware stack levels used:    1
 14498 ;; Hardware stack levels required when called:    6
 14499 ;; This function calls:
 14500 ;;		___ftpack
 14501 ;; This function is called by:
 14502 ;;		_getPercentValue
 14503 ;;		_setPercentValue
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           
 14508                           ;psect for function ___awtoft
 14509  1095                     ___awtoft:	
 14510                           
 14511                           ;incstack = 0
 14512                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14513  1095  0020               	movlb	0	; select bank0
 14514  1096  01AD               	clrf	___awtoft@sign
 14515  1097  1FA9               	btfss	___awtoft@c+1,7
 14516  1098  28A0               	goto	l5176
 14517  1099  09A8               	comf	___awtoft@c,f
 14518  109A  09A9               	comf	___awtoft@c+1,f
 14519  109B  0AA8               	incf	___awtoft@c,f
 14520  109C  1903               	skipnz
 14521  109D  0AA9               	incf	___awtoft@c+1,f
 14522  109E  01AD               	clrf	___awtoft@sign
 14523  109F  0AAD               	incf	___awtoft@sign,f
 14524  10A0                     l5176:	
 14525  10A0  0828               	movf	___awtoft@c,w
 14526  10A1  00A0               	movwf	___ftpack@arg
 14527  10A2  0829               	movf	___awtoft@c+1,w
 14528  10A3  00A1               	movwf	___ftpack@arg+1
 14529  10A4  01A2               	clrf	___ftpack@arg+2
 14530  10A5  308E               	movlw	142
 14531  10A6  00AB               	movwf	??___awtoft
 14532  10A7  082B               	movf	??___awtoft,w
 14533  10A8  00A3               	movwf	___ftpack@exp
 14534  10A9  082D               	movf	___awtoft@sign,w
 14535  10AA  00AC               	movwf	??___awtoft+1
 14536  10AB  082C               	movf	??___awtoft+1,w
 14537  10AC  00A4               	movwf	___ftpack@sign
 14538  10AD  3188  20DD         	fcall	___ftpack
 14539  10AF  0020               	movlb	0	; select bank0
 14540  10B0  0820               	movf	?___ftpack,w
 14541  10B1  00A8               	movwf	?___awtoft
 14542  10B2  0821               	movf	?___ftpack+1,w
 14543  10B3  00A9               	movwf	?___awtoft+1
 14544  10B4  0822               	movf	?___ftpack+2,w
 14545  10B5  00AA               	movwf	?___awtoft+2
 14546  10B6  0008               	return
 14547  10B7                     __end_of___awtoft:	
 14548                           
 14549                           	psect	text91
 14550  08DD                     __ptext91:	
 14551 ;; *************** function ___ftpack *****************
 14552 ;; Defined at:
 14553 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14554 ;; Parameters:    Size  Location     Type
 14555 ;;  arg             3    0[BANK0 ] unsigned um
 14556 ;;  exp             1    3[BANK0 ] unsigned char 
 14557 ;;  sign            1    4[BANK0 ] unsigned char 
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;		None
 14560 ;; Return value:  Size  Location     Type
 14561 ;;                  3    0[BANK0 ] float 
 14562 ;; Registers used:
 14563 ;;		wreg, status,2, status,0
 14564 ;; Tracked objects:
 14565 ;;		On entry : 0/0
 14566 ;;		On exit  : 0/0
 14567 ;;		Unchanged: 0/0
 14568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14569 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;Total ram usage:        8 bytes
 14574 ;; Hardware stack levels used:    1
 14575 ;; Hardware stack levels required when called:    5
 14576 ;; This function calls:
 14577 ;;		Nothing
 14578 ;; This function is called by:
 14579 ;;		___awtoft
 14580 ;;		___ftadd
 14581 ;;		___ftdiv
 14582 ;;		___ftmul
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           
 14587                           ;psect for function ___ftpack
 14588  08DD                     ___ftpack:	
 14589                           
 14590                           ;incstack = 0
 14591                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14592  08DD  0020               	movlb	0	; select bank0
 14593  08DE  0823               	movf	___ftpack@exp,w
 14594  08DF  1903               	btfsc	3,2
 14595  08E0  28E6               	goto	l5142
 14596  08E1  0822               	movf	___ftpack@arg+2,w
 14597  08E2  0421               	iorwf	___ftpack@arg+1,w
 14598  08E3  0420               	iorwf	___ftpack@arg,w
 14599  08E4  1D03               	skipz
 14600  08E5  28F7               	goto	l5148
 14601  08E6                     l5142:	
 14602  08E6  3000               	movlw	0
 14603  08E7  00A0               	movwf	?___ftpack
 14604  08E8  3000               	movlw	0
 14605  08E9  00A1               	movwf	?___ftpack+1
 14606  08EA  3000               	movlw	0
 14607  08EB  00A2               	movwf	?___ftpack+2
 14608  08EC  0008               	return
 14609  08ED                     l5146:	
 14610  08ED  3001               	movlw	1
 14611  08EE  00A5               	movwf	??___ftpack
 14612  08EF  0825               	movf	??___ftpack,w
 14613  08F0  07A3               	addwf	___ftpack@exp,f
 14614  08F1  3001               	movlw	1
 14615  08F2                     u3225:	
 14616  08F2  36A2               	lsrf	___ftpack@arg+2,f
 14617  08F3  0CA1               	rrf	___ftpack@arg+1,f
 14618  08F4  0CA0               	rrf	___ftpack@arg,f
 14619  08F5  0B89               	decfsz	9,f
 14620  08F6  28F2               	goto	u3225
 14621  08F7                     l5148:	
 14622  08F7  30FE               	movlw	254
 14623  08F8  0522               	andwf	___ftpack@arg+2,w
 14624  08F9  1903               	btfsc	3,2
 14625  08FA  2910               	goto	l2876
 14626  08FB  28ED               	goto	l5146
 14627  08FC                     l5150:	
 14628  08FC  3001               	movlw	1
 14629  08FD  00A5               	movwf	??___ftpack
 14630  08FE  0825               	movf	??___ftpack,w
 14631  08FF  07A3               	addwf	___ftpack@exp,f
 14632  0900  3001               	movlw	1
 14633  0901  07A0               	addwf	___ftpack@arg,f
 14634  0902  3000               	movlw	0
 14635  0903  1803               	skipnc
 14636  0904  3001               	movlw	1
 14637  0905  07A1               	addwf	___ftpack@arg+1,f
 14638  0906  3000               	movlw	0
 14639  0907  1803               	skipnc
 14640  0908  3001               	movlw	1
 14641  0909  07A2               	addwf	___ftpack@arg+2,f
 14642  090A  3001               	movlw	1
 14643  090B                     u3245:	
 14644  090B  36A2               	lsrf	___ftpack@arg+2,f
 14645  090C  0CA1               	rrf	___ftpack@arg+1,f
 14646  090D  0CA0               	rrf	___ftpack@arg,f
 14647  090E  0B89               	decfsz	9,f
 14648  090F  290B               	goto	u3245
 14649  0910                     l2876:	
 14650  0910  30FF               	movlw	255
 14651  0911  0522               	andwf	___ftpack@arg+2,w
 14652  0912  1903               	btfsc	3,2
 14653  0913  291D               	goto	l5158
 14654  0914  28FC               	goto	l5150
 14655  0915                     l5156:	
 14656  0915  3001               	movlw	1
 14657  0916  02A3               	subwf	___ftpack@exp,f
 14658  0917  3001               	movlw	1
 14659  0918                     u3265:	
 14660  0918  35A0               	lslf	___ftpack@arg,f
 14661  0919  0DA1               	rlf	___ftpack@arg+1,f
 14662  091A  0DA2               	rlf	___ftpack@arg+2,f
 14663  091B  0B89               	decfsz	9,f
 14664  091C  2918               	goto	u3265
 14665  091D                     l5158:	
 14666  091D  1FA1               	btfss	___ftpack@arg+1,7
 14667  091E  2915               	goto	l5156
 14668  091F  1823               	btfsc	___ftpack@exp,0
 14669  0920  2927               	goto	l2882
 14670  0921  30FF               	movlw	255
 14671  0922  05A0               	andwf	___ftpack@arg,f
 14672  0923  307F               	movlw	127
 14673  0924  05A1               	andwf	___ftpack@arg+1,f
 14674  0925  30FF               	movlw	255
 14675  0926  05A2               	andwf	___ftpack@arg+2,f
 14676  0927                     l2882:	
 14677  0927  1003               	clrc
 14678  0928  0CA3               	rrf	___ftpack@exp,f
 14679  0929  0823               	movf	___ftpack@exp,w
 14680  092A  00A5               	movwf	??___ftpack
 14681  092B  01A6               	clrf	??___ftpack+1
 14682  092C  01A7               	clrf	??___ftpack+2
 14683  092D  3010               	movlw	16
 14684  092E                     u3295:	
 14685  092E  35A5               	lslf	??___ftpack,f
 14686  092F  0DA6               	rlf	??___ftpack+1,f
 14687  0930  0DA7               	rlf	??___ftpack+2,f
 14688  0931  0B89               	decfsz	9,f
 14689  0932  292E               	goto	u3295
 14690  0933  0825               	movf	??___ftpack,w
 14691  0934  04A0               	iorwf	___ftpack@arg,f
 14692  0935  0826               	movf	??___ftpack+1,w
 14693  0936  04A1               	iorwf	___ftpack@arg+1,f
 14694  0937  0827               	movf	??___ftpack+2,w
 14695  0938  04A2               	iorwf	___ftpack@arg+2,f
 14696  0939  0824               	movf	___ftpack@sign,w
 14697  093A  1903               	btfsc	3,2
 14698  093B  0008               	return
 14699  093C  17A2               	bsf	___ftpack@arg+2,7
 14700  093D  0008               	return
 14701  093E                     __end_of___ftpack:	
 14702                           
 14703                           	psect	text92
 14704  1D93                     __ptext92:	
 14705 ;; *************** function _setRFSW_Status *****************
 14706 ;; Defined at:
 14707 ;;		line 400 in file "../src/RF_Control_B1.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;  sw              1    wreg     unsigned char 
 14710 ;;  command         1    2[BANK0 ] unsigned char 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  sw              1    3[BANK0 ] unsigned char 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;		None               void
 14715 ;; Registers used:
 14716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14722 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;Total ram usage:        2 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    6
 14729 ;; This function calls:
 14730 ;;		_RfSWPointSelect
 14731 ;; This function is called by:
 14732 ;;		_DlyOff_Main
 14733 ;;		_setDimmerLights_ERROR
 14734 ;;		_setControl_Lights_Table
 14735 ;;		_Sw_DimmerOnFunc
 14736 ;;		_Sw_DimmerAdjFunc
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           
 14741                           ;psect for function _setRFSW_Status
 14742  1D93                     _setRFSW_Status:	
 14743                           
 14744                           ;incstack = 0
 14745                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14746                           ;setRFSW_Status@sw stored from wreg
 14747  1D93  0020               	movlb	0	; select bank0
 14748  1D94  00A3               	movwf	setRFSW_Status@sw
 14749                           
 14750                           ;RF_Control_B1.c: 401: RfSWPointSelect(sw);
 14751  1D95  0823               	movf	setRFSW_Status@sw,w
 14752  1D96  319D  2513         	fcall	_RfSWPointSelect
 14753                           
 14754                           ;RF_Control_B1.c: 402: RFSW->Status = command;
 14755  1D98  0021               	movlb	1	; select bank1
 14756  1D99  083F               	movf	_RFSW^(0+128),w
 14757  1D9A  0086               	movwf	6
 14758  1D9B  0187               	clrf	7
 14759  1D9C  0020               	movlb	0	; select bank0
 14760  1D9D  0822               	movf	setRFSW_Status@command,w
 14761  1D9E  1001               	bcf	1,0
 14762  1D9F  1D03               	skipz
 14763  1DA0  1401               	bsf	1,0
 14764  1DA1  0008               	return
 14765  1DA2                     __end_of_setRFSW_Status:	
 14766                           
 14767                           	psect	text93
 14768  1D13                     __ptext93:	
 14769 ;; *************** function _RfSWPointSelect *****************
 14770 ;; Defined at:
 14771 ;;		line 335 in file "../src/RF_Control_B1.c"
 14772 ;; Parameters:    Size  Location     Type
 14773 ;;  sw              1    wreg     unsigned char 
 14774 ;; Auto vars:     Size  Location     Type
 14775 ;;  sw              1    1[BANK0 ] unsigned char 
 14776 ;; Return value:  Size  Location     Type
 14777 ;;		None               void
 14778 ;; Registers used:
 14779 ;;		wreg
 14780 ;; Tracked objects:
 14781 ;;		On entry : 0/0
 14782 ;;		On exit  : 0/0
 14783 ;;		Unchanged: 0/0
 14784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;Total ram usage:        2 bytes
 14790 ;; Hardware stack levels used:    1
 14791 ;; Hardware stack levels required when called:    5
 14792 ;; This function calls:
 14793 ;;		Nothing
 14794 ;; This function is called by:
 14795 ;;		_setRFSW_Control
 14796 ;;		_setRFSW_AdjControl
 14797 ;;		_setRFSW_Status
 14798 ;; This function uses a non-reentrant model
 14799 ;;
 14800                           
 14801                           
 14802                           ;psect for function _RfSWPointSelect
 14803  1D13                     _RfSWPointSelect:	
 14804                           
 14805                           ;incstack = 0
 14806                           ; Regs used in _RfSWPointSelect: [wreg]
 14807                           ;RfSWPointSelect@sw stored from wreg
 14808  1D13  0020               	movlb	0	; select bank0
 14809  1D14  00A1               	movwf	RfSWPointSelect@sw
 14810                           
 14811                           ;RF_Control_B1.c: 337: if (sw == 1) {
 14812  1D15  0821               	movf	RfSWPointSelect@sw,w
 14813  1D16  3A01               	xorlw	1
 14814  1D17  1D03               	skipz
 14815  1D18  0008               	return
 14816                           
 14817                           ;RF_Control_B1.c: 338: RFSW = &RFSW1;
 14818  1D19  30EA               	movlw	_RFSW1& (0+255)
 14819  1D1A  00A0               	movwf	??_RfSWPointSelect
 14820  1D1B  0820               	movf	??_RfSWPointSelect,w
 14821  1D1C  0021               	movlb	1	; select bank1
 14822  1D1D  00BF               	movwf	_RFSW^(0+128)
 14823  1D1E  0008               	return
 14824  1D1F                     __end_of_RfSWPointSelect:	
 14825                           
 14826                           	psect	text94
 14827  1DE0                     __ptext94:	
 14828 ;; *************** function _setDimmerLights_Trigger *****************
 14829 ;; Defined at:
 14830 ;;		line 723 in file "../src/Dimmer_B1.c"
 14831 ;; Parameters:    Size  Location     Type
 14832 ;;  lights          1    wreg     unsigned char 
 14833 ;;  command         1    2[BANK0 ] unsigned char 
 14834 ;; Auto vars:     Size  Location     Type
 14835 ;;  lights          1    3[BANK0 ] unsigned char 
 14836 ;; Return value:  Size  Location     Type
 14837 ;;		None               void
 14838 ;; Registers used:
 14839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14840 ;; Tracked objects:
 14841 ;;		On entry : 0/0
 14842 ;;		On exit  : 0/0
 14843 ;;		Unchanged: 0/0
 14844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14845 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14849 ;;Total ram usage:        2 bytes
 14850 ;; Hardware stack levels used:    1
 14851 ;; Hardware stack levels required when called:    6
 14852 ;; This function calls:
 14853 ;;		_DimmerLightsPointSelect
 14854 ;; This function is called by:
 14855 ;;		_DlyOff_Main
 14856 ;;		_setRFSW_Control
 14857 ;;		_Sw_DimmerOnFunc
 14858 ;;		_Sw_DimmerOffFunc
 14859 ;; This function uses a non-reentrant model
 14860 ;;
 14861                           
 14862                           
 14863                           ;psect for function _setDimmerLights_Trigger
 14864  1DE0                     _setDimmerLights_Trigger:	
 14865                           
 14866                           ;incstack = 0
 14867                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14868                           ;setDimmerLights_Trigger@lights stored from wreg
 14869  1DE0  0020               	movlb	0	; select bank0
 14870  1DE1  00A3               	movwf	setDimmerLights_Trigger@lights
 14871                           
 14872                           ;Dimmer_B1.c: 725: DimmerLightsPointSelect(lights);
 14873  1DE2  0823               	movf	setDimmerLights_Trigger@lights,w
 14874  1DE3  319C  24C1         	fcall	_DimmerLightsPointSelect
 14875                           
 14876                           ;Dimmer_B1.c: 726: DimmerLights->Trigger = command;
 14877  1DE5  0878               	movf	_DimmerLights,w
 14878  1DE6  3E08               	addlw	8
 14879  1DE7  0086               	movwf	6
 14880  1DE8  3001               	movlw	1	; select bank2/3
 14881  1DE9  0087               	movwf	7
 14882  1DEA  0020               	movlb	0	; select bank0
 14883  1DEB  0822               	movf	setDimmerLights_Trigger@command,w
 14884  1DEC  1101               	bcf	1,2
 14885  1DED  1D03               	skipz
 14886  1DEE  1501               	bsf	1,2
 14887  1DEF  0008               	return
 14888  1DF0                     __end_of_setDimmerLights_Trigger:	
 14889                           
 14890                           	psect	text95
 14891  1DD0                     __ptext95:	
 14892 ;; *************** function _setDimmerLights_Switch *****************
 14893 ;; Defined at:
 14894 ;;		line 711 in file "../src/Dimmer_B1.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;  lights          1    wreg     unsigned char 
 14897 ;;  command         1    2[BANK0 ] unsigned char 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;  lights          1    3[BANK0 ] unsigned char 
 14900 ;; Return value:  Size  Location     Type
 14901 ;;		None               void
 14902 ;; Registers used:
 14903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:        2 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    6
 14916 ;; This function calls:
 14917 ;;		_DimmerLightsPointSelect
 14918 ;; This function is called by:
 14919 ;;		_DlyOff_Main
 14920 ;;		_setRFSW_Control
 14921 ;;		_Sw_DimmerOnFunc
 14922 ;;		_Sw_DimmerOffFunc
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           
 14927                           ;psect for function _setDimmerLights_Switch
 14928  1DD0                     _setDimmerLights_Switch:	
 14929                           
 14930                           ;incstack = 0
 14931                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14932                           ;setDimmerLights_Switch@lights stored from wreg
 14933  1DD0  0020               	movlb	0	; select bank0
 14934  1DD1  00A3               	movwf	setDimmerLights_Switch@lights
 14935                           
 14936                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
 14937  1DD2  0823               	movf	setDimmerLights_Switch@lights,w
 14938  1DD3  319C  24C1         	fcall	_DimmerLightsPointSelect
 14939                           
 14940                           ;Dimmer_B1.c: 714: DimmerLights->Switch = command;
 14941  1DD5  0878               	movf	_DimmerLights,w
 14942  1DD6  3E08               	addlw	8
 14943  1DD7  0086               	movwf	6
 14944  1DD8  3001               	movlw	1	; select bank2/3
 14945  1DD9  0087               	movwf	7
 14946  1DDA  0020               	movlb	0	; select bank0
 14947  1DDB  0822               	movf	setDimmerLights_Switch@command,w
 14948  1DDC  1081               	bcf	1,1
 14949  1DDD  1D03               	skipz
 14950  1DDE  1481               	bsf	1,1
 14951  1DDF  0008               	return
 14952  1DE0                     __end_of_setDimmerLights_Switch:	
 14953                           
 14954                           	psect	text96
 14955  1CC1                     __ptext96:	
 14956 ;; *************** function _DimmerLightsPointSelect *****************
 14957 ;; Defined at:
 14958 ;;		line 315 in file "../src/Dimmer_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;  lights          1    wreg     unsigned char 
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  lights          1    1[BANK0 ] unsigned char 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;		None               void
 14965 ;; Registers used:
 14966 ;;		wreg
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        2 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    5
 14979 ;; This function calls:
 14980 ;;		Nothing
 14981 ;; This function is called by:
 14982 ;;		_setDimmerLights_Initialization
 14983 ;;		_setDimmerLights_Main
 14984 ;;		_setDimmerLights_ERROR
 14985 ;;		_setDimmerLights_TriggerERROR
 14986 ;;		_setDimmerLights
 14987 ;;		_setDimmerLights_Adj
 14988 ;;		_setDimmerLights_AdjRF
 14989 ;;		_setDimmerLights_Switch
 14990 ;;		_setDimmerLights_AdjGo
 14991 ;;		_setDimmerLights_Trigger
 14992 ;;		_setDimmerLights_TriggerAdj
 14993 ;;		_setDimmerLights_GO
 14994 ;;		_setDimmerLights_MaxmumValue
 14995 ;;		_setDimmerLights_Clear
 14996 ;; This function uses a non-reentrant model
 14997 ;;
 14998                           
 14999                           
 15000                           ;psect for function _DimmerLightsPointSelect
 15001  1CC1                     _DimmerLightsPointSelect:	
 15002                           
 15003                           ;incstack = 0
 15004                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15005                           ;DimmerLightsPointSelect@lights stored from wreg
 15006  1CC1  0020               	movlb	0	; select bank0
 15007  1CC2  00A1               	movwf	DimmerLightsPointSelect@lights
 15008                           
 15009                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15010  1CC3  0821               	movf	DimmerLightsPointSelect@lights,w
 15011  1CC4  3A01               	xorlw	1
 15012  1CC5  1D03               	skipz
 15013  1CC6  0008               	return
 15014                           
 15015                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15016  1CC7  3030               	movlw	_DimmerLights1& (0+255)
 15017  1CC8  00A0               	movwf	??_DimmerLightsPointSelect
 15018  1CC9  0820               	movf	??_DimmerLightsPointSelect,w
 15019  1CCA  00F8               	movwf	_DimmerLights
 15020  1CCB  0008               	return
 15021  1CCC                     __end_of_DimmerLightsPointSelect:	
 15022                           
 15023                           	psect	text97
 15024  0CEB                     __ptext97:	
 15025 ;; *************** function _setBuz *****************
 15026 ;; Defined at:
 15027 ;;		line 30 in file "../src/Buzzer_B1.c"
 15028 ;; Parameters:    Size  Location     Type
 15029 ;;  count           1    wreg     unsigned char 
 15030 ;;  time            2    9[BANK0 ] int 
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;  count           1   12[BANK0 ] unsigned char 
 15033 ;; Return value:  Size  Location     Type
 15034 ;;		None               void
 15035 ;; Registers used:
 15036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15037 ;; Tracked objects:
 15038 ;;		On entry : 0/0
 15039 ;;		On exit  : 0/0
 15040 ;;		Unchanged: 0/0
 15041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15042 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;Total ram usage:        4 bytes
 15047 ;; Hardware stack levels used:    1
 15048 ;; Hardware stack levels required when called:    6
 15049 ;; This function calls:
 15050 ;;		___awdiv
 15051 ;; This function is called by:
 15052 ;;		_DlyOff_Main
 15053 ;;		_setDimmerLights_Main
 15054 ;;		_DimmerLights_Exceptions
 15055 ;;		_setLog_Code
 15056 ;;		_setControl_Lights_Table
 15057 ;;		_setRFSW_Control
 15058 ;;		_setSw_Main
 15059 ;;		_Sw_DimmerOnFunc
 15060 ;;		_my_Main
 15061 ;; This function uses a non-reentrant model
 15062 ;;
 15063                           
 15064                           
 15065                           ;psect for function _setBuz
 15066  0CEB                     _setBuz:	
 15067                           
 15068                           ;incstack = 0
 15069                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15070                           ;setBuz@count stored from wreg
 15071  0CEB  0020               	movlb	0	; select bank0
 15072  0CEC  00AC               	movwf	setBuz@count
 15073                           
 15074                           ;Buzzer_B1.c: 31: time /=10;
 15075  0CED  300A               	movlw	10
 15076  0CEE  00A0               	movwf	___awdiv@divisor
 15077  0CEF  3000               	movlw	0
 15078  0CF0  00A1               	movwf	___awdiv@divisor+1
 15079  0CF1  082A               	movf	setBuz@time+1,w
 15080  0CF2  01A3               	clrf	___awdiv@dividend+1
 15081  0CF3  07A3               	addwf	___awdiv@dividend+1,f
 15082  0CF4  0829               	movf	setBuz@time,w
 15083  0CF5  01A2               	clrf	___awdiv@dividend
 15084  0CF6  07A2               	addwf	___awdiv@dividend,f
 15085  0CF7  3195  25E4  318C   	fcall	___awdiv
 15086  0CFA  0020               	movlb	0	; select bank0
 15087  0CFB  0821               	movf	?___awdiv+1,w
 15088  0CFC  01AA               	clrf	setBuz@time+1
 15089  0CFD  07AA               	addwf	setBuz@time+1,f
 15090  0CFE  0820               	movf	?___awdiv,w
 15091  0CFF  01A9               	clrf	setBuz@time
 15092  0D00  07A9               	addwf	setBuz@time,f
 15093                           
 15094                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 15095  0D01  0021               	movlb	1	; select bank1
 15096  0D02  0837               	movf	_Buz^(0+128),w
 15097  0D03  0086               	movwf	6
 15098  0D04  3001               	movlw	1	; select bank2/3
 15099  0D05  0087               	movwf	7
 15100  0D06  1C01               	btfss	1,0
 15101  0D07  0008               	return
 15102                           
 15103                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 15104  0D08  0837               	movf	_Buz^(0+128),w
 15105  0D09  0086               	movwf	6
 15106  0D0A  3001               	movlw	1	; select bank2/3
 15107  0D0B  0087               	movwf	7
 15108  0D0C  1881               	btfsc	1,1
 15109  0D0D  2D2C               	goto	l5524
 15110                           
 15111                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 15112  0D0E  0837               	movf	_Buz^(0+128),w
 15113  0D0F  0086               	movwf	6
 15114  0D10  3001               	movlw	1	; select bank2/3
 15115  0D11  0087               	movwf	7
 15116  0D12  1481               	bsf	1,1
 15117                           
 15118                           ;Buzzer_B1.c: 35: Buz->Count = count;
 15119  0D13  0020               	movlb	0	; select bank0
 15120  0D14  082C               	movf	setBuz@count,w
 15121  0D15  00AB               	movwf	??_setBuz
 15122  0D16  0021               	movlb	1	; select bank1
 15123  0D17  0837               	movf	_Buz^(0+128),w
 15124  0D18  3E03               	addlw	3
 15125  0D19  0086               	movwf	6
 15126  0D1A  3001               	movlw	1	; select bank2/3
 15127  0D1B  0087               	movwf	7
 15128  0D1C  0020               	movlb	0	; select bank0
 15129  0D1D  082B               	movf	??_setBuz,w
 15130  0D1E  0081               	movwf	1
 15131                           
 15132                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 15133  0D1F  0021               	movlb	1	; select bank1
 15134  0D20  0837               	movf	_Buz^(0+128),w
 15135  0D21  3E06               	addlw	6
 15136  0D22  0086               	movwf	6
 15137  0D23  3001               	movlw	1	; select bank2/3
 15138  0D24  0087               	movwf	7
 15139  0D25  0020               	movlb	0	; select bank0
 15140  0D26  0829               	movf	setBuz@time,w
 15141  0D27  3FC0               	movwi [0]fsr1
 15142  0D28  082A               	movf	setBuz@time+1,w
 15143  0D29  3FC1               	movwi [1]fsr1
 15144                           
 15145                           ;Buzzer_B1.c: 37: RB3 = 1;
 15146  0D2A  158D               	bsf	13,3	;volatile
 15147                           
 15148                           ;Buzzer_B1.c: 38: } else {
 15149  0D2B  0008               	return
 15150  0D2C                     l5524:	
 15151                           
 15152                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 15153  0D2C  0021               	movlb	1	; select bank1
 15154  0D2D  0837               	movf	_Buz^(0+128),w
 15155  0D2E  0086               	movwf	6
 15156  0D2F  3001               	movlw	1	; select bank2/3
 15157  0D30  0087               	movwf	7
 15158  0D31  1981               	btfsc	1,3
 15159  0D32  2D50               	goto	l5528
 15160                           
 15161                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 15162  0D33  0837               	movf	_Buz^(0+128),w
 15163  0D34  0086               	movwf	6
 15164  0D35  3001               	movlw	1	; select bank2/3
 15165  0D36  0087               	movwf	7
 15166  0D37  1581               	bsf	1,3
 15167                           
 15168                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 15169  0D38  0020               	movlb	0	; select bank0
 15170  0D39  082C               	movf	setBuz@count,w
 15171  0D3A  00AB               	movwf	??_setBuz
 15172  0D3B  0021               	movlb	1	; select bank1
 15173  0D3C  0837               	movf	_Buz^(0+128),w
 15174  0D3D  3E04               	addlw	4
 15175  0D3E  0086               	movwf	6
 15176  0D3F  3001               	movlw	1	; select bank2/3
 15177  0D40  0087               	movwf	7
 15178  0D41  0020               	movlb	0	; select bank0
 15179  0D42  082B               	movf	??_setBuz,w
 15180  0D43  0081               	movwf	1
 15181                           
 15182                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 15183  0D44  0021               	movlb	1	; select bank1
 15184  0D45  0837               	movf	_Buz^(0+128),w
 15185  0D46  3E08               	addlw	8
 15186  0D47  0086               	movwf	6
 15187  0D48  3001               	movlw	1	; select bank2/3
 15188  0D49  0087               	movwf	7
 15189  0D4A  0020               	movlb	0	; select bank0
 15190  0D4B  0829               	movf	setBuz@time,w
 15191  0D4C  3FC0               	movwi [0]fsr1
 15192  0D4D  082A               	movf	setBuz@time+1,w
 15193  0D4E  3FC1               	movwi [1]fsr1
 15194                           
 15195                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 15196  0D4F  0008               	return
 15197  0D50                     l5528:	
 15198  0D50  0021               	movlb	1	; select bank1
 15199  0D51  0837               	movf	_Buz^(0+128),w
 15200  0D52  0086               	movwf	6
 15201  0D53  3001               	movlw	1	; select bank2/3
 15202  0D54  0087               	movwf	7
 15203  0D55  1A01               	btfsc	1,4
 15204  0D56  0008               	return
 15205                           
 15206                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 15207  0D57  0837               	movf	_Buz^(0+128),w
 15208  0D58  0086               	movwf	6
 15209  0D59  3001               	movlw	1	; select bank2/3
 15210  0D5A  0087               	movwf	7
 15211  0D5B  1601               	bsf	1,4
 15212                           
 15213                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 15214  0D5C  0020               	movlb	0	; select bank0
 15215  0D5D  082C               	movf	setBuz@count,w
 15216  0D5E  00AB               	movwf	??_setBuz
 15217  0D5F  0021               	movlb	1	; select bank1
 15218  0D60  0837               	movf	_Buz^(0+128),w
 15219  0D61  3E05               	addlw	5
 15220  0D62  0086               	movwf	6
 15221  0D63  3001               	movlw	1	; select bank2/3
 15222  0D64  0087               	movwf	7
 15223  0D65  0020               	movlb	0	; select bank0
 15224  0D66  082B               	movf	??_setBuz,w
 15225  0D67  0081               	movwf	1
 15226                           
 15227                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 15228  0D68  0021               	movlb	1	; select bank1
 15229  0D69  0837               	movf	_Buz^(0+128),w
 15230  0D6A  3E0A               	addlw	10
 15231  0D6B  0086               	movwf	6
 15232  0D6C  3001               	movlw	1	; select bank2/3
 15233  0D6D  0087               	movwf	7
 15234  0D6E  0020               	movlb	0	; select bank0
 15235  0D6F  0829               	movf	setBuz@time,w
 15236  0D70  3FC0               	movwi [0]fsr1
 15237  0D71  082A               	movf	setBuz@time+1,w
 15238  0D72  3FC1               	movwi [1]fsr1
 15239  0D73  0008               	return
 15240  0D74                     __end_of_setBuz:	
 15241                           
 15242                           	psect	text98
 15243  15E4                     __ptext98:	
 15244 ;; *************** function ___awdiv *****************
 15245 ;; Defined at:
 15246 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  divisor         2    0[BANK0 ] int 
 15249 ;;  dividend        2    2[BANK0 ] int 
 15250 ;; Auto vars:     Size  Location     Type
 15251 ;;  quotient        2    7[BANK0 ] int 
 15252 ;;  sign            1    6[BANK0 ] unsigned char 
 15253 ;;  counter         1    5[BANK0 ] unsigned char 
 15254 ;; Return value:  Size  Location     Type
 15255 ;;                  2    0[BANK0 ] int 
 15256 ;; Registers used:
 15257 ;;		wreg, status,2, status,0
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15263 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;Total ram usage:        9 bytes
 15268 ;; Hardware stack levels used:    1
 15269 ;; Hardware stack levels required when called:    5
 15270 ;; This function calls:
 15271 ;;		Nothing
 15272 ;; This function is called by:
 15273 ;;		_setBuz
 15274 ;; This function uses a non-reentrant model
 15275 ;;
 15276                           
 15277                           
 15278                           ;psect for function ___awdiv
 15279  15E4                     ___awdiv:	
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15283  15E4  0020               	movlb	0	; select bank0
 15284  15E5  01A6               	clrf	___awdiv@sign
 15285  15E6  1FA1               	btfss	___awdiv@divisor+1,7
 15286  15E7  2DEF               	goto	l5478
 15287  15E8  09A0               	comf	___awdiv@divisor,f
 15288  15E9  09A1               	comf	___awdiv@divisor+1,f
 15289  15EA  0AA0               	incf	___awdiv@divisor,f
 15290  15EB  1903               	skipnz
 15291  15EC  0AA1               	incf	___awdiv@divisor+1,f
 15292  15ED  01A6               	clrf	___awdiv@sign
 15293  15EE  0AA6               	incf	___awdiv@sign,f
 15294  15EF                     l5478:	
 15295  15EF  1FA3               	btfss	___awdiv@dividend+1,7
 15296  15F0  2DFA               	goto	l5484
 15297  15F1  09A2               	comf	___awdiv@dividend,f
 15298  15F2  09A3               	comf	___awdiv@dividend+1,f
 15299  15F3  0AA2               	incf	___awdiv@dividend,f
 15300  15F4  1903               	skipnz
 15301  15F5  0AA3               	incf	___awdiv@dividend+1,f
 15302  15F6  3001               	movlw	1
 15303  15F7  00A4               	movwf	??___awdiv
 15304  15F8  0824               	movf	??___awdiv,w
 15305  15F9  06A6               	xorwf	___awdiv@sign,f
 15306  15FA                     l5484:	
 15307  15FA  01A7               	clrf	___awdiv@quotient
 15308  15FB  01A8               	clrf	___awdiv@quotient+1
 15309  15FC  0821               	movf	___awdiv@divisor+1,w
 15310  15FD  0420               	iorwf	___awdiv@divisor,w
 15311  15FE  1903               	skipnz
 15312  15FF  2E29               	goto	l5506
 15313  1600  01A5               	clrf	___awdiv@counter
 15314  1601  0AA5               	incf	___awdiv@counter,f
 15315  1602                     l5494:	
 15316  1602  1BA1               	btfsc	___awdiv@divisor+1,7
 15317  1603  2E0E               	goto	l5496
 15318  1604  3001               	movlw	1
 15319  1605                     u3975:	
 15320  1605  35A0               	lslf	___awdiv@divisor,f
 15321  1606  0DA1               	rlf	___awdiv@divisor+1,f
 15322  1607  0B89               	decfsz	9,f
 15323  1608  2E05               	goto	u3975
 15324  1609  3001               	movlw	1
 15325  160A  00A4               	movwf	??___awdiv
 15326  160B  0824               	movf	??___awdiv,w
 15327  160C  07A5               	addwf	___awdiv@counter,f
 15328  160D  2E02               	goto	l5494
 15329  160E                     l5496:	
 15330  160E  3001               	movlw	1
 15331  160F                     u3995:	
 15332  160F  35A7               	lslf	___awdiv@quotient,f
 15333  1610  0DA8               	rlf	___awdiv@quotient+1,f
 15334  1611  0B89               	decfsz	9,f
 15335  1612  2E0F               	goto	u3995
 15336  1613  0821               	movf	___awdiv@divisor+1,w
 15337  1614  0223               	subwf	___awdiv@dividend+1,w
 15338  1615  1D03               	skipz
 15339  1616  2E19               	goto	u4005
 15340  1617  0820               	movf	___awdiv@divisor,w
 15341  1618  0222               	subwf	___awdiv@dividend,w
 15342  1619                     u4005:	
 15343  1619  1C03               	skipc
 15344  161A  2E20               	goto	l5502
 15345  161B  0820               	movf	___awdiv@divisor,w
 15346  161C  02A2               	subwf	___awdiv@dividend,f
 15347  161D  0821               	movf	___awdiv@divisor+1,w
 15348  161E  3BA3               	subwfb	___awdiv@dividend+1,f
 15349  161F  1427               	bsf	___awdiv@quotient,0
 15350  1620                     l5502:	
 15351  1620  3001               	movlw	1
 15352  1621                     u4015:	
 15353  1621  36A1               	lsrf	___awdiv@divisor+1,f
 15354  1622  0CA0               	rrf	___awdiv@divisor,f
 15355  1623  0B89               	decfsz	9,f
 15356  1624  2E21               	goto	u4015
 15357  1625  3001               	movlw	1
 15358  1626  02A5               	subwf	___awdiv@counter,f
 15359  1627  1D03               	btfss	3,2
 15360  1628  2E0E               	goto	l5496
 15361  1629                     l5506:	
 15362  1629  0826               	movf	___awdiv@sign,w
 15363  162A  1903               	btfsc	3,2
 15364  162B  2E31               	goto	l5510
 15365  162C  09A7               	comf	___awdiv@quotient,f
 15366  162D  09A8               	comf	___awdiv@quotient+1,f
 15367  162E  0AA7               	incf	___awdiv@quotient,f
 15368  162F  1903               	skipnz
 15369  1630  0AA8               	incf	___awdiv@quotient+1,f
 15370  1631                     l5510:	
 15371  1631  0828               	movf	___awdiv@quotient+1,w
 15372  1632  01A1               	clrf	?___awdiv+1
 15373  1633  07A1               	addwf	?___awdiv+1,f
 15374  1634  0827               	movf	___awdiv@quotient,w
 15375  1635  01A0               	clrf	?___awdiv
 15376  1636  07A0               	addwf	?___awdiv,f
 15377  1637  0008               	return
 15378  1638                     __end_of___awdiv:	
 15379                           
 15380                           	psect	text99
 15381  1C33                     __ptext99:	
 15382 ;; *************** function _DelayOff_Initialization *****************
 15383 ;; Defined at:
 15384 ;;		line 26 in file "../src/DelayOff_B1.c"
 15385 ;; Parameters:    Size  Location     Type
 15386 ;;		None
 15387 ;; Auto vars:     Size  Location     Type
 15388 ;;		None
 15389 ;; Return value:  Size  Location     Type
 15390 ;;		None               void
 15391 ;; Registers used:
 15392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15393 ;; Tracked objects:
 15394 ;;		On entry : 0/0
 15395 ;;		On exit  : 0/0
 15396 ;;		Unchanged: 0/0
 15397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;Total ram usage:        0 bytes
 15403 ;; Hardware stack levels used:    1
 15404 ;; Hardware stack levels required when called:    7
 15405 ;; This function calls:
 15406 ;;		_DlyOff_Initialization
 15407 ;; This function is called by:
 15408 ;;		_main
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           
 15413                           ;psect for function _DelayOff_Initialization
 15414  1C33                     _DelayOff_Initialization:	
 15415                           
 15416                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15417                           
 15418                           ;incstack = 0
 15419                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15420  1C33  3001               	movlw	1
 15421  1C34  319C  24B6         	fcall	_DlyOff_Initialization
 15422  1C36  0008               	return
 15423  1C37                     __end_of_DelayOff_Initialization:	
 15424                           
 15425                           	psect	text100
 15426  1CB6                     __ptext100:	
 15427 ;; *************** function _DlyOff_Initialization *****************
 15428 ;; Defined at:
 15429 ;;		line 56 in file "../src/DelayOff_B1.c"
 15430 ;; Parameters:    Size  Location     Type
 15431 ;;  sw              1    wreg     unsigned char 
 15432 ;; Auto vars:     Size  Location     Type
 15433 ;;  sw              1    2[BANK0 ] unsigned char 
 15434 ;; Return value:  Size  Location     Type
 15435 ;;		None               void
 15436 ;; Registers used:
 15437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15438 ;; Tracked objects:
 15439 ;;		On entry : 0/0
 15440 ;;		On exit  : 0/0
 15441 ;;		Unchanged: 0/0
 15442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;Total ram usage:        1 bytes
 15448 ;; Hardware stack levels used:    1
 15449 ;; Hardware stack levels required when called:    6
 15450 ;; This function calls:
 15451 ;;		_DelayOffPointSelect
 15452 ;; This function is called by:
 15453 ;;		_DelayOff_Initialization
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           
 15458                           ;psect for function _DlyOff_Initialization
 15459  1CB6                     _DlyOff_Initialization:	
 15460                           
 15461                           ;incstack = 0
 15462                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15463                           ;DlyOff_Initialization@sw stored from wreg
 15464  1CB6  0020               	movlb	0	; select bank0
 15465  1CB7  00A2               	movwf	DlyOff_Initialization@sw
 15466                           
 15467                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15468  1CB8  0822               	movf	DlyOff_Initialization@sw,w
 15469  1CB9  319D  2507         	fcall	_DelayOffPointSelect
 15470                           
 15471                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15472  1CBB  0021               	movlb	1	; select bank1
 15473  1CBC  0839               	movf	_DelayOff^(0+128),w
 15474  1CBD  0086               	movwf	6
 15475  1CBE  0187               	clrf	7
 15476  1CBF  1401               	bsf	1,0
 15477  1CC0  0008               	return
 15478  1CC1                     __end_of_DlyOff_Initialization:	
 15479                           
 15480                           	psect	text101
 15481  1D07                     __ptext101:	
 15482 ;; *************** function _DelayOffPointSelect *****************
 15483 ;; Defined at:
 15484 ;;		line 7 in file "../src/DelayOff_B1.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  sw              1    wreg     unsigned char 
 15487 ;; Auto vars:     Size  Location     Type
 15488 ;;  sw              1    1[BANK0 ] unsigned char 
 15489 ;; Return value:  Size  Location     Type
 15490 ;;		None               void
 15491 ;; Registers used:
 15492 ;;		wreg
 15493 ;; Tracked objects:
 15494 ;;		On entry : 0/0
 15495 ;;		On exit  : 0/0
 15496 ;;		Unchanged: 0/0
 15497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;Total ram usage:        2 bytes
 15503 ;; Hardware stack levels used:    1
 15504 ;; Hardware stack levels required when called:    5
 15505 ;; This function calls:
 15506 ;;		Nothing
 15507 ;; This function is called by:
 15508 ;;		_DlyOff_Initialization
 15509 ;;		_DlyOff_Main
 15510 ;;		_setDelayOff_GO
 15511 ;; This function uses a non-reentrant model
 15512 ;;
 15513                           
 15514                           
 15515                           ;psect for function _DelayOffPointSelect
 15516  1D07                     _DelayOffPointSelect:	
 15517                           
 15518                           ;incstack = 0
 15519                           ; Regs used in _DelayOffPointSelect: [wreg]
 15520                           ;DelayOffPointSelect@sw stored from wreg
 15521  1D07  0020               	movlb	0	; select bank0
 15522  1D08  00A1               	movwf	DelayOffPointSelect@sw
 15523                           
 15524                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15525  1D09  0821               	movf	DelayOffPointSelect@sw,w
 15526  1D0A  3A01               	xorlw	1
 15527  1D0B  1D03               	skipz
 15528  1D0C  0008               	return
 15529                           
 15530                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15531  1D0D  30CF               	movlw	_DlySw1& (0+255)
 15532  1D0E  00A0               	movwf	??_DelayOffPointSelect
 15533  1D0F  0820               	movf	??_DelayOffPointSelect,w
 15534  1D10  0021               	movlb	1	; select bank1
 15535  1D11  00B9               	movwf	_DelayOff^(0+128)
 15536  1D12  0008               	return
 15537  1D13                     __end_of_DelayOffPointSelect:	
 15538                           
 15539                           	psect	text102
 15540  1E8C                     __ptext102:	
 15541 ;; *************** function _CC2500_PowerOnInitial *****************
 15542 ;; Defined at:
 15543 ;;		line 96 in file "../src/CC2500_B1.c"
 15544 ;; Parameters:    Size  Location     Type
 15545 ;;		None
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;		None               void
 15550 ;; Registers used:
 15551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;Total ram usage:        0 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    8
 15564 ;; This function calls:
 15565 ;;		_CC2500_ClearRXFIFO
 15566 ;;		_CC2500_ClearTXFIFO
 15567 ;;		_CC2500_FrequencyCabr
 15568 ;;		_CC2500_InitPATable
 15569 ;;		_CC2500_InitSetREG
 15570 ;;		_CC2500_PowerRST
 15571 ;;		_CC2500_SIDLEMode
 15572 ;; This function is called by:
 15573 ;;		_main
 15574 ;; This function uses a non-reentrant model
 15575 ;;
 15576                           
 15577                           
 15578                           ;psect for function _CC2500_PowerOnInitial
 15579  1E8C                     _CC2500_PowerOnInitial:	
 15580                           
 15581                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 15582                           
 15583                           ;incstack = 0
 15584                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15585  1E8C  3192  2222  319E   	fcall	_CC2500_PowerRST
 15586                           
 15587                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 15588  1E8F  3191  2148  319E   	fcall	_CC2500_InitSetREG
 15589                           
 15590                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 15591  1E92  319F  27C2  319E   	fcall	_CC2500_InitPATable
 15592                           
 15593                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 15594  1E95  319C  242B  319E   	fcall	_CC2500_ClearTXFIFO
 15595                           
 15596                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 15597  1E98  319C  2427  319E   	fcall	_CC2500_ClearRXFIFO
 15598                           
 15599                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 15600  1E9B  319C  24FB  319E   	fcall	_CC2500_FrequencyCabr
 15601                           
 15602                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 15603  1E9E  319C  242F         	fcall	_CC2500_SIDLEMode
 15604  1EA0  0008               	return
 15605  1EA1                     __end_of_CC2500_PowerOnInitial:	
 15606                           
 15607                           	psect	text103
 15608  1C2F                     __ptext103:	
 15609 ;; *************** function _CC2500_SIDLEMode *****************
 15610 ;; Defined at:
 15611 ;;		line 180 in file "../src/CC2500_B1.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;		None
 15614 ;; Auto vars:     Size  Location     Type
 15615 ;;		None
 15616 ;; Return value:  Size  Location     Type
 15617 ;;		None               void
 15618 ;; Registers used:
 15619 ;;		wreg, status,2, status,0, pclath, cstack
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;Total ram usage:        0 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; Hardware stack levels required when called:    7
 15632 ;; This function calls:
 15633 ;;		_CC2500_WriteCommand
 15634 ;; This function is called by:
 15635 ;;		_CC2500_PowerOnInitial
 15636 ;; This function uses a non-reentrant model
 15637 ;;
 15638                           
 15639                           
 15640                           ;psect for function _CC2500_SIDLEMode
 15641  1C2F                     _CC2500_SIDLEMode:	
 15642                           
 15643                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 15644                           
 15645                           ;incstack = 0
 15646                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 15647  1C2F  3036               	movlw	54
 15648  1C30  319D  25C0         	fcall	_CC2500_WriteCommand
 15649  1C32  0008               	return
 15650  1C33                     __end_of_CC2500_SIDLEMode:	
 15651                           
 15652                           	psect	text104
 15653  1222                     __ptext104:	
 15654 ;; *************** function _CC2500_PowerRST *****************
 15655 ;; Defined at:
 15656 ;;		line 109 in file "../src/CC2500_B1.c"
 15657 ;; Parameters:    Size  Location     Type
 15658 ;;		None
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;		None
 15661 ;; Return value:  Size  Location     Type
 15662 ;;		None               void
 15663 ;; Registers used:
 15664 ;;		wreg, status,2, status,0, pclath, cstack
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;Total ram usage:        1 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    6
 15677 ;; This function calls:
 15678 ;;		_CC2500_WriteByte
 15679 ;;		_DelayTime_1us
 15680 ;; This function is called by:
 15681 ;;		_CC2500_PowerOnInitial
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           
 15686                           ;psect for function _CC2500_PowerRST
 15687  1222                     _CC2500_PowerRST:	
 15688                           
 15689                           ;CC2500_B1.c: 110: RC1 = 0;
 15690                           
 15691                           ;incstack = 0
 15692                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 15693  1222  0020               	movlb	0	; select bank0
 15694  1223  108E               	bcf	14,1	;volatile
 15695                           
 15696                           ;CC2500_B1.c: 111: RC0 = 0;
 15697  1224  100E               	bcf	14,0	;volatile
 15698                           
 15699                           ;CC2500_B1.c: 112: RC4 = 1;
 15700  1225  160E               	bsf	14,4	;volatile
 15701                           
 15702                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 15703  1226  300A               	movlw	10
 15704  1227  00A0               	movwf	DelayTime_1us@count
 15705  1228  3000               	movlw	0
 15706  1229  00A1               	movwf	DelayTime_1us@count+1
 15707  122A  3190  20FB  3192   	fcall	_DelayTime_1us
 15708                           
 15709                           ;CC2500_B1.c: 114: RC4 = 0;
 15710  122D  0020               	movlb	0	; select bank0
 15711  122E  120E               	bcf	14,4	;volatile
 15712                           
 15713                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 15714  122F  300A               	movlw	10
 15715  1230  00A0               	movwf	DelayTime_1us@count
 15716  1231  3000               	movlw	0
 15717  1232  00A1               	movwf	DelayTime_1us@count+1
 15718  1233  3190  20FB  3192   	fcall	_DelayTime_1us
 15719                           
 15720                           ;CC2500_B1.c: 116: RC4 = 1;
 15721  1236  0020               	movlb	0	; select bank0
 15722  1237  160E               	bsf	14,4	;volatile
 15723                           
 15724                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 15725  1238  3028               	movlw	40
 15726  1239  00A0               	movwf	DelayTime_1us@count
 15727  123A  3000               	movlw	0
 15728  123B  00A1               	movwf	DelayTime_1us@count+1
 15729  123C  3190  20FB  3192   	fcall	_DelayTime_1us
 15730                           
 15731                           ;CC2500_B1.c: 118: RC4 = 0;
 15732  123F  0020               	movlb	0	; select bank0
 15733  1240  120E               	bcf	14,4	;volatile
 15734                           
 15735                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 15736  1241  3030               	movlw	48
 15737  1242  00A6               	movwf	??_CC2500_PowerRST
 15738  1243  0826               	movf	??_CC2500_PowerRST,w
 15739  1244  0021               	movlb	1	; select bank1
 15740  1245  00C2               	movwf	_SPI0Buffer^(0+128)
 15741  1246                     l293:	
 15742                           ;CC2500_B1.c: 120: while (RC2 == 1);
 15743                           
 15744  1246  0020               	movlb	0	; select bank0
 15745  1247  190E               	btfsc	14,2	;volatile
 15746  1248  2A46               	goto	l293
 15747                           
 15748                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 15749  1249  319E  26CF  3192   	fcall	_CC2500_WriteByte
 15750  124C                     l296:	
 15751                           ;CC2500_B1.c: 122: while (RC2 == 1);
 15752                           
 15753  124C  0020               	movlb	0	; select bank0
 15754  124D  190E               	btfsc	14,2	;volatile
 15755  124E  2A4C               	goto	l296
 15756                           
 15757                           ;CC2500_B1.c: 123: RC0 = 0;
 15758  124F  100E               	bcf	14,0	;volatile
 15759                           
 15760                           ;CC2500_B1.c: 124: RC4 = 1;
 15761  1250  160E               	bsf	14,4	;volatile
 15762  1251  0008               	return
 15763  1252                     __end_of_CC2500_PowerRST:	
 15764                           
 15765                           	psect	text105
 15766  1148                     __ptext105:	
 15767 ;; *************** function _CC2500_InitSetREG *****************
 15768 ;; Defined at:
 15769 ;;		line 130 in file "../src/CC2500_B1.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;		None
 15772 ;; Auto vars:     Size  Location     Type
 15773 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15774 ;;  temp2           1    7[BANK0 ] unsigned char 
 15775 ;;  temp1           1    6[BANK0 ] unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;		None               void
 15778 ;; Registers used:
 15779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;Total ram usage:        4 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    7
 15792 ;; This function calls:
 15793 ;;		_CC2500_WriteREG
 15794 ;; This function is called by:
 15795 ;;		_CC2500_PowerOnInitial
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           
 15800                           ;psect for function _CC2500_InitSetREG
 15801  1148                     _CC2500_InitSetREG:	
 15802                           
 15803                           ;CC2500_B1.c: 131: unsigned char loop_c;
 15804                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 15805                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 15806                           
 15807                           ;incstack = 0
 15808                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15809  1148  0020               	movlb	0	; select bank0
 15810  1149  01A8               	clrf	CC2500_InitSetREG@loop_c
 15811  114A                     L10:	
 15812  114A  302F               	movlw	47
 15813  114B  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15814  114C  1803               	btfsc	3,0
 15815  114D  0008               	return
 15816                           
 15817                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 15818  114E  0828               	movf	CC2500_InitSetREG@loop_c,w
 15819  114F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15820  1150  0084               	movwf	4
 15821  1151  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15822  1152  1803               	skipnc
 15823  1153  3E01               	addlw	1
 15824  1154  0085               	movwf	5
 15825  1155  0800               	movf	0,w	;code access
 15826  1156  00A5               	movwf	??_CC2500_InitSetREG
 15827  1157  0825               	movf	??_CC2500_InitSetREG,w
 15828  1158  00A6               	movwf	CC2500_InitSetREG@temp1
 15829                           
 15830                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 15831  1159  0828               	movf	CC2500_InitSetREG@loop_c,w
 15832  115A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15833  115B  0084               	movwf	4
 15834  115C  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15835  115D  1803               	skipnc
 15836  115E  3E01               	addlw	1
 15837  115F  0085               	movwf	5
 15838  1160  0800               	movf	0,w	;code access
 15839  1161  00A5               	movwf	??_CC2500_InitSetREG
 15840  1162  0825               	movf	??_CC2500_InitSetREG,w
 15841  1163  00A7               	movwf	CC2500_InitSetREG@temp2
 15842                           
 15843                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 15844  1164  0827               	movf	CC2500_InitSetREG@temp2,w
 15845  1165  00A5               	movwf	??_CC2500_InitSetREG
 15846  1166  0825               	movf	??_CC2500_InitSetREG,w
 15847  1167  00A2               	movwf	CC2500_WriteREG@value
 15848  1168  0826               	movf	CC2500_InitSetREG@temp1,w
 15849  1169  319E  26E8  3191   	fcall	_CC2500_WriteREG
 15850  116C  3001               	movlw	1
 15851  116D  0020               	movlb	0	; select bank0
 15852  116E  00A5               	movwf	??_CC2500_InitSetREG
 15853  116F  0825               	movf	??_CC2500_InitSetREG,w
 15854  1170  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15855  1171  294A               	goto	L10
 15856  1172                     __end_of_CC2500_InitSetREG:	
 15857                           
 15858                           	psect	text106
 15859  1FC2                     __ptext106:	
 15860 ;; *************** function _CC2500_InitPATable *****************
 15861 ;; Defined at:
 15862 ;;		line 145 in file "../src/CC2500_B1.c"
 15863 ;; Parameters:    Size  Location     Type
 15864 ;;		None
 15865 ;; Auto vars:     Size  Location     Type
 15866 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15867 ;;  temp            1    6[BANK0 ] unsigned char 
 15868 ;; Return value:  Size  Location     Type
 15869 ;;		None               void
 15870 ;; Registers used:
 15871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15872 ;; Tracked objects:
 15873 ;;		On entry : 0/0
 15874 ;;		On exit  : 0/0
 15875 ;;		Unchanged: 0/0
 15876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;Total ram usage:        3 bytes
 15882 ;; Hardware stack levels used:    1
 15883 ;; Hardware stack levels required when called:    7
 15884 ;; This function calls:
 15885 ;;		_CC2500_WriteREG
 15886 ;; This function is called by:
 15887 ;;		_CC2500_PowerOnInitial
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891                           
 15892                           ;psect for function _CC2500_InitPATable
 15893  1FC2                     _CC2500_InitPATable:	
 15894                           
 15895                           ;CC2500_B1.c: 146: unsigned char loop_d;
 15896                           ;CC2500_B1.c: 147: unsigned char temp;
 15897                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15901  1FC2  0020               	movlb	0	; select bank0
 15902  1FC3  01A7               	clrf	CC2500_InitPATable@loop_d
 15903  1FC4                     L11:	
 15904  1FC4  3008               	movlw	8
 15905  1FC5  0227               	subwf	CC2500_InitPATable@loop_d,w
 15906  1FC6  1803               	btfsc	3,0
 15907  1FC7  0008               	return
 15908                           
 15909                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 15910  1FC8  0827               	movf	CC2500_InitPATable@loop_d,w
 15911  1FC9  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15912  1FCA  0084               	movwf	4
 15913  1FCB  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15914  1FCC  1803               	skipnc
 15915  1FCD  3E01               	addlw	1
 15916  1FCE  0085               	movwf	5
 15917  1FCF  0800               	movf	0,w	;code access
 15918  1FD0  00A5               	movwf	??_CC2500_InitPATable
 15919  1FD1  0825               	movf	??_CC2500_InitPATable,w
 15920  1FD2  00A6               	movwf	CC2500_InitPATable@temp
 15921                           
 15922                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 15923  1FD3  0826               	movf	CC2500_InitPATable@temp,w
 15924  1FD4  00A5               	movwf	??_CC2500_InitPATable
 15925  1FD5  0825               	movf	??_CC2500_InitPATable,w
 15926  1FD6  00A2               	movwf	CC2500_WriteREG@value
 15927  1FD7  303E               	movlw	62
 15928  1FD8  319E  26E8  319F   	fcall	_CC2500_WriteREG
 15929  1FDB  3001               	movlw	1
 15930  1FDC  0020               	movlb	0	; select bank0
 15931  1FDD  00A5               	movwf	??_CC2500_InitPATable
 15932  1FDE  0825               	movf	??_CC2500_InitPATable,w
 15933  1FDF  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15934  1FE0  2FC4               	goto	L11
 15935  1FE1                     __end_of_CC2500_InitPATable:	
 15936                           
 15937                           	psect	text107
 15938  1EE8                     __ptext107:	
 15939 ;; *************** function _CC2500_WriteREG *****************
 15940 ;; Defined at:
 15941 ;;		line 222 in file "../src/CC2500_B1.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;  w_addr          1    wreg     unsigned char 
 15944 ;;  value           1    2[BANK0 ] unsigned char 
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15947 ;; Return value:  Size  Location     Type
 15948 ;;		None               void
 15949 ;; Registers used:
 15950 ;;		wreg, status,2, status,0, pclath, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15960 ;;Total ram usage:        3 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    6
 15963 ;; This function calls:
 15964 ;;		_CC2500_WriteByte
 15965 ;; This function is called by:
 15966 ;;		_CC2500_InitSetREG
 15967 ;;		_CC2500_InitPATable
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970                           
 15971                           
 15972                           ;psect for function _CC2500_WriteREG
 15973  1EE8                     _CC2500_WriteREG:	
 15974                           
 15975                           ;incstack = 0
 15976                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 15977                           ;CC2500_WriteREG@w_addr stored from wreg
 15978  1EE8  0020               	movlb	0	; select bank0
 15979  1EE9  00A4               	movwf	CC2500_WriteREG@w_addr
 15980                           
 15981                           ;CC2500_B1.c: 223: RC4 = 0;
 15982  1EEA  120E               	bcf	14,4	;volatile
 15983                           
 15984                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 15985  1EEB  0824               	movf	CC2500_WriteREG@w_addr,w
 15986  1EEC  00A3               	movwf	??_CC2500_WriteREG
 15987  1EED  0823               	movf	??_CC2500_WriteREG,w
 15988  1EEE  0021               	movlb	1	; select bank1
 15989  1EEF  00C2               	movwf	_SPI0Buffer^(0+128)
 15990  1EF0                     l338:	
 15991                           ;CC2500_B1.c: 225: while (RC2 == 1);
 15992                           
 15993  1EF0  0020               	movlb	0	; select bank0
 15994  1EF1  190E               	btfsc	14,2	;volatile
 15995  1EF2  2EF0               	goto	l338
 15996                           
 15997                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 15998  1EF3  319E  26CF  319E   	fcall	_CC2500_WriteByte
 15999                           
 16000                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 16001  1EF6  0020               	movlb	0	; select bank0
 16002  1EF7  0822               	movf	CC2500_WriteREG@value,w
 16003  1EF8  00A3               	movwf	??_CC2500_WriteREG
 16004  1EF9  0823               	movf	??_CC2500_WriteREG,w
 16005  1EFA  0021               	movlb	1	; select bank1
 16006  1EFB  00C2               	movwf	_SPI0Buffer^(0+128)
 16007                           
 16008                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 16009  1EFC  319E  26CF         	fcall	_CC2500_WriteByte
 16010                           
 16011                           ;CC2500_B1.c: 229: RC4 = 1;
 16012  1EFE  0020               	movlb	0	; select bank0
 16013  1EFF  160E               	bsf	14,4	;volatile
 16014  1F00  0008               	return
 16015  1F01                     __end_of_CC2500_WriteREG:	
 16016                           
 16017                           	psect	text108
 16018  1CFB                     __ptext108:	
 16019 ;; *************** function _CC2500_FrequencyCabr *****************
 16020 ;; Defined at:
 16021 ;;		line 172 in file "../src/CC2500_B1.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;		None
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;		None
 16026 ;; Return value:  Size  Location     Type
 16027 ;;		None               void
 16028 ;; Registers used:
 16029 ;;		wreg, status,2, status,0, pclath, cstack
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;Total ram usage:        0 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:    7
 16042 ;; This function calls:
 16043 ;;		_CC2500_WriteCommand
 16044 ;;		_DelayTime_1us
 16045 ;; This function is called by:
 16046 ;;		_CC2500_PowerOnInitial
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           
 16051                           ;psect for function _CC2500_FrequencyCabr
 16052  1CFB                     _CC2500_FrequencyCabr:	
 16053                           
 16054                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 16055                           
 16056                           ;incstack = 0
 16057                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 16058  1CFB  3033               	movlw	51
 16059  1CFC  319D  25C0  319C   	fcall	_CC2500_WriteCommand
 16060                           
 16061                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 16062  1CFF  30E8               	movlw	232
 16063  1D00  0020               	movlb	0	; select bank0
 16064  1D01  00A0               	movwf	DelayTime_1us@count
 16065  1D02  3003               	movlw	3
 16066  1D03  00A1               	movwf	DelayTime_1us@count+1
 16067  1D04  3190  20FB         	fcall	_DelayTime_1us
 16068  1D06  0008               	return
 16069  1D07                     __end_of_CC2500_FrequencyCabr:	
 16070                           
 16071                           	psect	text109
 16072  10FB                     __ptext109:	
 16073 ;; *************** function _DelayTime_1us *****************
 16074 ;; Defined at:
 16075 ;;		line 278 in file "../src/CC2500_B1.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  count           2    0[BANK0 ] int 
 16078 ;; Auto vars:     Size  Location     Type
 16079 ;;  j               2    4[BANK0 ] unsigned int 
 16080 ;;  i               2    2[BANK0 ] unsigned int 
 16081 ;; Return value:  Size  Location     Type
 16082 ;;		None               void
 16083 ;; Registers used:
 16084 ;;		wreg, status,2
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        6 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:    5
 16097 ;; This function calls:
 16098 ;;		Nothing
 16099 ;; This function is called by:
 16100 ;;		_CC2500_PowerRST
 16101 ;;		_CC2500_FrequencyCabr
 16102 ;; This function uses a non-reentrant model
 16103 ;;
 16104                           
 16105                           
 16106                           ;psect for function _DelayTime_1us
 16107  10FB                     _DelayTime_1us:	
 16108                           
 16109                           ;CC2500_B1.c: 279: unsigned int i, j;
 16110                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16114  10FB  3001               	movlw	1
 16115  10FC  0020               	movlb	0	; select bank0
 16116  10FD  00A2               	movwf	DelayTime_1us@i
 16117  10FE  3000               	movlw	0
 16118  10FF  00A3               	movwf	DelayTime_1us@i+1
 16119  1100                     l362:	
 16120  1100  0821               	movf	DelayTime_1us@count+1,w
 16121  1101  0223               	subwf	DelayTime_1us@i+1,w
 16122  1102  1D03               	skipz
 16123  1103  2906               	goto	u4705
 16124  1104  0820               	movf	DelayTime_1us@count,w
 16125  1105  0222               	subwf	DelayTime_1us@i,w
 16126  1106                     u4705:	
 16127  1106  1803               	btfsc	3,0
 16128  1107  0008               	return
 16129                           
 16130                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 16131  1108  01A4               	clrf	DelayTime_1us@j
 16132  1109  01A5               	clrf	DelayTime_1us@j+1
 16133  110A  3000               	movlw	0
 16134  110B  0225               	subwf	DelayTime_1us@j+1,w
 16135  110C  3002               	movlw	2
 16136  110D  1903               	skipnz
 16137  110E  0224               	subwf	DelayTime_1us@j,w
 16138  110F  1803               	btfsc	3,0
 16139  1110  291C               	goto	l6012
 16140  1111                     l6010:	
 16141  1111  3001               	movlw	1
 16142  1112  07A4               	addwf	DelayTime_1us@j,f
 16143  1113  3000               	movlw	0
 16144  1114  3DA5               	addwfc	DelayTime_1us@j+1,f
 16145  1115  3000               	movlw	0
 16146  1116  0225               	subwf	DelayTime_1us@j+1,w
 16147  1117  3002               	movlw	2
 16148  1118  1903               	skipnz
 16149  1119  0224               	subwf	DelayTime_1us@j,w
 16150  111A  1C03               	skipc
 16151  111B  2911               	goto	l6010
 16152  111C                     l6012:	
 16153  111C  3001               	movlw	1
 16154  111D  07A2               	addwf	DelayTime_1us@i,f
 16155  111E  3000               	movlw	0
 16156  111F  3DA3               	addwfc	DelayTime_1us@i+1,f
 16157  1120  2900               	goto	l362
 16158  1121                     __end_of_DelayTime_1us:	
 16159                           
 16160                           	psect	text110
 16161  1C2B                     __ptext110:	
 16162 ;; *************** function _CC2500_ClearTXFIFO *****************
 16163 ;; Defined at:
 16164 ;;		line 158 in file "../src/CC2500_B1.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;		None
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;		None
 16169 ;; Return value:  Size  Location     Type
 16170 ;;		None               void
 16171 ;; Registers used:
 16172 ;;		wreg, status,2, status,0, pclath, cstack
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;Total ram usage:        0 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    7
 16185 ;; This function calls:
 16186 ;;		_CC2500_WriteCommand
 16187 ;; This function is called by:
 16188 ;;		_CC2500_PowerOnInitial
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           
 16193                           ;psect for function _CC2500_ClearTXFIFO
 16194  1C2B                     _CC2500_ClearTXFIFO:	
 16195                           
 16196                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 16197                           
 16198                           ;incstack = 0
 16199                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16200  1C2B  303B               	movlw	59
 16201  1C2C  319D  25C0         	fcall	_CC2500_WriteCommand
 16202  1C2E  0008               	return
 16203  1C2F                     __end_of_CC2500_ClearTXFIFO:	
 16204                           
 16205                           	psect	text111
 16206  1C27                     __ptext111:	
 16207 ;; *************** function _CC2500_ClearRXFIFO *****************
 16208 ;; Defined at:
 16209 ;;		line 165 in file "../src/CC2500_B1.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;		None
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;		None
 16214 ;; Return value:  Size  Location     Type
 16215 ;;		None               void
 16216 ;; Registers used:
 16217 ;;		wreg, status,2, status,0, pclath, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;Total ram usage:        0 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    7
 16230 ;; This function calls:
 16231 ;;		_CC2500_WriteCommand
 16232 ;; This function is called by:
 16233 ;;		_CC2500_PowerOnInitial
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           
 16238                           ;psect for function _CC2500_ClearRXFIFO
 16239  1C27                     _CC2500_ClearRXFIFO:	
 16240                           
 16241                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16245  1C27  303A               	movlw	58
 16246  1C28  319D  25C0         	fcall	_CC2500_WriteCommand
 16247  1C2A  0008               	return
 16248  1C2B                     __end_of_CC2500_ClearRXFIFO:	
 16249                           
 16250                           	psect	text112
 16251  1DC0                     __ptext112:	
 16252 ;; *************** function _CC2500_WriteCommand *****************
 16253 ;; Defined at:
 16254 ;;		line 248 in file "../src/CC2500_B1.c"
 16255 ;; Parameters:    Size  Location     Type
 16256 ;;  command         1    wreg     unsigned char 
 16257 ;; Auto vars:     Size  Location     Type
 16258 ;;  command         1    3[BANK0 ] unsigned char 
 16259 ;; Return value:  Size  Location     Type
 16260 ;;		None               void
 16261 ;; Registers used:
 16262 ;;		wreg, status,2, status,0, pclath, cstack
 16263 ;; Tracked objects:
 16264 ;;		On entry : 0/0
 16265 ;;		On exit  : 0/0
 16266 ;;		Unchanged: 0/0
 16267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;Total ram usage:        2 bytes
 16273 ;; Hardware stack levels used:    1
 16274 ;; Hardware stack levels required when called:    6
 16275 ;; This function calls:
 16276 ;;		_CC2500_WriteByte
 16277 ;; This function is called by:
 16278 ;;		_CC2500_TxData
 16279 ;;		_CC2500_RxData
 16280 ;;		_CC2500_ClearTXFIFO
 16281 ;;		_CC2500_ClearRXFIFO
 16282 ;;		_CC2500_FrequencyCabr
 16283 ;;		_CC2500_SIDLEMode
 16284 ;;		_setRF_Main
 16285 ;;		_RF_RxDisable
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           
 16290                           ;psect for function _CC2500_WriteCommand
 16291  1DC0                     _CC2500_WriteCommand:	
 16292                           
 16293                           ;incstack = 0
 16294                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 16295                           ;CC2500_WriteCommand@command stored from wreg
 16296  1DC0  0020               	movlb	0	; select bank0
 16297  1DC1  00A3               	movwf	CC2500_WriteCommand@command
 16298                           
 16299                           ;CC2500_B1.c: 249: RC4 = 0;
 16300  1DC2  120E               	bcf	14,4	;volatile
 16301                           
 16302                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 16303  1DC3  0823               	movf	CC2500_WriteCommand@command,w
 16304  1DC4  00A2               	movwf	??_CC2500_WriteCommand
 16305  1DC5  0822               	movf	??_CC2500_WriteCommand,w
 16306  1DC6  0021               	movlb	1	; select bank1
 16307  1DC7  00C2               	movwf	_SPI0Buffer^(0+128)
 16308  1DC8                     l350:	
 16309                           ;CC2500_B1.c: 252: while (RC2 == 1);
 16310                           
 16311  1DC8  0020               	movlb	0	; select bank0
 16312  1DC9  190E               	btfsc	14,2	;volatile
 16313  1DCA  2DC8               	goto	l350
 16314                           
 16315                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 16316  1DCB  319E  26CF         	fcall	_CC2500_WriteByte
 16317                           
 16318                           ;CC2500_B1.c: 255: RC4 = 1;
 16319  1DCD  0020               	movlb	0	; select bank0
 16320  1DCE  160E               	bsf	14,4	;volatile
 16321  1DCF  0008               	return
 16322  1DD0                     __end_of_CC2500_WriteCommand:	
 16323                           
 16324                           	psect	text113
 16325  1ECF                     __ptext113:	
 16326 ;; *************** function _CC2500_WriteByte *****************
 16327 ;; Defined at:
 16328 ;;		line 190 in file "../src/CC2500_B1.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;		None
 16331 ;; Auto vars:     Size  Location     Type
 16332 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16333 ;; Return value:  Size  Location     Type
 16334 ;;		None               void
 16335 ;; Registers used:
 16336 ;;		wreg, status,2, status,0
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;Total ram usage:        2 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; Hardware stack levels required when called:    5
 16349 ;; This function calls:
 16350 ;;		Nothing
 16351 ;; This function is called by:
 16352 ;;		_CC2500_TxData
 16353 ;;		_CC2500_RxData
 16354 ;;		_CC2500_PowerRST
 16355 ;;		_CC2500_WriteREG
 16356 ;;		_CC2500_WriteCommand
 16357 ;;		_CC2500_ReadStatus
 16358 ;;		_CC2500_ReadREG
 16359 ;; This function uses a non-reentrant model
 16360 ;;
 16361                           
 16362                           
 16363                           ;psect for function _CC2500_WriteByte
 16364  1ECF                     _CC2500_WriteByte:	
 16365                           
 16366                           ;CC2500_B1.c: 191: unsigned char loop_a;
 16367                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 16368                           
 16369                           ;incstack = 0
 16370                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16371  1ECF  0020               	movlb	0	; select bank0
 16372  1ED0  01A1               	clrf	CC2500_WriteByte@loop_a
 16373  1ED1                     L12:	
 16374  1ED1  3008               	movlw	8
 16375  1ED2  0221               	subwf	CC2500_WriteByte@loop_a,w
 16376  1ED3  1803               	btfsc	3,0
 16377  1ED4  0008               	return
 16378                           
 16379                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 16380  1ED5  0021               	movlb	1	; select bank1
 16381  1ED6  1FC2               	btfss	_SPI0Buffer^(0+128),7
 16382  1ED7  2EDB               	goto	l326
 16383                           
 16384                           ;CC2500_B1.c: 194: RC0 = 1;
 16385  1ED8  0020               	movlb	0	; select bank0
 16386  1ED9  140E               	bsf	14,0	;volatile
 16387  1EDA  2EDD               	goto	l327
 16388  1EDB                     l326:	
 16389                           
 16390                           ;CC2500_B1.c: 195: else
 16391                           ;CC2500_B1.c: 196: RC0 = 0;
 16392  1EDB  0020               	movlb	0	; select bank0
 16393  1EDC  100E               	bcf	14,0	;volatile
 16394  1EDD                     l327:	
 16395                           
 16396                           ;CC2500_B1.c: 197: RC1 = 1;
 16397  1EDD  148E               	bsf	14,1	;volatile
 16398                           
 16399                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 16400  1EDE  1003               	clrc
 16401  1EDF  0021               	movlb	1	; select bank1
 16402  1EE0  0DC2               	rlf	_SPI0Buffer^(0+128),f
 16403                           
 16404                           ;CC2500_B1.c: 199: RC1 = 0;
 16405  1EE1  0020               	movlb	0	; select bank0
 16406  1EE2  108E               	bcf	14,1	;volatile
 16407  1EE3  3001               	movlw	1
 16408  1EE4  00A0               	movwf	??_CC2500_WriteByte
 16409  1EE5  0820               	movf	??_CC2500_WriteByte,w
 16410  1EE6  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16411  1EE7  2ED1               	goto	L12
 16412  1EE8                     __end_of_CC2500_WriteByte:	
 16413                           
 16414                           	psect	text114
 16415  0F4D                     __ptext114:	
 16416 ;; *************** function _Buzzer_Main *****************
 16417 ;; Defined at:
 16418 ;;		line 53 in file "../src/Buzzer_B1.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;		None
 16421 ;; Auto vars:     Size  Location     Type
 16422 ;;		None
 16423 ;; Return value:  Size  Location     Type
 16424 ;;		None               void
 16425 ;; Registers used:
 16426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16427 ;; Tracked objects:
 16428 ;;		On entry : 0/0
 16429 ;;		On exit  : 0/0
 16430 ;;		Unchanged: 0/0
 16431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;Total ram usage:        4 bytes
 16437 ;; Hardware stack levels used:    1
 16438 ;; Hardware stack levels required when called:    5
 16439 ;; This function calls:
 16440 ;;		Nothing
 16441 ;; This function is called by:
 16442 ;;		_main
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           
 16447                           ;psect for function _Buzzer_Main
 16448  0F4D                     _Buzzer_Main:	
 16449                           
 16450                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 16451                           
 16452                           ;incstack = 0
 16453                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 16454  0F4D  0021               	movlb	1	; select bank1
 16455  0F4E  0837               	movf	_Buz^(0+128),w
 16456  0F4F  0086               	movwf	6
 16457  0F50  3001               	movlw	1	; select bank2/3
 16458  0F51  0087               	movwf	7
 16459  0F52  1281               	bcf	1,5
 16460  0F53  0020               	movlb	0	; select bank0
 16461  0F54  198D               	btfsc	13,3	;volatile
 16462  0F55  1681               	bsf	1,5
 16463                           
 16464                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 16465  0F56  0021               	movlb	1	; select bank1
 16466  0F57  0837               	movf	_Buz^(0+128),w
 16467  0F58  3E06               	addlw	6
 16468  0F59  0086               	movwf	6
 16469  0F5A  3001               	movlw	1	; select bank2/3
 16470  0F5B  0087               	movwf	7
 16471  0F5C  3F40               	moviw [0]fsr1
 16472  0F5D  0020               	movlb	0	; select bank0
 16473  0F5E  00A0               	movwf	??_Buzzer_Main
 16474  0F5F  3F41               	moviw [1]fsr1
 16475  0F60  00A1               	movwf	??_Buzzer_Main+1
 16476  0F61  0021               	movlb	1	; select bank1
 16477  0F62  0A37               	incf	_Buz^(0+128),w
 16478  0F63  0086               	movwf	6
 16479  0F64  3001               	movlw	1	; select bank2/3
 16480  0F65  0087               	movwf	7
 16481  0F66  3F40               	moviw [0]fsr1
 16482  0F67  0020               	movlb	0	; select bank0
 16483  0F68  00A2               	movwf	??_Buzzer_Main+2
 16484  0F69  3F41               	moviw [1]fsr1
 16485  0F6A  00A3               	movwf	??_Buzzer_Main+3
 16486  0F6B  0821               	movf	??_Buzzer_Main+1,w
 16487  0F6C  0223               	subwf	??_Buzzer_Main+3,w
 16488  0F6D  1D03               	skipz
 16489  0F6E  2F71               	goto	u6025
 16490  0F6F  0820               	movf	??_Buzzer_Main,w
 16491  0F70  0222               	subwf	??_Buzzer_Main+2,w
 16492  0F71                     u6025:	
 16493  0F71  1C03               	skipc
 16494  0F72  0008               	return
 16495                           
 16496                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 16497  0F73  0021               	movlb	1	; select bank1
 16498  0F74  0A37               	incf	_Buz^(0+128),w
 16499  0F75  0086               	movwf	6
 16500  0F76  3001               	movlw	1	; select bank2/3
 16501  0F77  0087               	movwf	7
 16502  0F78  3000               	movlw	0
 16503  0F79  3FC0               	movwi [0]fsr1
 16504  0F7A  3FC1               	movwi [1]fsr1
 16505                           
 16506                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 16507  0F7B  0837               	movf	_Buz^(0+128),w
 16508  0F7C  0086               	movwf	6
 16509  0F7D  3001               	movlw	1	; select bank2/3
 16510  0F7E  0087               	movwf	7
 16511  0F7F  1A81               	btfsc	1,5
 16512  0F80  2FEF               	goto	l6892
 16513                           
 16514                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 16515  0F81  0837               	movf	_Buz^(0+128),w
 16516  0F82  3E03               	addlw	3
 16517  0F83  0086               	movwf	6
 16518  0F84  3001               	movlw	1	; select bank2/3
 16519  0F85  0087               	movwf	7
 16520  0F86  0881               	movf	1,f
 16521  0F87  1D03               	skipz
 16522  0F88  2FE7               	goto	l6888
 16523                           
 16524                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 16525  0F89  0837               	movf	_Buz^(0+128),w
 16526  0F8A  0086               	movwf	6
 16527  0F8B  3001               	movlw	1	; select bank2/3
 16528  0F8C  0087               	movwf	7
 16529  0F8D  1D81               	btfss	1,3
 16530  0F8E  2FB5               	goto	l6880
 16531                           
 16532                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 16533  0F8F  0837               	movf	_Buz^(0+128),w
 16534  0F90  0086               	movwf	6
 16535  0F91  3001               	movlw	1	; select bank2/3
 16536  0F92  0087               	movwf	7
 16537  0F93  1181               	bcf	1,3
 16538                           
 16539                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 16540  0F94  0837               	movf	_Buz^(0+128),w
 16541  0F95  3E04               	addlw	4
 16542  0F96  0086               	movwf	6
 16543  0F97  3001               	movlw	1	; select bank2/3
 16544  0F98  0087               	movwf	7
 16545  0F99  0801               	movf	1,w
 16546  0F9A  0020               	movlb	0	; select bank0
 16547  0F9B  00A0               	movwf	??_Buzzer_Main
 16548  0F9C  0021               	movlb	1	; select bank1
 16549  0F9D  0837               	movf	_Buz^(0+128),w
 16550  0F9E  3E03               	addlw	3
 16551  0F9F  0086               	movwf	6
 16552  0FA0  3001               	movlw	1	; select bank2/3
 16553  0FA1  0087               	movwf	7
 16554  0FA2  0020               	movlb	0	; select bank0
 16555  0FA3  0820               	movf	??_Buzzer_Main,w
 16556  0FA4  0081               	movwf	1
 16557                           
 16558                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 16559  0FA5  0021               	movlb	1	; select bank1
 16560  0FA6  0837               	movf	_Buz^(0+128),w
 16561  0FA7  3E08               	addlw	8
 16562  0FA8  0086               	movwf	6
 16563  0FA9  3001               	movlw	1	; select bank2/3
 16564  0FAA  0087               	movwf	7
 16565  0FAB  0837               	movf	_Buz^(0+128),w
 16566  0FAC  3E06               	addlw	6
 16567  0FAD  0084               	movwf	4
 16568  0FAE  3001               	movlw	1	; select bank2/3
 16569  0FAF  0085               	movwf	5
 16570  0FB0  3F40               	moviw [0]fsr1
 16571  0FB1  3F80               	movwi [0]fsr0
 16572  0FB2  3F41               	moviw [1]fsr1
 16573  0FB3  3F81               	movwi [1]fsr0
 16574                           
 16575                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 16576  0FB4  0008               	return
 16577  0FB5                     l6880:	
 16578  0FB5  0837               	movf	_Buz^(0+128),w
 16579  0FB6  0086               	movwf	6
 16580  0FB7  3001               	movlw	1	; select bank2/3
 16581  0FB8  0087               	movwf	7
 16582  0FB9  1E01               	btfss	1,4
 16583  0FBA  2FE1               	goto	l6886
 16584                           
 16585                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 16586  0FBB  0837               	movf	_Buz^(0+128),w
 16587  0FBC  0086               	movwf	6
 16588  0FBD  3001               	movlw	1	; select bank2/3
 16589  0FBE  0087               	movwf	7
 16590  0FBF  1201               	bcf	1,4
 16591                           
 16592                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 16593  0FC0  0837               	movf	_Buz^(0+128),w
 16594  0FC1  3E05               	addlw	5
 16595  0FC2  0086               	movwf	6
 16596  0FC3  3001               	movlw	1	; select bank2/3
 16597  0FC4  0087               	movwf	7
 16598  0FC5  0801               	movf	1,w
 16599  0FC6  0020               	movlb	0	; select bank0
 16600  0FC7  00A0               	movwf	??_Buzzer_Main
 16601  0FC8  0021               	movlb	1	; select bank1
 16602  0FC9  0837               	movf	_Buz^(0+128),w
 16603  0FCA  3E03               	addlw	3
 16604  0FCB  0086               	movwf	6
 16605  0FCC  3001               	movlw	1	; select bank2/3
 16606  0FCD  0087               	movwf	7
 16607  0FCE  0020               	movlb	0	; select bank0
 16608  0FCF  0820               	movf	??_Buzzer_Main,w
 16609  0FD0  0081               	movwf	1
 16610                           
 16611                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 16612  0FD1  0021               	movlb	1	; select bank1
 16613  0FD2  0837               	movf	_Buz^(0+128),w
 16614  0FD3  3E0A               	addlw	10
 16615  0FD4  0086               	movwf	6
 16616  0FD5  3001               	movlw	1	; select bank2/3
 16617  0FD6  0087               	movwf	7
 16618  0FD7  0837               	movf	_Buz^(0+128),w
 16619  0FD8  3E06               	addlw	6
 16620  0FD9  0084               	movwf	4
 16621  0FDA  3001               	movlw	1	; select bank2/3
 16622  0FDB  0085               	movwf	5
 16623  0FDC  3F40               	moviw [0]fsr1
 16624  0FDD  3F80               	movwi [0]fsr0
 16625  0FDE  3F41               	moviw [1]fsr1
 16626  0FDF  3F81               	movwi [1]fsr0
 16627                           
 16628                           ;Buzzer_B1.c: 68: } else {
 16629  0FE0  0008               	return
 16630  0FE1                     l6886:	
 16631                           
 16632                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 16633  0FE1  0837               	movf	_Buz^(0+128),w
 16634  0FE2  0086               	movwf	6
 16635  0FE3  3001               	movlw	1	; select bank2/3
 16636  0FE4  0087               	movwf	7
 16637  0FE5  1081               	bcf	1,1
 16638                           
 16639                           ;Buzzer_B1.c: 70: }
 16640                           ;Buzzer_B1.c: 71: } else {
 16641  0FE6  0008               	return
 16642  0FE7                     l6888:	
 16643                           
 16644                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 16645  0FE7  0837               	movf	_Buz^(0+128),w
 16646  0FE8  0086               	movwf	6
 16647  0FE9  3001               	movlw	1	; select bank2/3
 16648  0FEA  0087               	movwf	7
 16649  0FEB  1681               	bsf	1,5
 16650                           
 16651                           ;Buzzer_B1.c: 74: RB3 = 1;
 16652  0FEC  0020               	movlb	0	; select bank0
 16653  0FED  158D               	bsf	13,3	;volatile
 16654                           
 16655                           ;Buzzer_B1.c: 75: }
 16656                           ;Buzzer_B1.c: 76: } else {
 16657  0FEE  0008               	return
 16658  0FEF                     l6892:	
 16659                           
 16660                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 16661  0FEF  0021               	movlb	1	; select bank1
 16662  0FF0  0837               	movf	_Buz^(0+128),w
 16663  0FF1  0086               	movwf	6
 16664  0FF2  3001               	movlw	1	; select bank2/3
 16665  0FF3  0087               	movwf	7
 16666  0FF4  1281               	bcf	1,5
 16667                           
 16668                           ;Buzzer_B1.c: 79: RB3 = 0;
 16669  0FF5  0020               	movlb	0	; select bank0
 16670  0FF6  118D               	bcf	13,3	;volatile
 16671                           
 16672                           ;Buzzer_B1.c: 81: Buz->Count--;
 16673  0FF7  0021               	movlb	1	; select bank1
 16674  0FF8  0837               	movf	_Buz^(0+128),w
 16675  0FF9  3E03               	addlw	3
 16676  0FFA  0086               	movwf	6
 16677  0FFB  3001               	movlw	1	; select bank2/3
 16678  0FFC  0087               	movwf	7
 16679  0FFD  3001               	movlw	1
 16680  0FFE  0281               	subwf	1,f
 16681  0FFF  0008               	return
 16682  1000                     __end_of_Buzzer_Main:	
 16683                           
 16684                           	psect	text115
 16685  1CEF                     __ptext115:	
 16686 ;; *************** function _Buzzer_Initialization *****************
 16687 ;; Defined at:
 16688 ;;		line 11 in file "../src/Buzzer_B1.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;		None
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;		None
 16693 ;; Return value:  Size  Location     Type
 16694 ;;		None               void
 16695 ;; Registers used:
 16696 ;;		wreg, fsr1l, fsr1h
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;Total ram usage:        1 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    5
 16709 ;; This function calls:
 16710 ;;		Nothing
 16711 ;; This function is called by:
 16712 ;;		_main
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           
 16717                           ;psect for function _Buzzer_Initialization
 16718  1CEF                     _Buzzer_Initialization:	
 16719                           
 16720                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 16721                           
 16722                           ;incstack = 0
 16723                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 16724  1CEF  303F               	movlw	_Buz1& (0+255)
 16725  1CF0  0020               	movlb	0	; select bank0
 16726  1CF1  00A0               	movwf	??_Buzzer_Initialization
 16727  1CF2  0820               	movf	??_Buzzer_Initialization,w
 16728  1CF3  0021               	movlb	1	; select bank1
 16729  1CF4  00B7               	movwf	_Buz^(0+128)
 16730                           
 16731                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 16732  1CF5  0837               	movf	_Buz^(0+128),w
 16733  1CF6  0086               	movwf	6
 16734  1CF7  3001               	movlw	1	; select bank2/3
 16735  1CF8  0087               	movwf	7
 16736  1CF9  1401               	bsf	1,0
 16737  1CFA  0008               	return
 16738  1CFB                     __end_of_Buzzer_Initialization:	
 16739                           
 16740                           	psect	intentry
 16741  0004                     __pintentry:	
 16742 ;; *************** function _ISR *****************
 16743 ;; Defined at:
 16744 ;;		line 109 in file "../src/MCU_B1.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;		None
 16747 ;; Auto vars:     Size  Location     Type
 16748 ;;		None
 16749 ;; Return value:  Size  Location     Type
 16750 ;;		None               void
 16751 ;; Registers used:
 16752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        1 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    4
 16765 ;; This function calls:
 16766 ;;		_INT_ISR
 16767 ;;		_IOC_ISR
 16768 ;;		_TMR0_ISR
 16769 ;; This function is called by:
 16770 ;;		Interrupt level 1
 16771 ;; This function uses a non-reentrant model
 16772 ;;
 16773                           
 16774  0004                     _ISR:	
 16775                           
 16776                           ;incstack = 0
 16777                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16778  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16779  0005  3180               	pagesel	$
 16780  0006  0020               	movlb	0	; select bank0
 16781  0007  087F               	movf	127,w
 16782  0008  00F7               	movwf	??_ISR
 16783                           
 16784                           ;MCU_B1.c: 111: IOC_ISR();
 16785  0009  319E  2631  3180   	fcall	_IOC_ISR
 16786                           
 16787                           ;MCU_B1.c: 113: TMR0_ISR();
 16788  000C  3192  2252  3180   	fcall	_TMR0_ISR
 16789                           
 16790                           ;MCU_B1.c: 115: ;;
 16791                           ;MCU_B1.c: 119: INT_ISR();
 16792  000F  319E  2620         	fcall	_INT_ISR
 16793  0011  0877               	movf	??_ISR,w
 16794  0012  0020               	movlb	0	; select bank0
 16795  0013  00FF               	movwf	127
 16796  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 16797  0015  0009               	retfie
 16798  0016                     __end_of_ISR:	
 16799                           
 16800                           	psect	text117
 16801  1252                     __ptext117:	
 16802 ;; *************** function _TMR0_ISR *****************
 16803 ;; Defined at:
 16804 ;;		line 137 in file "../src/MCU_B1.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;		None
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;		None
 16809 ;; Return value:  Size  Location     Type
 16810 ;;		None               void
 16811 ;; Registers used:
 16812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;Total ram usage:        0 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    2
 16825 ;; This function calls:
 16826 ;;		_Buz_Counter
 16827 ;;		_setDimmerLights_IntrControl
 16828 ;; This function is called by:
 16829 ;;		_ISR
 16830 ;; This function uses a non-reentrant model
 16831 ;;
 16832                           
 16833                           
 16834                           ;psect for function _TMR0_ISR
 16835  1252                     _TMR0_ISR:	
 16836                           
 16837                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 16838                           
 16839                           ;incstack = 0
 16840                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16841  1252  1E8B               	btfss	11,5	;volatile
 16842  1253  0008               	return
 16843  1254  1D0B               	btfss	11,2	;volatile
 16844  1255  0008               	return
 16845                           
 16846                           ;MCU_B1.c: 139: TMR0 = (256-190);
 16847  1256  3042               	movlw	66
 16848  1257  0020               	movlb	0	; select bank0
 16849  1258  0095               	movwf	21	;volatile
 16850                           
 16851                           ;MCU_B1.c: 140: TMR0IF = 0;
 16852  1259  110B               	bcf	11,2	;volatile
 16853                           
 16854                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 16855  125A  3001               	movlw	1
 16856  125B  3180  2044  3192   	fcall	_setDimmerLights_IntrControl
 16857                           
 16858                           ;MCU_B1.c: 161: Timer0->Count++;
 16859  125E  0021               	movlb	1	; select bank1
 16860  125F  0A6B               	incf	_Timer0^(0+128),w
 16861  1260  0086               	movwf	6
 16862  1261  3001               	movlw	1	; select bank2/3
 16863  1262  0087               	movwf	7
 16864  1263  3001               	movlw	1
 16865  1264  0781               	addwf	1,f
 16866  1265  3141               	addfsr 1,1
 16867  1266  1803               	skipnc
 16868  1267  0A81               	incf	1,f
 16869                           
 16870                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 16871  1268  0A6B               	incf	_Timer0^(0+128),w
 16872  1269  0086               	movwf	6
 16873  126A  3001               	movlw	1	; select bank2/3
 16874  126B  0087               	movwf	7
 16875  126C  3F40               	moviw [0]fsr1
 16876  126D  3A64               	xorlw	100
 16877  126E  1D03               	skipz
 16878  126F  2A72               	goto	u612_25
 16879  1270  3F41               	moviw [1]fsr1
 16880  1271  3A00               	xorlw	0
 16881  1272                     u612_25:	
 16882  1272  1D03               	skipz
 16883  1273  0008               	return
 16884                           
 16885                           ;MCU_B1.c: 163: Timer0->Count = 0;
 16886  1274  0A6B               	incf	_Timer0^(0+128),w
 16887  1275  0086               	movwf	6
 16888  1276  3001               	movlw	1	; select bank2/3
 16889  1277  0087               	movwf	7
 16890  1278  3000               	movlw	0
 16891  1279  3FC0               	movwi [0]fsr1
 16892  127A  3FC1               	movwi [1]fsr1
 16893                           
 16894                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 16895  127B  086D               	movf	_myMain^(0+128),w
 16896  127C  0086               	movwf	6
 16897  127D  3001               	movlw	1	; select bank2/3
 16898  127E  0087               	movwf	7
 16899  127F  1481               	bsf	1,1
 16900                           
 16901                           ;MCU_B1.c: 167: Buz_Counter();
 16902  1280  319E  2642         	fcall	_Buz_Counter
 16903  1282  0008               	return
 16904  1283                     __end_of_TMR0_ISR:	
 16905                           
 16906                           	psect	text118
 16907  0044                     __ptext118:	
 16908 ;; *************** function _setDimmerLights_IntrControl *****************
 16909 ;; Defined at:
 16910 ;;		line 87 in file "../src/Dimmer_B1.c"
 16911 ;; Parameters:    Size  Location     Type
 16912 ;;  lights          1    wreg     unsigned char 
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;  lights          1    6[COMMON] unsigned char 
 16915 ;; Return value:  Size  Location     Type
 16916 ;;		None               void
 16917 ;; Registers used:
 16918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16919 ;; Tracked objects:
 16920 ;;		On entry : 0/0
 16921 ;;		On exit  : 0/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;Total ram usage:        5 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    1
 16931 ;; This function calls:
 16932 ;;		_DimmerIntrPointSelect
 16933 ;; This function is called by:
 16934 ;;		_TMR0_ISR
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           
 16939                           ;psect for function _setDimmerLights_IntrControl
 16940  0044                     _setDimmerLights_IntrControl:	
 16941                           
 16942                           ;incstack = 0
 16943                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16944                           ;setDimmerLights_IntrControl@lights stored from wreg
 16945  0044  00F6               	movwf	setDimmerLights_IntrControl@lights
 16946                           
 16947                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16948  0045  0876               	movf	setDimmerLights_IntrControl@lights,w
 16949  0046  319C  2497  3180   	fcall	_DimmerIntrPointSelect
 16950                           
 16951                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16952  0049  0879               	movf	_DimmerLightsIntr,w
 16953  004A  0086               	movwf	6
 16954  004B  3001               	movlw	1	; select bank2/3
 16955  004C  0087               	movwf	7
 16956  004D  1C01               	btfss	1,0
 16957  004E  28A4               	goto	i1l6364
 16958                           
 16959                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16960  004F  3001               	movlw	1
 16961  0050  00F2               	movwf	??_setDimmerLights_IntrControl
 16962  0051  0879               	movf	_DimmerLightsIntr,w
 16963  0052  3E03               	addlw	3
 16964  0053  0086               	movwf	6
 16965  0054  3001               	movlw	1	; select bank2/3
 16966  0055  0087               	movwf	7
 16967  0056  0872               	movf	??_setDimmerLights_IntrControl,w
 16968  0057  0781               	addwf	1,f
 16969                           
 16970                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16971  0058  0021               	movlb	1	; select bank1
 16972  0059  083A               	movf	_Dimmer^(0+128),w
 16973  005A  3E02               	addlw	2
 16974  005B  0086               	movwf	6
 16975  005C  0187               	clrf	7
 16976  005D  0801               	movf	1,w
 16977  005E  00F2               	movwf	??_setDimmerLights_IntrControl
 16978  005F  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16979  0060  09F2               	comf	??_setDimmerLights_IntrControl,f
 16980  0061  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16981  0062  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16982  0063  1903               	skipnz
 16983  0064  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16984  0065  0879               	movf	_DimmerLightsIntr,w
 16985  0066  3E04               	addlw	4
 16986  0067  0086               	movwf	6
 16987  0068  3001               	movlw	1	; select bank2/3
 16988  0069  0087               	movwf	7
 16989  006A  0801               	movf	1,w
 16990  006B  0772               	addwf	??_setDimmerLights_IntrControl,w
 16991  006C  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16992  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16993  006E  1803               	skipnc
 16994  006F  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 16995  0070  00F5               	movwf	??_setDimmerLights_IntrControl+3
 16996  0071  0879               	movf	_DimmerLightsIntr,w
 16997  0072  3E03               	addlw	3
 16998  0073  0086               	movwf	6
 16999  0074  3001               	movlw	1	; select bank2/3
 17000  0075  0087               	movwf	7
 17001  0076  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17002  0077  3A80               	xorlw	128
 17003  0078  3C80               	sublw	128
 17004  0079  1D03               	skipz
 17005  007A  287D               	goto	u513_25
 17006  007B  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17007  007C  0201               	subwf	1,w
 17008  007D                     u513_25:	
 17009  007D  1C03               	skipc
 17010  007E  29A8               	goto	i1l6422
 17011                           
 17012                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17013  007F  0879               	movf	_DimmerLightsIntr,w
 17014  0080  3E03               	addlw	3
 17015  0081  0086               	movwf	6
 17016  0082  3001               	movlw	1	; select bank2/3
 17017  0083  0087               	movwf	7
 17018  0084  0181               	clrf	1
 17019                           
 17020                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17021  0085  0879               	movf	_DimmerLightsIntr,w
 17022  0086  0086               	movwf	6
 17023  0087  3001               	movlw	1	; select bank2/3
 17024  0088  0087               	movwf	7
 17025  0089  1001               	bcf	1,0
 17026                           
 17027                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17028  008A  0879               	movf	_DimmerLightsIntr,w
 17029  008B  0086               	movwf	6
 17030  008C  3001               	movlw	1	; select bank2/3
 17031  008D  0087               	movwf	7
 17032  008E  1F01               	btfss	1,6
 17033  008F  29A8               	goto	i1l6422
 17034                           
 17035                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17036  0090  0879               	movf	_DimmerLightsIntr,w
 17037  0091  3E08               	addlw	8
 17038  0092  0086               	movwf	6
 17039  0093  3001               	movlw	1	; select bank2/3
 17040  0094  0087               	movwf	7
 17041  0095  1401               	bsf	1,0
 17042                           
 17043                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17044  0096  0879               	movf	_DimmerLightsIntr,w
 17045  0097  3E08               	addlw	8
 17046  0098  0086               	movwf	6
 17047  0099  3001               	movlw	1	; select bank2/3
 17048  009A  0087               	movwf	7
 17049  009B  1681               	bsf	1,5
 17050                           
 17051                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17052  009C  0876               	movf	setDimmerLights_IntrControl@lights,w
 17053  009D  3A01               	xorlw	1
 17054  009E  1D03               	skipz
 17055  009F  29A8               	goto	i1l6422
 17056                           
 17057                           ;Dimmer_B1.c: 101: RA7 = 1;
 17058  00A0  0020               	movlb	0	; select bank0
 17059  00A1  178C               	bsf	12,7	;volatile
 17060                           
 17061                           ;Dimmer_B1.c: 102: RB4=1;
 17062  00A2  160D               	bsf	13,4	;volatile
 17063                           
 17064                           ;Dimmer_B1.c: 103: }
 17065                           ;Dimmer_B1.c: 115: }
 17066                           ;Dimmer_B1.c: 116: }
 17067                           ;Dimmer_B1.c: 117: } else {
 17068  00A3  29A8               	goto	i1l6422
 17069  00A4                     i1l6364:	
 17070                           
 17071                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17072  00A4  0879               	movf	_DimmerLightsIntr,w
 17073  00A5  3E08               	addlw	8
 17074  00A6  0086               	movwf	6
 17075  00A7  3001               	movlw	1	; select bank2/3
 17076  00A8  0087               	movwf	7
 17077  00A9  1C01               	btfss	1,0
 17078  00AA  29A8               	goto	i1l6422
 17079                           
 17080                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17081  00AB  0879               	movf	_DimmerLightsIntr,w
 17082  00AC  3E08               	addlw	8
 17083  00AD  0086               	movwf	6
 17084  00AE  3001               	movlw	1	; select bank2/3
 17085  00AF  0087               	movwf	7
 17086  00B0  1001               	bcf	1,0
 17087                           
 17088                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17089  00B1  0879               	movf	_DimmerLightsIntr,w
 17090  00B2  0086               	movwf	6
 17091  00B3  3001               	movlw	1	; select bank2/3
 17092  00B4  0087               	movwf	7
 17093  00B5  1C81               	btfss	1,1
 17094  00B6  29A8               	goto	i1l6422
 17095                           
 17096                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17097  00B7  3001               	movlw	1
 17098  00B8  00F2               	movwf	??_setDimmerLights_IntrControl
 17099  00B9  0A79               	incf	_DimmerLightsIntr,w
 17100  00BA  0086               	movwf	6
 17101  00BB  3001               	movlw	1	; select bank2/3
 17102  00BC  0087               	movwf	7
 17103  00BD  0872               	movf	??_setDimmerLights_IntrControl,w
 17104  00BE  0781               	addwf	1,f
 17105                           
 17106                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17107  00BF  0A79               	incf	_DimmerLightsIntr,w
 17108  00C0  0086               	movwf	6
 17109  00C1  3001               	movlw	1	; select bank2/3
 17110  00C2  0087               	movwf	7
 17111  00C3  0879               	movf	_DimmerLightsIntr,w
 17112  00C4  3E02               	addlw	2
 17113  00C5  0084               	movwf	4
 17114  00C6  3001               	movlw	1	; select bank2/3
 17115  00C7  0085               	movwf	5
 17116  00C8  0800               	movf	0,w
 17117  00C9  0201               	subwf	1,w
 17118  00CA  1C03               	skipc
 17119  00CB  29A8               	goto	i1l6422
 17120                           
 17121                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17122  00CC  0A79               	incf	_DimmerLightsIntr,w
 17123  00CD  0086               	movwf	6
 17124  00CE  3001               	movlw	1	; select bank2/3
 17125  00CF  0087               	movwf	7
 17126  00D0  0181               	clrf	1
 17127                           
 17128                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17129  00D1  0879               	movf	_DimmerLightsIntr,w
 17130  00D2  0086               	movwf	6
 17131  00D3  3001               	movlw	1	; select bank2/3
 17132  00D4  0087               	movwf	7
 17133  00D5  1D81               	btfss	1,3
 17134  00D6  290D               	goto	i1l6390
 17135                           
 17136                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17137  00D7  0879               	movf	_DimmerLightsIntr,w
 17138  00D8  0086               	movwf	6
 17139  00D9  3001               	movlw	1	; select bank2/3
 17140  00DA  0087               	movwf	7
 17141  00DB  1A01               	btfsc	1,4
 17142  00DC  28F4               	goto	i1l6384
 17143                           
 17144                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17145  00DD  0879               	movf	_DimmerLightsIntr,w
 17146  00DE  3E04               	addlw	4
 17147  00DF  0086               	movwf	6
 17148  00E0  3001               	movlw	1	; select bank2/3
 17149  00E1  0087               	movwf	7
 17150  00E2  3021               	movlw	33
 17151  00E3  0201               	subwf	1,w
 17152  00E4  1C03               	skipc
 17153  00E5  28EE               	goto	i1l6382
 17154                           
 17155                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17156  00E6  0879               	movf	_DimmerLightsIntr,w
 17157  00E7  3E04               	addlw	4
 17158  00E8  0086               	movwf	6
 17159  00E9  3001               	movlw	1	; select bank2/3
 17160  00EA  0087               	movwf	7
 17161  00EB  3001               	movlw	1
 17162  00EC  0281               	subwf	1,f
 17163                           
 17164                           ;Dimmer_B1.c: 128: } else {
 17165  00ED  29A8               	goto	i1l6422
 17166  00EE                     i1l6382:	
 17167                           
 17168                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17169  00EE  0879               	movf	_DimmerLightsIntr,w
 17170  00EF  0086               	movwf	6
 17171  00F0  3001               	movlw	1	; select bank2/3
 17172  00F1  0087               	movwf	7
 17173  00F2  1601               	bsf	1,4
 17174                           
 17175                           ;Dimmer_B1.c: 130: }
 17176                           ;Dimmer_B1.c: 131: } else {
 17177  00F3  29A8               	goto	i1l6422
 17178  00F4                     i1l6384:	
 17179                           
 17180                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17181  00F4  0879               	movf	_DimmerLightsIntr,w
 17182  00F5  3E04               	addlw	4
 17183  00F6  0086               	movwf	6
 17184  00F7  3001               	movlw	1	; select bank2/3
 17185  00F8  0087               	movwf	7
 17186  00F9  303C               	movlw	60
 17187  00FA  0201               	subwf	1,w
 17188  00FB  1803               	skipnc
 17189  00FC  2907               	goto	i1l6388
 17190                           
 17191                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17192  00FD  3001               	movlw	1
 17193  00FE  00F2               	movwf	??_setDimmerLights_IntrControl
 17194  00FF  0879               	movf	_DimmerLightsIntr,w
 17195  0100  3E04               	addlw	4
 17196  0101  0086               	movwf	6
 17197  0102  3001               	movlw	1	; select bank2/3
 17198  0103  0087               	movwf	7
 17199  0104  0872               	movf	??_setDimmerLights_IntrControl,w
 17200  0105  0781               	addwf	1,f
 17201                           
 17202                           ;Dimmer_B1.c: 134: } else {
 17203  0106  29A8               	goto	i1l6422
 17204  0107                     i1l6388:	
 17205                           
 17206                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17207  0107  0879               	movf	_DimmerLightsIntr,w
 17208  0108  0086               	movwf	6
 17209  0109  3001               	movlw	1	; select bank2/3
 17210  010A  0087               	movwf	7
 17211  010B  1201               	bcf	1,4
 17212                           
 17213                           ;Dimmer_B1.c: 136: }
 17214                           ;Dimmer_B1.c: 137: }
 17215                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17216  010C  29A8               	goto	i1l6422
 17217  010D                     i1l6390:	
 17218  010D  0879               	movf	_DimmerLightsIntr,w
 17219  010E  0086               	movwf	6
 17220  010F  3001               	movlw	1	; select bank2/3
 17221  0110  0087               	movwf	7
 17222  0111  1D01               	btfss	1,2
 17223  0112  2954               	goto	i1l6404
 17224                           
 17225                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17226  0113  0879               	movf	_DimmerLightsIntr,w
 17227  0114  3E05               	addlw	5
 17228  0115  0086               	movwf	6
 17229  0116  3001               	movlw	1	; select bank2/3
 17230  0117  0087               	movwf	7
 17231  0118  0879               	movf	_DimmerLightsIntr,w
 17232  0119  3E04               	addlw	4
 17233  011A  0084               	movwf	4
 17234  011B  3001               	movlw	1	; select bank2/3
 17235  011C  0085               	movwf	5
 17236  011D  0800               	movf	0,w
 17237  011E  0201               	subwf	1,w
 17238  011F  1803               	skipnc
 17239  0120  2929               	goto	i1l6396
 17240                           
 17241                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17242  0121  0879               	movf	_DimmerLightsIntr,w
 17243  0122  3E04               	addlw	4
 17244  0123  0086               	movwf	6
 17245  0124  3001               	movlw	1	; select bank2/3
 17246  0125  0087               	movwf	7
 17247  0126  3001               	movlw	1
 17248  0127  0281               	subwf	1,f
 17249                           
 17250                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17251  0128  2940               	goto	i1l6400
 17252  0129                     i1l6396:	
 17253  0129  0879               	movf	_DimmerLightsIntr,w
 17254  012A  3E04               	addlw	4
 17255  012B  0086               	movwf	6
 17256  012C  3001               	movlw	1	; select bank2/3
 17257  012D  0087               	movwf	7
 17258  012E  0879               	movf	_DimmerLightsIntr,w
 17259  012F  3E05               	addlw	5
 17260  0130  0084               	movwf	4
 17261  0131  3001               	movlw	1	; select bank2/3
 17262  0132  0085               	movwf	5
 17263  0133  0800               	movf	0,w
 17264  0134  0201               	subwf	1,w
 17265  0135  1803               	skipnc
 17266  0136  2940               	goto	i1l6400
 17267                           
 17268                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17269  0137  3001               	movlw	1
 17270  0138  00F2               	movwf	??_setDimmerLights_IntrControl
 17271  0139  0879               	movf	_DimmerLightsIntr,w
 17272  013A  3E04               	addlw	4
 17273  013B  0086               	movwf	6
 17274  013C  3001               	movlw	1	; select bank2/3
 17275  013D  0087               	movwf	7
 17276  013E  0872               	movf	??_setDimmerLights_IntrControl,w
 17277  013F  0781               	addwf	1,f
 17278  0140                     i1l6400:	
 17279                           
 17280                           ;Dimmer_B1.c: 143: }
 17281                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17282  0140  0879               	movf	_DimmerLightsIntr,w
 17283  0141  3E05               	addlw	5
 17284  0142  0086               	movwf	6
 17285  0143  3001               	movlw	1	; select bank2/3
 17286  0144  0087               	movwf	7
 17287  0145  0879               	movf	_DimmerLightsIntr,w
 17288  0146  3E04               	addlw	4
 17289  0147  0084               	movwf	4
 17290  0148  3001               	movlw	1	; select bank2/3
 17291  0149  0085               	movwf	5
 17292  014A  0800               	movf	0,w
 17293  014B  0601               	xorwf	1,w
 17294  014C  1D03               	skipz
 17295  014D  29A8               	goto	i1l6422
 17296                           
 17297                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17298  014E  0879               	movf	_DimmerLightsIntr,w
 17299  014F  0086               	movwf	6
 17300  0150  3001               	movlw	1	; select bank2/3
 17301  0151  0087               	movwf	7
 17302  0152  1101               	bcf	1,2
 17303  0153  296F               	goto	i1l6410
 17304  0154                     i1l6404:	
 17305                           ;Dimmer_B1.c: 147: }
 17306                           ;Dimmer_B1.c: 148: } else {
 17307                           
 17308                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17309                           
 17310                           
 17311                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17312  0154  0879               	movf	_DimmerLightsIntr,w
 17313  0155  0086               	movwf	6
 17314  0156  3001               	movlw	1	; select bank2/3
 17315  0157  0087               	movwf	7
 17316  0158  1E81               	btfss	1,5
 17317  0159  2975               	goto	i1l6412
 17318                           
 17319                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17320  015A  0879               	movf	_DimmerLightsIntr,w
 17321  015B  3E04               	addlw	4
 17322  015C  0086               	movwf	6
 17323  015D  3001               	movlw	1	; select bank2/3
 17324  015E  0087               	movwf	7
 17325  015F  3001               	movlw	1
 17326  0160  0281               	subwf	1,f
 17327                           
 17328                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17329  0161  0879               	movf	_DimmerLightsIntr,w
 17330  0162  3E05               	addlw	5
 17331  0163  0086               	movwf	6
 17332  0164  3001               	movlw	1	; select bank2/3
 17333  0165  0087               	movwf	7
 17334  0166  0879               	movf	_DimmerLightsIntr,w
 17335  0167  3E04               	addlw	4
 17336  0168  0084               	movwf	4
 17337  0169  3001               	movlw	1	; select bank2/3
 17338  016A  0085               	movwf	5
 17339  016B  0800               	movf	0,w
 17340  016C  0201               	subwf	1,w
 17341  016D  1C03               	skipc
 17342  016E  29A8               	goto	i1l6422
 17343  016F                     i1l6410:	
 17344                           
 17345                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17346  016F  0879               	movf	_DimmerLightsIntr,w
 17347  0170  0086               	movwf	6
 17348  0171  3001               	movlw	1	; select bank2/3
 17349  0172  0087               	movwf	7
 17350  0173  1081               	bcf	1,1
 17351                           
 17352                           ;Dimmer_B1.c: 153: }
 17353                           ;Dimmer_B1.c: 154: } else {
 17354  0174  29A8               	goto	i1l6422
 17355  0175                     i1l6412:	
 17356                           
 17357                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17358  0175  3001               	movlw	1
 17359  0176  00F2               	movwf	??_setDimmerLights_IntrControl
 17360  0177  0879               	movf	_DimmerLightsIntr,w
 17361  0178  3E04               	addlw	4
 17362  0179  0086               	movwf	6
 17363  017A  3001               	movlw	1	; select bank2/3
 17364  017B  0087               	movwf	7
 17365  017C  0872               	movf	??_setDimmerLights_IntrControl,w
 17366  017D  0781               	addwf	1,f
 17367                           
 17368                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17369  017E  0879               	movf	_DimmerLightsIntr,w
 17370  017F  3E04               	addlw	4
 17371  0180  0086               	movwf	6
 17372  0181  3001               	movlw	1	; select bank2/3
 17373  0182  0087               	movwf	7
 17374  0183  0879               	movf	_DimmerLightsIntr,w
 17375  0184  3E06               	addlw	6
 17376  0185  0084               	movwf	4
 17377  0186  3001               	movlw	1	; select bank2/3
 17378  0187  0085               	movwf	5
 17379  0188  0800               	movf	0,w
 17380  0189  0201               	subwf	1,w
 17381  018A  1C03               	skipc
 17382  018B  29A8               	goto	i1l6422
 17383                           
 17384                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17385  018C  0879               	movf	_DimmerLightsIntr,w
 17386  018D  0086               	movwf	6
 17387  018E  3001               	movlw	1	; select bank2/3
 17388  018F  0087               	movwf	7
 17389  0190  1081               	bcf	1,1
 17390                           
 17391                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17392  0191  0879               	movf	_DimmerLightsIntr,w
 17393  0192  0086               	movwf	6
 17394  0193  3001               	movlw	1	; select bank2/3
 17395  0194  0087               	movwf	7
 17396  0195  1301               	bcf	1,6
 17397                           
 17398                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17399  0196  0879               	movf	_DimmerLightsIntr,w
 17400  0197  3E09               	addlw	9
 17401  0198  0086               	movwf	6
 17402  0199  3001               	movlw	1	; select bank2/3
 17403  019A  0087               	movwf	7
 17404  019B  1501               	bsf	1,2
 17405                           
 17406                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17407  019C  0021               	movlb	1	; select bank1
 17408  019D  083A               	movf	_Dimmer^(0+128),w
 17409  019E  0086               	movwf	6
 17410  019F  0187               	clrf	7
 17411  01A0  1401               	bsf	1,0
 17412                           
 17413                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17414  01A1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17415  01A2  3A01               	xorlw	1
 17416  01A3  1D03               	skipz
 17417  01A4  29A8               	goto	i1l6422
 17418                           
 17419                           ;Dimmer_B1.c: 163: RA3 = 0;
 17420  01A5  0020               	movlb	0	; select bank0
 17421  01A6  118C               	bcf	12,3	;volatile
 17422                           
 17423                           ;Dimmer_B1.c: 164: RC7=!1;
 17424  01A7  138E               	bcf	14,7	;volatile
 17425  01A8                     i1l6422:	
 17426                           ;Dimmer_B1.c: 165: }
 17427                           ;Dimmer_B1.c: 177: ;;
 17428                           
 17429                           
 17430                           ;Dimmer_B1.c: 178: }
 17431                           ;Dimmer_B1.c: 179: }
 17432                           ;Dimmer_B1.c: 180: }
 17433                           ;Dimmer_B1.c: 181: }
 17434                           ;Dimmer_B1.c: 182: }
 17435                           ;Dimmer_B1.c: 183: }
 17436                           ;Dimmer_B1.c: 184: }
 17437                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17438  01A8  0879               	movf	_DimmerLightsIntr,w
 17439  01A9  3E08               	addlw	8
 17440  01AA  0086               	movwf	6
 17441  01AB  3001               	movlw	1	; select bank2/3
 17442  01AC  0087               	movwf	7
 17443  01AD  1E81               	btfss	1,5
 17444  01AE  29D4               	goto	i1l6436
 17445                           
 17446                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17447  01AF  3001               	movlw	1
 17448  01B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17449  01B1  0879               	movf	_DimmerLightsIntr,w
 17450  01B2  3E07               	addlw	7
 17451  01B3  0086               	movwf	6
 17452  01B4  3001               	movlw	1	; select bank2/3
 17453  01B5  0087               	movwf	7
 17454  01B6  0872               	movf	??_setDimmerLights_IntrControl,w
 17455  01B7  0781               	addwf	1,f
 17456                           
 17457                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17458  01B8  0879               	movf	_DimmerLightsIntr,w
 17459  01B9  3E07               	addlw	7
 17460  01BA  0086               	movwf	6
 17461  01BB  3001               	movlw	1	; select bank2/3
 17462  01BC  0087               	movwf	7
 17463  01BD  3005               	movlw	5
 17464  01BE  0201               	subwf	1,w
 17465  01BF  1C03               	skipc
 17466  01C0  29D4               	goto	i1l6436
 17467                           
 17468                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17469  01C1  0879               	movf	_DimmerLightsIntr,w
 17470  01C2  3E07               	addlw	7
 17471  01C3  0086               	movwf	6
 17472  01C4  3001               	movlw	1	; select bank2/3
 17473  01C5  0087               	movwf	7
 17474  01C6  0181               	clrf	1
 17475                           
 17476                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17477  01C7  0879               	movf	_DimmerLightsIntr,w
 17478  01C8  3E08               	addlw	8
 17479  01C9  0086               	movwf	6
 17480  01CA  3001               	movlw	1	; select bank2/3
 17481  01CB  0087               	movwf	7
 17482  01CC  1281               	bcf	1,5
 17483                           
 17484                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17485  01CD  0876               	movf	setDimmerLights_IntrControl@lights,w
 17486  01CE  3A01               	xorlw	1
 17487  01CF  1D03               	skipz
 17488  01D0  29D4               	goto	i1l6436
 17489                           
 17490                           ;Dimmer_B1.c: 193: RA7 = 0;
 17491  01D1  0020               	movlb	0	; select bank0
 17492  01D2  138C               	bcf	12,7	;volatile
 17493                           
 17494                           ;Dimmer_B1.c: 194: RB4=0;
 17495  01D3  120D               	bcf	13,4	;volatile
 17496  01D4                     i1l6436:	
 17497                           
 17498                           ;Dimmer_B1.c: 195: }
 17499                           ;Dimmer_B1.c: 207: }
 17500                           ;Dimmer_B1.c: 208: }
 17501                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17502  01D4  0879               	movf	_DimmerLightsIntr,w
 17503  01D5  3E09               	addlw	9
 17504  01D6  0086               	movwf	6
 17505  01D7  3001               	movlw	1	; select bank2/3
 17506  01D8  0087               	movwf	7
 17507  01D9  1E81               	btfss	1,5
 17508  01DA  0008               	return
 17509                           
 17510                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17511  01DB  3001               	movlw	1
 17512  01DC  00F2               	movwf	??_setDimmerLights_IntrControl
 17513  01DD  0879               	movf	_DimmerLightsIntr,w
 17514  01DE  3E0A               	addlw	10
 17515  01DF  0086               	movwf	6
 17516  01E0  3001               	movlw	1	; select bank2/3
 17517  01E1  0087               	movwf	7
 17518  01E2  0872               	movf	??_setDimmerLights_IntrControl,w
 17519  01E3  0781               	addwf	1,f
 17520                           
 17521                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17522  01E4  0879               	movf	_DimmerLightsIntr,w
 17523  01E5  3E0A               	addlw	10
 17524  01E6  0086               	movwf	6
 17525  01E7  3001               	movlw	1	; select bank2/3
 17526  01E8  0087               	movwf	7
 17527  01E9  0801               	movf	1,w
 17528  01EA  3A46               	xorlw	70
 17529  01EB  1D03               	skipz
 17530  01EC  0008               	return
 17531                           
 17532                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17533  01ED  0879               	movf	_DimmerLightsIntr,w
 17534  01EE  3E0A               	addlw	10
 17535  01EF  0086               	movwf	6
 17536  01F0  3001               	movlw	1	; select bank2/3
 17537  01F1  0087               	movwf	7
 17538  01F2  0181               	clrf	1
 17539                           
 17540                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17541  01F3  0879               	movf	_DimmerLightsIntr,w
 17542  01F4  3E09               	addlw	9
 17543  01F5  0086               	movwf	6
 17544  01F6  3001               	movlw	1	; select bank2/3
 17545  01F7  0087               	movwf	7
 17546  01F8  1281               	bcf	1,5
 17547  01F9  0008               	return
 17548  01FA                     __end_of_setDimmerLights_IntrControl:	
 17549                           
 17550                           	psect	text119
 17551  1C97                     __ptext119:	
 17552 ;; *************** function _DimmerIntrPointSelect *****************
 17553 ;; Defined at:
 17554 ;;		line 65 in file "../src/Dimmer_B1.c"
 17555 ;; Parameters:    Size  Location     Type
 17556 ;;  lights          1    wreg     unsigned char 
 17557 ;; Auto vars:     Size  Location     Type
 17558 ;;  lights          1    1[COMMON] unsigned char 
 17559 ;; Return value:  Size  Location     Type
 17560 ;;		None               void
 17561 ;; Registers used:
 17562 ;;		wreg
 17563 ;; Tracked objects:
 17564 ;;		On entry : 0/0
 17565 ;;		On exit  : 0/0
 17566 ;;		Unchanged: 0/0
 17567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;Total ram usage:        2 bytes
 17573 ;; Hardware stack levels used:    1
 17574 ;; This function calls:
 17575 ;;		Nothing
 17576 ;; This function is called by:
 17577 ;;		_setDimmerLights_IntrControl
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           
 17582                           ;psect for function _DimmerIntrPointSelect
 17583  1C97                     _DimmerIntrPointSelect:	
 17584                           
 17585                           ;incstack = 0
 17586                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17587                           ;DimmerIntrPointSelect@lights stored from wreg
 17588  1C97  00F1               	movwf	DimmerIntrPointSelect@lights
 17589                           
 17590                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17591  1C98  0871               	movf	DimmerIntrPointSelect@lights,w
 17592  1C99  3A01               	xorlw	1
 17593  1C9A  1D03               	skipz
 17594  1C9B  0008               	return
 17595                           
 17596                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17597  1C9C  3030               	movlw	_DimmerLights1& (0+255)
 17598  1C9D  00F0               	movwf	??_DimmerIntrPointSelect
 17599  1C9E  0870               	movf	??_DimmerIntrPointSelect,w
 17600  1C9F  00F9               	movwf	_DimmerLightsIntr
 17601  1CA0  0008               	return
 17602  1CA1                     __end_of_DimmerIntrPointSelect:	
 17603                           
 17604                           	psect	text120
 17605  1E42                     __ptext120:	
 17606 ;; *************** function _Buz_Counter *****************
 17607 ;; Defined at:
 17608 ;;		line 23 in file "../src/Buzzer_B1.c"
 17609 ;; Parameters:    Size  Location     Type
 17610 ;;		None
 17611 ;; Auto vars:     Size  Location     Type
 17612 ;;		None
 17613 ;; Return value:  Size  Location     Type
 17614 ;;		None               void
 17615 ;; Registers used:
 17616 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17617 ;; Tracked objects:
 17618 ;;		On entry : 0/0
 17619 ;;		On exit  : 0/0
 17620 ;;		Unchanged: 0/0
 17621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;Total ram usage:        0 bytes
 17627 ;; Hardware stack levels used:    1
 17628 ;; This function calls:
 17629 ;;		Nothing
 17630 ;; This function is called by:
 17631 ;;		_TMR0_ISR
 17632 ;; This function uses a non-reentrant model
 17633 ;;
 17634                           
 17635                           
 17636                           ;psect for function _Buz_Counter
 17637  1E42                     _Buz_Counter:	
 17638                           
 17639                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 17640                           
 17641                           ;incstack = 0
 17642                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17643  1E42  0021               	movlb	1	; select bank1
 17644  1E43  0837               	movf	_Buz^(0+128),w
 17645  1E44  0086               	movwf	6
 17646  1E45  3001               	movlw	1	; select bank2/3
 17647  1E46  0087               	movwf	7
 17648  1E47  1C81               	btfss	1,1
 17649  1E48  0008               	return
 17650                           
 17651                           ;Buzzer_B1.c: 25: Buz->Counter++;
 17652  1E49  0A37               	incf	_Buz^(0+128),w
 17653  1E4A  0086               	movwf	6
 17654  1E4B  3001               	movlw	1	; select bank2/3
 17655  1E4C  0087               	movwf	7
 17656  1E4D  3001               	movlw	1
 17657  1E4E  0781               	addwf	1,f
 17658  1E4F  3141               	addfsr 1,1
 17659  1E50  1803               	skipnc
 17660  1E51  0A81               	incf	1,f
 17661  1E52  0008               	return
 17662  1E53                     __end_of_Buz_Counter:	
 17663                           
 17664                           	psect	text121
 17665  1E31                     __ptext121:	
 17666 ;; *************** function _IOC_ISR *****************
 17667 ;; Defined at:
 17668 ;;		line 298 in file "../src/MCU_B1.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;		None
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;		None
 17673 ;; Return value:  Size  Location     Type
 17674 ;;		None               void
 17675 ;; Registers used:
 17676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        0 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    3
 17689 ;; This function calls:
 17690 ;;		_setDimmerReClock
 17691 ;; This function is called by:
 17692 ;;		_ISR
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           
 17697                           ;psect for function _IOC_ISR
 17698  1E31                     _IOC_ISR:	
 17699                           
 17700                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 17701                           
 17702                           ;incstack = 0
 17703                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17704  1E31  1D8B               	btfss	11,3	;volatile
 17705  1E32  0008               	return
 17706  1E33  0027               	movlb	7	; select bank7
 17707  1E34  1D16               	btfss	22,2	;volatile
 17708  1E35  0008               	return
 17709                           
 17710                           ;MCU_B1.c: 300: IOCBF2 = 0;
 17711  1E36  1116               	bcf	22,2	;volatile
 17712                           
 17713                           ;MCU_B1.c: 301: IOCIF = 0;
 17714  1E37  100B               	bcf	11,0	;volatile
 17715                           
 17716                           ;MCU_B1.c: 302: if (myMain->PowerON == 1) {
 17717  1E38  0021               	movlb	1	; select bank1
 17718  1E39  086D               	movf	_myMain^(0+128),w
 17719  1E3A  0086               	movwf	6
 17720  1E3B  3001               	movlw	1	; select bank2/3
 17721  1E3C  0087               	movwf	7
 17722  1E3D  1C01               	btfss	1,0
 17723  1E3E  0008               	return
 17724                           
 17725                           ;MCU_B1.c: 304: setDimmerReClock();
 17726  1E3F  319C  2462         	fcall	_setDimmerReClock
 17727  1E41  0008               	return
 17728  1E42                     __end_of_IOC_ISR:	
 17729                           
 17730                           	psect	text122
 17731  1C62                     __ptext122:	
 17732 ;; *************** function _setDimmerReClock *****************
 17733 ;; Defined at:
 17734 ;;		line 175 in file "../src/MCU_B1.c"
 17735 ;; Parameters:    Size  Location     Type
 17736 ;;		None
 17737 ;; Auto vars:     Size  Location     Type
 17738 ;;		None
 17739 ;; Return value:  Size  Location     Type
 17740 ;;		None               void
 17741 ;; Registers used:
 17742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17743 ;; Tracked objects:
 17744 ;;		On entry : 0/0
 17745 ;;		On exit  : 0/0
 17746 ;;		Unchanged: 0/0
 17747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17752 ;;Total ram usage:        0 bytes
 17753 ;; Hardware stack levels used:    1
 17754 ;; Hardware stack levels required when called:    2
 17755 ;; This function calls:
 17756 ;;		_setDimmerLights_IntrIOC_GO
 17757 ;; This function is called by:
 17758 ;;		_IOC_ISR
 17759 ;; This function uses a non-reentrant model
 17760 ;;
 17761                           
 17762                           
 17763                           ;psect for function _setDimmerReClock
 17764  1C62                     _setDimmerReClock:	
 17765                           
 17766                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 17767                           
 17768                           ;incstack = 0
 17769                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17770  1C62  3001               	movlw	1
 17771  1C63  319F  27A3         	fcall	_setDimmerLights_IntrIOC_GO
 17772                           
 17773                           ;MCU_B1.c: 191: TMR0 = 255;
 17774  1C65  30FF               	movlw	255
 17775  1C66  0020               	movlb	0	; select bank0
 17776  1C67  0095               	movwf	21	;volatile
 17777  1C68  0008               	return
 17778  1C69                     __end_of_setDimmerReClock:	
 17779                           
 17780                           	psect	text123
 17781  1FA3                     __ptext123:	
 17782 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17783 ;; Defined at:
 17784 ;;		line 28 in file "../src/Dimmer_B1.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;  lights          1    wreg     unsigned char 
 17787 ;; Auto vars:     Size  Location     Type
 17788 ;;  lights          1    2[COMMON] unsigned char 
 17789 ;; Return value:  Size  Location     Type
 17790 ;;		None               void
 17791 ;; Registers used:
 17792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17793 ;; Tracked objects:
 17794 ;;		On entry : 0/0
 17795 ;;		On exit  : 0/0
 17796 ;;		Unchanged: 0/0
 17797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;Total ram usage:        1 bytes
 17803 ;; Hardware stack levels used:    1
 17804 ;; Hardware stack levels required when called:    1
 17805 ;; This function calls:
 17806 ;;		_DimmerIntrIOCPointSelect
 17807 ;; This function is called by:
 17808 ;;		_setDimmerReClock
 17809 ;; This function uses a non-reentrant model
 17810 ;;
 17811                           
 17812                           
 17813                           ;psect for function _setDimmerLights_IntrIOC_GO
 17814  1FA3                     _setDimmerLights_IntrIOC_GO:	
 17815                           
 17816                           ;incstack = 0
 17817                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17818                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17819  1FA3  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17820                           
 17821                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17822  1FA4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17823  1FA5  319C  24AB  319F   	fcall	_DimmerIntrIOCPointSelect
 17824                           
 17825                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17826  1FA8  0021               	movlb	1	; select bank1
 17827  1FA9  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17828  1FAA  0086               	movwf	6
 17829  1FAB  3001               	movlw	1	; select bank2/3
 17830  1FAC  0087               	movwf	7
 17831  1FAD  1801               	btfsc	1,0
 17832  1FAE  0008               	return
 17833  1FAF  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17834  1FB0  3E09               	addlw	9
 17835  1FB1  0086               	movwf	6
 17836  1FB2  3001               	movlw	1	; select bank2/3
 17837  1FB3  0087               	movwf	7
 17838  1FB4  1A81               	btfsc	1,5
 17839  1FB5  0008               	return
 17840                           
 17841                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17842  1FB6  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17843  1FB7  0086               	movwf	6
 17844  1FB8  3001               	movlw	1	; select bank2/3
 17845  1FB9  0087               	movwf	7
 17846  1FBA  1401               	bsf	1,0
 17847                           
 17848                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17849  1FBB  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17850  1FBC  3E09               	addlw	9
 17851  1FBD  0086               	movwf	6
 17852  1FBE  3001               	movlw	1	; select bank2/3
 17853  1FBF  0087               	movwf	7
 17854  1FC0  1681               	bsf	1,5
 17855  1FC1  0008               	return
 17856  1FC2                     __end_of_setDimmerLights_IntrIOC_GO:	
 17857                           
 17858                           	psect	text124
 17859  1CAB                     __ptext124:	
 17860 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17861 ;; Defined at:
 17862 ;;		line 8 in file "../src/Dimmer_B1.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  lights          1    wreg     unsigned char 
 17865 ;; Auto vars:     Size  Location     Type
 17866 ;;  lights          1    1[COMMON] unsigned char 
 17867 ;; Return value:  Size  Location     Type
 17868 ;;		None               void
 17869 ;; Registers used:
 17870 ;;		wreg
 17871 ;; Tracked objects:
 17872 ;;		On entry : 0/0
 17873 ;;		On exit  : 0/0
 17874 ;;		Unchanged: 0/0
 17875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17880 ;;Total ram usage:        2 bytes
 17881 ;; Hardware stack levels used:    1
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_setDimmerLights_IntrIOC_GO
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _DimmerIntrIOCPointSelect
 17891  1CAB                     _DimmerIntrIOCPointSelect:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17895                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17896  1CAB  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17897                           
 17898                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17899  1CAC  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17900  1CAD  3A01               	xorlw	1
 17901  1CAE  1D03               	skipz
 17902  1CAF  0008               	return
 17903                           
 17904                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17905  1CB0  3030               	movlw	_DimmerLights1& (0+255)
 17906  1CB1  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17907  1CB2  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17908  1CB3  0021               	movlb	1	; select bank1
 17909  1CB4  00BC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17910  1CB5  0008               	return
 17911  1CB6                     __end_of_DimmerIntrIOCPointSelect:	
 17912                           
 17913                           	psect	text125
 17914  1E20                     __ptext125:	
 17915 ;; *************** function _INT_ISR *****************
 17916 ;; Defined at:
 17917 ;;		line 250 in file "../src/MCU_B1.c"
 17918 ;; Parameters:    Size  Location     Type
 17919 ;;		None
 17920 ;; Auto vars:     Size  Location     Type
 17921 ;;		None
 17922 ;; Return value:  Size  Location     Type
 17923 ;;		None               void
 17924 ;; Registers used:
 17925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17926 ;; Tracked objects:
 17927 ;;		On entry : 0/0
 17928 ;;		On exit  : 0/0
 17929 ;;		Unchanged: 0/0
 17930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17935 ;;Total ram usage:        0 bytes
 17936 ;; Hardware stack levels used:    1
 17937 ;; Hardware stack levels required when called:    2
 17938 ;; This function calls:
 17939 ;;		_setRF_ReceiveGO
 17940 ;;		_setRF_RxStatus
 17941 ;; This function is called by:
 17942 ;;		_ISR
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           
 17947                           ;psect for function _INT_ISR
 17948  1E20                     _INT_ISR:	
 17949                           
 17950                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 17951                           
 17952                           ;incstack = 0
 17953                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17954  1E20  1E0B               	btfss	11,4	;volatile
 17955  1E21  0008               	return
 17956  1E22  1C8B               	btfss	11,1	;volatile
 17957  1E23  0008               	return
 17958                           
 17959                           ;MCU_B1.c: 252: INTF = 0;
 17960  1E24  108B               	bcf	11,1	;volatile
 17961                           
 17962                           ;MCU_B1.c: 253: INTE = 0;
 17963  1E25  120B               	bcf	11,4	;volatile
 17964                           
 17965                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 17966  1E26  01F2               	clrf	setRF_ReceiveGO@command
 17967  1E27  0AF2               	incf	setRF_ReceiveGO@command,f
 17968  1E28  3001               	movlw	1
 17969  1E29  319C  24D7  319E   	fcall	_setRF_ReceiveGO
 17970                           
 17971                           ;MCU_B1.c: 255: setRF_RxStatus(1, 0);
 17972  1E2C  01F2               	clrf	setRF_RxStatus@command
 17973  1E2D  3001               	movlw	1
 17974  1E2E  319C  24E3         	fcall	_setRF_RxStatus
 17975  1E30  0008               	return
 17976  1E31                     __end_of_INT_ISR:	
 17977                           
 17978                           	psect	text126
 17979  1CE3                     __ptext126:	
 17980 ;; *************** function _setRF_RxStatus *****************
 17981 ;; Defined at:
 17982 ;;		line 45 in file "../src/RF_Control_B1.c"
 17983 ;; Parameters:    Size  Location     Type
 17984 ;;  rf              1    wreg     unsigned char 
 17985 ;;  command         1    2[COMMON] unsigned char 
 17986 ;; Auto vars:     Size  Location     Type
 17987 ;;  rf              1    3[COMMON] unsigned char 
 17988 ;; Return value:  Size  Location     Type
 17989 ;;		None               void
 17990 ;; Registers used:
 17991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17992 ;; Tracked objects:
 17993 ;;		On entry : 0/0
 17994 ;;		On exit  : 0/0
 17995 ;;		Unchanged: 0/0
 17996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17997 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18001 ;;Total ram usage:        2 bytes
 18002 ;; Hardware stack levels used:    1
 18003 ;; Hardware stack levels required when called:    1
 18004 ;; This function calls:
 18005 ;;		i1_RfPointSelect
 18006 ;; This function is called by:
 18007 ;;		_INT_ISR
 18008 ;; This function uses a non-reentrant model
 18009 ;;
 18010                           
 18011                           
 18012                           ;psect for function _setRF_RxStatus
 18013  1CE3                     _setRF_RxStatus:	
 18014                           
 18015                           ;incstack = 0
 18016                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18017                           ;setRF_RxStatus@rf stored from wreg
 18018  1CE3  00F3               	movwf	setRF_RxStatus@rf
 18019                           
 18020                           ;RF_Control_B1.c: 46: RfPointSelect(rf);
 18021  1CE4  0873               	movf	setRF_RxStatus@rf,w
 18022  1CE5  319D  2543         	fcall	i1_RfPointSelect
 18023                           
 18024                           ;RF_Control_B1.c: 47: RF->RxStatus = command;
 18025  1CE7  087A               	movf	_RF,w
 18026  1CE8  0086               	movwf	6
 18027  1CE9  0187               	clrf	7
 18028  1CEA  0872               	movf	setRF_RxStatus@command,w
 18029  1CEB  1181               	bcf	1,3
 18030  1CEC  1D03               	skipz
 18031  1CED  1581               	bsf	1,3
 18032  1CEE  0008               	return
 18033  1CEF                     __end_of_setRF_RxStatus:	
 18034                           
 18035                           	psect	text127
 18036  1CD7                     __ptext127:	
 18037 ;; *************** function _setRF_ReceiveGO *****************
 18038 ;; Defined at:
 18039 ;;		line 39 in file "../src/RF_Control_B1.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;  rf              1    wreg     unsigned char 
 18042 ;;  command         1    2[COMMON] unsigned char 
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;  rf              1    3[COMMON] unsigned char 
 18045 ;; Return value:  Size  Location     Type
 18046 ;;		None               void
 18047 ;; Registers used:
 18048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18049 ;; Tracked objects:
 18050 ;;		On entry : 0/0
 18051 ;;		On exit  : 0/0
 18052 ;;		Unchanged: 0/0
 18053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;Total ram usage:        2 bytes
 18059 ;; Hardware stack levels used:    1
 18060 ;; Hardware stack levels required when called:    1
 18061 ;; This function calls:
 18062 ;;		i1_RfPointSelect
 18063 ;; This function is called by:
 18064 ;;		_INT_ISR
 18065 ;; This function uses a non-reentrant model
 18066 ;;
 18067                           
 18068                           
 18069                           ;psect for function _setRF_ReceiveGO
 18070  1CD7                     _setRF_ReceiveGO:	
 18071                           
 18072                           ;incstack = 0
 18073                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18074                           ;setRF_ReceiveGO@rf stored from wreg
 18075  1CD7  00F3               	movwf	setRF_ReceiveGO@rf
 18076                           
 18077                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 18078  1CD8  0873               	movf	setRF_ReceiveGO@rf,w
 18079  1CD9  319D  2543         	fcall	i1_RfPointSelect
 18080                           
 18081                           ;RF_Control_B1.c: 41: RF->ReceiveGO = command;
 18082  1CDB  087A               	movf	_RF,w
 18083  1CDC  0086               	movwf	6
 18084  1CDD  0187               	clrf	7
 18085  1CDE  0872               	movf	setRF_ReceiveGO@command,w
 18086  1CDF  1081               	bcf	1,1
 18087  1CE0  1D03               	skipz
 18088  1CE1  1481               	bsf	1,1
 18089  1CE2  0008               	return
 18090  1CE3                     __end_of_setRF_ReceiveGO:	
 18091                           
 18092                           	psect	text128
 18093  1D43                     __ptext128:	
 18094 ;; *************** function i1_RfPointSelect *****************
 18095 ;; Defined at:
 18096 ;;		line 7 in file "../src/RF_Control_B1.c"
 18097 ;; Parameters:    Size  Location     Type
 18098 ;;  rf              1    wreg     unsigned char 
 18099 ;; Auto vars:     Size  Location     Type
 18100 ;;  rf              1    1[COMMON] unsigned char 
 18101 ;; Return value:  Size  Location     Type
 18102 ;;		None               void
 18103 ;; Registers used:
 18104 ;;		wreg
 18105 ;; Tracked objects:
 18106 ;;		On entry : 0/0
 18107 ;;		On exit  : 0/0
 18108 ;;		Unchanged: 0/0
 18109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18114 ;;Total ram usage:        2 bytes
 18115 ;; Hardware stack levels used:    1
 18116 ;; This function calls:
 18117 ;;		Nothing
 18118 ;; This function is called by:
 18119 ;;		_setRF_ReceiveGO
 18120 ;;		_setRF_RxStatus
 18121 ;; This function uses a non-reentrant model
 18122 ;;
 18123                           
 18124                           
 18125                           ;psect for function i1_RfPointSelect
 18126  1D43                     i1_RfPointSelect:	
 18127                           
 18128                           ;incstack = 0
 18129                           ; Regs used in i1_RfPointSelect: [wreg]
 18130                           ;i1RfPointSelect@rf stored from wreg
 18131  1D43  00F1               	movwf	i1RfPointSelect@rf
 18132                           
 18133                           ;RF_Control_B1.c: 9: if (rf == 1) {
 18134  1D44  0871               	movf	i1RfPointSelect@rf,w
 18135  1D45  3A01               	xorlw	1
 18136  1D46  1D03               	skipz
 18137  1D47  2D4C               	goto	i1l6252
 18138                           
 18139                           ;RF_Control_B1.c: 10: RF = &RF1;
 18140  1D48  30D4               	movlw	_RF1& (0+255)
 18141  1D49  00F0               	movwf	??i1_RfPointSelect
 18142  1D4A  0870               	movf	??i1_RfPointSelect,w
 18143  1D4B  00FA               	movwf	_RF
 18144  1D4C                     i1l6252:	
 18145                           
 18146                           ;RF_Control_B1.c: 11: }
 18147                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 18148  1D4C  1A0B               	btfsc	11,4	;volatile
 18149  1D4D  0008               	return
 18150                           
 18151                           ;RF_Control_B1.c: 13: INTE = 1;
 18152  1D4E  160B               	bsf	11,4	;volatile
 18153  1D4F  0008               	return
 18154  1D50                     __end_ofi1_RfPointSelect:	
 18155  007E                     btemp	set	126	;btemp
 18156  007E                     pic14e$flags	set	126
 18157  007E                     wtemp	set	126
 18158  007E                     wtemp0	set	126
 18159  0080                     wtemp1	set	128
 18160  0082                     wtemp2	set	130
 18161  0084                     wtemp3	set	132
 18162  0086                     wtemp4	set	134
 18163  0088                     wtemp5	set	136
 18164  007F                     wtemp6	set	127
 18165  007E                     ttemp	set	126
 18166  007E                     ttemp0	set	126
 18167  0081                     ttemp1	set	129
 18168  0084                     ttemp2	set	132
 18169  0087                     ttemp3	set	135
 18170  007F                     ttemp4	set	127
 18171  007E                     ltemp	set	126
 18172  007E                     ltemp0	set	126
 18173  0082                     ltemp1	set	130
 18174  0086                     ltemp2	set	134
 18175  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         176
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      79
    BANK2            80      0      60
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK1[8]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK2[16]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getPowerFault_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   79946
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
                   _getPowerFault_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1461
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     130
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19627
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   19627
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8739
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8346
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0     927
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     866
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     866
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26386
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   26386
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   25658
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1267
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24347
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9699
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     849
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    4469
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    4469
                                             16 BANK0      2     2      0
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    4469
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      44
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     194
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3277
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     196
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    1768
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     932
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     932
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9079
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8989
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1190
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     822
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      90
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9146
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9146
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     386
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     450
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     414
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _getPowerFault_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3C       9       75.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 14 17:19:29 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _PF 00BE                                       _RD 0CA8  
                                     _RF 007A                  __end_of_CC2500_WriteREG 1F01  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007B       __end_of_getDimmerLights_StatusFlag 1CAB  
             _getDimmerLights_StatusFlag 1CA1                   __end_of_setDelayOff_GO 17A2  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0799  
                           ___ftadd@sign 0048                                      l260 13F3  
                                    l326 1EDB                                      l350 1DC8  
                                    l327 1EDD                                      l280 0834  
                                    l265 141D                                      l362 1100  
                                    l338 1EF0                                      l266 1422  
                                    l356 1F58                                      l276 0823  
                                    l293 1246                                      l269 1425  
                                    l296 124C                                      l832 16C2  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 00C7  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BD                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00D4  
                                    _ISR 0004                                      _WDT 00EC  
        setPowerFault_Exceptions@command 002F                                      _Sw1 014B  
                                    _Buz 00B7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1EE8           ??_setDimmerLights_TriggerERROR 0023  
                          ??_Buz_Counter 0070                    _Buzzer_Initialization 1CEF  
                        __end_of_ADC_Set 1C7E                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0BE4                    _setDimmerLights_ERROR 1594  
                  _setDimmerLights_AdjRF 10D9                    _setDimmerLights_AdjGo 1E00  
                                   ?_ISR 0070                          _PowerFault_Main 1C24  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1E42  
                           ___ftdiv@sign 003D                                     l2024 1540  
                                   l1320 1EAB                                     l2051 1393  
                                   l1346 12AF                 ?_DimmerLightsPointSelect 0070  
                                   l1802 13D2                          __end_of_IOC_Set 1D6A  
                                   l6000 0877                                     l6010 1111  
                                   l5210 0493                                     l6012 111C  
                                   l5220 04B5                                     l5300 06FC  
                                   l2389 1C4B                                     l5150 08FC  
                                   l5142 08E6                                     l5230 04D6  
                                   l5222 04B9                                     l5216 04A6  
                                   l2905 04DA                                     l5146 08ED  
                                   l5234 04EC                                     l5218 04B0  
                                   l5330 0769                                     l5322 0755  
                                   l5306 0712                                     l5410 11A8  
                                   l5156 0915                                     l5148 08F7  
                                   l6044 1301                                     l5228 04CC  
                                   l5412 11AA                                     l5420 11B3  
                                   l6204 167E                                     l5510 1631  
                                   l5502 1620                                     l5158 091D  
                                   l5350 0C7D                                     l1798 0615  
                                   l5238 04FE                                     l5334 0771  
                                   l5318 074D                                     l5414 11AC  
                                   l5422 11C7                                     l5406 11A4  
                                   l5176 10A0                                     l5264 0ED1  
                                   l7032 146D                                     l6136 1085  
                                   l5248 0519                                     l5192 046A  
                                   l5416 11AE                                     l5408 11A6  
                                   l6152 155E                                     l6240 0AD2  
                                   l5506 1629                                     l2882 0927  
                                   l5258 0EBB                                     l5370 0CBB  
                                   l5450 10CE                                     l6090 1293  
                                   l5602 1794                                     l5524 0D2C  
                                   l2876 0910                                     l5380 0CD4  
                                   l5620 17B2                                     l5188 0463  
                                   l6164 1574                                     l5286 0F2B  
                                   l5278 0F12                                     l5446 10C3  
                                   l5702 1F96                                     l5198 0479  
                                   l5528 0D50                                     l5384 0CE2  
                                   l5376 0CC8                                     l5368 0CAD  
                                   l5624 17B8                                     l5704 1F9C  
                                   l7152 08A0                                     l5378 0CD1  
                                   l5458 1D81                                     l5650 17EA  
                                   l5634 17C8                                     l5642 17D4  
                                   l6522 1362                                     l5484 15FA  
                                   l5556 099A                                     l5628 17BE  
                                   l5740 0C38                                     l6612 09CA  
                                   l5812 1381                                     l6700 0639  
                                   l7156 08AB                                     l5494 1602  
                                   l5478 15EF                                     l5654 17F0  
                                   l5638 17CE                                     l6606 09B1  
                                   l6518 135B                                     l6710 0652  
                                   l5496 160E                                     l6480 07C0  
                                   l6616 0A10                                     l5592 1775  
                                   l7096 0B65                                     l7088 0B39  
                                   l5658 17F6                                     l5850 16BE  
                                   l5666 12C3                                     l5922 0A59  
                                   l6722 0677                                     l6484 07CC  
                                   l5844 16A6                                     l6644 0566  
                                   l5596 177B                                     l5772 0D91  
                                   l5932 0A7D                                     l6804 0245  
                                   l5598 1788                                     l5782 0DB5  
                                   l6734 0690                                     l6814 0277  
                                   l6496 07F9                                     l5848 16B9  
                                   l6664 05CB                                     l5928 0A74  
                                   l5954 1405                                     l6746 06B1  
                                   l6676 0606                                     l6668 05EC  
                                   l5788 0DCB                                     l6828 02BB  
                                   l6678 060B                                     l6758 06CB  
                                   l6838 02EE                                     l6880 0FB5  
                                   l5986 0846                                     l6892 0FEF  
                                   l5988 085E                                     l6788 0210  
                  _myMain_Initialization 1E78                                     l6886 0FE1  
                                   l6888 0FE7                                     l6988 03BD  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1E31                                     _LATC 010E  
                                   u4005 1619                                     u4015 1621  
                                   u3225 08F2                                     u3245 090B  
                                   u3415 0494                                     u4080 0948  
                                   u3265 0918                                     u3505 04CD  
                                   u3605 0F22                                     u4085 0946  
                                   u3445 04A7                                     u3295 092E  
                                   u3615 0F2C                                     u6025 0F71  
                                   u3475 04BA                                     _PEIE 005E  
                                   u3725 0772                                     _INTE 005C  
                                   _INTF 0059                                     u3575 0EE3  
                                   u6215 1454                                     u3735 0778  
                                   u3655 071E                                     u4705 1106  
                                   u3585 0EF3                                     u3825 0CC9  
                                   u3665 072E                                     u3595 0F13  
                                   u3765 0C84                                     u3685 0756  
                                   u3695 075C                                     u6255 14AA  
                                   u3795 0CAE                                     u6275 0B11  
                                   u6285 0B4F                                     u3975 1605  
                                   u3995 160F                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1C56                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 013F  
                                   __WDT 00E8                                     _main 087F  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 1C24  
                    __end_of_DlyOff_Main 0BE4                          __end_of_RF_Main 1C47  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1ECF  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1C62                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 13A9                      DelayTimejudge@value 0021  
                          _RfPointSelect 1D77               __end_of_setRFSW_AdjControl 13A9  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
            __size_of_setPowerFault_Main 00EC                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1D43  
          __end_of_DimmerIntrPointSelect 1CA1                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 1638  
                        __end_of___ftadd 0531                          __end_of___ftdiv 0F4D  
                        __end_of___ftmul 0799                          ___awdiv@divisor 0020  
                        __end_of___fttol 0CEB             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                   _setDimmerLights_Switch 1DD0  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EA                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1FC2               _setDimmerLights_IntrIOC_GO 1FA3  
                       __end_of_TMR0_ISR 1283             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1D77                                    _getAD 1EA1  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 16EA  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 0B6B  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1F86              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                    __end_of_Buz_Counter 1E53                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1E64                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 093E  
            __size_of_Flash_Memory_Write 0033                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0004  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 16EA                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 08DD                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1C3F                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0C64  
                   _setSw_Initialization 1DF0                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0A18                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 1C27                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1CCC                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0B6B  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                      ?_getPowerFault_AD 0070                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 10B7                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 093E                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1DE0                                   i1l6400 0140  
                                 i1l6410 016F                                   i1l6252 1D4C  
                                 i1l6412 0175                                   i1l6404 0154  
                                 i1l6422 01A8                                   i1l6436 01D4  
                                 i1l6364 00A4                                   i1l6382 00EE  
                                 i1l6390 010D                                   i1l6384 00F4  
                                 i1l6396 0129                                   i1l6388 0107  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   u513_25 007D  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u612_25 1272  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1F01                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1C69  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1EA1  
                                 _Dimmer 00BA                                   _DlySw1 00CF  
             __end_of_Mcu_Initialization 1F4F                      __end_of_Buzzer_Main 1000  
                                 _Memory 00EE                                   _Timer0 00EB  
     __end_of_setDimmerLights_TriggerAdj 1E20               _setDimmerLights_TriggerAdj 1E10  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                          i1_RfPointSelect 1D43  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C5                                   _s_data 00C6  
                                 _setLED 17A2                                   _myMain 00ED  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0CEB         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 01FA              _setDimmerLights_IntrControl 0044  
               Flash_Memory_Read@address 0022                              _Buz_Counter 1E42  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0073  
                  __end_of_SwPointSelect 1CD7                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1D13  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1C4B                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1745         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1DC0    __size_of_setPowerFault_Initialization 000F  
           _setPowerFault_Initialization 1DB1                  __end_of__initialization 0040  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 0801                            __end_of_getAD 1EB7  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003E                       _LED_Initialization 1D2B  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000C  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                       ?_PowerFault_Main 0070                 __end_of_setDimmerReClock 1C69  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0023  
                         _DimmerLights11 00BB                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002E  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0F4D  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1C33                               __pnvCOMMON 007D  
          ?_setPowerFault_Initialization 0070                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0078  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1D50  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 000E  
                            setBuz@count 002C                               __pmaintext 087F  
                    _CC2500_WriteCommand 1DC0         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 0077                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A0  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1C77                _PowerFault_Initialization 1C21  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1C85                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1369                  __end_of_RfSWPointSelect 1D1F  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1E31  
                                _IOC_Set 1D5D                     __size_of_setLog_Code 0047  
                                _INT_ISR 1E20                                  _INT_Set 1C50  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1430  
                      _Flash_Memory_Read 1F1A              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 005E                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 1C43                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1EB7  
        __end_of_setControl_Lights_Table 0A86                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 1638  
                        _setPercentValue 14BA                            setLog_Code@rf 002E  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00E5             __end_of_CC2500_FrequencyCabr 1D07  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00DD  
                                _VarLED2 00E1                        __end_of_getRxData 1594  
             __end_of_setPowerFault_Main 061D                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1CB6                           RF_RxDisable@rf 0024  
        __end_of_setDimmerLights_Trigger 1DF0                     ??_setRFSW_AdjControl 0064  
         __end_of_setDimmerLights_Switch 1DE0                                  ___awdiv 15E4  
                                ___ftadd 043B                           ??_setSw_Enable 0022  
                                ___ftdiv 0EA4                                  ___ftmul 06E5  
                                ___fttol 0C64                      __end_of_Switch_Main 1C4B  
                ??_Buzzer_Initialization 0020                                  __myMain 0120  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0089  
                         ??_setSw_Status 0023                                  __ptext1 0AF7  
                                __ptext2 1E78                                  __ptext3 1475  
                                __ptext4 1EA1                                  __ptext5 1F6A  
                                __ptext6 0002                                  __ptext7 1C47  
                                __ptext8 01FA                                  __ptext9 1D85  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1C97                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1475                __end_of_Flash_Memory_Read 1F34  
                             _setRF_Main 061D                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1C37                        _DimmerLights_Main 1C70  
                                _my_Main 0AF7           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1CC1  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 1C2B  
             __end_of_CC2500_ClearTXFIFO 1C2F            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 10B7  
                    _DelayOffPointSelect 1D07                                  clrloop0 1C5D  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1C97  
                   end_of_initialization 0040                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1148                            _DelayTime_1us 10FB  
                      __end_of_setTxData 0EA4               __end_of_Flash_Memory_Write 12B6  
                                init_ram 1C56                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C57                               _setSw_Main 01FA  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1F4F  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1E53  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0821                            _CC2500_TxData 13EC  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1148  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0045            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 09AA  
                _DimmerLights_Exceptions 1690                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C85                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1C77                       _Mcu_Initialization 1F34  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4867 0067  
                       __CFG_FOSC$INTOSC 0000                             ?_Buz_Counter 0070  
                 __end_of_LedPointSelect 10D9                  __end_of_Sw_DimmerOnFunc 1690  
                __end_of_setPercentValue 1500                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1172                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 13EC                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 12EB                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F6A                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1F1A  
                   _setRF_Initialization 1C7E                              _Switch_Main 1C47  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CC1  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E8C  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 002C                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1CAB                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0031                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 2000  
          __size_of_setDimmerLights_Main 0066                           __end_of_setLED 1800  
                         __end_of_setBuz 0D74                     _CC2500_FrequencyCabr 1CFB  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0D74                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 12B6                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1E78                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1FE1                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1075                          RfPointSelect@rf 0021  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D9                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1DB1                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                              _VarMemory 01A0                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 1D85                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 0154                ??_DimmerLights_Exceptions 002D  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C3  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1C2F               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 12EB                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4022 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0130  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 0027  
                        ??_CC2500_RxData 0024                  __size_of_setRF_RxStatus 000C  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00EB  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00C8                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                         _getPowerFault_AD 1475  
      __size_of_setPowerFault_Exceptions 0043      __end_of_Flash_Memory_Initialization 043B  
            _Flash_Memory_Initialization 0343                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1CB6  
                              __ptext101 1D07                                __ptext110 1C2B  
                              __ptext102 1E8C                                __ptext111 1C27  
                              __ptext103 1C2F                                __ptext120 1E42  
                              __ptext112 1DC0                                __ptext104 1222  
                              __ptext121 1E31                                __ptext113 1ECF  
                              __ptext105 1148                                __ptext122 1C62  
                              __ptext114 0F4D                                __ptext106 1FC2  
                              __ptext123 1FA3                                __ptext115 1CEF  
                              __ptext107 1EE8                                __ptext124 1CAB  
                              __ptext108 1CFB                                __ptext125 1E20  
                              __ptext117 1252                                __ptext109 10FB  
                               ?___ftadd 003E                                __ptext126 1CE3  
                              __ptext118 0044                                __ptext127 1CD7  
                              __ptext119 1C97                                __ptext128 1D43  
                              _getRxData 1547                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0E04                          _setRF_ReceiveGO 1CD7  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 1CFB                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1C50                       _setPowerFault_Main 0531  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0050  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 0149            __end_of_setDimmerLights_ERROR 15E4  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 10FB  
          __end_of_setDimmerLights_AdjGo 1E10                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C4  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1E8C                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0016                             _setRF_Enable 1121  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 1CCC  
                   __size_of_Buz_Counter 0011                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1369                      _DimmerLightsIntrIOC 00BC  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1D37                          SwPointSelect@sw 0021  
                              clear_ram0 1C5C                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0E04      __end_of_DimmerLights_Initialization 1D5D  
            _DimmerLights_Initialization 1D50                       _CC2500_ClearRXFIFO 1C27  
                     _CC2500_ClearTXFIFO 1C2B           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D93                     ??_setPowerFault_Main 0030  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                  __size_of_setMemory_GO 001F                       _Flash_Memory_Write 1283  
                             ?_getRxData 0070                                 _TMR0_ISR 1252  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 1D6A  
                       _Sw_DimmerAdjFunc 11C9                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1095  
            __end_of_CC2500_WriteCommand 1DD0                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1F6A                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0A86  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B9                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1D2B                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 0011                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 1547                    _DlyOff_Initialization 1CB6  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0004                                 _Fosc_Set 1C3B  
                       __size_of_WDT_Set 0018                    _Switch_Initialization 1C8E  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1D93                             _setMemory_GO 1FE1  
                   __size_of_Buzzer_Main 00B3                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1ECF             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1CE3                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 119D    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1172                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1066                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000D  
                               ___awtoft 1095                         ??_LedPointSelect 0020  
                               ___ftpack 08DD                             _setSw_Status 1DA2  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1329                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 09AA                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 1638                                 __ptext11 0A86  
                               __ptext20 1547                                 __ptext12 11C9  
                               __ptext21 1500                                 __ptext13 1E10  
                               __ptext30 06E5                                 __ptext22 0A18  
                               __ptext14 1E00                                 __ptext31 043B  
                               __ptext23 0D74                                 __ptext15 1C8E  
                               __ptext40 0531                                 __ptext32 1075  
                               __ptext24 1745                                 __ptext16 1DF0  
                               __ptext41 13A9                                 __ptext33 13EC  
                               __ptext25 119D                                 __ptext17 1C4B  
                               __ptext50 1EB7                                 __ptext42 1066  
                               __ptext34 0821                                 __ptext26 1369  
                               __ptext18 1C43                                 __ptext51 1D6A  
                               __ptext43 1121                                 __ptext35 1F4F  
                               __ptext27 12B6                                 __ptext19 061D  
                               __ptext60 1E53                                 __ptext52 1F01  
                               __ptext44 1690                                 __ptext36 1F86  
                               __ptext28 10D9                                 __ptext61 1430  
                               __ptext53 1D5D                                 __ptext45 1172  
                               __ptext37 1C3F                                 __ptext29 16EA  
                               __ptext70 12EB                                 __ptext62 09AA  
                               __ptext54 1C50                                 __ptext46 1594  
                               __ptext38 1C7E                                 __ptext71 0BE4  
                               __ptext63 1D1F                                 __ptext55 1C3B  
                               __ptext47 1C21                                 __ptext39 1C24  
                               __ptext80 1C37                                 __ptext72 17A2  
                               __ptext64 0343                                 __ptext56 1C77  
                               __ptext48 1DB1                                 __ptext81 0B6B  
                               __ptext73 10B7                                 __ptext65 1283  
                               __ptext57 1D37                                 __ptext49 1F34  
                               __ptext90 1095                                 __ptext82 0E04  
                               __ptext74 1E64                                 __ptext66 1C85  
                               __ptext58 1329                                 __ptext91 08DD  
                               __ptext83 1D77                                 __ptext75 1FE1  
                               __ptext67 1F1A                                 __ptext59 1D2B  
                               __ptext92 1D93                                 __ptext84 1DA2  
                               __ptext76 1CA1                                 __ptext68 1C70  
                               __ptext93 1D13                                 __ptext85 1CCC  
                               __ptext77 1D50                                 __ptext69 0799  
                               __ptext94 1DE0                                 __ptext86 093E  
                               __ptext78 11F5                                 __ptext95 1DD0  
                               __ptext87 14BA                                 __ptext79 1C69  
                               __ptext96 1CC1                                 __ptext88 0C64  
                               __ptext97 0CEB                                 __ptext89 0EA4  
                               __ptext98 15E4                                 __ptext99 1C33  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1DA2  
          __end_of_Dimmer_Initialization 1C70             __end_of_setDimmerLights_Main 07FF  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 005E  
                            _setRF_Learn 1D85                 __end_of_CC2500_SIDLEMode 1C33  
                         _setRF_RxStatus 1CE3               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1D13               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1E64                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0007                          _CC2500_ReadByte 1F86  
                     _CC2500_InitPATable 1FC2      __size_of_getDimmerLights_StatusFlag 000A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 06E5  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1222  
            __end_of_Flash_Memory_Modify 0A18                        ??_getPercentValue 0059  
                            _setLog_Code 1500                    setRF_RxStatus@command 0072  
            __end_of_Flash_Memory_Unlock 1C8E                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EE8                       __end_of_setSw_Main 0343  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 119D                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 14BA                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1CEF                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1222  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 11F5  
            __end_of_setDimmerLights_Adj 1329                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1C3F  
   __size_of_setDimmerLights_IntrControl 01B6                     _Flash_Memory_Erasing 1D1F  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 1C37      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1C3B                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1745  
       __size_of_setControl_Lights_Table 006E                   __end_of_DelayTimejudge 11C9  
                 __size_of_RfPointSelect 000E                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1121                 __end_of_Sw_DimmerAdjFunc 11F5  
                __end_of_CC2500_ReadByte 1FA3             __end_of_setSw_Initialization 1E00  
                        ?_setRF_RxStatus 0072                     getPercentValue@value 005B  
                           _RF_RxDisable 1075               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 1D37         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0058                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1C43                 __end_of_Sw_DimmerOffFunc 0AF7  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0073                    __end_of_CC2500_RxData 087F  
                  __end_of_CC2500_TxData 1430                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1252  
